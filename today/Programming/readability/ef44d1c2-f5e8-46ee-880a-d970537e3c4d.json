{
  "id": "ef44d1c2-f5e8-46ee-880a-d970537e3c4d",
  "title": "Algebraic Effects for the Rest of Us",
  "link": "https://overreacted.io/algebraic-effects-for-the-rest-of-us/",
  "description": "They‚Äôre not burritos.",
  "author": "",
  "published": "Sun, 21 Jul 2019 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 19644,
  "excerpt": "They‚Äôre not burritos.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "Have you heard about algebraic effects? My first attempts to figure out what they are or why I should care about them were unsuccessful. I found a few pdfs but they only confused me more. (There‚Äôs something about academic pdfs that makes me sleepy.) But my colleague Sebastian kept¬†referring to them as a mental model for some things we do inside of React. (Sebastian works on the React team and came up with quite a few ideas, including Hooks and Suspense.) At some point, it became a running joke on the React team, with many of our conversations ending with: It turned out that algebraic effects are a cool concept and not as scary as I thought from those pdfs. If you‚Äôre just using React, you don‚Äôt need to know anything about them ‚Äî but if you‚Äôre feeling curious, like I was, read on. (Disclaimer: I‚Äôm not a programming language researcher, and might have messed something up in my explanation. I am not an authority on this topic so let me know!) Not Production Ready Yet Algebraic Effects are a research programming language feature. This means that unlike if, functions, or even async / await, you probably can‚Äôt really use them in production yet. They are only supported by a few languages that were created specifically to explore that idea. There is progress on productionizing them in OCaml which is‚Ä¶ still ongoing. In other words, Can‚Äôt Touch This. Edit: a few people mentioned that LISP languages do offer something similar, so you can use it in production if you write LISP. So Why Should I Care? Imagine that you‚Äôre writing code with goto, and somebody shows you if and for statements. Or maybe you‚Äôre deep in the callback hell, and somebody shows you async / await. Pretty cool, huh? If you‚Äôre the kind of person who likes to learn about programming ideas several years before they hit the mainstream, it might be a good time to get curious about algebraic effects. Don‚Äôt feel like you have to though. It is a bit like thinking about async / await in 1999. Okay, What Are Algebraic Effects? The name might be a bit intimidating but the idea is simple. If you‚Äôre familiar with try / catch blocks, you‚Äôll figure out algebraic effects very fast. Let‚Äôs recap try / catch first. Say you have a function that throws. Maybe there‚Äôs a bunch of functions between it and the catch block: function getName(user) { let name = user.name; if (name === null) { throw new Error('A girl has no name'); } return name; } function makeFriends(user1, user2) { user1.friendNames.push(getName(user2)); user2.friendNames.push(getName(user1)); } const arya = { name: null, friendNames: [] }; const gendry = { name: 'Gendry', friendNames: [] }; try { makeFriends(arya, gendry); } catch (err) { console.log(\"Oops, that didn't work out: \", err); } We throw inside getName, but it ‚Äúbubbles‚Äù up right through makeFriends to the closest catch block. This is an important property of try / catch. Things in the middle don‚Äôt need to concern themselves with error handling. Unlike error codes in languages like C, with try / catch, you don‚Äôt have to manually pass errors through every intermediate layer in the fear of losing them. They get propagated automatically. What Does This Have to Do With Algebraic Effects? In the above example, once we hit an error, we can‚Äôt continue. When we end up in the catch block, there‚Äôs no way we can continue executing the original code. We‚Äôre done. It‚Äôs too late. The best we can do is to recover from a failure and maybe somehow retry what we were doing, but we can‚Äôt magically ‚Äúgo back‚Äù to where we were, and do something different. But with algebraic effects, we can. This is an example written in a hypothetical JavaScript dialect (let‚Äôs call it ES2025 just for kicks) that lets us recover from a missing user.name: function getName(user) { let name = user.name; if (name === null) { name = perform 'ask_name'; } return name; } function makeFriends(user1, user2) { user1.friendNames.push(getName(user2)); user2.friendNames.push(getName(user1)); } const arya = { name: null, friendNames: [] }; const gendry = { name: 'Gendry', friendNames: [] }; try { makeFriends(arya, gendry); } handle (effect) { if (effect === 'ask_name') { resume with 'Arya Stark'; } } (I apologize to all readers from 2025 who search the web for ‚ÄúES2025‚Äù and find this article. If algebraic effects are a part of JavaScript by then, I‚Äôd be happy to update it!) Instead of throw, we use a hypothetical perform keyword. Similarly, instead of try / catch, we use a hypothetical try / handle. The exact syntax doesn‚Äôt matter here ‚Äî I just came up with something to illustrate the idea. So what‚Äôs happening? Let‚Äôs take a closer look. Instead of throwing an error, we perform an effect. Just like we can throw any value, we can pass any value to perform. In this example, I‚Äôm passing a string, but it could be an object, or any other data type: function getName(user) { let name = user.name; if (name === null) { name = perform 'ask_name'; } return name; } When we throw an error, the engine looks for the closest try / catch error handler up the call stack. Similarly, when we perform an effect, the engine would search for the closest try / handle effect handler up the call stack: try { makeFriends(arya, gendry); } handle (effect) { if (effect === 'ask_name') { resume with 'Arya Stark'; } } This effect lets us decide how to handle the case where a name is missing. The novel part here (compared to exceptions) is the hypothetical resume with: try { makeFriends(arya, gendry); } handle (effect) { if (effect === 'ask_name') { resume with 'Arya Stark'; } } This is the part you can‚Äôt do with try / catch. It lets us jump back to where we performed the effect, and pass something back to it from the handler. ü§Ø function getName(user) { let name = user.name; if (name === null) { // 1. We perform an effect here name = perform 'ask_name'; // 4. ...and end up back here (name is now 'Arya Stark') } return name; } // ... try { makeFriends(arya, gendry); } handle (effect) { // 2. We jump to the handler (like try/catch) if (effect === 'ask_name') { // 3. However, we can resume with a value (unlike try/catch!) resume with 'Arya Stark'; } } This takes a bit of time to get comfortable with, but it‚Äôs really not much different conceptually from a ‚Äúresumable try / catch‚Äù. Note, however, that algebraic effects are much more flexible than try / catch, and recoverable errors are just one of many possible use cases. I started with it only because I found it easiest to wrap my mind around it. A Function Has No Color Algebraic effects have interesting implications for asynchronous code. In languages with an async / await, functions usually have a ‚Äúcolor‚Äù. For example, in JavaScript we can‚Äôt just make getName asynchronous without also ‚Äúinfecting‚Äù makeFriends and its callers with being async. This can be a real pain if a piece of code sometimes needs to be sync, and sometimes needs to be async. // If we want to make this async... async getName(user) { // ... } // Then this has to be async too... async function makeFriends(user1, user2) { user1.friendNames.push(await getName(user2)); user2.friendNames.push(await getName(user1)); } // And so on... JavaScript generators are similar: if you‚Äôre working with generators, things in the middle also have to be aware of generators. So how is that relevant? For a moment, let‚Äôs forget about async / await and get back to our example: function getName(user) { let name = user.name; if (name === null) { name = perform 'ask_name'; } return name; } function makeFriends(user1, user2) { user1.friendNames.push(getName(user2)); user2.friendNames.push(getName(user1)); } const arya = { name: null, friendNames: [] }; const gendry = { name: 'Gendry', friendNames: [] }; try { makeFriends(arya, gendry); } handle (effect) { if (effect === 'ask_name') { resume with 'Arya Stark'; } } What if our effect handler didn‚Äôt know the ‚Äúfallback name‚Äù synchronously? What if we wanted to fetch it from a database? It turns out, we can call resume with asynchronously from our effect handler without making any changes to getName or makeFriends: function getName(user) { let name = user.name; if (name === null) { name = perform 'ask_name'; } return name; } function makeFriends(user1, user2) { user1.friendNames.push(getName(user2)); user2.friendNames.push(getName(user1)); } const arya = { name: null, friendNames: [] }; const gendry = { name: 'Gendry', friendNames: [] }; try { makeFriends(arya, gendry); } handle (effect) { if (effect === 'ask_name') { setTimeout(() =\u003e { resume with 'Arya Stark'; }, 1000); } } In this example, we don‚Äôt call resume with until a second later. You can think of resume with as a callback which you may only call once. (You can also impress your friends by calling it a ‚Äúone-shot delimited continuation.‚Äù) Now the mechanics of algebraic effects should be a bit clearer. When we throw an error, the JavaScript engine ‚Äúunwinds the stack‚Äù, destroying local variables in the process. However, when we perform an effect, our hypothetical engine would create a callback with the rest of our function, and resume with calls it. Again, a reminder: the concrete syntax and specific keywords are made up for this article. They‚Äôre not the point, the point is in the mechanics. A Note on Purity It‚Äôs worth noting that algebraic effects came out of functional programming research. Some of the problems they solve are unique to pure functional programming. For example, in languages that don‚Äôt allow arbitrary side effects (like Haskell), you have to use concepts like Monads to wire effects through your program. If you ever read a Monad tutorial, you know they‚Äôre a bit tricky to think about. Algebraic effects help do something similar with less ceremony. This is why so much discussion about algebraic effects is incomprehensible to me. (I don‚Äôt know Haskell and friends.) However, I do think that even in an impure language like JavaScript, algebraic effects can be a very powerful instrument to separate the what from the how in the code. They let you write code that focuses on what you‚Äôre doing: function enumerateFiles(dir) { const contents = perform OpenDirectory(dir); perform Log('Enumerating files in ', dir); for (let file of contents.files) { perform HandleFile(file); } perform Log('Enumerating subdirectories in ', dir); for (let directory of contents.dir) { // We can use recursion or call other functions with effects enumerateFiles(directory); } perform Log('Done'); } And later wrap it with something that specifies how: let files = []; try { enumerateFiles('C:\\\\'); } handle (effect) { if (effect instanceof Log) { myLoggingLibrary.log(effect.message); resume; } else if (effect instanceof OpenDirectory) { myFileSystemImpl.openDir(effect.dirName, (contents) =\u003e { resume with contents; }); } else if (effect instanceof HandleFile) { files.push(effect.fileName); resume; } } // The `files` array now has all the files Which means that those pieces can even become librarified: import { withMyLoggingLibrary } from 'my-log'; import { withMyFileSystem } from 'my-fs'; function ourProgram() { enumerateFiles('C:\\\\'); } withMyLoggingLibrary(() =\u003e { withMyFileSystem(() =\u003e { ourProgram(); }); }); Unlike async / await or Generators, algebraic effects don‚Äôt require complicating functions ‚Äúin the middle‚Äù. Our enumerateFiles call could be deep within ourProgram, but as long as there‚Äôs an effect handler somewhere above for each of the effects it may perform, our code would still work. Effect handlers let us decouple the program logic from its concrete effect implementations without too much ceremony or boilerplate code. For example, we could completely override the behavior in tests to use a fake filesystem and to snapshot logs instead of outputting them to the console: import { withFakeFileSystem } from 'fake-fs'; function withLogSnapshot(fn) { let logs = []; try { fn(); } handle (effect) { if (effect instanceof Log) { logs.push(effect.message); resume; } } // Snapshot emitted logs. expect(logs).toMatchSnapshot(); } test('my program', () =\u003e { const fakeFiles = [/* ... */]; withFakeFileSystem(fakeFiles, () =\u003e { withLogSnapshot(() =\u003e { ourProgram(); }); }); }); Because there is no ‚Äúfunction color‚Äù (code in the middle doesn‚Äôt need to be aware of effects) and effect handlers are composable (you can nest them), you can create very expressive abstractions with them. A Note on Types Because algebraic effects are coming from statically typed languages, much of the debate about them centers on the ways they can be expressed in types. This is no doubt important but can also make it challenging to grasp the concept. That‚Äôs why this article doesn‚Äôt talk about types at all. However, I should note that usually the fact that a function can perform an effect would be encoded into its type signature. So you shouldn‚Äôt end up in a situation where random effects are happening and you can‚Äôt trace where they‚Äôre coming from. You might argue that algebraic effects technically do ‚Äúgive color‚Äù to functions in statically typed languages because effects are a part of the type signature. That‚Äôs true. However, fixing a type annotation for an intermediate function to include a new effect is not by itself a semantic change ‚Äî unlike adding async or turning a function into a generator. Inference can also help avoid cascading changes. An important difference is you can ‚Äúbottle up‚Äù an effect by providing a noop or a mock implementation (for example, a sync call for an async effect), which lets you prevent it from reaching the outer code if necessary ‚Äî or turn it into a different effect. Should We Add Algebraic Effects to JavaScript? Honestly, I don‚Äôt know. They are very powerful, and you can make an argument that they might be too powerful for a language like JavaScript. I think they could be a great fit for a language where mutation is uncommon, and where the standard library fully embraced effects. If you primarily do perform Timeout(1000), perform Fetch('http://google.com'), and perform ReadFile('file.txt'), and your language has pattern matching and static typing for effects, it might be a very nice programming environment. Maybe that language could even compile to JavaScript! How Is All of This Relevant to React? Not that much. You can even say it‚Äôs a stretch. If you watched my talk about Time Slicing and Suspense, the second part involves components reading data from a cache: function MovieDetails({ id }) { // What if it's still being fetched? const movie = movieCache.read(id); } (The talk uses a slightly different API but that‚Äôs not the point.) This builds on a React feature called ‚ÄúSuspense‚Äù, which is in active development for the data fetching use case. The interesting part, of course, is that the data might not yet be in the movieCache ‚Äî in which case we need to do something because we can‚Äôt proceed below. Technically, in that case the read() call throws a Promise (yes, throws a Promise ‚Äî let that sink in). This ‚Äúsuspends‚Äù the execution. React catches that Promise, and remembers to retry rendering the component tree after the thrown Promise resolves. This isn‚Äôt an algebraic effect per se, even though this trick was inspired by them. But it achieves the same goal: some code below in the call stack yields to something above in the call stack (React, in this case) without all the intermediate functions necessarily knowing about it or being ‚Äúpoisoned‚Äù by async or generators. Of course, we can‚Äôt really resume execution in JavaScript later, but from React‚Äôs point of view, re-rendering a component tree when the Promise resolves is pretty much the same thing. You can cheat when your programming model assumes idempotence! Hooks are another example that might remind you of algebraic effects. One of the first questions that people ask is: how can a useState call possibly know which component it refers to? function LikeButton() { // How does useState know which component it's in? const [isLiked, setIsLiked] = useState(false); } I already explained the answer near the end of this article: there is a ‚Äúcurrent dispatcher‚Äù mutable state on the React object which points to the implementation you‚Äôre using right now (such as the one in react-dom). There is similarly a ‚Äúcurrent component‚Äù property that points to our LikeButton‚Äôs internal data structure. That‚Äôs how useState knows what to do. Before people get used to it, they often think it‚Äôs a bit ‚Äúdirty‚Äù for an obvious reason. It doesn‚Äôt ‚Äúfeel right‚Äù to rely on shared mutable state. (Side note: how do you think try / catch is implemented in a JavaScript engine?) However, conceptually you can think of useState() as of being a perform State() effect which is handled by React when executing your component. That would ‚Äúexplain‚Äù why React (the thing calling your component) can provide state to it (it‚Äôs above in the call stack, so it can provide the effect handler). Indeed, implementing state is one of the most common examples in the algebraic effect tutorials I‚Äôve encountered. Again, of course, that‚Äôs not how React actually works because we don‚Äôt have algebraic effects in JavaScript. Instead, there is a hidden field where we keep the current component, as well as a field that points to the current ‚Äúdispatcher‚Äù with the useState implementation. As a performance optimization, there are even separate useState implementations for mounts and updates. But if you squint at this code very hard, you might see them as essentially effect handlers. To sum up, in JavaScript, throwing can serve as a crude approximation for IO effects (as long as it‚Äôs safe to re-execute the code later, and as long as it‚Äôs not CPU-bound), and having a mutable ‚Äúdispatcher‚Äù field that‚Äôs restored in try / finally can serve as a crude approximation for synchronous effect handlers. You can also get a much higher fidelity effect implementation with generators but that means you‚Äôll have to give up on the ‚Äútransparent‚Äù nature of JavaScript functions and you‚Äôll have to make everything a generator. Which is‚Ä¶ yeah. Learn More Personally, I was surprised by how much algebraic effects made sense to me. I always struggled understanding abstract concepts like Monads, but Algebraic Effects just ‚Äúclicked‚Äù. I hope this article will help them ‚Äúclick‚Äù for you too. I don‚Äôt know if they‚Äôre ever going to reach mainstream adoption. I think I‚Äôll be disappointed if they don‚Äôt catch on in any mainstream language by 2025. Remind me to check back in five years! I‚Äôm sure there‚Äôs so much more you can do with them ‚Äî but it‚Äôs really difficult to get a sense of their power without actually writing code this way. If this post made you curious, here‚Äôs a few more resources you might want to check out: https://github.com/ocamllabs/ocaml-effects-tutorial https://www.janestreet.com/tech-talks/effective-programming/ https://www.youtube.com/watch?v=hrBq8R_kxI0 Many people also pointed out that if you omit the typing aspects (as I did in this article), you can find much earlier prior art for this in the condition system in Common Lisp. You might also enjoy reading James Long‚Äôs post on continuations that explains how the call/cc primitive can also serve as a foundation for building resumable exceptions in userland. If you find other useful resources on algebraic effects for people with JavaScript background, please let me know on Twitter!Discuss on ùïè¬†¬†¬∑¬†¬†Edit on GitHub",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eHave you heard about \u003cem\u003ealgebraic effects\u003c/em\u003e?\u003c/p\u003e\n\u003cp\u003eMy first attempts to figure out what they are or why I should care about them were unsuccessful. I found a \u003ca target=\"_blank\" href=\"https://www.eff-lang.org/handlers-tutorial.pdf\"\u003efew\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf\"\u003epdfs\u003c/a\u003e but they only confused me more. (There‚Äôs something about academic pdfs that makes me sleepy.)\u003c/p\u003e\n\u003cp\u003eBut my colleague Sebastian \u003ca target=\"_blank\" href=\"https://mobile.twitter.com/sebmarkbage/status/763792452289343490\"\u003ekept\u003c/a\u003e¬†\u003ca target=\"_blank\" href=\"https://mobile.twitter.com/sebmarkbage/status/776883429400915968\"\u003ereferring\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://mobile.twitter.com/sebmarkbage/status/776840575207116800\"\u003eto\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://mobile.twitter.com/sebmarkbage/status/969279885276454912\"\u003ethem\u003c/a\u003e as a mental model for some things we do inside of React. (Sebastian works on the React team and came up with quite a few ideas, including Hooks and Suspense.) At some point, it became a running joke on the React team, with many of our conversations ending with:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/algebraic-effects-for-the-rest-of-us/effects.jpg\" alt=\"\u0026#34;Algebraic Effects\u0026#34; caption on the \u0026#34;Ancient Aliens\u0026#34; guy meme\"/\u003e\u003c/p\u003e\n\u003cp\u003eIt turned out that algebraic effects are a cool concept and not as scary as I thought from those pdfs. \u003cstrong\u003eIf you‚Äôre just using React, you don‚Äôt need to know anything about them ‚Äî but if you‚Äôre feeling curious, like I was, read on.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(Disclaimer: I‚Äôm not a programming language researcher, and might have messed something up in my explanation. I am not an authority on this topic so let me know!)\u003c/em\u003e\u003c/p\u003e\n\u003ch3\u003eNot Production Ready Yet\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003eAlgebraic Effects\u003c/em\u003e are a research programming language feature. This means that \u003cstrong\u003eunlike \u003ccode\u003eif\u003c/code\u003e, functions, or even \u003ccode\u003easync / await\u003c/code\u003e, you probably can‚Äôt really use them in production yet.\u003c/strong\u003e They are only supported by a \u003ca target=\"_blank\" href=\"https://www.eff-lang.org/\"\u003efew\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://www.microsoft.com/en-us/research/project/koka/\"\u003elanguages\u003c/a\u003e that were created specifically to explore that idea. There is progress on productionizing them in OCaml which is‚Ä¶ still \u003ca target=\"_blank\" href=\"https://github.com/ocaml-multicore/ocaml-multicore/wiki\"\u003eongoing\u003c/a\u003e. In other words, \u003ca target=\"_blank\" href=\"https://www.youtube.com/watch?v=otCpCn0l4Wo\"\u003eCan‚Äôt Touch This\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEdit: a few people mentioned that LISP languages \u003ca target=\"_blank\" href=\"#learn-more\"\u003edo offer something similar\u003c/a\u003e, so you can use it in production if you write LISP.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3\u003eSo Why Should I Care?\u003c/h3\u003e\n\u003cp\u003eImagine that you‚Äôre writing code with \u003ccode\u003egoto\u003c/code\u003e, and somebody shows you \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003efor\u003c/code\u003e statements. Or maybe you‚Äôre deep in the callback hell, and somebody shows you \u003ccode\u003easync / await\u003c/code\u003e. Pretty cool, huh?\u003c/p\u003e\n\u003cp\u003eIf you‚Äôre the kind of person who likes to learn about programming ideas several years before they hit the mainstream, it might be a good time to get curious about algebraic effects. Don‚Äôt feel like you \u003cem\u003ehave to\u003c/em\u003e though. It is a bit like thinking about \u003ccode\u003easync / await\u003c/code\u003e in 1999.\u003c/p\u003e\n\u003ch3\u003eOkay, What Are Algebraic Effects?\u003c/h3\u003e\n\u003cp\u003eThe name might be a bit intimidating but the idea is simple. If you‚Äôre familiar with \u003ccode\u003etry / catch\u003c/code\u003e blocks, you‚Äôll figure out algebraic effects very fast.\u003c/p\u003e\n\u003cp\u003eLet‚Äôs recap \u003ccode\u003etry / catch\u003c/code\u003e first. Say you have a function that throws. Maybe there‚Äôs a bunch of functions between it and the \u003ccode\u003ecatch\u003c/code\u003e block:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003ethrow\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eError\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eA girl has no name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user2\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003egendry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eGendry\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e gendry\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecatch\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eerr\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eOops, that didn\u0026#39;t work out: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e err\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe \u003ccode\u003ethrow\u003c/code\u003e inside \u003ccode\u003egetName\u003c/code\u003e, but it ‚Äúbubbles‚Äù up right through \u003ccode\u003emakeFriends\u003c/code\u003e to the closest \u003ccode\u003ecatch\u003c/code\u003e block. This is an important property of \u003ccode\u003etry / catch\u003c/code\u003e. \u003cstrong\u003eThings in the middle don‚Äôt need to concern themselves with error handling.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eUnlike error codes in languages like C, with \u003ccode\u003etry / catch\u003c/code\u003e, you don‚Äôt have to manually pass errors through every intermediate layer in the fear of losing them. They get propagated automatically.\u003c/p\u003e\n\u003ch3\u003eWhat Does This Have to Do With Algebraic Effects?\u003c/h3\u003e\n\u003cp\u003eIn the above example, once we hit an error, we can‚Äôt continue. When we end up in the \u003ccode\u003ecatch\u003c/code\u003e block, there‚Äôs no way we can continue executing the original code.\u003c/p\u003e\n\u003cp\u003eWe‚Äôre done. It‚Äôs too late. The best we can do is to recover from a failure and maybe somehow retry what we were doing, but we can‚Äôt magically ‚Äúgo back‚Äù to where we were, and do something different. \u003cstrong\u003eBut with algebraic effects, \u003cem\u003ewe can\u003c/em\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis is an example written in a hypothetical JavaScript dialect (let‚Äôs call it ES2025 just for kicks) that lets us \u003cem\u003erecover\u003c/em\u003e from a missing \u003ccode\u003euser.name\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \tname \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e perform \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user2\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003egendry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eGendry\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e gendry\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \tresume \u003c/span\u003e\u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eArya Stark\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(I apologize to all readers from 2025 who search the web for ‚ÄúES2025‚Äù and find this article. If algebraic effects are a part of JavaScript by then, I‚Äôd be happy to update it!)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eInstead of \u003ccode\u003ethrow\u003c/code\u003e, we use a hypothetical \u003ccode\u003eperform\u003c/code\u003e keyword. Similarly, instead of \u003ccode\u003etry / catch\u003c/code\u003e, we use a hypothetical \u003ccode\u003etry / handle\u003c/code\u003e. \u003cstrong\u003eThe exact syntax doesn‚Äôt matter here ‚Äî I just came up with something to illustrate the idea.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSo what‚Äôs happening? Let‚Äôs take a closer look.\u003c/p\u003e\n\u003cp\u003eInstead of throwing an error, we \u003cem\u003eperform an effect\u003c/em\u003e. Just like we can \u003ccode\u003ethrow\u003c/code\u003e any value, we can pass any value to \u003ccode\u003eperform\u003c/code\u003e. In this example, I‚Äôm passing a string, but it could be an object, or any other data type:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \tname \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e perform \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we \u003ccode\u003ethrow\u003c/code\u003e an error, the engine looks for the closest \u003ccode\u003etry / catch\u003c/code\u003e error handler up the call stack. Similarly, when we \u003ccode\u003eperform\u003c/code\u003e an effect, the engine would search for the closest \u003ccode\u003etry / handle\u003c/code\u003e \u003cem\u003eeffect handler\u003c/em\u003e up the call stack:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e gendry\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \tresume \u003c/span\u003e\u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eArya Stark\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis effect lets us decide how to handle the case where a name is missing. The novel part here (compared to exceptions) is the hypothetical \u003ccode\u003eresume with\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e gendry\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \tresume \u003c/span\u003e\u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eArya Stark\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is the part you can‚Äôt do with \u003ccode\u003etry / catch\u003c/code\u003e. It lets us \u003cstrong\u003ejump back to where we performed the effect, and pass something back to it from the handler\u003c/strong\u003e. ü§Ø\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003e// 1. We perform an effect here\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \tname \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e perform \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003e// 4. ...and end up back here (name is now \u0026#39;Arya Stark\u0026#39;)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e gendry\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// 2. We jump to the handler (like try/catch)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003e// 3. However, we can resume with a value (unlike try/catch!)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \tresume \u003c/span\u003e\u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eArya Stark\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis takes a bit of time to get comfortable with, but it‚Äôs really not much different conceptually from a ‚Äúresumable \u003ccode\u003etry / catch\u003c/code\u003e‚Äù.\u003c/p\u003e\n\u003cp\u003eNote, however, that \u003cstrong\u003ealgebraic effects are much more flexible than \u003ccode\u003etry / catch\u003c/code\u003e, and recoverable errors are just one of many possible use cases.\u003c/strong\u003e I started with it only because I found it easiest to wrap my mind around it.\u003c/p\u003e\n\u003ch3\u003eA Function Has No Color\u003c/h3\u003e\n\u003cp\u003eAlgebraic effects have interesting implications for asynchronous code.\u003c/p\u003e\n\u003cp\u003eIn languages with an \u003ccode\u003easync / await\u003c/code\u003e, \u003ca target=\"_blank\" href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\"\u003efunctions usually have a ‚Äúcolor‚Äù\u003c/a\u003e. For example, in JavaScript we can‚Äôt just make \u003ccode\u003egetName\u003c/code\u003e asynchronous without also ‚Äúinfecting‚Äù \u003ccode\u003emakeFriends\u003c/code\u003e and its callers with being \u003ccode\u003easync\u003c/code\u003e. This can be a real pain if \u003cem\u003ea piece of code sometimes needs to be sync, and sometimes needs to be async\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e// If we want to make this async...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync \u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// Then this has to be async too...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user2\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// And so on...\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eJavaScript generators are \u003ca target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\"\u003esimilar\u003c/a\u003e: if you‚Äôre working with generators, things in the middle also have to be aware of generators.\u003c/p\u003e\n\u003cp\u003eSo how is that relevant?\u003c/p\u003e\n\u003cp\u003eFor a moment, let‚Äôs forget about \u003ccode\u003easync / await\u003c/code\u003e and get back to our example:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \tname \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e perform \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user2\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003egendry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eGendry\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e gendry\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \tresume \u003c/span\u003e\u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eArya Stark\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat if our effect handler didn‚Äôt know the ‚Äúfallback name‚Äù synchronously? What if we wanted to fetch it from a database?\u003c/p\u003e\n\u003cp\u003eIt turns out, we can call \u003ccode\u003eresume with\u003c/code\u003e asynchronously from our effect handler without making any changes to \u003ccode\u003egetName\u003c/code\u003e or \u003ccode\u003emakeFriends\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ename \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \tname \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e perform \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user2\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euser2\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003egetName\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser1\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003egendry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eGendry\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efriendNames\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003emakeFriends\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003earya\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e gendry\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eask_name\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      resume \u003c/span\u003e\u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eArya Stark\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this example, we don‚Äôt call \u003ccode\u003eresume with\u003c/code\u003e until a second later. You can think of \u003ccode\u003eresume with\u003c/code\u003e as a callback which you may only call once. (You can also impress your friends by calling it a ‚Äúone-shot delimited continuation.‚Äù)\u003c/p\u003e\n\u003cp\u003eNow the mechanics of algebraic effects should be a bit clearer. When we \u003ccode\u003ethrow\u003c/code\u003e an error, the JavaScript engine ‚Äúunwinds the stack‚Äù, destroying local variables in the process. However, when we \u003ccode\u003eperform\u003c/code\u003e an effect, our hypothetical engine would \u003cem\u003ecreate a callback\u003c/em\u003e with the rest of our function, and \u003ccode\u003eresume with\u003c/code\u003e calls it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAgain, a reminder: the concrete syntax and specific keywords are made up for this article. They‚Äôre not the point, the point is in the mechanics.\u003c/strong\u003e\u003c/p\u003e\n\u003ch3\u003eA Note on Purity\u003c/h3\u003e\n\u003cp\u003eIt‚Äôs worth noting that algebraic effects came out of functional programming research. Some of the problems they solve are unique to pure functional programming. For example, in languages that \u003cem\u003edon‚Äôt\u003c/em\u003e allow arbitrary side effects (like Haskell), you have to use concepts like Monads to wire effects through your program. If you ever read a Monad tutorial, you know they‚Äôre a bit tricky to think about. Algebraic effects help do something similar with less ceremony.\u003c/p\u003e\n\u003cp\u003eThis is why so much discussion about algebraic effects is incomprehensible to me. (I \u003ca href=\"https://overreacted.io/things-i-dont-know-as-of-2018/\"\u003edon‚Äôt know\u003c/a\u003e Haskell and friends.) However, I do think that even in an impure language like JavaScript, \u003cstrong\u003ealgebraic effects can be a very powerful instrument to separate the \u003cem\u003ewhat\u003c/em\u003e from the \u003cem\u003ehow\u003c/em\u003e in the code.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThey let you write code that focuses on \u003cem\u003ewhat\u003c/em\u003e you‚Äôre doing:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eenumerateFiles\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edir\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003econtents\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eperform\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eOpenDirectory\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edir\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  perform \u003c/span\u003e\u003cspan\u003eLog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eEnumerating files in \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e dir\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econtents\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efiles\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \tperform \u003c/span\u003e\u003cspan\u003eHandleFile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  perform \u003c/span\u003e\u003cspan\u003eLog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eEnumerating subdirectories in \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e dir\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003edirectory\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econtents\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edir\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003e// We can use recursion or call other functions with effects\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003eenumerateFiles\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edirectory\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  perform \u003c/span\u003e\u003cspan\u003eLog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eDone\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd later wrap it with something that specifies \u003cem\u003ehow\u003c/em\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003efiles\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eenumerateFiles\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eC:\u003c/span\u003e\u003cspan\u003e\\\\\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003einstanceof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLog\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003emyLoggingLibrary\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \tresume\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003einstanceof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eOpenDirectory\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003emyFileSystemImpl\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eopenDir\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edirName\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econtents\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      resume \u003c/span\u003e\u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e contents\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003einstanceof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eHandleFile\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efiles\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efileName\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    resume\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e// The `files` array now has all the files\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhich means that those pieces can even become librarified:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e withMyLoggingLibrary \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003emy-log\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e withMyFileSystem \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003emy-fs\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eourProgram\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eenumerateFiles\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eC:\u003c/span\u003e\u003cspan\u003e\\\\\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewithMyLoggingLibrary\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ewithMyFileSystem\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eourProgram\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUnlike \u003ccode\u003easync / await\u003c/code\u003e or Generators, \u003cstrong\u003ealgebraic effects don‚Äôt require complicating functions ‚Äúin the middle‚Äù\u003c/strong\u003e. Our \u003ccode\u003eenumerateFiles\u003c/code\u003e call could be deep within \u003ccode\u003eourProgram\u003c/code\u003e, but as long as there‚Äôs an effect handler \u003cem\u003esomewhere above\u003c/em\u003e for each of the effects it may perform, our code would still work.\u003c/p\u003e\n\u003cp\u003eEffect handlers let us decouple the program logic from its concrete effect implementations without too much ceremony or boilerplate code. For example, we could completely override the behavior in tests to use a fake filesystem and to snapshot logs instead of outputting them to the console:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e withFakeFileSystem \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003efake-fs\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewithLogSnapshot\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003elogs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003etry\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003efn\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect \u003c/span\u003e\u003cspan\u003einstanceof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLog\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \t  \u003c/span\u003e\u003cspan\u003elogs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eeffect\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \t  resume\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Snapshot emitted logs.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eexpect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elogs\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003etoMatchSnapshot\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003etest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003emy program\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003efakeFiles\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e/* ... */\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ewithFakeFileSystem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efakeFiles\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003ewithLogSnapshot\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\t  \u003c/span\u003e\u003cspan\u003eourProgram\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \t\u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBecause there is no \u003ca target=\"_blank\" href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\"\u003e‚Äúfunction color‚Äù\u003c/a\u003e (code in the middle doesn‚Äôt need to be aware of effects) and effect handlers are \u003cem\u003ecomposable\u003c/em\u003e (you can nest them), you can create very expressive abstractions with them.\u003c/p\u003e\n\u003ch3\u003eA Note on Types\u003c/h3\u003e\n\u003cp\u003eBecause algebraic effects are coming from statically typed languages, much of the debate about them centers on the ways they can be expressed in types. This is no doubt important but can also make it challenging to grasp the concept. That‚Äôs why this article doesn‚Äôt talk about types at all. However, I should note that usually the fact that a function can perform an effect would be encoded into its type signature. So you shouldn‚Äôt end up in a situation where random effects are happening and you can‚Äôt trace where they‚Äôre coming from.\u003c/p\u003e\n\u003cp\u003eYou might argue that algebraic effects technically do \u003ca target=\"_blank\" href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\"\u003e‚Äúgive color‚Äù\u003c/a\u003e to functions in statically typed languages because effects are a part of the type signature. That‚Äôs true. However, fixing a type annotation for an intermediate function to include a new effect is not by itself a semantic change ‚Äî unlike adding \u003ccode\u003easync\u003c/code\u003e or turning a function into a generator. Inference can also help avoid cascading changes. An important difference is you can ‚Äúbottle up‚Äù an effect by providing a noop or a mock implementation (for example, a sync call for an async effect), which lets you prevent it from reaching the outer code if necessary ‚Äî or turn it into a different effect.\u003c/p\u003e\n\u003ch3\u003eShould We Add Algebraic Effects to JavaScript?\u003c/h3\u003e\n\u003cp\u003eHonestly, I don‚Äôt know. They are very powerful, and you can make an argument that they might be \u003cem\u003etoo\u003c/em\u003e powerful for a language like JavaScript.\u003c/p\u003e\n\u003cp\u003eI think they could be a great fit for a language where mutation is uncommon, and where the standard library fully embraced effects. If you primarily do \u003ccode\u003eperform Timeout(1000)\u003c/code\u003e, \u003ccode\u003eperform Fetch(\u0026#39;http://google.com\u0026#39;)\u003c/code\u003e, and \u003ccode\u003eperform ReadFile(\u0026#39;file.txt\u0026#39;)\u003c/code\u003e, and your language has pattern matching and static typing for effects, it might be a very nice programming environment.\u003c/p\u003e\n\u003cp\u003eMaybe that language could even compile to JavaScript!\u003c/p\u003e\n\u003ch3\u003eHow Is All of This Relevant to React?\u003c/h3\u003e\n\u003cp\u003eNot that much. You can even say it‚Äôs a stretch.\u003c/p\u003e\n\u003cp\u003eIf you watched \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\"\u003emy talk about Time Slicing and Suspense\u003c/a\u003e, the second part involves components reading data from a cache:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMovieDetails\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ id }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// What if it\u0026#39;s still being fetched?\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003emovie\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e movieCache\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eread\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(The talk uses a slightly different API but that‚Äôs not the point.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis builds on a React feature called ‚ÄúSuspense‚Äù, which is in active development for the data fetching use case. The interesting part, of course, is that the data might not yet be in the \u003ccode\u003emovieCache\u003c/code\u003e ‚Äî in which case we need to do \u003cem\u003esomething\u003c/em\u003e because we can‚Äôt proceed below. Technically, in that case the \u003ccode\u003eread()\u003c/code\u003e call throws a Promise (yes, \u003cem\u003ethrows\u003c/em\u003e a Promise ‚Äî let that sink in). This ‚Äúsuspends‚Äù the execution. React catches that Promise, and remembers to retry rendering the component tree after the thrown Promise resolves.\u003c/p\u003e\n\u003cp\u003eThis isn‚Äôt an algebraic effect per se, even though this trick was \u003ca target=\"_blank\" href=\"https://mobile.twitter.com/sebmarkbage/status/941214259505119232\"\u003einspired\u003c/a\u003e by them. But it achieves the same goal: some code below in the call stack yields to something above in the call stack (React, in this case) without all the intermediate functions necessarily knowing about it or being ‚Äúpoisoned‚Äù by \u003ccode\u003easync\u003c/code\u003e or generators. Of course, we can‚Äôt really \u003cem\u003eresume\u003c/em\u003e execution in JavaScript later, but from React‚Äôs point of view, re-rendering a component tree when the Promise resolves is pretty much the same thing. You can cheat when your programming model \u003ca href=\"https://overreacted.io/react-as-a-ui-runtime/#purity\"\u003eassumes idempotence\u003c/a\u003e!\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-intro.html\"\u003eHooks\u003c/a\u003e are another example that might remind you of algebraic effects. One of the first questions that people ask is: how can a \u003ccode\u003euseState\u003c/code\u003e call possibly know which component it refers to?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eLikeButton\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// How does useState know which component it\u0026#39;s in?\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003eisLiked\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetIsLiked\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI already explained the answer \u003ca href=\"https://overreacted.io/how-does-setstate-know-what-to-do/\"\u003enear the end of this article\u003c/a\u003e: there is a ‚Äúcurrent dispatcher‚Äù mutable state on the React object which points to the implementation you‚Äôre using right now (such as the one in \u003ccode\u003ereact-dom\u003c/code\u003e). There is similarly a ‚Äúcurrent component‚Äù property that points to our \u003ccode\u003eLikeButton\u003c/code\u003e‚Äôs internal data structure. That‚Äôs how \u003ccode\u003euseState\u003c/code\u003e knows what to do.\u003c/p\u003e\n\u003cp\u003eBefore people get used to it, they often think it‚Äôs a bit ‚Äúdirty‚Äù for an obvious reason. It doesn‚Äôt ‚Äúfeel right‚Äù to rely on shared mutable state. \u003cem\u003e(Side note: how do you think \u003ccode\u003etry / catch\u003c/code\u003e is implemented in a JavaScript engine?)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eHowever, conceptually you can think of \u003ccode\u003euseState()\u003c/code\u003e as of being a \u003ccode\u003eperform State()\u003c/code\u003e effect which is handled by React when executing your component. That would ‚Äúexplain‚Äù why React (the thing calling your component) can provide state to it (it‚Äôs above in the call stack, so it can provide the effect handler). Indeed, \u003ca target=\"_blank\" href=\"https://github.com/ocamllabs/ocaml-effects-tutorial/#2-effectful-computations-in-a-pure-setting\"\u003eimplementing state\u003c/a\u003e is one of the most common examples in the algebraic effect tutorials I‚Äôve encountered.\u003c/p\u003e\n\u003cp\u003eAgain, of course, that‚Äôs not how React \u003cem\u003eactually\u003c/em\u003e works because we don‚Äôt have algebraic effects in JavaScript. Instead, there is a hidden field where we keep the current component, as well as a field that points to the current ‚Äúdispatcher‚Äù with the \u003ccode\u003euseState\u003c/code\u003e implementation. As a performance optimization, there are even separate \u003ccode\u003euseState\u003c/code\u003e implementations \u003ca target=\"_blank\" href=\"https://github.com/facebook/react/blob/2c4d61e1022ae383dd11fe237f6df8451e6f0310/packages/react-reconciler/src/ReactFiberHooks.js#L1260-L1290\"\u003efor mounts and updates\u003c/a\u003e. But if you squint at this code very hard, you might see them as essentially effect handlers.\u003c/p\u003e\n\u003cp\u003eTo sum up, in JavaScript, throwing can serve as a crude approximation for IO effects (as long as it‚Äôs safe to re-execute the code later, and as long as it‚Äôs not CPU-bound), and having a mutable ‚Äúdispatcher‚Äù field that‚Äôs restored in \u003ccode\u003etry / finally\u003c/code\u003e can serve as a crude approximation for synchronous effect handlers.\u003c/p\u003e\n\u003cp\u003eYou can also get a much higher fidelity effect implementation \u003ca target=\"_blank\" href=\"https://dev.to/yelouafi/algebraic-effects-in-javascript-part-4---implementing-algebraic-effects-and-handlers-2703\"\u003ewith generators\u003c/a\u003e but that means you‚Äôll have to give up on the ‚Äútransparent‚Äù nature of JavaScript functions and you‚Äôll have to make everything a generator. Which is‚Ä¶ yeah.\u003c/p\u003e\n\u003ch3\u003eLearn More\u003c/h3\u003e\n\u003cp\u003ePersonally, I was surprised by how much algebraic effects made sense to me. I always struggled understanding abstract concepts like Monads, but Algebraic Effects just ‚Äúclicked‚Äù. I hope this article will help them ‚Äúclick‚Äù for you too.\u003c/p\u003e\n\u003cp\u003eI don‚Äôt know if they‚Äôre ever going to reach mainstream adoption. I think I‚Äôll be disappointed if they don‚Äôt catch on in any mainstream language by 2025. Remind me to check back in five years!\u003c/p\u003e\n\u003cp\u003eI‚Äôm sure there‚Äôs so much more you can do with them ‚Äî but it‚Äôs really difficult to get a sense of their power without actually writing code this way. If this post made you curious, here‚Äôs a few more resources you might want to check out:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003ehttps://github.com/ocamllabs/ocaml-effects-tutorial\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ehttps://www.janestreet.com/tech-talks/effective-programming/\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ehttps://www.youtube.com/watch?v=hrBq8R_kxI0\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMany people also pointed out that if you omit the typing aspects (as I did in this article), you can find much earlier prior art for this in the \u003ca target=\"_blank\" href=\"https://en.wikibooks.org/wiki/Common_Lisp/Advanced_topics/Condition_System\"\u003econdition system\u003c/a\u003e in Common Lisp. You might also enjoy reading James Long‚Äôs \u003ca target=\"_blank\" href=\"https://jlongster.com/Whats-in-a-Continuation\"\u003epost on continuations\u003c/a\u003e that explains how the \u003ccode\u003ecall/cc\u003c/code\u003e primitive can also serve as a foundation for building resumable exceptions in userland.\u003c/p\u003e\n\u003cp\u003eIf you find other useful resources on algebraic effects for people with JavaScript background, please let me know on Twitter!\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://x.com/search?q=https%3A%2F%2Foverreacted.io%2Falgebraic-effects-for-the-rest-of-us%2F\"\u003eDiscuss on ùïè\u003c/a\u003e¬†¬†¬∑¬†¬†\u003ca target=\"_blank\" href=\"https://github.com/gaearon/overreacted.io/edit/main/public/algebraic-effects-for-the-rest-of-us/index.md\"\u003eEdit on GitHub\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "21 min read",
  "publishedTime": null,
  "modifiedTime": null
}
