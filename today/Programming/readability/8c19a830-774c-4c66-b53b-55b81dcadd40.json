{
  "id": "8c19a830-774c-4c66-b53b-55b81dcadd40",
  "title": "Building Postcards for “Airbnb” Scale",
  "link": "https://medium.com/airbnb-engineering/building-postcards-for-airbnb-scale-dfe0b71b12ec?source=rss----53c7c27702d5---4",
  "description": "",
  "author": "Leo Wong",
  "published": "Wed, 28 Aug 2024 16:01:39 GMT",
  "source": "https://medium.com/feed/airbnb-engineering",
  "categories": [
    "front-end-development",
    "image-processing",
    "internationalization",
    "engineering",
    "media-processing"
  ],
  "byline": "Leo Wong",
  "length": 11538,
  "excerpt": "How the Airbnb Media team built group travel Postcards for the 2024 Summer Release by leveraging a novel destination matching algorithm while advancing the platform’s image \u0026 localized text…",
  "siteName": "The Airbnb Tech Blog",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "By: Leo Wong, Henry JohnsonHow the Airbnb Media team built group travel Postcards for the 2024 Summer Release by leveraging a novel destination matching algorithm while advancing the platform’s image \u0026 localized text processing capabilities.IntroductionFor Airbnb’s 2024 Summer Release, the Media Ingestion team at Airbnb took on the exciting challenge of creating a reliable postcard generation system to generate unique, hand-crafted Postcards. Postcards are a beautiful way to invite guests on a trip while keeping friends and family in the loop (see announcement). This feature required a novel solution to match relevant postcards to every possible destination that guests booked on Airbnb. It needed to render performantly not only on all our client platforms (iOS, Android, and Web), but also on different messaging platforms outside the Airbnb app, all while maintaining Airbnb’s high design standards.ChallengesLocalized Text Layout: Postcards have strict design guidelines around character count per line, font leading \u0026 kerning per language, pixel perfect typography, line break rules, and language-specific styling.Design \u0026 Product Flexibility: Text layout, color, fonts, text drop shadows and image transformations need to be flexible for product \u0026 design changes.Destination Matching: Postcards need to match the destination by including relevant artwork and localized destination names.Availability On and Off Platform: Assets need to be surfaced on and off the platform, which necessitated a pre-generated server-side solution; client-only solutions wouldn’t work since we needed Open Graph compatible links for assets to render properly in iMessage and Instagram, for example.Performance: Postcard presentation shouldn’t interrupt the product UX by taking significant time to render.Postcards “in vs. out” of product experienceSolutionPostcard SetupA Trips Postcard is the combination of (1) an artwork illustration, (2) a postcard template, and (3) a localized destination. A Postcard “template” is a data entity with a reference to the artwork illustration plus some additional metadata to describe how to render it. To render a Postcard in product, we need to have all artwork illustrations, postcard templates, and formatted localized destinations set up before a visitor sees the product flow.In the example below, we have an illustration of a cliff side, a postcard template, and an English language variant of the destination name “Galway”. The Postcard template includes parameters to specify how to create the postcard, like text and Belo (Airbnb brand icon) color and positioning. In the example, the text and Belo are rendered in gray color and positioned at the bottom and top left, respectively.Illustration + Template Params + Localized Destination = PostcardDesign Flexibility — Postcard TemplatesTo accommodate changing design requirements, we built a flexible template data model that empowers our design team to configure various parameters like text positioning and text color while iterating on the designs. The postcard templates include all the metadata required to generate a Postcard and its surrounding presentation elements. It also includes a versioning capability so that we can publish changes to all users with a version bump whenever we have a design revision or visual defect.Template \u0026 Artwork Upload, Management \u0026 PreviewTo make it easy for the creative team to self-serve and debug issues, we built a web-based internal tool for creating and managing templates, previewing postcards, and uploading artwork. This tool made it significantly easier to manage templates, and was especially useful during the team’s peak iteration period where we were constantly fixing bugs and changing designs.The postcard template creation \u0026 management formIn the setup workflow, our operations team created Postcard templates, uploaded artwork, and managed them via the template form page.Localized Text LayoutWe wanted accurate translations of destinations that were properly formatted for each localized postcard. A programmatic solution for localized text layout would require, at the very least, language specific rules (right to left, word wrapping, etc.), knowledge of cultural conventions, accessibility considerations, and text rendering for special characters (diacritics, etc.). This would make business logic complex and brittle.We compromised on this solution with the localization (l10n) team by manually formatting translations for destinations that made up our top booking destinations. These manually formatted translations involved getting our l10n scaled operations team to translate and format (line breaks, layout spacing, etc.) a shortlist of localized destinations, which we helped ingest into our typical i18n platform translated text workflow with some scripting. After ingestion, the Postcard generation system pulls from our i18n platform to get the desired localized formatted text layout for each Postcard.The destinations shortlist was informed by our data science team, who helped gather the top booked destinations by language. This reduced the scale of required postcards to generate from all destinations in the full set of language locale destination combinations on the platform, to a magnitude of scale smaller destination subset. As a result, postcard QA was significantly easier. More importantly, it kept the overall system code and maintenance simple; no need for thousands of lines of language specific business logic!The rest of the postcards that didn’t make the top destinations list followed a simple formula of word count and line breaks per language (e.g. Chinese, Korean, and Japanese had smaller word count limits because of the character size and no line break on spaces because it changes the meaning of the destination).Early design prototype of text layout in a subset of the languages we support at Airbnb. The screenshot is for illustration purposes only.Postcard GenerationDestination MatchingDecision tree for determining the best postcard template for a given reservationTo find the best-matching postcard template for each destination, we have a matching algorithm that matches templates to reservations at booking time using four different criteria:By listing — We wanted to be able to support listing-specific artwork. E.g. Our Icons listings show a golden ticket to commemorate the special moment when a guest wins the lottery for staying at an Icons listing.By destination — For popular destinations (matching by city and country), we have curated artwork that showcases both a local artist and the destination. E.g. Trips to Santorini present the iconic Cycladic domes of Santorini as artwork (see diagram below).By taxonomy — For all other artwork, we match destinations based on a set of taxonomy tags. We partnered with the knowledge graph team to apply taxonomy attributes to all of our listings in a few different categories: density (i.e. metropolitan, urban), climate (i.e. tropical, temperate) and geography (i.e. coastal, mountain, river). We ensured the taxonomy was accurate by cross referencing existing internal data and the expertise of our regional representatives teams. They then exposed an API that we called to fetch taxonomy by listing. On the operations side, our production team created taxonomy tagged artwork (e.g. an artwork tagged to be used for a coastal, temperate, metropolitan postcard). When generating postcards, we match the listing to the artwork with the highest number of overlapping tags.By default — If a destination isn’t covered by the above categories, we show a fallback default artwork.The 4 initial Postcard variants: Icons, Destination specific, Taxonomy, and Default.Formatted TranslationsWe take the listing of each booking request and fetch the city and country from the listing service and check to see if that destination was in our curated set of formatted destinations loaded into our i18n service. We then take the best fitting artwork and embed the localized destination text on it to generate the final postcard. If we don’t get a translation back, we fall back to serving the postcard without text.Performance — Async Postcard Creation FlowPutting a localized destination and a Belo icon onto artwork is a time-consuming operation given the high resolution artwork we used. We knew the image processing flow could take over 8 seconds on average to process an image so we needed to come up with a way to make our postcard API respond quickly. We also wanted to transfer these generated postcards into our primary image storage so we could leverage our existing media serving infrastructure, which introduced an additional 1–2 seconds of latency.In order to still be performant, we went with a partly asynchronous approach where, during the live in product request, we only serve postcards that we’ve already generated and stored internally. If there was a request for a new postcard, we would instead return a fallback postcard and publish an event to a Kafka queue where an async consumer would call the processing service, wait for the asset to be generated and then transfer it into our system to be used for future requests.As shown in the diagram below, we fetched the listing information and taxonomy information in parallel before computing the best matching artwork for the trip. Based on a pattern in how the postcards are stored, we would check in our media service to see if the postcard was generated already before either returning the card if it was found or kicking off the asynchronous flow if it was not found. At that point, our media service’s Kafka consumer would complete the flow by transforming the asset into a postcard and storing it in our system.Architecture Diagram of the Backend Postcard Generation flowPre-generationWe wanted to generate as many of the postcards as possible before the launch. If the postcard hasn’t been generated when a guest books a group trip, everyone on the booking will see the default, generic postcard. Our data science team helped determine top destinations, and we ran those inputs through our postcard generation pipeline to pre-generate as many postcards as possible and minimize the chance of falling back to a default postcard. Within a week of launching, more than 90% of trips had a custom postcard instead of a default and we inched closer to generating a postcard for all trips in the months after.Dashboard numbers on Postcard template selection type and postcard usage hit rate. For illustrative purposes only, not real data.ConclusionCreating postcards was a massive effort that required collaboration across multiple engineering, product, design, and data science teams to improve Airbnb’s group travel feature. Our frontline insights team continues to receive positive social media and external feedback on this update that adds delight to joining a group trip.The solution highlights the importance of having the right internal tooling, image and text processing capabilities, and destination matching logic for solving something at Airbnb’s scale.Postcards is one of the first major image processing use cases that the Media team built to support a new Airbnb feature. It highlights the power of media capabilities and innovative features we can build with them. If you like the type of work we do at Airbnb, please contact us \u0026 check out our careers page!AcknowledgmentsThanks to the following engineers who helped to build this feature: Alan Wright, Aditya Punjani, Bill Lovotti, Jessica Chen, Miguel Jimenez",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*2J5D7hHVULfMa9n3cTI3wA.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca rel=\"noopener follow\" href=\"https://medium.com/@Sundiata?source=post_page-----dfe0b71b12ec--------------------------------\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Leo Wong\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*cgsaTA44t4NH7n9Rdmt1RA.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://medium.com/airbnb-engineering?source=post_page-----dfe0b71b12ec--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"The Airbnb Tech Blog\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*MlNQKg-sieBGW5prWoe9HQ.jpeg\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cp id=\"cc97\"\u003eBy: \u003ca rel=\"noopener\" href=\"https://medium.com/@Sundiata\"\u003eLeo Wong\u003c/a\u003e, \u003ca rel=\"noopener\" href=\"https://medium.com/@henry.johnson_26073\"\u003eHenry Johnson\u003c/a\u003e\u003c/p\u003e\u003cp id=\"93cb\"\u003eHow the Airbnb Media team built group travel Postcards for the 2024 Summer Release by leveraging a novel destination matching algorithm while advancing the platform’s image \u0026amp; localized text processing capabilities.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"39fa\"\u003eIntroduction\u003c/h2\u003e\u003cp id=\"02c2\"\u003eFor Airbnb’s 2024 Summer Release, the Media Ingestion team at Airbnb took on the exciting challenge of creating a reliable postcard generation system to generate unique, hand-crafted Postcards. Postcards are a beautiful way to invite guests on a trip while keeping friends and family in the loop (see \u003ca href=\"https://www.airbnb.com/release/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eannouncement\u003c/a\u003e). This feature required a novel solution to match relevant postcards to every possible destination\u003cstrong\u003e \u003c/strong\u003ethat guests booked on Airbnb. It needed to render performantly not only on all our client platforms (iOS, Android, and Web), but also on different messaging platforms outside the Airbnb app, all while maintaining Airbnb’s high design standards.\u003c/p\u003e\u003ch2 id=\"104f\"\u003eChallenges\u003c/h2\u003e\u003cul\u003e\u003cli id=\"f310\"\u003e\u003cstrong\u003eLocalized Text Layout: \u003c/strong\u003ePostcards have strict design guidelines around character count per line, font leading \u0026amp; kerning per language, pixel perfect typography, line break rules, and language-specific styling.\u003c/li\u003e\u003cli id=\"0d0c\"\u003e\u003cstrong\u003eDesign \u0026amp; Product Flexibility: \u003c/strong\u003eText layout, color, fonts, text drop shadows and image transformations need to be flexible for product \u0026amp; design changes.\u003c/li\u003e\u003cli id=\"941b\"\u003e\u003cstrong\u003eDestination Matching: \u003c/strong\u003ePostcards need to match the destination by including relevant artwork and localized destination names.\u003c/li\u003e\u003cli id=\"cfb9\"\u003e\u003cstrong\u003eAvailability On and Off Platform: \u003c/strong\u003eAssets need to be surfaced on and off the platform, which necessitated a pre-generated server-side solution; client-only solutions wouldn’t work since we needed Open Graph compatible links for assets to render properly in iMessage and Instagram, for example.\u003c/li\u003e\u003cli id=\"14aa\"\u003e\u003cstrong\u003ePerformance:\u003c/strong\u003e Postcard presentation shouldn’t interrupt the product UX by taking significant time to render.\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cstrong\u003ePostcards “in vs. out” of product experience\u003c/strong\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"c0b2\"\u003eSolution\u003c/h2\u003e\u003ch2 id=\"6ca0\"\u003ePostcard Setup\u003c/h2\u003e\u003cp id=\"cac7\"\u003eA Trips Postcard is the combination of (1) an artwork illustration, (2) a postcard template, and (3) a localized destination. A Postcard “template” is a data entity with a reference to the artwork illustration plus some additional metadata to describe how to render it. To render a Postcard in product, we need to have all artwork illustrations, postcard templates, and formatted localized destinations set up before a visitor sees the product flow.\u003c/p\u003e\u003cp id=\"47ab\"\u003eIn the example below, we have an illustration of a cliff side, a postcard template, and an English language variant of the destination name “Galway”. The Postcard template includes parameters to specify how to create the postcard, like text and Belo (Airbnb brand icon) color and positioning. In the example, the text and Belo are rendered in gray color and positioned at the bottom and top left, respectively.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cstrong\u003e\u003cem\u003eIllustration + Template Params + Localized Destination = Postcard\u003c/em\u003e\u003c/strong\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"04ad\"\u003e\u003cstrong\u003eDesign Flexibility — Postcard Templates\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"8211\"\u003eTo accommodate changing design requirements, we built a flexible template data model that empowers our design team to configure various parameters like text positioning and text color while iterating on the designs. The postcard templates include all the metadata required to generate a Postcard and its surrounding presentation elements. It also includes a versioning capability so that we can publish changes to all users with a version bump whenever we have a design revision or visual defect.\u003c/p\u003e\u003ch2 id=\"97d5\"\u003e\u003cstrong\u003eTemplate \u0026amp; Artwork Upload, Management \u0026amp; Preview\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"84cc\"\u003eTo make it easy for the creative team to self-serve and debug issues, we built a web-based internal tool for creating and managing templates, previewing postcards, and uploading artwork. This tool made it significantly easier to manage templates, and was especially useful during the team’s peak iteration period where we were constantly fixing bugs and changing designs.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe postcard template creation \u0026amp; management form\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cfigure\u003e\u003cpicture\u003e\u003csource srcset=\"https://miro.medium.com/v2/resize:fit:640/format:webp/1*v-CoGt4P0A_ABvjk2T-tQg.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*v-CoGt4P0A_ABvjk2T-tQg.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*v-CoGt4P0A_ABvjk2T-tQg.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*v-CoGt4P0A_ABvjk2T-tQg.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*v-CoGt4P0A_ABvjk2T-tQg.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*v-CoGt4P0A_ABvjk2T-tQg.png 1100w, https://miro.medium.com/v2/resize:fit:4548/format:webp/1*v-CoGt4P0A_ABvjk2T-tQg.png 4548w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 2274px\" type=\"image/webp\"/\u003e\u003csource data-testid=\"og\" srcset=\"https://miro.medium.com/v2/resize:fit:640/1*v-CoGt4P0A_ABvjk2T-tQg.png 640w, https://miro.medium.com/v2/resize:fit:720/1*v-CoGt4P0A_ABvjk2T-tQg.png 720w, https://miro.medium.com/v2/resize:fit:750/1*v-CoGt4P0A_ABvjk2T-tQg.png 750w, https://miro.medium.com/v2/resize:fit:786/1*v-CoGt4P0A_ABvjk2T-tQg.png 786w, https://miro.medium.com/v2/resize:fit:828/1*v-CoGt4P0A_ABvjk2T-tQg.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*v-CoGt4P0A_ABvjk2T-tQg.png 1100w, https://miro.medium.com/v2/resize:fit:4548/1*v-CoGt4P0A_ABvjk2T-tQg.png 4548w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 2274px\"/\u003e\u003c/picture\u003e\u003cfigcaption\u003eIn the setup workflow, our operations team created Postcard templates, uploaded artwork, and managed them via the template form page.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/p\u003e\u003cdiv\u003e\u003ch2 id=\"6696\"\u003e\u003cstrong\u003eLocalized Text Layout\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"cf1a\"\u003eWe wanted accurate translations of destinations that were properly formatted for each localized postcard. A programmatic solution for localized text layout would require, at the very least, language specific rules (right to left, word wrapping, etc.), knowledge of cultural conventions, accessibility considerations, and text rendering for special characters (diacritics, etc.). This would make business logic complex and brittle.\u003c/p\u003e\u003cp id=\"5e54\"\u003eWe compromised on this solution with the localization (l10n) team by manually formatting translations for destinations that made up our top booking destinations. These manually formatted translations involved getting our l10n scaled operations team to translate and format (line breaks, layout spacing, etc.) a shortlist of localized destinations, which we helped ingest into our typical i18n platform translated text workflow with some scripting. After ingestion, the Postcard generation system pulls from our i18n platform to get the desired localized formatted text layout for each Postcard.\u003c/p\u003e\u003cp id=\"db84\"\u003eThe destinations shortlist was informed by our data science team, who helped gather the top booked destinations by language. This reduced the scale of required postcards to generate from all destinations in the full set of language locale destination combinations on the platform, to a magnitude of scale smaller destination subset. As a result, postcard QA was significantly easier. More importantly, it kept the overall system code and maintenance simple; no need for thousands of lines of language specific business logic!\u003c/p\u003e\u003cp id=\"451c\"\u003eThe rest of the postcards that didn’t make the top destinations list followed a simple formula of word count and line breaks per language (e.g. Chinese, Korean, and Japanese had smaller word count limits because of the character size and no line break on spaces because it changes the meaning of the destination).\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eEarly design prototype of text layout in a subset of the languages we support at Airbnb. The screenshot is for illustration purposes only.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"25de\"\u003ePostcard Generation\u003c/h2\u003e\u003ch2 id=\"c635\"\u003e\u003cstrong\u003eDestination Matching\u003c/strong\u003e\u003c/h2\u003e\u003cfigure\u003e\u003cfigcaption\u003eDecision tree for determining the best postcard template for a given reservation\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"0b76\"\u003eTo find the best-matching postcard template for each destination, we have a matching algorithm that matches templates to reservations at booking time using four different criteria:\u003c/p\u003e\u003col\u003e\u003cli id=\"7aba\"\u003eBy \u003cstrong\u003elisting\u003c/strong\u003e — We wanted to be able to support listing-specific artwork. E.g. Our \u003ca href=\"https://airbnb.com/icons\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eIcons listings\u003c/a\u003e show a golden ticket to commemorate the special moment when a guest wins the lottery for staying at an Icons listing.\u003c/li\u003e\u003cli id=\"7313\"\u003eBy \u003cstrong\u003edestination\u003c/strong\u003e — For popular destinations (matching by city and country), we have curated artwork that showcases both a local artist and the destination. E.g. Trips to Santorini present the iconic Cycladic domes of Santorini as artwork (see diagram below).\u003c/li\u003e\u003cli id=\"6b6e\"\u003eBy \u003cstrong\u003etaxonomy\u003c/strong\u003e — For all other artwork, we match destinations based on a set of taxonomy tags. We partnered with the knowledge graph team to apply taxonomy attributes to all of our listings in a few different categories: density (i.e. metropolitan, urban), climate (i.e. tropical, temperate) and geography (i.e. coastal, mountain, river). We ensured the taxonomy was accurate by cross referencing existing internal data and the expertise of our regional representatives teams. They then exposed an API that we called to fetch taxonomy by listing. On the operations side, our production team created taxonomy tagged artwork (e.g. an artwork tagged to be used for a coastal, temperate, metropolitan postcard). When generating postcards, we match the listing to the artwork with the highest number of overlapping tags.\u003c/li\u003e\u003cli id=\"fbea\"\u003eBy \u003cstrong\u003edefault\u003c/strong\u003e — If a destination isn’t covered by the above categories, we show a fallback default artwork.\u003c/li\u003e\u003c/ol\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe 4 initial Postcard variants: Icons, Destination specific, Taxonomy, and Default.\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"654a\"\u003e\u003cstrong\u003eFormatted Translations\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"aab3\"\u003eWe take the listing of each booking request and fetch the city and country from the listing service and check to see if that destination was in our curated set of formatted destinations loaded into our i18n service. We then take the best fitting artwork and embed the localized destination text on it to generate the final postcard. If we don’t get a translation back, we fall back to serving the postcard without text.\u003c/p\u003e\u003ch2 id=\"3a9c\"\u003e\u003cstrong\u003ePerformance — Async Postcard Creation Flow\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"50ec\"\u003ePutting a localized destination and a Belo icon onto artwork is a time-consuming operation given the high resolution artwork we used. We knew the image processing flow could take over 8 seconds on average to process an image so we needed to come up with a way to make our postcard API respond quickly. We also wanted to transfer these generated postcards into our primary image storage so we could leverage our existing media serving infrastructure, which introduced an additional 1–2 seconds of latency.\u003c/p\u003e\u003cp id=\"8ce6\"\u003eIn order to still be performant, we went with a partly asynchronous approach where, during the live in product request, we only serve postcards that we’ve already generated and stored internally. If there was a request for a new postcard, we would instead return a fallback postcard and publish an event to a Kafka queue where an async consumer would call the processing service, wait for the asset to be generated and then transfer it into our system to be used for future requests.\u003c/p\u003e\u003cp id=\"3571\"\u003eAs shown in the diagram below, we fetched the listing information and taxonomy information in parallel before computing the best matching artwork for the trip. Based on a pattern in how the postcards are stored, we would check in our media service to see if the postcard was generated already before either returning the card if it was found or kicking off the asynchronous flow if it was not found. At that point, our media service’s Kafka consumer would complete the flow by transforming the asset into a postcard and storing it in our system.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eArchitecture Diagram of the Backend Postcard Generation flow\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"3da7\"\u003e\u003cstrong\u003ePre-generation\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"8afe\"\u003eWe wanted to generate as many of the postcards as possible before the launch. If the postcard hasn’t been generated when a guest books a group trip, everyone on the booking will see the default, generic postcard. Our data science team helped determine top destinations, and we ran those inputs through our postcard generation pipeline to pre-generate as many postcards as possible and minimize the chance of falling back to a default postcard. Within a week of launching, more than 90% of trips had a custom postcard instead of a default and we inched closer to generating a postcard for all trips in the months after.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eDashboard numbers on Postcard template selection type and postcard usage hit rate. \u003cem\u003eFor illustrative purposes only, not real data.\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"8d91\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"69f5\"\u003eCreating postcards was a massive effort that required collaboration across multiple engineering, product, design, and data science teams to improve Airbnb’s group travel feature. Our frontline insights team continues to receive positive social media and external feedback on this update that adds delight to joining a group trip.\u003c/p\u003e\u003cp id=\"2038\"\u003eThe solution highlights the importance of having the right internal tooling, image and text processing capabilities, and destination matching logic for solving something at Airbnb’s scale.\u003c/p\u003e\u003cp id=\"1aaf\"\u003ePostcards is one of the first major image processing use cases that the Media team built to support a new Airbnb feature. It highlights the power of media capabilities and innovative features we can build with them. If you like the type of work we do at Airbnb, please contact us \u0026amp; check out our \u003ca href=\"https://careers.airbnb.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ecareers page\u003c/a\u003e!\u003c/p\u003e\u003ch2 id=\"5af1\"\u003eAcknowledgments\u003c/h2\u003e\u003cp id=\"624d\"\u003eThanks to the following engineers who helped to build this feature: Alan Wright, Aditya Punjani, Bill Lovotti, Jessica Chen, Miguel Jimenez\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2024-08-28T16:01:39.014Z",
  "modifiedTime": null
}
