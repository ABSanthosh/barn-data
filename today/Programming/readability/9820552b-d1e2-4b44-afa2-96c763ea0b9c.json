{
  "id": "9820552b-d1e2-4b44-afa2-96c763ea0b9c",
  "title": "Expert Generalists: three more characteristics",
  "link": "https://martinfowler.com/articles/expert-generalist.html#FavorFundamentalKnowledge",
  "description": "",
  "author": "",
  "published": "2025-06-19T08:48:00-04:00",
  "source": "https://martinfowler.com/feed.atom",
  "categories": [
    "skip-home-page"
  ],
  "byline": "Unmesh Joshi",
  "length": 15653,
  "excerpt": "Being an Expert Generalist should be treated as a first-class skill, one that can be assessed and taught.",
  "siteName": "martinfowler.com",
  "favicon": "",
  "text": "Writing a sophisticated computer program often requires a lot of detailed knowledge. If we do this in Java, we need to know the syntax of the language, the wide range of libraries available to assist us in the work, the various tools required to verify and build our programs. If we do this in Python instead, we are faced with a different syntax, libraries that are named and work differently, a whole other ecosystem to build and run our work. Faced with these details, a natural response is to recruit people who are knowledgeable about a specific ecosystem. Thus we see job descriptions that say “at least three years of Java”, or even deeper requirements for subsets of that community, with experience in specific tools. What use is a skilled Python programmer to such a team? We've always felt that such desires are wrong-headed. The characteristics that we've observed separating effective software developers from the chaff aren't things that depend on the specifics of tooling. We rather appreciate such things as: the knowledge of core concepts and patterns of programming, a knack for decomposing complex work-items into small, testable pieces, and the ability to collaborate with both other programmers and those who will benefit from the software. Throw such a Python programmer into a Java team, and we'd expect them to prosper. Sure they would ask a lot of questions about the new language and libraries, we'd hear a lot of “how do you do this here?” But such questions are quickly answered, and the impediments of Java-ignorance soon wither away. An experienced Pythonista who understands the core patterns and practices of software development can be a productive member of a team building software in Java. Knowing how to handle snakes can be surprisingly handy. This echoes a long debate about the relative value of specialists and generalists. Specialists are seen as people with a deep skill in a specific subject, while generalists have broad but shallow skills. A dissatisfaction with that dichotomy led to the idea of “T-shaped people”: folks that combine deep knowledge in one topic, with a broad but shallow knowledge of many other topics. We've seen many such people quickly grow other deep legs, which doesn't do much for the “T-shape” name (as we'll discuss below), but otherwise leads to success. Often experience of a different environment leads to trying things that seem innovative in a new home. Folks that only work in a single technological neighborhood are at the constant risk of locking themselves into a knowledge silo, unaware of many tools that could help them in their work. This ability goes beyond just developer skills. We've seen our best business analysts gain deep skills in a couple of domains, but use their generalist skills to rapidly understand and contribute in new domains. Developers and User Experience folks often step outside “their lanes” to contribute widely in getting work done. We've seen this capability be an essential quality in our best colleagues, to the degree that its importance is something we've taken for granted. But increasingly we see the software industry push for increasing, narrower specialization. So over the last year or so we have started to resist this industry-wide push for narrow skills, by calling out this quality, which we call an Expert Generalist. Why did we use the word “expert”? There are two sides to real expertise. The first is the familiar depth: a detailed command of one domain's inner workings. The second, crucial in our fast-moving field is the ability to learn quickly, spot the fundamentals that run beneath shifting tools and trends, and apply them wherever we land. As an example from software teams, developers who roam across languages, architectures, and problem spaces may seem like “jack-of-all-trades, master-of-none,” yet repeated dives below surface differences help them develop durable, principle-level mastery. Over time these generalists can dissect unfamiliar challenges, spot first-principles patterns, and make confident design decisions with the assurance of a specialist - and faster. Being such a generalist is itself a sophisticated expertise. We've long noticed that not just anyone succeeds as an Expert Generalist, but once we understand the traits that are key for such Expert Generalists, organizations can shape learning programs, hiring filters, and career paths that deliberately develop them. Indeed our hiring and career progression at Thoughtworks has been cultivating this skill for over two decades, but doing so informally. We think the industry needs to change gears, and treat Expert Generalist as a first-class skill in its own right: something we name, assess, and train for. (But beware, we find many Expert Generalists, including at least one author of this article, cringe at the word “expert”.) The Characteristics of an Expert Generalist When we've observed Expert Generalists, there are certain attributes that stand out. Curiosity Expert Generalists display a lot of curiosity. When confronted with a new technology or domain, their default reaction is to want to discover more about it, to see how it can be used effectively. They are quite happy to spend time just exploring the new topic area, building up some familiarity before using it in action. For most, learning new topics is a pleasure in itself, whether or not it's immediately applicable to their work. This characteristic is noticeable when Expert Generalists get an answer to a question. Rather than just typing in some code from Stack Overflow, an Expert Generalist's curiosity usually motivates them to ensure they understand the answer, taking the opportunity to expand their knowledge, and check that the answer they got is appropriate. It's also present when asking a question. There is an art to asking questions that elicit deeper answers without leading the witness. Collaborativeness Learning about a new topic area may require reading, watching videos, and prototyping. But we see the greatest aid here is another vital characteristic: collaborativeness. A wise Expert Generalist knows that they can never really learn about most of the things they run into. Their T-shape will grow several legs, but never enough to span all the things they need to know, let alone want to know. Working with people who do have those deeper skills is essential to being effective in new domains. Working with an otherly-skilled worker allows the generalist to contribute while the skilled collaborator spots more effective paths that only a specialist would know. The generalist appreciates these corrections, learning from them. Learning involves both knowing more about the new domain, but also learning to differentiate between areas where the generalist can do primary contributions and areas where the generalist needs help from the specialist. We notice Expert Generalists are never afraid to ask for help, they know there is much they are ignorant of, and are eager to involve those who can navigate through those areas. An effective combination of collaborative curiosity requires humility. Often when encountering new domains we see things that don't seem to make sense. Effective generalists react to that by first understanding why this odd behavior is the way it is, because there's usually a reason, indeed a good reason considering its context. Sometimes, that reason is no longer valid, or was missing an important consideration in the first place. In that situation a newcomer can add considerable value by questioning the orthodoxy. But at other times the reason was, and is still valid - at least to some extent. Humility encourages the Expert Generalist to not leap into challenging things until they are sure they understand the full context. This humility extends to recognizing the different trade-offs we see across architectures. An architecture designed to support large volumes of simple transactions will differ from one designed to handle a few complex interactions. Expert Generalists are comfortable in a world where different trade-offs make sense in different circumstances, usually because their travels have exposed them to these differences. Customer Focus This curiosity and eagerness to collaborate with people with different skills does raise a danger. Someone driven by curiosity can chase every shiny object. This is where the characteristic of customer-focus comes into play. We are often impressed with how an Expert Generalist takes each unfamiliar technology and questions how it helps the customer. We are fans of Kathy Sierra's notion that our purpose as software developers is to help our customers become “badass” at what they do. Customer-focus is the necessary lens to focus curiosity. Expert generalists prioritize their attention that the things that will help them help their users to excel. This encourages learning about what their customers do, and how they can improve their work. It focuses attention on technologies that contribute to building those things. Customer-focus energizes collaboration, encouraging the exchange of information between customer and technologist, and allowing the Expert Generalist to coordinate other technologists towards enabling the customers' excellence. Favor Fundamental Knowledge Software development is a vast field, where nobody can know everything, or even a reasonable fraction of everything, so we all need to prioritize what topics we learn. Expert Generalists favor fundamental knowledge, that doesn't become outdated with changes when platforms update. These are often expressed as patterns or principles. Such knowledge tends to age slowly, and is applicable when folks move into new environments. For example the basic moves of refactoring are the same whatever language you are programming, the core patterns of distributed systems reappear regularly (and it's no coincidence that's why we wrote books on those topics - we like book sales that last for many years). Blend of Generalist and Specialist Skills Thus generalists often have deep knowledge of fundamentals, and we usually see them have deep knowledge of a few other topics too. They combine a broad general skill with several areas of deeper knowledge, usually acquired as it's necessary for products they've worked on, coupled with the curiosity to dig into things that puzzle most people. These deeper areas may not be relevant to every engagement they work on, but is a signal for their acumen and curiosity. We've learned to be suspicious of people who present as a generalist yet don't have a few deep specialties. We mentioned before that a common name for this skills profile is that of the “T-shaped” person, implying a blend of specialist and generalist skills. While the T-shape moniker did catch on, it comes with a major problem in the metaphor, we don't find such folks have only a single deeper skill. They usually have a few, of varying depth. We're not the only people to identify this problem, and there have been several other names proposed to describe this skill-set, although the alternatives all have their own problems. 1 1: Kent Beck came up with the metaphor of “paint drip people”, although a problem with this metaphor is that paint-drips aren't usually something we desire. “π-shape” at least admits two deeper skills, but again implies an arbitrary limit that doesn't work in practice. “Comb-shaped” implies many deeper skills, which is good, but it also implies they are all the same depth, which isn't true. Sympathy for Related Domains Expert generalists often find themselves in unfamiliar territory—be it a new software stack, a new domain, or a new role. Rather than chasing exhaustive detail from day one, they cultivate a rough, perceptive sense of what works in the new environment. That helps them make choices that go with the grain—even when it differs from their previous experience. Jackie Stewart, a triple Formula 1 world champion (1969-93), described how, while he wasn't an engineer of the cars he drove, he still needed a sense of they worked, how they responded to what the driver was trying to do, a sense he called mechanical sympathy. Martin Thompson brought this concept into software, by talking about how a similar knowledge of how computer hardware works is vital to writing high-performance software. We think that the notion of mechanical sympathy has a broader sense in software, in that we do need to cultivate such a sympathy for any adjacent domain to the ones we are working on. When working on a database design, we need such a sympathy for the user-interface so we can construct a design that will work smoothly with the user-experience. A user-experience designer needs such a sympathy with software constraints so when choosing between similarly valuable user flows, they take into account how hard it is to build them. This also shows itself with new teams. When joining a new team, expert generalists tend to listen to the established ways that a team works, introducing different approaches thoughtfully. Even when coming in as leaders, they don't default to tearing up existing workflows in favor of those more familiar to them. Their curiosity extends to understanding why different people work in different ways, trying out unfamiliar working styles, then incorporating their experience to develop practices to improve from the current state. We're releasing this article in installments. Future installments will look at how to assess someone's skill as an Expert Generalist, how to grow Expert Generalists, and the benefits they bring to an organization. To find out when we publish the next installment subscribe to this site's RSS feed, or Martin's feeds on Mastodon, Bluesky, LinkedIn, or X (Twitter). Acknowledgements Santosh Mahale helped shaping up this concept through many discussions. Andrew Thal, Andy Yates, Ankur Dang, Bilal Fazlani, Brandon Garlock, Chakrit Riddhagni, Chris Ford, Dan Anthony, Fernando Kabas, Giles Edwards-Alexander, Jim Gumbley, Jimmy Nilsson, Kapil Dube, Kathy Gettlefinger, Ketan Soni, Lauris Jullien, Lucilene Breier, Michael Strasser, Michaël Le Barbier, Mushtaq Ahmed, Premanand Chandrasekaran, Rick Kick, Steven Peh, Sushant Joshi, Suzi Edwards-Alexander, Tex Albuja, and Vanessa Towers discussed drafts of this article on various email and chat channels.",
  "image": "https://martinfowler.com/articles/expert-generalist/card.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eWriting a sophisticated computer program often requires a lot of detailed\n      knowledge. If we do this in Java, we need to know the syntax of the\n      language, the wide range of libraries available to assist us in the work,\n      the various tools required to verify and build our programs. If we do this\n      in Python instead, we are faced with a different syntax, libraries that are named\n      and work differently, a whole other ecosystem to build and run our work.\u003c/p\u003e\n\n\u003cp\u003eFaced with these details, a natural response is to recruit people who\n      are knowledgeable about a specific ecosystem. Thus we see job descriptions that say “at\n      least three years of Java”, or even deeper requirements for subsets of that\n      community, with experience in specific tools. What use is a skilled\n      Python programmer to such a team?\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ve always felt that such desires are wrong-headed. The characteristics\n      that we\u0026#39;ve observed separating effective software developers from the chaff\n      aren\u0026#39;t things that depend on the specifics of tooling. We rather appreciate\n      such things as: the knowledge of core concepts and patterns of programming, a\n      knack for decomposing complex work-items into small, testable pieces, and the\n      ability to collaborate with both other programmers and those who will\n      benefit from the software.\u003c/p\u003e\n\n\u003cp\u003eThrow such a Python programmer into a Java team, and we\u0026#39;d expect them to\n      prosper. Sure they would ask a lot of questions about the new language and\n      libraries, we\u0026#39;d hear a lot of “how do you do this here?” But such questions\n      are quickly answered, and the impediments of Java-ignorance soon wither\n    away.\u003c/p\u003e\n\n\u003cdiv id=\"PythonInJavaShop.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/expert-generalist/PythonInJavaShop.png\"/\u003e\u003c/p\u003e\u003cp\u003eAn experienced Pythonista who understands\n    the core patterns and practices of software development can be a productive\n    member of a team building software in Java. Knowing how to handle\n    snakes can be surprisingly handy.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis echoes a long debate about the relative value of specialists and\n    generalists. Specialists are seen as people with a deep skill in a specific\n    subject, while generalists have broad but shallow skills. A dissatisfaction\n    with that dichotomy led to the idea of “T-shaped people”: folks that combine\n    deep knowledge in one topic, with a broad but shallow knowledge of many\n    other topics. We\u0026#39;ve seen many such people quickly grow other deep legs,\n    which doesn\u0026#39;t do much for the “T-shape” name (as we\u0026#39;ll discuss below), but otherwise leads to\n    success. Often experience of a different environment leads to trying things\n    that seem innovative in a new home. Folks that only work in a single\n    technological neighborhood are at the constant risk of locking themselves\n    into a knowledge silo, unaware of many tools that could help them in their\n    work.\u003c/p\u003e\n\n\u003cp\u003eThis ability goes beyond just developer skills. We\u0026#39;ve seen our best\n    business analysts gain deep skills in a couple of domains, but use their\n    generalist skills to rapidly understand and contribute in new domains.\n    Developers and User Experience folks often step outside “their lanes” to\n    contribute widely in getting work done. We\u0026#39;ve seen this capability be an\n    essential quality in our best colleagues, to the degree that its importance\n    is something we\u0026#39;ve taken for granted.\u003c/p\u003e\n\n\u003cp\u003eBut increasingly we see the software industry push for\n      increasing, narrower specialization.\u003c/p\u003e\n\n\u003cp\u003eSo over the last year or so we have started to resist this industry-wide\n    push for narrow skills, by calling out this quality, which we call an\n    \u003cb\u003eExpert Generalist\u003c/b\u003e. Why did we use the word “expert”? \n        There are two sides to real expertise. The first is the familiar depth: a detailed command\n        of one domain\u0026#39;s inner workings. The second, crucial in our fast-moving field\n        is the ability to learn quickly, spot the\n        fundamentals that run beneath shifting tools and trends, and apply them wherever we land.\n        As an example from software teams, developers who roam across languages, architectures, and problem spaces may seem like\n        “jack-of-all-trades, master-of-none,” yet repeated dives below surface differences help them\n        develop durable, principle-level mastery. Over time these generalists can dissect unfamiliar\n        challenges, spot first-principles patterns, and make confident design decisions with the\n        assurance of a specialist - and faster. Being such a generalist is itself a\n        sophisticated expertise. \u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ve long noticed that not just anyone succeeds as an Expert Generalist,\n    but once we understand the traits that are key for such Expert Generalists,\n    organizations can shape learning programs, hiring filters, and career paths\n    that deliberately develop them. Indeed our hiring and career progression at\n    Thoughtworks has been cultivating this skill for over two decades, but doing\n    so informally. We think the industry needs to change gears, and treat Expert\n    Generalist as a first-class skill in its own right: something we name,\n    assess, and train for. (But beware, we find many Expert Generalists,\n    including at least one author of this article, cringe at the word “expert”.)\u003c/p\u003e\n\n\u003csection id=\"TheCharacteristicsOfAnExpertGeneralist\"\u003e\n\u003ch2\u003eThe Characteristics of an Expert Generalist\u003c/h2\u003e\n\n\u003cp\u003eWhen we\u0026#39;ve observed Expert Generalists, there are certain attributes\n      that stand out.\u003c/p\u003e\n\n\u003csection id=\"Curiosity\"\u003e\n\u003ch3\u003eCuriosity\u003c/h3\u003e\n\n\n\n\u003cp\u003eExpert Generalists display a lot of curiosity. When confronted with a new\n        technology or domain, their default reaction is to want to discover more about it, to see\n        how it can be used effectively. They are quite happy to spend time just exploring the new\n        topic area, building up some familiarity before using it in action. For most, learning new\n        topics is a pleasure in itself, whether or not it\u0026#39;s immediately\n      applicable to their work.\u003c/p\u003e\n\n\u003cp\u003eThis characteristic is noticeable when Expert Generalists get an answer\n      to a question. Rather than just typing in some code from Stack Overflow,\n      an Expert Generalist\u0026#39;s curiosity usually motivates them to ensure they\n      understand the answer, taking the opportunity to expand their knowledge,\n      and check that the answer they got is appropriate. It\u0026#39;s also present when\n      asking a question. There is an art to asking questions that elicit deeper\n      answers without leading the witness. \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"Collaborativeness\"\u003e\n\u003ch3\u003eCollaborativeness\u003c/h3\u003e\n\n\u003cp\u003eLearning about a new topic area may require reading, watching videos, and prototyping. But\n        we see the greatest aid here is another vital characteristic: collaborativeness.\n        A wise Expert Generalist knows that they can never really learn about most of the things\n        they run into. Their T-shape will grow several legs, but never enough to span all the\n        things they need to know, let alone want to know. Working with people who do have those\n        deeper skills is essential to being effective in new domains. \u003c/p\u003e\n\n\n\n\u003cp\u003eWorking with an otherly-skilled worker allows the generalist to\n        contribute while the skilled collaborator spots more effective paths that\n        only a specialist would know. The generalist appreciates these\n        corrections, learning from them. Learning involves both knowing more about\n        the new domain, but also learning to differentiate between areas where the\n        generalist can do primary contributions and areas where the generalist\n        needs help from the specialist. We notice Expert Generalists are never\n        afraid to ask for help, they know there is much they are ignorant of, and\n        are eager to involve those who can navigate through those areas.\u003c/p\u003e\n\n\u003cp\u003eAn effective combination of collaborative curiosity requires\n      humility. Often when encountering new domains we see things that don\u0026#39;t\n      seem to make sense. Effective generalists react to that by first\n      understanding why this odd behavior is the way it is, because there\u0026#39;s\n      usually a reason, indeed a good reason considering its context. Sometimes,\n      that reason is no longer valid, or was missing an important consideration\n      in the first place. In that situation a newcomer can add considerable\n      value by questioning the orthodoxy. But at other times the reason was, and\n      is still valid - at least to some extent. Humility encourages the Expert\n      Generalist to not leap into challenging things until they are sure they\n      understand the full context.\u003c/p\u003e\n\n\u003cp\u003eThis humility extends to recognizing the different trade-offs we see\n      across architectures. An architecture designed to support large volumes\n      of simple transactions will differ from one designed to handle a few\n      complex interactions. Expert Generalists are comfortable in a world where different\n      trade-offs make sense in different circumstances, usually because their\n      travels have exposed them to these differences.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"CustomerFocus\"\u003e\n\u003ch3\u003eCustomer Focus\u003c/h3\u003e\n\n\n\n\u003cp\u003eThis curiosity and eagerness to collaborate with people with different skills does raise a\n        danger. Someone driven by curiosity can chase every shiny object. This is where the\n        characteristic of customer-focus comes into play. We are often impressed with\n        how an Expert Generalist takes each unfamiliar technology and questions how it helps the\n        customer. We are fans of Kathy Sierra\u0026#39;s notion that our purpose as software developers is to \u003ca href=\"https://www.amazon.com/gp/product/1491919019/ref=as_li_tl?ie=UTF8\u0026amp;camp=1789\u0026amp;creative=9325\u0026amp;creativeASIN=1491919019\u0026amp;linkCode=as2\u0026amp;tag=martinfowlerc-20\"\u003ehelp our\n      customers become “badass”\u003c/a\u003e at what they do.\u003c/p\u003e\n\n\u003cp\u003eCustomer-focus is the necessary lens to focus curiosity. Expert\n        generalists prioritize their attention that the things that will help them\n        help their users to excel. This encourages learning about what their\n        customers do, and how they can improve their work. It focuses attention on\n        technologies that contribute to building those things. Customer-focus\n        energizes collaboration, encouraging the exchange of information between\n        customer and technologist, and allowing the Expert Generalist to\n        coordinate other technologists towards enabling the customers\u0026#39;\n      excellence.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"FavorFundamentalKnowledge\"\u003e\n\u003ch3\u003eFavor Fundamental Knowledge\u003c/h3\u003e\n\n\n\n\u003cp\u003eSoftware development is a vast field, where nobody can know everything, or even a\n        reasonable fraction of everything, so we all need to prioritize what topics we learn. Expert\n        Generalists favor fundamental\n          knowledge, that doesn\u0026#39;t become outdated with changes when platforms update. These are\n        often expressed as patterns or principles. Such knowledge tends to age slowly, and is\n        applicable when folks move into new environments. For example the basic moves of refactoring\n        are the same whatever language you are programming, the core patterns of distributed systems\n        reappear regularly (and it\u0026#39;s no coincidence that\u0026#39;s why we wrote books on those topics - we\n        like book sales that last for many years).\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"BlendOfGeneralistAndSpecialistSkills\"\u003e\n\u003ch3\u003eBlend of Generalist and Specialist Skills\u003c/h3\u003e\n\n\u003cp\u003eThus generalists often have deep knowledge of fundamentals, and we usually see them have\n        deep knowledge of a few other topics too. They combine a broad general skill with several\n        areas of deeper knowledge, usually acquired as it\u0026#39;s necessary for products they\u0026#39;ve worked\n        on, coupled with the curiosity to dig into things that puzzle most people. These deeper\n        areas may not be relevant to every engagement they work on, but is a signal for their acumen\n        and curiosity. We\u0026#39;ve learned to be suspicious of people who present as a generalist yet\n        don\u0026#39;t have a few deep specialties.\u003c/p\u003e\n\n\u003cp\u003eWe mentioned before that a common name for this skills profile is that\n      of the “T-shaped” person, implying a blend of specialist and generalist\n      skills.  While the T-shape moniker did catch on, it comes with a\n      major problem in the metaphor, we don\u0026#39;t find such folks have only a\n      single deeper skill. They usually have a few, of varying depth. We\u0026#39;re not\n      the only people to identify this problem, and there have been several\n      other names proposed to describe this skill-set, although the alternatives\n      all have their own problems. \u003cspan data-footnote=\"footnote-t-shape\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cspan\u003e1: \u003c/span\u003e\n        Kent Beck came up with the metaphor of \u003ca href=\"https://tidyfirst.substack.com/p/paint-drip-people\"\u003e“paint drip people”\u003c/a\u003e, although a problem\n        with this metaphor is that paint-drips aren\u0026#39;t usually something we\n        desire. “π-shape” at least admits two deeper skills, but again implies an\n        arbitrary limit that doesn\u0026#39;t work in practice. “Comb-shaped” implies\n        many deeper skills, which is good, but it also implies they are all the\n        same depth, which isn\u0026#39;t true.\u003c/p\u003e\n\n\u003cdiv id=\"t-shape.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/expert-generalist/t-shape.png\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003c/section\u003e\n\n\u003csection id=\"SympathyForRelatedDomains\"\u003e\n\u003ch3\u003eSympathy for Related Domains\u003c/h3\u003e\n\n\n\n\u003cp\u003eExpert generalists often find themselves in unfamiliar territory—be \n         it a new software stack, a new domain, or a new role. Rather than chasing \n         exhaustive detail from day one, they cultivate a rough, perceptive sense of\n          what works in the new environment. That helps them make choices that \n          go with the grain—even when it differs from their previous experience.\n        \u003c/p\u003e\n\n\u003cp\u003eJackie Stewart, a triple Formula 1 world champion (1969-93),\n        described how, while he wasn\u0026#39;t an engineer of the cars he drove, he\n        \u003ca href=\"https://www.carandclassic.com/magazine/mechanical-sympathy-understanding-our-classics/\"\u003estill needed a sense of they\n        worked\u003c/a\u003e, how they responded to what the driver was trying to do, a\n        sense he called mechanical sympathy.\n        Martin Thompson \u003ca href=\"https://mechanical-sympathy.blogspot.com/2011/07/why-mechanical-sympathy.html\"\u003ebrought this\n        concept into software\u003c/a\u003e, by talking about how a similar knowledge\n        of how computer hardware works is vital to writing high-performance\n        software. \u003c/p\u003e\n\n\n\n\u003cp\u003eWe think that the notion of mechanical sympathy has a broader\n        sense in software, in that we do need to cultivate such a\n        sympathy for any adjacent domain to the ones we are working on. When\n        working on a database design, we need such a sympathy for the\n        user-interface so we can construct a design that will work smoothly with\n        the user-experience. A user-experience designer needs such a sympathy\n        with software constraints so when choosing between similarly valuable\n        user flows, they take into account how hard it is to build them.\u003c/p\u003e\n\n\u003cp\u003eThis also shows itself with new teams. When joining a new team, expert\n        generalists tend to listen to the established ways that a team works,\n        introducing different approaches thoughtfully. Even when coming in as\n        leaders, they don\u0026#39;t default to tearing up existing workflows in favor of\n        those more familiar to them. Their curiosity extends to understanding why\n        different people work in different ways, trying out unfamiliar working\n        styles, then incorporating their experience to develop practices to\n        improve from the current state.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003cdiv\u003e\n\u003cp\u003eWe\u0026#39;re releasing this article in installments. Future installments will\n        look at how to assess someone\u0026#39;s skill as an Expert Generalist, how to\n        grow Expert Generalists, and the benefits they bring to an organization.\u003c/p\u003e\n\n\n\u003cp\u003e To find out when we publish the next installment subscribe to this\n        site\u0026#39;s\n        \u003ca href=\"https://martinfowler.com/feed.atom\"\u003eRSS feed\u003c/a\u003e, or Martin\u0026#39;s feeds on \n        \u003ca href=\"https://toot.thoughtworks.com/@mfowler\"\u003eMastodon\u003c/a\u003e,\n        \u003ca href=\"https://bsky.app/profile/martinfowler.com\"\u003eBluesky\u003c/a\u003e,\n        \u003ca href=\"https://www.linkedin.com/in/martin-fowler-com/\"\u003eLinkedIn\u003c/a\u003e, or\n        \u003ca href=\"https://twitter.com/martinfowler\"\u003eX (Twitter)\u003c/a\u003e.\n        \u003c/p\u003e\n\u003c/div\u003e\n\n\u003chr/\u003e\n\u003c/div\u003e\u003csection id=\"Acknowledgements\"\u003e\n\u003ch2\u003eAcknowledgements\u003c/h2\u003e\n\n\u003cp\u003eSantosh Mahale helped shaping up this concept through many discussions.\u003c/p\u003e\n\n\u003cp\u003eAndrew\n      Thal, Andy Yates, Ankur Dang, Bilal Fazlani, Brandon Garlock, Chakrit Riddhagni, Chris Ford, Dan Anthony, Fernando Kabas, Giles Edwards-Alexander, Jim Gumbley, Jimmy Nilsson, Kapil Dube, Kathy Gettlefinger, Ketan Soni, Lauris Jullien, Lucilene Breier, Michael Strasser, Michaël Le Barbier, Mushtaq Ahmed, Premanand Chandrasekaran, Rick Kick, Steven Peh, Sushant Joshi, Suzi\n      Edwards-Alexander, Tex Albuja, and Vanessa\n      Towers discussed\n      drafts of this article on various email and chat channels.\u003c/p\u003e\n\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": null,
  "modifiedTime": "2025-06-19T00:00:00Z"
}
