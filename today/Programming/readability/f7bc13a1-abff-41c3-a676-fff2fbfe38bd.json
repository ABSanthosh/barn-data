{
  "id": "f7bc13a1-abff-41c3-a676-fff2fbfe38bd",
  "title": "Use GitLab Duo Workflow to improve application quality assurance",
  "link": "https://about.gitlab.com/blog/2025/04/10/use-gitlab-duo-workflow-to-improve-application-quality-assurance",
  "description": "",
  "author": "Cesar Saavedra",
  "published": "2025-04-10T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Cesar Saavedra",
  "length": 4656,
  "excerpt": "Learn step-by-step how to add unit tests to a Java application using agentic AI (includes a video tutorial).",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Assuring the quality of your applications via test-driven design, good code coverage, and issue detection is critically important to your customers and your reputation, but it can also be a time-consuming endeavor. GitLab Duo Workflow, agentic AI built on top of the most comprehensive DevSecOps platform, can help you quickly complete development tasks such as adding unit tests to a Java application. This tutorial demonstrates how by using this sample Java project. GitLab Duo Workflow is currently in private beta. Join the waitlist to see what’s possible with AI agents that understand your entire SDLC. Opening your project in VS Code Open the Java project in Visual Studio Code (after cloning it to your local machine). Ensure that you’re in a feature branch (not the main or default branch) before you start. If you’re already working on a merge request, it will have its own associated feature branch. (This step is optional.) Navigate to the file that defines the Java class for which you’d like to have GitLab Duo Workflow create unit tests. Inspect it so that you can later confirm that the generated unit tests do cover its class members. This is what you would see: Note: We are assuming that you already enabled the GitLab Duo Workflow extension in your VS Code. If not, please refer to the setup documentation. Launch GitLab Duo Workflow by opening the VS Code command palette [Ctrl + Shift + P] and entering \"GitLab Duo Workflow\" in it and selecting GitLab: Show Duo Workflow. A tab will appear that looks like this: The next step is to add tests for the default constructor, the verification of the object creation, and the initial state of the properties of the Product class. To accomplish this, enter the following prompt in the text area in GitLab Duo Workflow: Create unit tests for class defined in the Product.java file and store the unit tests in its own file titled ProductTest.java Click the Start button in the GitLab Duo Workflow window. Two new windows will appear: one in the center of the screen and one to the right. The one on the right displays the analysis that GitLab Duo Workflow is performing to come up with a plan that will achieve the goal as specified in your prompt. The plan is displayed in the center window. After the analysis and the plan are finished, you should see an output like this: Review the analysis and plan and, if you are satisfied with them, click Approve plan at the bottom of the window. GitLab Duo Workflow will start executing the approved plan and making modifications to your project accordingly. Once the execution of the plan is finished, you will see a new directory src/test/java/csaa/jspring/ProductManager in the project with a new file in it named ProductTest.java, which contains all the unit tests for the Product.java class. Navigate to the newly created file ProductTest.java and you will see that it has some import statements underlined in red indicating some import errors: Let’s have GitLab Duo Workflow fix these for us. Note: We could have also asked GitLab Duo Workflow in our first prompt to update the pom.xml file accordingly. But since we didn’t, let’s fix these errors in a new workflow. Launching a GitLab Duo Workflow to fix errors in generated code Start a new workflow by clicking on the New workflow button at the bottom of the analysis window on the right side of your screen. In the prompt text area, enter the following: The file ProductTest.java has an error “The import org.junit cannot be resolved”. Please fix it After you approve the proposed plan, GitLab Duo Workflow starts its analysis by reading the current pom.xml file. It then edits it and removes the outdated JUnit dependency, and follows that with the addition of the correct dependency and version for JUnit. Lastly, it reads the ProductTest.java file to clear all the dependency errors. Watch the tutorial Through the execution of this plan, GitLab Duo Workflow is effectively making updates to the project to achieve what was requested in the prompt, saving time and effort, and increasing productivity so that developers can spend more time innovating and creating value for their organization. If you’d like to see what you read above in action, watch the following video: Sign up for the GitLab Duo Workflow private beta waitlist to see what’s possible with AI agents that understand your entire SDLC. Read more about GitLab Duo Workflow and agentic AI GitLab Duo Workflow: Enterprise visibility and control for agentic AI GitLab Duo Workflow documentation GitLab Duo Agentic AI: Unlocking developer potential at scale (The Source)",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/2gQoQIbY9NvjLFpXtsxtXy/0a68928510160166d6beee5d417ff048/Workflow_1800x945.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eAssuring the quality of your applications via test-driven design, good code coverage, and issue detection is critically important to your customers and your reputation, but it can also be a time-consuming endeavor. \u003ca href=\"https://about.gitlab.com/gitlab-duo/workflow/\"\u003eGitLab Duo Workflow\u003c/a\u003e, agentic AI built on top of the most comprehensive DevSecOps platform, can help you quickly complete development tasks such as adding unit tests to a Java application. This tutorial demonstrates how by using this sample \u003ca href=\"https://gitlab.com/gitlab-da/playground/csaavedra/gdw/prodmgr-gdw\"\u003eJava project\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGitLab Duo Workflow is currently in private beta. Join the \u003ca href=\"https://about.gitlab.com/gitlab-duo/workflow/\"\u003ewaitlist\u003c/a\u003e to see what’s possible with AI agents that understand your entire SDLC.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"opening-your-project-in-vs-code\" tabindex=\"-1\"\u003eOpening your project in VS Code \u003ca href=\"#opening-your-project-in-vs-code\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eOpen the Java project in Visual Studio Code (after cloning it to your local machine). Ensure that you’re in a feature branch (not the main or default branch) before you start. If you’re already working on a merge request, it will have its own associated feature branch.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e(This step is optional.) Navigate to the file that defines the Java class for which you’d like to have GitLab Duo Workflow create unit tests. Inspect it so that you can later confirm that the generated unit tests do cover its class members. This is what you would see:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/2cHpNucIN13FEJyFLEIgdo/fc99df3b3dc48649341df8d6e2311c2c/image2.png\" alt=\"File that defines the Java class for which you’d like to have GitLab Duo Workflow create unit tests\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We are assuming that you already enabled the GitLab Duo Workflow extension in your VS Code. If not, please refer to the \u003ca href=\"https://docs.gitlab.com/user/duo_workflow/#use-workflow-in-vs-code\"\u003esetup documentation\u003c/a\u003e.\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eLaunch GitLab Duo Workflow by opening the VS Code command palette [Ctrl + Shift + P] and entering \u0026#34;GitLab Duo Workflow\u0026#34; in it and selecting \u003cstrong\u003eGitLab: Show Duo Workflow\u003c/strong\u003e. A tab will appear that looks like this:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/24GK8PrGyvSAZluzwQ956d/c56066ef8e303225cad3adcf2ad8a651/image1.png\" alt=\"Launching GitLab Duo Workflow with VS Code\"/\u003e\u003c/p\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003eThe next step is to add tests for the default constructor, the verification of the object creation, and the initial state of the properties of the Product class. To accomplish this, enter the following prompt in the text area in GitLab Duo Workflow:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003eCreate unit tests for class defined in the Product.java file and store the unit tests in its own file titled ProductTest.java\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/1NECuQvL4oHdR720R9cfo9/6bc3802b78e0ecebcbfd12c8f8c6292f/image4.png\" alt=\"Prompt area in GitLab Duo Workflow\"/\u003e\u003c/p\u003e\n\u003col start=\"5\"\u003e\n\u003cli\u003eClick the \u003cstrong\u003eStart\u003c/strong\u003e button in the GitLab Duo Workflow window. Two new windows will appear: one in the center of the screen and one to the right. The one on the right displays the analysis that GitLab Duo Workflow is performing to come up with a plan that will achieve the goal as specified in your prompt. The plan is displayed in the center window. After the analysis and the plan are finished, you should see an output like this:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/4qMHUF36Fio4IwqTFyapz8/0ce897bec151e12a5895dacde66b65a1/image8.png\" alt=\"Analysis and plan generated by GitLab Duo Workflow\"/\u003e\u003c/p\u003e\n\u003col start=\"6\"\u003e\n\u003cli\u003e\n\u003cp\u003eReview the analysis and plan and, if you are satisfied with them, click \u003cstrong\u003eApprove plan\u003c/strong\u003e at the bottom of the window.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGitLab Duo Workflow will start executing the approved plan and making modifications to your project accordingly.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce the execution of the plan is finished, you will see a new directory \u003ccode\u003esrc/test/java/csaa/jspring/ProductManager\u003c/code\u003e in the project with a new file in it named \u003ccode\u003eProductTest.java\u003c/code\u003e, which contains all the unit tests for the \u003ccode\u003eProduct.java\u003c/code\u003e class.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/3BEOFUpl5WdAryOknOSkP/44fa9e32c3893755f6ce6d38e336a764/image7.png\" alt=\"New directory in the project iwth a new file name \"/\u003e\u003c/p\u003e\n\u003col start=\"9\"\u003e\n\u003cli\u003eNavigate to the newly created file \u003ccode\u003eProductTest.java\u003c/code\u003e and you will see that it has some import statements underlined in red indicating some import errors:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/6XIIuNYSOkX9f44qpH8ne4/10a1e948ed4dcfc72c8dc5715f9c26ec/image3.png\" alt=\" include imports statement and error indicators in red\"/\u003e\u003c/p\u003e\n\u003cp\u003eLet’s have GitLab Duo Workflow fix these for us.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e We could have also asked GitLab Duo Workflow in our first prompt to update the \u003ccode\u003epom.xml\u003c/code\u003e file accordingly. But since we didn’t, let’s fix these errors in a new workflow.\u003c/p\u003e\n\u003ch2 id=\"launching-a-gitlab-duo-workflow-to-fix-errors-in-generated-code\" tabindex=\"-1\"\u003eLaunching a GitLab Duo Workflow to fix errors in generated code \u003ca href=\"#launching-a-gitlab-duo-workflow-to-fix-errors-in-generated-code\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003col start=\"10\"\u003e\n\u003cli\u003eStart a new workflow by clicking on the \u003cstrong\u003eNew workflow\u003c/strong\u003e button at the bottom of the analysis window on the right side of your screen.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/22sqtQ8SvHZrQjiVYQ3XB8/6853fb83b5dbbfb4385f2637826dc66e/image6.png\" alt=\"New workflow button\"/\u003e\u003c/p\u003e\n\u003col start=\"11\"\u003e\n\u003cli\u003eIn the prompt text area, enter the following:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre\u003e\u003ccode\u003eThe file ProductTest.java has an error “The import org.junit cannot be resolved”. Please fix it\n\u003c/code\u003e\u003c/pre\u003e\n\u003col start=\"12\"\u003e\n\u003cli\u003eAfter you approve the proposed plan, GitLab Duo Workflow starts its analysis by reading the current \u003ccode\u003epom.xml\u003c/code\u003e file. It then edits it and removes the outdated JUnit dependency, and follows that with the addition of the correct dependency and version for JUnit. Lastly, it reads the \u003ccode\u003eProductTest.java\u003c/code\u003e file to clear all the dependency errors.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/5DVcnaPAo0lcnPVAwCmOP/84b78181cd1ba9548958accb7980cc2b/image5.png\" alt=\"GitLab Duo Workflow carrying out analysis by reading pom.xml\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"watch-the-tutorial\" tabindex=\"-1\"\u003eWatch the tutorial \u003ca href=\"#watch-the-tutorial\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThrough the execution of this plan, GitLab Duo Workflow is effectively making updates to the project to achieve what was requested in the prompt, saving time and effort, and increasing productivity so that developers can spend more time innovating and creating value for their organization.\u003c/p\u003e\n\u003cp\u003eIf you’d like to see what you read above in action, watch the following video:\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/Tuj7TgqY81Q?si=RReuL1pUsLafvAzs\" frameborder=\"0\" allowfullscreen=\"\"\u003e \u003c/iframe\u003e\n\u003c/figure\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eSign up for the \u003ca href=\"https://about.gitlab.com/gitlab-duo/workflow/\"\u003eGitLab Duo Workflow private beta waitlist\u003c/a\u003e to see what’s possible with AI agents that understand your entire SDLC.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"read-more-about-gitlab-duo-workflow-and-agentic-ai\" tabindex=\"-1\"\u003eRead more about GitLab Duo Workflow and agentic AI \u003ca href=\"#read-more-about-gitlab-duo-workflow-and-agentic-ai\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/02/24/gitlab-duo-workflow-enterprise-visibility-and-control-for-agentic-ai/\"\u003eGitLab Duo Workflow: Enterprise visibility and control for agentic AI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/user/duo_workflow/\"\u003eGitLab Duo Workflow documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/gitlab-duo/\"\u003eGitLab Duo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/the-source/ai/agentic-ai-unlocking-developer-potential-at-scale/\"\u003eAgentic AI: Unlocking developer potential at scale (The Source)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-04-10T00:00:00Z",
  "modifiedTime": null
}
