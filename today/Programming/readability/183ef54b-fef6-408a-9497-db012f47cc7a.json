{
  "id": "183ef54b-fef6-408a-9497-db012f47cc7a",
  "title": "How Java Open-Source Projects Use IntelliJ IDEA: Real-World Examples ‚Äì Part¬†1",
  "link": "https://blog.jetbrains.com/blog/2025/05/27/how-java-open-source-projects-use-intellij-idea-real-world-examples-part-1/",
  "description": "At JetBrains, we build tools to help developers stay focused and productive, and we‚Äôre especially proud when those tools help power the open-source projects that developers around the world rely on every day. Shaping the direction of Java development, such projects contribute substantially to the vibrant Java ecosystem. This two-part series highlights some of the [‚Ä¶]",
  "author": "Lena Morozova",
  "published": "Tue, 27 May 2025 10:50:00 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "community",
    "idea",
    "community-support",
    "intellij-idea",
    "open-source-program",
    "oss-projects"
  ],
  "byline": "Lena Morozova",
  "length": 8290,
  "excerpt": "At JetBrains, we build tools to help developers stay focused and productive, and we‚Äôre especially proud when those tools help power the open-source projects that developers around the world rely on ev",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Community IntelliJ IDEA At JetBrains, we build tools to help developers stay focused and productive, and we‚Äôre especially proud when those tools help power the open-source projects that developers around the world rely on every day. Shaping the direction of Java development, such projects contribute substantially to the vibrant Java ecosystem. This two-part series highlights some of the most impressive open-source Java projects we support. From testing frameworks and HTML parsers to innovative web libraries and languages, each of these projects reflects the creativity and ingenuity of the Java community. In each case, JetBrains IDEs like IntelliJ IDEA help developers ship faster, work more confidently, and write better code. ‚òï Spring Framework The world‚Äôs most popular Java framework. Spring needs little introduction. It‚Äôs the backbone of modern Java server-side development, with a strong focus on simplicity, productivity, and the developer experience. JetBrains shares those values, and the close collaboration between the Spring and JetBrains teams promotes synergies for server-side developers worldwide. Feedback from the Spring team helps ensure IntelliJ IDEA offers a seamless, intuitive experience for Spring developers ‚Äì even as new features are introduced. Kotlin also continues to shape Spring‚Äôs direction: null-safety support introduced in Spring Framework 5 is evolving in version 7 with JSpecify annotations, benefiting both Java and Kotlin users. ‚Äî S√©bastien Deleuze, Spring Framework core committer The Spring community is now focusing on Spring AI ‚Äì an application framework that brings Spring‚Äôs principles of modularity and portability to the AI domain using familiar POJO (Plain Old Java Object) patterns, with support for both Java and Kotlin. The team also continues to invest in runtime efficiency through GraalVM native image support, Project Leyden JVM optimizations, and clever defaults in Spring Boot. Mature parts of the framework are evolving too, with features like client-side API versioning on the way. üïπÔ∏è Play Framework A high-performance, developer-friendly web framework for Scala and Java. The Play Framework is trusted for a wide range of applications, including high-traffic news platforms and national tax systems. It focuses on scalability and simplicity and prioritizes the developer experience, offering built-in tooling, a reactive model, and a stateless architecture. We primarily use IntelliJ IDEA for Play development, and it‚Äôs been fantastic. The Scala plugin offers first-class support for SBT and Scala, along with dedicated features for Play projects ‚Äì like syntax highlighting and navigation for route files and Twirl templates. Scala 3 support is now very mature, and it‚Äôs clear that the JetBrains team truly cares about the Scala and Play Framework communities. ‚Äî Matthias Kurz, Play Framework maintainer The next major Play release, expected in mid-2025, focuses on steady, thoughtful improvements. Highlights include Gradle support, enhanced Kotlin compatibility, improved WebSockets, and better support for modern web standards and database migrations. The release will also complete the transition to the Jakarta namespace, ensure compatibility with Java 25 LTS, and include upgrades to Pekko and other core dependencies. üß© Koin A simple and powerful dependency injection framework for Kotlin. Koin was created to make dependency injection in Kotlin simple, lightweight, and intuitive ‚Äì especially for Android. Existing dependency injection tools were too complex and slow to compile, or they didn‚Äôt fully embrace Kotlin‚Äôs strengths. Inspired by Spring Boot and Kotlin‚Äôs expressive features, Koin introduced a clean DSL, smart defaults, and seamless integrations, providing intuitive dependency injection support. IntelliJ IDEA is my daily go-to tool ‚Äì first for Java, and even more so for Kotlin thanks to its excellent end-to-end support. That experience inspired us to create the Koin plugin: a tool that brings visual feedback, real-time safety checks, and seamless navigation for Koin definitions right into the IDE. ‚Äî Arnaud Giuliani, creator of Koin The Koin team is actively working on version 4.1, which will bring enhanced support for Compose Multiplatform and KMP, integrated compatibility with Ktor 3.1, and a new set of Scope features. Looking ahead, version 4.2 is already in development, with a focus on deeper coroutine integration, a new Job Scheduler API, Kotlin RPC support, and further improvements to the Koin DSL. üîß Micronaut A modern, lightweight framework built for fast startup and low memory use. Micronaut was created in 2018 by the core team behind the Groovy-based Grails framework, known for its strong focus on developer productivity. The team saw an opportunity to rethink how Java frameworks handle work traditionally done at runtime. By shifting more processing to the compile phase, Micronaut dramatically reduces memory usage and startup time while maintaining a smooth, productive developer experience. Micronaut supports Java, Kotlin, and Groovy ‚Äì and IntelliJ IDEA offers first-class support for all three. Features like build delegation to Gradle or Maven, a built-in HTTP client, code coverage tools, and powerful debugging ‚Äì including for GraalVM native images ‚Äì make IntelliJ IDEA a great environment for developing and maintaining modern Micronaut applications. ‚Äî Sergio del Amo, Micronaut Development Leadership Panel member Micronaut follows strict semantic versioning, reflecting its commitment to stability and modern development. The framework‚Äôs core mission remains unchanged: to deliver an excellent developer experience while minimizing memory usage and optimizing startup time, both of which have a direct impact on productivity. üîç OpenGrok A fast, full-featured source code search and cross-referencing engine for large codebases. OpenGrok helps developers understand and navigate large, complex codebases across multiple languages and version control systems. The tool has evolved into a powerful, extensible search platform used by engineering teams worldwide. We recently explained to a colleague why we use IntelliJ IDEA. It really helps us work more efficiently ‚Äì for example, we can debug JSPs directly in a Tomcat instance running from the IDE, view runtime graphs, and use powerful refactoring tools. ‚Äî ƒΩubo≈° Ko≈°ƒço and Vladim√≠r Kotal, OpenGrok maintainers The OpenGrok development team is currently focusing on boosting performance and stability, particularly for large datasets. This involves reducing the amount of indexing data to run OpenGrok efficiently in lightweight Docker containers and phasing out the JavaBeans serialization format. Looking further ahead, the team aims to improve support for binary file formats and explore the possibility of adding new analyzers to extend OpenGrok‚Äôs capabilities. Stay tuned for Part 2, where we dive into more projects. In the meantime, join us on June 3‚Äì4 for IntelliJ IDEA Conf 2025, our free online event celebrating modern Java development. Whether you‚Äôre working on open source projects, building enterprise apps, or still learning the ropes, it‚Äôs a great opportunity to learn about best practices and find inspiration in how industry experts are building with IntelliJ IDEA. Subscribe to JetBrains Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/05/IJ-social-BlogSocialShare-1280x720-2x-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/blog/category/community/\"\u003eCommunity\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/blog/category/idea/\"\u003eIntelliJ IDEA\u003c/a\u003e\u003c/p\u003e                    \n                    \n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2560\" height=\"1440\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/IJ-social-BlogFeatured-1280x720-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAt JetBrains, we build tools to help developers stay focused and productive, and we‚Äôre especially proud when those tools help power the open-source projects that developers around the world rely on every day. Shaping the direction of Java development, such projects contribute substantially to the vibrant Java ecosystem.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis two-part series highlights some of the most impressive open-source Java projects we support. From testing frameworks and HTML parsers to innovative web libraries and languages, each of these projects reflects the creativity and ingenuity of the Java community. In each case, JetBrains IDEs like IntelliJ IDEA help developers ship faster, work more confidently, and write better code.\u003c/p\u003e\n\n\n\n\u003ch2\u003e‚òï Spring Framework\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eThe world‚Äôs most popular Java framework.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/spring-projects\" target=\"_blank\" rel=\"noopener\"\u003eSpring\u003c/a\u003e needs little introduction. It‚Äôs the backbone of modern Java server-side development, with a strong focus on simplicity, productivity, and the developer experience. JetBrains shares those values, and the close collaboration between the Spring and JetBrains teams promotes synergies for server-side developers worldwide.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eFeedback from the Spring team helps ensure IntelliJ IDEA offers a seamless, intuitive experience for Spring developers ‚Äì even as new features are introduced. Kotlin also continues to shape Spring‚Äôs direction: null-safety support introduced in Spring Framework 5 is evolving in version 7 with JSpecify annotations, benefiting both Java and Kotlin users.\u003c/p\u003e\n\u003ccite\u003e\u003cem\u003e‚Äî S√©bastien Deleuze, Spring Framework core committer\u003c/em\u003e\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThe Spring community is now focusing on Spring AI ‚Äì an application framework that brings Spring‚Äôs principles of modularity and portability to the AI domain using familiar POJO (Plain Old Java Object) patterns, with support for both Java and Kotlin. The team also continues to invest in runtime efficiency through GraalVM native image support, Project Leyden JVM optimizations, and clever defaults in Spring Boot. Mature parts of the framework are evolving too, with features like client-side API versioning on the way.\u003c/p\u003e\n\n\n\n\u003ch2\u003eüïπÔ∏è Play Framework\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eA high-performance, developer-friendly web framework for Scala and Java.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://github.com/playframework/playframework/\" target=\"_blank\" rel=\"noopener\"\u003ePlay Framework\u003c/a\u003e is trusted for a wide range of applications, including high-traffic news platforms and national tax systems. It focuses on scalability and simplicity and prioritizes the developer experience, offering built-in tooling, a reactive model, and a stateless architecture.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eWe primarily use IntelliJ IDEA for Play development, and it‚Äôs been fantastic. The Scala plugin offers first-class support for SBT and Scala, along with dedicated features for Play projects ‚Äì like syntax highlighting and navigation for route files and Twirl templates. Scala 3 support is now very mature, and it‚Äôs clear that the JetBrains team truly cares about the Scala and Play Framework communities.\u003c/p\u003e\n\u003ccite\u003e\u003cem\u003e‚Äî Matthias Kurz, Play Framework maintainer\u003c/em\u003e\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThe next major Play release, expected in mid-2025, focuses on steady, thoughtful improvements. Highlights include Gradle support, enhanced Kotlin compatibility, improved WebSockets, and better support for modern web standards and database migrations. The release will also complete the transition to the Jakarta namespace, ensure compatibility with Java 25 LTS, and include upgrades to Pekko and other core dependencies.\u003c/p\u003e\n\n\n\n\u003ch2\u003eüß© Koin\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eA simple and powerful dependency injection framework for Kotlin.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/InsertKoinIO/koin\" target=\"_blank\" rel=\"noopener\"\u003eKoin\u003c/a\u003e was created to make dependency injection in Kotlin simple, lightweight, and intuitive ‚Äì especially for Android. Existing dependency injection tools were too complex and slow to compile, or they didn‚Äôt fully embrace Kotlin‚Äôs strengths. Inspired by Spring Boot and Kotlin‚Äôs expressive features, Koin introduced a clean DSL, smart defaults, and seamless integrations, providing intuitive dependency injection support.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eIntelliJ IDEA is my daily go-to tool ‚Äì first for Java, and even more so for Kotlin thanks to its excellent end-to-end support. That experience inspired us to create the Koin plugin: a tool that brings visual feedback, real-time safety checks, and seamless navigation for Koin definitions right into the IDE.\u003c/p\u003e\n\u003ccite\u003e\u003cem\u003e‚Äî Arnaud Giuliani, creator of Koin\u003c/em\u003e\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThe Koin team is actively working on version 4.1, which will bring enhanced support for Compose Multiplatform and KMP, integrated compatibility with Ktor 3.1, and a new set of Scope features. Looking ahead, version 4.2 is already in development, with a focus on deeper coroutine integration, a new Job Scheduler API, Kotlin RPC support, and further improvements to the Koin DSL.\u003c/p\u003e\n\n\n\n\u003ch2\u003eüîß Micronaut\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eA modern, lightweight framework built for fast startup and low memory use.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/micronaut-projects/micronaut-core\" target=\"_blank\" rel=\"noopener\"\u003eMicronaut\u003c/a\u003e was created in 2018 by the core team behind the Groovy-based Grails framework, known for its strong focus on developer productivity. The team saw an opportunity to rethink how Java frameworks handle work traditionally done at runtime. By shifting more processing to the compile phase, Micronaut dramatically reduces memory usage and startup time while maintaining a smooth, productive developer experience.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eMicronaut supports Java, Kotlin, and Groovy ‚Äì and IntelliJ IDEA offers first-class support for all three. Features like build delegation to Gradle or Maven, a built-in\u003ca href=\"https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html\" target=\"_blank\" rel=\"noopener\"\u003e HTTP client\u003c/a\u003e,\u003ca href=\"https://www.jetbrains.com/help/idea/code-coverage.html\" target=\"_blank\" rel=\"noopener\"\u003e code coverage\u003c/a\u003e tools, and powerful debugging ‚Äì including for\u003ca href=\"https://www.jetbrains.com/help/idea/debug-graalvm-native.html\" target=\"_blank\" rel=\"noopener\"\u003e GraalVM native images\u003c/a\u003e ‚Äì make IntelliJ IDEA a great environment for developing and maintaining modern Micronaut applications.\u003c/p\u003e\n\u003ccite\u003e\u003cem\u003e‚Äî Sergio del Amo, Micronaut Development Leadership Panel member\u003c/em\u003e\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eMicronaut follows\u003ca href=\"https://micronaut.io/micronaut-roadmap/\" target=\"_blank\" rel=\"noopener\"\u003e strict semantic versioning\u003c/a\u003e, reflecting its commitment to stability and modern development. The framework‚Äôs core mission remains unchanged: to deliver an excellent developer experience while minimizing memory usage and optimizing startup time, both of which have a direct impact on productivity.\u003c/p\u003e\n\n\n\n\u003ch2\u003eüîç OpenGrok\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eA fast, full-featured source code search and cross-referencing engine for large codebases.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/oracle/opengrok\" target=\"_blank\" rel=\"noopener\"\u003eOpenGrok\u003c/a\u003e helps developers understand and navigate large, complex codebases across multiple languages and version control systems. The tool has evolved into a powerful, extensible search platform used by engineering teams worldwide.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eWe recently explained to a colleague why we use IntelliJ IDEA. It really helps us work more efficiently ‚Äì for example, we can debug JSPs directly in a Tomcat instance running from the IDE, view runtime graphs, and use powerful refactoring tools.\u003c/p\u003e\n\u003ccite\u003e\u003cem\u003e‚Äî ƒΩubo≈° Ko≈°ƒço and Vladim√≠r Kotal, OpenGrok maintainers\u003c/em\u003e\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThe OpenGrok development team is currently focusing on boosting performance and stability, particularly for large datasets. This involves reducing the amount of indexing data to run OpenGrok efficiently in lightweight Docker containers and phasing out the JavaBeans serialization format. Looking further ahead, the team aims to improve support for binary file formats and explore the possibility of adding new analyzers to extend OpenGrok‚Äôs capabilities.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eStay tuned for Part 2, where we dive into more projects. In the meantime, join us on June 3‚Äì4 for \u003ca href=\"https://lp.jetbrains.com/intellij-idea-conf-2025/?utm_source=blog\u0026amp;utm_medium=jetbrains\u0026amp;utm_campaign=intellijideaconf\u0026amp;utm_content=oss\" target=\"_blank\" rel=\"noopener\"\u003eIntelliJ IDEA Conf 2025\u003c/a\u003e, our free online event celebrating modern Java development. Whether you‚Äôre working on open source projects, building enterprise apps, or still learning the ropes, it‚Äôs a great opportunity to learn about best practices and find inspiration in how industry experts are building with IntelliJ IDEA.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://lp.jetbrains.com/intellij-idea-conf-2025/?utm_source=blog\u0026amp;utm_medium=jetbrains\u0026amp;utm_campaign=intellijideaconf\u0026amp;utm_content=oss\" target=\"_blank\" rel=\"noopener\"\u003e\u003cimg decoding=\"async\" width=\"1300\" height=\"400\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Email-banner-650x200-2x-Register.png\" alt=\"\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to JetBrains Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
