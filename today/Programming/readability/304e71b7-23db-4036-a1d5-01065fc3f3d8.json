{
  "id": "304e71b7-23db-4036-a1d5-01065fc3f3d8",
  "title": "Lessons on How to Get Timeouts, Retries and Idempotency Right From Sam Newman at QCon London",
  "link": "https://www.infoq.com/news/2025/04/resilient-distributed-systems/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "At QCon London, Sam Newman - the architect who has attributed the coining of the term microservices, went back to the basics to underline the three critical things to get right when working with distributed systems: timeouts, retries and idempotency. Through the talk, he provided mechanisms allowing distributed systems to be more robust. By Olimpiu Pop",
  "author": "Olimpiu Pop",
  "published": "Wed, 09 Apr 2025 14:14:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Microservices",
    "QCon London 2025",
    "Distributed Systems",
    "DevOps",
    "Architecture \u0026 Design",
    "Development",
    "news"
  ],
  "byline": "Olimpiu Pop",
  "length": 5152,
  "excerpt": "At QCon London, Sam Newman - the architect who has attributed the coining of the term microservices, went back to the basics to underline the three critical things to get right when working with distr",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250408103814/apple-touch-icon.png",
  "text": "At QCon London, Sam Newman - the architect who has attributed the coining of the term microservices, went back to the basics to underline the three critical things to get right when working with distributed systems: timeouts, retries and idempotency. Through the talk, he provided mechanisms allowing distributed systems to be more robust. He started his presentation by \"poking at\" the quote \"Insanity is doing the same thing over and over again and expecting different results.\" stating that in many situations, especially when it comes to distributed systems, doing the same thing it’s advisable. Further, he underlined that developers shouldn’t do complex analyses of Paxos vs Raft vs SWIM and not even debate the nuances of the CAP theorem, but just to be able to wrap their heads around timeouts (\"knowing when to give up\"), retries (\"how many times should I try again\") and idempotency (making it \"a bit\" safe). Leslie Lamport: \"A distributed system is one in which the failure of a computer you didn't even know existed can render your computer unusable.\" To further frame the context, he enumerates the three \"golden rules\" of distributed systems: You can’t beam information between two points instantaneously Sometimes, you can’t reach the thing you want to talk to Resources are finite Before delving into providing more insights on making distributed systems more robust, he stressed that this trio, taken together, underpins all the complexity hidden by distributed systems behind different abstractions. Timeouts: A threshold after which a request will be terminated if not completed The system uses computational resources(CPUs, threads, or memory) when waiting, regardless of blocking or non-blocking IO. Waiting \"a lot\" means overflowing your system with requests, translating into \"stuff falling over.\" Besides, the user experience might also degrade: how long will the customer wait for the action to be finished? It’s challenging to get the proper timeout right. To avoid timing out too quickly or waiting too long, you need to mainly understand two things: how long things usually take for your system to be executed and what the user’s expectations from the system (\"When are they starting to fit the refresh button of the page\"). Besides finding the proper value for the timeout, it’s essential for more consistent system behaviour. In that case, allocating resources will ensure that the duration of the calls falls within a more compact time frame. Also, the system should allow changes in the value timeouts without recompiling or redeploying the system. Newman: \"Timeouts are about prioritising system health over the success of a single request\". Retries Like timeouts, choosing the proper number of retries is also challenging. Too many retries would be similar to a self-inflicted DoS attack. To make systems more resilient, you must implement rate limiting on the client and server-side mechanisms to share excess load. Also, introducing an artificial network jitter (random-valued delays between retries) would ensure your systems have time to recover from failures. Newman warns against introducing exponential backoff, as that will put more pressure on your system than release it. Idempotency: the property of an operation to be applied multiple times without changing the result. The last fundamental pillar of distributed systems is ensuring that it’s safe to retry calls. If the first two pillars focus on what the clients need to do to make the systems safer, the last one is all about behaviour on the server side. According to Newman, there are two possibilities if a client doesn’t receive a response from a server: The request didn’t go through. Hence, the server didn’t have anything to process. In this case, there is no problem. The request was processed, but the response didn’t reach the customer. The system already operated the change, but the customer wasn’t notified. Idempotency is easy to implement upfront but harder to retrofit. He mentions two ways of implementing it: using a request ID, which multiple major cloud providers use, but it also requires changes on the client side. The alternative fingerprinting of the request ensures that the changes are isolated on the server side. You need to ensure that the fingerprint is based on consistent information between requests(avoid timestamps, which should be part of the header in the first place) but also to be timebound. Another consideration is that you must notify the customer that other previous requests were processed, and a good place to place that information is in the metadata. When the request's body might be changed, it is better to implement both mechanisms. Newman closed the presentation by stating that in the case of distributed systems, doing the same thing repeatedly is eminently sensible, but to a point when you can make those retries safe and by humorously pointing out that his quote is falsely attributed to Albert Einstein. About the Author Olimpiu Pop",
  "image": "https://res.infoq.com/news/2025/04/resilient-distributed-systems/en/headerimage/header+%283%29-1744206420441.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAt QCon London, \u003ca href=\"https://www.linkedin.com/in/samnewman/\"\u003eSam Newman\u003c/a\u003e - the architect who has attributed the coining of the term microservices, went back to the basics to underline the three critical things to get right when working with distributed systems: timeouts, retries and idempotency. Through the talk, he provided mechanisms allowing distributed systems to be more robust.\u003c/p\u003e\n\n\u003cp\u003eHe started his presentation by \u0026#34;poking at\u0026#34; the quote \u003cem\u003e\u0026#34;Insanity is doing the same thing over and over again and expecting different results.\u0026#34; \u003c/em\u003estating that in many situations, especially when it comes to distributed systems, doing the same thing it’s advisable. Further, he underlined that developers shouldn’t do complex analyses of \u003ca href=\"https://en.wikipedia.org/wiki/Paxos_(computer_science)\"\u003ePaxos\u003c/a\u003e vs \u003ca href=\"https://en.wikipedia.org/wiki/Raft_(algorithm)\"\u003eRaft\u003c/a\u003e vs \u003ca href=\"https://en.wikipedia.org/wiki/SWIM_Protocol\"\u003eSWIM\u003c/a\u003e and not even debate the nuances of the \u003ca href=\"https://en.wikipedia.org/wiki/CAP_theorem\"\u003eCAP theorem\u003c/a\u003e, but just to be able to wrap their heads around \u003cstrong\u003etimeouts\u003c/strong\u003e (\u003cem\u003e\u0026#34;knowing when to give up\u0026#34;), \u003c/em\u003e\u003cstrong\u003eretries\u003c/strong\u003e (\u0026#34;how many times should I try again\u0026#34;) and \u003cstrong\u003eidempotency\u003c/strong\u003e (making it \u0026#34;a bit\u0026#34; safe).\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eLeslie Lamport: \u003c/strong\u003e\u0026#34;A distributed system is one in which the failure of a computer you didn\u0026#39;t even know existed can render your computer unusable.\u0026#34;\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eTo further frame the context, he enumerates the three \u0026#34;golden rules\u0026#34; of distributed systems:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eYou can’t beam information between two points instantaneously\u003c/li\u003e\n\t\u003cli\u003eSometimes, you can’t reach the thing you want to talk to\u003c/li\u003e\n\t\u003cli\u003eResources are finite\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eBefore delving into providing more insights on making distributed systems more robust, he stressed that this trio, taken together, underpins all the complexity hidden by distributed systems behind different abstractions.\u003c/p\u003e\n\n\u003ch3\u003e\u003cstrong\u003eTimeouts: \u003c/strong\u003eA threshold after which a request will be terminated if not completed\u003c/h3\u003e\n\n\u003cp\u003eThe system uses computational resources(CPUs, threads, or memory) when waiting, regardless of blocking or non-blocking IO. Waiting \u0026#34;a lot\u0026#34; means overflowing your system with requests, translating into \u0026#34;stuff falling over.\u0026#34; Besides, the user experience might also degrade: how long will the customer wait for the action to be finished?\u003c/p\u003e\n\n\u003cp\u003eIt’s challenging to get the proper timeout right. To avoid timing out too quickly or waiting too long, you need to mainly understand two things: how long things usually take for your system to be executed and what the user’s expectations from the system (\u0026#34;When are they starting to fit the refresh button of the page\u0026#34;). Besides finding the proper value for the timeout, it’s essential for more consistent system behaviour. In that case, allocating resources will ensure that the duration of the calls falls within a more compact time frame. Also, the system should allow changes in the value timeouts without recompiling or redeploying the system.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNewman: \u003c/strong\u003e\u0026#34;Timeouts are about prioritising system health over the success of a single request\u0026#34;.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3\u003e\u003cstrong\u003eRetries\u003c/strong\u003e\u003c/h3\u003e\n\n\u003cp\u003eLike timeouts, choosing the proper number of retries is also challenging. Too many retries would be \u003ca href=\"https://medium.com/square-corner-blog/incident-summary-2017-03-16-2f65be39297\"\u003esimilar to a self-inflicted DoS attack\u003c/a\u003e. To make systems more resilient, you must implement rate limiting on the client and server-side mechanisms to share excess load. Also, introducing an artificial network jitter (random-valued delays between retries) would ensure your systems have time to recover from failures. Newman warns against introducing exponential backoff, as that will put more pressure on your system than release it.\u003c/p\u003e\n\n\u003ch3\u003e\u003cimg alt=\"\" data-src=\"news/2025/04/resilient-distributed-systems/en/resources/10image3-1744205813642.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/resilient-distributed-systems/en/resources/10image3-1744205813642.png\" rel=\"share\"/\u003e\u003c/h3\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eIdempotency: \u003c/strong\u003ethe property of an operation to be applied multiple times without changing the result.\u003c/h3\u003e\n\n\u003cp\u003eThe last fundamental pillar of distributed systems is ensuring that it’s safe to retry calls. If the first two pillars focus on what the clients need to do to make the systems safer, the last one is all about behaviour on the server side. According to Newman, there are two possibilities if a client doesn’t receive a response from a server:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eThe request didn’t go through. Hence, the server didn’t have anything to process. In this case, there is no problem.\u003c/li\u003e\n\t\u003cli\u003eThe request was processed, but the response didn’t reach the customer. The system already operated the change, but the customer wasn’t notified.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIdempotency is easy to implement upfront but harder to retrofit. He mentions two ways of implementing it: using a request ID, which multiple major cloud providers use, but it also requires changes on the client side.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/04/resilient-distributed-systems/en/resources/12image2-1744205813642.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/resilient-distributed-systems/en/resources/12image2-1744205813642.png\" rel=\"share\"/\u003eThe alternative fingerprinting of the request ensures that the changes are isolated on the server side. You need to ensure that the fingerprint is based on consistent information between requests(avoid timestamps, which should be part of the header in the first place) but also to be timebound. Another consideration is that you must notify the customer that other previous requests were processed, and a good place to place that information is in the metadata.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/04/resilient-distributed-systems/en/resources/12image1-1744205813642.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/resilient-distributed-systems/en/resources/12image1-1744205813642.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen the request\u0026#39;s body might be changed, it is better to implement both mechanisms.\u003c/p\u003e\n\n\u003cp\u003eNewman closed the presentation by stating that in the case of distributed systems, doing the same thing repeatedly is eminently sensible, but to a point when you can make those retries safe and by humorously pointing out that his quote is falsely attributed to Albert Einstein.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Olimpiu-Pop\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eOlimpiu Pop\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-04-09T00:00:00Z",
  "modifiedTime": null
}
