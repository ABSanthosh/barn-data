{
  "id": "1c40c735-0bae-4556-8c9e-f69082f1947c",
  "title": "Getting started with GitLab: Working with CI/CD variables",
  "link": "https://about.gitlab.com/blog/2025/05/27/getting-started-with-gitlab-working-with-ci-cd-variables",
  "description": "",
  "author": "GitLab Team",
  "published": "2025-05-27T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "GitLab Team",
  "length": 5880,
  "excerpt": "Learn what CI/CD variables are, why they are important in DevSecOps, and best practices for utilizing them.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Welcome to our \"Getting started with GitLab\" series, where we help newcomers get familiar with the GitLab DevSecOps platform. In an earlier article, we explored GitLab CI/CD. Now, let's dive deeper into the world of CI/CD variables and unlock their full potential. What are CI/CD variables? CI/CD variables are dynamic key-value pairs that you can define at different levels within your GitLab environment (e.g., project, group, or instance). These variables act as placeholders for values that you can use in your .gitlab-ci.yml file to customize your pipelines, securely store sensitive information, and make your CI/CD configuration more maintainable. Why are CI/CD variables important? CI/CD variables offer numerous benefits: Flexibility - Easily adapt your pipelines to different environments, configurations, or deployment targets without modifying your core CI/CD script. Security - Securely store sensitive information like API keys, passwords, and tokens, preventing them from being exposed directly in your code. Maintainability - Keep your CI/CD configuration clean and organized by centralizing values in variables, making updates and modifications easier. Reusability - Define variables once and reuse them across multiple projects, promoting consistency and reducing duplication. Scopes of CI/CD variables: Project, group, and instance GitLab allows you to define CI/CD variables with different scopes, controlling their visibility and accessibility: Project-level variables - These variables are specific to a single project and are ideal for storing project-specific settings, such as: Deployment URLs: Define different URLs for staging and production environments. Database credentials: Store database connection details for testing or deployment. Feature flags: Enable or disable features during different stages of your pipeline. Example: You have a project called \"MyWebApp\" and want to store the production deployment URL. You create a project-level variable named DPROD_DEPLOY_URL with the value https://mywebapp.com. Group-level variables - These variables are shared across all projects within a GitLab group. They are useful for settings that are common to multiple projects, such as: API keys for shared services: Store API keys for services like AWS, Google Cloud, or Docker Hub that are used by multiple projects within the group. Global configuration settings: Define common configuration parameters that apply to all projects in the group. Example: You have a group called \"Web Apps\" and want to store an API key for Docker Hub. You create a group-level variable named DOCKER_HUB_API_KEY with the corresponding API key value. Instance-level variables - These variables are available to all projects on a GitLab instance. They are typically used for global settings that apply across an entire organization such as: Default runner registration token: Provide a default token for registering new runners. License information: Store license keys for GitLab features or third-party tools. Global environment settings: Define environment variables that should be available to all projects. Example: You want to set a default Docker image for all projects on your GitLab instance. You create an instance-level variable named DEFAULT_DOCKER_IMAGE with the value ubuntu:latest. Defining CI/CD variables To define a CI/CD variable: Click on the Settings \u003e CI/CD buttons for your project, group, or instance. Go to the Variables section. Click Add variable. Enter the key (e.g., API_KEY) and value. Optionally, check the Protect variable box for sensitive information. This ensures that the variable is only available to pipelines running on protected branches or tags. Optionally, check the Mask variable box to hide the variable's value from job logs, preventing accidental exposure. Click Save variable. Using CI/CD variables To use a CI/CD variable in your .gitlab-ci.yml file, simply prefix the variable name with $: deploy_job: script: - echo \"Deploying to production...\" - curl -H \"Authorization: Bearer $API_KEY\" https://api.example.com/deploy Predefined CI/CD variables GitLab provides a set of predefined CI/CD variables that you can use in your pipelines. These variables provide information about the current pipeline, job, project, and more. Some commonly used predefined variables include: $CI_COMMIT_SHA: The commit SHA of the current pipeline. $CI_PROJECT_DIR: The directory where the project is cloned. $CI_PIPELINE_ID: The ID of the current pipeline. $CI_ENVIRONMENT_NAME: The name of the environment being deployed to (if applicable). Best practices Securely manage sensitive variables: Use protected and masked variables for API keys, passwords, and other sensitive information. Avoid hardcoding values: Use variables to store configuration values, making your pipelines more flexible and maintainable. Organize your variables: Use descriptive names and group related variables together for better organization. Use the appropriate scope: Choose the correct scope (project, group, or instance) for your variables based on their intended use and visibility. Unlock the power of variables CI/CD variables are a powerful tool for customizing and securing your GitLab pipelines. By mastering variables and understanding their different scopes, you can create more flexible, maintainable, and efficient workflows. We hope you found it helpful and are now well-equipped to leverage the power of GitLab for your development projects. Get started with CI/CD variables today with a free, 60-day trial of GitLab Ultimate with Duo Enterprise. \"Getting Started with GitLab\" series Read more articles in our \"Getting Started with GitLab\" series: How to manage users How to import your projects to GitLab Mastering project management Automating Agile workflows with the gitlab-triage gem Understanding CI/CD",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/cFwd8DYFLekdnOLmbbChp/5514b1d9934fad010f5bf4968a38a15b/blog-getting-started-with-gitlab-banner-0497-option4-fy25.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-67d56f21=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003e\u003cem\u003eWelcome to our \u0026#34;Getting started with GitLab\u0026#34; series, where we help newcomers get familiar with the GitLab DevSecOps platform.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIn an earlier article, we explored \u003ca href=\"https://about.gitlab.com/blog/2025/04/25/getting-started-with-gitlab-understanding-ci-cd/\"\u003eGitLab CI/CD\u003c/a\u003e. Now, let\u0026#39;s dive deeper into the world of \u003cstrong\u003eCI/CD variables\u003c/strong\u003e and unlock their full potential.\u003c/p\u003e\n\u003ch3 id=\"what-are-cicd-variables%3F\" tabindex=\"-1\"\u003eWhat are CI/CD variables? \u003ca href=\"#what-are-cicd-variables%3F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eCI/CD variables are dynamic key-value pairs that you can define at different levels within your GitLab environment (e.g., project, group, or instance). These variables act as placeholders for values that you can use in your \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file to customize your pipelines, securely store sensitive information, and make your CI/CD configuration more maintainable.\u003c/p\u003e\n\u003ch3 id=\"why-are-cicd-variables-important%3F\" tabindex=\"-1\"\u003eWhy are CI/CD variables important? \u003ca href=\"#why-are-cicd-variables-important%3F\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eCI/CD variables offer numerous benefits:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFlexibility\u003c/strong\u003e - Easily adapt your pipelines to different environments, configurations, or deployment targets without modifying your core CI/CD script.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSecurity\u003c/strong\u003e - Securely store sensitive information like API keys, passwords, and tokens, preventing them from being exposed directly in your code.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMaintainability\u003c/strong\u003e - Keep your CI/CD configuration clean and organized by centralizing values in variables, making updates and modifications easier.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReusability\u003c/strong\u003e - Define variables once and reuse them across multiple projects, promoting consistency and reducing duplication.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"scopes-of-cicd-variables-project-group%2C-and-instance\" tabindex=\"-1\"\u003eScopes of CI/CD variables: Project, group, and instance \u003ca href=\"#scopes-of-cicd-variables-project-group%2C-and-instance\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eGitLab allows you to define CI/CD variables with different scopes, controlling their visibility and accessibility:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eProject-level variables\u003c/strong\u003e - These variables are specific to a single project and are ideal for storing project-specific settings, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDeployment URLs: Define different URLs for staging and production environments.\u003c/li\u003e\n\u003cli\u003eDatabase credentials: Store database connection details for testing or deployment.\u003c/li\u003e\n\u003cli\u003eFeature flags: Enable or disable features during different stages of your pipeline.\u003c/li\u003e\n\u003cli\u003eExample: You have a project called \u0026#34;MyWebApp\u0026#34; and want to store the production deployment URL. You create a project-level variable named \u003ccode\u003eDPROD_DEPLOY_URL\u003c/code\u003e with the value \u003ccode\u003ehttps://mywebapp.com\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eGroup-level variables\u003c/strong\u003e - These variables are shared across all projects within a GitLab group. They are useful for settings that are common to multiple projects, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAPI keys for shared services: Store API keys for services like AWS, Google Cloud, or Docker Hub that are used by multiple projects within the group.\u003c/li\u003e\n\u003cli\u003eGlobal configuration settings: Define common configuration parameters that apply to all projects in the group.\u003c/li\u003e\n\u003cli\u003eExample: You have a group called \u0026#34;Web Apps\u0026#34; and want to store an API key for Docker Hub. You create a group-level variable named \u003ccode\u003eDOCKER_HUB_API_KEY\u003c/code\u003e with the corresponding API key value.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstance-level variables\u003c/strong\u003e - These variables are available to all projects on a GitLab instance. They are typically used for global settings that apply across an entire organization such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDefault runner registration token: Provide a default token for registering new \u003ca href=\"https://docs.gitlab.com/runner/\"\u003erunners\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eLicense information: Store license keys for GitLab features or third-party tools.\u003c/li\u003e\n\u003cli\u003eGlobal environment settings: Define environment variables that should be available to all projects.\u003c/li\u003e\n\u003cli\u003eExample: You want to set a default Docker image for all projects on your GitLab instance. You create an instance-level variable named \u003ccode\u003eDEFAULT_DOCKER_IMAGE\u003c/code\u003e with the value \u003ccode\u003eubuntu:latest\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"defining-cicd-variables\" tabindex=\"-1\"\u003eDefining CI/CD variables \u003ca href=\"#defining-cicd-variables\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTo define a CI/CD variable:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eClick on the \u003cstrong\u003eSettings \u0026gt; CI/CD\u003c/strong\u003e buttons for  your project, group, or instance.\u003c/li\u003e\n\u003cli\u003eGo to the \u003cstrong\u003eVariables\u003c/strong\u003e section.\u003c/li\u003e\n\u003cli\u003eClick \u003cstrong\u003eAdd variable\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eEnter the \u003cstrong\u003ekey\u003c/strong\u003e (e.g., \u003ccode\u003eAPI_KEY\u003c/code\u003e) and \u003cstrong\u003evalue\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eOptionally, check the \u003cstrong\u003eProtect variable\u003c/strong\u003e box for sensitive information. This ensures that the variable is only available to pipelines running on protected branches or tags.\u003c/li\u003e\n\u003cli\u003eOptionally, check the \u003cstrong\u003eMask variable\u003c/strong\u003e box to hide the variable\u0026#39;s value from job logs, preventing accidental exposure.\u003c/li\u003e\n\u003cli\u003eClick \u003cstrong\u003eSave variable\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"using-cicd-variables\" tabindex=\"-1\"\u003eUsing CI/CD variables \u003ca href=\"#using-cicd-variables\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTo use a CI/CD variable in your \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file, simply prefix the variable name with \u003ccode\u003e$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edeploy_job:\n  script:\n    - echo \u0026#34;Deploying to production...\u0026#34;\n    - curl -H \u0026#34;Authorization: Bearer $API_KEY\u0026#34; https://api.example.com/deploy\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"predefined-cicd-variables\" tabindex=\"-1\"\u003ePredefined CI/CD variables \u003ca href=\"#predefined-cicd-variables\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eGitLab provides a set of \u003ca href=\"https://docs.gitlab.com/ci/variables/predefined_variables/\"\u003epredefined CI/CD variables\u003c/a\u003e that you can use in your pipelines. These variables provide information about the current pipeline, job, project, and more.\u003c/p\u003e\n\u003cp\u003eSome commonly used predefined variables include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e$CI_COMMIT_SHA\u003c/code\u003e: The commit SHA of the current pipeline.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$CI_PROJECT_DIR\u003c/code\u003e: The directory where the project is cloned.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$CI_PIPELINE_ID\u003c/code\u003e: The ID of the current pipeline.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e$CI_ENVIRONMENT_NAME\u003c/code\u003e: The name of the environment being deployed to (if applicable).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"best-practices\" tabindex=\"-1\"\u003eBest practices \u003ca href=\"#best-practices\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSecurely manage sensitive variables: Use protected and masked variables for API keys, passwords, and other sensitive information.\u003c/li\u003e\n\u003cli\u003eAvoid hardcoding values: Use variables to store configuration values, making your pipelines more flexible and maintainable.\u003c/li\u003e\n\u003cli\u003eOrganize your variables: Use descriptive names and group related variables together for better organization.\u003c/li\u003e\n\u003cli\u003eUse the appropriate scope: Choose the correct scope (project, group, or instance) for your variables based on their intended use and visibility.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"unlock-the-power-of-variables\" tabindex=\"-1\"\u003eUnlock the power of variables \u003ca href=\"#unlock-the-power-of-variables\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eCI/CD variables are a powerful tool for customizing and securing your GitLab pipelines. By mastering variables and understanding their different scopes, you can create more flexible, maintainable, and efficient workflows.\u003c/p\u003e\n\u003cp\u003eWe hope you found it helpful and are now well-equipped to leverage the power of GitLab for your development projects.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGet started with CI/CD variables today with a \u003ca href=\"https://about.gitlab.com/free-trial/\"\u003efree, 60-day trial of GitLab Ultimate with Duo Enterprise\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"%22getting-started-with-gitlab%22-series\" tabindex=\"-1\"\u003e\u0026#34;Getting Started with GitLab\u0026#34; series \u003ca href=\"#%22getting-started-with-gitlab%22-series\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eRead more articles in our \u0026#34;Getting Started with GitLab\u0026#34; series:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/01/14/getting-started-with-gitlab-how-to-manage-users/\"\u003eHow to manage users\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/01/28/getting-started-with-gitlab-how-to-import-your-projects-to-gitlab/\"\u003eHow to import your projects to GitLab\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/02/11/getting-started-with-gitlab-mastering-project-management/\"\u003eMastering project management\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/03/13/automating-agile-workflows-with-the-gitlab-triage-gem/\"\u003eAutomating Agile workflows with the gitlab-triage gem\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/04/25/getting-started-with-gitlab-understanding-ci-cd/\"\u003eUnderstanding CI/CD\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-05-27T00:00:00Z",
  "modifiedTime": null
}
