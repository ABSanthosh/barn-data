{
  "id": "cb48eba2-7f1f-4f5b-9d21-05a0778c2ff5",
  "title": "Exploring AI's Role in Automating Software Testing",
  "link": "https://www.infoq.com/news/2024/12/AI-automated-software-testing/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "QA professionals are increasingly turning to AI to address the growing complexities of software testing. AI-driven automation can improve test coverage, reduce test cycle times, and enhance the accuracy of results, leading to faster software releases with higher quality. By Ben Linders",
  "author": "Ben Linders",
  "published": "Thu, 12 Dec 2024 11:24:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Quality",
    "Automated testing",
    "Delivering Value",
    "Artificial Intelligence",
    "Software Testing",
    "Testing",
    "Delivering Quality",
    "Agile Conferences",
    "Culture \u0026 Methods",
    "news"
  ],
  "byline": "Ben Linders",
  "length": 4885,
  "excerpt": "QA professionals are increasingly turning to AI to address the growing complexities of software testing. AI-driven automation can improve test coverage, reduce test cycle times, and enhance the accura",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20241210082921/apple-touch-icon.png",
  "text": "According to Victor Ionascu, QA professionals are increasingly turning to AI to address the growing complexities of software testing. AI-driven automation can improve test coverage, reduce test cycle times, and enhance the accuracy of results, leading to faster software releases with higher quality. Victor Ionascu talked about AI’s role in software testing at QA Challenge Accepted. One of the main challenges today is to ensure comprehensive test coverage, Ionascu said. When dealing with complex systems, especially in sectors like banking or logistics, where we handle secure, multi-step data transactions, it’s nearly impossible to cover all edge cases manually. The risk of missing corners of impactful workflows increases with complexity. The struggle lies in ensuring coverage without compromising timelines, as Ionascu explained: As applications grow more complex, identifying and converting corner cases into viable test cases becomes increasingly difficult. This results in potential gaps in test coverage that can lead to overlooked issues. Automation testing, while valuable, often struggles with the time needed to develop robust tests and the limited ability to adapt to real-world, dynamic scenarios, Ionascu said. The challenge of automated testing is not just about setting up automation frameworks or creating scripts, but also about maintaining and evolving them as the system grows. Ionascu mentioned that the time required to develop robust tests that can handle real-world dynamic scenarios poses major issues for them. Many automated tests are brittle, they work well in stable environments but break when faced with unexpected changes or edge cases, he added. In his daily work, Ionascu uses artificial intelligence to enhance both manual and automated testing. He gave an example: I use AI-driven test generation tools like Amazon CodeWhisperer and ChatGPT to assist in the creation of automated test cases, reducing the time it takes to write complex scripts. These tools help me generate dynamic data, create edge case scenarios, and even suggest security vulnerabilities that I might have missed. AI tools can enhance both manual and automated testing workflows, Ionascu said. These tools help automate repetitive tasks, such as test case generation and bug triaging, allowing QA teams to focus on higher-value activities like exploratory testing and quality strategy, he added. While automation speeds up repetitive tasks, it often requires significant manual oversight and maintenance to handle complex workflows, Ionascu said, especially when they involve variable conditions that are hard to predict during the initial development of test scripts: Despite its value, test automation is not a silver bullet for dynamic and complex systems. InfoQ interviewed Victor Ionascu about automating testing and using AI in software testing. InfoQ: What challenges have you faced in automated software testing? Victor Ionascu: In one of our projects, we had to test an application that handles secure file transfers between multiple entities, including banks and government institutions. The flow involved multi-layer encryption (AES and RSA), and we needed to validate the entire encryption/decryption process. Initially, the automation test case we developed worked fine for standard scenarios. We scripted the flow to: Encrypt files using specific algorithms Transfer them to a central system Verify decryption on the receiving end However, when real-world scenarios emerged, such as unexpected network delays or different file formats, the automation failed. The tests weren’t able to adapt to these dynamic changes, requiring us to manually intervene, rewrite, or adjust the scripts frequently. Even small system changes, like the introduction of a new encryption algorithm or an unexpected spike in data volume, broke the automated tests. This demonstrated the limitations of current automation tools in adapting to more complex, evolving environments. InfoQ: How do you use AI in your daily work as a software tester? Ionascu: In a performance test case, we had to simulate a load test for a secure file transfer system handling up to 10,000 concurrent users. Initially, we used a manual process involving writing static test scripts with hardcoded data for user requests, which became inefficient as the system scaled. By using AI tools like CodeWhisperer, I was able to dynamically generate user loads. AI also recommended implementing a scaling mechanism instead of testing with a fixed user load. This allowed the system to adjust user loads dynamically based on the server’s performance, ensuring we captured both peak load handling and response times more effectively. About the Author Ben Linders",
  "image": "https://res.infoq.com/news/2024/12/AI-automated-software-testing/en/headerimage/exploring-ai-role-header-1733739260876.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAccording to Victor Ionascu, QA professionals are increasingly turning to AI to address the growing complexities of software testing. AI-driven automation can improve test coverage, reduce test cycle times, and enhance the accuracy of results, leading to faster software releases with higher quality.\u003c/p\u003e\n\n\u003cp\u003eVictor Ionascu talked about AI’s role in software testing at \u003ca href=\"https://qachallengeaccepted.com/\"\u003eQA Challenge Accepted\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eOne of the main challenges today is to ensure comprehensive test coverage, Ionascu said. When dealing with complex systems, especially in sectors like banking or logistics, where we handle secure, multi-step data transactions, it’s nearly impossible to cover all edge cases manually. The risk of missing corners of impactful workflows increases with complexity. The struggle lies in ensuring coverage without compromising timelines, as Ionascu explained:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAs applications grow more complex, identifying and converting corner cases into viable test cases becomes increasingly difficult. This results in potential gaps in test coverage that can lead to overlooked issues.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAutomation testing, while valuable, often struggles with the time needed to develop robust tests and the limited ability to adapt to real-world, dynamic scenarios, Ionascu said. The challenge of automated testing is not just about setting up automation frameworks or creating scripts, but also about maintaining and evolving them as the system grows.\u003c/p\u003e\n\n\u003cp\u003eIonascu mentioned that the time required to develop robust tests that can handle real-world dynamic scenarios poses major issues for them. Many automated tests are brittle, they work well in stable environments but break when faced with unexpected changes or edge cases, he added.\u003c/p\u003e\n\n\u003cp\u003eIn his daily work, Ionascu uses artificial intelligence to enhance both manual and automated testing. He gave an example:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI use AI-driven test generation tools like Amazon CodeWhisperer and ChatGPT to assist in the creation of automated test cases, reducing the time it takes to write complex scripts. These tools help me generate dynamic data, create edge case scenarios, and even suggest security vulnerabilities that I might have missed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAI tools can enhance both manual and automated testing workflows, Ionascu said. These tools help automate repetitive tasks, such as test case generation and bug triaging, allowing QA teams to focus on higher-value activities like exploratory testing and quality strategy, he added.\u003c/p\u003e\n\n\u003cp\u003eWhile automation speeds up repetitive tasks, it often requires significant manual oversight and maintenance to handle complex workflows, Ionascu said, especially when they involve variable conditions that are hard to predict during the initial development of test scripts:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDespite its value, test automation is not a silver bullet for dynamic and complex systems.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eInfoQ interviewed \u003ca href=\"https://www.linkedin.com/in/victorionascu/\"\u003eVictor Ionascu\u003c/a\u003e about automating testing and using AI in software testing.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: What challenges have you faced in automated software testing?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eVictor Ionascu\u003c/strong\u003e: In one of our projects, we had to test an application that handles secure file transfers between multiple entities, including banks and government institutions. The flow involved multi-layer encryption (AES and RSA), and we needed to validate the entire encryption/decryption process. Initially, the automation test case we developed worked fine for standard scenarios. We scripted the flow to:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eEncrypt files using specific algorithms\u003c/li\u003e\n\t\u003cli\u003eTransfer them to a central system\u003c/li\u003e\n\t\u003cli\u003eVerify decryption on the receiving end\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eHowever, when real-world scenarios emerged, such as unexpected network delays or different file formats, the automation failed. The tests weren’t able to adapt to these dynamic changes, requiring us to manually intervene, rewrite, or adjust the scripts frequently. Even small system changes, like the introduction of a new encryption algorithm or an unexpected spike in data volume, broke the automated tests. This demonstrated the limitations of current automation tools in adapting to more complex, evolving environments.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: How do you use AI in your daily work as a software tester?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIonascu\u003c/strong\u003e: In a performance test case, we had to simulate a load test for a secure file transfer system handling up to 10,000 concurrent users. Initially, we used a manual process involving writing static test scripts with hardcoded data for user requests, which became inefficient as the system scaled.\u003c/p\u003e\n\n\u003cp\u003eBy using AI tools like CodeWhisperer, I was able to dynamically generate user loads. AI also recommended implementing a scaling mechanism instead of testing with a fixed user load. This allowed the system to adjust user loads dynamically based on the server’s performance, ensuring we captured both peak load handling and response times more effectively.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Ben-Linders\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBen Linders\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-12-12T00:00:00Z",
  "modifiedTime": null
}
