{
  "id": "fc12ac11-9071-4587-a6b8-8e9faf5ce2b9",
  "title": "GitHub for Beginners: Code review and refactoring with GitHub Copilot",
  "link": "https://github.blog/ai-and-ml/github-copilot/github-for-beginners-code-review-and-refactoring-with-github-copilot/",
  "description": "Learn how to use GitHub Copilot to help review and polish your code. The post GitHub for Beginners: Code review and refactoring with GitHub Copilot appeared first on The GitHub Blog.",
  "author": "Kedasha Kerr",
  "published": "Mon, 09 Jun 2025 13:00:00 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "code review",
    "GitHub for beginners",
    "refactoring code"
  ],
  "byline": "Kedasha Kerr",
  "length": 9324,
  "excerpt": "Learn how to use GitHub Copilot to help review and polish your code.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Welcome to the next episode in our GitHub for Beginners series, where we’re diving into the world of GitHub Copilot. This is our eighth and final episode, and it’s been quite a journey. We’ve covered a lot of different topics showcasing the power of GitHub Copilot, and you can check out all our previous episodes on our blog or as videos. Today we’re covering that important step of code review—getting a second pair of eyes on your code. This can help catch bugs, improve code quality, and ensure consistency. We’ll also talk about refactoring code—restructuring existing code without changing its functionality. This can make things more efficient or more readable for those who need to understand it later (even if that’s yourself). In any development project, maintaining a clean and efficient codebase is crucial to make future work easier. But in reality, things can quickly become messy as you’re focused on making it work. That’s where Copilot can come in handy. It doesn’t just assist you in writing code, it also makes the review and refactoring process smoother and more efficient. Refactoring code Suppose that you have a function that is long and difficult to understand. Refactoring code can make it easier to understand and ensure pieces of it aren’t too unwieldy to follow. To use GitHub Copilot to help you with this refactoring task, open up Copilot Chat and do the following: Highlight the function you want to refactor in your code editor. In Copilot Chat, send the prompt please provide refactoring suggestions. Review the changes that Copilot suggests. It might break the code up into smaller pieces or optimize the logic for better performance. It might even update variable names to be aligned with your naming conventions. Once you’re comfortable with the suggested changes, click the Apply in editor button to apply the changes and have Copilot automatically update the file. This works well for small changes, but there’s no reason to stop there. This is just if you want to focus Copilot’s attention on a specific area of your code. You can also have it look across entire files or your project. For example, take a look at this dashboard component. Let’s say you want to improve it. To do so, open up the component in your editor and send Copilot Chat the following prompt: How can I improve this code? Copilot will then give several suggestions on ways the code can be improved. You can review these suggestions and even ask Copilot to explain each step in greater detail. When you’re finished, click the Apply in editor button to have Copilot make the necessary changes. To see this in action, check out the video version of this episode. Just remember that since Copilot is a generative AI tool, the suggestions you see might not match those in the video exactly. You can take this a step further by asking specific and direct questions. For example, you might want to make the data fetching logic reusable across components by creating a custom hook and centralizing the logic. To do this, create a new chat conversation and ask it the following: How can I extract the data fetching logic into a custom hook? Copilot generates refactored code that allows you to extract the logic out of the Dashboard component into a new hook directory that you can use in multiple components in the app. This makes it much more reusable! To follow through on this: Save the changes in a new file by selecting … \u003e Insert into New File. Import the hook into the dashboard file. Remove the old code. Now what if you wanted Copilot to take a look and make sure you didn’t have a bunch of redundant code in your file? Just ask it. Is there any redundant code in this file? Copilot scans your code and identifies any redundancies that can be corrected. After reviewing the suggestions, go ahead and apply them to tighten up your code and make it a bit cleaner. Reviewing and refactoring your code with GitHub Copilot is a great way to do an initial overview of the work you’ve done. You can also ask Copilot for performance improvement suggestions, how to make functions more modular, have it add comments, or upgrade syntax to be more modern. If you can think of a question, ask Copilot and see what it can do. Code reviews in github.com If you have the proper access, you can also get GitHub Copilot code reviews directly on github.com to make the process even more seamless. First, open up a pull request. Under the “Reviewers” section in the top-right corner, you’ll notice Copilot listed as a possible reviewer. Click Request to have Copilot review your code. Once Copilot finishes the review, scroll down on the pull request to see any suggestions that it makes. It’s important to note that Copilot always leaves a Comment review, and never an Approve or Request changes review. This means that Copilot’s reviews will never be required nor block merges. To accept any of Copilot’s suggestions, click Commit suggestion at the bottom of the specific suggestion you’d like to integrate. This pulls up a context menu. Click Commit changes and GitHub will update your pull request with that change. You can also batch several suggested changes by clicking the Add to batch button under individual suggestions so they are pulled into one change. After you’ve integrated any suggestions and made any changes, you can request another review from Copilot by clicking the circular arrows in the “Reviewers” box next to Copilot’s name. With Copilot code review, you can have Copilot perform a preliminary review of your code before asking your team for that final code review.  Key components and limitations The key components of using Copilot for code review and refactoring can be broken down into five areas: Automated suggestions: Copilot suggests improvements and optimizations as you review your code. Consistency checks: Copilot helps maintain coding standards by suggesting consistent naming conventions and structures for your functions. Refactoring assistance: Copilot provides actionable refactoring suggestions, whether it’s simplifying complex functions or reorganizing your codebase. Error detection: Copilot can spot potential bugs or inefficiencies that you might have missed while building. Comment support: Copilot helps generate clear comments in your code, making it easier to understand for others. While GitHub Copilot can do a lot, it’s important to keep in mind that you are the pilot, and we call it Copilot for a reason. It’s a powerful tool, but it does have some limitations. First and foremost, it relies on the context you provide, so unclear or poorly documented code might lead to less effective suggestions. In addition, while Copilot can catch many issues, it’s not a substitute for a thorough human review. Always double check the suggestions it provides to ensure they align with your project’s goals and standards, as well as your organizational policies. Your next steps GitHub Copilot is an invaluable assistant for code review and refactoring. It helps you maintain clean, efficient, and consistent code, saving you time and reducing errors. By integrating Copilot into your workflow, you can focus more on building great features and less on the nitty-gritty aspects of code maintenance. If you’d like to dive a little deeper into using Copilot to help with code reviews and refactoring, here are some links to get you started: Improving code readability and maintainability Refactoring code with GitHub Copilot Refactoring for performance optimization Using GitHub Copilot code review Configuring coding guidelines for GitHub Copilot code review Don’t forget that you can use GitHub Copilot for free! If you have any questions, pop them in the GitHub Community thread, and we’ll be sure to respond. Thanks so much for joining us for this season of GitHub for Beginners! Don’t forget to check out our previous episodes if you haven’t already. Happy coding! Need some help getting through a preliminary code review? Give GitHub Copilot a try! Tags: code review GitHub Copilot GitHub for beginners refactoring code Written by Kedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she's learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/02/418127171-3bd956ac-6856-4c72-8601-010f10058417.png?fit=2400%2C1260",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eWelcome to the next episode in our GitHub for Beginners series, where we’re diving into the world of \u003ca href=\"https://www.youtube.com/watch?v=n0NlxUyA7FI\u0026amp;list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\u0026amp;index=6\"\u003eGitHub Copilot\u003c/a\u003e. This is our eighth and final episode, and it’s been quite a journey. We’ve covered a lot of different topics showcasing the power of GitHub Copilot, and you can check out all our previous episodes on \u003ca href=\"https://github.blog/tag/github-for-beginners/\"\u003eour blog\u003c/a\u003e or \u003ca href=\"https://www.youtube.com/playlist?list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\"\u003eas videos\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eToday we’re covering that important step of code review—getting a second pair of eyes on your code. This can help catch bugs, improve code quality, and ensure consistency. We’ll also talk about refactoring code—restructuring existing code without changing its functionality. This can make things more efficient or more readable for those who need to understand it later (even if that’s yourself).\u003c/p\u003e\n\n\n\n\u003cp\u003eIn any development project, maintaining a clean and efficient codebase is crucial to make future work easier. But in reality, things can quickly become messy as you’re focused on making it work. That’s where Copilot can come in handy. It doesn’t just assist you in writing code, it also makes the review and refactoring process smoother and more efficient.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Code review \u0026amp; refactoring with GitHub Copilot: A beginner\u0026#39;s guide\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/LsQGilvXAfE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\n\n\n\n\u003ch2 id=\"refactoring-code\"\u003eRefactoring code\u003c/h2\u003e\n\n\n\n\u003cp\u003eSuppose that you have a function that is long and difficult to understand. Refactoring code can make it easier to understand and ensure pieces of it aren’t too unwieldy to follow.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo use GitHub Copilot to help you with this refactoring task, open up Copilot Chat and do the following:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eHighlight the function you want to refactor in your code editor.\u003c/li\u003e\n\n\n\n\u003cli\u003eIn Copilot Chat, send the prompt \u003ccode\u003eplease provide refactoring suggestions\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eReview the changes that Copilot suggests. It might break the code up into smaller pieces or optimize the logic for better performance. It might even update variable names to be aligned with your naming conventions.\u003c/li\u003e\n\n\n\n\u003cli\u003eOnce you’re comfortable with the suggested changes, click the \u003cstrong\u003eApply in editor\u003c/strong\u003e button to apply the changes and have Copilot automatically update the file.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eThis works well for small changes, but there’s no reason to stop there. This is just if you want to focus Copilot’s attention on a specific area of your code. You can also have it look across entire files or your project. For example, take a look at \u003ca href=\"https://github.com/github-samples/planventure/blob/client-complete/planventure-client/src/pages/Dashboard.jsx\"\u003ethis dashboard component\u003c/a\u003e. Let’s say you want to improve it.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo do so, open up the component in your editor and send Copilot Chat the following prompt:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eHow can I improve this code?\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCopilot will then give several suggestions on ways the code can be improved. You can review these suggestions and even ask Copilot to explain each step in greater detail. When you’re finished, click the \u003cstrong\u003eApply in editor\u003c/strong\u003e button to have Copilot make the necessary changes.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/06/Screenshot-2025-06-05-at-5.36.58 PM.png\" src=\"https://github.blog/wp-content/uploads/2025/06/ep8-refactor-suggestions.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTo see this in action, check out the video version of this episode. Just remember that since Copilot is a generative AI tool, the suggestions you see might not match those in the video exactly.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can take this a step further by asking specific and direct questions. For example, you might want to make the data fetching logic reusable across components by creating a custom hook and centralizing the logic. To do this, create a new chat conversation and ask it the following:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eHow can I extract the data fetching logic into a custom hook?\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCopilot generates refactored code that allows you to extract the logic out of the Dashboard component into a new hook directory that you can use in multiple components in the app. This makes it much more reusable! To follow through on this:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eSave the changes in a new file by selecting \u003cstrong\u003e…\u003c/strong\u003e \u0026gt; \u003cstrong\u003eInsert into New File\u003c/strong\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eImport the hook into the dashboard file.\u003c/li\u003e\n\n\n\n\u003cli\u003eRemove the old code.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eNow what if you wanted Copilot to take a look and make sure you didn’t have a bunch of redundant code in your file? Just ask it.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eIs there any redundant code in this file?\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCopilot scans your code and identifies any redundancies that can be corrected. After reviewing the suggestions, go ahead and apply them to tighten up your code and make it a bit cleaner.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1657\" height=\"928\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/06/copilot_refactor_help.png?resize=1657%2C928\" alt=\"A slide explaining that Copilot can help with performance improvement suggestions, how to make functions more modular, adding comments for readability, upgrading syntax, and much more!\" srcset=\"https://github.blog/wp-content/uploads/2025/06/copilot_refactor_help.png?w=1657 1657w, https://github.blog/wp-content/uploads/2025/06/copilot_refactor_help.png?w=300 300w, https://github.blog/wp-content/uploads/2025/06/copilot_refactor_help.png?w=768 768w, https://github.blog/wp-content/uploads/2025/06/copilot_refactor_help.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/06/copilot_refactor_help.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eReviewing and refactoring your code with GitHub Copilot is a great way to do an initial overview of the work you’ve done. You can also ask Copilot for performance improvement suggestions, how to make functions more modular, have it add comments, or upgrade syntax to be more modern. If you can think of a question, ask Copilot and see what it can do.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"code-reviews-in-github-com\"\u003eCode reviews in github.com\u003c/h2\u003e\n\n\n\n\u003cp\u003eIf you have the proper access, you can also get GitHub Copilot code reviews directly on github.com to make the process even more seamless. First, open up a pull request. Under the “Reviewers” section in the top-right corner, you’ll notice \u003cstrong\u003eCopilot\u003c/strong\u003e listed as a possible reviewer. Click \u003cstrong\u003eRequest\u003c/strong\u003e to have Copilot review your code.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1657\" height=\"928\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/06/code_review.png?resize=1657%2C928\" alt=\"A screenshot shoring where to request a review from Copilot, under the \u0026#39;reviewers\u0026#39; list on the right.\" srcset=\"https://github.blog/wp-content/uploads/2025/06/code_review.png?w=1657 1657w, https://github.blog/wp-content/uploads/2025/06/code_review.png?w=300 300w, https://github.blog/wp-content/uploads/2025/06/code_review.png?w=768 768w, https://github.blog/wp-content/uploads/2025/06/code_review.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/06/code_review.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eOnce Copilot finishes the review, scroll down on the pull request to see any suggestions that it makes. It’s important to note that Copilot always leaves a \u003cstrong\u003eComment\u003c/strong\u003e review, and never an \u003cstrong\u003eApprove\u003c/strong\u003e or \u003cstrong\u003eRequest changes\u003c/strong\u003e review. This means that Copilot’s reviews will never be required nor block merges.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo accept any of Copilot’s suggestions, click \u003cstrong\u003eCommit suggestion\u003c/strong\u003e at the bottom of the specific suggestion you’d like to integrate. This pulls up a context menu. Click \u003cstrong\u003eCommit changes\u003c/strong\u003e and GitHub will update your pull request with that change.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1657\" height=\"928\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/06/commit_code_review.png?resize=1657%2C928\" alt=\"A screenshot showing the \u0026#39;Commit changes\u0026#39; button in the drop down menu titled \u0026#39;Commit suggestion.\u0026#39;\" srcset=\"https://github.blog/wp-content/uploads/2025/06/commit_code_review.png?w=1657 1657w, https://github.blog/wp-content/uploads/2025/06/commit_code_review.png?w=300 300w, https://github.blog/wp-content/uploads/2025/06/commit_code_review.png?w=768 768w, https://github.blog/wp-content/uploads/2025/06/commit_code_review.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/06/commit_code_review.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can also batch several suggested changes by clicking the \u003cstrong\u003eAdd to batch\u003c/strong\u003e button under individual suggestions so they are pulled into one change.\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter you’ve integrated any suggestions and made any changes, you can request another review from Copilot by clicking the circular arrows in the “Reviewers” box next to Copilot’s name.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith Copilot code review, you can have Copilot perform a preliminary review of your code before asking your team for that final code review. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"key-components-and-limitations\"\u003eKey components and limitations\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe key components of using Copilot for code review and refactoring can be broken down into five areas:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAutomated suggestions:\u003c/strong\u003e Copilot suggests improvements and optimizations as you review your code.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eConsistency checks:\u003c/strong\u003e Copilot helps maintain coding standards by suggesting consistent naming conventions and structures for your functions.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eRefactoring assistance:\u003c/strong\u003e Copilot provides actionable refactoring suggestions, whether it’s simplifying complex functions or reorganizing your codebase.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eError detection:\u003c/strong\u003e Copilot can spot potential bugs or inefficiencies that you might have missed while building.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eComment support:\u003c/strong\u003e Copilot helps generate clear comments in your code, making it easier to understand for others.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWhile GitHub Copilot can do a lot, it’s important to keep in mind that you are the pilot, and we call it Copilot for a reason. It’s a powerful tool, but it does have some limitations. First and foremost, it relies on the context you provide, so unclear or poorly documented code might lead to less effective suggestions.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1657\" height=\"928\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/06/copilot_can_do.png?resize=1657%2C928\" alt=\"A slide listing items Copilot can do: Assists with code review and refactoring; helps maintain clean, efficient, and consistent code; saves you time and reduces errors; and allows you to focus more on building.\" srcset=\"https://github.blog/wp-content/uploads/2025/06/copilot_can_do.png?w=1657 1657w, https://github.blog/wp-content/uploads/2025/06/copilot_can_do.png?w=300 300w, https://github.blog/wp-content/uploads/2025/06/copilot_can_do.png?w=768 768w, https://github.blog/wp-content/uploads/2025/06/copilot_can_do.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/06/copilot_can_do.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn addition, while Copilot can catch many issues, it’s not a substitute for a thorough human review. Always double check the suggestions it provides to ensure they align with your project’s goals and standards, as well as your organizational policies.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"your-next-steps\"\u003eYour next steps\u003c/h2\u003e\n\n\n\n\u003cp\u003eGitHub Copilot is an invaluable assistant for code review and refactoring. It helps you maintain clean, efficient, and consistent code, saving you time and reducing errors. By integrating Copilot into your workflow, you can focus more on building great features and less on the nitty-gritty aspects of code maintenance.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you’d like to dive a little deeper into using Copilot to help with code reviews and refactoring, here are some links to get you started:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/copilot-chat-cookbook/refactoring-code/improving-code-readability-and-maintainability\"\u003eImproving code readability and maintainability\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/using-github-copilot/guides-on-using-github-copilot/refactoring-code-with-github-copilot\"\u003eRefactoring code with GitHub Copilot\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/copilot-chat-cookbook/refactoring-code/refactoring-for-performance-optimization\"\u003eRefactoring for performance optimization\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/using-github-copilot/code-review/using-copilot-code-review\"\u003eUsing GitHub Copilot code review\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/using-github-copilot/code-review/configuring-coding-guidelines\"\u003eConfiguring coding guidelines for GitHub Copilot code review\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eDon’t forget that you can \u003ca href=\"https://gh.io/gfb-copilot\"\u003euse GitHub Copilot for free\u003c/a\u003e! If you have any questions, pop them in the \u003ca href=\"https://github.com/orgs/community/discussions/152688\"\u003eGitHub Community thread\u003c/a\u003e, and we’ll be sure to respond. Thanks so much for joining us for this season of GitHub for Beginners! Don’t forget to check out our previous episodes if you haven’t already.\u003c/p\u003e\n\n\n\n\u003cp\u003eHappy coding!\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eNeed some help\u003c/strong\u003e getting through a preliminary code review? Give \u003ca href=\"https://github.com/features/copilot\"\u003eGitHub Copilot\u003c/a\u003e a try!\u003c/p\u003e\n\n\t\n\u003csection\u003e\n\t\u003chr/\u003e\n\t\u003cdiv\u003e\n\t\t\u003ch2\u003eTags:\u003c/h2\u003e\n\t\t\u003cul\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/code-review/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tcode review\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/github-copilot/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tGitHub Copilot\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/github-for-beginners/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tGitHub for beginners\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/refactoring-code/\" rel=\"tag\"\u003e\n\t\t\t\t\t\trefactoring code\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\u003c/ul\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" alt=\"Kedasha Kerr\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eKedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she\u0026#39;s learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-06-09T13:00:00Z",
  "modifiedTime": null
}
