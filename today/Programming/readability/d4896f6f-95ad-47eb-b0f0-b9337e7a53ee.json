{
  "id": "d4896f6f-95ad-47eb-b0f0-b9337e7a53ee",
  "title": "Announcing Styrolite, a Low Level Container Runtime",
  "link": "https://www.infoq.com/news/2025/04/styrolite-low-level-runtime/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Styrolite is an open-source, low-level container runtime to address security and usability issues in Linux containerization. Developed by Edera, Styrolite differentiates itself by offering a programmatic API that enables developers to create and manage containers in a controlled and secure manner. By Aditya Kulkarni",
  "author": "Aditya Kulkarni",
  "published": "Wed, 30 Apr 2025 19:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Containers",
    "Runtimes",
    "DevOps",
    "news"
  ],
  "byline": "Aditya Kulkarni",
  "length": 3301,
  "excerpt": "Styrolite is an open-source, low-level container runtime to address security and usability issues in Linux containerization. Developed by Edera, Styrolite differentiates itself by offering a programma",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250422123038_u1/apple-touch-icon.png",
  "text": "Styrolite is an open-source, low-level container runtime to address security and usability issues in Linux containerization. Developed by Edera, Styrolite differentiates itself by offering a programmatic API that enables developers to create and manage containers in a controlled and secure manner. Ariadne Conill, Founder and Distinguished Engineer at Edera, announced Styrolite in a blog post. Elaborating on the need for a new low-level container runtime, Conill stated that existing low-level container runtimes such as Bubblewrap and util-linux’s unshare are either too reliant on complex command-line interfaces or lack required programming control. This makes them error-prone and hard to integrate into modern, security-focused platforms. On the other end, there are high-level solutions such as Kubernetes Container Runtime Interface (CRI), which are too abstract for low-level container management. To fill this gap, a new low-level runtime that allows engineers to spawn and manage containers with greater precision and reliability is needed. While Linux namespaces are foundational to containers, they were never intended as hard security boundaries. This leads to more container vulnerabilities escaping through the ecosystem. Building on this limitation, Styrolite provides a stronger security foundation for containerized workloads. Under the hood, Styrolite leverages the Linux unshare(2) syscall to create isolated environments by disassociating processes from host namespaces. Using this approach, engineers can get granular control over which namespaces are unshared and how resources are exposed to containers. The API provides clear specification of root filesystems, executables, arguments, working directories, and namespaces, making container setup less error-prone than manual CLI scripting. The tech community on Hacker News was quick to take note of this announcement. One of the HN users asked what Edera developers do differently with Styrolite, considering it still uses Linux namespaces. An Edera developer with an HN handle denhamparry responded, ...we use Styrolite to run containers with Edera Protect. Edera Protect creates Zones to isolate processes from other Zones so that if someone were to break out of a container, they'd only see the zone processes. Not the host operating system or the hardware on the machine. The key difference here between us and other isolation implementations is that there is no performance degradation, you don't have to rebuild your container images, and that we don't require specific hardware (e.g. you can run Edera Protect on bare metal or on public cloud instances and everything else in-between). Another conversation thread in the same post compared gVisor and Edera Protect features. Within Edera Protect, Styrolite is helpful in securing microservices, enabling fine-grained container isolation for security-sensitive workloads. Engineers can also use Styrolite to build isolated, resource-controlled environments for continuous integration and delivery pipelines. For further information, interested readers can navigate to the Styrolite GitHub repository. About the Author Aditya Kulkarni",
  "image": "https://res.infoq.com/news/2025/04/styrolite-low-level-runtime/en/headerimage/generatedHeaderImage-1746013198116.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eStyrolite is an open-source, low-level container runtime to address security and usability issues in Linux containerization. Developed by \u003ca href=\"https://edera.dev/\"\u003eEdera\u003c/a\u003e, Styrolite differentiates itself by offering a programmatic API that enables developers to create and manage containers in a controlled and secure manner.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.linkedin.com/in/ariadneconill/\"\u003eAriadne Conill\u003c/a\u003e, Founder and Distinguished Engineer at Edera, announced Styrolite \u003ca href=\"https://edera.dev/stories/styrolite\"\u003ein a blog post\u003c/a\u003e. Elaborating on the need for a new low-level container runtime, Conill stated that existing low-level container runtimes such as \u003ca href=\"https://github.com/containers/bubblewrap\"\u003eBubblewrap\u003c/a\u003e and \u003ca href=\"https://manpages.debian.org/bullseye/util-linux/unshare.1.en.html#:~:text=The%20unshare%20command%20creates%20new%20namespaces%20%28as%20specified,only%20as%20long%20as%20it%20has%20member%20processes.\"\u003eutil-linux’s unshare\u003c/a\u003e are either too reliant on complex command-line interfaces or lack required programming control. This makes them error-prone and hard to integrate into modern, security-focused platforms.\u003c/p\u003e\n\n\u003cp\u003eOn the other end, there are high-level solutions such as Kubernetes Container Runtime Interface (CRI), which are too abstract for low-level container management. To fill this gap, a new low-level runtime that allows engineers to spawn and manage containers with greater precision and reliability is needed.\u003c/p\u003e\n\n\u003cp\u003eWhile Linux namespaces are foundational to containers, they were never intended as hard security boundaries. This leads to more container vulnerabilities escaping through the ecosystem. Building on this limitation, Styrolite provides a stronger security foundation for containerized workloads.\u003c/p\u003e\n\n\u003cp\u003eUnder the hood, Styrolite leverages the Linux \u003ca href=\"https://man7.org/linux/man-pages/man2/unshare.2.html\"\u003eunshare(2)\u003c/a\u003e syscall to create isolated environments by disassociating processes from host namespaces. Using this approach, engineers can get granular control over which namespaces are unshared and how resources are exposed to containers. The API provides clear specification of root filesystems, executables, arguments, working directories, and namespaces, making container setup less error-prone than manual CLI scripting.\u003c/p\u003e\n\n\u003cp\u003eThe tech community on Hacker News was quick \u003ca href=\"https://news.ycombinator.com/item?id=43486997\"\u003eto take note of this announcement\u003c/a\u003e. One of the HN users asked \u003ca href=\"https://news.ycombinator.com/item?id=43491403\"\u003ewhat Edera developers do differently with Styrolite\u003c/a\u003e, considering it still uses Linux namespaces. An Edera developer with an HN handle \u003ca href=\"https://news.ycombinator.com/user?id=denhamparry\"\u003edenhamparry\u003c/a\u003e responded,\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e...we use Styrolite to run containers with Edera Protect. Edera Protect creates Zones to isolate processes from other Zones so that if someone were to break out of a container, they\u0026#39;d only see the zone processes. Not the host operating system or the hardware on the machine. The key difference here between us and other isolation implementations is that there is no performance degradation, you don\u0026#39;t have to rebuild your container images, and that we don\u0026#39;t require specific hardware (e.g. you can run Edera Protect on bare metal or on public cloud instances and everything else in-between).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnother conversation thread in the same post \u003ca href=\"https://news.ycombinator.com/item?id=43491225\"\u003ecompared gVisor and Edera Protect features\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWithin Edera Protect, Styrolite is helpful in securing microservices, enabling fine-grained container isolation for security-sensitive workloads. Engineers can also use Styrolite to build isolated, resource-controlled environments for continuous integration and delivery pipelines.\u003c/p\u003e\n\n\u003cp\u003eFor further information, interested readers can navigate to the \u003ca href=\"https://github.com/edera-dev/styrolite\"\u003eStyrolite GitHub repository\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Aditya-Kulkarni\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eAditya Kulkarni\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-04-30T00:00:00Z",
  "modifiedTime": null
}
