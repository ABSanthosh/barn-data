{
  "id": "a322c572-b764-49ca-a976-15d50a370350",
  "title": "Microsoft Announces Native TypeScript Compiler Port for 10X Performance Boost",
  "link": "https://www.infoq.com/news/2025/05/new-typescript-compiler-10x-fast/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Microsoft’s TypeScript team has announced an experimental native port of the TypeScript compiler (tsc), dubbed tsc-go, aimed at providing 10x improvement on build time, drastically reducing cold editor startup times, and substantially improving memory usage. This initiative explores running the compiler (written in Go) without the Node.js runtime overhead. By Bruno Couriol",
  "author": "Bruno Couriol",
  "published": "Tue, 27 May 2025 23:10:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "TypeScript",
    "Go Language",
    "Web Development",
    "Development",
    "news"
  ],
  "byline": "Bruno Couriol",
  "length": 4087,
  "excerpt": "Microsoft’s TypeScript team has announced an experimental native port of the TypeScript compiler (tsc), dubbed tsc-go, aimed at providing 10x improvement on build time, drastically reducing cold edito",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250527075405/apple-touch-icon.png",
  "text": "Microsoft’s TypeScript team has announced an experimental native port of the TypeScript compiler (tsc), dubbed tsc-go, aimed at providing 10x improvement on build time, drastically reducing cold editor startup times, and substantially improving memory usage. This initiative explores running the compiler (written in Go) without the Node.js runtime overhead. Anders Hejlsberg, lead architect of the TypeScript project, explained the motivation behind the port as follows: The core value proposition of TypeScript is an excellent developer experience. As your codebase grows, […] in many cases TypeScript has not been able to scale up to the very largest codebases. Developers working in large projects […] have to choose between reasonable editor startup time or getting a complete view of their source code […] New experiences powered by AI benefit from large windows of semantic information that need to be available with tighter latency constraints. We also want fast command-line builds to validate that your entire codebase is in good shape. The standard tsc compiler running on Node.js, incurs noticeable startup time, especially on initial execution, for large projects or frequent, small builds. The new, experimental TypeScript compiler is written in Go and compiled to native code that runs without Node.js startup overhead. The blog announcement mentions a reduction in type-checking time of VS Code’s 1 MLOC codebase from 77 seconds, down to 7.5 seconds, i.e., a 10x improvement. The same ratio is observed on the Playwright codebase (356,000 LOC) with a time reduced from 11s to 1s. Microsoft also reports maintaining this ratio on smaller codebases, with RxJS (2,100 LOC) seeing a reduction in type-checking time from 1,1s to 0,1s. The blog post does not provide Improvement figures related to incremental builds. The TypeScript team also reports an 8x improvement in project load time in editor scenarios for the Visual Studio codebase and expects the same ratio to be constant over other codebases. Developer experience is poised to be improved as the time between opening the code editor and being ready to type into a fully loaded codebase is significantly reduced. The native port (codename Corsa) is still considered experimental and still misses many features, including incremental builds (cf. What works so far). The blog announcement explains that when the native codebase has reached sufficient parity with the current TypeScript, it will be released as TypeScript 7.0, with a mindful migration path to former versions: We’ll still be maintaining the JS codebase in the 6.x line until TypeScript 7+ reaches sufficient maturity and adoption. Developer reactions on platforms like Reddit and Hacker News asked about the rationale behind choosing Go over Rust. Ryan Cavanaugh, TypeScript dev lead, provided a detailed answer that developers are invited to check. To quote an excerpt: In the end, we had two options - do a complete from-scratch rewrite in Rust, which could take years and yield an incompatible version of TypeScript that no one could actually use, or just do a port in Go and get something usable in a year or so and have something that’s extremely compatible in terms of semantics and extremely competitive in terms of performance. In addition to the blog post, developers are encouraged to review the YouTube video in which Hejlsberg details the ongoing TypeScript port effort. Developers can also visit the GitHub repository for the development of the native port of TypeScript. A preview build is available on npm as @typescript/native-preview. A preview VS Code extension is available on the VS Code marketplace. The project is released under the Apache License 2.0 and welcomes contributions and suggestions. For details, visit Contributor License Agreements. The project follows the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ. About the Author Bruno Couriol",
  "image": "https://res.infoq.com/news/2025/05/new-typescript-compiler-10x-fast/en/headerimage/generatedHeaderImage-1748384045992.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eMicrosoft’s TypeScript team \u003ca href=\"https://devblogs.microsoft.com/typescript/typescript-native-port/\"\u003ehas announced an experimental native port of the TypeScript compiler (tsc)\u003c/a\u003e, dubbed tsc-go, aimed at providing 10x improvement on build time, drastically reducing cold editor startup times, and substantially improving memory usage. This initiative explores running the compiler (written in Go) without the Node.js runtime overhead.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.linkedin.com/in/ahejlsberg\"\u003eAnders Hejlsberg\u003c/a\u003e, lead architect of the TypeScript project, explained the motivation behind the port as follows:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe core value proposition of TypeScript is an excellent developer experience. As your codebase grows, […] in many cases TypeScript has not been able to scale up to the very largest codebases. Developers working in large projects […] have to choose between reasonable editor startup time or getting a complete view of their source code […] New experiences powered by AI benefit from large windows of semantic information that need to be available with tighter latency constraints. We also want fast command-line builds to validate that your entire codebase is in good shape.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe standard tsc compiler running on Node.js, incurs noticeable startup time, especially on initial execution, for large projects or frequent, small builds. The new, experimental TypeScript compiler is written in Go and compiled to native code that runs without Node.js startup overhead.\u003c/p\u003e\n\n\u003cp\u003eThe blog announcement \u003ca href=\"https://devblogs.microsoft.com/typescript/typescript-native-port/#how-much-faster\"\u003ementions a reduction in type-checking time\u003c/a\u003e of VS Code’s 1 MLOC codebase from 77 seconds, down to 7.5 seconds, i.e., a 10x improvement. The same ratio is observed on the Playwright codebase (356,000 LOC) with a time reduced from 11s to 1s. Microsoft also reports maintaining this ratio on smaller codebases, with RxJS (2,100 LOC) seeing a reduction in type-checking time from 1,1s to 0,1s. The blog post does not provide Improvement figures related to incremental builds.\u003c/p\u003e\n\n\u003cp\u003eThe TypeScript team also reports an 8x improvement in project load time in editor scenarios for the Visual Studio codebase and expects the same ratio to be constant over other codebases. Developer experience is poised to be improved as the time between opening the code editor and being ready to type into a fully loaded codebase is significantly reduced.\u003c/p\u003e\n\n\u003cp\u003eThe native port (codename Corsa) is still considered experimental and still misses many features, including incremental builds (cf. \u003ca href=\"https://github.com/microsoft/typescript-go?tab=readme-ov-file#what-works-so-far\"\u003e\u003cem\u003eWhat works so far\u003c/em\u003e\u003c/a\u003e). The blog announcement explains that when the native codebase has reached sufficient parity with the current TypeScript, it will be released as TypeScript 7.0, with a mindful migration path to former versions:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWe’ll still be maintaining the JS codebase in the 6.x line until TypeScript 7+ reaches sufficient maturity and adoption.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eDeveloper reactions on platforms like \u003ca href=\"https://www.google.com/url?sa=E\u0026amp;q=https%3A%2F%2Fwww.reddit.com%2Fr%2Fprogramming%2Fcomments%2F1j8s40n%2Fa_10x_faster_typescript%2F\"\u003eReddit\u003c/a\u003e and \u003ca href=\"https://www.google.com/url?sa=E\u0026amp;q=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D44075093\"\u003eHacker News\u003c/a\u003e asked about the rationale behind choosing Go over Rust. \u003ca href=\"https://www.linkedin.com/in/ryan-cavanaugh-aa4a37106\"\u003eRyan Cavanaugh\u003c/a\u003e, TypeScript dev lead, \u003ca href=\"https://www.reddit.com/r/programming/comments/1j8s40n/comment/mh7n5n0/\"\u003eprovided a detailed answer\u003c/a\u003e that developers are invited to check. To quote an excerpt:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn the end, we had two options - do a complete from-scratch rewrite in Rust, which could take years and yield an incompatible version of TypeScript that no one could actually use, or just do a port in Go and get something usable in a year or so and have something that’s extremely compatible in terms of semantics and extremely competitive in terms of performance.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn addition to the blog post, developers are \u003ca href=\"https://www.youtube.com/watch?v=pNlq-EVld70\"\u003eencouraged to review the YouTube video\u003c/a\u003e in which Hejlsberg details the ongoing TypeScript port effort. Developers can also \u003ca href=\"https://github.com/microsoft/typescript-go\"\u003evisit the GitHub repository for the development of the native port of TypeScript\u003c/a\u003e. A preview build is available on npm as \u003ccode\u003e@typescript/native-preview\u003c/code\u003e. A preview VS Code extension is \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=TypeScriptTeam.native-preview\"\u003eavailable on the VS Code marketplace\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe project is released under the Apache License 2.0 and welcomes contributions and suggestions. For details, visit \u003ca href=\"https://cla.opensource.microsoft.com/\"\u003eContributor License Agreements\u003c/a\u003e. The project follows the \u003ca href=\"https://opensource.microsoft.com/codeofconduct/\"\u003eMicrosoft Open Source Code of Conduct\u003c/a\u003e. For more information see the \u003ca href=\"https://opensource.microsoft.com/codeofconduct/faq/\"\u003eCode of Conduct FAQ\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Bruno-Couriol\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBruno Couriol\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-05-27T00:00:00Z",
  "modifiedTime": null
}
