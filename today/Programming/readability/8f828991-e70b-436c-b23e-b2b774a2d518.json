{
  "id": "8f828991-e70b-436c-b23e-b2b774a2d518",
  "title": "10 Things We Learnt While Building A Top-Performing Zoom App",
  "link": "https://engineering.prezi.com/10-things-we-learnt-while-building-a-top-performing-zoom-app-514905743d29?source=rss----911e72786e31---4",
  "description": "",
  "author": "Attila V√°g√≥",
  "published": "Tue, 25 Apr 2023 15:01:48 GMT",
  "source": "https://engineering.prezi.com/feed",
  "categories": [
    "coding",
    "web-development",
    "prezi",
    "agile",
    "productivity"
  ],
  "byline": "Attila V√°g√≥",
  "length": 8844,
  "excerpt": "A singular goal. To release as quickly as humanly possible. Laser-sharp focus. Make the most of Zoom‚Äôs new Layers API. A daring vision. To give Zoom users better meetings. The Prezi way. All of‚Ä¶",
  "siteName": "Prezi Engineering",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*U0lNGgJfm0Qo1ZfYDS36KA.png",
  "text": "A singular goal. To release as quickly as humanly possible. Laser-sharp focus. Make the most of Zoom‚Äôs new Layers API. A daring vision. To give Zoom users better meetings. The Prezi way. All of these, in many ways, are a testament to Prezi‚Äôs long history of wanting to turn the boring, the mundane, into engaging, expressive and fun. And last fall that‚Äôs precisely what we set out to do. A handful of people, a small cross-functional team with a working proof of concept, sat down to build the top-performing Zoom Marketplace app, and roughly six months later we know what got us here, but also what almost didn‚Äôt. Listicle as this may be, grab yourself a java ‚òï, this ain‚Äôt gonna be a short read.Never underestimate the value of a robust POC‚Ä¶Yes, we can, said Obama and said we at the end of the first sprint. Shame we didn‚Äôt have a microphone to drop. But jaws definitely did, when people saw a styled and animated web UI baked into the Zoom video output for the first time. Without any virtual camera, native companion app and socket-based workarounds.There were far less API endpoints to work with back then compared to the long list that Zoom provides today, but whatever we could try, we did try. We had to know. It was more than a POC, it was a feasibility study. At that point, if engineering had said, ‚Äúit can‚Äôt be done‚Äù, that would have been the end of it. That POC became the seed project for what‚Äôs today the Prezi Video for Zoom app on Zoom Marketplace.Evolution is painful ‚Äî literally!Can‚Äôt speak for my team-mates, but I certainly had a few migraines induced by overnight API changes or less-than-stellar documentation. But here‚Äôs the thing. You can‚Äôt make an omelet without breaking a few eggs, so we knew that we were working with an evolving API and ecosystem. Things will inevitably break, either on our end or Zoom‚Äôs end. And they did, and it was frustrating, but also rewarding because many of those frustrations were met with solutions on both ends. I guess you only learn to really sail in choppy waters.Every time the wave of unexpected bugs or changes hit us, we took a deep breath and remembered our goal, envisioned our vision and focused on solving the challenge at hand just like you‚Äôd solve a puzzle.Automated testing to the rescueBut there is a difference between reactive and proactive development. We don‚Äôt believe either of these is healthy on its own, but combined, it helped us reach velocity with reduced chances for major incidents. I‚Äôve written in the past about the testing pyramid and how engineers should take on more of the automated testing. It was time to put it all into practice. Every engineer on the team wrote their own Cypress regression tests for every feature. No test? No deployment.In a team of four engineers, I know of at least three major incidents I avoided by having regression tests. Multiply that by four‚Ä¶ and you suddenly see the value of a good testing culture. No, we‚Äôre nowhere near perfect, we‚Äôre behind on some unit tests, but having the security and peace of mind that our changes don‚Äôt break some other feature already live, is invaluable.Look ma, it‚Äôs a web app!If you‚Äôve never built a Zoom app before, you‚Äôll be surprised to hear that for the most part it‚Äôs a web app. The implied asterisk is probably not lost on you, though. There are a couple of exotic aspects to Zoom apps.CEF in video context. Chromium Embedded Framework is something you might have never had to use before. It‚Äôs quirky, but useful. Debugging in Zoom, is where it gets a little less fun, but that‚Äôs expected. Pro-tip: send console logs and errors as messages from inCamera content to the inMeeting context, which then can log them in the regular browser console.The inMeeting context is a native embedded browser. On a Mac, for instance, it‚Äôs Safari. Finally! You have an unavoidable reason to debug stuff in Safari! üòÅThe inMainClient context is also a native embedded browser, so more Safari fun, if you‚Äôre on a Mac.Context is keyYou know those contexts I keep referring to? They‚Äôre basically the three pillars of every Zoom application. The easiest way I can explain this is by illustrating it with a house.Imagine a house. It has three rooms: a bathroom, a living room and a bedroom. All have doors between them, but they‚Äôre all locked. It‚Äôs one house, but three rooms with locked doors. When you‚Äôre in one room, you only see and know what‚Äôs in that room. If you want to know what‚Äôs going on in the other room, you gotta pick up the phone and call the other room. Just like Sheldon and Missy (from Young Sheldon) communicated when they were kids. Same thing with the app. One app. Three contexts, and communication between them is the way one updates the other.Zoom does allow transfer from one context to another, but that‚Äôs a whole topic in itself, so maybe check out their docs. Hint: you‚Äôre gonna need to rely on onRunningContextChange among other things.Collaboration like never beforeIt‚Äôs tough enough as it is, finding ways to collaborate well with team-mates, especially in a remote environment where everyone is in different locations. Add to that the extra dimension of having to work closely with Zoom as they were developing their Layers API capabilities, and you find yourself having to adjust pace to fit product‚Äôs needs but also meet certain deadlines resulting from being selected for the Zoom Essential Apps bundle. It might seem obvious, but judging by how many companies and teams still struggle with communication, it feels worth highlighting just how key it was for us to rely on open, pragmatic communication throughout the entire project.Agile taken to a whole new levelWhenever people mention Agile, the concept of minimum viable product (MVP) comes up. But guess what? Just using agile terminology in meetings won‚Äôt get you anywhere. Who knew, right? We had to live it.As a cross-functional team, we agreed on exactly what that MVP looked like, and as soon as it was ready, we let no scope creep in, and went live. Then we took the concept further and started thinking in terms of minimum viable feature, and minimum viable implementation, and productivity skyrocketed. As many as 7 pull-requests in a single day from 4 engineers. All supported by a dedicated UX design expert and QA professional.It‚Äôs not tech stack vs. deliveryI have worked for enough companies to know how often product and engineering can be at odds with each other. This was something we could not afford. Not at Prezi, not now. Far too much at stake. Perhaps organically, we all seemed to share a common goal‚Äìwanting to deliver a successful Zoom app as soon as humanly possible and keep building on that success for as long as it makes sense.We put our individual professional egos aside, and took, as a team, pragmatic decisions around everything from using our monorepo, to the code we write, the language we write it in, unit testing, regression testing, where we use our own services, where we rely on 3rd party solutions, when and how we release. I call it product-driven development, where, as engineers, we were given a hard deadline, and we had to make smart technical decisions to make the most of the time we had.A good design is worth its weight in goldJust like you should never let an engineer name a product, you should also never let them design anything. Frankly, we got lucky for having one of the absolute best UX designers I, personally, had the pleasure to work with, and I‚Äôve worked with many. Fully dedicated to our team, she took the minimum of minimum viable products and helped us turn it into something we all felt really proud of, both in terms of looks and UX. Can we still do better? Of course, and that‚Äôs where data comes in.Data to rule them allDo not underestimate the power of information. Having data on what our users do, how they use Zoom and our app within, was crucial. Within half an hour of us implementing Hotjar, my assumptions were categorically refuted about how the various Zoom app contexts were approached by people out in the wild. So, now you have product driven, data informed development. What‚Äôs that? PDDD? That‚Äôs a lot of Ds, but hey, as long as it results in success‚Ä¶ ü§∑‚Äç‚ôÇÔ∏èAt the end of the day‚Ä¶I‚Äôm sure each one of ye will find something different to take away from our learnings, but there are a couple of aspects I believe that are universal to all teams, working on any software product, and funnily enough, the tech part of it is very much secondary. It really does boil down to having the right people on the team, putting ego aside and just genuinely wanting to see the product grow live, in front of customers. That dynamic will take care of the rest of the decisions.Pragmatism will thrive, fearless experimentation will be the norm, and the result will be a quickly evolving product that the team enjoys building, and users enjoy using.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*syBIPDBLBUXcL1ApozwaKA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca href=\"https://attilavago.medium.com/?source=post_page-----514905743d29--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Attila V√°g√≥\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*Ilzy6aGvG__n7QzdkiL41A.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://engineering.prezi.com/?source=post_page-----514905743d29--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Prezi Engineering\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*ecIYF5KMJj1G4-_pkFWy0g.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"20af\"\u003e\u003cspan\u003eA\u003c/span\u003e singular goal. To release as quickly as humanly possible. Laser-sharp focus. Make the most of Zoom‚Äôs new Layers API. A daring vision. To give Zoom users better meetings. The Prezi way. All of these, in many ways, are a testament to \u003cstrong\u003ePrezi‚Äôs long history of wanting to turn the boring, the mundane, into engaging, expressive and fun\u003c/strong\u003e. And last fall that‚Äôs precisely what we set out to do. A handful of people, a small cross-functional team with a working proof of concept, sat down to build \u003ca href=\"https://marketplace.zoom.us/apps/mj3SAtlRRgmXxenmORfKag\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ethe top-performing Zoom Marketplace app\u003c/a\u003e, and roughly six months later we know what got us here, but also what almost didn‚Äôt. Listicle as this may be, grab yourself a java ‚òï, this ain‚Äôt gonna be a short read.\u003c/p\u003e\u003ch2 id=\"45d3\"\u003eNever underestimate the value of a robust POC‚Ä¶\u003c/h2\u003e\u003cp id=\"596c\"\u003eYes, we can, said Obama and said we at the end of the first sprint. Shame we didn‚Äôt have a microphone to drop. But jaws definitely did, when people saw a styled and animated web UI baked into the Zoom video output for the first time. Without any virtual camera, native companion app and socket-based workarounds.\u003c/p\u003e\u003cp id=\"ab38\"\u003eThere were far less API endpoints to work with back then compared to the long list that Zoom provides today, but whatever we could try, we did try. We had to know. \u003cstrong\u003eIt was more than a POC, it was a feasibility study.\u003c/strong\u003e At that point, if engineering had said, \u003cem\u003e‚Äúit can‚Äôt be done‚Äù\u003c/em\u003e, that would have been the end of it. That POC became the seed project for what‚Äôs today the \u003ca href=\"https://marketplace.zoom.us/apps/mj3SAtlRRgmXxenmORfKag\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePrezi Video for Zoom app on Zoom Marketplace\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"a361\"\u003eEvolution is painful ‚Äî literally!\u003c/h2\u003e\u003cp id=\"1725\"\u003eCan‚Äôt speak for my team-mates, but I certainly had a few migraines induced by overnight API changes or less-than-stellar documentation. But here‚Äôs the thing. \u003cstrong\u003eYou can‚Äôt make an omelet without breaking a few eggs, so we knew that we were working with an evolving API and ecosystem.\u003c/strong\u003e Things will inevitably break, either on our end or Zoom‚Äôs end. And they did, and it was frustrating, but also rewarding because many of those frustrations were met with solutions on both ends. I guess you only learn to really sail in choppy waters.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"d272\"\u003eEvery time the wave of unexpected bugs or changes hit us, we took a deep breath and remembered our goal, envisioned our vision and focused on solving the challenge at hand just like you‚Äôd solve a puzzle.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"22f3\"\u003eAutomated testing to the rescue\u003c/h2\u003e\u003cp id=\"837e\"\u003eBut there is a difference between reactive and proactive development. We don‚Äôt believe either of these is healthy on its own, but combined, it helped us reach velocity with reduced chances for major incidents. I‚Äôve written in the past about the testing pyramid and how engineers should take on more of the automated testing. It was time to put it all into practice. \u003cstrong\u003eEvery engineer on the team wrote their own Cypress regression tests for every feature.\u003c/strong\u003e No test? No deployment.\u003c/p\u003e\u003cp id=\"bad6\"\u003eIn a team of four engineers, I know of at least three major incidents I avoided by having regression tests. Multiply that by four‚Ä¶ and \u003ca rel=\"noopener ugc nofollow\" target=\"_blank\" href=\"https://engineering.prezi.com/testing-testing-1-2-3-is-this-thing-on-deff196939eb\"\u003eyou suddenly see the value of a good testing culture\u003c/a\u003e. No, we‚Äôre nowhere near perfect, we‚Äôre behind on some unit tests, but having the security and peace of mind that our changes don‚Äôt break some other feature already live, is invaluable.\u003c/p\u003e\u003ch2 id=\"c302\"\u003eLook ma, it‚Äôs a web app!\u003c/h2\u003e\u003cp id=\"053a\"\u003eIf you‚Äôve never built a Zoom app before, you‚Äôll be surprised to hear that for the most part it‚Äôs a web app. The implied asterisk is probably not lost on you, though. There are a couple of exotic aspects to Zoom apps.\u003c/p\u003e\u003cp id=\"3a01\"\u003eCEF in video context. \u003ca href=\"https://github.com/chromiumembedded/cef\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eChromium Embedded Framework\u003c/a\u003e is something you might have never had to use before. It‚Äôs quirky, but useful. Debugging in Zoom, is where it gets a little less fun, but that‚Äôs expected. \u003cstrong\u003ePro-tip: send console logs and errors as messages from inCamera content to the inMeeting context, which then can log them in the regular browser console.\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"3b60\"\u003eThe inMeeting context is a native embedded browser. On a Mac, for instance, it‚Äôs Safari. Finally! You have an unavoidable reason to debug stuff in Safari! üòÅ\u003c/p\u003e\u003cp id=\"c8db\"\u003eThe inMainClient context is also a native embedded browser, so more Safari fun, if you‚Äôre on a Mac.\u003c/p\u003e\u003ch2 id=\"7827\"\u003eContext is key\u003c/h2\u003e\u003cp id=\"f1d6\"\u003eYou know those contexts I keep referring to? They‚Äôre basically the three pillars of every Zoom application. The easiest way I can explain this is by illustrating it with a house.\u003c/p\u003e\u003cp id=\"1b3c\"\u003eImagine a house. It has three rooms: a bathroom, a living room and a bedroom. All have doors between them, but they‚Äôre all locked. It‚Äôs one house, but three rooms with locked doors. When you‚Äôre in one room, you only see and know what‚Äôs in that room. If you want to know what‚Äôs going on in the other room, you gotta pick up the phone and call the other room. Just like Sheldon and Missy (from Young Sheldon) communicated when they were kids. Same thing with the app. \u003cstrong\u003eOne app. Three contexts, and communication between them is the way one updates the other.\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"2a6c\"\u003eZoom does allow transfer from one context to another, but that‚Äôs a whole topic in itself, so maybe \u003ca href=\"https://appssdk.zoom.us/classes/ZoomSdk.ZoomSdk.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003echeck out their docs\u003c/a\u003e. Hint: you‚Äôre gonna need to rely on \u003ccode\u003eonRunningContextChange\u003c/code\u003e among other things.\u003c/p\u003e\u003ch2 id=\"7cf0\"\u003eCollaboration like never before\u003c/h2\u003e\u003cp id=\"a275\"\u003eIt‚Äôs tough enough as it is, finding ways to collaborate well with team-mates, especially in a remote environment where everyone is in different locations. Add to that the extra dimension of having to work closely with Zoom as they were developing their \u003ca href=\"https://appssdk.zoom.us/classes/ZoomSdk.ZoomSdk.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLayers API capabilities\u003c/a\u003e, and you find yourself having to adjust pace to fit product‚Äôs needs but also meet certain deadlines resulting from being selected for the Zoom Essential Apps bundle. It might seem obvious, but judging by how many companies and teams still struggle with communication, \u003cstrong\u003eit feels worth highlighting just how key it was for us to rely on open, pragmatic communication throughout the entire project.\u003c/strong\u003e\u003c/p\u003e\u003ch2 id=\"6e13\"\u003eAgile taken to a whole new level\u003c/h2\u003e\u003cp id=\"e713\"\u003eWhenever people mention Agile, the concept of minimum viable product (MVP) comes up. But guess what? Just using agile terminology in meetings won‚Äôt get you anywhere. Who knew, right? We had to live it.\u003c/p\u003e\u003cp id=\"7fa1\"\u003eAs a cross-functional team, \u003cstrong\u003ewe agreed on exactly what that MVP looked like, and as soon as it was ready, we let no scope creep in, and went live\u003c/strong\u003e. Then we took the concept further and started thinking in terms of minimum viable feature, and minimum viable implementation, and productivity skyrocketed. As many as 7 pull-requests in a single day from 4 engineers. All supported by a dedicated UX design expert and QA professional.\u003c/p\u003e\u003ch2 id=\"9693\"\u003eIt‚Äôs not tech stack vs. delivery\u003c/h2\u003e\u003cp id=\"f968\"\u003eI have worked for enough companies to know how often product and engineering can be at odds with each other. This was something we could not afford. Not at Prezi, not now. Far too much at stake. Perhaps organically, we all seemed to share a common goal‚Äìwanting to deliver a successful Zoom app as soon as humanly possible and keep building on that success for as long as it makes sense.\u003c/p\u003e\u003cp id=\"4614\"\u003e\u003cstrong\u003eWe put our individual professional egos aside, and took, as a team, pragmatic decisions around everything\u003c/strong\u003e from using our monorepo, to the code we write, the language we write it in, unit testing, regression testing, where we use our own services, where we rely on 3rd party solutions, when and how we release. I call it product-driven development, where, as engineers, we were given a hard deadline, and we had to make smart technical decisions to make the most of the time we had.\u003c/p\u003e\u003ch2 id=\"3719\"\u003eA good design is worth its weight in gold\u003c/h2\u003e\u003cp id=\"2847\"\u003eJust like you should never let an engineer name a product, you should also never let them design anything. Frankly, \u003cstrong\u003ewe got lucky for having one of the absolute best UX designers I, personally, had the pleasure to work with, and I‚Äôve worked with many\u003c/strong\u003e. Fully dedicated to our team, she took the minimum of minimum viable products and helped us turn it into something we all felt really proud of, both in terms of looks and UX. Can we still do better? Of course, and that‚Äôs where data comes in.\u003c/p\u003e\u003ch2 id=\"d216\"\u003eData to rule them all\u003c/h2\u003e\u003cp id=\"43c5\"\u003eDo not underestimate the power of information. Having data on what our users do, how they use Zoom and our app within, was crucial. \u003cstrong\u003eWithin half an hour of us implementing Hotjar, my assumptions were categorically refuted about how the various Zoom app contexts were approached by people out in the wild\u003c/strong\u003e. So, now you have product driven, data informed development. What‚Äôs that? PDDD? That‚Äôs a lot of Ds, but hey, as long as it results in success‚Ä¶ ü§∑‚Äç‚ôÇÔ∏è\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"b766\"\u003eAt the end of the day‚Ä¶\u003c/h2\u003e\u003cp id=\"3fcc\"\u003eI‚Äôm sure each one of ye will find something different to take away from our learnings, but there are a couple of aspects I believe that are universal to all teams, working on any software product, and funnily enough, the tech part of it is very much secondary. \u003cstrong\u003eIt really does boil down to having the right people on the team, putting ego aside and just genuinely wanting to see the product grow live, in front of customers.\u003c/strong\u003e That dynamic will take care of the rest of the decisions.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"447b\"\u003ePragmatism will thrive, fearless experimentation will be the norm, and the result will be a quickly evolving product that the team enjoys building, and users enjoy using.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2023-04-25T15:01:48.059Z",
  "modifiedTime": null
}
