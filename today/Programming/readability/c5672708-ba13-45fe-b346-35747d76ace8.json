{
  "id": "c5672708-ba13-45fe-b346-35747d76ace8",
  "title": "Before You memo()",
  "link": "https://overreacted.io/before-you-memo/",
  "description": "Rendering optimizations that come naturally.",
  "author": "",
  "published": "Tue, 23 Feb 2021 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 5837,
  "excerpt": "Rendering optimizations that come naturally.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "There are many articles written about React performance optimizations. In general, if some state update is slow, you need to: Verify you‚Äôre running a production build. (Development builds are intentionally slower, in extreme cases even by an order of magnitude.) Verify that you didn‚Äôt put the state higher in the tree than necessary. (For example, putting input state in a centralized store might not be the best idea.) Run React DevTools Profiler to see what gets re-rendered, and wrap the most expensive subtrees with memo(). (And add useMemo() where needed.) This last step is annoying, especially for components in between, and ideally a compiler would do it for you. In the future, it might. In this post, I want to share two different techniques. They‚Äôre surprisingly basic, which is why people rarely realize they improve rendering performance. These techniques are complementary to what you already know! They don‚Äôt replace memo or useMemo, but they‚Äôre often good to try first. An (Artificially) Slow Component Here‚Äôs a component with a severe rendering performance problem: import { useState } from 'react'; export default function App() { let [color, setColor] = useState('red'); return ( \u003cdiv\u003e \u003cinput value={color} onChange={(e) =\u003e setColor(e.target.value)} /\u003e \u003cp style={{ color }}\u003eHello, world!\u003c/p\u003e \u003cExpensiveTree /\u003e \u003c/div\u003e ); } function ExpensiveTree() { let now = performance.now(); while (performance.now() - now \u003c 100) { // Artificial delay -- do nothing for 100ms } return \u003cp\u003eI am a very slow component tree.\u003c/p\u003e; } (Try it here) The problem is that whenever color changes inside App, we will re-render \u003cExpensiveTree /\u003e which we‚Äôve artificially delayed to be very slow. I could put memo() on it and call it a day, but there are many existing articles about it so I won‚Äôt spend time on it. I want to show two different solutions. Solution 1: Move State Down If you look at the rendering code closer, you‚Äôll notice only a part of the returned tree actually cares about the current color: export default function App() { let [color, setColor] = useState('red'); return ( \u003cdiv\u003e \u003cinput value={color} onChange={(e) =\u003e setColor(e.target.value)} /\u003e \u003cp style={{ color }}\u003eHello, world!\u003c/p\u003e \u003cExpensiveTree /\u003e \u003c/div\u003e ); } So let‚Äôs extract that part into a Form component and move state down into it: export default function App() { return ( \u003c\u003e \u003cForm /\u003e \u003cExpensiveTree /\u003e \u003c/\u003e ); } function Form() { let [color, setColor] = useState('red'); return ( \u003c\u003e \u003cinput value={color} onChange={(e) =\u003e setColor(e.target.value)} /\u003e \u003cp style={{ color }}\u003eHello, world!\u003c/p\u003e \u003c/\u003e ); } (Try it here) Now if the color changes, only the Form re-renders. Problem solved. Solution 2: Lift Content Up The above solution doesn‚Äôt work if the piece of state is used somewhere above the expensive tree. For example, let‚Äôs say we put the color on the parent \u003cdiv\u003e: export default function App() { let [color, setColor] = useState('red'); return ( \u003cdiv style={{ color }}\u003e \u003cinput value={color} onChange={(e) =\u003e setColor(e.target.value)} /\u003e \u003cp\u003eHello, world!\u003c/p\u003e \u003cExpensiveTree /\u003e \u003c/div\u003e ); } (Try it here) Now it seems like we can‚Äôt just ‚Äúextract‚Äù the parts that don‚Äôt use color into another component, since that would include the parent \u003cdiv\u003e, which would then include \u003cExpensiveTree /\u003e. Can‚Äôt avoid memo this time, right? Or can we? Play with this sandbox and see if you can figure it out. ‚Ä¶ ‚Ä¶ ‚Ä¶ The answer is remarkably plain: export default function App() { return ( \u003cColorPicker\u003e \u003cp\u003eHello, world!\u003c/p\u003e \u003cExpensiveTree /\u003e \u003c/ColorPicker\u003e ); } function ColorPicker({ children }) { let [color, setColor] = useState(\"red\"); return ( \u003cdiv style={{ color }}\u003e \u003cinput value={color} onChange={(e) =\u003e setColor(e.target.value)} /\u003e {children} \u003c/div\u003e ); } (Try it here) We split the App component in two. The parts that depend on the color, together with the color state variable itself, have moved into ColorPicker. The parts that don‚Äôt care about the color stayed in the App component and are passed to ColorPicker as JSX content, also known as the children prop. When the color changes, ColorPicker re-renders. But it still has the same children prop it got from the App last time, so React doesn‚Äôt visit that subtree. And as a result, \u003cExpensiveTree /\u003e doesn‚Äôt re-render. What‚Äôs the moral? Before you apply optimizations like memo or useMemo, it might make sense to look if you can split the parts that change from the parts that don‚Äôt change. The interesting part about these approaches is that they don‚Äôt really have anything to do with performance, per se. Using the children prop to split up components usually makes the data flow of your application easier to follow and reduces the number of props plumbed down through the tree. Improved performance in cases like this is a cherry on top, not the end goal. Curiously, this pattern also unlocks more performance benefits in the future. For example, when Server Components are stable and ready for adoption, our ColorPicker component could receive its children from the server. Either the whole \u003cExpensiveTree /\u003e component or its parts could run on the server, and even a top-level React state update would ‚Äúskip over‚Äù those parts on the client. That‚Äôs something even memo couldn‚Äôt do! But again, both approaches are complementary. Don‚Äôt neglect moving state down (and lifting content up!) Then, where it‚Äôs not enough, use the Profiler and sprinkle those memo‚Äôs. Didn‚Äôt I read about this before? Yes, probably. This is not a new idea. It‚Äôs a natural consequence of React composition model. It‚Äôs simple enough that it‚Äôs underappreciated, and deserves a bit more love.Discuss on ùïè¬†¬†¬∑¬†¬†Edit on GitHub",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eThere are many articles written about React performance optimizations. In general, if some state update is slow, you need to:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eVerify you‚Äôre running a production build. (Development builds are intentionally slower, in extreme cases even by an order of magnitude.)\u003c/li\u003e\n\u003cli\u003eVerify that you didn‚Äôt put the state higher in the tree than necessary. (For example, putting input state in a centralized store might not be the best idea.)\u003c/li\u003e\n\u003cli\u003eRun React DevTools Profiler to see what gets re-rendered, and wrap the most expensive subtrees with \u003ccode\u003ememo()\u003c/code\u003e. (And add \u003ccode\u003euseMemo()\u003c/code\u003e where needed.)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis last step is annoying, especially for components in between, and ideally a compiler would do it for you. In the future, it might.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIn this post, I want to share two different techniques.\u003c/strong\u003e They‚Äôre surprisingly basic, which is why people rarely realize they improve rendering performance.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThese techniques are complementary to what you already know!\u003c/strong\u003e They don‚Äôt replace \u003ccode\u003ememo\u003c/code\u003e or \u003ccode\u003euseMemo\u003c/code\u003e, but they‚Äôre often good to try first.\u003c/p\u003e\n\u003ch2\u003eAn (Artificially) Slow Component\u003c/h2\u003e\n\u003cp\u003eHere‚Äôs a component with a severe rendering performance problem:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e useState \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ereact\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ered\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e value={\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e} onChange={(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{ \u003c/span\u003e\u003cspan\u003ecolor \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003cspan\u003eHello, world!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eExpensiveTree\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eExpensiveTree\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003enow\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e performance\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enow\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ewhile\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eperformance\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enow\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e now \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Artificial delay -- do nothing for 100ms\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eI am a very slow component tree.\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(\u003ca target=\"_blank\" href=\"https://codesandbox.io/s/frosty-glade-m33km?file=/src/App.js:23-513\"\u003eTry it here\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe problem is that whenever \u003ccode\u003ecolor\u003c/code\u003e changes inside \u003ccode\u003eApp\u003c/code\u003e, we will re-render \u003ccode\u003e\u0026lt;ExpensiveTree /\u0026gt;\u003c/code\u003e which we‚Äôve artificially delayed to be very slow.\u003c/p\u003e\n\u003cp\u003eI could \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/amazing-shtern-61tu4?file=/src/App.js\"\u003eput \u003ccode\u003ememo()\u003c/code\u003e on it\u003c/a\u003e and call it a day, but there are many existing articles about it so I won‚Äôt spend time on it. I want to show two different solutions.\u003c/p\u003e\n\u003ch2\u003eSolution 1: Move State Down\u003c/h2\u003e\n\u003cp\u003eIf you look at the rendering code closer, you‚Äôll notice only a part of the returned tree actually cares about the current \u003ccode\u003ecolor\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ered\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e value={\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e} onChange={(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{ \u003c/span\u003e\u003cspan\u003ecolor \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003cspan\u003eHello, world!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eExpensiveTree\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSo let‚Äôs extract that part into a \u003ccode\u003eForm\u003c/code\u003e component and move state \u003cem\u003edown\u003c/em\u003e into it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eForm\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eExpensiveTree\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eForm\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ered\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e value={\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e} onChange={(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e style={{ \u003c/span\u003e\u003cspan\u003ecolor \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003cspan\u003eHello, world!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(\u003ca target=\"_blank\" href=\"https://codesandbox.io/s/billowing-wood-1tq2u?file=/src/App.js:64-380\"\u003eTry it here\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eNow if the \u003ccode\u003ecolor\u003c/code\u003e changes, only the \u003ccode\u003eForm\u003c/code\u003e re-renders. Problem solved.\u003c/p\u003e\n\u003ch2\u003eSolution 2: Lift Content Up\u003c/h2\u003e\n\u003cp\u003eThe above solution doesn‚Äôt work if the piece of state is used somewhere \u003cem\u003eabove\u003c/em\u003e the expensive tree. For example, let‚Äôs say we put the \u003ccode\u003ecolor\u003c/code\u003e on the \u003cem\u003eparent\u003c/em\u003e \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ered\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e style={{ \u003c/span\u003e\u003cspan\u003ecolor \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e value={\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e} onChange={(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHello, world!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eExpensiveTree\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(\u003ca target=\"_blank\" href=\"https://codesandbox.io/s/bold-dust-0jbg7?file=/src/App.js:58-313\"\u003eTry it here\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eNow it seems like we can‚Äôt just ‚Äúextract‚Äù the parts that don‚Äôt use \u003ccode\u003ecolor\u003c/code\u003e into another component, since that would include the parent \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, which would then include \u003ccode\u003e\u0026lt;ExpensiveTree /\u0026gt;\u003c/code\u003e. Can‚Äôt avoid \u003ccode\u003ememo\u003c/code\u003e this time, right?\u003c/p\u003e\n\u003cp\u003eOr can we?\u003c/p\u003e\n\u003cp\u003ePlay with this sandbox and see if you can figure it out.\u003c/p\u003e\n\u003cp\u003e‚Ä¶\u003c/p\u003e\n\u003cp\u003e‚Ä¶\u003c/p\u003e\n\u003cp\u003e‚Ä¶\u003c/p\u003e\n\u003cp\u003eThe answer is remarkably plain:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eApp\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eColorPicker\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHello, world!\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eExpensiveTree\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eColorPicker\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eColorPicker\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ children }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ered\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e style={{ \u003c/span\u003e\u003cspan\u003ecolor \u003c/span\u003e\u003cspan\u003e}}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e value={\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e} onChange={(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e) \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echildren\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(\u003ca target=\"_blank\" href=\"https://codesandbox.io/s/wonderful-banach-tyfr1?file=/src/App.js:58-423\"\u003eTry it here\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWe split the \u003ccode\u003eApp\u003c/code\u003e component in two. The parts that depend on the \u003ccode\u003ecolor\u003c/code\u003e, together with the \u003ccode\u003ecolor\u003c/code\u003e state variable itself, have moved into \u003ccode\u003eColorPicker\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe parts that don‚Äôt care about the \u003ccode\u003ecolor\u003c/code\u003e stayed in the \u003ccode\u003eApp\u003c/code\u003e component and are passed to \u003ccode\u003eColorPicker\u003c/code\u003e as JSX content, also known as the \u003ccode\u003echildren\u003c/code\u003e prop.\u003c/p\u003e\n\u003cp\u003eWhen the \u003ccode\u003ecolor\u003c/code\u003e changes, \u003ccode\u003eColorPicker\u003c/code\u003e re-renders. But it still has the same \u003ccode\u003echildren\u003c/code\u003e prop it got from the \u003ccode\u003eApp\u003c/code\u003e last time, so React doesn‚Äôt visit that subtree.\u003c/p\u003e\n\u003cp\u003eAnd as a result, \u003ccode\u003e\u0026lt;ExpensiveTree /\u0026gt;\u003c/code\u003e doesn‚Äôt re-render.\u003c/p\u003e\n\u003ch2\u003eWhat‚Äôs the moral?\u003c/h2\u003e\n\u003cp\u003eBefore you apply optimizations like \u003ccode\u003ememo\u003c/code\u003e or \u003ccode\u003euseMemo\u003c/code\u003e, it might make sense to look if you can split the parts that change from the parts that don‚Äôt change.\u003c/p\u003e\n\u003cp\u003eThe interesting part about these approaches is that \u003cstrong\u003ethey don‚Äôt really have anything to do with performance, per se\u003c/strong\u003e. Using the \u003ccode\u003echildren\u003c/code\u003e prop to split up components usually makes the data flow of your application easier to follow and reduces the number of props plumbed down through the tree. Improved performance in cases like this is a cherry on top, not the end goal.\u003c/p\u003e\n\u003cp\u003eCuriously, this pattern also unlocks \u003cem\u003emore\u003c/em\u003e performance benefits in the future.\u003c/p\u003e\n\u003cp\u003eFor example, when \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html\"\u003eServer Components\u003c/a\u003e are stable and ready for adoption, our \u003ccode\u003eColorPicker\u003c/code\u003e component could receive its \u003ccode\u003echildren\u003c/code\u003e \u003ca target=\"_blank\" href=\"https://youtu.be/TQQPAU21ZUw?t=1314\"\u003efrom the server\u003c/a\u003e. Either the whole \u003ccode\u003e\u0026lt;ExpensiveTree /\u0026gt;\u003c/code\u003e component or its parts could run on the server, and even a top-level React state update would ‚Äúskip over‚Äù those parts on the client.\u003c/p\u003e\n\u003cp\u003eThat‚Äôs something even \u003ccode\u003ememo\u003c/code\u003e couldn‚Äôt do! But again, both approaches are complementary. Don‚Äôt neglect moving state down (and lifting content up!)\u003c/p\u003e\n\u003cp\u003eThen, where it‚Äôs not enough, use the Profiler and sprinkle those memo‚Äôs.\u003c/p\u003e\n\u003ch2\u003eDidn‚Äôt I read about this before?\u003c/h2\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://kentcdodds.com/blog/optimize-react-re-renders\"\u003eYes, probably.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis is not a new idea. It‚Äôs a natural consequence of React composition model. It‚Äôs simple enough that it‚Äôs underappreciated, and deserves a bit more love.\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://x.com/search?q=https%3A%2F%2Foverreacted.io%2Fbefore-you-memo%2F\"\u003eDiscuss on ùïè\u003c/a\u003e¬†¬†¬∑¬†¬†\u003ca target=\"_blank\" href=\"https://github.com/gaearon/overreacted.io/edit/main/public/before-you-memo/index.md\"\u003eEdit on GitHub\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
