{
  "id": "f476986d-dcf5-45ec-bcab-fab2939de3c1",
  "title": "Mastering GitHub Copilot: When to use AI agent mode",
  "link": "https://github.blog/ai-and-ml/github-copilot/mastering-github-copilot-when-to-use-ai-agent-mode/",
  "description": "Discover the differences between agent mode and Copilot Edits with GitHub Copilot‚Äîand when to use them in your workflows. The post Mastering GitHub Copilot: When to use AI agent mode appeared first on The GitHub Blog.",
  "author": "Andrea Griffiths",
  "published": "Tue, 25 Mar 2025 16:00:15 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "Developer skills",
    "GitHub",
    "GitHub Copilot",
    "agent mode",
    "Copilot Edits",
    "VS Code"
  ],
  "byline": "Andrea Griffiths",
  "length": 10561,
  "excerpt": "Discover the differences between agent mode and Copilot Edits with GitHub Copilot‚Äîand when to use them in your workflows.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Ever find yourself staring at an AI coding assistant, wondering why it‚Äôs not quite nailing what you need? Maybe it‚Äôs spitting out code that‚Äôs close but not quite right, or you‚Äôre stuck wrestling with a problem that spans multiple files, wishing it could just get the bigger picture. Often, when developers hit these snags, it‚Äôs less about the tool, and more about knowing how to use it. So here‚Äôs the key question you should ask yourself: ‚ÄúDo I need a quick answer or a thoughtful conversation?‚Äù That‚Äôs the secret to unlocking AI coding tools like GitHub Copilot. Because different aspects of Copilot serve different needs, and we‚Äôre here to help you discern when is the best time for agent mode and when you should be using Copilot Edits instead. Both are powerhouse Copilot features, built to supercharge your coding, but they shine in different scenarios. Copilot Edits is your go-to for fast, precise tweaks‚Äîthink refactoring a function, squashing a bug, or applying consistent changes across files without losing your flow. Agent mode, on the other hand, steps up as your AI collaborator for thornier, multi-file challenges‚Äîanalyzing your codebase, proposing architectural fixes, and even running terminal commands while you steer the ship and approve each move. Figuring out which one fits your needs doesn‚Äôt just save time, it turns your AI assistant into a seamless extension of your own coding instincts. Copilot command center: Your chat window Before learning more about agent mode and Copilot Edits, it‚Äôs essential to understand the Copilot chat window in VS Code‚Äîyour central hub for AI interactions. This is where you can: Ask coding questions like ‚ÄúHow do I implement JWT authentication in Node.js?‚Äù Use /explain to understand complex code blocks Debug issues with /fix Generate tests with /tests Access both Edits and agent mode features With the chat window giving you a solid grasp of your code‚Äôs context, you‚Äôre in the driver‚Äôs seat to pick the perfect Copilot tool: Edits or agent mode, for whatever‚Äôs next. Let me take you through a real-world example of how I‚Äôve been using GitHub Copilot to evolve my personal website. It started with a simple idea: create an interactive terminal-style easter egg that showcases my skills in a developer-friendly way. I began with a basic command processing function that handled a few simple commands: function processCommand(command) { try { if (!command?.trim()) { return 'Please enter a command. Type \"more\" for available commands.'; } const sanitizedCommand = command.toLowerCase().trim(); switch (sanitizedCommand) { case 'more': return commands.more; case 'about': return commands.about; case 'skills': return commands.skills; case 'projects': return commands.projects; case 'contact': return commands.contact; default: return `Command not found: \"${command}\". Type 'more' for available commands.`; } } catch (error) { console.error('[Terminal] Error processing command:', error); return 'An error occurred while processing the command.'; } } Initially, I used Copilot Edits to quickly add new features. For instance, I wanted to add a ‚Äògithub‚Äô command to showcase my repositories: Copilot Edits made targeted changes to the switch statement in the processCommand function and added the new command to the commands object‚Äîa perfect example of quick, focused modifications to existing code. As my terminal interface matured, I wanted to implement several interactive features that would require more comprehensive improvements. To get animation effects, keyboard navigation controls, and an extensible theming system that spanned multiple files to work together seamlessly, I turned to agent mode. The agent mode advantage When we designed agent mode, we didn‚Äôt want to create a tool that‚Äôs a simple AI feature: We wanted to create an AI that could pair with you! Rather than working on specific, limited changes where you might be reinventing the wheel, you‚Äôre now providing higher-level direction while the AI tackles the implementation details across multiple files or systems. That being said, with agent mode, you‚Äôre still in control of the process. The AI has more latitude to explore your codebase and suggest comprehensive solutions, but you always review and approve the changes before they‚Äôre applied. It‚Äôs not about surrendering control, it‚Äôs about effectively delegating implementation details while you focus on the bigger picture. What makes agent mode special: Codebase search: It searches your codebase to find relevant files without you explicitly specifying them. Self-iteration: It can iterate on its own output to complete your entire request in one go. Error identification and repair: It automatically recognizes and fixes errors in suggested code. Terminal command execution: It suggests and runs terminal commands with your permission. Build and run capabilities: It can build and run your application to check if changes work correctly. I reach for agent mode when: Building complete features: ‚ÄúAdd analytics tracking throughout the app‚Äù Navigating unfamiliar codebases: ‚ÄúHelp me understand how authentication works in this project‚Äù Writing and verifying tests: ‚ÄúWrite tests for the UserService and make sure they pass‚Äù Implementing terminal-heavy tasks: ‚ÄúSet up a new React project with TypeScript, Redux, and styled-components‚Äù Doing complex refactoring: ‚ÄúRefactor our API calls to use the new error handling pattern‚Äù Continuing with my terminal easter egg, let‚Äôs say I want to implement a much more extensive upgrade with multiple features, like adding a typing animation effect for responses, command history navigation with up/down arrows, and tab completion for commands. At the same time, I want to create a new TerminalThemes.css file with different color scheme options that users can switch between with a ‚Äòtheme‚Äô command. This is where agent mode truly shines. The task spans multiple files, requires an understanding of the existing codebase, and involves creating entirely new functionality. Here, agent mode would: Search through the codebase to understand the terminal implementation. Create the new CSS file for themes. Add typing animation functionality to terminal responses. Implement keyboard handlers for history navigation. Build the tab completion system. Add the theme command to the switch statement. Test the implementation to ensure everything works correctly. This is the beauty of agent mode: it has a complex understanding of patterns and relationships in different parts of the codebase! Agent mode can ensure that the typing animation did not interfere with existing functionality, check that the history navigation was compatible with the current command processing, and confirm that the theme switching properly modified the UI. It is precisely in this multi-file feature implementation with interlinking components that agent mode can shine compared to the more laser-focused Copilot Edits. In the below episode of GitHub Checkout, you can see agent mode implementing a complete water consumption tracker feature in an iOS app. It not only writes the code but also builds, runs, and tests the app, all from a single prompt, without the developer needing to touch the editor directly. The secret: use both together! After many hours with both tools, here‚Äôs my takeaway: It‚Äôs not about picking one, or one being better than the other. It‚Äôs about wielding them together for different purposes. Copilot Edits and agent mode work well together to augment our coding abilities, whether that‚Äôs a more prompt-centric style of development with agent mode, or maintaining granular file edit control via Copilot Edits. Regardless of which tool you are using, you are still the pilot, steering the AI to supercharge your own productivity. The more context you provide in your prompts, the better results you‚Äôll get‚Äîand remember, you always have the final say on any suggested changes. If you‚Äôre just jumping into the world of AI, check out our new Getting started with GitHub Copilot tutorial series, where we walk you through everything from initial setup to advanced techniques. It‚Äôs perfect for developers at any skill level who want to quickly become productive with AI-assisted coding. Happy coding, everyone! üíª‚ú® How to get started Want to try these features? Here‚Äôs my quick setup guide: For Copilot Edits: Open VS Code and look for the Copilot Chat window. Click the ‚ÄúEdit with Copilot‚Äù button to open the Copilot Edits view. Add your relevant files to the working set. Copilot will only make changes to files in this set (unless it‚Äôs creating a new file). Type your prompt describing what changes you need. Review the ‚Äúdiff‚Äù of all proposed changes before accepting them. For agent mode: Make sure you‚Äôre using VS Code version 1.99 or higher (as of original publish date, available in VS Code Insiders). Switch from ‚ÄúEdit‚Äù to ‚ÄúAgent‚Äù mode. Type your prompt, describing the complex task or feature you want to implement. Agent mode will work autonomously, but still require your approval for changes. For best results, consider using custom instructions to personalize how agent mode works with your codebase. Try GitHub Copilot free Ready to automate your dependency management with AI? Learn more about GitHub Copilot for Business or start your free trial of GitHub Enterprise today. Written by Andrea is a Senior Developer Advocate at GitHub with over a decade of experience in developer tools. She combines technical depth with a mission to make advanced technologies more accessible. After transitioning from Army service and construction management to software development, she brings a unique perspective to bridging complex engineering concepts with practical implementation. She lives in Florida with her Welsh partner, two sons, and two dogs, where she continues to drive innovation and support open source through GitHub's global initiatives. Find her online @alacolombiadev. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what‚Äôs next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Work at GitHub! Check out our current job openings. Apply now",
  "image": "https://github.blog/wp-content/uploads/2024/10/java-copilot.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eEver find yourself staring at an AI coding assistant, wondering why it‚Äôs not quite nailing what you need? Maybe it‚Äôs spitting out code that‚Äôs \u003cem\u003eclose\u003c/em\u003e but not \u003cem\u003equite\u003c/em\u003e right, or you‚Äôre stuck wrestling with a problem that spans multiple files, wishing it could just get the bigger picture. Often, when developers hit these snags, it‚Äôs less about the tool, and more about knowing how to use it.\u003c/p\u003e\n\u003cp\u003eSo here‚Äôs the key question you should ask yourself: ‚ÄúDo I need a quick answer or a thoughtful conversation?‚Äù That‚Äôs the secret to unlocking AI coding tools like \u003ca href=\"https://github.com/features/copilot/plans?cft=copilot_li.features_copilot\u0026amp;utm_campaign=agentic-ai\u0026amp;utm_medium=blogtop\u0026amp;utm_source=mastercopilot\"\u003eGitHub Copilot\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBecause different aspects of Copilot serve different needs, and we‚Äôre here to help you discern when is the best time for agent mode and when you should be using Copilot Edits instead. Both are powerhouse Copilot features, built to supercharge your coding, but they shine in different scenarios.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCopilot Edits\u003c/strong\u003e is your go-to for fast, precise tweaks‚Äîthink refactoring a function, squashing a bug, or applying consistent changes across files without losing your flow.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAgent mode\u003c/strong\u003e, on the other hand, steps up as your AI collaborator for thornier, multi-file challenges‚Äîanalyzing your codebase, proposing architectural fixes, and even running terminal commands while you steer the ship and approve each move.\u003c/p\u003e\n\u003cp\u003eFiguring out which one fits your needs doesn‚Äôt just save time, it turns your AI assistant into a seamless extension of your own coding instincts.\u003c/p\u003e\n\u003ch2 id=\"copilot-command-center-your-chat-window\" id=\"copilot-command-center-your-chat-window\"\u003eCopilot command center: Your chat window\u003ca href=\"#copilot-command-center-your-chat-window\" aria-label=\"Copilot command center: Your chat window\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBefore learning more about agent mode and Copilot Edits, it‚Äôs essential to understand the Copilot chat window in VS Code‚Äîyour central hub for AI interactions.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/copilot-screenshot.png?resize=1024%2C1295\" alt=\"GitHub Copilot chat interface showing the \u0026#39;Ask Copilot\u0026#39; panel. The interface displays the Copilot robot logo at the top, followed by \u0026#39;Ask Copilot\u0026#39; heading. Below that is a disclaimer stating \u0026#39;Copilot is powered by AI, so mistakes are possible. Review output carefully before use.\u0026#39; The interface includes instructions: \u0026#39;or type \\# to attach context\u0026#39;, \u0026#39;to chat with extensions\u0026#39;, and \u0026#39;Type / to use commands\u0026#39;. At the bottom is a chat input field with the placeholder text \u0026#39;Ask Copilot\u0026#39; and buttons to add context, with \u0026#39;GPT-4o\u0026#39; shown as the current model.\" width=\"1024\" height=\"1295\" srcset=\"https://github.blog/wp-content/uploads/2025/03/copilot-screenshot.png?w=1265 1265w, https://github.blog/wp-content/uploads/2025/03/copilot-screenshot.png?w=237 237w, https://github.blog/wp-content/uploads/2025/03/copilot-screenshot.png?w=768 768w, https://github.blog/wp-content/uploads/2025/03/copilot-screenshot.png?w=810 810w, https://github.blog/wp-content/uploads/2025/03/copilot-screenshot.png?w=1214 1214w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis is where you can:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAsk coding questions like ‚ÄúHow do I implement JWT authentication in Node.js?‚Äù\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003e/explain\u003c/code\u003e to understand complex code blocks\u003c/li\u003e\n\u003cli\u003eDebug issues with \u003ccode\u003e/fix\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eGenerate tests with \u003ccode\u003e/tests\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAccess both Edits and agent mode features\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith the chat window giving you a solid grasp of your code‚Äôs context, you‚Äôre in the driver‚Äôs seat to pick the perfect Copilot tool: Edits or agent mode, for whatever‚Äôs next.\u003c/p\u003e\n\u003cp\u003eLet me take you through a real-world example of how I‚Äôve been using GitHub Copilot to evolve my personal website. It started with a simple idea: create an interactive terminal-style easter egg that showcases my skills in a developer-friendly way.\u003c/p\u003e\n\u003cp\u003eI began with a basic command processing function that handled a few simple commands:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction processCommand(command) {\ntry {\nif (!command?.trim()) {\nreturn \u0026#39;Please enter a command. Type \u0026#34;more\u0026#34; for available commands.\u0026#39;;\n}\n\nconst sanitizedCommand = command.toLowerCase().trim();\n\nswitch (sanitizedCommand) {\ncase \u0026#39;more\u0026#39;:\nreturn commands.more;\ncase \u0026#39;about\u0026#39;:\nreturn commands.about;\ncase \u0026#39;skills\u0026#39;:\nreturn commands.skills;\ncase \u0026#39;projects\u0026#39;:\nreturn commands.projects;\ncase \u0026#39;contact\u0026#39;:\nreturn commands.contact;\ndefault:\nreturn `Command not found: \u0026#34;${command}\u0026#34;. Type \u0026#39;more\u0026#39; for available commands.`;\n}\n} catch (error) {\nconsole.error(\u0026#39;[Terminal] Error processing command:\u0026#39;, error);\nreturn \u0026#39;An error occurred while processing the command.\u0026#39;;\n}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInitially, I used Copilot Edits to quickly add new features. For instance, I wanted to add a ‚Äògithub‚Äô command to showcase my repositories:\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/VS-Code-editor-screenshot.png?resize=1024%2C491\" alt=\"VS Code editor showing a web development project for ag11.dev. The left sidebar displays a file explorer with various components including ContentLinks.astro, DarkModeToggle, and TerminalEasterEgg files. The main editor shows TerminalService.ts file with a COMMANDS object being exported, listing GitHub repositories including github-commenter-raffle, octogatosconf, and dependabot-automation projects. The right sidebar shows GitHub Copilot suggesting steps to add a new \u0026#39;github\u0026#39; command to the terminal that will display links to repositories. The bottom panel shows a terminal running a development server with local and network URLs. The interface has a dark theme with syntax highlighting in various colors. Add a new command called \u0026#39;github\u0026#39; to the TerminalEasterEgg that displays links to my GitHub repositories with a short description of each. Update both the processCommand function and the commands object.\" width=\"1024\" height=\"491\" srcset=\"https://github.blog/wp-content/uploads/2025/03/VS-Code-editor-screenshot.png?w=1483 1483w, https://github.blog/wp-content/uploads/2025/03/VS-Code-editor-screenshot.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/VS-Code-editor-screenshot.png?w=768 768w, https://github.blog/wp-content/uploads/2025/03/VS-Code-editor-screenshot.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eCopilot Edits made targeted changes to the switch statement in the \u003ccode\u003eprocessCommand\u003c/code\u003e function and added the new command to the commands object‚Äîa perfect example of quick, focused modifications to existing code.\u003c/p\u003e\n\u003cp\u003eAs my terminal interface matured, I wanted to implement several interactive features that would require more comprehensive improvements. To get animation effects, keyboard navigation controls, and an extensible theming system that spanned multiple files to work together seamlessly, I turned to agent mode.\u003c/p\u003e\n\u003ch2 id=\"the-agent-mode-advantage\" id=\"the-agent-mode-advantage\"\u003eThe agent mode advantage\u003ca href=\"#the-agent-mode-advantage\" aria-label=\"The agent mode advantage\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhen we designed agent mode, we didn‚Äôt want to create a tool that‚Äôs a simple AI feature: We wanted to create an AI that could pair with you! Rather than working on specific, limited changes where you might be reinventing the wheel, you‚Äôre now providing higher-level direction while the AI tackles the implementation details across multiple files or systems.\u003c/p\u003e\n\u003cp\u003eThat being said, with agent mode, you‚Äôre still in control of the process. The AI has more latitude to explore your codebase and suggest comprehensive solutions, but you always review and approve the changes before they‚Äôre applied. \u003cstrong\u003eIt‚Äôs not about surrendering control\u003c/strong\u003e, it‚Äôs about effectively delegating implementation details while you focus on the bigger picture.\u003c/p\u003e\n\u003ch3 id=\"what-makes-agent-mode-special\" id=\"what-makes-agent-mode-special\"\u003eWhat makes agent mode special:\u003ca href=\"#what-makes-agent-mode-special\" aria-label=\"What makes agent mode special:\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCodebase search:\u003c/strong\u003e It searches your codebase to find relevant files without you explicitly specifying them.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSelf-iteration:\u003c/strong\u003e It can iterate on its own output to complete your entire request in one go.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eError identification and repair:\u003c/strong\u003e It automatically recognizes and fixes errors in suggested code.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTerminal command execution:\u003c/strong\u003e It suggests and runs terminal commands with your permission.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBuild and run capabilities:\u003c/strong\u003e It can build and run your application to check if changes work correctly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"i-reach-for-agent-mode-when\" id=\"i-reach-for-agent-mode-when\"\u003eI reach for agent mode when:\u003ca href=\"#i-reach-for-agent-mode-when\" aria-label=\"I reach for agent mode when:\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBuilding complete features:\u003c/strong\u003e ‚ÄúAdd analytics tracking throughout the app‚Äù\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNavigating unfamiliar codebases:\u003c/strong\u003e ‚ÄúHelp me understand how authentication works in this project‚Äù\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eWriting and verifying tests:\u003c/strong\u003e ‚ÄúWrite tests for the UserService and make sure they pass‚Äù\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImplementing terminal-heavy tasks:\u003c/strong\u003e ‚ÄúSet up a new React project with TypeScript, Redux, and styled-components‚Äù\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDoing complex refactoring:\u003c/strong\u003e ‚ÄúRefactor our API calls to use the new error handling pattern‚Äù\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eContinuing with my terminal easter egg, let‚Äôs say I want to implement a much more extensive upgrade with multiple features, like adding a typing animation effect for responses, command history navigation with up/down arrows, and tab completion for commands. At the same time, I want to create a new TerminalThemes.css file with different color scheme options that users can switch between with a ‚Äòtheme‚Äô command.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/copilot-edits-screenshot.png?resize=424%2C370\" alt=\"GitHub Copilot interface showing a chat panel with \u0026#39;COPILOT EDITS\u0026#39; tab selected. A user named AndreaGriffiths11 (with profile picture) has requested several enhancements to a TerminalEasterEgg component, including adding a typing animation effect for responses, command history navigation with up/down arrows, tab completion for commands, and creating a new TerminalThemes.css file with theme switching options. The interface shows \u0026#39;TerminalEasterEgg.astro:1-21\u0026#39; as the current file. Below, GitHub Copilot has started responding with \u0026#39;I\u0026#39;ll help enhance the terminal with those features. Let\u0026#39;s break this down into steps:\u0026#39; and indicates it \u0026#39;Used 1 reference\u0026#39;.\u0026#34; Enhance our TerminalEasterEgg to include a typing animation effect for responses, add command history navigation with up/down arrows, and implement tab completion for commands. Also create a new TerminalThemes.css file with different color scheme options that users can switch between with a \u0026#39;theme\u0026#39; command.\" width=\"424\" height=\"370\" srcset=\"https://github.blog/wp-content/uploads/2025/03/copilot-edits-screenshot.png?w=424 424w, https://github.blog/wp-content/uploads/2025/03/copilot-edits-screenshot.png?w=300 300w\" sizes=\"auto, (max-width: 424px) 100vw, 424px\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis is where agent mode truly shines. The task spans multiple files, requires an understanding of the existing codebase, and involves creating entirely new functionality. Here, agent mode would:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSearch through the codebase to understand the terminal implementation.\u003c/li\u003e\n\u003cli\u003eCreate the new CSS file for themes.\u003c/li\u003e\n\u003cli\u003eAdd typing animation functionality to terminal responses.\u003c/li\u003e\n\u003cli\u003eImplement keyboard handlers for history navigation.\u003c/li\u003e\n\u003cli\u003eBuild the tab completion system.\u003c/li\u003e\n\u003cli\u003eAdd the theme command to the switch statement.\u003c/li\u003e\n\u003cli\u003eTest the implementation to ensure everything works correctly.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis is the beauty of agent mode: it has a complex understanding of patterns and relationships in different parts of the codebase! Agent mode can ensure that the typing animation did not interfere with existing functionality, check that the history navigation was compatible with the current command processing, and confirm that the theme switching properly modified the UI. It is precisely in this multi-file feature implementation with interlinking components that agent mode can shine compared to the more laser-focused Copilot Edits.\u003c/p\u003e\n\u003cp\u003eIn the below episode of GitHub Checkout, you can see agent mode implementing a complete water consumption tracker feature in an iOS app. It not only writes the code but also builds, runs, and tests the app, all from a single prompt, without the developer needing to touch the editor directly.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/aKx5I0Mrr9g?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\u003ch2 id=\"the-secret-use-both-together\" id=\"the-secret-use-both-together\"\u003eThe secret: use both together!\u003ca href=\"#the-secret-use-both-together\" aria-label=\"The secret: use both together!\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAfter many hours with both tools, here‚Äôs my takeaway: It‚Äôs not about picking one, or one being better than the other. It‚Äôs about wielding them together for different purposes. Copilot Edits and agent mode work well together to augment our coding abilities, whether that‚Äôs a more prompt-centric style of development with agent mode, or maintaining granular file edit control via Copilot Edits.\u003c/p\u003e\n\u003cp\u003eRegardless of which tool you are using, you are still the pilot, steering the AI to supercharge your own productivity. The more context you provide in your prompts, the better results you‚Äôll get‚Äîand remember, you always have the final say on any suggested changes.\u003c/p\u003e\n\u003cp\u003eIf you‚Äôre just jumping into the world of AI, check out our new \u003ca href=\"https://github.com/features/copilot\"\u003eGetting started with GitHub Copilot tutorial series\u003c/a\u003e, where we walk you through everything from initial setup to advanced techniques. It‚Äôs perfect for developers at any skill level who want to quickly become productive with AI-assisted coding.\u003c/p\u003e\n\u003cp\u003eHappy coding, everyone! üíª‚ú®\u003c/p\u003e\n\u003ch2 id=\"how-to-get-started\" id=\"how-to-get-started\"\u003eHow to get started\u003ca href=\"#how-to-get-started\" aria-label=\"How to get started\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWant to try these features? Here‚Äôs my quick setup guide:\u003c/p\u003e\n\u003ch3 id=\"for-copilot-edits\" id=\"for-copilot-edits\"\u003eFor Copilot Edits:\u003ca href=\"#for-copilot-edits\" aria-label=\"For Copilot Edits:\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eOpen VS Code and look for the Copilot Chat window.\u003c/li\u003e\n\u003cli\u003eClick the ‚ÄúEdit with Copilot‚Äù button to open the Copilot Edits view.\u003c/li\u003e\n\u003cli\u003eAdd your relevant files to the working set. Copilot will only make changes to files in this set (unless it‚Äôs creating a new file).\u003c/li\u003e\n\u003cli\u003eType your prompt describing what changes you need.\u003c/li\u003e\n\u003cli\u003eReview the ‚Äúdiff‚Äù of all proposed changes before accepting them.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"for-agent-mode\" id=\"for-agent-mode\"\u003eFor agent mode:\u003ca href=\"#for-agent-mode\" aria-label=\"For agent mode:\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eMake sure you‚Äôre using \u003ca href=\"https://code.visualstudio.com/insiders/\"\u003eVS Code version 1.99\u003c/a\u003e or higher (as of original publish date, available in VS Code Insiders).\u003c/li\u003e\n\u003cli\u003eSwitch from ‚ÄúEdit‚Äù to ‚ÄúAgent‚Äù mode.\u003c/li\u003e\n\u003cli\u003eType your prompt, describing the complex task or feature you want to implement.\u003c/li\u003e\n\u003cli\u003eAgent mode will work autonomously, but still require your approval for changes.\u003c/li\u003e\n\u003cli\u003eFor best results, consider using custom instructions to personalize how agent mode works with your codebase.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eTry GitHub Copilot free\u003c/strong\u003e\u003cbr/\u003e\nReady to automate your dependency management with AI? Learn more about \u003ca href=\"https://gh.io/dependencieswithcopilot\"\u003eGitHub Copilot for Business\u003c/a\u003e or \u003ca href=\"https://gh.io/try-enterprise\"\u003estart your free trial\u003c/a\u003e of GitHub Enterprise today.\u003c/p\u003e\n\u003c/div\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://github.blog/wp-content/uploads/2025/03/cropped-IMG_1971-200x200.jpeg\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://github.blog/wp-content/uploads/2025/03/cropped-IMG_1971-200x200.jpeg\" alt=\"Andrea Griffiths\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eAndrea is a Senior Developer Advocate at GitHub with over a decade of experience in developer tools. She combines technical depth with a mission to make advanced technologies more accessible. After transitioning from Army service and construction management to software development, she brings a unique perspective to bridging complex engineering concepts with practical implementation. She lives in Florida with her Welsh partner, two sons, and two dogs, where she continues to drive innovation and support open source through GitHub\u0026#39;s global initiatives. Find her online @alacolombiadev.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what‚Äôs next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.blog/developer-skills/github/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"\u003e\u003cpath fill=\"currentColor\" d=\"M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z\"\u003e\u003c/path\u003e\u003cpath stroke=\"currentColor\" d=\"M1.75 8H11\" stroke-width=\"1.5\" stroke-linecap=\"round\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Work at GitHub!\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tWork at GitHub!\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eCheck out our current job openings.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Apply now; ref_location:bottom recirculation;\" href=\"https://www.github.careers/careers-home\" target=\"_blank\" aria-label=\"Apply now\"\u003e\n\t\t\t\t\tApply now\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2025-03-25T16:00:15Z",
  "modifiedTime": "2025-03-26T00:18:07Z"
}
