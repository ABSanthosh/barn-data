{
  "id": "6ad68fa2-63d8-4638-b41e-d66e7d8ca988",
  "title": "GitLab Introduces Advanced Vulnerability Tracking to Tackle Code Volatility and Double Reporting",
  "link": "https://www.infoq.com/news/2025/03/gitlab-vulnerability-tracking/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "GitLab has introduced a new feature that addresses two significant challenges in vulnerability management: code volatility and double reporting. Code volatility refers to the frequent changes in codebases that can reintroduce previously resolved vulnerabilities, while double reporting occurs when multiple security tools identify the same vulnerability. By Aditya Kulkarni",
  "author": "Aditya Kulkarni",
  "published": "Sat, 01 Mar 2025 06:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Security",
    "Software Testing",
    "GitLab",
    "DevOps",
    "news"
  ],
  "byline": "Aditya Kulkarni",
  "length": 3768,
  "excerpt": "GitLab has introduced a new feature that addresses two significant challenges in vulnerability management: code volatility and double reporting. Code volatility refers to the frequent changes in codeb",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250228123450/apple-touch-icon.png",
  "text": "GitLab has introduced a new feature that addresses two significant challenges in vulnerability management: code volatility and double reporting. Code volatility refers to the frequent changes in codebases that can reintroduce previously resolved vulnerabilities, while double reporting occurs when multiple security tools identify the same vulnerability. This new feature integrates advanced tracking mechanisms to tackle these issues, enhancing the accuracy and efficiency of vulnerability detection and management. Julian Thome, Staff Backend Engineer at GitLab summarised the announcement in a blog post. Highlighting the challenges of tracking vulnerabilities in dynamic codebases and heterogeneous environments, Thome mentioned that this new feature is particularly useful for teams practicing DevSecOps. In modern software development, DevSecOps integrates security into the development lifecycle, enabling teams to deliver features quickly while maintaining security standards. However, the dynamic nature of CI/CD pipelines and the use of multiple Static Application Security Testing (SAST) tools create two significant challenges. The first is code volatility, where frequent changes in codebases can reintroduce previously resolved vulnerabilities. The second is double reporting, where multiple tools report the same vulnerability, leading to duplication and inefficiency. These challenges make vulnerability management difficult for developers and security teams to identify unique issues and prioritize fixes effectively. GitLab's Advanced Vulnerability Tracking is designed to address these challenges by improving the accuracy and efficiency of vulnerability identification. The feature uses contextual information from generated syntax trees to scope vulnerabilities more precisely. Traditional methods often rely on \u003cfile, line number\u003e pairs to identify vulnerabilities. The new feature utilizes a method called \"location fingerprinting,\" which generates identifiers for vulnerabilities that are less fragile across code changes compared to traditional tracking methods. A study conducted by GitLab demonstrated that its Advanced Vulnerability Tracking method is 30% more effective than traditional line-based tracking. The study also found that the benefits of this approach increase over time. We saw an interesting conversation on Reddit about Centralized Vulnerability Management tools. The original poster invited suggestions for centralised vulnerability management tools from the tech community. The responses on the post included tools such as Qualsys, Tenable, Vanta, Plextrac, etc. About narrowing down the vulnerability management tool, one of the Reddit users, Beneficial_West_7821, gave an insightful response, ...I highly recommend running a technical PoV and making sure you pay attention to things like compatibility in practise with your security tool landscape, as well as aggregation, de-duplication, configurability, dashboarding, reporting etc. There is a very wide range of capability and maturity in the market, and performance can vary significantly (for example in ingestion and processing, as well as in responsiveness of the UI). The findings from the study related to Advanced Vulnerability Tracking method will be presented at the 47th International Conference on Software Engineering (ICSE) 2025 in the Software Engineering in Practice Track. The preprint of the study is named \"A Scalable, Effective, and Simple Vulnerability Tracking Approach for Heterogeneous SAST Setups Based on Scope+Offset,\" authored by Lucas Charles, Jason Leasure, and Hua Yan. About the Author Aditya Kulkarni",
  "image": "https://res.infoq.com/news/2025/03/gitlab-vulnerability-tracking/en/headerimage/generatedHeaderImage-1740806743314.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eGitLab has introduced a new feature that addresses two significant challenges in vulnerability management: code volatility and double reporting. Code volatility refers to the frequent changes in codebases that can reintroduce previously resolved vulnerabilities, while double reporting occurs when multiple security tools identify the same vulnerability. This new feature integrates advanced tracking mechanisms to tackle these issues, enhancing the accuracy and efficiency of vulnerability detection and management.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.linkedin.com/in/julian-t-5a7910146/\"\u003eJulian Thome\u003c/a\u003e, Staff Backend Engineer at GitLab summarised the announcement \u003ca href=\"https://about.gitlab.com/blog/2025/01/21/introducing-gitlab-advanced-vulnerability-tracking/\"\u003ein a blog post\u003c/a\u003e. Highlighting the challenges of tracking vulnerabilities in dynamic codebases and heterogeneous environments, Thome mentioned that this new feature is particularly useful for teams practicing DevSecOps.\u003c/p\u003e\n\n\u003cp\u003eIn modern software development, DevSecOps integrates security into the development lifecycle, enabling teams to deliver features quickly while maintaining security standards. However, the dynamic nature of CI/CD pipelines and the use of multiple Static Application Security Testing (SAST) tools create two significant challenges. The first is code volatility, where frequent changes in codebases can reintroduce previously resolved vulnerabilities. The second is double reporting, where multiple tools report the same vulnerability, leading to duplication and inefficiency. These challenges make vulnerability management difficult for developers and security teams to identify unique issues and prioritize fixes effectively.\u003c/p\u003e\n\n\u003cp\u003eGitLab\u0026#39;s \u003ca href=\"https://docs.gitlab.com/user/application_security/sast/#advanced-vulnerability-tracking\"\u003eAdvanced Vulnerability Tracking\u003c/a\u003e is designed to address these challenges by improving the accuracy and efficiency of vulnerability identification. The feature uses contextual information from generated syntax trees to scope vulnerabilities more precisely.\u003c/p\u003e\n\n\u003cp\u003eTraditional methods often rely on \u003ccode\u003e\u0026lt;file, line number\u0026gt;\u003c/code\u003e pairs to identify vulnerabilities. The new feature utilizes a method called \u0026#34;location fingerprinting,\u0026#34; which generates identifiers for vulnerabilities that are less fragile across code changes compared to traditional tracking methods.\u003c/p\u003e\n\n\u003cp\u003eA study conducted by GitLab demonstrated that its Advanced Vulnerability Tracking method is 30% more effective than traditional line-based tracking. The study also found that the benefits of this approach increase over time.\u003c/p\u003e\n\n\u003cp\u003eWe saw an interesting conversation on Reddit about \u003ca href=\"https://www.reddit.com/r/cybersecurity/comments/1ij11ns/vulnerability_management/\"\u003eCentralized Vulnerability Management tools\u003c/a\u003e. The original poster invited suggestions for centralised vulnerability management tools from the tech community. The responses on the post included tools such as \u003ca href=\"https://www.qualys.com/apps/vulnerability-management-detection-response/\"\u003eQualsys\u003c/a\u003e, \u003ca href=\"https://www.tenable.com/products/vulnerability-management\"\u003eTenable\u003c/a\u003e, \u003ca href=\"https://www.vanta.com/\"\u003eVanta\u003c/a\u003e, \u003ca href=\"https://plextrac.com/\"\u003ePlextrac\u003c/a\u003e, etc.\u003c/p\u003e\n\n\u003cp\u003eAbout narrowing down the vulnerability management tool, one of the Reddit users, \u003ca href=\"https://www.reddit.com/user/Beneficial_West_7821/\"\u003eBeneficial_West_7821\u003c/a\u003e, gave an insightful response,\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e...I highly recommend running a technical PoV and making sure you pay attention to things like compatibility in practise with your security tool landscape, as well as aggregation, de-duplication, configurability, dashboarding, reporting etc.\u003c/p\u003e\n\n\u003cp\u003eThere is a very wide range of capability and maturity in the market, and performance can vary significantly (for example in ingestion and processing, as well as in responsiveness of the UI).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe findings from the study related to Advanced Vulnerability Tracking method will be presented at the \u003ca href=\"https://conf.researchr.org/home/icse-2025\"\u003e47th International Conference on Software Engineering (ICSE) 2025 in the Software Engineering in Practice Track\u003c/a\u003e. The preprint of the study is named \u003cem\u003e\u0026#34;\u003ca href=\"https://about.gitlab.com/resources/downloads/icse25-preprint.pdf\"\u003eA Scalable, Effective, and Simple Vulnerability Tracking Approach for Heterogeneous SAST Setups Based on Scope+Offset\u003c/a\u003e,\u0026#34;\u003c/em\u003e authored by \u003ca href=\"https://gitlab.com/theoretick\"\u003eLucas Charles\u003c/a\u003e, \u003ca href=\"https://gitlab.com/jleasure\"\u003eJason Leasure\u003c/a\u003e, and \u003ca href=\"https://gitlab.com/hyan3\"\u003eHua Yan\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Aditya-Kulkarni\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eAditya Kulkarni\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-03-01T00:00:00Z",
  "modifiedTime": null
}
