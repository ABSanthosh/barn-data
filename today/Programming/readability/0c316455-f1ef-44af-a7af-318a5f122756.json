{
  "id": "0c316455-f1ef-44af-a7af-318a5f122756",
  "title": "Use your own user @ domain for Mastodon discoverability with the WebFinger Protocol without hosting a server",
  "link": "http://feeds.hanselman.com/~/722495722/0/scotthanselman~Use-your-own-user-domain-for-Mastodon-discoverability-with-the-WebFinger-Protocol-without-hosting-a-server",
  "description": "Mastodon is a free, open-source social networking service that is decentralized and distributed. It was created in 2016 as an alternative to centralized social media platforms such as Twitter and Facebook. One of the key features of Mastodon is the use of the WebFinger protocol, which allows users to discover and access information about other users on the Mastodon network. WebFinger is a simple HTTP-based protocol that enables a user to discover information about other users or resources on the internet by using their email address or other identifying information. The WebFinger protocol is important for Mastodon because it enables users to find and follow each other on the network, regardless of where they are hosted. WebFinger uses a \"well known\" path structure when calling an domain. You may be familiar with the robots.txt convention. We all just agree that robots.txt will sit at the top path of everyone's domain. The WebFinger protocol is a simple HTTP-based protocol that enables a user or search to discover information about other users or resources on the internet by using their email address or other identifying information. My is first name at last name .com, so...my personal WebFinger API endpoint is here https://www.hanselman.com/.well-known/webfinger The idea is that... A user sends a WebFinger request to a server, using the email address or other identifying information of the user or resource they are trying to discover. The server looks up the requested information in its database and returns a JSON object containing the information about the user or resource. This JSON object is called a \"resource descriptor.\" The user's client receives the resource descriptor and displays the information to the user. The resource descriptor contains various types of information about the user or resource, such as their name, profile picture, and links to their social media accounts or other online resources. It can also include other types of information, such as the user's public key, which can be used to establish a secure connection with the user. There's a great explainer here as well. From that page: When someone searches for you on Mastodon, your server will be queried for accounts using an endpoint that looks like this: GET https://${MASTODON_DOMAIN}/.well-known/webfinger?resource=acct:${MASTODON_USER}@${MASTODON_DOMAIN} Note that Mastodon user names start with @ so they are @username@someserver.com. Just like twiter would be @shanselman@twitter.com I can be @shanselman@hanselman.com now! So perhaps https://www.hanselman.com/.well-known/webfinger?resource=acct:FRED@HANSELMAN.COM Mine returns{ \"subject\":\"acct:shanselman@hachyderm.io\", \"aliases\": [ \"https://hachyderm.io/@shanselman\", \"https://hachyderm.io/users/shanselman\" ], \"links\": [ { \"rel\":\"http://webfinger.net/rel/profile-page\", \"type\":\"text/html\", \"href\":\"https://hachyderm.io/@shanselman\" }, { \"rel\":\"self\", \"type\":\"application/activity+json\", \"href\":\"https://hachyderm.io/users/shanselman\" }, { \"rel\":\"http://ostatus.org/schema/1.0/subscribe\", \"template\":\"https://hachyderm.io/authorize_interaction?uri={uri}\" } ]} This file should be returned as a mime type of application/jrd+json My site is an ASP.NET Razor Pages site, so I just did this in Startup.cs to map that well known URL to a page/route that returns the JSON needed.services.AddRazorPages().AddRazorPagesOptions(options =\u003e{ options.Conventions.AddPageRoute(\"/robotstxt\", \"/Robots.Txt\"); //i did this before, not needed options.Conventions.AddPageRoute(\"/webfinger\", \"/.well-known/webfinger\"); options.Conventions.AddPageRoute(\"/webfinger\", \"/.well-known/webfinger/{val?}\");}); then I made a webfinger.cshtml like this. Note I have to double escape the @@ sites because it's Razor.@page@{ Layout = null; this.Response.ContentType = \"application/jrd+json\";}{ \"subject\":\"acct:shanselman@hachyderm.io\", \"aliases\": [ \"https://hachyderm.io/@@shanselman\", \"https://hachyderm.io/users/shanselman\" ], \"links\": [ { \"rel\":\"http://webfinger.net/rel/profile-page\", \"type\":\"text/html\", \"href\":\"https://hachyderm.io/@@shanselman\" }, { \"rel\":\"self\", \"type\":\"application/activity+json\", \"href\":\"https://hachyderm.io/users/shanselman\" }, { \"rel\":\"http://ostatus.org/schema/1.0/subscribe\", \"template\":\"https://hachyderm.io/authorize_interaction?uri={uri}\" } ]} This is a static response, but if I was hosting pages for more than one person I'd want to take in the url with the user's name, and then map it to their aliases and return those correctly. Even easier, you can just use the JSON file of your own Mastodon server's webfinger response and SAVE IT as a static json file and copy it to your own server! As long as your server returns the right JSON from that well known URL then it'll work. So this is my template https://hachyderm.io/.well-known/webfinger?resource=acct:shanselman@hachyderm.io from where I'm hosted now. If you want to get started with Mastodon, start here. https://github.com/joyeusenoelle/GuideToMastodon/ it feels like Twitter circa 2007 except it's not owned by anyone and is based on web standards like ActivityPub. Hope this helps! Â© 2021 Scott Hanselman. All rights reserved.",
  "author": "Scott Hanselman",
  "published": "Sun, 18 Dec 2022 22:16:30 GMT",
  "source": "http://feeds.hanselman.com/ScottHanselman",
  "categories": [
    "Musings"
  ],
  "byline": "Scott Hanselman",
  "length": 5997,
  "excerpt": "Mastodon is a free, open-source social networking service that is decentralized ...",
  "siteName": "",
  "favicon": "https://images.hanselman.com/main/apple-touch-icon-114x114.png",
  "text": "Mastodon is a free, open-source social networking service that is decentralized and distributed. It was created in 2016 as an alternative to centralized social media platforms such as Twitter and Facebook. One of the key features of Mastodon is the use of the WebFinger protocol, which allows users to discover and access information about other users on the Mastodon network. WebFinger is a simple HTTP-based protocol that enables a user to discover information about other users or resources on the internet by using their email address or other identifying information. The WebFinger protocol is important for Mastodon because it enables users to find and follow each other on the network, regardless of where they are hosted. WebFinger uses a \"well known\" path structure when calling an domain. You may be familiar with the robots.txt convention. We all just agree that robots.txt will sit at the top path of everyone's domain. The WebFinger protocol is a simple HTTP-based protocol that enables a user or search to discover information about other users or resources on the internet by using their email address or other identifying information. My is first name at last name .com, so...my personal WebFinger API endpoint is here https://www.hanselman.com/.well-known/webfinger The idea is that... A user sends a WebFinger request to a server, using the email address or other identifying information of the user or resource they are trying to discover. The server looks up the requested information in its database and returns a JSON object containing the information about the user or resource. This JSON object is called a \"resource descriptor.\" The user's client receives the resource descriptor and displays the information to the user. The resource descriptor contains various types of information about the user or resource, such as their name, profile picture, and links to their social media accounts or other online resources. It can also include other types of information, such as the user's public key, which can be used to establish a secure connection with the user. There's a great explainer here as well. From that page: When someone searches for you on Mastodon, your server will be queried for accounts using an endpoint that looks like this: GET https://${MASTODON_DOMAIN}/.well-known/webfinger?resource=acct:${MASTODON_USER}@${MASTODON_DOMAIN} Note that Mastodon user names start with @ so they are @username@someserver.com. Just like twiter would be @shanselman@twitter.com I can be @shanselman@hanselman.com now! So perhaps https://www.hanselman.com/.well-known/webfinger?resource=acct:FRED@HANSELMAN.COM Mine returns{ \"subject\":\"acct:shanselman@hachyderm.io\", \"aliases\": [ \"https://hachyderm.io/@shanselman\", \"https://hachyderm.io/users/shanselman\" ], \"links\": [ { \"rel\":\"http://webfinger.net/rel/profile-page\", \"type\":\"text/html\", \"href\":\"https://hachyderm.io/@shanselman\" }, { \"rel\":\"self\", \"type\":\"application/activity+json\", \"href\":\"https://hachyderm.io/users/shanselman\" }, { \"rel\":\"http://ostatus.org/schema/1.0/subscribe\", \"template\":\"https://hachyderm.io/authorize_interaction?uri={uri}\" } ]} This file should be returned as a mime type of application/jrd+json My site is an ASP.NET Razor Pages site, so I just did this in Startup.cs to map that well known URL to a page/route that returns the JSON needed.services.AddRazorPages().AddRazorPagesOptions(options =\u003e{ options.Conventions.AddPageRoute(\"/robotstxt\", \"/Robots.Txt\"); //i did this before, not needed options.Conventions.AddPageRoute(\"/webfinger\", \"/.well-known/webfinger\"); options.Conventions.AddPageRoute(\"/webfinger\", \"/.well-known/webfinger/{val?}\");}); then I made a webfinger.cshtml like this. Note I have to double escape the @@ sites because it's Razor.@page@{ Layout = null; this.Response.ContentType = \"application/jrd+json\";}{ \"subject\":\"acct:shanselman@hachyderm.io\", \"aliases\": [ \"https://hachyderm.io/@@shanselman\", \"https://hachyderm.io/users/shanselman\" ], \"links\": [ { \"rel\":\"http://webfinger.net/rel/profile-page\", \"type\":\"text/html\", \"href\":\"https://hachyderm.io/@@shanselman\" }, { \"rel\":\"self\", \"type\":\"application/activity+json\", \"href\":\"https://hachyderm.io/users/shanselman\" }, { \"rel\":\"http://ostatus.org/schema/1.0/subscribe\", \"template\":\"https://hachyderm.io/authorize_interaction?uri={uri}\" } ]} This is a static response, but if I was hosting pages for more than one person I'd want to take in the url with the user's name, and then map it to their aliases and return those correctly. Even easier, you can just use the JSON file of your own Mastodon server's webfinger response and SAVE IT as a static json file and copy it to your own server! As long as your server returns the right JSON from that well known URL then it'll work. So this is my template https://hachyderm.io/.well-known/webfinger?resource=acct:shanselman@hachyderm.io from where I'm hosted now. If you want to get started with Mastodon, start here. https://github.com/joyeusenoelle/GuideToMastodon/ it feels like Twitter circa 2007 except it's not owned by anyone and is based on web standards like ActivityPub. Hope this helps! About Scott Scott Hanselman is a former professor, former Chief Architect in finance, now speaker, consultant, father, diabetic, and Microsoft employee. He is a failed stand-up comic, a cornrower, and a book author. About Â  Newsletter Hosting By",
  "image": "https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/f76e92f681b3_FC6E/image_cb60bf43-6d0a-41f9-9ff5-246f288adedf.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n            \n            \u003cp\u003eMastodon is a free, open-source social networking service that is decentralized and distributed. It was created in 2016 as an alternative to centralized social media platforms such as Twitter and Facebook. \u003c/p\u003e\u003cp\u003eOne of the key features of Mastodon is the use of the WebFinger protocol, which allows users to discover and access information about other users on the Mastodon network. WebFinger is a simple HTTP-based protocol that enables a user to discover information about other users or resources on the internet by using their email address or other identifying information. The WebFinger protocol is important for Mastodon because it enables users to find and follow each other on the network, regardless of where they are hosted. \u003c/p\u003e\u003cp\u003eWebFinger uses a \u0026#34;well known\u0026#34; path structure when calling an domain. You may be familiar with the robots.txt convention. We all just agree that robots.txt will sit at the top path of everyone\u0026#39;s domain. \u003c/p\u003e\u003cp\u003eThe WebFinger protocol is a simple HTTP-based protocol that enables a user or search to discover information about other users or resources on the internet by using their email address or other identifying information. My is first name at last name .com, so...my personal WebFinger API endpoint is here \u003ca title=\"https://www.hanselman.com/.well-known/webfinger\" href=\"https://www.hanselman.com/.well-known/webfinger\"\u003ehttps://www.hanselman.com/.well-known/webfinger\u003c/a\u003e \u003c/p\u003e\u003cp\u003eThe idea is that... \u003c/p\u003e\u003col\u003e \u003cli\u003e \u003cp\u003eA user sends a WebFinger request to a server, using the email address or other identifying information of the user or resource they are trying to discover.\u003c/p\u003e \u003c/li\u003e\u003cli\u003e \u003cp\u003eThe server looks up the requested information in its database and returns a JSON object containing the information about the user or resource. This JSON object is called a \u0026#34;resource descriptor.\u0026#34;\u003c/p\u003e \u003c/li\u003e\u003cli\u003e \u003cp\u003eThe user\u0026#39;s client receives the resource descriptor and displays the information to the user.\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e \u003cp\u003eThe resource descriptor contains various types of information about the user or resource, such as their name, profile picture, and links to their social media accounts or other online resources. It can also include other types of information, such as the user\u0026#39;s public key, which can be used to establish a secure connection with the user. \u003c/p\u003e\u003cp\u003eThere\u0026#39;s \u003ca href=\"https://guide.toot.as/guide/use-your-own-domain/\"\u003ea great explainer here as well\u003c/a\u003e. From that page: \u003c/p\u003e\u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eWhen someone searches for you on Mastodon, your server will be queried for accounts using an endpoint that looks like this:\u003c/strong\u003e \u003c/p\u003e\u003cp\u003eGET \u003ca href=\"https://${MASTODON_DOMAIN}/.well-known/webfinger?resource=acct:${MASTODON_USER}@${MASTODON_DOMAIN\"\u003ehttps://${MASTODON_DOMAIN}/.well-known/webfinger?resource=acct:${MASTODON_USER}@${MASTODON_DOMAIN\u003c/a\u003e}\u003cbr/\u003e\u003c/p\u003e\u003c/blockquote\u003e \u003cp\u003eNote that Mastodon user names start with @ so they are @username@someserver.com. Just like twiter would be @shanselman@twitter.com I can be @shanselman@hanselman.com now! \u003c/p\u003e\u003cp\u003e\u003cimg title=\"Searching for me with Mastodon\" alt=\"Searching for me with Mastodon\" src=\"https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/f76e92f681b3_FC6E/image_cb60bf43-6d0a-41f9-9ff5-246f288adedf.png\" width=\"533\" height=\"455\"/\u003e \u003c/p\u003e\u003cp\u003eSo perhaps \u003cem\u003ehttps://www.hanselman.com/.well-known/webfinger?resource=acct:FRED@HANSELMAN.COM\u003c/em\u003e \u003c/p\u003e\u003cp\u003eMine returns\u003c/p\u003e\u003cpre\u003e{\u003cbr/\u003e    \u0026#34;subject\u0026#34;:\u0026#34;acct:shanselman@hachyderm.io\u0026#34;,\u003cbr/\u003e    \u0026#34;aliases\u0026#34;:\u003cbr/\u003e    [\u003cbr/\u003e        \u0026#34;https://hachyderm.io/@shanselman\u0026#34;,\u003cbr/\u003e        \u0026#34;https://hachyderm.io/users/shanselman\u0026#34;\u003cbr/\u003e    ],\u003cbr/\u003e    \u0026#34;links\u0026#34;:\u003cbr/\u003e    [\u003cbr/\u003e        {\u003cbr/\u003e            \u0026#34;rel\u0026#34;:\u0026#34;http://webfinger.net/rel/profile-page\u0026#34;,\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;text/html\u0026#34;,\u003cbr/\u003e            \u0026#34;href\u0026#34;:\u0026#34;https://hachyderm.io/@shanselman\u0026#34;\u003cbr/\u003e        },\u003cbr/\u003e        {\u003cbr/\u003e            \u0026#34;rel\u0026#34;:\u0026#34;self\u0026#34;,\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;application/activity+json\u0026#34;,\u003cbr/\u003e            \u0026#34;href\u0026#34;:\u0026#34;https://hachyderm.io/users/shanselman\u0026#34;\u003cbr/\u003e        },\u003cbr/\u003e        {\u003cbr/\u003e            \u0026#34;rel\u0026#34;:\u0026#34;http://ostatus.org/schema/1.0/subscribe\u0026#34;,\u003cbr/\u003e            \u0026#34;template\u0026#34;:\u0026#34;https://hachyderm.io/authorize_interaction?uri={uri}\u0026#34;\u003cbr/\u003e        }\u003cbr/\u003e    ]\u003cbr/\u003e}\n\u003c/pre\u003e\n\u003cp\u003eThis file should be returned as a mime type of \u003cstrong\u003eapplication/jrd+json\u003c/strong\u003e\n\u003c/p\u003e\u003cp\u003eMy site is an ASP.NET Razor Pages site, so I just did this in Startup.cs to map that well known URL to a page/route that returns the JSON needed.\u003c/p\u003e\u003cpre\u003eservices.AddRazorPages().AddRazorPagesOptions(options =\u0026gt;\u003cbr/\u003e{\u003cbr/\u003e    options.Conventions.AddPageRoute(\u0026#34;/robotstxt\u0026#34;, \u0026#34;/Robots.Txt\u0026#34;); //i did this before, not needed\u003cbr/\u003e    options.Conventions.AddPageRoute(\u0026#34;/webfinger\u0026#34;, \u0026#34;/.well-known/webfinger\u0026#34;);\u003cbr/\u003e    options.Conventions.AddPageRoute(\u0026#34;/webfinger\u0026#34;, \u0026#34;/.well-known/webfinger/{val?}\u0026#34;);\u003cbr/\u003e});\n\u003c/pre\u003e\n\u003cp\u003ethen I made a webfinger.cshtml like this. Note I have to double escape the @@ sites because it\u0026#39;s Razor.\u003c/p\u003e\u003cpre\u003e@page\u003cbr/\u003e@{\u003cbr/\u003e    Layout = null;\u003cbr/\u003e    this.Response.ContentType = \u0026#34;application/jrd+json\u0026#34;;\u003cbr/\u003e}\u003cbr/\u003e{\u003cbr/\u003e    \u0026#34;subject\u0026#34;:\u0026#34;acct:shanselman@hachyderm.io\u0026#34;,\u003cbr/\u003e    \u0026#34;aliases\u0026#34;:\u003cbr/\u003e    [\u003cbr/\u003e        \u0026#34;https://hachyderm.io/@@shanselman\u0026#34;,\u003cbr/\u003e        \u0026#34;https://hachyderm.io/users/shanselman\u0026#34;\u003cbr/\u003e    ],\u003cbr/\u003e    \u0026#34;links\u0026#34;:\u003cbr/\u003e    [\u003cbr/\u003e        {\u003cbr/\u003e            \u0026#34;rel\u0026#34;:\u0026#34;http://webfinger.net/rel/profile-page\u0026#34;,\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;text/html\u0026#34;,\u003cbr/\u003e            \u0026#34;href\u0026#34;:\u0026#34;https://hachyderm.io/@@shanselman\u0026#34;\u003cbr/\u003e        },\u003cbr/\u003e        {\u003cbr/\u003e            \u0026#34;rel\u0026#34;:\u0026#34;self\u0026#34;,\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;application/activity+json\u0026#34;,\u003cbr/\u003e            \u0026#34;href\u0026#34;:\u0026#34;https://hachyderm.io/users/shanselman\u0026#34;\u003cbr/\u003e        },\u003cbr/\u003e        {\u003cbr/\u003e            \u0026#34;rel\u0026#34;:\u0026#34;http://ostatus.org/schema/1.0/subscribe\u0026#34;,\u003cbr/\u003e            \u0026#34;template\u0026#34;:\u0026#34;https://hachyderm.io/authorize_interaction?uri={uri}\u0026#34;\u003cbr/\u003e        }\u003cbr/\u003e    ]\u003cbr/\u003e}\n\u003c/pre\u003e\n\u003cp\u003eThis is a static response, but if I was hosting pages for more than one person I\u0026#39;d want to take in the url with the user\u0026#39;s name, and then map it to their aliases and return those correctly. \n\u003c/p\u003e\u003cp\u003eEven easier, you can just use the JSON file of your own Mastodon server\u0026#39;s webfinger response and SAVE IT as a static json file and copy it to your own server! \n\u003c/p\u003e\u003cp\u003eAs long as your server returns the right JSON from that well known URL then it\u0026#39;ll work.\n\u003c/p\u003e\u003cp\u003eSo this is \u003cem\u003emy \u003c/em\u003etemplate \u003ca title=\"https://hachyderm.io/.well-known/webfinger?resource=acct:shanselman@hachyderm.io\" href=\"https://hachyderm.io/.well-known/webfinger?resource=acct:shanselman@hachyderm.io\"\u003ehttps://hachyderm.io/.well-known/webfinger?resource=acct:shanselman@hachyderm.io\u003c/a\u003e from where I\u0026#39;m hosted now.\n\u003c/p\u003e\u003cp\u003eIf you want to get started with Mastodon, start here. \u003ca title=\"https://github.com/joyeusenoelle/GuideToMastodon/\" href=\"https://github.com/joyeusenoelle/GuideToMastodon/\"\u003ehttps://github.com/joyeusenoelle/GuideToMastodon/\u003c/a\u003e it feels like Twitter circa 2007 except it\u0026#39;s not owned by anyone and is based on web standards like ActivityPub. \n\u003c/p\u003e\u003cp\u003eHope this helps! \u003c/p\u003e\n\n\n\n            \u003cdiv\u003e\n                \u003cdiv\u003e\n                    \u003ch4\u003eAbout Scott\u003c/h4\u003e\n                    \u003cdiv\u003e\n                        \u003cp\u003eScott Hanselman is a former professor, former Chief Architect in finance, now speaker, consultant, father, diabetic, and Microsoft employee. He is a failed stand-up comic, a cornrower, and a book author.\u003c/p\u003e\n                        \u003cp\u003e\u003ca href=\"https://facebook.com/shanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-fb.png\" alt=\"facebook\"/\u003e\u003c/a\u003e\n                        \u003ca href=\"https://twitter.com/shanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-twitter.png\" alt=\"twitter\"/\u003e\u003c/a\u003e\n                        \u003ca href=\"http://feeds.hanselman.com/ScottHanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-rss.png\" alt=\"subscribe\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n                        \u003ca href=\"http://hanselman.com/about\"\u003eAbout\u003c/a\u003e Â  \u003ca href=\"http://www.hanselman.com/newsletter\"\u003eNewsletter\u003c/a\u003e\n                    \u003c/p\u003e\u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv\u003e\n                    \u003cp\u003e\u003cstrong\u003eHosting By\u003c/strong\u003e\u003cbr/\u003e\n                        \u003ca rel=\"nofollow\" href=\"https://azure.microsoft.com/free\"\u003e\u003cimg alt=\"Hosted in an Azure App Service\" width=\"125\" height=\"125\" src=\"http://images.hanselman.com/main/azure-250x250.png\"/\u003e\u003c/a\u003e\n                    \u003c/p\u003e\n\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \n\n\n            \n\n            \n        \u003c/section\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
