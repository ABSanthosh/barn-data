{
  "id": "fe3d003c-e9eb-4d0a-beb0-043f3f243f2f",
  "title": "JavaOne 2025 Day 2: FFM API, Virtual Threads, Platform Engineering, Evolution of Jakarta EE",
  "link": "https://www.infoq.com/news/2025/03/day-two-java-one-2025/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "JavaOne 2025, celebrating the 30th birthday of the Java programming language, was held at the Oracle Conference Center in Redwood Shores, California. This three-day event consisted of 80 sessions and hand-on labs, and two keynotes. Day Two, scheduled on March 19th, 2025, included presentations from various conference tracks. By Michael Redlich",
  "author": "Michael Redlich",
  "published": "Wed, 26 Mar 2025 16:10:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "JavaOne 2025",
    "Foreign Function \u0026 Memory",
    "Jakarta EE",
    "Payara Platform",
    "Eclipse",
    "Helidon Nima",
    "Kubernetes",
    "Java",
    "Helidon",
    "Virtual Thread",
    "Development",
    "Architecture \u0026 Design",
    "news"
  ],
  "byline": "Michael Redlich",
  "length": 7142,
  "excerpt": "JavaOne 2025, celebrating the 30th birthday of the Java programming language, was held at the Oracle Conference Center in Redwood Shores, California. This three-day event consisted of 80 sessions and",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250320073856_u1/apple-touch-icon.png",
  "text": "Day Two of JavaOne 2025 was held on March 19th, 2025, at the Oracle Conference Center in Redwood Shores, California. Key takeaways included: how the Foreign Function \u0026 Memory API solves problems inherent in the Java Native Library; virtual threads in the real world with Helidon; how to make Kubernetes work for Java teams; and the past, present and future of Jakarta EE. What follows is a summary of the highlighted presentations. Highlighted Presentations: Foreign Function \u0026 Memory API | Virtual Threads in the Real World | Platform Engineering | Evolution of Jakarta EE Function and Memory Access in Pure Java, presented by Per-Åke Minborg, Consulting Member of Technical Staff, Java Core Libraries at Oracle. Minborg kicked off his presentation with an introduction to JEP 454, Foreign Function \u0026 Memory API, delivered in JDK 22 and under the auspices of Project Panama. The Foreign Function \u0026 Memory API, having evolved from two JEPs, namely: JEP 393, Foreign-Memory Access API (Third Incubator); and JEP 389, Foreign Linker API (Incubator), both delivered in 2016, was designed to be a replacement for the Java Native Interface (JNI), a native programming interface to interoperate with applications and libraries written in other programming languages, such as C, C++ and Assembly. Problems with JNI include: a native-first programming model that was a fragile combination of Java and C; it's expensive to maintain and deploy; and passing data to/from JNI can be cumbersome and inefficient. Frameworks that attempted to solve these problems included: Java Native Access; Java Native Runtime; and JavaCPP, but never gained any traction. After introducing the JNI workflow and how JNI works with data, Minborg provided multiple code examples and discussed their corresponding problems. Minborg then introduced the MemorySegment and MemoryLayout interface and provided numerous code examples on how to access various memory layouts. Virtual Threads in the Real World: Fast, Robust Java Microservices with Helidon, presented by Joe Di Pol, Engineering Manager at Oracle, and Romain Grecourt, Principal Member of Technical Staff at Oracle. Di Pol kicked off his presentation with an introduction to JEP 444, Virtual Threads, delivered in JDK 21 and under the auspices of Project Loom. He defined virtual threads as \"JVM-managed lightweight threads that help in writing high throughput concurrent applications.\" Virtual threads are scheduled onto platform threads via the ForkJoinPool class. Helidon versions 1.x through 3.x supported a reactive web server based on Netty. However, with the release of Helidon 4.0 in October 2023, the web server, codenamed Helidon Níma, was completely rewritten using virtual threads. Di Pol then provided a comprehensive introduction to Helidon and MicroProfile that included: a juxtaposition on reactive versus blocking with code snippets; virtual threads in Helidon 4.x; how they overcame the issue of virtual thread pinning; and lessons learned. The use of the synchronized keyword was the number one reason for pinning. This was resolved with JEP 491, Synchronize Virtual Threads without Pinning, delivered in JDK 24. Engineering a Modern Java Platform: Making Kubernetes Work for Java Teams, presented by Steve Millidge, CEO at Payara. Millidge kicked off his presentation with a retrospective on the 30 years of Java innovation. The language has significantly changed, but so has technology in terms of architecture, infrastructure, monoliths-to-microservices (and perhaps back again), and the deployment and management of applications. Millidge emphasized that we \"need to keep existing Java apps up to date.\" The Java modernization landscape statistics include: 1000 applications used across a typical enterprise that increases 28% a year; 47% of Java applications need modernization; and 87% of Java application owners and technical leaders believe that modernizing Java applications is a higher priority than other projects. Millidge explained how to modernize Java applications with goals of: adopting a new infrastructure and rearchitecting applications. Kubernetes can help in this area, but despite the many benefits, there are challenges especially when it comes to the manual handling of tasks such as: maintenance; the provision of nodes and pods; routing; and assigning SSL certificates. Platform Engineering offers developer platforms to help teams develop, deploy and manage applications more efficiently with a focus on automation, self service and streamlined workflows. Platform engineering may be used to simplify manual handling of Kubernetes tasks. Millidge introduced how platform engineering is practiced at Payara and the modernization benefits they have gained that include: compatibility with Java SE, Jakarta EE and other frameworks; and successful deployments with on-premise, cloud, multi-cloud and hybrid systems. The Evolution of Enterprise Java with Jakarta EE 11 and Beyond, presented by Ivar Grimstad, Jakarta EE Developer Advocate at the Eclipse Foundation. Grimstad's presentation was a retrospective of the past, present and future of Jakarta EE since its early days as J2EE and Java EE. For the past, Grimstad demonstrated the complexity of Enterprise Java Beans (EJB) and deploying EAR and WAR files. Early efforts to ease some of this complexity was the addition of @Stateless, a component-defining annotation for stateless session beans, introduced in EJB 3.0. For the present, Grimstad provided a brief overview of Jakarta EE 9 and Jakarta EE 10 before primarily focusing on Jakarta EE 11 with details on what developers can expect with the 16 updated specifications. He introduced Jakarta Data 1.0, a new specification that will be included on the Jakarta EE Platform and Web Profile. Demos included a Jakarta Data example and how to dynamically enable virtual threads in a JDK 21 application with the @ManagedThreadFactoryDefinition annotation that supports the Java SE runtime aware feature. For the future, Grimstad enumerated the specifications that have submitted plan reviews for Jakarta EE 12, namely: Jakarta Contexts and Dependency Injection 5.0, Jakarta Data 1.1, Jakarta Faces 5.0, Jakarta Pages 4.1, and Jakarta Web Socket 2.3. The Jakarta NoSQL 1.0 and Jakarta MVC 3.0 specifications are candidates to be included in Jakarta EE 12. Ideas for new specifications include: Jakarta Query, Jakarta CRaC and Jakarta AI. There may also be an effort to replace Enterprise Java Beans. Conclusion JavaOne 2025, a three-day event, consisting of keynotes, presentations and hands-on labs, is organized by Oracle and the developer relations team. The session catalog provides all of the details and developers can watch the Java Next Livestream that takes a deep dive into Java's ongoing development featuring Oracle experts such as: Brian Goetz, Architect for the Java Language; Ron Pressler, Architect and Technical Lead for Project Loom; and Paul Sandoz, Java Architect. About the Author Michael Redlich",
  "image": "https://res.infoq.com/news/2025/03/day-two-java-one-2025/en/headerimage/java-istock-image-01-1743005164441.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eDay Two of \u003ca href=\"https://www.oracle.com/javaone/\"\u003eJavaOne 2025\u003c/a\u003e was held on March 19th, 2025, at the Oracle Conference Center in Redwood Shores, California. Key takeaways included: how the Foreign Function \u0026amp; Memory API solves problems inherent in the Java Native Library; virtual threads in the real world with Helidon; how to make Kubernetes work for Java teams; and the past, present and future of Jakarta EE.\u003c/p\u003e\n\n\u003cp\u003eWhat follows is a summary of the highlighted presentations.\u003c/p\u003e\n\n\u003ch4\u003eHighlighted Presentations: Foreign Function \u0026amp; Memory API | Virtual Threads in the Real World | Platform Engineering | Evolution of Jakarta EE\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003eFunction and Memory Access in Pure Java\u003c/strong\u003e, presented by \u003ca href=\"https://www.linkedin.com/in/minborg/\"\u003ePer-Åke Minborg\u003c/a\u003e, Consulting Member of Technical Staff, Java Core Libraries at Oracle.\u003c/p\u003e\n\n\u003cp\u003eMinborg kicked off his presentation with an introduction to JEP 454, \u003ca href=\"https://openjdk.org/jeps/454\"\u003eForeign Function \u0026amp; Memory API\u003c/a\u003e, delivered in JDK 22 and under the auspices of \u003ca href=\"https://openjdk.org/projects/panama/\"\u003eProject Panama\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe Foreign Function \u0026amp; Memory API, having evolved from two JEPs, namely: JEP 393, \u003ca href=\"https://openjdk.org/jeps/393\"\u003eForeign-Memory Access API (Third Incubator)\u003c/a\u003e; and \u003ca href=\"https://openjdk.org/jeps/389\"\u003eJEP 389, Foreign Linker API (Incubator)\u003c/a\u003e, both delivered in 2016, was designed to be a replacement for the \u003ca href=\"https://docs.oracle.com/en/java/javase/24/docs/specs/jni/index.html\"\u003eJava Native Interface\u003c/a\u003e (JNI), a native programming interface to interoperate with applications and libraries written in other programming languages, such as C, C++ and Assembly.\u003c/p\u003e\n\n\u003cp\u003eProblems with JNI include: a native-first programming model that was a fragile combination of Java and C; it\u0026#39;s expensive to maintain and deploy; and passing data to/from JNI can be cumbersome and inefficient. Frameworks that attempted to solve these problems included: \u003ca href=\"https://github.com/java-native-access/jna/blob/master/README.md\"\u003eJava Native Access\u003c/a\u003e; \u003ca href=\"https://github.com/jnr\"\u003eJava Native Runtime\u003c/a\u003e; and \u003ca href=\"https://github.com/bytedeco/javacpp/blob/master/README.md\"\u003eJavaCPP\u003c/a\u003e, but never gained any traction.\u003c/p\u003e\n\n\u003cp\u003eAfter introducing the JNI workflow and how JNI works with data, Minborg provided multiple code examples and discussed their corresponding problems.\u003c/p\u003e\n\n\u003cp\u003eMinborg then introduced the \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/foreign/MemorySegment.html\"\u003eMemorySegment\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/foreign/MemoryLayout.html\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e interface and provided numerous code examples on how to access various memory layouts.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eVirtual Threads in the Real World: Fast, Robust Java Microservices with Helidon\u003c/strong\u003e, presented by \u003ca href=\"https://www.linkedin.com/in/joe-di-pol-60547a4/\"\u003eJoe Di Pol\u003c/a\u003e, Engineering Manager at Oracle, and \u003ca href=\"https://www.linkedin.com/in/romain-grecourt-a01853149/\"\u003eRomain Grecourt\u003c/a\u003e, Principal Member of Technical Staff at Oracle.\u003c/p\u003e\n\n\u003cp\u003eDi Pol kicked off his presentation with an introduction to JEP 444, \u003ca href=\"https://openjdk.org/jeps/444\"\u003eVirtual Threads\u003c/a\u003e, delivered in JDK 21 and under the auspices of \u003ca href=\"https://wiki.openjdk.org/display/loom/Main\"\u003eProject Loom\u003c/a\u003e. He defined virtual threads as \u0026#34;\u003cem\u003eJVM-managed lightweight threads that help in writing high throughput concurrent applications.\u003c/em\u003e\u0026#34; Virtual threads are scheduled onto platform threads via the \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/util/concurrent/ForkJoinPool.html\"\u003eForkJoinPool\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e class.\u003c/p\u003e\n\n\u003cp\u003eHelidon versions 1.x through 3.x supported a reactive web server based on Netty. However, with the release of Helidon 4.0 in October 2023, the web server, codenamed Helidon Níma, was completely rewritten using virtual threads.\u003c/p\u003e\n\n\u003cp\u003eDi Pol then provided a comprehensive introduction to Helidon and MicroProfile that included: a juxtaposition on reactive versus blocking with code snippets; virtual threads in Helidon 4.x; how they overcame the issue of virtual thread pinning; and lessons learned. The use of the \u003cstrong\u003e\u003ccode\u003esynchronized\u003c/code\u003e\u003c/strong\u003e keyword was the number one reason for pinning. This was resolved with JEP 491, \u003ca href=\"https://openjdk.org/jeps/491\"\u003eSynchronize Virtual Threads without Pinning\u003c/a\u003e, delivered in JDK 24.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eEngineering a Modern Java Platform: Making Kubernetes Work for Java Teams\u003c/strong\u003e, presented by \u003ca href=\"https://www.linkedin.com/in/smillidge/\"\u003eSteve Millidge\u003c/a\u003e, CEO at Payara.\u003c/p\u003e\n\n\u003cp\u003eMillidge kicked off his presentation with a retrospective on the 30 years of Java innovation. The language has significantly changed, but so has technology in terms of architecture, infrastructure, monoliths-to-microservices (and perhaps back again), and the deployment and management of applications. Millidge emphasized that we \u0026#34;\u003cem\u003eneed to keep existing Java apps up to date.\u003c/em\u003e\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eThe Java modernization landscape statistics include: 1000 applications used across a typical enterprise that increases 28% a year; 47% of Java applications need modernization; and 87% of Java application owners and technical leaders believe that modernizing Java applications is a higher priority than other projects.\u003c/p\u003e\n\n\u003cp\u003eMillidge explained how to modernize Java applications with goals of: adopting a new infrastructure and rearchitecting applications. Kubernetes can help in this area, but despite the many benefits, there are challenges especially when it comes to the manual handling of tasks such as: maintenance; the provision of nodes and pods; routing; and assigning SSL certificates.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePlatform Engineering\u003c/strong\u003e offers developer platforms to help teams develop, deploy and manage applications more efficiently with a focus on automation, self service and streamlined workflows. Platform engineering may be used to simplify manual handling of Kubernetes tasks.\u003c/p\u003e\n\n\u003cp\u003eMillidge introduced how platform engineering is practiced at Payara and the modernization benefits they have gained that include: compatibility with Java SE, Jakarta EE and other frameworks; and successful deployments with on-premise, cloud, multi-cloud and hybrid systems.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eThe Evolution of Enterprise Java with Jakarta EE 11 and Beyond\u003c/strong\u003e, presented by \u003ca href=\"https://se.linkedin.com/in/ivargrimstad\"\u003eIvar Grimstad\u003c/a\u003e, Jakarta EE Developer Advocate at the Eclipse Foundation.\u003c/p\u003e\n\n\u003cp\u003eGrimstad\u0026#39;s presentation was a retrospective of the past, present and future of Jakarta EE since its early days as J2EE and Java EE.\u003c/p\u003e\n\n\u003cp\u003eFor the \u003cstrong\u003epast\u003c/strong\u003e, Grimstad demonstrated the complexity of Enterprise Java Beans (EJB) and deploying \u003cstrong\u003e\u003ccode\u003eEAR\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003eWAR\u003c/code\u003e\u003c/strong\u003e files. Early efforts to ease some of this complexity was the addition of \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://jakarta.ee/specifications/enterprise-beans/4.0/apidocs/jakarta/ejb/stateless\"\u003e@Stateless\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e, a component-defining annotation for stateless session beans, introduced in EJB 3.0.\u003c/p\u003e\n\n\u003cp\u003eFor the \u003cstrong\u003epresent\u003c/strong\u003e, Grimstad provided a brief overview of Jakarta EE 9 and Jakarta EE 10 before primarily focusing on Jakarta EE 11 with details on what developers can expect with the 16 updated specifications. He introduced \u003ca href=\"https://jakarta.ee/specifications/data/1.0/\"\u003eJakarta Data 1.0\u003c/a\u003e, a new specification that will be included on the Jakarta EE Platform and Web Profile.\u003c/p\u003e\n\n\u003cp\u003eDemos included a Jakarta Data example and how to dynamically enable virtual threads in a JDK 21 application with the \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://jakarta.ee/specifications/concurrency/3.1/apidocs/jakarta.concurrency/jakarta/enterprise/concurrent/managedthreadfactorydefinition\"\u003e@ManagedThreadFactoryDefinition\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e annotation that supports the Java SE runtime aware feature.\u003c/p\u003e\n\n\u003cp\u003eFor the \u003cstrong\u003efuture\u003c/strong\u003e, Grimstad enumerated the specifications that have submitted plan reviews for Jakarta EE 12, namely: Jakarta Contexts and Dependency Injection 5.0, \u003ca href=\"https://jakarta.ee/specifications/data/1.1/\"\u003eJakarta Data 1.1\u003c/a\u003e, Jakarta Faces 5.0, Jakarta Pages 4.1, and Jakarta Web Socket 2.3.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://jakarta.ee/specifications/nosql/1.0/\"\u003eJakarta NoSQL 1.0\u003c/a\u003e and \u003ca href=\"https://jakarta.ee/specifications/mvc/3.0/\"\u003eJakarta MVC 3.0\u003c/a\u003e specifications are candidates to be included in Jakarta EE 12.\u003c/p\u003e\n\n\u003cp\u003eIdeas for new specifications include: Jakarta Query, Jakarta CRaC and Jakarta AI. There may also be an effort to replace Enterprise Java Beans.\u003c/p\u003e\n\n\u003ch4\u003eConclusion\u003c/h4\u003e\n\n\u003cp\u003eJavaOne 2025, a three-day event, consisting of keynotes, presentations and hands-on labs, is organized by \u003ca href=\"https://oracle.com\"\u003eOracle\u003c/a\u003e and the developer relations team. The \u003ca href=\"https://reg.rf.oracle.com/flow/oracle/javaone25/catalog/page/catalog\"\u003esession catalog\u003c/a\u003e provides all of the details and developers can watch the \u003ca href=\"https://youtu.be/HUE3FA7SHAM\"\u003eJava Next Livestream\u003c/a\u003e that takes a deep dive into Java\u0026#39;s ongoing development featuring Oracle experts such as: \u003ca href=\"https://www.linkedin.com/in/briangoetz/\"\u003eBrian Goetz\u003c/a\u003e, Architect for the Java Language; \u003ca href=\"https://inside.java/u/RonPressler/\"\u003eRon Pressler\u003c/a\u003e, Architect and Technical Lead for Project Loom; and \u003ca href=\"https://www.linkedin.com/in/paul-sandoz-4704562/\"\u003ePaul Sandoz\u003c/a\u003e, Java Architect.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Michael-Redlich\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMichael Redlich\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-03-26T00:00:00Z",
  "modifiedTime": null
}
