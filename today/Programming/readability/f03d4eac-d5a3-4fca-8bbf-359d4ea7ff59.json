{
  "id": "f03d4eac-d5a3-4fca-8bbf-359d4ea7ff59",
  "title": "Spring AI 1.0 Released, Streamlines AI Application Development with Broad Model Support",
  "link": "https://www.infoq.com/news/2025/05/spring-ai-1-0-streamlines-apps/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Introducing Spring AI 1.0: a groundbreaking framework that streamlines the creation of AI-driven applications in Java. Seamlessly integrate with top AI models for chat, image generation, and more. With portable abstractions and support for Retrieval Augmented Generation, developers can build scalable, production-ready solutions while adhering to Spring standards. Start innovating today! By A N M Bazlur Rahman",
  "author": "A N M Bazlur Rahman",
  "published": "Tue, 20 May 2025 12:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Spring AI",
    "Java",
    "Artificial Intelligence",
    "Spring Boot",
    "Development",
    "news"
  ],
  "byline": "A N M Bazlur Rahman",
  "length": 6453,
  "excerpt": "Introducing Spring AI 1.0: a groundbreaking framework that streamlines the creation of AI-driven applications in Java. Seamlessly integrate with top AI models for chat, image generation, and more. Wit",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250513062629/apple-touch-icon.png",
  "text": "The Spring team has announced the general availability of Spring AI 1.0, a framework designed to simplify the development of AI-driven applications within the Java and Spring ecosystem. This release, the result of over two years of development and eight milestone iterations, delivers a stable API. It integrates with a wide range of AI models for chat, image generation, and transcription. Key features include portable service abstractions, support for Retrieval Augmented Generation (RAG) via vector databases, and tools for function calling. Spring AI 1.0 enables developers to build scalable, production-ready AI applications by aligning with established Spring patterns and the broader Spring ecosystem. Spring AI provides out-of-the-box support for numerous AI models and providers. The framework integrates with major generative AI providers, including OpenAI, Anthropic, Microsoft Azure OpenAI, Amazon Bedrock, and Google Vertex AI, through a unified API layer. It supports various model types across modalities, including chat completion, embedding, image generation, audio transcription, text-to-speech synthesis, and content moderation. This enables developers to integrate capabilities such as GPT-based chatbots, image creation, or speech recognition into Spring applications. The framework offers portable service abstractions, decoupling application code from specific AI providers. Its API facilitates switching between model providers (e.g., from OpenAI to Anthropic) with minimal code changes, while retaining access to model-specific features. Spring AI supports structured outputs by mapping AI model responses to Plain Old Java Objects (POJOs) for type-safe processing. For Retrieval Augmented Generation (RAG), Spring AI integrates with various vector databases, including Cassandra, PostgreSQL/PGVector, MongoDB Atlas, Milvus, Pinecone, and Redis, through a consistent Vector Store API, enabling applications to ground LLM responses in enterprise data. The framework also includes support for tools and function calling APIs, allowing AI models to invoke functions or external tools in a standardized manner to address use cases like \"Q\u0026A over your documentation\" or \"chat with your data.\" Spring AI 1.0 includes support for the Model Context Protocol (MCP), an emerging open standard for structured, language-agnostic interaction between AI models (particularly LLMs) and external tools or resources. The Spring team has contributed its MCP implementation to ModelContextProtocol.io, where it serves as an official Java SDK for MCP services. This reflects Spring AI's focus on open standards and interoperability. To facilitate MCP integration, Spring AI provides dedicated client and server Spring Boot starters, enabling models to interact with tools like this example weather service: import org.springframework.ai.tool.annotation.Tool; import org.springframework.stereotype.Component; @Component public class WeatherTool { @Tool(name = \"getWeather\", description = \"Returns weather for a given city\") public String getWeather(String city) { return \"The weather in \" + city + \" is 21°C and sunny.\"; } } These starters are categorized as follows: Client Starters: spring-ai-starter-mcp-client (providing core STDIO and HTTP-based SSE support) and spring-ai-starter-mcp-client-webflux (offering WebFlux-based SSE transport for reactive applications). Server Starters: spring-ai-starter-mcp-server (for core STDIO transport support), spring-ai-starter-mcp-server-webmvc (for Spring MVC-based SSE transport in servlet applications), and spring-ai-starter-mcp-server-webflux (for WebFlux-based SSE transport in reactive applications). Developers can begin new Spring AI 1.0 projects using Spring Initializr, which preconfigures necessary dependencies. Including the desired Spring AI starter on the classpath allows Spring Boot to auto-configure the required clients or services. An example of a simple chat controller is as follows: import org.springframework.ai.chat.client.ChatClient; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; @RestController public class ChatController { private final ChatClient chatClient; public ChatController(ChatClient.Builder chatClientBuilder) { this.chatClient = chatClientBuilder.build(); } @GetMapping(\"/ask\") public String ask(@RequestParam String question) { return chatClient.prompt() .user(question) .call() .content(); } } At a minimum, the following key-value in application.properties is necessary to run the above example. spring.ai.openai.api-key=YOUR_API_KEY spring.ai.openai.chat.model=gpt-4 Spring AI introduces higher-level APIs for common AI application patterns. A fluent ChatClient API offers a type-safe builder for chat model interactions. Additionally, an Advisors API encapsulates recurring generative AI patterns such as retrieval augmentation, conversational memory, and question-answering workflows. For instance, a RAG flow can be implemented by combining ChatClient with QuestionAnswerAdvisor: ChatResponse response = ChatClient.builder(chatModel) .build() .prompt() .advisors(new QuestionAnswerAdvisor(vectorStore)) .user(userText) .call() .chatResponse(); In this example, QuestionAnswerAdvisor performs a similarity search in the VectorStore, appends relevant context to the user prompt, and forwards the enriched input to the model. An optional SearchRequest with an SQL-like filter can constrain document searches. The release incorporates Micrometer for observability, allowing developers to monitor AI-driven applications. These integrations facilitate embedding AI capabilities into Spring-based projects for various applications, including real-time chat, image processing, and transcription services. For more information, developers can explore the Spring AI project page or begin building with Spring AI at start.spring.io. This release provides Java developers with a solution for integrating AI capabilities, offering features for scalability and alignment with idiomatic Spring development. About the Author A N M Bazlur Rahman",
  "image": "https://res.infoq.com/news/2025/05/spring-ai-1-0-streamlines-apps/en/headerimage/generatedHeaderImage-1747641099077.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eThe Spring team has announced the general availability of \u003cstrong\u003eSpring AI 1.0\u003c/strong\u003e, a framework designed to simplify the development of AI-driven applications within the Java and Spring ecosystem. This release, the result of over two years of development and eight milestone iterations, delivers a stable API. It integrates with a wide range of AI models for chat, image generation, and transcription. Key features include portable service abstractions, support for Retrieval Augmented Generation (RAG) via vector databases, and tools for function calling. Spring AI 1.0 enables developers to build scalable, production-ready AI applications by aligning with established Spring patterns and the broader Spring ecosystem.\u003c/p\u003e\n\n\u003cp\u003eSpring AI provides out-of-the-box support for numerous \u003ca href=\"https://docs.spring.io/spring-ai/reference/api/index.html\"\u003eAI models and providers\u003c/a\u003e. The framework integrates with major generative AI providers, including OpenAI, Anthropic, Microsoft Azure OpenAI, Amazon Bedrock, and Google Vertex AI, through a unified API layer. It supports various model types across modalities, including \u003ca href=\"https://docs.spring.io/spring-ai/reference/api/chatmodel.html\"\u003echat completion\u003c/a\u003e, \u003ca href=\"https://docs.spring.io/spring-ai/reference/api/embeddings.html\"\u003eembedding\u003c/a\u003e, \u003ca href=\"https://docs.spring.io/spring-ai/reference/api/imageclient.html\"\u003eimage generation\u003c/a\u003e, \u003ca href=\"https://docs.spring.io/spring-ai/reference/api/audio/transcriptions.html\"\u003eaudio transcription\u003c/a\u003e, \u003ca href=\"https://docs.spring.io/spring-ai/reference/api/audio/speech.html\"\u003etext-to-speech synthesis\u003c/a\u003e, and content \u003ca href=\"https://docs.spring.io/spring-ai/reference/api/moderation/openai-moderation.html\"\u003emoderation\u003c/a\u003e. This enables developers to integrate capabilities such as GPT-based chatbots, image creation, or speech recognition into Spring applications.\u003c/p\u003e\n\n\u003cp\u003eThe framework offers portable service abstractions, decoupling application code from specific AI providers. Its API facilitates switching between model providers (e.g., from OpenAI to Anthropic) with minimal code changes, while retaining access to model-specific features. Spring AI supports structured outputs by mapping AI model responses to Plain Old Java Objects (POJOs) for type-safe processing. For Retrieval Augmented Generation (RAG), Spring AI integrates with various \u003ca href=\"https://docs.spring.io/spring-ai/reference/api/vectordbs.html\"\u003evector databases\u003c/a\u003e, including Cassandra, PostgreSQL/PGVector, MongoDB Atlas, Milvus, Pinecone, and Redis, through a consistent Vector Store API, enabling applications to ground LLM responses in enterprise data. The framework also includes support for \u003ca href=\"https://docs.spring.io/spring-ai/reference/api/tools.html\"\u003etools and function calling APIs\u003c/a\u003e, allowing AI models to invoke functions or external tools in a standardized manner to address use cases like \u0026#34;Q\u0026amp;A over your documentation\u0026#34; or \u0026#34;chat with your data.\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eSpring AI 1.0 includes support for the \u003ca href=\"https://www.anthropic.com/news/model-context-protocol\"\u003eModel Context Protocol (MCP)\u003c/a\u003e, an emerging open standard for structured, language-agnostic interaction between AI models (particularly LLMs) and external tools or resources. The Spring team has contributed its MCP implementation to \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://www.infoq.com/news/2025/05/spring-ai-1-0-streamlines-apps/ModelContextProtocol.io\"\u003eModelContextProtocol.io\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e, where it serves as an official Java SDK for MCP services. This reflects Spring AI\u0026#39;s focus on open standards and interoperability.\u003c/p\u003e\n\n\u003cp\u003eTo facilitate MCP integration, Spring AI provides dedicated client and server Spring Boot starters, enabling models to interact with tools like this example weather service:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class WeatherTool {\n\n   @Tool(name = \u0026#34;getWeather\u0026#34;, description = \u0026#34;Returns weather for a given city\u0026#34;)\n   public String getWeather(String city) {\n       return \u0026#34;The weather in \u0026#34; + city + \u0026#34; is 21°C and sunny.\u0026#34;;\n   }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThese starters are categorized as follows:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eClient Starters: \u003cstrong\u003e\u003ccode\u003espring-ai-starter-mcp-client\u003c/code\u003e\u003c/strong\u003e (providing core STDIO and HTTP-based SSE support) and \u003cstrong\u003e\u003ccode\u003espring-ai-starter-mcp-client-webflux\u003c/code\u003e\u003c/strong\u003e (offering WebFlux-based SSE transport for reactive applications).\u003c/li\u003e\n\t\u003cli\u003eServer Starters: \u003cstrong\u003e\u003ccode\u003espring-ai-starter-mcp-server\u003c/code\u003e\u003c/strong\u003e (for core STDIO transport support), \u003cstrong\u003e\u003ccode\u003espring-ai-starter-mcp-server-webmvc\u003c/code\u003e\u003c/strong\u003e (for Spring MVC-based SSE transport in servlet applications), and \u003cstrong\u003e\u003ccode\u003espring-ai-starter-mcp-server-webflux\u003c/code\u003e\u003c/strong\u003e (for WebFlux-based SSE transport in reactive applications).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDevelopers can begin new Spring AI 1.0 projects using \u003ca href=\"https://start.spring.io/\"\u003eSpring Initializr\u003c/a\u003e, which preconfigures necessary dependencies. Including the desired Spring AI starter on the classpath allows Spring Boot to auto-configure the required clients or services.\u003c/p\u003e\n\n\u003cp\u003eAn example of a simple chat controller is as follows:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class ChatController {\n\n   private final ChatClient chatClient;\n\n   public ChatController(ChatClient.Builder chatClientBuilder) {\n       this.chatClient = chatClientBuilder.build();\n   }\n\n   @GetMapping(\u0026#34;/ask\u0026#34;)\n   public String ask(@RequestParam String question) {\n       return chatClient.prompt()\n               .user(question)\n               .call()\n               .content();\n   }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAt a minimum, the following key-value in \u003ccode\u003e\u003cstrong\u003eapplication.properties\u003c/strong\u003e\u003c/code\u003e is necessary to run the above example.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003espring.ai.openai.api-key=YOUR_API_KEY\nspring.ai.openai.chat.model=gpt-4\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSpring AI introduces higher-level APIs for common AI application patterns. A fluent \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.spring.io/spring-ai/reference/api/chatclient.html\"\u003eChatClient\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e API offers a type-safe builder for chat model interactions. Additionally, an \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.spring.io/spring-ai/reference/api/advisors.html\"\u003eAdvisors\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e API encapsulates recurring generative AI patterns such as retrieval augmentation, conversational memory, and question-answering workflows. For instance, a RAG flow can be implemented by combining \u003cstrong\u003e\u003ccode\u003eChatClient\u003c/code\u003e\u003c/strong\u003e with \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.spring.io/spring-ai/reference/api/retrieval-augmented-generation.html#_questionansweradvisor\"\u003eQuestionAnswerAdvisor\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eChatResponse response = ChatClient.builder(chatModel)\n        .build()\n        .prompt()\n        .advisors(new QuestionAnswerAdvisor(vectorStore))\n        .user(userText)\n        .call()\n        .chatResponse();\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this example, \u003cstrong\u003e\u003ccode\u003eQuestionAnswerAdvisor\u003c/code\u003e\u003c/strong\u003e performs a \u003ca href=\"https://www.pinecone.io/learn/what-is-similarity-search/\"\u003esimilarity search\u003c/a\u003e in the \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html#_vectorstore\"\u003eVectorStore\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e, appends relevant context to the user prompt, and forwards the enriched input to the model. An optional \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://docs.spring.io/spring-ai/reference/api/retrieval-augmented-generation.html#_dynamic_filter_expressions\"\u003eSearchRequest\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e with an SQL-like filter can constrain document searches.\u003c/p\u003e\n\n\u003cp\u003eThe release incorporates \u003ca href=\"https://micrometer.io/\"\u003eMicrometer\u003c/a\u003e for observability, allowing developers to monitor AI-driven applications. These integrations facilitate embedding AI capabilities into Spring-based projects for various applications, including real-time chat, image processing, and transcription services.\u003c/p\u003e\n\n\u003cp\u003eFor more information, developers can explore the\u003ca href=\"https://spring.io/projects/spring-ai\"\u003e Spring AI project page\u003c/a\u003e or begin building with Spring AI at \u003cstrong\u003e\u003ccode\u003e\u003ca href=\"https://www.infoq.com/news/2025/05/spring-ai-1-0-streamlines-apps/start.spring.io\"\u003estart.spring.io\u003c/a\u003e\u003c/code\u003e\u003c/strong\u003e. This release provides Java developers with a solution for integrating AI capabilities, offering features for scalability and alignment with idiomatic Spring development.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-A-N-M-Bazlur-Rahman\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eA N M Bazlur Rahman\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-05-20T00:00:00Z",
  "modifiedTime": null
}
