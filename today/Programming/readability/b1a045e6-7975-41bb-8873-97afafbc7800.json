{
  "id": "b1a045e6-7975-41bb-8873-97afafbc7800",
  "title": "Animations: Bringing the Host Passport to Life on iOS",
  "link": "https://medium.com/airbnb-engineering/animations-bringing-the-host-passport-to-life-on-ios-72856aea68a7?source=rss----53c7c27702d5---4",
  "description": "",
  "author": "Anne Lu",
  "published": "Tue, 07 May 2024 17:15:23 GMT",
  "source": "https://medium.com/feed/airbnb-engineering",
  "categories": [
    "engineering",
    "technology",
    "mobile",
    "ios",
    "ios-app-development"
  ],
  "byline": "Anne Lu",
  "length": 12401,
  "excerpt": "In May 2023 we introduced the Host Passport as part of our Summer Release. We wanted to give Hosts a way to introduce themselves, and start building a more personal connection with their guests. To…",
  "siteName": "The Airbnb Tech Blog",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "How Airbnb enabled hosts and guests to connect and introduce themselves through the Host Passport.By: Anne LuIntroductionIn May 2023 we introduced the Host Passport as part of our Summer Release. We wanted to give Hosts a way to introduce themselves, and start building a more personal connection with their guests. To that end, we created the Host Passport, which appears in the bottom corner of each Private Room listing result with a photo of the Host on the cover. Guests can tap it to fully open the Host Passport and learn more about the Host and get a sense for the real live person they would be staying with.The Passport animationThe Host Passport offers Hosts a way to introduce themselves and set guest expectations, and allows guests to quickly start discovering who they could be sharing a space with.Delivering this animation with high pixel accuracy, fluidity, high performance, and a spark of delight led us to encounter and solve many novel technical issues unique to each client platform that we support. While the Host Passport appears in the web, Android, and iOS apps, this article focuses specifically on the iOS implementation.Implementing the Host Passport on iOSWhile we’ve almost entirely switched over to SwiftUI when it comes to building new components and screens in our app, we opted to use UIKit for the passport animation. We did this for a couple of reasons. Firstly, at the time of this writing, SwiftUI does not have APIs supporting custom transitions and navigation patterns, so our screen navigation and transition layer remains in UIKit. And secondly, while keyframe timing was introduced for SwiftUI animations with iOS 17, our version support extended back to iOS 15 at the time of release.UIKit provides a ready-to-use framework that enables the development of smooth, polished animations. Combined with our in-house declarative transition framework, we were starting with a solid foundation that we could leverage to create complex animations. The work lay in bridging the gap between established patterns and our novel requirements; while we were already experienced in creating delightful two-dimensional animations, three-dimensional animation was uncharted territory.The complexity of this animation lies in its many moving parts. The challenge lies not in animating single properties, but rather coordinating many for a cohesive effect that is not only functional, but also delightful.The PassportThe anchor pointThe anchor point is a property of a view’s bounds, defaulting to the relative [0.5, 0.5], or exact center. Rotation animations rotate around this anchor point, so by default, views rotate around their midpoints, which gives a card rotating effect rather than a page flipping one.A rounded rectangle rotating around a center anchor pointTo achieve the desired page rotation, we faced a dilemma with the anchor point. Shifting the anchor point to [0, 0.5] in the coordinate space could accomplish the page turning effect by shifting it to the view’s leading side, but that approach had the potential to disrupt other aspects of the animation — this is because the anchor point is used not only as the basis for rotation, but for other transforms, such as scaling and translation. Altering the anchor point for three-dimensional rotation has a knock-on effect on these other transforms, causing unexpected side effects we would then have to work around.With this in mind, we used an alternative approach: instead of directly manipulating the anchor point, we created transparent views where the visible content occupied only half of the space. As the rotation occurs, the view seemingly rotates around the left edge, while still leveraging the default center point for the actual rotation.With this, we are able to animate our book page rotation without introducing complications to the other transforms. See the example below, where there is a border added around the entire view, including the transparent part, to show its actual size.A rounded rectangle with a red half and a transparent half rotating around a center anchor pointPage compositionWith the rotation solved, we next had to think about how to compose the view to look like a book. We ended up accomplishing that effect by using a compound view. At a basic level, the booklet is composed of a front page and two inside pages. That meant we needed three separate views:A view that rotates like a folding page with View 1 (front), View 2 (inner left) and View 3 (inner right)By stitching them together, we create the Passport booklet.To create the impression of a page flip, we needed to employ another trick; while real life pages have a front and a back, the same is not true of a view. Therefore, in order to make it look like a page turning, we timed it so that during the page turn, the front view is swapped for the back view at the exact point when the page is completely orthogonal to the viewer’s perspective. This creates the illusion of a front and a back. Et voila!A rotating rounded rectangle that changes from blue to red when it is perpendicular to the screenIntegrating with our Animation FrameworkAt this point, we had a passport booklet with the ability to flip open in three dimensions.In order to accomplish the next step in the animation we needed to integrate our book animation with our declarative animation framework, which handled transitioning the animating passport from the listing results view onto the modal view. Our animation framework allows us to perform a shared element transition, where a view animates seamlessly between two separate screens, in just a few lines of code.First, we created a transition definition that describes the type of animation we wanted:let passportTransition: TransitionDefinition = [ SharedElementIdentifiers.Passport.passport(listingId): .sharedElement]Next, we attached these identifiers to the source view (the passport in the listing search results) and the destination (the open passport card in the context sheet.) We set the transition definition on the modal presentation, and from there, the framework created the animation that moved our passport view from its starting location in the listing results to its final location in the modal.Under typical circumstances, our framework captures a “snapshot” of the view by rendering it as a static image. The snapshot is then animated from the initial position to the final position, while the original source and destination views are hidden during the animation. This allows us to play the animation of the view moving from one place to another in a performant way while keeping the view hierarchy intact.In our case, however, a static snapshot didn’t have the functionality we needed, which was the ability to play the page flip animation alongside the shared element transition. Therefore, we created a custom snapshot that we used in place of the default static snapshot. This custom snapshot was a copy of the view that did have animation capabilities, that we then triggered to play alongside the animated transition so that they would be perfectly in sync. Enter UIViewPropertyAnimator: a class that allows us to define animation blocks and dynamically control their playback. It provides the flexibility to start, stop, or modify animations in real-time.It neatly encapsulated our animations within a single object, which could then be passed along to our animation framework. As our framework handled the screen to screen transition, it triggered the custom animation to play in sync with that transition.TimingIt isn’t only where a view moves that determines realism, but also very importantly when. The passport opens in the span of a moment, but the simple elegance belies the complexity underneath.On a closer look, our animation consists of many synchronized individual animations. The passport grows in size, moves along the x and y axis, rotates its pages in 3D space, and shadows move to simulate light and movement. To get things just right, we use a separate timing curve for each property.But we need even more specificity than that; our design calls for these to start and stop at different points along the animation duration. For that, we time specific events to relative points within the timing curve via keyframes. To expand on our earlier example, here is our animator with keyframes set.let animator = UIViewPropertyAnimator(duration: 2.0, curve: .easeInOut) { // Enable keyframe animations, inheriting the duration of the // parent property animator UIView.animateKeyframes(withDuration: 0, delay: 0) { // At the start of the animation, translate the view 100 pixels downwards UIView.addKeyframe(withRelativeStartTime: 0, relativeDuration: 0.5) { cardView.transform = CGAffineTransform(translationX: 0, y: 100) } // At the halfway point, flip the color to coincide with the turning // point of our view. UIView.addKeyframe(withRelativeStartTime: 0.5, relativeDuration: 0) { cardView.backgroundColor = .red } // Return to original position UIView.addKeyframe(withRelativeStartTime: 0.5, relativeDuration: 0.5) { cardView.transform = .identity } }}animator.startAnimation()Next, let’s take a closer look at spring timings and their unique characteristics. When creating animations, we have the option of different types of easing functions for a naturalistic feel.Easing functions like linear and cubic are common timing curves, as depicted in the graphs below. They give us the ability to specify the speed of our animation over time.LinearFor a more advanced timing, we have the option to use springs. Spring functions are grounded in principles from real-life physics, giving animations a realistic sense of elasticity and bounce.SpringHowever, unlike linear and cubic functions, the end time of a spring animation is not always clear-cut. Spring timings have a long tail in which the oscillations gradually diminish in size, while theoretically never reaching rest. Practically speaking, this means that animations using spring timings can have extended durations, which can make them feel less responsive.Additionally, our spring timing had to be tuned to work with the overall transition animation timing. As mentioned above, our animation framework uses a snapshot during the animated transition before switching the snapshot for the destination view at the conclusion of the animation. This means that the snapshot and the destination view must be in the same position at the time of the switch, to ensure a seamless changeover.Below is an example of a mismatch in sync: on the left, the passport snaps into its final position at the last moment, whereas on the right it moves smoothly to its final destination.Switching over too early resulted in the jump; switching over too late made the animation feel sluggish. The timing had to balance these considerations: the timing had to achieve the right feel, while landing in the right place at the end of the modal transition.To this end, we tuned the springs extensively so that at the conclusion of the modal opening animation, the X and Y coordinates of the Passport animation aligned perfectly at the cutoff, despite the long tail of the spring curve technically extending beyond the transition duration.ConclusionAnd there we have it! Like any magic trick, a lot of behind-the-scenes effort goes into making things look and feel effortless.Now that we have these new insights, we’re looking forward to bringing even more delightful animations to our applications in the future. If you share our excitement and are interested in contributing to this or other projects, we invite you to explore the career opportunities available at our careers page.We hope you found this exploration of the iOS implementation of the Host Passport insightful. To learn more about the declarative transition framework that powers advanced transitions like this throughout Airbnb’s iOS app, you can read our previous post: “Motion Engineering at Scale”.AcknowledgmentsThanks to:Cal StephensMatthew CheokAlejandro ErvitiJulian AdamsSergii RudenkoCarol LeungJeduan CornejoMarjorie Kasten****************All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*BmPtSglh_yBHzCxIn_0c_g.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca rel=\"noopener follow\" href=\"https://medium.com/@anne_lu?source=post_page-----72856aea68a7--------------------------------\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Anne Lu\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*84n7WcSoTuTFlmgsz3YuBQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://medium.com/airbnb-engineering?source=post_page-----72856aea68a7--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"The Airbnb Tech Blog\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*MlNQKg-sieBGW5prWoe9HQ.jpeg\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cp id=\"9042\"\u003eHow Airbnb enabled hosts and guests to connect and introduce themselves through the Host Passport.\u003c/p\u003e\u003cp id=\"a404\"\u003e\u003cstrong\u003eBy:\u003c/strong\u003e \u003ca href=\"https://www.linkedin.com/in/annelu1/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAnne Lu\u003c/a\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"080c\"\u003eIntroduction\u003c/h2\u003e\u003cp id=\"944f\"\u003eIn May 2023 we introduced the Host Passport as part of our \u003ca href=\"https://www.airbnb.com/release/2023-summer\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSummer Release\u003c/a\u003e. We wanted to give Hosts a way to introduce themselves, and start building a more personal connection with their guests. To that end, we created the Host Passport, which appears in the bottom corner of each Private Room listing result with a photo of the Host on the cover. Guests can tap it to fully open the Host Passport and learn more about the Host and get a sense for the real live person they would be staying with.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe Passport animation\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"44a6\"\u003eThe Host Passport offers Hosts a way to introduce themselves and set guest expectations, and allows guests to quickly start discovering who they could be sharing a space with.\u003c/p\u003e\u003cp id=\"c6a3\"\u003eDelivering this animation with high pixel accuracy, fluidity, high performance, and a spark of delight led us to encounter and solve many novel technical issues unique to each client platform that we support. While the Host Passport appears in the web, Android, and iOS apps, this article focuses specifically on the iOS implementation.\u003c/p\u003e\u003ch2 id=\"96c8\"\u003eImplementing the Host Passport on iOS\u003c/h2\u003e\u003cp id=\"1a8e\"\u003eWhile we’ve almost entirely \u003ca rel=\"noopener\" href=\"https://medium.com/airbnb-engineering/unlocking-swiftui-at-airbnb-ea58f50cde49\"\u003eswitched over to SwiftUI\u003c/a\u003e when it comes to building new components and screens in our app, we opted to use UIKit for the passport animation. We did this for a couple of reasons. Firstly, at the time of this writing, SwiftUI does not have APIs supporting custom transitions and navigation patterns, so our screen navigation and transition layer remains in UIKit. And secondly, while \u003ca href=\"https://developer.apple.com/documentation/swiftui/keyframes\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ekeyframe timing\u003c/a\u003e was introduced for SwiftUI animations with iOS 17, our version support extended back to iOS 15 at the time of release.\u003c/p\u003e\u003cp id=\"4996\"\u003eUIKit provides a ready-to-use \u003ca href=\"https://developer.apple.com/documentation/uikit/animation_and_haptics\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eframework\u003c/a\u003e that enables the development of smooth, polished animations. Combined with our \u003ca rel=\"noopener\" href=\"https://medium.com/airbnb-engineering/motion-engineering-at-scale-5ffabfc878\"\u003ein-house\u003c/a\u003e declarative transition framework, we were starting with a solid foundation that we could leverage to create complex animations. The work lay in bridging the gap between established patterns and our novel requirements; while we were already experienced in creating delightful two-dimensional animations, three-dimensional animation was uncharted territory.\u003c/p\u003e\u003cp id=\"7415\"\u003eThe complexity of this animation lies in its many moving parts. The challenge lies not in animating single properties, but rather coordinating many for a cohesive effect that is not only functional, but also delightful.\u003c/p\u003e\u003ch2 id=\"1869\"\u003eThe Passport\u003c/h2\u003e\u003ch2 id=\"b7ff\"\u003eThe anchor point\u003c/h2\u003e\u003cp id=\"c7b0\"\u003eThe \u003ca href=\"https://developer.apple.com/documentation/uikit/uiview/4051982-anchorpoint\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eanchor point\u003c/a\u003e is a property of a view’s bounds, defaulting to the relative [0.5, 0.5], or exact center. \u003ca href=\"https://developer.apple.com/documentation/quartzcore/1436524-catransform3drotate\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eRotation animations\u003c/a\u003e rotate around this anchor point, so by default, views rotate around their midpoints, which gives a card rotating effect rather than a page flipping one.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA rounded rectangle rotating around a center anchor point\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"e0cb\"\u003eTo achieve the desired page rotation, we faced a dilemma with the anchor point. Shifting the anchor point to [0, 0.5] in the coordinate space could accomplish the page turning effect by shifting it to the view’s leading side, but that approach had the potential to disrupt other aspects of the animation — this is because the anchor point is used not only as the basis for rotation, but for other transforms, such as scaling and translation. Altering the anchor point for three-dimensional rotation has a knock-on effect on these other transforms, causing unexpected side effects we would then have to work around.\u003c/p\u003e\u003cp id=\"0453\"\u003eWith this in mind, we used an alternative approach: instead of directly manipulating the anchor point, we created transparent views where the visible content occupied only half of the space. As the rotation occurs, the view seemingly rotates around the left edge, while still leveraging the default center point for the actual rotation.\u003c/p\u003e\u003cp id=\"a456\"\u003eWith this, we are able to animate our book page rotation without introducing complications to the other transforms. See the example below, where there is a border added around the entire view, including the transparent part, to show its actual size.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA rounded rectangle with a red half and a transparent half rotating around a center anchor point\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"07a4\"\u003ePage composition\u003c/h2\u003e\u003cp id=\"5b20\"\u003eWith the rotation solved, we next had to think about how to compose the view to look like a book. We ended up accomplishing that effect by using a compound view. At a basic level, the booklet is composed of a front page and two inside pages. That meant we needed three separate views:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA view that rotates like a folding page with View 1 (front), View 2 (inner left) and View 3 (inner right)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"9327\"\u003eBy stitching them together, we create the Passport booklet.\u003c/p\u003e\u003cp id=\"9008\"\u003eTo create the impression of a page flip, we needed to employ another trick; while real life pages have a front and a back, the same is not true of a view. Therefore, in order to make it \u003cem\u003elook\u003c/em\u003e like a page turning, we timed it so that during the page turn, the front view is swapped for the back view at the exact point when the page is completely orthogonal to the viewer’s perspective. This creates the illusion of a front and a back. Et voila!\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA rotating rounded rectangle that changes from blue to red when it is perpendicular to the screen\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"a92b\"\u003eIntegrating with our Animation Framework\u003c/h2\u003e\u003cp id=\"1f1d\"\u003eAt this point, we had a passport booklet with the ability to flip open in three dimensions.\u003c/p\u003e\u003cp id=\"77b1\"\u003eIn order to accomplish the next step in the animation we needed to integrate our book animation with our \u003ca rel=\"noopener\" href=\"https://medium.com/airbnb-engineering/motion-engineering-at-scale-5ffabfc878\"\u003edeclarative animation framework\u003c/a\u003e, which handled transitioning the animating passport from the listing results view onto the modal view. Our animation framework allows us to perform a shared element transition, where a view animates seamlessly between two separate screens, in just a few lines of code.\u003c/p\u003e\u003cp id=\"c572\"\u003eFirst, we created a transition definition that describes the type of animation we wanted:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0dcc\"\u003elet passportTransition: TransitionDefinition = [\u003cbr/\u003e  SharedElementIdentifiers.Passport.passport(listingId): .sharedElement\u003cbr/\u003e]\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"f827\"\u003eNext, we attached these identifiers to the source view (the passport in the listing search results) and the destination (the open passport card in the context sheet.) We set the transition definition on the modal presentation, and from there, the framework created the animation that moved our passport view from its starting location in the listing results to its final location in the modal.\u003c/p\u003e\u003cp id=\"1736\"\u003eUnder typical circumstances, our framework captures a “snapshot” of the view by rendering it as a static image. The snapshot is then animated from the initial position to the final position, while the original source and destination views are hidden during the animation. This allows us to play the animation of the view moving from one place to another in a performant way while keeping the view hierarchy intact.\u003c/p\u003e\u003cp id=\"7691\"\u003eIn our case, however, a static snapshot didn’t have the functionality we needed, which was the ability to play the page flip animation alongside the shared element transition. Therefore, we created a custom snapshot that we used in place of the default static snapshot. This custom snapshot was a copy of the view that did have animation capabilities, that we then triggered to play alongside the animated transition so that they would be perfectly in sync. Enter \u003ca href=\"https://developer.apple.com/documentation/uikit/uiviewpropertyanimator\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUIViewPropertyAnimator\u003c/a\u003e: a class that allows us to define animation blocks and dynamically control their playback. It provides the flexibility to start, stop, or modify animations in real-time.\u003c/p\u003e\u003cp id=\"6f0c\"\u003eIt neatly encapsulated our animations within a single object, which could then be passed along to our animation framework. As our framework handled the screen to screen transition, it triggered the custom animation to play in sync with that transition.\u003c/p\u003e\u003ch2 id=\"b0f0\"\u003eTiming\u003c/h2\u003e\u003cp id=\"a925\"\u003eIt isn’t only \u003cem\u003ewhere\u003c/em\u003e a view moves that determines realism, but also very importantly \u003cem\u003ewhen\u003c/em\u003e. The passport opens in the span of a moment, but the simple elegance belies the complexity underneath.\u003c/p\u003e\u003cp id=\"da13\"\u003eOn a closer look, our animation consists of many synchronized individual animations. The passport grows in size, moves along the x and y axis, rotates its pages in 3D space, and shadows move to simulate light and movement. To get things just right, we use a separate timing curve for each property.\u003c/p\u003e\u003cp id=\"8013\"\u003eBut we need even more specificity than that; our design calls for these to start and stop at different points along the animation duration. For that, we time specific events to relative points within the timing curve via keyframes. To expand on our earlier example, here is our animator with keyframes set.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3486\"\u003elet animator = UIViewPropertyAnimator(duration: 2.0, curve: .easeInOut) {\u003cp\u003e  // Enable keyframe animations, inheriting the duration of the \u003cbr/\u003e  // parent property animator\u003cbr/\u003e  UIView.animateKeyframes(withDuration: 0, delay: 0) {\u003c/p\u003e\u003cp\u003e    // At the start of the animation, translate the view 100 pixels downwards\u003cbr/\u003e    UIView.addKeyframe(withRelativeStartTime: 0, relativeDuration: 0.5) {\u003cbr/\u003e      cardView.transform = CGAffineTransform(translationX: 0, y: 100)\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    // At the halfway point, flip the color to coincide with the turning\u003cbr/\u003e    // point of our view.\u003cbr/\u003e    UIView.addKeyframe(withRelativeStartTime: 0.5, relativeDuration: 0) {\u003cbr/\u003e      cardView.backgroundColor = .red\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    // Return to original position\u003cbr/\u003e    UIView.addKeyframe(withRelativeStartTime: 0.5, relativeDuration: 0.5) {\u003cbr/\u003e      cardView.transform = .identity\u003cbr/\u003e    }\u003cbr/\u003e  }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003eanimator.startAnimation()\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"eb26\"\u003eNext, let’s take a closer look at spring timings and their unique characteristics. When creating animations, we have the option of different types of easing functions for a naturalistic feel.\u003c/p\u003e\u003cp id=\"8912\"\u003eEasing functions like linear and cubic are common timing curves, as depicted in the graphs below. They give us the ability to specify the speed of our animation over time.\u003c/p\u003e\u003cp id=\"7faf\"\u003eLinear\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"3d41\"\u003eFor a more advanced timing, we have the option to use springs. Spring functions are grounded in principles from real-life physics, giving animations a realistic sense of elasticity and bounce.\u003c/p\u003e\u003cp id=\"9a36\"\u003eSpring\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"5ea2\"\u003eHowever, unlike linear and cubic functions, the end time of a spring animation is not always clear-cut. Spring timings have a long tail in which the oscillations gradually diminish in size, while theoretically never reaching rest. Practically speaking, this means that animations using spring timings can have extended durations, which can make them feel less responsive.\u003c/p\u003e\u003cp id=\"7b09\"\u003eAdditionally, our spring timing had to be tuned to work with the overall transition animation timing. As mentioned above, our animation framework uses a snapshot during the animated transition before switching the snapshot for the destination view at the conclusion of the animation. This means that the snapshot and the destination view must be in the same position at the time of the switch, to ensure a seamless changeover.\u003c/p\u003e\u003cp id=\"1b68\"\u003eBelow is an example of a mismatch in sync: on the left, the passport snaps into its final position at the last moment, whereas on the right it moves smoothly to its final destination.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"47e2\"\u003eSwitching over too early resulted in the jump; switching over too late made the animation feel sluggish. The timing had to balance these considerations: the timing had to achieve the right feel, while landing in the right place at the end of the modal transition.\u003c/p\u003e\u003cp id=\"367c\"\u003eTo this end, we tuned the springs extensively so that at the conclusion of the modal opening animation, the X and Y coordinates of the Passport animation aligned perfectly at the cutoff, despite the long tail of the spring curve technically extending beyond the transition duration.\u003c/p\u003e\u003ch2 id=\"fdaa\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"6b19\"\u003eAnd there we have it! Like any magic trick, a lot of behind-the-scenes effort goes into making things look and feel effortless.\u003c/p\u003e\u003cp id=\"cca0\"\u003eNow that we have these new insights, we’re looking forward to bringing even more delightful animations to our applications in the future. If you share our excitement and are interested in contributing to this or other projects, we invite you to explore the career opportunities available at \u003ca href=\"https://careers.airbnb.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eour careers page\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"e826\"\u003eWe hope you found this exploration of the iOS implementation of the Host Passport insightful. To learn more about the declarative transition framework that powers advanced transitions like this throughout Airbnb’s iOS app, you can read our previous post: “\u003ca rel=\"noopener\" href=\"https://medium.com/airbnb-engineering/motion-engineering-at-scale-5ffabfc878\"\u003eMotion Engineering at Scale\u003c/a\u003e”.\u003c/p\u003e\u003ch2 id=\"c821\"\u003eAcknowledgments\u003c/h2\u003e\u003cp id=\"4af9\"\u003eThanks to:\u003c/p\u003e\u003cul\u003e\u003cli id=\"45a0\"\u003eCal Stephens\u003c/li\u003e\u003cli id=\"40ba\"\u003eMatthew Cheok\u003c/li\u003e\u003cli id=\"f10f\"\u003eAlejandro Erviti\u003c/li\u003e\u003cli id=\"ecbc\"\u003eJulian Adams\u003c/li\u003e\u003cli id=\"88ff\"\u003eSergii Rudenko\u003c/li\u003e\u003cli id=\"fdf4\"\u003eCarol Leung\u003c/li\u003e\u003cli id=\"acc9\"\u003eJeduan Cornejo\u003c/li\u003e\u003cli id=\"4f51\"\u003eMarjorie Kasten\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"c847\"\u003e****************\u003c/h2\u003e\u003cp id=\"6819\"\u003e\u003cem\u003eAll product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2024-05-07T17:15:23.258Z",
  "modifiedTime": null
}
