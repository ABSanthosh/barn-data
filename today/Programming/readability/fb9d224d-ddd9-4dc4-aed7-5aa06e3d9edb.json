{
  "id": "fb9d224d-ddd9-4dc4-aed7-5aa06e3d9edb",
  "title": "AWS CDK Toolkit Library Now GA for Automated Infrastructure Management",
  "link": "https://www.infoq.com/news/2025/06/aws-cdk-toolkit-library/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "AWS has recently announced the general availability of the CDK Toolkit Library. This new Node.js library allows developers to programmatically control the CDK to build additional automation around the CDK, exposing classes and methods to synthesize, deploy, and destroy stacks, among other capabilities. By Renato Losio",
  "author": "Renato Losio",
  "published": "Sat, 14 Jun 2025 06:08:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "AWS",
    "Cloud",
    "Infrastructure as Code",
    "CloudFormation",
    "TypeScript",
    "Development",
    "DevOps",
    "news"
  ],
  "byline": "Renato Losio",
  "length": 3438,
  "excerpt": "AWS has recently announced the general availability of the CDK Toolkit Library. This new Node.js library allows developers to programmatically control the CDK to build additional automation around the",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250605075544/apple-touch-icon.png",
  "text": "AWS has recently announced the general availability of the CDK Toolkit Library. This new Node.js library allows developers to programmatically control the CDK to build additional automation around the CDK, exposing classes and methods to synthesize, deploy, and destroy stacks, among other capabilities. The CDK Toolkit Library enables developers to perform CDK actions programmatically through code, rather than relying on CLI commands. Currently supported only in TypeScript, the library can be used to create custom tools, build specialized CLI applications, and integrate CDK capabilities into existing development workflows. Adam Keller, senior cloud architect at AWS, explains the main goal of the project: Until now, the primary way to interact with the AWS CDK was through the CDK CLI, which presented challenges when building automation around the CDK as users couldn’t directly interact with the CDK toolkit natively in their code. According to the documentation, the CDK Toolkit Library is suited for advanced infrastructure deployments, including automation within CI/CD pipelines, the creation of custom validation or approval steps, and the implementation of patterns across multiple environments. The AWS CDK is an open-source framework that enables the definition of cloud infrastructure in code and its subsequent provisioning through AWS CloudFormation. It includes two main components: a class library for modeling infrastructure and a toolkit that provides either a command-line interface or a programmatic library to operate on those models. The new Node.js library provides programmatic interfaces for the following six CDK actions: Synthesis, to generate CloudFormation templates and deployment artifacts; Deployment, to provision or update infrastructure; List, to view information about stacks and their dependencies; Watch, to monitor CDK applications for local changes; Rollback, to return stacks to their latest stable state; and Destroy, to remove stacks and associated resources. Keller adds: The AWS CDK Toolkit Library opens up a whole new range of possibilities for platform engineers and developers who need finer grained control over how and when their infrastructure is deployed and tested. Among the example scenarios provided, AWS highlights the automatic validation of application logic, maintaining ephemeral environments for integration or end-to-end testing, and cleaning up resources immediately after test completion to reduce cloud costs and configuration drift. Ran Isenberg, principal software architect at CyberArk and AWS Hero, comments: While it's a step in the right direction, I don't think it replaces the deploy script we wrote to every stack. We have so many options that the CDK toolkit will not support, as it's too specific to our needs and configurations. More details are available on GitHub, including options to report bugs, provide feedback, share ideas, and request new features. The community has suggested exposing additional classes and functionalities, such as EnvironmentAccess, as potential future enhancements. The CDK Toolkit Library is available in all regions where the AWS CDK is supported. A getting-started page provides instructions on how to install, configure, and customize the library. About the Author Renato Losio",
  "image": "https://res.infoq.com/news/2025/06/aws-cdk-toolkit-library/en/headerimage/generatedHeaderImage-1748933637201.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAWS has recently announced the \u003ca href=\"https://aws.amazon.com/about-aws/whats-new/2025/05/aws-cdk-toolkit-library-available/\"\u003egeneral availability of the CDK Toolkit Library\u003c/a\u003e. This new Node.js library allows developers to programmatically control the CDK to build additional automation around the CDK, exposing classes and methods to synthesize, deploy, and destroy stacks, among other capabilities.\u003c/p\u003e\n\n\u003cp\u003eThe CDK Toolkit Library enables developers to perform CDK actions programmatically through code, rather than relying on CLI commands. Currently supported only in TypeScript, the library can be used to create custom tools, build specialized CLI applications, and integrate CDK capabilities into existing development workflows. \u003ca href=\"https://www.linkedin.com/in/adamkeller/\"\u003eAdam Keller\u003c/a\u003e, senior cloud architect at AWS, \u003ca href=\"https://community.aws/content/2wm6TNpUlPMVgcvXVySywxWaO7T/build-custom-cli-s-deployment-automation-and-more-with-the-aws-cdk-toolkit-library\"\u003eexplains the main goal of the project\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eUntil now, the primary way to interact with the AWS CDK was through the CDK CLI, which presented challenges when building automation around the CDK as users couldn’t directly interact with the CDK toolkit natively in their code.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAccording to the \u003ca href=\"https://docs.aws.amazon.com/cdk/v2/guide/toolkit-library.html\"\u003edocumentation\u003c/a\u003e, the CDK Toolkit Library is suited for advanced infrastructure deployments, including automation within CI/CD pipelines, the creation of custom validation or approval steps, and the implementation of patterns across multiple environments.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://docs.aws.amazon.com/cdk/v2/guide/home.html\"\u003eAWS CDK\u003c/a\u003e is an open-source framework that enables the definition of cloud infrastructure in code and its subsequent provisioning through AWS CloudFormation. It includes two main components: a class library for modeling infrastructure and a toolkit that provides either a command-line interface or a programmatic library to operate on those models.\u003c/p\u003e\n\n\u003cp\u003eThe new Node.js library provides programmatic interfaces for the following six CDK actions: Synthesis, to generate CloudFormation templates and deployment artifacts; Deployment, to provision or update infrastructure; List, to view information about stacks and their dependencies; Watch, to monitor CDK applications for local changes; Rollback, to return stacks to their latest stable state; and Destroy, to remove stacks and associated resources. Keller adds:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe AWS CDK Toolkit Library opens up a whole new range of possibilities for platform engineers and developers who need finer grained control over how and when their infrastructure is deployed and tested.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAmong the example scenarios provided, AWS highlights the automatic validation of application logic, maintaining ephemeral environments for integration or end-to-end testing, and cleaning up resources immediately after test completion to reduce cloud costs and configuration drift. Ran Isenberg, principal software architect at CyberArk and AWS Hero, \u003ca href=\"https://www.linkedin.com/feed/update/urn:li:activity:7334291285882658816?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7334291285882658816%2C7334652471803297792%29\u0026amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287334652471803297792%2Curn%3Ali%3Aactivity%3A7334291285882658816%29\"\u003ecomments\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhile it\u0026#39;s a step in the right direction, I don\u0026#39;t think it replaces the deploy script we wrote to every stack. We have so many options that the CDK toolkit will not support, as it\u0026#39;s too specific to our needs and configurations.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eMore details are available on \u003ca href=\"https://github.com/aws/aws-cdk-cli/issues/155\"\u003eGitHub\u003c/a\u003e, including options to report bugs, provide feedback, share ideas, and request new features. The community has suggested \u003ca href=\"https://github.com/aws/aws-cdk-cli/issues/561\"\u003eexposing additional classes and functionalities\u003c/a\u003e, such as EnvironmentAccess, as potential future enhancements.\u003c/p\u003e\n\n\u003cp\u003eThe CDK Toolkit Library is available in all regions where the AWS CDK is supported. A \u003ca href=\"https://docs.aws.amazon.com/cdk/v2/guide/toolkit-library-gs.html\"\u003egetting-started page\u003c/a\u003e provides instructions on how to install, configure, and customize the library.\u003c/p\u003e\n\n\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Renato-Losio\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eRenato Losio\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-06-14T00:00:00Z",
  "modifiedTime": null
}
