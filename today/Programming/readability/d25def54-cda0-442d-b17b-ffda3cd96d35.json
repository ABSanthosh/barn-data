{
  "id": "d25def54-cda0-442d-b17b-ffda3cd96d35",
  "title": "5 tips and tricks when using GitHub Copilot Workspace",
  "link": "https://github.blog/ai-and-ml/github-copilot/5-tips-and-tricks-when-using-github-copilot-workspace/",
  "description": "GitHub Next launched the technical preview for GitHub Copilot Workspace in April 2024. Since then, we’ve been listening to the community, learning, and have some tips to share on how to get the most out of it! The post 5 tips and tricks when using GitHub Copilot Workspace appeared first on The GitHub Blog.",
  "author": "Chris Reddington",
  "published": "Wed, 09 Oct 2024 16:00:44 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "AI",
    "artificial intelligence",
    "GitHub Copilot Workspace"
  ],
  "byline": "Chris Reddington, Cole Bemis",
  "length": 9858,
  "excerpt": "GitHub Next launched the technical preview for GitHub Copilot Workspace in April 2024. Since then, we’ve been listening to the community, learning, and have some tips to share on how to get the most out of it!",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Can you believe it has already been five months since we announced the technical preview of GitHub Copilot Workspace? Throughout that time, the GitHub Next team has been listening and learning from the community and steadily iterating on it. For those joining us at GitHub Universe, we will be talking about GitHub Next’s journey to create Copilot Workspace, along with some valuable concepts and learnings gleaned along the way. But while we put the finishing touches on our talk, we wanted to share a few tips and tricks that we have picked up, both from ourselves and from the amazing community of developers using Copilot Workspace every day. Before we get started, let’s briefly recap Copilot Workspace and how it works. What is Copilot Workspace, and how does it work? Copilot Workspace is a Copilot-native dev environment designed to help you complete everyday coding tasks. From GitHub, you can open a GitHub issue, pull request, template repository, or an ad-hoc task in Copilot Workspace and start working on the problem. Once you’ve started a session, you work with Copilot Workspace to iterate through a set of stages to solve your problem. These include: Spec/Brainstorming (Optional): You can use Copilot Workspace as a thought partner by asking questions about how your codebase currently works and to explore ideas on how to solve your task. Plan: Copilot Workspace figures out which files it must alter, and exactly what it must accomplish in each file in order to complete the task. These are completely editable, allowing you to add, edit, and remove steps or file adjustments. Implementation: Once you have iterated through these stages, Copilot Workspace will stream coding suggestions into the environment. You can use the built-in terminal or a codespace to verify the changes before you create a pull request to merge your changes back into your codebase. You can keep iterating and bouncing between the stages as you need, re-prompting Copilot Workspace or regenerating suggestions. Once you have landed on an idea, you can raise a pull request, create a new branch, or in some cases, create a new repository. Now that we’ve learned the foundations, what tips have we gathered from the team and the community on how to get the most out of Copilot Workspace? Tip 1: Be specific about what “done” means, and provide additional context A crisply defined goal is important whether you’re working with a colleague or with GitHub Copilot. The more clearly you can articulate what “done” looks like for a task, the more likely you are to get a result that meets those conditions. AI is better at handling natural language than any other software in history, but ambiguity is still the number one path to poor results. Working with AI can sometimes feel like a slot machine—it’s not always clear how to coax reliably good results from the tools. Supplying clear goals and context not only improves the quality of results, it also makes those positive results happen consistently. In fact, this is a similar tip that we’ve published before when working with GitHub Copilot in general! So, what does that mean in practice for Copilot Workspace? When you’re writing your task (such as a GitHub Issue), write some bullet points that capture your criteria for success. It doesn’t need to be fancy or long! Here’s an example of an issue that gives Copilot Workspace clear context and goals. If you know specific files, classes, components, or directories that need to be changed, include them in your task description. That kind of detail is fantastic context for guiding Copilot Workspace towards a solution. But you’re not just limited to specifying filenames or classes. Copilot Workspace was recently updated with the ability to pull information when you reference URLs such as issues, pull requests, and repository files. It can even take context from public URLs (such as docs) that might provide additional instructions to help with what you’re trying to accomplish. Overall, the more context you can provide to Copilot Workspace, the more likely you will get a result closer to your expectations. So, if you have information about style guides, coding guidelines for unit tests, or any other relevant documentation, try linking to that in your task! Tip 2: Decompose into smaller tasks Kudos to Willem from our Discord community who wrote a post which included this one. It’s also similar to another tip that we’ve published before when working with GitHub Copilot. When you have a larger task, the desired state may not be easy to articulate. Consider breaking the task down into smaller parts so it’s easier to define success for the task. This also aligns with practices we’re used to as developers, such as one commit for one change. Tip 3: Iteratively review and refine Copilot Workspace has been designed with a number of principles in mind (If you want to learn about those, then you should check out our talk at GitHub Universe!). One of those principles is allowing users to steer Copilot Workspace, so that you can iterate over ideas and edit the returned suggestions. Therefore, it’s important to consider Copilot Workspace’s suggestions as a first attempt or a first draft. Revisions are a core part of making that interaction succeed. With that mental model, you begin using Copilot Workspace as a tool to iterate on ideas and potential solutions, helping to bootstrap a first attempt at a solution. What does this mean in practice? When you launch a Copilot Workspace session, review the topic and make sure that Copilot Workspace is focused on solving the right problem. If not, then edit it! Copilot Workspace is designed to be steered at every step. Each stage is deliberately editable so that you can adjust course as needed. If the spec or plan doesn’t look quite right, then edit them, or regenerate them by editing an earlier step. Iterate until you have something closer to your expectations. And remember, you can undo those suggestions and return to a previous state if needed. If you ask another developer for a solution, you probably wouldn’t expect a perfect answer on their first attempt. It might take a bit of time, iteration, and rephrasing of questions to get what you need, whether you’re working with a colleague or working with Copilot! Tip 4: You can edit code directly Once you’ve been through the iteration process with Copilot Workspace, you may have some code that looks good but needs some minor tweaks. Remember that you can edit the code directly in the Copilot Workspace editor (or even in a codespace). At some point, it might make more sense to make those changes directly rather than asking Copilot Workspace by revising the task, spec, or plan. Additionally, you can use Copilot’s ghost text capabilities within the environment, as well as other language services, to help you make those changes! Tip 5: Build, test, and run inside Copilot Workspace And finally, many of us are used to the inner loop of development. This is the idea that when we write code, we check that it still passes any builds and tests locally before we raise a pull request to run it through a more rigorous set of checks in our continuous integration (CI) process and have it peer reviewed. You can (and should) run builds and tests within Copilot Workspace as well! You can use the built-in terminal, and terminal assist capabilities to help you fix any errors or issues. That way, you can validate your changes within Copilot Workspaces and keep iterating until you meet a certain level of quality before proceeding through your full CI process. Wrap-up We’ve learned a lot from our community throughout the Copilot Workspace technical preview, and we hope that these tips help as you continue to explore and experiment! If you want to learn more about GitHub Copilot Workspace, be sure to check out our session at GitHub Universe, join GitHub Next’s Discord Community and of course, sign up to the waitlist for the preview! Tags: AI artificial intelligence GitHub Copilot GitHub Copilot Workspace Written by Chris is a passionate developer advocate and senior program manager in GitHub’s Developer Relations team. He works with execs, engineering leads, and teams from the smallest of startups, established enterprises, open source communities and individual developers, helping them ❤️ GitHub and unlock their software engineering potential. Cole Bemis is a research engineer on the GitHub Next team, exploring innovative tools and technologies that push the boundaries of software engineering. Related posts What’s new with GitHub Copilot: July 2024 To enhance your coding experience, AI tools should excel at saving you time with repetitive, administrative tasks, while providing accurate solutions to assist developers. Today, we’re spotlighting three updates designed to increase efficiency and boost developer creativity. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more GitHub Universe 2024 Get tickets to the 10th anniversary of our global developer event on AI, DevEx, and security. Get tickets",
  "image": "https://github.blog/wp-content/uploads/2024/09/copilot-header-1.png?fit=1200%2C630",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eCan you believe it has already been five months since we \u003ca href=\"https://github.blog/news-insights/product-news/github-copilot-workspace/\"\u003eannounced the technical preview of GitHub Copilot Workspace\u003c/a\u003e? Throughout that time, the GitHub Next team has been listening and learning from the community and steadily iterating on it.\u003c/p\u003e\n\u003cp\u003eFor those joining us at GitHub Universe, we will be talking about GitHub Next’s journey to create Copilot Workspace, along with some valuable concepts and learnings gleaned along the way. But while we put the finishing touches on our talk, we wanted to share a few tips and tricks that we have picked up, both from ourselves and from the amazing community of developers using Copilot Workspace every day.\u003c/p\u003e\n\u003cp\u003eBefore we get started, let’s briefly recap Copilot Workspace and how it works.\u003c/p\u003e\n\u003ch2 id=\"what-is-copilot-workspace-and-how-does-it-work\"\u003eWhat is Copilot Workspace, and how does it work?\u003ca href=\"#what-is-copilot-workspace-and-how-does-it-work\" aria-label=\"What is Copilot Workspace, and how does it work?\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCopilot Workspace is a Copilot-native dev environment designed to help you complete everyday coding tasks. From GitHub, you can open a GitHub issue, pull request, template repository, or an ad-hoc task in Copilot Workspace and start working on the problem.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/L5Xny6yehUg?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\n\u003cp\u003eOnce you’ve started a session, you work with Copilot Workspace to iterate through a set of stages to solve your problem. These include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSpec/Brainstorming (Optional):\u003c/strong\u003e You can use Copilot Workspace as a thought partner by asking questions about how your codebase currently works and to explore ideas on how to solve your task. \u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePlan:\u003c/strong\u003e Copilot Workspace figures out which files it must alter, and exactly what it must accomplish in each file in order to complete the task. These are completely editable, allowing you to add, edit, and remove steps or file adjustments.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImplementation:\u003c/strong\u003e Once you have iterated through these stages, Copilot Workspace will stream coding suggestions into the environment. You can use the built-in terminal or a codespace to verify the changes before you create a pull request to merge your changes back into your codebase.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can keep iterating and bouncing between the stages as you need, re-prompting Copilot Workspace or regenerating suggestions. Once you have landed on an idea, you can raise a pull request, create a new branch, or in some cases, create a new repository.\u003c/p\u003e\n\n\u003cp\u003eNow that we’ve learned the foundations, what tips have we gathered from the team and the community on how to get the most out of Copilot Workspace?\u003c/p\u003e\n\u003ch2 id=\"tip-1-be-specific-about-what-done-means-and-provide-additional-context\"\u003eTip 1: Be specific about what “done” means, and provide additional context\u003ca href=\"#tip-1-be-specific-about-what-done-means-and-provide-additional-context\" aria-label=\"Tip 1: Be specific about what “done” means, and provide additional context\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eA crisply defined goal is important whether you’re working with a colleague or with GitHub Copilot. The more clearly you can articulate what “done” looks like for a task, the more likely you are to get a result that meets those conditions. AI is better at handling natural language than any other software in history, but ambiguity is still the number one path to poor results.\u003c/p\u003e\n\u003cp\u003eWorking with AI can sometimes feel like a slot machine—it’s not always clear how to coax \u003cem\u003ereliably\u003c/em\u003e good results from the tools. Supplying clear goals and context not only improves the quality of results, it also makes those positive results happen consistently. In fact, this is a similar \u003ca href=\"https://github.blog/developer-skills/github/how-to-write-better-prompts-for-github-copilot/\"\u003etip that we’ve published before\u003c/a\u003e when working with GitHub Copilot in general!\u003c/p\u003e\n\u003cp\u003eSo, what does that mean in practice for Copilot Workspace? When you’re writing your task (such as a GitHub Issue), write some bullet points that capture your criteria for success. It doesn’t need to be fancy or long! Here’s an example of an issue that gives Copilot Workspace clear context and goals.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/10/rust-example.png?w=1024\u0026amp;resize=1024%2C575\" alt=\"An example of a GitHub Issue that outlines the acceptance criteria for adding a rust example to a font playground. It describes the code playground andlists 3 bullet points of acceptance criteria, including expectations around syntax higlighting, representative code samples and specific package versions to use.\" width=\"1024\" height=\"575\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/10/rust-example.png?w=1600 1600w, https://github.blog/wp-content/uploads/2024/10/rust-example.png?w=300 300w, https://github.blog/wp-content/uploads/2024/10/rust-example.png?w=768 768w, https://github.blog/wp-content/uploads/2024/10/rust-example.png?w=1024 1024w, https://github.blog/wp-content/uploads/2024/10/rust-example.png?w=1536 1536w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eIf you know specific files, classes, components, or directories that need to be changed, include them in your task description. That kind of detail is fantastic context for guiding Copilot Workspace towards a solution. But you’re not just limited to specifying filenames or classes. Copilot Workspace was \u003ca href=\"https://github.com/githubnext/copilot-workspace-user-manual/blob/main/changes.md#-9-august-2024\"\u003erecently updated\u003c/a\u003e with the ability to pull information when you reference URLs such as issues, pull requests, and repository files. It can even take context from public URLs (such as docs) that might provide additional instructions to help with what you’re trying to accomplish.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/51VjY5zYCK0?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\u003cp\u003eOverall, the more context you can provide to Copilot Workspace, the more likely you will get a result closer to your expectations. So, if you have information about style guides, coding guidelines for unit tests, or any other relevant documentation, try linking to that in your task!\u003c/p\u003e\n\u003ch2 id=\"tip-2-decompose-into-smaller-tasks\"\u003eTip 2: Decompose into smaller tasks\u003ca href=\"#tip-2-decompose-into-smaller-tasks\" aria-label=\"Tip 2: Decompose into smaller tasks\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eKudos to Willem from our Discord community who \u003ca href=\"https://fizzylogic.nl/2024/08/03/development-reinvented-system-thinking-with-copilot-workspace\"\u003ewrote a post\u003c/a\u003e which included this one. It’s also similar to \u003ca href=\"https://github.blog/developer-skills/github/how-to-write-better-prompts-for-github-copilot/\"\u003eanother tip that we’ve published before\u003c/a\u003e when working with GitHub Copilot.\u003c/p\u003e\n\u003cp\u003eWhen you have a larger task, the desired state may not be easy to articulate. Consider breaking the task down into smaller parts so it’s easier to define success for the task. This also aligns with practices we’re used to as developers,  such as one commit for one change.\u003c/p\u003e\n\u003ch2 id=\"tip-3-iteratively-review-and-refine\"\u003eTip 3: Iteratively review and refine\u003ca href=\"#tip-3-iteratively-review-and-refine\" aria-label=\"Tip 3: Iteratively review and refine\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCopilot Workspace has been designed with a number of principles in mind (If you want to learn about those, then you should \u003ca href=\"https://reg.rainfocus.com/flow/github/universe24/attendee-portal/page/sessioncatalog/session/1714631103506001Ax5h\"\u003echeck out our talk at GitHub Universe\u003c/a\u003e!). One of those principles is allowing users to steer Copilot Workspace, so that you can iterate over ideas and edit the returned suggestions.\u003c/p\u003e\n\u003cp\u003eTherefore, it’s important to \u003cstrong\u003econsider Copilot Workspace’s suggestions as a first attempt or a first draft\u003c/strong\u003e. Revisions are a core part of making that interaction succeed. With that mental model, you begin using Copilot Workspace as a tool to iterate on ideas and potential solutions, helping to bootstrap a first attempt at a solution.\u003c/p\u003e\n\u003cp\u003eWhat does this mean in practice? When you launch a Copilot Workspace session, review the topic and make sure that Copilot Workspace is focused on solving the right problem. If not, then edit it!\u003c/p\u003e\n\u003cp\u003eCopilot Workspace is designed to be steered at every step. Each stage is deliberately editable so that you can adjust course as needed. If the spec or plan doesn’t look quite right, then edit them, or regenerate them by editing an earlier step. Iterate until you have something closer to your expectations. And remember, you can undo those suggestions and return to a previous state if needed.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/07tlKtkzpQI?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\u003cp\u003eIf you ask another developer for a solution, you probably wouldn’t expect a perfect answer on their first attempt. It might take a bit of time, iteration, and rephrasing of questions to get what you need, whether you’re working with a colleague or working with Copilot!\u003c/p\u003e\n\u003ch2 id=\"tip-4-you-can-edit-code-directly\"\u003eTip 4: You can edit code directly\u003ca href=\"#tip-4-you-can-edit-code-directly\" aria-label=\"Tip 4: You can edit code directly\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eOnce you’ve been through the iteration process with Copilot Workspace, you may have some code that looks good but needs some minor tweaks.\u003c/p\u003e\n\u003cp\u003eRemember that you can edit the code directly in the Copilot Workspace editor (or even in a codespace). At some point, it might make more sense to make those changes directly rather than asking Copilot Workspace by revising the task, spec, or plan.\u003c/p\u003e\n\u003cp\u003eAdditionally, you can use Copilot’s ghost text capabilities within the environment, as well as other language services, to help you make those changes!\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/tavP3AUqjK8?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\u003ch2 id=\"tip-5-build-test-and-run-inside-copilot-workspace\"\u003eTip 5: Build, test, and run inside Copilot Workspace\u003ca href=\"#tip-5-build-test-and-run-inside-copilot-workspace\" aria-label=\"Tip 5: Build, test, and run inside Copilot Workspace\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAnd finally, many of us are used to the inner loop of development. This is the idea that when we write code, we check that it still passes any builds and tests locally before we raise a pull request to run it through a more rigorous set of checks in our continuous integration (CI) process and have it peer reviewed.\u003c/p\u003e\n\u003cp\u003eYou can (and should) run builds and tests within Copilot Workspace as well! You can use the built-in terminal, and terminal assist capabilities to help you fix any errors or issues. That way, you can validate your changes within Copilot Workspaces and keep iterating until you meet a certain level of quality before proceeding through your full CI process.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/wQb2H__Xt6c?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\u003ch2 id=\"wrap-up\"\u003eWrap-up\u003ca href=\"#wrap-up\" aria-label=\"Wrap-up\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe’ve learned a lot from our community throughout the Copilot Workspace technical preview, and we hope that these tips help as you continue to explore and experiment!\u003c/p\u003e\n\u003cp\u003eIf you want to learn more about GitHub Copilot Workspace, be sure to \u003ca href=\"https://reg.githubuniverse.com/flow/github/universe24/attendee-portal/page/sessioncatalog/session/1714631103506001Ax5h\"\u003echeck out our session at GitHub Universe\u003c/a\u003e, join \u003ca href=\"https://gh.io/next-discord\"\u003eGitHub Next’s Discord Community\u003c/a\u003e and of course, \u003ca href=\"https://gh.io/copilot-workspace\"\u003esign up to the waitlist for the preview\u003c/a\u003e!\u003c/p\u003e\n\n\t\n\u003csection\u003e\n\t\u003chr/\u003e\n\t\u003cdiv\u003e\n\t\t\u003ch2\u003eTags:\u003c/h2\u003e\n\t\t\u003cul\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/ai/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tAI\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/artificial-intelligence/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tartificial intelligence\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/github-copilot/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tGitHub Copilot\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/github-copilot-workspace/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tGitHub Copilot Workspace\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\u003c/ul\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/791642?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/791642?v=4\u0026amp;s=200\" alt=\"Chris Reddington\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eChris is a passionate developer advocate and senior program manager in GitHub’s Developer Relations team. He works with execs, engineering leads, and teams from the smallest of startups, established enterprises, open source communities and individual developers, helping them ❤️ GitHub and unlock their software engineering potential.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/4608155?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/4608155?v=4\u0026amp;s=200\" alt=\"Cole Bemis\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eCole Bemis is a research engineer on the GitHub Next team, exploring innovative tools and technologies that push the boundaries of software engineering.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003csection\u003e\n\t\u003ch2\u003e\n\t\tRelated posts\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\u003carticle\u003e\n\t\n\u003c/article\u003e\n\u003carticle\u003e\n\t\n\u003c/article\u003e\n\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\n\t\t\t\t\u003ch3\u003e\n\t\t\t\u003ca href=\"https://github.blog/ai-and-ml/github-copilot/whats-new-with-github-copilot-july-2024/\" target=\"_self\"\u003e\n\t\t\t\tWhat’s new with GitHub Copilot: July 2024\t\t\t\u003c/a\u003e\n\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eTo enhance your coding experience, AI tools should excel at saving you time with repetitive, administrative tasks, while providing accurate solutions to assist developers. Today, we’re spotlighting three updates designed to increase efficiency and boost developer creativity. \u003c/p\u003e\n\t\t\n\t\u003c/div\u003e\n\u003c/article\u003e\n\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.blog/developer-skills/github/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"\u003e\u003cpath fill=\"currentColor\" d=\"M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z\"\u003e\u003c/path\u003e\u003cpath stroke=\"currentColor\" d=\"M1.75 8H11\" stroke-width=\"1.5\" stroke-linecap=\"round\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/04/Icon.svg\" width=\"44\" height=\"44\" alt=\"GitHub Universe 2024\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub Universe 2024\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eGet tickets to the 10th anniversary of our global developer event on AI, DevEx, and security.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get tickets; ref_location:bottom recirculation;\" href=\"https://githubuniverse.com/?utm_source=Blog\u0026amp;utm_medium=GitHub\u0026amp;utm_campaign=blog-module\" target=\"_blank\" aria-label=\"Get tickets\"\u003e\n\t\t\t\t\tGet tickets\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2024-10-09T16:00:44Z",
  "modifiedTime": "2024-10-09T15:02:44Z"
}
