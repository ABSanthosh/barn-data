{
  "id": "422e8367-fd78-4206-979a-0e4a08ab8c0f",
  "title": "A deep dive into building an agent framework for Salesforce",
  "link": "https://stackoverflow.blog/2025/05/28/a-deep-dive-into-building-an-agent-framework-for-salesforce/",
  "description": "We’re always trying to make it easy for users to pick out the information they need and gain insights into their processes, so a natural language interface seemed like a dream.",
  "author": "Rajdeep Dua",
  "published": "Wed, 28 May 2025 14:00:00 GMT",
  "source": "https://stackoverflow.blog/feed/",
  "categories": [
    "partner-content",
    "salesforce",
    "se-tech",
    "se-stackoverflow",
    "ai",
    "ai-agents"
  ],
  "byline": "Rajdeep Dua",
  "length": 10067,
  "excerpt": "Imagine if you could talk to your Salesforce database.",
  "siteName": "",
  "favicon": "https://stackoverflow.blog/apple-touch-icon.png",
  "text": "Imagine if you could talk to your Salesforce database.When we first heard about large language models (LLM), that’s where our heads went. A significant amount of business data resides within any given Salesforce instance, and the user interfaces to that data can be both information-rich and overwhelming. We’re always trying to make it easy for users to pick out the information they need and gain insights into their processes, so a natural language interface seemed like a dream.At first, it was. With the massive change around generative AI, we were in a unique position to make that dream a reality by providing a deep conversational experience. As we started building this experience on top of our existing Einstein AI platform, we realized we could go further and automate the process of gathering, transforming, and utilizing information within the Salesforce platform. That led to Agentforce: a suite of pre-built AI skills, topics, and actions that allow users to build and customize autonomous AI agentsThis article will talk about how Agentforce works, the tech we built in creating it, and how it supports various industry verticals. This is a huge step for our customers.Chat functionality for Salesforce was already available in multiple platforms like hyperscalers and boutique and open-source frameworks. In those stacks, data leaves the Salesforce trust boundary and exposes your valuable company information to a third party. We wanted all those interactions—the questions and the responses based on CRM data—to stay within our trust boundary.Enterprise systems and processes can be complex and they require detailed information to manage them. Salesforce has deep integration with these enterprise processes, but for a user to navigate to the right screen, they might require multiple screens and additional clicks. Customers have always wished for a faster way to find what they need without losing the context they’ve come to expect.Our initial foray into GenAI was a bot framework—a chat assistant and a Copilot-style helper. Einstein bots were well-defined conversational paths with user-defined intent detection and named entity recognition through traditional intent detection service. Einstein Bots used predefined rules and scripted responses to navigate conversations. They excel at following strict processes and adhering to brand messaging guidelines. But anything not scripted could not be handled.With Agentforce, we’re exposing processes and deep workflows that were built prior to the commoditization of genAI. We are providing tools like the Prompt Builder, Model Builder, and Agent Builder which help access and use data in, data cloud, and models built using predictive AI tools included in Einstein AI (Einstein on data cloud).When you ask Agentforce a question, it invokes the Atlas Reasoning Engine, which is the brain behind Agentforce and acts as an orchestrator for all actions. It tries to determine the user’s intent in using an LLM, then disambiguates the question into topics, which constitute individual jobs to be done. Those topics might have complicated instructions, business policies, and additional guardrails. To complete the job, Agentforce executes one or more invocable actions from our action framework. Actions are individual tasks like writing an email, querying a record, or summarizing a record.These topics provide a lot of the magic—they store natural language instructions that can be given to the LLM as context. With this context, the LLM can create and execute actions in a way that best addresses the request. Users can clarify their requests, which will then modify the context in the topic. Because the LLM here uses CoT reasoning, it can explain why it created each action, which reduces hallucinations and builds user trust in the agent.For the most part, users operate within Salesforce. The agents can be triggered by prompts from the user, data operations on CRM, or business processes and rules. But the agents don’t have to only use Salesforce tools. They can talk to our Data Cloud, which offers semantic search or retrieval-augmented generation (RAG), or an external data source through MuleSoft connectors or APIs. They can search the web or your organization’s internal knowledge bases. Through external connectors via MuleSoft, agents can access a vast number of systems and platforms.We know that our customers use Salesforce for a large number of use cases, which is an endless list. To cater to this vast business need, users can create their own actions using our Apex programming language. You can integrate with our inbuilt workflow engine (Flow) and trigger complicated workflows within Salesforce. You can deploy those workflows within APIs. And you can create custom UI elements to trigger and enable agentic flows.Trust is our number one value at Salesforce, so agents operate within the Einstein Trust Layer. This detects toxic prompts and responses and defends against prompt injection, among other features. Even with all of these guardrails, no LLM is 100% accurate and hallucination-free, so we include transferring the task to a human agent as another potential way to prevent unwarranted outcomes. Some processes are too business-critical to leave a human out of the loop.It’s a powerful system, and we’d like to give you a glimpse into how we built it.Moving from a chatbot to an orchestrated agent system required architecting an event-driven and asynchronous planner: the Atlas Reasoning Engine. We needed to build something scalable, maintainable, and extendable.Our agents needed three components:State: Our previous attempts lacked human-level performance because they remembered nothing about past interactions, user data, and relevant context. We would need to store them with the agent and provide this context to the LLMs that handled any requests.Flow: The steps and actions an agent would need to perform in order to complete the request.Side effects: These are lasting changes—filing tickets, updating fields—that would result from completing the actions in the flow.For LLMs to be able to spin up such agents, we needed a declarative method to create them. Creating custom code for each use case or defining rabbit holes of conditionals was too labor-intensive for the scale we were thinking.Our solution was to define agents through YAML files. Agents can specify what the agent does, what data it can access, the actions it can take, any guardrails to consider, and the domains and tools it operates within all without writing extensive code. New agents can be created just by creating a new YAML file with its actions and more. It’s as easy as adding an app to a smartphone. Actions are triggered through asynchronous events, which makes the whole system loosely coupled. In the multi-agent space, agents are also communicating with each other using events. These events could be a startEvent, stopEvent or input/output event.Example of a specific cognitive architecture with event-driven, graph-based workflow that allows concurrent processing of tasks by the Atlas Reasoning Engine.The underlying framework that manages and creates these agents and processes their workflows use both “System 1” and “System 2” thinking—thinking fast and slow, in the parlance of Daniel Kahnemann—and process data at inference time.Our agents have powerful reasoning abilities that let them parse a request into its constituent parts, ask for more information, adapt to changes, and bring in external data when needed. They can also be expensive to run.This team handles the interface between LLMs and other engineering teams at Salesforce. In order to eliminate our need to forecast traffic, we partnered with them to create Inference Components (IC) that allow a single model in its own container to scale dynamically based on traffic. Then, by hosting multiple models on the same endpoint and adjusting capacity as demand changes, we were able keep costs reasonable.For the overall architecture, we needed something that scaled well and could handle multiple processes at once. That led us to an event-driven architecture, where the Altas Reasoning Engine operates publish-subscribe queues for all agents and actions. By decoupling components and strongly typing functions, agents can operate concurrently and independently.We’ve seen strong results from this design—our early pilots showed response relevance doubled, while end-to-end accuracy in customer service applications increased by 33% over competitor or in-house DIY solutions.Most of our customers are operating in a vertical—an industry with its own ontology, business needs, and requirements. We’ve spent a lot of time trying to serve them by building deep processes that address these verticals. For those that need it, we offer additional data models, objects, and components. Some customers, however, opted to build their own pieces. Agentforce needed to integrate with this vertical data.With industry vertical solutions, Salesforce has provided domain-specific native data models and deep processes embedded into out-of-box offerings, which can either coexist with Sales and Service cloud or separately.Agentforce for industry specific use cases entails providing agents which are vertical aware through vertical-specific metadata, data models, and deep APIs or workflows, which are then exposed through actions to the orchestrator.We’re excited to see what our customers do with Agentforce now that it’s generally available. It’s a step up in productivity for users that will enable faster and smoother business processes without endlessly navigating tabs in search of the right piece of information.This is just the beginning for Agentforce; with more goodness planned across future releases.. We’re working on a testing and evaluation framework to simplify the process of creating your own agents. Look for multi-intent, multimodal, and multi-agent support as we continue to multiply your productivity.If you’re interested in building the next generation of AI agents with us, we're hiring!",
  "image": "https://cdn.stackoverflow.co/images/jo7n4k8s/production/bc39238cdb9001542b00d80864ad16add71a84a9-12000x6293.jpg?w=1200\u0026fm=png\u0026auto=format",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\u003cp\u003eImagine if you could talk to your Salesforce database.\u003c/p\u003e\u003cp\u003eWhen we first heard about large language models (LLM), that’s where our heads went. A significant amount of business data resides within any given Salesforce instance, and the user interfaces to that data can be both information-rich and overwhelming. We’re always trying to make it easy for users to pick out the information they need and gain insights into their processes, so a natural language interface seemed like a dream.\u003c/p\u003e\u003cp\u003eAt first, it was. With the massive change around generative AI, we were in a unique position to make that dream a reality by providing a deep conversational experience. As we started building this experience on top of our existing Einstein AI platform, we realized we could go further and automate the process of gathering, transforming, and utilizing information within the Salesforce platform. That led to Agentforce: a suite of pre-built AI skills, topics, and actions that allow users to build and customize autonomous AI agentsThis article will talk about how Agentforce works, the tech we built in creating it, and how it supports various industry verticals. This is a huge step for our customers.\u003c/p\u003e\u003cp\u003eChat functionality for Salesforce was already available in multiple platforms like hyperscalers and boutique and open-source frameworks. In those stacks, data leaves the Salesforce trust boundary and exposes your valuable company information to a third party. We wanted all those interactions—the questions and the responses based on CRM data—to stay within our trust boundary.\u003c/p\u003e\u003cp\u003eEnterprise systems and processes can be complex and they require detailed information to manage them. Salesforce has deep integration with these enterprise processes, but for a user to navigate to the right screen, they might require multiple screens and additional clicks. Customers have always wished for a faster way to find what they need without losing the context they’ve come to expect.\u003c/p\u003e\u003cp\u003eOur initial foray into GenAI was a bot framework—a chat assistant and a Copilot-style helper. Einstein bots were well-defined conversational paths with user-defined intent detection and named entity recognition through traditional intent detection service. Einstein Bots used predefined rules and scripted responses to navigate conversations. They excel at following strict processes and adhering to brand messaging guidelines. But anything not scripted could not be handled.\u003c/p\u003e\u003cp\u003eWith Agentforce, we’re exposing processes and deep workflows that were built prior to the commoditization of genAI. We are providing tools like the Prompt Builder, Model Builder, and Agent Builder which help access and use data in, data cloud, and models built using predictive AI tools included in Einstein AI (Einstein on data cloud).\u003c/p\u003e\u003cp\u003eWhen you ask Agentforce a question, it invokes the Atlas Reasoning Engine, which is the brain behind Agentforce and acts as an orchestrator for all actions. It tries to determine the user’s intent in using an LLM, then disambiguates the question into topics, which constitute individual jobs to be done. Those topics might have complicated instructions, business policies, and additional guardrails. To complete the job, Agentforce executes one or more invocable actions from our action framework. Actions are individual tasks like writing an email, querying a record, or summarizing a record.\u003c/p\u003e\u003cp\u003eThese topics provide a lot of the magic—they store natural language instructions that can be given to the LLM as context. With this context, the LLM can create and execute actions in a way that best addresses the request. Users can clarify their requests, which will then modify the context in the topic. Because the LLM here uses CoT reasoning, it can explain why it created each action, which reduces hallucinations and builds user trust in the agent.\u003c/p\u003e\u003cp\u003eFor the most part, users operate within Salesforce. The agents can be triggered by prompts from the user, data operations on CRM, or business processes and rules. But the agents don’t have to only use Salesforce tools. They can talk to our Data Cloud, which offers semantic search or retrieval-augmented generation (RAG), or an external data source through MuleSoft connectors or APIs. They can search the web or your organization’s internal knowledge bases. Through external connectors via MuleSoft, agents can access a vast number of systems and platforms.\u003c/p\u003e\u003cp\u003eWe know that our customers use Salesforce for a large number of use cases, which is an endless list. To cater to this vast business need, users can create their own actions using our Apex programming language. You can integrate with our inbuilt workflow engine (Flow) and trigger complicated workflows within Salesforce. You can deploy those workflows within APIs. And you can create custom UI elements to trigger and enable agentic flows.\u003c/p\u003e\u003cp\u003eTrust is our number one value at Salesforce, so agents operate within the Einstein Trust Layer. This detects toxic prompts and responses and defends against prompt injection, among other features. Even with all of these guardrails, no LLM is 100% accurate and hallucination-free, so we include transferring the task to a human agent as another potential way to prevent unwarranted outcomes. Some processes are too business-critical to leave a human out of the loop.\u003c/p\u003e\u003cp\u003eIt’s a powerful system, and we’d like to give you a glimpse into how we built it.\u003c/p\u003e\u003cp\u003eMoving from a chatbot to an orchestrated agent system required architecting an event-driven and asynchronous planner: the Atlas Reasoning Engine. We needed to build something scalable, maintainable, and extendable.\u003c/p\u003e\u003cp\u003eOur agents needed three components:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cstrong\u003eState\u003c/strong\u003e: Our previous attempts lacked human-level performance because they remembered nothing about past interactions, user data, and relevant context. We would need to store them with the agent and provide this context to the LLMs that handled any requests.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eFlow\u003c/strong\u003e: The steps and actions an agent would need to perform in order to complete the request.\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eSide effects\u003c/strong\u003e: These are lasting changes—filing tickets, updating fields—that would result from completing the actions in the flow.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFor LLMs to be able to spin up such agents, we needed a declarative method to create them. Creating custom code for each use case or defining rabbit holes of conditionals was too labor-intensive for the scale we were thinking.\u003c/p\u003e\u003cp\u003eOur solution was to define agents through YAML files. Agents can specify what the agent does, what data it can access, the actions it can take, any guardrails to consider, and the domains and tools it operates within all without writing extensive code. New agents can be created just by creating a new YAML file with its actions and more. It’s as easy as adding an app to a smartphone. Actions are triggered through asynchronous events, which makes the whole system loosely coupled. In the multi-agent space, agents are also communicating with each other using events. These events could be a startEvent, stopEvent or input/output event.\u003c/p\u003e\u003cfigure\u003e\u003cimg loading=\"lazy\" alt=\"A flowchart depicting the sequence of interconnected events and their dependencies. Starting with \u0026#34;StartEvent\u0026#34; (purple), the chart branches out into various events such as \u0026#34;GCalendarEvent,\u0026#34; \u0026#34;SalesforceEvent,\u0026#34; \u0026#34;OrchestratorEvent,\u0026#34; and \u0026#34;YoutubeReflectiveAgentEvent\u0026#34; (green). These link to processes like \u0026#34;general_search,\u0026#34; \u0026#34;emit_youtube_agent,\u0026#34; \u0026#34;emit_atlas22,\u0026#34; \u0026#34;emit_finance_swarm,\u0026#34; and so on (blue rectangles). The chain ends at \u0026#34;StopEvent\u0026#34; (orange), which connects to \u0026#34;_done\u0026#34; and \u0026#34;quality_evaluator.\u0026#34; Arrow directions indicate the flow of processes, illustrating how different inputs and agents interact within the system.\" src=\"https://cdn.stackoverflow.co/images/jo7n4k8s/production/9578e6bf9bee523b814efed110fea743f9de2c80-1023x648.jpg?auto=format\"/\u003e\u003cfigcaption\u003eExample of a specific cognitive architecture with event-driven, graph-based workflow that allows concurrent processing of tasks by the Atlas Reasoning Engine.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThe underlying framework that manages and creates these agents and processes their workflows use both “System 1” and “\u003ca href=\"https://www.sequoiacap.com/article/generative-ais-act-o1/\"\u003eSystem 2\u003c/a\u003e” thinking—thinking fast and slow, in the parlance of Daniel Kahnemann—and process data at inference time.\u003c/p\u003e\u003cp\u003eOur agents have powerful reasoning abilities that let them parse a request into its constituent parts, ask for more information, adapt to changes, and bring in external data when needed. They can also be expensive to run.\u003c/p\u003e\u003cp\u003eThis team handles the interface between LLMs and other engineering teams at Salesforce. In order to eliminate our need to forecast traffic, we partnered with them to create Inference Components (IC) that allow a single model in its own container to scale dynamically based on traffic. Then, by hosting multiple models on the same endpoint and adjusting capacity as demand changes, we were able keep costs reasonable.\u003c/p\u003e\u003cp\u003eFor the overall architecture, we needed something that scaled well and could handle multiple processes at once. That led us to an event-driven architecture, where the Altas Reasoning Engine operates publish-subscribe queues for all agents and actions. By decoupling components and strongly typing functions, agents can operate concurrently and independently.\u003c/p\u003e\u003cp\u003eWe’ve seen strong results from this design—our early pilots showed response relevance doubled, while end-to-end accuracy in customer service applications increased by 33% over competitor or in-house DIY solutions.\u003c/p\u003e\u003cp\u003eMost of our customers are operating in a vertical—an industry with its own ontology, business needs, and requirements. We’ve spent a lot of time trying to serve them by building deep processes that address these verticals. For those that need it, we offer additional data models, objects, and components. Some customers, however, opted to build their own pieces. Agentforce needed to integrate with this vertical data.\u003c/p\u003e\u003cp\u003eWith industry vertical solutions, Salesforce has provided domain-specific native data models and deep processes embedded into out-of-box offerings, which can either coexist with Sales and Service cloud or separately.\u003c/p\u003e\u003cp\u003eAgentforce for industry specific use cases entails providing agents which are vertical aware through vertical-specific metadata, data models, and deep APIs or workflows, which are then exposed through actions to the orchestrator.\u003c/p\u003e\u003cp\u003eWe’re excited to see what our customers do with Agentforce now that it’s generally available. It’s a step up in productivity for users that will enable faster and smoother business processes without endlessly navigating tabs in search of the right piece of information.\u003c/p\u003e\u003cp\u003eThis is just the beginning for Agentforce; with more goodness planned across future releases.. We’re working on a testing and evaluation framework to simplify the process of creating your own agents. Look for multi-intent, multimodal, and multi-agent support as we continue to multiply your productivity.\u003c/p\u003e\u003cp\u003eIf you’re interested in building the next generation of AI agents with us, \u003ca href=\"https://talent.salesforce.com/flows/fy26-q2-stack-overflow-display-campaign-ds727hexj\"\u003ewe\u0026#39;re hiring!\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
