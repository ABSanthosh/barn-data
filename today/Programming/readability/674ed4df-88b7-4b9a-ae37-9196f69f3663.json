{
  "id": "674ed4df-88b7-4b9a-ae37-9196f69f3663",
  "title": "Microsoft Releases Preview of AI Integration Libraries for .NET",
  "link": "https://www.infoq.com/news/2024/10/dotnet-ai-integration-libraries/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Last week, Microsoft announced the preview release of two libraries: Microsoft.Extensions.AI.Abstractions and Microsoft.Extensions.AI. These packages, referred to as Unified AI Building Blocks, provide the .NET ecosystem with essential abstractions for integrating artificial intelligence (AI) services into .NET applications and libraries, along with middleware to enhance key capabilities. By Almir Vuk",
  "author": "Almir Vuk",
  "published": "Fri, 18 Oct 2024 09:35:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    ".NET",
    "Azure",
    "Artificial Intelligence",
    ".NET Core",
    ".NET 8",
    ".NET 9",
    "Development",
    "news"
  ],
  "byline": "Almir Vuk",
  "length": 4209,
  "excerpt": "Last week, Microsoft announced the preview release of two libraries: Microsoft.Extensions.AI.Abstractions and Microsoft.Extensions.AI. These packages, referred to as Unified AI Building Blocks, provid",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20241001113644/apple-touch-icon.png",
  "text": "Last week, Microsoft announced the preview release of two libraries: Microsoft.Extensions.AI.Abstractions and Microsoft.Extensions.AI. These packages, referred to as Unified AI Building Blocks, provide the .NET ecosystem with essential abstractions for integrating artificial intelligence (AI) services into .NET applications and libraries, along with middleware to enhance key capabilities. As stated in the original announcement, it is developed in collaboration with the .NET community, including Semantic Kernel, these libraries offer a unified layer of C# abstractions. They encourage interaction with AI services such as small and large language models (SLMs and LLMs), embeddings, and middleware. In the official announcement, Microsoft stated: Currently, our focus is on creating abstractions that can be implemented by various services, all adhering to the same core concepts. We do not intend to release APIs tailored to any specific provider's services. Our goal is to act as a unifying layer within the .NET ecosystem, enabling developers to choose their preferred frameworks and libraries while ensuring seamless integration and collaboration across the ecosystem. (Microsoft.Extensions.AI Architecture Diagram, Source: Offical Microsoft DevBlog) Microsoft highlights several benefits, such as the libraries offering a unified API abstraction for AI services, similar to the company's logging and dependency injection abstractions as explained, the goal is to provide standard implementations for caching, telemetry, tool calling, and other common tasks that work with any provider, delivering consistent APIs and conventions. The libraries provide flexibility by allowing .NET authors to use AI services without being tied to a specific provider. They enhance ease of use by enabling developers to experiment with different packages using the same abstractions, maintaining a single API throughout applications. Componentization simplifies adding capabilities and testing. Furthermore, the preview release includes reference implementations for OpenAI, Azure AI Inference, and Ollama. Notably, Microsoft plans to collaborate with package authors across the .NET ecosystem to integrate these abstractions into client libraries, thus eliminating the need for additional packages. The company encourages developers who maintain .NET client libraries for AI services to implement these abstractions. Regarding the future, Microsoft states the intention to continue releasing the libraries in preview, expecting them to remain so through the .NET 9 release in November as they gather feedback. Near-term plans include collaborating with Semantic Kernel on integration, updating samples like eShop to use the libraries, and working with developers on adoption. Also, for the near future, the development team emphasizes the following: Work with everyone across the .NET ecosystem on the adoption of Microsoft.Extensions.AI. The more providers implement the abstractions, the more consumers use it, and the more middleware components are built, the more powerful all of the pieces become. Community feedback on the preview release has been generally positive, with developers expressing excitement and curiosity about the new libraries. Some have questioned the reasoning behind naming the namespace Microsoft.Extensions.AI and wondered if alternatives like Microsoft.Extensions.LLM was considered, given the focus on large language models. Others are interested in understanding the specific benefits the package could bring to existing architectures that already use AutoML. There is also anticipation for F# versions of the libraries, with developers eager for their release. Additionally, clarification was asked—and confirmed—on whether the libraries work with the Azure OpenAI library for .NET, noting that developers can use AzureOpenAIClient instead of OpenAIClient. For interested readers, detailed instructions on how to get started with the Microsoft.Extensions.AI packages are available in the Microsoft official blog post. About the Author Almir Vuk",
  "image": "https://res.infoq.com/news/2024/10/dotnet-ai-integration-libraries/en/headerimage/twitter_card+%2829%29-1729190595785.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eLast week, Microsoft announced the preview release of two libraries: \u003ca href=\"https://devblogs.microsoft.com/dotnet/introducing-microsoft-extensions-ai-preview/\"\u003eMicrosoft.Extensions.AI.Abstractions and Microsoft.Extensions.AI\u003c/a\u003e. These packages, referred to as Unified AI Building Blocks, provide the .NET ecosystem with essential abstractions for integrating artificial intelligence (AI) services into .NET applications and libraries, along with middleware to enhance key capabilities.\u003c/p\u003e\n\n\u003cp\u003eAs stated in the original announcement, it is developed in collaboration with the .NET community, including \u003ca href=\"https://learn.microsoft.com/en-us/semantic-kernel/overview/\"\u003eSemantic Kernel\u003c/a\u003e, these libraries offer a unified layer of C# abstractions. They encourage interaction with AI services such as small and large language models (SLMs and LLMs), embeddings, and middleware.\u003c/p\u003e\n\n\u003cp\u003eIn the official announcement, Microsoft stated:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eCurrently, our focus is on creating abstractions that can be implemented by various services, all adhering to the same core concepts. We do not intend to release APIs tailored to any specific provider\u0026#39;s services. Our goal is to act as a unifying layer within the .NET ecosystem, enabling developers to choose their preferred frameworks and libraries while ensuring seamless integration and collaboration across the ecosystem.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2024/10/dotnet-ai-integration-libraries/en/resources/1meai-architecture-diagram-1729190225138.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/10/dotnet-ai-integration-libraries/en/resources/1meai-architecture-diagram-1729190225138.jpg\" rel=\"share\"/\u003e\u003cem\u003e(Microsoft.Extensions.AI Architecture Diagram, Source: \u003ca href=\"https://devblogs.microsoft.com/dotnet/introducing-microsoft-extensions-ai-preview\"\u003eOffical Microsoft DevBlog\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eMicrosoft highlights \u003ca href=\"https://devblogs.microsoft.com/dotnet/introducing-microsoft-extensions-ai-preview/#benefits-of-microsoft.extensions.ai\"\u003eseveral benefits\u003c/a\u003e, such as the libraries offering a unified API abstraction for AI services, similar to the company\u0026#39;s logging and dependency injection abstractions as explained, the goal is to provide standard implementations for caching, telemetry, tool calling, and other common tasks that work with any provider, delivering consistent APIs and conventions.\u003c/p\u003e\n\n\u003cp\u003eThe libraries provide flexibility by allowing .NET authors to use AI services without being tied to a specific provider. They enhance ease of use by enabling developers to experiment with different packages using the same abstractions, maintaining a single API throughout applications. Componentization simplifies adding capabilities and testing.\u003c/p\u003e\n\n\u003cp\u003eFurthermore, the preview release includes reference implementations for OpenAI, Azure AI Inference, and Ollama. Notably, Microsoft plans to collaborate with package authors across the .NET ecosystem to integrate these abstractions into client libraries, thus eliminating the need for additional packages. The company encourages developers who maintain .NET client libraries for AI services to implement these abstractions.\u003c/p\u003e\n\n\u003cp\u003eRegarding the future, Microsoft states the intention to continue releasing the libraries in preview, expecting them to remain so through the .NET 9 release in November as they \u003ca href=\"https://github.com/dotnet/extensions/issues\"\u003egather feedback\u003c/a\u003e. Near-term plans include collaborating with Semantic Kernel on integration, updating \u003ca href=\"https://github.com/dotnet/eShopSupport\"\u003esamples like eShop\u003c/a\u003e to use the libraries, and working with developers on adoption.\u003c/p\u003e\n\n\u003cp\u003eAlso, for the near future, the development team emphasizes the following:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWork with everyone across the .NET ecosystem on the adoption of Microsoft.Extensions.AI. The more providers implement the abstractions, the more consumers use it, and the more middleware components are built, the more powerful all of the pieces become.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href=\"https://devblogs.microsoft.com/dotnet/introducing-microsoft-extensions-ai-preview/#comments\"\u003eCommunity feedback\u003c/a\u003e on the preview release has been generally positive, with developers expressing excitement and curiosity about the new libraries. Some have questioned the reasoning behind naming the namespace \u003cem\u003eMicrosoft.Extensions.AI\u003c/em\u003e and wondered if alternatives like \u003cem\u003eMicrosoft.Extensions.LLM\u003c/em\u003e was considered, given the focus on large language models.\u003c/p\u003e\n\n\u003cp\u003eOthers are interested in understanding the specific benefits the package could bring to existing architectures that already use \u003cem\u003eAutoML\u003c/em\u003e. There is also anticipation for F# versions of the libraries, with developers eager for their release. Additionally, clarification was asked—and confirmed—on whether the libraries work with the Azure OpenAI library for .NET, noting that developers can use \u003cem\u003eAzureOpenAIClient\u003c/em\u003e instead of \u003cem\u003eOpenAIClient\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor interested readers, detailed instructions on how to get started with the Microsoft.Extensions.AI packages are available in the \u003ca href=\"https://devblogs.microsoft.com/dotnet/introducing-microsoft-extensions-ai-preview/\"\u003eMicrosoft official blog post\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Almir-Vuk\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eAlmir Vuk\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-10-18T00:00:00Z",
  "modifiedTime": null
}
