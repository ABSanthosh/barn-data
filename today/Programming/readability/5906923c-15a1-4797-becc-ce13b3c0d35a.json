{
  "id": "5906923c-15a1-4797-becc-ce13b3c0d35a",
  "title": "Qodana 2024.2 Release: Enhanced Android Linter, Hard-coded Password Detection, and More",
  "link": "https://blog.jetbrains.com/qodana/2024/10/qodana-2024-2-release/",
  "description": "Get ready for new features and improvements with our latest Qodana 2024.2 release! This update introduces major enhancements that boost security, extend compatibility, and provide more convenience for development teams looking to increase code quality. Here’s what’s new: View Qodana 2024.2 Documentation Hardcoded password detection Hardcoded passwords can be a critical security issue because, when […]",
  "author": "Kerry Beetge",
  "published": "Wed, 09 Oct 2024 10:06:51 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "news",
    "qodana",
    "code-analysis",
    "code-quality",
    "quality-gates"
  ],
  "byline": "Kerry Beetge",
  "length": 7856,
  "excerpt": "Get ready for new features and improvement with the new Qodana 2024.2 release!",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The code quality platform for teams News QodanaQodana 2024.2 Release: Enhanced Android Linter, Hard-coded Password Detection, and More Get ready for new features and improvements with our latest Qodana 2024.2 release! This update introduces major enhancements that boost security, extend compatibility, and provide more convenience for development teams looking to increase code quality. Here’s what’s new: Table of ContentsHardcoded password detectionNew features and inspections for the Qodana-Android linterQuick-fixes in Qodana for .NET – flagged, found, fixed!Inspection changes and updates View Qodana 2024.2 Documentation Hardcoded password detection Hardcoded passwords can be a critical security issue because, when exposed, attackers can use them to leak data and access sensitive information – especially in open-source or distributed applications. Passwords should be stored in a more secure environment. This is why we’ve introduced a new inspection to help you find these passwords in your code: HardcodedPasswords. By default, the inspection reports variables with values matching built-in regex rules for hardcoded passwords. It currently supports JavaScript, TypeScript, Java, Kotlin, Groovy, PHP, Go, Python, C#, JSON, YAML, and XML. How to detect hardcoded passwords, report variables with suspicious names, and implement your own regex rules This inspection is enabled by default in Qodana. If you have a custom inspection profile, you should enable the inspection in your qodana.yaml profile as follows:  include: - name: \"HardcodedPasswords\" Example of a hardcoded password inspection result. Additionally, you can view reported variables with suspicious names, like token or password, and a constant string value. To enable this option, add the following configuration in qodana.yaml: hardcodedPasswords: reportDefaultSuspiciousVariableNames: true You can also implement your own regex rules to detect and report or ignore hardcoded variable values or names, offering you the opportunity to set up flexible custom rules. Here’s an example of a custom rules configuration in qodana.yaml: hardcodedPasswords: # regex rules for variable values to report as hardcoded password variableValues: - \"(?i)(xoxe-\\d-[A-Z0-9]{146})\" - \"perm:(?\u003cclearSecret\u003e[a-zA-Z=.0-9]{96}|[a-zA-Z=.0-9]{64})\" # regex rules for variable names to report as hardcoded password variableNames: - \"youtrack\" # regex rules for variable values to ignore (not report) as hardcoded password ignoreVariableValues: - \"do-not-report-this-value\" # regex rules for variable names to ignore (not report) as hardcoded password ignoreVariableNames: - \"^(?=.*\\bteamcity\\b)(?=.*\\bkey\\b).*$\" Watch the video above to see hardcoded password detection in action. New features and inspections for the Qodana-Android linter With this release, our new qodana-android linter offers advanced features from the Qodana Ultimate plan, tailored specifically to Android projects. These include, but are not limited to, code coverage analysis and vulnerability checks. This enables you to get: Comprehensive inspections: The qodana-android linter includes all inspections from the community version, plus additional inspections provided by the qodana-jvm linter. This ensures you can identify both Android-specific issues and language-related problems within your projects. Enhanced analysis: By leveraging Qodana Ultimate features, you can perform deeper analysis on your Android projects, improving code quality (with the Code Coverage inspection) and security (with the Vulnerability Checker). Get started with the qodana-android linter by specifying it in your qodana.yaml file: linter: jetbrains/qodana-android:2024.2 Or use the following in the CLI: --linter jetbrains/qodana-android:2024.2 Please note that inspections contained in external libraries and user-written inspections aren’t supported in this version. With the qodana-android linter, you can now take your Android project analysis to the next level, ensuring that both Android-specific and general code quality issues are addressed. Quick-fixes in Qodana for .NET – flagged, found, fixed! The qodana-dotnet linter now supports quick-fixes, making it easier to improve your code automatically. You can choose between the cleanup and apply strategies to handle identified  issues effectively. This means your team can enjoy:  Automatic code improvement: Similar to other Qodana linters, quick-fixes in qodana-dotnet help streamline the process of fixing issues in your code where automatic corrections are possible. Flexible strategies: The linter supports both the cleanup and apply strategies, giving you control over how fixes are implemented. How to use quick-fixes To run the qodana-dotnet linter with the apply strategy, use the following command: docker run \\ -v $(pwd)/:/data/project/ \\ -e QODANA_TOKEN=\"your Qodana Cloud Token\" \\ jetbrains/qodana-dotnet:2024.2 \\ --apply-fixes # use --cleanup for cleanup strategy Inspection changes and updates The qodana-php linter now includes JavaScript inspections by default, allowing analysis of PHP and JavaScript/TypeScript projects at the same time. Android lint inspections are now integrated into the qodana-android-community and (new) qodana-android linters to address Android performance and security issues, improving performance and security and helping you find new bugs. The qodana-clang linter is now available with different clang-compiler versions (15–18) so you can choose which version you want to use. The default linter qodana-clang:latest uses version 16 of the Clang compiler. To run it with a different version, you’ll  need to specify it in the linter’s name: linter: jetbrains/qodana-clang:2024.2-eap-clang\u003cversion\u003e #(for example, jetbrains/qodana-clang:2024.2-eap-clang18) Additionally, numerous inspection changes have been made to help identify potential coding errors, such as comparing an expression to itself, to help you make your code more robust. What to do next If you’re using the latest tag, you don’t need to do anything to enjoy the benefits of our new Qodana 2024.2 release. If not, please change from 2024.1 to 2024.2 to update. Users of GitHub Actions, Azure DevOps, and Circle CI can find the latest version of the extension here.With these new enhancements, you have greater potential to substantially improve your coding experience with Qodana 2024.2. For further information, including detailed setup instructions for each feature, please refer to our official documentation. You can also stay up to date with Qodana by joining our communities on: Reddit LinkedIn X View Release Documentation Subscribe to Qodana Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/10/qd-social_share_blog_1280x720_en.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/qodana/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2021/07/Qodana-1.svg\" alt=\"Qodana logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe code quality platform for teams\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/qodana/category/news/\"\u003eNews\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/qodana/category/qodana/\"\u003eQodana\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eQodana 2024.2 Release: Enhanced Android Linter, Hard-coded Password Detection, and More\u003c/h2\u003e                    \n                    \n\u003cp\u003eGet ready for new features and improvements with our latest Qodana 2024.2 release! This update introduces major enhancements that boost security, extend compatibility, and provide more convenience for development teams looking to increase code quality.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s what’s new:\u003c/p\u003e\n\n\n\n\u003cdiv id=\"rank-math-toc\" id=\"rank-math-toc\"\u003e\u003ch2\u003eTable of Contents\u003c/h2\u003e\u003cnav\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#hardcoded-password-detection\"\u003eHardcoded password detection\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#new-features-and-inspections-for-the-qodana-android-linter\"\u003eNew features and inspections for the Qodana-Android linter\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#quick-fixes-in-qodana-for-net-flagged-found-fixed\"\u003eQuick-fixes in Qodana for .NET – flagged, found, fixed!\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#inspection-changes-and-updates\"\u003eInspection changes and updates\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"View Qodana 2024.2 Documentation\" href=\"https://www.jetbrains.com/help/qodana/new-in-2024-2.html\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://www.jetbrains.com/help/qodana/new-in-2024-2.html\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eView Qodana 2024.2 Documentation\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"hardcoded-password-detection\"\u003e\u003cstrong\u003eHardcoded password detection\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eHardcoded passwords can be a critical security issue because, when exposed, attackers can use them to leak data and access sensitive information – especially in open-source or distributed applications. Passwords should be stored in a more secure environment. This is why we’ve introduced a new inspection to help you find these passwords in your code: \u003ccode\u003eHardcodedPasswords\u003c/code\u003e\u003cstrong\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eBy default, the inspection reports variables with values matching built-in regex rules for hardcoded passwords. It currently supports JavaScript, TypeScript, Java, Kotlin, Groovy, PHP, Go, Python, C#, JSON, YAML, and XML.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHow to detect hardcoded passwords, report variables with suspicious names, and implement your own regex rules\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThis inspection is enabled by default in Qodana. If you have a custom inspection profile, you should enable the inspection in your qodana.yaml profile as follows: \u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003einclude:\n  - name: \u0026#34;HardcodedPasswords\u0026#34;\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2598\" height=\"750\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/09/Untitled-9.png\" alt=\"Qodana 2024.2 release hardcoded password detection\"/\u003e\u003cfigcaption\u003eExample of a hardcoded password inspection result.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAdditionally, you can view reported variables with suspicious names, like \u003ccode\u003etoken\u003c/code\u003e or \u003ccode\u003epassword\u003c/code\u003e, and a constant string value. To enable this option, add the following configuration in qodana.yaml:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003ehardcodedPasswords:\n  reportDefaultSuspiciousVariableNames: true\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can also implement your own regex rules to detect and report or ignore hardcoded variable values or names, offering you the opportunity to set up flexible custom rules.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s an example of a custom rules configuration in qodana.yaml:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003ehardcodedPasswords:\n  # regex rules for variable values to report as hardcoded password\n  variableValues:\n    - \u0026#34;(?i)(xoxe-\\d-[A-Z0-9]{146})\u0026#34;\n    - \u0026#34;perm:(?\u0026lt;clearSecret\u0026gt;[a-zA-Z=.0-9]{96}|[a-zA-Z=.0-9]{64})\u0026#34;\n\t\n  # regex rules for variable names to report as hardcoded password\n  variableNames:\n    - \u0026#34;youtrack\u0026#34;\n\t \n  # regex rules for variable values to ignore (not report) as hardcoded password\n  ignoreVariableValues:\n    - \u0026#34;do-not-report-this-value\u0026#34;\n    \n  # regex rules for variable names to ignore (not report) as hardcoded password\n  ignoreVariableNames:\n    - \u0026#34;^(?=.*\\bteamcity\\b)(?=.*\\bkey\\b).*$\u0026#34;\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe title=\"I Put a Hardcoded Password in a JetBrains Repository…\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/Y80rIKoSSSU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003cfigcaption\u003eWatch the video above to see hardcoded password detection in action. \u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"new-features-and-inspections-for-the-qodana-android-linter\"\u003e\u003cstrong\u003eNew features and inspections for the Qodana-Android linter\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eWith this release, our new \u003ccode\u003eqodana-android \u003c/code\u003elinter offers advanced features from the Qodana Ultimate plan, tailored specifically to Android projects. These include, but are not limited to, code coverage analysis and vulnerability checks. This enables you to get:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eComprehensive inspections:\u003c/strong\u003e The \u003ccode\u003eqodana-android \u003c/code\u003elinter includes all inspections from the community version, plus additional inspections provided by the qodana-jvm linter. This ensures you can identify both Android-specific issues and language-related problems within your projects.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEnhanced analysis:\u003c/strong\u003e By leveraging Qodana Ultimate features, you can perform deeper analysis on your Android projects, improving code quality (with the Code Coverage inspection) and security (with the Vulnerability Checker).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cbr/\u003eGet started with the \u003ccode\u003eqodana-android\u003c/code\u003e linter by specifying it in your qodana.yaml file:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003elinter: jetbrains/qodana-android:2024.2\u003c/pre\u003e\n\n\n\n\u003cp\u003eOr use the following in the CLI:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003e--linter jetbrains/qodana-android:2024.2\u003c/pre\u003e\n\n\n\n\u003cp\u003ePlease note that inspections contained in external libraries and user-written inspections aren’t supported in this version.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith the \u003ccode\u003eqodana-android\u003c/code\u003e linter, you can now take your Android project analysis to the next level, ensuring that both Android-specific and general code quality issues are addressed.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"quick-fixes-in-qodana-for-net-flagged-found-fixed\"\u003e\u003cstrong\u003eQuick-fixes in Qodana for .NET – flagged, found, fixed!\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eqodana-dotnet\u003c/code\u003e linter now supports quick-fixes, making it easier to improve your code automatically. You can choose between the \u003ccode\u003ecleanup\u003c/code\u003e and \u003ccode\u003eapply\u003c/code\u003e strategies to handle identified  issues effectively. This means your team can enjoy: \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAutomatic code improvement:\u003c/strong\u003e Similar to other Qodana linters, quick-fixes in qodana-dotnet help streamline the process of fixing issues in your code where automatic corrections are possible.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eFlexible strategies:\u003c/strong\u003e The linter supports both the cleanup and apply strategies, giving you control over how fixes are implemented.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHow to use quick-fixes\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eTo run the \u003ccode\u003eqodana-dotnet\u003c/code\u003e linter with the \u003ccode\u003eapply\u003c/code\u003e strategy, use the following command:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003edocker run \\ -v $(pwd)/:/data/project/ \\ -e QODANA_TOKEN=\u0026#34;your Qodana Cloud Token\u0026#34; \\ jetbrains/qodana-dotnet:2024.2 \\ --apply-fixes # use --cleanup for cleanup strategy\u003c/pre\u003e\n\n\n\n\u003ch3 id=\"inspection-changes-and-updates\"\u003e\u003cstrong\u003eInspection changes and updates\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eqodana-php\u003c/code\u003e linter now includes JavaScript inspections by default, allowing analysis of PHP and JavaScript/TypeScript projects at the same time.\u003c/li\u003e\n\n\n\n\u003cli\u003eAndroid lint inspections are now integrated into the \u003ccode\u003eqodana-android-community\u003c/code\u003e and (new) \u003ccode\u003eqodana-android\u003c/code\u003e linters to address Android performance and security issues, improving performance and security and helping you find new bugs.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe \u003ccode\u003eqodana-clang\u003c/code\u003e linter is now available with different clang-compiler versions (15–18) so you can choose which version you want to use. The default linter \u003ccode\u003eqodana-clang:latest\u003c/code\u003e uses version 16 of the Clang compiler. To run it with a different version, you’ll  need to specify it in the linter’s name:\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003elinter: jetbrains/qodana-clang:2024.2-eap-clang\u0026lt;version\u0026gt; #(for example, jetbrains/qodana-clang:2024.2-eap-clang18)\u003c/pre\u003e\n\n\n\n\u003cp\u003eAdditionally, numerous inspection changes have been made to help identify potential coding errors, such as comparing an expression to itself, to help you make your code more robust.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"what-to-do-next\"\u003eWhat to do next\u003c/h2\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eIf you’re using the \u003ccode\u003elatest\u003c/code\u003e tag, you don’t need to do anything to enjoy the benefits of our new Qodana 2024.2 release. If not, please change from 2024.1 to 2024.2 to update. Users of GitHub Actions, Azure DevOps, and Circle CI can find the latest version of the extension \u003ca href=\"https://www.jetbrains.com/help/qodana/ci.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWith these new enhancements, you have greater potential to substantially improve your coding experience with Qodana 2024.2. For further information, including detailed setup instructions for each feature, please refer to our official documentation. You can also stay up to date with Qodana by joining our communities on:\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.reddit.com/r/Qodana/\" target=\"_blank\" rel=\"noopener\"\u003eReddit\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/showcase/qodana/\" target=\"_blank\" rel=\"noopener\"\u003eLinkedIn\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://x.com/Qodana\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"View Release Documentation\" href=\"https://www.jetbrains.com/help/qodana/new-in-2024-2.html\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://www.jetbrains.com/help/qodana/new-in-2024-2.html\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eView Release Documentation\u003c/a\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Qodana Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
