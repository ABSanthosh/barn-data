{
  "id": "fdb1aac6-2848-4795-a853-2343666ac413",
  "title": "New! Security Analysis Plugin for IntelliJ IDEA 2024.3.1",
  "link": "https://blog.jetbrains.com/idea/2024/12/security-analysis-plugin/",
  "description": "Application security is a critical requirement in modern software development. The latest release of IntelliJ IDEA 2024.3.1 – along with the optional new Security Analysis by Qodana plugin – elevates your security efforts with advanced interprocedural data flow analysis capabilities for code written in Java and Kotlin. Trained on popular OWASP security benchmark projects, this […]",
  "author": "Kerry Beetge",
  "published": "Mon, 09 Dec 2024 14:49:05 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "intellij",
    "idea",
    "qodana",
    "code-analysis",
    "release",
    "security"
  ],
  "byline": "Kerry Beetge",
  "length": 3308,
  "excerpt": "Application security is a critical requirement in modern software development. The latest release of IntelliJ IDEA 2024.3.1 – along with the optional new Security Analysis by Qodana plugin – elevates",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "IntelliJ IntelliJ IDEA QodanaNew! Security Analysis Plugin for IntelliJ IDEA 2024.3.1 Application security is a critical requirement in modern software development. The latest release of IntelliJ IDEA 2024.3.1 – along with the optional new Security Analysis by Qodana plugin – elevates your security efforts with advanced interprocedural data flow analysis capabilities for code written in Java and Kotlin. Trained on popular OWASP security benchmark projects, this new feature allows you to detect and address critical security vulnerabilities, such as cross-site scripting, command injections, SQL injections, and path traversal issues, in real time as you type. This functionality is available in IntelliJ IDEA Ultimate starting from v2024.3.1 with the Security Analysis by Qodana plugin installed. To get started, open the Problems view, switch to the brand-new Security Analysis tab, and then install the required plugin. Once the plugin is installed, you’re good to go. It will highlight problems in your editor automatically. Additionally, you can explore the built-in demo example in your Java or Kotlin project or launch taint analysis in batch mode over your whole codebase to identify places with potentially vulnerable code. Security analysis matters more than ever The Security Analysis by Qodana feature delivers taint analysis capabilities to your editor to help identify vulnerabilities in your application. It traces how data flows through your code, highlighting areas where potentially harmful user input might reach vulnerable functions (sinks). Such dataflows could be exploited, potentially compromising your application’s security depending on the type of vulnerability. With the release of IntelliJ IDEA 2024.3.1 and the Security Analysis by Qodana plugin, we’re helping address specific issues from the OWASP Top 10, which highlights the most critical security risks faced by modern applications. By running taint analysis with the new optional plugin in IntelliJ IDEA, you can proactively improve both the quality and security of your codebase. Lock down codebase security In the intentionally vulnerable Spring Boot sample above, you can see potentially malicious user input from request flows into an SQL query without proper sanitization. Attackers could exploit this vulnerability to compromise the whole system.  Taint analysis in your team’s CI/CD pipeline with Qodana Bring enhanced security to your team’s project with taint analysis in your CI/CD pipeline. This feature is available for code written in Java and Kotlin when using the 2024.3 version of the Qodana linter.  Want to find out more? View the documentation, subscribe to the Qodana blog, or follow along on X or LinkedIn for more news and updates on the release. *Please keep the plugin up to date, and we’ll be sure to continue enhancing its capabilities. Subscribe to IntelliJ IDEA Blog updates",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/12/ij-social_share_blog_1280x720_en-3.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/idea/category/intellij/\"\u003eIntelliJ\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/idea/\"\u003eIntelliJ IDEA\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/qodana/\"\u003eQodana\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eNew! Security Analysis Plugin for IntelliJ IDEA 2024.3.1\u003c/h2\u003e                    \n                    \n\u003cp\u003eApplication security is a critical requirement in modern software development. The latest \u003ca href=\"https://blog.jetbrains.com/idea/2024/12/intellij-idea-2024-3-1/\"\u003erelease of IntelliJ IDEA 2024.3.1\u003c/a\u003e – along with the optional new Security Analysis by \u003ca href=\"http://www.qodana.com\" target=\"_blank\" rel=\"noopener\"\u003eQodana\u003c/a\u003e plugin – elevates your security efforts with advanced interprocedural data flow analysis capabilities for code written in Java and Kotlin.\u003c/p\u003e\n\n\n\n\u003cp\u003eTrained on popular OWASP security benchmark projects, this new feature allows you to detect and address critical security vulnerabilities, such as cross-site scripting, command injections, SQL injections, and path traversal issues, in real time as you type.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis functionality is available in IntelliJ IDEA Ultimate starting from v2024.3.1 with the \u003ca href=\"https://plugins.jetbrains.com/plugin/25724-security-analysis-by-qodana/edit\" target=\"_blank\" rel=\"noopener\"\u003eSecurity Analysis by Qodana plugin\u003c/a\u003e installed. To get started, open the \u003cem\u003eProblems \u003c/em\u003eview, switch to the brand-new \u003cem\u003eSecurity Analysis\u003c/em\u003e tab, and then install the required plugin. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1238\" height=\"460\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/12/sa.webp\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eOnce the plugin is installed, you’re good to go. It will highlight problems in your editor automatically. Additionally, you can explore the built-in demo example in your Java or Kotlin project or launch taint analysis in batch mode over your whole codebase to identify places with potentially vulnerable code.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"security-analysis-matters-more-than-ever\"\u003eSecurity analysis matters more than ever\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe Security Analysis by Qodana feature delivers taint analysis capabilities to your editor to help identify vulnerabilities in your application.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt traces how data flows through your code, highlighting areas where potentially harmful user input might reach vulnerable functions (sinks). Such dataflows could be exploited, potentially compromising your application’s security depending on the type of vulnerability.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith the release of IntelliJ IDEA 2024.3.1 and the Security Analysis by Qodana plugin, we’re helping address specific issues from the \u003ca href=\"https://owasp.org/Top10/\" target=\"_blank\" rel=\"noopener\"\u003eOWASP Top 10\u003c/a\u003e, which highlights the most critical security risks faced by modern applications. By running taint analysis with the new optional plugin in IntelliJ IDEA, you can proactively improve both the quality and security of your codebase.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"lock-down-codebase-security\"\u003eLock down codebase security\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1500\" height=\"600\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/12/gif-article.gif\" alt=\"Security Analysis by Qodana for IntelliJ IDEA. \"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn the intentionally vulnerable Spring Boot sample above, you can see potentially malicious user input from request flows into an SQL query without proper sanitization. Attackers could exploit this vulnerability to compromise the whole system. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"taint-analysis-in-your-teams-ci-cd-pipeline-with-qodana\"\u003eTaint analysis in your team’s CI/CD pipeline with Qodana\u003c/h2\u003e\n\n\n\n\u003cp\u003eBring enhanced security to your team’s project with taint analysis \u003ca href=\"https://blog.jetbrains.com/idea/2024/10/code-analysis-for-your-projects-with-intellij-idea-and-qodana/\"\u003ein your CI/CD pipeline\u003c/a\u003e. This feature is available for code written in Java and Kotlin when using the 2024.3 version of the Qodana linter. \u003c/p\u003e\n\n\n\n\u003cp\u003eWant to find out more? View the \u003ca href=\"https://www.jetbrains.com/help/qodana/2024.3/taint-analysis.html\" target=\"_blank\" rel=\"noopener\"\u003edocumentation\u003c/a\u003e, subscribe to the \u003ca href=\"https://blog.jetbrains.com/qodana/\"\u003eQodana blog\u003c/a\u003e, or follow along on \u003ca href=\"https://x.com/qodana\" target=\"_blank\"\u003eX\u003c/a\u003e or \u003ca href=\"https://www.linkedin.com/showcase/98927085/admin/dashboard/\" target=\"_blank\" rel=\"noopener\"\u003eLinkedIn\u003c/a\u003e for more news and updates on the release. *Please keep the plugin up to date, and we’ll be sure to continue enhancing its capabilities.\u003c/p\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to IntelliJ IDEA Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
