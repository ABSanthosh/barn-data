{
  "id": "b17b6563-cbf3-45ce-ae87-baec848ac2e3",
  "title": "Android Large Screen Optimization",
  "link": "https://developers.soundcloud.com/blog/soundcloud-android-large-screen",
  "description": "Large Screen Devices - The New Frontier SoundCloud large screen optimized Recently, the Android team at SoundCloud took on a project to…",
  "author": "",
  "published": "Mon, 31 Jul 2023 00:00:00 GMT",
  "source": "https://developers.soundcloud.com/blog/blog.rss",
  "categories": null,
  "byline": "",
  "length": 20913,
  "excerpt": "Discover how SoundCloud transformed its Android app to deliver an immersive music experience on large screen devices, including tablets, foldables, and Chromebooks",
  "siteName": "",
  "favicon": "",
  "text": "Large Screen Devices - The New Frontier Recently, the Android team at SoundCloud took on a project to optimize the Android app for large screen devices. With the increasing use of devices like tablets, foldables, and Chromebooks, we decided to provide better support for them. The data showed us users were adopting these devices rapidly. What is more, both Google and Samsung had been vocal about the importance of optimizing for larger screens. Google is even launching a new Playstore for large screen optimized apps only. In this blog post, we’ll go through some of the challenges we faced, the UX and UI changes we made, and the code implementation. We hope our experiences will help you in your own large-screen adventures. Why did we invest in Large Screens? We saw a trend among our users - more and more of them were using SoundCloud on their tablets, foldable devices, and Chromebooks. And it wasn’t just happening in our user base. Google and Samsung have been going all-in on large screens, bringing them more into the mainstream. When Google rolled out their Pixel Tablet, well-known tech reviewer Marques Brownlee pointed out that SoundCloud stood out from the crowd. He appreciated that we didn’t just stretch our phone app to fit the larger screen, but instead, we crafted an experience that fully utilized the extra space. If you’re interested, you can check out the video here. Our Investigation Where and how is music on large screens heard? Fun fact: People listen to music on their Tablets mostly while cooking. Imagine you’re in the middle of preparing a meal, your hands are busy, but you can still easily control your music - that’s convenience at its best. But it’s not just about individual experiences. Tablets come into play during social events as well. The larger screen makes it simpler for everyone to engage with the music, whether it’s to see what’s currently playing or to add their favorite track to the queue. Through understanding these usage scenarios, we can better tailor our services to enhance the music listening experiences of our users. Be it cooking dinner or hosting a gathering, SoundCloud is there to make those moments even better with great music. Google’s and Samsung’s Large Screens Guide Google’s and Samsung’s large screen guides are roadmaps for developers wanting to optimize their apps for large screens. It encourages using scalable images and responsive and dynamic layouts for a consistent user experience across different screen sizes. Google also highlights using the extra space for features like split-screen views, and emphasizes touch target sizing, clear text, and intuitive navigation. Following these best practices ensures apps are user-friendly and competitive in the large screen devices market. Google’s Large Screen Compatibility Checklist Google’s Large Screen Checklist, available in their Android developer documentation, provides developers with a tier-based framework for ensuring high-quality app experiences on large screen devices. The checklist encompasses not only UI design but also considerations for navigation, keyboard/stylus input, and overall app usage. The checklist is divided into tiers, offering developers a structured approach to prioritize and implement essential features and optimizations based on the level of support desired for large screen devices. The tiers range from basic support to more advanced features and functionalities that fully leverage the potential of large screens. The SoundCloud App When we reviewed Google’s checklist it was clear that the SoundCloud app fell short in certain areas, particularly in terms of adapting the screen layout. The app’s tendency to merely stretch the phone layout to fit larger screens resulted in a less than optimal user interface. This realization was our call to action. In the upcoming sections, we’ll take you on a visual tour of these components, accompanied by code snippets and technical explanations to provide you with an inside look at our optimization process. Bottom Navigation Bar Before: ❌ Horizontally stretched phone layout bottom navigation bar Traditionally, SoundCloud’s Android app utilized a bottom navigation bar in a phone layout, which was stretched horizontally to fit larger screen sizes. This approach was straightforward, but it proved ineffective for larger screens. The extended navigation bar made it difficult for users to navigate the app, as it required them to move their focus from one end of the screen to the other. After: ✅ Nav bar rail optimized for large screens To remedy this, we adopted a vertical navigation rail for large screen layouts, aligning it to the side of the screen. This is recommended by Google as it provides a more comfortable browsing experience. The menu options are now neatly stacked in a column, making them accessible without the need for extensive eye or cursor movement. Code Implementation Before: BottomNavigationView Previously, the SoundCloud Android app used a BottomNavigationView to create the bottom navigation bar. This worked well on smaller devices but led to a stretched UI on larger screens. After: NavigationRailView To address this, we replaced the BottomNavigationView with NavigationRailView for larger screens. Both these classes implement the NavigationBarView interface. This allows for a smooth transition with minimal code changes. To differentiate between smaller and larger screens, we created two separate layout files. One uses the BottomNavigationView, and the other uses the NavigationRailView. In Kotlin, we dynamically set the layout file based on the size of the device. Identifying Large Devices We identify whether a device is large or small by using a boolean variable, is_tablet, defined in three separate XML value files based on the screen width. // res/values-sw600dp/booleans.xml \u003cbool name=\"is_tablet\"\u003etrue\u003c/bool\u003e // res/values-sw370dp/booleans.xml \u003cbool name=\"is_tablet\"\u003efalse\u003c/bool\u003e // res/values/booleans.xml \u003cbool name=\"is_tablet\"\u003efalse\u003c/bool\u003e In Kotlin, we check the is_tablet boolean value and set the layout file accordingly. This is done using the following code: val isTablet = context.resources.getBoolean(R.bool.is_tablet) if(isTablet) { setContentView(R.layout.tablet_layout) } else { setContentView(R.layout.phone_layout) } Hardcoding resources is not the best solution. Google’s documentation provides some great insights on supporting different screen sizes, including the concept of Window Size Classes. Window Sizes allow the UI to adapt to various window configurations on foldable and large screen devices. Here’s the link for more details: Window Size Classes. Unit Testing and A/B Testing To enable testing, we added a wrapper class around the isTablet boolean. We also leveraged feature flags to conduct A/B testing of our new layout. We introduced a class NavRailExperiment to check both the device type and the feature flag state: Here’s a look at our implementation of this approach: class NavRailExperiment(private val appFeatures: AppFeatures) { val isEnabled: Boolean get() = context.resources.getBoolean(R.bool.is_tablet) \u0026\u0026 appFeatures.isNavRailEnabled() } Mini Player Transitioning from a Stretched Phone Layout Mini Player to a Right-Aligned Mini Player Before: ❌ Horizontally stretched phone layout Mini Player In the past, SoundCloud’s Android app featured a Mini Player stretched horizontally across the screen. While this design worked for smaller screens, it resulted in a suboptimal user experience on larger devices due to the extended reach required to interact with it. After: ✅ Small right-aligned Mini Player optimized for large screens To provide a more user-friendly interface we opted for a small Mini Player on the right side of the screen. This ensures controls are comfortably within thumb reach. Code Implementation The Player is a BottomSheet with a ViewPager, the Mini Player is a view inside each page of the ViewPager. We use a BottomSheetBehavior to support collapsed and expanded states. In the expanded state the player shows the full width and height of the ViewPager. In collapsed state it shows only the Mini Player view, and the height is collapsed to 50dp. The width was always match_parent, but since we want it to be small, we set the width of the BottomSheet to 200dp. The class BottomSheetBehavior provides us with a method setMaxWidth which we use to set the width while animating the collapse and expansion of the BottomSheet Player. The other issue here is that we also have to set the width on the ViewPager and the ViewPager’s visible page. Additionally, we must move the player to the right side thus setting the left margin on layout params on each player transition. TheBottomSheetBehavior also has a BottomSheetBehavior.BottomSheetCallback field. The BottomSheetBehavior.BottomSheetCallback has an onSlide method which allows us to set the width and left margin on the BottomSheet and the ViewPager’s visible page. Below is the code: bottomSheetBehavior.bottomSheetCallback = BottomSheetBehavior.BottomSheetCallback() { val miniplayerWidth = screenWidth * offset val leftMargin = screenWidth - miniplayerWidth setLeftMargin(viewPager.views(), leftMargin) setWidth(viewPager.views(), bottomSheet, miniplayerWidth) }; Comments \u0026 Playqueue on Player The SoundCloud Android app hosts two main features on its player screen - the comments and the Playqueue. Before, when a user accessed either of these features, a new screen would open, occupying the entire display and obstructing interaction with the player. Before: ❌ Horizontally stretched phone comments layout Before: ❌ Horizontally stretched phone playqueue layout We revamped this experience in the following ways: Instead of taking up the whole screen, the Comments and Playqueue sections now open on the right side of the player. This allows users to engage with these features and interact with the player simultaneously. Additionally, the buttons to access the comments and Playqueue were originally at the bottom of the screen. To increase accessibility and free up space at the bottom, we moved them to the left side. After: ✅ Right-aligned comments optimized for large screen After: ✅ Right-aligned playqueue optimized for large screen Repositioning the UI elements in this way contributes to a more ergonomic and intuitive user experience on larger screens, reinforcing our commitment to delivering the best listening experience across all devices. Addressing User Experience (UX) Challenges Our changes to the UI introduced some UX challenges, especially related to the comments feature. Two major questions emerged: When a track changes, should the comments update to correspond to the new track, or should it continue displaying comments from the previous track? What should happen to a comment a user is currently writing if the track changes? To tackle the first issue, we opted to update the comments to align with the new track. We believe this adjustment is more in line with user expectations, as it helps keep the entire screen contextually relevant. For the second scenario, we implemented a solution where the comments section doesn’t update if the text field is currently in focus. This prevents any in-progress comments being lost, thereby providing a more user-friendly commenting experience. Code Implementation To integrate the comments and Playqueue screens over the player, we introduced a new FrameLayout named player_side_fragment_holder. This frame holds the additional features and ensures they are displayed without disrupting the main player. This side fragment holder is positioned above the player and is assigned a transparent background along with a width of 400dp. Consequently, when the user taps on the comments or Playqueue button, the respective screen appears over the player. This is made possible by a secondary FragmentManager which adds either the CommentsFragment or the PlayqueueFragment to the FrameLayout. Here’s how the layout is structured: \u003cFrameLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003cPlayer android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /\u003e \u003cFrameLayout android:id=\"@+id/player_side_fragment_holder\" android:layout_width=\"400dp\" android:layout_height=\"match_parent\" android:layout_gravity=\"right\" /\u003e \u003c/FrameLayout\u003e In this layout configuration, the player_side_fragment_holder is specified to align on the right side, allowing it to overlay the player when comments or the Playqueue are invoked. This approach ensures that the main player remains interactive while users are interacting with these features. Search In our drive to optimize the large screen experience, we revamped the search screen to offer both search suggestions and top results side by side. The updated design splits the screen into two sections when users begin a search. One side displays real-time search suggestions, while the other showcases the top results. This allows users to compare suggestions and top results instantly, leading to a more seamless and enriched search experience. Before: ❌ Horizontally stretched search suggestions After: ✅ Split search suggestions and search results Code Implementation Code Implementation for Split Search Screen In order to implement our split-screen search feature, we use ConstraintLayout. This offers the ability to create layouts based on percentages, which we use to divide the screen between search suggestions and top results. To split the screen, we defined a width constraint of 40% for the search suggestions, leaving the remaining 60% for the top results: app:layout_constraintWidth_default=\"percent\" app:layout_constraintWidth_percent=\".4\" Here is the full code for the side-by-side layout: \u003candroidx.constraintlayout.widget.ConstraintLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\u003e \u003cFrameLayout android:id=\"@+id/search_container\" android:layout_width=\"0dp\" android:layout_height=\"match_parent\" app:layout_constraintWidth_default=\"percent\" app:layout_constraintWidth_percent=\".4\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintStart_toStartOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\"\u003e \u003candroidx.fragment.app.FragmentContainerView android:id=\"@+id/search_suggestions\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /\u003e \u003c/FrameLayout\u003e \u003candroidx.recyclerview.widget.RecyclerView android:id=\"@+id/section_results_top_items\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintEnd_toEndOf=\"parent\" app:layout_constraintStart_toEndOf=\"@id/search_container\" app:layout_constraintTop_toTopOf=\"parent\" /\u003e \u003c/androidx.constraintlayout.widget.ConstraintLayout\u003e This layout allocates 40% of the screen width to a FrameLayout which houses the search suggestions, while the remaining space is assigned to a RecyclerView for displaying top results. The constraints ensure the proper positioning and responsiveness of these elements, providing a dynamic, user-friendly search interface. Artist Our previous design for the Artist screen wasn’t well-optimized for larger screens. The result was a horizontally stretched layout with excessive padding and white space around the artist details. As a consequence, users had to scroll vertically to access tracks or albums from the artist. Before: ❌ Stretched artist profile To improve this, we took advantage of the space available on larger screens. We moved the Artist details to the left side of the screen and displayed them more compactly. This makes all the necessary information immediately visible and reduces unnecessary scrolling. Simultaneously, the right side of the screen is dedicated to displaying the artist’s tracks and albums. This clear separation of content means that users can quickly view and interact with the artist’s music. Through this design, we’ve been able to optimize space and present a well-structured layout that enhances the navigation and interaction for our users on large screen devices. After: ✅ Compact artist profile Keyboard Tab Navigation We needed to support keyboard tab navigation for devices that have keyboards attached. You can easily test your apps by connecting a bluetooth keyboard. If you are using AppBarLayout you might end up not navigating through the toolbar icons. We had to set touchscreenBlocksFocus = false to our AppBarLayout in order to allow navigating through the toolbar icons. At first, we had problems navigating the player using a keyboard. The default navigation did not work correctly so we had to force set the navigation flow. To do this we use the xml attribute android:nextFocusForward. For better understanding, here’s the specified order for tab key navigation in the player: First, the focus lands on the artist’s name. Then, it moves to the track name. Next, it goes to the option to minimize the player. After that, it directs to the ‘Follow artist’ option. It subsequently moves through options like ‘Like’, ‘Comments’, ‘Share’, ‘Playqueue’, and ‘More’ buttons. Lastly, it settles on the ‘Play/Pause’ button. Space bar toggles playback - Only for media playback apps One of the requirements from Google is to support playback toggling through the space bar key. This feature allows users to play or pause music just by hitting the space bar on their keyboards, irrespective of their current position in the app. The implementation of this functionality can be achieved by overriding the onKeyUp method. On detection of a key press, it verifies if the pressed key corresponds to the space bar, and if so it toggles the playback and returns true. In all the Activity classes where the play/pause button is present, the onKeyUp method is overridden as shown below: override fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean { takeKeyEvents(true) return if(keyCode == KeyEvent.KEYCODE_SPACE) { true } else { super.onKeyUp(keyCode, event) } } It’s worth noting that we used the takeKeyEvents(true) method to ensure that the current activity can handle key events. Finally, to make sure the play/pause button is the default focus, we set android:focusedByDefault=\"true\" on the button. This is done to prevent other views from gaining focus by default, which could intercept the space bar key press event. Testing on Emulators and Devices When it comes to testing on large screens, we found the Desktop emulator to be the most suitable option. The key benefit is its ability to swiftly resize the app window, mirroring the actions performed on a typical device. This allows us to test responsive behavior on different devices like phones, tablets, and desktops. Google also offers support for emulators designed for foldable devices. These emulators can be useful for preliminary testing. However, we mostly relied on a physical device, the Samsung Fold, to conduct tests for foldable devices, as it proved to be more accurate. Lastly, to ensure our app supports hover states and keyboard operations efficiently, we used the Samsung S7+ equipped with an S Pen and Keyboard Bundle. This allowed us to simulate an environment similar to a laptop or a tablet with a keyboard. Conclusion Our journey to optimizing for large screens was filled with exciting challenges and insightful discoveries. We realized that providing a seamless experience across a variety of devices - from smartphones to tablets, desktops, TVs, foldables and more - was more than just stretching our existing user interface. It was about reimagining and reconfiguring every element and interaction to deliver a superior music streaming experience. In addressing the various UI and UX challenges, we found that each element of our service had the potential to be adapted and improved. We reworked our Player and Search screen, redesigned the Artist screen layout, and made sure that keyboard navigation and hover states were smoothly implemented. This process of continuous improvement reinforced to us how important it is to stay flexible in the face of evolving trends. As technology continues to change and expand, we are committed to staying ahead, making sure that SoundCloud remains the leading choice for music streaming, no matter the device.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2\u003eLarge Screen Devices - The New Frontier\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://developers.soundcloud.com/blog/49926d7e44d44ca3f84a67148412ba7b/after_vid_.gif\" alt=\"SoundCloud large screen optimized\"/\u003e\u003c/p\u003e\n\u003cp\u003eRecently, the Android team at SoundCloud took on a project to optimize the Android app for large screen devices. With the increasing use of devices like tablets, foldables, and Chromebooks, we decided to provide better support for them.\u003c/p\u003e\n\u003cp\u003eThe data showed us users were adopting these devices rapidly. What is more, both Google and Samsung had been vocal about the importance of optimizing for larger screens.\u003c/p\u003e\n\u003cp\u003eGoogle is even launching a new \u003ca href=\"https://android-developers.googleblog.com/2023/07/introducing-new-play-store-for-large-screens.html?m=1r\"\u003ePlaystore\u003c/a\u003e for large screen optimized apps only.\u003c/p\u003e\n\u003cp\u003eIn this blog post, we’ll go through some of the challenges we faced, the UX and UI changes we made, and the code implementation. We hope our experiences will help you in your own large-screen adventures.\u003c/p\u003e\n\u003ch2\u003eWhy did we invest in Large Screens?\u003c/h2\u003e\n\u003cp\u003eWe saw a trend among our users - more and more of them were using SoundCloud on their tablets, foldable devices, and Chromebooks. And it wasn’t just happening in \u003cem\u003eour\u003c/em\u003e user base. Google and Samsung have been going all-in on large screens, bringing them more into the mainstream.\u003c/p\u003e\n\u003cp\u003eWhen Google rolled out their Pixel Tablet, well-known tech reviewer Marques Brownlee pointed out that SoundCloud stood out from the crowd. He appreciated that we didn’t just stretch our phone app to fit the larger screen, but instead, we crafted an experience that fully utilized the extra space. If you’re interested, you can check out the video \u003ca href=\"https://www.youtube.com/watch?v=aTf7AMVOoDY\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eOur Investigation\u003c/h2\u003e\n\u003ch3\u003eWhere and how is music on large screens heard?\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eFun fact\u003c/strong\u003e: People listen to music on their Tablets mostly while cooking.\u003c/p\u003e\n\u003cp\u003eImagine you’re in the middle of preparing a meal, your hands are busy, but you can still easily control your music - that’s convenience at its best.\u003c/p\u003e\n\u003cp\u003eBut it’s not just about individual experiences. Tablets come into play during social events as well. The larger screen makes it simpler for everyone to engage with the music, whether it’s to see what’s currently playing or to add their favorite track to the queue.\u003c/p\u003e\n\u003cp\u003eThrough understanding these usage scenarios, we can better tailor our services to enhance the music listening experiences of our users. Be it cooking dinner or hosting a gathering, SoundCloud is there to make those moments even better with great music.\u003c/p\u003e\n\u003ch2\u003eGoogle’s and Samsung’s Large Screens Guide\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://developer.android.com/large-screens/\"\u003eGoogle’s\u003c/a\u003e and \u003ca href=\"https://developer.samsung.com/one-ui/foldable-and-largescreen/intro.html\"\u003eSamsung’s\u003c/a\u003e large screen guides are roadmaps for developers wanting to optimize their apps for large screens. It encourages using scalable images and responsive and dynamic layouts for a consistent user experience across different screen sizes.\u003c/p\u003e\n\u003cp\u003eGoogle also highlights using the extra space for features like split-screen views, and emphasizes touch target sizing, clear text, and intuitive navigation. Following these best practices ensures apps are user-friendly and competitive in the large screen devices market.\u003c/p\u003e\n\u003ch2\u003eGoogle’s Large Screen Compatibility Checklist\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://developer.android.com/docs/quality-guidelines/large-screen-app-quality\"\u003eGoogle’s Large Screen Checklist\u003c/a\u003e, available in their Android developer documentation, provides developers with a \u003cstrong\u003etier-based framework\u003c/strong\u003e for ensuring high-quality app experiences on large screen devices. The checklist encompasses not only UI design but also considerations for navigation, keyboard/stylus input, and overall app usage.\u003c/p\u003e\n\u003cp\u003eThe checklist is divided into tiers, offering developers a structured approach to prioritize and implement essential features and optimizations based on the level of support desired for large screen devices. The tiers range from basic support to more advanced features and functionalities that fully leverage the potential of large screens.\u003c/p\u003e\n\u003ch2\u003eThe SoundCloud App\u003c/h2\u003e\n\u003cp\u003eWhen we reviewed Google’s checklist it was clear that the SoundCloud app fell short in certain areas, particularly in terms of adapting the screen layout. The app’s tendency to merely stretch the phone layout to fit larger screens resulted in a less than optimal user interface. This realization was our call to action.\u003c/p\u003e\n\u003cp\u003eIn the upcoming sections, we’ll take you on a visual tour of these components, accompanied by code snippets and technical explanations to provide you with an inside look at our optimization process.\u003c/p\u003e\n\u003ch3\u003eBottom Navigation Bar\u003c/h3\u003e\n\u003cp\u003eBefore: ❌ \u003cstrong\u003eHorizontally stretched phone layout bottom navigation bar\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/c475858b665c881f250318b6bfdb3de9/2e21e/nav_before.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Before\" title=\"Before\" src=\"https://developers.soundcloud.com/blog/static/c475858b665c881f250318b6bfdb3de9/8ff1e/nav_before.png\" srcset=\"https://developers.soundcloud.com/blog/static/c475858b665c881f250318b6bfdb3de9/9ec3c/nav_before.png 200w,\nhttps://developers.soundcloud.com/blog/static/c475858b665c881f250318b6bfdb3de9/c7805/nav_before.png 400w,\nhttps://developers.soundcloud.com/blog/static/c475858b665c881f250318b6bfdb3de9/8ff1e/nav_before.png 800w,\nhttps://developers.soundcloud.com/blog/static/c475858b665c881f250318b6bfdb3de9/6ff5e/nav_before.png 1200w,\nhttps://developers.soundcloud.com/blog/static/c475858b665c881f250318b6bfdb3de9/2e21e/nav_before.png 1333w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eTraditionally, SoundCloud’s Android app utilized a bottom navigation bar in a phone layout, which was stretched horizontally to fit larger screen sizes. This approach was straightforward, but it proved ineffective for larger screens. The extended navigation bar made it difficult for users to navigate the app, as it required them to move their focus from one end of the screen to the other.\u003c/p\u003e\n\u003cp\u003eAfter: ✅ \u003cstrong\u003eNav bar rail optimized for large screens\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/13e9bbfb388b3e17460827288d4cb7a0/2e21e/nav_after_home.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"After\" title=\"After\" src=\"https://developers.soundcloud.com/blog/static/13e9bbfb388b3e17460827288d4cb7a0/8ff1e/nav_after_home.png\" srcset=\"https://developers.soundcloud.com/blog/static/13e9bbfb388b3e17460827288d4cb7a0/9ec3c/nav_after_home.png 200w,\nhttps://developers.soundcloud.com/blog/static/13e9bbfb388b3e17460827288d4cb7a0/c7805/nav_after_home.png 400w,\nhttps://developers.soundcloud.com/blog/static/13e9bbfb388b3e17460827288d4cb7a0/8ff1e/nav_after_home.png 800w,\nhttps://developers.soundcloud.com/blog/static/13e9bbfb388b3e17460827288d4cb7a0/6ff5e/nav_after_home.png 1200w,\nhttps://developers.soundcloud.com/blog/static/13e9bbfb388b3e17460827288d4cb7a0/2e21e/nav_after_home.png 1333w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eTo remedy this, we adopted a vertical navigation rail for large screen layouts, aligning it to the side of the screen. This is recommended by Google as it provides a more comfortable browsing experience. The menu options are now neatly stacked in a column, making them accessible without the need for extensive eye or cursor movement.\u003c/p\u003e\n\u003ch3\u003eCode Implementation\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eBefore: BottomNavigationView\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003ePreviously, the SoundCloud Android app used a \u003ccode\u003eBottomNavigationView\u003c/code\u003e to create the bottom navigation bar. This worked well on smaller devices but led to a stretched UI on larger screens.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAfter: NavigationRailView\u003c/strong\u003e \u003c/p\u003e\n\u003cp\u003eTo address this, we replaced the \u003ccode\u003eBottomNavigationView\u003c/code\u003e with \u003ccode\u003eNavigationRailView\u003c/code\u003e for larger screens. Both these classes implement the \u003ccode\u003eNavigationBarView\u003c/code\u003e interface. This allows for a smooth transition with minimal code changes.\u003c/p\u003e\n\u003cp\u003eTo differentiate between smaller and larger screens, we created two separate layout files. One uses the \u003ccode\u003eBottomNavigationView\u003c/code\u003e, and the other uses the \u003ccode\u003eNavigationRailView\u003c/code\u003e. In Kotlin, we dynamically set the layout file based on the size of the device.\u003c/p\u003e\n\u003ch3\u003eIdentifying Large Devices\u003c/h3\u003e\n\u003cp\u003eWe identify whether a device is large or small by using a boolean variable, \u003ccode\u003eis_tablet\u003c/code\u003e, defined in three separate XML value files based on the screen width.\u003c/p\u003e\n\u003cdiv data-language=\"text\"\u003e\u003cpre\u003e\u003ccode\u003e// res/values-sw600dp/booleans.xml\n\u0026lt;bool name=\u0026#34;is_tablet\u0026#34;\u0026gt;true\u0026lt;/bool\u0026gt;\n\n// res/values-sw370dp/booleans.xml\n\u0026lt;bool name=\u0026#34;is_tablet\u0026#34;\u0026gt;false\u0026lt;/bool\u0026gt;\n\n// res/values/booleans.xml\n\u0026lt;bool name=\u0026#34;is_tablet\u0026#34;\u0026gt;false\u0026lt;/bool\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn Kotlin, we check the \u003ccode\u003eis_tablet\u003c/code\u003e boolean value and set the layout file accordingly. This is done using the following code:\u003c/p\u003e\n\u003cdiv data-language=\"text\"\u003e\u003cpre\u003e\u003ccode\u003eval isTablet = context.resources.getBoolean(R.bool.is_tablet)\n\nif(isTablet) {\n    setContentView(R.layout.tablet_layout)\n} else {\n    setContentView(R.layout.phone_layout)\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHardcoding resources is not the best solution. Google’s documentation provides some great insights on supporting different screen sizes, including the concept of Window Size Classes. Window Sizes allow the UI to adapt to various window configurations on foldable and large screen devices. Here’s the link for more details: \u003ca href=\"https://developer.android.com/guide/topics/large-screens/support-different-screen-sizes\"\u003eWindow Size Classes\u003c/a\u003e.\u003c/p\u003e\n\u003ch3\u003eUnit Testing and A/B Testing\u003c/h3\u003e\n\u003cp\u003eTo enable testing, we added a wrapper class around the \u003ccode\u003eisTablet\u003c/code\u003e boolean. We also leveraged feature flags to conduct A/B testing of our new layout. We introduced a class \u003ccode\u003eNavRailExperiment\u003c/code\u003e to check both the device type and the feature flag state:\nHere’s a look at our implementation of this approach:\u003c/p\u003e\n\u003cdiv data-language=\"text\"\u003e\u003cpre\u003e\u003ccode\u003eclass NavRailExperiment(private val appFeatures: AppFeatures) {\n    val isEnabled: Boolean\n        get() = context.resources.getBoolean(R.bool.is_tablet) \u0026amp;\u0026amp; appFeatures.isNavRailEnabled()\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eMini Player\u003c/h2\u003e\n\u003cp\u003eTransitioning from a Stretched Phone Layout Mini Player to a Right-Aligned Mini Player\u003c/p\u003e\n\u003cp\u003eBefore: ❌ \u003cstrong\u003eHorizontally stretched phone layout Mini Player\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/db8d1462c7be8c5a7e441da0c1c48304/2e21e/before_mini_player.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Before\" title=\"Before\" src=\"https://developers.soundcloud.com/blog/static/db8d1462c7be8c5a7e441da0c1c48304/8ff1e/before_mini_player.png\" srcset=\"https://developers.soundcloud.com/blog/static/db8d1462c7be8c5a7e441da0c1c48304/9ec3c/before_mini_player.png 200w,\nhttps://developers.soundcloud.com/blog/static/db8d1462c7be8c5a7e441da0c1c48304/c7805/before_mini_player.png 400w,\nhttps://developers.soundcloud.com/blog/static/db8d1462c7be8c5a7e441da0c1c48304/8ff1e/before_mini_player.png 800w,\nhttps://developers.soundcloud.com/blog/static/db8d1462c7be8c5a7e441da0c1c48304/6ff5e/before_mini_player.png 1200w,\nhttps://developers.soundcloud.com/blog/static/db8d1462c7be8c5a7e441da0c1c48304/2e21e/before_mini_player.png 1333w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eIn the past, SoundCloud’s Android app featured a Mini Player stretched horizontally across the screen. While this design worked for smaller screens, it resulted in a suboptimal user experience on larger devices due to the extended reach required to interact with it.\u003c/p\u003e\n\u003cp\u003eAfter: ✅ \u003cstrong\u003eSmall right-aligned Mini Player optimized for large screens\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/498099e599a4bc9f37ca666f575b477e/2e21e/after_mini_player.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"After\" title=\"After\" src=\"https://developers.soundcloud.com/blog/static/498099e599a4bc9f37ca666f575b477e/8ff1e/after_mini_player.png\" srcset=\"https://developers.soundcloud.com/blog/static/498099e599a4bc9f37ca666f575b477e/9ec3c/after_mini_player.png 200w,\nhttps://developers.soundcloud.com/blog/static/498099e599a4bc9f37ca666f575b477e/c7805/after_mini_player.png 400w,\nhttps://developers.soundcloud.com/blog/static/498099e599a4bc9f37ca666f575b477e/8ff1e/after_mini_player.png 800w,\nhttps://developers.soundcloud.com/blog/static/498099e599a4bc9f37ca666f575b477e/6ff5e/after_mini_player.png 1200w,\nhttps://developers.soundcloud.com/blog/static/498099e599a4bc9f37ca666f575b477e/2e21e/after_mini_player.png 1333w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eTo provide a more user-friendly interface we opted for a small Mini Player on the right side of the screen. This ensures controls are comfortably within thumb reach.\u003c/p\u003e\n\u003ch3\u003eCode Implementation\u003c/h3\u003e\n\u003cp\u003eThe Player is a BottomSheet with a ViewPager, the Mini Player is a view inside each page of the ViewPager. We use a \u003ccode\u003eBottomSheetBehavior\u003c/code\u003e to support  collapsed and expanded states. In the expanded state the player shows the full width and height of the ViewPager.\nIn collapsed state it shows only the Mini Player view, and the height is collapsed to 50dp. The width was always \u003ccode\u003ematch_parent\u003c/code\u003e, but since we want it to be small, we set the width of the \u003ccode\u003eBottomSheet\u003c/code\u003e to \u003ccode\u003e200dp\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe class \u003ccode\u003eBottomSheetBehavior\u003c/code\u003e provides us with a method \u003ccode\u003esetMaxWidth\u003c/code\u003e which we use to set the width while animating the collapse and expansion of the BottomSheet Player.\nThe other issue here is that we also have to set the width on the ViewPager and the ViewPager’s visible page.\nAdditionally, we must move the player to the right side thus setting the left margin on layout params on each player transition.\u003c/p\u003e\n\u003cp\u003eThe\u003ccode\u003eBottomSheetBehavior\u003c/code\u003e also has a \u003ccode\u003eBottomSheetBehavior.BottomSheetCallback\u003c/code\u003e field.\nThe \u003ccode\u003eBottomSheetBehavior.BottomSheetCallback\u003c/code\u003e has an onSlide method which allows us to set the width and left margin on the \u003ccode\u003eBottomSheet\u003c/code\u003e and the \u003ccode\u003eViewPager\u003c/code\u003e’s visible page.\u003c/p\u003e\n\u003cp\u003eBelow is the code: \u003c/p\u003e\n\u003cdiv data-language=\"text\"\u003e\u003cpre\u003e\u003ccode\u003ebottomSheetBehavior.bottomSheetCallback = BottomSheetBehavior.BottomSheetCallback() {         \n    val miniplayerWidth = screenWidth * offset\n    val leftMargin = screenWidth - miniplayerWidth\n        \n    setLeftMargin(viewPager.views(), leftMargin)\n        \n    setWidth(viewPager.views(), bottomSheet, miniplayerWidth)\n};\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2\u003eComments \u0026amp; Playqueue on Player\u003c/h2\u003e\n\u003cp\u003eThe SoundCloud Android app hosts two main features on its player screen - the comments and the Playqueue. Before, when a user accessed either of these features, a new screen would open, occupying the entire display and obstructing interaction with the player.\u003c/p\u003e\n\u003cp\u003eBefore: ❌ \u003cstrong\u003eHorizontally stretched phone comments layout\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/8b984/before_comments.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Before Comments\" title=\"Before Comments\" src=\"https://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/8ff1e/before_comments.png\" srcset=\"https://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/9ec3c/before_comments.png 200w,\nhttps://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/c7805/before_comments.png 400w,\nhttps://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/8ff1e/before_comments.png 800w,\nhttps://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/6ff5e/before_comments.png 1200w,\nhttps://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/2f950/before_comments.png 1600w,\nhttps://developers.soundcloud.com/blog/static/19374224f0bdc7ef165020ac60d56db3/8b984/before_comments.png 2560w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eBefore: ❌ \u003cstrong\u003eHorizontally stretched phone playqueue layout\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/8b984/before_playqueue.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Before Playqueue\" title=\"Before Playqueue\" src=\"https://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/8ff1e/before_playqueue.png\" srcset=\"https://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/9ec3c/before_playqueue.png 200w,\nhttps://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/c7805/before_playqueue.png 400w,\nhttps://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/8ff1e/before_playqueue.png 800w,\nhttps://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/6ff5e/before_playqueue.png 1200w,\nhttps://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/2f950/before_playqueue.png 1600w,\nhttps://developers.soundcloud.com/blog/static/7a887c6c3962884e45e3367c0309b415/8b984/before_playqueue.png 2560w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eWe revamped this experience in the following ways: Instead of taking up the whole screen, the Comments and Playqueue sections now open on the right side of the player. This allows users to engage with these features and interact with the player simultaneously.\u003c/p\u003e\n\u003cp\u003eAdditionally, the buttons to access the comments and Playqueue were originally at the bottom of the screen. To increase accessibility and free up space at the bottom, we moved them to the left side.\u003c/p\u003e\n\u003cp\u003eAfter: ✅ \u003cstrong\u003eRight-aligned comments optimized for large screen\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/8b984/after_comments.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"After Comments\" title=\"After Comments\" src=\"https://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/8ff1e/after_comments.png\" srcset=\"https://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/9ec3c/after_comments.png 200w,\nhttps://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/c7805/after_comments.png 400w,\nhttps://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/8ff1e/after_comments.png 800w,\nhttps://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/6ff5e/after_comments.png 1200w,\nhttps://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/2f950/after_comments.png 1600w,\nhttps://developers.soundcloud.com/blog/static/3184394bbe2a94f7516f6486199f2b0a/8b984/after_comments.png 2560w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eAfter: ✅ \u003cstrong\u003eRight-aligned playqueue optimized for large screen\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/8b984/after_playqueue.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"After Playqueue\" title=\"After Playqueue\" src=\"https://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/8ff1e/after_playqueue.png\" srcset=\"https://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/9ec3c/after_playqueue.png 200w,\nhttps://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/c7805/after_playqueue.png 400w,\nhttps://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/8ff1e/after_playqueue.png 800w,\nhttps://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/6ff5e/after_playqueue.png 1200w,\nhttps://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/2f950/after_playqueue.png 1600w,\nhttps://developers.soundcloud.com/blog/static/72076ee0eca4a4ae0974d95592447184/8b984/after_playqueue.png 2560w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eRepositioning the UI elements in this way contributes to a more ergonomic and intuitive user experience on larger screens, reinforcing our commitment to delivering the best listening experience across all devices.\u003c/p\u003e\n\u003ch3\u003eAddressing User Experience (UX) Challenges\u003c/h3\u003e\n\u003cp\u003eOur changes to the UI introduced some UX challenges, especially related to the comments feature. Two major questions emerged:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhen a track changes, should the comments update to correspond to the new track, or should it continue displaying comments from the previous track?\u003c/li\u003e\n\u003cli\u003eWhat should happen to a comment a user is currently writing if the track changes?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo tackle the first issue, we opted to update the comments to align with the new track. We believe this adjustment is more in line with user expectations, as it helps keep the entire screen contextually relevant.\u003c/p\u003e\n\u003cp\u003eFor the second scenario, we implemented a solution where the comments section doesn’t update if the text field is currently in focus. This prevents any in-progress comments being lost, thereby providing a more user-friendly commenting experience.\u003c/p\u003e\n\u003ch3\u003eCode Implementation\u003c/h3\u003e\n\u003cp\u003eTo integrate the comments and Playqueue screens over the player, we introduced a new \u003ccode\u003eFrameLayout\u003c/code\u003e named \u003ccode\u003eplayer_side_fragment_holder\u003c/code\u003e. This frame holds the additional features and ensures they are displayed without disrupting the main player.\u003c/p\u003e\n\u003cp\u003eThis side fragment holder is positioned above the player and is assigned a transparent background along with a width of 400dp. Consequently, when the user taps on the comments or Playqueue button, the respective screen appears over the player. This is made possible by a secondary \u003ccode\u003eFragmentManager\u003c/code\u003e which adds either the \u003ccode\u003eCommentsFragment\u003c/code\u003e or the \u003ccode\u003ePlayqueueFragment\u003c/code\u003e to the \u003ccode\u003eFrameLayout\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere’s how the layout is structured:\u003c/p\u003e\n\u003cdiv data-language=\"xml\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eFrameLayout\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003ePlayer\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eFrameLayout\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/player_side_fragment_holder\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e400dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_gravity\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eright\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eFrameLayout\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn this layout configuration, the \u003ccode\u003eplayer_side_fragment_holder\u003c/code\u003e is specified to align on the right side, allowing it to overlay the player when comments or the Playqueue are invoked. This approach ensures that the main player remains interactive while users are interacting with these features.\u003c/p\u003e\n\u003ch2\u003eSearch\u003c/h2\u003e\n\u003cp\u003eIn our drive to optimize the large screen experience, we revamped the search screen to offer both search suggestions and top results side by side. The updated design splits the screen into two sections when users begin a search. One side displays real-time search suggestions, while the other showcases the top results. This allows users to compare suggestions and top results instantly, leading to a more seamless and enriched search experience.\u003c/p\u003e\n\u003cp\u003eBefore: ❌ \u003cstrong\u003eHorizontally stretched search suggestions\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/8b984/before_search.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Before\" title=\"Before\" src=\"https://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/8ff1e/before_search.png\" srcset=\"https://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/9ec3c/before_search.png 200w,\nhttps://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/c7805/before_search.png 400w,\nhttps://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/8ff1e/before_search.png 800w,\nhttps://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/6ff5e/before_search.png 1200w,\nhttps://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/2f950/before_search.png 1600w,\nhttps://developers.soundcloud.com/blog/static/c298f1017b36e2595b16b92b46094967/8b984/before_search.png 2560w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eAfter: ✅ \u003cstrong\u003eSplit search suggestions and search results\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/8b984/after_search.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"After\" title=\"After\" src=\"https://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/8ff1e/after_search.png\" srcset=\"https://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/9ec3c/after_search.png 200w,\nhttps://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/c7805/after_search.png 400w,\nhttps://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/8ff1e/after_search.png 800w,\nhttps://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/6ff5e/after_search.png 1200w,\nhttps://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/2f950/after_search.png 1600w,\nhttps://developers.soundcloud.com/blog/static/ed5a8acfc859406cbe248bb2dca3e1d4/8b984/after_search.png 2560w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003eCode Implementation\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eCode Implementation for Split Search Screen\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn order to implement our split-screen search feature, we use \u003ccode\u003eConstraintLayout\u003c/code\u003e. This offers the ability to create layouts based on percentages, which we use to divide the screen between search suggestions and top results.\u003c/p\u003e\n\u003cp\u003eTo split the screen, we defined a width constraint of 40% for the search suggestions, leaving the remaining 60% for the top results:\u003c/p\u003e\n\u003cdiv data-language=\"xml\"\u003e\u003cpre\u003e\u003ccode\u003eapp:layout_constraintWidth_default=\u0026#34;percent\u0026#34;\napp:layout_constraintWidth_percent=\u0026#34;.4\u0026#34;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere is the full code for the side-by-side layout:\u003c/p\u003e\n\u003cdiv data-language=\"xml\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eandroidx.constraintlayout.widget.ConstraintLayout\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eFrameLayout\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/search_container\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e0dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintWidth_default\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003epercent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintWidth_percent\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e.4\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintBottom_toBottomOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintStart_toStartOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintTop_toTopOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n        \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eandroidx.fragment.app.FragmentContainerView\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/search_suggestions\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n            \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ematch_parent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eFrameLayout\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n    \u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003eandroidx.recyclerview.widget.RecyclerView\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@+id/section_results_top_items\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_width\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e0dp\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eandroid:\u003c/span\u003elayout_height\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003ewrap_content\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintBottom_toBottomOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintEnd_toEndOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintStart_toEndOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e@id/search_container\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003eapp:\u003c/span\u003elayout_constraintTop_toTopOf\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eparent\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003eandroidx.constraintlayout.widget.ConstraintLayout\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis layout allocates 40% of the screen width to a \u003ccode\u003eFrameLayout\u003c/code\u003e which houses the search suggestions, while the remaining space is assigned to a \u003ccode\u003eRecyclerView\u003c/code\u003e for displaying top results. The constraints ensure the proper positioning and responsiveness of these elements, providing a dynamic, user-friendly search interface.\u003c/p\u003e\n\u003ch2\u003eArtist\u003c/h2\u003e\n\u003cp\u003eOur previous design for the Artist screen wasn’t well-optimized for larger screens. The result was a horizontally stretched layout with excessive padding and white space around the artist details. As a consequence, users had to scroll vertically to access tracks or albums from the artist.\u003c/p\u003e\n\u003cp\u003eBefore: ❌ \u003cstrong\u003eStretched artist profile\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/8b984/before_artist.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Before\" title=\"Before\" src=\"https://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/8ff1e/before_artist.png\" srcset=\"https://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/9ec3c/before_artist.png 200w,\nhttps://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/c7805/before_artist.png 400w,\nhttps://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/8ff1e/before_artist.png 800w,\nhttps://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/6ff5e/before_artist.png 1200w,\nhttps://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/2f950/before_artist.png 1600w,\nhttps://developers.soundcloud.com/blog/static/da9926b27e5fefb202eeea7723d2dc2a/8b984/before_artist.png 2560w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/8b984/before_artist_1.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Before Page 2\" title=\"Before Page 2\" src=\"https://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/8ff1e/before_artist_1.png\" srcset=\"https://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/9ec3c/before_artist_1.png 200w,\nhttps://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/c7805/before_artist_1.png 400w,\nhttps://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/8ff1e/before_artist_1.png 800w,\nhttps://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/6ff5e/before_artist_1.png 1200w,\nhttps://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/2f950/before_artist_1.png 1600w,\nhttps://developers.soundcloud.com/blog/static/b3626ab90587e09b1591b266cab88e68/8b984/before_artist_1.png 2560w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eTo improve this, we took advantage of the space available on larger screens. We moved the Artist details to the left side of the screen and displayed them more compactly. This makes all the necessary information immediately visible and reduces unnecessary scrolling.\u003c/p\u003e\n\u003cp\u003eSimultaneously, the right side of the screen is dedicated to displaying the artist’s tracks and albums. This clear separation of content means that users can quickly view and interact with the artist’s music. Through this design, we’ve been able to optimize space and present a well-structured layout that enhances the navigation and interaction for our users on large screen devices.\u003c/p\u003e\n\u003cp\u003eAfter: ✅ \u003cstrong\u003eCompact artist profile\u003c/strong\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/8b984/after_artist.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"After\" title=\"After\" src=\"https://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/8ff1e/after_artist.png\" srcset=\"https://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/9ec3c/after_artist.png 200w,\nhttps://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/c7805/after_artist.png 400w,\nhttps://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/8ff1e/after_artist.png 800w,\nhttps://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/6ff5e/after_artist.png 1200w,\nhttps://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/2f950/after_artist.png 1600w,\nhttps://developers.soundcloud.com/blog/static/b752ae17a90a4cfe30dba209d5ad8ed7/8b984/after_artist.png 2560w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003eKeyboard Tab Navigation\u003c/h2\u003e\n\u003cp\u003eWe needed to support keyboard tab navigation for devices that have keyboards attached. You can easily test your apps by connecting a bluetooth keyboard.\u003c/p\u003e\n\u003cp\u003eIf you are using \u003ccode\u003eAppBarLayout\u003c/code\u003e you might end up not navigating through the toolbar icons.\nWe had to set \u003ccode\u003etouchscreenBlocksFocus = false\u003c/code\u003e to our \u003ccode\u003eAppBarLayout\u003c/code\u003e in order to allow navigating through the toolbar icons.\u003c/p\u003e\n\u003cp\u003eAt first, we had problems navigating the player using a keyboard. The default navigation did not work correctly so we had to force set the navigation flow.\nTo do this we use the \u003ca href=\"https://developer.android.com/develop/ui/views/touch-and-input/keyboard-input/navigation\"\u003exml attribute\u003c/a\u003e \u003ccode\u003eandroid:nextFocusForward\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eFor better understanding, here’s the specified order for tab key navigation in the player:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFirst, the focus lands on the artist’s name.\u003c/li\u003e\n\u003cli\u003eThen, it moves to the track name.\u003c/li\u003e\n\u003cli\u003eNext, it goes to the option to minimize the player.\u003c/li\u003e\n\u003cli\u003eAfter that, it directs to the ‘Follow artist’ option.\u003c/li\u003e\n\u003cli\u003eIt subsequently moves through options like ‘Like’, ‘Comments’, ‘Share’, ‘Playqueue’, and ‘More’ buttons.\u003c/li\u003e\n\u003cli\u003eLastly, it settles on the ‘Play/Pause’ button.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eSpace bar toggles playback - Only for media playback apps\u003c/h2\u003e\n\u003cp\u003eOne of the requirements from Google is to support playback toggling through the space bar key. This feature allows users to play or pause music just by hitting the space bar on their keyboards, irrespective of their current position in the app.\u003c/p\u003e\n\u003cp\u003eThe implementation of this functionality can be achieved by overriding the \u003ccode\u003eonKeyUp\u003c/code\u003e method. On detection of a key press, it verifies if the pressed key corresponds to the space bar, and if so it toggles the playback and returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn all the \u003ccode\u003eActivity\u003c/code\u003e classes where the play/pause button is present, the \u003ccode\u003eonKeyUp\u003c/code\u003e method is overridden as shown below:\u003c/p\u003e\n\u003cdiv data-language=\"kotlin\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eonKeyUp\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ekeyCode\u003cspan\u003e:\u003c/span\u003e Int\u003cspan\u003e,\u003c/span\u003e event\u003cspan\u003e:\u003c/span\u003e KeyEvent\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e Boolean \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003etakeKeyEvents\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ekeyCode \u003cspan\u003e==\u003c/span\u003e KeyEvent\u003cspan\u003e.\u003c/span\u003eKEYCODE_SPACE\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003etrue\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonKeyUp\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ekeyCode\u003cspan\u003e,\u003c/span\u003e event\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt’s worth noting that we used the \u003ccode\u003etakeKeyEvents(true)\u003c/code\u003e method to ensure that the current activity can handle key events.\u003c/p\u003e\n\u003cp\u003eFinally, to make sure the play/pause button is the default focus, we set \u003ccode\u003eandroid:focusedByDefault=\u0026#34;true\u0026#34;\u003c/code\u003e on the button. This is done to prevent other views from gaining focus by default, which could intercept the space bar key press event.\u003c/p\u003e\n\u003ch2\u003eTesting on Emulators and Devices\u003c/h2\u003e\n\u003cp\u003eWhen it comes to testing on large screens, we found the Desktop emulator to be the most suitable option. The key benefit is its ability to swiftly resize the app window, mirroring the actions performed on a typical device. This allows us to test responsive behavior on different devices like phones, tablets, and desktops.\u003c/p\u003e\n\u003cp\u003eGoogle also offers support for emulators designed for foldable devices. These emulators can be useful for preliminary testing. However, we mostly relied on a physical device, the Samsung Fold, to conduct tests for foldable devices, as it proved to be more accurate.\u003c/p\u003e\n\u003cp\u003eLastly, to ensure our app supports hover states and keyboard operations efficiently, we used the Samsung S7+ equipped with an S Pen and Keyboard Bundle. This allowed us to simulate an environment similar to a laptop or a tablet with a keyboard.\u003c/p\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eOur journey to optimizing for large screens was filled with exciting challenges and insightful discoveries. We realized that providing a seamless experience across a variety of devices - from smartphones to tablets, desktops, TVs, foldables and more - was more than just stretching our existing user interface. It was about reimagining and reconfiguring every element and interaction to deliver a superior music streaming experience.\u003c/p\u003e\n\u003cp\u003eIn addressing the various UI and UX challenges, we found that each element of our service had the potential to be adapted and improved. We reworked our Player and Search screen, redesigned the Artist screen layout, and made sure that keyboard navigation and hover states were smoothly implemented. This process of continuous improvement reinforced to us how important it is to stay flexible in the face of evolving trends.\u003c/p\u003e\n\u003cp\u003eAs technology continues to change and expand, we are committed to staying ahead, making sure that SoundCloud remains the leading choice for music streaming, no matter the device.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "22 min read",
  "publishedTime": null,
  "modifiedTime": null
}
