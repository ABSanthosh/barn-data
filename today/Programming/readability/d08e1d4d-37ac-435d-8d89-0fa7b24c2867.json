{
  "id": "d08e1d4d-37ac-435d-8d89-0fa7b24c2867",
  "title": "Obvious Ownership: A Sensible Humane Registry",
  "link": "https://developers.soundcloud.com/blog/obvious-ownership-humane-registry",
  "description": "Imagine yourself as an engineer who just joined SoundCloud. Besides meeting your colleagues and getting your new laptop, badge, and that…",
  "author": "",
  "published": "Thu, 06 Jan 2022 00:00:00 GMT",
  "source": "https://developers.soundcloud.com/blog/blog.rss",
  "categories": null,
  "byline": "",
  "length": 7365,
  "excerpt": "Imagine yourself as an engineer who just joined SoundCloud. Besides meeting your colleagues and getting your new laptop, badge, and that cool branded hoodie, the first weeks at work will be about exploration. Onboarding involves a lot of “looking around”: finding mentorship, getting to know the company’s culture, and exploring codebases — and most likely, you’ll want to contribute code too! The first question you might ask is “What do I even work on?”. With time, you’ll identify a few sibling…",
  "siteName": "",
  "favicon": "",
  "text": "Imagine yourself as an engineer who just joined SoundCloud. Besides meeting your colleagues and getting your new laptop, badge, and that cool branded hoodie, the first weeks at work will be about exploration. Onboarding involves a lot of “looking around”: finding mentorship, getting to know the company’s culture, and exploring codebases — and most likely, you’ll want to contribute code too! The first question you might ask is “What do I even work on?”. With time, you’ll identify a few sibling teams you interact with often — because you either consume their data or provide them with yours. So now, it’s important to know not only what you work on, but also which folks depend on you, and vice versa. As SoundCloud has grown rapidly — both in the number of people and in software — we’ve identified “Who owns X?” as a recurring question coming primarily from new joiners, but also from tenured folks. You can imagine how this information can also be useful to an EM advocating for more people on their team, or to an incident-response team when diagnosing an outage scenario. We needed an obvious way to consult system ownership, so we decided to build a humane registry. Humane Registries If you’ve been around service-oriented architecture (SOA) before, you may have heard of service directories. The WS-* standard for them is called Universal Description, Discovery and Integration (UDDI), and it’s a complicated mix of service discovery and human readable information. A snippet from a classic book describes UDDI: “At its core, UDDI consists of two parts (…) a technical specification for building a distributed directory of businesses and web services [that] enables anyone to search [its] data. It also enables any company to register itself and its services. The data captured within UDDI is divided into three main categories: White pages: This includes general information about a specific company—for example, business name, business description, contact information, address and phone numbers. Yellow pages: This includes general classification data for either the company or the service offered. For example, this data may include industry, product, or geographic codes based on standard taxonomies. Green pages: This category contains technical information about a web service. Generally, this includes a pointer to an external specification and an address for invoking the web service (…) UDDI can be used to describe any service, from a single web page or email address all the way up to SOAP, CORBA, and Java RMI services.” Humane registries play a similar role, but they focus on human-readable information. These systems are pretty much what OpenHub does, i.e. automatically derive as much information as possible from a project based on its code and metadata, and add a layer of prose via wiki-like tools. The whole point is that a humane registry acknowledges that while automation and APIs are crucial for an SOA architecture, people talking to each other is still the most important and effective collaboration we have. The registry helps start effective conversations; it doesn’t try to eliminate them. Services Directory When planning our implementation, we had a single requirement: The registry must enable finding out which systems a team owns and who the owners of given systems are. As a stretch goal, we were also interested in exposing dependencies across systems and teams. To deliver, we introduced the concept of “manifest files,” which would serve as entity metadata descriptors: Each code repository should have at least one manifest file. Naturally, one of the fields in the manifest file would be the owner team for that specific software piece. These files would then be ingested by the registry on a recurring basis, in order to form an up-to-date software-catalog graph that could then be rendered into the registry’s UI: { \"_schema\": \"soundcloud/applicationmanifest/v1\", \"name\": \"periskop\", \"description\": \"Language agnostic exception aggregator for microservice environments.\", \"owner\": \"engineering-productivity-team\", \"type\": \"tool\", \"status\": \"production\" } Our humane registry was named Services Directory. Of course, later on we learned we were interested in cataloguing more than just services. More Automation: A Schema Definition By introducing manifest files and ingestion through a services directory, we attained our goal of having a central index for our software pieces. What we observed, though, is that maintaining correctness of the data over time became a challenge: teams get renamed, systems are handed over, etc. In addition, small things like typos, or different ways of referring to teams — as exemplified by the screenshot above with user-growth and User Growth team names — prevented our aggregation logic from providing good results. Well, there are existing technologies built specifically for the purpose of validating documents. So we began to define a vocabulary of properties our ingestion system expected, and we encoded them in a schema: { \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"title\": \"SoundCloud's Application Manifests Schema\", \"type\": \"object\", \"required\": [ \"owner\", … ], \"properties\": { \"owner\": { \"type\": \"string\" }, … } The next step was to provide a validation engine based on the predefined schema, running it against the manifest files. In the spirit of continuous delivery, we could hook that up in our CD pipelines as part of the linting stage: Our manifests would be validated against each individual change to these repositories, assuring they never drift from the schema. As a bonus, by relying on JSON Schema as a schema-description standard, we were also able to provide ahead-of-commit support (developer experience FTW) by leaning on autocompletion of popular code editors. On top of executing single-pass manifest validation, having an automated way to check for schema compliance opens the door to a more holistic view of the company’s software catalog. Services Directory ingests manifest files, checks syntactically for unwanted properties, and has the ability to report back semantically on values. It was easy to set up a validation step to compare owner values with a knowingly good list of existing teams, sourced from our LDAP server. This means a software piece with an invalid team name gets rejected in a CI environment. It also means we could provide teams with a comprehensive view of their ownership. A background job exports Prometheus metrics on the manifest validation engine, which powers a dashboard, like shown below. What Else? Ensuring code ownership visibility is just one aspect of Services Directory, our humane registry. Including manifest files as entity descriptors became ingrained in SoundCloud’s engineering culture, and as schema providers, we have a way to ensure standardization across our vast code landscape. Since introducing validation logic, we’ve seen higher engagement with Services Directory and identified it as a central piece in our developer experience tooling offering. Various teams and individuals have reached out with feature requests and integration ideas, which we’ve been partnering on to provide — we’ll share more about that in the future.",
  "image": "https://developers.soundcloud.com/blog/static/51e0fc700e6ab0fd2406bd6ccd16a4c2/647de/early-days-services-directory.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eImagine yourself as an engineer who just joined SoundCloud. Besides meeting your colleagues and getting your new laptop, badge, and that cool branded hoodie, the first weeks at work will be about \u003cem\u003eexploration\u003c/em\u003e. Onboarding involves \u003ca href=\"https://developers.soundcloud.com/blog/a-happy-new-employee\"\u003ea lot of “looking around”\u003c/a\u003e: finding mentorship, getting to know the company’s culture, and exploring codebases — and most likely, you’ll want to contribute code too!\u003c/p\u003e\n\u003cp\u003eThe first question you might ask is \u003cem\u003e“What do I even work on?”\u003c/em\u003e. With time, you’ll identify a few sibling teams you interact with often — because you either consume their data or provide them with yours. So now, it’s important to know not only what you work on, but also which folks depend on you, and vice versa.\u003c/p\u003e\n\u003cp\u003eAs SoundCloud has grown rapidly — both in the number of people and in software — we’ve identified \u003cem\u003e“Who owns X?”\u003c/em\u003e as a recurring question coming primarily from new joiners, but also from tenured folks. You can imagine how this information can also be useful to an EM advocating for more people on their team, or to an incident-response team when diagnosing an outage scenario. We needed an obvious way to consult system ownership, so we decided to build a \u003ca href=\"http://martinfowler.com/bliki/HumaneRegistry.html\"\u003ehumane registry\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eHumane Registries\u003c/h2\u003e\n\u003cp\u003eIf you’ve been around service-oriented architecture (\u003ca href=\"https://en.wikipedia.org/wiki/Service-oriented_architecture\"\u003eSOA\u003c/a\u003e) before, you may have heard of service directories. The \u003ca href=\"https://en.wikipedia.org/wiki/List_of_web_service_specifications\"\u003eWS-* standard\u003c/a\u003e for them is called Universal Description, Discovery and Integration (\u003ca href=\"https://en.wikipedia.org/wiki/Web_Services_Discovery#Universal_Description_Discovery_and_Integration\"\u003eUDDI\u003c/a\u003e), and it’s a complicated mix of service discovery and human readable information. \u003ca href=\"http://www.amazon.com/Web-Services-Essentials-OReilly-XML/dp/0596002246?tag=fragmental-20\"\u003eA snippet from a classic book describes UDDI\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“At its core, UDDI consists of two parts (…) a technical specification for building a distributed directory of businesses and web services [that] enables anyone to search [its] data. It also enables any company to register itself and its services.\u003c/p\u003e\n\u003cp\u003eThe data captured within UDDI is divided into three main categories:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWhite pages: This includes general information about a specific company—for example, business name, business description, contact information, address and phone numbers.\u003c/li\u003e\n\u003cli\u003eYellow pages: This includes general classification data for either the company or the service offered. For example, this data may include industry, product, or geographic codes based on standard taxonomies.\u003c/li\u003e\n\u003cli\u003eGreen pages: This category contains technical information about a web service. Generally, this includes a pointer to an external specification and an address for invoking the web service (…) UDDI can be used to describe any service, from a single web page or email address all the way up to SOAP, CORBA, and Java RMI services.”\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHumane registries play a similar role, but they focus on \u003cem\u003ehuman-readable information\u003c/em\u003e. These systems are pretty much \u003ca href=\"https://www.openhub.net/p/finagle\"\u003ewhat OpenHub does\u003c/a\u003e, i.e. automatically derive as much information as possible from a project based on its code and metadata, and add a layer of prose via wiki-like tools.\u003c/p\u003e\n\u003cp\u003eThe whole point is that a humane registry acknowledges that while automation and APIs are crucial for an SOA architecture, \u003cstrong\u003epeople talking to each other is still the most important and effective collaboration we have.\u003c/strong\u003e The registry helps start effective conversations; it doesn’t try to eliminate them.\u003c/p\u003e\n\u003ch2\u003eServices Directory\u003c/h2\u003e\n\u003cp\u003eWhen planning our implementation, we had a single requirement: The registry must enable finding out which systems a team owns and who the owners of given systems are. As a stretch goal, we were also interested in exposing dependencies across systems and teams.\u003c/p\u003e\n\u003cp\u003eTo deliver, we introduced the concept of “manifest files,” which would serve as entity metadata descriptors: Each code repository should have \u003cem\u003eat least\u003c/em\u003e one manifest file. Naturally, one of the fields in the manifest file would be the \u003ccode\u003eowner\u003c/code\u003e team for that specific software piece. These files would then be ingested by the registry on a recurring basis, in order to form an up-to-date software-catalog graph that could then be rendered into the registry’s UI:\u003c/p\u003e\n\u003cdiv data-language=\"json\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;_schema\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;soundcloud/applicationmanifest/v1\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;periskop\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Language agnostic exception aggregator for microservice environments.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;owner\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;engineering-productivity-team\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;tool\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;production\u0026#34;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOur humane registry was named \u003cstrong\u003eServices Directory\u003c/strong\u003e. Of course, later on we learned we were interested in cataloguing more than just \u003cem\u003eservices\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/51e0fc700e6ab0fd2406bd6ccd16a4c2/e46ff/early-days-services-directory.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Early services directory UI (2015)\" title=\"Early services directory UI (2015)\" src=\"https://developers.soundcloud.com/blog/static/51e0fc700e6ab0fd2406bd6ccd16a4c2/8ff1e/early-days-services-directory.png\" srcset=\"https://developers.soundcloud.com/blog/static/51e0fc700e6ab0fd2406bd6ccd16a4c2/9ec3c/early-days-services-directory.png 200w,\nhttps://developers.soundcloud.com/blog/static/51e0fc700e6ab0fd2406bd6ccd16a4c2/c7805/early-days-services-directory.png 400w,\nhttps://developers.soundcloud.com/blog/static/51e0fc700e6ab0fd2406bd6ccd16a4c2/8ff1e/early-days-services-directory.png 800w,\nhttps://developers.soundcloud.com/blog/static/51e0fc700e6ab0fd2406bd6ccd16a4c2/6ff5e/early-days-services-directory.png 1200w,\nhttps://developers.soundcloud.com/blog/static/51e0fc700e6ab0fd2406bd6ccd16a4c2/2f950/early-days-services-directory.png 1600w,\nhttps://developers.soundcloud.com/blog/static/51e0fc700e6ab0fd2406bd6ccd16a4c2/e46ff/early-days-services-directory.png 1613w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003eMore Automation: A Schema Definition\u003c/h2\u003e\n\u003cp\u003eBy introducing manifest files and ingestion through a services directory, we attained our goal of having a central index for our software pieces. What we observed, though, is that maintaining correctness of the data over time became a challenge: teams get renamed, \u003ca href=\"https://developers.soundcloud.com/blog/how-to-successfully-hand-over-systems\"\u003esystems are handed over\u003c/a\u003e, etc. In addition, small things like typos, or different ways of referring to teams — as exemplified by the screenshot above with user-growth and User Growth team names — prevented our aggregation logic from providing good results.\u003c/p\u003e\n\u003cp\u003eWell, there are \u003ca href=\"https://json-schema.org/\"\u003eexisting technologies\u003c/a\u003e built specifically for the purpose of validating documents. So we began to define a \u003cem\u003evocabulary\u003c/em\u003e of properties our ingestion system expected, and we encoded them in a \u003ccode\u003eschema\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-language=\"json\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;$schema\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;http://json-schema.org/draft-07/schema#\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;SoundCloud\u0026#39;s Application Manifests Schema\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;object\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;required\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;owner\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    …\n  \u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;properties\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;owner\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;string\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    …\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe next step was to provide a validation engine based on the predefined schema, running it against the manifest files. In the spirit of continuous delivery, we could hook that up in our CD pipelines as part of the linting stage: Our manifests would be validated against each individual change to these repositories, assuring they never drift from the schema.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/12fc05c03bbf2896526f77d940a6a207/fb323/early-days-warning-services-directory.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Manifest validation warning in system details page\" title=\"Manifest validation warning in system details page\" src=\"https://developers.soundcloud.com/blog/static/12fc05c03bbf2896526f77d940a6a207/8ff1e/early-days-warning-services-directory.png\" srcset=\"https://developers.soundcloud.com/blog/static/12fc05c03bbf2896526f77d940a6a207/9ec3c/early-days-warning-services-directory.png 200w,\nhttps://developers.soundcloud.com/blog/static/12fc05c03bbf2896526f77d940a6a207/c7805/early-days-warning-services-directory.png 400w,\nhttps://developers.soundcloud.com/blog/static/12fc05c03bbf2896526f77d940a6a207/8ff1e/early-days-warning-services-directory.png 800w,\nhttps://developers.soundcloud.com/blog/static/12fc05c03bbf2896526f77d940a6a207/6ff5e/early-days-warning-services-directory.png 1200w,\nhttps://developers.soundcloud.com/blog/static/12fc05c03bbf2896526f77d940a6a207/2f950/early-days-warning-services-directory.png 1600w,\nhttps://developers.soundcloud.com/blog/static/12fc05c03bbf2896526f77d940a6a207/fb323/early-days-warning-services-directory.png 1780w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eAs a bonus, by relying on JSON Schema as a schema-description standard, we were also able to provide ahead-of-commit support (developer experience FTW) by leaning on autocompletion of popular code editors.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://developers.soundcloud.com/blog/ea3e6f8e4e5676603ec09b669627e645/manifest-autocomplete.gif\" alt=\"Manifest file autocompletion\"/\u003e\u003c/p\u003e\n\u003cp\u003eOn top of executing single-pass manifest validation, having an automated way to check for schema compliance opens the door to a more holistic view of the company’s software catalog. Services Directory ingests manifest files, checks syntactically for unwanted properties, and has the ability to report back semantically on values.\u003c/p\u003e\n\u003cp\u003eIt was easy to set up a validation step to compare \u003ccode\u003eowner\u003c/code\u003e values with a knowingly good list of existing teams, sourced from our \u003ca href=\"https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol\"\u003eLDAP server\u003c/a\u003e. This means a software piece with an invalid team name gets rejected in a CI environment. It also means we could provide teams with a comprehensive view of their ownership. A background job exports Prometheus metrics on the manifest validation engine, which powers a dashboard, like shown below.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/82590969a37aaa937e8eab48a999384e/beee6/manifest-dashboard-global.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Global view for a single team\" title=\"Global view for a single team\" src=\"https://developers.soundcloud.com/blog/static/82590969a37aaa937e8eab48a999384e/8ff1e/manifest-dashboard-global.png\" srcset=\"https://developers.soundcloud.com/blog/static/82590969a37aaa937e8eab48a999384e/9ec3c/manifest-dashboard-global.png 200w,\nhttps://developers.soundcloud.com/blog/static/82590969a37aaa937e8eab48a999384e/c7805/manifest-dashboard-global.png 400w,\nhttps://developers.soundcloud.com/blog/static/82590969a37aaa937e8eab48a999384e/8ff1e/manifest-dashboard-global.png 800w,\nhttps://developers.soundcloud.com/blog/static/82590969a37aaa937e8eab48a999384e/6ff5e/manifest-dashboard-global.png 1200w,\nhttps://developers.soundcloud.com/blog/static/82590969a37aaa937e8eab48a999384e/2f950/manifest-dashboard-global.png 1600w,\nhttps://developers.soundcloud.com/blog/static/82590969a37aaa937e8eab48a999384e/beee6/manifest-dashboard-global.png 1728w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\n\u003cspan\u003e\n      \u003ca href=\"https://developers.soundcloud.com/blog/static/a258273049ea84ee1b19fdc7a8897f36/781de/manifest-over-time.png\" target=\"_blank\" rel=\"noopener\"\u003e\n    \u003cspan\u003e\u003c/span\u003e\n  \u003cimg alt=\"Manifest validation in the entire company\" title=\"Manifest validation in the entire company\" src=\"https://developers.soundcloud.com/blog/static/a258273049ea84ee1b19fdc7a8897f36/8ff1e/manifest-over-time.png\" srcset=\"https://developers.soundcloud.com/blog/static/a258273049ea84ee1b19fdc7a8897f36/9ec3c/manifest-over-time.png 200w,\nhttps://developers.soundcloud.com/blog/static/a258273049ea84ee1b19fdc7a8897f36/c7805/manifest-over-time.png 400w,\nhttps://developers.soundcloud.com/blog/static/a258273049ea84ee1b19fdc7a8897f36/8ff1e/manifest-over-time.png 800w,\nhttps://developers.soundcloud.com/blog/static/a258273049ea84ee1b19fdc7a8897f36/6ff5e/manifest-over-time.png 1200w,\nhttps://developers.soundcloud.com/blog/static/a258273049ea84ee1b19fdc7a8897f36/2f950/manifest-over-time.png 1600w,\nhttps://developers.soundcloud.com/blog/static/a258273049ea84ee1b19fdc7a8897f36/781de/manifest-over-time.png 2296w\" sizes=\"(max-width: 800px) 100vw, 800px\" loading=\"lazy\"/\u003e\n  \u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003eWhat Else?\u003c/h2\u003e\n\u003cp\u003eEnsuring code ownership visibility is just one aspect of Services Directory, our humane registry. Including manifest files as entity descriptors became ingrained in SoundCloud’s engineering culture, and as schema providers, we have a way to ensure standardization across our vast code landscape.\u003c/p\u003e\n\u003cp\u003eSince introducing validation logic, we’ve seen higher engagement with Services Directory and identified it as a central piece in our developer experience tooling offering. Various teams and individuals have reached out with feature requests and integration ideas, which we’ve been partnering on to provide — \u003ca href=\"https://github.com/backstage/backstage/pull/7795\"\u003ewe’ll share more about that in the future\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
