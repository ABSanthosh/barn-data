{
  "id": "8d7bfd54-7cb1-429a-88a5-2ff88b2f4a95",
  "title": "Annotate container images with build provenance using Cosign in GitLab CI/CD",
  "link": "https://about.gitlab.com/blog/2024/09/04/annotate-container-images-with-build-provenance-using-cosign-in-gitlab-ci-cd",
  "description": "",
  "author": "Tim Rizzi",
  "published": "2024-09-04T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Tim Rizzi, Jo√£o Pereira",
  "length": 10559,
  "excerpt": "Use GitLab pipelines to automate building, signing, and annotating Docker images. This tutorial shares code to show you how. Try it out in your own organization.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Container security has become a critical concern in software development. As organizations increasingly rely on containerized applications, ensuring the integrity and traceability of container images is paramount. Enhancing the security and traceability of your container images directly in your GitLab CI/CD pipeline can streamline your development process while significantly boosting your security posture. This tutorial demonstrates setting up a GitLab pipeline to automate the process of building, signing, and annotating Docker images using Cosign and the GitLab container registry. By integrating these practices, you'll secure your images and ensure that each one is easily traceable, aligning with best practices in DevSecOps. Background on container image security Before we dive into the technical details, it's crucial to understand why container image security is so important. In microservices and cloud-native applications, containers have become the standard for packaging and deploying software. However, this widespread adoption has also made containers an attractive target for cyber attacks. Container image security is a vital component of the broader software supply chain security concept. This encompasses all the tools, processes, and practices that ensure your software's integrity, authenticity, and security from development to deployment. By securing your container images, you're protecting your application and your entire software supply chain. Introduction to Cosign Enter Cosign, a tool designed to address these security concerns. Cosign is part of the Sigstore project, an open-source initiative aimed at improving the security of the software supply chain. Cosign allows developers to sign and verify container images, ensuring their integrity and authenticity. Key benefits of Cosign include: easy integration with existing CI/CD pipelines support for various signing methods, including keyless signing ability to attach and verify arbitrary metadata to container images By incorporating Cosign into your GitLab CI/CD pipeline, you're taking a significant step towards robust DevSecOps practices. Benefits of image signing and annotation Image signing serves as a seal of authenticity for your container images. It helps prevent tampering and ensures that the image deployed in your production environment is precisely the one that passed through your secure build process. Annotations, on the other hand, provide valuable metadata about the build process. This information is used for auditing and traceability. In a security incident, having detailed provenance data can significantly speed up the investigation and remediation process. GitLab CI/CD pipeline configuration Let's look at an example .gitlab-ci.yml file that outlines the process of building, signing, and annotating a Docker image using Cosign: stages: - build build_and_sign: stage: build image: docker:latest services: - docker:dind # Enable Docker-in-Docker service to allow Docker commands inside the container variables: IMAGE_TAG: $CI_COMMIT_SHORT_SHA # Use the commit short SHA as the image tag IMAGE_URI: $CI_REGISTRY_IMAGE:$IMAGE_TAG # Construct the full image URI with the registry, project path, and tag COSIGN_YES: \"true\" # Automatically confirm actions in Cosign without user interaction FF_SCRIPT_SECTIONS: \"true\" # Enables GitLab's CI script sections for better multi-line script output id_tokens: SIGSTORE_ID_TOKEN: aud: sigstore # Provide an OIDC token for keyless signing with Cosign before_script: - apk add --no-cache cosign jq # Install Cosign (mandatory) and jq (optional) - docker login -u \"gitlab-ci-token\" -p \"$CI_JOB_TOKEN\" \"$CI_REGISTRY\" # Log in to the Docker registry using GitLab CI token script: # Build the Docker image using the specified tag and push it to the registry - docker build --pull -t \"$IMAGE_URI\" . - docker push \"$IMAGE_URI\" # Retrieve the digest of the pushed image to use in the signing step - IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \"$IMAGE_URI\") # Sign the image using Cosign with annotations that provide metadata about the build and tag annotation to allow verifying # the tag-\u003edigest mapping (https://github.com/sigstore/cosign?tab=readme-ov-file#tag-signing) - | cosign sign \"$IMAGE_DIGEST\" \\ --annotations \"com.gitlab.ci.user.name=$GITLAB_USER_NAME\" \\ --annotations \"com.gitlab.ci.pipeline.id=$CI_PIPELINE_ID\" \\ --annotations \"com.gitlab.ci.pipeline.url=$CI_PIPELINE_URL\" \\ --annotations \"com.gitlab.ci.job.id=$CI_JOB_ID\" \\ --annotations \"com.gitlab.ci.job.url=$CI_JOB_URL\" \\ --annotations \"com.gitlab.ci.commit.sha=$CI_COMMIT_SHA\" \\ --annotations \"com.gitlab.ci.commit.ref.name=$CI_COMMIT_REF_NAME\" \\ --annotations \"com.gitlab.ci.project.path=$CI_PROJECT_PATH\" \\ --annotations \"org.opencontainers.image.source=$CI_PROJECT_URL\" \\ --annotations \"org.opencontainers.image.revision=$CI_COMMIT_SHA\" \\ --annotations \"tag=$IMAGE_TAG\" # Verify the image signature using Cosign to ensure it matches the expected annotations and certificate identity - | cosign verify \\ --annotations \"tag=$IMAGE_TAG\" \\ --certificate-identity \"$CI_PROJECT_URL//.gitlab-ci.yml@refs/heads/$CI_COMMIT_REF_NAME\" \\ --certificate-oidc-issuer \"$CI_SERVER_URL\" \\ \"$IMAGE_URI\" | jq . # Use jq to format the verification output for easier readability Let's break down this pipeline configuration and understand each part in detail. Detailed explanation of the pipeline 1. Setup and prerequisites The pipeline starts by setting up the necessary environment: It uses the docker:latest image and enables Docker-in-Docker service, allowing Docker commands to be run within the CI job. It defines variables for the image tag and URI using GitLab CI/CD predefined variables. It sets up an OIDC token for keyless signing with Cosign. In the before_script section, it installs Cosign and jq (for JSON processing) and logs into the GitLab container registry. 2. Building and pushing the image The first step in the script is to build the Docker image and push it to the GitLab container registry: - docker build --pull -t \"$IMAGE_URI\" . - docker push \"$IMAGE_URI\" This creates the image using the current directory's Dockerfile and pushes it to the registry. 3. Signing the image with Cosign After building and pushing the image, the pipeline signs it using Cosign: - IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' \"$IMAGE_URI\") - | cosign sign \"$IMAGE_DIGEST\" \\ --annotations \"com.gitlab.ci.user.name=$GITLAB_USER_NAME\" \\ --annotations \"com.gitlab.ci.pipeline.id=$CI_PIPELINE_ID\" \\ # ... (other annotations) ... --annotations \"tag=$IMAGE_TAG\" This step first retrieves the image digest and then uses Cosign to sign the image, adding several annotations. Verifying the signature and annotations After signing the image, it's crucial to verify the signature and the annotations we've added. This verification step ensures that the provenance data attached to the image is correct and hasn't been tampered with. In our pipeline, we've included a verification step using the cosign verify command: - | cosign verify \\ --annotations \"tag=$IMAGE_TAG\" \\ --certificate-identity \"$CI_PROJECT_URL//.gitlab-ci.yml@refs/heads/$CI_COMMIT_REF_NAME\" \\ --certificate-oidc-issuer \"$CI_SERVER_URL\" \\ \"$IMAGE_URI\" | jq . This command verifies the signature and checks the annotations. Its output will show all the annotations we've added to the image during the signing process. Here's what you might see in your pipeline logs after running this command: In this output, you should see all the annotations we added earlier, including: GitLab CI user name Pipeline ID and URL Job ID and URL Commit SHA and reference name Project path Image source and revision By verifying these annotations, you can ensure that the image's provenance data is intact and matches what you expect based on your build process. This verification step is crucial for maintaining the integrity of your software supply chain. It allows you to confirm that the image you're about to deploy has gone through your secure build process and has yet to be modified since it was signed. Summary By integrating Cosign into your GitLab CI/CD pipeline, you've taken a significant step toward securing your software supply chain. This setup not only automates securing and annotating your container images with build metadata but also ensures a transparent and traceable build process. The benefits of this approach are numerous: enhanced security through image signing improved traceability with detailed build provenance data automated verification process alignment with DevSecOps best practices As container security continues to be a critical concern in the software development lifecycle, implementing these practices puts you ahead of potential security threats and demonstrates a commitment to software integrity. Try it in your organization Now that you've seen how to enhance your container security using Cosign in GitLab CI/CD, it's time to put this knowledge into practice: Implement in your projects: Adapt the provided .gitlab-ci.yml file to fit your specific needs. Explore further: Dive deeper into Cosign's capabilities. Consider exploring advanced features like policy enforcement or integration with vulnerability scanning tools. Share your experience: After implementing this in your projects, share your experience with your team or the wider GitLab community. Your insights could help others enhance their security practices. Stay updated: Container security is an evolving field. Check GitLab's blog and documentation for new features and best practices updates. Contribute: If you find ways to improve this process or encounter any issues, consider contributing to the GitLab or Cosign open-source projects. Remember, security is a journey, not a destination. By taking these steps, you're securing your containers and contributing to a more secure software ecosystem for everyone. Start implementing these practices in your GitLab projects today, and take your container security to the next level! Get started today! Sign up for a free 30-day trial of GitLab Ultimate! Read more Next-generation GitLab container registry goes GA A beginner's guide to container security DevSecOps basics, including security What is CI/CD?",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/2w6waL76KROjhJHM2vXet6/34bb171a7a3dd65a61999612cc89d9f4/blog-image-template-1800x945__23_.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-b794d8fe=\"\" data-v-7488832a=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eContainer security has become a critical concern in software development. As organizations increasingly rely on containerized applications, ensuring the integrity and traceability of container images is paramount. Enhancing the security and traceability of your container images directly in your GitLab CI/CD pipeline can streamline your development process while significantly boosting your security posture.\u003c/p\u003e\n\u003cp\u003eThis tutorial demonstrates setting up a GitLab pipeline to automate the process of building, signing, and annotating Docker images using Cosign and the GitLab container registry. By integrating these practices, you\u0026#39;ll secure your images and ensure that each one is easily traceable, aligning with best practices in DevSecOps.\u003c/p\u003e\n\u003ch2 id=\"background-on-container-image-security\" tabindex=\"-1\"\u003eBackground on container image security \u003ca href=\"#background-on-container-image-security\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBefore we dive into the technical details, it\u0026#39;s crucial to understand why container image security is so important. In \u003ca href=\"https://about.gitlab.com/topics/microservices/\"\u003emicroservices\u003c/a\u003e and cloud-native applications, containers have become the standard for packaging and deploying software. However, this widespread adoption has also made containers an attractive target for cyber attacks.\u003c/p\u003e\n\u003cp\u003eContainer image security is a vital component of the broader \u003ca href=\"https://about.gitlab.com/blog/2022/08/30/the-ultimate-guide-to-software-supply-chain-security/\"\u003esoftware supply chain security\u003c/a\u003e concept. This encompasses all the tools, processes, and practices that ensure your software\u0026#39;s integrity, authenticity, and security from development to deployment. By securing your container images, you\u0026#39;re protecting your application and your entire software supply chain.\u003c/p\u003e\n\u003ch2 id=\"introduction-to-cosign\" tabindex=\"-1\"\u003eIntroduction to Cosign \u003ca href=\"#introduction-to-cosign\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEnter \u003ca href=\"https://about.gitlab.com/blog/2023/09/13/keyless-signing-with-cosign/\"\u003eCosign\u003c/a\u003e, a tool designed to address these security concerns. Cosign is part of the Sigstore project, an open-source initiative aimed at improving the security of the software supply chain. Cosign allows developers to sign and verify container images, ensuring their integrity and authenticity.\u003c/p\u003e\n\u003cp\u003eKey benefits of Cosign include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eeasy integration with existing CI/CD pipelines\u003c/li\u003e\n\u003cli\u003esupport for various signing methods, including keyless signing\u003c/li\u003e\n\u003cli\u003eability to attach and verify arbitrary metadata to container images\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy incorporating Cosign into your GitLab CI/CD pipeline, you\u0026#39;re taking a significant step towards robust \u003ca href=\"https://about.gitlab.com/topics/devsecops/\"\u003eDevSecOps\u003c/a\u003e practices.\u003c/p\u003e\n\u003ch2 id=\"benefits-of-image-signing-and-annotation\" tabindex=\"-1\"\u003eBenefits of image signing and annotation \u003ca href=\"#benefits-of-image-signing-and-annotation\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eImage signing serves as a seal of authenticity for your container images. It helps prevent tampering and ensures that the image deployed in your production environment is precisely the one that passed through your secure build process.\u003c/p\u003e\n\u003cp\u003eAnnotations, on the other hand, provide valuable metadata about the build process. This information is used for auditing and traceability. In a security incident, having detailed provenance data can significantly speed up the investigation and remediation process.\u003c/p\u003e\n\u003ch2 id=\"gitlab-cicd-pipeline-configuration\" tabindex=\"-1\"\u003eGitLab CI/CD pipeline configuration \u003ca href=\"#gitlab-cicd-pipeline-configuration\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eLet\u0026#39;s look at an example \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file that outlines the process of building, signing, and annotating a Docker image using Cosign:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estages:\n  - build\n\nbuild_and_sign:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind  # Enable Docker-in-Docker service to allow Docker commands inside the container\n  variables:\n    IMAGE_TAG: $CI_COMMIT_SHORT_SHA  # Use the commit short SHA as the image tag\n    IMAGE_URI: $CI_REGISTRY_IMAGE:$IMAGE_TAG  # Construct the full image URI with the registry, project path, and tag\n    COSIGN_YES: \u0026#34;true\u0026#34;  # Automatically confirm actions in Cosign without user interaction\n    FF_SCRIPT_SECTIONS: \u0026#34;true\u0026#34;  # Enables GitLab\u0026#39;s CI script sections for better multi-line script output\n  id_tokens:\n    SIGSTORE_ID_TOKEN:\n      aud: sigstore  # Provide an OIDC token for keyless signing with Cosign\n  before_script:\n    - apk add --no-cache cosign jq  # Install Cosign (mandatory) and jq (optional)\n    - docker login -u \u0026#34;gitlab-ci-token\u0026#34; -p \u0026#34;$CI_JOB_TOKEN\u0026#34; \u0026#34;$CI_REGISTRY\u0026#34;  # Log in to the Docker registry using GitLab CI token\n  script:\n    # Build the Docker image using the specified tag and push it to the registry\n    - docker build --pull -t \u0026#34;$IMAGE_URI\u0026#34; .\n    - docker push \u0026#34;$IMAGE_URI\u0026#34;\n\n    # Retrieve the digest of the pushed image to use in the signing step\n    - IMAGE_DIGEST=$(docker inspect --format=\u0026#39;{{index .RepoDigests 0}}\u0026#39; \u0026#34;$IMAGE_URI\u0026#34;)\n\n    # Sign the image using Cosign with annotations that provide metadata about the build and tag annotation to allow verifying\n    # the tag-\u0026gt;digest mapping (https://github.com/sigstore/cosign?tab=readme-ov-file#tag-signing)\n    - |\n      cosign sign \u0026#34;$IMAGE_DIGEST\u0026#34; \\\n        --annotations \u0026#34;com.gitlab.ci.user.name=$GITLAB_USER_NAME\u0026#34; \\\n        --annotations \u0026#34;com.gitlab.ci.pipeline.id=$CI_PIPELINE_ID\u0026#34; \\\n        --annotations \u0026#34;com.gitlab.ci.pipeline.url=$CI_PIPELINE_URL\u0026#34; \\\n        --annotations \u0026#34;com.gitlab.ci.job.id=$CI_JOB_ID\u0026#34; \\\n        --annotations \u0026#34;com.gitlab.ci.job.url=$CI_JOB_URL\u0026#34; \\\n        --annotations \u0026#34;com.gitlab.ci.commit.sha=$CI_COMMIT_SHA\u0026#34; \\\n        --annotations \u0026#34;com.gitlab.ci.commit.ref.name=$CI_COMMIT_REF_NAME\u0026#34; \\\n        --annotations \u0026#34;com.gitlab.ci.project.path=$CI_PROJECT_PATH\u0026#34; \\\n        --annotations \u0026#34;org.opencontainers.image.source=$CI_PROJECT_URL\u0026#34; \\\n        --annotations \u0026#34;org.opencontainers.image.revision=$CI_COMMIT_SHA\u0026#34; \\\n        --annotations \u0026#34;tag=$IMAGE_TAG\u0026#34;\n\n    # Verify the image signature using Cosign to ensure it matches the expected annotations and certificate identity\n    - |\n      cosign verify \\\n        --annotations \u0026#34;tag=$IMAGE_TAG\u0026#34; \\\n        --certificate-identity \u0026#34;$CI_PROJECT_URL//.gitlab-ci.yml@refs/heads/$CI_COMMIT_REF_NAME\u0026#34; \\\n        --certificate-oidc-issuer \u0026#34;$CI_SERVER_URL\u0026#34; \\\n        \u0026#34;$IMAGE_URI\u0026#34; | jq .  # Use jq to format the verification output for easier readability\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet\u0026#39;s break down this pipeline configuration and understand each part in detail.\u003c/p\u003e\n\u003ch2 id=\"detailed-explanation-of-the-pipeline\" tabindex=\"-1\"\u003eDetailed explanation of the pipeline \u003ca href=\"#detailed-explanation-of-the-pipeline\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"1.-setup-and-prerequisites\" tabindex=\"-1\"\u003e1. Setup and prerequisites \u003ca href=\"#1.-setup-and-prerequisites\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe pipeline starts by setting up the necessary environment:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt uses the \u003ccode\u003edocker:latest\u003c/code\u003e image and enables Docker-in-Docker service, allowing Docker commands to be run within the CI job.\u003c/li\u003e\n\u003cli\u003eIt defines variables for the image tag and URI using GitLab CI/CD predefined variables.\u003c/li\u003e\n\u003cli\u003eIt sets up an OIDC token for keyless signing with Cosign.\u003c/li\u003e\n\u003cli\u003eIn the \u003ccode\u003ebefore_script\u003c/code\u003e section, it installs Cosign and jq (for JSON processing) and logs into the GitLab container registry.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2.-building-and-pushing-the-image\" tabindex=\"-1\"\u003e2. Building and pushing the image \u003ca href=\"#2.-building-and-pushing-the-image\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe first step in the script is to build the Docker image and push it to the GitLab container registry:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e- docker build --pull -t \u0026#34;$IMAGE_URI\u0026#34; .\n- docker push \u0026#34;$IMAGE_URI\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis creates the image using the current directory\u0026#39;s Dockerfile and pushes it to the registry.\u003c/p\u003e\n\u003ch3 id=\"3.-signing-the-image-with-cosign\" tabindex=\"-1\"\u003e3. Signing the image with Cosign \u003ca href=\"#3.-signing-the-image-with-cosign\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAfter building and pushing the image, the pipeline signs it using Cosign:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e- IMAGE_DIGEST=$(docker inspect --format=\u0026#39;{{index .RepoDigests 0}}\u0026#39; \u0026#34;$IMAGE_URI\u0026#34;)\n- |\n  cosign sign \u0026#34;$IMAGE_DIGEST\u0026#34; \\\n    --annotations \u0026#34;com.gitlab.ci.user.name=$GITLAB_USER_NAME\u0026#34; \\\n    --annotations \u0026#34;com.gitlab.ci.pipeline.id=$CI_PIPELINE_ID\u0026#34; \\\n    # ... (other annotations) ...\n    --annotations \u0026#34;tag=$IMAGE_TAG\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis step first retrieves the image digest and then uses Cosign to sign the image, adding several annotations.\u003c/p\u003e\n\u003ch2 id=\"verifying-the-signature-and-annotations\" tabindex=\"-1\"\u003eVerifying the signature and annotations \u003ca href=\"#verifying-the-signature-and-annotations\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAfter signing the image, it\u0026#39;s crucial to verify the signature and the annotations we\u0026#39;ve added. This verification step ensures that the provenance data attached to the image is correct and hasn\u0026#39;t been tampered with.\u003c/p\u003e\n\u003cp\u003eIn our pipeline, we\u0026#39;ve included a verification step using the \u003ccode\u003ecosign verify\u003c/code\u003e command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e- |\n  cosign verify \\\n    --annotations \u0026#34;tag=$IMAGE_TAG\u0026#34; \\\n    --certificate-identity \u0026#34;$CI_PROJECT_URL//.gitlab-ci.yml@refs/heads/$CI_COMMIT_REF_NAME\u0026#34; \\\n    --certificate-oidc-issuer \u0026#34;$CI_SERVER_URL\u0026#34; \\\n    \u0026#34;$IMAGE_URI\u0026#34; | jq .\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command verifies the signature and checks the annotations. Its output will show all the annotations we\u0026#39;ve added to the image during the signing process.\u003c/p\u003e\n\u003cp\u003eHere\u0026#39;s what you might see in your pipeline logs after running this command:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/6PMFajL9DHFDGbnnPn9fiE/8754b24ef13e69a78332f118955775f4/image1.png\" alt=\"verifying the signature and checking annotations\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn this output, you should see all the annotations we added earlier, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGitLab CI user name\u003c/li\u003e\n\u003cli\u003ePipeline ID and URL\u003c/li\u003e\n\u003cli\u003eJob ID and URL\u003c/li\u003e\n\u003cli\u003eCommit SHA and reference name\u003c/li\u003e\n\u003cli\u003eProject path\u003c/li\u003e\n\u003cli\u003eImage source and revision\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy verifying these annotations, you can ensure that the image\u0026#39;s provenance data is intact and matches what you expect based on your build process. This verification step is crucial for maintaining the integrity of your software supply chain. It allows you to confirm that the image you\u0026#39;re about to deploy has gone through your secure build process and has yet to be modified since it was signed.\u003c/p\u003e\n\u003ch2 id=\"summary\" tabindex=\"-1\"\u003eSummary \u003ca href=\"#summary\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBy integrating Cosign into your GitLab CI/CD pipeline, you\u0026#39;ve taken a significant step toward securing your software supply chain. This setup not only automates securing and annotating your container images with build metadata but also ensures a transparent and traceable build process.\u003c/p\u003e\n\u003cp\u003eThe benefits of this approach are numerous:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eenhanced security through image signing\u003c/li\u003e\n\u003cli\u003eimproved traceability with detailed build provenance data\u003c/li\u003e\n\u003cli\u003eautomated verification process\u003c/li\u003e\n\u003cli\u003ealignment with DevSecOps best practices\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs container security continues to be a critical concern in the software development lifecycle, implementing these practices puts you ahead of potential security threats and demonstrates a commitment to software integrity.\u003c/p\u003e\n\u003ch2 id=\"try-it-in-your-organization\" tabindex=\"-1\"\u003eTry it in your organization \u003ca href=\"#try-it-in-your-organization\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNow that you\u0026#39;ve seen how to enhance your container security using Cosign in GitLab CI/CD, it\u0026#39;s time to put this knowledge into practice:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eImplement in your projects\u003c/strong\u003e: Adapt the provided \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file to fit your specific needs.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplore further\u003c/strong\u003e: Dive deeper into Cosign\u0026#39;s capabilities. Consider exploring advanced features like policy enforcement or integration with vulnerability scanning tools.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eShare your experience\u003c/strong\u003e: After implementing this in your projects, share your experience with your team or the wider GitLab community. Your insights could help others enhance their security practices.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStay updated\u003c/strong\u003e: Container security is an evolving field. Check GitLab\u0026#39;s blog and documentation for new features and best practices updates.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eContribute\u003c/strong\u003e: If you find ways to improve this process or encounter any issues, consider contributing to the GitLab or Cosign open-source projects.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eRemember, security is a journey, not a destination. By taking these steps, you\u0026#39;re securing your containers and contributing to a more secure software ecosystem for everyone.\u003c/p\u003e\n\u003cp\u003eStart implementing these practices in your GitLab projects today, and take your container security to the next level!\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGet started today! Sign up for a \u003ca href=\"https://gitlab.com/-/trial_registrations/new?glm_source=about.gitlab.com/blog\u0026amp;glm_content=default-saas-trial\"\u003efree 30-day trial of GitLab Ultimate\u003c/a\u003e!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"read-more\" tabindex=\"-1\"\u003eRead more \u003ca href=\"#read-more\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2024/07/23/next-generation-gitlab-container-registry-goes-ga/\"\u003eNext-generation GitLab container registry goes GA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/topics/devsecops/beginners-guide-to-container-security/\"\u003eA beginner\u0026#39;s guide to container security\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/topics/devsecops/\"\u003eDevSecOps basics, including security\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/topics/ci-cd/\"\u003eWhat is CI/CD?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2024-09-04T00:00:00Z",
  "modifiedTime": null
}
