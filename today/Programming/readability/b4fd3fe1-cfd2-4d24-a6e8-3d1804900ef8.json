{
  "id": "b4fd3fe1-cfd2-4d24-a6e8-3d1804900ef8",
  "title": "How Prezi Serves Customer Traffic",
  "link": "https://engineering.prezi.com/how-prezi-serves-customer-traffic-60fc9711702b?source=rss----911e72786e31---4",
  "description": "",
  "author": "Alex",
  "published": "Tue, 09 Jan 2024 09:56:32 GMT",
  "source": "https://engineering.prezi.com/feed",
  "categories": null,
  "byline": "Alex",
  "length": 8797,
  "excerpt": "Prezi has a global audience that depends on the fast and reliable accessibility of its content. In this article, we look into the way Prezi serves content from a network perspective. See this article…",
  "siteName": "Prezi Engineering",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*U0lNGgJfm0Qo1ZfYDS36KA.png",
  "text": "Prezi has a global audience that depends on the fast and reliable accessibility of its content. In this article, we look into the way Prezi serves content from a network perspective.Photo by Z on UnsplashSee this article as a general overview of how content can be served on a global scale. This is not the only and probably not the ultimate solution but one way to do it.The overall flow of this is depicted in the following image. Prezi runs on AWS and uses AWS services to offer customer-facing internet endpoints.Network diagramThe DNS zones and records are managed in Route53. Customer traffic goes through AWS Global Accelerator to decrease latency before it is filtered by AWS Web Application Firewall (WAF). The traffic is then terminated at the Application Load Balancer (ALB) and forwarded into the cloud environment where most of the workload runs inside Elastic Kubernetes Services (EKS).Some of the customer traffic is going to AWS Cloudfront which is used to deliver media assets that benefit from being cached closer to the customer.The following article will go over these components, see what they do, and discuss the benefits those components offer.Find the best path (AWS Route53 and Global Accelerator)Having customers worldwide and offering services over the Internet poses multiple challenges. One of them is to reduce latency. Cloudflare defines latency as the “amount of time it takes for a data packet to go from one place to another. Lowering latency is an important part of building a good user experience.” (source https://www.cloudflare.com/en-gb/learning/performance/glossary/what-is-latency/)That said, the challenge in having customers worldwide is the heterogeneity of the network normal people call “the internet”.When we look at the lower network layer at the internet topology, we can see many different networks peered together.The following image shows parts of the peering connections in Latin America that form the internet’s backbone. For a data packet, going from South America to Miami means traversing through multiple networks and every network adds a little bit to the complete travel time.taken from https://global-internet-map-2022.telegeography.com/Going back to the challenge of controlling latency for customers there are generally speaking 2 options:Offering services close to the customer to avoid far network travelsOffer a fast path from the customer to the place where services are offered.The best path for most of the worldPrezi uses the second option by offering a fast path to services via AWS GlobalAccelerator. This service enables customer traffic to be routed most of the time via the global AWS network instead of the public internet.This routing reduces latency. In experiments from my local machine, optimized requests traveled 200ms faster than the not-optimized ones. The total time until I got an answer went down from 800ms to 600ms. Loading the Prezi dashboard when logged in needs at the moment roughly 150 individual requests which all benefit from the decrease of 25% in latency. Please keep in mind that the real percentage of acceleration depends on multiple factors like location and current routing situation.Whenever a customer sends requests to prezi.com, those requests are routed to the closest AWS network endpoint and then transferred inside this global network.And the best path for inhabitants of VirginiaAs stated in the headline of the previous chapter, most Prezi customers go to Global Accelerator except those who reside in Virginia. Those customers are already close enough to the service endpoint and are routed directly to the following components.Note: the network diagram above does not show this route to avoid being too complex.ImplementationTo achieve this, Prezi leverages geo-balanced DNS queries in Route53 so that different IP addresses are returned depending on the location.The following screenshot for a practical example. The first lookup is executed from a local machine in Europe, and the second one with an activated VPN from Virginia.The first DNS query returns the endpoints for the Global Accelerator, and the second query from Virgina returns the endpoints of some AWS load balancer (see the following chapter).Terminal showing different DNS lookup results depending on location.AlternativesThe alternative to this network-based approach is to move offered services closer to the customer. This can be achieved for example by deploying instances into selected cloud regions. To achieve this, the whole application stack needs to be deployed and some backend synchronization is needed — as part of the Prezi, suite enables collaboration in-between multiple users.Serving from a single region reduces the complexity and streamlines deployment.Protection (AWS WAF and Shield)While the internet is a wonderful place to connect, collaborate, be creative, and a lot more, it is at the same time also a place that attracts bad actors. It is widespread that public and well-known endpoints are the target of distributed denial of service (DDoS) attacks. Prezi leverages the combination of AWS Web Application Firewall (WAF) and Shield to protect the downstream infrastructure from these threat vectors.Every request that needs to reach Prezi infrastructure is evaluated through these components. Certain endpoints are protected via a specific rate limit to make sure they are not hammered.For example, it does not make sense to send multiple requests for the login endpoint within a small amount of time. To protect sensible endpoints, the AWS WAF can respond with HTTP/429 (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429). See the following screenshot of how a triggered rate limit looks in the browser console:Chrome Developer tools show one HTTP responseOn a bigger scale, the traffic flow is monitored by AWS Shield and blocked when a DDoS attack is detected. When Shield detects a DDoS from multiple traffic sources, those sources get blocked.AlternativesOffering services over the Internet without any protection is a bad idea. Any public-facing IP is attracting traffic and if a company has reached a certain scale it attracts bad actors. There are alternative solutions and vendors like Cloudflare or Akamai that can offer the same protection service. As we run our workload on AWS the natural choice is AWS WAF as the integration is easy.Access (ALB, EKS, API Gateway)Requests allowed to enter reach the AWS-managed load balancer fleet that keeps track of routing those requests into the VPC environment that hosts the actual workload. The load balancer uses our public TLS certificate to offload HTTPS connections from customers.The application load balancer (ALB) is used for routing based on the HTTP Host header. This means that based on the domain used, ALB can forward traffic into the isolated workload environment.Running inside the Kubernetes fleet is a self-written API gateway. The purpose of this component is to build more detailed routes based on request paths or other identifiers. Most of the backends are based on Python and Scala. Those pods run inside the Kubernetes offering of AWS: Elastic Kubernetes Service. Traffic is routed into these pods either by a WSGI conform application server in Python land or directly by the JVM for Scala services.As the mentioned API gateway runs also inside Kubernetes, it can forward traffic to the target backend services based on different routing guidelines within the cluster network. The API gateway offers the flexibility to do advanced routing to the microservices based on configuration by the developers.When you think back about the scope of AWS WAF usage, there was no check for malicious content and requests. We use a different web application firewall to check for bad requests and protection against cross-site scripting, injections, and other things that might harm Prezi — or our customer.Content delivery (CloudFront)Prezi’s main purpose is to deliver amazing presentations that most of the time contain visuals like images and gifs. They can be served via a content delivery network (CDN) that can reproach content closer to the customer.Loading resources from a CDN does decrease the time in which the user waits for the resources to appear.Also on the cost focus, it is cheaper to serve content from CloudFront instead of serving it every time from the backend. This applies especially to assets like images that don’t change often.Due to the deep integration into the ecosystem, in our setup, there is no other choice than CloudFront. Technically, it should also be doable with CloudFlare or any other CDN vendor.Wrap upThe article above describes the architecture Prezi uses to serve content to a global audience.There are multiple different ways to serve traffic — even if running on AWS.",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*wAbH9ve3pibIrm0F",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@la3mmchen?source=post_page-----60fc9711702b--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Alex\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*qlKWQ5hAPbo5cLIv_PuLSQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://engineering.prezi.com/?source=post_page-----60fc9711702b--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Prezi Engineering\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*ecIYF5KMJj1G4-_pkFWy0g.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cp id=\"3b04\"\u003ePrezi has a global audience that depends on the fast and reliable accessibility of its content. In this article, we look into the way Prezi serves content from a network perspective.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://unsplash.com/@dead____artist?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eZ\u003c/a\u003e on \u003ca href=\"https://unsplash.com/?utm_source=medium\u0026amp;utm_medium=referral\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eUnsplash\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"14ed\"\u003eSee this article as a general overview of how content can be served on a global scale. This is not the only and probably not the ultimate solution but one way to do it.\u003c/p\u003e\u003cp id=\"8d63\"\u003eThe overall flow of this is depicted in the following image. Prezi runs on AWS and uses AWS services to offer customer-facing internet endpoints.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eNetwork diagram\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"a16a\"\u003eThe DNS zones and records are managed in Route53. Customer traffic goes through AWS Global Accelerator to decrease latency before it is filtered by AWS Web Application Firewall (WAF). The traffic is then terminated at the Application Load Balancer (ALB) and forwarded into the cloud environment where most of the workload runs inside Elastic Kubernetes Services (EKS).\u003c/p\u003e\u003cp id=\"9fc3\"\u003eSome of the customer traffic is going to AWS Cloudfront which is used to deliver media assets that benefit from being cached closer to the customer.\u003c/p\u003e\u003cp id=\"f222\"\u003eThe following article will go over these components, see what they do, and discuss the benefits those components offer.\u003c/p\u003e\u003ch2 id=\"f338\"\u003eFind the best path (AWS Route53 and Global Accelerator)\u003c/h2\u003e\u003cp id=\"34f2\"\u003eHaving customers worldwide and offering services over the Internet poses multiple challenges. One of them is to reduce latency. Cloudflare defines latency as the “amount of time it takes for a data packet to go from one place to another. Lowering latency is an important part of building a good user experience.” (source \u003ca href=\"https://www.cloudflare.com/en-gb/learning/performance/glossary/what-is-latency/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://www.cloudflare.com/en-gb/learning/performance/glossary/what-is-latency/\u003c/a\u003e)\u003c/p\u003e\u003cp id=\"4613\"\u003eThat said, the challenge in having customers worldwide is the heterogeneity of the network normal people call “the internet”.\u003c/p\u003e\u003cp id=\"1c21\"\u003eWhen we look at the lower network layer at the internet topology, we can see many different networks peered together.\u003c/p\u003e\u003cp id=\"6693\"\u003eThe following image shows parts of the peering connections in Latin America that form the internet’s backbone. For a data packet, going from South America to Miami means traversing through multiple networks and every network adds a little bit to the complete travel time.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003etaken from \u003ca href=\"https://global-internet-map-2022.telegeography.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://global-internet-map-2022.telegeography.com/\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"0a7b\"\u003eGoing back to the challenge of controlling latency for customers there are generally speaking 2 options:\u003c/p\u003e\u003cul\u003e\u003cli id=\"faee\"\u003eOffering services close to the customer to avoid far network travels\u003c/li\u003e\u003cli id=\"240f\"\u003eOffer a fast path from the customer to the place where services are offered.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"e81f\"\u003eThe best path for most of the world\u003c/h2\u003e\u003cp id=\"eda9\"\u003ePrezi uses the second option by offering a fast path to services via AWS GlobalAccelerator. This service enables customer traffic to be routed most of the time via the global AWS network instead of the public internet.\u003c/p\u003e\u003cp id=\"7057\"\u003eThis routing reduces latency. In experiments from my local machine, optimized requests traveled 200ms faster than the not-optimized ones. The total time until I got an answer went down from 800ms to 600ms. \u003cbr/\u003eLoading the Prezi dashboard when logged in needs at the moment roughly 150 individual requests which all benefit from the decrease of 25% in latency. \u003cbr/\u003ePlease keep in mind that the real percentage of acceleration depends on multiple factors like location and current routing situation.\u003c/p\u003e\u003cp id=\"f66b\"\u003eWhenever a customer sends requests to prezi.com, those requests are routed to the closest AWS network endpoint and then transferred inside this global network.\u003c/p\u003e\u003ch2 id=\"bda7\"\u003eAnd the best path for inhabitants of Virginia\u003c/h2\u003e\u003cp id=\"43f7\"\u003eAs stated in the headline of the previous chapter, most Prezi customers go to Global Accelerator except those who reside in Virginia. Those customers are already close enough to the service endpoint and are routed directly to the following components.\u003c/p\u003e\u003cp id=\"bab3\"\u003e\u003cem\u003eNote\u003c/em\u003e: the network diagram above does not show this route to avoid being too complex.\u003c/p\u003e\u003ch2 id=\"a64e\"\u003eImplementation\u003c/h2\u003e\u003cp id=\"dc33\"\u003eTo achieve this, Prezi leverages geo-balanced DNS queries in Route53 so that different IP addresses are returned depending on the location.\u003c/p\u003e\u003cp id=\"14a4\"\u003eThe following screenshot for a practical example. The first lookup is executed from a local machine in Europe, and the second one with an activated VPN from Virginia.\u003c/p\u003e\u003cp id=\"18cf\"\u003eThe first DNS query returns the endpoints for the Global Accelerator, and the second query from Virgina returns the endpoints of some AWS load balancer (see the following chapter).\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eTerminal showing different DNS lookup results depending on location.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"69db\"\u003eAlternatives\u003c/h2\u003e\u003cp id=\"f362\"\u003eThe alternative to this network-based approach is to move offered services closer to the customer. This can be achieved for example by deploying instances into selected cloud regions. To achieve this, the whole application stack needs to be deployed and some backend synchronization is needed — as part of the Prezi, suite enables collaboration in-between multiple users.\u003c/p\u003e\u003cp id=\"a0c9\"\u003eServing from a single region reduces the complexity and streamlines deployment.\u003c/p\u003e\u003ch2 id=\"b6b7\"\u003eProtection (AWS WAF and Shield)\u003c/h2\u003e\u003cp id=\"4c59\"\u003eWhile the internet is a wonderful place to connect, collaborate, be creative, and a lot more, it is at the same time also a place that attracts bad actors. It is widespread that public and well-known endpoints are the target of distributed denial of service (DDoS) attacks. Prezi leverages the combination of AWS Web Application Firewall (WAF) and Shield to protect the downstream infrastructure from these threat vectors.\u003c/p\u003e\u003cp id=\"9775\"\u003eEvery request that needs to reach Prezi infrastructure is evaluated through these components. Certain endpoints are protected via a specific rate limit to make sure they are not hammered.\u003c/p\u003e\u003cp id=\"f87b\"\u003eFor example, it does not make sense to send multiple requests for the login endpoint within a small amount of time. To protect sensible endpoints, the AWS WAF can respond with HTTP/429 (\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429\u003c/a\u003e). \u003cbr/\u003eSee the following screenshot of how a triggered rate limit looks in the browser console:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eChrome Developer tools show one HTTP response\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"7826\"\u003eOn a bigger scale, the traffic flow is monitored by AWS Shield and blocked when a DDoS attack is detected. When Shield detects a DDoS from multiple traffic sources, those sources get blocked.\u003c/p\u003e\u003ch2 id=\"868a\"\u003eAlternatives\u003c/h2\u003e\u003cp id=\"66e6\"\u003eOffering services over the Internet without any protection is a bad idea. Any public-facing IP is attracting traffic and if a company has reached a certain scale it attracts bad actors. There are alternative solutions and vendors like Cloudflare or Akamai that can offer the same protection service. As we run our workload on AWS the natural choice is AWS WAF as the integration is easy.\u003c/p\u003e\u003ch2 id=\"2fd0\"\u003eAccess (ALB, EKS, API Gateway)\u003c/h2\u003e\u003cp id=\"2718\"\u003eRequests allowed to enter reach the AWS-managed load balancer fleet that keeps track of routing those requests into the VPC environment that hosts the actual workload. The load balancer uses our public TLS certificate to offload HTTPS connections from customers.\u003c/p\u003e\u003cp id=\"df3d\"\u003eThe application load balancer (ALB) is used for routing based on the HTTP Host header. This means that based on the domain used, ALB can forward traffic into the isolated workload environment.\u003c/p\u003e\u003cp id=\"cf9f\"\u003eRunning inside the Kubernetes fleet is a self-written API gateway. The purpose of this component is to build more detailed routes based on request paths or other identifiers. Most of the backends are based on Python and Scala. Those pods run inside the Kubernetes offering of AWS: Elastic Kubernetes Service. \u003cbr/\u003eTraffic is routed into these pods either by a WSGI conform application server in Python land or directly by the JVM for Scala services.\u003c/p\u003e\u003cp id=\"a87e\"\u003eAs the mentioned API gateway runs also inside Kubernetes, it can forward traffic to the target backend services based on different routing guidelines within the cluster network. The API gateway offers the flexibility to do advanced routing to the microservices based on configuration by the developers.\u003c/p\u003e\u003cp id=\"8e1b\"\u003eWhen you think back about the scope of AWS WAF usage, there was no check for malicious content and requests. We use a different web application firewall to check for bad requests and protection against cross-site scripting, injections, and other things that might harm Prezi — or our customer.\u003c/p\u003e\u003ch2 id=\"26d9\"\u003eContent delivery (CloudFront)\u003c/h2\u003e\u003cp id=\"d420\"\u003ePrezi’s main purpose is to deliver amazing presentations that most of the time contain visuals like images and gifs. They can be served via a content delivery network (CDN) that can reproach content closer to the customer.\u003c/p\u003e\u003cp id=\"fa60\"\u003eLoading resources from a CDN does decrease the time in which the user waits for the resources to appear.\u003c/p\u003e\u003cp id=\"4d66\"\u003eAlso on the cost focus, it is cheaper to serve content from CloudFront instead of serving it every time from the backend. This applies especially to assets like images that don’t change often.\u003c/p\u003e\u003cp id=\"ed72\"\u003eDue to the deep integration into the ecosystem, in our setup, there is no other choice than CloudFront. Technically, it should also be doable with CloudFlare or any other CDN vendor.\u003c/p\u003e\u003ch2 id=\"397e\"\u003eWrap up\u003c/h2\u003e\u003cp id=\"ca27\"\u003eThe article above describes the architecture Prezi uses to serve content to a global audience.\u003c/p\u003e\u003cp id=\"8c95\"\u003eThere are multiple different ways to serve traffic — even if running on AWS.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2024-01-09T09:56:32.688Z",
  "modifiedTime": null
}
