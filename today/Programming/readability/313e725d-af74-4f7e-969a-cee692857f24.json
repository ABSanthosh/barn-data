{
  "id": "313e725d-af74-4f7e-969a-cee692857f24",
  "title": "There is no longer any such thing as Computer Security",
  "link": "https://blog.codinghorror.com/there-is-no-longer-any-such-thing-as-computer-security/",
  "description": "Remember \"cybersecurity\"? Mysterious hooded computer guys doing mysterious hooded computer guy .. things! Who knows what kind of naughty digital mischief they might be up to? Unfortunately, we now live in a world where this kind of digital mischief is literally rewriting the world's history. For proof",
  "author": "Jeff Atwood",
  "published": "Fri, 21 Sep 2018 09:50:53 GMT",
  "source": "https://feeds.feedburner.com/codinghorror",
  "categories": null,
  "byline": "Jeff Atwood",
  "length": 10355,
  "excerpt": "Remember \"cybersecurity\"? Mysterious hooded computer guys doing mysterious hooded computer guy .. things! Who knows what kind of naughty digital mischief they might be up to? Unfortunately, we now live in a world where this kind of digital mischief is literally rewriting the world's history. For proof of that, you need look no further than this single email that was sent March 19th, 2016. If you don't recognize what this is, it is a phishing email [https://blog.codinghorror.com/phishing-t",
  "siteName": "Coding Horror",
  "favicon": "https://blog.codinghorror.com/content/images/size/w256h256/2020/06/3cffc4b347c3587f19fe222caaac69f63b9a5e73.png",
  "text": "21 Sep 2018 Remember \"cybersecurity\"? Mysterious hooded computer guys doing mysterious hooded computer guy .. things! Who knows what kind of naughty digital mischief they might be up to? Unfortunately, we now live in a world where this kind of digital mischief is literally rewriting the world's history. For proof of that, you need look no further than this single email that was sent March 19th, 2016. If you don't recognize what this is, it is a phishing email. This is by now a very, very famous phishing email, arguably the most famous of all time. But let's consider how this email even got sent to its target in the first place: An attacker slurped up lists of any public emails of 2008 political campaign staffers. One 2008 staffer was also hired for the 2016 political campaign That particular staffer had non-public campaign emails in their address book, and one of them was a powerful key campaign member with an extensive email history. On successful phish leads to an even wider address book attack net down the line. Once they gain access to a person's inbox, they use it to prepare to their next attack. They'll harvest existing email addresses, subject lines, content, and attachments to construct plausible looking boobytrapped emails and mail them to all of their contacts. How sophisticated and targeted to a particular person this effort is determines whether it's so-called \"spear\" phishing or not. In this case is it was not at all targeted. This is a remarkably unsophisticated, absolutely generic routine phishing attack. There is zero focused attack effort on display here. But note the target did not immediately click the link in the email! Instead, he did exactly what you'd want a person to do in this scenario: he emailed IT support and asked if this email was valid. But IT made a fatal mistake in their response. Do you see it? Here's the kicker: Mr. Delavan, in an interview, said that his bad advice was a result of a typo: He knew this was a phishing attack, as the campaign was getting dozens of them. He said he had meant to type that it was an “illegitimate” email, an error that he said has plagued him ever since. One word. He got one word wrong. But what a word to get wrong, and in the first sentence! The email did provide the proper Google address to reset your password. But the lede was already buried since the first sentence said \"legitimate\"; the phishing link in that email was then clicked. And the rest is literally history. What's even funnier (well, in the way of gallows humor, I guess) is that public stats were left enabled for that bit.ly tracking link, so you can see exactly what crazy domain that \"Google login page\" resolved to, and that it was clicked exactly twice, on the same day it was mailed. As I said, these were not exactly sophisticated attackers. So yeah, in theory an attentive user could pay attention to the browser's address bar and notice that after clicking the link, they arrived at http://myaccount.google.com-securitysettingpage.tk/security/signinoptions/password instead of https://myaccount.google.com/security Note that the phishing URL is carefully constructed so the most \"correct\" part is at the front, and weirdness is sandwiched in the middle. Unless you're paying very close attention and your address bar is long enough to expose the full URL, it's … tricky. See this 10 second video for a dramatic example. Quick phishing demo. Would you fall for something like this? pic.twitter.com/phONMKHBle— Mustafa Al-Bassam (@musalbas) September 9, 2018 (And if you think that one's good, check out this one. Don't forget all the unicode look-alike trickery you can pull, too.) I originally wrote this post as a presentation for the Berkeley Computer Science Club back in March, and at that time I gathered a list of public phishing pages I found on the web. nightlifesofl.com ehizaza-limited.com tcgoogle.com appsgoogie.com security-facabook.com Of those five examples from 6 months ago, one is completely gone, one loads just fine, and three present an appropriately scary red interstitial warning page that strongly advises you not to visit the page you're trying to visit, courtesy of Google's safe browsing API. But of course this kind of shared blacklist domain name protection will be completely useless on any fresh phishing site. (Don't even get me started on how blacklists have never really worked anyway.) It doesn't exactly require a PhD degree in computer science to phish someone: Buy a crazy long, realistic looking domain name. Point it to a cloud server somewhere. Get a free HTTPS certificate courtesy of our friends at Let's Encrypt. Build a realistic copy of a login page that silently transmits everything you type in those login fields to you – perhaps even in real time, as the target types. Harvest email addresses and mass mail a plausible looking phishing email with your URL. I want to emphasize that although clearly mistakes were made in this specific situation, none of the people involved here were amateurs. They had training and experience. They were working with IT and security professionals. Furthermore, they knew digital attacks were incoming. The … campaign was no easy target; several former employees said the organization put particular stress on digital safety. Work emails were protected by two-factor authentication, a technique that uses a second passcode to keep accounts secure. Most messages were deleted after 30 days and staff went through phishing drills. Security awareness even followed the campaigners into the bathroom, where someone put a picture of a toothbrush under the words: “You shouldn’t share your passwords either.” The campaign itself used two factor auth extensively, which is why personal gmail accounts were targeted, because they were less protected. The key takeaway here is that it's basically impossible, statistically speaking, to prevent your organization from being phished. Or is it? Nobody is doing better work in this space right now than Maciej Ceglowski and Tech Solidarity. Their list of basic security precautions for non-profits and journalists is pure gold and has been vetted by many industry professionals with security credentials that are actually impressive, unlike mine. Everyone should read this list very closely, point by point. Everyone? Computers, courtesy of smartphones, are now such a pervasive part of average life for average people that there is no longer any such thing as \"computer security\". There is only security. In other words, these are normal security practices everyone should be familiar with. Not just computer geeks. Not just political activists and politicians. Not just journalists and nonprofits. Everyone. It is a fair bit of reading, so because I know you are just as lazy as I am, and I am epically lazy, let me summarize what I view as the three important takeaways from the hard work Tech Solidarity put into these resources. These three short sentences are the 60 second summary of what you want to do, and what you want to share with others so they do, too. 1) Enable Two Factor authentication through an app, and not SMS, everywhere you can. Logging in with only a password, now matter how long and unique you attempt to make that password, will never be enough. A password is what you know; you need to add the second factor of something you have (or something you are) to achieve significant additional security. SMS can famously be intercepted, social engineered, or sim-jacked all too easily. If it's SMS, it's not secure, period. So install an authenticator app, and use it, at least for your most important credentials such as your email account and your bank. Have I mentioned that Discourse added two factor authentication support in version 2.0, and our just released 2.1 adds printed backup codes, too? There are two paths forward: you can talk about the solution, or you can build the solution. I'm trying to do both to the best of my ability. Look for the 2FA auth option in your user preferences on your favorite Discourse instance. It's there for you. (This is also a company policy at Discourse; if you work here, you 2FA everything all the time. No other login option exists.) 2) Make all your passwords 11 characters or more. It's a long story, but anything under 11 characters is basically the same as having no password at all these days. I personally recommend at least 14 characters, maybe even 16. But this won't be a problem for you, because... 3) Use a password manager. If you use a password manager, you can simultaneously avoid the pernicious danger of password re-use and the difficulty of coming up with unique and random passwords all the time. It is my hope in the long run that cloud based password management gets deeply built into Android, iOS, OSX, and Windows so that people don't need to run a weird melange of third party apps to achieve this essential task. Password management is foundational and should not be the province of third parties on principle, because you never outsource a core competency. Bonus rule! For the particularly at-risk, get and use a U2F key. In the long term, two factor through an app isn't quite secure enough due to the very real (and growing) specter of real-time phishing. Authentication apps offer timed keys that expire after a minute or two, but if the attacker can get you to type an authentication key and relay it to the target site fast enough, they can still log in as you. If you need ultimate protection, look into U2F keys. I believe U2F support is still too immature at the moment, particularly on mobile, for this to be practical for the average person right now. But if you do happen to fall into those groups that will be under attack, you absolutely want to set up U2F keys where you can today. They're cheap, and the good news is that they literally make phishing impossible at last. Given that Google had 100% company wide success against phishing with U2F, we know this works. In today's world, computers are now so omnipresent that there is no longer any such thing as cybersecurity, online security, or computer security – there's only security. You either have it, or you don't. If you follow and share these three rules, hopefully you too can have a modicum of security today.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n        \n        \n\u003cmain role=\"main\"\u003e\n\n    \u003carticle\u003e\n\n\n            \u003cspan\u003e\u003ctime datetime=\"2018-09-21\"\u003e21 Sep 2018\u003c/time\u003e \u003c/span\u003e\n\n            \n\n            \u003csection\u003e\n                \u003cp\u003eRemember \u0026#34;cybersecurity\u0026#34;?\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/its-cybersecurity-yay.jpg\" alt=\"its-cybersecurity-yay\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eMysterious hooded computer guys doing mysterious hooded computer guy .. things! Who knows what kind of naughty digital mischief they might be up to?\u003c/p\u003e\n\u003cp\u003eUnfortunately, we now live in a world where this kind of digital mischief is literally rewriting the world\u0026#39;s history. For proof of that, you need look no further than this single email that was sent March 19th, 2016.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/podesta-hack-email-text.png\" alt=\"podesta-hack-email-text\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eIf you don\u0026#39;t recognize what this is, it is a \u003ca href=\"https://blog.codinghorror.com/phishing-the-forever-hack/\"\u003ephishing email\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.codinghorror.com/phishing-the-forever-hack/\"\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/phishing-guy.jpg\" alt=\"phishing-guy\" loading=\"lazy\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis is by now a very, very famous phishing email, arguably the most famous of all time. But let\u0026#39;s consider \u003ca href=\"https://www.apnews.com/dea73efc01594839957c3c9a6c962b8a?ref=blog.codinghorror.com\"\u003ehow this email even got sent to its target in the first place\u003c/a\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAn attacker slurped up lists of any public emails of 2008 political campaign staffers.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOne 2008 staffer was \u003cem\u003ealso\u003c/em\u003e hired for the 2016 political campaign\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThat particular staffer had non-public campaign emails in their address book, and one of them was a powerful key campaign member with an extensive email history.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOn successful phish leads to an even wider address book attack net down the line. Once they gain access to a person\u0026#39;s inbox, they use it to prepare to their next attack. They\u0026#39;ll harvest existing email addresses, subject lines, content, and attachments to construct plausible looking boobytrapped emails and mail them to all of \u003cem\u003etheir\u003c/em\u003e contacts. How sophisticated and targeted to a particular person this effort is determines whether it\u0026#39;s so-called \u0026#34;spear\u0026#34; phishing or not.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/phishing-vs-spear-phishing.png\" alt=\"phishing-vs-spear-phishing\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn this case is it was not at all targeted. This is a remarkably unsophisticated, absolutely generic routine phishing attack. There is zero focused attack effort on display here. But note the target did \u003cem\u003enot\u003c/em\u003e immediately click the link in the email!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/podesta-hack-email-link-1.png\" alt=\"podesta-hack-email-link-1\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eInstead, he did exactly what you\u0026#39;d want a person to do in this scenario: \u003cstrong\u003ehe emailed IT support and asked if this email was valid.\u003c/strong\u003e But IT made \u003ca href=\"https://www.nytimes.com/2016/12/13/us/politics/russia-hack-election-dnc.html?ref=blog.codinghorror.com\"\u003ea fatal mistake in their response\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/podesta-it-support-response.png\" alt=\"podesta-it-support-response\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eDo you see it? Here\u0026#39;s the kicker:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMr. Delavan, in an interview, said that his bad advice was a result of a typo: He knew this was a phishing attack, as the campaign was getting dozens of them. He said \u003cstrong\u003ehe had meant to type that it was an “illegitimate” email, an error that he said has plagued him ever since.\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eOne word. He got \u003cem\u003eone\u003c/em\u003e word wrong. But what a word to get wrong, and in the first sentence! The email did provide the proper Google address to reset your password. But the lede was already buried since the first sentence said \u0026#34;legitimate\u0026#34;; the phishing link in that email was then clicked. And the rest is literally history.\u003c/p\u003e\n\u003cp\u003eWhat\u0026#39;s even funnier (well, in the way of gallows humor, I guess) is that public stats were left enabled for that bit.ly tracking link, so you can see exactly what crazy domain that \u0026#34;Google login page\u0026#34; resolved to, and that it was clicked exactly twice, on the same day it was mailed.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/bitly-podesta-tracking-link.png\" alt=\"bitly-podesta-tracking-link\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eAs I said, these were not exactly sophisticated attackers. So yeah, in \u003cem\u003etheory\u003c/em\u003e an attentive user could pay attention to the browser\u0026#39;s address bar and notice that after clicking the link, they arrived at\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ehttp://myaccount.google.com-securitysettingpage.tk/security/signinoptions/password\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003einstead of\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ehttps://myaccount.google.com/security\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eNote that the phishing URL is carefully constructed so the most \u0026#34;correct\u0026#34; part is at the front, and weirdness is sandwiched in the middle. Unless you\u0026#39;re paying very close attention and your address bar is long enough to expose the full URL, it\u0026#39;s … tricky. See this 10 second video for a dramatic example.\u003c/p\u003e\n\u003cblockquote data-lang=\"en\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eQuick phishing demo. Would you fall for something like this? \u003ca href=\"https://t.co/phONMKHBle?ref=blog.codinghorror.com\"\u003epic.twitter.com/phONMKHBle\u003c/a\u003e\u003c/p\u003e— Mustafa Al-Bassam (@musalbas) \u003ca href=\"https://twitter.com/musalbas/status/1038919152826757122?ref_src=twsrc%5Etfw\u0026amp;ref=blog.codinghorror.com\"\u003eSeptember 9, 2018\u003c/a\u003e\u003c/blockquote\u003e\n\n\u003cp\u003e(And if you think that one\u0026#39;s good, check out \u003ca href=\"https://twitter.com/tomscott/status/812265182646927361?ref=blog.codinghorror.com\"\u003ethis one\u003c/a\u003e. Don\u0026#39;t forget all the unicode look-alike trickery you can pull, too.)\u003c/p\u003e\n\u003cp\u003eI originally wrote this post as a presentation for the Berkeley Computer Science Club back in March, and at that time I gathered a list of public phishing pages I found on the web.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003enightlifesofl.com\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eehizaza-limited.com\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003etcgoogle.com\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003eappsgoogie.com\u003c/code\u003e\u003cbr/\u003e\n\u003ccode\u003esecurity-facabook.com\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOf those five examples from 6 months ago, one is completely gone, one loads just fine, and three present an appropriately scary red interstitial warning page that strongly advises you not to visit the page you\u0026#39;re trying to visit, courtesy of Google\u0026#39;s \u003ca href=\"https://developers.google.com/safe-browsing/?ref=blog.codinghorror.com\"\u003esafe browsing API\u003c/a\u003e. But of course this kind of shared blacklist domain name protection will be completely useless on any fresh phishing site. (Don\u0026#39;t even get me started on how \u003ca href=\"https://blog.codinghorror.com/blacklists-dont-work/\"\u003eblacklists have never really worked\u003c/a\u003e anyway.)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/google-login-phishing-page.png\" alt=\"google-login-phishing-page\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eIt doesn\u0026#39;t exactly require a PhD degree in computer science to phish someone:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBuy a crazy long, realistic looking domain name.\u003c/li\u003e\n\u003cli\u003ePoint it to a cloud server somewhere.\u003c/li\u003e\n\u003cli\u003eGet a free HTTPS certificate courtesy of \u003ca href=\"https://blog.codinghorror.com/lets-encrypt-everything/\"\u003eour friends at Let\u0026#39;s Encrypt\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eBuild a realistic copy of a login page that silently transmits everything you type in those login fields to you – perhaps even in real time, as the target types.\u003c/li\u003e\n\u003cli\u003eHarvest email addresses and mass mail a plausible looking phishing email with your URL.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI want to emphasize that although clearly mistakes were made in this specific situation, none of the people involved here were amateurs. They had training and experience. They were working with IT and security professionals. Furthermore, they \u003ca href=\"https://www.apnews.com/dea73efc01594839957c3c9a6c962b8a?ref=blog.codinghorror.com\"\u003eknew digital attacks were incoming\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe … campaign was no easy target; several former employees said the organization put particular stress on digital safety.\u003c/p\u003e\n\u003cp\u003eWork emails were protected by two-factor authentication, a technique that uses a second passcode to keep accounts secure. Most messages were deleted after 30 days and staff went through phishing drills. Security awareness even followed the campaigners into the bathroom, where someone put a picture of a toothbrush under the words: “You shouldn’t share your passwords either.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe campaign itself used two factor auth extensively, which is why personal gmail accounts were targeted, because they were less protected.\u003c/p\u003e\n\u003cp\u003eThe key takeaway here is that \u003cstrong\u003eit\u0026#39;s basically impossible, statistically speaking, to prevent your organization from being phished.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOr is it?\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://techsolidarity.org/?ref=blog.codinghorror.com\"\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/techsolidarity-logo.png\" alt=\"techsolidarity-logo\" loading=\"lazy\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eNobody is doing better work in this space right now than Maciej Ceglowski and Tech Solidarity. Their list of \u003ca href=\"https://techsolidarity.org/resources/basic_security.htm?ref=blog.codinghorror.com\"\u003ebasic security precautions for non-profits and journalists\u003c/a\u003e is pure gold and has been vetted by many industry professionals with security credentials that are actually impressive, unlike mine. Everyone should read this list very closely, point by point.\u003c/p\u003e\n\u003cp\u003eEveryone?\u003c/p\u003e\n\u003cp\u003eComputers, courtesy of smartphones, are \u003ca href=\"https://blog.codinghorror.com/can-software-make-you-less-racist/\"\u003enow such a pervasive part of average life for average people\u003c/a\u003e that \u003cstrong\u003ethere is no longer any such thing as \u0026#34;computer security\u0026#34;. There is only \u003cem\u003esecurity\u003c/em\u003e.\u003c/strong\u003e In other words, these are normal security practices \u003cem\u003eeveryone\u003c/em\u003e should be familiar with. Not just computer geeks. Not just political activists and politicians. Not just journalists and nonprofits.\u003c/p\u003e\n\u003cvideo poster=\"https://blog.codinghorror.com/content/images/2018/09/gary-oldman-everyone-poster.jpg\" preload=\"none\" controls=\"\"\u003e\n\u003csource src=\"http://discourse-cdn.codinghorror.com/uploads/default/original/3X/2/4/2483fdc1eb5585ebd550bba1614d229da2f2987c.mp4\"/\u003e\n\u003c/video\u003e\n\u003cp\u003e\u003cem\u003eEveryone.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIt is a fair bit of reading, so because I know you are just as lazy as I am, and I am \u003cem\u003eepically\u003c/em\u003e lazy, let me summarize what I view as the three important takeaways from the hard work Tech Solidarity put into \u003ca href=\"https://techsolidarity.org/resources.html?ref=blog.codinghorror.com\"\u003ethese resources\u003c/a\u003e. These three short sentences are the 60 second summary of what you want to do, and what you want to share with others so \u003cem\u003ethey\u003c/em\u003e do, too.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1) Enable Two Factor authentication through an app, and \u003cem\u003enot SMS\u003c/em\u003e, everywhere you can.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/google-2fa-1.png\" alt=\"google-2fa-1\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eLogging in with only a password, now matter how long and unique you attempt to make that password, will never be enough. A password is what you know; you need to add the second factor of something you \u003cem\u003ehave\u003c/em\u003e (or something you \u003cem\u003eare\u003c/em\u003e) to achieve significant additional security. SMS can famously \u003ca href=\"https://www.wired.com/story/phone-numbers-indentification-authentication/?ref=blog.codinghorror.com\"\u003ebe intercepted, social engineered, or sim-jacked all too easily\u003c/a\u003e. If it\u0026#39;s SMS, it\u0026#39;s not secure, \u003cem\u003eperiod\u003c/em\u003e. So install an authenticator app, and use it, at least for your most important credentials such as your email account and your bank.\u003c/p\u003e\n\u003cp\u003eHave I mentioned that Discourse \u003ca href=\"https://blog.discourse.org/2018/05/discourse-2-0-released/?ref=blog.codinghorror.com\"\u003eadded two factor authentication support in version 2.0\u003c/a\u003e, and our just released 2.1 adds printed backup codes, too? There are two paths forward: you can \u003cem\u003etalk\u003c/em\u003e about the solution, or you can \u003cem\u003ebuild\u003c/em\u003e the solution. I\u0026#39;m trying to do both to the best of my ability. Look for the 2FA auth option in your user preferences on your favorite Discourse instance. It\u0026#39;s there for you.\u003c/p\u003e\n\u003cp\u003e(This is also a company policy at Discourse; if you work here, \u003cem\u003eyou 2FA everything all the time\u003c/em\u003e. No other login option exists.)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2) Make all your passwords 11 characters or more.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIt\u0026#39;s a \u003ca href=\"https://blog.codinghorror.com/hacker-hack-thyself/\"\u003elong story\u003c/a\u003e, but anything under 11 characters \u003ca href=\"https://blog.codinghorror.com/your-password-is-too-damn-short/\"\u003eis basically the same as having no password at all\u003c/a\u003e these days. I personally recommend at least 14 characters, maybe even 16. But this won\u0026#39;t be a problem for you, because...\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e3) Use a password manager.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIf you use a password manager, you can simultaneously avoid the pernicious danger of password re-use and \u003ca href=\"https://blog.codinghorror.com/password-rules-are-bullshit/\"\u003ethe difficulty of coming up with unique and random passwords\u003c/a\u003e all the time. It is my hope in the long run that cloud based password management gets deeply built into Android, iOS, OSX, and Windows so that people don\u0026#39;t need to run a weird melange of third party apps to achieve this essential task. Password management is foundational and should not be the province of third parties on principle, because you never outsource a core competency.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBonus rule! For the particularly at-risk, get and use a U2F key.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn the long term, two factor through an app isn\u0026#39;t quite secure enough due to the very real (and growing) specter of real-time phishing. Authentication apps offer timed keys that expire after a minute or two, but if the attacker can get you to type an authentication key and relay it to the target site fast enough, they can still log in as you. If you need ultimate protection, \u003ca href=\"https://en.wikipedia.org/wiki/Universal_2nd_Factor?ref=blog.codinghorror.com\"\u003elook into U2F keys\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://blog.codinghorror.com/content/images/2018/09/u2f-keys.jpg\" alt=\"u2f-keys\" loading=\"lazy\"/\u003e\u003c/p\u003e\n\u003cp\u003eI believe U2F support is still too immature at the moment, particularly on mobile, for this to be practical for the average person right now. But if you do happen to fall into those groups that will be under attack, you \u003cem\u003eabsolutely\u003c/em\u003e want to set up U2F keys where you can today. They\u0026#39;re cheap, and the good news is that  they \u003cem\u003eliterally make phishing impossible\u003c/em\u003e at last. Given that Google had \u003ca href=\"https://krebsonsecurity.com/2018/07/google-security-keys-neutralized-employee-phishing/?ref=blog.codinghorror.com\"\u003e100% company wide success against phishing with U2F\u003c/a\u003e, we know this works.\u003c/p\u003e\n\u003cp\u003eIn today\u0026#39;s world, computers are now so omnipresent that there is no longer any such thing as cybersecurity, online security, or computer security – there\u0026#39;s only \u003cem\u003esecurity\u003c/em\u003e. You either have it, or you don\u0026#39;t. If you follow and share these three rules, hopefully you too can have a modicum of security today.\u003c/p\u003e\n\n            \u003c/section\u003e\n\n            \n\n            \n\n\n    \u003c/article\u003e\n\n    \n\n    \n\n\u003c/main\u003e\n\n\n\n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2018-09-21T09:50:53Z",
  "modifiedTime": "2018-09-21T20:10:27Z"
}
