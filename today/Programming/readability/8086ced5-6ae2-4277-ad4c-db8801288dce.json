{
  "id": "8086ced5-6ae2-4277-ad4c-db8801288dce",
  "title": "Load Fonts Fast",
  "link": "https://buffer.com/resources/load-fonts-fast/",
  "description": "Learn the trick to fast fonts. This post shares how to load fonts fast.",
  "author": "Juliana Gomez",
  "published": "Thu, 09 Dec 2021 19:46:22 GMT",
  "source": "https://buffer.com/resources/overflow/rss/",
  "categories": [
    "Overflow"
  ],
  "byline": "Joe Birch",
  "length": 5057,
  "excerpt": "Learn the trick to fast fonts. This post shares how to load fonts fast.",
  "siteName": "Buffer: All-you-need social media toolkit for small businesses",
  "favicon": "https://buffer.com/static/icons/apple-touch-icon.png",
  "text": "At Buffer, we’re constantly experimenting with ways we can improve our products and try out new ideas. We recently launched Start Page, a beautiful, flexible, mobile-friendly landing page that you can build in minutes and update in seconds. As a Software Engineer on Buffer’s team I’ve tackled a long list of fun projects, including Start Page. One thing I love about this project, is that as we foray deeper and deeper into user-generated content and customization, we’re discovering new engineering challenges that we haven’t had in our frontends before. In this case, we wanted to introduce 13 new font options (for a total of 16 fonts) and we wanted to make sure that they loaded nice and quickly. As I worked on this, I learned so much I didn’t know about fonts so in this post I want to share more about how we went about this for anyone facing similar challenges.A screen capture of the Start Page app, demonstrating the new font picker functionalityFonts are render-blockingLet’s start with the ‘why’. Fonts are generally pretty light resources, which are usually cached in browser so why is it important to ensure a quick loading strategy? Because fonts are high-priority, synchronous requests which means they’re render-blocking. If we can load fonts quickly and/or asynchronously, we can improve site speed.FOUT and FOITOk, so you don’t want to block your rendering, there are generally two strategies to chose from to handle text loaded before it’s custom font:FOUT - Flash Of Unstyled TextRenders the text but with a fallback font. Google Fonts can now return with display=swap which instructs the browser to use the fallback font to display the text until the custom font has fully downloaded. If you want to be meticulous, you can find a better fallback font using this app: Font Style MatcherFOIT - Flash Of Invisible TextHere, the text is rendered with an invisible font until the custom font has fully downloaded. This one makes more sense to use for something like a logo where the brand would be affected if rendered with a fallback font (although for a logo I’d use an SVG but examples!)THE trick for fast fontsThe general advice nowadays is to preconnect to the font server:\u003clink rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" crossorigin /\u003e \u003clink rel=\"preconnect\" href=\"https://fonts.googleapis.com\" /\u003ethen preload the fonts:  \u003clink       rel=\"preload\"       as=\"style\"       href=\"https://fonts.googleapis.com/css2?family={your font families here}\u0026display=swap\"     /\u003eFinally as a fallback, request the fonts async by setting media to “print” for browsers which don’t support rel=\"preload\" (about 12% of browsers in this the year 2021)\u003clink       rel=\"stylesheet\"       href=\"https://fonts.googleapis.com/css2?family={your font families here}\u0026display=swap\"       media=\"print\"       onload=\"this.media='all'\"     /\u003eThis works because a regular stylesheet is render-blocking but a print stylesheet is assigned idle priority. After it’s loaded, the link’s media is applied to all.Hosting your own fonts is the fastest but Google Fonts does a lot for you:Returns multiple alphabetsReturns a css file customized to the user agent that requested itWhen you have multiple fonts, it’s best to make 1 request so it's quickerYou can tailor your requests to target specific font-weights and formats (bold, italic, thin)Font Loading APIThere’s a new-ish CSS Font Loading API that can request fonts on demand but I found that this doesn’t play nice with Google Fonts because you need the source URL for the fonts and the Google Fonts URL that you get isn’t the source, it’s the request. Google, along with Typekit, does have a library called Web Font Loader, that works like the Font Loading API but plays better with Google Fonts.So what did we do in Start Page?We implemented the popular strategy for the builder (the app itself) and while we do have some FOUT on first load ever (remember browser caching!) it’s very minimal, if seen at all. For generated pages, we get the fonts used in the theme before generating the HTML so we can inject only the fonts we need. This makes our generated pages much faster and lighter.We’re excited to see how this experiment will play out and if folks are keen to get more font options. If that’s the case, we might very well look into a more dynamic strategy (like loading only the currently used fonts on load and then sending another request if a user clicks on Appearance to change their fonts). Another option we could look into is implementing a way for requesting multiple fonts if we hosted them ourselves.That’s it for now! Thanks for making it this far, I hope this was interesting for you! Know anything neat about fonts that I didn’t mention here? Share it with us on Twitter.Resources:The Fastest Google FontsLoading Google Fonts and any other web fonts as fast as possible in early 2021FOIT vs FOUT: a comparison on web font loadingCSS Tricks - font-displayTry Buffer for free140,000+ small businesses like yours use Buffer to build their brand on social media every monthGet started now",
  "image": "https://buffer.com/resources/content/images/2021/12/Frame-51.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eAt Buffer, we’re constantly experimenting with ways we can improve our products and try out new ideas. We recently launched \u003ca href=\"https://buffer.com/start-page\"\u003eStart Page\u003c/a\u003e, a beautiful, flexible, mobile-friendly landing page that you can build in minutes and update in seconds. As a Software Engineer on Buffer’s team I’ve tackled a long list of fun projects, including Start Page. One thing I love about this project, is that as we foray deeper and deeper into user-generated content and customization, we’re discovering new engineering challenges that we haven’t had in our frontends before. In this case, we wanted to introduce 13 new font options (for a total of 16 fonts) and we wanted to make sure that they loaded nice and quickly. As I worked on this, I learned so much I didn’t know about fonts so in this post I want to share more about how we went about this for anyone facing similar challenges.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eA screen capture of the Start Page app, demonstrating the new font picker functionality\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"fonts-are-render-blocking\"\u003eFonts are render-blocking\u003c/h2\u003e\u003cp\u003eLet’s start with the ‘why’. Fonts are generally pretty light resources, which are usually cached in browser so why is it important to ensure a quick loading strategy? Because fonts are high-priority, synchronous requests which means they’re render-blocking. If we can load fonts quickly and/or asynchronously, we can improve site speed.\u003c/p\u003e\u003ch2 id=\"fout-and-foit\"\u003eFOUT and FOIT\u003c/h2\u003e\u003cp\u003eOk, so you don’t want to block your rendering, there are generally two strategies to chose from to handle text loaded before it’s custom font:\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eFOUT - Flash Of Unstyled Text\u003c/strong\u003e\u003cbr/\u003eRenders the text but with a fallback font. Google Fonts can now return with display=swap which instructs the browser to use the fallback font to display the text until the custom font has fully downloaded. If you want to be meticulous, you can find a better fallback font using this app: \u003ca href=\"https://meowni.ca/font-style-matcher/\" rel=\"noopener noreferrer\"\u003eFont Style Matcher\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eFOIT - Flash Of Invisible Text\u003c/strong\u003e\u003cbr/\u003eHere, the text is rendered with an invisible font until the custom font has fully downloaded. This one makes more sense to use for something like a logo where the brand would be affected if rendered with a fallback font (although for a logo I’d use an SVG but examples!)\u003c/p\u003e\u003ch2 id=\"the-trick-for-fast-fonts\"\u003eTHE trick for fast fonts\u003c/h2\u003e\u003cp\u003eThe general advice nowadays is to preconnect to the font server:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.gstatic.com/\u0026#34; crossorigin /\u0026gt;\n\u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.googleapis.com\u0026#34; /\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ethen preload the fonts:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e  \u0026lt;link\n      rel=\u0026#34;preload\u0026#34;\n      as=\u0026#34;style\u0026#34;\n      href=\u0026#34;https://fonts.googleapis.com/css2?family={your font families here}\u0026amp;display=swap\u0026#34;\n    /\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFinally as a fallback, request the fonts async by setting media to “print” for browsers which don’t support \u003ccode\u003erel=\u0026#34;preload\u0026#34;\u003c/code\u003e (about 12% of browsers in this the year 2021)\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;link\n      rel=\u0026#34;stylesheet\u0026#34;\n      href=\u0026#34;https://fonts.googleapis.com/css2?family={your font families here}\u0026amp;display=swap\u0026#34;\n      media=\u0026#34;print\u0026#34;\n      onload=\u0026#34;this.media=\u0026#39;all\u0026#39;\u0026#34;\n    /\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis works because a regular stylesheet is render-blocking but a print stylesheet is assigned idle priority. After it’s loaded, the link’s media is applied to all.\u003c/p\u003e\u003ch3 id=\"hosting-your-own-fonts-is-the-fastest-but-google-fonts-does-a-lot-for-you\"\u003eHosting your own fonts is the fastest but Google Fonts does a lot for you:\u003c/h3\u003e\u003cul\u003e\u003cli\u003eReturns multiple alphabets\u003c/li\u003e\u003cli\u003eReturns a css file customized to the user agent that requested it\u003c/li\u003e\u003cli\u003eWhen you have multiple fonts, it’s best to make 1 request so it\u0026#39;s quicker\u003c/li\u003e\u003cli\u003eYou can tailor your requests to target specific font-weights and formats (bold, italic, thin)\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"font-loading-api\"\u003eFont Loading API\u003c/h2\u003e\u003cp\u003eThere’s a new-ish \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API\" rel=\"noopener noreferrer\"\u003eCSS Font Loading API\u003c/a\u003e that can request fonts on demand but I found that this doesn’t play nice with Google Fonts because you need the source URL for the fonts and the Google Fonts URL that you get isn’t the source, it’s the request. Google, along with Typekit, does have a library called \u003ca href=\"https://developers.google.com/fonts/docs/webfont_loader\"\u003eWeb Font Loader\u003c/a\u003e, that works like the Font Loading API but plays better with Google Fonts.\u003c/p\u003e\u003ch2 id=\"so-what-did-we-do-in-start-page\"\u003eSo what did we do in Start Page?\u003c/h2\u003e\u003cdiv\u003e\u003cp\u003eWe implemented the popular strategy for the builder (the app itself) and while we do have some FOUT on first load ever (remember browser caching!) it’s very minimal, if seen at all. For generated pages, we get the fonts used in the theme before generating the HTML so we can inject only the fonts we need. This makes our generated pages much faster and lighter.We’re excited to see how this experiment will play out and if folks are keen to get more font options. If that’s the case, we might very well look into a more dynamic strategy (like loading only the currently used fonts on load and then sending another request if a user clicks on Appearance to change their fonts). Another option we could look into is implementing a way for requesting multiple fonts if we hosted them ourselves.\u003c/p\u003e\u003cp\u003eThat’s it for now! Thanks for making it this far, I hope this was interesting for you! Know anything neat about fonts that I didn’t mention here? \u003ca href=\"https://twitter.com/bufferdevs\"\u003eShare it with us on Twitter.\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003eResources:\u003c/em\u003e\u003cbr/\u003e\u003ca href=\"https://csswizardry.com/2020/05/the-fastest-google-fonts/\" rel=\"noopener noreferrer\"\u003eThe Fastest Google Fonts\u003c/a\u003e\u003cbr/\u003e\u003ca href=\"https://dev.to/masakudamatsu/loading-google-fonts-and-any-other-web-fonts-as-fast-as-possible-in-early-2021-4f5o\" rel=\"noopener noreferrer\"\u003eLoading Google Fonts and any other web fonts as fast as possible in early 2021\u003c/a\u003e\u003cbr/\u003e\u003ca href=\"https://rockcontent.com/blog/foit-vs-fout-comparison-webfont-loading/\" rel=\"noopener noreferrer\"\u003eFOIT vs FOUT: a comparison on web font loading\u003c/a\u003e\u003cbr/\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/f/font-display/\" rel=\"noopener noreferrer\"\u003eCSS Tricks - font-display\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv id=\"midpost-cta\"\u003e\u003ch3\u003eTry Buffer for free\u003c/h3\u003e\u003cp\u003e140,000+ small businesses like yours use Buffer to build their brand on social media every month\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://login.buffer.com/signup?product=buffer\u0026amp;plan=free\u0026amp;cycle=year\u0026amp;cta=bufferBlogLibrary-post-midCTA-signup-1\" role=\"button\"\u003eGet started now\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
