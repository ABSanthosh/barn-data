{
  "id": "f1925a8e-b8c7-4ad3-a3ae-52b422362dd9",
  "title": "WebStorm 2025.1 Beta Is Here With AI Enhancements, Framework Improvements, and a Better User Experience",
  "link": "https://blog.jetbrains.com/webstorm/2025/03/webstorm-2025-1-beta/",
  "description": "The EAP cycle for WebStorm 2025.1 is over, and we’re excited to share what’s included in the Beta builds. The Toolbox App is the easiest way to get the Beta builds and keep both them and your stable versions up to date. You can also manually download the Beta builds from our website. DOWNLOAD WEBSTORM […]",
  "author": "Vladislav Minaev",
  "published": "Fri, 14 Mar 2025 11:18:11 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "eap",
    "news",
    "webstorm-2025-1"
  ],
  "byline": "Vladislav Minaev",
  "length": 7626,
  "excerpt": "The EAP cycle for WebStorm 2025.1 is over, and we're excited to share what's included in the Beta builds. The Toolbox App is the easiest way to get the Beta builds and keep both them and your stable",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The JavaScript and TypeScript IDE Early Access Program NewsWebStorm 2025.1 Beta Is Here With AI Enhancements, Framework Improvements, and a Better User Experience The EAP cycle for WebStorm 2025.1 is over, and we’re excited to share what’s included in the Beta builds. The Toolbox App is the easiest way to get the Beta builds and keep both them and your stable versions up to date. You can also manually download the Beta builds from our website. DOWNLOAD WEBSTORM 2025.1 BETA Important! WebStorm Beta builds are not fully tested and might be unstable. Please try the latest build and share your feedback with us. You can do so using our issue tracker or by leaving a comment on this blog post. Key improvements AI Assistant Сlaude and local LLMs JetBrains AI Assistant is advancing its line of models! We’ve added support for Claude 3.5 Sonnet and Claude 3.5 Haiku, now provisioned in Amazon Bedrock. This means you’ll benefit from sharper responses, faster insights, and an even smoother experience. AI Assistant’s lineup of OpenAI models now includes o1, o1-mini, and o3-mini. In addition to cloud-based models, you can now connect the AI chat to local models available through Ollama and LM Studio! You can set up local providers via Settings | Tools | AI Assistant | Custom Models: Improved AI completion for web frameworks For the 2025.1 release we have focused on improving AI-based completion in the context of web framework components. These changes affect local full line code completion as well as cloud-based completion suggestions: Enhanced AI test generation AI-powered test generation now offers more careful framework detection, especially for cases when multiple frameworks are present. Additionally, generated tests respect naming conventions: TypeScript Service-powered type engine The engine previously known as WebStorm@next or the Use types from server option now has an official name – the service-powered type engine! We’re currently polishing it, with a focus on performance. A dedicated icon in the status bar displays the engine’s status, and you can granularly enable or disable it for supported frameworks or for TypeScript in general within the current project: If you notice any degradations when the new engine is enabled, please use the Submit a bug report link. Angular improvements WebStorm now supports code completion for host binding attributes based on directive selectors. Quick-fixes for creating fields are also available within binding expressions. Moreover, refactoring is supported across different locations and is even available for CSS classes: The long-awaited support for Reactive Forms is here. This update includes code completion, syntax highlighting, validation, refactoring, and quick-fixes for Reactive Forms. Both declaration styles – constructor-based and builder-based – are fully supported. There is also a new intention to extract or inline component templates. Invoke Show Context Actions (⌥⏎ (macOS) / Alt+Enter (Windows/Linux)) to use the action: This release brings many other improvements and bug fixes for Angular beyond the features mentioned above. Next.js improvements WebStorm 2025.1 Beta introduces automatic run configuration creation for Next.js applications. Now, you can easily initiate debug sessions for both the client and server components of your Next.js application using the Run widget. Vue improvements The New Project wizard now gives you the option to generate a new Nuxt project using the Nuxt CLI (nuxi): We’ve also implemented several bug fixes, including: WEB-59818 – Vue custom global properties added by augmenting vue are now resolved. WEB-69114 – Auto-completion and auto-imports now work for packaged components declared with __VLS_WithTemplateSlots. User experience Floating toolbar In WebStorm 2025.1 Beta, invoking Show Context Actions (⌥⏎ (macOS) / Alt+Enter (Windows/Linux)) now opens the floating toolbar with different action groups. The toolbar also appears when you select code in the editor: The floating toolbar contains the following actions and action groups: Context actions AI Assistant context actions (if the AI Assistant plugin is installed) Refactor Show usages Surround with tag Reformat code You can customize the contents of the toolbar by opening the kebab menu (three vertical dots) and selecting the Customize Toolbar… option New file creation in the Project tool window Creating new files is now easier in the Project tool window. You can simply use the + icon located directly in the window’s toolbar: GraphQL and Prisma WebStorm 2025.1 Beta introduces the following improvements for Prisma: ULID support (WEB-71197) Multi-line comment syntax (WEB-70929) gql(query) syntax support (WEB-71611) Prettier integration improvements WebStorm now automatically detects and applies the nearest in the directory tree Prettier configuration when formatting files, ensuring the code style is consistent across subprojects. The Indentation status bar widget shows whether Prettier has modified the code style. The new dropdown menu offers the following options: Open Configuration File (or use default Prettier settings if none exists) Open Prettier Settings Disable Prettier Code Style Modifications Code style changes made by Prettier are visible in the Code Style tab under Settings, where you can also disable automatic modifications. A new setting controls whether WebStorm should use Prettier to auto-format code styles. This option is enabled by default. In case if .editorconfig is present, Prettier takes precedence for files it handles, but if certain options aren’t specified in Prettier, EditorConfig settings still apply. Monorepo support We are consistently working to improve reliability and performance in mono-repo setups. Here are some of the most noticable fixes in this build for long-standing issues: WEB-71210 – Auto-import and syntax highlighting now work as expected for sibling packages in monorepo. WEB-70868 – IntelliSense fixed in large nx TypeScript monorepos. WEB-69642 – Array values in package.json export fields are now processed properly. WEB-64647 – Path aliases defined in package.json exports are now used by auto-import in monorepos. That’s it for today. For the full list of improvements introduced throughout the latest 2025.1 EAPs, check out the release notes. The WebStorm team Subscribe to WebStorm Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/03/ws-2025-1-social_share.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/webstorm/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/WebStorm-2.svg\" alt=\"Webstorm logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe JavaScript and TypeScript IDE\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/webstorm/category/eap/\"\u003eEarly Access Program\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/webstorm/category/news/\"\u003eNews\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eWebStorm 2025.1 Beta Is Here With AI Enhancements, Framework Improvements, and a Better User Experience\u003c/h2\u003e                    \n                    \n\u003cp\u003eThe EAP cycle for WebStorm 2025.1 is over, and we’re excited to share what’s included in the Beta builds.\u003c/p\u003e\n\n\n\u003cp\u003eThe \u003ca href=\"https://www.jetbrains.com/toolbox-app/\" target=\"_blank\" rel=\"noopener\"\u003eToolbox App\u003c/a\u003e is the easiest way to get the Beta builds and keep both them and your stable versions up to date. You can also manually download the Beta builds from our \u003ca href=\"https://www.jetbrains.com/webstorm/nextversion/\" target=\"_blank\" rel=\"noopener\"\u003ewebsite\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/webstorm/nextversion\" target=\"_blank\" rel=\"noopener\"\u003eDOWNLOAD WEBSTORM 2025.1 BETA\u003c/a\u003e\u003c/p\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eImportant! WebStorm Beta builds are not fully tested and might be unstable.\u003c/strong\u003e Please try the latest build and share your feedback with us. You can do so using \u003ca href=\"https://youtrack.jetbrains.com/issues/WEB\" target=\"_blank\" rel=\"noopener\"\u003eour issue tracker\u003c/a\u003e or by leaving a comment on this blog post.\u003c/p\u003e\n\n\n\n\u003ch2\u003eKey improvements\u003c/h2\u003e\n\n\n\n\u003ch3\u003eAI Assistant\u003c/h3\u003e\n\n\n\n\u003ch4\u003eСlaude and local LLMs\u003c/h4\u003e\n\n\n\n\u003cp\u003eJetBrains AI Assistant is advancing its line of models! We’ve added support for Claude 3.5 Sonnet and Claude 3.5 Haiku, now provisioned in Amazon Bedrock. This means you’ll benefit from sharper responses, faster insights, and an even smoother experience. AI Assistant’s lineup of OpenAI models now includes o1, o1-mini, and o3-mini.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1500\" height=\"604\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-local-llms-selector.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn addition to cloud-based models, you can now connect the AI chat to local models available through Ollama and LM Studio! You can set up local providers via \u003cem\u003eSettings\u003c/em\u003e | \u003cem\u003eTools\u003c/em\u003e | \u003cem\u003eAI Assistant\u003c/em\u003e | \u003cem\u003eCustom Models:\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1602\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-local-llms.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch4\u003eImproved AI completion for web frameworks\u003c/h4\u003e\n\n\n\n\u003cp\u003eFor the 2025.1 release we have focused on improving AI-based completion in the context of web framework components. These changes affect local full line code completion as well as cloud-based completion suggestions:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-ai-completion-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch4\u003eEnhanced AI test generation\u003c/h4\u003e\n\n\n\n\u003cp\u003eAI-powered test generation now offers more careful framework detection, especially for cases when multiple frameworks are present. Additionally, generated tests respect naming conventions:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-AI-test-gen.gif\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eTypeScript\u003c/h3\u003e\n\n\n\n\u003ch4\u003eService-powered type engine\u003c/h4\u003e\n\n\n\n\u003cp\u003eThe engine previously known as WebStorm@next or the \u003cem\u003eUse types from server\u003c/em\u003e option now has an official name – the service-powered type engine! We’re currently polishing it, with a focus on performance. A dedicated icon in the status bar displays the engine’s status, and you can granularly enable or disable it for supported frameworks or for TypeScript in general within the current project:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-TypeEngine.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf you notice any degradations when the new engine is enabled, please use the \u003cem\u003eSubmit a bug report\u003c/em\u003e link.\u003c/p\u003e\n\n\n\n\u003ch3\u003eAngular improvements\u003c/h3\u003e\n\n\n\n\u003cp\u003eWebStorm now supports code completion for host binding attributes based on directive selectors. Quick-fixes for creating fields are also available within binding expressions. Moreover, refactoring is supported across different locations and is even available for CSS classes:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-Angular-host-binding.gif\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe long-awaited support for Reactive Forms is here. This update includes code completion, syntax highlighting, validation, refactoring, and quick-fixes for Reactive Forms. Both declaration styles – constructor-based and builder-based – are fully supported.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-reactive-forms.gif\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThere is also a new intention to extract or inline component templates. Invoke \u003cem\u003eShow Context Actions\u003c/em\u003e (\u003cem\u003e⌥⏎ \u003c/em\u003e(macOS) / \u003cem\u003eAlt+Enter\u003c/em\u003e (Windows/Linux)) to use the action:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-Angular-templates.gif\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis release brings many other improvements and bug fixes for Angular beyond the features mentioned above.\u003c/p\u003e\n\n\n\n\u003ch3\u003eNext.js improvements\u003c/h3\u003e\n\n\n\n\u003cp\u003eWebStorm 2025.1 Beta introduces automatic run configuration creation for Next.js applications. Now, you can easily initiate debug sessions for both the client and server components of your Next.js application using the\u003cem\u003e Run widget\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-NextJS-debug-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eVue improvements\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003cem\u003eNew Project\u003c/em\u003e wizard now gives you the option to generate a new Nuxt project using the Nuxt CLI (\u003ccode\u003enuxi\u003c/code\u003e):\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2000\" height=\"1000\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-Nuxt.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe’ve also implemented several bug fixes, including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-59818\" target=\"_blank\" rel=\"noopener\"\u003eWEB-59818\u003c/a\u003e – Vue custom global properties added by augmenting \u003ccode\u003evue\u003c/code\u003e are now resolved.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-69114\" target=\"_blank\" rel=\"noopener\"\u003eWEB-69114\u003c/a\u003e – Auto-completion and auto-imports now work for packaged components declared with \u003ccode\u003e__VLS_WithTemplateSlots\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eUser experience\u003c/h3\u003e\n\n\n\n\u003ch4\u003eFloating toolbar\u003c/h4\u003e\n\n\n\n\u003cp\u003eIn WebStorm 2025.1 Beta, invoking \u003cem\u003eShow Context Actions\u003c/em\u003e (⌥⏎ (macOS) / Alt+Enter (Windows/Linux)) now opens the floating toolbar with different action groups. The toolbar also appears when you select code in the editor:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-floaing-toolbar.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe floating toolbar contains the following actions and action groups:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eContext actions\u003c/li\u003e\n\n\n\n\u003cli\u003eAI Assistant context actions (if the AI Assistant plugin is installed)\u003c/li\u003e\n\n\n\n\u003cli\u003eRefactor\u003c/li\u003e\n\n\n\n\u003cli\u003eShow usages\u003c/li\u003e\n\n\n\n\u003cli\u003eSurround with tag\u003c/li\u003e\n\n\n\n\u003cli\u003eReformat code\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eYou can customize the contents of the toolbar by opening the kebab menu (three vertical dots) and selecting the \u003cem\u003eCustomize Toolbar…\u003c/em\u003e option\u003c/p\u003e\n\n\n\n\u003ch4\u003eNew file creation in the Project tool window\u003c/h4\u003e\n\n\n\n\u003cp\u003eCreating new files is now easier in the \u003cem\u003eProject \u003c/em\u003etool window. You can simply use the + icon located directly in the window’s toolbar:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-new-file-from-project-view.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eGraphQL and Prisma\u003c/h3\u003e\n\n\n\n\u003cp\u003eWebStorm 2025.1 Beta introduces the following improvements for Prisma:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eULID support (\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-71197\" target=\"_blank\" rel=\"noopener\"\u003eWEB-71197\u003c/a\u003e)\u003c/li\u003e\n\n\n\n\u003cli\u003eMulti-line comment syntax (\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-70929\" target=\"_blank\" rel=\"noopener\"\u003eWEB-70929\u003c/a\u003e)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003egql(query)\u003c/code\u003e syntax support (\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-71611\" target=\"_blank\" rel=\"noopener\"\u003eWEB-71611\u003c/a\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003ch3\u003ePrettier integration improvements\u003c/h3\u003e\n\n\n\n\u003cp\u003eWebStorm now automatically detects and applies the nearest in the directory tree Prettier configuration when formatting files, ensuring the code style is consistent across subprojects. The Indentation status bar widget shows whether Prettier has modified the code style. The new dropdown menu offers the following options:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eOpen Configuration File\u003c/em\u003e (or use default Prettier settings if none exists)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eOpen Prettier Settings\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eDisable Prettier Code Style Modifications\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-prettoer-widget.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eCode style changes made by Prettier are visible in the \u003cem\u003eCode Style\u003c/em\u003e tab under \u003cem\u003eSettings\u003c/em\u003e, where you can also disable automatic modifications.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1600\" height=\"800\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/WS251-Prettier-settings.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eA new setting controls whether WebStorm should use Prettier to auto-format code styles. This option is enabled by default. In case if \u003ccode\u003e.editorconfig\u003c/code\u003e is present, Prettier takes precedence for files it handles, but if certain options aren’t specified in Prettier, EditorConfig settings still apply.\u003c/p\u003e\n\n\n\n\u003ch3\u003eMonorepo support\u003c/h3\u003e\n\n\n\n\u003cp\u003eWe are consistently working to improve reliability and performance in mono-repo setups. Here are some of the most noticable fixes in this build for long-standing issues:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-71210\" target=\"_blank\" rel=\"noopener\"\u003eWEB-71210\u003c/a\u003e – Auto-import and syntax highlighting now work as expected for sibling packages in monorepo.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-70868\" target=\"_blank\" rel=\"noopener\"\u003eWEB-70868\u003c/a\u003e – IntelliSense fixed in large nx TypeScript monorepos.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-69642\" target=\"_blank\" rel=\"noopener\"\u003eWEB-69642\u003c/a\u003e – Array values in \u003ccode\u003epackage.json\u003c/code\u003e export fields are now processed properly.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-64647\" target=\"_blank\" rel=\"noopener\"\u003eWEB-64647\u003c/a\u003e – Path aliases defined in \u003ccode\u003epackage.json\u003c/code\u003e exports are now used by auto-import in monorepos.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThat’s it for today. For the full list of improvements introduced throughout the latest 2025.1 EAPs, check out the release notes.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eThe WebStorm team\u003c/em\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to WebStorm Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
