{
  "id": "99956645-5d69-42aa-977b-7bfe9b5cc649",
  "title": "Improving Threads' iOS Performance at Meta",
  "link": "https://www.infoq.com/news/2025/01/meta-threads-ios-performance/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "An app's performance is key to make users want to use it, say Meta engineers Dave LaMacchia and Jason Patterson. This includes making it lightning-fast, battery-efficient, and reliable across a range of devices and connectivity conditions. In a recent article, they recounted their experience with the Threads app. By Sergio",
  "author": "Sergio",
  "published": "Thu, 02 Jan 2025 18:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Swift",
    "Facebook",
    "Performance",
    "Mobile",
    "iOS",
    "User Experience",
    "Concurrency",
    "Development",
    "news"
  ],
  "byline": "Sergio",
  "length": 3968,
  "excerpt": "An app's performance is key to make users want to use it, say Meta engineers Dave LaMacchia and Jason Patterson. This includes making it lightning-fast, battery-efficient, and reliable across a range",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241210082243/apple-touch-icon.png",
  "text": "An app's performance is key to make users want to use it, say Meta engineers Dave LaMacchia and Jason Patterson. This includes making the app lightning-fast, battery-efficient, and reliable across a range of devices and connectivity conditions. To improve Threads performance, Meta engineers measured how fast the app launches, how easy it is to post a photo or video, how often it crashes, and how many bug reports people filed. To this aim, they defined a number of metrics: frustrating image-render experience (FIRE), time-to-network content (TTNC), and creation-publish success rate (cPSR). FIRE is the percentage of people who experience a frustrating image-render experience, which may lead to them leaving the app while the image is rendering across the network. Roughly, FIRE is defined as the quotient of the number of users leaving the app before an image is fully rendered by the sum of all users attempting to display that image. Measuring this metric allows Threads developers to detect any regressions in how images are loading for users. Time-to-network content (TTNC) is roughly the time required for the app to launch and display the user's feed. Long loading time is another experience killer that may lead users to abandon the app. Reducing the app's binary size is paramount to keeping the binary small: Every time someone tries to commit code to Threads, they’re alerted if that code change would increase our app’s binary size above a configured threshold. Additionally, they removed unnecessary code and graphics assets from the app bundle, resulting in a binary one-quarter the size of Instagram. As to navigation latency, this is possibly even more critical than launch time. Meta engineers carried through A/B tests to find out that: With the smallest latency injection, the impact was small or negligible for some views, but the largest injections had negative effects across the board. People would read fewer posts, post less often themselves, and in general interact less with the app. To ensure that no changes cause a regression in navigation latency, Meta engineers created SLATE, a logger system that tracks relevant events like triggers of a new navigation, the UI being built, activity spinners, and content from the network or an error being displayed. It’s implemented using a set of common components that are the foundation for a lot of our UI and a system that measures performance by setting “markers” in code for specific events. Typically these markers are created with a specific purpose in mind. Creation-publish success rate (cPSR) measures how likely it is for an user to successfully complete the process of posting some content. On iOS, posting a video or large photo is especially tricky, since the user could background the app after posting their content without waiting for the upload to complete, in which case the app may be terminated by the OS. Here, the approach taken by Meta was aimed at improving the user experience in those cases when posting failed. This was accomplished by introducing a new feature, called Drafts, to allow users to manage failed posts in more flexible ways instead of just providing the option to retry or abort the operation. We discovered that 26 percent fewer people submitted bug reports about posting if they had Drafts. The feature was clearly making a difference. Another approach was trying to reduce perceived latency, as opposed to absolute latency, showing a request has been received when the data upload completes but before it’s been processed and published. Last but not least, Meta engineers saw a great improvement in app stability after they adopted Swift's complete concurrency, which, they say, does a great job at preventing data races and reducing hard-to-debug problems caused by data races. About the Author Sergio",
  "image": "https://res.infoq.com/news/2025/01/meta-threads-ios-performance/en/headerimage/meta-threads-ios-performance-1735812666354.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAn app\u0026#39;s performance is key to make users want to use it, say Meta engineers Dave LaMacchia and Jason Patterson. This includes making the app lightning-fast, battery-efficient, and reliable across a range of devices and connectivity conditions.\u003c/p\u003e\n\n\u003cp\u003eTo improve Threads performance, Meta engineers measured how fast the app launches, how easy it is to post a photo or video, how often it crashes, and how many bug reports people filed. To this aim, they defined a number of metrics: \u003cem\u003efrustrating image-render experience\u003c/em\u003e (FIRE), \u003cem\u003etime-to-network content\u003c/em\u003e (TTNC), and \u003cem\u003ecreation-publish success rate\u003c/em\u003e (cPSR).\u003c/p\u003e\n\n\u003cp\u003eFIRE is the percentage of people who experience a frustrating image-render experience, which may lead to them leaving the app while the image is rendering across the network. Roughly, FIRE is defined as the quotient of the number of users leaving the app before an image is fully rendered by the sum of all users attempting to display that image. Measuring this metric allows Threads developers to detect any regressions in how images are loading for users.\u003c/p\u003e\n\n\u003cp\u003eTime-to-network content (TTNC) is roughly the time required for the app to launch and display the user\u0026#39;s feed. Long loading time is another experience killer that may lead users to abandon the app. Reducing the app\u0026#39;s binary size is paramount to keeping the binary small:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eEvery time someone tries to commit code to Threads, they’re alerted if that code change would increase our app’s binary size above a configured threshold.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAdditionally, they removed unnecessary code and graphics assets from the app bundle, resulting in a binary one-quarter the size of Instagram.\u003c/p\u003e\n\n\u003cp\u003eAs to navigation latency, this is possibly even more critical than launch time. Meta engineers carried through A/B tests to find out that:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWith the smallest latency injection, the impact was small or negligible for some views, but the largest injections had negative effects across the board. People would read fewer posts, post less often themselves, and in general interact less with the app.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eTo ensure that no changes cause a regression in navigation latency, Meta engineers created SLATE, a logger system that tracks relevant events like triggers of a new navigation, the UI being built, activity spinners, and content from the network or an error being displayed.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIt’s implemented using a set of common components that are the foundation for a lot of our UI and a system that measures performance by setting “markers” in code for specific events. Typically these markers are created with a specific purpose in mind.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eCreation-publish success rate (cPSR) measures how likely it is for an user to successfully complete the process of posting some content. On iOS, posting a video or large photo is especially tricky, since the user could background the app after posting their content without waiting for the upload to complete, in which case the app may be terminated by the OS.\u003c/p\u003e\n\n\u003cp\u003eHere, the approach taken by Meta was aimed at improving the user experience in those cases when posting failed. This was accomplished by introducing a new feature, called Drafts, to allow users to manage failed posts in more flexible ways instead of just providing the option to retry or abort the operation.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWe discovered that 26 percent fewer people submitted bug reports about posting if they had Drafts. The feature was clearly making a difference.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnother approach was trying to reduce perceived latency, as opposed to absolute latency, showing a request has been received when the data upload completes but before it’s been processed and published.\u003c/p\u003e\n\n\u003cp\u003eLast but not least, Meta engineers saw a great improvement in app stability after they adopted Swift\u0026#39;s complete concurrency, which, they say, does a great job at preventing data races and reducing hard-to-debug problems caused by data races.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-01-02T00:00:00Z",
  "modifiedTime": null
}
