{
  "id": "7ce6ba6b-a106-490d-aeb4-6b7ec3934605",
  "title": "Making setInterval Declarative with React Hooks",
  "link": "https://overreacted.io/making-setinterval-declarative-with-react-hooks/",
  "description": "How I learned to stop worrying and love refs.",
  "author": "",
  "published": "Mon, 04 Feb 2019 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 18564,
  "excerpt": "How I learned to stop worrying and love refs.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "If you played with React Hooks for more than a few hours, you probably ran into an intriguing problem: using setInterval just doesn‚Äôt work as you‚Äôd expect. In the words of Ryan Florence: I‚Äôve had a lot of people point to setInterval with hooks as some sort of egg on React‚Äôs face Honestly, I think these people have a point. It is confusing at first. But I‚Äôve also come to see it not as a flaw of Hooks but as a mismatch between the React programming model and setInterval. Hooks, being closer to the React programming model than classes, make that mismatch more prominent. There is a way to get them working together very well but it‚Äôs a bit unintuitive. In this post, we‚Äôll look at how to make intervals and Hooks play well together, why this solution makes sense, and which new capabilities it can give you. Disclaimer: this post focuses on a pathological case. Even if an API simplifies a hundred use cases, the discussion will always focus on the one that got harder. If you‚Äôre new to Hooks and don‚Äôt understand what the fuss is about, check out this introduction and the documentation instead. This post assumes that you worked with Hooks for more than an hour. Just Show Me the Code Without further ado, here‚Äôs a counter that increments every second: import React, { useState, useEffect, useRef } from 'react'; function Counter() { let [count, setCount] = useState(0); useInterval(() =\u003e { // Your custom logic here setCount(count + 1); }, 1000); return \u003ch1\u003e{count}\u003c/h1\u003e; } (Here‚Äôs a CodeSandbox demo.) This useInterval isn‚Äôt a built-in React Hook; it‚Äôs a custom Hook that I wrote: import React, { useState, useEffect, useRef } from 'react'; function useInterval(callback, delay) { const savedCallback = useRef(); // Remember the latest callback. useEffect(() =\u003e { savedCallback.current = callback; }, [callback]); // Set up the interval. useEffect(() =\u003e { function tick() { savedCallback.current(); } if (delay !== null) { let id = setInterval(tick, delay); return () =\u003e clearInterval(id); } }, [delay]); } (Here‚Äôs a CodeSandbox demo in case you missed it earlier.) My useInterval Hook sets up an interval and clears it after unmounting. It‚Äôs a combo of setInterval and clearInterval tied to the component lifecycle. Feel free to copy paste it in your project or put it on npm. If you don‚Äôt care how this works, you can stop reading now! The rest of the blog post is for folks who are ready to take a deep dive into React Hooks. Wait What?! ü§î I know what you‚Äôre thinking: Dan, this code doesn‚Äôt make any sense. What happened to ‚ÄúJust JavaScript‚Äù? Admit that React has jumped the shark with Hooks! I thought this too but I changed my mind, and I‚Äôm going to change yours. Before explaining why this code makes sense, I want to show off what it can do. Why useInterval() Is a Better API To remind you, my useInterval Hook accepts a function and a delay: useInterval(() =\u003e { // ... }, 1000); This looks a lot like setInterval: setInterval(() =\u003e { // ... }, 1000); So why not just use setInterval directly? This may not be obvious at first, but the difference between the setInterval you know and my useInterval Hook is that its arguments are ‚Äúdynamic‚Äù. I‚Äôll illustrate this point with a concrete example. Let‚Äôs say we want the interval delay to be adjustable: While you wouldn‚Äôt necessarily control the delay with an input, adjusting it dynamically can be useful ‚Äî for example, to poll for some AJAX updates less often while the user has switched to a different tab. So how would you do this with setInterval in a class? I ended up with this: class Counter extends React.Component { state = { count: 0, delay: 1000, }; componentDidMount() { this.interval = setInterval(this.tick, this.state.delay); } componentDidUpdate(prevProps, prevState) { if (prevState.delay !== this.state.delay) { clearInterval(this.interval); this.interval = setInterval(this.tick, this.state.delay); } } componentWillUnmount() { clearInterval(this.interval); } tick = () =\u003e { this.setState({ count: this.state.count + 1 }); } handleDelayChange = (e) =\u003e { this.setState({ delay: Number(e.target.value) }); } render() { return ( \u003c\u003e \u003ch1\u003e{this.state.count}\u003c/h1\u003e \u003cinput value={this.state.delay} onChange={this.handleDelayChange} /\u003e \u003c/\u003e ); } } (Here‚Äôs a CodeSandbox demo.) This is not too bad! What‚Äôs the Hook version looking like? ü•Åü•Åü•Åfunction Counter() { let [count, setCount] = useState(0); let [delay, setDelay] = useState(1000); useInterval(() =\u003e { // Your custom logic here setCount(count + 1); }, delay); function handleDelayChange(e) { setDelay(Number(e.target.value)); } return ( \u003c\u003e \u003ch1\u003e{count}\u003c/h1\u003e \u003cinput value={delay} onChange={handleDelayChange} /\u003e \u003c/\u003e ); } (Here‚Äôs a CodeSandbox demo.) Yeah, that‚Äôs all it takes. Unlike the class version, there is no complexity gap for ‚Äúupgrading‚Äù the useInterval Hook example to have a dynamically adjusted delay: // Constant delay useInterval(() =\u003e { setCount(count + 1); }, 1000); // Adjustable delay useInterval(() =\u003e { setCount(count + 1); }, delay); When useInterval Hook sees a different delay, it sets up the interval again. Instead of writing code to set and clear the interval, I can declare an interval with a particular delay ‚Äî and our useInterval Hook makes it happen. What if I want to temporarily pause my interval? I can do this with state too: const [delay, setDelay] = useState(1000); const [isRunning, setIsRunning] = useState(true); useInterval(() =\u003e { setCount(count + 1); }, isRunning ? delay : null); (Here is a demo!) This is what gets me excited about Hooks and React all over again. We can wrap the existing imperative APIs and create declarative APIs expressing our intent more closely. Just like with rendering, we can describe the process at all points in time simultaneously instead of carefully issuing commands to manipulate it. I hope by this you‚Äôre sold on useInterval() Hook being a nicer API ‚Äî at least when we‚Äôre doing it from a component. But why is using setInterval() and clearInterval() annoying with Hooks? Let‚Äôs go back to our counter example and try to implement it manually. First Attempt I‚Äôll start with a simple example that just renders the initial state: function Counter() { const [count, setCount] = useState(0); return \u003ch1\u003e{count}\u003c/h1\u003e; } Now I want an interval that increments it every second. It‚Äôs a side effect that needs cleanup so I‚Äôm going to useEffect() and return the cleanup function: function Counter() { let [count, setCount] = useState(0); useEffect(() =\u003e { let id = setInterval(() =\u003e { setCount(count + 1); }, 1000); return () =\u003e clearInterval(id); }); return \u003ch1\u003e{count}\u003c/h1\u003e; } (See the CodeSandbox demo.) Seems easy enough? This kind of works. However, this code has a strange behavior. React by default re-applies effects after every render. This is intentional and helps avoid a whole class of bugs that are present in React class components. This is usually good because many subscription APIs can happily remove the old and add a new listener at any time. However, setInterval isn‚Äôt one of them. When we run clearInterval and setInterval, their timing shifts. If we re-render and re-apply effects too often, the interval never gets a chance to fire! We can see the bug by re-rendering our component within a smaller interval: setInterval(() =\u003e { // Re-renders and re-applies Counter's effects // which in turn causes it to clearInterval() // and setInterval() before that interval fires. ReactDOM.render(\u003cCounter /\u003e, rootElement); }, 100); (See a demo of this bug.) Second Attempt You might know that useEffect() lets us opt out of re-applying effects. You can specify a dependency array as a second argument, and React will only re-run the effect if something in that array changes: useEffect(() =\u003e { document.title = `You clicked ${count} times`; }, [count]); When we want to only run the effect on mount and cleanup on unmount, we can pass an empty [] array of dependencies. However, this is a common source of mistakes if you‚Äôre not very familiar with JavaScript closures. We‚Äôre going to make this mistake right now! (We‚Äôve also built a lint rule to surface these bugs early.) In the first attempt, our problem was that re-running the effects caused our timer to get cleared too early. We can try to fix it by never re-running them: function Counter() { let [count, setCount] = useState(0); useEffect(() =\u003e { let id = setInterval(() =\u003e { setCount(count + 1); }, 1000); return () =\u003e clearInterval(id); }, []); return \u003ch1\u003e{count}\u003c/h1\u003e; } However, now our counter updates to 1 and stays there. (See the bug in action.) What happened?! The problem is that useEffect captures the count from the first render. It is equal to 0. We never re-apply the effect so the closure in setInterval always references the count from the first render, and count + 1 is always 1. Oops! I can hear your teeth grinding. Hooks are so annoying, right? One way to fix it is to replace setCount(count + 1) with the ‚Äúupdater‚Äù form like setCount(c =\u003e c + 1). It can always read fresh state for that variable. But this doesn‚Äôt help you read the fresh props, for example. Another fix is to useReducer(). This approach gives you more flexibility. Inside the reducer, you have the access both to current state and fresh props. The dispatch function itself never changes so you can pump data into it from any closure. One limitation of useReducer() is that you can‚Äôt yet emit side effects in it. (However, you could return new state¬†‚Äî triggering some effect.) But why is it getting so convoluted? The Impedance Mismatch This term is sometimes thrown around, and Phil Haack explains it like this: One might say Databases are from Mars and Objects are from Venus. Databases do not map naturally to object models. It‚Äôs a lot like trying to push the north poles of two magnets together. Our ‚Äúimpedance mismatch‚Äù is not between Databases and Objects. It is between the React programming model and the imperative setInterval API. A React component may be mounted for a while and go through many different states, but its render result describes all of them at once. // Describes every render return \u003ch1\u003e{count}\u003c/h1\u003e Hooks let us apply the same declarative approach to effects: // Describes every interval state useInterval(() =\u003e { setCount(count + 1); }, isRunning ? delay : null); We don‚Äôt set the interval, but specify whether it is set and with what delay. Our Hook makes it happen. A continuous process is described in discrete terms. By contrast, setInterval does not describe a process in time ‚Äî once you set the interval, you can‚Äôt change anything about it except clearing it. That‚Äôs the mismatch between the React model and the setInterval API. Props and state of React components can change. React will re-render them and ‚Äúforget‚Äù everything about the previous render result. It becomes irrelevant. The useEffect() Hook ‚Äúforgets‚Äù the previous render too. It cleans up the last effect and sets up the next effect. The next effect closes over fresh props and state. This is why our first attempt worked for simple cases. But setInterval() does not ‚Äúforget‚Äù. It will forever reference the old props and state until you replace it ‚Äî which you can‚Äôt do without resetting the time. Or wait, can you? Refs to the Rescue! The problem boils down to this: We do setInterval(callback1, delay) with callback1 from first render. We have callback2 from next render that closes over fresh props and state. But we can‚Äôt replace an already existing interval without resetting the time! So what if we didn‚Äôt replace the interval at all, and instead introduced a mutable savedCallback variable pointing to the latest interval callback? Now we can see the solution: We setInterval(fn, delay) where fn calls savedCallback. Set savedCallback to callback1 after the first render. Set savedCallback to callback2 after the next render. ??? PROFIT This mutable savedCallback needs to ‚Äúpersist‚Äù across the re-renders. So it can‚Äôt be a regular variable. We want something more like an instance field. As we can learn from the Hooks FAQ, useRef() gives us exactly that: const savedCallback = useRef(); // { current: null } (You might be familiar with DOM refs in React. Hooks use the same concept for holding any mutable values. A ref is like a ‚Äúbox‚Äù into which you can put anything.) useRef() returns a plain object with a mutable current property that‚Äôs shared between renders. We can save the latest interval callback into it: function callback() { // Can read fresh props, state, etc. setCount(count + 1); } // After every render, save the latest callback into our ref. useEffect(() =\u003e { savedCallback.current = callback; }); And then we can read and call it from inside our interval: useEffect(() =\u003e { function tick() { savedCallback.current(); } let id = setInterval(tick, 1000); return () =\u003e clearInterval(id); }, []); Thanks to [], our effect never re-executes, and the interval doesn‚Äôt get reset. However, thanks to the savedCallback ref, we can always read the callback that we set after the last render, and call it from the interval tick. Here‚Äôs a complete working solution: function Counter() { const [count, setCount] = useState(0); const savedCallback = useRef(); function callback() { setCount(count + 1); } useEffect(() =\u003e { savedCallback.current = callback; }); useEffect(() =\u003e { function tick() { savedCallback.current(); } let id = setInterval(tick, 1000); return () =\u003e clearInterval(id); }, []); return \u003ch1\u003e{count}\u003c/h1\u003e; } (See the CodeSandbox demo.) Extracting a Hook Admittedly, the above code can be disorienting. It‚Äôs mind-bending to mix the opposite paradigms. There‚Äôs also a potential to make a mess with mutable refs. I think Hooks provide lower-level primitives than classes ‚Äî but their beauty is that they enable us to compose and create better declarative abstractions. Ideally, I just want to write this: function Counter() { const [count, setCount] = useState(0); useInterval(() =\u003e { setCount(count + 1); }, 1000); return \u003ch1\u003e{count}\u003c/h1\u003e; } I‚Äôll copy and paste the body of my ref mechanism into a custom Hook: function useInterval(callback) { const savedCallback = useRef(); useEffect(() =\u003e { savedCallback.current = callback; }); useEffect(() =\u003e { function tick() { savedCallback.current(); } let id = setInterval(tick, 1000); return () =\u003e clearInterval(id); }, []); } Currently, the 1000 delay is hardcoded. I want to make it an argument: function useInterval(callback, delay) { I will use it when I set up the interval: let id = setInterval(tick, delay); Now that the delay can change between renders, I need to declare it in the dependencies of my interval effect: useEffect(() =\u003e { function tick() { savedCallback.current(); } let id = setInterval(tick, delay); return () =\u003e clearInterval(id); }, [delay]); Wait, didn‚Äôt we want to avoid resetting the interval effect, and specifically passed [] to avoid it? Not quite. We only wanted to avoid resetting it when the callback changes. But when the delay changes, we want to restart the timer! Let‚Äôs check if our code works: function Counter() { const [count, setCount] = useState(0); useInterval(() =\u003e { setCount(count + 1); }, 1000); return \u003ch1\u003e{count}\u003c/h1\u003e; } function useInterval(callback, delay) { const savedCallback = useRef(); useEffect(() =\u003e { savedCallback.current = callback; }); useEffect(() =\u003e { function tick() { savedCallback.current(); } let id = setInterval(tick, delay); return () =\u003e clearInterval(id); }, [delay]); } (Try it on CodeSandbox.) It does! We can now useInterval() in any component and not think too much about its implementation details. Bonus: Pausing the Interval Say we want to be able to pause our interval by passing null as the delay: const [delay, setDelay] = useState(1000); const [isRunning, setIsRunning] = useState(true); useInterval(() =\u003e { setCount(count + 1); }, isRunning ? delay : null); How do we implement this? The answer is: by not setting up an interval. useEffect(() =\u003e { function tick() { savedCallback.current(); } if (delay !== null) { let id = setInterval(tick, delay); return () =\u003e clearInterval(id); } }, [delay]); (See the CodeSandbox demo.) That‚Äôs it. This code handles all possible transitions: a change of a delay, pausing, or resuming an interval. The useEffect() API asks us to spend more upfront effort to describe the setup and cleanup ‚Äî but adding new cases is easy. Bonus: Fun Demo This useInterval() Hook is really fun to play with. When the side effects are declarative, it‚Äôs much easier to orchestrate complex behaviors together. For example, we can have a delay of one interval be controlled by another: function Counter() { const [delay, setDelay] = useState(1000); const [count, setCount] = useState(0); // Increment the counter. useInterval(() =\u003e { setCount(count + 1); }, delay); // Make it faster every second! useInterval(() =\u003e { if (delay \u003e 10) { setDelay(delay / 2); } }, 1000); function handleReset() { setDelay(1000); } return ( \u003c\u003e \u003ch1\u003eCounter: {count}\u003c/h1\u003e \u003ch4\u003eDelay: {delay}\u003c/h4\u003e \u003cbutton onClick={handleReset}\u003e Reset delay \u003c/button\u003e \u003c/\u003e ); } (See the CodeSandbox demo!) Closing Thoughts Hooks take some getting used to ‚Äî and especially at the boundary of imperative and declarative code. You can create powerful declarative abstractions with them like React Spring but they can definitely get on your nerves sometimes. This is an early time for Hooks, and there are definitely still patterns we need to work out and compare. Don‚Äôt rush to adopt Hooks if you‚Äôre used to following well-known ‚Äúbest practices‚Äù. There‚Äôs still a lot to try and discover. I hope this post helps you understand the common pitfalls related to using APIs like setInterval() with Hooks, the patterns that can help you overcome them, and the sweet fruit of creating more expressive declarative APIs on top of them.Discuss on ùïè¬†¬†¬∑¬†¬†Edit on GitHub",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eIf you played with \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-intro.html\"\u003eReact Hooks\u003c/a\u003e for more than a few hours, you probably ran into an intriguing problem: using \u003ccode\u003esetInterval\u003c/code\u003e just \u003ca target=\"_blank\" href=\"https://stackoverflow.com/questions/53024496/state-not-updating-when-using-react-state-hook-within-setinterval\"\u003edoesn‚Äôt work\u003c/a\u003e as you‚Äôd expect.\u003c/p\u003e\n\u003cp\u003eIn the \u003ca target=\"_blank\" href=\"https://mobile.twitter.com/ryanflorence/status/1088606583637061634\"\u003ewords\u003c/a\u003e of Ryan Florence:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI‚Äôve had a lot of people point to setInterval with hooks as some sort of egg on React‚Äôs face\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHonestly, I think these people have a point. It \u003cem\u003eis\u003c/em\u003e confusing at first.\u003c/p\u003e\n\u003cp\u003eBut I‚Äôve also come to see it not as a flaw of Hooks but as a mismatch between the \u003ca href=\"https://overreacted.io/react-as-a-ui-runtime/\"\u003eReact programming model\u003c/a\u003e and \u003ccode\u003esetInterval\u003c/code\u003e. Hooks, being closer to the React programming model than classes, make that mismatch more prominent.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThere \u003cem\u003eis\u003c/em\u003e a way to get them working together very well but it‚Äôs a bit unintuitive.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn this post, we‚Äôll look at \u003cem\u003ehow\u003c/em\u003e to make intervals and Hooks play well together, \u003cem\u003ewhy\u003c/em\u003e this solution makes sense, and which \u003cem\u003enew\u003c/em\u003e capabilities it can give you.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003eDisclaimer: this post focuses on a \u003cem\u003epathological case\u003c/em\u003e. Even if an API simplifies a hundred use cases, the discussion will always focus on the one that got harder.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIf you‚Äôre new to Hooks and don‚Äôt understand what the fuss is about, check out \u003ca target=\"_blank\" href=\"https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889\"\u003ethis introduction\u003c/a\u003e and the \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-intro.html\"\u003edocumentation\u003c/a\u003e instead. This post assumes that you worked with Hooks for more than an hour.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eJust Show Me the Code\u003c/h2\u003e\n\u003cp\u003eWithout further ado, here‚Äôs a counter that increments every second:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e React\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e useState\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e useEffect\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e useRef \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ereact\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Your custom logic here\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(Here‚Äôs a \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/105x531vkq\"\u003eCodeSandbox demo\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis \u003ccode\u003euseInterval\u003c/code\u003e isn‚Äôt a built-in React Hook; it‚Äôs a \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-custom.html\"\u003ecustom Hook\u003c/a\u003e that I wrote:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e React\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e useState\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e useEffect\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e useRef \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003ereact\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e delay\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseRef\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Remember the latest callback.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e callback\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Set up the interval.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edelay \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(Here‚Äôs a \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/105x531vkq\"\u003eCodeSandbox demo\u003c/a\u003e in case you missed it earlier.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMy \u003ccode\u003euseInterval\u003c/code\u003e Hook sets up an interval and clears it after unmounting.\u003c/strong\u003e It‚Äôs a combo of \u003ccode\u003esetInterval\u003c/code\u003e and \u003ccode\u003eclearInterval\u003c/code\u003e tied to the component lifecycle.\u003c/p\u003e\n\u003cp\u003eFeel free to copy paste it in your project or put it on npm.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eIf you don‚Äôt care how this works, you can stop reading now! The rest of the blog post is for folks who are ready to take a deep dive into React Hooks.\u003c/strong\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eWait What?! ü§î\u003c/h2\u003e\n\u003cp\u003eI know what you‚Äôre thinking:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDan, this code doesn‚Äôt make any sense. What happened to ‚ÄúJust JavaScript‚Äù? Admit that React has jumped the shark with Hooks!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eI thought this too but I changed my mind, and I‚Äôm going to change yours.\u003c/strong\u003e Before explaining why this code makes sense, I want to show off what it can do.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eWhy \u003ccode\u003euseInterval()\u003c/code\u003e Is a Better API\u003c/h2\u003e\n\u003cp\u003eTo remind you, my \u003ccode\u003euseInterval\u003c/code\u003e Hook accepts a function and a delay:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis looks a lot like \u003ccode\u003esetInterval\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eSo why not just use \u003ccode\u003esetInterval\u003c/code\u003e directly?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis may not be obvious at first, but the difference between the \u003ccode\u003esetInterval\u003c/code\u003e you know and my \u003ccode\u003euseInterval\u003c/code\u003e Hook is that \u003cstrong\u003eits arguments are ‚Äúdynamic‚Äù\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eI‚Äôll illustrate this point with a concrete example.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eLet‚Äôs say we want the interval delay to be adjustable:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks/counter_delay.gif\" alt=\"Counter with an input that adjusts the interval delay\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhile you wouldn‚Äôt necessarily control the delay with an \u003cem\u003einput\u003c/em\u003e, adjusting it dynamically can be useful ‚Äî for example, to poll for some AJAX updates less often while the user has switched to a different tab.\u003c/p\u003e\n\u003cp\u003eSo how would you do this with \u003ccode\u003esetInterval\u003c/code\u003e in a class? I ended up with this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  state \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    count\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    delay\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidMount\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einterval \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentDidUpdate\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevProps\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e prevState\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprevState\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edelay \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einterval\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einterval \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ecomponentWillUnmount\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einterval\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      count\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ehandleDelayChange\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetState\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e delay\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eNumber\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e value={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estate\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e} onChange={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleDelayChange\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(Here‚Äôs a \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/mz20m600mp\"\u003eCodeSandbox demo\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis is not too bad!\u003c/p\u003e\n\u003cp\u003eWhat‚Äôs the Hook version looking like?\u003c/p\u003e\n\u003cp\u003e\u003cspan size=\"50\"\u003eü•Åü•Åü•Å\u003c/span\u003e\u003c/p\u003e\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetDelay\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Your custom logic here\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e delay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandleDelayChange\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetDelay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eNumber\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e value={\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e} onChange={\u003c/span\u003e\u003cspan\u003ehandleDelayChange\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(Here‚Äôs a \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/329jy81rlm\"\u003eCodeSandbox demo\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eYeah, \u003cem\u003ethat‚Äôs all it takes\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eUnlike the class version, there is no complexity gap for ‚Äúupgrading‚Äù the \u003ccode\u003euseInterval\u003c/code\u003e Hook example to have a dynamically adjusted delay:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Constant delay\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Adjustable delay\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e delay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen \u003ccode\u003euseInterval\u003c/code\u003e Hook sees a different delay, it sets up the interval again.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInstead of writing code to \u003cem\u003eset\u003c/em\u003e and \u003cem\u003eclear\u003c/em\u003e the interval, I can \u003cem\u003edeclare\u003c/em\u003e an interval with a particular delay ‚Äî and our \u003ccode\u003euseInterval\u003c/code\u003e Hook makes it happen.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWhat if I want to temporarily \u003cem\u003epause\u003c/em\u003e my interval? I can do this with state too:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetDelay\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003eisRunning\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetIsRunning\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e isRunning \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e delay \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(Here is a \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/l240mp2pm7\"\u003edemo\u003c/a\u003e!)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis is what gets me excited about Hooks and React all over again. We can wrap the existing imperative APIs and create declarative APIs expressing our intent more closely. Just like with rendering, we can \u003cstrong\u003edescribe the process at all points in time simultaneously\u003c/strong\u003e instead of carefully issuing commands to manipulate it.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eI hope by this you‚Äôre sold on \u003ccode\u003euseInterval()\u003c/code\u003e Hook being a nicer API ‚Äî at least when we‚Äôre doing it from a component.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBut why is using \u003ccode\u003esetInterval()\u003c/code\u003e and \u003ccode\u003eclearInterval()\u003c/code\u003e annoying with Hooks?\u003c/strong\u003e Let‚Äôs go back to our counter example and try to implement it manually.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eFirst Attempt\u003c/h2\u003e\n\u003cp\u003eI‚Äôll start with a simple example that just renders the initial state:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow I want an interval that increments it every second. It‚Äôs a \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\"\u003eside effect that needs cleanup\u003c/a\u003e so I‚Äôm going to \u003ccode\u003euseEffect()\u003c/code\u003e and return the cleanup function:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(See the \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/7wlxk1k87j\"\u003eCodeSandbox demo\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSeems easy enough? This kind of works.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHowever, this code has a strange behavior.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eReact by default re-applies effects after every render. This is intentional and helps avoid \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update\"\u003ea whole class of bugs\u003c/a\u003e that are present in React class components.\u003c/p\u003e\n\u003cp\u003eThis is usually good because many subscription APIs can happily remove the old and add a new listener at any time. However, \u003ccode\u003esetInterval\u003c/code\u003e isn‚Äôt one of them. When we run \u003ccode\u003eclearInterval\u003c/code\u003e and \u003ccode\u003esetInterval\u003c/code\u003e, their timing shifts. If we re-render and re-apply effects too often, the interval never gets a chance to fire!\u003c/p\u003e\n\u003cp\u003eWe can see the bug by re-rendering our component within a \u003cem\u003esmaller\u003c/em\u003e interval:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Re-renders and re-applies Counter\u0026#39;s effects\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// which in turn causes it to clearInterval()\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// and setInterval() before that interval fires.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eReactDOM\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e(\u0026lt;\u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e /\u0026gt;,\u003c/span\u003e\u003cspan\u003e rootElement\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(See a \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/9j86r218y4\"\u003edemo\u003c/a\u003e of this bug.)\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eSecond Attempt\u003c/h2\u003e\n\u003cp\u003eYou might know that \u003ccode\u003euseEffect()\u003c/code\u003e lets us \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects\"\u003e\u003cem\u003eopt out\u003c/em\u003e\u003c/a\u003e of re-applying effects. You can specify a dependency array as a second argument, and React will only re-run the effect if something in that array changes:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`You clicked \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e times`\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen we want to \u003cem\u003eonly\u003c/em\u003e run the effect on mount and cleanup on unmount, we can pass an empty \u003ccode\u003e[]\u003c/code\u003e array of dependencies.\u003c/p\u003e\n\u003cp\u003eHowever, this is a common source of mistakes if you‚Äôre not very familiar with JavaScript closures. We‚Äôre going to make this mistake right now! (We‚Äôve also built a \u003ca target=\"_blank\" href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\"\u003elint rule\u003c/a\u003e to surface these bugs early.)\u003c/p\u003e\n\u003cp\u003eIn the first attempt, our problem was that re-running the effects caused our timer to get cleared too early. We can try to fix it by never re-running them:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, now our counter updates to 1 and stays there. (\u003ca target=\"_blank\" href=\"https://codesandbox.io/s/jj0mk6y683\"\u003eSee the bug in action\u003c/a\u003e.)\u003c/p\u003e\n\u003cp\u003eWhat happened?!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe problem is that \u003ccode\u003euseEffect\u003c/code\u003e captures the \u003ccode\u003ecount\u003c/code\u003e from the first render.\u003c/strong\u003e It is equal to \u003ccode\u003e0\u003c/code\u003e. We never re-apply the effect so the closure in \u003ccode\u003esetInterval\u003c/code\u003e always references the \u003ccode\u003ecount\u003c/code\u003e from the first render, and \u003ccode\u003ecount + 1\u003c/code\u003e is always \u003ccode\u003e1\u003c/code\u003e. Oops!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eI can hear your teeth grinding. Hooks are so annoying, right?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/s/j379jxrzjy\"\u003eOne way\u003c/a\u003e to fix it is to replace \u003ccode\u003esetCount(count + 1)\u003c/code\u003e with the ‚Äúupdater‚Äù form like \u003ccode\u003esetCount(c =\u0026gt; c + 1)\u003c/code\u003e. It can always read fresh state for that variable. But this doesn‚Äôt help you read the fresh props, for example.\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/s/00o9o95jyv\"\u003eAnother fix\u003c/a\u003e is to \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\"\u003e\u003ccode\u003euseReducer()\u003c/code\u003e\u003c/a\u003e. This approach gives you more flexibility. Inside the reducer, you have the access both to current state and fresh props. The \u003ccode\u003edispatch\u003c/code\u003e function itself never changes so you can pump data into it from any closure. One limitation of \u003ccode\u003euseReducer()\u003c/code\u003e is that you can‚Äôt yet emit side effects in it. (However, you could return new state¬†‚Äî triggering some effect.)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBut why is it getting so convoluted?\u003c/strong\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eThe Impedance Mismatch\u003c/h2\u003e\n\u003cp\u003eThis term is sometimes thrown around, and \u003ca target=\"_blank\" href=\"https://haacked.com/archive/2004/06/15/impedance-mismatch.aspx/\"\u003ePhil Haack\u003c/a\u003e explains it like this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eOne might say Databases are from Mars and Objects are from Venus. Databases do not map naturally to object models. It‚Äôs a lot like trying to push the north poles of two magnets together.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eOur ‚Äúimpedance mismatch‚Äù is not between Databases and Objects. It is between the React programming model and the imperative \u003ccode\u003esetInterval\u003c/code\u003e API.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eA React component may be mounted for a while and go through many different states, but its render result describes \u003cem\u003eall of them at once.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Describes every render\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHooks let us apply the same declarative approach to effects:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Describes every interval state\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e isRunning \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e delay \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe don‚Äôt \u003cem\u003eset\u003c/em\u003e the interval, but specify \u003cem\u003ewhether\u003c/em\u003e it is set and with what delay. Our Hook makes it happen. A continuous process is described in discrete terms.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBy contrast, \u003ccode\u003esetInterval\u003c/code\u003e does not describe a process in time ‚Äî once you set the interval, you can‚Äôt change anything about it except clearing it.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThat‚Äôs the mismatch between the React model and the \u003ccode\u003esetInterval\u003c/code\u003e API.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eProps and state of React components can change. React will re-render them and ‚Äúforget‚Äù everything about the previous render result. It becomes irrelevant.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003euseEffect()\u003c/code\u003e Hook ‚Äúforgets‚Äù the previous render too. It cleans up the last effect and sets up the next effect. The next effect closes over fresh props and state. This is why our \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/7wlxk1k87j\"\u003efirst attempt\u003c/a\u003e worked for simple cases.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBut \u003ccode\u003esetInterval()\u003c/code\u003e does not ‚Äúforget‚Äù.\u003c/strong\u003e It will forever reference the old props and state until you replace it ‚Äî which you can‚Äôt do without resetting the time.\u003c/p\u003e\n\u003cp\u003eOr wait, can you?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eRefs to the Rescue!\u003c/h2\u003e\n\u003cp\u003eThe problem boils down to this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe do \u003ccode\u003esetInterval(callback1, delay)\u003c/code\u003e with \u003ccode\u003ecallback1\u003c/code\u003e from first render.\u003c/li\u003e\n\u003cli\u003eWe have \u003ccode\u003ecallback2\u003c/code\u003e from next render that closes over fresh props and state.\u003c/li\u003e\n\u003cli\u003eBut we can‚Äôt replace an already existing interval without resetting the time!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eSo what if we didn‚Äôt replace the interval at all, and instead introduced a mutable \u003ccode\u003esavedCallback\u003c/code\u003e variable pointing to the \u003cem\u003elatest\u003c/em\u003e interval callback?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eNow we can see the solution:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWe \u003ccode\u003esetInterval(fn, delay)\u003c/code\u003e where \u003ccode\u003efn\u003c/code\u003e calls \u003ccode\u003esavedCallback\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSet \u003ccode\u003esavedCallback\u003c/code\u003e to \u003ccode\u003ecallback1\u003c/code\u003e after the first render.\u003c/li\u003e\n\u003cli\u003eSet \u003ccode\u003esavedCallback\u003c/code\u003e to \u003ccode\u003ecallback2\u003c/code\u003e after the next render.\u003c/li\u003e\n\u003cli\u003e???\u003c/li\u003e\n\u003cli\u003ePROFIT\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis mutable \u003ccode\u003esavedCallback\u003c/code\u003e needs to ‚Äúpersist‚Äù across the re-renders. So it can‚Äôt be a regular variable. We want something more like an instance field.\u003c/p\u003e\n\u003cp\u003e\u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\"\u003eAs we can learn from the Hooks FAQ,\u003c/a\u003e \u003ccode\u003euseRef()\u003c/code\u003e gives us exactly that:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseRef\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// { current: null }\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(You might be familiar with \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/refs-and-the-dom.html\"\u003eDOM refs\u003c/a\u003e in React. Hooks use the same concept for holding any mutable values. A ref is like a ‚Äúbox‚Äù into which you can put anything.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003euseRef()\u003c/code\u003e returns a plain object with a mutable \u003ccode\u003ecurrent\u003c/code\u003e property that‚Äôs shared between renders. We can save the \u003cem\u003elatest\u003c/em\u003e interval callback into it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Can read fresh props, state, etc.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// After every render, save the latest callback into our ref.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e callback\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd then we can read and call it from inside our interval:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThanks to \u003ccode\u003e[]\u003c/code\u003e, our effect never re-executes, and the interval doesn‚Äôt get reset. However, thanks to the \u003ccode\u003esavedCallback\u003c/code\u003e ref, we can always read the callback that we set after the last render, and call it from the interval tick.\u003c/p\u003e\n\u003cp\u003eHere‚Äôs a complete working solution:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseRef\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e callback\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(See the \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/3499qqr565\"\u003eCodeSandbox demo\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eExtracting a Hook\u003c/h2\u003e\n\u003cp\u003eAdmittedly, the above code can be disorienting. It‚Äôs mind-bending to mix the opposite paradigms. There‚Äôs also a potential to make a mess with mutable refs.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eI think Hooks provide lower-level primitives than classes ‚Äî but their beauty is that they enable us to compose and create better declarative abstractions.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIdeally, I just want to write this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI‚Äôll copy and paste the body of my ref mechanism into a custom Hook:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseRef\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e callback\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCurrently, the \u003ccode\u003e1000\u003c/code\u003e delay is hardcoded. I want to make it an argument:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e delay\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI will use it when I set up the interval:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow that the \u003ccode\u003edelay\u003c/code\u003e can change between renders, I need to declare it in the dependencies of my interval effect:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWait, didn‚Äôt we want to avoid resetting the interval effect, and specifically passed \u003ccode\u003e[]\u003c/code\u003e to avoid it? Not quite. We only wanted to avoid resetting it when the \u003cem\u003ecallback\u003c/em\u003e changes. But when the \u003ccode\u003edelay\u003c/code\u003e changes, we \u003cem\u003ewant\u003c/em\u003e to restart the timer!\u003c/p\u003e\n\u003cp\u003eLet‚Äôs check if our code works:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecallback\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e delay\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseRef\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e callback\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(Try it on \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/xvyl15375w\"\u003eCodeSandbox\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIt does! We can now \u003ccode\u003euseInterval()\u003c/code\u003e in any component and not think too much about its implementation details.\u003c/p\u003e\n\u003ch2\u003eBonus: Pausing the Interval\u003c/h2\u003e\n\u003cp\u003eSay we want to be able to pause our interval by passing \u003ccode\u003enull\u003c/code\u003e as the \u003ccode\u003edelay\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetDelay\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003eisRunning\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetIsRunning\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e isRunning \u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e delay \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHow do we implement this? The answer is: by not setting up an interval.\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esavedCallback\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edelay \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elet \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etick\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclearInterval\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e]);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(See the \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/l240mp2pm7\"\u003eCodeSandbox demo\u003c/a\u003e.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThat‚Äôs it. This code handles all possible transitions: a change of a delay, pausing, or resuming an interval. The \u003ccode\u003euseEffect()\u003c/code\u003e API asks us to spend more upfront effort to describe the setup and cleanup ‚Äî but adding new cases is easy.\u003c/p\u003e\n\u003ch2\u003eBonus: Fun Demo\u003c/h2\u003e\n\u003cp\u003eThis \u003ccode\u003euseInterval()\u003c/code\u003e Hook is really fun to play with. When the side effects are declarative, it‚Äôs much easier to orchestrate complex behaviors together.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFor example, we can have a \u003ccode\u003edelay\u003c/code\u003e of one interval be controlled by another:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks/counter_inception.gif\" alt=\"Counter that automatically speeds up\"/\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetDelay\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Increment the counter.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e delay\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Make it faster every second!\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseInterval\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edelay \u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esetDelay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edelay \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandleReset\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetDelay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e1000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eCounter: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh1\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh4\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eDelay: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003edelay\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eh4\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ehandleReset\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        Reset delay\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003e(See the \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/znr418qp13\"\u003eCodeSandbox demo\u003c/a\u003e!)\u003c/em\u003e\u003c/p\u003e\n\u003ch2\u003eClosing Thoughts\u003c/h2\u003e\n\u003cp\u003eHooks take some getting used to ‚Äî and \u003cem\u003eespecially\u003c/em\u003e at the boundary of imperative and declarative code. You can create powerful declarative abstractions with them like \u003ca target=\"_blank\" href=\"https://www.react-spring.io/docs/hooks/basics\"\u003eReact Spring\u003c/a\u003e but they can definitely get on your nerves sometimes.\u003c/p\u003e\n\u003cp\u003eThis is an early time for Hooks, and there are definitely still patterns we need to work out and compare. Don‚Äôt rush to adopt Hooks if you‚Äôre used to following well-known ‚Äúbest practices‚Äù. There‚Äôs still a lot to try and discover.\u003c/p\u003e\n\u003cp\u003eI hope this post helps you understand the common pitfalls related to using APIs like \u003ccode\u003esetInterval()\u003c/code\u003e with Hooks, the patterns that can help you overcome them, and the sweet fruit of creating more expressive declarative APIs on top of them.\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://x.com/search?q=https%3A%2F%2Foverreacted.io%2Fmaking-setinterval-declarative-with-react-hooks%2F\"\u003eDiscuss on ùïè\u003c/a\u003e¬†¬†¬∑¬†¬†\u003ca target=\"_blank\" href=\"https://github.com/gaearon/overreacted.io/edit/main/public/making-setinterval-declarative-with-react-hooks/index.md\"\u003eEdit on GitHub\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "20 min read",
  "publishedTime": null,
  "modifiedTime": null
}
