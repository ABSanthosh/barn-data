{
  "id": "e14b4d1a-f836-41fb-a96a-54b9ad2ad643",
  "title": "S26:E3 - Learning to Code with a Full-Time Job (Beau Carnes)",
  "link": "https://www.codenewbie.org/podcast/learning-to-code-with-a-full-time-job",
  "description": "In this week’s episode, Saron chats with Beau Carnes, Director of Technology Education at freeCodeCamp. Beau shares insights into his career trajectory, which began in television and digital media production. After gaining initial experience in this industry, he transitioned to work in education as a teacher. Beau speaks on his experiences within both these professions and speaks on his decision to venture into technology, establishing himself as a proficient software developer. During this conversation, Beau shares his reasoning for getting three degrees, finding the motivation to learn to code while balancing the demands of a full-time job, and sending out cold emails for his first job in tech. Show Links Partner with Dev \u0026 CodeNewbie! (sponsor) FAANG Beau's GitHub Beau's Twitter FreeCodeCamp JavaScript",
  "author": "CodeNewbie",
  "published": "Wed, 15 Nov 2023 03:00:00 -0500",
  "source": "http://feeds.codenewbie.org/cnpodcast.xml",
  "categories": [
    "Podcast"
  ],
  "byline": "",
  "length": 41524,
  "excerpt": "[00:00:05] SY: Welcome to the CodeNewbie Podcast where we talk to people on their coding journey in hopes of helping you on yours. I’m your host, Saron, and today we’re talking about learning to code with a full-time job with Beau Carnes, Director of Technology Education at freeCodeCamp.",
  "siteName": "",
  "favicon": "https://www.codenewbie.org/assets/favicon-180-b6d80e4d946988dd84ac70aca4f458997d945d020597dcd414e0a1f0c6133b74.png",
  "text": "[00:00:05] SY: Welcome to the CodeNewbie Podcast where we talk to people on their coding journey in hopes of helping you on yours. I’m your host, Saron, and today we’re talking about learning to code with a full-time job with Beau Carnes, Director of Technology Education at freeCodeCamp. [00:00:19] BC: I just started creating these sort job script tutorial about one concept, and there were some parts of JavaScript that I didn’t really know about until I was going to create a video about it. So I would actually have to learn about the topic and I could teach the topic. That’s really how I learned JavaScript. [00:00:36] SY: Beau tells us about his experience stepping into tech as his third career and how combining code with his background in video production and teaching has helped further develop his skills after this. [MUSIC BREAK] [00:00:52] SY: Thank you so much for being here. [00:00:53] BC: Hey! Yeah, thanks for having me. I’m excited to be on the podcast. [00:00:56] SY: So tell me a little bit about yourself when you were a kid. Were you into technology? Were you into computers as a child? [00:01:03] BC: A little bit, when I was younger, I learned to program in QBasic and my dad got me a book about programming. So I learned some basic things and I did a little bit on like a TI-83 calculator. I did some programming on that, but I wasn’t doing tons of programming. I just got like a general exposure to programming because I ended up not really pursuing software at first. I just became a software developer about six years ago. And this is really my third career. So I had a little bit of experience as a kid, but kind of got directed away a little bit and then I’ve kind of come back to it. [00:01:40] SY: Was the directed away coming from you and you finding other things more interesting? Or was it the adults or the schools in your life kind of taking you a different place? [00:01:50] BC: Yeah. I mean, when I was doing some basic programming when I was a kid, I wasn’t really thinking of it as like a job or a career path. I was just thinking about it as just something fun to do. And so when I was in high school, I participated in this film fest at the school where like students would create a movie and then they would show all the student created movies and then I decided to do my first bachelor’s degree in video production. [00:02:19] SY: Wow! [00:02:19] BC: And I was kind of inspired by making those movies in high school. So yeah, I got a bachelor’s in video production. And it was going pretty well. I actually worked in that field for a little bit and then I decided I wanted to change. I wanted to have a job where I was kind of interacting with people more, like really weirdly at the time in my video production job, I was basically sitting in front of a computer all the time, working on editing, doing like audio editing. [00:02:45] SY: Really? Oh, okay. So it was like post production kind of thing? [00:02:48] BC: Yeah. I was working for the small production company, spent a lot of time at the office working on editing audio and sometimes I would actually create like simple animations for the videos. [00:02:58] SY: Oh, fun! [00:02:59] BC: Yeah. At the time, I was actually using Flash to create these simple animations and I was thinking that I didn’t want a job where I was sitting in front of a computer all day, which is weird now because actually now that’s what I’m doing again. At the time, I decided to actually switch into teaching, elementary school teaching. [00:03:18] SY: Oh, very different. Very different. [00:03:20] BC: Yeah. [00:03:21] SY: Yeah. How did you make that transition? [00:03:23] BC: Well, it also was kind of inspired by an experience I had earlier where I did a lot of substitute teaching as a part time job. Where I live, you can become a substitute teacher just based on having a certain number of college credits. So I was just a substitute teacher as a part time job and thought, “Oh, maybe I could do this full time.” And I like the idea of being able to have a job that was helping people in a more direct way and then also where I was interacting with people more. [00:03:53] SY: So elementary school. So that means you taught a wide range of subjects, is that right? [00:03:58] BC: Yes. Specifically I was a Special Ed teacher and that even increased the range of topics that would help students with. [00:04:04] SY: And what age are we talking? [00:04:06] BC: So I actually worked at this small charter school that was K through 8. And then the last year I actually taught at a high school doing 9th and 10th grade. So I got a wide range of experiences as a teacher. [00:04:20] SY: Very interesting. So did that satisfy your desire to work with people and kind of get out from behind that desk, behind that computer? [00:04:29] BC: Yes, it did, at least at first. It was definitely a dream job. It was exactly what I was looking for and I really liked it. And I eventually, I think, started to get burnt out a little bit. One thing that I never really got quite down was the classroom management, which is a very important part of being an elementary school teacher. And so I felt that was always a struggle for me. And I really, really liked working with kids and youth. Actually, something that I did that was kind of related to technology and software at the time was I coached a robotics team for three or four years. And so teaching the kids how to make robots and program the robots. And eventually, like I said, I kind of got burnt out and decided to go in a new direction again. I decided I still wanted to work with youth, but maybe not as a full time capacity. And I remembered how I had the interest in software as a kid. So I decided to transition again to software development. [00:05:31] SY: Very cool. Very cool. Okay, so then you went for your third career. What was the thing that made you burn out from teaching? Was it just the fact that you’d been doing it for too long? Is it the amount of work that you have to do? I feel like we’re constantly hearing about how teachers are underpaid, overwork. Is it just kind of the culture of teaching? What was it that burned you out? [00:05:52] BC: The one thing that may have burnt me out faster was I was specifically interested in teaching in a pretty low-income school district. And I think in the school district I was in, it was kind of known for having more behavior issues than some other school districts. [00:06:12] SY: Right. [00:06:12] BC: And I’ve already kind of talked about how classroom management, I wasn’t really that good at it. And so I kind of always felt like I was a failure, basically. I wasn’t performing as well as I wanted. I really kind of enjoyed it, but then I felt like I couldn’t kind of get the class under control sometimes. And I still liked it up to the end, but I just wanted to try something new. And I got to say that being in software is way less stressful than being a teacher. [00:06:46] SY: Yeah. Yeah, I can completely understand that. I feel like, there’s to some degree, the benefit of having your users not in your face all day, right? Whereas when you’re a teacher, you’re directly talking to and trying to calm down and keep focused. These little people with their own ideas, their own personalities, and I’m sure that can be really tough. [00:07:07] BC: Another big difference is as a teacher, there’s almost no downtime. Everything’s very scheduled. So you’re basically always on. If you want to need to take a break in the middle of the day, like go to the doctor or something, it’s a big ordeal if you need to take some time off. But as a software developer, the schedule at least my schedule is very flexible and I really appreciate that. [00:07:29] SY: Yeah, absolutely. So I know that a lot of people are stuck in jobs that they feel burned out on, that they want to break free from it. They want to get into software development, but they can’t get themselves to quite make that decision, to make that leap. What was it for you that made you say, “You know what, I’m going to stop this teaching and I’m going to look into a career in software”? What made you actually move forward with that decision? [00:07:57] BC: Yeah. So I started kind of thinking about it. What really helped me is deciding on a plan in my mind of how I could get from where I was to where I was going in a very specific plan. So not just, “Oh, I want to become a software developer,” but I started like thinking about, “What do I have to do? What are the steps I would have to take?” And then I started to think, “I think I could do those steps.” And then I just started to implement them. So I did a few different things. I mean, one of the things was I did this online degree. It was through Western Governors University where you can just kind of work at your own pace and I knew I was going to be able to finish it really quickly where how this program works. As long as you can either complete the final exam or the final project, you can pass the college class. So I knew that there are some of these topics that I already had some knowledge about. So I figured I could actually probably get through this degree program really quickly because I already knew some of the content, I started to see this plan for how I can get this degree., and then I kind of made a schedule. I really scheduled out my week. So I still had a full-time job. I had a family, but I still want to learn software development. So I had to really get it really planned out. Basically, every evening I would put in a certain amount of time working, sometimes in the morning, sometimes even on my lunch break, I would be learning. Another thing that really helped was that I was really ready to be done teaching. So that was very motivating to me. [00:09:31] SY: Yeah. There was urgency on that front. Yeah. [00:09:33] BC: Yeah. So the fact that I had such a strong desire to try something new helped me to maintain the motivation while I was learning. So I think just having this very specific goal of where I’m going, a very big desire to not be where I currently was, those kind of went together to help give me the motivation that I needed to learn these new skills. [00:09:58] SY: Absolutely. Yeah, that makes a lot of sense. So tell me about the decision to go back to school because you already had two degrees. I feel like I just got my MBA a year or two ago and I’m very done with school. I never want to be in a classroom. And so I’m curious about your decision to get that third degree. Why not learn on your own? Why not do a bootcamp? I feel like there’s lots of avenues these days to kind of break into tech. What made you decide that going to a college degree program and going back to school for that third degree, what made you feel like that was the best decision for you? [00:10:32] BC: Well, first of all, I think you’re right that there’s a lot of ways to get into tech and not everyone has to do a college degree. I definitely see tons of people getting really good jobs by self learning, doing bootcamps, going through the freeCodeCamp curriculum. So I have a very specific answer. It’s very specific to me, which is there is a federal Student Loan Forgiveness program that you could get if you taught for five years in a low-income school district in a certain subject. Because I was a Special Ed teacher in a low-income school district, I qualified for a certain amount of Student Loan Forgiveness. It was $17,500. And I’d already been paying off my student loans before that, and I realized that I was going to get to the end of these five years, I was going to qualify for the Student Loan Forgiveness program, but I wasn’t going to have 17,500 worth of student loans to be forgiven. So I realized since I knew I was going to qualify for the Student Loan Forgiveness, I could take out additional student loans and be sure that those are going to be forgiven. So with Western Governors University, you pay like per six months, and you can do as many classes you want in six months. And I realized that if I can finish in under a year, the entire program will be forgiven with the Student Loan Forgiveness program. [00:11:46] SY: Wow! [00:11:47] BC: So that’s really both the main reason I got the degree and that inspired me to get the degree to begin with. Because I was thinking like, “What can I do?” At first, I thought maybe I would go back to school to get some sort of degree or certification that would help me still be a teacher. But then I kind of changed my mind and decided to do software development. [00:12:10] SY: So if you did not qualify for that Loan Forgiveness Program, would you still feel that getting that CS degree was worth it? [00:12:20] BC: Definitely. Yeah. [00:12:22] SY: Really? Tell me more. [00:12:23] BC: Well, looking back, I’m really glad how things worked out. And I do think that how the degree helped me more than the actual degree was the story I could tell people about how I completed the degree in six months. So that was actually even more valuable. [00:12:41] SY: That’s really short. [00:12:43] BC: Yeah. The truth is I wasn’t primarily in that degree to learn. I was mainly in the degree to get the degree. And also, I did want to learn, but I realized that a lot of being a software developer is like on the job training and stuff that you learn on your own. And I also continued to learn on my own after the degree was over where I finished the degree, but I still had six to eight months left of teaching. So then I use that time to continue learning and brushing up on my skills. And I currently work for freeCodeCamp, but that’s when I actually kind of found out about freeCodeCamp and I went through the curriculum as a student before I was working for freeCodeCamp. And I knew I was coming in with very little programming experience. I knew like when I was done teaching and I went to get a software developer job I was going to come in with basically zero experience. So I was trying to think, “How can I use my time effectively for like these last six to eight months to kind of build up my resume so when I went to get a job I could kind of beat out some other people that may have had some more experience?” So that’s kind of what I was focusing on in that last period of time. [MUSIC BREAK] [00:14:12] SY: So you said earlier that you were not really getting the CS degree to learn, you were getting it to get the degree. Why was getting the degree so important to you? [00:14:23] BC: Well, for sure, at that time I didn’t know how common it is for people to get software jobs without degrees. So I was looking at this as being a very important credential to help me get a job. And I’ve kind of come to realize that while it is helpful to get a job, a lot of people still get jobs without degrees as well. [00:14:47] SY: So did you feel like the message of this is an important certification, this is an important tool to get a job, did that come from research? Did that come from talking to people in the industry? Where did that belief come from? [00:15:01] BC: I think it’s just what I always thought for most of my whole life that you graduate high school, then you go to college, you get a degree, and then you get a job. And I think I just kind of learned it through my life experiences. I can’t really even point to one specific lesson or person that taught me that. That’s just something that this idea I had in my head that that was kind of the way to go to get any job. [00:15:25] SY: And what year was this when you decided to get your CS degree? [00:15:27] BC: So this was about eight or nine years ago. So what would that be? 2014? [00:15:34] SY: Yeah. So peak bootcamp era, peak learn to code movement was definitely picking up and all of that. I think freeCodeCamp got started either that year or recently prior to that. I know CodeNewbie got started. I mean, I did two years before that. So around that time. So I’m curious, when you think about the landscape of learning today, when you think about all the resources that are available, the tools, the school, some are free, some have loan programs, some have scholarships, when you think about in-person, remote, self-paced, do you still feel that having a CS degree is your best bet? But I’m particularly interested in your opinion on this because I know that freeCodeCamp is working on their CS degree and working on becoming an accredited organization and institution. So I’m curious, do you feel that if you have all the time and money in the world that getting a CS degree is ultimately your best bet? [00:16:31] BC: I really think it can depend on the situation really. It’s always helpful to have more credentials than less credentials. When you’re going to apply for a job and the hiring manager is looking at multiple resumes, yeah, if you have a degree, I think that’s often going to help you. So usually if that’s your primary purpose in life that you want to get a job as a software developer and you have lots of time, lots of resources. I think it is helpful to get a CS degree, but I also think that there’s a lot of opportunities to learn at your own pace. And there’s also a lot of opportunities to show that you know what you’re talking about in your resume, in your interview. The hiring manager just wants to make sure that they hire someone that’s capable to do the job. And they only have a few signals to look at during the hiring process to kind of learn that you’re capable. So having a degree is like a really strong signal, but there are a lot of other strong signals as well. So I think that if you don’t have the money or you don’t have the time, learning self-paced is a really viable option. And I know for a lot of people working full time, it’s going to be hard to also get a degree. If I had to do that same degree right now that I did then, I would not have been able to do it as fast. I was at like a certain time in my life, a certain time in my family, everything kind of worked together to kind of give me more time where my life now, where my kids actually require a lot more, I have more kids now, and they require even more assistance than at this one other time of my life where it would have been much harder now to do a degree. So I think if people are at a point in their life where it’s just not going to work out to go back to school full time or they don’t have the money, I think there’s a lot of good options. But if you’re going to learn through freeCodeCamp or through a bootcamp or through some other way, it’s very important to do things to help you stand out when you go to get a job. So you don’t want to just say, “Oh, yeah, I learned on my own how to do this,” you have to be able to point to specific things that you’ve done that will show that you know what you’re talking about. [00:18:38] SY: Absolutely. So going back to your story of getting that CS degree, I’m curious, did having that background in TV production and having that background as a teacher, did any of those help you with that degree program, especially as a software engineer? I feel like we’re always talking about those transferable skills, how your past career can be a huge asset and how we need to present it as a strength and an interview process. Did you feel like your past careers in the past degrees that you had, did it help you in your career in technology? [00:19:12] BC: Definitely. So in my final six months of teaching, I was talking about how I was trying to figure out what can I do to make me stand out? And so one thing I did was just combine all my previous interest with video production, teaching, software development. And I started my own personal YouTube channel to teach JavaScript. And so the fact that I had this background teaching and video production made it easier to start this YouTube channel. And so I just started creating these short JavaScript tutorials about one concept, like for loops or if statements or closures. And one thing that was kind of cool about it is that’s really how I learned JavaScript, where I knew I wanted to create a video on every topic in JavaScript. And I did kind of know JavaScript. But when I knew I was going to try to teach this concept to people, It really helped me to really actually learn the concepts. And there were some parts of JavaScript that I didn’t really know about until I was going to create a video about it because I knew, in general, the topics I need to teach, but I didn’t really know how to implement all these different things. So I would actually have to learn about the topic so then I could teach the topic. So basically, I became an expert through the process of teaching others JavaScript. And I highly recommend that to other people. You don’t necessarily need to make videos, but you could possibly write blog posts, or like create an eBook, or maybe even find a way to teach in-person or something. If you can find a way to teach others, it can really help you understand a concept yourself. And then also, I kind of thought about it as like an authority piece that these videos show that I was an authority in this area. It showed that I knew what I was talking about. And that really helped me when I went to get a job. I could show, “Look, I’ve created this JavaScript course.” And I think in some ways that also possibly helped just as much as the degree where I could say, “Look, I’ve created this JavaScript course. Look at all these people that have learned JavaScript from me.” And that really helped me when I went to get a job. And that’s something that anybody can do. You don’t need a degree to create a course on JavaScript or any other programming language. And also, it almost doesn’t matter how many people watch the course? I mean, it is helpful to get more people watching or maybe reading your articles. But when you go to apply for a job, you can link them to your video, link them to your blog posts, and just the fact that you’ve created this is going to be a good sign to a future employer that you know what you’re talking about, that they should hire you. So yeah, it’s nice to be able to like grow a YouTube channel or grow a following on social media or your blog, but those things can have a benefit, even if you don’t have a big following because it can still help you get a job. [00:22:13] SY: Absolutely. I completely agree. I think that the moment you set a goal for yourself that I need to create content to teach this concept to other people, all of a sudden you really have to know what you’re talking about. I’m experiencing the same thing. I recently launched a newsletter called “Not A Designer”, and it’s my way of learning design principles and learning best practices as a developer, as someone who’s always loved design but never really learned it officially. And I picked just a handful of topics, how to style lists, how to pick a typeface, how to design tags. And it is fascinating how the simple goal of I need to write a newsletter on Tuesday about line height has forced me to research way more about line height than I ever would. It really forces you to dig deep and really know what you’re talking about and make sure that you’re giving people good information. So I think that is such a great piece of advice. If you are interested in learning, I think that if you say to yourself, “I’m going to learn so well that I can create content, that I’m going to prioritize publishing a video, a blog post, a newsletter,” newsletters are so hot these days, “A newsletter on what I’m learning,” I feel like there is a huge opportunity where you can really dig deep and learn something really well and the thrill of having someone else read your content or watch your video and say, “Oh, that was really a good explanation,” is totally worth the work and the effort that goes into it as well. [00:23:46] BC: Yeah, I would say that really the most important things have helped me with in my career is just putting out content. That’s definitely led to so many breakthroughs and positive things and positive interactions and it’s been super helpful. And like I said, anybody can do it. You don’t need a degree to be putting out content. And one of my main parts of my job is running the freeCodeCamp YouTube channel and curating courses from a lot of different contributors, or some I make myself, but most of them we publish from other contributors. And it’s actually a good place to share your content. If you’ve been creating courses on your own channel for a while and you want to reach a wider audience, people can consider submitting a course to the freeCodeCamp channel. And if it meets our standards, we could maybe publish it on our channel to get a wider audience and then people could possibly find out more about your channel. [00:24:39] SY: Yeah. [00:24:40] BC: And it can just grow your reputation and grow your audience. So we try to help people with freeCodeCamp. [00:24:45] SY: Yeah. Yeah. That’s such a great use of a big audience. I love that. I love that a lot. So one of the things that I’m very curious about is this degree in six months, which feels like no time at all. How did you juggle that? How did you kind of break up your day? And how did you squeeze in time to learn while still working as a teacher during that time as well? You hadn’t quit your job yet. Yeah. How did you manage the juggle of the full-time job, taking care of the family, and then also learning this new thing and getting this whole degree? [00:25:13] BC: Yeah. So I kind of talked about some of the strategies I use. And like I said, if I had to do it now, I would not be able to. So I just happened to be at a really good time in my life. But as a teacher, the amount of hours I put in in a day was less than some other jobs where like some people could be working like 50, 60 hours a week. So I was probably working maybe 35 hours a week. So that definitely helped. And then also I was very motivated at the time, like more motivated than I’ve been since before that or since then I got into like the zone and I had my schedule extremely scheduled out. I made a week schedule and I scheduled all my hours of what I’m going to do what, when am I going to hang out with the family, this is when date night is, this is when I’m going to see some friends, but then these are the times I’m going to be studying and working on this degree. And then I also would study during my lunch break. If I had a test coming up, I would study during my lunch break. And then sometimes I would actually take days off of work if I knew I had this big test coming up or a deadline, and a lot of these deadlines were self set for me because I could kind of work at my own pace, but I created all these deadlines for myself of when I was going to have each class done, and I occasionally would take a day off at work so I could really work on a project or prepare. And also, I had a very supportive wife. So that’s definitely a key thing if you have a family. [00:26:40] SY: A hundred percent. Got to have the support of the partner. A hundred percent. Yeah. Makes life a lot easier. So if you are a person today taking into consideration all the things that have been happening with recent tech layoffs and the tech environment, feeling just a little, I don’t want to say troubled, but there’s definitely a lot of anxiety in the air. I’ll say that. And you’re trying to enter tech for the first time and you’re trying to figure out, “Do I go back to school? Do I do freeCodeCamp? Do I do another free resource? Do I do a bootcamp?” What are some considerations that you might make in today’s climate, in today’s environment, to help you break into tech efficiently and quickly? [00:27:21] BC: Well, I think there’s really a lot of ways to go about it. But if I were going to kind of start right now, I would do kind of a combinations of a few things I did in the past, which maybe I wouldn’t do a degree, but I would definitely do self-paced curriculum. I think freeCodeCamp is a good option where there’s different parts of freeCodeCamp. Not everyone knows about every part. We have the YouTube channel, but we also have an interactive text-based curriculum on freeCodeCamp.org. Maybe I’m biased because I work for freeCodeCamp, but I think it’s a really good curriculum to learn how to be a full stack web developer if you just go through that curriculum. And I think that’s a good place to start, to learn. And then you want to create projects. You need to be able to have projects that you can show to future employers. And some of them can just be like toy projects and things that you create yourself. But it can be really helpful to have projects that you’ve made for other people. Before I got a job as a software developer, I made a few like kind of like real world projects where there is this church that I knew about that needed this web app. So it was like a Craigslist-type web app for like an internal web app for the church to use. I created that for them. And then also there’s this regional newspaper that wanted a mobile app. And I was able to use like an ionic template to create this mobile app. And these were both like real world projects that I was able to create that I can put on my resume. And I definitely recommend anybody that is trying to get a job to try to think if you’d know anybody that you could create an app or a website for that would be for an actual business or an organization that would kind of give you some amount of real world experience without actually working for anybody. So that would definitely be a suggestion I have. And then one thing that also I think helped me. So different areas of the country is different for what you need to learn and the tech industry isn’t the same everywhere. I mean, I think we hear so much about Silicon Valley and what’s going on over there, but software developers are needed everywhere. [00:29:28] SY: Absolutely. [00:29:28] BC: And often the technologies that are being used can vary by different regions. So I knew I wasn’t going to be in the city I was in. There was a specific city I wanted to move to, to be closer to family. And so I cold emailed a lot of developers in that city and just told them that I was going to be looking for a job as a software developer soon and I wanted to learn more about the software industry in that city. And I just offered to buy him coffee. And quite a few people took me up on that. And I was able to meet with a lot of local developers that worked at different companies that I thought were interesting in the area. And that helped me kind of learn more about the industry and start to kind of develop a personal network in the area. And a few of those meetings led to interviews. That’s something I would recommend to anybody. It’s just inviting people to buy them some coffee or just trying to network and meet with people specifically in the city where you want to get a job. [00:30:27] SY: I think that’s such a great idea, especially in this world where everyone is competing for remote. If you do have a local angle, if you can get to know your neighborhood, your community and look up some businesses that are not necessarily tech businesses, that aren’t necessarily FAANG companies, but as you said, everyone needs technology. Every company needs a developer at some level to some degree. So going local, going smaller might be a better strategy for a lot of folks. Yeah, I think that’s really great. [00:30:55] BC: Yeah. If you’re a brand new, you’re going to have a lot more success trying to find a local in-person job. And I think it can be harder to get a remote job, especially when you’re first starting out. [00:31:06] SY: Yeah, way more competition on those remote jobs and those local jobs, for sure. No one wants to go in office. If you’re one of the few people who’s willing to go in office, take advantage of that. For sure. Coming up next, Beau shares more about freeCodeCamp and how you can best utilize their help after this. [MUSIC BREAK] [00:31:37] SY: So tell me a little bit more about freeCodeCamp? We touched on it a few times. We’ve kind of hinted at what it does, but I don’t think we’ve explicitly said what freeCodeCamp is. Can you talk a little bit about the structure of the organization? I know you guys do a ton of different content and many different formats and languages. Maybe give us an overview of all the amazing stuff that you all do for the community for free, by the way. [00:32:00] BC: Yeah, sure. Yeah. So freeCodeCamp, our mission is to provide free learning resources for people learning software development. And we want to make it so anybody can learn to code anywhere in the world for free. And we have a few different ways that we provide this content. So a few that I’ve mentioned was our interactive text-based curriculum where you do kind of like coding in your browser to solve these challenges. And that’s where I would recommend a lot of people start because it’s a step-by-step curriculum to learn everything you need to know to be a full stack web developer. And we also have certifications. So this is all on freeCodeCamp.org. And we also have some certifications about machine learning and Python and a lot of other things that I would highly recommend people check out. And then we have our YouTube channel. So we have the largest software tech channel on YouTube. And we post courses from all sorts of topics related to software development and programming and even some more tangential topics like Algebra or statistics. We just want to teach everything you need to know to get a job as a software developer. And these courses are full length courses. They’re often two hours. Sometimes we’ll post like a 25-hour course on the channel. So anything that you want to learn about related to software development, you can probably learn on the YouTube channel. And then something that people don’t know is that our biggest channels are English YouTube channel, but we also have YouTube channels in a few other languages. So one of our second biggest channel is our Spanish YouTube channel. And then we also have a Chinese channel, Portuguese, Japanese, Hindi, and then a few other ones. So if you speak other languages, you can check out some of these other channels as well. And then we have also freeCodeCamp News, which is where we publish technical articles on all sorts of topics. And we’ve been focusing more and more on posting comprehensive books on all sorts of topics like Python, JavaScript, prompt engineering, and you can basically go to our book. And it’s basically just like a humongous blog post that’s a book linked content to learn a certain programming language or technical concept. And I mentioned the different languages on YouTube, but we also have freeCodeCamp News in a lot of the top world languages and then we also have our interactive curriculum translated into a bunch of different languages. So like I said, our goal is to teach people all over the world and we’re eventually going to have all this content translated into as many languages as possible. And then I guess the final, there’s a lot of like smaller things that freeCodeCamp does, but one of the other big components I didn’t mention yet is the forum. So we have a very active forum where you can get help on any programming concept. If you’re going through the freeCodeCamp curriculum or reading an article or going through a video, you get stuck on something, you can go and ask a question in the forum. And we try to make it as friendly as possible, as inclusive as possible, as kind to beginners as possible. I know there are some forums that kind of have gotten, I guess, the reputation for not being very beginner friendly, not very friendly to newbies. But our forum, we try to make it as beginner friendly as possible to help people that are learning to code and be able to answer questions directly. [00:35:35] SY: I feel like you all have learned so much over the years, and you’ve been at freeCodeCamp for a good chunk of time, I believe, about the way people learn things that work, things that don’t work. I’m curious if you can share maybe a couple best practices for people who are attempting to learn on their own. What have you seen that people have done in your community that have really helped them level up quickly, and what are some things that maybe have slowed them down that people should try to avoid? [00:36:04] BC: Yeah, there’s a different mediums. It could be different, but there’s some general things that would apply to all mediums, which I think one thing is to take things in small chunks. Even though we often post these like humongous courses and these humongous articles, you want to take things a little bit at a time. We’ve been able to implement that the most on the curriculum where it’s broken up into lots of very like bite-sized chunks where you just learn a little bit at a time and then you kind of check what you learn, then you learn a little bit more than check what you learn. And a key thing, no matter how you’re learning is to actually put into practice. It’s not going to help just to passively watch a video about Python. You need to have your code editor up. You need to be following along and trying out things on your own. So that’s very important. And then another very important thing is to have a community. You can technically learn on your own with nobody around, but if you have a community and people to support you, that’s going to often lead you to be a lot more successful. So we do have a freeCodeCamp chat, but then our forum is even bigger. So you can kind of meet people on the forum. But then also on Twitter, a lot of people share hashtags. I know when I was first getting started, I did the #100DaysofCode, which is very popular, I think for people learning to code, where you learn something for 100 days and you post on Twitter every day what you worked on, and then people can kind of support each other. And I think that’s really important to kind of become part of a community, find other people that are learning to code so you can support each other and help each other and encourage each other. [00:37:47] SY: Absolutely. Now at the end of every episode, we ask our guests to fill in the blanks of some very important questions. Are you ready to fill in the blanks? [00:38:02] BC: Yes. [00:38:03] SY: Number one, worst advice I’ve ever received is? [00:38:06] BC: I remember when I was doing this degree that I finished really quickly, I had like a school counselor, someone working for the school that told me that I wasn’t going to be able to do it. I said, “Change my goals so they weren’t so ambitious.” [00:38:19] SY: Oh, wow! [00:38:19] BC: And I’ve had similar things and a few other things in my life where people are telling me, “Don’t do that goal. Your goal isn’t good.” And then I realized, actually, I’m going to make my own goal. In some ways, it motivated me. I kind of wanted to prove them wrong. So I guess the worst advice is just like the haters that are telling you you can’t do it, when actually you can do it. [00:38:42] SY: Absolutely. I’m glad you didn’t listen for sure. Number two, best advice I’ve ever received is? [00:38:47] BC: I think one of the most helpful piece of advice, I read this book called Linchpin by Seth Godin and that’s what inspired me to start creating my own YouTube channel. He talks about the importance of just putting free content out into the world and that made a humongous difference on my career is just putting free content into the world. So I think that was the best advice [00:39:12] SY: Very cool. Number three. My first coding project was about? [00:39:18] BC: I started doing this QBasic when I was much younger and it was probably like a text-based adventure game or something like that. [00:39:27] SY: Very cool. Number four, one thing I wish I knew when I first started to code is? [00:39:33] BC: Maybe that most developers don’t have a ton of stuff memorized. They’re constantly looking up how to do things, even like basic things. An experienced developer still could be looking up like basic things all the time to remember how to do those things. [00:39:48] SY: That’s such a great reminder to all of us is most of us are constantly looking things up. And now that we have ChatGPT, we have another place where we can look things up. So definitely don’t feel bad for doing that for sure. Well, thank you again so much for joining us, Beau. [00:40:01] BC: Well, thanks for having me. I actually listened to CodeNewbie when I was first learning about software development and CodeNewbie was a big inspiration for me. [00:40:08] SY: Oh, so cool! [00:40:09] BC: So it’s really cool to actually get to be on the podcast. [00:40:12] SY: Yeah. Now you get to inspire other people. So this is wonderful. This is great. And thank you for all your work with freeCodeCamp and all the work that you’ve done to make breaking them into tech a little bit easier for folks. We really appreciate it. [MUSIC BREAK] [00:40:28] SY: Want to be in the CodeNewbie Podcast? Know someone who I should interview next? Reach out on Twitter at Code Newbies or send me an email, hello@codenewbie.org. For more info on the podcast, check out www.codenewbie.org/podcast. And if you like the show, make sure to follow us and leave a review on your preferred platform so we can keep making the pod. Thanks for listening. See you next week. [END]",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n              \u003cp\u003e[00:00:05] SY: Welcome to the CodeNewbie Podcast where we talk to people on their coding journey in hopes of helping you on yours. I’m your host, Saron, and today we’re talking about learning to code with a full-time job with Beau Carnes, Director of Technology Education at freeCodeCamp.\u003c/p\u003e\u003cp\u003e [00:00:19] BC: I just started creating these sort job script tutorial about one concept, and there were some parts of JavaScript that I didn’t really know about until I was going to create a video about it. So I would actually have to learn about the topic and I could teach the topic. That’s really how I learned JavaScript.\u003c/p\u003e\u003cp\u003e [00:00:36] SY: Beau tells us about his experience stepping into tech as his third career and how combining code with his background in video production and teaching has helped further develop his skills after this.\u003c/p\u003e\u003cp\u003e [MUSIC BREAK]\u003c/p\u003e\u003cp\u003e [00:00:52] SY: Thank you so much for being here.\u003c/p\u003e\u003cp\u003e [00:00:53] BC: Hey! Yeah, thanks for having me. I’m excited to be on the podcast.\u003c/p\u003e\u003cp\u003e [00:00:56] SY: So tell me a little bit about yourself when you were a kid. Were you into technology? Were you into computers as a child?\u003c/p\u003e\u003cp\u003e [00:01:03] BC: A little bit, when I was younger, I learned to program in QBasic and my dad got me a book about programming. So I learned some basic things and I did a little bit on like a TI-83 calculator. I did some programming on that, but I wasn’t doing tons of programming. I just got like a general exposure to programming because I ended up not really pursuing software at first. I just became a software developer about six years ago. And this is really my third career. So I had a little bit of experience as a kid, but kind of got directed away a little bit and then I’ve kind of come back to it.\u003c/p\u003e\u003cp\u003e [00:01:40] SY: Was the directed away coming from you and you finding other things more interesting? Or was it the adults or the schools in your life kind of taking you a different place?\u003c/p\u003e\u003cp\u003e [00:01:50] BC: Yeah. I mean, when I was doing some basic programming when I was a kid, I wasn’t really thinking of it as like a job or a career path. I was just thinking about it as just something fun to do. And so when I was in high school, I participated in this film fest at the school where like students would create a movie and then they would show all the student created movies and then I decided to do my first bachelor’s degree in video production.\u003c/p\u003e\u003cp\u003e [00:02:19] SY: Wow!\u003c/p\u003e\u003cp\u003e [00:02:19] BC: And I was kind of inspired by making those movies in high school. So yeah, I got a bachelor’s in video production. And it was going pretty well. I actually worked in that field for a little bit and then I decided I wanted to change. I wanted to have a job where I was kind of interacting with people more, like really weirdly at the time in my video production job, I was basically sitting in front of a computer all the time, working on editing, doing like audio editing.\u003c/p\u003e\u003cp\u003e [00:02:45] SY: Really? Oh, okay. So it was like post production kind of thing?\u003c/p\u003e\u003cp\u003e [00:02:48] BC: Yeah. I was working for the small production company, spent a lot of time at the office working on editing audio and sometimes I would actually create like simple animations for the videos.\u003c/p\u003e\u003cp\u003e [00:02:58] SY: Oh, fun!\u003c/p\u003e\u003cp\u003e [00:02:59] BC: Yeah. At the time, I was actually using Flash to create these simple animations and I was thinking that I didn’t want a job where I was sitting in front of a computer all day, which is weird now because actually now that’s what I’m doing again. At the time, I decided to actually switch into teaching, elementary school teaching.\u003c/p\u003e\u003cp\u003e [00:03:18] SY: Oh, very different. Very different.\u003c/p\u003e\u003cp\u003e [00:03:20] BC: Yeah.\u003c/p\u003e\u003cp\u003e [00:03:21] SY: Yeah. How did you make that transition?\u003c/p\u003e\u003cp\u003e [00:03:23] BC: Well, it also was kind of inspired by an experience I had earlier where I did a lot of substitute teaching as a part time job. Where I live, you can become a substitute teacher just based on having a certain number of college credits. So I was just a substitute teacher as a part time job and thought, “Oh, maybe I could do this full time.” And I like the idea of being able to have a job that was helping people in a more direct way and then also where I was interacting with people more.\u003c/p\u003e\u003cp\u003e [00:03:53] SY: So elementary school. So that means you taught a wide range of subjects, is that right?\u003c/p\u003e\u003cp\u003e [00:03:58] BC: Yes. Specifically I was a Special Ed teacher and that even increased the range of topics that would help students with.\u003c/p\u003e\u003cp\u003e [00:04:04] SY: And what age are we talking?\u003c/p\u003e\u003cp\u003e [00:04:06] BC: So I actually worked at this small charter school that was K through 8. And then the last year I actually taught at a high school doing 9th and 10th grade. So I got a wide range of experiences as a teacher.\u003c/p\u003e\u003cp\u003e [00:04:20] SY: Very interesting. So did that satisfy your desire to work with people and kind of get out from behind that desk, behind that computer?\u003c/p\u003e\u003cp\u003e [00:04:29] BC: Yes, it did, at least at first. It was definitely a dream job. It was exactly what I was looking for and I really liked it. And I eventually, I think, started to get burnt out a little bit. One thing that I never really got quite down was the classroom management, which is a very important part of being an elementary school teacher. And so I felt that was always a struggle for me. And I really, really liked working with kids and youth. Actually, something that I did that was kind of related to technology and software at the time was I coached a robotics team for three or four years. And so teaching the kids how to make robots and program the robots. And eventually, like I said, I kind of got burnt out and decided to go in a new direction again. I decided I still wanted to work with youth, but maybe not as a full time capacity. And I remembered how I had the interest in software as a kid. So I decided to transition again to software development.\u003c/p\u003e\u003cp\u003e [00:05:31] SY: Very cool. Very cool. Okay, so then you went for your third career. What was the thing that made you burn out from teaching? Was it just the fact that you’d been doing it for too long? Is it the amount of work that you have to do? I feel like we’re constantly hearing about how teachers are underpaid, overwork. Is it just kind of the culture of teaching? What was it that burned you out?\u003c/p\u003e\u003cp\u003e [00:05:52] BC: The one thing that may have burnt me out faster was I was specifically interested in teaching in a pretty low-income school district. And I think in the school district I was in, it was kind of known for having more behavior issues than some other school districts.\u003c/p\u003e\u003cp\u003e [00:06:12] SY: Right.\u003c/p\u003e\u003cp\u003e [00:06:12] BC: And I’ve already kind of talked about how classroom management, I wasn’t really that good at it. And so I kind of always felt like I was a failure, basically. I wasn’t performing as well as I wanted. I really kind of enjoyed it, but then I felt like I couldn’t kind of get the class under control sometimes. And I still liked it up to the end, but I just wanted to try something new. And I got to say that being in software is way less stressful than being a teacher.\u003c/p\u003e\u003cp\u003e [00:06:46] SY: Yeah. Yeah, I can completely understand that. I feel like, there’s to some degree, the benefit of having your users not in your face all day, right? Whereas when you’re a teacher, you’re directly talking to and trying to calm down and keep focused. These little people with their own ideas, their own personalities, and I’m sure that can be really tough.\u003c/p\u003e\u003cp\u003e [00:07:07] BC: Another big difference is as a teacher, there’s almost no downtime. Everything’s very scheduled. So you’re basically always on. If you want to need to take a break in the middle of the day, like go to the doctor or something, it’s a big ordeal if you need to take some time off. But as a software developer, the schedule at least my schedule is very flexible and I really appreciate that.\u003c/p\u003e\u003cp\u003e [00:07:29] SY: Yeah, absolutely. So I know that a lot of people are stuck in jobs that they feel burned out on, that they want to break free from it. They want to get into software development, but they can’t get themselves to quite make that decision, to make that leap. What was it for you that made you say, “You know what, I’m going to stop this teaching and I’m going to look into a career in software”? What made you actually move forward with that decision?\u003c/p\u003e\u003cp\u003e [00:07:57] BC: Yeah. So I started kind of thinking about it. What really helped me is deciding on a plan in my mind of how I could get from where I was to where I was going in a very specific plan. So not just, “Oh, I want to become a software developer,” but I started like thinking about, “What do I have to do? What are the steps I would have to take?” And then I started to think, “I think I could do those steps.” And then I just started to implement them. So I did a few different things. I mean, one of the things was I did this online degree. It was through Western Governors University where you can just kind of work at your own pace and I knew I was going to be able to finish it really quickly where how this program works. As long as you can either complete the final exam or the final project, you can pass the college class. So I knew that there are some of these topics that I already had some knowledge about. So I figured I could actually probably get through this degree program really quickly because I already knew some of the content, I started to see this plan for how I can get this degree., and then I kind of made a schedule. I really scheduled out my week. So I still had a full-time job. I had a family, but I still want to learn software development. So I had to really get it really planned out. Basically, every evening I would put in a certain amount of time working, sometimes in the morning, sometimes even on my lunch break, I would be learning. Another thing that really helped was that I was really ready to be done teaching. So that was very motivating to me.\u003c/p\u003e\u003cp\u003e [00:09:31] SY: Yeah. There was urgency on that front. Yeah.\u003c/p\u003e\u003cp\u003e [00:09:33] BC: Yeah. So the fact that I had such a strong desire to try something new helped me to maintain the motivation while I was learning. So I think just having this very specific goal of where I’m going, a very big desire to not be where I currently was, those kind of went together to help give me the motivation that I needed to learn these new skills.\u003c/p\u003e\u003cp\u003e [00:09:58] SY: Absolutely. Yeah, that makes a lot of sense. So tell me about the decision to go back to school because you already had two degrees. I feel like I just got my MBA a year or two ago and I’m very done with school. I never want to be in a classroom. And so I’m curious about your decision to get that third degree. Why not learn on your own? Why not do a bootcamp? I feel like there’s lots of avenues these days to kind of break into tech. What made you decide that going to a college degree program and going back to school for that third degree, what made you feel like that was the best decision for you?\u003c/p\u003e\u003cp\u003e [00:10:32] BC: Well, first of all, I think you’re right that there’s a lot of ways to get into tech and not everyone has to do a college degree. I definitely see tons of people getting really good jobs by self learning, doing bootcamps, going through the freeCodeCamp curriculum. So I have a very specific answer. It’s very specific to me, which is there is a federal Student Loan Forgiveness program that you could get if you taught for five years in a low-income school district in a certain subject. Because I was a Special Ed teacher in a low-income school district, I qualified for a certain amount of Student Loan Forgiveness. It was $17,500. And I’d already been paying off my student loans before that, and I realized that I was going to get to the end of these five years, I was going to qualify for the Student Loan Forgiveness program, but I wasn’t going to have 17,500 worth of student loans to be forgiven. So I realized since I knew I was going to qualify for the Student Loan Forgiveness, I could take out additional student loans and be sure that those are going to be forgiven. So with Western Governors University, you pay like per six months, and you can do as many classes you want in six months. And I realized that if I can finish in under a year, the entire program will be forgiven with the Student Loan Forgiveness program.\u003c/p\u003e\u003cp\u003e [00:11:46] SY: Wow!\u003c/p\u003e\u003cp\u003e [00:11:47] BC: So that’s really both the main reason I got the degree and that inspired me to get the degree to begin with. Because I was thinking like, “What can I do?” At first, I thought maybe I would go back to school to get some sort of degree or certification that would help me still be a teacher. But then I kind of changed my mind and decided to do software development.\u003c/p\u003e\u003cp\u003e [00:12:10] SY: So if you did not qualify for that Loan Forgiveness Program, would you still feel that getting that CS degree was worth it?\u003c/p\u003e\u003cp\u003e [00:12:20] BC: Definitely. Yeah.\u003c/p\u003e\u003cp\u003e [00:12:22] SY: Really? Tell me more.\u003c/p\u003e\u003cp\u003e [00:12:23] BC: Well, looking back, I’m really glad how things worked out. And I do think that how the degree helped me more than the actual degree was the story I could tell people about how I completed the degree in six months. So that was actually even more valuable.\u003c/p\u003e\u003cp\u003e [00:12:41] SY: That’s really short.\u003c/p\u003e\u003cp\u003e [00:12:43] BC: Yeah. The truth is I wasn’t primarily in that degree to learn. I was mainly in the degree to get the degree. And also, I did want to learn, but I realized that a lot of being a software developer is like on the job training and stuff that you learn on your own. And I also continued to learn on my own after the degree was over where I finished the degree, but I still had six to eight months left of teaching. So then I use that time to continue learning and brushing up on my skills. And I currently work for freeCodeCamp, but that’s when I actually kind of found out about freeCodeCamp and I went through the curriculum as a student before I was working for freeCodeCamp. And I knew I was coming in with very little programming experience. I knew like when I was done teaching and I went to get a software developer job I was going to come in with basically zero experience. So I was trying to think, “How can I use my time effectively for like these last six to eight months to kind of build up my resume so when I went to get a job I could kind of beat out some other people that may have had some more experience?” So that’s kind of what I was focusing on in that last period of time.\u003c/p\u003e\u003cp\u003e [MUSIC BREAK]\u003c/p\u003e\u003cp\u003e [00:14:12] SY: So you said earlier that you were not really getting the CS degree to learn, you were getting it to get the degree. Why was getting the degree so important to you?\u003c/p\u003e\u003cp\u003e [00:14:23] BC: Well, for sure, at that time I didn’t know how common it is for people to get software jobs without degrees. So I was looking at this as being a very important credential to help me get a job. And I’ve kind of come to realize that while it is helpful to get a job, a lot of people still get jobs without degrees as well.\u003c/p\u003e\u003cp\u003e [00:14:47] SY: So did you feel like the message of this is an important certification, this is an important tool to get a job, did that come from research? Did that come from talking to people in the industry? Where did that belief come from?\u003c/p\u003e\u003cp\u003e [00:15:01] BC: I think it’s just what I always thought for most of my whole life that you graduate high school, then you go to college, you get a degree, and then you get a job. And I think I just kind of learned it through my life experiences. I can’t really even point to one specific lesson or person that taught me that. That’s just something that this idea I had in my head that that was kind of the way to go to get any job.\u003c/p\u003e\u003cp\u003e [00:15:25] SY: And what year was this when you decided to get your CS degree?\u003c/p\u003e\u003cp\u003e [00:15:27] BC: So this was about eight or nine years ago. So what would that be? 2014?\u003c/p\u003e\u003cp\u003e [00:15:34] SY: Yeah. So peak bootcamp era, peak learn to code movement was definitely picking up and all of that. I think freeCodeCamp got started either that year or recently prior to that. I know CodeNewbie got started. I mean, I did two years before that. So around that time. So I’m curious, when you think about the landscape of learning today, when you think about all the resources that are available, the tools, the school, some are free, some have loan programs, some have scholarships, when you think about in-person, remote, self-paced, do you still feel that having a CS degree is your best bet? But I’m particularly interested in your opinion on this because I know that freeCodeCamp is working on their CS degree and working on becoming an accredited organization and institution. So I’m curious, do you feel that if you have all the time and money in the world that getting a CS degree is ultimately your best bet?\u003c/p\u003e\u003cp\u003e [00:16:31] BC: I really think it can depend on the situation really. It’s always helpful to have more credentials than less credentials. When you’re going to apply for a job and the hiring manager is looking at multiple resumes, yeah, if you have a degree, I think that’s often going to help you. So usually if that’s your primary purpose in life that you want to get a job as a software developer and you have lots of time, lots of resources. I think it is helpful to get a CS degree, but I also think that there’s a lot of opportunities to learn at your own pace. And there’s also a lot of opportunities to show that you know what you’re talking about in your resume, in your interview. The hiring manager just wants to make sure that they hire someone that’s capable to do the job. And they only have a few signals to look at during the hiring process to kind of learn that you’re capable. So having a degree is like a really strong signal, but there are a lot of other strong signals as well. So I think that if you don’t have the money or you don’t have the time, learning self-paced is a really viable option. And I know for a lot of people working full time, it’s going to be hard to also get a degree. If I had to do that same degree right now that I did then, I would not have been able to do it as fast. I was at like a certain time in my life, a certain time in my family, everything kind of worked together to kind of give me more time where my life now, where my kids actually require a lot more, I have more kids now, and they require even more assistance than at this one other time of my life where it would have been much harder now to do a degree. So I think if people are at a point in their life where it’s just not going to work out to go back to school full time or they don’t have the money, I think there’s a lot of good options. But if you’re going to learn through freeCodeCamp or through a bootcamp or through some other way, it’s very important to do things to help you stand out when you go to get a job. So you don’t want to just say, “Oh, yeah, I learned on my own how to do this,” you have to be able to point to specific things that you’ve done that will show that you know what you’re talking about.\u003c/p\u003e\u003cp\u003e [00:18:38] SY: Absolutely. So going back to your story of getting that CS degree, I’m curious, did having that background in TV production and having that background as a teacher, did any of those help you with that degree program, especially as a software engineer? I feel like we’re always talking about those transferable skills, how your past career can be a huge asset and how we need to present it as a strength and an interview process. Did you feel like your past careers in the past degrees that you had, did it help you in your career in technology?\u003c/p\u003e\u003cp\u003e [00:19:12] BC: Definitely. So in my final six months of teaching, I was talking about how I was trying to figure out what can I do to make me stand out? And so one thing I did was just combine all my previous interest with video production, teaching, software development. And I started my own personal YouTube channel to teach JavaScript. And so the fact that I had this background teaching and video production made it easier to start this YouTube channel. And so I just started creating these short JavaScript tutorials about one concept, like for loops or if statements or closures. And one thing that was kind of cool about it is that’s really how I learned JavaScript, where I knew I wanted to create a video on every topic in JavaScript. And I did kind of know JavaScript. But when I knew I was going to try to teach this concept to people, It really helped me to really actually learn the concepts. And there were some parts of JavaScript that I didn’t really know about until I was going to create a video about it because I knew, in general, the topics I need to teach, but I didn’t really know how to implement all these different things. So I would actually have to learn about the topic so then I could teach the topic. So basically, I became an expert through the process of teaching others JavaScript. And I highly recommend that to other people. You don’t necessarily need to make videos, but you could possibly write blog posts, or like create an eBook, or maybe even find a way to teach in-person or something. If you can find a way to teach others, it can really help you understand a concept yourself. And then also, I kind of thought about it as like an authority piece that these videos show that I was an authority in this area. It showed that I knew what I was talking about. And that really helped me when I went to get a job. I could show, “Look, I’ve created this JavaScript course.” And I think in some ways that also possibly helped just as much as the degree where I could say, “Look, I’ve created this JavaScript course. Look at all these people that have learned JavaScript from me.” And that really helped me when I went to get a job. And that’s something that anybody can do. You don’t need a degree to create a course on JavaScript or any other programming language. And also, it almost doesn’t matter how many people watch the course? I mean, it is helpful to get more people watching or maybe reading your articles. But when you go to apply for a job, you can link them to your video, link them to your blog posts, and just the fact that you’ve created this is going to be a good sign to a future employer that you know what you’re talking about, that they should hire you. So yeah, it’s nice to be able to like grow a YouTube channel or grow a following on social media or your blog, but those things can have a benefit, even if you don’t have a big following because it can still help you get a job.\u003c/p\u003e\u003cp\u003e [00:22:13] SY: Absolutely. I completely agree. I think that the moment you set a goal for yourself that I need to create content to teach this concept to other people, all of a sudden you really have to know what you’re talking about. I’m experiencing the same thing. I recently launched a newsletter called “Not A Designer”, and it’s my way of learning design principles and learning best practices as a developer, as someone who’s always loved design but never really learned it officially. And I picked just a handful of topics, how to style lists, how to pick a typeface, how to design tags. And it is fascinating how the simple goal of I need to write a newsletter on Tuesday about line height has forced me to research way more about line height than I ever would. It really forces you to dig deep and really know what you’re talking about and make sure that you’re giving people good information. So I think that is such a great piece of advice. If you are interested in learning, I think that if you say to yourself, “I’m going to learn so well that I can create content, that I’m going to prioritize publishing a video, a blog post, a newsletter,” newsletters are so hot these days, “A newsletter on what I’m learning,” I feel like there is a huge opportunity where you can really dig deep and learn something really well and the thrill of having someone else read your content or watch your video and say, “Oh, that was really a good explanation,” is totally worth the work and the effort that goes into it as well.\u003c/p\u003e\u003cp\u003e [00:23:46] BC: Yeah, I would say that really the most important things have helped me with in my career is just putting out content. That’s definitely led to so many breakthroughs and positive things and positive interactions and it’s been super helpful. And like I said, anybody can do it. You don’t need a degree to be putting out content. And one of my main parts of my job is running the freeCodeCamp YouTube channel and curating courses from a lot of different contributors, or some I make myself, but most of them we publish from other contributors. And it’s actually a good place to share your content. If you’ve been creating courses on your own channel for a while and you want to reach a wider audience, people can consider submitting a course to the freeCodeCamp channel. And if it meets our standards, we could maybe publish it on our channel to get a wider audience and then people could possibly find out more about your channel.\u003c/p\u003e\u003cp\u003e [00:24:39] SY: Yeah.\u003c/p\u003e\u003cp\u003e [00:24:40] BC: And it can just grow your reputation and grow your audience. So we try to help people with freeCodeCamp.\u003c/p\u003e\u003cp\u003e [00:24:45] SY: Yeah. Yeah. That’s such a great use of a big audience. I love that. I love that a lot. So one of the things that I’m very curious about is this degree in six months, which feels like no time at all. How did you juggle that? How did you kind of break up your day? And how did you squeeze in time to learn while still working as a teacher during that time as well? You hadn’t quit your job yet. Yeah. How did you manage the juggle of the full-time job, taking care of the family, and then also learning this new thing and getting this whole degree?\u003c/p\u003e\u003cp\u003e [00:25:13] BC: Yeah. So I kind of talked about some of the strategies I use. And like I said, if I had to do it now, I would not be able to. So I just happened to be at a really good time in my life. But as a teacher, the amount of hours I put in in a day was less than some other jobs where like some people could be working like 50, 60 hours a week. So I was probably working maybe 35 hours a week. So that definitely helped. And then also I was very motivated at the time, like more motivated than I’ve been since before that or since then I got into like the zone and I had my schedule extremely scheduled out. I made a week schedule and I scheduled all my hours of what I’m going to do what, when am I going to hang out with the family, this is when date night is, this is when I’m going to see some friends, but then these are the times I’m going to be studying and working on this degree. And then I also would study during my lunch break. If I had a test coming up, I would study during my lunch break. And then sometimes I would actually take days off of work if I knew I had this big test coming up or a deadline, and a lot of these deadlines were self set for me because I could kind of work at my own pace, but I created all these deadlines for myself of when I was going to have each class done, and I occasionally would take a day off at work so I could really work on a project or prepare. And also, I had a very supportive wife. So that’s definitely a key thing if you have a family.\u003c/p\u003e\u003cp\u003e [00:26:40] SY: A hundred percent. Got to have the support of the partner. A hundred percent. Yeah. Makes life a lot easier. So if you are a person today taking into consideration all the things that have been happening with recent tech layoffs and the tech environment, feeling just a little, I don’t want to say troubled, but there’s definitely a lot of anxiety in the air. I’ll say that. And you’re trying to enter tech for the first time and you’re trying to figure out, “Do I go back to school? Do I do freeCodeCamp? Do I do another free resource? Do I do a bootcamp?” What are some considerations that you might make in today’s climate, in today’s environment, to help you break into tech efficiently and quickly?\u003c/p\u003e\u003cp\u003e [00:27:21] BC: Well, I think there’s really a lot of ways to go about it. But if I were going to kind of start right now, I would do kind of a combinations of a few things I did in the past, which maybe I wouldn’t do a degree, but I would definitely do self-paced curriculum. I think freeCodeCamp is a good option where there’s different parts of freeCodeCamp. Not everyone knows about every part. We have the YouTube channel, but we also have an interactive text-based curriculum on freeCodeCamp.org. Maybe I’m biased because I work for freeCodeCamp, but I think it’s a really good curriculum to learn how to be a full stack web developer if you just go through that curriculum. And I think that’s a good place to start, to learn. And then you want to create projects. You need to be able to have projects that you can show to future employers. And some of them can just be like toy projects and things that you create yourself. But it can be really helpful to have projects that you’ve made for other people. Before I got a job as a software developer, I made a few like kind of like real world projects where there is this church that I knew about that needed this web app. So it was like a Craigslist-type web app for like an internal web app for the church to use. I created that for them. And then also there’s this regional newspaper that wanted a mobile app. And I was able to use like an ionic template to create this mobile app. And these were both like real world projects that I was able to create that I can put on my resume. And I definitely recommend anybody that is trying to get a job to try to think if you’d know anybody that you could create an app or a website for that would be for an actual business or an organization that would kind of give you some amount of real world experience without actually working for anybody. So that would definitely be a suggestion I have. And then one thing that also I think helped me. So different areas of the country is different for what you need to learn and the tech industry isn’t the same everywhere. I mean, I think we hear so much about Silicon Valley and what’s going on over there, but software developers are needed everywhere.\u003c/p\u003e\u003cp\u003e [00:29:28] SY: Absolutely.\u003c/p\u003e\u003cp\u003e [00:29:28] BC: And often the technologies that are being used can vary by different regions. So I knew I wasn’t going to be in the city I was in. There was a specific city I wanted to move to, to be closer to family. And so I cold emailed a lot of developers in that city and just told them that I was going to be looking for a job as a software developer soon and I wanted to learn more about the software industry in that city. And I just offered to buy him coffee. And quite a few people took me up on that. And I was able to meet with a lot of local developers that worked at different companies that I thought were interesting in the area. And that helped me kind of learn more about the industry and start to kind of develop a personal network in the area. And a few of those meetings led to interviews. That’s something I would recommend to anybody. It’s just inviting people to buy them some coffee or just trying to network and meet with people specifically in the city where you want to get a job.\u003c/p\u003e\u003cp\u003e [00:30:27] SY: I think that’s such a great idea, especially in this world where everyone is competing for remote. If you do have a local angle, if you can get to know your neighborhood, your community and look up some businesses that are not necessarily tech businesses, that aren’t necessarily FAANG companies, but as you said, everyone needs technology. Every company needs a developer at some level to some degree. So going local, going smaller might be a better strategy for a lot of folks. Yeah, I think that’s really great.\u003c/p\u003e\u003cp\u003e [00:30:55] BC: Yeah. If you’re a brand new, you’re going to have a lot more success trying to find a local in-person job. And I think it can be harder to get a remote job, especially when you’re first starting out.\u003c/p\u003e\u003cp\u003e [00:31:06] SY: Yeah, way more competition on those remote jobs and those local jobs, for sure. No one wants to go in office. If you’re one of the few people who’s willing to go in office, take advantage of that. For sure. Coming up next, Beau shares more about freeCodeCamp and how you can best utilize their help after this.\u003c/p\u003e\u003cp\u003e [MUSIC BREAK]\u003c/p\u003e\u003cp\u003e [00:31:37] SY: So tell me a little bit more about freeCodeCamp? We touched on it a few times. We’ve kind of hinted at what it does, but I don’t think we’ve explicitly said what freeCodeCamp is. Can you talk a little bit about the structure of the organization? I know you guys do a ton of different content and many different formats and languages. Maybe give us an overview of all the amazing stuff that you all do for the community for free, by the way.\u003c/p\u003e\u003cp\u003e [00:32:00] BC: Yeah, sure. Yeah. So freeCodeCamp, our mission is to provide free learning resources for people learning software development. And we want to make it so anybody can learn to code anywhere in the world for free. And we have a few different ways that we provide this content. So a few that I’ve mentioned was our interactive text-based curriculum where you do kind of like coding in your browser to solve these challenges. And that’s where I would recommend a lot of people start because it’s a step-by-step curriculum to learn everything you need to know to be a full stack web developer. And we also have certifications. So this is all on freeCodeCamp.org. And we also have some certifications about machine learning and Python and a lot of other things that I would highly recommend people check out. And then we have our YouTube channel. So we have the largest software tech channel on YouTube. And we post courses from all sorts of topics related to software development and programming and even some more tangential topics like Algebra or statistics. We just want to teach everything you need to know to get a job as a software developer. And these courses are full length courses. They’re often two hours. Sometimes we’ll post like a 25-hour course on the channel. So anything that you want to learn about related to software development, you can probably learn on the YouTube channel. And then something that people don’t know is that our biggest channels are English YouTube channel, but we also have YouTube channels in a few other languages. So one of our second biggest channel is our Spanish YouTube channel. And then we also have a Chinese channel, Portuguese, Japanese, Hindi, and then a few other ones. So if you speak other languages, you can check out some of these other channels as well. And then we have also freeCodeCamp News, which is where we publish technical articles on all sorts of topics. And we’ve been focusing more and more on posting comprehensive books on all sorts of topics like Python, JavaScript, prompt engineering, and you can basically go to our book. And it’s basically just like a humongous blog post that’s a book linked content to learn a certain programming language or technical concept. And I mentioned the different languages on YouTube, but we also have freeCodeCamp News in a lot of the top world languages and then we also have our interactive curriculum translated into a bunch of different languages. So like I said, our goal is to teach people all over the world and we’re eventually going to have all this content translated into as many languages as possible. And then I guess the final, there’s a lot of like smaller things that freeCodeCamp does, but one of the other big components I didn’t mention yet is the forum. So we have a very active forum where you can get help on any programming concept. If you’re going through the freeCodeCamp curriculum or reading an article or going through a video, you get stuck on something, you can go and ask a question in the forum. And we try to make it as friendly as possible, as inclusive as possible, as kind to beginners as possible. I know there are some forums that kind of have gotten, I guess, the reputation for not being very beginner friendly, not very friendly to newbies. But our forum, we try to make it as beginner friendly as possible to help people that are learning to code and be able to answer questions directly.\u003c/p\u003e\u003cp\u003e [00:35:35] SY: I feel like you all have learned so much over the years, and you’ve been at freeCodeCamp for a good chunk of time, I believe, about the way people learn things that work, things that don’t work. I’m curious if you can share maybe a couple best practices for people who are attempting to learn on their own. What have you seen that people have done in your community that have really helped them level up quickly, and what are some things that maybe have slowed them down that people should try to avoid?\u003c/p\u003e\u003cp\u003e [00:36:04] BC: Yeah, there’s a different mediums. It could be different, but there’s some general things that would apply to all mediums, which I think one thing is to take things in small chunks. Even though we often post these like humongous courses and these humongous articles, you want to take things a little bit at a time. We’ve been able to implement that the most on the curriculum where it’s broken up into lots of very like bite-sized chunks where you just learn a little bit at a time and then you kind of check what you learn, then you learn a little bit more than check what you learn. And a key thing, no matter how you’re learning is to actually put into practice. It’s not going to help just to passively watch a video about Python. You need to have your code editor up. You need to be following along and trying out things on your own. So that’s very important. And then another very important thing is to have a community. You can technically learn on your own with nobody around, but if you have a community and people to support you, that’s going to often lead you to be a lot more successful. So we do have a freeCodeCamp chat, but then our forum is even bigger. So you can kind of meet people on the forum. But then also on Twitter, a lot of people share hashtags. I know when I was first getting started, I did the #100DaysofCode, which is very popular, I think for people learning to code, where you learn something for 100 days and you post on Twitter every day what you worked on, and then people can kind of support each other. And I think that’s really important to kind of become part of a community, find other people that are learning to code so you can support each other and help each other and encourage each other.\u003c/p\u003e\u003cp\u003e [00:37:47] SY: Absolutely. Now at the end of every episode, we ask our guests to fill in the blanks of some very important questions. Are you ready to fill in the blanks?\u003c/p\u003e\u003cp\u003e [00:38:02] BC: Yes.\u003c/p\u003e\u003cp\u003e [00:38:03] SY: Number one, worst advice I’ve ever received is?\u003c/p\u003e\u003cp\u003e [00:38:06] BC: I remember when I was doing this degree that I finished really quickly, I had like a school counselor, someone working for the school that told me that I wasn’t going to be able to do it. I said, “Change my goals so they weren’t so ambitious.” [00:38:19] SY: Oh, wow!\u003c/p\u003e\u003cp\u003e [00:38:19] BC: And I’ve had similar things and a few other things in my life where people are telling me, “Don’t do that goal. Your goal isn’t good.” And then I realized, actually, I’m going to make my own goal. In some ways, it motivated me. I kind of wanted to prove them wrong. So I guess the worst advice is just like the haters that are telling you you can’t do it, when actually you can do it.\u003c/p\u003e\u003cp\u003e [00:38:42] SY: Absolutely. I’m glad you didn’t listen for sure. Number two, best advice I’ve ever received is?\u003c/p\u003e\u003cp\u003e [00:38:47] BC: I think one of the most helpful piece of advice, I read this book called Linchpin by Seth Godin and that’s what inspired me to start creating my own YouTube channel. He talks about the importance of just putting free content out into the world and that made a humongous difference on my career is just putting free content into the world. So I think that was the best advice [00:39:12] SY: Very cool. Number three. My first coding project was about?\u003c/p\u003e\u003cp\u003e [00:39:18] BC: I started doing this QBasic when I was much younger and it was probably like a text-based adventure game or something like that.\u003c/p\u003e\u003cp\u003e [00:39:27] SY: Very cool. Number four, one thing I wish I knew when I first started to code is?\u003c/p\u003e\u003cp\u003e [00:39:33] BC: Maybe that most developers don’t have a ton of stuff memorized. They’re constantly looking up how to do things, even like basic things. An experienced developer still could be looking up like basic things all the time to remember how to do those things.\u003c/p\u003e\u003cp\u003e [00:39:48] SY: That’s such a great reminder to all of us is most of us are constantly looking things up. And now that we have ChatGPT, we have another place where we can look things up. So definitely don’t feel bad for doing that for sure. Well, thank you again so much for joining us, Beau.\u003c/p\u003e\u003cp\u003e [00:40:01] BC: Well, thanks for having me. I actually listened to CodeNewbie when I was first learning about software development and CodeNewbie was a big inspiration for me.\u003c/p\u003e\u003cp\u003e [00:40:08] SY: Oh, so cool!\u003c/p\u003e\u003cp\u003e [00:40:09] BC: So it’s really cool to actually get to be on the podcast.\u003c/p\u003e\u003cp\u003e [00:40:12] SY: Yeah. Now you get to inspire other people. So this is wonderful. This is great. And thank you for all your work with freeCodeCamp and all the work that you’ve done to make breaking them into tech a little bit easier for folks. We really appreciate it.\u003c/p\u003e\u003cp\u003e [MUSIC BREAK]\u003c/p\u003e\u003cp\u003e [00:40:28] SY: Want to be in the CodeNewbie Podcast? Know someone who I should interview next? Reach out on Twitter at Code Newbies or send me an email, hello@codenewbie.org. For more info on the podcast, check out www.codenewbie.org/podcast. And if you like the show, make sure to follow us and leave a review on your preferred platform so we can keep making the pod. Thanks for listening. See you next week.\u003c/p\u003e\u003cp\u003e [END]\u003c/p\u003e\n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "43 min read",
  "publishedTime": null,
  "modifiedTime": null
}
