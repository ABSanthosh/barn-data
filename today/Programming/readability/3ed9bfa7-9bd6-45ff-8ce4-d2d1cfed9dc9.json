{
  "id": "3ed9bfa7-9bd6-45ff-8ce4-d2d1cfed9dc9",
  "title": "CLion 2024.3 EAP 4: New Embedded Development and Debugging Features",
  "link": "https://blog.jetbrains.com/clion/2024/10/clion-2024-3-eap-4/",
  "description": "The new CLion 2024.3 EAP build, 243.19420.28, is out. You can download it for free from the link below, via the Toolbox App, or as a snap package if you’re using Ubuntu. DOWNLOAD CLION 2024.3 EAP This build includes new features for embedded development, such as debug servers, the ability to edit peripheral register values, […]",
  "author": "Oleg Zinovyev",
  "published": "Thu, 10 Oct 2024 15:17:36 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "eap",
    "news",
    "debugger",
    "embedded",
    "gdb",
    "gdbserver",
    "j-link",
    "segger",
    "zephyr-west"
  ],
  "byline": "Oleg Zinovyev",
  "length": 7373,
  "excerpt": "The new CLion 2024.3 EAP build, 243.19420.28, is out. You can download it for free from the link below, via the Toolbox App, or as a snap package if you’re using Ubuntu. DOWNLOAD CLION 2024.3 EAP",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "A Cross-Platform IDE for C and C++ Early Access Program NewsCLion 2024.3 EAP 4: New Embedded Development and Debugging Features The new CLion 2024.3 EAP build, 243.19420.28, is out. You can download it for free from the link below, via the Toolbox App, or as a snap package if you’re using Ubuntu. DOWNLOAD CLION 2024.3 EAP This build includes new features for embedded development, such as debug servers, the ability to edit peripheral register values, and support for debugging Zephyr West projects. Also, while debugging, you can now view string values that contain newline characters or JSON, XML, or HTML data with the relevant formatting. Debug servers Configuring debugging for embedded systems can be challenging, especially when working with different boards, probes, and run/debug configurations. We’ve decided to streamline this process by adding a new Debug Servers configuration option. It’s a separate section in Settings | Debugger where you can set up a debug server based on gdbserver. This new feature offers two great advantages: Using a pre-configured debug server, you can run any run/debug configuration or build system target, such as CMake, West, Makefile, etc. Previously, you had to set up a separate run/debug configuration for each build system. This also allows you to run long-living debug server sessions, meaning the server does not shut down when you stop debugging. Please note that this is an experimental feature. It’s intended to provide a simpler and more intuitive approach to debug configuration than the current version of CLion offers. We encourage you to try it and share your feedback. We would also be happy to arrange a quick call with you to learn more about your specific use cases and challenges. How to get started To use debug servers, first enable them in Settings | Advanced Settings | Debugger. Then, you’ll be able to find the Debug Servers dialog in Settings | Debugger or via Edit Debug Servers from the main toolbar switcher. In the Debug Servers dialog, you can select from two template types: Generic templates are more customizable and offer a wider range of options for any debug probe.  SEGGER J-Link templates are specifically designed for J-Link debug probes. They are more straightforward and less flexible than generic ones, providing only the necessary options. After you configure your debug server, it will be available in the Debug Servers switcher in the main toolbar. Additional features If you already have a gdbserver run configuration in CLion, the IDE will recognize it and allow you to import it into a generic template. You can also convert a SEGGER J-Link configuration into a generic one, which allows you to customize the debug server in more detail. Additionally, in the Debugger tab, we’ve added a new option for remote debugging, Persistent connection (target extended-remote), which maintains the connection to the debug server even after the session is closed. Using a persistent connection is useful when you want a debug server to be ready for the next session without having to wait for it to start back up. It’s often used in embedded development and is recommended by OpenOCD as the default mode. Editable peripheral register values When debugging board peripherals like GPIO pins or timers, you can immediately see the effects of your changes by editing peripheral registers. This allows you to test different configurations and device states without recompiling your source code or reloading your application or board. The ability to edit register values was one of the most requested features (CPP-16747), and we’ve added it in this EAP. You can now change register values during debugging sessions in the Peripherals pane of the Debug tool window. Formatted view for strings with JSON, XML, or HTML data C++ string variables can store JSON, XML, and HTML data for configuration management, parsing structured data, and other purposes. Debugging such strings, as well as those containing newline characters (\\n), is now more convenient, as you can view them directly in the debugger formatted according to their code style (CPP-40257). You no longer need to copy unformatted values into a third-party tool to examine them. To view a string’s values, click the View button, which is displayed next to it in the Threads \u0026 Variables pane. A separate dialog will appear where you can view the values as formatted or raw data. Debugging support for West We added support for Zephyr West in CLion 2024.2. In this EAP, we’ve extended the initial functionality, adding the ability to debug West projects. This makes it easy to configure and run debugging sessions directly in the IDE. When you import your Zephyr West project, a West run/debug configuration is automatically created in the Run/Debug Configurations switcher. You can also create a new run/debug configuration. Simply select Run | Edit Configurations… in the main menu, click +, and select a Zephyr West template: You can copy the command line arguments you used to run west debug and paste them into the Debug options field. Once configured, the new West run/debug configuration will be available in the Run/Debug Configurations switcher. You can launch a debug session using the green Debug button on the main toolbar or the shortcut – ⌃D (macOS) or Shift+F9 (Windows/Linux). Other new features in this EAP To learn more about other recent improvements in the 2024.3 EAP, check out these blog posts: The CLion 2024.3 Early Access Program Is Open covers enhanced cloud code completion, CLion Nova updates, and features for embedded development. CLion 2024.3 EAP 3 highlights the OpenCV image viewer and the ability to attach the debugger to unstarted processes. DOWNLOAD CLION 2024.3 EAP Call for feedback Your feedback is important to us, as your experiences and insights are essential to our mission of continuously improving CLion. Please share your ideas in the comments section below or submit them to our issue tracker. We would also be interested in setting up a quick call with you to learn more about your specific use cases. Let us know if you would like to participate! Your CLion teamJetBrainsThe Drive to Develop Subscribe to CLion Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/10/Social_Share_Blog_1280x720-2x-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/clion/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/CLion-1.svg\" alt=\"Clion logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eA Cross-Platform IDE for C and C++\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/clion/category/eap/\"\u003eEarly Access Program\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/clion/category/news/\"\u003eNews\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eCLion 2024.3 EAP 4: New Embedded Development and Debugging Features\u003c/h2\u003e                    \n                    \n\u003cp\u003eThe new CLion 2024.3 EAP build, 243.19420.28, is out. You can download it for free from the link below, via the \u003ca href=\"https://www.jetbrains.com/toolbox-app/\" target=\"_blank\" rel=\"noopener\"\u003eToolbox App\u003c/a\u003e, or as a snap package if you’re using Ubuntu.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/clion/nextversion/\" target=\"_blank\" rel=\"noopener\" data-test=\"blog-article-cta\"\u003e\u003ci\u003e\u003c/i\u003eDOWNLOAD CLION 2024.3 EAP\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThis build includes new features for embedded development, such as debug servers, the ability to edit peripheral register values, and support for debugging Zephyr West projects. Also, while debugging, you can now view string values that contain newline characters or JSON, XML, or HTML data with the relevant formatting.\u003c/p\u003e\n\n\n\n\u003ch2\u003eDebug servers\u003c/h2\u003e\n\n\n\n\u003cp\u003eConfiguring debugging for embedded systems can be challenging, especially when working with different boards, probes, and run/debug configurations. We’ve decided to streamline this process by adding a new \u003cem\u003eDebug Servers\u003c/em\u003e configuration option. It’s a separate section in \u003cem\u003eSettings\u003c/em\u003e | \u003cem\u003eDebugger\u003c/em\u003e where you can set up a debug server based on gdbserver. This new feature offers two great advantages:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eUsing a pre-configured debug server, you can run any run/debug configuration or build system target, such as CMake, West, Makefile, etc. Previously, you had to set up a separate run/debug configuration for each build system.\u003c/li\u003e\n\n\n\n\u003cli\u003eThis also allows you to run long-living debug server sessions, meaning the server does not shut down when you stop debugging.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cp\u003ePlease note that this is an experimental feature. It’s intended to provide a simpler and more intuitive approach to debug configuration than the current version of CLion offers. We encourage you to try it and share your feedback. We would also be happy to arrange a \u003ca href=\"https://survey.alchemer.com/s3/8011393/CLion-EAP-Feedback\" target=\"_blank\" rel=\"noopener\"\u003equick call with you\u003c/a\u003e to learn more about your specific use cases and challenges.\u003c/p\u003e\n\n\n\n\u003ch3\u003eHow to get started\u003c/h3\u003e\n\n\n\n\u003cp\u003eTo use debug servers, first enable them in \u003cem\u003eSettings\u003c/em\u003e | \u003cem\u003eAdvanced Settings\u003c/em\u003e | \u003cem\u003eDebugger\u003c/em\u003e. Then, you’ll be able to find the \u003cem\u003eDebug Servers\u003c/em\u003e dialog in \u003cem\u003eSettings\u003c/em\u003e | \u003cem\u003eDebugger\u003c/em\u003e or via \u003cem\u003eEdit Debug Servers\u003c/em\u003e from the main toolbar switcher.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1600\" height=\"1042\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/image-12.png\" alt=\"Configuring Debug Servers\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn the \u003cem\u003eDebug Servers\u003c/em\u003e dialog, you can select from two template types:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eGeneric templates are more customizable and offer a wider range of options for any debug probe. \u003c/li\u003e\n\n\n\n\u003cli\u003eSEGGER J-Link templates are specifically designed for \u003ca href=\"https://www.segger.com/products/debug-probes/j-link/\" target=\"_blank\" rel=\"noopener\"\u003eJ-Link debug probes\u003c/a\u003e. They are more straightforward and less flexible than generic ones, providing only the necessary options.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAfter you configure your debug server, it will be available in the \u003cem\u003eDebug Servers\u003c/em\u003e switcher in the main toolbar.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1044\" height=\"458\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/image-13.png\" alt=\"Debug Servers switcher\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eAdditional features\u003c/h3\u003e\n\n\n\n\u003cp\u003eIf you already have a gdbserver run configuration in CLion, the IDE will recognize it and allow you to import it into a generic template. You can also convert a SEGGER J-Link configuration into a generic one, which allows you to customize the debug server in more detail.\u003c/p\u003e\n\n\n\n\u003cp\u003eAdditionally, in the \u003cem\u003eDebugger\u003c/em\u003e tab, we’ve added a new option for remote debugging, \u003cem\u003ePersistent connection\u003c/em\u003e \u003cem\u003e(target\u003c/em\u003e \u003cem\u003eextended-remote)\u003c/em\u003e, which maintains the connection to the debug server even after the session is closed. Using a persistent connection is useful when you want a debug server to be ready for the next session without having to wait for it to start back up. It’s often used in embedded development and is recommended by OpenOCD as the default mode.\u003c/p\u003e\n\n\n\n\u003ch2\u003eEditable peripheral register values\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhen debugging board peripherals like GPIO pins or timers, you can immediately see the effects of your changes by editing peripheral registers. This allows you to test different configurations and device states without recompiling your source code or reloading your application or board.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe ability to edit register values was one of the most requested features (\u003ca href=\"https://youtrack.jetbrains.com/issue/CPP-16747\" target=\"_blank\" rel=\"noopener\"\u003eCPP-16747\u003c/a\u003e), and we’ve added it in this EAP. You can now change register values during debugging sessions in the \u003cem\u003ePeripherals\u003c/em\u003e pane of the \u003cem\u003eDebug\u003c/em\u003e tool window.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1823\" height=\"689\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/peripheral_cropped.png\" alt=\"Editable peripheral register values\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eFormatted view for strings with JSON, XML, or HTML data\u003c/h2\u003e\n\n\n\n\u003cp\u003eC++ string variables can store JSON, XML, and HTML data for configuration management, parsing structured data, and other purposes. Debugging such strings, as well as those containing newline characters (\u003ccode\u003e\\n\u003c/code\u003e), is now more convenient, as you can view them directly in the debugger formatted according to their code style (\u003ca href=\"https://youtrack.jetbrains.com/issue/CPP-40257\" target=\"_blank\" rel=\"noopener\"\u003eCPP-40257\u003c/a\u003e). You no longer need to copy unformatted values into a third-party tool to examine them.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2236\" height=\"1095\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/debug_char_view-cropped.png\" alt=\"Formatted view for string with JSON data\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTo view a string’s values, click the \u003cem\u003eView\u003c/em\u003e button, which is displayed next to it in the \u003cem\u003eThreads \u0026amp; Variables\u003c/em\u003e pane. A separate dialog will appear where you can view the values as formatted or raw data.\u003c/p\u003e\n\n\n\n\u003ch2\u003eDebugging support for West\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe added \u003ca href=\"https://blog.jetbrains.com/clion/2024/08/2024-2-available/#zephyr-west-support\"\u003esupport for Zephyr West\u003c/a\u003e in CLion 2024.2. In this EAP, we’ve extended the initial functionality, adding the ability to debug West projects. This makes it easy to configure and run debugging sessions directly in the IDE.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen you import your Zephyr West project, a West run/debug configuration is automatically created in the \u003cem\u003eRun/Debug Configurations\u003c/em\u003e switcher.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can also create a new run/debug configuration. Simply select \u003cem\u003eRun\u003c/em\u003e | \u003cem\u003eEdit Configurations…\u003c/em\u003e in the main menu, click \u003cem\u003e+\u003c/em\u003e, and select a \u003cem\u003eZephyr West\u003c/em\u003e template:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2150\" height=\"1079\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/west_debug_config.png\" alt=\"West debug configuration\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can copy the command line arguments you used to run west debug and paste them into the \u003cem\u003eDebug options \u003c/em\u003efield.\u003c/p\u003e\n\n\n\n\u003cp\u003eOnce configured, the new West run/debug configuration will be available in the \u003cem\u003eRun/Debug Configurations\u003c/em\u003e switcher. You can launch a debug session using the green \u003cem\u003eDebug\u003c/em\u003e button on the main toolbar or the shortcut – \u003cem\u003e⌃D\u003c/em\u003e (macOS) or \u003cem\u003eShift+F9\u003c/em\u003e (Windows/Linux).\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2786\" height=\"1368\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/10/west_debug_run.png\" alt=\"West debugging\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eOther new features in this EAP\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo learn more about other recent improvements in the 2024.3 EAP, check out these blog posts:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/clion/2024/09/2024-3-eap-open/\"\u003e\u003cem\u003eThe CLion 2024.3 Early Access Program Is Open\u003c/em\u003e\u003c/a\u003e covers enhanced cloud code completion, CLion Nova updates, and features for embedded development.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/clion/2024/10/2024-3-eap-3/\"\u003e\u003cem\u003eCLion 2024.3 EAP 3\u003c/em\u003e\u003c/a\u003e highlights the OpenCV image viewer and the ability to attach the debugger to unstarted processes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/clion/nextversion/\" target=\"_blank\" rel=\"noopener\" data-test=\"blog-article-cta\"\u003e\u003ci\u003e\u003c/i\u003eDOWNLOAD CLION 2024.3 EAP\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eCall for feedback\u003c/h2\u003e\n\n\n\n\u003cp\u003eYour feedback is important to us, as your experiences and insights are essential to our mission of continuously improving CLion. Please share your ideas in the comments section below or submit them to our \u003ca href=\"https://youtrack.jetbrains.com/issues/CPP\" target=\"_blank\" rel=\"noopener\"\u003eissue tracker\u003c/a\u003e. We would also be interested in setting up a quick call with you to learn more about your specific use cases. \u003ca href=\"https://survey.alchemer.com/s3/8011393/CLion-EAP-Feedback\" target=\"_blank\" rel=\"noopener\"\u003eLet us know\u003c/a\u003e if you would like to participate!\u003c/p\u003e\n\n\n\n\u003cp\u003eYour CLion team\u003cbr/\u003e\u003cem\u003eJetBrains\u003cbr/\u003eThe Drive to Develop\u003c/em\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to CLion Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
