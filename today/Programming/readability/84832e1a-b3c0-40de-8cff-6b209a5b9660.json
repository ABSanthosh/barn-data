{
  "id": "84832e1a-b3c0-40de-8cff-6b209a5b9660",
  "title": "jOOQ 3.19.0 Released with DuckDB, Trino, Oracle 23c support, join path improvements, an official gradle plugin, commercial maven repositories, policies, UDT paths, trigger meta data, hierarchies, and much more",
  "link": "https://blog.jooq.org/jooq-3-19-0-released-with-duckdb-trino-oracle-23c-support-join-path-improvements-an-official-gradle-plugin-commercial-maven-repositories-policies-udt-paths-trigger-meta-data-hierarchies-and/",
  "description": "New Dialects It’s been a few releases since we’ve added support for new dialects, but finally some very interesting RDBMS of increasing popularity have joined the jOOQ family including: These dialects are available in all jOOQ editions. New dialect versions In addition to these entirely new dialects, big new CockroachDB and Oracle versions have shipped: … Continue reading jOOQ 3.19.0 Released with DuckDB, Trino, Oracle 23c support, join path improvements, an official gradle plugin, commercial maven repositories, policies, UDT paths, trigger meta data, hierarchies, and much more →",
  "author": "lukaseder",
  "published": "Fri, 15 Dec 2023 16:30:41 +0000",
  "source": "https://blog.jooq.org/feed",
  "categories": [
    "jooq-development",
    "CockroachDB 23",
    "duckdb",
    "Gradle",
    "gradle plugin",
    "implicit joins",
    "Java 8",
    "Join paths",
    "jooq",
    "jOOQ 3.19",
    "maven repository",
    "Oracle 23c",
    "policies",
    "Release Notes",
    "row level security",
    "trigger meta data",
    "triggers",
    "TrinoDB",
    "UDT paths",
    "UDTs"
  ],
  "byline": "Published by lukaseder I made jOOQ View all posts by lukaseder",
  "length": 6497,
  "excerpt": "New Dialects It’s been a few releases since we’ve added support for new dialects, but finally some very interesting RDBMS of increasing popularity have joined the jOOQ family including:…",
  "siteName": "Java, SQL and jOOQ.",
  "favicon": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=180%2C180\u0026ssl=1",
  "text": "New Dialects It’s been a few releases since we’ve added support for new dialects, but finally some very interesting RDBMS of increasing popularity have joined the jOOQ family including: DuckDB (experimental support) Trino These dialects are available in all jOOQ editions. New dialect versions In addition to these entirely new dialects, big new CockroachDB and Oracle versions have shipped: CockroachDB 23 Oracle 23c We’ve added support for many new Oracle features, including: Domains UPDATE .. FROM IF [ NOT ] EXISTS Table value constructor SELECT without FROM As well as CockroachDB features, including: Triggers Stored functions UDTs Materialized views LATERAL New native DML clauses NULLS FIRST and NULLS LAST Join path improvements Implicit to-one path joins have been with jOOQ since version 3.11. Now, we’ve greatly improved this very useful feature by adding support for: Explicit path joins, allowing for more fine grained control of the path join type: https://www.jooq.org/doc/3.19/manual/sql-building/sql-statements/select-statement/explicit-path-join/ To-many path joins, including many-to-many paths for implicit and explicit joins going from parent to children: https://www.jooq.org/doc/3.19/manual/sql-building/sql-statements/select-statement/implicit-to-many-join/ Implicit path correlation, allowing to greatly simplify correlated subqueries, including the powerful MULTISET correlated subqueries: https://www.jooq.org/doc/3.19/manual/sql-building/sql-statements/select-statement/implicit-path-correlation/ Join elimination, allowing to skip unnecessary path segments of a join path This is best shown by example: // Before 3.19: ctx.select(ACTOR.FIRST_NAME, ACTOR.LAST_NAME) .from(ACTOR) .where(exists( selectOne() .from(FILM_ACTOR) .where(FILM_ACTOR.ACTOR_ID.eq(ACTOR.ACTOR_ID)) .and(FILM_ACTOR.film().TITLE.like(\"A%\")) )) .fetch(); // After 3.19: ctx.select(ACTOR.FIRST_NAME, ACTOR.LAST_NAME) .from(ACTOR) .where(exists( selectOne() .from(ACTOR.film()) .where(ACTOR.film().TITLE.like(\"A%\")) )) .fetch(); This feature is available in all jOOQ editions. Gradle plugin One of the longest awaited features is an official jooq-codegen-gradle plugin, that offers a tight integration with gradle’s task system while being released in the same release cadence as jOOQ itself. Our new gradle plugin supports all of the code generation features in both an idiomatic groovy or kotlin DSL More information here: https://www.jooq.org/doc/3.19/manual/code-generation/codegen-gradle/ This feature is available in all jOOQ editions. Commercial maven repository A feature that many of our paying customers have wanted for a long time has finally been implemented: our commercial maven repository at https://repo.jooq.org, where all historic and new commercial only jOOQ artifacts as well as snapshot versions will be hosted, in addition to our ZIP file download website: https://www.jooq.org/download/versions This feature is available only in commercial jOOQ editions. Policies Similar to PostgreSQL’s powerful POLICY feature, or Oracle’s Virtual Private Database, jOOQ 3.19 allows for declaring policies that act as automatic filters on some of your tables, to allow for a simple and thorough row level security implementation. For example, with a policy on the multi tenancy capable CUSTOMER table, a query like this: ctx.select(CUSTOMER.ID, CUSTOMER.NAME) .from(CUSTOMER) .fetch(); Might in fact run a SQL statement like this, instead: SELECT CUSTOMER.ID, CUSTOMER.NAME FROM CUSTOMER WHERE CUSTOMER.TENANT_ID = 42 Not just queries, but all DML statements are rewritten to disallow any inaccessible data from being written / read. More information here: https://www.jooq.org/doc/3.19/manual/sql-building/queryparts/policies/ This feature is available only in commercial jOOQ editions. UDT paths In addition to adding User Defined Type (UDT) support to CockroachDB and Informix, we’ve improved our code generator support for UDTs in a way for attribute paths to be made accessible to client code in a type safe way. So, with types like these: CREATE TYPE country AS ( iso_code TEXT ); CREATE TYPE name AS ( first_name TEXT, last_name TEXT ); CREATE TYPE address AS ( street TEXT, ..., country COUNTRY ); CREATE TABLE customer ( id INT PRIMARY KEY, name NAME, address ADDRESS ); You can now destructure the UDTs directly in your SQL query like this: ctx.select( CUSTOMER.NAME.FIRST_NAME, CUSTOMER.NAME.LAST_NAME, CUSTOMER.ADDRESS.COUNTRY.ISO_CODE) .from(CUSTOMER) .fetchOne(); More information here: https://www.jooq.org/doc/3.19/manual/sql-building/column-expressions/user-defined-type-attribute-paths/ This feature is available in all jOOQ editions. Trigger meta data The code generator can now reverse engineer trigger meta data from most RDBMS that support triggers. This meta data can be helpful at runtime, e.g. to render improved RETURNING support in the absence of triggers, in dialects where triggers require special emulations (e.g. SQLite or SQL Server). This feature is available only in commercial jOOQ editions. Hierarchies A new Collector has been added to recursively collect a flat representation of hierarchical data into an object hierarchy. This plays very well with our MULTISET nested collection support. For more details, see this blog post: https://blog.jooq.org/how-to-turn-a-list-of-flat-elements-into-a-hierarchy-in-java-sql-or-jooq/ This feature is available in all jOOQ editions. Java 8 support removed from jOOQ Express and Professional Editions Like other leading platforms, we’re moving on to help with the adoption of newer JDK versions. Our Java 8 support will be discontinued for the jOOQ Express Edition and jOOQ Professional Edition. If you require Java 8 support, you can upgrade to the jOOQ Enterprise Edition, which will continue supporting Java 8 for another few minor releases, or stay on jOOQ 3.18, which will also receive bug fixes for another while. This change affects only commercial jOOQ editions. For a complete list other, minor improvements, see the below change notes. More improvements For information about the many other minor improvements, bug fixes, etc., please refer to the release notes.",
  "image": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=750%2C750\u0026ssl=1",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"post-12403\"\u003e\n\t\n\t\n\t\u003cdiv\u003e\n\t\t\n\u003ch2\u003eNew Dialects\u003c/h2\u003e\n\n\n\n\u003cp\u003eIt’s been a few releases since we’ve added support for new dialects, but finally some very interesting RDBMS of increasing popularity have joined the jOOQ family including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eDuckDB (experimental support)\u003c/li\u003e\n\n\n\n\u003cli\u003eTrino\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThese dialects are available in all jOOQ editions.\u003c/p\u003e\n\n\n\n\u003ch2\u003eNew dialect versions\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn addition to these entirely new dialects, big new CockroachDB and Oracle versions have shipped:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eCockroachDB 23\u003c/li\u003e\n\n\n\n\u003cli\u003eOracle 23c\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe’ve added support for many new Oracle features, including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eDomains\u003c/li\u003e\n\n\n\n\u003cli\u003eUPDATE .. FROM\u003c/li\u003e\n\n\n\n\u003cli\u003eIF [ NOT ] EXISTS\u003c/li\u003e\n\n\n\n\u003cli\u003eTable value constructor\u003c/li\u003e\n\n\n\n\u003cli\u003eSELECT without FROM\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAs well as CockroachDB features, including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eTriggers\u003c/li\u003e\n\n\n\n\u003cli\u003eStored functions\u003c/li\u003e\n\n\n\n\u003cli\u003eUDTs\u003c/li\u003e\n\n\n\n\u003cli\u003eMaterialized views\u003c/li\u003e\n\n\n\n\u003cli\u003eLATERAL\u003c/li\u003e\n\n\n\n\u003cli\u003eNew native DML clauses\u003c/li\u003e\n\n\n\n\u003cli\u003eNULLS FIRST and NULLS LAST\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eJoin path improvements\u003c/h2\u003e\n\n\n\n\u003cp\u003eImplicit to-one path joins have been with jOOQ since version 3.11. Now, we’ve greatly improved this very useful feature by adding support for:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eExplicit path joins, allowing for more fine grained control of the path join type: \u003ca href=\"https://www.jooq.org/doc/3.19/manual/sql-building/sql-statements/select-statement/explicit-path-join/\"\u003ehttps://www.jooq.org/doc/3.19/manual/sql-building/sql-statements/select-statement/explicit-path-join/\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eTo-many path joins, including many-to-many paths for implicit and explicit joins going from parent to children: \u003ca href=\"https://www.jooq.org/doc/3.19/manual/sql-building/sql-statements/select-statement/implicit-to-many-join/\"\u003ehttps://www.jooq.org/doc/3.19/manual/sql-building/sql-statements/select-statement/implicit-to-many-join/\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eImplicit path correlation, allowing to greatly simplify correlated subqueries, including the powerful MULTISET correlated subqueries: \u003ca href=\"https://www.jooq.org/doc/3.19/manual/sql-building/sql-statements/select-statement/implicit-path-correlation/\"\u003ehttps://www.jooq.org/doc/3.19/manual/sql-building/sql-statements/select-statement/implicit-path-correlation/\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eJoin elimination, allowing to skip unnecessary path segments of a join path\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis is best shown by example:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003e// Before 3.19:\nctx.select(ACTOR.FIRST_NAME, ACTOR.LAST_NAME)\n   .from(ACTOR)\n   .where(exists(\n       selectOne()\n       .from(FILM_ACTOR)\n       .where(FILM_ACTOR.ACTOR_ID.eq(ACTOR.ACTOR_ID))\n       .and(FILM_ACTOR.film().TITLE.like(\u0026#34;A%\u0026#34;))\n   ))\n   .fetch();\n\n// After 3.19:\nctx.select(ACTOR.FIRST_NAME, ACTOR.LAST_NAME)\n   .from(ACTOR)\n   .where(exists(\n       selectOne()\n       .from(ACTOR.film())\n       .where(ACTOR.film().TITLE.like(\u0026#34;A%\u0026#34;))\n   ))\n   .fetch();\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eThis feature is available in all jOOQ editions.\u003c/p\u003e\n\n\n\n\u003ch2\u003eGradle plugin\u003c/h2\u003e\n\n\n\n\u003cp\u003eOne of the longest awaited features is an official jooq-codegen-gradle plugin, that offers a tight integration with gradle’s task system while being released in the same release cadence as jOOQ itself.\u003c/p\u003e\n\n\n\n\u003cp\u003eOur new gradle plugin supports all of the code generation features in both an idiomatic groovy or kotlin DSL\u003c/p\u003e\n\n\n\n\u003cp\u003eMore information here: \u003ca href=\"https://www.jooq.org/doc/3.19/manual/code-generation/codegen-gradle/\"\u003ehttps://www.jooq.org/doc/3.19/manual/code-generation/codegen-gradle/\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThis feature is available in all jOOQ editions.\u003c/p\u003e\n\n\n\n\u003ch2\u003eCommercial maven repository\u003c/h2\u003e\n\n\n\n\u003cp\u003eA feature that many of our paying customers have wanted for a long time has finally been implemented: our commercial maven repository at \u003ca href=\"https://repo.jooq.org/\"\u003ehttps://repo.jooq.org\u003c/a\u003e, where all historic and new commercial only jOOQ artifacts as well as snapshot versions will be hosted, in addition to our ZIP file download website: \u003ca href=\"https://www.jooq.org/download/versions\"\u003ehttps://www.jooq.org/download/versions\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThis feature is available only in commercial jOOQ editions.\u003c/p\u003e\n\n\n\n\u003ch2\u003ePolicies\u003c/h2\u003e\n\n\n\n\u003cp\u003eSimilar to PostgreSQL’s powerful POLICY feature, or Oracle’s Virtual Private Database, jOOQ 3.19 allows for declaring policies that act as automatic filters on some of your tables, to allow for a simple and thorough row level security implementation.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, with a policy on the multi tenancy capable CUSTOMER table, a query like this:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003ectx.select(CUSTOMER.ID, CUSTOMER.NAME)\n   .from(CUSTOMER)\n   .fetch();\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eMight in fact run a SQL statement like this, instead:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eSELECT CUSTOMER.ID, CUSTOMER.NAME\nFROM CUSTOMER\nWHERE CUSTOMER.TENANT_ID = 42\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eNot just queries, but all DML statements are rewritten to disallow any inaccessible data from being written / read.\u003c/p\u003e\n\n\n\n\u003cp\u003eMore information here: \u003ca href=\"https://www.jooq.org/doc/3.19/manual/sql-building/queryparts/policies/\"\u003ehttps://www.jooq.org/doc/3.19/manual/sql-building/queryparts/policies/\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThis feature is available only in commercial jOOQ editions.\u003c/p\u003e\n\n\n\n\u003ch2\u003eUDT paths\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn addition to adding User Defined Type (UDT) support to CockroachDB and Informix, we’ve improved our code generator support for UDTs in a way for attribute paths to be made accessible to client code in a type safe way.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, with types like these:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eCREATE TYPE country AS (\n  iso_code TEXT\n);\n\nCREATE TYPE name AS (\n  first_name TEXT,\n  last_name TEXT\n);\n\nCREATE TYPE address AS (\n  street TEXT,\n  ...,\n  country COUNTRY\n);\n\nCREATE TABLE customer (\n  id INT PRIMARY KEY,\n  name NAME,\n  address ADDRESS\n);\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eYou can now destructure the UDTs directly in your SQL query like this:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003ectx.select(\n        CUSTOMER.NAME.FIRST_NAME,\n        CUSTOMER.NAME.LAST_NAME,\n        CUSTOMER.ADDRESS.COUNTRY.ISO_CODE)\n   .from(CUSTOMER)\n   .fetchOne();\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eMore information here: \u003ca href=\"https://www.jooq.org/doc/3.19/manual/sql-building/column-expressions/user-defined-type-attribute-paths/\"\u003ehttps://www.jooq.org/doc/3.19/manual/sql-building/column-expressions/user-defined-type-attribute-paths/\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThis feature is available in all jOOQ editions.\u003c/p\u003e\n\n\n\n\u003ch2\u003eTrigger meta data\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe code generator can now reverse engineer trigger meta data from most RDBMS that support triggers. This meta data can be helpful at runtime, e.g. to render improved RETURNING support in the absence of triggers, in dialects where triggers require special emulations (e.g. SQLite or SQL Server).\u003c/p\u003e\n\n\n\n\u003cp\u003eThis feature is available only in commercial jOOQ editions.\u003c/p\u003e\n\n\n\n\u003ch2\u003eHierarchies\u003c/h2\u003e\n\n\n\n\u003cp\u003eA new Collector has been added to recursively collect a flat representation of hierarchical data into an object hierarchy. This plays very well with our MULTISET nested collection support.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor more details, see this blog post: \u003ca href=\"https://blog.jooq.org/how-to-turn-a-list-of-flat-elements-into-a-hierarchy-in-java-sql-or-jooq/\"\u003ehttps://blog.jooq.org/how-to-turn-a-list-of-flat-elements-into-a-hierarchy-in-java-sql-or-jooq/\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThis feature is available in all jOOQ editions.\u003c/p\u003e\n\n\n\n\u003ch2\u003eJava 8 support removed from jOOQ Express and Professional Editions\u003c/h2\u003e\n\n\n\n\u003cp\u003eLike other leading platforms, we’re moving on to help with the adoption of newer JDK versions. Our Java 8 support will be discontinued for the jOOQ Express Edition and jOOQ Professional Edition. If you require Java 8 support, you can upgrade to the jOOQ Enterprise Edition, which will continue supporting Java 8 for another few minor releases, or stay on jOOQ 3.18, which will also receive bug fixes for another while.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis change affects only commercial jOOQ editions.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor a complete list other, minor improvements, see the below change notes.\u003c/p\u003e\n\n\n\n\u003ch2\u003eMore improvements\u003c/h2\u003e\n\n\n\n\u003cp\u003eFor information about the many other minor improvements, bug fixes, etc., please refer to the \u003ca href=\"https://www.jooq.org/notes\" data-type=\"link\" data-id=\"https://www.jooq.org/notes\"\u003erelease notes\u003c/a\u003e.\u003c/p\u003e\n\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2023-12-15T16:30:41Z",
  "modifiedTime": "2023-12-15T16:30:41Z"
}
