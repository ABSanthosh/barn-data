{
  "id": "40a40179-1dc3-41b7-b3af-895601d189af",
  "title": "Carle Lerche Talking at Qcon SF About Rust: A Productive Language for Writing Database Applications",
  "link": "https://www.infoq.com/news/2024/11/rust-code-productive-databases/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Discover how Rust is evolving beyond its systems programming roots to become a viable option for high-level applications. Carl Lerche, AWS Principal Engineer, showcased its productivity and safety for database-backed systems. Embrace Rust’s potential with innovative tools like Toasty and join the movement to enhance its growing ecosystem for ambitious backend development. By Steef-Jan Wiggers",
  "author": "Steef-Jan Wiggers",
  "published": "Tue, 19 Nov 2024 17:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "ORM",
    "Performance",
    "Rust",
    "Database",
    "QCon San Francisco 2024",
    "Programming Languages",
    "Development",
    "news"
  ],
  "byline": "Steef-Jan Wiggers",
  "length": 3224,
  "excerpt": "Discover how Rust is evolving beyond its systems programming roots to become a viable option for high-level applications. Carl Lerche, AWS Principal Engineer, showcased its productivity and safety for",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20241119074149/apple-touch-icon.png",
  "text": "When considering Rust, thoughts of performance, safety, and concurrency often come to mind. But what about productivity? Traditionally seen as a systems programming language, Rust has made its mark in infrastructure and is used extensively by companies like Google, Amazon, and Microsoft. However, its adoption for higher-level applications, such as database-backed backend systems, has been slower. At QCon San Francisco 204, Carl Lerche, Principal Engineer at AWS and creator of the Tokio Rust library, challenged the perception that Rust is not suited for high-level productivity. By delving into Rust's ecosystem for database applications, Lerche showcased how Rust can rival dynamic languages in productivity while maintaining its hallmark performance and safety. The highlights of the talk were: Rust’s Promise: Beyond Performance A Systems Programming Legacy: Rust’s low-level runtime performance makes it comparable to C++ but with the added benefit of a modern, memory-safe design without a garbage collector. Expanding to High-Level Applications: Despite its strong infrastructure presence, Lerche argued Rust is equally capable of backend development, delivering high-quality, defect-free code. Challenges: Steeper learning curve compared to dynamic languages. Less mature ecosystem for web and database development. Advantages for Long-lived Code: While not ideal for rapid prototyping, Rust excels in building robust, maintainable systems. Database Development in Rust: A Growing Ecosystem Lerche introduced Toasty, a new Object-Relational Mapping (ORM) library designed to simplify Rust database interactions. Built for both SQL and NoSQL, Toasty emphasizes ease of use over pure performance. Traits and Lifetimes: Common hurdles for new Rust users. Simplified schema handling and code generation. Reduction of boilerplate code via procedural macros. Intuitive APIs tailored for both newcomers and experienced Rust developers. Challenges for Developers: Second-order trait Bounds: Addressing complexity by minimizing overuse. Generated Code Reading: Lerche stressed the importance of ensuring that generated code is understandable for maintainability. Tips for Maximizing Productivity in Rust Practical Code Simplification: Prefer enums over traits for easier-to-read code. Use procedural macros to streamline repetitive tasks. Error Handling in Rust: Leveraging Rust’s unique approach to errors minimizes runtime bugs through safe patterns. Optimizing for Database Relationships: Use indices for managing complex relationships effectively. Regarding the Future of Rust in Web and Application Development, Lerche envisioned Rust as a productive general-purpose language for backend systems. However, its adoption challenges are due to its complexity and younger ecosystem; tools like Toasty signal progress. He encouraged developers to experiment with Rust for backend systems and contribute feedback to improve its ecosystem further. About the Author Steef-Jan Wiggers",
  "image": "https://res.infoq.com/news/2024/11/rust-code-productive-databases/en/headerimage/generatedHeaderImage-1731979619951.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eWhen considering \u003ca href=\"https://www.rust-lang.org/\"\u003eRust\u003c/a\u003e, thoughts of performance, safety, and concurrency often come to mind. But what about productivity? Traditionally seen as a systems programming language, Rust has made its mark in infrastructure and is used extensively by companies like Google, Amazon, and Microsoft. However, its adoption for higher-level applications, such as database-backed backend systems, has been slower.\u003c/p\u003e\n\n\u003cp\u003eAt QCon San Francisco 204, \u003ca href=\"https://www.linkedin.com/in/carllerche\"\u003eCarl Lerche\u003c/a\u003e, Principal Engineer at AWS and creator of the \u003ca href=\"https://tokio.rs/\"\u003eTokio Rust library\u003c/a\u003e, challenged the perception that Rust is not suited for high-level productivity. By delving into Rust\u0026#39;s ecosystem for database applications, Lerche showcased how Rust can rival dynamic languages in productivity while maintaining its hallmark performance and safety.\u003c/p\u003e\n\n\u003cp\u003eThe highlights of the talk were:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eRust’s Promise: Beyond Performance\n\t\u003cul\u003e\n\t\t\u003cli\u003eA Systems Programming Legacy: Rust’s low-level runtime performance makes it comparable to C++ but with the added benefit of a modern, memory-safe design without a garbage collector.\u003c/li\u003e\n\t\t\u003cli\u003eExpanding to High-Level Applications: Despite its strong infrastructure presence, Lerche argued Rust is equally capable of backend development, delivering high-quality, defect-free code.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eChallenges:\n\t\u003cul\u003e\n\t\t\u003cli\u003eSteeper learning curve compared to dynamic languages.\u003c/li\u003e\n\t\t\u003cli\u003eLess mature ecosystem for web and database development.\u003c/li\u003e\n\t\t\u003cli\u003eAdvantages for Long-lived Code: While not ideal for rapid prototyping, Rust excels in building robust, maintainable systems.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eDatabase Development in Rust: A Growing Ecosystem\n\t\u003cul\u003e\n\t\t\u003cli\u003eLerche introduced \u003ca href=\"https://github.com/tokio-rs/toasty\"\u003eToasty\u003c/a\u003e, a new Object-Relational Mapping (ORM) library designed to simplify Rust database interactions. Built for both SQL and NoSQL, Toasty emphasizes ease of use over pure performance.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2024/11/rust-code-productive-databases/en/resources/1IMG_2412-1731979565867.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/11/rust-code-productive-databases/en/resources/1IMG_2412-1731979565867.jpg\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eTraits and Lifetimes: Common hurdles for new Rust users.\n\t\u003cul\u003e\n\t\t\u003cli\u003eSimplified schema handling and code generation.\u003c/li\u003e\n\t\t\u003cli\u003eReduction of boilerplate code via procedural macros.\u003c/li\u003e\n\t\t\u003cli\u003eIntuitive APIs tailored for both newcomers and experienced Rust developers.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eChallenges for Developers:\n\t\u003cul\u003e\n\t\t\u003cli\u003eSecond-order trait Bounds: Addressing complexity by minimizing overuse.\u003c/li\u003e\n\t\t\u003cli\u003eGenerated Code Reading: Lerche stressed the importance of ensuring that generated code is understandable for maintainability.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eTips for Maximizing Productivity in Rust\n\t\u003cul\u003e\n\t\t\u003cli\u003ePractical Code Simplification:\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003ePrefer enums over traits for easier-to-read code.\u003c/li\u003e\n\t\t\t\u003cli\u003eUse procedural macros to streamline repetitive tasks.\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003c/li\u003e\n\t\t\u003cli\u003eError Handling in Rust:\n\t\t\u003cul\u003e\n\t\t\t\u003cli\u003eLeveraging Rust’s unique approach to errors minimizes runtime bugs through safe patterns.\u003c/li\u003e\n\t\t\u003c/ul\u003e\n\t\t\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\t\u003cli\u003eOptimizing for Database Relationships:\n\t\u003cul\u003e\n\t\t\u003cli\u003eUse indices for managing complex relationships effectively.\u003c/li\u003e\n\t\u003c/ul\u003e\n\t\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRegarding the Future of Rust in Web and Application Development, Lerche envisioned Rust as a productive general-purpose language for backend systems. However, its adoption challenges are due to its complexity and younger ecosystem; tools like Toasty signal progress. He encouraged developers to experiment with Rust for backend systems and contribute feedback to improve its ecosystem further.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Steef~Jan-Wiggers\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSteef-Jan Wiggers\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-11-19T00:00:00Z",
  "modifiedTime": null
}
