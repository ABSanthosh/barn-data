{
  "id": "951e4198-7567-488f-9260-4058bf4f7dac",
  "title": "Simplify Regular Expressions with RegExpBuilderJS",
  "link": "https://stackabuse.com/simplify-regular-expressions-with-regexpbuilderjs/",
  "description": "Regular expressions are on of the most powerful tools in a developer's toolkit. But let's be honest, regex kind of sucks to write. Not only is it hard to write, but it's also hard to read and debug too. So how can we make it easier to use? In its",
  "author": "Scott Robinson",
  "published": "Thu, 06 Jun 2024 18:37:25 GMT",
  "source": "https://stackabuse.com/rss/",
  "categories": [
    "regex",
    "javascript",
    "node"
  ],
  "byline": "Scott Robinson",
  "length": 3446,
  "excerpt": "Regular expressions are on of the most powerful tools in a developer's toolkit. But let's be honest, regex kind of sucks to write. Not only is it hard to write,...",
  "siteName": "Stack Abuse",
  "favicon": "",
  "text": "Regular expressions are on of the most powerful tools in a developer's toolkit. But let's be honest, regex kind of sucks to write. Not only is it hard to write, but it's also hard to read and debug too. So how can we make it easier to use? In its traditional form, regex defines powerful string patterns in a very compact statement. One trade-off we can make is to use a more verbose syntax that is easier to read and write. This is the purpose of a package like regexpbuilderjs. The regexpbuilderjs package is actually a port of the popular PHP package, regexpbuilderphp. The regexpbuilderphp package itself is a port of an old JS package, regexpbuilder, which now seems to be gone. This new package is meant to continue the work of the original regexpbuilder package. All credit goes to Andrew Jones for creating the original JS version and Max Girkens for the PHP port. Installation To install the package, you can use npm: $ npm install regexpbuilderjs Usage Here's a simple example of how you can use the package: const RegExpBuilder = require('regexpbuilderjs'); const builder = new RegExpBuilder(); const regEx = builder .startOfLine() .exactly(1) .of('S') .getRegExp(); Now let's break this down a bit. The RegExpBuilder class is the main class that you'll be using to build your regular expressions. You can start by creating a new instance of this class and chain methods together to create your regex: startOfLine(): This method adds the ^ character to the regex, which matches the start of a line. exactly(1): This method adds the {1} quantifier to the regex, which matches exactly one occurrence of a given character or group. of('S'): This method adds the S character to the regex. getRegExp(): This method returns the final RegExp object that you can use to match strings. Check out our hands-on, practical guide to learning Git, with best-practices, industry-accepted standards, and included cheat sheet. Stop Googling Git commands and actually learn it!With this, you can match strings like \"Scott\", \"Soccer\", or \"S418401\". This is great and all, but this is probably a regex string you could come up with on your own and not struggle too much to read. So now let's see a more complex example: const builder = new RegExpBuilder(); const regExp = builder .startOfInput() .exactly(4).digits() .then('_') .exactly(2).digits() .then('_') .min(3).max(10).letters() .then('.') .anyOf(['png', 'jpg', 'gif']) .endOfInput() .getRegExp(); This regex is meant to match filenames, which may look like: 2020_10_hund.jpg 2030_11_katze.png 4000_99_maus.gif Some interesting parts of this regex is that we can specify type of strings (i.e. digits()), min and max occurrences of a character or group (i.e. min(3).max(10)), and a list of possible values (i.e. anyOf(['png', 'jpg', 'gif'])). For a full list of methods you can use to build your regex, you can check out the documentation. This is just a small taste of what you can do with regexpbuilderjs. The package is very powerful and can help you build complex regular expressions in a more readable and maintainable way. Conclusion Comments, questions, and suggestions are always welcome! If you have any feedback on how this could work better, feel free to reach out on X. In the meantime, you can check out the repo on GitHub and give it a star while you're at it.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eRegular expressions are on of the most powerful tools in a developer\u0026#39;s toolkit. But let\u0026#39;s be honest, regex kind of sucks to write. Not only is it hard to write, but it\u0026#39;s also hard to read and debug too. So how can we make it easier to use?\u003c/p\u003e\n\u003cp\u003eIn its traditional form, regex defines powerful string patterns in a very compact statement. One trade-off we can make is to use a more verbose syntax that is easier to read and write. This is the purpose of a package like \u003ccode\u003eregexpbuilderjs\u003c/code\u003e.\u003c/p\u003e\n\n            \u003cdiv\u003e\n            \u003cp\u003eThe \u003ccode\u003eregexpbuilderjs\u003c/code\u003e package is actually a port of the popular PHP package, \u003ca rel=\"nofollow noreferrer\" target=\"_blank\" href=\"https://github.com/gherkins/regexpbuilderphp/wiki#eitherfindregexpbuilder\"\u003eregexpbuilderphp\u003c/a\u003e. The \u003ccode\u003eregexpbuilderphp\u003c/code\u003e package itself is a port of an old JS package, \u003ccode\u003eregexpbuilder\u003c/code\u003e, which now seems to be gone. This new package is meant to continue the work of the original \u003ccode\u003eregexpbuilder\u003c/code\u003e package.\u003c/p\u003e\n\u003cp\u003eAll credit goes to \u003ca rel=\"nofollow noopener\" target=\"_blank\" href=\"https://github.com/thebinarysearchtree\"\u003eAndrew Jones\u003c/a\u003e for creating the original JS version and \u003ca rel=\"nofollow noopener\" target=\"_blank\" href=\"https://github.com/gherkins\"\u003eMax Girkens\u003c/a\u003e for the PHP port.\u003c/p\u003e\n\n                    \u003c/div\u003e\n            \u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eTo install the package, you can use npm:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003e npm install regexpbuilderjs\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cp\u003eHere\u0026#39;s a simple example of how you can use the package:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003econst\u003c/span\u003e RegExpBuilder = \u003cspan\u003erequire\u003c/span\u003e(\u003cspan\u003e\u0026#39;regexpbuilderjs\u0026#39;\u003c/span\u003e);\n\n\u003cspan\u003econst\u003c/span\u003e builder = \u003cspan\u003enew\u003c/span\u003e RegExpBuilder();\n\u003cspan\u003econst\u003c/span\u003e regEx = builder\n    .startOfLine()\n    .exactly(\u003cspan\u003e1\u003c/span\u003e)\n    .of(\u003cspan\u003e\u0026#39;S\u0026#39;\u003c/span\u003e)\n    .getRegExp();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow let\u0026#39;s break this down a bit. The \u003ccode\u003eRegExpBuilder\u003c/code\u003e class is the main class that you\u0026#39;ll be using to build your regular expressions. You can start by creating a new instance of this class and chain methods together to create your regex:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estartOfLine()\u003c/code\u003e: This method adds the \u003ccode\u003e^\u003c/code\u003e character to the regex, which matches the start of a line.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eexactly(1)\u003c/code\u003e: This method adds the \u003ccode\u003e{1}\u003c/code\u003e quantifier to the regex, which matches exactly one occurrence of a given character or group.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eof(\u0026#39;S\u0026#39;)\u003c/code\u003e: This method adds the \u003ccode\u003eS\u003c/code\u003e character to the regex.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egetRegExp()\u003c/code\u003e: This method returns the final \u003ccode\u003eRegExp\u003c/code\u003e object that you can use to match strings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv data-nosnippet=\"\" id=\"ad-lead-magnet\"\u003e\u003cp\u003eCheck out our hands-on, practical guide to learning Git, with best-practices, industry-accepted standards, and included cheat sheet. Stop Googling Git commands and actually \u003cem\u003elearn\u003c/em\u003e it!\u003c/p\u003e\u003c/div\u003e\u003cp\u003eWith this, you can match strings like \u0026#34;Scott\u0026#34;, \u0026#34;Soccer\u0026#34;, or \u0026#34;S418401\u0026#34;.\u003c/p\u003e\n\u003cp\u003eThis is great and all, but this is probably a regex string you could come up with on your own and not struggle too much to read. So now let\u0026#39;s see a more complex example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003econst\u003c/span\u003e builder = \u003cspan\u003enew\u003c/span\u003e RegExpBuilder();\n\n\u003cspan\u003econst\u003c/span\u003e regExp = builder\n    .startOfInput()\n    .exactly(\u003cspan\u003e4\u003c/span\u003e).digits()\n    .then(\u003cspan\u003e\u0026#39;_\u0026#39;\u003c/span\u003e)\n    .exactly(\u003cspan\u003e2\u003c/span\u003e).digits()\n    .then(\u003cspan\u003e\u0026#39;_\u0026#39;\u003c/span\u003e)\n    .min(\u003cspan\u003e3\u003c/span\u003e).max(\u003cspan\u003e10\u003c/span\u003e).letters()\n    .then(\u003cspan\u003e\u0026#39;.\u0026#39;\u003c/span\u003e)\n    .anyOf([\u003cspan\u003e\u0026#39;png\u0026#39;\u003c/span\u003e, \u003cspan\u003e\u0026#39;jpg\u0026#39;\u003c/span\u003e, \u003cspan\u003e\u0026#39;gif\u0026#39;\u003c/span\u003e])\n    .endOfInput()\n    .getRegExp();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis regex is meant to match filenames, which may look like:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e2020_10_hund.jpg\u003c/li\u003e\n\u003cli\u003e2030_11_katze.png\u003c/li\u003e\n\u003cli\u003e4000_99_maus.gif\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSome interesting parts of this regex is that we can specify type of strings (i.e. \u003ccode\u003edigits()\u003c/code\u003e), min and max occurrences of a character or group (i.e. \u003ccode\u003emin(3).max(10)\u003c/code\u003e), and a list of possible values (i.e. \u003ccode\u003eanyOf([\u0026#39;png\u0026#39;, \u0026#39;jpg\u0026#39;, \u0026#39;gif\u0026#39;])\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eFor a full list of methods you can use to build your regex, you can check out the \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://github.com/scottwrobinson/regexpbuilderjs?tab=readme-ov-file#documentation\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis is just a small taste of what you can do with \u003ccode\u003eregexpbuilderjs\u003c/code\u003e. The package is very powerful and can help you build complex regular expressions in a more readable and maintainable way.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eComments, questions, and suggestions are always welcome! If you have any feedback on how this could work better, feel free to \u003ca target=\"_blank\" href=\"https://twitter.com/ScottWRobinson\"\u003ereach out on X\u003c/a\u003e. In the meantime, you can check out the repo on \u003ca target=\"_blank\" href=\"https://github.com/scottwrobinson/regexpbuilderjs\"\u003eGitHub\u003c/a\u003e and give it a star while you\u0026#39;re at it.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-06-06T18:37:25Z",
  "modifiedTime": "2024-06-06T18:38:50Z"
}
