{
  "id": "a968c26f-8cf7-4b25-a7bd-3a4931467ac2",
  "title": "Bun 1.2 Improves Node Compatibility and Adds Postgres Client",
  "link": "https://www.infoq.com/news/2025/04/bun-12-node-compat-postgres/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "The Bun team recently released Bun v1.2, with major progress regarding compatibility with Node.js, a key component of Bun’s value proposition. Bun 1.2 also now has a built-in S3 object storage API and a built-in Postgres client that comes in addition to the existing built-in SQLite client. By Bruno Couriol",
  "author": "Bruno Couriol",
  "published": "Tue, 01 Apr 2025 23:55:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Bundlers",
    "Node.js",
    "Web Development",
    "Development",
    "news"
  ],
  "byline": "Bruno Couriol",
  "length": 4080,
  "excerpt": "The Bun team recently released Bun v1.2, with major progress regarding compatibility with Node.js, a key component of Bun’s value proposition. Bun 1.2 also now has a built-in S3 object storage API and",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250328105021-1/apple-touch-icon.png",
  "text": "The Bun team recently released Bun v1.2, with major progress regarding compatibility with Node.js, a key component of Bun’s value proposition. Bun 1.2 also now has a built-in S3 object storage API and a built-in Postgres client that comes in addition to the existing built-in SQLite client. Bun, designed as a drop-in replacement for Node.js, has Node.js compatibility as a core target feature. With Bun 1.2, the team now measures that compatibility by running the Node.js test suite on every change to the code. Core Node modules such as path, os, string_decoder, puny_code, query_string, url, events, stream, fs, and more now pass 90% of the Node.js test suite. The release reports however that the Node.js test suite could not be run as is, as it is specific to Node.js idiosyncrasies. For instance, the test suite checks the exact Node.js string of error messages, which may change between releases. Some tests also relied on internal Node.js details. As a result, the Bun team ported the Node test suite to Bun, for instance replacing error strings with error codes so Bun has the freedom to add helpful details to the error messages. Bun v1.2 also adds support for the node:http2 module to create HTTP/2 servers, with a purported 2x speed improvement vs. the same module as part of the Node.js distribution. Bun v1.2 additionally adds support for node:dgram (UDP sockets management), node:cluster (spawning new Bun instances), and node:zlib. Importantly, Bun 1.2 adds built-in support for S3. Bun developers can now read, write, and delete files from an S3 bucket using APIs that are compatible with Web standards like Blob. The release note explained: Decoupling storage from compute prevents an entire class of reliability issues: low disk space, high p95 response times from busy I/O, and security issues with shared file storage. S3 is the defacto-standard for object storage in the cloud. The S3 APIs are implemented by a variety of cloud services, including Amazon S3, Google Cloud Storage, Cloudflare R2, and dozens more. Bun S3’s native client touts 5x speed improvement when downloading files vs. packages like @aws-sdk/client-s3 with Node.js. Bun 1.2 additionally expands support for SQL databases and contributes Bun.sql, a built-in SQL client with Postgres support. The new client comes to complement the existing built-in SQ_Lite_ client. SQLite fits a wide variety of use cases. As Wesley Aptekar-Cassels argued on his blog: On the whole, I think using SQLite is a good tradeoff for a lot of projects, including web apps that expect to have a potentially large number of users. As long as you don’t expect to need tens of thousands of small writes per second, thousands of large writes, or long-lived write transactions, it’s highly likely that SQLite will support your use case. It significantly reduces complexity and operational burden and eases testing, with the primary downside that it’s somewhat harder to get levels of availability and uptime that almost no one needs in the first place. Postgres support means Bun developers also have a built-in option for those heavy use cases when SQLite is no longer a good fit. The client is written in native code with optimizations including automatic prepared statements, query pipelining, connection pooling, and structure caching. The release note claims up to 50% speed improvement when reading rows vs, using the most popular Postgres clients with Node.js. By introducing built-in support for popular data stores like S3 and Postgres, Bun strives to accommodate further the demands of production applications for scalable, cloud-native solutions with fewer external dependencies. Bun v1.2 is a large release with plenty of additional and important features. Developers are invited to review the full release note. Bun is written in Zig and uses WebKit’s JavaScriptCore for its JavaScript engine. Bun 1.0 was released in September 2023 About the Author Bruno Couriol",
  "image": "https://res.infoq.com/news/2025/04/bun-12-node-compat-postgres/en/headerimage/generatedHeaderImage-1743548279484.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eThe Bun team \u003ca href=\"https://bun.sh/blog/bun-v1.2\"\u003erecently released Bun v1.2\u003c/a\u003e, with major progress regarding compatibility with Node.js, a key component of Bun’s value proposition. Bun 1.2 also now has a \u003ca href=\"https://bun.sh/blog/bun-v1.2#s3-support-with-bun-s3\"\u003ebuilt-in S3 object storage API\u003c/a\u003e and a built-in Postgres client that comes in addition to the existing built-in SQLite client.\u003c/p\u003e\n\n\u003cp\u003eBun, designed as a drop-in replacement for Node.js, has Node.js compatibility as a core target feature. With Bun 1.2, the team now measures that compatibility by running the Node.js test suite on every change to the code. Core Node modules such as \u003cem\u003epath\u003c/em\u003e, \u003cem\u003eos\u003c/em\u003e, \u003cem\u003estring_decoder\u003c/em\u003e, \u003cem\u003epuny_code\u003c/em\u003e, \u003cem\u003equery_string\u003c/em\u003e, \u003cem\u003eurl\u003c/em\u003e, \u003cem\u003eevents\u003c/em\u003e, \u003cem\u003estream\u003c/em\u003e, \u003cem\u003efs\u003c/em\u003e, and more now pass 90% of the Node.js test suite.\u003c/p\u003e\n\n\u003cp\u003eThe release reports however that the Node.js test suite could not be run as is, as it is specific to Node.js idiosyncrasies. For instance, the test suite checks the exact Node.js string of error messages, which may change between releases. Some tests also relied on internal Node.js details. As a result, the Bun team ported the Node test suite to Bun, for instance replacing error strings with error codes so Bun has the freedom to add helpful details to the error messages.\u003c/p\u003e\n\n\u003cp\u003eBun v1.2 also adds support for the \u003ca href=\"https://nodejs.org/api/http2.html#core-api\"\u003e\u003ccode\u003enode:http2\u003c/code\u003e\u003c/a\u003e module to create HTTP/2 servers, with a purported 2x speed improvement vs. the same module as part of the Node.js distribution. Bun v1.2 additionally adds support for \u003ca href=\"https://nodejs.org/api/dgram.html#udpdatagram-sockets\"\u003e\u003ccode\u003enode:dgram\u003c/code\u003e\u003c/a\u003e (UDP sockets management), \u003ca href=\"https://nodejs.org/api/cluster.html#cluster\"\u003e\u003ccode\u003enode:cluster\u003c/code\u003e\u003c/a\u003e (spawning new Bun instances), and \u003ca href=\"https://nodejs.org/api/zlib.html#zlib\"\u003e\u003ccode\u003enode:zlib\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eImportantly, Bun 1.2 adds built-in support for S3. Bun developers can now read, write, and delete files from an S3 bucket using APIs that are compatible with Web standards like \u003ccode\u003eBlob\u003c/code\u003e. The release note explained:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDecoupling storage from compute prevents an entire class of reliability issues: low disk space, high p95 response times from busy I/O, and security issues with shared file storage.\u003c/p\u003e\n\n\u003cp\u003eS3 is the \u003ca href=\"https://en.wikipedia.org/wiki/De_facto_standard\"\u003edefacto-standard\u003c/a\u003e for object storage in the cloud. The \u003ca href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/API_Operations_Amazon_Simple_Storage_Service.html\"\u003eS3 APIs\u003c/a\u003e are implemented by a variety of cloud services, including Amazon S3, Google Cloud Storage, Cloudflare R2, and dozens more.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eBun S3’s native client touts 5x speed improvement when downloading files vs. packages like \u003ccode\u003e@aws-sdk/client-s3\u003c/code\u003e with Node.js.\u003c/p\u003e\n\n\u003cp\u003eBun 1.2 additionally expands support for SQL databases and contributes \u003ca href=\"https://bun.sh/docs/api/sql\"\u003e\u003ccode\u003eBun.sql\u003c/code\u003e\u003c/a\u003e, a built-in SQL client with Postgres support. The new client comes to complement the existing built-in \u003ca href=\"https://bun.sh/docs/api/sqlite\"\u003eSQ_Lite_\u003c/a\u003e client.\u003c/p\u003e\n\n\u003cp\u003eSQLite fits a wide variety of use cases. As \u003ca href=\"https://blog.wesleyac.com/\" title=\"Wesley Aptekar-Cassels\"\u003eWesley Aptekar-Cassels\u003c/a\u003e argued on his blog:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eOn the whole, I think using SQLite is a good tradeoff for a lot of projects, including web apps that expect to have a potentially large number of users. As long as you don’t expect to need tens of thousands of small writes per second, thousands of large writes, or long-lived write transactions, it’s highly likely that SQLite will support your use case. It significantly reduces complexity and operational burden and eases testing, with the primary downside that it’s somewhat harder to get levels of availability and uptime that almost no one needs in the first place.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003ePostgres support means Bun developers also have a built-in option for those heavy use cases when SQLite is no longer a good fit. The client is written in native code with optimizations including automatic prepared statements, query pipelining, connection pooling, and structure caching. The release note claims up to 50% speed improvement when reading rows vs, using the most popular Postgres clients with Node.js.\u003c/p\u003e\n\n\u003cp\u003eBy introducing built-in support for popular data stores like S3 and Postgres, Bun strives to accommodate further the demands of production applications for scalable, cloud-native solutions with fewer external dependencies.\u003c/p\u003e\n\n\u003cp\u003eBun v1.2 is a large release with plenty of additional and important features. Developers are invited to \u003ca href=\"https://bun.sh/blog/bun-v1.2#postgres-support-with-bun-sql\"\u003ereview the full release note\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eBun is written in Zig and uses WebKit’s \u003ca href=\"https://docs.webkit.org/Deep%20Dive/JSC/JavaScriptCore.html\"\u003eJavaScriptCore\u003c/a\u003e for its JavaScript engine. Bun 1.0 was released in September 2023\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Bruno-Couriol\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBruno Couriol\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-04-01T00:00:00Z",
  "modifiedTime": null
}
