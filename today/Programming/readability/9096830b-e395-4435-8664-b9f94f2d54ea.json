{
  "id": "9096830b-e395-4435-8664-b9f94f2d54ea",
  "title": "Is Golang Still Growing? Go Language Popularity Trends in 2024",
  "link": "https://blog.jetbrains.com/research/2025/04/is-golang-still-growing-go-language-popularity-trends-in-2024/",
  "description": "As a fast-growing language with a wide range of applications, Go has become increasingly relevant to both new and existing developers. In this blog post, we will share our overview of the current state of Go, its position in the programming landscape, and the strategies for the future of Go. Following an analysis of its […]",
  "author": "Raisa Kanischeva",
  "published": "Mon, 07 Apr 2025 15:11:44 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "articles-2",
    "news",
    "go",
    "research",
    "trends"
  ],
  "byline": "Elena Ufliand",
  "length": 17837,
  "excerpt": "As a fast-growing language with a wide range of applications, Go has become increasingly relevant to both new and existing developers. In this blog post, we will share our overview of the current stat",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "JetBrains Research Research is crucial for progress and innovation, which is why at JetBrains we are passionate about both scientific and market research Articles News As a fast-growing language with a wide range of applications, Go has become increasingly relevant to both new and existing developers. In this blog post, we will share our overview of the current state of Go, its position in the programming landscape, and the strategies for the future of Go. Following an analysis of its market composition and user profile, we will then explore whether Go is still popular and dive into its future evolution. The market for Go According to the Developer Ecosystem Data Playground, the mean estimate is that 4.1 million Go professionals used Go within the last 12 months, and 1.8 million used it as one of their primary programming languages. According to the SlashData report for Q1 2024, at the beginning of 2024, there were around 4.7 million Go developers worldwide. While these two estimates are close, JetBrains’ figure only includes professionals who earn money (full-time, part-time employed, or freelancers; job roles that include coding duties like Developer, QA, DBA, etc.), while SlashData also counts STEM students and hobbyists.And Go’s usage must have grown significantly since then. In his talk from August 2024, Go Language PM Cameron Balahan mentions the number 5.8 million, based on the proportion of respondents who reported using Go on Stack Overflow’s latest annual survey and SlashData’s estimate of the number of developers worldwide. Go developers In 2024, as the mainstream cloud market continues to grow, there are two main categories of professional Go developers according to the Developer Ecosystem: Data Playground Professionals who work on web services (744,000), websites (732,000), or business applications (452,000) that are fully or partially composed of microservices written in Go (e.g. routers, proxies, and data transformation services) that help to operate the necessary logic. Professionals who manage cloud services (681,000) or internal IT infrastructure (337,000) platforms (IaaS), which often consist of Kubernetes cluster operators, related Go web microservices, and CLI utilities. They also work on infrastructure as code (e.g. Terraform) and service support. They often identify either as Developers / Programmers / Software Engineers, or DevOps Engineers / Infrastructure Developers: Most are software engineering professionals, but the proportion of DevOps engineers and infrastructure developers is also significant, outlining a huge demand for cloud-native infrastructure and operations. According to the Google Developer Survey 2024, similar to previous years, the most common use cases for Go remain API/RPC services (75%) and command line tools (62%). The Developer Ecosystem Survey 2024 and StackOverflow Survey 2024 reveal that Go developers are among the highest-paid in the industry. The average salary for Go developers is about $76,000 a year, while our IT Salary Calculator reveals that Go developers in the United States can make up to $500,000 depending on their experience level. The salaries of SREs and cloud infrastructure engineers are also well above average. Demand for Go developers is high and rising, as more and more companies move towards cloud-native architectures. However, there are not enough Go developers and DevOps or SRE professionals to meet this growing demand. Go developers typically already have prior coding experience and often use multiple programming languages simultaneously. Most adopt Go for work purposes and learn it “by doing” – working with it in their own projects, reading code, and consulting the Go documentation or basic tutorials like A Tour of Go or Go by Example, which are available online. Finally, more than 80% of Go developers are employed on a full-time basis by a company or organization. Companies using Go The main industries in which organizations with Go-heavy development operate have remained consistent over the past several years, according to the Google Developer Surveys 2020 and 2024: Technology (Google, DataDog, K8s, HashiCorp, Cockroach, Dropbox, Salesforce, and Apple): \u003e40%. Financial services (Monzo, American Express, Mercado Libre, and Moomoo Financial Singapore): 13%. Transportation and retail services (Amazon, Uber, Grabtaxi, DeliveryHero, and HelloFresh): 10%. Media/gaming services (Netflix, Bytedance, Tencent, Reddit, Mohalla, Snap, and Pinterest): 7%. How Go stacks up In this section, we’ll look at where the Go programming language ranks in several prominent global programming language indices.Because each ranking system draws on a variety of different data sources and methodologies, there is no single authoritative source that can provide a truly comprehensive overview of any programming language’s standing in the wider ecosystem. As such, we have collated the data from multiple rankings in order to give an accurate and objective reflection of Go’s position in the market compared to the other languages. JetBrains State of Developer Ecosystem Report: Language Promise Index In the JetBrains Language Promise Index, which evaluates programming languages based on a combination of audience growth over the past five years, the stability of this growth, the percentage of people expressing an intention to adopt the language, and the proportion of its users who intend to switch to another language, Go ranks fourth. It follows the undisputed leaders: TypeScript, Rust, and Python. According to the Developer Ecosystem Survey, the programming languages most respondents plan to adopt are Go and Rust. While Rust continues to grow in popularity, the share of Go developers has remained stable. Stack Overflow 2024 Developer Survey: Admired and Desired The Admired and Desired section of the Stack Overflow Developer Survey highlights which programming languages were most extensively used over the past year and which languages developers would like to use in the coming year. In this ranking, Go surpassed C# and shell scripting languages, moving up from ninth to seventh place last year. Rust remains ahead of Go, with a significantly higher “Desired” rate and an even higher “Admired” rate. Github Octoverse: Operations and IaC The GitHub Octoverse rankings measure the activity of programming languages based on the number of open-source projects that use them. In 2022, Go surpassed Ruby for the first time to join the ranks of the GitHub Top 10 languages. In 2024, its position remains stable. Although it is growing significantly slower than Python and TypeScript, Go is still among the top three fastest-growing languages in terms of open-source project activity. Ever since cloud-native development exploded onto the scene in 2019, infrastructure as code (IaC) has enjoyed vigorous growth within the open-source ecosystem. With HCL, Go, and Dockerfiles all increasing steadily in popularity, there’s clear evidence of an upward trend in cloud-native applications. Furthermore, the fast pace at which Terraform is being adopted by developers everywhere aligns with the growing use of Dockerfiles and other cloud-native technologies over the past decade. Cloudflare Radar 2024: API Client Language popularity The Cloudflare Radar Year in Review highlights patterns and trends across the internet as observed through Cloudflare’s global network. Last year’s most notable finding is that Go has surpassed Node.js as the most popular language for making automated API requests. Go now tops the list, accounting for approximately 12% of automated API requests made by Go-based clients, compared to 8.4% last year. TIOBE index The TIOBE Programming Language Index is recognized by many to be one of the world’s most prominent programming language rankings. It uses data from leading search engines relating to, and analyzing query volumes for specific programming languages and ranks them in order of popularity. However, recent fluctuations in the source data have made the TIOBE Index the subject of controversy of late, with many beginning to question its reliability. That said, compared to 2023, Go has risen from thirteenth to seventh position, achieving its highest ranking since 2009. Summary Based on the rankings above, last year, the Go programming language remained in a stable state of development and even advanced in several areas, including usage for infrastructure as code (IaC), as well as for operations, API clients, and open-source projects.Moreover, Go is among the top three backend languages used in the Apache Software Foundation’s projects, while the Go subreddit’s popularity has been growing steadily since early 2024. The average daily number of posts has increased significantly compared to the previous two years, and many of them are from developers, who recently started coding in Go. In this blog post, Tony Bai claims that Go is now entering its period of maturity and a golden age. Go and Rust Although there’s an opinion that the rise of Rust could exert some pressure on Go, that’s not true. In their joint article Rust vs. Go: Why They’re Better Together, the Go and the Rust teams argue: “While others may see Rust and Go as competitive programming languages, neither the Rust nor the Go teams do. Quite the contrary, our teams have deep respect for what the others are doing, and see the languages as complimentary with a shared vision of modernizing the state of software development industry-wide.” Go and Rust have a lot in common. Both are modern software languages designed with performance and concurrency in mind that natively support cross-compilation and come with compiler safety guarantees.  However, their primary use cases differ. Go is best suited for cloud server applications, web services, microservices, APIs, and CLI development, while Rust is ideal for performance-intensive, low-level embedded applications. Also, financial platforms are considering Rust for High-Frequency Trading. Go has the advantage of being easier to pick up and more pleasant to work with, particularly for projects that need rapid development and scalability. On the other hand, Rust often appeals to highly enthusiastic developers and is favored for certain performance-critical use cases. As the article says, Rust is designed to enable you to squeeze every last drop of performance out of the code; however, Rust’s increased performance comes at the cost of additional complexity. Rust development is typically more expensive and time-consuming.  As a result, many companies use both Rust and Go to complement one another, employing Rust only in those scenarios where its benefits justify the additional cost. While it’s true that many Go developers are interested in experimenting with Rust, this does not indicate a decline in Go’s market share. Future evolution of Go The main future directions for Go were outlined as follows in a GopherCon Europe 2024 talk by Go Language PM Cameron Balahan: Continued focus on the cloud The mainstream cloud market continues to grow, and the Go team recognizes the core values that cloud development demands: time to value, reliability, and scalability. After Russ Cox, who was the technical lead of the Go project since 2012 and who guided the Go language from an experimental project to one of today’s most popular programming languages, stepped down in September, his role of the general tech lead was assumed by Austin Clements. Cherry Mui took over the “Go core”, which includes the compiler toolchain, runtime, and releases. The new technical leads aim to maintain Go’s reputation for simplicity, stability, performance, and scalability, ensuring that Go remains a reliable platform for DevOps teams. Over the last years, the Go team has continued to enhance the data-driven decision-making process based on shared goals. In addition to gathering feedback through user surveys, data from the Go plugin for Visual Studio Code, and user experience research, they now collect more precise usage data via the opt-in telemetry feature introduced to the Go toolchain last year. This approach helps the team tackle the Go community growth challenges effectively while staying closely aligned with user needs. The emerging market of generative AI (GenAI): As the GenAI market emerges, developers are increasingly choosing Go as a reliable tool for building scalable, production-grade components of AI-powered products, such as model serving. While Go is not traditionally associated with machine learning, its reputation for performance and scalability makes it a front-of-mind choice for production infrastructure in AI solutions. The topic of AI use cases for Go was added to the Go Developer Survey 2024 H1 Results, reflecting rising interest in this area. One example is the experimental bot Gaby (short for “Go AI Bot”), which runs in the Go issue tracker as @gabyhelp, making the team more efficient. Developers are publishing more articles, tutorials, and materials exploring how to apply Go to GenAI. For example, Ardan Labs released a free course entitled Bill’s Guide to AI, and a new subreddit dedicated to using LLMs and AI with Go was created towards the end of last year.  Major AI platforms, including OpenAI, Claude, and Google AI, now support Go SDKs. The Go ecosystem for GenAI is also growing, with the emergence of tools like Ollama, LocalAI, HuggingFace, Firebase GenKit, LangChain Go, kserve (a Go tool for serving models on Kubernetes), Weaviate, Milvus vector databases, and more. Moreover, we see that GenAI infrastructure itself is being written in Go, just as cloud infrastructure was. However, while Go excels at building infrastructure for AI systems, it currently lacks a Go-native solution for machine learning (ML). For production modeling and ML-focused development, Python remains dominant due to its rich ecosystem of powerful libraries and frameworks, including scikit-learn, PyTorch, Keras, and TensorFlow. Conclusion In 2024, there was a change in the leadership of the Go team, but this is no cause for concern. The ideas and goals outlined by the new leaders reflect a deep understanding of the language and its culture, ensuring continuity in the Go development ecosystem.As expected, two major versions – Go 1.22 and Go 1.23 – were released in 2024, and Go 1.24 – in February 2025. In November 2024, Go celebrated its fifteenth anniversary. The Go team declared their interest in a new problem domain: AI model serving, an emerging area that offers exciting opportunities for Go’s adoption.While it remains to be seen whether Go will manage to capture this market segment, the ecosystem is already evolving to address these opportunities. Meanwhile, Go has managed to cement its position in the mainstream cloud market, which continues to grow – particularly with the increasing need to manage cloud-native infrastructureinenterprise environments. Although Go is now entering its period of maturity and a golden age, it must continue strengthening its position in the current market. Sources SLASHDATA LTD. Sizing programming language communities. Published: May 2024. Available at: https://dashboard-tool-report.cdn.prismic.io/dashboard-tool-report/ZmMmh5m069VX1jxc_-W.Kodluyoruz-Programminglanguagecommunities.pdf [quoted 2025-02-26]  MERRICK, Alice (go.dev). Go Developer Survey 2024 H2 Results. Published: 20 December 2024. Available at: https://go.dev/blog/survey2024-h2-results# [quoted 2025-02-26]  GOOGLE INC. Documentation. Available at: https://go.dev/doc/ [quoted 2025-02-26] STACK EXCHANGE INC. 2024 Developer Survey. Published: 2024. Available at: https://survey.stackoverflow.co/2024/  [quoted 2025-02-26] CLOUDFLARE INC. The Cloudflare Radar 2024 Year in Review. Published: 2024. Available at: https://radar.cloudflare.com/year-in-review/2024 [quoted 2025-02-26] JONATHAN TURNER AND STEVE FRANCIA. Rust vs. Go: Why They’re Better Together. Published: March 12, 2021. Available at: https://thenewstack.io/rust-vs-go-why-theyre-better-together/  [quoted 2025-03-31] GITHUB INC. Octoverse 2024. Published: October 29, 2024. Available at: https://github.blog/news-insights/octoverse/octoverse-2024/#the-most-popular-programming-languages [quoted 2025-02-26]  BALAHAN, Cameron. The Business of Go. YouTube. 19 July 2024. Available at: https://www.youtube.com/watch?v=OaKcuq6ej1I [quoted 2025-02-26] BALAHAN, Cameron. The Business of Go. YouTube. 18 August 2024. Available at: https://www.youtube.com/watch?v=pLvZRnK2WRE\u0026t=1087s [quoted 2025-03-31] COX, Russ. passing torches to Austin and Cherry. Google Group golang-dev. 1 August 2024. Available at: https://groups.google.com/g/golang-dev/c/0OqBkS2RzWw/m/GzWvX5u6AQAJ [quoted 2025-02-26] JANSEN, Paul. TIOBE Index for February 2025. Published: February 2025. Available at: https://www.tiobe.com/tiobe-index [quoted 2025-02-28] Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/04/go-social_share_blog_1280x720_en.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/research/\"\u003e\n                                                                                                                            \u003ch2\u003eJetBrains Research\u003c/h2\u003e\n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eResearch is crucial for progress and innovation, which is why at JetBrains we are passionate about both scientific and market research\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/research/category/articles-2/\"\u003eArticles\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/research/category/news/\"\u003eNews\u003c/a\u003e\u003c/p\u003e                    \n                    \n\u003cp\u003eAs a fast-growing language with a wide range of applications, Go has become increasingly relevant to both new and existing developers. In this blog post, we will share our overview of the current state of Go, its position in the programming landscape, and the strategies for the future of Go. Following an analysis of its market composition and user profile, we will then explore whether Go is still popular and dive into its future evolution.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eThe market for Go\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eAccording to the \u003ca href=\"https://www.jetbrains.com/lp/devecosystem-data-playground\" target=\"_blank\" rel=\"noopener\"\u003eDeveloper Ecosystem Data Playground\u003c/a\u003e, the mean estimate is that \u003cstrong\u003e4.1 million Go professionals\u003c/strong\u003e used Go within the last 12 months, and 1.8 million used it as one of their primary programming languages. According to the \u003ca href=\"https://dashboard-tool-report.cdn.prismic.io/dashboard-tool-report/ZmMmh5m069VX1jxc_-W.Kodluyoruz-Programminglanguagecommunities.pdf\" target=\"_blank\" rel=\"noopener\"\u003eSlashData report for Q1 2024,\u003c/a\u003e at the beginning of 2024, there were around \u003cstrong\u003e4.7 million Go developers worldwide\u003c/strong\u003e. While these two estimates are close, JetBrains’ figure only includes professionals who earn money (full-time, part-time employed, or freelancers; job roles that include coding duties like Developer, QA, DBA, etc.), while SlashData also counts STEM students and hobbyists.\u003cbr/\u003eAnd Go’s usage must have grown significantly since then. In\u003ca href=\"https://www.youtube.com/watch?v=pLvZRnK2WRE\u0026amp;t=1087s\" target=\"_blank\" rel=\"noopener\"\u003e his talk from August 2024\u003c/a\u003e, Go Language PM Cameron Balahan mentions the number \u003cstrong\u003e5.8 million\u003c/strong\u003e, based on the proportion of respondents who reported using Go on Stack Overflow’s latest annual survey and SlashData’s estimate of the number of developers worldwide.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eGo developers\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eIn 2024, as the \u003cstrong\u003emainstream cloud market \u003c/strong\u003econtinues to grow, there are two main categories of professional Go developers according to the \u003ca href=\"https://www.jetbrains.com/lp/devecosystem-data-playground/\" target=\"_blank\" rel=\"noopener\"\u003eDeveloper Ecosystem: Data Playground\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1700\" height=\"1416\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/01-2x.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eProfessionals who work on web services (744,000), websites (732,000), or business applications (452,000) that are fully or partially composed of microservices written in Go (e.g. routers, proxies, and data transformation services) that help to operate the necessary logic.\u003c/li\u003e\n\n\n\n\u003cli\u003eProfessionals who manage cloud services (681,000) or internal IT infrastructure (337,000) platforms (IaaS), which often consist of Kubernetes cluster operators, related Go web microservices, and CLI utilities. They also work on infrastructure as code (e.g. Terraform) and service support.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThey often identify either as \u003cstrong\u003eDevelopers / Programmers / Software Engineers\u003c/strong\u003e, or \u003cstrong\u003eDevOps Engineers / Infrastructure Developers:\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1700\" height=\"1416\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/02-2x.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eMost are software engineering professionals, but the proportion of DevOps engineers and infrastructure developers\u003cstrong\u003e \u003c/strong\u003eis also significant, outlining a huge demand for cloud-native infrastructure and operations.\u003c/p\u003e\n\n\n\n\u003cp\u003eAccording to the\u003ca href=\"https://go.dev/blog/survey2024-h2-results#demographics\" target=\"_blank\" rel=\"noopener\"\u003e Google Developer Survey 2024\u003c/a\u003e, similar to previous years, the most common \u003cstrong\u003euse cases for Go\u003c/strong\u003e remain \u003cstrong\u003eAPI/RPC services\u003c/strong\u003e (75%) and \u003cstrong\u003ecommand line tools\u003c/strong\u003e (62%).\u003c/p\u003e\n\n\n\n\u003cp\u003eThe\u003ca href=\"https://www.jetbrains.com/lp/devecosystem-2024/#salary_group_share_by_language\" target=\"_blank\" rel=\"noopener\"\u003e Developer Ecosystem Survey 2024\u003c/a\u003e and \u003ca href=\"https://survey.stackoverflow.co/2024/work/#3-salary-and-experience-by-language\" target=\"_blank\" rel=\"noopener\"\u003eStackOverflow Survey 2024\u003c/a\u003e reveal that Go developers are among the \u003cstrong\u003ehighest-paid in the industry\u003c/strong\u003e.\u003ca href=\"https://www.jetbrains.com/lp/devecosystem-2024/#pl_dynamics\" target=\"_blank\" rel=\"noopener\"\u003e The average salary for Go developers\u003c/a\u003e is about $76,000 a year, while our \u003ca href=\"https://www.jetbrains.com/lp/devecosystem-it-salary-calculator/\" target=\"_blank\" rel=\"noopener\"\u003eIT Salary Calculator\u003c/a\u003e reveals that Go developers in the United States can make up to $500,000 depending on their experience level.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1700\" height=\"1516\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/03-2x.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe salaries of\u003ca href=\"https://survey.stackoverflow.co/2024/work/#3-salary-and-experience-by-developer-type\" target=\"_blank\" rel=\"noopener\"\u003e SREs and cloud infrastructure engineers\u003c/a\u003e are also well above average. Demand for Go developers is high and rising, as more and more companies move towards cloud-native architectures. However, there are not enough Go developers and DevOps or SRE professionals to meet this growing demand.\u003c/p\u003e\n\n\n\n\u003cp\u003eGo developers typically already have prior coding experience and often use multiple programming languages simultaneously. Most adopt Go for work purposes and learn it “by doing” – working with it in their own projects, reading code, and consulting the\u003ca href=\"https://go.dev/doc/\" target=\"_blank\" rel=\"noopener\"\u003e Go documentation\u003c/a\u003e or basic tutorials like\u003ca href=\"https://go.dev/tour/welcome/1\" target=\"_blank\" rel=\"noopener\"\u003e \u003cem\u003eA Tour of Go\u003c/em\u003e\u003c/a\u003e or\u003ca href=\"https://gobyexample.com/\" target=\"_blank\" rel=\"noopener\"\u003e \u003cem\u003eGo by Example\u003c/em\u003e\u003c/a\u003e, which are available online.\u003c/p\u003e\n\n\n\n\u003cp\u003eFinally, more than 80% of Go developers are \u003ca href=\"https://go.dev/blog/survey2024-h2-results#demographics\" target=\"_blank\" rel=\"noopener\"\u003eemployed on a full-time basis\u003c/a\u003e by a company or organization.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eCompanies using Go\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe main industries in which organizations with Go-heavy development operate have remained consistent over the past several years, according to the\u003ca href=\"https://go.dev/blog/survey2020-results#who\" target=\"_blank\" rel=\"noopener\"\u003e Google Developer Surveys 2020\u003c/a\u003e and\u003ca href=\"https://go.dev/blog/survey2024-h2-results#firmographics\" target=\"_blank\" rel=\"noopener\"\u003e 2024\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTechnology\u003c/strong\u003e (Google, DataDog, K8s, HashiCorp, Cockroach, Dropbox, Salesforce, and Apple): \u0026gt;40%.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eFinancial services\u003c/strong\u003e (Monzo, American Express, Mercado Libre, and Moomoo Financial Singapore): 13%.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eTransportation and retail services\u003c/strong\u003e (Amazon, Uber, Grabtaxi, DeliveryHero, and HelloFresh): 10%.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMedia/gaming services\u003c/strong\u003e (Netflix, Bytedance, Tencent, Reddit, Mohalla, Snap, and Pinterest): 7%.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eHow Go stacks up\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eIn this section, we’ll look at where the Go programming language ranks in several prominent global programming language indices.\u003c/p\u003e\u003cp\u003eBecause each ranking system draws on a variety of different data sources and methodologies, there is no single authoritative source that can provide a truly comprehensive overview of any programming language’s standing in the wider ecosystem. As such, we have collated the data from multiple rankings in order to give an accurate and objective reflection of Go’s position in the market compared to the other languages.\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003ch3\u003eJetBrains State of Developer Ecosystem Report: Language Promise Index\u003c/h3\u003e\n\n\n\n\u003cp\u003eIn the \u003ca href=\"https://www.jetbrains.com/lp/devecosystem-2024/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cstrong\u003eJetBrains Language Promise Index\u003c/strong\u003e\u003c/a\u003e, which evaluates programming languages based on a combination of audience growth over the past five years, the stability of this growth, the percentage of people expressing an intention to adopt the language, and the proportion of its users who intend to switch to another language, \u003cstrong\u003eGo\u003c/strong\u003e \u003cstrong\u003eranks fourth.\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eIt follows the undisputed leaders: \u003cstrong\u003eTypeScript\u003c/strong\u003e, \u003cstrong\u003eRust\u003c/strong\u003e, and \u003cstrong\u003ePython\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"1488\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/04-2x.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAccording to the \u003cstrong\u003eDeveloper Ecosystem Survey\u003c/strong\u003e, the programming languages most respondents plan to adopt are \u003cstrong\u003eGo\u003c/strong\u003e and \u003cstrong\u003eRust\u003c/strong\u003e. While \u003cstrong\u003eRust\u003c/strong\u003e continues to grow in popularity, the share of \u003cstrong\u003eGo\u003c/strong\u003e developers has remained stable.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eStack Overflow 2024 Developer Survey: Admired and Desired\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://survey.stackoverflow.co/2024/technology#admired-and-desired\" target=\"_blank\" rel=\"noopener\"\u003e\u003cstrong\u003eAdmired and Desired\u003c/strong\u003e\u003c/a\u003e section of the Stack Overflow Developer Survey highlights which programming languages were most extensively used over the past year and which languages developers would like to use in the coming year.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this ranking, \u003cstrong\u003eGo\u003c/strong\u003e surpassed \u003cstrong\u003eC#\u003c/strong\u003e and shell scripting languages, moving up from \u003cstrong\u003eninth\u003c/strong\u003e to \u003cstrong\u003eseventh\u003c/strong\u003e place last year. \u003cstrong\u003eRust\u003c/strong\u003e remains ahead of Go, with a significantly higher “Desired” rate and an even higher “Admired” rate.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"796\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/05-2x.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eGithub Octoverse\u003c/strong\u003e\u003cstrong\u003e: Operations and IaC\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://github.blog/news-insights/octoverse/octoverse-2024/#the-most-popular-programming-languages\" target=\"_blank\" rel=\"noopener\"\u003e\u003cstrong\u003eGitHub Octoverse\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e rankings\u003c/strong\u003e measure the activity of programming languages based on the number of open-source projects that use them.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn 2022, \u003cstrong\u003eGo\u003c/strong\u003e surpassed \u003cstrong\u003eRuby\u003c/strong\u003e for the first time to join the ranks of the \u003cstrong\u003eGitHub Top 10 languages\u003c/strong\u003e. In 2024, its position remains stable. Although it is growing significantly slower than \u003cstrong\u003ePython\u003c/strong\u003e and \u003cstrong\u003eTypeScript\u003c/strong\u003e, \u003cstrong\u003eGo\u003c/strong\u003e is still among the \u003cstrong\u003etop three fastest-growing languages\u003c/strong\u003e in terms of open-source project activity.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"866\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/06-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eEver since cloud-native development exploded onto the scene in 2019, \u003cstrong\u003einfrastructure as code (IaC)\u003c/strong\u003e has enjoyed vigorous growth within the open-source ecosystem.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith \u003cstrong\u003eHCL\u003c/strong\u003e, \u003cstrong\u003eGo\u003c/strong\u003e, and \u003cstrong\u003eDockerfiles\u003c/strong\u003e all increasing steadily in popularity, there’s clear evidence of an upward trend in cloud-native applications. Furthermore, the fast pace at which Terraform is being adopted by developers everywhere aligns with the growing use of Dockerfiles and other cloud-native technologies over the past decade.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"866\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/07-2x.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eCloudflare Radar 2024\u003c/strong\u003e\u003cstrong\u003e: API Client Language popularity\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://radar.cloudflare.com/year-in-review/2024#api-client-language-popularity\" target=\"_blank\" rel=\"noopener\"\u003e\u003cstrong\u003eCloudflare Radar\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e Year in Review\u003c/strong\u003e highlights patterns and trends across the internet as observed through Cloudflare’s global network.\u003c/p\u003e\n\n\n\n\u003cp\u003eLast year’s most notable finding is that \u003cstrong\u003eGo\u003c/strong\u003e has \u003cstrong\u003esurpassed\u003c/strong\u003e \u003cstrong\u003eNode.js\u003c/strong\u003e as the most popular language for making automated API requests.\u003ca href=\"https://radar.cloudflare.com/year-in-review/2024#api-client-language-popularity\" target=\"_blank\" rel=\"noopener\"\u003e \u003cstrong\u003eGo\u003c/strong\u003e \u003cstrong\u003enow tops the list\u003c/strong\u003e\u003c/a\u003e, accounting for approximately\u003ca href=\"https://radar.cloudflare.com/year-in-review/2024#api-client-language-popularity\" target=\"_blank\" rel=\"noopener\"\u003e \u003cstrong\u003e12%\u003c/strong\u003e\u003c/a\u003e of automated API requests made by Go-based clients, compared to\u003ca href=\"https://radar.cloudflare.com/year-in-review/2023#api-client-language-popularity\" target=\"_blank\" rel=\"noopener\"\u003e \u003cstrong\u003e8.4%\u003c/strong\u003e last year\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"474\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/08-2x.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eTIOBE index\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://www.tiobe.com/tiobe-index/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cstrong\u003eTIOBE Programming Language Index\u003c/strong\u003e\u003c/a\u003e is recognized by many to be one of the world’s most prominent programming language rankings. It uses data from leading search engines relating to, and analyzing query volumes for specific programming languages and ranks them in order of popularity. However, recent fluctuations in the source data have made the TIOBE Index the subject of controversy of late, with many beginning to question its reliability.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat said, compared to 2023, \u003cstrong\u003eGo has risen from thirteenth to seventh position\u003c/strong\u003e, achieving its highest ranking since 2009.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"820\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/09-2x.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eSummary\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eBased on the rankings above, last year, the \u003cstrong\u003eGo\u003c/strong\u003e programming language \u003cstrong\u003eremained in a stable state of development and even advanced\u003c/strong\u003e in several areas, including \u003cstrong\u003eusage for infrastructure as code (IaC), as well as for operations, API clients\u003c/strong\u003e, and \u003cstrong\u003eopen-source projects\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eMoreover, Go is among the top three backend languages used in the\u003ca href=\"https://github.com/apache\" target=\"_blank\" rel=\"noopener\"\u003e Apache Software Foundation\u003c/a\u003e’s projects, while the\u003ca href=\"https://www.reddit.com/r/golang/\" target=\"_blank\" rel=\"noopener\"\u003e Go subreddit’s\u003c/a\u003e popularity has been growing steadily since early 2024. The average daily number of posts has increased significantly compared to the previous two years, and many of them are from \u003cstrong\u003edevelopers, who recently started coding in Go\u003c/strong\u003e.\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eIn this\u003ca href=\"https://tonybai.com/2025/01/06/the-2024-review-of-go-programming-language/\" target=\"_blank\" rel=\"noopener\"\u003e blog post\u003c/a\u003e, Tony Bai claims that Go is now entering its period of \u003cstrong\u003ematurity and a golden age\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eGo and Rust\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eAlthough there’s an opinion that the rise of Rust could exert some pressure on Go, that’s not true. In their joint article \u003ca href=\"https://thenewstack.io/rust-vs-go-why-theyre-better-together/\" target=\"_blank\" rel=\"noopener\"\u003eRust vs. Go: Why They’re Better Together\u003c/a\u003e, the Go and the Rust teams argue: \u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e“While others may see \u003c/em\u003e\u003ca href=\"https://www.rust-lang.org/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cem\u003eRust\u003c/em\u003e\u003c/a\u003e\u003cem\u003e and \u003c/em\u003e\u003ca href=\"https://go.dev/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cem\u003eGo\u003c/em\u003e\u003c/a\u003e\u003cem\u003e as competitive programming languages, neither the Rust nor the Go teams do. Quite the contrary, our teams have deep respect for what the others are doing, and see the languages as complimentary with a shared vision of modernizing the state of software development industry-wide.”\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eGo and Rust have a lot in common. Both are modern software languages designed with \u003cstrong\u003eperformance\u003c/strong\u003e and \u003cstrong\u003econcurrency\u003c/strong\u003e in mind that natively support cross-compilation and come with \u003cstrong\u003ecompiler safety guarantees\u003c/strong\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, their primary use cases differ. Go is best suited for cloud server applications, web services, microservices, APIs, and CLI development, while Rust is ideal for performance-intensive, low-level embedded applications. Also, financial platforms are considering Rust for High-Frequency Trading.\u003c/p\u003e\n\n\n\n\u003cp\u003eGo has the advantage of being \u003cstrong\u003eeasier to pick\u003c/strong\u003e \u003cstrong\u003eup\u003c/strong\u003e and more pleasant to work with, particularly for projects that need \u003cstrong\u003erapid development and scalability\u003c/strong\u003e. On the other hand, Rust often appeals to \u003cstrong\u003ehighly enthusiastic developers\u003c/strong\u003e and is favored for \u003cstrong\u003ecertain performance-critical use cases\u003c/strong\u003e. As the article says, Rust is designed to enable you to squeeze every last drop of performance out of the code; however, Rust’s increased performance comes at the cost of additional complexity. Rust development is typically more \u003cstrong\u003eexpensive and time-consuming\u003c/strong\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eAs a result, many companies use both \u003cstrong\u003eRust and Go \u003c/strong\u003eto complement one another, employing Rust only in those scenarios where its benefits justify the additional cost. While it’s true that many Go developers are interested in experimenting with Rust, this does not indicate a decline in Go’s market share.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eFuture evolution of Go\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe main future directions for Go were outlined as follows in a\u003ca href=\"https://www.youtube.com/watch?v=OaKcuq6ej1I\" target=\"_blank\" rel=\"noopener\"\u003e GopherCon Europe 2024 talk\u003c/a\u003e by Go Language PM Cameron Balahan:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eContinued focus on the cloud\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe mainstream \u003cstrong\u003ecloud market\u003c/strong\u003e continues to grow, and the Go team recognizes the core values that cloud development demands: \u003cstrong\u003etime to value, reliability, and scalability\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter\u003cstrong\u003e Russ Cox\u003c/strong\u003e, who was the \u003cstrong\u003etechnical lead of the Go project\u003c/strong\u003e since 2012 and who guided the Go language from an experimental project to one of today’s most popular programming languages,\u003ca href=\"https://groups.google.com/g/golang-dev/c/0OqBkS2RzWw/m/GzWvX5u6AQAJ\" target=\"_blank\" rel=\"noopener\"\u003e \u003cstrong\u003estepped down\u003c/strong\u003e\u003c/a\u003e in September, his role of the general tech lead was assumed by Austin Clements. Cherry Mui took over the “Go core”, which includes the compiler toolchain, runtime, and releases. The new technical leads aim to maintain Go’s reputation for simplicity, stability, performance, and scalability, ensuring that Go remains a reliable platform for DevOps teams.\u003c/p\u003e\n\n\n\n\u003cp\u003eOver the last years, the Go team has continued to enhance the \u003cstrong\u003edata-driven decision-making process\u003c/strong\u003e based on shared goals. In addition to gathering feedback through user surveys, data from the Go plugin for Visual Studio Code, and user experience research, they now collect more precise usage data via the opt-in \u003cstrong\u003etelemetry feature\u003c/strong\u003e introduced to the Go toolchain last year. This approach helps the team tackle the Go community growth challenges effectively while staying closely aligned with user needs.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eThe emerging market of generative AI (GenAI):\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAs the GenAI market emerges, developers are increasingly choosing Go as a reliable tool for building scalable, production-grade components of AI-powered products, such as \u003cstrong\u003emodel serving\u003c/strong\u003e. While Go is not traditionally associated with machine learning, its reputation for performance and scalability makes it a front-of-mind choice for production infrastructure in AI solutions.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe topic of AI use cases for Go was added to the\u003ca href=\"https://go.dev/blog/survey2024-h1-results#mlai\" target=\"_blank\" rel=\"noopener\"\u003e Go Developer Survey 2024 H1 Results\u003c/a\u003e, reflecting rising interest in this area. One example is the experimental bot \u003ca href=\"https://pkg.go.dev/rsc.io/gaby\" target=\"_blank\" rel=\"noopener\"\u003eGaby\u003c/a\u003e (short for “Go AI Bot”), which runs in the Go issue tracker as \u003ca href=\"https://github.com/gabyhelp\" target=\"_blank\" rel=\"noopener\"\u003e@gabyhelp\u003c/a\u003e, making the team more efficient.\u003c/p\u003e\n\n\n\n\u003cp\u003eDevelopers are publishing more articles, tutorials, and materials exploring how to apply Go to GenAI. For example, Ardan Labs released a\u003ca href=\"https://www.youtube.com/playlist?list=PLADD_vxzPcZDzTmmub99S0Ne58ApvJZjJ\" target=\"_blank\" rel=\"noopener\"\u003e free course entitled \u003cem\u003eBill’s Guide to AI\u003c/em\u003e\u003c/a\u003e, and a\u003ca href=\"https://www.reddit.com/r/LLMgophers/\" target=\"_blank\" rel=\"noopener\"\u003e new subreddit dedicated to using LLMs and AI with Go\u003c/a\u003e was created towards the end of last year. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eMajor AI platforms\u003c/strong\u003e, including OpenAI, Claude, and Google AI, now \u003cstrong\u003esupport\u003c/strong\u003e \u003cstrong\u003eGo SDKs\u003c/strong\u003e. The \u003cstrong\u003eGo ecosystem\u003c/strong\u003e \u003cstrong\u003efor GenAI\u003c/strong\u003e is also \u003cstrong\u003egrowing\u003c/strong\u003e, with the emergence of tools like Ollama, LocalAI, HuggingFace, Firebase GenKit, LangChain Go, kserve\u003cem\u003e \u003c/em\u003e(a Go tool for serving models on Kubernetes)\u003cem\u003e, \u003c/em\u003eWeaviate\u003cem\u003e,\u003c/em\u003e Milvus vector databases, and more. Moreover, we see that GenAI infrastructure itself is being written in Go, just as cloud infrastructure was.\u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, while Go excels at building infrastructure for AI systems, it currently lacks a \u003cstrong\u003eGo-native solution for machine learning (ML)\u003c/strong\u003e. For production modeling and ML-focused development, \u003cstrong\u003ePython\u003c/strong\u003e remains dominant due to its rich ecosystem of powerful libraries and frameworks, including scikit-learn, PyTorch, Keras, and\u003cem\u003e \u003c/em\u003eTensorFlow.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eConclusion\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eIn 2024, there was a change in the \u003cstrong\u003eleadership of the Go team\u003c/strong\u003e, but this is no cause for concern. The ideas and goals outlined by the new leaders reflect a deep understanding of the language and its culture, ensuring continuity in the Go development ecosystem.\u003cbr/\u003eAs expected, two major versions –\u003ca href=\"https://tip.golang.org/doc/go1.22\" target=\"_blank\" rel=\"noopener\"\u003e Go 1.22\u003c/a\u003e and\u003ca href=\"https://tip.golang.org/doc/go1.23\" target=\"_blank\" rel=\"noopener\"\u003e Go 1.23\u003c/a\u003e\u003cstrong\u003e \u003c/strong\u003e– were released in 2024, and \u003ca href=\"https://tip.golang.org/doc/go1.24\" target=\"_blank\" rel=\"noopener\"\u003eGo 1.24\u003c/a\u003e – in February 2025. In November 2024,\u003ca href=\"https://go.dev/blog/15years\" target=\"_blank\" rel=\"noopener\"\u003e Go celebrated its fifteenth anniversary.\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eThe Go team declared their interest in a new problem domain: \u003cstrong\u003eAI model serving\u003c/strong\u003e, an emerging area that offers exciting opportunities for Go’s adoption.\u003cbr/\u003eWhile it remains to be seen whether Go will manage to capture this market segment, the ecosystem is already evolving to address these opportunities.\u003c/li\u003e\n\n\n\n\u003cli\u003eMeanwhile, Go has managed to cement its position in the \u003cstrong\u003emainstream cloud market\u003c/strong\u003e, which continues to grow – particularly with the increasing need to manage \u003cstrong\u003ecloud-native infrastructureinenterprise environments\u003c/strong\u003e. Although Go is now entering its period of \u003cstrong\u003ematurity and a golden age\u003c/strong\u003e, it must continue strengthening its position in the current market.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eSources\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eSLASHDATA LTD. \u003cem\u003eSizing programming language communities\u003c/em\u003e. Published: May 2024. Available at: \u003ca href=\"https://dashboard-tool-report.cdn.prismic.io/dashboard-tool-report/ZmMmh5m069VX1jxc_-W.Kodluyoruz-Programminglanguagecommunities.pdf\" target=\"_blank\" rel=\"noopener\"\u003ehttps://dashboard-tool-report.cdn.prismic.io/dashboard-tool-report/ZmMmh5m069VX1jxc_-W.Kodluyoruz-Programminglanguagecommunities.pdf\u003c/a\u003e [quoted 2025-02-26] \u003c/li\u003e\n\n\n\n\u003cli\u003eMERRICK, Alice (go.dev). \u003cem\u003eGo Developer Survey 2024 H2 Results\u003c/em\u003e. Published: 20 December 2024. Available at: \u003ca href=\"https://go.dev/blog/survey2024-h2-results#\" target=\"_blank\" rel=\"noopener\"\u003ehttps://go.dev/blog/survey2024-h2-results#\u003c/a\u003e [quoted 2025-02-26] \u003c/li\u003e\n\n\n\n\u003cli\u003eGOOGLE INC. \u003cem\u003eDocumentation\u003c/em\u003e. Available at: \u003ca href=\"https://go.dev/doc/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://go.dev/doc/\u003c/a\u003e [quoted 2025-02-26]\u003c/li\u003e\n\n\n\n\u003cli\u003eSTACK EXCHANGE INC. \u003cem\u003e2024 Developer Survey\u003c/em\u003e. Published: 2024. Available at: \u003ca href=\"https://survey.stackoverflow.co/2024/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://survey.stackoverflow.co/2024/\u003c/a\u003e  [quoted 2025-02-26]\u003c/li\u003e\n\n\n\n\u003cli\u003eCLOUDFLARE INC. \u003cem\u003eThe Cloudflare Radar 2024 Year in Review. \u003c/em\u003ePublished: 2024. Available at: \u003ca href=\"https://radar.cloudflare.com/year-in-review/2024\" target=\"_blank\" rel=\"noopener\"\u003ehttps://radar.cloudflare.com/year-in-review/2024\u003c/a\u003e [quoted 2025-02-26]\u003c/li\u003e\n\n\n\n\u003cli\u003eJONATHAN TURNER AND STEVE FRANCIA. \u003cem\u003eRust vs. Go: Why They’re Better Together.\u003c/em\u003e Published: March 12, 2021. Available at: \u003ca href=\"https://thenewstack.io/rust-vs-go-why-theyre-better-together/\" target=\"_blank\" rel=\"noopener\"\u003ehttps://thenewstack.io/rust-vs-go-why-theyre-better-together/\u003c/a\u003e  [quoted 2025-03-31]\u003c/li\u003e\n\n\n\n\u003cli\u003eGITHUB INC. \u003cem\u003eOctoverse 2024\u003c/em\u003e. Published: October 29, 2024. Available at: \u003ca href=\"https://github.blog/news-insights/octoverse/octoverse-2024/#the-most-popular-programming-languages\" target=\"_blank\" rel=\"noopener\"\u003ehttps://github.blog/news-insights/octoverse/octoverse-2024/#the-most-popular-programming-languages\u003c/a\u003e [quoted 2025-02-26] \u003c/li\u003e\n\n\n\n\u003cli\u003eBALAHAN, Cameron. \u003cem\u003eThe Business of Go\u003c/em\u003e. YouTube. 19 July 2024. Available at: \u003ca href=\"https://www.youtube.com/watch?v=OaKcuq6ej1I\" target=\"_blank\" rel=\"noopener\"\u003ehttps://www.youtube.com/watch?v=OaKcuq6ej1I\u003c/a\u003e [quoted 2025-02-26]\u003c/li\u003e\n\n\n\n\u003cli\u003eBALAHAN, Cameron. \u003cem\u003eThe Business of Go\u003c/em\u003e. YouTube. 18 August 2024. Available at: \u003ca href=\"https://www.youtube.com/watch?v=pLvZRnK2WRE\u0026amp;t=1087s\" target=\"_blank\" rel=\"noopener\"\u003ehttps://www.youtube.com/watch?v=pLvZRnK2WRE\u0026amp;t=1087s\u003c/a\u003e [quoted 2025-03-31]\u003c/li\u003e\n\n\n\n\u003cli\u003eCOX, Russ. \u003cem\u003epassing torches to Austin and Cherry\u003c/em\u003e. Google Group golang-dev. 1 August 2024. Available at: \u003ca href=\"https://groups.google.com/g/golang-dev/c/0OqBkS2RzWw/m/GzWvX5u6AQAJ\" target=\"_blank\" rel=\"noopener\"\u003ehttps://groups.google.com/g/golang-dev/c/0OqBkS2RzWw/m/GzWvX5u6AQAJ\u003c/a\u003e [quoted 2025-02-26]\u003c/li\u003e\n\n\n\n\u003cli\u003eJANSEN, Paul. \u003cem\u003eTIOBE Index for February 2025. \u003c/em\u003ePublished: February 2025. Available at: \u003ca href=\"https://www.tiobe.com/tiobe-index\" target=\"_blank\" rel=\"noopener\"\u003ehttps://www.tiobe.com/tiobe-index\u003c/a\u003e [quoted 2025-02-28]\u003c/li\u003e\n\u003c/ul\u003e\n                    \n                                                                                                                                                                                                                                    \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "19 min read",
  "publishedTime": null,
  "modifiedTime": null
}
