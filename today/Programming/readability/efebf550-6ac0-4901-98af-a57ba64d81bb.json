{
  "id": "efebf550-6ac0-4901-98af-a57ba64d81bb",
  "title": "GitHub Copilot for CLI for PowerShell",
  "link": "http://feeds.hanselman.com/~/737271731/0/scotthanselman~GitHub-Copilot-for-CLI-for-PowerShell",
  "description": "GitHub Next has this cool project that is basically Copilot for the CLI (command line interface). You can sign up for their waitlist at the Copilot for CLI site. Copilot for CLI provides three shell commands: ??, git? and gh? This is cool and all, but I use PowerShell. Turns out these ?? commands are just router commands to a larger EXE called github-copilot-cli. So if you go \"?? something\" you're really going \"github-copilot-cli what-the-shell something.\" So this means I should be able to to do the same/similar aliases for my PowerShell prompt AND change the injected prompt (look at me I'm a prompt engineer) to add 'use powershell to.' Now it's not perfect, but hopefully it will make the point to the Copilot CLI team that PowerShell needs love also. Here are my aliases. Feel free to suggest if these suck. Note the addition of \"user powershell to\" for the ?? one. I may make a ?? and a p? where one does bash and one does PowerShell. I could also have it use wsl.exe and shell out to bash. Lots of possibilities.function ?? { $TmpFile = New-TemporaryFile github-copilot-cli what-the-shell ('use powershell to ' + $args) --shellout $TmpFile if ([System.IO.File]::Exists($TmpFile)) { $TmpFileContents = Get-Content $TmpFile if ($TmpFileContents -ne $nill) { Invoke-Expression $TmpFileContents Remove-Item $TmpFile } }}function git? { $TmpFile = New-TemporaryFile github-copilot-cli git-assist $args --shellout $TmpFile if ([System.IO.File]::Exists($TmpFile)) { $TmpFileContents = Get-Content $TmpFile if ($TmpFileContents -ne $nill) { Invoke-Expression $TmpFileContents Remove-Item $TmpFile } }}function gh? { $TmpFile = New-TemporaryFile github-copilot-cli gh-assist $args --shellout $TmpFile if ([System.IO.File]::Exists($TmpFile)) { $TmpFileContents = Get-Content $TmpFile if ($TmpFileContents -ne $nill) { Invoke-Expression $TmpFileContents Remove-Item $TmpFile } }} It also then offers to run the command. Very smooth. Hope you like it. Lots of fun stuff happening in this space.© 2021 Scott Hanselman. All rights reserved.",
  "author": "Scott Hanselman",
  "published": "Tue, 25 Apr 2023 15:31:49 GMT",
  "source": "http://feeds.hanselman.com/ScottHanselman",
  "categories": [
    "AI",
    "PowerShell"
  ],
  "byline": "Scott Hanselman",
  "length": 2707,
  "excerpt": "GitHub Next has this cool project that is basically Copilot for the CLI ...",
  "siteName": "",
  "favicon": "https://images.hanselman.com/main/apple-touch-icon-114x114.png",
  "text": "GitHub Next has this cool project that is basically Copilot for the CLI (command line interface). You can sign up for their waitlist at the Copilot for CLI site. Copilot for CLI provides three shell commands: ??, git? and gh? This is cool and all, but I use PowerShell. Turns out these ?? commands are just router commands to a larger EXE called github-copilot-cli. So if you go \"?? something\" you're really going \"github-copilot-cli what-the-shell something.\" So this means I should be able to to do the same/similar aliases for my PowerShell prompt AND change the injected prompt (look at me I'm a prompt engineer) to add 'use powershell to.' Now it's not perfect, but hopefully it will make the point to the Copilot CLI team that PowerShell needs love also. Here are my aliases. Feel free to suggest if these suck. Note the addition of \"user powershell to\" for the ?? one. I may make a ?? and a p? where one does bash and one does PowerShell. I could also have it use wsl.exe and shell out to bash. Lots of possibilities.function ?? { $TmpFile = New-TemporaryFile github-copilot-cli what-the-shell ('use powershell to ' + $args) --shellout $TmpFile if ([System.IO.File]::Exists($TmpFile)) { $TmpFileContents = Get-Content $TmpFile if ($TmpFileContents -ne $nill) { Invoke-Expression $TmpFileContents Remove-Item $TmpFile } }}function git? { $TmpFile = New-TemporaryFile github-copilot-cli git-assist $args --shellout $TmpFile if ([System.IO.File]::Exists($TmpFile)) { $TmpFileContents = Get-Content $TmpFile if ($TmpFileContents -ne $nill) { Invoke-Expression $TmpFileContents Remove-Item $TmpFile } }}function gh? { $TmpFile = New-TemporaryFile github-copilot-cli gh-assist $args --shellout $TmpFile if ([System.IO.File]::Exists($TmpFile)) { $TmpFileContents = Get-Content $TmpFile if ($TmpFileContents -ne $nill) { Invoke-Expression $TmpFileContents Remove-Item $TmpFile } }} It also then offers to run the command. Very smooth. Hope you like it. Lots of fun stuff happening in this space. About Scott Scott Hanselman is a former professor, former Chief Architect in finance, now speaker, consultant, father, diabetic, and Microsoft employee. He is a failed stand-up comic, a cornrower, and a book author. About   Newsletter Hosting By",
  "image": "https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/GitHub-Copilot-for-CLI-for-PowerShell_B0E3/image_f39afdbf-04bf-4c95-a913-2404f46dc308.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n            \n            \u003cp\u003eGitHub Next has this cool project that is basically Copilot for the CLI (command line interface). You can sign up for their waitlist at the \u003ca href=\"https://githubnext.com/projects/copilot-cli/\"\u003eCopilot for CLI site\u003c/a\u003e.\u003c/p\u003e \u003cblockquote\u003e \u003cp\u003eCopilot for CLI provides three shell commands: \u003ccode\u003e??\u003c/code\u003e, \u003ccode\u003egit?\u003c/code\u003e and \u003ccode\u003egh?\u003c/code\u003e\u003c/p\u003e\u003c/blockquote\u003e \u003cp\u003eThis is cool and all, but I use PowerShell. Turns out these ?? commands are just router commands to a larger EXE called github-copilot-cli. So if you go \u0026#34;?? something\u0026#34; you\u0026#39;re really going \u0026#34;github-copilot-cli what-the-shell something.\u0026#34;\u003c/p\u003e \u003cp\u003eSo this means I should be able to to do the same/similar aliases for my PowerShell prompt AND change the injected prompt (look at me I\u0026#39;m a prompt engineer) to add \u0026#39;use powershell to.\u0026#39; \u003c/p\u003e \u003cp\u003eNow it\u0026#39;s not perfect, but hopefully it will make the point to the Copilot CLI team that PowerShell needs love also.\u003c/p\u003e \u003cp\u003eHere are my aliases. Feel free to suggest if these suck. Note the addition of \u0026#34;user powershell to\u0026#34; for the ?? one. I may make a ?? and a p? where one does bash and one does PowerShell. I could also have it use wsl.exe and shell out to bash. Lots of possibilities.\u003c/p\u003e\u003cpre\u003efunction ?? { \u003cbr/\u003e    $TmpFile = New-TemporaryFile \u003cbr/\u003e    github-copilot-cli what-the-shell (\u0026#39;use powershell to \u0026#39; + $args) --shellout $TmpFile \u003cbr/\u003e    if ([System.IO.File]::Exists($TmpFile)) { \u003cbr/\u003e        $TmpFileContents = Get-Content $TmpFile \u003cbr/\u003e            if ($TmpFileContents -ne $nill) {\u003cbr/\u003e            Invoke-Expression $TmpFileContents \u003cbr/\u003e            Remove-Item $TmpFile \u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003cp\u003efunction git? {\u003cbr/\u003e    $TmpFile = New-TemporaryFile\u003cbr/\u003e    github-copilot-cli git-assist $args --shellout $TmpFile\u003cbr/\u003e    if ([System.IO.File]::Exists($TmpFile)) {\u003cbr/\u003e        $TmpFileContents = Get-Content $TmpFile \u003cbr/\u003e            if ($TmpFileContents -ne $nill) {\u003cbr/\u003e            Invoke-Expression $TmpFileContents \u003cbr/\u003e            Remove-Item $TmpFile \u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003cbr/\u003efunction gh? {\u003cbr/\u003e    $TmpFile = New-TemporaryFile\u003cbr/\u003e    github-copilot-cli gh-assist $args --shellout $TmpFile\u003cbr/\u003e    if ([System.IO.File]::Exists($TmpFile)) {\u003cbr/\u003e        $TmpFileContents = Get-Content $TmpFile \u003cbr/\u003e            if ($TmpFileContents -ne $nill) {\u003cbr/\u003e            Invoke-Expression $TmpFileContents \u003cbr/\u003e            Remove-Item $TmpFile \u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e} \u003c/p\u003e\u003c/pre\u003e\n\u003cp\u003eIt also then offers to run the command. Very smooth.\u003c/p\u003e\u003cfigure\u003e\u003cimg title=\"image\" alt=\"image\" src=\"https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/GitHub-Copilot-for-CLI-for-PowerShell_B0E3/image_f39afdbf-04bf-4c95-a913-2404f46dc308.png\" width=\"999\" height=\"437\"/\u003e\u003c/figure\u003e \n\u003cp\u003eHope you like it. Lots of fun stuff happening in this space.\u003c/p\u003e\n\n\n\n            \u003cdiv\u003e\n                \u003cdiv\u003e\n                    \u003ch4\u003eAbout Scott\u003c/h4\u003e\n                    \u003cdiv\u003e\n                        \u003cp\u003eScott Hanselman is a former professor, former Chief Architect in finance, now speaker, consultant, father, diabetic, and Microsoft employee. He is a failed stand-up comic, a cornrower, and a book author.\u003c/p\u003e\n                        \u003cp\u003e\u003ca href=\"https://facebook.com/shanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-fb.png\" alt=\"facebook\"/\u003e\u003c/a\u003e\n                        \u003ca href=\"https://twitter.com/shanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-twitter.png\" alt=\"twitter\"/\u003e\u003c/a\u003e\n                        \u003ca href=\"http://feeds.hanselman.com/ScottHanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-rss.png\" alt=\"subscribe\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n                        \u003ca href=\"http://hanselman.com/about\"\u003eAbout\u003c/a\u003e   \u003ca href=\"http://www.hanselman.com/newsletter\"\u003eNewsletter\u003c/a\u003e\n                    \u003c/p\u003e\u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv\u003e\n                    \u003cp\u003e\u003cstrong\u003eHosting By\u003c/strong\u003e\u003cbr/\u003e\n                        \u003ca rel=\"nofollow\" href=\"https://azure.microsoft.com/free\"\u003e\u003cimg alt=\"Hosted in an Azure App Service\" width=\"125\" height=\"125\" src=\"http://images.hanselman.com/main/azure-250x250.png\"/\u003e\u003c/a\u003e\n                    \u003c/p\u003e\n\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \n\n\n            \n\n            \n        \u003c/section\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
