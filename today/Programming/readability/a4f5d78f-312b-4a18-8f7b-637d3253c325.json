{
  "id": "a4f5d78f-312b-4a18-8f7b-637d3253c325",
  "title": "GPT Function Calling: 5 Underrated Use Cases",
  "link": "https://betterprogramming.pub/gpt-function-calling-5-underrated-use-cases-ccbd1d3f9fd7?source=rss----d0b105d10f0a---4",
  "description": "",
  "author": "Max Brodeur-Urbas",
  "published": "Fri, 10 Nov 2023 17:33:58 GMT",
  "source": "https://medium.com/feed/better-programming",
  "categories": [
    "automation",
    "llm",
    "gpt",
    "chatgpt",
    "openai"
  ],
  "byline": "Max Brodeur-Urbas",
  "length": 11517,
  "excerpt": "OpenAI’s “Function Calling” might be the most groundbreaking yet under appreciated feature released by any software company… ever. Functions allow you to turn unstructured data into structured data…",
  "siteName": "Better Programming",
  "favicon": "https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png",
  "text": "OpenAI’s backend converting messy unstructured data to structured data via functionsOpenAI’s “Function Calling” might be the most groundbreaking yet under appreciated feature released by any software company… ever.What are GPT FunctionsFunctions allow you to turn unstructured data into structured data. This might not sound all that groundbreaking but when you consider that 90% of data processing and data entry jobs worldwide exist for this exact reason, it’s quite a revolutionary feature that went somewhat unnoticed.Have you ever found yourself begging GPT (3.5 or 4) to spit out the answer you want and absolutely nothing else? No “Sure, here is your…” or any other useless fluff surrounding the core answer. GPT Functions are the solution you’ve been looking for.How are Functions meant to work?OpenAI’s docs on function calling are extremely limited. You’ll find yourself digging through their developer forum for examples of how to use them. I dug around the forum for you and have many example coming up.Here’s one of the only examples you’ll be able to find in their docs:functions = [ { \"name\": \"get_current_weather\", \"description\": \"Get the current weather in a given location\", \"parameters\": { \"type\": \"object\", \"properties\": { \"location\": { \"type\": \"string\", \"description\": \"The city and state, e.g. San Francisco, CA\", }, \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]}, }, \"required\": [\"location\"], }, } ]A function definition is a rigid JSON format that defines a function name, description and parameters. In this case, the function is meant to get the current weather. Obviously GPT isn’t able to call this actual API (since it doesn’t exist) but using this structured response you’d be able to connect the real API hypothetically.At a high level however, functions provide two layers of inference:Picking the function itself:You may notice that functions are passed into the OpenAI API call as an array. The reason you provide a name and description to each function are so GPT can decide which to use based on a given prompt. Providing multiple functions in your API call is like giving GPT a Swiss army knife and asking it to cut a piece of wood in half. It knows that even though it has a pair of pliers, scissors and a knife, it should use the saw!Function definitions contribute towards your token count. Passing in hundreds of functions would not only take up the majority of your token limit but also result in a drop in response quality. I often don’t even use this feature and only pass in 1 function that I force it to use. It is very nice to have in certain use cases however.Picking the parameter values based on a prompt:This is the real magic in my opinion. GPT being able to choose the tool in it’s tool kit is amazing and definitely the focus of their feature announcement but I think this applies to more use cases.You can imagine a function like handing GPT a form to fill out. It uses its reasoning, the context of the situation and field names/descriptions to decide how it will fill out each field. Designing the form and the additional information you pass in is where you can get creative.GPT filling out your custom form (function parameters)5 Useful ApplicationsData ExtractionOne of the most common things I use functions for to extract specific values from a large chunk of text. The sender’s address from an email, a founders name from a blog post, a phone number from a landing page.I like to imagine I’m searching for a needle in a haystack except the LLM burns the haystack, leaving nothing but the needle(s).GPT Data Extraction Personified.Use case: Processing thousands of contest submissionsI built an automation that iterated over thousands of contest submissions. Before storing these in a Google sheet I wanted to extract the email associated with the submission. Heres the function call I used for extracting their email.{ \"name\":\"update_email\", \"description\":\"Updates email based on the content of their submission.\", \"parameters\":{ \"type\":\"object\", \"properties\":{ \"email\":{ \"type\":\"string\", \"description\":\"The email provided in the submission\" } }, \"required\":[ \"email\" ] }}ScoringAssigning unstructured data a score based on dynamic, natural language criteria is a wonderful use case for functions. You could score comments during sentiment analysis, essays based on a custom grading rubric, a loan application for risk based on key factors. A recent use case I applied scoring to was scoring of sales leads from 0–100 based on their viability.Use Case: Scoring Sales leadsWe had hundreds of prospective leads in a single google sheet a few months ago that we wanted to tackle from most to least important. Each lead contained info like company size, contact name, position, industry etc.Using the following function we scored each lead from 0–100 based on our needs and then sorted them from best to worst.{ \"name\":\"update_sales_lead_value_score\", \"description\":\"Updates the score of a sales lead and provides a justification\", \"parameters\":{ \"type\":\"object\", \"properties\":{ \"sales_lead_value_score\":{ \"type\":\"number\", \"description\":\"An integer value ranging from 0 to 100 that represents the quality of a sales lead based on these criteria. 100 is a perfect lead, 0 is terrible. Ideal Lead Criteria:\\n- Medium sized companies (300-500 employees is the best range)\\n- Companies in primary resource heavy industries are best, ex. manufacturing, agriculture, etc. (this is the most important criteria)\\n- The higher up the contact position, the better. VP or Executive level is preferred.\" }, \"score_justification\":{ \"type\":\"string\", \"description\":\"A clear and conscise justification for the score provided based on the custom criteria\" } } }, \"required\":[ \"sales_lead_value_score\", \"score_justification\" ]}Categorization:Define custom buckets and have GPT thoughtfully consider each piece of data you give it and place it in the correct bucket. This can be used for labelling tasks like selecting the category of youtube videos or for discrete scoring tasks like assigning letter grades to homework assignments.Use Case: Labelling news articles.A very common first step in data processing workflows is separating incoming data into different streams. A recent automation I built did exactly this with news articles scraped from the web. I wanted to sort them based on the topic of the article and include a justification for the decision once again. Here’s the function I used:{ \"name\":\"categorize\", \"description\":\"Categorize the input data into user defined buckets.\", \"parameters\":{ \"type\":\"object\", \"properties\":{ \"category\":{ \"type\":\"string\", \"enum\":[ \"US Politics\", \"Pandemic\", \"Economy\", \"Pop culture\", \"Other\" ], \"description\":\"US Politics: Related to US politics or US politicians, Pandemic: Related to the Coronavirus Pandemix, Economy: Related to the economy of a specific country or the world. , Pop culture: Related to pop culture, celebrity media or entertainment., Other: Doesn't fit in any of the defined categories. \" }, \"justification\":{ \"type\":\"string\", \"description\":\"A short justification explaining why the input data was categorized into the selected category.\" } }, \"required\":[ \"category\", \"justification\" ] }}Option-Selection:Often times when processing data, I give GPT many possible options and want it to select the best one based on my needs. I only want the value it selected, no surrounding fluff or additional thoughts. Functions are perfect for this.Use Case: Finding the “most interesting AI news story” from hacker newsI wrote another medium article here about how I automated my entire Twitter account with GPT. Part of that process involves selecting the most relevant posts from the front pages of hacker news. This post selection step leverages functions!To summarize the functions portion of the use case, we would scrape the first n pages of hacker news and ask GPT to select the post most relevant to “AI news or tech news”. GPT would return only the headline and the link selected via functions so that I could go on to scrape that website and generate a tweet from it.I would pass in the user defined query as part of the message and use the following function definition:{ \"name\":\"find_best_post\", \"description\":\"Determine the best post that most closely reflects the query.\", \"parameters\":{ \"type\":\"object\", \"properties\":{ \"best_post_title\":{ \"type\":\"string\", \"description\":\"The title of the post that most closely reflects the query, stated exactly as it appears in the list of titles.\" } }, \"required\":[ \"best_post_title\" ] }}Filtering:Filtering is a subset of categorization where you categorize items as either true or false based on a natural language condition. A condition like “is Spanish” will be able to filter out all Spanish comments, articles etc. using a simple function and conditional statement immediately after.Use Case: Filtering contest submissionThe same automation that I mentioned in the “Data Extraction” section used ai-powered-filtering to weed out contest submissions that didn’t meet the deal-breaking criteria. Things like “must use typescript” were absolutely mandatory for the coding contest at hand. We used functions to filter out submissions and trim down the total set being processed by 90%. Here is the function definition we used.{ \"name\":\"apply_condition\", \"description\":\"Used to decide whether the input meets the user provided condition.\", \"parameters\":{ \"type\":\"object\", \"properties\":{ \"decision\":{ \"type\":\"string\", \"enum\":[ \"True\", \"False\" ], \"description\":\"True if the input meets this condition 'Does submission meet the ALL these requirements (uses typescript, uses tailwindcss, functional demo)', False otherwise.\" } }, \"required\":[ \"decision\" ] }}If you’re curious why I love functions so much or what I’ve built with them you should check out AgentHub!AgentHub is the Y Combinator-backed startup I co-founded that let’s you automate any repetitive or complex workflow with AI via a simple drag and drop no-code platform.“Imagine Zapier but AI-first and on crack.” — MeAutomations are built with individual nodes called “Operators” that are linked together to create power AI pipelines. We have a catalogue of AI powered operators that leverage functions under the hood.Our current AI-powered operators that use functions!Check out these templates to see examples of function use-cases on AgentHub: Scoring, Categorization, Option-Selection,If you want to start building AgentHub is live and ready to use! We’re very active in our discord community and are happy to help you build your automations if needed.Feel free to follow the official AgentHub twitter for updates and myself for AI-related content.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*doghMb44J43LgPYtkUCByw.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@max_82395?source=post_page-----ccbd1d3f9fd7--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Max Brodeur-Urbas\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*73Ios1i_8ssd_ztzoWrSSQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://betterprogramming.pub/?source=post_page-----ccbd1d3f9fd7--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Better Programming\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*QNoA3XlXLHz22zQazc0syg.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eOpenAI’s backend converting messy unstructured data to structured data via functions\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"43ce\"\u003eOpenAI’s “Function Calling” might be the most groundbreaking yet under appreciated feature released by any software company… ever.\u003c/p\u003e\u003ch2 id=\"3d24\"\u003eWhat are GPT Functions\u003c/h2\u003e\u003cp id=\"f4df\"\u003eFunctions allow you to \u003cstrong\u003eturn unstructured data into structured data\u003c/strong\u003e. This might not sound all that groundbreaking but when you consider that 90% of data processing and data entry jobs worldwide exist for this exact reason, it’s quite a revolutionary feature that went somewhat unnoticed.\u003c/p\u003e\u003cp id=\"b223\"\u003eHave you ever found yourself \u003cem\u003ebegging\u003c/em\u003e GPT (3.5 or 4) to spit out the answer you want and absolutely nothing else? No “Sure, here is your…” or any other useless fluff surrounding the core answer. GPT Functions are the solution you’ve been looking for.\u003c/p\u003e\u003ch2 id=\"5e7c\"\u003eHow are Functions meant to work?\u003c/h2\u003e\u003cblockquote\u003e\u003cp id=\"6c95\"\u003eOpenAI’s docs on function calling are extremely limited. You’ll find yourself digging through their developer forum for examples of how to use them. I dug around the forum for you and have many example coming up.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"d994\"\u003eHere’s one of the only examples you’ll be able to find in their docs:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a163\"\u003efunctions = [\u003cbr/\u003e        {\u003cbr/\u003e            \u0026#34;name\u0026#34;: \u0026#34;get_current_weather\u0026#34;,\u003cbr/\u003e            \u0026#34;description\u0026#34;: \u0026#34;Get the current weather in a given location\u0026#34;,\u003cbr/\u003e            \u0026#34;parameters\u0026#34;: {\u003cbr/\u003e                \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;,\u003cbr/\u003e                \u0026#34;properties\u0026#34;: {\u003cbr/\u003e                    \u0026#34;location\u0026#34;: {\u003cbr/\u003e                        \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\u003cbr/\u003e                        \u0026#34;description\u0026#34;: \u0026#34;The city and state, e.g. San Francisco, CA\u0026#34;,\u003cbr/\u003e                    },\u003cbr/\u003e                    \u0026#34;unit\u0026#34;: {\u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;enum\u0026#34;: [\u0026#34;celsius\u0026#34;, \u0026#34;fahrenheit\u0026#34;]},\u003cbr/\u003e                },\u003cbr/\u003e                \u0026#34;required\u0026#34;: [\u0026#34;location\u0026#34;],\u003cbr/\u003e            },\u003cbr/\u003e        }\u003cbr/\u003e    ]\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"36f2\"\u003eA function definition is a rigid JSON format that defines a function name, description and parameters. In this case, the function is meant to get the current weather. Obviously GPT isn’t able to call this actual API (since it doesn’t exist) but using this structured response you’d be able to connect the real API hypothetically.\u003c/p\u003e\u003cp id=\"2ef3\"\u003eAt a high level however, functions provide two layers of inference:\u003c/p\u003e\u003ch2 id=\"e6c4\"\u003ePicking the function itself:\u003c/h2\u003e\u003cp id=\"4398\"\u003eYou may notice that functions are passed into the OpenAI API call as an array. The reason you provide a name and description to each function are so GPT can decide which to use based on a given prompt. Providing multiple functions in your API call is like giving GPT a Swiss army knife and asking it to cut a piece of wood in half. It knows that even though it has a pair of pliers, scissors and a knife, it should use the saw!\u003c/p\u003e\u003cp id=\"75f9\"\u003e\u003cstrong\u003eFunction definitions contribute towards your token count\u003c/strong\u003e. Passing in hundreds of functions would not only take up the majority of your token limit but also result in a drop in response quality. I often don’t even use this feature and only pass in 1 function that I force it to use. It is very nice to have in certain use cases however.\u003c/p\u003e\u003ch2 id=\"5de6\"\u003ePicking the parameter values based on a prompt:\u003c/h2\u003e\u003cp id=\"aa62\"\u003eThis is the real magic in my opinion. GPT being able to choose the tool in it’s tool kit is amazing and definitely the focus of their feature announcement but I think this applies to more use cases.\u003c/p\u003e\u003cp id=\"62a4\"\u003e\u003cstrong\u003eYou can imagine a function like handing GPT a form to fill out\u003c/strong\u003e. \u003cstrong\u003eIt uses its reasoning, the context of the situation and field names/descriptions to decide how it will fill out each field.\u003c/strong\u003e Designing the form and the additional information you pass in is where you can get creative.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eGPT filling out your custom form (function parameters)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"fa5a\"\u003e5 Useful Applications\u003c/h2\u003e\u003ch2 id=\"3425\"\u003eData Extraction\u003c/h2\u003e\u003cp id=\"ce26\"\u003eOne of the most common things I use functions for to extract specific values from a large chunk of text. The sender’s address from an email, a founders name from a blog post, a phone number from a landing page.\u003c/p\u003e\u003cp id=\"eb1e\"\u003eI like to imagine I’m searching for a needle in a haystack except the LLM burns the haystack, leaving nothing but the needle(s).\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eGPT Data Extraction Personified.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"23a5\"\u003eUse case: Processing thousands of contest submissions\u003c/h2\u003e\u003cp id=\"f8c0\"\u003eI built an automation that iterated over thousands of contest submissions. Before storing these in a Google sheet I wanted to extract the email associated with the submission. Heres the function call I used for extracting their email.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"462c\"\u003e{\u003cbr/\u003e   \u0026#34;name\u0026#34;:\u0026#34;update_email\u0026#34;,\u003cbr/\u003e   \u0026#34;description\u0026#34;:\u0026#34;Updates email based on the content of their submission.\u0026#34;,\u003cbr/\u003e   \u0026#34;parameters\u0026#34;:{\u003cbr/\u003e      \u0026#34;type\u0026#34;:\u0026#34;object\u0026#34;,\u003cbr/\u003e      \u0026#34;properties\u0026#34;:{\u003cbr/\u003e         \u0026#34;email\u0026#34;:{\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;string\u0026#34;,\u003cbr/\u003e            \u0026#34;description\u0026#34;:\u0026#34;The email provided in the submission\u0026#34;\u003cbr/\u003e         }\u003cbr/\u003e      },\u003cbr/\u003e      \u0026#34;required\u0026#34;:[\u003cbr/\u003e         \u0026#34;email\u0026#34;\u003cbr/\u003e      ]\u003cbr/\u003e   }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"048c\"\u003eScoring\u003c/h2\u003e\u003cp id=\"e8c1\"\u003eAssigning unstructured data a score based on dynamic, natural language criteria is a wonderful use case for functions. You could score comments during sentiment analysis, essays based on a custom grading rubric, a loan application for risk based on key factors. A recent use case I applied scoring to was scoring of sales leads from 0–100 based on their viability.\u003c/p\u003e\u003ch2 id=\"2ab0\"\u003eUse Case: Scoring Sales leads\u003c/h2\u003e\u003cp id=\"6bba\"\u003eWe had hundreds of prospective leads in a single google sheet a few months ago that we wanted to tackle from most to least important. Each lead contained info like company size, contact name, position, industry etc.\u003c/p\u003e\u003cp id=\"15b3\"\u003eUsing the following function we scored each lead from 0–100 based on our needs and then sorted them from best to worst.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"88f8\"\u003e{\u003cbr/\u003e   \u0026#34;name\u0026#34;:\u0026#34;update_sales_lead_value_score\u0026#34;,\u003cbr/\u003e   \u0026#34;description\u0026#34;:\u0026#34;Updates the score of a sales lead and provides a justification\u0026#34;,\u003cbr/\u003e   \u0026#34;parameters\u0026#34;:{\u003cbr/\u003e      \u0026#34;type\u0026#34;:\u0026#34;object\u0026#34;,\u003cbr/\u003e      \u0026#34;properties\u0026#34;:{\u003cbr/\u003e         \u0026#34;sales_lead_value_score\u0026#34;:{\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;number\u0026#34;,\u003cbr/\u003e            \u0026#34;description\u0026#34;:\u0026#34;An integer value ranging from 0 to 100 that represents the quality of a sales lead based on these criteria. 100 is a perfect lead, 0 is terrible. Ideal Lead Criteria:\\n- Medium sized companies (300-500 employees is the best range)\\n- Companies in primary resource heavy industries are best, ex. manufacturing, agriculture, etc. (this is the most important criteria)\\n- The higher up the contact position, the better. VP or Executive level is preferred.\u0026#34;\u003cbr/\u003e         },\u003cbr/\u003e         \u0026#34;score_justification\u0026#34;:{\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;string\u0026#34;,\u003cbr/\u003e            \u0026#34;description\u0026#34;:\u0026#34;A clear and conscise justification for the score provided based on the custom criteria\u0026#34;\u003cbr/\u003e         }\u003cbr/\u003e      }\u003cbr/\u003e   },\u003cbr/\u003e   \u0026#34;required\u0026#34;:[\u003cbr/\u003e      \u0026#34;sales_lead_value_score\u0026#34;, \u003cbr/\u003e      \u0026#34;score_justification\u0026#34;\u003cbr/\u003e   ]\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"aa25\"\u003eCategorization:\u003c/h2\u003e\u003cp id=\"b3dd\"\u003eDefine custom buckets and have GPT thoughtfully consider each piece of data you give it and place it in the correct bucket. This can be used for labelling tasks like selecting the category of youtube videos or for discrete scoring tasks like assigning letter grades to homework assignments.\u003c/p\u003e\u003ch2 id=\"faf3\"\u003e\u003cstrong\u003eUse Case: Labelling news articles.\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"1a3d\"\u003eA very common first step in data processing workflows is separating incoming data into different streams. A recent automation I built did exactly this with news articles scraped from the web. I wanted to sort them based on the topic of the article and include a justification for the decision once again. Here’s the function I used:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a93e\"\u003e{\u003cbr/\u003e   \u0026#34;name\u0026#34;:\u0026#34;categorize\u0026#34;,\u003cbr/\u003e   \u0026#34;description\u0026#34;:\u0026#34;Categorize the input data into user defined buckets.\u0026#34;,\u003cbr/\u003e   \u0026#34;parameters\u0026#34;:{\u003cbr/\u003e      \u0026#34;type\u0026#34;:\u0026#34;object\u0026#34;,\u003cbr/\u003e      \u0026#34;properties\u0026#34;:{\u003cbr/\u003e         \u0026#34;category\u0026#34;:{\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;string\u0026#34;,\u003cbr/\u003e            \u0026#34;enum\u0026#34;:[\u003cbr/\u003e               \u0026#34;US Politics\u0026#34;,\u003cbr/\u003e               \u0026#34;Pandemic\u0026#34;,\u003cbr/\u003e               \u0026#34;Economy\u0026#34;,\u003cbr/\u003e               \u0026#34;Pop culture\u0026#34;,\u003cbr/\u003e               \u0026#34;Other\u0026#34;\u003cbr/\u003e            ],\u003cbr/\u003e            \u0026#34;description\u0026#34;:\u0026#34;US Politics: Related to US politics or US politicians, Pandemic: Related to the Coronavirus Pandemix, Economy: Related to the economy of a specific country or the world. , Pop culture: Related to pop culture, celebrity media or entertainment., Other: Doesn\u0026#39;t fit in any of the defined categories. \u0026#34;\u003cbr/\u003e         },\u003cbr/\u003e         \u0026#34;justification\u0026#34;:{\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;string\u0026#34;,\u003cbr/\u003e            \u0026#34;description\u0026#34;:\u0026#34;A short justification explaining why the input data was categorized into the selected category.\u0026#34;\u003cbr/\u003e         }\u003cbr/\u003e      },\u003cbr/\u003e      \u0026#34;required\u0026#34;:[\u003cbr/\u003e         \u0026#34;category\u0026#34;,\u003cbr/\u003e         \u0026#34;justification\u0026#34;\u003cbr/\u003e      ]\u003cbr/\u003e   }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"6d2d\"\u003eOption-Selection:\u003c/h2\u003e\u003cp id=\"e3c8\"\u003eOften times when processing data, I give GPT many possible options and want it to select the best one based on my needs. I only want the value it selected, no surrounding fluff or additional thoughts. Functions are perfect for this.\u003c/p\u003e\u003ch2 id=\"908c\"\u003eUse Case: Finding the “most interesting AI news story” from hacker news\u003c/h2\u003e\u003cblockquote\u003e\u003cp id=\"bd59\"\u003eI wrote another \u003ca href=\"https://medium.com/better-programming/building-an-autonomous-twitter-account-with-llms-de53f5e519ba\" rel=\"noopener\"\u003emedium article here\u003c/a\u003e about how I automated my entire Twitter account with GPT. Part of that process involves selecting the most relevant posts from the front pages of hacker news. This post selection step leverages functions!\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"9565\"\u003eTo summarize the functions portion of the use case, we would scrape the first n pages of hacker news and ask GPT to select the post most relevant to “AI news or tech news”. GPT would return only the headline and the link selected via functions so that I could go on to scrape that website and generate a tweet from it.\u003c/p\u003e\u003cp id=\"d2f2\"\u003eI would pass in the user defined query as part of the message and use the following function definition:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8572\"\u003e{\u003cbr/\u003e   \u0026#34;name\u0026#34;:\u0026#34;find_best_post\u0026#34;,\u003cbr/\u003e   \u0026#34;description\u0026#34;:\u0026#34;Determine the best post that most closely reflects the query.\u0026#34;,\u003cbr/\u003e   \u0026#34;parameters\u0026#34;:{\u003cbr/\u003e      \u0026#34;type\u0026#34;:\u0026#34;object\u0026#34;,\u003cbr/\u003e      \u0026#34;properties\u0026#34;:{\u003cbr/\u003e         \u0026#34;best_post_title\u0026#34;:{\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;string\u0026#34;,\u003cbr/\u003e            \u0026#34;description\u0026#34;:\u0026#34;The title of the post that most closely reflects the query, stated exactly as it appears in the list of titles.\u0026#34;\u003cbr/\u003e         }\u003cbr/\u003e      },\u003cbr/\u003e      \u0026#34;required\u0026#34;:[\u003cbr/\u003e         \u0026#34;best_post_title\u0026#34;\u003cbr/\u003e      ]\u003cbr/\u003e   }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"e593\"\u003eFiltering:\u003c/h2\u003e\u003cp id=\"9ca7\"\u003eFiltering is a subset of categorization where you categorize items as either true or false based on a natural language condition. A condition like “is Spanish” will be able to filter out all Spanish comments, articles etc. using a simple function and conditional statement immediately after.\u003c/p\u003e\u003ch2 id=\"1f1c\"\u003eUse Case: Filtering contest submission\u003c/h2\u003e\u003cp id=\"173a\"\u003eThe same automation that I mentioned in the “Data Extraction” section used ai-powered-filtering to weed out contest submissions that didn’t meet the deal-breaking criteria. Things like “must use typescript” were absolutely mandatory for the coding contest at hand. We used functions to filter out submissions and trim down the total set being processed by 90%. Here is the function definition we used.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"e32e\"\u003e{\u003cbr/\u003e   \u0026#34;name\u0026#34;:\u0026#34;apply_condition\u0026#34;,\u003cbr/\u003e   \u0026#34;description\u0026#34;:\u0026#34;Used to decide whether the input meets the user provided condition.\u0026#34;,\u003cbr/\u003e   \u0026#34;parameters\u0026#34;:{\u003cbr/\u003e      \u0026#34;type\u0026#34;:\u0026#34;object\u0026#34;,\u003cbr/\u003e      \u0026#34;properties\u0026#34;:{\u003cbr/\u003e         \u0026#34;decision\u0026#34;:{\u003cbr/\u003e            \u0026#34;type\u0026#34;:\u0026#34;string\u0026#34;,\u003cbr/\u003e            \u0026#34;enum\u0026#34;:[\u003cbr/\u003e               \u0026#34;True\u0026#34;,\u003cbr/\u003e               \u0026#34;False\u0026#34;\u003cbr/\u003e            ],\u003cbr/\u003e            \u0026#34;description\u0026#34;:\u0026#34;True if the input meets this condition \u0026#39;Does submission meet the ALL these requirements (uses typescript, uses tailwindcss, functional demo)\u0026#39;, False otherwise.\u0026#34;\u003cbr/\u003e         }\u003cbr/\u003e      },\u003cbr/\u003e      \u0026#34;required\u0026#34;:[\u003cbr/\u003e         \u0026#34;decision\u0026#34;\u003cbr/\u003e      ]\u003cbr/\u003e   }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"b77d\"\u003eIf you’re curious why I love functions so much or what I’ve built with them you should check out \u003ca href=\"https://www.agenthub.dev/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAgentHub\u003c/a\u003e!\u003c/p\u003e\u003cp id=\"5918\"\u003e\u003cstrong\u003eAgentHub is the \u003c/strong\u003e\u003ca href=\"https://www.ycombinator.com/launches/JcG-agenthub-automate-any-workflow-with-ai\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eY Combinator-backed startup\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e I co-founded that let’s you automate any repetitive or complex workflow with AI via a simple drag and drop no-code platform.\u003c/strong\u003e\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"abe5\"\u003e“Imagine Zapier but AI-first and on crack.” — Me\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"5b4d\"\u003eAutomations are built with individual nodes called “Operators” that are linked together to create power AI pipelines. We have a catalogue of AI powered operators that leverage functions under the hood.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eOur current AI-powered operators that use functions!\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"f921\"\u003eCheck out these templates to see examples of function use-cases on AgentHub: \u003ca href=\"https://www.agenthub.dev/templates/sales_crm/sales_leads_scoring_model\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eScoring\u003c/a\u003e, \u003ca href=\"https://www.agenthub.dev/templates/media_news/news_story_categorizer\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCategorization\u003c/a\u003e, \u003ca href=\"https://www.agenthub.dev/templates/media_news/autonomous_twitter_bot\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eOption-Selection\u003c/a\u003e,\u003c/p\u003e\u003cp id=\"2920\"\u003eIf you want to start building \u003ca href=\"https://www.agenthub.dev/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAgentHub\u003c/a\u003e is live and ready to use! We’re very active in our \u003ca href=\"https://discord.gg/SyCVmrzhCc\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ediscord community\u003c/a\u003e and are happy to help you build your automations if needed.\u003c/p\u003e\u003cp id=\"77bb\"\u003eFeel free to follow the \u003ca href=\"https://twitter.com/AgentHub_AI\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eofficial AgentHub twitter\u003c/a\u003e for updates and \u003ca href=\"https://twitter.com/MaxBrodeurUrbas\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003emyself for AI-related content.\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2023-11-05T02:08:38.818Z",
  "modifiedTime": null
}
