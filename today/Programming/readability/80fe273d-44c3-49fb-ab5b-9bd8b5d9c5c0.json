{
  "id": "80fe273d-44c3-49fb-ab5b-9bd8b5d9c5c0",
  "title": "CVE-2025-53367: An exploitable out-of-bounds write in DjVuLibre",
  "link": "https://github.blog/security/vulnerability-research/cve-2025-53367-an-exploitable-out-of-bounds-write-in-djvulibre/",
  "description": "DjVuLibre has a vulnerability that could enable an attacker to gain code execution on a Linux Desktop system when the user tries to open a crafted document. The post CVE-2025-53367: An exploitable out-of-bounds write in DjVuLibre appeared first on The GitHub Blog.",
  "author": "Kevin Backhouse",
  "published": "Thu, 03 Jul 2025 20:52:20 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "Security",
    "Vulnerability research",
    "CVE",
    "GitHub Security Lab",
    "linux",
    "open source"
  ],
  "byline": "Kevin Backhouse, Antonio Morales",
  "length": 5181,
  "excerpt": "DjVuLibre has a vulnerability that could enable an attacker to gain code execution on a Linux Desktop system when the user tries to open a crafted document.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "DjVuLibre version 3.5.29 was released today. It fixes CVE-2025-53367 (GHSL-2025-055), an out-of-bounds (OOB) write in the MMRDecoder::scanruns method. The vulnerability could be exploited to gain code execution on a Linux Desktop system when the user tries to open a crafted document. DjVu is a document file format that can be used for similar purposes to PDF. It is supported by Evince and Papers, the default document viewers on many Linux distributions. In fact, even when a DjVu file is given a filename with a .pdf extension, Evince/Papers will automatically detect that it is a DjVu document and run DjVuLibre to decode it. Antonio found this vulnerability while researching the Evince document reader. He found the bug with fuzzing. Kev has developed a proof of concept exploit for the vulnerability, as demoed in this video. The POC works on a fully up-to-date Ubuntu 25.04 (x86_64) with all the standard security protections enabled. To explain what’s happening in the video: Kev clicks on a malicious DjVu document in his ~/Downloads directory. The file is named poc.pdf, but it’s actually in DjVu format. The default document viewer (/usr/bin/papers) loads the document, detects that it’s in DjVu format, and uses DjVuLibre to decode it. The file exploits the OOB write vulnerability and triggers a call to system(\"google-chrome https://www.youtube.com/…\"). Rick Astley appears. Although the POC is able to bypass ASLR, it’s somewhat unreliable: it’ll work 10 times in a row and then suddenly stop working for several minutes. But this is only a first version, and we believe it’s possible to create an exploit that’s significantly more reliable. You may be wondering: why Astley, and not a calculator? That’s because /usr/bin/papers runs under an AppArmor profile. The profile prohibits you from starting an arbitrary process but makes an exception for google-chrome. So it was easier to play a YouTube video than pop a calc. But the AppArmor profile is not particularly restrictive. For example, it lets you write arbitrary files to the user’s home directory, except for the really obvious one like ~/.bashrc. So it wouldn’t prevent a determined attacker from gaining code execution. Vulnerability Details The MMRDecoder::scanruns method is affected by an OOB-write vulnerability, because it doesn’t check that the xr pointer stays within the bounds of the allocated buffer. During the decoding process, run-length encoded data is written into two buffers: lineruns and prevruns: //libdjvu/MMRDecoder.h class DJVUAPI MMRDecoder : public GPEnabled { ... public: unsigned short *lineruns; ... unsigned short *prevruns; ... } The variables named pr and xr point to the current locations in those buffers.  scanruns does not check that those pointers remain within the bounds of the allocated buffers. //libdjvu/MMRDecoder.cpp const unsigned short * MMRDecoder::scanruns(const unsigned short **endptr) { ... // Swap run buffers unsigned short *pr = lineruns; unsigned short *xr = prevruns; prevruns = pr; lineruns = xr; ... for(a0=0,rle=0,b1=*pr++;a0 \u003c width;) { ... *xr = rle; xr++; rle = 0; ... *xr = rle; xr++; rle = 0; ... *xr = inc+rle-a0; xr++; } This can lead to writes beyond the allocated memory, resulting in a heap corruption condition. An out-of-bounds read with pr is also possible for the same reason. We will publish the source code of our proof of concept exploit in a couple of weeks’ time in the GitHub Security Lab repository. Acknowledgements We would like to thank Léon Bottou and Bill Riemers for responding incredibly quickly and releasing a fix less than two days after we first contacted them! Timeline 2025-07-01: Reported via email to the authors: Léon Bottou, Bill Riemers, Yann LeCun. 2025-07-01: Responses received from Bill Riemers and Léon Bottou. 2025-07-02: Fix commit added by Léon Bottou: https://sourceforge.net/p/djvu/djvulibre-git/ci/33f645196593d70bd5e37f55b63886c31c82c3da/ 2025-07-03: DjVuLibre version 3.5.29 released: https://sourceforge.net/p/djvu/www-git/ci/9748b43794440aff40bae066132aa5c22e7fd6a3/  Written by I'm a security researcher on the GitHub Security Lab team. I try to help make open source software more secure by searching for vulnerabilities and working with maintainers to get them fixed. Related posts Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more GitHub Universe 2025 Last chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco. Register now \u003e",
  "image": "https://github.blog/wp-content/uploads/2025/07/wallpaper.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003e\u003ca href=\"https://sourceforge.net/projects/djvu/\"\u003eDjVuLibre\u003c/a\u003e version 3.5.29 was released today. It fixes CVE-2025-53367 (GHSL-2025-055), an out-of-bounds (OOB) write in the \u003ca href=\"https://sourceforge.net/p/djvu/djvulibre-git/ci/42029c33b2fb25bc1fa98c80b2be83a2fa23cce1/tree/libdjvu/MMRDecoder.cpp#l570\"\u003e\u003ccode\u003eMMRDecoder::scanruns\u003c/code\u003e\u003c/a\u003e method. The vulnerability could be exploited to gain code execution on a Linux Desktop system when the user tries to open a crafted document.\u003c/p\u003e\n\n\n\n\u003cp\u003eDjVu is a document file format that can be used for similar purposes to PDF. It is supported by \u003ca href=\"https://gitlab.gnome.org/GNOME/evince\"\u003eEvince\u003c/a\u003e and \u003ca href=\"https://gitlab.gnome.org/GNOME/papers\"\u003ePapers\u003c/a\u003e, the default document viewers on many Linux distributions. In fact, even when a DjVu file is given a filename with a .pdf extension, Evince/Papers will automatically detect that it is a DjVu document and run DjVuLibre to decode it.\u003c/p\u003e\n\n\n\n\u003cp\u003eAntonio found this vulnerability while researching the Evince document reader. He found the bug with fuzzing.\u003c/p\u003e\n\n\n\n\u003cp\u003eKev has developed a proof of concept exploit for the vulnerability, as demoed in this video.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"CVE-2025-53367: Exploitable OOB write in DjVuLibre\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/32kROHYhYVM?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe POC works on a fully up-to-date Ubuntu 25.04 (x86_64) with all the standard security protections enabled. To explain what’s happening in the video:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eKev clicks on a malicious DjVu document in his \u003ccode\u003e~/Downloads\u003c/code\u003e directory.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe file is named \u003ccode\u003epoc.pdf\u003c/code\u003e, but it’s actually in DjVu format.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe default document viewer (\u003ccode\u003e/usr/bin/papers\u003c/code\u003e) loads the document, detects that it’s in DjVu format, and uses DjVuLibre to decode it.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe file exploits the OOB write vulnerability and triggers a call to \u003ccode\u003esystem(\u0026#34;google-chrome https://www.youtube.com/…\u0026#34;)\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eRick Astley appears.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eAlthough the POC is able to bypass \u003ca href=\"https://en.wikipedia.org/wiki/Address_space_layout_randomization\"\u003eASLR\u003c/a\u003e, it’s somewhat unreliable: it’ll work 10 times in a row and then suddenly stop working for several minutes. But this is only a first version, and we believe it’s possible to create an exploit that’s significantly more reliable.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou may be wondering: why Astley, and not a calculator? That’s because \u003ccode\u003e/usr/bin/papers\u003c/code\u003e runs under an \u003ca href=\"https://apparmor.net/\"\u003eAppArmor\u003c/a\u003e profile. The profile prohibits you from starting an arbitrary process but makes an exception for google-chrome. So it was easier to play a YouTube video than pop a calc. But the AppArmor profile is not particularly restrictive. For example, it lets you write arbitrary files to the user’s home directory, except for the really obvious one like \u003ccode\u003e~/.bashrc\u003c/code\u003e. So it wouldn’t prevent a determined attacker from gaining code execution.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-vulnerability-details\"\u003eVulnerability Details\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://sourceforge.net/p/djvu/djvulibre-git/ci/42029c33b2fb25bc1fa98c80b2be83a2fa23cce1/tree/libdjvu/MMRDecoder.cpp#l570\"\u003e\u003ccode\u003eMMRDecoder::scanruns\u003c/code\u003e\u003c/a\u003e method is affected by an OOB-write vulnerability, because it doesn’t check that the \u003ccode\u003exr\u003c/code\u003e pointer stays within the bounds of the allocated buffer.\u003c/p\u003e\n\n\n\n\u003cp\u003eDuring the decoding process, run-length encoded data is written into two buffers: \u003ca href=\"https://sourceforge.net/p/djvu/djvulibre-git/ci/42029c33b2fb25bc1fa98c80b2be83a2fa23cce1/tree/libdjvu/MMRDecoder.h#l207\"\u003e\u003ccode\u003elineruns\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://sourceforge.net/p/djvu/djvulibre-git/ci/42029c33b2fb25bc1fa98c80b2be83a2fa23cce1/tree/libdjvu/MMRDecoder.h#l209\"\u003e\u003ccode\u003eprevruns\u003c/code\u003e\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e//libdjvu/MMRDecoder.h\nclass DJVUAPI MMRDecoder : public GPEnabled\n{\n...\npublic:\n\n  unsigned short *lineruns;\n...\n  unsigned short *prevruns;\n...\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe variables named \u003ca href=\"https://sourceforge.net/p/djvu/djvulibre-git/ci/42029c33b2fb25bc1fa98c80b2be83a2fa23cce1/tree/libdjvu/MMRDecoder.cpp#l583\"\u003e\u003ccode\u003epr\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://sourceforge.net/p/djvu/djvulibre-git/ci/42029c33b2fb25bc1fa98c80b2be83a2fa23cce1/tree/libdjvu/MMRDecoder.cpp#l584\"\u003e\u003ccode\u003exr\u003c/code\u003e\u003c/a\u003e point to the current locations in those buffers. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003escanruns\u003c/code\u003e does not check that those pointers remain within the bounds of the allocated buffers.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e//libdjvu/MMRDecoder.cpp\nconst unsigned short *\nMMRDecoder::scanruns(const unsigned short **endptr)\n{\n...\n  // Swap run buffers\n  unsigned short *pr = lineruns;\n  unsigned short *xr = prevruns;\n  prevruns = pr;\n  lineruns = xr;\n...\n  for(a0=0,rle=0,b1=*pr++;a0 \u0026lt; width;)\n    {\n     ...\n            *xr = rle; xr++; rle = 0;\n     ...\n            *xr = rle; xr++; rle = 0;\n ...\n          *xr = inc+rle-a0;\n          xr++;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis can lead to writes beyond the allocated memory, resulting in a heap corruption condition. An out-of-bounds read with \u003ccode\u003epr\u003c/code\u003e is also possible for the same reason.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe will publish the source code of our proof of concept exploit in a couple of weeks’ time in the \u003ca href=\"https://github.com/github/securitylab\"\u003eGitHub Security Lab repository\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-acknowledgements\"\u003eAcknowledgements\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe would like to thank Léon Bottou and Bill Riemers for responding incredibly quickly and releasing a fix less than two days after we first contacted them!\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-timeline\"\u003eTimeline\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e2025-07-01: Reported via email to the authors: Léon Bottou, Bill Riemers, Yann LeCun.\u003c/li\u003e\n\n\n\n\u003cli\u003e2025-07-01: Responses received from Bill Riemers and Léon Bottou.\u003c/li\u003e\n\n\n\n\u003cli\u003e2025-07-02: Fix commit added by Léon Bottou: \u003ca href=\"https://sourceforge.net/p/djvu/djvulibre-git/ci/33f645196593d70bd5e37f55b63886c31c82c3da/\"\u003ehttps://sourceforge.net/p/djvu/djvulibre-git/ci/33f645196593d70bd5e37f55b63886c31c82c3da/\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e2025-07-03: DjVuLibre version 3.5.29 released: \u003ca href=\"https://sourceforge.net/p/djvu/www-git/ci/9748b43794440aff40bae066132aa5c22e7fd6a3/\"\u003ehttps://sourceforge.net/p/djvu/www-git/ci/9748b43794440aff40bae066132aa5c22e7fd6a3/\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/4358136?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/4358136?v=4\u0026amp;s=200\" alt=\"Kevin Backhouse\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eI\u0026#39;m a security researcher on the GitHub Security Lab team. I try to help make open source software more secure by searching for vulnerabilities and working with maintainers to get them fixed.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/55253029?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/55253029?v=4\u0026amp;s=200\" alt=\"Antonio Morales\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003csection\u003e\n\t\u003ch2\u003e\n\t\tRelated posts\t\u003c/h2\u003e\n\t\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg\" width=\"44\" height=\"44\" alt=\"GitHub Universe 2025\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub Universe 2025\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eLast chance: Save $700 on your IRL pass to Universe and join us on Oct. 28-29 in San Francisco.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Register now \u0026gt;; ref_location:bottom recirculation;\" href=\"https://githubuniverse.com/?utm_source=Blog\u0026amp;utm_medium=GitHub\u0026amp;utm_campaign=module\" target=\"_blank\" aria-label=\"Register now \u0026gt;\"\u003e\n\t\t\t\t\tRegister now \u0026gt;\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-07-03T20:52:20Z",
  "modifiedTime": "2025-07-03T20:52:21Z"
}
