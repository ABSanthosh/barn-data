{
  "id": "7355f8bb-e4d8-4301-9a53-bc69d9b8d347",
  "title": "Why Organizations Need Expert Generalists",
  "link": "https://martinfowler.com/articles/expert-generalist.html#WhyOrganizationsNeedExpertGeneralists",
  "description": "",
  "author": "",
  "published": "2025-07-02T10:05:00-04:00",
  "source": "https://martinfowler.com/feed.atom",
  "categories": [
    "skip-home-page"
  ],
  "byline": "Unmesh Joshi",
  "length": 41757,
  "excerpt": "Being an Expert Generalist should be treated as a first-class skill, one that can be assessed and taught.",
  "siteName": "martinfowler.com",
  "favicon": "",
  "text": "Writing a sophisticated computer program often requires a lot of detailed knowledge. If we do this in Java, we need to know the syntax of the language, the wide range of libraries available to assist us in the work, the various tools required to verify and build our programs. If we do this in Python instead, we are faced with a different syntax, libraries that are named and work differently, a whole other ecosystem to build and run our work. Faced with these details, a natural response is to recruit people who are knowledgeable about a specific ecosystem. Thus we see job descriptions that say “at least three years of Java”, or even deeper requirements for subsets of that community, with experience in specific tools. What use is a skilled Python programmer to such a team? We've always felt that such desires are wrong-headed. The characteristics that we've observed separating effective software developers from the chaff aren't things that depend on the specifics of tooling. We rather appreciate such things as: the knowledge of core concepts and patterns of programming, a knack for decomposing complex work-items into small, testable pieces, and the ability to collaborate with both other programmers and those who will benefit from the software. Throw such a Python programmer into a Java team, and we'd expect them to prosper. Sure they would ask a lot of questions about the new language and libraries, we'd hear a lot of “how do you do this here?” But such questions are quickly answered, and the impediments of Java-ignorance soon wither away. An experienced Pythonista who understands the core patterns and practices of software development can be a productive member of a team building software in Java. Knowing how to handle snakes can be surprisingly handy. This echoes a long debate about the relative value of specialists and generalists. Specialists are seen as people with a deep skill in a specific subject, while generalists have broad but shallow skills. A dissatisfaction with that dichotomy led to the idea of “T-shaped people”: folks that combine deep knowledge in one topic, with a broad but shallow knowledge of many other topics. We've seen many such people quickly grow other deep legs, which doesn't do much for the “T-shape” name (as we'll discuss below), but otherwise leads to success. Often experience of a different environment leads to trying things that seem innovative in a new home. Folks that only work in a single technological neighborhood are at the constant risk of locking themselves into a knowledge silo, unaware of many tools that could help them in their work. This ability goes beyond just developer skills. We've seen our best business analysts gain deep skills in a couple of domains, but use their generalist skills to rapidly understand and contribute in new domains. Developers and User Experience folks often step outside “their lanes” to contribute widely in getting work done. We've seen this capability be an essential quality in our best colleagues, to the degree that its importance is something we've taken for granted. But increasingly we see the software industry push for increasing, narrower specialization. So over the last year or so we have started to resist this industry-wide push for narrow skills, by calling out this quality, which we call an Expert Generalist. Why did we use the word “expert”? There are two sides to real expertise. The first is the familiar depth: a detailed command of one domain's inner workings. The second, crucial in our fast-moving field is the ability to learn quickly, spot the fundamentals that run beneath shifting tools and trends, and apply them wherever we land. As an example from software teams, developers who roam across languages, architectures, and problem spaces may seem like “jack-of-all-trades, master-of-none,” yet repeated dives below surface differences help them develop durable, principle-level mastery. Over time these generalists can dissect unfamiliar challenges, spot first-principles patterns, and make confident design decisions with the assurance of a specialist - and faster. Being such a generalist is itself a sophisticated expertise. We've long noticed that not just anyone succeeds as an Expert Generalist, but once we understand the traits that are key for such Expert Generalists, organizations can shape learning programs, hiring filters, and career paths that deliberately develop them. Indeed our hiring and career progression at Thoughtworks has been cultivating this skill for over two decades, but doing so informally. We think the industry needs to change gears, and treat Expert Generalist as a first-class skill in its own right: something we name, assess, and train for. (But beware, we find many Expert Generalists, including at least one author of this article, cringe at the word “expert”.) The Characteristics of an Expert Generalist When we've observed Expert Generalists, there are certain attributes that stand out. Curiosity Expert Generalists display a lot of curiosity. When confronted with a new technology or domain, their default reaction is to want to discover more about it, to see how it can be used effectively. They are quite happy to spend time just exploring the new topic area, building up some familiarity before using it in action. For most, learning new topics is a pleasure in itself, whether or not it's immediately applicable to their work. This characteristic is noticeable when Expert Generalists get an answer to a question. Rather than just typing in some code from Stack Overflow, an Expert Generalist's curiosity usually motivates them to ensure they understand the answer, taking the opportunity to expand their knowledge, and check that the answer they got is appropriate. It's also present when asking a question. There is an art to asking questions that elicit deeper answers without leading the witness. Collaborativeness Learning about a new topic area may require reading, watching videos, and prototyping. But we see the greatest aid here is another vital characteristic: collaborativeness. A wise Expert Generalist knows that they can never really learn about most of the things they run into. Their T-shape will grow several legs, but never enough to span all the things they need to know, let alone want to know. Working with people who do have those deeper skills is essential to being effective in new domains. Working with an otherly-skilled worker allows the generalist to contribute while the skilled collaborator spots more effective paths that only a specialist would know. The generalist appreciates these corrections, learning from them. Learning involves both knowing more about the new domain, but also learning to differentiate between areas where the generalist can do primary contributions and areas where the generalist needs help from the specialist. We notice Expert Generalists are never afraid to ask for help, they know there is much they are ignorant of, and are eager to involve those who can navigate through those areas. An effective combination of collaborative curiosity requires humility. Often when encountering new domains we see things that don't seem to make sense. Effective generalists react to that by first understanding why this odd behavior is the way it is, because there's usually a reason, indeed a good reason considering its context. Sometimes, that reason is no longer valid, or was missing an important consideration in the first place. In that situation a newcomer can add considerable value by questioning the orthodoxy. But at other times the reason was, and is still valid - at least to some extent. Humility encourages the Expert Generalist to not leap into challenging things until they are sure they understand the full context. This humility extends to recognizing the different trade-offs we see across architectures. An architecture designed to support large volumes of simple transactions will differ from one designed to handle a few complex interactions. Expert Generalists are comfortable in a world where different trade-offs make sense in different circumstances, usually because their travels have exposed them to these differences. Customer Focus This curiosity and eagerness to collaborate with people with different skills does raise a danger. Someone driven by curiosity can chase every shiny object. This is where the characteristic of customer-focus comes into play. We are often impressed with how an Expert Generalist takes each unfamiliar technology and questions how it helps the customer. We are fans of Kathy Sierra's notion that our purpose as software developers is to help our customers become “badass” at what they do. Customer-focus is the necessary lens to focus curiosity. Expert generalists prioritize their attention on the things that will help them help their users to excel. This encourages learning about what their customers do, and how they can improve their work. It focuses attention on technologies that contribute to building those things. Customer-focus energizes collaboration, encouraging the exchange of information between customer and technologist, and allowing the Expert Generalist to coordinate other technologists towards enabling the customers' excellence. Favor Fundamental Knowledge Software development is a vast field, where nobody can know everything, or even a reasonable fraction of everything, so we all need to prioritize what topics we learn. Expert Generalists favor fundamental knowledge, that doesn't become outdated with changes when platforms update. These are often expressed as patterns or principles. Such knowledge tends to age slowly, and is applicable when folks move into new environments. For example the basic moves of refactoring are the same whatever language you are programming, the core patterns of distributed systems reappear regularly (and it's no coincidence that's why we wrote books on those topics - we like book sales that last for many years). Blend of Generalist and Specialist Skills Thus generalists often have deep knowledge of fundamentals, and we usually see them have deep knowledge of a few other topics too. They combine a broad general skill with several areas of deeper knowledge, usually acquired as it's necessary for products they've worked on, coupled with the curiosity to dig into things that puzzle most people. These deeper areas may not be relevant to every engagement they work on, but is a signal for their acumen and curiosity. We've learned to be suspicious of people who present as a generalist yet don't have a few deep specialties. We mentioned before that a common name for this skills profile is that of the “T-shaped” person, implying a blend of specialist and generalist skills. While the T-shape moniker did catch on, it comes with a major problem in the metaphor, we don't find such folks have only a single deeper skill. They usually have a few, of varying depth. We're not the only people to identify this problem, and there have been several other names proposed to describe this skill-set, although the alternatives all have their own problems. 1 1: Kent Beck came up with the metaphor of “paint drip people”, although a problem with this metaphor is that paint-drips aren't usually something we desire. “π-shape” at least admits two deeper skills, but again implies an arbitrary limit that doesn't work in practice. “Comb-shaped” implies many deeper skills, which is good, but it also implies they are all the same depth, which isn't true. The vertical stroke of a skill set represents broader, long-lasting domains, not specific tools or frameworks. An expert generalist therefore pursues depth in distributed-data systems—partitioning and replication strategies, fault-tolerance mechanisms, consistency models, and consensus algorithms—instead of mastering only Databricks notebooks. In the cloud, they focus on cloud-native architecture: auto-scaling heuristics, multi-region fail-over etc rather than focusing on AWS-specific configuration syntax. On the front end, they study browser-based UI architecture—rendering pipelines, state-reconciliation patterns, and accessibility primitives—instead of the latest React APIs. Sympathy for Related Domains Expert generalists often find themselves in unfamiliar territory—be it a new software stack, a new domain, or a new role. Rather than chasing exhaustive detail from day one, they cultivate a rough, perceptive sense of what works in the new environment. That helps them make choices that go with the grain—even when it differs from their previous experience. Jackie Stewart, a triple Formula 1 world champion (1969-93), described how, while he wasn't an engineer of the cars he drove, he still needed a sense of how they worked, how they responded to what the driver was trying to do, a sense he called mechanical sympathy. Martin Thompson brought this concept into software, by talking about how a similar knowledge of how computer hardware works is vital to writing high-performance software. We think that the notion of mechanical sympathy has a broader sense in software, in that we do need to cultivate such a sympathy for any adjacent domain to the ones we are working on. When working on a database design, we need such a sympathy for the user-interface so we can construct a design that will work smoothly with the user-experience. A user-experience designer needs such a sympathy with software constraints so when choosing between similarly valuable user flows, they take into account how hard it is to build them. This also shows itself with new teams. When joining a new team, expert generalists tend to listen to the established ways that a team works, introducing different approaches thoughtfully. Even when coming in as leaders, they don't default to tearing up existing workflows in favor of those more familiar to them. Their curiosity extends to understanding why different people work in different ways, trying out unfamiliar working styles, then incorporating their experience to develop practices to improve from the current state. Assessing Expert Generalists We have two crucial checkpoints for spotting —and then nurturing —expert generalists: the hiring interview and ongoing career progression. Hiring Traditional interview loops still revolve around product trivia—“Explain Spark’s shuffle stages,” “How does Databricks Delta time-travel work?” A candidate who has never touched those tools can still be exactly the kind of person we need: someone who quickly grasps unfamiliar concepts, breaks complex systems into manageable parts, and collaborates across functions. Focusing on a single stack or cloud provider risks filtering out such talent. To surface that potential, widen the conversation beyond tool recall. Ask candidates to talk through past experiences: How did they approach a particularly challenging situation? When have they ventured into an unfamiliar domain, and how did they get up to speed? How do they collaborate with people inside and outside their own organisation or discipline? These stories reveal learning velocity, systems thinking, and people skills—the raw material of an expert generalist. Example · Process-control engineer We once met an engineer whose entire résumé was industrial PLC work—no general-purpose language, no web, no cloud. Yet his record of diagnosing control-system failures and the questions he asked during the interview showed exceptional learning agility. Hired for those qualities, he grew into a respected technical leader and later a product owner. Rejecting him for not knowing “our” tools would have been a costly miss. Career progression Inside the organisation, narrow verticals can freeze growth: UI developers, QAs, data engineers, or cloud experts seldom step outside their lanes. The growth paths map one-to-one with vertical silos: UI Engineer → Senior UI Engineer → UI Architect, or Data Engineer → Senior Data Engineer → Principal Databricks Guru. The unintended message is, “wander outside your lane and your progress stalls. We have found that encouraging people to experiment—letting them make mistakes and learn in adjacent disciplines—yields remarkable benefits. A business analyst writing code out of curiosity, a front-end engineer dabbling in DevOps, a data engineer trying product analysis: each cross-pollination broadens both the individual and the team. Example · Medical-domain analyst A non-technical professional from healthcare joined us as a business analyst. His passion for tech pulled him into code reviews and pairing sessions. Over time he became an outstanding tech lead and a broader strategic thinker than many traditional “pure” engineers. Both stories underscore the same lesson: if we base assessment and advancement solely on a checklist of tools, we forfeit the chance to work with brilliant, adaptable people—and we hamper the organisation's ability to innovate. Growing Expert Generalists From Tools to Fundamentals IT trends get triggered by pivotal inventions that enable new business opportunities. Product providers and tool vendors quickly build products, and the industry focus often shifts to expertise in tools and frameworks rather than the underlying technical trends. For example, in the 1990s, when graphical-user-interface two-tier architectures were popular, the essential skill was mastering Object-Oriented Programming — its iterative, collaborative design — yet most attention centred on tools like Rational Rose, the C++ programming language, and frameworks such as Microsoft Foundation Classes. When the Web arrived, understanding Web architecture and global-scale caching was crucial, but early hype gravitated toward technologies like J2EE. In today's cloud era, with complex microservice based architectures, big-data technologies, and expansive DevOps toolchains, the foundational discipline of distributed systems is often overlooked while certifications in specific tools dominate. One of the biggest problems with excessive focus on tools and framework expertise is when it is cemented into organizational structures. Teams and organisations get structured around tool expertise, with hardened boundaries making it difficult for people from one team to acquire skills from others. Beyond language preferences like Python or Java, you can see this crystallise in the three most common software verticals—Application Development, Data Engineering, and DevOps. Are labels like “Application Development,” “DevOps,” and “Data Engineer” just harmless shorthand for the work we do? Not really. Once these words harden into career lanes, they solidify the very silos that the Agile and DevOps culture was meant to dismantle. The labels become an organisational anti-pattern—turning flow into a series of hand-offs when it should be a cross-functional sprint. All three share the same distributed-systems foundations, and anyone who masters those fundamentals can navigate all three without getting lost in each vertical's ever-growing toolset. An expert generalist recognizes this and makes the deliberate effort to master those fundamentals. Why does our attention keep drifting toward tool expertise? It isn't because people are shortsighted or lazy; it's because the fundamentals are hard to see amid the noise. Key ideas hide under stacks of product docs, YouTube tutorials, vendor blogs, and conference talks. At one end of the spectrum lie dense academic papers and university courses; at the other, vendor certifications tied to a single product. Connecting these dots — cutting through the surface to reach the essentials — takes deliberate effort. One proven aid is the language of patterns: reusable problem-solution pairs that capture the core principle without the brand labels. That's why we belive in investing in exploring, distilling, and sharing such patterns — so the industry conversation can shift from “Which tool should I learn next?” to “Which underlying principles and patterns must I master?” In our experience, the good grasp of this common language of patterns and principles also strengthens the product-service partnership. Today the relationship is often one-way: product teams ship features, service teams consume APIs. Product teams decide how to certify an engineer as an expert in a product and service teams aim to do those certifications. Cloud providers and tool vendors often demand a certain number of “certified professionals” before they will recognise a service provider as a competent partner. Yet our experience shows little correlation between certifications and competence. The focus on fundamentals pays off when competence is most needed: an engineer versed in Raft can untangle a Kubernetes control-plane stall that might puzzle several certified admins, and a Delta Lake write anomaly can be resolved from first-principles reasoning about optimistic-concurrency control instead of searching vendor docs. Once developers across roles share the lingua franca of a system's internals, the partnership becomes bidirectional — both sides can diagnose, propose, and refine solutions together. Better yet, the engineers who have a good grasp of the fundamentals are able to partner well with multiple product and platform teams, without needing to have product specific training for each product An Example Workshop: Breaking silos and building partnerships We've seen that we can grow the Expert Generalist skill through mentoring and exposure to varied ecosystems, but one of the consequences of recognizing Expert Generalist as a first-class skill is that we should provide training in a similar way that we do with specialist skills. Such training currently barely exists in our profession. We've begun to fill that gap with workshops that are deliberately focused on developing the Expert Generalist competence, and we think there should be more training along these lines. To help stimulate thinking about this, here's the details of such a workshop, aimed at developers to connect Application Development, Data Engineering, and DevOps. The workshop views this work through a distributed systems lens, shifting attention to shared building blocks and establishing a common language across teams. Although this example is developer-centric, we think the same principle can be adapted just as effectively to any role that benefits from cross-disciplinary insight. As we saw earlier, each discipline—Application Development, Data Engineering, and DevOps—faces the same distributed-systems realities, yet we still lack a shared language. The key challenges of these systems are the same. They must replicate state, tolerate partial failures, and still offer consistency guarantees to end users. A catalogue of patterns around the implementation of partitioning, replication, consistency, and consensus—that lets every team talk about the fundamentals without tool-specific jargon is a good start. One workshop will not turn people into expert generalists, but it does give them a head-start and a clear window into the challenges their peers tackle every day. That visibility lowers the barrier to cross-discipline tasks and deepens everyone's understanding of the products and platforms they use. The workshop structure - Building the miniature One of the challenges in teaching the abstract patterns is that the developers need to do some mental mapping to connect the pattern to the product in use. This is why we chose an approach to structure the workshops around specific products, but then focus on the patterns that are most relevant and using the product as a window into the broader concepts. The way we structured the workshops to teach distributed-system patterns, is by coding pocket versions of Kafka, Kubernetes, and Delta Lake. The idea is to pick a flagship product from each broad area of specialty, and build it step by step. Implementing a flagship system in just a few hundred lines flips your perspective from 'a user' of a product to 'a builder'. An important mindset shift. To keep the exercise grounded in reality, write it in the product's own language, mirror its file and method names, and rely on real infrastructure — ZooKeeper or etcd, an on-disk log, live sockets. The result stays close enough to the original to highlight the pivotal design choices while still giving you a safe canvas for experimentation. This approach is powerful, because each target is often open source, the moment the miniature works, you can open the full codebase on GitHub, recognise the directory structure, and feel confident submitting a patch. The miniature is not a toy; it is a gateway. We have three workshops, one for each of the three systems. Build Your Own Kafka — a miniature written in Java. We use ZooKeeper for membership and store every message in a single append-only log. Even on one node you meet the classic fsync dilemma: flush every write for safety or batch for speed. Add a second process and you're suddenly faced with many decisions. You need partition leader election, quorum acknowledgements, an in-sync replica list, and a high-water-mark so consumers never read uncommitted data. (A cluster-wide controller comes later, once multiple partitions appear.) Each mechanism maps to a production feature in Kafka. After walking this code you recognise why a broker stalls when a replica slows and know exactly which metric to graph next time it happens. The takeaway pattern is simple: an append-only log guarded by quorum replication—a design you will encounter throughout modern distributed systems. Kubernetes from the Inside Out. Start by writing a controller that watches a JSON document in etcd, then calls reconcile() until the local Docker daemon reflects that desired state. Very quickly you have to choose how to list running containers, queue events, and keep spec and status distinct—exactly the concerns that dominate the Kubernetes code base. Add real failure cases and things get tricky. What should the controller do when a container exits? How does a Postgres container keep its data? Each decision forces you to reason about restart policies and persistent-volume claims. After that exercise, the dense Go structs in kube-controller-manager feel like natural continuations of a model you already understand. The core learning: the power of a declarative desired state converged by reconcile loops - the common pattern of orchestration in modern distributed systems ACID on Object Storage - A miniature Delta Lake. Create a directory of Parquet files and pair it with a text log; each data change appends a JSON file naming the new data file. Move this setup into a miniature object store and every append becomes its own key-value write, with the Parquet file as the value. To handle concurrent writers, wrap the append in an optimistic lock that retries if the log tail changes. After a dozen commits start-up drags, so you add a checkpoint file and learn first-hand why Delta Lake emits one every N transactions. From there, time-travel queries drop out naturally from the log-plus-checkpoint design. The key takeaway, achieving ACID guarantees on eventually consistent storage through an immutable transaction log, optimistic concurrency, and periodic checkpointing - a pattern vital for modern data lakehouses. Each miniature leaves you with a concrete pattern — append-only log, reconcile loop, optimistic commit—that travels well beyond the original context. When the next new tool arrives, you'll recognise the pattern first and the product name second, which is precisely the habit that turns professionals into Expert Generalists. Expert Generalists still need Specialists While we've spent this article praising the Expert Generalist, we simultaneously do not deny the value of specialist knowledge. Even the most skilled Expert Generalist may have to spend valuable time figuring out the details of how to do something with a new platform. Their knowledge of common patterns helps them know what to look for, their skill helps them research faster, but it's still longer than what a specialist already knows. Furthermore an Expert Generalist may miss a vital technique that's particular to a domain, essentially because the Expert Generalist doesn't know what they don't know - a trap a specialist is far less likely to fall into. In our experience, a team of Expert Generalists without specialist knowledge of the core technology of their work will still get the job done, but will be significantly slower than a team with specialist skills on board. The point here is that to be the most efficient, the team needs some specialist skill. There needs to be at least one deep specialist on a team for any core technology that the team is working with. But we've found that, providing the team is collaborating effectively, we don't need very many. Often one or maybe two people is quite enough. With someone with specialist knowledge present, a less knowledgeable Expert Generalist can quickly ask a question when they are faced with a task that needs the depth. Similarly the specialist should review the work of less knowledgeable colleagues, so they can spot when folks are taking the wrong path and show them the better way. We think it is important to have such a specialist available full-time on the team. Much of their value comes from being responsive to questions and issues as they come up. In this situation, the important cost to monitor is the Cost of Delay - the speed of resolving questions is much more important that the utilization of the specialists. So it's worth having a full-time specialist even if it means they aren't fully occupied.2 2: This also indicates how to tell if you don't have enough specialists on a team: measure how long it takes to answer questions. This follows Reinertsen's advice to monitor queue sizes. All of this does need everyone involved to have right kind of collaborative attitudes. The specialist needs to be someone who is keen to share their knowledge with everyone else on the team, and is approachable with dumb questions. The Expert Generalists need be comfortable demonstrating their ignorance, and actually enjoy being told they are doing something wrong in an unfamiliar environment. All in all there needs to be plenty of psychological safety around. And, of course, the people with specialist skills can often be Expert Generalists themselves, with the specialty being legs in their T. The flip-side of this is the danger of teams that consist only of specialists. Things outside their specialty can easily be missed. For example a data engineering team that's full of specialist data engineers can miss anything that isn't specific to data engineering, such as quality strategy, release management, and value articulation. Expert Generalists in the Age of LLMs Large Language Models and tools based on LLMs are growing in prominence. We've observed that Expert Generalist capabilities are considerably more valuable with these LLMs. The relationship between Expert Generalists and LLMs is often similar to that between Expert Generalists and specialists in a team. Similarly to a specialist, an LLM can rapidly answer questions that an Expert Generalist will have when working in a new domain. This significantly lowers the barrier for exploring completely new and unfamiliar tools, offering a quick way to get started. An Expert Generalist, armed with a solid grasp of fundamentals and the knack to master principles and patterns, can truly harness the power of LLMs. They're not just asking an LLM to write code in a new language; they're able to ask more insightful questions, critically assess the AI-generated suggestions against their broader understanding, and adapt those suggestions to fit sound architectural patterns. Their curiosity discourages them from simply accepting an answer, but to understand how proposed solutions work - which is exactly the behavior needed to overcome the unreliability inherent in LLM-given advice. We've noticed that Expert Generalists approach working with LLMs in a different way. Rather than looking for “the answer”, they prompt them to generate questions, explaining mechanisms, and providing examples and even tools that help explore the underlying mechanisms of an idea. So, despite the early days of this technology, we think that the rise of LLMs will further enhance the importance of skilled Expert Generalists, and thus incentivize enterprises to put more effort into identifying, and training people with these skills. Why Organizations Need Expert Generalists The simplest reason why organizations should pay more attention to Expert Generalists is the loss of opportunities to staff teams. Finding exactly the right kind of specialist limits the candidate pool, either from hiring from outside, or by internal transfers. As long as there's enough specialist skill available to assist, Expert Generalists often do as well, indeed often better, than adding another specialist. But the benefits of Expert Generalists go further than that. Modern software systems involve many components, needing collaboration between specialties to deliver features to production. Too often we see stifled communication, with folks blocked while waiting on dependent teams to schedule necessary work. Lots of these queues between teams impedes flow, slowing down the release of valuable features. Expert Generalists can unplug the pipes. Sometimes they do this by making the interaction smoother due to their overlapping skills, sometimes they know enough to do some of these dependent tasks themselves. Indeed one of the greatest values an Expert Generalist brings is the ability to Get Things Done. The customer-focus drives a good Expert Generalist to use their collaborativeness, curiosity, and skills blend to drive features to completion. If it requires crossing competency boundaries, they will find a way to do it. If they need to rapidly acquire some deeper skills, they will do so. They do risk taking on more than they can chew in the process, but that ability to close the deal is often imperative in getting critical software out the door. Expert Generalists are particularly valuable at working across the specialist skill boundaries, handling interactions and filling in gaps. The ability to see complex systems across their full breadth can be essential when things go wrong. Faults are often not in the depth of a single technology, but in the implicit interactions between them. If specialists can't see the whole picture, they easily miss what falls between the gaps. The presence of Expert Generalists crossing the competency boundaries can also increase knowledge transfer between competency groups, increasing everyone's sympathy for related domains. This mechanism also encourages specialists to explore the Expert Generalist skill for themselves. Specialists tend to use their familiar tool in contexts where it doesn't make sense. We can't fault them for that, if you've never seen a screwdriver, you'll naturally reach for a hammer first. Expert Generalists are more likely to pick appropriate tools. There is a risk there, of introducing too many tools into an environment. Sometimes it's better to use a familiar-but-inferior tool, than to introduce a complicated tool for a narrow task that's a burden once the Expert Generalist moves on. A wise Expert Generalist will take that factor into account. The broad view that Expert Generalist develops naturally leads them towards leadership roles. Crossing specialties encourages them to develop communication skills, particularly skills on explaining different disciplines to each other. Collaboration naturally grows relationships with key people around an organization. Customer-focus, Getting Things Done, build credibility with business leadership. Organizations that take deliberate steps to nurture Expert Generalists can reap the reward by growing technologists with a strategic perspective, without necessarily pushing them into management tracks. All that said, despite the fact that we are clearly big proponents of Expert Generalists, there are downsides. Perhaps the greatest is that although we've found it possible to assess people for their Expert Generalist skill, it's a difficult task, often requiring intensive participation from known-capable Expert Generalists. Years on the job, quizzes, and certifications are much easier tests to administer (although we are cynical about how they relate to delivering value). A team full of Expert Generalists, but without particular skills for the central domains and platforms they are working on, will be less productive - at least until the Expert Generalists develop those skills. As we mentioned earlier, it's important to have someone with those deep skills on the team, who can either be specialist in that domain or an Expert Generalist who has that as one of the legs in their “T”. All in all, we've seen so many of our colleagues develop their Expert Generalist skill, without the name, and build upon it to be critical parts of successful technology and business initiatives. They are the people we have learned from, the people our clients go to with problems to solve and opportunities to exploit. Our hope with this article is that more people in our profession (and perhaps others) will start to recognize “Expert Generalist” as a first-class skill, and put more effort in describing its characteristics, how to assess it, and how to grow it. We believe that giving this skill proper recognition can do much to improve the practice of our profession. Takeaways Expert Generalists share several key traits Curiosity Collaborativeness Customer-focus Favoring fundamental knowledge A blend of specialist and generalist skills Sympathy for related domains Teams should blend Expert Generalists with a few key specialists Expert Generalist skills are enhanced by LLMs Expert Generalists ensure complex tasks get done We need to treat Expert Generalist as a first class skill Evaluate people's skill as an Expert Generalist in hiring and promotion Develop training just as much as for specialist skills",
  "image": "https://martinfowler.com/articles/expert-generalist/card.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eWriting a sophisticated computer program often requires a lot of detailed\n      knowledge. If we do this in Java, we need to know the syntax of the\n      language, the wide range of libraries available to assist us in the work,\n      the various tools required to verify and build our programs. If we do this\n      in Python instead, we are faced with a different syntax, libraries that are named\n      and work differently, a whole other ecosystem to build and run our work.\u003c/p\u003e\n\n\u003cp\u003eFaced with these details, a natural response is to recruit people who\n      are knowledgeable about a specific ecosystem. Thus we see job descriptions that say “at\n      least three years of Java”, or even deeper requirements for subsets of that\n      community, with experience in specific tools. What use is a skilled\n      Python programmer to such a team?\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ve always felt that such desires are wrong-headed. The characteristics\n      that we\u0026#39;ve observed separating effective software developers from the chaff\n      aren\u0026#39;t things that depend on the specifics of tooling. We rather appreciate\n      such things as: the knowledge of core concepts and patterns of programming, a\n      knack for decomposing complex work-items into small, testable pieces, and the\n      ability to collaborate with both other programmers and those who will\n      benefit from the software.\u003c/p\u003e\n\n\u003cp\u003eThrow such a Python programmer into a Java team, and we\u0026#39;d expect them to\n      prosper. Sure they would ask a lot of questions about the new language and\n      libraries, we\u0026#39;d hear a lot of “how do you do this here?” But such questions\n      are quickly answered, and the impediments of Java-ignorance soon wither\n    away.\u003c/p\u003e\n\n\u003cdiv id=\"PythonInJavaShop.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/expert-generalist/PythonInJavaShop.png\"/\u003e\u003c/p\u003e\u003cp\u003eAn experienced Pythonista who understands\n    the core patterns and practices of software development can be a productive\n    member of a team building software in Java. Knowing how to handle\n    snakes can be surprisingly handy.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThis echoes a long debate about the relative value of specialists and\n    generalists. Specialists are seen as people with a deep skill in a specific\n    subject, while generalists have broad but shallow skills. A dissatisfaction\n    with that dichotomy led to the idea of “T-shaped people”: folks that combine\n    deep knowledge in one topic, with a broad but shallow knowledge of many\n    other topics. We\u0026#39;ve seen many such people quickly grow other deep legs,\n    which doesn\u0026#39;t do much for the “T-shape” name (as we\u0026#39;ll discuss below), but otherwise leads to\n    success. Often experience of a different environment leads to trying things\n    that seem innovative in a new home. Folks that only work in a single\n    technological neighborhood are at the constant risk of locking themselves\n    into a knowledge silo, unaware of many tools that could help them in their\n    work.\u003c/p\u003e\n\n\u003cp\u003eThis ability goes beyond just developer skills. We\u0026#39;ve seen our best\n    business analysts gain deep skills in a couple of domains, but use their\n    generalist skills to rapidly understand and contribute in new domains.\n    Developers and User Experience folks often step outside “their lanes” to\n    contribute widely in getting work done. We\u0026#39;ve seen this capability be an\n    essential quality in our best colleagues, to the degree that its importance\n    is something we\u0026#39;ve taken for granted.\u003c/p\u003e\n\n\u003cp\u003eBut increasingly we see the software industry push for\n      increasing, narrower specialization.\u003c/p\u003e\n\n\u003cp\u003eSo over the last year or so we have started to resist this industry-wide\n    push for narrow skills, by calling out this quality, which we call an\n    \u003cb\u003eExpert Generalist\u003c/b\u003e. Why did we use the word “expert”? \n        There are two sides to real expertise. The first is the familiar depth: a detailed command\n        of one domain\u0026#39;s inner workings. The second, crucial in our fast-moving field\n        is the ability to learn quickly, spot the\n        fundamentals that run beneath shifting tools and trends, and apply them wherever we land.\n        As an example from software teams, developers who roam across languages, architectures, and problem spaces may seem like\n        “jack-of-all-trades, master-of-none,” yet repeated dives below surface differences help them\n        develop durable, principle-level mastery. Over time these generalists can dissect unfamiliar\n        challenges, spot first-principles patterns, and make confident design decisions with the\n        assurance of a specialist - and faster. Being such a generalist is itself a\n        sophisticated expertise. \u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ve long noticed that not just anyone succeeds as an Expert Generalist,\n    but once we understand the traits that are key for such Expert Generalists,\n    organizations can shape learning programs, hiring filters, and career paths\n    that deliberately develop them. Indeed our hiring and career progression at\n    Thoughtworks has been cultivating this skill for over two decades, but doing\n    so informally. We think the industry needs to change gears, and treat Expert\n    Generalist as a first-class skill in its own right: something we name,\n    assess, and train for. (But beware, we find many Expert Generalists,\n    including at least one author of this article, cringe at the word “expert”.)\u003c/p\u003e\n\n\u003csection id=\"TheCharacteristicsOfAnExpertGeneralist\"\u003e\n\u003ch2\u003eThe Characteristics of an Expert Generalist\u003c/h2\u003e\n\n\u003cp\u003eWhen we\u0026#39;ve observed Expert Generalists, there are certain attributes\n      that stand out.\u003c/p\u003e\n\n\u003csection id=\"Curiosity\"\u003e\n\u003ch3\u003eCuriosity\u003c/h3\u003e\n\n\n\n\u003cp\u003eExpert Generalists display a lot of curiosity. When confronted with a new\n        technology or domain, their default reaction is to want to discover more about it, to see\n        how it can be used effectively. They are quite happy to spend time just exploring the new\n        topic area, building up some familiarity before using it in action. For most, learning new\n        topics is a pleasure in itself, whether or not it\u0026#39;s immediately\n      applicable to their work.\u003c/p\u003e\n\n\u003cp\u003eThis characteristic is noticeable when Expert Generalists get an answer\n      to a question. Rather than just typing in some code from Stack Overflow,\n      an Expert Generalist\u0026#39;s curiosity usually motivates them to ensure they\n      understand the answer, taking the opportunity to expand their knowledge,\n      and check that the answer they got is appropriate. It\u0026#39;s also present when\n      asking a question. There is an art to asking questions that elicit deeper\n      answers without leading the witness. \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"Collaborativeness\"\u003e\n\u003ch3\u003eCollaborativeness\u003c/h3\u003e\n\n\u003cp\u003eLearning about a new topic area may require reading, watching videos, and prototyping. But\n        we see the greatest aid here is another vital characteristic: collaborativeness.\n        A wise Expert Generalist knows that they can never really learn about most of the things\n        they run into. Their T-shape will grow several legs, but never enough to span all the\n        things they need to know, let alone want to know. Working with people who do have those\n        deeper skills is essential to being effective in new domains. \u003c/p\u003e\n\n\n\n\u003cp\u003eWorking with an otherly-skilled worker allows the generalist to\n        contribute while the skilled collaborator spots more effective paths that\n        only a specialist would know. The generalist appreciates these\n        corrections, learning from them. Learning involves both knowing more about\n        the new domain, but also learning to differentiate between areas where the\n        generalist can do primary contributions and areas where the generalist\n        needs help from the specialist. We notice Expert Generalists are never\n        afraid to ask for help, they know there is much they are ignorant of, and\n        are eager to involve those who can navigate through those areas.\u003c/p\u003e\n\n\u003cp\u003eAn effective combination of collaborative curiosity requires\n      humility. Often when encountering new domains we see things that don\u0026#39;t\n      seem to make sense. Effective generalists react to that by first\n      understanding why this odd behavior is the way it is, because there\u0026#39;s\n      usually a reason, indeed a good reason considering its context. Sometimes,\n      that reason is no longer valid, or was missing an important consideration\n      in the first place. In that situation a newcomer can add considerable\n      value by questioning the orthodoxy. But at other times the reason was, and\n      is still valid - at least to some extent. Humility encourages the Expert\n      Generalist to not leap into challenging things until they are sure they\n      understand the full context.\u003c/p\u003e\n\n\u003cp\u003eThis humility extends to recognizing the different trade-offs we see\n      across architectures. An architecture designed to support large volumes\n      of simple transactions will differ from one designed to handle a few\n      complex interactions. Expert Generalists are comfortable in a world where different\n      trade-offs make sense in different circumstances, usually because their\n      travels have exposed them to these differences.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"CustomerFocus\"\u003e\n\u003ch3\u003eCustomer Focus\u003c/h3\u003e\n\n\n\n\u003cp\u003eThis curiosity and eagerness to collaborate with people with different skills does raise a\n        danger. Someone driven by curiosity can chase every shiny object. This is where the\n        characteristic of customer-focus comes into play. We are often impressed with\n        how an Expert Generalist takes each unfamiliar technology and questions how it helps the\n        customer. We are fans of Kathy Sierra\u0026#39;s notion that our purpose as software developers is to \u003ca href=\"https://www.amazon.com/gp/product/1491919019/ref=as_li_tl?ie=UTF8\u0026amp;camp=1789\u0026amp;creative=9325\u0026amp;creativeASIN=1491919019\u0026amp;linkCode=as2\u0026amp;tag=martinfowlerc-20\"\u003ehelp our\n      customers become “badass”\u003c/a\u003e at what they do.\u003c/p\u003e\n\n\u003cp\u003eCustomer-focus is the necessary lens to focus curiosity. Expert\n        generalists prioritize their attention on the things that will help them\n        help their users to excel. This encourages learning about what their\n        customers do, and how they can improve their work. It focuses attention on\n        technologies that contribute to building those things. Customer-focus\n        energizes collaboration, encouraging the exchange of information between\n        customer and technologist, and allowing the Expert Generalist to\n        coordinate other technologists towards enabling the customers\u0026#39;\n      excellence.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"FavorFundamentalKnowledge\"\u003e\n\u003ch3\u003eFavor Fundamental Knowledge\u003c/h3\u003e\n\n\n\n\u003cp\u003eSoftware development is a vast field, where nobody can know everything, or even a\n        reasonable fraction of everything, so we all need to prioritize what topics we learn. Expert\n        Generalists favor fundamental\n          knowledge, that doesn\u0026#39;t become outdated with changes when platforms update. These are\n        often expressed as patterns or principles. Such knowledge tends to age slowly, and is\n        applicable when folks move into new environments. For example the basic moves of refactoring\n        are the same whatever language you are programming, the core patterns of distributed systems\n        reappear regularly (and it\u0026#39;s no coincidence that\u0026#39;s why we wrote books on those topics - we\n        like book sales that last for many years).\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"BlendOfGeneralistAndSpecialistSkills\"\u003e\n\u003ch3\u003eBlend of Generalist and Specialist Skills\u003c/h3\u003e\n\n\u003cp\u003eThus generalists often have deep knowledge of fundamentals, and we usually see them have\n        deep knowledge of a few other topics too. They combine a broad general skill with several\n        areas of deeper knowledge, usually acquired as it\u0026#39;s necessary for products they\u0026#39;ve worked\n        on, coupled with the curiosity to dig into things that puzzle most people. These deeper\n        areas may not be relevant to every engagement they work on, but is a signal for their acumen\n        and curiosity. We\u0026#39;ve learned to be suspicious of people who present as a generalist yet\n        don\u0026#39;t have a few deep specialties.\u003c/p\u003e\n\n\u003cp\u003eWe mentioned before that a common name for this skills profile is that\n      of the “T-shaped” person, implying a blend of specialist and generalist\n      skills.  While the T-shape moniker did catch on, it comes with a\n      major problem in the metaphor, we don\u0026#39;t find such folks have only a\n      single deeper skill. They usually have a few, of varying depth. We\u0026#39;re not\n      the only people to identify this problem, and there have been several\n      other names proposed to describe this skill-set, although the alternatives\n      all have their own problems. \u003cspan data-footnote=\"footnote-t-shape\"\u003e1\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cspan\u003e1: \u003c/span\u003e\n        Kent Beck came up with the metaphor of \u003ca href=\"https://tidyfirst.substack.com/p/paint-drip-people\"\u003e“paint drip people”\u003c/a\u003e, although a problem\n        with this metaphor is that paint-drips aren\u0026#39;t usually something we\n        desire. “π-shape” at least admits two deeper skills, but again implies an\n        arbitrary limit that doesn\u0026#39;t work in practice. “Comb-shaped” implies\n        many deeper skills, which is good, but it also implies they are all the\n        same depth, which isn\u0026#39;t true.\u003c/p\u003e\n\n\u003cdiv id=\"t-shape.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/expert-generalist/t-shape.png\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e\n        The vertical stroke of a skill set represents broader, long-lasting\n        domains, not specific tools or frameworks. An expert generalist therefore pursues depth\n        in distributed-data systems—partitioning and replication strategies, fault-tolerance\n        mechanisms, consistency models, and consensus algorithms—instead of mastering only\n        Databricks notebooks. In the cloud, they focus on cloud-native architecture: auto-scaling\n        heuristics, multi-region fail-over etc rather than\n        focusing on AWS-specific configuration syntax. On the front end, they study browser-based\n        UI architecture—rendering pipelines, state-reconciliation patterns, and accessibility\n        primitives—instead of the latest React APIs.\n      \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"SympathyForRelatedDomains\"\u003e\n\u003ch3\u003eSympathy for Related Domains\u003c/h3\u003e\n\n\n\n\u003cp\u003eExpert generalists often find themselves in unfamiliar territory—be \n         it a new software stack, a new domain, or a new role. Rather than chasing \n         exhaustive detail from day one, they cultivate a rough, perceptive sense of\n          what works in the new environment. That helps them make choices that \n          go with the grain—even when it differs from their previous experience.\n        \u003c/p\u003e\n\n\u003cp\u003eJackie Stewart, a triple Formula 1 world champion (1969-93),\n        described how, while he wasn\u0026#39;t an engineer of the cars he drove, he\n        \u003ca href=\"https://www.carandclassic.com/magazine/mechanical-sympathy-understanding-our-classics/\"\u003estill needed a sense of how they\n        worked\u003c/a\u003e, how they responded to what the driver was trying to do, a\n        sense he called mechanical sympathy.\n        Martin Thompson \u003ca href=\"https://mechanical-sympathy.blogspot.com/2011/07/why-mechanical-sympathy.html\"\u003ebrought this\n        concept into software\u003c/a\u003e, by talking about how a similar knowledge\n        of how computer hardware works is vital to writing high-performance\n        software. \u003c/p\u003e\n\n\n\n\u003cp\u003eWe think that the notion of mechanical sympathy has a broader\n        sense in software, in that we do need to cultivate such a\n        sympathy for any adjacent domain to the ones we are working on. When\n        working on a database design, we need such a sympathy for the\n        user-interface so we can construct a design that will work smoothly with\n        the user-experience. A user-experience designer needs such a sympathy\n        with software constraints so when choosing between similarly valuable\n        user flows, they take into account how hard it is to build them.\u003c/p\u003e\n\n\u003cp\u003eThis also shows itself with new teams. When joining a new team, expert\n        generalists tend to listen to the established ways that a team works,\n        introducing different approaches thoughtfully. Even when coming in as\n        leaders, they don\u0026#39;t default to tearing up existing workflows in favor of\n        those more familiar to them. Their curiosity extends to understanding why\n        different people work in different ways, trying out unfamiliar working\n        styles, then incorporating their experience to develop practices to\n        improve from the current state.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003csection id=\"AssessingExpertGeneralists\"\u003e\n\u003ch2\u003eAssessing Expert Generalists\u003c/h2\u003e\n\n\u003cp\u003e\n          We have two crucial checkpoints for spotting —and then nurturing\n          —expert generalists: the hiring interview and ongoing career\n          progression.\n        \u003c/p\u003e\n\n\u003csection id=\"Hiring\"\u003e\n\u003ch3\u003eHiring\u003c/h3\u003e\n\n\n\n\u003cp\u003e\n            Traditional interview loops still revolve around product\n            trivia—“Explain Spark’s shuffle stages,” “How does Databricks Delta\n            time-travel work?” A candidate who has never touched those tools can\n            still be exactly the kind of person we need: someone who quickly\n            grasps unfamiliar concepts, breaks complex systems into manageable\n            parts, and collaborates across functions. Focusing on a single stack\n            or cloud provider risks filtering out such talent.\n          \u003c/p\u003e\n\n\u003cp\u003e To surface that potential, widen the conversation beyond tool\n          recall. Ask candidates to talk through past experiences: \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eHow did they approach a particularly challenging situation?\u003c/li\u003e\n\n\u003cli\u003eWhen have they ventured into an unfamiliar domain, and how did\n          they get up to speed?\u003c/li\u003e\n\n\u003cli\u003eHow do they collaborate with people inside and outside their own organisation or\n          discipline?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese stories reveal learning velocity, systems thinking,\n          and people skills—the raw material of an expert generalist. \u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample · Process-control engineer\u003c/b\u003e We once met an engineer\n            whose entire résumé was industrial PLC work—no general-purpose\n            language, no web, no cloud. Yet his record of diagnosing\n            control-system failures and the questions he asked during the\n            interview showed exceptional learning agility. Hired for those\n            qualities, he grew into a respected technical leader and later a\n            product owner. Rejecting him for not knowing “our” tools would have\n            been a costly miss. \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"CareerProgression\"\u003e\n\u003ch3\u003eCareer progression\u003c/h3\u003e\n\n\u003cp\u003e\n            Inside the organisation, narrow verticals can freeze growth: UI\n            developers, QAs, data engineers, or cloud experts seldom step\n            outside their lanes. The growth paths map one-to-one with vertical\n            silos: UI Engineer → Senior UI Engineer → UI Architect, or Data\n            Engineer → Senior Data Engineer → Principal Databricks Guru. The\n            unintended message is, “wander outside your lane and your progress\n            stalls.\n          \u003c/p\u003e\n\n\u003cp\u003e\n            We have found that encouraging people to experiment—letting them\n            make mistakes and learn in adjacent disciplines—yields remarkable\n            benefits. A business analyst writing code out of curiosity, a\n            front-end engineer dabbling in DevOps, a data engineer trying\n            product analysis: each cross-pollination broadens both the\n            individual and the team.\n          \u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample · Medical-domain analyst\u003c/b\u003e A non-technical professional\n            from healthcare joined us as a business analyst. His passion for\n            tech pulled him into code reviews and pairing sessions. Over time he\n            became an outstanding tech lead and a broader strategic thinker than\n            many traditional “pure” engineers. \u003c/p\u003e\n\u003c/section\u003e\n\n\u003cp\u003e\n          Both stories underscore the same lesson: if we base assessment and\n          advancement solely on a checklist of tools, we forfeit the chance to\n          work with brilliant, adaptable people—and we hamper the organisation\u0026#39;s\n          ability to innovate.\n        \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"GrowingExpertGeneralists\"\u003e\n\u003ch2\u003eGrowing Expert Generalists\u003c/h2\u003e\n\n\u003csection id=\"FromToolsToFundamentals\"\u003e\n\u003ch3\u003eFrom Tools to Fundamentals\u003c/h3\u003e\n\n\u003cp\u003e IT trends get triggered by pivotal inventions that enable new business\n      opportunities. Product providers and tool vendors quickly build products,\n      and the industry focus often shifts to expertise in tools and frameworks\n      rather than the underlying technical trends. For example, in the 1990s,\n      when graphical-user-interface two-tier architectures were popular, the\n      essential skill was mastering Object-Oriented Programming — its iterative,\n      collaborative design — yet most attention centred on tools like Rational\n      Rose, the C++ programming language, and frameworks such as Microsoft\n      Foundation Classes. When the Web arrived, understanding Web architecture\n      and global-scale caching was crucial, but early hype gravitated toward\n      technologies like J2EE. In today\u0026#39;s cloud era, with complex microservice\n      based architectures, big-data technologies, and expansive DevOps\n      toolchains, the foundational discipline of distributed systems is often\n      overlooked while certifications in specific tools dominate. \u003c/p\u003e\n\n\n\n\u003cp\u003eOne of the biggest problems with excessive focus on tools and framework\n          expertise is when it is cemented into organizational structures. Teams and\n          organisations get structured around tool expertise, with hardened\n          boundaries making it difficult for people from one team to acquire skills\n          from others. Beyond language preferences like Python or Java, you can see\n          this crystallise in the three most\n          common software verticals—Application Development, Data Engineering,\n          and DevOps. Are labels like “Application Development,” “DevOps,” and “Data Engineer” just harmless\n          shorthand for the work we do? Not really. Once these words harden into career lanes, they\n          solidify the very silos that the \u003cb\u003eAgile and DevOps culture\u003c/b\u003e was meant to dismantle. The\n          labels become an organisational anti-pattern—turning flow into a series of hand-offs when\n          it should be a cross-functional sprint. All three share the same\n      distributed-systems foundations, and anyone who masters those fundamentals\n      can navigate all three without getting lost in each vertical\u0026#39;s\n      ever-growing toolset. An expert generalist recognizes this and makes the\n      deliberate effort to master those fundamentals. \u003c/p\u003e\n\n\u003cp\u003eWhy does our attention keep drifting toward tool expertise? It isn\u0026#39;t\n      because people are shortsighted or lazy; it\u0026#39;s because the fundamentals are\n      hard to see amid the noise. Key ideas hide under stacks of product docs,\n      YouTube tutorials, vendor blogs, and conference talks. At one end of the\n      spectrum lie dense academic papers and university courses; at the other, vendor certifications tied to a single product. Connecting\n      these dots — cutting through the surface to reach the essentials — takes\n      deliberate effort. One proven aid is the language of patterns: reusable\n      problem-solution pairs that capture the core principle without the brand\n      labels. That\u0026#39;s why we belive in investing in exploring, distilling, and\n      sharing such patterns — so the industry conversation can shift from “Which\n      tool should I learn next?” to “Which underlying principles and patterns\n      must I master?”\n      \u003c/p\u003e\n\n\u003cp\u003eIn our experience, the good grasp of this common language of patterns\n      and principles also strengthens the \u003ca href=\"https://martinfowler.com/articles/product-service-partnerships.html\"\u003eproduct-service partnership\u003c/a\u003e. Today\n      the relationship is often one-way: product teams ship features, service\n      teams consume APIs. Product teams decide how to certify an engineer as an\n      expert in a product and service teams aim to do those certifications.\n      Cloud providers and tool vendors often demand a certain number of\n      “certified professionals” before they will recognise a service provider as\n      a competent partner. Yet our experience shows little correlation between\n      \u003ca href=\"https://martinfowler.com/bliki/CertificationCompetenceCorrelation.html\"\u003ecertifications and\n      competence\u003c/a\u003e. The focus on fundamentals pays off when competence is\n      most needed: an engineer versed in Raft can untangle a Kubernetes\n      control-plane stall that might puzzle several certified admins, and a\n      Delta Lake write anomaly can be resolved from first-principles reasoning\n      about optimistic-concurrency control instead of searching vendor docs.\n      Once developers across roles share the lingua franca of a system\u0026#39;s\n      internals, the partnership becomes bidirectional — both sides can\n      diagnose, propose, and refine solutions together. Better yet, the\n      engineers who have a good grasp of the fundamentals are able to partner\n      well with multiple product and platform teams, without needing to have\n      product specific training for each product \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"AnExampleWorkshopBreakingSilosAndBuildingPartnerships\"\u003e\n\u003ch3\u003eAn Example Workshop: Breaking silos and building partnerships\u003c/h3\u003e\n\n\u003cp\u003eWe\u0026#39;ve seen that we can grow the Expert Generalist skill through mentoring\n      and exposure to varied ecosystems, but one of the consequences of\n      recognizing Expert Generalist as a first-class skill is that we should \n      provide training in a similar way that we do with specialist skills. Such\n      training currently barely exists in our profession. We\u0026#39;ve begun to fill that\n      gap with workshops that are deliberately focused on developing the Expert\n      Generalist competence, and we think there should be more training along\n      these lines. \u003c/p\u003e\n\n\u003cp\u003eTo help stimulate thinking about this, here\u0026#39;s the details of such a workshop,\n      aimed at developers to connect Application Development, Data Engineering,\n      and DevOps. The workshop views this work through a distributed systems\n      lens, shifting attention to shared building blocks and establishing a\n      common language across teams. Although this example is developer-centric,\n      we think the same principle can be adapted just as effectively to any role that\n      benefits from cross-disciplinary insight.\n       \u003c/p\u003e\n\n\u003cdiv id=\"dist-workshop.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/expert-generalist/dist-workshop.png\" width=\"400\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003e \n        As we saw earlier, each discipline—Application Development, Data Engineering, and DevOps—faces the same\n        distributed-systems realities, yet we still lack a shared language. The key challenges of \n        these systems are the same. They must replicate state, \n        tolerate partial failures, and still offer consistency guarantees to end users.\n        A catalogue of patterns around the implementation of \n        partitioning, replication, consistency, and consensus—that lets every\n        team talk about the fundamentals without tool-specific jargon is a good start. \n        One workshop will not turn people into expert generalists, but it does give them a head-start and a clear\n        window into the challenges their peers tackle every day. That visibility lowers the barrier\n        to cross-discipline tasks and deepens everyone\u0026#39;s understanding of the products and platforms\n        they use.\n      \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"TheWorkshopStructure-BuildingTheMiniature\"\u003e\n\u003ch3\u003eThe workshop structure - Building the miniature\u003c/h3\u003e\n\n\u003cp\u003e\n          One of the challenges in teaching the abstract patterns is that the developers need to do some mental mapping\n          to connect the pattern to the product in use. This is why we chose an approach to structure\n          the workshops around specific products, but then focus on the patterns that are most relevant\n          and using the product as a window into the broader concepts.\n      \u003c/p\u003e\n\n\u003cp\u003e\n        The way we structured the workshops to teach distributed-system patterns, is by coding\n        pocket versions of Kafka, Kubernetes, and Delta Lake. The idea is to pick a flagship product\n        from each broad area of specialty, and build it step by step. Implementing a flagship system\n        in just a few hundred lines flips your perspective from \u0026#39;a user\u0026#39; of a product\n        to \u0026#39;a builder\u0026#39;. An important mindset shift. To keep the\n        exercise grounded in reality, write it in the product\u0026#39;s own language, mirror its file and\n        method names, and rely on real infrastructure — ZooKeeper or etcd, an on-disk log, live\n        sockets. The result stays close enough to the original to highlight the pivotal design\n        choices while still giving you a safe canvas for experimentation. This approach is powerful,\n        because each target is often open source, the moment the miniature works, you can open the\n        full codebase on GitHub, recognise the directory structure, and feel confident submitting a\n        patch. The miniature is not a toy; it is a gateway.\n      \u003c/p\u003e\n\n\u003cp\u003eWe have three workshops, one for each of the three systems.\u003c/p\u003e\n\n\u003csection id=\"BuildYourOwnKafkax2014AMiniatureWrittenInJava.\"\u003e\n\u003ch4\u003eBuild Your Own Kafka — a miniature written in Java.\u003c/h4\u003e\n\n\u003cp\u003e\n          We use ZooKeeper for membership and store every message in a single append-only log. Even\n          on one node you meet the classic fsync dilemma: flush every write for safety or batch for\n          speed.\n\n          Add a second process and you\u0026#39;re suddenly faced with many decisions. You need partition\n          leader election, quorum acknowledgements, an in-sync replica list, and a high-water-mark\n          so consumers never read uncommitted data. (A cluster-wide controller comes later, once\n          multiple partitions appear.) Each mechanism maps to a production feature in Kafka. After\n          walking this code you recognise why a broker stalls when a replica slows and know exactly\n          which metric to graph next time it happens.\n\n          The takeaway pattern is simple: an append-only log guarded by quorum replication—a design\n          you will encounter throughout modern distributed systems.\n        \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"KubernetesFromTheInsideOut.\"\u003e\n\u003ch4\u003eKubernetes from the Inside Out.\u003c/h4\u003e\n\n\u003cp\u003e\n          Start by writing a controller that watches a JSON document in etcd, then calls reconcile()\n          until the local Docker daemon reflects that desired state. Very quickly you have to choose\n          how to list running containers, queue events, and keep spec and status distinct—exactly\n          the concerns that dominate the Kubernetes code base.\n\n\n          Add real failure cases and things get tricky. What should the controller do when a\n          container exits? How does a Postgres container keep its data? Each decision forces you to\n          reason about restart policies and persistent-volume claims. After that exercise, the dense\n          Go structs in kube-controller-manager feel like natural continuations of a model you\n          already understand. The core learning: the power of a declarative desired state converged\n          by\n          reconcile loops - the common pattern of orchestration in modern distributed systems\n        \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"AcidOnObjectStorage-AMiniatureDeltaLake.\"\u003e\n\u003ch4\u003eACID on Object Storage - A miniature Delta Lake.\u003c/h4\u003e\n\n\u003cp\u003e\n          Create a directory of Parquet files and pair it with a text log; each data change appends\n          a JSON file naming the new data file. Move this setup into a miniature object store and\n          every append becomes its own key-value write, with the Parquet file as the value. To\n          handle concurrent writers, wrap the append in an optimistic lock that retries if the log\n          tail changes. After a dozen commits start-up drags, so you add a checkpoint file and learn\n          first-hand why Delta Lake emits one every N transactions. From there, time-travel queries\n          drop out naturally from the log-plus-checkpoint design. The key takeaway, achieving ACID\n          guarantees on eventually consistent storage through an immutable transaction log,\n          optimistic concurrency, and periodic checkpointing - a pattern vital for modern data\n          lakehouses.\n        \u003c/p\u003e\n\u003c/section\u003e\n\n\u003cp\u003e\n        Each miniature leaves you with a concrete pattern — append-only log, reconcile loop,\n        optimistic commit—that travels well beyond the original context. When the next new tool\n        arrives, you\u0026#39;ll recognise the pattern first and the product name second, which is precisely\n        the habit that turns professionals into Expert Generalists.\n      \u003c/p\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003csection id=\"ExpertGeneralistsStillNeedSpecialists\"\u003e\n\u003ch2\u003eExpert Generalists still need Specialists\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhile we\u0026#39;ve spent this article praising the Expert Generalist, we\n    simultaneously do not deny the value of specialist knowledge. Even the most\n    skilled Expert Generalist may have to spend valuable time figuring out the\n    details of how to do something with a new platform. Their knowledge of\n    common patterns helps them know what to look for, their skill \n    helps them research faster, but it\u0026#39;s still longer than what a specialist\n    already knows. Furthermore an Expert Generalist may miss a vital technique\n    that\u0026#39;s particular to a domain, essentially because the Expert Generalist\n    doesn\u0026#39;t know what they don\u0026#39;t know - a trap a specialist is far less likely\n    to fall into. In our experience, a team of Expert Generalists without\n    specialist knowledge of the core technology of their work will still get the\n    job done, but will be significantly slower than a team with specialist\n    skills on board.\u003c/p\u003e\n\n\u003cp\u003eThe point here is that to be the most efficient, the team needs some\n    specialist skill. There needs to be at least one deep specialist on a team\n    for any core technology that the team is working with. But we\u0026#39;ve found that,\n    providing the team is collaborating effectively, we don\u0026#39;t need very many. Often\n    one or maybe two people is quite enough.\u003c/p\u003e\n\n\u003cp\u003eWith someone with specialist knowledge present, a less knowledgeable\n    Expert Generalist can quickly ask a question when they are faced with a task\n    that needs the depth. Similarly the specialist should review the work of\n    less knowledgeable colleagues, so they can spot when folks are taking the\n    wrong path and show them the better way.\u003c/p\u003e\n\n\u003cp\u003eWe think it is important to have such a specialist available full-time on\n    the team. Much of their value comes from being responsive to questions and\n    issues as they come up. In this situation, the important cost to monitor is\n    the \u003ca href=\"https://en.wikipedia.org/wiki/Cost_of_delay\"\u003eCost of Delay\u003c/a\u003e - the speed of resolving\n    questions is much more important that the utilization of the specialists. So\n    it\u0026#39;s worth having a full-time specialist even if it means they aren\u0026#39;t fully\n    occupied.\u003cspan data-footnote=\"footnote-specialist-queue\"\u003e2\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cspan\u003e2: \u003c/span\u003e\n        This also indicates how to tell if you don\u0026#39;t have enough specialists on\n        a team: measure how long it takes to answer questions. This follows\n        \u003ca href=\"https://www.amazon.com/gp/product/1935401009/ref=as_li_tl?ie=UTF8\u0026amp;camp=1789\u0026amp;creative=9325\u0026amp;creativeASIN=1935401009\u0026amp;linkCode=as2\u0026amp;tag=martinfowlerc-20\"\u003eReinertsen\u0026#39;s advice\u003c/a\u003e to monitor queue sizes.\n      \u003c/p\u003e\n\n\n\n\u003cp\u003eAll of this does need everyone involved to have right kind of\n    collaborative attitudes. The specialist needs to be someone who is keen to\n    share their knowledge with everyone else on the team, and is approachable\n    with dumb questions. The Expert Generalists need be comfortable\n    demonstrating their ignorance, and actually enjoy being told they are doing\n    something wrong in an unfamiliar environment. All in all there needs to be\n    plenty of psychological safety around.\u003c/p\u003e\n\n\u003cp\u003eAnd, of course, the people with specialist skills can often be Expert\n    Generalists themselves, with the specialty being legs in their T.\u003c/p\u003e\n\n\u003cp\u003eThe flip-side of this is the danger of teams that consist only of\n    specialists. Things outside their specialty can easily be missed. For\n    example a data engineering team that\u0026#39;s full of specialist data engineers can\n    miss anything that isn\u0026#39;t specific to data engineering, such as quality\n    strategy, release management, and value articulation.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"ExpertGeneralistsInTheAgeOfLlms\"\u003e\n\u003ch2\u003eExpert Generalists in the Age of LLMs\u003c/h2\u003e\n\n\n\n\u003cp\u003eLarge Language Models and tools based on LLMs are growing in prominence.\n    We\u0026#39;ve observed that Expert Generalist capabilities are considerably more\n    valuable with these LLMs. The relationship between Expert Generalists and\n    LLMs is often similar to that between Expert Generalists and specialists in\n    a team. Similarly to a specialist, an LLM can rapidly answer questions that\n    an Expert Generalist will have when working in a new domain. This\n    significantly lowers the barrier for exploring completely new and unfamiliar\n    tools, offering a quick way to get started. \u003c/p\u003e\n\n\u003cp\u003eAn Expert Generalist, armed with\n    a solid grasp of fundamentals and the knack to master principles and\n    patterns, can truly harness the power of LLMs. They\u0026#39;re not just asking an\n    LLM to write code in a new language; they\u0026#39;re able to ask more insightful\n    questions, critically assess the AI-generated suggestions against their\n    broader understanding, and adapt those suggestions to fit sound\n    architectural patterns. Their curiosity discourages them from simply\n    accepting an answer, but to understand how proposed solutions work - which\n    is exactly the behavior needed to overcome the unreliability inherent in\n    LLM-given advice.\u003c/p\u003e\n\n\u003cp\u003eWe\u0026#39;ve noticed that Expert Generalists approach working with LLMs in a\n    different way. Rather than looking for “the answer”, they prompt them to\n    generate questions, explaining mechanisms, and providing examples and even\n    tools that help explore the underlying mechanisms of an idea.\u003c/p\u003e\n\n\u003cp\u003eSo, despite the early days of this technology, we think that the rise of\n    LLMs will further enhance the importance of skilled Expert Generalists, and\n    thus incentivize enterprises to put more effort into identifying,\n    and training people with these skills. \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"WhyOrganizationsNeedExpertGeneralists\"\u003e\n\u003ch2\u003eWhy Organizations Need Expert Generalists\u003c/h2\u003e\n\n\u003cp\u003eThe simplest reason why organizations should pay more attention to Expert\n    Generalists is the loss of opportunities to staff teams. Finding exactly the\n    right kind of specialist limits the candidate pool, either from hiring from\n    outside, or by internal transfers. As long as there\u0026#39;s enough specialist\n    skill available to assist, Expert Generalists often do as well, indeed often\n    better, than adding another specialist.\u003c/p\u003e\n\n\u003cp\u003eBut the benefits of Expert Generalists go further than that. Modern\n    software systems involve many components, needing collaboration between\n    specialties to deliver features to production. Too often we see stifled communication, with\n    folks blocked while waiting on dependent teams to schedule necessary work.\n    Lots of these queues between teams impedes flow, slowing down the release of\n    valuable features.\u003c/p\u003e\n\n\u003cp\u003eExpert Generalists can unplug the pipes. Sometimes they do this by making\n    the interaction smoother due to their overlapping skills, sometimes they\n    know enough to do some of these dependent tasks themselves. Indeed one of the\n    greatest values an Expert Generalist brings is the ability to Get Things\n    Done. The customer-focus drives a good Expert Generalist to use their\n    collaborativeness, curiosity, and skills blend to drive features to\n    completion. If it requires crossing competency boundaries, they will find a\n    way to do it. If they need to rapidly acquire some deeper skills, they will do\n    so. They do risk taking on more than they can chew in the process, but that\n    ability to close the deal is often imperative in getting critical software\n    out the door.\u003c/p\u003e\n\n\u003cdiv id=\"get-done.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/expert-generalist/get-done.png\"/\u003e\u003c/p\u003e\u003cp\u003eExpert Generalists are particularly valuable at\n    working across the specialist skill boundaries, handling interactions and\n    filling in gaps.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe ability to see complex systems across their full breadth can be\n    essential when things go wrong. Faults are often not in the depth of a\n    single technology, but in the implicit interactions between them. If\n    specialists can\u0026#39;t see the whole picture, they easily miss what falls between\n    the gaps.\u003c/p\u003e\n\n\u003cp\u003eThe presence of Expert Generalists crossing the competency boundaries\n    can also increase knowledge transfer between competency groups, increasing\n    everyone\u0026#39;s sympathy for related domains. This mechanism also encourages\n    specialists to explore the Expert Generalist skill for themselves.\u003c/p\u003e\n\n\n\n\u003cp\u003eSpecialists tend to use their familiar tool in contexts where it doesn\u0026#39;t\n    make sense. We can\u0026#39;t fault them for that, if you\u0026#39;ve never seen a\n    screwdriver, you\u0026#39;ll naturally reach for a hammer first. Expert Generalists\n    are more likely to pick appropriate tools. There is a risk there, of\n    introducing too many tools into an environment. Sometimes it\u0026#39;s better to use\n    a familiar-but-inferior tool, than to introduce a complicated tool for a\n    narrow task that\u0026#39;s a burden once the Expert Generalist moves on. A wise\n    Expert Generalist will take that factor into account.\u003c/p\u003e\n\n\u003cp\u003eThe broad view that Expert Generalist develops naturally leads them\n    towards leadership roles. Crossing specialties encourages them to develop\n    communication skills, particularly skills on explaining different\n    disciplines to each other. Collaboration naturally grows relationships with\n    key people around an organization. Customer-focus, Getting Things Done,\n    build credibility with business leadership. Organizations that take\n    deliberate steps to nurture Expert Generalists can reap the reward by\n    growing technologists with a strategic perspective, without necessarily\n    pushing them into management tracks.\u003c/p\u003e\n\n\n\n\u003cp\u003eAll that said, despite the fact that we are clearly big proponents of\n    Expert Generalists, there are downsides. Perhaps the greatest is that\n    although we\u0026#39;ve found it possible to assess people for their Expert\n    Generalist skill, it\u0026#39;s a difficult task, often requiring intensive\n    participation from known-capable Expert Generalists. Years on\n    the job, quizzes, and certifications are much easier tests to administer\n    (although we are cynical about how they relate to delivering value).\u003c/p\u003e\n\n\u003cp\u003eA team full of Expert Generalists, but without particular skills for the\n    central domains and platforms they are working on, will be less productive -\n    at least until the Expert Generalists develop those skills. As we mentioned\n    earlier, it\u0026#39;s important to have someone with those deep skills on the team,\n    who can either be specialist in that domain or an Expert Generalist who has\n    that as one of the legs in their “T”.\u003c/p\u003e\n\n\u003csection\u003e\n\u003cp\u003eAll in all, we\u0026#39;ve seen so many of our colleagues develop their Expert\n    Generalist skill, without the name, and build upon it to be critical parts\n    of successful technology and business initiatives. They are the people we\n    have learned from, the people our clients go to with problems to solve and\n    opportunities to exploit. Our hope with this article is that more people in\n    our profession (and perhaps others) will start to recognize “Expert\n    Generalist” as a first-class skill, and put more effort in describing its\n    characteristics, how to assess it, and how to grow it. We believe that\n    giving this skill proper recognition can do much to improve the practice of\n    our profession.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003csection id=\"Takeaways\"\u003e\n\u003ch2\u003eTakeaways\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003eExpert Generalists share several key traits\u003c/li\u003e\n\n\u003cul\u003e\n\u003cli\u003eCuriosity\u003c/li\u003e\n\n\u003cli\u003eCollaborativeness\u003c/li\u003e\n\n\u003cli\u003eCustomer-focus\u003c/li\u003e\n\n\u003cli\u003eFavoring fundamental knowledge\u003c/li\u003e\n\n\u003cli\u003eA blend of specialist and generalist skills\u003c/li\u003e\n\n\u003cli\u003eSympathy for related domains\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cli\u003eTeams should blend Expert Generalists with a few key specialists\u003c/li\u003e\n\n\u003cli\u003eExpert Generalist skills are enhanced by LLMs\u003c/li\u003e\n\n\u003cli\u003eExpert Generalists ensure complex tasks get done\u003c/li\u003e\n\n\u003cli\u003eWe need to treat Expert Generalist as a first class skill\u003c/li\u003e\n\n\u003cul\u003e\n\u003cli\u003eEvaluate people\u0026#39;s skill as an Expert Generalist in hiring and\n        promotion\u003c/li\u003e\n\n\u003cli\u003eDevelop training just as much as for specialist skills\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/ul\u003e\n\n\u003cdiv id=\"eg-all.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/expert-generalist/eg-all.png\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003c/section\u003e\n\n\u003chr/\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "44 min read",
  "publishedTime": null,
  "modifiedTime": "2025-07-02T00:00:00Z"
}
