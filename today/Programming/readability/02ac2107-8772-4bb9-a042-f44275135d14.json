{
  "id": "02ac2107-8772-4bb9-a042-f44275135d14",
  "title": "My Business Card Runs Linux",
  "link": "https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/",
  "description": "Table of Contents Design and assembly Bill of Materials \u0026 Cost Capabilities USB Shell Emulated Flash Drive Resources Source Code F1C100s Documentation Conclusion I’m an embedded systems engineer. I spend a lot of my free time looking for things I could use in future designs, or things that tickle one of my fancies. One of those things is cheap Linux-capable computers, the cheaper the better. So I started diving into the very deep rabbit hole of obscure processors. I thought to myself, “These processors are nearly cheap enough to give away.” After a while I hit upon the idea of making a barebones Linux board in a business card form factor. As soon as I had the idea I thought it would be pretty cool to do. I have seen electronic business cards before, with various fun features including emulating USB flash drives, blinkenlights, or even wireless transceivers. I have never seen one running Linux, however. So I built one. This is the finished product. It is a complete, minimal ARM computer running my customized Linux firmware built with Buildroot. It has a USB port in the corner. If you plug it into a computer, it boots in about 6 seconds and shows up over USB as a flash drive and a virtual serial port that you can use to log into the card’s shell. The flash drive has a README file, a copy of my résumé, and some of my photography. The shell has several games and Unix classics such as fortune and rogue, a small 2048, and a small MicroPython interpreter. All this is accomplished on a very small 8MB flash chip. The bootloader fits in 256KB, the kernel is 1.6MB, and the whole root filesystem is 2.4MB. So, there’s plenty of space for the virtual flash drive. It also includes a writable home directory, on the off chance that anyone creates something they want to keep. This is also saved on the flash chip, which is properly wear leveled with UBI. The whole thing costs under $3. It’s cheap enough to give away. If you get one from me, I’m probably trying to impress you. Design and assembly I designed and built everything myself. This is literally my job, and I enjoy it, so much of the challenge was finding parts that were cheap enough for a hobbyist. The choice of processor was the most critical decision to keep the cost low and make the project feasible. After much research, I selected the F1C100s, a fairly obscure cost-optimized (read: damn cheap) part made by Allwinner; it includes both RAM and CPU in a single package. I bought these on Taobao. All the other miscellaneous components were sourced from LCSC. I fabricated the PCBs with JLC. For $8 I got 10 copies. I have been very impressed with boards I’ve gotten from JLC; they’re not quite as nice as the ones from OSHPark, but they look great, especially for the price. The first spin of the boards were matte black, which looked fine but were quite the fingerprint magnets. There were a couple problems with the first spin: first, the USB port wasn’t long enough to reliably make contact in many USB ports. Less critically, the flash footprint was wrong, which I worked around by bending the leads under the part by hand. (My wife said I was “dead-spidering” the part!) Once I had validated everything else, I re-spun the boards to get the version you see at the top of this article. Due to the size of all these small parts, right away I decided to reflow solder everything using a cheap reflow oven. I have access to a laser cutter, so I laser-cut my own solder paste stencil using laminator pages. The stencil turned out reasonably well. The 0.2mm apertures for the processor pins needed special attention to get them to come out clean: laser power and focus were critical. Other blank PCBs make a good jig for holding your board to apply paste. I applied solder paste and placed components by hand. I made sure to have a lead-free process—the boards, parts, and solder paste are all RoHS—so that I wouldn’t feel bad about giving them to people. I was a little off-target on this particular print, but solder paste is pretty forgiving and these assembled fine. Each component takes around 10 seconds to hand-place, so I tried to keep component count as low as possible. For more discussion about the design and software, you might be interested in reading my detailed write-up. Bill of Materials \u0026 Cost I kept costs low. It’s cheap enough that I don’t feel bad giving it away, as designed! I’m not going to give one to absolutely everyone because it does take time to assemble each card, and assembly cost is not factored in here (my time is “free”). Component Price F1C100s $1.42 PCB $0.80 8MB flash $0.17 All other components $0.49 Total $2.88 Of course, there are other costs that are difficult to quantify like shipping (since it’s spread across multiple projects). But this is definitely pretty cheap for a Linux board. It also gives a pretty decent starting point for quantifying how much it costs companies to manufacture bottom-end devices: you bet they’re getting everything even cheaper than I am! Capabilities What can I say? It boots a super stripped-down Linux in about 6 seconds. Due to form factor and cost, the card lacks I/O, networking, and any amount of storage to run heavyweight programs. Nonetheless, I managed to cram a bunch of interesting stuff into the firmware image. USB I could do any number of things with the USB, but I chose to keep it fairly simple so that people could have a decent chance of getting everything working on their computer when they tried it out. Linux lets you behave as a “device” with the Gadget Framework. Since I forward-ported some drivers from others' previous work on this processor, I have all the functionality of the entire USB gadget framework at my disposal. I decided to emulate a pre-generated flash drive and supply a shell over a virtual serial port. Shell You can run all these from the emulated serial console after you log in (as root, the only user): rogue: the classic Unix dungeon crawler. 2048: a simple console mode 2048 game. fortune: various pithy sayings. I decided not to include the entire database of quotes here to save space for other functionality. micropython: a very small Python interpreter. Emulated Flash Drive During the compilation process, the build tools generate a small FAT32 image and add it as one of the UBI partitions. As I described above, the Linux gadget subsystem presents this as a mass storage device to the PC. If you’d like to see what appears on the flash drive, the easiest thing to do would be to go look at the source code. There’s some of my photography and my resume. Resources Source Code If you’d like to see my Buildroot tree, it’s open-sourced on GitHub at thirtythreeforty/businesscard-linux. It contains the code to generate the NOR flash image, which is then installed via the processor’s USB download mode. It also has package definitions for the games and other goodies like fortune that I packaged for Buildroot once I got everything working. If you’re wanting to use the F1C100s in a project, it’s a great starting point (and feel free to get in touch if you have questions). I rebased Icenowy’s excellent F1C100s work on Linux v4.9. My business card runs near-mainline v5.2 with this handful of patches rebased and debugged. It’s hosted on GitHub at thirtythreeforty/linux. I believe I currently have the world’s best port of U-Boot to the F1C100s, based again in part on some work by Icenowy. (Surprisingly, getting U-Boot fully working was quite annoying.) I am working on upstreaming this. In the meantime, it is also on GitHub at thirtythreeforty/u-boot. F1C100s Documentation I found some (sparse) documentation for the F1C100s, which I’m mirroring here: Allwinner F1C100s Datasheet gives pinouts and general info Allwinner F1C600 Reference Manual gives register definitions for the F1C600, which is an F1C100s rebadged as Linux-capable (ha!) I heavily drew from the schematic for Sipeed’s Lichee Nano, which was the dev board I used to get my software working. You can get a KiCAD symbol and footprint for the F1C100s in my KiCAD parts library. And finally, I’ve uploaded my schematic for the curious. You can download it by clicking on it below. The F1C100s is somewhat scarce here in the US, so here’s an open offer for people who want to design with this part: if you design a board with this chip on it, get in touch and I’ll get you some samples to build your board. Conclusion I taught myself a lot on this project: it’s my first project using a reflow oven to solder the parts. I also had to learn how to find resources for poorly-documented parts. There was a lot more to it than what I touched on in this quick presentation; again, if you want to see how the sausage gets made, see also my companion detailed write-up. I drew from my existing experience with embedded Linux and designing PCBs. It isn’t flawless, but it’s a pretty good representation of my abilities. If you’d like to learn how to do this kind of thing, you might also be interested in my ongoing Mastering Embedded Linux series! I’m walking through how to build hardware and software from scratch for tiny, cheap Linux systems much like my business card. You can also subscribe to all future updates from the fancy new Subscribe page.",
  "author": "George Hilliard",
  "published": "Mon, 23 Dec 2019 19:36:00 -0500",
  "source": "https://www.thirtythreeforty.net/posts/index.xml",
  "categories": null,
  "byline": "",
  "length": 9304,
  "excerpt": "In which I build a Linux computer cheap enough to give away",
  "siteName": "",
  "favicon": "https://www.thirtythreeforty.net/apple-touch-icon-144-precomposed.png",
  "text": "Table of Contents Design and assembly Bill of Materials \u0026 Cost Capabilities USB Shell Emulated Flash Drive Resources Source Code F1C100s Documentation Conclusion I’m an embedded systems engineer. I spend a lot of my free time looking for things I could use in future designs, or things that tickle one of my fancies. One of those things is cheap Linux-capable computers, the cheaper the better. So I started diving into the very deep rabbit hole of obscure processors. I thought to myself, “These processors are nearly cheap enough to give away.” After a while I hit upon the idea of making a barebones Linux board in a business card form factor. As soon as I had the idea I thought it would be pretty cool to do. I have seen electronic business cards before, with various fun features including emulating USB flash drives, blinkenlights, or even wireless transceivers. I have never seen one running Linux, however. So I built one. This is the finished product. It is a complete, minimal ARM computer running my customized Linux firmware built with Buildroot. It has a USB port in the corner. If you plug it into a computer, it boots in about 6 seconds and shows up over USB as a flash drive and a virtual serial port that you can use to log into the card’s shell. The flash drive has a README file, a copy of my résumé, and some of my photography. The shell has several games and Unix classics such as fortune and rogue, a small 2048, and a small MicroPython interpreter. All this is accomplished on a very small 8MB flash chip. The bootloader fits in 256KB, the kernel is 1.6MB, and the whole root filesystem is 2.4MB. So, there’s plenty of space for the virtual flash drive. It also includes a writable home directory, on the off chance that anyone creates something they want to keep. This is also saved on the flash chip, which is properly wear leveled with UBI. The whole thing costs under $3. It’s cheap enough to give away. If you get one from me, I’m probably trying to impress you. Design and assembly I designed and built everything myself. This is literally my job, and I enjoy it, so much of the challenge was finding parts that were cheap enough for a hobbyist. The choice of processor was the most critical decision to keep the cost low and make the project feasible. After much research, I selected the F1C100s, a fairly obscure cost-optimized (read: damn cheap) part made by Allwinner; it includes both RAM and CPU in a single package. I bought these on Taobao. All the other miscellaneous components were sourced from LCSC. I fabricated the PCBs with JLC. For $8 I got 10 copies. I have been very impressed with boards I’ve gotten from JLC; they’re not quite as nice as the ones from OSHPark, but they look great, especially for the price. The first spin of the boards were matte black, which looked fine but were quite the fingerprint magnets. There were a couple problems with the first spin: first, the USB port wasn’t long enough to reliably make contact in many USB ports. Less critically, the flash footprint was wrong, which I worked around by bending the leads under the part by hand. (My wife said I was “dead-spidering” the part!) Once I had validated everything else, I re-spun the boards to get the version you see at the top of this article. Due to the size of all these small parts, right away I decided to reflow solder everything using a cheap reflow oven. I have access to a laser cutter, so I laser-cut my own solder paste stencil using laminator pages. The stencil turned out reasonably well. The 0.2mm apertures for the processor pins needed special attention to get them to come out clean: laser power and focus were critical. Other blank PCBs make a good jig for holding your board to apply paste. I applied solder paste and placed components by hand. I made sure to have a lead-free process—the boards, parts, and solder paste are all RoHS—so that I wouldn’t feel bad about giving them to people. I was a little off-target on this particular print, but solder paste is pretty forgiving and these assembled fine. Each component takes around 10 seconds to hand-place, so I tried to keep component count as low as possible. For more discussion about the design and software, you might be interested in reading my detailed write-up. Bill of Materials \u0026 Cost I kept costs low. It’s cheap enough that I don’t feel bad giving it away, as designed! I’m not going to give one to absolutely everyone because it does take time to assemble each card, and assembly cost is not factored in here (my time is “free”). Component Price F1C100s $1.42 PCB $0.80 8MB flash $0.17 All other components $0.49 Total $2.88 Of course, there are other costs that are difficult to quantify like shipping (since it’s spread across multiple projects). But this is definitely pretty cheap for a Linux board. It also gives a pretty decent starting point for quantifying how much it costs companies to manufacture bottom-end devices: you bet they’re getting everything even cheaper than I am! Capabilities What can I say? It boots a super stripped-down Linux in about 6 seconds. Due to form factor and cost, the card lacks I/O, networking, and any amount of storage to run heavyweight programs. Nonetheless, I managed to cram a bunch of interesting stuff into the firmware image. USB I could do any number of things with the USB, but I chose to keep it fairly simple so that people could have a decent chance of getting everything working on their computer when they tried it out. Linux lets you behave as a “device” with the Gadget Framework. Since I forward-ported some drivers from others' previous work on this processor, I have all the functionality of the entire USB gadget framework at my disposal. I decided to emulate a pre-generated flash drive and supply a shell over a virtual serial port. Shell You can run all these from the emulated serial console after you log in (as root, the only user): rogue: the classic Unix dungeon crawler. 2048: a simple console mode 2048 game. fortune: various pithy sayings. I decided not to include the entire database of quotes here to save space for other functionality. micropython: a very small Python interpreter. Emulated Flash Drive During the compilation process, the build tools generate a small FAT32 image and add it as one of the UBI partitions. As I described above, the Linux gadget subsystem presents this as a mass storage device to the PC. If you’d like to see what appears on the flash drive, the easiest thing to do would be to go look at the source code. There’s some of my photography and my resume. Resources Source Code If you’d like to see my Buildroot tree, it’s open-sourced on GitHub at thirtythreeforty/businesscard-linux. It contains the code to generate the NOR flash image, which is then installed via the processor’s USB download mode. It also has package definitions for the games and other goodies like fortune that I packaged for Buildroot once I got everything working. If you’re wanting to use the F1C100s in a project, it’s a great starting point (and feel free to get in touch if you have questions). I rebased Icenowy’s excellent F1C100s work on Linux v4.9. My business card runs near-mainline v5.2 with this handful of patches rebased and debugged. It’s hosted on GitHub at thirtythreeforty/linux. I believe I currently have the world’s best port of U-Boot to the F1C100s, based again in part on some work by Icenowy. (Surprisingly, getting U-Boot fully working was quite annoying.) I am working on upstreaming this. In the meantime, it is also on GitHub at thirtythreeforty/u-boot. F1C100s Documentation I found some (sparse) documentation for the F1C100s, which I’m mirroring here: Allwinner F1C100s Datasheet gives pinouts and general info Allwinner F1C600 Reference Manual gives register definitions for the F1C600, which is an F1C100s rebadged as Linux-capable (ha!) I heavily drew from the schematic for Sipeed’s Lichee Nano, which was the dev board I used to get my software working. You can get a KiCAD symbol and footprint for the F1C100s in my KiCAD parts library. And finally, I’ve uploaded my schematic for the curious. You can download it by clicking on it below. The F1C100s is somewhat scarce here in the US, so here’s an open offer for people who want to design with this part: if you design a board with this chip on it, get in touch and I’ll get you some samples to build your board. Conclusion I taught myself a lot on this project: it’s my first project using a reflow oven to solder the parts. I also had to learn how to find resources for poorly-documented parts. There was a lot more to it than what I touched on in this quick presentation; again, if you want to see how the sausage gets made, see also my companion detailed write-up. I drew from my existing experience with embedded Linux and designing PCBs. It isn’t flawless, but it’s a pretty good representation of my abilities. If you’d like to learn how to do this kind of thing, you might also be interested in my ongoing Mastering Embedded Linux series! I’m walking through how to build hardware and software from scratch for tiny, cheap Linux systems much like my business card. You can also subscribe to all future updates from the fancy new Subscribe page.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\" tabindex=\"-1\"\u003e\n\u003carticle\u003e\n\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cp\u003e\n\u003clabel for=\"tocToggle\"\u003eTable of Contents\u003c/label\u003e\u003c/p\u003e\u003cnav id=\"TableOfContents\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#design-and-assembly\"\u003eDesign and assembly\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#bill-of-materials--cost\"\u003eBill of Materials \u0026amp; Cost\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#capabilities\"\u003eCapabilities\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#usb\"\u003eUSB\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#shell\"\u003eShell\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#emulated-flash-drive\"\u003eEmulated Flash Drive\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#resources\"\u003eResources\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#source-code\"\u003eSource Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#f1c100s-documentation\"\u003eF1C100s Documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/nav\u003e\n\u003c/div\u003e\n\u003cp\u003eI’m an embedded systems engineer.\nI spend a lot of my free time looking for things I could use in future designs, or things that tickle one of my fancies.\u003c/p\u003e\n\u003cp\u003eOne of those things is cheap Linux-capable computers, the cheaper the better.\nSo I started diving into the very deep rabbit hole of obscure processors.\u003c/p\u003e\n\u003cp\u003eI thought to myself, “These processors are nearly cheap enough to give away.”\nAfter a while I hit upon the idea of making a barebones Linux board in a business card form factor.\u003c/p\u003e\n\u003cp\u003eAs soon as I had the idea I thought it would be pretty cool to do.\nI have \u003ca href=\"https://hackaday.com/2017/10/04/literally-flashy-business-cards/\"\u003eseen\u003c/a\u003e electronic \u003ca href=\"https://hackaday.com/2014/06/17/designing-the-second-version-of-my-business-card/\"\u003ebusiness\u003c/a\u003e cards \u003ca href=\"https://hackaday.com/2018/05/11/stylish-business-card-with-a-stylophone-built-in/\"\u003ebefore\u003c/a\u003e, with various fun features including emulating USB flash drives, blinkenlights, or even wireless transceivers.\nI have never seen one running Linux, however.\u003c/p\u003e\n\u003cp\u003eSo I built one.\u003c/p\u003e\n\u003cfigure\u003e\u003ca href=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-top.jpg\"\u003e\n\u003cimg src=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-top_huad90566bef925e8b01048d4355f78bd6_6751801_1024x1024_fit_q80_box.jpg\" title=\"(click for large version)\"/\u003e \u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003eThis is the finished product.\nIt is a complete, minimal ARM computer running my customized Linux firmware built with Buildroot.\u003c/p\u003e\n\u003cfigure\u003e\u003ca href=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-bottom.jpg\"\u003e\n\u003cimg src=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-bottom_hu0304cb7e538da5a35ca6f72df4bbc0a9_7893599_1024x1024_fit_q80_box.jpg\" title=\"(click for large version)\"/\u003e \u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003eIt has a USB port in the corner.\nIf you plug it into a computer, it boots in about 6 seconds and shows up over USB as a flash drive and a virtual serial port that you can use to log into the card’s shell.\nThe flash drive has a README file, a copy of my résumé, and some of my photography.\nThe shell has several games and Unix classics such as fortune and rogue, a small 2048, and a small MicroPython interpreter.\u003c/p\u003e\n\u003cp\u003eAll this is accomplished on a very small 8MB flash chip.\nThe bootloader fits in 256KB, the kernel is 1.6MB, and the whole root filesystem is 2.4MB.\nSo, there’s plenty of space for the virtual flash drive.\nIt also includes a writable home directory, on the off chance that anyone creates something they want to keep.\nThis is also saved on the flash chip, which is properly wear leveled with UBI.\u003c/p\u003e\n\u003cp\u003eThe whole thing costs under $3.\nIt’s cheap enough to give away.\nIf you get one from me, I’m probably trying to impress you.\u003c/p\u003e\n\u003ch2 id=\"design-and-assembly\"\u003eDesign and assembly\u003c/h2\u003e\n\u003cp\u003eI designed and built everything myself.\nThis is literally my job, and I enjoy it, so much of the challenge was finding parts that were cheap enough for a hobbyist.\u003c/p\u003e\n\u003cp\u003eThe choice of processor was the most critical decision to keep the cost low and make the project feasible.\nAfter much research, I selected the F1C100s, a fairly obscure cost-optimized (read: \u003cem\u003edamn cheap\u003c/em\u003e) part made by Allwinner; it includes both RAM and CPU in a single package.\nI bought these on Taobao.\nAll the other miscellaneous components were sourced from LCSC.\u003c/p\u003e\n\u003cp\u003eI fabricated the PCBs with \u003ca href=\"https://jlcpcb.com/\"\u003eJLC\u003c/a\u003e.\nFor $8 I got 10 copies.\nI have been very impressed with boards I’ve gotten from JLC; they’re not quite as nice as the ones from OSHPark, but they look great, especially for the price.\u003c/p\u003e\n\u003cp\u003eThe first spin of the boards were matte black, which looked fine but were quite the fingerprint magnets.\u003c/p\u003e\n\u003cfigure\u003e\u003ca href=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-v1-top.jpg\"\u003e\n\u003cimg src=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard-v1-top_hufbc4863b7048e03811fce4d4bb545c2d_2395351_1024x1024_fit_q80_box.jpg\" title=\"(click for large version)\"/\u003e \u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003eThere were a couple problems with the first spin: first, the USB port wasn’t long enough to reliably make contact in many USB ports.\nLess critically, the flash footprint was wrong, which I worked around by bending the leads under the part by hand.\n(My wife said I was “dead-spidering” the part!)\u003c/p\u003e\n\u003cfigure\u003e\u003ca href=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/dead-spider.jpg\"\u003e\n\u003cimg src=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/dead-spider_hub9f0c46128e70c3e8e3772be08b379bb_215180_1024x1024_fit_q80_box.jpg\" title=\"(click for large version)\"/\u003e \u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003eOnce I had validated everything else, I re-spun the boards to get the version you see at the top of this article.\u003c/p\u003e\n\u003cp\u003eDue to the size of all these small parts, right away I decided to reflow solder everything using a \u003ca href=\"https://www.thirtythreeforty.net/posts/2019/08/t962-reflow-profile-calculator/\"\u003echeap reflow oven\u003c/a\u003e.\nI have access to a laser cutter, so I laser-cut my own solder paste stencil using laminator pages.\nThe stencil turned out reasonably well.\nThe 0.2mm apertures for the processor pins needed special attention to get them to come out clean: laser power and focus were critical.\u003c/p\u003e\n\u003cfigure\u003e\u003ca href=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/stencil.jpg\"\u003e\n\u003cimg src=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/stencil_hu1570a4fa6440b9ea23bc1041972caaf0_1201295_1024x1024_fit_q80_box.jpg\" alt=\"Other blank PCBs make a good jig for holding your board to apply paste.\" title=\"(click for large version)\"/\u003e \u003c/a\u003e\u003cfigcaption\u003e\n\u003cp\u003eOther blank PCBs make a good jig for holding your board to apply paste.\u003c/p\u003e\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eI applied solder paste and placed components by hand.\nI made sure to have a lead-free process—the boards, parts, and solder paste are all RoHS—so that I wouldn’t feel bad about giving them to people.\u003c/p\u003e\n\u003cfigure\u003e\u003ca href=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/paste.jpg\"\u003e\n\u003cimg src=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/paste_hu025309d0408002528ae9eb49aeb44512_1961770_1024x1024_fit_q80_box.jpg\" alt=\"I was a little off-target on this particular print, but solder paste is pretty forgiving and these assembled fine.\" title=\"(click for large version)\"/\u003e \u003c/a\u003e\u003cfigcaption\u003e\n\u003cp\u003eI was a little off-target on this particular print, but solder paste is pretty forgiving and these assembled fine.\u003c/p\u003e\n\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003cp\u003eEach component takes around 10 seconds to hand-place, so I tried to keep component count as low as possible.\u003c/p\u003e\n\u003cp\u003eFor more discussion about the design and software, you might be interested in reading my \u003ca href=\"https://www.thirtythreeforty.net/posts/2019/12/designing-my-linux-business-card/\"\u003edetailed write-up\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"bill-of-materials--cost\"\u003eBill of Materials \u0026amp; Cost\u003c/h3\u003e\n\u003cp\u003eI kept costs low.\nIt’s cheap enough that I don’t feel bad giving it away, as designed!\nI’m not going to give one to absolutely everyone because it does take time to assemble each card, and assembly cost is not factored in here (my time is “free”).\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eComponent\u003c/th\u003e\n\u003cth\u003ePrice\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eF1C100s\u003c/td\u003e\n\u003ctd\u003e$1.42\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePCB\u003c/td\u003e\n\u003ctd\u003e$0.80\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e8MB flash\u003c/td\u003e\n\u003ctd\u003e$0.17\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eAll other components\u003c/td\u003e\n\u003ctd\u003e$0.49\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eTotal\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e\u003cstrong\u003e$2.88\u003c/strong\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eOf course, there are other costs that are difficult to quantify like shipping (since it’s spread across multiple projects).\nBut this is definitely pretty cheap for a Linux board.\nIt also gives a pretty decent starting point for quantifying how much it costs companies to manufacture bottom-end devices: you bet they’re getting everything even cheaper than I am!\u003c/p\u003e\n\u003ch2 id=\"capabilities\"\u003eCapabilities\u003c/h2\u003e\n\u003cp\u003eWhat can I say?\nIt boots a super stripped-down Linux in about 6 seconds.\nDue to form factor and cost, the card lacks I/O, networking, and any amount of storage to run heavyweight programs.\nNonetheless, I managed to cram a bunch of interesting stuff into the firmware image.\u003c/p\u003e\n\u003ch3 id=\"usb\"\u003eUSB\u003c/h3\u003e\n\u003cp\u003eI could do any number of things with the USB, but I chose to keep it fairly simple so that people could have a decent chance of getting everything working on their computer when they tried it out.\nLinux lets you behave as a “device” with the \u003ca href=\"https://linux-sunxi.org/USB_Gadget\"\u003eGadget Framework\u003c/a\u003e.\nSince I forward-ported some drivers from others\u0026#39; previous work on this processor, I have all the functionality of the entire USB gadget framework at my disposal.\nI decided to emulate a pre-generated flash drive and supply a shell over a virtual serial port.\u003c/p\u003e\n\u003ch3 id=\"shell\"\u003eShell\u003c/h3\u003e\n\u003cp\u003eYou can run all these from the emulated serial console after you log in (as \u003ccode\u003eroot\u003c/code\u003e, the only user):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erogue\u003c/code\u003e\u003c/strong\u003e: the classic Unix dungeon crawler.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e2048\u003c/code\u003e\u003c/strong\u003e: a simple console mode 2048 game.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003efortune\u003c/code\u003e\u003c/strong\u003e: various pithy sayings. I decided not to include the entire database of quotes here to save space for other functionality.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://micropython.org/\"\u003e\u003ccode\u003emicropython\u003c/code\u003e\u003c/a\u003e\u003c/strong\u003e: a very small Python interpreter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"emulated-flash-drive\"\u003eEmulated Flash Drive\u003c/h3\u003e\n\u003cp\u003eDuring the compilation process, the build tools generate a small FAT32 image and add it as one of the UBI partitions.\nAs I described above, the Linux gadget subsystem presents this as a mass storage device to the PC.\u003c/p\u003e\n\u003cp\u003eIf you’d like to see what appears on the flash drive, the easiest thing to do would be to go \u003ca href=\"https://github.com/thirtythreeforty/businesscard-linux/tree/master/package/businesscard-flashdrive/files\"\u003elook at the source code\u003c/a\u003e.\nThere’s some of my photography and my resume.\u003c/p\u003e\n\u003ch2 id=\"resources\"\u003eResources\u003c/h2\u003e\n\u003ch3 id=\"source-code\"\u003eSource Code\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’d like to see my Buildroot tree, it’s open-sourced on GitHub at \u003ca href=\"https://github.com/thirtythreeforty/businesscard-linux\"\u003e\u003cstrong\u003e\u003ccode\u003ethirtythreeforty/businesscard-linux\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e.\nIt contains the code to generate the NOR flash image, which is then installed via the processor’s USB download mode.\nIt also has package definitions for the games and other goodies like fortune that I packaged for Buildroot once I got everything working.\nIf you’re wanting to use the F1C100s in a project, it’s a great starting point (and feel free to get in touch if you have questions).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI rebased \u003ca href=\"https://github.com/Icenowy/linux/tree/f1c100s\"\u003eIcenowy’s excellent F1C100s work\u003c/a\u003e on Linux v4.9.\nMy business card runs near-mainline v5.2 with this handful of patches rebased and debugged.\nIt’s hosted on GitHub at \u003ca href=\"https://github.com/thirtythreeforty/linux/tree/f1c100s-v5.2.4\"\u003e\u003cstrong\u003e\u003ccode\u003ethirtythreeforty/linux\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI believe I currently have the world’s best port of U-Boot to the F1C100s, based again in part on some work by Icenowy.\n(Surprisingly, getting U-Boot fully working was quite annoying.)\nI am working on upstreaming this.\nIn the meantime, it is also on GitHub at \u003ca href=\"https://github.com/thirtythreeforty/u-boot/tree/f1c100s-v2019.04\"\u003e\u003cstrong\u003e\u003ccode\u003ethirtythreeforty/u-boot\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"f1c100s-documentation\"\u003eF1C100s Documentation\u003c/h3\u003e\n\u003cp\u003eI found some (sparse) documentation for the F1C100s, which I’m mirroring here:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.thirtythreeforty.net/media/F1C100s_Datasheet_V1.0.pdf\"\u003e\u003cstrong\u003eAllwinner F1C100s Datasheet\u003c/strong\u003e\u003c/a\u003e\ngives pinouts and general info\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.thirtythreeforty.net/media/Allwinner_F1C600_User_Manual_V1.0.pdf\"\u003e\u003cstrong\u003eAllwinner F1C600 Reference Manual\u003c/strong\u003e\u003c/a\u003e\ngives register definitions for the F1C600, which is an F1C100s rebadged as Linux-capable (ha!)\u003c/li\u003e\n\u003cli\u003eI heavily drew from the \u003ca href=\"http://dl.sipeed.com/LICHEE/Nano/\"\u003eschematic\u003c/a\u003e for \u003ca href=\"https://www.seeedstudio.com/LicheePi-Nano-ARM926EJS-SoC-Development-Board-16M-Flash-p-2892.html?utm_source=referral\u0026amp;utm_medium=thirtythreeforty\"\u003eSipeed’s Lichee Nano\u003c/a\u003e, which was the dev board I used to get my software working.\u003c/li\u003e\n\u003cli\u003eYou can get a KiCAD symbol and footprint for the F1C100s in my \u003ca href=\"https://github.com/thirtythreeforty/3340_kicad\"\u003eKiCAD parts library\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd finally, I’ve uploaded my schematic for the curious.\nYou can download it by clicking on it below.\u003c/p\u003e\n\u003cfigure\u003e\u003ca href=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/businesscard.pdf\"\u003e\u003cimg src=\"https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/schematic-preview.svg\"/\u003e\u003c/a\u003e\n\u003c/figure\u003e\n\u003cp\u003eThe F1C100s is somewhat scarce here in the US, so here’s an open offer for people who want to design with this part: if you design a board with this chip on it, get in touch and I’ll get you some samples to build your board.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eI taught myself a lot on this project: it’s my first project using a reflow oven to solder the parts.\nI also had to learn how to find resources for poorly-documented parts.\nThere was a lot more to it than what I touched on in this quick presentation; again, if you want to see how the sausage gets made, see also my \u003ca href=\"https://www.thirtythreeforty.net/posts/2019/12/designing-my-linux-business-card/\"\u003ecompanion detailed write-up\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI drew from my existing experience with embedded Linux and designing PCBs.\nIt isn’t flawless, but it’s a pretty good representation of my abilities.\u003c/p\u003e\n\u003cp\u003eIf you’d like to learn how to do this kind of thing, you might also be interested in my ongoing \u003ca href=\"https://www.thirtythreeforty.net/posts/2019/08/mastering-embedded-linux-part-1-concepts/\"\u003eMastering Embedded Linux\u003c/a\u003e series!\nI’m walking through how to build hardware and software from scratch for tiny, cheap Linux systems much like my business card.\nYou can also subscribe to all future updates from the fancy new \u003ca href=\"https://www.thirtythreeforty.net/subscribe/\"\u003eSubscribe page\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003c/article\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2019-12-23T19:36:00-05:00",
  "modifiedTime": "2019-12-23T19:36:00-05:00"
}
