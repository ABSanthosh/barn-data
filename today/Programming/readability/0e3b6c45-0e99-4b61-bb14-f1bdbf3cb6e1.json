{
  "id": "0e3b6c45-0e99-4b61-bb14-f1bdbf3cb6e1",
  "title": "Quick vulnerability remediation with GitLab Advanced SAST + Duo AI",
  "link": "https://about.gitlab.com/blog/2024/10/22/quick-vulnerability-remediation-with-gitlab-advanced-sast-duo-ai",
  "description": "",
  "author": "Fernando Diaz",
  "published": "2024-10-22T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Fernando Diaz",
  "length": 8782,
  "excerpt": "Shorten your mean time to remediation by pairing Advanced SAST and artificial intelligence. This detailed demo shows you how.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "With GitLab 17.4, we’ve made GitLab Advanced SAST generally available. GitLab Advanced SAST is a static application security testing scanner designed to discover vulnerabilities by performing cross-function and cross-file taint analysis. By following the paths user inputs take, the analyzer identifies potential points where untrusted data can influence the execution of your application in unsafe ways, ensuring the vulnerabilities are detected even when they span multiple functions and files. GitLab Advanced SAST can be used together with GitLab Duo Vulnerability Explanation in order to reduce the mean time to remediation (MTTR). GitLab Duo can provide practical, AI-powered examples of how threat actors can exploit vulnerabilities and offer light-weight remediation guidance, which can be used with cross-file analysis to enhance application security (AppSec) efficiency. This tutorial will show you how to: enable GitLab Advanced SAST read results from the scanner review the code flow of a vulnerability use GitLab AI to quickly remediate the vulnerability Enable GitLab Advanced SAST Follow the instructions below to enable GitLab Advanced SAST. You can also view this video to get started: Run GitLab Advanced SAST on each code commit Before using Advanced SAST, the following prerequisites must be met: GitLab Ultimate Subscription (free 30-day trial) GitLab SaaS or GitLab Self-managed (running Version 17.4) To enable the GitLab Advanced SAST scanner: On the left sidebar, select Search or Go to and find your project. Add or edit the .gitlab-ci.yml to include the following: Test stage Jobs/SAST.gitlab-ci.yml template GITLAB_ADVANCED_SAST_ENABLED variable set to true Apply the change. Your newly merged .gitlab-ci.yml should contain the following: stages: - test include: - template: Jobs/SAST.gitlab-ci.yml variables: GITLAB_ADVANCED_SAST_ENABLED: 'true' This will now run the gitlab-advances-sast job within the test stage of your application along with all the other jobs you have defined. Advanced SAST will replace the semgrep SAST scanner for the supported programming languages. GitLab Advanced SAST job in pipeline Note: You can fully configure the job as you would any job in GitLab. For more information, see the CI/CD YAML syntax documentation. Just like our previous SAST scanner, Advanced SAST allows you to scan source code in the diff of a feature branch. This allows us to address any incoming vulnerabilities before they make it into production. Here we can see the scanner results for the diff within a merge request: When selecting a newly detected vulnerability, we get the following details to assist with remediation: Status: The status of the vulnerability (Needs triage, Confirmed, Dismissed, Resolved) Description: Detailed information on the detected vulnerability Detection time: Time vulnerability was detected Location: Line of code where vulnerability is detected Severity: Severity of vulnerability from CVE database Training: Gamified training from our partners Solutions: Information on how to remediate or resolve a vulnerability Identifiers: Relevant links showcasing detailed description, exploitation, and remediation Merge request with vulnerability insights Vulnerabilities detected within an MR are actionable, meaning they can be dismissed or an issue can be created and populated with relevant vulnerability information. Dismissing an issue saves AppSec teams time, because they can see relevant developer information when reviewing an MR. Creating a confidential issue allows developers and AppSec teams to further collaborate on resolving a vulnerability where a fix is not straightforward. Confidential issues have limited permissions and can be used with confidential merge requests to prevent possible malicious actors from exploiting. To further support separation of duties and prevent vulnerable code from making it into production, you can require approval from certain people (for example, the security team) in order to merge vulnerable code. Security policies in action Note: Learn more about Security Policies and how to implement them in the Security Policy documentation. Manage vulnerabilities in production While preventing vulnerabilities from making it into production is crucial for application security, it is equally as important to manage vulnerabilities in production. When security scanners are run on a default or production-level branch, a vulnerability report will be populated with the latest vulnerability data which can be used to triage and manage vulnerabilities. GitLab Vulnerability Report sorted by Advanced SAST When selecting a vulnerability you get similar vulnerability details as seen in a merge request, making for a single source of truth for developers and AppSec teams. Vulnerability page with vulnerability insights AppSec teams can triage a vulnerability by changing its status and adding relevant details on the status change. Issues can be created to track the progress of a fix. From here, a developer can be assigned. Examine vulnerable code flow For vulnerabilities detected with Advanced SAST, we can see a \"Code flow\" tab on the Vulnerability page. GitLab Advanced SAST code flow In this example, you can see that a vulnerability is traced across multiple functions, giving deeper insight into the best practices we should put in place to not only resolve the vulnerability, but prevent similar vulnerabilities in the future. Use GitLab Duo Vulnerability Explanation GitLab Duo can help you mitigate or remediate a vulnerability by using a large language model to: Summarize the vulnerability Help developers and security analysts understand the vulnerability Show how the vulnerability can be exploited Provide a suggested remediation or mitigation To use Vulnerability Explanation, the following is required: GitLab Ultimate subscription GitLab Duo Enterprise seat GitLab Duo must be enabled for your group or instance From the vulnerability report, you can select a SAST vulnerability and go to its Vulnerability page. From the Vulnerability page, you can do any of the following to explain the vulnerability: Select the text below the vulnerability description You can use AI by asking GitLab Duo Chat to explain this vulnerability and offer a suggested fix. In the upper right, from the \"Resolve with merge request\" dropdown list, select Explain Vulnerability, then select Explain vulnerability. Open GitLab Duo Chat and use the explain a vulnerability command: /vulnerability_explain. Then the vulnerable code will be processed by Anthropic’s Claude 3 Haiku model and provide the following data: Putting it all together Now, let's put it all together with a concrete example. I will use the OWASP Juice Shop as my demo application and run GitLab Advanced SAST to detect a vulnerability in production. Then I will use the vulnerability code flow and GitLab Duo to investigate vulnerability exploitation, and remediation. You can follow along with this demo and see this workflow in action by watching: The detection and remediation workflow is as follows: Enable GitLab Advanced SAST and run it on the project’s default branch. Open the Vulnerability Report and sort by Tool:GitLab Advanced SAST. Select the Improper neutralization of special elements in data query logic vulnerability found in Basket.ts. Use the vulnerability code flow to understand the vulnerable paths. Run Explain this vulnerability to see exploit information. Run the application locally to attempt exploitation. Change vulnerability status to \"Confirmed\" and provide relevant info. Determine remediation path using all relevant data: Vulnerability page insights, Code Flow, Vulnerability Explanation results Create a new branch and apply remediation. Run the remediated application locally and try to exploit again. Create a merge request with the fix. Code change will be tested using CI to assure we don’t break the application. Validate and merge MR. Test exploit in deployed environment. Change vulnerability status to \"Resolved\" on the Vulnerability page. Note: There are many ways to triage and remediate vulnerabilities, make sure to follow best practices set by your organization. Useful links To learn more about GitLab and how you can get started with enhancing your organization’s application security posture, check out the following resources. GitLab Ultimate GitLab Duo GitLab Security and Compliance Solutions GitLab Software Supply Chain Security Solutions GitLab Continuous Software Compliance JuiceShop Demo Application GitLab AppSec documentation Advanced SAST documentation Explain this Vulnerability documentation Code Flow documentation Security Policy documentation OWASP Juice Shop documentation",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/24mPf16vAPHORs3d9y62q/5aa75c03d784cc4ae75a5e86ab1e955d/blog-image-template-1800x945.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-b794d8fe=\"\" data-v-7488832a=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eWith GitLab 17.4, we’ve made \u003ca href=\"https://about.gitlab.com/blog/2024/09/19/gitlab-advanced-sast-is-now-generally-available/\"\u003eGitLab Advanced SAST generally available\u003c/a\u003e. \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/sast/gitlab_advanced_sast.html\"\u003eGitLab Advanced SAST\u003c/a\u003e is a static application security testing scanner designed to discover vulnerabilities by performing cross-function and cross-file taint analysis. By following the paths user inputs take, the analyzer identifies potential points where untrusted data can influence the execution of your application in unsafe ways, ensuring the vulnerabilities are detected even when they span multiple functions and files.\u003c/p\u003e\n\u003cp\u003eGitLab Advanced SAST can be used together with \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/vulnerabilities/#explaining-a-vulnerability\"\u003eGitLab Duo Vulnerability Explanation\u003c/a\u003e in order to reduce the mean time to remediation (MTTR). GitLab Duo can provide practical, AI-powered examples of how threat actors can exploit vulnerabilities and offer light-weight remediation guidance, which can be used with cross-file analysis to enhance application security (AppSec) efficiency.\u003c/p\u003e\n\u003cp\u003eThis tutorial will show you how to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eenable GitLab Advanced SAST\u003c/li\u003e\n\u003cli\u003eread results from the scanner\u003c/li\u003e\n\u003cli\u003ereview the code flow of a vulnerability\u003c/li\u003e\n\u003cli\u003euse GitLab AI to quickly remediate the vulnerability\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"enable-gitlab-advanced-sast\" tabindex=\"-1\"\u003eEnable GitLab Advanced SAST \u003ca href=\"#enable-gitlab-advanced-sast\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eFollow the instructions below to enable GitLab Advanced SAST. You can also view this video to get started:\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/xDa1MHOcyn8?si=5SYuKgP-BdBryqcU\" frameborder=\"0\" allowfullscreen=\"\"\u003e \u003c/iframe\u003e\n\u003c/figure\u003e\n\n\u003ch2 id=\"run-gitlab-advanced-sast-on-each-code-commit\" tabindex=\"-1\"\u003eRun GitLab Advanced SAST on each code commit \u003ca href=\"#run-gitlab-advanced-sast-on-each-code-commit\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBefore using Advanced SAST, the following prerequisites must be met:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGitLab Ultimate Subscription (\u003ca href=\"https://gitlab.com/-/trials/new?glm_content=default-saas-trial\u0026amp;glm_source=about.gitlab.com%2F\"\u003efree 30-day trial\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003eGitLab SaaS or GitLab Self-managed (running Version 17.4)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo enable the GitLab Advanced SAST scanner:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOn the left sidebar, select \u003cstrong\u003eSearch\u003c/strong\u003e or \u003cstrong\u003eGo to\u003c/strong\u003e and find your project.\u003c/li\u003e\n\u003cli\u003eAdd or edit the \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e to include the following:\n\u003cul\u003e\n\u003cli\u003eTest stage\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eJobs/SAST.gitlab-ci.yml\u003c/code\u003e template\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGITLAB_ADVANCED_SAST_ENABLED\u003c/code\u003e variable set to true\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eApply the change.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYour newly merged \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e should contain the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estages:\n  - test\n\ninclude:\n  - template: Jobs/SAST.gitlab-ci.yml\n\nvariables:\n  GITLAB_ADVANCED_SAST_ENABLED: \u0026#39;true\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will now run the \u003ccode\u003egitlab-advances-sast\u003c/code\u003e job within the test stage of your application along with all the other jobs you have defined. Advanced SAST will replace the semgrep SAST scanner for the \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/sast/gitlab_advanced_sast.html#supported-languages\"\u003esupported programming languages\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/1IlFiwPQoCtgX3LpUnyJ9I/07b921339499e8b0ff2d78f20fc2e62c/1.png\" alt=\"Running  job within the test stage of your application\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Advanced SAST job in pipeline\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You can fully configure the job as you would any job in GitLab. For more information, see the \u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/\"\u003eCI/CD YAML syntax documentation\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eJust like our previous SAST scanner, Advanced SAST allows you to scan source code in the diff of a feature branch. This allows us to address any incoming vulnerabilities before they make it into production. Here we can see the scanner results for the diff within a merge request:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/4YQvk4LrkGKIJJ9i9AsFZV/8d796f31fc987399db7fa9801422ef54/2.png\" alt=\"Advanced SAST scanner results for the diff within a merge request\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhen selecting a newly detected vulnerability, we get the following details to assist with remediation:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStatus:\u003c/strong\u003e The status of the vulnerability (Needs triage, Confirmed, Dismissed, Resolved)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDescription:\u003c/strong\u003e Detailed information on the detected vulnerability\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDetection time:\u003c/strong\u003e Time vulnerability was detected\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLocation:\u003c/strong\u003e Line of code where vulnerability is detected\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSeverity:\u003c/strong\u003e Severity of vulnerability from CVE database\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTraining:\u003c/strong\u003e Gamified training from our partners\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSolutions:\u003c/strong\u003e Information on how to remediate or resolve a vulnerability\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIdentifiers:\u003c/strong\u003e Relevant links showcasing detailed description, exploitation, and remediation\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/4UgcOaKaCFgQL0NrDYusp9/8710b52e14d872354fb0d76ad8f90e59/MR_with_vulnerability_insights.png\" alt=\"Merge request with vulnerability insights\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eMerge request with vulnerability insights\u003c/i\u003e\u003c/center\u003e\n\u003cp\u003e\nVulnerabilities detected within an MR are actionable, meaning they can be dismissed or an issue can be created and populated with relevant vulnerability information.\u003c/p\u003e\n\u003cp\u003eDismissing an issue saves AppSec teams time, because they can see relevant developer information when reviewing an MR. Creating a confidential issue allows developers and AppSec teams to further collaborate on resolving a vulnerability where a fix is not straightforward. Confidential issues have limited permissions and can be used with confidential merge requests to prevent possible malicious actors from exploiting.\u003c/p\u003e\n\u003cp\u003eTo further support separation of duties and prevent vulnerable code from making it into production, you can require approval from certain people (for example, the security team) in order to merge vulnerable code.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/ZjcNyIKziMzyvodW1tyZb/88f9d472315e037f05c8aa4d2517430a/security_policies_in_action.png\" alt=\"GitLab security policies in action\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eSecurity policies in action\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Learn more about Security Policies and how to implement them in the \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/policies/\"\u003eSecurity Policy documentation\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"manage-vulnerabilities-in-production\" tabindex=\"-1\"\u003eManage vulnerabilities in production \u003ca href=\"#manage-vulnerabilities-in-production\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhile preventing vulnerabilities from making it into production is crucial for application security, it is equally as important to manage vulnerabilities in production. When security scanners are run on a default or production-level branch, a \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/vulnerability_report/\"\u003evulnerability report\u003c/a\u003e will be populated with the latest vulnerability data which can be used to triage and manage vulnerabilities.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/2g9TrCD8Y57joN65wYUQRU/77d5a97ca65b7a109ed2022f8753b6ee/5.png\" alt=\"GitLab Vulnerability Report sorted by Advanced SAST\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Vulnerability Report sorted by Advanced SAST\u003c/i\u003e\u003c/center\u003e\n\u003cp\u003eWhen selecting a vulnerability you get similar vulnerability details as seen in a merge request, making for a single source of truth for developers and AppSec teams.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/2So9cmmQ9rErHiUwmBwTfV/05f81db518ecbeb439113a76265ba4d6/Vuln_page_with_vulnerability_insights.png\" alt=\"Vulnerability page with vulnerability insights\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eVulnerability page with vulnerability insights\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eAppSec teams can triage a vulnerability by changing its status and adding relevant details on the status change. Issues can be created to track the progress of a fix. From here, a developer can be assigned.\u003c/p\u003e\n\u003ch2 id=\"examine-vulnerable-code-flow\" tabindex=\"-1\"\u003eExamine vulnerable code flow \u003ca href=\"#examine-vulnerable-code-flow\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eFor vulnerabilities detected with Advanced SAST, we can see a \u0026#34;Code flow\u0026#34; tab on the Vulnerability page.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/7oVuynhChja6ReP3W9k0ZR/1fe951dabfdfdc1d7e7900930d607401/7.png\" alt=\"Advanced SAST - image 7\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Advanced SAST code flow\u003c/i\u003e\u003c/center\u003e\n\u003cp\u003eIn this example, you can see that a vulnerability is traced across multiple functions, giving deeper insight into the best practices we should put in place to not only resolve the vulnerability, but prevent similar vulnerabilities in the future.\u003c/p\u003e\n\u003ch2 id=\"use-gitlab-duo-vulnerability-explanation\" tabindex=\"-1\"\u003eUse GitLab Duo Vulnerability Explanation \u003ca href=\"#use-gitlab-duo-vulnerability-explanation\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitLab Duo can help you mitigate or remediate a vulnerability by using a large language model to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSummarize the vulnerability\u003c/li\u003e\n\u003cli\u003eHelp developers and security analysts understand the vulnerability\u003c/li\u003e\n\u003cli\u003eShow how the vulnerability can be exploited\u003c/li\u003e\n\u003cli\u003eProvide a suggested remediation or mitigation\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo use Vulnerability Explanation, the following is required:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGitLab Ultimate subscription\u003c/li\u003e\n\u003cli\u003eGitLab Duo Enterprise seat\u003c/li\u003e\n\u003cli\u003eGitLab Duo must be enabled for your group or instance\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFrom the vulnerability report, you can select a SAST vulnerability and go to its Vulnerability page. From the Vulnerability page, you can do any of the following to explain the vulnerability:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSelect the text below the vulnerability description\u003c/li\u003e\n\u003cli\u003eYou can use AI by asking GitLab Duo Chat to explain this vulnerability and offer a suggested fix.\u003c/li\u003e\n\u003cli\u003eIn the upper right, from the \u0026#34;Resolve with merge request\u0026#34; dropdown list, select \u003cstrong\u003eExplain Vulnerability\u003c/strong\u003e, then select \u003cstrong\u003eExplain vulnerability\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eOpen GitLab Duo Chat and use the explain a vulnerability command: \u003ccode\u003e/vulnerability_explain\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThen the vulnerable code will be processed by Anthropic’s Claude 3 Haiku model and provide the following data:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/208t9ff1Umd6oYgKjOdEAn/9b2a9ef5779159873c15af4bb3e12f26/vuln_explain_2.png\" alt=\"GitLab Duo Vulnerability Explanation\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"putting-it-all-together\" tabindex=\"-1\"\u003ePutting it all together \u003ca href=\"#putting-it-all-together\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNow, let\u0026#39;s put it all together with a concrete example. I will use the \u003ca href=\"https://owasp.org/www-project-juice-shop/\"\u003eOWASP Juice Shop\u003c/a\u003e as my demo application and run GitLab Advanced SAST to detect a vulnerability in production. Then I will use the vulnerability code flow and GitLab Duo to investigate vulnerability exploitation, and remediation. You can \u003ca href=\"https://gitlab.com/gitlab-da/tutorials/security-and-governance/owasp/juice-shop\"\u003efollow along with this demo\u003c/a\u003e and see this workflow in action by watching:\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/H1S43oM44k0?si=2LYorTjByOHbCAko\" frameborder=\"0\" allowfullscreen=\"\"\u003e \u003c/iframe\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eThe detection and remediation workflow is as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEnable GitLab Advanced SAST and run it on the project’s default branch.\u003c/li\u003e\n\u003cli\u003eOpen the Vulnerability Report and sort by \u003cstrong\u003eTool:GitLab Advanced SAST\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eSelect the \u003cstrong\u003eImproper neutralization of special elements in data query logic\u003c/strong\u003e vulnerability found in \u003ccode\u003eBasket.ts\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eUse the vulnerability code flow to understand the vulnerable paths.\u003c/li\u003e\n\u003cli\u003eRun \u003cstrong\u003eExplain this vulnerability\u003c/strong\u003e to see exploit information.\u003c/li\u003e\n\u003cli\u003eRun the application locally to attempt exploitation.\u003c/li\u003e\n\u003cli\u003eChange vulnerability status to \u0026#34;Confirmed\u0026#34; and provide relevant info.\u003c/li\u003e\n\u003cli\u003eDetermine remediation path using all relevant data:\n\u003cul\u003e\n\u003cli\u003eVulnerability page insights, Code Flow, Vulnerability Explanation results\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCreate a new branch and apply remediation.\u003c/li\u003e\n\u003cli\u003eRun the remediated application locally and try to exploit again.\u003c/li\u003e\n\u003cli\u003eCreate a merge request with the fix.\u003c/li\u003e\n\u003cli\u003eCode change will be tested using CI to assure we don’t break the application.\u003c/li\u003e\n\u003cli\u003eValidate and merge MR.\u003c/li\u003e\n\u003cli\u003eTest exploit in deployed environment.\u003c/li\u003e\n\u003cli\u003eChange vulnerability status to \u0026#34;Resolved\u0026#34; on the Vulnerability page.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e There are many ways to triage and remediate vulnerabilities, make sure to follow best practices set by your organization.\u003c/p\u003e\n\u003ch2 id=\"useful-links\" tabindex=\"-1\"\u003eUseful links \u003ca href=\"#useful-links\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo learn more about GitLab and how you can get started with enhancing your organization’s application security posture, check out the following resources.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/pricing/ultimate/\"\u003eGitLab Ultimate\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/gitlab-duo/\"\u003eGitLab Duo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/solutions/security-compliance/\"\u003eGitLab Security and Compliance Solutions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/solutions/supply-chain/\"\u003eGitLab Software Supply Chain Security Solutions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/solutions/continuous-software-compliance/\"\u003eGitLab Continuous Software Compliance\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gitlab.com/gitlab-da/tutorials/security-and-governance/owasp/juice-shop\"\u003eJuiceShop Demo Application\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/\"\u003eGitLab AppSec documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/sast/gitlab_advanced_sast.html\"\u003eAdvanced SAST  documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/vulnerabilities/#explaining-a-vulnerability\"\u003eExplain this Vulnerability documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/vulnerabilities/#vulnerability-code-flow\"\u003eCode Flow documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/policies/\"\u003eSecurity Policy documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://owasp.org/www-project-juice-shop/\"\u003eOWASP Juice Shop documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2024-10-22T00:00:00Z",
  "modifiedTime": null
}
