{
  "id": "7b3878a7-a018-4e5c-8fe7-557cdfcc3fbf",
  "title": "How Imports Work in RSC",
  "link": "https://overreacted.io/how-imports-work-in-rsc/",
  "description": "A layered module system.",
  "author": "",
  "published": "Thu, 05 Jun 2025 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 27572,
  "excerpt": "A layered module system.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "React Server Components (RSC) is a programming paradigm that lets you express a client/server application as a single program spanning over two environments. Concretely, RSC extends the module system (the import and export keywords) with novel semantics that let the developer control the frontend/backend split. I’ve previously written about the 'use client' and 'use server' directives which mark the “split points” between the two environments. In this post, I’d like to focus on how these directives interact with the import and export keywords. This post is a deep dive for anyone who’d like to build an accurate mental model of RSC, as well as for folks who are interested in module systems in general. You might find the RSC approach both surprising and simpler than you might think. As usual, 90% of this article won’t be about RSC. It’s about how imports work in general, and what happens when we try to share code between the backend and the frontend. My aim is to show how RSC provides a natural solution to the last 10% of tensions that arise when we write code spanning both sides of the wire. Let’s start with the fundamentals. What’s a Module System? When a computer executes a program, it doesn’t need “modules”. The computer needs the program’s code and data to be fully loaded in memory before it can run and process them. It’s actually us humans who want to split code into modules: Modules let us break complex programs into parts that can fit into our brains. Modules let us constrain which lines of code are meant to be visible (or exported) to other parts of the code, and which should remain an implementation detail. Modules let us reuse code written by other humans (and by ourselves). We want to author our programs as split into parts—but executing a program involves “unrolling” those parts in memory. The job of a module system is to bridge the gap between how humans write code and how computers execute it. Concretely, a module system is a set of rules that specify how a program can be split into files, how the developer controls which parts can “see” which other parts, and how those parts get linked into a single program that can be loaded in memory. In JavaScript, the module system is exposed via import and export keywords. Imports Are Like Copy and Paste… Consider these two files, which we’ll call a.js and b.js: export function a() { return 2; } export function b() { return 2; } By themselves, they don’t do anything except defining some functions. Now consider this file called index.js: import { a } from './a.js'; import { b } from './b.js'; const result = a() + b(); // 4 console.log(result); Now, that’s a module that ties them together into a single program! The rules of the JavaScript module system are complex. There are many intricacies to how it works. But there’s a simple intuition we can use. The JavaScript module system is designed to ensure that by the time the program above runs, it should behave identically to this single-file program (which doesn’t use modules at all): function a() { return 2; } function b() { return 2; } const result = a() + b(); // 4 console.log(result); In other words, the import and export keywords are designed to work in a way that’s reminiscent of copying and pasting—because ultimately, in the end, the program does need to be “unrolled” in the process’s memory by the JS engine. …Except They’re Not Earlier I said imports are like copy and paste. That’s not exactly true. To see why, it’s intructive to take a trip down the memory lane to the #include directive in C. The #include directive, which predates the JavaScript import by about 40 years, behaved quite literally like copy and paste! For example, here’s a C program: #include \"a.h\" #include \"b.h\" int main() { return a() + b(); } In C, the #include directive would literally embed the entire contents of a.h and b.h into the file above. This behavior is simple, but it has two big downsides: One problem with #include is that unrelated functions from different files would clash if their names were the same. That’s something we take for granted with modern module systems, where all identifiers are local to the file they’re in. Another problem with #include is that the same file could get “included” from several places—and thus get repeated in the output program many times! To work around this, the best practice was to surround the contents of each file you want to be “includable” with a build-time “skip including me if you already included me” guard. Modern module systems, like import, do something similar automatically. Let’s unpack that last point because it’s important. JavaScript Modules Are Singletons Suppose we’ve added a new module called c.js that looks like this: export function c() { return 2; } Now suppose that we’ve rewritten both a.js and b.js so that each of them imports the c function from the c.js file and does something with it: import { c } from './c.js'; export function a() { return c() * 2; } import { c } from './c.js'; export function b() { return c() * 3; } If import was literally copy-and-paste (like #include), we’d end up with two copies of the c function in our program. But thankfully, that’s not what happens! The JavaScript module system ensures that the code above, along with index.js file from earlier, is equivalent in its semantics to the single-file program below. Notice how the c function is defined once despite having been imported twice: function c() { return 2; } function a() { return c() * 2; } function b() { return c() * 3; } const result = a() + b(); // (2 * 2) + (2 * 3) = 10 console.log(result); In other words, modern module systems, such as the JavaScript module system, guarantee that the code inside each individual module executes at most once, no matter how many times and from how many places that module gets imported. This is a crucial design choice that enables many advantages: When the code is turned into a single program (whether as an executable, as a bundle, or in-memory), the output size does not “explode” from repetition. Each module can keep some “private state” in top-level variables and be sure that it’s retained (and not recreated) no matter how many times it got imported. The mental model is dramatically simpler because each module is a “singleton”. If you want some code to only execute once, write it at the top level of its module. Under the hood, module systems usually do this by holding a Map that keeps track of which modules (keyed by their filename) have already been loaded, and what their exported values are. Any JS import implementation will have this logic somewhere, for example: Node.js source, webpack source, Metro (RN) source. Let’s repeat that: each JavaScript module is a singleton. Importing the same module twice will not execute its code twice. Every module runs at most once. We’ve talked about multiple modules, but what about multiple computers? One Program, One Computer Most JavaScript programs are written for a single computer. That could be the browser, or a Node.js server, or some exotic JavaScript runtime. Still, I think it’s safe to say the majority of JS programs are written for a single machine to execute. The program is loaded, the program runs, the program stops. The JavaScript module system, as described earlier, was designed to support exactly this most common use case. Here’s one last recap of how it works: There’s some file that acts as an entry point into our program. In our earlier example, that was index.js. This is where the JavaScript engine starts. This file may import other modules, like a.js or b.js, which themselves can import more modules. The JavaScript engine executes the code of those modules. It also stores the exports of each module in an in-memory cache for later. If the JavaScript engine sees an import to a module it has already loaded (such as the second import to c.js), it’s not going to run the module again. Modules are singletons! Instead, it will read that module’s exports from an in-memory cache. Ultimately, it’s convenient to think of the end result as being similar to copy-pasting the modules into one file, surgically renaming any clashing variables, and ensuring that the contents of each individual module is only ever included once: /* c.js */ function c() { return 2; } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } const result = a() + b(); // (2 * 2) + (2 * 3) = 10 console.log(result); In that sense, when you import some code, you bring it into your program. But what if we want to write both our backend and frontend in JavaScript? (Or, alternatively, what if we realize that adding a JS BFF can make our app better?) Two Programs, Two Computers Traditionally, a frontend and a backend in JS means that we’re working on two different programs that run on two different computers. In many cases, they might even be maintained by two different teams that barely talk to each other. Let’s take a closer look at both of these programs. The backend is responsible for serving an HTML page (and potentially some APIs for more data-intensive apps). The frontend is responsible for pieces of the interactive logic on that HTML page. The backend code might live in backend/index.js: function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } The frontend code might live in frontend/index.js: function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; Let’s put them close to emphasize these are two different but related programs: function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; Now let’s see what happens when we import something from either side. Suppose we import a.js and b.js from backend/index.js: import { a } from '../a.js'; import { b } from '../b.js'; function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; Importing them from the backend code would bring them into the backend code: /* c.js */ function c() { return 2; } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; Now suppose that we also import them from frontend/index.js: import { a } from '../a.js'; import { b } from '../b.js'; function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } import { a } from '../a.js'; import { b } from '../b.js'; function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; Importing them from the frontend code brings them into the frontend code: /* c.js */ function c() { return 2; } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } /* c.js */ function c() { return 2; } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; Notice how the frontend and the backend don’t share the module system! That’s an important insight. Importing code from either side brings that code into that side—nothing more. The two sides have two independent module systems. Modules still act like singletons—but they are only singletons per environment. Although we are reusing the a.js, b.js, and c.js implementations between both sides, it would be more accurate to think that both the backend code and the frontend sides have “their own versions” of the a.js, b.js, and c.js modules. So far, there’s nothing unusual about what I’ve described. It’s how sharing code between the backend and the frontend has always worked in full-stack apps. However, as more of our code gets reused between the environments, we’re risking accidentally reusing something that’s not meant for the other side. How can we constrain and control code reuse? Build Failures Are Actually Good Suppose that somebody edits c.js to include some code that only makes sense on the backend. For example, imagine that we use fs to read a file on the server: import { readFileSync } from 'fs'; export function c() { return Number(readFileSync('./number.txt', 'utf8')); } This would not cause problems for the backend code: /* fs.js */ function readFileSync() { /* ... */} /* c.js */ function c() { return Number(readFileSync('./number.txt', 'utf8')); } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } However, it would fail the frontend build because fs does not exist there: import { readFileSync } from 'fs'; // 🔴 Build error: Cannot import 'fs' /* c.js */ function c() { return Number(readFileSync('./number.txt', 'utf8')); } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; And this is actually good! When we start reusing code between the two sides, we want to have some confidence that the code we’re trying to reuse will actually work on both sides. If some APIs only make sense on one side (like fs only makes sense on the backend), we want the build to fail early so that we can decide how to fix our code: We could choose to move the fs call somewhere other than c.js. We could refactor a.js and b.js to not need c.js. We could change frontend/index.js to not need a.js and b.js. It’s important to note that all of the above solutions are valid. The solution you pick depends on what you’re actually trying to do. There is no automated way to pick “the best” solution—if anything, this is similar to resolving a real Git conflict. It’s not fun to resolve but the behavior you want is up to you (or an LLM) to decide. This is the price you pay for reusing code. The benefit is that it’s easy to shift the logic around depending on which side needs it. The downside is that, when things blow up, you have to look at the build failure and decide which module needs a fix. In this case, we were lucky that importing something “on the wrong side” actually caused a build error. This let us immediately see the problem. But what if it didn’t? Server-Only Code Suppose that instead, somebody edits c.js to import a server-side secret. import { secret } from './secrets.js'; export function c() { return secret; } This is much worse than the previous example! There would be no build failure, and the secret would become a part of both the backend and the frontend code: /* secrets.js */ const secret = 12345; /* c.js */ function c() { return secret; } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } /* secrets.js */ const secret = 12345; /* c.js */ function c() { return secret; } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; This is a nightmare scenario, but many fullstack apps don’t employ any protection against a developer accidentally pulling in secrets into the frontend code like this! How could we improve on that? Here’s one idea. In the previous section, we’ve seen that using fs from the frontend code failed the frontend build, forcing us to actually fix the problem. That’s exactly what we want to happen here, too! Suppose that we create a special package, which we’re going to call server-only, that serves as a marker for code that must never reach the frontend. By itself, that package will not contain any real code. It is a “poison pill”. We’ll teach our frontend bundler to fail the build if this module gets into the frontend bundle. Assuming we’ve done that, we can now mark secrets.js as server-only: import 'server-only'; export const secret = 12345; With this change, pulling secrets.js into the bundle fails the frontend build. Concretely, both a.js and b.js will bring c.js, which will bring secrets.js, which will bring server-only—and that’s the poison pill that fails the build: /* server-only */ /* (This does nothing on the backend.) */ /* secrets.js */ const secret = 12345; /* c.js */ function c() { return secret; } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } /* server-only */ /* 🔴 (This fails the build on the frontend.) */ /* secrets.js */ const secret = 12345; /* c.js */ function c() { return secret; } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; Now we can control which code is not allowed to escape the backend! (As a concrete implementation example, here’s the related logic in the Next.js bundler.) Like with the fs import earlier, we’d have different options to fix it: We could choose to move the secrets.js import somewhere other than c.js. We could refactor a.js and b.js to not need c.js. We could change frontend/index.js to not need a.js and b.js. But the important part about this solution is that it automatically propagates up the import chain. You don’t need to mark individual files like a.js, b.js, and c.js as server-only unless there’s some specific reason local to them that must prevent their inclusion. It’s enough to mark files that should definitely not be included (like secrets.js), and then rely on the “poison pill” propagating up the import chain. Client-Only Code Similarly to the server-only “poison pill”, we can create a mirror twin client-only “poison pill” that fails the server-side build. (If you don’t bundle the server, you could instead run this check separately similar to running TypeScript.) Suppose that we used a browser-specific API in c.js. This may be a decent reason for us to decide that it’s never valid to pull it into the backend code: import 'client-only'; export function c() { return Number(prompt('How old are you?')); } This is not as critical, but it helps discover mistakes more quickly. Our goal is to turn confusing runtime errors that stem from importing code that wasn’t meant for the other side—like DOM logic—into build errors that force us to fix it: /* client-only */ /* 🔴 (This fails the build on the backend.) */ /* c.js */ function c() { return Number(prompt('How old are you?')); } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } /* client-only */ /* (This does nothing on the frontend.) */ /* c.js */ function c() { return Number(prompt('How old are you?')); } /* a.js */ function a() { return c() * 2; } /* b.js */ function b() { return c() * 3; } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; Again, this would present us with a choice: We could refactor c.js to work on the backend (and remove the poison pill). We could refactor a.js and b.js to not need c.js. We could change backend/index.js to not need a.js and b.js. We could further envision a more granular version of client-only and server-only that applies to individual package imports. For example, the React package could declare APIs like useState and useEffect to be client-only so that pulling them into the backend code immediately fails the build. (Hint: React actually does do that via the package.json Conditional Exports mechanism.) I suspect you’re starting to see a theme here. As we move to share and reuse more code between the backend and frontend codebases—and indeed, as these two codebases blend into one—these build-time assertions give us a peace of mind. Not every module needs to be exclusive to some side. In fact, most modules don’t care because they aren’t the source of incompatibilities. For example, a.js and b.js don’t prescribe that they must only exist on one side because they don’t know the implementation details of c.js. But if some module does care to be exclusive, it can now express this “locally” with server-only or client-only. The declared incompatibility then transitively “infects” every importing module. It is also crucial to understand that the server-only and client-only “poison pills” do not control where the code goes. They don’t “put” the code “on the backend” or “on the frontend”. The only thing these assertions do is prevent code from being pulled into an unsupported environment. They’re poison pills only. By this point, we’ve almost invented RSC. There’s just one last detail left. One Program, Two Computers Let’s have one more look at our backend and our frontend as separate programs: function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; By now, we have a good mental model for how these programs can share code: Importing code from either side always bring it into that side. The two module systems remain completely independent. If you import some shared code from both sides, it will be independently brought into both sides. By default, we assume that any code is reusable. But we provide server-only and client-only poison pills that should be used in modules that should never get brought into a particular side due to some code directly inside of those modules. This doesn’t change how or where the code runs, but it gives us early build errors. Honestly, we could stop here, and we’d have a compelling setup for full-stack development that provides safer code reuse than many popular setups. However, there’s one remaining weakness in our approach. Currently, the backend code and the frontend code rely on convention to stay in sync. The backend wants to refer to the sayHello function from the frontend, but there’s no way to do it syntactically so it has to resort to assuming that it will exist on the other side: function server() { return ( `\u003chtml\u003e \u003cbody\u003e \u003cbutton onClick=\"sayHello()\"\u003e Press me \u003c/button\u003e \u003cscript src=\"/frontend/index.js type=\"module\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e` ); } function sayHello() { alert('Hi!'); } window['sayHello'] = sayHello; This is kind of fragile. Of course, the backend couldn’t just import sayHello, for—as an observant reader might already realize—that would just bring it into the backend code. It would be nice if there was some way for the backend code to refer to sayHello without bringing it into the backend. Luckily, that is what 'use client' does: import { sayHello } from '../frontend/index.js'; function Server() { return ( \u003chtml\u003e \u003cbody\u003e \u003cbutton onClick={sayHello}\u003e Press me \u003c/button\u003e \u003c/body\u003e \u003c/html\u003e ); } 'use client'; export function sayHello() { alert('Hi.'); } That’s the “remaining 10%” that RSC adds. In RSC, imports on both sides normally work like regular imports—but 'use client' changes this behavior to “opening a door” to the frontend environment. When you add 'use client', you’re saying: “If you import me from the backend world, don’t actually bring my code into the backend—instead, provide a reference that React can turn eventually into a \u003cscript\u003e tag and revive on the frontend.” Likewise, 'use server' lets a piece of the frontend code “open the door” to the backend and refer to a backend module without bringing it into the frontend world. The directives aren’t for specifying “where the code runs” module by module. You shouldn’t put 'use client' in all frontend modules or 'use server' into all backend modules—that’s pointless! All they do is let you create “doors” between the two module systems. They let you refer to the other world. If you want to pass data from the backend to the frontend (as a \u003cscript\u003e tag), you need to 'use client'. If you want to pass data from the frontend to the backend (as an API call), you need to 'use server'. Otherwise, you don’t need either directive—you just use import as usual and stay in the current world. In Conclusion RSC does not shy away from the fact that the backend and the frontend each have their own module system. It works exactly like traditional JavaScript codebases that reuse some code between the frontend and the backend, where reused code effectively exists on both sides. What RSC adds on top are just two mechanisms: The import 'client-only' and import 'server-only' poison pills that let some individual modules declare they must not be brought into the other world. The 'use client' and 'use server' directives that let you refer to the modules from the other world and pass data to them without bringing them in. With these two mechanisms, you can see an RSC application as a single program spanning two computers—with two independent module systems, two poison pills, and two doors to pass information between those module systems. As this “layered” approach settles in your muscle memory, you’ll realize that the frontend/ and backend/ directories become unnecessary and downright misleading because the information is already contained in the modules. But it’s contained locally so the boundaries automatically shift as you evolve your code. The poison pills ensure that nothing is brought into a wrong world, the directives let you pass information between the worlds, and regular imports work as usual. Now all you have to do is to fix the build errors. I heard LLMs are getting quite good at that.",
  "image": "https://overreacted.io/how-imports-work-in-rsc/opengraph-image?5b0b970dfd19bb8c",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eReact Server Components (RSC) is a programming paradigm that lets you express a client/server application as a single program spanning over two environments. Concretely, RSC extends the module system (the \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e keywords) with novel semantics that let the developer control the frontend/backend split.\u003c/p\u003e\n\u003cp\u003eI’ve \u003ca href=\"https://overreacted.io/what-does-use-client-do/\"\u003epreviously written\u003c/a\u003e about the \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e directives which mark the “split points” between the two environments. In this post, I’d like to focus on \u003cem\u003ehow\u003c/em\u003e these directives interact with the \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e keywords.\u003c/p\u003e\n\u003cp\u003eThis post is a deep dive for anyone who’d like to build an accurate mental model of RSC, as well as for folks who are interested in module systems in general. You might find the RSC approach both surprising \u003cem\u003eand\u003c/em\u003e simpler than you might think.\u003c/p\u003e\n\u003cp\u003eAs usual, 90% of this article won’t be \u003cem\u003eabout\u003c/em\u003e RSC. It’s about how imports work in general, and what happens when we try to share code between the backend and the frontend. My aim is to show how RSC provides a natural solution to the last 10% of tensions that arise when we write code spanning both sides of the wire.\u003c/p\u003e\n\u003cp\u003eLet’s start with the fundamentals.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"whats-a-module-system\"\u003e\u003ca target=\"_self\" href=\"#whats-a-module-system\"\u003eWhat’s a Module System?\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWhen a computer executes a program, it doesn’t need “modules”. The computer needs the program’s code and data to be \u003cem\u003efully loaded in memory\u003c/em\u003e before it can run and process them. It’s actually \u003cem\u003eus humans\u003c/em\u003e who want to split code into modules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eModules let us break complex programs into parts that can fit into our brains.\u003c/li\u003e\n\u003cli\u003eModules let us constrain which lines of code are meant to be visible (or \u003cem\u003eexported\u003c/em\u003e) to other parts of the code, and which should remain an implementation detail.\u003c/li\u003e\n\u003cli\u003eModules let us reuse code written by other humans (and by ourselves).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eWe want to \u003cem\u003eauthor\u003c/em\u003e our programs as split into parts—but \u003cem\u003eexecuting\u003c/em\u003e a program involves “unrolling” those parts in memory. The job of a module system is to bridge the gap between how humans write code and how computers execute it.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eConcretely, a \u003cem\u003emodule system\u003c/em\u003e is a set of rules that specify how a program can be split into files, how the developer controls which parts can “see” which other parts, and how those parts get linked into a single program that can be loaded in memory.\u003c/p\u003e\n\u003cp\u003eIn JavaScript, the module system is exposed via \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e keywords.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"imports-are-like-copy-and-paste\"\u003e\u003ca target=\"_self\" href=\"#imports-are-like-copy-and-paste\"\u003eImports Are Like Copy and Paste…\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eConsider these two files, which we’ll call \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eBy themselves, they don’t do anything except defining some functions.\u003c/p\u003e\n\u003cp\u003eNow consider this file called \u003ccode\u003eindex.js\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./a.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e b \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./b.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e +\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e // 4\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eNow, that’s a module that ties them together into a single program!\u003c/p\u003e\n\u003cp\u003eThe rules of the JavaScript module system are complex. There are many intricacies to how it works. But there’s a simple intuition we can use. The JavaScript module system is designed to ensure that \u003cstrong\u003eby the time the program above runs, it should behave identically to this single-file program\u003c/strong\u003e (which doesn’t use modules at all):\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e +\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e // 4\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eIn other words, the \u003ccode\u003eimport\u003c/code\u003e and \u003ccode\u003eexport\u003c/code\u003e keywords are \u003cstrong\u003edesigned to work in a way that’s reminiscent of copying and pasting\u003c/strong\u003e—because ultimately, in the end, the program \u003cem\u003edoes\u003c/em\u003e need to be “unrolled” in the process’s memory by the JS engine.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"except-theyre-not\"\u003e\u003ca target=\"_self\" href=\"#except-theyre-not\"\u003e…Except They’re Not\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eEarlier I said imports are like copy and paste. That’s not \u003cem\u003eexactly\u003c/em\u003e true. To see why, it’s intructive to take a trip down the memory lane to the \u003ccode\u003e#include\u003c/code\u003e directive in C.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e#include\u003c/code\u003e directive, which predates the JavaScript \u003ccode\u003eimport\u003c/code\u003e by about 40 years, behaved \u003ca target=\"_blank\" href=\"https://stackoverflow.com/a/5735389/458193\"\u003equite literally like copy and paste\u003c/a\u003e! For example, here’s a C program:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"c\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"c\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e#include\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003ea.h\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e#include\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003eb.h\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eint\u003c/span\u003e\u003cspan\u003e main\u003c/span\u003e\u003cspan\u003e() {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e a()\u003c/span\u003e\u003cspan\u003e +\u003c/span\u003e\u003cspan\u003e b()\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eIn C, the \u003ccode\u003e#include\u003c/code\u003e directive would \u003cstrong\u003eliterally embed the entire contents\u003c/strong\u003e of \u003ccode\u003ea.h\u003c/code\u003e and \u003ccode\u003eb.h\u003c/code\u003e into the file above. This behavior is simple, but it has two big downsides:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eOne problem with \u003ccode\u003e#include\u003c/code\u003e is that \u003ca target=\"_blank\" href=\"https://softwareengineering.stackexchange.com/a/202156/3939\"\u003eunrelated functions from different files would clash\u003c/a\u003e if their names were the same. That’s something we take for granted with modern module systems, where all identifiers are local to the file they’re in.\u003c/li\u003e\n\u003cli\u003eAnother problem with \u003ccode\u003e#include\u003c/code\u003e is that the same file could get “included” from several places—and thus get repeated in the output program many times! To work around this, the best practice was to surround the contents of each file you want to be “includable” with a \u003ca target=\"_blank\" href=\"https://stackoverflow.com/a/12928949/458193\"\u003ebuild-time “skip including me if you already included me”\u003c/a\u003e guard. Modern module systems, like \u003ccode\u003eimport\u003c/code\u003e, do something similar automatically.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLet’s unpack that last point because it’s important.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"javascript-modules-are-singletons\"\u003e\u003ca target=\"_self\" href=\"#javascript-modules-are-singletons\"\u003eJavaScript Modules Are Singletons\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSuppose we’ve added a new module called \u003ccode\u003ec.js\u003c/code\u003e that looks like this:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eNow suppose that we’ve rewritten both \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e so that \u003cem\u003eeach of them\u003c/em\u003e imports the \u003ccode\u003ec\u003c/code\u003e function from the \u003ccode\u003ec.js\u003c/code\u003e file and does something with it:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e c \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./c.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e c \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./c.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eIf \u003ccode\u003eimport\u003c/code\u003e was literally copy-and-paste (like \u003ccode\u003e#include\u003c/code\u003e), we’d end up with two copies of the \u003ccode\u003ec\u003c/code\u003e function in our program. But thankfully, that’s not what happens!\u003c/p\u003e\n\u003cp\u003eThe JavaScript module system ensures that the code above, along with \u003ccode\u003eindex.js\u003c/code\u003e file from earlier, is equivalent in its semantics to the single-file program below. \u003cstrong\u003eNotice how the \u003ccode\u003ec\u003c/code\u003e function is defined once despite having been imported twice:\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e +\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e // (2 * 2) + (2 * 3) = 10\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eIn other words, modern module systems, such as the JavaScript module system, guarantee that \u003cstrong\u003ethe code inside each individual module executes \u003cem\u003eat most once,\u003c/em\u003e\u003c/strong\u003e no matter how many times and from how many places that module gets imported.\u003c/p\u003e\n\u003cp\u003eThis is a crucial design choice that enables many advantages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhen the code is turned into a single program (whether as an executable, as a bundle, or in-memory), the output size does not “explode” from repetition.\u003c/li\u003e\n\u003cli\u003eEach module can keep some “private state” in top-level variables and be sure that it’s retained (and not recreated) no matter how many times it got imported.\u003c/li\u003e\n\u003cli\u003eThe mental model is dramatically simpler because each module is a “singleton”. If you want some code to only execute once, write it at the top level of its module.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUnder the hood, module systems usually do this by holding a \u003ccode\u003eMap\u003c/code\u003e that keeps track of which modules (keyed by their filename) have already been loaded, and what their exported values are. Any JS \u003ccode\u003eimport\u003c/code\u003e implementation will have this logic \u003cem\u003esomewhere,\u003c/em\u003e for example: \u003ca target=\"_blank\" href=\"https://github.com/nodejs/node/blob/ed2c6965d2f901f3c786f9d24bcd57b2cd523611/lib/internal/modules/esm/loader.js#L114-L139\"\u003eNode.js source\u003c/a\u003e, \u003ca target=\"_blank\" href=\"https://github.com/webpack/webpack/blob/19ca74127f7668aaf60d59f4af8fcaee7924541a/lib/javascript/JavascriptModulesPlugin.js#L1435-L1446\"\u003ewebpack source\u003c/a\u003e, \u003ca target=\"_blank\" href=\"https://github.com/facebook/metro/blob/15fef8ebcf5ae0a13e7f0925a22d4211dde95e02/packages/metro-runtime/src/polyfills/require.js#L204-L209\"\u003eMetro (RN) source\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLet’s repeat that: each JavaScript module is a singleton. Importing the same module twice will not execute its code twice. Every module runs at most once.\u003c/p\u003e\n\u003cp\u003eWe’ve talked about \u003cem\u003emultiple modules,\u003c/em\u003e but what about \u003cem\u003emultiple computers?\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"one-program-one-computer\"\u003e\u003ca target=\"_self\" href=\"#one-program-one-computer\"\u003eOne Program, One Computer\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eMost JavaScript programs are written for a single computer.\u003c/p\u003e\n\u003cp\u003eThat could be the browser, or a Node.js server, or some exotic JavaScript runtime. Still, I think it’s safe to say \u003cstrong\u003ethe majority of JS programs are written for a single machine to execute.\u003c/strong\u003e The program is loaded, the program runs, the program stops.\u003c/p\u003e\n\u003cp\u003eThe JavaScript module system, as described earlier, was designed to support exactly this most common use case. Here’s one last recap of how it works:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThere’s some file that acts as an \u003cem\u003eentry point\u003c/em\u003e into our program. In our earlier example, that was \u003ccode\u003eindex.js\u003c/code\u003e. This is where the JavaScript engine starts.\u003c/li\u003e\n\u003cli\u003eThis file may import other modules, like \u003ccode\u003ea.js\u003c/code\u003e or \u003ccode\u003eb.js\u003c/code\u003e, which themselves can import more modules. The JavaScript engine executes the code of those modules. It also stores the exports of each module in an in-memory cache for later.\u003c/li\u003e\n\u003cli\u003eIf the JavaScript engine sees an \u003ccode\u003eimport\u003c/code\u003e to a module it has \u003cem\u003ealready loaded\u003c/em\u003e (such as the second import to \u003ccode\u003ec.js\u003c/code\u003e), it’s not going to run the module again. Modules are singletons! Instead, it will read that module’s exports from an in-memory cache.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eUltimately, it’s convenient to think of the end result as being similar to copy-pasting the modules into one file, surgically renaming any clashing variables, and ensuring that the contents of each individual module is only ever included once:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e +\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003cspan\u003e // (2 * 2) + (2 * 3) = 10\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eresult\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eIn that sense, when you \u003ccode\u003eimport\u003c/code\u003e some code, you bring it \u003cem\u003einto\u003c/em\u003e your program.\u003c/p\u003e\n\u003cp\u003eBut what if we want to write \u003cem\u003eboth our backend and frontend\u003c/em\u003e in JavaScript? (Or, alternatively, what if we realize that adding a \u003ca target=\"_blank\" href=\"https://overreacted.io/jsx-over-the-wire/#backend-for-frontend\"\u003eJS BFF can make our app better?\u003c/a\u003e)\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"two-programs-two-computers\"\u003e\u003ca target=\"_self\" href=\"#two-programs-two-computers\"\u003eTwo Programs, Two Computers\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTraditionally, a frontend and a backend in JS means that we’re working on two different programs that run on two different computers. In many cases, they might even be maintained by two different teams that barely talk to each other.\u003c/p\u003e\n\u003cp\u003eLet’s take a closer look at both of these programs. The \u003cem\u003ebackend\u003c/em\u003e is responsible for serving an HTML page (and potentially some APIs for more data-intensive apps). The \u003cem\u003efrontend\u003c/em\u003e is responsible for pieces of the interactive logic on that HTML page.\u003c/p\u003e\n\u003cp\u003eThe backend code might live in \u003ccode\u003ebackend/index.js\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThe frontend code might live in \u003ccode\u003efrontend/index.js\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eLet’s put them close to emphasize these are two different but related programs:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eNow let’s see what happens when we import something from either side.\u003c/p\u003e\n\u003cp\u003eSuppose we import \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e from \u003ccode\u003ebackend/index.js\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e../a.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e b \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e../b.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eImporting them \u003cem\u003efrom\u003c/em\u003e the backend code would bring them \u003cem\u003einto\u003c/em\u003e the backend code:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eNow suppose that we \u003cem\u003ealso\u003c/em\u003e import them from \u003ccode\u003efrontend/index.js\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e../a.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e b \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e../b.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e a \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e../a.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e b \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e../b.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eImporting them \u003cem\u003efrom\u003c/em\u003e the frontend code brings them \u003cem\u003einto\u003c/em\u003e the frontend code:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eNotice how the frontend and the backend don’t share the module system!\u003c/p\u003e\n\u003cp\u003eThat’s an important insight. Importing code \u003cem\u003efrom\u003c/em\u003e either side brings that code \u003cem\u003einto\u003c/em\u003e that side—nothing more. The two sides have two \u003cem\u003eindependent\u003c/em\u003e module systems. Modules still act like singletons—but they are only \u003cem\u003esingletons per environment.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAlthough we are \u003cem\u003ereusing\u003c/em\u003e the \u003ccode\u003ea.js\u003c/code\u003e, \u003ccode\u003eb.js\u003c/code\u003e, and \u003ccode\u003ec.js\u003c/code\u003e implementations between both sides, it would be more accurate to think that both the backend code and the frontend sides have “their own versions” of the \u003ccode\u003ea.js\u003c/code\u003e, \u003ccode\u003eb.js\u003c/code\u003e, and \u003ccode\u003ec.js\u003c/code\u003e modules.\u003c/p\u003e\n\u003cp\u003eSo far, there’s nothing unusual about what I’ve described. It’s how sharing code between the backend and the frontend has always worked in full-stack apps. However, as more of our code gets reused between the environments, we’re risking accidentally reusing something that’s \u003cem\u003enot meant\u003c/em\u003e for the other side.\u003c/p\u003e\n\u003cp\u003eHow can we constrain and control code reuse?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"build-failures-are-actually-good\"\u003e\u003ca target=\"_self\" href=\"#build-failures-are-actually-good\"\u003eBuild Failures Are Actually Good\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSuppose that somebody edits \u003ccode\u003ec.js\u003c/code\u003e to include some code that \u003cem\u003eonly\u003c/em\u003e makes sense on the backend. For example, imagine that we use \u003ccode\u003efs\u003c/code\u003e to read a file on the server:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e readFileSync \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003efs\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e Number\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereadFileSync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./number.txt\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eutf8\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThis would not cause problems for the backend code:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* fs.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e readFileSync\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e /* ... */\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e  function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e Number\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereadFileSync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./number.txt\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eutf8\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e  function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e  function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eHowever, it would fail the frontend build because \u003ccode\u003efs\u003c/code\u003e does not exist there:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e readFileSync \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003efs\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e // 🔴 Build error: Cannot import \u0026#39;fs\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e Number\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereadFileSync\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e./number.txt\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eutf8\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eAnd this is actually good!\u003c/p\u003e\n\u003cp\u003eWhen we start reusing code between the two sides, we want to have some confidence that the code we’re trying to reuse will \u003cem\u003eactually work\u003c/em\u003e on both sides.\u003c/p\u003e\n\u003cp\u003eIf some APIs only make sense on one side (like \u003ccode\u003efs\u003c/code\u003e only makes sense on the backend), we \u003cem\u003ewant\u003c/em\u003e the build to fail early so that we can decide how to fix our code:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWe could choose to move the \u003ccode\u003efs\u003c/code\u003e call somewhere other than \u003ccode\u003ec.js\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWe could refactor \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e to not need \u003ccode\u003ec.js\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWe could change \u003ccode\u003efrontend/index.js\u003c/code\u003e to not need \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIt’s important to note that \u003cstrong\u003eall of the above solutions are valid.\u003c/strong\u003e The solution you pick depends on what you’re actually trying to do. There is no automated way to pick “the best” solution—if anything, this is similar to resolving a real Git conflict. It’s not \u003cem\u003efun\u003c/em\u003e to resolve but the behavior you want \u003cem\u003eis up to you (or an LLM) to decide.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis is the price you pay for reusing code. The benefit is that it’s easy to shift the logic around depending on which side needs it. The downside is that, when things blow up, you have to look at the build failure and \u003cem\u003edecide\u003c/em\u003e which module needs a fix.\u003c/p\u003e\n\u003cp\u003eIn this case, we were lucky that importing something “on the wrong side” actually caused a build error. This let us immediately see the problem. But what if it didn’t?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"server-only-code\"\u003e\u003ca target=\"_self\" href=\"#server-only-code\"\u003eServer-Only Code\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSuppose that instead, somebody edits \u003ccode\u003ec.js\u003c/code\u003e to import a server-side secret.\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e secret \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e./secrets.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e secret\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThis is much worse than the previous example! There would be no build failure, and the \u003ccode\u003esecret\u003c/code\u003e would become a part of both the backend \u003cem\u003eand\u003c/em\u003e the frontend code:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* secrets.js */\u003c/span\u003e\u003cspan\u003e const \u003c/span\u003e\u003cspan\u003esecret\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e 12345\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e       function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e secret\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e       function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e       function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* secrets.js */\u003c/span\u003e\u003cspan\u003e const \u003c/span\u003e\u003cspan\u003esecret\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e 12345\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e       function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e secret\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e       function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e       function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThis is a nightmare scenario, but many fullstack apps don’t employ any protection against a developer accidentally pulling in secrets into the frontend code like this!\u003c/p\u003e\n\u003cp\u003eHow could we improve on that?\u003c/p\u003e\n\u003cp\u003eHere’s one idea. In the previous section, we’ve seen that using \u003ccode\u003efs\u003c/code\u003e from the frontend code failed the frontend build, forcing us to actually fix the problem.\u003c/p\u003e\n\u003cp\u003eThat’s \u003cem\u003eexactly\u003c/em\u003e what we want to happen here, too!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSuppose that we create a special package, which we’re going to call \u003ccode\u003eserver-only\u003c/code\u003e, that serves as a \u003cem\u003emarker\u003c/em\u003e for code that must never reach the frontend.\u003c/strong\u003e By itself, that package will not contain any real code. It is a “poison pill”. We’ll teach our frontend bundler to \u003cem\u003efail the build\u003c/em\u003e if this module gets into the frontend bundle.\u003c/p\u003e\n\u003cp\u003eAssuming we’ve done that, we can now mark \u003ccode\u003esecrets.js\u003c/code\u003e as server-only:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eserver-only\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport const \u003c/span\u003e\u003cspan\u003esecret\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e 12345\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eWith this change, pulling \u003ccode\u003esecrets.js\u003c/code\u003e into the bundle fails the frontend build. Concretely, both \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e will bring \u003ccode\u003ec.js\u003c/code\u003e, which will bring \u003ccode\u003esecrets.js\u003c/code\u003e, which will bring \u003ccode\u003eserver-only\u003c/code\u003e—and that’s the poison pill that fails the build:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* server-only */\u003c/span\u003e\u003cspan\u003e /* (This does nothing on the backend.) */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* secrets.js */\u003c/span\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003esecret\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e 12345\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e secret\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* server-only */\u003c/span\u003e\u003cspan\u003e /* 🔴 (This fails the build on the frontend.) */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* secrets.js */\u003c/span\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003esecret\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e 12345\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e secret\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eNow we can control which code is not allowed to escape the backend! (As a concrete implementation example, here’s the \u003ca target=\"_blank\" href=\"https://github.com/vercel/next.js/blob/f684e973f1ddbbdc99cdda9a89070d6d228a1dd7/crates/next-custom-transforms/src/transforms/react_server_components.rs#L640\"\u003erelated\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://github.com/vercel/next.js/blob/f684e973f1ddbbdc99cdda9a89070d6d228a1dd7/crates/next-custom-transforms/src/transforms/react_server_components.rs#L772-L778\"\u003elogic\u003c/a\u003e in the Next.js bundler.)\u003c/p\u003e\n\u003cp\u003eLike with the \u003ccode\u003efs\u003c/code\u003e import earlier, we’d have different options to fix it:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWe could choose to move the \u003ccode\u003esecrets.js\u003c/code\u003e import somewhere other than \u003ccode\u003ec.js\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWe could refactor \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e to not need \u003ccode\u003ec.js\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWe could change \u003ccode\u003efrontend/index.js\u003c/code\u003e to not need \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBut the important part about this solution is that it \u003cem\u003eautomatically propagates up the import chain\u003c/em\u003e. You don’t need to mark individual files like \u003ccode\u003ea.js\u003c/code\u003e, \u003ccode\u003eb.js\u003c/code\u003e, and \u003ccode\u003ec.js\u003c/code\u003e as server-only unless there’s some specific reason \u003cem\u003elocal to them\u003c/em\u003e that must prevent their inclusion. It’s enough to mark files that should \u003cem\u003edefinitely\u003c/em\u003e not be included (like \u003ccode\u003esecrets.js\u003c/code\u003e), and then rely on the “poison pill” propagating up the import chain.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"client-only-code\"\u003e\u003ca target=\"_self\" href=\"#client-only-code\"\u003eClient-Only Code\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSimilarly to the \u003ccode\u003eserver-only\u003c/code\u003e “poison pill”, we can create a mirror twin \u003ccode\u003eclient-only\u003c/code\u003e “poison pill” that fails the server-side build. (If you don’t bundle the server, you could instead run this check separately similar to running TypeScript.)\u003c/p\u003e\n\u003cp\u003eSuppose that we used a browser-specific API in \u003ccode\u003ec.js\u003c/code\u003e. This may be a decent reason for us to decide that it’s \u003cem\u003enever valid\u003c/em\u003e to pull it into the backend code:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eclient-only\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e Number\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHow old are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThis is not as critical, but it helps discover mistakes more quickly. Our goal is to turn confusing \u003cem\u003eruntime\u003c/em\u003e errors that stem from importing code that wasn’t meant for the other side—like DOM logic—into \u003cem\u003ebuild\u003c/em\u003e errors that force us to fix it:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* client-only */\u003c/span\u003e\u003cspan\u003e /* 🔴 (This fails the build on the backend.) */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e Number\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHow old are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* client-only */\u003c/span\u003e\u003cspan\u003e /* (This does nothing on the frontend.) */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* c.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e Number\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprompt\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHow old are you?\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* a.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e a\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 2\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* b.js */\u003c/span\u003e\u003cspan\u003e        function\u003c/span\u003e\u003cspan\u003e b\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e return\u003c/span\u003e\u003cspan\u003e c\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e *\u003c/span\u003e\u003cspan\u003e 3\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eAgain, this would present us with a choice:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWe could refactor \u003ccode\u003ec.js\u003c/code\u003e to work on the backend (and remove the poison pill).\u003c/li\u003e\n\u003cli\u003eWe could refactor \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e to not need \u003ccode\u003ec.js\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWe could change \u003ccode\u003ebackend/index.js\u003c/code\u003e to not need \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWe could further envision a more granular version of \u003ccode\u003eclient-only\u003c/code\u003e and \u003ccode\u003eserver-only\u003c/code\u003e that applies to individual package imports. For example, the React package could declare APIs like \u003ccode\u003euseState\u003c/code\u003e and \u003ccode\u003euseEffect\u003c/code\u003e to be \u003ccode\u003eclient-only\u003c/code\u003e so that pulling them into the backend code immediately fails the build. (Hint: React actually \u003cem\u003edoes\u003c/em\u003e do that via the \u003ca target=\"_blank\" href=\"https://nodejs.org/api/packages.html#conditional-exports\"\u003e\u003ccode\u003epackage.json\u003c/code\u003e Conditional Exports\u003c/a\u003e mechanism.)\u003c/p\u003e\n\u003cp\u003eI suspect you’re starting to see a theme here. As we move to share and reuse more code between the backend and frontend codebases—and indeed, as these two codebases blend into one—these build-time assertions give us a peace of mind.\u003c/p\u003e\n\u003cp\u003eNot every module \u003cem\u003eneeds\u003c/em\u003e to be exclusive to some side. In fact, most modules don’t care because they aren’t the \u003cem\u003esource\u003c/em\u003e of incompatibilities. For example, \u003ccode\u003ea.js\u003c/code\u003e and \u003ccode\u003eb.js\u003c/code\u003e don’t prescribe that they must only exist on one side because they \u003cem\u003edon’t know\u003c/em\u003e the implementation details of \u003ccode\u003ec.js.\u003c/code\u003e But if some module \u003cem\u003edoes\u003c/em\u003e care to be exclusive, it can now express this “locally” with \u003ccode\u003eserver-only\u003c/code\u003e or \u003ccode\u003eclient-only\u003c/code\u003e. The declared incompatibility then transitively “infects” every importing module.\u003c/p\u003e\n\u003cp\u003eIt is also crucial to understand that the \u003ccode\u003eserver-only\u003c/code\u003e and \u003ccode\u003eclient-only\u003c/code\u003e “poison pills” do not \u003cem\u003econtrol\u003c/em\u003e where the code goes. They don’t “put” the code “on the backend” or “on the frontend”. The only thing these assertions do is \u003cem\u003eprevent\u003c/em\u003e code from being pulled into an unsupported environment. They’re poison pills \u003cem\u003eonly.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eBy this point, we’ve almost invented RSC.\u003c/p\u003e\n\u003cp\u003eThere’s just one last detail left.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"one-program-two-computers\"\u003e\u003ca target=\"_self\" href=\"#one-program-two-computers\"\u003eOne Program, Two Computers\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eLet’s have one more look at our backend and our frontend as separate programs:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eBy now, we have a good mental model for how these programs can share code:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eImporting code \u003cem\u003efrom\u003c/em\u003e either side always bring it \u003cem\u003einto\u003c/em\u003e that side.\u003c/li\u003e\n\u003cli\u003eThe two module systems remain completely independent. If you import some shared code from \u003cem\u003eboth\u003c/em\u003e sides, it will be independently brought \u003cem\u003einto\u003c/em\u003e both sides.\u003c/li\u003e\n\u003cli\u003eBy default, we assume that any code is reusable. But we provide \u003ccode\u003eserver-only\u003c/code\u003e and \u003ccode\u003eclient-only\u003c/code\u003e poison pills that should be used in modules that \u003cem\u003eshould never get brought into\u003c/em\u003e a particular side due to some code \u003cem\u003edirectly inside of\u003c/em\u003e those modules. This doesn’t change how or where the code \u003cem\u003eruns,\u003c/em\u003e but it gives us early build errors.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHonestly, we could stop here, and we’d have a compelling setup for full-stack development that provides safer code reuse than many popular setups.\u003c/p\u003e\n\u003cp\u003eHowever, there’s one remaining weakness in our approach. Currently, the backend code and the frontend code rely on \u003cem\u003econvention\u003c/em\u003e to stay in sync. The backend wants to \u003cem\u003erefer\u003c/em\u003e to the \u003ccode\u003esayHello\u003c/code\u003e function from the frontend, but there’s no way to do it syntactically so it has to resort to \u003cem\u003eassuming\u003c/em\u003e that it will exist on the other side:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    `\u0026lt;html\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u0026lt;button onClick=\u0026#34;sayHello()\u0026#34;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/button\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u0026lt;script src=\u0026#34;/frontend/index.js type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/body\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/html\u0026gt;`\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi!\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThis is kind of fragile.\u003c/p\u003e\n\u003cp\u003eOf course, the backend couldn’t \u003cem\u003ejust import\u003c/em\u003e \u003ccode\u003esayHello\u003c/code\u003e, for—as an observant reader might already realize—that would just bring it \u003cem\u003einto\u003c/em\u003e the backend code.\u003c/p\u003e\n\u003cp\u003eIt would be nice if there was some way for the backend code to \u003cem\u003erefer\u003c/em\u003e to \u003ccode\u003esayHello\u003c/code\u003e without bringing it \u003cem\u003einto\u003c/em\u003e the backend. Luckily, that is what \u003ca href=\"https://overreacted.io/what-does-use-client-do/\"\u003e\u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e does\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e sayHello \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003e../frontend/index.js\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e Server\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003esayHello\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          Press me\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cdiv\u003e\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003euse client\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e sayHello\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  alert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHi.\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\u003c/div\u003e\n\u003cp\u003eThat’s the “remaining 10%” that RSC adds.\u003c/p\u003e\n\u003cp\u003eIn RSC, imports on both sides normally \u003cem\u003ework like regular imports\u003c/em\u003e—but \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e changes this behavior to “opening a door” to the frontend environment.\u003c/p\u003e\n\u003cp\u003eWhen you add \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e, you’re saying: “If you import me from the backend world, don’t actually bring my code \u003cem\u003einto\u003c/em\u003e the backend—instead, provide a reference that React can turn eventually into a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag and revive on the frontend.”\u003c/p\u003e\n\u003cp\u003eLikewise, \u003ca href=\"https://overreacted.io/what-does-use-client-do/#use-server\"\u003e\u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e\u003c/a\u003e lets a piece of the frontend code “open the door” to the backend and \u003cem\u003erefer\u003c/em\u003e to a backend module \u003cem\u003ewithout\u003c/em\u003e bringing it \u003cem\u003einto\u003c/em\u003e the frontend world.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe directives aren’t for specifying “where the code runs” module by module. You shouldn’t put \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e in all frontend modules or \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e into all backend modules—that’s pointless!\u003c/strong\u003e All they do is let you create “doors” between the two module systems. They let you \u003cem\u003erefer to\u003c/em\u003e the other world.\u003c/p\u003e\n\u003cp\u003eIf you want to pass data from the backend to the frontend (as a \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e tag), you need to \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e. If you want to pass data from the frontend to the backend (as an API call), you need to \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e. Otherwise, you don’t need either directive—you just use \u003ccode\u003eimport\u003c/code\u003e as usual and stay in the current world.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"in-conclusion\"\u003e\u003ca target=\"_self\" href=\"#in-conclusion\"\u003eIn Conclusion\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eRSC does not shy away from the fact that the backend and the frontend each have their own module system. It works exactly like traditional JavaScript codebases that reuse some code between the frontend and the backend, where reused code effectively exists on both sides. What RSC adds on top are just two mechanisms:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eimport \u0026#39;client-only\u0026#39;\u003c/code\u003e and \u003ccode\u003eimport \u0026#39;server-only\u0026#39;\u003c/code\u003e poison pills that let some individual modules declare they \u003cem\u003emust not be brought\u003c/em\u003e into the other world.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003e\u0026#39;use client\u0026#39;\u003c/code\u003e and \u003ccode\u003e\u0026#39;use server\u0026#39;\u003c/code\u003e directives that let you \u003cem\u003erefer\u003c/em\u003e to the modules from the other world and pass data to them without \u003cem\u003ebringing them in\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith these two mechanisms, you can see an RSC application as a single program spanning two computers—with two independent module systems, two poison pills, and two doors to pass information between those module systems.\u003c/p\u003e\n\u003cp\u003eAs this “layered” approach settles in your muscle memory, you’ll realize that the \u003ccode\u003efrontend/\u003c/code\u003e and \u003ccode\u003ebackend/\u003c/code\u003e directories become unnecessary and downright misleading because the information is already contained in the modules. But it’s contained \u003cem\u003elocally\u003c/em\u003e so the boundaries automatically shift as you evolve your code.\u003c/p\u003e\n\u003cp\u003eThe poison pills ensure that nothing is brought into a wrong world, the directives let you pass information between the worlds, and regular imports work as usual.\u003c/p\u003e\n\u003cp\u003eNow all you have to do is to fix the build errors.\u003c/p\u003e\n\u003cp\u003eI heard LLMs are getting quite good at that.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "29 min read",
  "publishedTime": null,
  "modifiedTime": null
}
