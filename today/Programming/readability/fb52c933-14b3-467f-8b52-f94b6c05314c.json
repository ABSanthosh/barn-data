{
  "id": "fb52c933-14b3-467f-8b52-f94b6c05314c",
  "title": "Amper Update November 2024 – Project File Tooling, Compose Resources, KSP2, and Android Release Builds",
  "link": "https://blog.jetbrains.com/amper/2024/11/amper-update-november-2024/",
  "description": "Amper 0.5.0 is now available! With this release, we’ve improved the IDE experience when working with multiple modules and project.yaml files, made nested completion in Amper configuration files more powerful, introduced support for Compose Resources and KSP2, improved Android release builds, and more! For the full list of changes and bug fixes in Amper 0.5.0, […]",
  "author": "Márton Braun",
  "published": "Tue, 05 Nov 2024 13:26:58 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": null,
  "byline": "Márton Braun",
  "length": 6821,
  "excerpt": "Amper is an experimental build tool by JetBrains. Its latest release adds support for Compose Multiplatform resources, KSP2, Android release builds, and improves IDE support.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Amper Update November 2024 – Project File Tooling, Compose Resources, KSP2, and Android Release Builds Amper 0.5.0 is now available! With this release, we’ve improved the IDE experience when working with multiple modules and project.yaml files, made nested completion in Amper configuration files more powerful, introduced support for Compose Resources and KSP2, improved Android release builds, and more! For the full list of changes and bug fixes in Amper 0.5.0, see the release notes. To get support for Amper’s latest features, use Fleet 1.42 or IntelliJ IDEA 2024.3 (or later versions). Tooling support for working with modules and project files In the previous update, we introduced project files for standalone Amper projects. With this release, you’ll now get additional tooling to work with these files. When working in the configuration file of a newly created module, you’ll see a warning and a quick-fix that helps you add it to the list of modules: When referencing a module that doesn’t exist yet, you can use a quick-fix to create that new module: Improved nested completion The settings block in Amper files offers nested completion for all of the available values you can configure, letting you easily search for values even if you don’t know where in the structure they’re nested. To make this even more convenient, you’ll now get this completion support even when you’re at the top level of a module file: Compose resources You can now use Compose Multiplatform resources in standalone Amper projects, which allows you to easily access images, strings, fonts, and files in your Compose application. You can configure resources under settings.compose to change the package name or the visibility of the generated Res class: settings:   compose:     enabled: true     resources:       packageName: com.example.app       exposedAccessors: true Kotlin Symbol Processing The standalone version of Amper now has support for Kotlin Symbol Processing. Many third-party libraries use KSP to generate code as part of the compilation process. Amper works with KSP2, so any processors used must be updated for KSP2 as well. We’re expecting most processors to make this upgrade soon, as KSP1 is deprecated and will no longer be supported in Kotlin 2.1. However, at the time of this release, you might still see some gaps in support, such as issues with native targets. To add a processor to your module, use the settings.kotlin.ksp section. You can also specify the options that you want to pass to KSP here. settings:   kotlin:     ksp:       processors:         - androidx.room:room-compiler:2.7.0-alpha09       processorOptions:         room.schemaLocation: ./schema In multiplatform modules, configuration in the settings block is applied to all platforms by default, including KSP processors. If you need to specify which platforms to run a KSP processor on, use a settings block with a platform qualifier: settings@android:   kotlin:     ksp:       processors:         - androidx.room:room-compiler:2.7.0-alpha09 Android release builds Amper can now create signed release builds of Android apps in both Gradle-based and standalone Amper projects. These builds will use R8 automatically, with minification and shrinking enabled. To enable signing for release builds, use the new android.signing option in the settings block: settings:   android:     signing: enabled You can provide the signing details by creating a keystore.properties file in the module: storeFile=/Users/example/.keystores/release.keystore storePassword=store_password keyAlias=alias keyPassword=key_password There are options available to customize R8’s obfuscation and to change the location of the properties file containing the signing details. Amper can also generate a new keystore for you if you don’t have one already. You can refer to the documentation about configuring Android builds for more details, and you can also look at samples to see custom Proguard configuration in both standalone and Gradle-based Amper projects. Parcelize support for Android In projects using the standalone version of Amper, you can now turn on the Parcelize plugin for Android, using the new settings entry:  settings:   android:     parcelize: enabled This lets you annotate Parcelable classes with @Parcelize to generate an implementation automatically: import kotlinx.parcelize.Parcelize @Parcelize class User(val firstName: String, val lastName: String, val age: Int): Parcelable As Parcelize is an Android-specific feature, it requires some additional configuration in multiplatform projects, which is described in the documentation. Updated dependencies and defaults Amper now uses these new versions of dependencies and default values: Kotlin 2.0.20 Kotlin language version 2.0 Android Gradle Plugin 8.5.0 Android compile SDK and target SDK 35 This release also uses kotlinx.serialization 1.7.3 by default and allows you to customize this version if needed: settings:   kotlin:     serialization:       enabled: true       version: 1.7.3 To make it easier to set up serialization for various formats, the required dependencies are available from the built-in version catalog: dependencies:   - $kotlin.serialization.json   - $kotlin.serialization.protobuf New, unified cache folder There is now a unified location for caching downloaded dependencies, whether Amper is invoked from the command line or used in an IDE. The ~/.amper folder that was used in previous versions can be safely deleted. The new cache locations are as follows: On Windows: ~/AppData/Local/Amper On macOS: ~/Library/Caches/Amper On Linux: ~/.cache/Amper (or if XDG_CACHE_HOME is defined, $XDG_CACHE_HOME/.cache/Amper)  Update your existing projects To update a project using the standalone version of Amper, update your amper scripts by following the download instructions on the Usage page of the documentation. If you’re using a Gradle-based Amper project, update your plugin version to 0.5.0: plugins {    id(\"org.jetbrains.amper.settings.plugin\").version(\"0.5.0\") } Try Amper To get started with Amper, try the sample projects with standalone Amper or the samples with Gradle-based projects. For full support of the latest Amper features, use Fleet 1.42 and IntelliJ IDEA 2024.3 (or later versions). Share your feedback Amper is still experimental and under active development. You can provide feedback about your experience by joining the discussion in the Kotlinlang Slack’s #amper channel or sharing your suggestions and ideas in a YouTrack issue. Your input and your use cases help shape the future of Amper!",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/11/amp-social_share_blog_1280x720_en.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n                                        \u003ch2 id=\"major-updates\"\u003eAmper Update November 2024 – Project File Tooling, Compose Resources, KSP2, and Android Release Builds\u003c/h2\u003e                    \n                    \n\u003cp\u003e\u003ca href=\"https://github.com/JetBrains/amper/releases/tag/v0.5.0\" target=\"_blank\" rel=\"noopener\"\u003eAmper 0.5.0\u003c/a\u003e is now available! With this release, we’ve improved the IDE experience when working with multiple modules and \u003ccode\u003eproject.yaml\u003c/code\u003e files, made nested completion in Amper configuration files more powerful, introduced support for Compose Resources and KSP2, improved Android release builds, and more!\u003c/p\u003e\n\n\n\n\u003cp\u003eFor the full list of changes and bug fixes in Amper 0.5.0, see \u003ca href=\"https://github.com/JetBrains/amper/releases/tag/v0.5.0\" target=\"_blank\" rel=\"noopener\"\u003ethe release notes\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eTo get support for Amper’s latest features, use \u003ca href=\"https://www.jetbrains.com/fleet/\" target=\"_blank\" rel=\"noopener\"\u003eFleet 1.42\u003c/a\u003e or \u003ca href=\"https://blog.jetbrains.com/idea/2024/10/intellij-idea-2024-3-beta/\"\u003eIntelliJ IDEA 2024.3\u003c/a\u003e (or later versions).\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eTooling support for working with modules and project files\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn the \u003ca href=\"https://blog.jetbrains.com/amper/2024/08/amper-update-august-2024/\"\u003eprevious update\u003c/a\u003e, we introduced project files for standalone Amper projects. With this release, you’ll now get additional tooling to work with these files.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen working in the configuration file of a newly created module, you’ll see a warning and a quick-fix that helps you add it to the list of modules:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo autoplay=\"\" controls=\"\" loop=\"\" muted=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/amper-050-reg-new-module.mov\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWhen referencing a module that doesn’t exist yet, you can use a quick-fix to create that new module:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo autoplay=\"\" controls=\"\" loop=\"\" muted=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/amper-050-create-new-module.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eImproved nested completion\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe settings block in Amper files offers nested completion for all of the available values you can configure, letting you easily search for values even if you don’t know where in the structure they’re nested.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo make this even more convenient, you’ll now get this completion support even when you’re at the top level of a module file:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo autoplay=\"\" controls=\"\" loop=\"\" muted=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/amper-050-nested.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eCompose resources\u003c/h2\u003e\n\n\n\n\u003cp\u003eYou can now use \u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-resources.html\" target=\"_blank\" rel=\"noopener\"\u003eCompose Multiplatform resources\u003c/a\u003e in standalone Amper projects, which allows you to easily access images, strings, fonts, and files in your Compose application.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo autoplay=\"\" controls=\"\" loop=\"\" muted=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/amper-050-resources.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can configure resources under \u003ccode\u003esettings.compose\u003c/code\u003e to change the package name or the visibility of the generated \u003ccode\u003eRes\u003c/code\u003e class:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003esettings:\n  compose:\n    enabled: true\n    resources:\n      packageName: com.example.app\n      exposedAccessors: true\u003c/pre\u003e\n\n\n\n\u003ch2\u003eKotlin Symbol Processing\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe standalone version of Amper now has support for Kotlin Symbol Processing. \u003ca href=\"https://kotlinlang.org/docs/ksp-overview.html#supported-libraries\" target=\"_blank\" rel=\"noopener\"\u003eMany third-party libraries\u003c/a\u003e use KSP to generate code as part of the compilation process.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eAmper works with \u003ca href=\"https://github.com/google/ksp/blob/main/docs/ksp2.md\" target=\"_blank\" rel=\"noopener\"\u003eKSP2\u003c/a\u003e, so any processors used must be updated for KSP2 as well. We’re expecting most processors to make this upgrade soon, as KSP1 is deprecated and will no longer be supported in Kotlin 2.1. However, at the time of this release, you might still see some gaps in support, such as issues with native targets.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eTo add a processor to your module, use the \u003ccode\u003esettings.kotlin.ksp\u003c/code\u003e section. You can also specify the options that you want to pass to KSP here.\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003esettings:\n  kotlin:\n    ksp:\n      processors:\n        - androidx.room:room-compiler:2.7.0-alpha09\n      processorOptions:\n        room.schemaLocation: ./schema\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn multiplatform modules, configuration in the settings block is applied to all platforms by default, including KSP processors. If you need to specify which platforms to run a KSP processor on, use a settings block with a \u003ca href=\"https://github.com/JetBrains/amper/blob/HEAD/docs/Documentation.md#platform-qualifier\" target=\"_blank\" rel=\"noopener\"\u003eplatform qualifier\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003esettings@android:\n  kotlin:\n    ksp:\n      processors:\n        - androidx.room:room-compiler:2.7.0-alpha09\u003c/pre\u003e\n\n\n\n\u003ch2\u003eAndroid release builds\u003c/h2\u003e\n\n\n\n\u003cp\u003eAmper can now create signed release builds of Android apps in both Gradle-based and standalone Amper projects. These builds will use \u003ca href=\"https://developer.android.com/build/shrink-code\" target=\"_blank\" rel=\"noopener\"\u003eR8\u003c/a\u003e automatically, with minification and shrinking enabled.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo enable signing for release builds, use the new \u003ccode\u003eandroid.signing\u003c/code\u003e option in the settings block:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003esettings:\n  android:\n    signing: enabled\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can provide the signing details by creating a \u003ccode\u003ekeystore.properties\u003c/code\u003e file in the module:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003estoreFile=/Users/example/.keystores/release.keystore\nstorePassword=store_password\nkeyAlias=alias\nkeyPassword=key_password\u003c/pre\u003e\n\n\n\n\u003cp\u003eThere are options available to customize R8’s obfuscation and to change the location of the properties file containing the signing details. Amper can also generate a new keystore for you if you don’t have one already.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can refer to the \u003ca href=\"https://github.com/JetBrains/amper/blob/HEAD/docs/Documentation.md#configuring-android\" target=\"_blank\" rel=\"noopener\"\u003edocumentation about configuring Android builds\u003c/a\u003e for more details, and you can also look at samples to see custom Proguard configuration in both \u003ca href=\"https://github.com/JetBrains/amper/tree/HEAD/examples-standalone/compose-multiplatform/android-app\" target=\"_blank\" rel=\"noopener\"\u003estandalone\u003c/a\u003e and \u003ca href=\"https://github.com/JetBrains/amper/tree/HEAD/examples-gradle/compose-multiplatform/android-app\" target=\"_blank\" rel=\"noopener\"\u003eGradle-based\u003c/a\u003e Amper projects.\u003c/p\u003e\n\n\n\n\u003ch2\u003eParcelize support for Android\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn projects using the standalone version of Amper, you can now turn on the \u003ca href=\"https://developer.android.com/kotlin/parcelize\" target=\"_blank\" rel=\"noopener\"\u003eParcelize\u003c/a\u003e plugin for Android, using the new settings entry: \u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003esettings:\n  android:\n    parcelize: enabled\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis lets you annotate \u003ccode\u003eParcelable\u003c/code\u003e classes with \u003ccode\u003e@Parcelize\u003c/code\u003e to generate an implementation automatically:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"kotlin\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eimport kotlinx.parcelize.Parcelize\n\n@Parcelize\nclass User(val firstName: String, val lastName: String, val age: Int): Parcelable\u003c/pre\u003e\n\n\n\n\u003cp\u003eAs Parcelize is an Android-specific feature, it requires some additional configuration in multiplatform projects, which is described in \u003ca href=\"https://github.com/JetBrains/amper/tree/HEAD/docs/Documentation.md#parcelize\" target=\"_blank\" rel=\"noopener\"\u003ethe documentation\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003eUpdated dependencies and defaults\u003c/h2\u003e\n\n\n\n\u003cp\u003eAmper now uses these new versions of dependencies and default values:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://kotlinlang.org/docs/whatsnew2020.html\" target=\"_blank\" rel=\"noopener\"\u003eKotlin 2.0.20\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eKotlin language version 2.0\u003c/li\u003e\n\n\n\n\u003cli\u003eAndroid Gradle Plugin 8.5.0\u003c/li\u003e\n\n\n\n\u003cli\u003eAndroid compile SDK and target SDK 35\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis release also uses \u003ca href=\"https://github.com/Kotlin/kotlinx.serialization\" target=\"_blank\" rel=\"noopener\"\u003ekotlinx.serialization\u003c/a\u003e 1.7.3 by default and allows you to customize this version if needed:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003esettings:\n  kotlin:\n    serialization:\n      enabled: true\n      version: 1.7.3\u003c/pre\u003e\n\n\n\n\u003cp\u003eTo make it easier to set up serialization for various formats, the required dependencies are available from the built-in version catalog:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003edependencies:\n  - $kotlin.serialization.json\n  - $kotlin.serialization.protobuf\u003c/pre\u003e\n\n\n\n\u003ch2\u003eNew, unified cache folder\u003c/h2\u003e\n\n\n\n\u003cp\u003eThere is now a unified location for caching downloaded dependencies, whether Amper is invoked from the command line or used in an IDE. The \u003ccode\u003e~/.amper\u003c/code\u003e folder that was used in previous versions can be safely deleted.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe new cache locations are as follows:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eOn Windows: \u003ccode\u003e~/AppData/Local/Amper\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eOn macOS: \u003ccode\u003e~/Library/Caches/Amper\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eOn Linux: \u003ccode\u003e~/.cache/Amper\u003c/code\u003e (or if \u003ca href=\"https://specifications.freedesktop.org/basedir-spec/latest/\" target=\"_blank\" rel=\"noopener\"\u003e\u003ccode\u003eXDG_CACHE_HOME\u003c/code\u003e\u003c/a\u003e is defined, \u003ccode\u003e$XDG_CACHE_HOME/.cache/Amper\u003c/code\u003e) \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eUpdate your existing projects\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo update a project using the standalone version of Amper, update your \u003ccode\u003eamper\u003c/code\u003e scripts by following the download instructions on the \u003ca href=\"https://github.com/JetBrains/amper/blob/HEAD/docs/Usage.md#using-the-standalone-amper-version-from-the-command-line\" target=\"_blank\" rel=\"noopener\"\u003eUsage page\u003c/a\u003e of the documentation.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you’re using a Gradle-based Amper project, update your plugin version to 0.5.0:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"kotlin\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eplugins {\n   id(\u0026#34;org.jetbrains.amper.settings.plugin\u0026#34;).version(\u0026#34;0.5.0\u0026#34;)\n}\u003c/pre\u003e\n\n\n\n\u003ch2\u003eTry Amper\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo get started with Amper, try the \u003ca href=\"https://github.com/JetBrains/amper/tree/HEAD/examples-standalone\" target=\"_blank\" rel=\"noopener\"\u003esample projects with standalone Amper\u003c/a\u003e or the \u003ca href=\"https://github.com/JetBrains/amper/tree/HEAD/examples-gradle\" target=\"_blank\" rel=\"noopener\"\u003esamples with Gradle-based projects\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor full support of the latest Amper features, use \u003ca href=\"https://www.jetbrains.com/fleet/\" target=\"_blank\" rel=\"noopener\"\u003eFleet 1.42\u003c/a\u003e and \u003ca href=\"https://blog.jetbrains.com/idea/2024/10/intellij-idea-2024-3-beta/\"\u003eIntelliJ IDEA 2024.3\u003c/a\u003e (or later versions).\u003c/p\u003e\n\n\n    \n\n\n\n\n\n\n\n\u003ch2\u003eShare your feedback\u003c/h2\u003e\n\n\n\n\u003cp\u003eAmper is still experimental and under active development. You can provide feedback about your experience by joining the discussion in the \u003ca href=\"https://slack-chats.kotlinlang.org/c/amper\" target=\"_blank\" rel=\"noopener\"\u003eKotlinlang Slack’s #amper channel\u003c/a\u003e or sharing your suggestions and ideas in a \u003ca href=\"https://youtrack.jetbrains.com/issues/AMPER\" target=\"_blank\" rel=\"noopener\"\u003eYouTrack issue\u003c/a\u003e. Your input and your use cases help shape the future of Amper!\u003c/p\u003e\n                    \n                                                                                                                                                                                                                                    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
