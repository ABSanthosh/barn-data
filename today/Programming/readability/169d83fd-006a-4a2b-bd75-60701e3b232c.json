{
  "id": "169d83fd-006a-4a2b-bd75-60701e3b232c",
  "title": "Secure open source container infrastructure with GitLab and Chainguard",
  "link": "https://about.gitlab.com/blog/2024/09/09/secure-open-source-container-infrastructure-with-gitlab-and-chainguard",
  "description": "",
  "author": "Fernando Diaz",
  "published": "2024-09-09T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Fernando Diaz",
  "length": 14246,
  "excerpt": "Learn how GitLab + Chainguard can help deliver secure containerized applications faster. This tutorial includes easy-to-follow code examples.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Container technology, which creates consistent environments and streamlines deployment processes, is incredibly beneficial for software development. Containers contribute to faster development cycles, more efficient resource utilization, and greater flexibility in application management. Some of that efficiency can be lost, though, if organizations reinvent the wheel with each software development project. Instead, a base image should serve as the starting point for building other container images. These base images contain a bare minimum OS, essential tools, ensured compatibility, reduced image size, and other advantages. While base images provide a lot of value, they do have risks. It’s easy for your application to be compromised due to: Large attack surface: Base images may include extraneous packages, which could increase the attack surface. Unmanaged dependencies: Many dependencies in container images are not frequently updated and can be filled with vulnerabilities. Severe and unknown vulnerabilities: There's a high risk of severe and unknown vulnerabilities present in a base image, even in known public registries. Misconfiguration: Base images may be misconfigured or contain a standard configuration that contains hard-coded secrets and can lead to unauthorized access. GitLab and Chainguard provide several solutions to address these risks, including Hardened Base Images, Container Signing, and Vulnerability Scanning and Management. In this article, you'll learn how these features can be implemented to prevent breaches via containerized applications. Chainguard’s minimal, hardened container images with low-to-no CVEs Chainguard Images offer several key benefits that make them essential for organizations prioritizing security: Low-to-no vulnerabilities (out of the box and Day Two): Chainguard images are the product of a Linux distro and toolchain purposely built from the ground up to distribute patched open source software fast. Reduced attack surface: Hardened images remove unnecessary components, libraries, and tools, significantly reducing potential entry points for attackers. This minimization of the attack surface makes it more difficult for malicious actors to exploit vulnerabilities. Improved compliance: Many industries have strict security regulations. Hardened images, especially those designed to meet FIPS hardening standards and to include a security technical implementation guide, or STIG, help organizations meet compliance requirements like FedRAMP, PCI-DSS, etc., by adhering to security best practices and standards. Enhanced runtime security: Properly hardened images are less likely to be compromised during runtime, providing better protection for the applications and data they contain. Increased operational efficiency: Minimal images are typically smaller in size, leading to faster deployment times and reduced resource consumption. Chainguard provides more than 833 minimal, hardened images that can be easily built, shipped, and run. Container images can all be stored and managed directly in GitLab Container Registry. These solutions greatly minimize container security complexity. Chainguard image library The Chainguard directory provides hardened, minimal container images to help developers build software from the onset. With 97.6% fewer vulnerabilities than the average image, Chainguard Images help organizations swiftly reach container security compliance goals like NIST 800-53, FedRAMP, or PCI-DSS. Chainguard minimal, hardened container images featured section These images can be accessed directly from the Chainguard Directory. All images have the following features: Build time-generated software bill of materials Sigstore-powered attestation and provenance No vulnerabilities Security advisory feed in SecDB and OSV formats Using Chainguard container images in GitLab Chainguard container images can be used in the following ways: directly within GitLab to run jobs within a pipeline stored in a Dockerfile in GitLab, which can be created, scanned for vulnerabilities, and pushed directly to the built-in container registry Using Chainguard images in a GitLab job To use a Chainguard image in a specific GitLab job, within your gitlab-ci.yml, simply set the image directive under the job definition to the image you wish to use. For example, the following job named unit-tests uses cgr.dev/chainguard/go:latest as the container image to run the job. stages: - test unit-tests: image: cgr.dev/chainguard/go:latest stage: test before_script: - go mod download script: - go test -coverprofile=coverage.out artifacts: paths: - coverage.out Using Chainguard images in a Dockerfile To use a Chainguard image within a Dockerfile, simply create a Dockerfile in the root directory of your GitLab project. Then set the base image of the Dockerfile to the Chainguard image you wish to use, and add any other required commands: FROM cgr.dev/chainguard/go:latest WORKDIR /app COPY . . RUN go mod download RUN go build -o /main . CMD [“/main”] Then, you can create a job in the .gitlab-ci.yml to log in to the built-in GitLab Container Registry and push the image: build-app-image: stage: build image: docker:latest services: - docker:dind variables: IMAGE: $CI_REGISTRY_IMAGE/$CI_DEFAULT_BRANCH:latest before_script: - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY script: - docker build -t $IMAGE . - docker push $IMAGE Once the job completes, you can see the pushed images in GitLab Container Registry by selecting Deploy \u003e Container Registry from your project’s side tab. GitLab Container Registry Note: GitLab makes it easy to authenticate with the built-in container registry via reserved CI/CD variables as seen above. Container image signing Signing container images is a critical security measure to prevent tampering by verifying their authenticity, trust, and integrity: Authenticity: Ensures the source of the image is trusted by verifying the signature attached to an image with the public key from a trusted certificate authority. Trust: Image publishers and users can trust each other, allowing frequent image sharing. Integrity: The signature includes a hash that can be checked to ensure the image has not been altered since the signing. The Sigstore project provides a CLI called Cosign, which can be used for keyless signing of container images. This eliminates the need to manage safeguards and rotate the private key that will be signing the image. GitLab provides container-signing by allowing you to generate a private key via a token obtained from the GitLab server using the OIDC identity of the user who ran the job. The token includes unique claims that certify that a CI/CD pipeline generated the token. GitLab container image signature details GitLab stores the container signature details in the container registry. A job can then be created to validate the signature against the certificate issuer using Cosign. Vulnerability scanning and management As you add more application dependencies to a hardened base image to achieve your goals, over time you may introduce vulnerabilities. By enabling security scanning provided by GitLab, you can address these risks as they come and reduce them. Additionally, when these vulnerabilities arise, vulnerability management tools are crucial for managing your security posture. Vulnerability scanning and security guardrails It's necessary to regularly run security scans to avoid data breaches, reduce service downtime, and prevent loss of brand reputation. Some benefits of running security scans before code is deployed to production include: early detection and resolution adherence to regulatory compliance maintaining system uptime building trust with customers assessing and managing risk GitLab provides several analyzers to scan various parts of your application for security vulnerabilities: Scanner Type Description Static Application Security Testing (SAST) Scans static source code for known vulnerabilities (C/C++, Java, Python, Go, JavaScript, and many more languages) Dynamic Application Security Testing (DAST) Runs automated penetration tests to find vulnerabilities in your web applications and APIs as they are running Infrastructure as Code Scanning (IaC) Scans infrastructure definition files for known vulnerabilities (Terraform, Ansible, AWS Cloudformation, Kubernetes, and many more) Container Scanning (including image dependencies and licenses) Scans container images for known vulnerabilities, including GitLab Container Registry, external container registries, Kubernetes cluster. Container image dependencies and licenses are also scanned and compared to policy Dependency Scanning and License Compliance Scans your application’s dependencies for known vulnerabilities, including NuGet, Gradle, Maven, pip, npm, yarn, and more. Dependency licenses are also scanned and compared to policy. Secret Detection Scans your repository for secrets, such as keys and passwords. Scans all text files regardless of language or framework. Can be set to reject pushes if a secret is detected and can run in browser to warn if you are about to post a potential secret. Web API Fuzzing Sets operation parameters to unexpected values to cause unexpected behavior and errors in the API backend Coverage-guided Fuzzing Sends random inputs to an instrumented version of your application to cause unexpected behavior These scanners can be easily added to your pipeline by simply importing the appropriate scanner template in your .gitlab-ci.yml. For example, to enable SAST, simply add the following to your .gitlab-ci.yml: stages: - test include: - template: Jobs/SAST.gitlab-ci.yml Once you've enabled the scanners, whenever you create a merge request to commit code from a feature branch into another branch, scanner results will display directly within the MR: GitLab security scanner findings displayed in MR These results allow developers to quickly assess, prioritize, and mitigate or remediate vulnerabilities by providing the following information: description severity location links and identifiers training solutions GitLab security scanner vulnerability details Additional actions can be taken on a vulnerability, such as: dismissing the vulnerability and providing a reason to allow quicker review from the security team creating an issue to collaborate later on a resolution Note: Scanners can also be configured and/or extended using variables and pipeline directives, just like any other GitLab job. Security guardrails The scanners mentioned above can be used along with security policies to prevent insecure code from being merged into production and to ensure that the scanners are run on every pipeline. GitLab provides the following security policy types: Merge request approval policy: Create rules that check for security vulnerabilities and license compliance before merging a merge request. Scan execution policy: Create rules that enforce security scans for particular branches at a certain time. Pipeline execution policy: Enforce a custom CI/CD configuration to run in project pipelines. Implementing these policies ensures that when creating an MR, security scans and custom compliance jobs will be run, and that approval will be required if vulnerabilities or incompatible licenses are detected: Merge request approval required due to vulnerabilities and incompatible licenses Vulnerability reports Detecting vulnerabilities before they make it to production is important, but it is equally important to determine and manage vulnerabilities that make their way into production, so that they can be mitigated accordingly. GitLab Vulnerability Report provides information on all the detected vulnerabilities from scans of the default branch (which may be your staging or production branch): Vulnerability report with filters applied If you select a vulnerability, you’ll be taken to its vulnerability page, which displays the same vulnerability details as you would see in the MR view. You can use this view to quickly assess, prioritize, and mitigate or remediate vulnerabilities: Vulnerability page for improper authorization vulnerability The security team can manage vulnerabilities by setting their status to one of the following: Detected: The default state for a newly discovered vulnerability. Confirmed: A user has seen this vulnerability and confirmed it is accurate. Dismissed: A user has seen this vulnerability and dismissed it because it is inaccurate or otherwise not to be resolved. Dismissed vulnerabilities are ignored if detected in subsequent scans. Resolved: The vulnerability has been fixed or is no longer present. If a resolved vulnerability is reintroduced and detected again, its record is reinstated and its status set to detected. Software bill of materials A software bill of materials (SBOM) is a comprehensive inventory that lists all the components, dependencies, and associated metadata of a software application. SBOMs are vital for organizations to effectively manage software security, compliance, and supply chain risks. Chainguard provides high-quality, out-of-the-box SBOMs for their container images in SPDX format. The SBOM can be converted into CycloneDX format and loaded into or compared with the results of GitLab’s dependency list. The dependency list is an SBOM generated from an artifact or the results of the dependency, container, and license scanners: Dependency List with some components expanded Chainguard images meet SLSA Level 2 requirements and are verified, signed, and attested with signatures. Furthermore, GitLab CI can generate and produce attestation/provenance metadata for all build artifacts. By using Chainguard with GitLab, you can prevent tampering and provide additional build integrity guarantees. Learn more To learn more about GitLab and Chainguard, and how we can help enhance your security posture, check out the following resources: GitLab Security and Compliance Solutions GitLab Application Security Documentation GitLab pricing Chainguard Images Chainguard Compliance and Risk Mitigation Chainguard Sales",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/2w6waL76KROjhJHM2vXet6/34bb171a7a3dd65a61999612cc89d9f4/blog-image-template-1800x945__23_.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-b794d8fe=\"\" data-v-7488832a=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eContainer technology, which creates consistent environments and streamlines deployment processes, is incredibly beneficial for software development. Containers contribute to faster development cycles, more efficient resource utilization, and greater flexibility in application management.\u003c/p\u003e\n\u003cp\u003eSome of that efficiency can be lost, though, if organizations reinvent the wheel with each software development project. Instead, a base image should serve as the starting point for building other container images. These base images contain a bare minimum OS, essential tools, ensured compatibility, reduced image size, and other advantages.\u003c/p\u003e\n\u003cp\u003eWhile base images provide a lot of value, they do have risks. It’s easy for your application to be compromised due to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLarge attack surface:\u003c/strong\u003e Base images may include extraneous packages, which could increase the attack surface.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUnmanaged dependencies:\u003c/strong\u003e Many dependencies in container images are not frequently updated and can be filled with vulnerabilities.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSevere and unknown vulnerabilities:\u003c/strong\u003e There\u0026#39;s a high risk of severe and unknown vulnerabilities present in a base image, even in known public registries.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMisconfiguration:\u003c/strong\u003e Base images may be misconfigured or contain a standard configuration that contains hard-coded secrets and can lead to unauthorized access.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGitLab and Chainguard provide several solutions to address these risks, including Hardened Base Images, Container Signing, and Vulnerability Scanning and Management. In this article, you\u0026#39;ll learn how these features can be implemented to prevent breaches via containerized applications.\u003c/p\u003e\n\u003ch2 id=\"chainguard%E2%80%99s-minimal-hardened-container-images-with-low-to-no-cves\" tabindex=\"-1\"\u003eChainguard’s minimal, hardened container images with low-to-no CVEs \u003ca href=\"#chainguard%E2%80%99s-minimal-hardened-container-images-with-low-to-no-cves\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eChainguard Images offer several key benefits that make them essential for organizations prioritizing security:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLow-to-no vulnerabilities (out of the box and Day Two):\u003c/strong\u003e Chainguard images are the product of a Linux distro and toolchain purposely built from the ground up to distribute patched open source software fast.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReduced attack surface:\u003c/strong\u003e Hardened images remove unnecessary components, libraries, and tools, significantly reducing potential entry points for attackers. This minimization of the attack surface makes it more difficult for malicious actors to exploit vulnerabilities.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImproved compliance:\u003c/strong\u003e Many industries have strict security regulations. Hardened images, especially those designed to meet \u003ca href=\"https://www.nist.gov/standardsgov/compliance-faqs-federal-information-processing-standards-fips\"\u003eFIPS hardening standards\u003c/a\u003e and to include a security technical implementation guide, or STIG, help organizations meet compliance requirements like \u003ca href=\"https://about.gitlab.com/solutions/public-sector/fedramp/\"\u003eFedRAMP\u003c/a\u003e, PCI-DSS, etc., by adhering to security best practices and standards.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnhanced runtime security:\u003c/strong\u003e Properly hardened images are less likely to be compromised during runtime, providing better protection for the applications and data they contain.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIncreased operational efficiency:\u003c/strong\u003e Minimal images are typically smaller in size, leading to faster deployment times and reduced resource consumption.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eChainguard provides more than 833 minimal, hardened images that can be easily built, shipped, and run. Container images can all be stored and managed directly in GitLab Container Registry. These solutions greatly minimize container security complexity.\u003c/p\u003e\n\u003ch2 id=\"chainguard-image-library\" tabindex=\"-1\"\u003eChainguard image library \u003ca href=\"#chainguard-image-library\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe \u003ca href=\"https://images.chainguard.dev/\"\u003eChainguard\u003c/a\u003e directory provides hardened, minimal container images to help developers build software from the onset. With 97.6% fewer vulnerabilities than the average image, Chainguard Images help organizations swiftly reach container security compliance goals like \u003ca href=\"https://csrc.nist.gov/pubs/sp/800/53/r5/upd1/final\"\u003eNIST 800-53\u003c/a\u003e, FedRAMP, or PCI-DSS.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/4FmvsyE026CqwRIWVwWfBU/4c084bfc2e677e41f8992fc791584434/1__1_.png\" alt=\"Chainguard minimal, hardened container images featured section\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eChainguard minimal, hardened container images featured section\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eThese images can be accessed directly from the Chainguard Directory. All images have the following features:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBuild time-generated \u003ca href=\"https://about.gitlab.com/blog/2022/10/25/the-ultimate-guide-to-sboms/\"\u003esoftware bill of materials\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/signing_examples.html\"\u003eSigstore-powered attestation and provenance\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eNo vulnerabilities\u003c/li\u003e\n\u003cli\u003eSecurity advisory feed in \u003ca href=\"https://www.goldmansachs.com/our-firm/history/moments/1993-secdb\"\u003eSecDB\u003c/a\u003e and OSV formats\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"using-chainguard-container-images-in-gitlab\" tabindex=\"-1\"\u003eUsing Chainguard container images in GitLab \u003ca href=\"#using-chainguard-container-images-in-gitlab\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eChainguard container images can be used in the following ways:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edirectly within GitLab to run jobs within a pipeline\u003c/li\u003e\n\u003cli\u003estored in a Dockerfile in GitLab, which can be created, scanned for vulnerabilities, and pushed directly to the built-in container registry\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"using-chainguard-images-in-a-gitlab-job\" tabindex=\"-1\"\u003eUsing Chainguard images in a GitLab job \u003ca href=\"#using-chainguard-images-in-a-gitlab-job\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTo use a Chainguard image in a specific GitLab job, within your \u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/\"\u003e\u003ccode\u003egitlab-ci.yml\u003c/code\u003e\u003c/a\u003e, simply set the \u003ccode\u003eimage\u003c/code\u003e directive under the job definition to the image you wish to use. For example, the following job named \u003ccode\u003eunit-tests\u003c/code\u003e uses \u003ccode\u003ecgr.dev/chainguard/go:latest\u003c/code\u003e as the container image to run the job.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estages:\n  - test\n\nunit-tests:\n  image: cgr.dev/chainguard/go:latest\n  stage: test\n  before_script:\n    - go mod download\n  script:\n    - go test -coverprofile=coverage.out\n  artifacts:\n    paths:\n      - coverage.out\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"using-chainguard-images-in-a-dockerfile\" tabindex=\"-1\"\u003eUsing Chainguard images in a Dockerfile \u003ca href=\"#using-chainguard-images-in-a-dockerfile\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eTo use a Chainguard image within a Dockerfile, simply create a Dockerfile in the root directory of your GitLab project. Then set the base image of the Dockerfile to the Chainguard image you wish to use, and add any other required commands:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eFROM cgr.dev/chainguard/go:latest\n\nWORKDIR /app\nCOPY . .\n\nRUN go mod download\nRUN go build -o /main .\n\nCMD [“/main”]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, you can create a job in the \u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/\"\u003e\u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e\u003c/a\u003e to log in to the \u003ca href=\"https://docs.gitlab.com/ee/user/packages/container_registry/\"\u003ebuilt-in GitLab Container Registry\u003c/a\u003e and push the image:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebuild-app-image:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  variables:\n    IMAGE: $CI_REGISTRY_IMAGE/$CI_DEFAULT_BRANCH:latest\n  before_script:\n    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\n  script:\n    - docker build -t $IMAGE .\n    - docker push $IMAGE\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce the job completes, you can see the pushed images in GitLab Container Registry by selecting \u003cstrong\u003eDeploy \u0026gt; Container Registry\u003c/strong\u003e from your project’s side tab.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/40EAzFTHsxm7tz8HRkEh4Q/cd1834bbf1ba732e5ced01f6dc912ee1/2__1_.png\" alt=\"GitLab Container Registry\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab Container Registry\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e GitLab makes it easy to authenticate with the built-in container registry via \u003ca href=\"https://docs.gitlab.com/ee/user/packages/container_registry/authenticate_with_container_registry.html#use-gitlab-cicd-to-authenticate\"\u003ereserved CI/CD variables\u003c/a\u003e as seen above.\u003c/p\u003e\n\u003ch2 id=\"container-image-signing\" tabindex=\"-1\"\u003eContainer image signing \u003ca href=\"#container-image-signing\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSigning container images is a critical security measure to prevent tampering by verifying their authenticity, trust, and integrity:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAuthenticity:\u003c/strong\u003e Ensures the source of the image is trusted by verifying the signature attached to an image with the public key from a trusted certificate authority.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTrust:\u003c/strong\u003e Image publishers and users can trust each other, allowing frequent image sharing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIntegrity:\u003c/strong\u003e The signature includes a hash that can be checked to ensure the image has not been altered since the signing.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Sigstore project provides a CLI called Cosign, which can be used for keyless signing of container images. This eliminates the need to manage safeguards and rotate the private key that will be signing the image. GitLab provides \u003ca href=\"https://docs.gitlab.com/ee/ci/yaml/signing_examples.html\"\u003econtainer-signing\u003c/a\u003e by allowing you to generate a private key via a token obtained from the GitLab server using the \u003ca href=\"https://docs.gitlab.com/ee/administration/auth/oidc.html\"\u003eOIDC identity\u003c/a\u003e of the user who ran the job. The token includes unique claims that certify that a CI/CD pipeline generated the token.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/1xqWSEma29IvaO3DlF7hRL/cdf88ed1bae928b31ea0ec7f69b51af2/3__1_.png\" alt=\"GitLab container image signature details\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003e GitLab container image signature details\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eGitLab stores the container signature details in the container registry. A job can then be created to validate the signature against the certificate issuer using Cosign.\u003c/p\u003e\n\u003ch2 id=\"vulnerability-scanning-and-management\" tabindex=\"-1\"\u003eVulnerability scanning and management \u003ca href=\"#vulnerability-scanning-and-management\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAs you add more application dependencies to a hardened base image to achieve your goals, over time you may introduce vulnerabilities. By enabling security scanning provided by GitLab, you can address these risks as they come and reduce them. Additionally, when these vulnerabilities arise, vulnerability management tools are crucial for managing your security posture.\u003c/p\u003e\n\u003ch2 id=\"vulnerability-scanning-and-security-guardrails\" tabindex=\"-1\"\u003eVulnerability scanning and security guardrails \u003ca href=\"#vulnerability-scanning-and-security-guardrails\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIt\u0026#39;s necessary to regularly run security scans to avoid data breaches, reduce service downtime, and prevent loss of brand reputation. Some benefits of running security scans before code is deployed to production include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eearly detection and resolution\u003c/li\u003e\n\u003cli\u003eadherence to regulatory compliance\u003c/li\u003e\n\u003cli\u003emaintaining system uptime\u003c/li\u003e\n\u003cli\u003ebuilding trust with customers\u003c/li\u003e\n\u003cli\u003eassessing and managing risk\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGitLab provides several analyzers to scan various parts of your application for security vulnerabilities:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eScanner Type\u003c/th\u003e\n\u003cth\u003eDescription\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/sast/\"\u003eStatic Application Security Testing (SAST)\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eScans static source code for known vulnerabilities (C/C++, Java, Python, Go, JavaScript, and many more languages)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/dast/\"\u003eDynamic Application Security Testing (DAST)\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eRuns automated penetration tests to find vulnerabilities in your web applications and APIs as they are running\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/iac_scanning/\"\u003eInfrastructure as Code Scanning (IaC)\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eScans infrastructure definition files for known vulnerabilities (Terraform, Ansible, AWS Cloudformation, Kubernetes, and many more)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/container_scanning/\"\u003eContainer Scanning\u003c/a\u003e (including image dependencies and licenses)\u003c/td\u003e\n\u003ctd\u003eScans container images for known vulnerabilities, including GitLab Container Registry, external container registries, Kubernetes cluster. Container image dependencies and licenses are also scanned and compared to policy\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/dependency_scanning/\"\u003eDependency Scanning and License Compliance\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eScans your application’s dependencies for known vulnerabilities, including NuGet, Gradle, Maven, pip, npm, yarn, and more. Dependency licenses are also scanned and compared to policy.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/secret_detection/\"\u003eSecret Detection\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eScans your repository for secrets, such as keys and passwords. Scans all text files regardless of language or framework. Can be set to reject pushes if a secret is detected and can run in browser to warn if you are about to post a potential secret.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/api_fuzzing/\"\u003eWeb API Fuzzing\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eSets operation parameters to unexpected values to cause unexpected behavior and errors in the API backend\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/coverage_fuzzing/\"\u003eCoverage-guided Fuzzing\u003c/a\u003e\u003c/td\u003e\n\u003ctd\u003eSends random inputs to an instrumented version of your application to cause unexpected behavior\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThese scanners can be easily added to your pipeline by simply importing the appropriate scanner template in your \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e. For example, to \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/sast/#configure-sast-in-your-cicd-yaml\"\u003eenable SAST\u003c/a\u003e, simply add the following to your \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003estages:\n  - test\n\ninclude:\n  - template: Jobs/SAST.gitlab-ci.yml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce you\u0026#39;ve enabled the scanners, whenever you create a merge request to commit code from a feature branch into another branch, \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/index.html#view-security-scan-information\"\u003escanner results will display directly within the MR\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/3JCQuSflYQTjFbs51xMxA1/68009a2466e0ba85b1a0cbbbeb5e16f7/4.png\" alt=\"GitLab security scanner findings displayed in MR\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab security scanner findings displayed in MR\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eThese results allow developers to quickly assess, prioritize, and mitigate or remediate vulnerabilities by providing the following information:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edescription\u003c/li\u003e\n\u003cli\u003eseverity\u003c/li\u003e\n\u003cli\u003elocation\u003c/li\u003e\n\u003cli\u003elinks and identifiers\u003c/li\u003e\n\u003cli\u003etraining\u003c/li\u003e\n\u003cli\u003esolutions\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/42Kt4PnlRWQfF3x7MOQVeF/865cb194e13f8462c080afb66082cfb9/5.png\" alt=\"GitLab security scanner vulnerability details\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eGitLab security scanner vulnerability details\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eAdditional actions can be taken on a vulnerability, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edismissing the vulnerability and providing a reason to allow quicker review from the security team\u003c/li\u003e\n\u003cli\u003ecreating an issue to collaborate later on a resolution\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Scanners can also be configured and/or extended using variables and pipeline directives, just like any other GitLab job.\u003c/p\u003e\n\u003ch3 id=\"security-guardrails\" tabindex=\"-1\"\u003eSecurity guardrails \u003ca href=\"#security-guardrails\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe scanners mentioned above can be used along with \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/policies/\"\u003esecurity policies\u003c/a\u003e to prevent insecure code from being merged into production and to ensure that the scanners are run on every pipeline. GitLab provides the following security policy types:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMerge request approval policy:\u003c/strong\u003e  Create rules that check for security vulnerabilities and license compliance before merging a merge request.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eScan execution policy:\u003c/strong\u003e Create rules that enforce security scans for particular branches at a certain time.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePipeline execution policy:\u003c/strong\u003e Enforce a custom CI/CD configuration to run in project pipelines.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eImplementing these policies ensures that when creating an MR, security scans and custom compliance jobs will be run, and that approval will be required if vulnerabilities or incompatible licenses are detected:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/5oAyHmtdyjkigvsubF1smh/8185499ea16d7fbe76672348922d3a55/6.png\" alt=\"Merge request approval required due to vulnerabilities and incompatible licenses\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eMerge request approval required due to vulnerabilities and incompatible licenses\u003c/i\u003e\u003c/center\u003e\n\u003ch2 id=\"vulnerability-reports\" tabindex=\"-1\"\u003eVulnerability reports \u003ca href=\"#vulnerability-reports\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eDetecting vulnerabilities before they make it to production is important, but it is equally important to determine and manage vulnerabilities that make their way into production, so that they can be mitigated accordingly.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/vulnerability_report/\"\u003eGitLab Vulnerability Report\u003c/a\u003e provides information on all the detected vulnerabilities from scans of the default branch (which may be your staging or production branch):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/3WMazjBVPTwv2zklXGpjY5/3e81f7b1e18fdd6e0e9b9f6c1f0b0e45/7.png\" alt=\"Vulnerability report with filters applied\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eVulnerability report with filters applied\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eIf you select a vulnerability, you’ll be taken to its vulnerability page, which displays the same vulnerability details as you would see in the MR view. You can use this view to quickly assess, prioritize, and mitigate or remediate vulnerabilities:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/3y5UJE4agCr4hrRkcXBPc3/954487722980a7cfd25d73a454254da0/8.png\" alt=\"Vulnerability page for improper authorization vulnerability\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eVulnerability page for improper authorization vulnerability\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eThe security team can manage vulnerabilities by setting their status to one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDetected: The default state for a newly discovered vulnerability.\u003c/li\u003e\n\u003cli\u003eConfirmed: A user has seen this vulnerability and confirmed it is accurate.\u003c/li\u003e\n\u003cli\u003eDismissed: A user has seen this vulnerability and dismissed it because it is inaccurate or otherwise not to be resolved. Dismissed vulnerabilities are ignored if detected in subsequent scans.\u003c/li\u003e\n\u003cli\u003eResolved: The vulnerability has been fixed or is no longer present. If a resolved vulnerability is reintroduced and detected again, its record is reinstated and its status set to detected.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"software-bill-of-materials\" tabindex=\"-1\"\u003eSoftware bill of materials \u003ca href=\"#software-bill-of-materials\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eA software bill of materials (SBOM) is a comprehensive inventory that lists all the components, dependencies, and associated metadata of a software application. SBOMs are vital for organizations to effectively manage software security, compliance, and supply chain risks.\u003c/p\u003e\n\u003cp\u003eChainguard provides high-quality, \u003ca href=\"https://images.chainguard.dev/directory/image/go/sbom\"\u003eout-of-the-box SBOMs\u003c/a\u003e for their container images in SPDX format. The SBOM can be converted into CycloneDX format and loaded into or compared with the results of GitLab’s dependency list. The \u003ca href=\"https://docs.gitlab.com/ee/user/application_security/dependency_list/\"\u003edependency list\u003c/a\u003e is an SBOM generated from an artifact or the results of the dependency, container, and license scanners:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/3wFjL8sixmTpzdKBLSwozH/a0e8e77c1588277e9d5ee529d958c5bd/9.png\" alt=\"Dependency List with some components expanded\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eDependency List with some components expanded\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eChainguard images meet \u003ca href=\"https://slsa.dev/spec/v0.1/levels?ref=fossa.com\"\u003eSLSA Level 2 requirements\u003c/a\u003e and are verified, signed, and attested with signatures. Furthermore, GitLab CI can \u003ca href=\"https://docs.gitlab.com/ee/ci/runners/configure_runners.html#artifact-provenance-metadata\"\u003egenerate and produce attestation/provenance metadata\u003c/a\u003e for all build artifacts. By using Chainguard with GitLab, you can prevent tampering and provide additional build integrity guarantees.\u003c/p\u003e\n\u003ch2 id=\"learn-more\" tabindex=\"-1\"\u003eLearn more \u003ca href=\"#learn-more\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo learn more about GitLab and Chainguard, and how we can help enhance your security posture, check out the following resources:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/solutions/security-compliance/\"\u003eGitLab Security and Compliance Solutions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/get-started-security.html\"\u003eGitLab Application Security Documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/pricing/\"\u003eGitLab pricing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.chainguard.dev/chainguard-images\"\u003eChainguard Images\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.chainguard.dev/solutions/compliance-and-risk-mitigation\"\u003eChainguard Compliance and Risk Mitigation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.chainguard.dev/contact?utm_source=blog\u0026amp;utm_medium=partner\u0026amp;utm_campaign=GitLab_announcement_blog\u0026amp;utm_content=article\"\u003eChainguard Sales\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2024-09-09T00:00:00Z",
  "modifiedTime": null
}
