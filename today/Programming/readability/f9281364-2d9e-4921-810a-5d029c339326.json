{
  "id": "f9281364-2d9e-4921-810a-5d029c339326",
  "title": "How Observability Can Improve the UX of LLM Based Systems: Insights of Honeycomb's CEO at KubeCon EU",
  "link": "https://www.infoq.com/news/2025/04/llm-observability/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "During her KubeCon Europe keynote, Christine Yen, CEO and co-founder of Honeycomb, provided insights on how observability can help cope with the rapid shifts introduced by the integration of LLMs in software systems, which transformed not only the way we develop software but also the release methodology. She explained how to adapt your development feedback loop based on production observations. By Olimpiu Pop",
  "author": "Olimpiu Pop",
  "published": "Thu, 03 Apr 2025 12:12:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Observability",
    "User Experience",
    "Software Engineering",
    "Large language models",
    "Development",
    "Architecture \u0026 Design",
    "AI, ML \u0026 Data Engineering",
    "DevOps",
    "news"
  ],
  "byline": "Olimpiu Pop",
  "length": 4519,
  "excerpt": "During her KubeCon Europe keynote, Christine Yen, CEO and co-founder of Honeycomb, provided insights on how observability can help cope with the rapid shifts introduced by the integration of LLMs in s",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250328105021-1/apple-touch-icon.png",
  "text": "During her KubeCon Europe keynote, Christine Yen, CEO and co-founder of Honeycomb, provided insights on how observability can help cope with the rapid shifts introduced by the integration of LLMs in software systems, which transformed not only the way we develop software but also the release methodology. She explained how to adapt your development feedback loop based on production observations. She begins by emphasising that even though software engineers are used to \"black boxes\", the LLMs are different mainly because they make reliable behaviours that we are used to and make them more complicated. Current systems development practices rely on deterministic properties like testability, reproducibility (mockability), and explainability (debuggability) to ensure the correctness of their behaviour. Still, the whole reason for incorporating LLMs in your application is to capture the unpredictable nature of human language. ...most of us here today have been building software before this LLM boom, and we know the hard part about building software systems isn’t writing them. It’s testing, maintenance, tuning and debugging that comes afterwards… Besides the changes in the methodology of building the software, the product release practices have shifted as well: rather than having a staged approach when limited groups of users have access to alpha or beta versions, we now have early access programs. These allow users to interact with your systems unpredictably. Yen: ...should we all give up and embrace prompt engineering? No! That’s why we are here… Even though the shift might seem very complex, she thinks that the practices adopted lately are reasonable steps in the right direction to cope with all the shifts. Continuous Deployment and feature flags - provide a proper mechanism for rapid feedback loops Testing in production - forces us to embrace the chaos and engineer systems conceived for rapid and graceful failure. High cardinality metadata - gives us the mechanisms and obligation to reflect on complexity. High dimensionality data: - provide the mechanisms through which we can run highly parameterised experiments and investigations Service Level Objectives: Captures UX as the arbiter of quality, making the customer’s experience the most essential aspect of the system. According to Yen, we already have a model for measuring, debugging and \"moving the needle\" on unpredictable, qualitative or quantitative experiences. Observability compares expected behaviour against what we see in production \"in front of our live users\". This will help in the chaos of early access programs when something unpredictable happens. When users have a different behaviour than anticipated, and when deploying a bug fix that will break something else, tests can’t protect you like they used to do in plain API systems. Observability helps embrace some unpredictability, enabling feedback loops that let you learn what happens with your code and incorporate those observations into your development process. LLMs have \"an infinite\" set of inputs and outputs, so tests are insufficient. Evaluations can be used, as they are more flexible and allow us to define intended or unintended behaviour. The \"evals\" are developed while you are creating the application itself. They provide the mechanism through which you can observe how the \"magical box\" behaves for different inputs, further incorporating that feedback in the development loop. Similar to other black boxes(payments systems, for example) that we might have integrated into our systems already, LLMs need to capture the details that’ll allow us to understand how the system behaves further. Similarly to classical systems, we would record the outgoing requests to the third party and capture their responses. This will allow us to understand how input impacts output and the user experience. Further, these will translate into behavioural patterns of our system, enabling you to investigate any outlier user of your system rapidly. Yen concludes by expressing her optimism regarding the future of software engineering, given that developers have adapted rapidly to the growing unpredictability of software systems' behaviour. With the focus shifting to a system's impact on the users’ experience, observability is important, especially in the age of Generative AI. About the Author Olimpiu Pop",
  "image": "https://res.infoq.com/news/2025/04/llm-observability/en/headerimage/header+%283%29-1743679464954.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eDuring her KubeCon Europe keynote, \u003ca href=\"https://www.linkedin.com/in/christineyen/\"\u003eChristine Yen\u003c/a\u003e, CEO and co-founder of Honeycomb, provided insights on how observability can help cope with the rapid shifts introduced by the integration of LLMs in software systems, which transformed not only the way we develop software but also the release methodology. She explained how to adapt your development feedback loop based on production observations.\u003c/p\u003e\n\n\u003cp\u003eShe begins by emphasising that even though software engineers are used to \u0026#34;black boxes\u0026#34;, the LLMs are different mainly because they make reliable behaviours that we are used to and make them more complicated.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/04/llm-observability/en/resources/8image3-1743679288254.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/llm-observability/en/resources/8image3-1743679288254.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eCurrent systems development practices rely on deterministic properties like testability, reproducibility (mockability), and explainability (debuggability) to ensure the correctness of their behaviour. Still, the whole reason for incorporating LLMs in your application is to capture the unpredictable nature of human language.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e...most of us here today have been building software before this LLM boom, and we know the hard part about building software systems isn’t writing them. It’s testing, maintenance, tuning and debugging that comes afterwards… \u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eBesides the changes in the methodology of building the software, the product release practices have shifted as well: rather than having a staged approach when limited groups of users have access to alpha or beta versions, we now have early access programs. These allow users to interact with your systems unpredictably.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eYen: ...should we all give up and embrace prompt engineering? No! That’s why we are here… \u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eEven though the shift might seem very complex, she thinks that the practices adopted lately are reasonable steps in the right direction to cope with all the shifts.\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eContinuous Deployment and feature flags - provide a proper mechanism for rapid feedback loops\u003c/li\u003e\n\t\u003cli\u003eTesting in production - forces us to embrace the chaos and engineer systems conceived for rapid and graceful failure.\u003c/li\u003e\n\t\u003cli\u003eHigh cardinality metadata - gives us the mechanisms and obligation to reflect on complexity.\u003c/li\u003e\n\t\u003cli\u003eHigh dimensionality data: - provide the mechanisms through which we can run highly parameterised experiments and investigations\u003c/li\u003e\n\t\u003cli\u003eService Level Objectives: Captures UX as the arbiter of quality, making the customer’s experience the most essential aspect of the system.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAccording to Yen, we already have a model for measuring, debugging and \u0026#34;moving the needle\u0026#34; on unpredictable, qualitative or quantitative experiences. Observability compares expected behaviour against what we see in production \u0026#34;in front of our live users\u0026#34;. This will help in the chaos of early access programs when \u003ca href=\"https://www.honeycomb.io/blog/hard-stuff-nobody-talks-about-llm\"\u003esomething unpredictable happens\u003c/a\u003e. When users have a different behaviour than anticipated, and when deploying a bug fix that will break something else, tests can’t protect you like they used to do in plain API systems.\u003c/p\u003e\n\n\u003cp\u003eObservability helps embrace some unpredictability, enabling feedback loops that let you learn what happens with your code and incorporate those observations into your development process. LLMs have \u0026#34;an infinite\u0026#34; set of inputs and outputs, so tests are insufficient. Evaluations can be used, as they are more flexible and allow us to define intended or unintended behaviour. The \u0026#34;evals\u0026#34; are developed while you are creating the application itself. They provide the mechanism through which you can observe how the \u0026#34;magical box\u0026#34; behaves for different inputs, further incorporating that feedback in the development loop.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/04/llm-observability/en/resources/10image2-1743679288254.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/llm-observability/en/resources/10image2-1743679288254.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eSimilar to other black boxes(payments systems, for example) that we might have integrated into our systems already, LLMs need to capture the details that’ll allow us to understand how the system behaves further. Similarly to classical systems, we would record the outgoing requests to the third party and capture their responses. This will allow us to understand how input impacts output and the user experience. Further, these will translate into behavioural patterns of our system, enabling you to investigate any outlier user of your system rapidly.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/04/llm-observability/en/resources/10image1-1743679288254.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/llm-observability/en/resources/10image1-1743679288254.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eYen concludes by expressing her optimism regarding the future of software engineering, given that developers have adapted rapidly to the growing unpredictability of software systems\u0026#39; behaviour. With the focus shifting to a system\u0026#39;s impact on the users’ experience, observability is important, especially in the age of Generative AI.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Olimpiu-Pop\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eOlimpiu Pop\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-04-03T00:00:00Z",
  "modifiedTime": null
}
