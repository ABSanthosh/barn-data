{
  "id": "c0aa6a81-3bce-41e2-aab8-63df4564a2d5",
  "title": "AWS Reduces Latency and Costs for Key/Value Datastores with AZ Affinity Routing and GLIDE Valkey",
  "link": "https://www.infoq.com/news/2025/02/valkey-glide-az-affinity-routing/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "AWS recently introduced Availability Zone (AZ) awareness in version 1.2 of the open source Valkey General Language Independent Driver for Enterprise (GLIDE) client library. By implementing AZ affinity routing in the open source key/value datastore, developers can reduce latency and costs by directing requests to replicas within the same AZ as the client. By Renato Losio",
  "author": "Renato Losio",
  "published": "Sat, 22 Feb 2025 11:21:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Cloud",
    "Database",
    "Cost Optimization",
    "AWS",
    "Redis",
    "AI, ML \u0026 Data Engineering",
    "Development",
    "news"
  ],
  "byline": "Renato Losio",
  "length": 3426,
  "excerpt": "AWS recently introduced Availability Zone (AZ) awareness in version 1.2 of the open source Valkey General Language Independent Driver for Enterprise (GLIDE) client library. By implementing AZ affinity",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250213201515/apple-touch-icon.png",
  "text": "AWS recently introduced Availability Zone (AZ) awareness in version 1.2 of the open source Valkey General Language Independent Driver for Enterprise (GLIDE) client library. By implementing AZ affinity routing in the open source key/value datastore, developers can reduce latency and costs by directing requests to replicas within the same AZ as the client. Valkey GLIDE is an open source, multi-language client library for Valkey and Redis OSS. Written in Rust, it was released by the AWS team last summer. With Valkey 8 introducing \"availability-zone\" configuration, allowing clients to specify the AZ for each Valkey server, GLIDE now leverages this feature to support AZ affinity routing. Source: AWS blog GLIDE now supports three routing strategies. With the PREFER_REPLICA strategy, the client reads commands from any available replica, while the PRIMARY strategy ensures data freshness by always reading from the primary. The new AZ_AFFINITY strategy directs the client to read commands from a replica in the same AZ as the client. Asaf Porat Stoler, software development manager at AWS, and Adar Guma Ovadya, software engineer at AWS, write: In Valkey 8, availability-zone configuration was introduced, allowing clients to specify the AZ for each Valkey server. GLIDE leverages this new configuration to empower its users with the ability to use AZ Affinity routing. At the time of writing, GLIDE is the only Valkey client library supporting the AZ Affinity strategy, offering a unique advantage. Source: Valkey Blog The AZ affinity routing algorithm offers two key advantages: reducing data transfer costs, since cross-zone transfers often incur additional charges in cloud environments, and minimizing latency between AZs within the same region, improving application responsiveness. Stoler and Ovadya illustrate these savings with an example: An application in AWS with a Valkey cluster of 2 shards, each with 1 primary and 2 replicas, the instance type is m7g.xlarge. The cluster processes 250MB of data per second and to simplify the example 100% of the traffic is read operation. 50% of this traffic crosses AZs at a cost of $0.01 per GB, the monthly cross-AZ data transfer cost would be approximately $3,285. In addition the cost of the cluster is $0.252 per hour per node. Total of $1,088 per month. By implementing AZ affinity routing, you can reduce the total cost from $4,373 to $1,088, as all traffic remains within the same AZ. The configuration depends on the specific language, and the developer must first configure the availability zone for Valkey nodes. For example, in Java: client.configSet(Map.of(\"availability-zone\", az), new ByAddressRoute(\"address.example.com\", 6379)) The next step is to instantiate GLIDE with AZ-specific targeting enabled: GlideClusterClientConfiguration config = GlideClusterClientConfiguration.builder() .address(NodeAddress.builder() .host(\"address.example.com\") .port(6379) .build()) .readFrom(ReadFrom.AZ_AFFINITY) .clientAZ(\"us-east-1a\") .build() GlideClusterClient client = GlideClusterClient.createClient(config).get(); Valkey GLIDE supports Valkey 7.2 and later, as well as Redis open-source 6.2, 7.0, and 7.2. However, AZ affinity routing is only available with Valkey 8.0. About the Author Renato Losio",
  "image": "https://res.infoq.com/news/2025/02/valkey-glide-az-affinity-routing/en/headerimage/generatedHeaderImage-1738743856978.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAWS recently introduced \u003ca href=\"https://valkey.io/blog/az-affinity-strategy/\"\u003eAvailability Zone (AZ) awareness\u003c/a\u003e in version 1.2 of the open source Valkey General Language Independent Driver for Enterprise (GLIDE) client library. By implementing AZ affinity routing in the open source key/value datastore, developers can reduce latency and costs by directing requests to replicas within the same AZ as the client.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/valkey-io/valkey-glide\"\u003eValkey GLIDE\u003c/a\u003e is an open source, multi-language client library for Valkey and Redis OSS. Written in Rust, it was \u003ca href=\"https://aws.amazon.com/blogs/database/introducing-valkey-glide-an-open-source-client-library-for-valkey-and-redis-open-source/\"\u003ereleased by the AWS team last summer\u003c/a\u003e. With Valkey 8 introducing \u0026#34;availability-zone\u0026#34; configuration, allowing clients to specify the AZ for each Valkey server, GLIDE now leverages this feature to support AZ affinity routing.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/02/valkey-glide-az-affinity-routing/en/resources/1DBBLOG-4254-img1-1738744208214.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/02/valkey-glide-az-affinity-routing/en/resources/1DBBLOG-4254-img1-1738744208214.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eSource: AWS blog\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eGLIDE now supports three routing strategies. With the PREFER_REPLICA strategy, the client reads commands from any available replica, while the PRIMARY strategy ensures data freshness by always reading from the primary. The \u003ca href=\"https://github.com/valkey-io/valkey-glide/issues/643\"\u003enew AZ_AFFINITY strategy\u003c/a\u003e directs the client to read commands from a replica in the same AZ as the client. Asaf Porat Stoler, software development manager at AWS, and Adar Guma Ovadya, software engineer at AWS, write:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn Valkey 8, availability-zone configuration was introduced, allowing clients to specify the AZ for each Valkey server. GLIDE leverages this new configuration to empower its users with the ability to use AZ Affinity routing. At the time of writing, GLIDE is the only Valkey client library supporting the AZ Affinity strategy, offering a unique advantage.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/02/valkey-glide-az-affinity-routing/en/resources/1AZ_AFFINITY_strategy-1738744208214.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/02/valkey-glide-az-affinity-routing/en/resources/1AZ_AFFINITY_strategy-1738744208214.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eSource: Valkey Blog\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe AZ affinity routing algorithm offers two key advantages: reducing data transfer costs, since cross-zone transfers often incur additional charges in cloud environments, and minimizing latency between AZs within the same region, improving application responsiveness. Stoler and Ovadya illustrate these savings with an example:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAn application in AWS with a Valkey cluster of 2 shards, each with 1 primary and 2 replicas, the instance type is m7g.xlarge. The cluster processes 250MB of data per second and to simplify the example 100% of the traffic is read operation. 50% of this traffic crosses AZs at a cost of $0.01 per GB, the monthly cross-AZ data transfer cost would be approximately $3,285. In addition the cost of the cluster is $0.252 per hour per node. Total of $1,088 per month. By implementing AZ affinity routing, you can reduce the total cost from $4,373 to $1,088, as all traffic remains within the same AZ.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe configuration depends on the specific language, and the developer must first configure the availability zone for Valkey nodes. For example, in Java:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eclient.configSet(Map.of(\u0026#34;availability-zone\u0026#34;, az), new ByAddressRoute(\u0026#34;address.example.com\u0026#34;, 6379))\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe next step is to instantiate GLIDE with AZ-specific targeting enabled:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eGlideClusterClientConfiguration config = GlideClusterClientConfiguration.builder()\n\t.address(NodeAddress.builder()\n    \t.host(\u0026#34;address.example.com\u0026#34;)\n    \t.port(6379)\n    \t.build())\n\t.readFrom(ReadFrom.AZ_AFFINITY)\n\t.clientAZ(\u0026#34;us-east-1a\u0026#34;)\n\t.build()\nGlideClusterClient client = GlideClusterClient.createClient(config).get();\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eValkey GLIDE supports Valkey 7.2 and later, as well as Redis open-source 6.2, 7.0, and 7.2. However, AZ affinity routing is only available with Valkey 8.0.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Renato-Losio\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eRenato Losio\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-02-22T00:00:00Z",
  "modifiedTime": null
}
