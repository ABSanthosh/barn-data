{
  "id": "6734d9f7-7409-4aed-b551-9ec01ca16932",
  "title": "GitHub for Beginners: Test-driven development (TDD) with GitHub Copilot",
  "link": "https://github.blog/ai-and-ml/github-copilot/github-for-beginners-test-driven-development-tdd-with-github-copilot/",
  "description": "See how to use GitHub Copilot to engage in some test-driven development. The post GitHub for Beginners: Test-driven development (TDD) with GitHub Copilot appeared first on The GitHub Blog.",
  "author": "Kedasha Kerr",
  "published": "Mon, 26 May 2025 13:00:00 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "GitHub for beginners",
    "Test-driven development"
  ],
  "byline": "Kedasha Kerr",
  "length": 8186,
  "excerpt": "See how to use GitHub Copilot to engage in some test-driven development.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Welcome to the next episode in our GitHub for Beginners series, where we’re diving into the world of GitHub Copilot. We’re now on our seventh episode, and we’ve covered quite a lot of ground. You can check out all our previous episodes on our blog or as videos. Today we’re going to dive into the world of testing, a much needed but historically tedious part of the development process. This is especially true as our codebase becomes larger and more complex. Fortunately, we can use GitHub Copilot to help automate some of this process. After all, one of the most basic questions we have when writing code is: “Does it work?” Testing 101 Before we jump into how to use GitHub Copilot to write some tests, we should talk about testing, why it’s important, and different ways to test your code. Be aware that test testing is a very deep topic, and we’ll only be touching the surface here. Covering the nuances of testing would be an entire course in and of itself. So why is testing important? In short, it’s how you make sure that your code does what you expect. Testing can take many different forms, such as: Acceptance tests: Tests that ensure your app meets a set of defined functionality. Integration tests: Tests that verify your app can talk across various systems such as databases and APIs. Unit tests: Tests focused on breaking the code into small, isolated pieces called units. These make sure the individual units do exactly what you’d expect them to do. Writing unit tests As we just covered, unit tests work by breaking down your code into smaller chunks that are easier to test. Making sure each individual piece is doing what it’s supposed to do increases confidence that the entire app will work when you put all the pieces together. One of the great things about unit tests is that you can automate the process. Once you’ve created a large battery of tests, you can literally run thousands of tests with a single command. This gives you a good indicator regarding the health of your application. By regularly running these tests, you’ll also discover if any changes to your code broke something you might not have been expecting. So how do you use GitHub Copilot to create some unit tests? Open up your code and highlight a section that you want to test. For example, you might highlight a specific function. Open up Copilot Chat. You might notice that Copilot suggests using the /tests slash command to write tests. Send Copilot the following prompt: /tests add unit tests for my code If Copilot asks if you want to configure a test framework, select Dismiss. Review the plan and code suggestions to make sure you understand what changes Copilot is going to make. Click the Add to new file button at the top of the code suggestion to create the tests. Save the new file. Run the tests by running the following command in your terminal: python -m pytest Congratulations! You just added some unit tests to your code! If you’d like to see a demo of this in action, make sure to watch the video! Test-driven development Now that you’ve seen how to write some unit tests, let’s talk a little bit about test-driven development (TDD). What exactly is TDD? It’s a process where you use the tests to drive how you develop your code. When using TDD, you write your tests first, and then create the implementation afterward. The process takes a little bit of adjusting how you think about development, but it does come with several advantages. It gives you the opportunity to see how your code will behave and ensure the tests you’re writing are testing what you expect them to test.  A concept that can be helpful for wrapping your brain around this is called “red, green, refactor.” In this process, you create the tests first, and they fail. They might not even build! This is the red stage. Then you write just enough code to get your tests to pass. For example, if you’re writing a test that makes sure an error is thrown if a number is less than 0, you write just enough code to throw that error on that condition. When you return to the test, it now passes. You’ve actively made a change to the codebase to implement the desired functionality. This is the green stage.  Finally, you implement any refactoring to make the code look good. Now that it works, you can focus on making it pretty. The entire time you are working on this, you keep running the unit tests to make sure your changes don’t break anything. As you probably guessed, this is the refactor stage. GitHub Copilot can help you with TDD. It’s one of the hidden little tricks that Copilot is able to do—you can tell it code will exist and generate tests based on that information. For example, if you were working on an email validation app, you could send the following prompt to Copilot Chat: I'm going to be adding a new validator function for usernames. Usernames must be between 3 and 16 characters, start with a letter or an underscore, not use multiple underscores to start, and after the first character chan have letters, numbers, and underscores. Just create the new test functions. This prompt provides the criteria that you’re expecting and gives it to Copilot. Copilot will then use this prompt to generate unit tests to test that functionality. If you ran these tests, they would fail, because you’ve only created the tests. Red stage. Now, to move on to the green stage, you could send Copilot the following prompt: Create the implementation Copilot will now generate the code to make sure these tests pass. Now when you add this code to your validators and rerun the tests, they pass. Green stage. Thanks to Copilot’s help, we’ve gone through some TDD and have code that works. Best practices Remember that unit tests are code. In order to make them more palatable to others, you should follow follow several of the same coding standards you’d use for production code: Add documentation to your tests Keep your tests organized Create utilities to write your tests faster Update your tests as you make changes to your code We don’t have time to cover every aspect of TDD or unit testing, but there are plenty of resources available. Here are some to get you started: Accelerate TDD with AI How to generate unit tests with GitHub Copilot Generating unit tests with GitHub Copilot Writing tests with GitHub Copilot Your next steps Testing is an essential part of development. Having tools like GitHub Copilot that make tests less tedious to write improves your code and gives you more time to focus on the parts of coding you enjoy. Don’t forget that you can use GitHub Copilot for free! If you have any questions, pop them in the GitHub Community thread, and we’ll be sure to respond. Join us for the next part in this series, which will be our final episode of the season.  Happy coding! Need some help testing your code and keeping it all running smoothly? Give GitHub Copilot a try! Tags: GitHub Copilot GitHub for beginners Test-driven development Written by Kedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she's learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/02/418127171-3bd956ac-6856-4c72-8601-010f10058417.png?fit=2400%2C1260",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eWelcome to the next episode in our GitHub for Beginners series, where we’re diving into the world of \u003ca href=\"https://www.youtube.com/watch?v=n0NlxUyA7FI\u0026amp;list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\u0026amp;index=6\"\u003eGitHub Copilot\u003c/a\u003e. We’re now on our seventh episode, and we’ve covered quite a lot of ground. You can check out all our previous episodes on \u003ca href=\"https://github.blog/tag/github-for-beginners/\"\u003eour blog\u003c/a\u003e or \u003ca href=\"https://www.youtube.com/playlist?list=PL0lo9MOBetEFcp4SCWinBdpml9B2U25-f\"\u003eas videos\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eToday we’re going to dive into the world of testing, a much needed but historically tedious part of the development process. This is especially true as our codebase becomes larger and more complex. Fortunately, we can use GitHub Copilot to help automate some of this process.\u003c/p\u003e\n\n\n\n\u003cp\u003eAfter all, one of the most basic questions we have when writing code is: “Does it work?”\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Test-driven development with GitHub Copilot: A beginner\u0026#39;s practical guide\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/arn6hqERKn4?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\n\n\n\n\u003ch2 id=\"h-testing-101\"\u003eTesting 101\u003c/h2\u003e\n\n\n\n\u003cp\u003eBefore we jump into how to use GitHub Copilot to write some tests, we should talk about testing, why it’s important, and different ways to test your code. Be aware that test testing is a very deep topic, and we’ll only be touching the surface here. Covering the nuances of testing would be an entire course in and of itself.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo why is testing important? In short, it’s how you make sure that your code does what you expect.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1657\" height=\"927\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/01-testing-important.png?resize=1657%2C927\" alt=\"A slide explaining \u0026#39;Why are tests important? Ensures code is working as expected.\u0026#39;\" srcset=\"https://github.blog/wp-content/uploads/2025/05/01-testing-important.png?w=1657 1657w, https://github.blog/wp-content/uploads/2025/05/01-testing-important.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/01-testing-important.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/01-testing-important.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/05/01-testing-important.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTesting can take many different forms, such as:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAcceptance tests:\u003c/strong\u003e Tests that ensure your app meets a set of defined functionality.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eIntegration tests: \u003c/strong\u003eTests that verify your app can talk across various systems such as databases and APIs.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eUnit tests:\u003c/strong\u003e Tests focused on breaking the code into small, isolated pieces called units. These make sure the individual units do exactly what you’d expect them to do.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"writing-unit-tests\"\u003eWriting unit tests\u003c/h2\u003e\n\n\n\n\u003cp\u003eAs we just covered, unit tests work by breaking down your code into smaller chunks that are easier to test. Making sure each individual piece is doing what it’s supposed to do increases confidence that the entire app will work when you put all the pieces together.\u003c/p\u003e\n\n\n\n\u003cp\u003eOne of the great things about unit tests is that you can automate the process. Once you’ve created a large battery of tests, you can literally run thousands of tests with a single command. This gives you a good indicator regarding the health of your application. By regularly running these tests, you’ll also discover if any changes to your code broke something you might not have been expecting.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo how do you use GitHub Copilot to create some unit tests?\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eOpen up your code and highlight a section that you want to test. For example, you might highlight a specific function.\u003c/li\u003e\n\n\n\n\u003cli\u003eOpen up Copilot Chat. You might notice that Copilot suggests using the \u003ccode\u003e/tests\u003c/code\u003e slash command to write tests.\u003c/li\u003e\n\n\n\n\u003cli\u003eSend Copilot the following prompt:\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003e/tests add unit tests for my code\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"4\"\u003e\n\u003cli\u003eIf Copilot asks if you want to configure a test framework, select \u003ccode\u003eDismiss\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-23-at-10.52.46 AM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/ep7_unit_test.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"5\"\u003e\n\u003cli\u003eReview the plan and code suggestions to make sure you understand what changes Copilot is going to make.\u003c/li\u003e\n\n\n\n\u003cli\u003eClick the \u003cstrong\u003eAdd to new file\u003c/strong\u003e button at the top of the code suggestion to create the tests.\u003c/li\u003e\n\n\n\n\u003cli\u003eSave the new file.\u003c/li\u003e\n\n\n\n\u003cli\u003eRun the tests by running the following command in your terminal:\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003epython -m pytest\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCongratulations! You just added some unit tests to your code! If you’d like to see a demo of this in action, make sure to watch the video!\u003c/p\u003e\n\n\n\n\u003ch2 id=\"test-driven-development\"\u003eTest-driven development\u003c/h2\u003e\n\n\n\n\u003cp\u003eNow that you’ve seen how to write some unit tests, let’s talk a little bit about test-driven development (TDD). What exactly is TDD? It’s a process where you use the tests to drive how you develop your code. When using TDD, you write your tests first, and then create the implementation afterward.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe process takes a little bit of adjusting how you think about development, but it does come with several advantages. It gives you the opportunity to see how your code will behave and ensure the tests you’re writing are testing what you expect them to test. \u003c/p\u003e\n\n\n\n\u003cp\u003eA concept that can be helpful for wrapping your brain around this is called “red, green, refactor.” In this process, you create the tests first, and they fail. They might not even build! This is the red stage.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1657\" height=\"927\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/red_green_refactor.png?resize=1657%2C927\" alt=\"A slide explaining Red, Green, Refactor steps:\n\n1. Write tests first\n2. Tests fail because there\u0026#39;s no code (red!)\n3. Write just enough code to allow tests to pass\n4. Rerun the test to see it pass (green!)\n5. Refactor and clean up code\" srcset=\"https://github.blog/wp-content/uploads/2025/05/red_green_refactor.png?w=1657 1657w, https://github.blog/wp-content/uploads/2025/05/red_green_refactor.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/red_green_refactor.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/red_green_refactor.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/05/red_green_refactor.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThen you write just enough code to get your tests to pass. For example, if you’re writing a test that makes sure an error is thrown if a number is less than 0, you write just enough code to throw that error on that condition. When you return to the test, it now passes. You’ve actively made a change to the codebase to implement the desired functionality. This is the green stage. \u003c/p\u003e\n\n\n\n\u003cp\u003eFinally, you implement any refactoring to make the code look good. Now that it works, you can focus on making it pretty. The entire time you are working on this, you keep running the unit tests to make sure your changes don’t break anything. As you probably guessed, this is the refactor stage.\u003c/p\u003e\n\n\n\n\u003cp\u003eGitHub Copilot can help you with TDD. It’s one of the hidden little tricks that Copilot is able to do—you can tell it code will exist and generate tests based on that information. For example, if you were working on an email validation app, you could send the following prompt to Copilot Chat:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eI\u0026#39;m going to be adding a new validator function for usernames. Usernames must be between 3 and 16 characters, start with a letter or an underscore, not use multiple underscores to start, and after the first character chan have letters, numbers, and underscores. Just create the new test functions.\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis prompt provides the criteria that you’re expecting and gives it to Copilot. Copilot will then use this prompt to generate unit tests to test that functionality. If you ran these tests, they would fail, because you’ve only created the tests. Red stage.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-23-at-10.55.26 AM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/ep7-red-stage.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, to move on to the green stage, you could send Copilot the following prompt:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode\u003eCreate the implementation\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCopilot will now generate the code to make sure these tests pass. Now when you add this code to your validators and rerun the tests, they pass. Green stage.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/05/Screenshot-2025-05-23-at-10.57.09 AM.png\" src=\"https://github.blog/wp-content/uploads/2025/05/ep7-green_stage.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThanks to Copilot’s help, we’ve gone through some TDD and have code that works.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"best-practices\"\u003eBest practices\u003c/h2\u003e\n\n\n\n\u003cp\u003eRemember that unit tests are code. In order to make them more palatable to others, you should follow follow several of the same coding standards you’d use for production code:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eAdd documentation to your tests\u003c/li\u003e\n\n\n\n\u003cli\u003eKeep your tests organized\u003c/li\u003e\n\n\n\n\u003cli\u003eCreate utilities to write your tests faster\u003c/li\u003e\n\n\n\n\u003cli\u003eUpdate your tests as you make changes to your code\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe don’t have time to cover every aspect of TDD or unit testing, but there are plenty of resources available. Here are some to get you started:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/readme/guides/github-copilot-automattic\"\u003eAccelerate TDD with AI\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.blog/ai-and-ml/github-copilot/how-to-generate-unit-tests-with-github-copilot-tips-and-examples/\"\u003eHow to generate unit tests with GitHub Copilot\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/copilot-chat-cookbook/testing-code/generate-unit-tests\"\u003eGenerating unit tests with GitHub Copilot\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://docs.github.com/copilot/using-github-copilot/guides-on-using-github-copilot/writing-tests-with-github-copilot\"\u003eWriting tests with GitHub Copilot\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"your-next-steps\"\u003eYour next steps\u003c/h2\u003e\n\n\n\n\u003cp\u003eTesting is an essential part of development. Having tools like GitHub Copilot that make tests less tedious to write improves your code and gives you more time to focus on the parts of coding you enjoy.\u003c/p\u003e\n\n\n\n\u003cp\u003eDon’t forget that you can \u003ca href=\"https://gh.io/gfb-copilot\"\u003euse GitHub Copilot for free\u003c/a\u003e! If you have any questions, pop them in the \u003ca href=\"https://github.com/orgs/community/discussions/152688\"\u003eGitHub Community thread\u003c/a\u003e, and we’ll be sure to respond. Join us for the next part in this series, which will be our final episode of the season. \u003c/p\u003e\n\n\n\n\u003cp\u003eHappy coding!\u003c/p\u003e\n\n\n\n\u003cp\u003eNeed some help testing your code and keeping it all running smoothly? Give \u003ca href=\"https://github.com/features/copilot\"\u003eGitHub Copilot\u003c/a\u003e a try!\u003c/p\u003e\n\n\t\n\u003csection\u003e\n\t\u003chr/\u003e\n\t\u003cdiv\u003e\n\t\t\u003ch2\u003eTags:\u003c/h2\u003e\n\t\t\u003cul\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/github-copilot/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tGitHub Copilot\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/github-for-beginners/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tGitHub for beginners\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/test-driven-development-2/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tTest-driven development\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\u003c/ul\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" alt=\"Kedasha Kerr\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eKedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she\u0026#39;s learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-05-26T13:00:00Z",
  "modifiedTime": null
}
