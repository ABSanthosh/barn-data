{
  "id": "6a320c3f-45f4-4452-977d-4218e9caed1a",
  "title": "5 Fundamental Concepts of Object Oriented Programming",
  "link": "https://www.thecrazyprogrammer.com/2022/12/concepts-of-object-oriented-programming.html",
  "description": "Object-oriented programming is a programming model that revolves around an object or entity. Object-oriented programming has been an enormous success for both developers and programmers. Creating a more seamless process and system for their employees and clients has benefited multi-billion dollar corporations. However, a significant amount of time must be devoted to learning programming languages … 5 Fundamental Concepts of Object Oriented Programming Read More » The post 5 Fundamental Concepts of Object Oriented Programming appeared first on The Crazy Programmer.",
  "author": "Neeraj Mishra",
  "published": "Tue, 20 Dec 2022 14:31:53 +0000",
  "source": "https://www.thecrazyprogrammer.com/category/programming/feed",
  "categories": [
    "Programming"
  ],
  "byline": "Neeraj Mishra",
  "length": 6387,
  "excerpt": "Object-oriented programming is a programming model that revolves around an object or entity. Object-oriented programming has been an enormous success for both developers and programmers. Creating a more seamless process and system for their employees and clients has benefited multi-billion dollar corporations. However, a significant amount of time must be devoted to learning programming languages and coding techniques to achieve such a result.",
  "siteName": "The Crazy Programmer",
  "favicon": "https://www.thecrazyprogrammer.com/wp-content/uploads/2016/09/cropped-484916_442860602439830_1518519815_n-192x192.png",
  "text": "Object-oriented programming is a programming model that revolves around an object or entity. Object-oriented programming has been an enormous success for both developers and programmers. Creating a more seamless process and system for their employees and clients has benefited multi-billion dollar corporations. However, a significant amount of time must be devoted to learning programming languages and coding techniques to achieve such a result. In college or university, a novice programmer typically has a ton of assignments to complete in addition to plenty of homework. Thankfully, there are online services like https://wowassignment.com/do-my-programming-homework/ where you can hire professionals to help you with your programming homework and entrust your projects to qualified, experienced programmers. Object-oriented programming is based on five fundamental concepts, namely: Class Object Encapsulation Inheritance Polymorphism We will tell you about each of these concepts separately. 1. Concept of Class The first fundamental concept of object-oriented software is Class. A class is an abstract structure that describes real-world objects from two angles: its properties (characteristics) and methods (the actions it can perform or its behavior). For example: in object-oriented programming, employees can be represented in the form of a class; in this case, the class Employees represents all the employees who can have as properties a surname, a first name, an address, and a date of birth; the operations that can be performed on employees can be changing their salary, taking leave, retiring, etc. The Class is ultimately a mold, a template, and all class instances are called objects, which are constructed from the Class by an instantiation process. Therefore, every object is an instance of a class. The instantiation of a class uses three special methods which are very important to understand. Constructor There are three types of constructors: the default constructor called by default when an object is created (offered by default during compilation if there is no declared constructor), the copy constructor (or copy constructor) has a single argument of the same type as the object to be created (generally in the form of a constant reference), and it copies the attributes from the object passed in the argument to the object to be created. the parametric constructor is called if the signature matches that of the constructor. Accessors (get) and Mutators (set) These unique methods allow you to call the properties and modify the properties of a class from the outside, like an API. The outside can “call” the Class’s functionalities thanks to them. Accessors allow you to retrieve the value of the properties of a class instance from the outside without accessing them directly. In doing so, they secure the attribute by restricting its modification. The mutators allow you to modify the value of the properties while checking that the value you want to give to the feature respects the semantic constraints imposed on the Class. Destructor This method ends the life of a class instance. It can be called when the object is deleted, explicitly or implicitly. 2. Concept of Object The second most important concept in object programming is the object. As we said earlier, an object is an instance of a class. The object is a bit like a house built based on a particular plan. As long as architects refer to this plan, they will always produce identical dwellings. Technically, an object is characterized by three things: an identity: the identity must unambiguously identify the object (address/reference or name); states: each object has a default value (when indicated at instantiation) for its properties. These values are called the states of the object; methods: each object can execute the actions or behavior defined in the Class. These actions are translated in OOP concretely in the form of methods. The possible actions on an object are triggered by calls of these methods or messages sent by other objects. 3. Concept of Encapsulation The third concept of object-oriented programming is encapsulation. Its methods can only access the properties of objects. Thus, the Class encapsulates the attributes and the methods that allow manipulating the objects independently of their states. The encapsulation restricts direct access to the states and prevents object modification outside its methods. For example, if you have a Car class and want to set the value of its color property to blue, you need to go through a method such as a “define the color” implemented by the Class developer. This method can restrict the different color values. Encapsulation is a mechanism that prevents modification or access to objects by any means other than the proposed methods. It guarantees the integrity of the objects. 4. Concept of Inheritance Inheritance is the fourth key concept in object programming. It is a concept in OOP that refers to the fact that a class can inherit characteristics (attributes and methods) from another class. Objects of classes can inherit properties from a parent class. For example, we can define an Employee class and a Manager class, a specialized class of Employee, which inherits its properties. Inheritance has two main advantages in OOP: specialization: a new class reuses the attributes and methods of a class by adding operations specific to the new Class; reuse: you don’t need to recreate the same Class each time for each specialized Class. 5. Concept of Polymorphism The last essential concept of object-oriented programming is polymorphism. An object-oriented language is polymorphic if it can perceive an object as an instance of different classes depending on the situation. Java, for example, is a polymorphic language. Conclusion Developers should have a solid understanding of object-oriented programming, as it is the foundation of many high-level programming languages. You can identify the underlying causes of bottlenecks and eliminate them by writing more creative code by using the fundamental OOP concepts to comprehend how simple programs operate. Developing your skills can be aided by coding suites, learning new languages, and understanding OOP concepts.",
  "image": "http://thecrazyprogrammer.com/wp-content/uploads/2022/12/Object-Oriented-Programming-1024x858.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"primary\"\u003e\n\n\t\t\n\t\t\t\t\t\u003cmain id=\"main\"\u003e\n\t\t\t\t\n\n\u003carticle id=\"post-13213\" itemtype=\"https://schema.org/CreativeWork\" itemscope=\"itemscope\"\u003e\n\n\t\n\t\n\u003cdiv itemprop=\"text\"\u003e\n\n\t\t\n\t\t\n\u003cp\u003e\u003ca href=\"http://thecrazyprogrammer.com/2015/08/python-object-oriented-programming-class-and-object.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eObject-oriented programming\u003c/a\u003e is a programming model that revolves around an object or entity. Object-oriented programming has been an enormous success for both developers and programmers. Creating a more seamless process and system for their employees and clients has benefited multi-billion dollar corporations. However, a significant amount of time must be devoted to learning programming languages and coding techniques to achieve such a result.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn college or university, a novice programmer typically has a ton of assignments to complete in addition to plenty of homework. Thankfully, there are online services like \u003ca href=\"https://wowassignment.com/do-my-programming-homework/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://wowassignment.com/do-my-programming-homework/\u003c/a\u003e where you can hire professionals to help you with your programming homework and entrust your projects to qualified, experienced programmers.\u003c/p\u003e\n\n\n\n\u003cp\u003eObject-oriented programming is based on five fundamental concepts, namely:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eClass\u003c/li\u003e\n\n\n\n\u003cli\u003eObject\u003c/li\u003e\n\n\n\n\u003cli\u003eEncapsulation\u003c/li\u003e\n\n\n\n\u003cli\u003eInheritance\u003c/li\u003e\n\n\n\n\u003cli\u003ePolymorphism\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe will tell you about each of these concepts separately.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg fetchpriority=\"high\" decoding=\"async\" src=\"http://thecrazyprogrammer.com/wp-content/uploads/2022/12/Object-Oriented-Programming-1024x858.png\" alt=\"Object Oriented Programming\" width=\"512\" height=\"429\" srcset=\"https://www.thecrazyprogrammer.com/wp-content/uploads/2022/12/Object-Oriented-Programming-1024x858.png 1024w, https://www.thecrazyprogrammer.com/wp-content/uploads/2022/12/Object-Oriented-Programming-300x251.png 300w, https://www.thecrazyprogrammer.com/wp-content/uploads/2022/12/Object-Oriented-Programming-1536x1287.png 1536w, https://www.thecrazyprogrammer.com/wp-content/uploads/2022/12/Object-Oriented-Programming-150x126.png 150w, https://www.thecrazyprogrammer.com/wp-content/uploads/2022/12/Object-Oriented-Programming.png 1654w\" sizes=\"(max-width: 512px) 100vw, 512px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e1. Concept of Class\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe first fundamental concept of object-oriented software is Class. A class is an abstract structure that describes real-world objects from two angles: its properties (characteristics) and methods (the actions it can perform or its behavior).\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example: in object-oriented programming, employees can be represented in the form of a class; in this case, the class Employees represents all the employees who can have as properties a surname, a first name, an address, and a date of birth; the operations that can be performed on employees can be changing their salary, taking leave, retiring, etc.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe Class is ultimately a mold, a template, and all class instances are called objects, which are constructed from the Class by an instantiation process. Therefore, every object is an instance of a class.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe instantiation of a class uses three special methods which are very important to understand.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003ca href=\"http://thecrazyprogrammer.com/2018/06/difference-between-constructor-and-destructor.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eConstructor\u003c/a\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThere are three types of constructors:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ethe default constructor called by default when an object is created (offered by default during compilation if there is no declared constructor),\u003c/li\u003e\n\n\n\n\u003cli\u003ethe copy constructor (or copy constructor) has a single argument of the same type as the object to be created (generally in the form of a constant reference), and it copies the attributes from the object passed in the argument to the object to be created.\u003c/li\u003e\n\n\n\n\u003cli\u003ethe parametric constructor is called if the signature matches that of the constructor.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eAccessors (get) and Mutators (set)\u003c/h3\u003e\n\n\n\n\u003cp\u003eThese unique methods allow you to call the properties and modify the properties of a class from the outside, like an API. The outside can “call” the Class’s functionalities thanks to them.\u003c/p\u003e\n\n\n\n\u003cp\u003eAccessors allow you to retrieve the value of the properties of a class instance from the outside without accessing them directly. In doing so, they secure the attribute by restricting its modification. The mutators allow you to modify the value of the properties while checking that the value you want to give to the feature respects the semantic constraints imposed on the Class.\u003c/p\u003e\n\n\n\n\u003ch3\u003eDestructor\u003c/h3\u003e\n\n\n\n\u003cp\u003eThis method ends the life of a class instance. It can be called when the object is deleted, explicitly or implicitly.\u003c/p\u003e\n\n\n\n\u003ch2\u003e2. Concept of Object\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe second most important concept in object programming is the object. As we said earlier, an object is an instance of a class. The object is a bit like a house built based on a particular plan. As long as architects refer to this plan, they will always produce identical dwellings.\u003c/p\u003e\n\n\n\n\u003cp\u003eTechnically, an object is characterized by three things:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ean identity:\u003c/strong\u003e the identity must unambiguously identify the object (address/reference or name);\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003estates:\u003c/strong\u003e each object has a default value (when indicated at instantiation) for its properties. These values are called the states of the object;\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003emethods\u003c/strong\u003e: each object can execute the actions or behavior defined in the Class. These actions are translated in OOP concretely in the form of methods. The possible actions on an object are triggered by calls of these methods or messages sent by other objects.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e3. Concept of Encapsulation\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe third concept of object-oriented programming is encapsulation.\u003c/p\u003e\n\n\n\n\u003cp\u003eIts methods can only access the properties of objects. Thus, the Class encapsulates the attributes and the methods that allow manipulating the objects independently of their states.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe encapsulation restricts direct access to the states and prevents object modification outside its methods. For example, if you have a Car class and want to set the value of its color property to blue, you need to go through a method such as a “define the color” implemented by the Class developer. This method can restrict the different color values.\u003c/p\u003e\n\n\n\n\u003cp\u003eEncapsulation is a mechanism that prevents modification or access to objects by any means other than the proposed methods. It guarantees the integrity of the objects.\u003c/p\u003e\n\n\n\n\u003ch2\u003e4. Concept of \u003ca href=\"http://thecrazyprogrammer.com/2014/10/inheritance-in-java.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eInheritance\u003c/a\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eInheritance is the fourth key concept in object programming. It is a concept in OOP that refers to the fact that a class can inherit characteristics (attributes and methods) from another class.\u003c/p\u003e\n\n\n\n\u003cp\u003eObjects of classes can inherit properties from a parent class. For example, we can define an Employee class and a Manager class, a specialized class of Employee, which inherits its properties.\u003c/p\u003e\n\n\n\n\u003cp\u003eInheritance has two main advantages in OOP:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003especialization:\u003c/strong\u003e a new class reuses the attributes and methods of a class by adding operations specific to the new Class;\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003ereuse:\u003c/strong\u003e you don’t need to recreate the same Class each time for each specialized Class.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e5. Concept of Polymorphism\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe last essential concept of object-oriented programming is \u003ca href=\"http://thecrazyprogrammer.com/2014/08/polymorphism-in-java.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003epolymorphism\u003c/a\u003e. An object-oriented language is polymorphic if it can perceive an object as an instance of different classes depending on the situation. Java, for example, is a polymorphic language.\u003c/p\u003e\n\n\n\n\u003ch3\u003eConclusion\u003c/h3\u003e\n\n\n\n\u003cp\u003eDevelopers should have a solid understanding of object-oriented programming, as it is the foundation of many high-level programming languages. You can identify the underlying causes of bottlenecks and eliminate them by writing more creative code by using the fundamental OOP concepts to comprehend how simple programs operate. Developing your skills can be aided by coding suites, learning new languages, and understanding OOP concepts.\u003c/p\u003e\n\n\t\t\n\t\t\n\t\t\t\u003c/div\u003e\n\n\t\n\u003c/article\u003e\n\n\n\t        \n\n\t\t\t\u003c/main\u003e\n\t\t\t\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2022-12-20T14:31:53Z",
  "modifiedTime": "2022-12-20T14:31:57Z"
}
