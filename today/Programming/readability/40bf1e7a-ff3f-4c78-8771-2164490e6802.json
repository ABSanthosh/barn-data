{
  "id": "40bf1e7a-ff3f-4c78-8771-2164490e6802",
  "title": "The Value Of Experimentation In Software Development",
  "link": "https://engineering.prezi.com/the-value-of-experimentation-in-software-development-c10a012ebd49?source=rss----911e72786e31---4",
  "description": "",
  "author": "Attila Vágó",
  "published": "Tue, 28 Nov 2023 22:04:43 GMT",
  "source": "https://engineering.prezi.com/feed",
  "categories": [
    "coding",
    "productivity",
    "experimentation",
    "work",
    "software-development"
  ],
  "byline": "Attila Vágó",
  "length": 6771,
  "excerpt": "For the most part, I think that software engineers, developers, programmers, coders — call ’em whatever you like — all tend to share an important trait — curiosity. Yes, even the jaded cynics with a…",
  "siteName": "Prezi Engineering",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*U0lNGgJfm0Qo1ZfYDS36KA.png",
  "text": "Going beyond POCs, spikes, and hackathons…For the most part, I think that software engineers, developers, programmers, coders — call ’em whatever you like — all tend to share an important trait — curiosity. Yes, even the jaded cynics with a decades-long career behind them. Curiosity may have killed the cat, but when it comes to those of us who write code for a living, it can actually breathe life back into one’s day-to-day, be that at the office, at home or stranded in an airport while traveling around the globe writing software.Yet, as much as we all love solving problems and writing code, let’s admit that more often than not we feel like we’ve done it all before, the only variable is the context. Heck, many companies hire us exactly because we’ve done something before, we’ve done it well, and now they want us to do it for them. It’s called having experience and expertise and being appreciated for it. It’s no wonder then that the older a software engineer gets, the more you hear across the industry they’ve “been there, done that”, “it’s just another job”, “there’s nothing new under the Sun” alongside the sigh of having to “go back to the salt mines” after a well-deserved holiday or vacation.What exactly happened?Well, one could say, life happened. The day-to-day happened. Naturally, features need to be developed, and those features follow an endless list of other features. Frontend engineers are writing their 789th API call to some internal or 3rd-party service, the backend engineers are writing yet another… you guessed it… microservice, and so on. A sense of monotony can easily set in and even when you truly enjoy coding, sometimes you just can’t shake off the urge to experiment, to try something out that’s not on the Jira board.Of course, one could argue there is always a good spike or POC to sink one’s teeth into, and should there be none, by now most software companies hold regular hackathons. I remember joining Prezi in January 2022, literally starting with a week-long hackathon. It was fun, I even participated, and I got to know half the company in a single fast-paced, inspiring week. But hackathons don’t happen every day and the rush of it can wear off quickly, hence the need for something else.A simple, yet effective solutionBecause you see, life doesn’t just happen in a vacuum, we do have some control over it. One effective solution is perhaps to move from a full-stack developer role to an SRE position, or from frontend to backend, and while those are both very effective for getting back the excitement and a sense of newness in one’s day-to-day, it’s not the simplest of solutions organisationally speaking.So what is?When we developed Prezi Video for Zoom, we quickly realised as a cross-functional team that beyond just our respective areas of expertise, we had a lot more to give. We found that many of our planning sessions or design syncs resulted in not just making decisions about what needs to get done next, but tangential ideas were coming from every direction, and some intriguing enough that while we couldn’t justify jumping on them as a team, we also couldn’t deny its potential value, and some of us felt really eager to at least create a demoable version of it. So how do you do that without it being on the product roadmap?When you really believe in something, and you want to do it, you create time for it.And we called this time “Gold Days”, a refreshed concept in Prezi, where a team sets aside some time — in our case two days — every two months to allow team members to experiment around the product. And when I say experiment, I mean anything goes:Develop and demo an entirely new feature that you really believe in.Modify or improve an existing feature the way you imagine it should work.Try out previously unexplored 3rd-party services and see what integrations might work well in the future.Tackle a technical challenge that was never truly solved before in the product.For transparency, we tracked these experiments in a Confluence document that anyone could add ideas to. Not just our team. Everyone from the company. On the first day of Gold Days, anyone who wanted to participate from the team (it wasn't compulsory), would pick one of the ideas they felt strongly about, and would commence experimenting. The expectation was that by the end of the second day there would be an output in the form of a demo, a findings document or both.Another important aspect of this setup was the understanding that no output was guaranteed to become part of the product. It was still product’s decision what’s worth spending more time on and what isn’t. But that was part of why Gold Days worked well for us. There was zero pressure to build something for production, but all the freedom to experiment within the product.The benefits of experimentationBefore I proposed reviving this concept within the team, I realised that beyond the obvious answer of “because it’s fun” to the equally obvious question of “why?”, there had to be other reasons to give the team the bandwidth for experimentation. Here’s just some of them:People care about their ideas, and the more we allow them to explore, the more we fulfil a natural need. Satisfying that need leads to people who feel more accomplished, even if the result doesn’t end up in the product. That idea is no more in the back of their minds, and there are no more frustrations about never having had the time to try it.It teaches lessons. Ideas on the surface can be great, but just as well prove to be unfeasible when trying to implement them. In the case of a success, one gets to learn how to get quickly from an idea to something they can demo to the team. In the case of a failure, the entire team learns about UX or technical challenges that were never considered before.It sharpens presentation and documentation writing skills, both essential for a software engineer. It’s one thing to build it, and it’s another to sell it and document it in a way that anyone can understand the benefits of the demo.It fosters new ideas. Regardless of a demo being successful or not, seeing it rather than just having a few lines of text in a Confluence document or a fleeting comment on Slack, can start tangential conversations that can ultimately become new avenues for the product. Inspiration can come from anywhere, even a failed demo.In the case of a successful demo, it might just become the feature that users love the most.For my team, Gold Days was a great space to express ourselves as software engineers and create different conversations. It was a great opportunity to learn new tricks, try positively crazy stuff and break the mundane while inspiring ourselves and others.Not necessity, but curiosity is the mother of invention. Experiment.",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*ZUCMRoRvsMSr83tw",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"9885\"\u003eGoing beyond POCs, spikes, and hackathons…\u003c/h2\u003e\u003cdiv\u003e\u003ca href=\"https://attilavago.medium.com/?source=post_page-----c10a012ebd49--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Attila Vágó\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*Ilzy6aGvG__n7QzdkiL41A.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://engineering.prezi.com/?source=post_page-----c10a012ebd49--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Prezi Engineering\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*ecIYF5KMJj1G4-_pkFWy0g.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"f8f0\"\u003e\u003cspan\u003eF\u003c/span\u003eor the most part, I think that software engineers, developers, programmers, coders — call ’em whatever you like — all tend to share an important trait — curiosity. Yes, even the jaded cynics with a decades-long career behind them. Curiosity may have killed the cat, but when it comes to those of us who write code for a living, it can actually breathe life back into one’s day-to-day, be that at the office, at home or stranded in an airport while traveling around the globe writing software.\u003c/p\u003e\u003cp id=\"7dd5\"\u003eYet, as much as we all love solving problems and writing code, let’s admit that more often than not we feel like we’ve done it all before, the only variable is the context. Heck, many companies hire us exactly because we’ve done something before, we’ve done it well, and now they want us to do it for them. It’s called having experience and expertise and being appreciated for it. It’s no wonder then that the older a software engineer gets, the more you hear across the industry they’ve \u003cem\u003e“been there, done that”\u003c/em\u003e, \u003cem\u003e“it’s just another job”\u003c/em\u003e, \u003cem\u003e“there’s nothing new under the Sun”\u003c/em\u003e alongside the sigh of having to \u003cem\u003e“go back to the salt mines”\u003c/em\u003e after a well-deserved holiday or vacation.\u003c/p\u003e\u003ch2 id=\"6c30\"\u003eWhat exactly happened?\u003c/h2\u003e\u003cp id=\"07ea\"\u003eWell, one could say, life happened. \u003ca href=\"https://medium.com/p/35546bc0a27a\" rel=\"noopener\"\u003eThe day-to-day happened.\u003c/a\u003e Naturally, features need to be developed, and those features follow an endless list of other features. Frontend engineers are writing their 789th API call to some internal or 3rd-party service, the backend engineers are writing yet another… you guessed it… microservice, and so on. A sense of monotony can easily set in and even when you truly enjoy coding, sometimes you just can’t shake off the urge to experiment, to try something out that’s not on the Jira board.\u003c/p\u003e\u003cp id=\"accf\"\u003eOf course, one could argue there is always a good spike or POC to sink one’s teeth into, and should there be none, by now most software companies hold regular hackathons. \u003ca rel=\"noopener ugc nofollow\" target=\"_blank\" href=\"https://engineering.prezi.com/if-you-had-90-days-to-make-a-dent-in-the-universe-what-would-you-do-143835bfc541\"\u003eI remember joining Prezi in January 2022\u003c/a\u003e, literally \u003ca rel=\"noopener ugc nofollow\" target=\"_blank\" href=\"https://engineering.prezi.com/the-mother-of-all-web-app-features-d1725bab9e7d\"\u003estarting with a week-long hackathon\u003c/a\u003e. It was fun, I even participated, and I got to know half the company in a single fast-paced, inspiring week. But hackathons don’t happen every day and the rush of it can wear off quickly, hence the need for something else.\u003c/p\u003e\u003ch2 id=\"2fd7\"\u003eA simple, yet effective solution\u003c/h2\u003e\u003cp id=\"eb03\"\u003eBecause you see, life doesn’t just happen in a vacuum, we do have some control over it. One effective solution is perhaps to move from a full-stack developer role to an SRE position, or from frontend to backend, and while those are both very effective for getting back the excitement and a sense of newness in one’s day-to-day, it’s not the simplest of solutions organisationally speaking.\u003c/p\u003e\u003cp id=\"7730\"\u003eSo what is?\u003c/p\u003e\u003cp id=\"429c\"\u003eWhen we developed \u003ca href=\"https://marketplace.zoom.us/apps/mj3SAtlRRgmXxenmORfKag\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePrezi Video for Zoom\u003c/a\u003e, we quickly realised as a cross-functional team that beyond just our respective areas of expertise, we had a lot more to give. We found that many of our planning sessions or design syncs resulted in not just making decisions about what needs to get done next, but tangential ideas were coming from every direction, and some intriguing enough that while we couldn’t justify jumping on them as a team, we also couldn’t deny its potential value, and some of us felt really eager to at least create a demoable version of it. So how do you do that without it being on the product roadmap?\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"3533\"\u003eWhen you really believe in something, and you want to do it, you create time for it.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"275d\"\u003eAnd we called this time “Gold Days”, a refreshed concept in Prezi, where a team sets aside some time — in our case two days — every two months to allow team members to experiment around the product. And when I say experiment, I mean anything goes:\u003c/p\u003e\u003cul\u003e\u003cli id=\"d584\"\u003eDevelop and demo an entirely new feature that you really believe in.\u003c/li\u003e\u003cli id=\"23ee\"\u003eModify or improve an existing feature the way you imagine it should work.\u003c/li\u003e\u003cli id=\"1f5a\"\u003eTry out previously unexplored 3rd-party services and see what integrations might work well in the future.\u003c/li\u003e\u003cli id=\"8079\"\u003eTackle a technical challenge that was never truly solved before in the product.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"3652\"\u003eFor transparency, we tracked these experiments in a Confluence document that anyone could add ideas to. Not just our team. Everyone from the company. On the first day of Gold Days, anyone who wanted to participate from the team (it wasn\u0026#39;t compulsory), would pick one of the ideas they felt strongly about, and would commence experimenting. The expectation was that by the end of the second day there would be an output in the form of a demo, a findings document or both.\u003c/p\u003e\u003cp id=\"f5d9\"\u003eAnother important aspect of this setup was the understanding that no output was guaranteed to become part of the product. It was still product’s decision what’s worth spending more time on and what isn’t. But that was part of why Gold Days worked well for us. There was zero pressure to build something for production, but all the freedom to experiment within the product.\u003c/p\u003e\u003ch2 id=\"1215\"\u003eThe benefits of experimentation\u003c/h2\u003e\u003cp id=\"7947\"\u003eBefore I proposed reviving this concept within the team, I realised that beyond the obvious answer of \u003cem\u003e“because it’s fun”\u003c/em\u003e to the equally obvious question of \u003cem\u003e“why?”\u003c/em\u003e, there had to be other reasons to give the team the bandwidth for experimentation. Here’s just some of them:\u003c/p\u003e\u003cul\u003e\u003cli id=\"7fe0\"\u003ePeople care about their ideas, and the more we allow them to explore, the more we fulfil a natural need. Satisfying that need leads to people who feel more accomplished, even if the result doesn’t end up in the product. That idea is no more in the back of their minds, and there are no more frustrations about never having had the time to try it.\u003c/li\u003e\u003cli id=\"1327\"\u003eIt teaches lessons. Ideas on the surface can be great, but just as well prove to be unfeasible when trying to implement them. In the case of a success, one gets to learn how to get quickly from an idea to something they can demo to the team. In the case of a failure, the entire team learns about UX or technical challenges that were never considered before.\u003c/li\u003e\u003cli id=\"8882\"\u003eIt sharpens presentation and documentation writing skills, both essential for a software engineer. It’s one thing to build it, and it’s another to sell it and document it in a way that anyone can understand the benefits of the demo.\u003c/li\u003e\u003cli id=\"8f33\"\u003eIt fosters new ideas. Regardless of a demo being successful or not, seeing it rather than just having a few lines of text in a Confluence document or a fleeting comment on Slack, can start tangential conversations that can ultimately become new avenues for the product. Inspiration can come from anywhere, even a failed demo.\u003c/li\u003e\u003cli id=\"2fdf\"\u003eIn the case of a successful demo, it might just become the feature that users love the most.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"a1c6\"\u003eFor my team, Gold Days was a great space to express ourselves as software engineers and create different conversations. It was a great opportunity to learn new tricks, try positively crazy stuff and break the mundane while inspiring ourselves and others.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"d71e\"\u003eNot necessity, but curiosity is the mother of invention. Experiment.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2023-11-28T22:04:43.244Z",
  "modifiedTime": null
}
