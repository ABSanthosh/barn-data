{
  "id": "8f02319c-07cc-4d69-a03c-f72e6d1802a2",
  "title": "Compose Multiplatform 1.8.0 Released: Compose Multiplatform for iOS Is Stable and Production-Ready",
  "link": "https://blog.jetbrains.com/kotlin/2025/05/compose-multiplatform-1-8-0-released-compose-multiplatform-for-ios-is-stable-and-production-ready/",
  "description": "Today marks a major milestone in the Kotlin Multiplatform journey: the release of Compose Multiplatform 1.8.0, which brings Compose for iOS to Stable. With this update, Kotlin Multiplatform becomes a complete solution for mobile development, enabling flexible code sharing across both business logic and UI without compromising app quality or losing control over platform-specific capabilities. […]",
  "author": "Ekaterina Petrova",
  "published": "Tue, 06 May 2025 16:41:20 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": null,
  "byline": "Ekaterina Petrova",
  "length": 7428,
  "excerpt": "Kotlin Multiplatform becomes a complete solution for mobile development, enabling flexible code sharing across both business logic and UI without compromising app quality or losing control over platform-specific capabilities.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "A concise multiplatform language developed by JetBrains Compose Multiplatform 1.8.0 Released: Compose Multiplatform for iOS Is Stable and Production-Ready Today marks a major milestone in the Kotlin Multiplatform journey: the release of Compose Multiplatform 1.8.0, which brings Compose for iOS to Stable. With this update, Kotlin Multiplatform becomes a complete solution for mobile development, enabling flexible code sharing across both business logic and UI without compromising app quality or losing control over platform-specific capabilities. Everything you need to build apps for real-world use Compose Multiplatform for iOS now includes everything you need to build beautiful UIs for real-world apps: Feature parity with Jetpack Compose for all popular use cases. Type-safe navigation with deep linking support. Flexible resource management.  First-class accessibility support with VoiceOver, AssistiveTouch, and Full Keyboard Access. And more. Version 1.8.0 finalizes the core API surface and brings targeted improvements to accessibility and navigation, along with a wide range of bug fixes and performance improvements (see the details in the 1.8.0 What’s New). All major APIs are now officially stable, with strong compatibility guarantees and minimal breaking changes expected in the future. This stable foundation is backed by a rapidly growing ecosystem. Jetpack libraries are adopting multiplatform capabilities, and the community continues to contribute high-quality libraries, covering everything from architecture and dependency injection to image loading and graph rendering – all listed on klibs.io, the official Kotlin Multiplatform library catalog. With these building blocks in place, you can start developing robust, feature-rich apps today – just like the teams already shipping Compose Multiplatform apps to production. Apps that feel truly native Smooth, native behavior is what iOS users expect – and notice. Compose Multiplatform for iOS focuses on getting the details right, so apps feel familiar and responsive on the platform: Scrolling behavior that matches native iOS physics. Text editing with native selection and right-to-left support. Drag-and-drop integration with the system. Adaptive UI that respects system settings like font size and contrast. Navigation gestures that feel natural to iOS users. The Respawn iOS app is built with Compose Multiplatform, sharing 96% of its code with Android. Staying true to the core Kotlin Multiplatform philosophy, Compose Multiplatform continues to bring together the best of native and cross-platform development. The 1.8.0 release introduces further improvements to interop with SwiftUI and UIKit, allowing you to seamlessly embed Compose in an existing app or incorporate native views into a Compose screen. This approach supports gradual adoption and gives you full control over how and where you share code. Performance that’s ready for production A great user experience comes down to more than just UI behavior; it’s about performance, too. Smooth, responsive interactions are key to user satisfaction. That’s why performance was a core focus throughout this stabilization effort. With 1.8.0: Startup time is comparable to native apps, so your first frame arrives just as fast. Scrolling performance is on par with SwiftUI, even on high-refresh-rate devices. Compose Multiplatform adds only ~9 MB to the size of an iOS app compared to a fully native SwiftUI app with the same UI logic and assets. You can find the benchmark project on GitHub. A detailed description of the methodology will be published soon at KMP Development portal. And most importantly, this matches what developers are seeing in practice. According to our latest survey, over 96% of teams using Compose Multiplatform on iOS report no major performance concerns. Development tools that boost your efficiency To make building Compose Multiplatform apps faster, smoother, and more enjoyable, we’re actively improving the KMP tooling. A new KMP plugin is coming soon for both IntelliJ IDEA and Android Studio. Besides features for writing common logic, it will bring support for Compose Previews in common code, and tools for managing resources. Even more exciting: Compose Hot Reload is already available. It lets you make changes to your UI code and see the results instantly, without restarting the app or losing the current state. It intelligently reloads code as you work – making UI iteration faster and smoother than ever. Try Compose Hot Reload Production-ready and easy to adopt Compose Multiplatform for iOS now gives you the full package: stable APIs, great performance, a native feel, and modern tooling. Your users will feel right at home with the UI, while your team will notice the difference: fewer bugs, less duplicated work, and faster delivery across platforms. And best of all, you don’t need to start from scratch. Many teams — including Markaz, Wrike, Feres, and Physics Wallah — are already integrating Compose Multiplatform into large-scale apps, one screen or feature at a time. It fits into your workflow and grows with your needs. Compose Multiplatform for iOS is Stable. The ecosystem is thriving. The tools are ready. And now, we can’t wait to see the apps that you‘ll build. Get started with Compose Multiplatform Compose Multiplatform beyond mobile Compose Multiplatform for the web is also evolving rapidly. With 1.8.0, the Navigation library now supports browser back and forward buttons, making web apps feel more native. Developers can also experiment with pointer cursor customization and resource preloading APIs, which help reduce layout shifts and improve perceived performance. These updates bring Compose Multiplatform for the web one step closer to providing a polished, production-ready experience. In a few days, we’ll share more about our vision and plans for Kotlin web development in the upcoming post “The Present and Future of Kotlin for the Web.” Stay tuned. Read more Compose Multiplatform 1.8.0 – release notes on GitHub What’s new in Compose Multiplatform 1.8.0 – detailed release notes on the documentation portal Get started with Compose Multiplatform – a tutorial Compose Multiplatform and Jetpack Compose Subscribe to Kotlin Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/05/kt-social_share_blog_1280x720_en.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/kotlin/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/Kotlin-5.svg\" alt=\"Kotlin logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eA concise multiplatform language developed by JetBrains\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                                        \u003ch2 id=\"major-updates\"\u003eCompose Multiplatform 1.8.0 Released: Compose Multiplatform for iOS Is Stable and Production-Ready\u003c/h2\u003e                    \n                    \n\u003cp\u003eToday marks a major milestone in the Kotlin Multiplatform journey: the release of Compose Multiplatform 1.8.0, \u003cstrong\u003ewhich brings Compose for iOS to Stable\u003c/strong\u003e. With this update, Kotlin Multiplatform becomes a complete solution for mobile development, enabling flexible code sharing across both business logic and UI without compromising app quality or losing control over platform-specific capabilities.\u003c/p\u003e\n\n\n\n\u003ch2\u003eEverything you need to build apps for real-world use\u003c/h2\u003e\n\n\n\n\u003cp\u003eCompose Multiplatform for iOS now includes everything you need to build beautiful UIs for real-world apps:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eFeature parity with Jetpack Compose for all popular use cases.\u003c/li\u003e\n\n\n\n\u003cli\u003eType-safe navigation with deep linking support.\u003c/li\u003e\n\n\n\n\u003cli\u003eFlexible resource management. \u003c/li\u003e\n\n\n\n\u003cli\u003eFirst-class accessibility support with VoiceOver, AssistiveTouch, and Full Keyboard Access.\u003c/li\u003e\n\n\n\n\u003cli\u003eAnd more.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eVersion 1.8.0 finalizes the core API surface and brings targeted improvements to accessibility and navigation, along with a wide range of bug fixes and performance improvements (see the details in the \u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-180.html\" target=\"_blank\" rel=\"noopener\"\u003e1.8.0 What’s New\u003c/a\u003e). \u003cstrong\u003eAll major APIs are now officially stable\u003c/strong\u003e, with strong compatibility guarantees and minimal breaking changes expected in the future.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis stable foundation is backed by a rapidly growing ecosystem. Jetpack libraries are adopting multiplatform capabilities, and the community continues to contribute high-quality libraries, covering everything from architecture and dependency injection to image loading and graph rendering – all listed on \u003ca href=\"https://klibs.io\" target=\"_blank\" rel=\"noopener\"\u003eklibs.io\u003c/a\u003e, the official Kotlin Multiplatform library catalog.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith these building blocks in place, you can start developing robust, feature-rich apps today – just like the teams already shipping Compose Multiplatform apps to production.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2475\" height=\"1281\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/cmp_apps_1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eApps that feel truly native\u003c/h2\u003e\n\n\n\n\u003cp\u003eSmooth, native behavior is what iOS users expect – and notice. Compose Multiplatform for iOS focuses on getting the details right, so apps feel familiar and responsive on the platform:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eScrolling behavior that matches native iOS physics.\u003c/li\u003e\n\n\n\n\u003cli\u003eText editing with native selection and right-to-left support.\u003c/li\u003e\n\n\n\n\u003cli\u003eDrag-and-drop integration with the system.\u003c/li\u003e\n\n\n\n\u003cli\u003eAdaptive UI that respects system settings like font size and contrast.\u003c/li\u003e\n\n\n\n\u003cli\u003eNavigation gestures that feel natural to iOS users.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe title=\"Respawn iOS application, built with Compose Multiplatform\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/LB5a2FRrT94?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003cfigcaption\u003e\u003cem\u003e\u003ca href=\"http://respawn.pro/\" target=\"_blank\" rel=\"noopener\"\u003eThe Respawn\u003c/a\u003e iOS app is built with Compose Multiplatform, sharing 96% of its code with Android.\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eStaying true to the core Kotlin Multiplatform philosophy, Compose Multiplatform continues to bring together the best of native and cross-platform development. The 1.8.0 release introduces further improvements to interop with SwiftUI and UIKit, allowing you to seamlessly embed Compose in an existing app or incorporate native views into a Compose screen. This approach supports gradual adoption and gives you full control over how and where you share code.\u003c/p\u003e\n\n\n\n\u003ch2\u003ePerformance that’s ready for production\u003c/h2\u003e\n\n\n\n\u003cp\u003eA great user experience comes down to more than just UI behavior; it’s about performance, too. Smooth, responsive interactions are key to user satisfaction. That’s why performance was a core focus throughout this stabilization effort. With 1.8.0:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eStartup time is comparable to native apps, so your first frame arrives just as fast.\u003c/li\u003e\n\n\n\n\u003cli\u003eScrolling performance is on par with SwiftUI, even on high-refresh-rate devices.\u003c/li\u003e\n\n\n\n\u003cli\u003eCompose Multiplatform adds only ~9 MB to the size of an iOS app compared to a fully native SwiftUI app with the same UI logic and assets.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1600\" height=\"794\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-4.png\" alt=\"\"/\u003e\u003cfigcaption\u003eYou can find the benchmark project  \u003ca href=\"https://github.com/JetBrains/compose-multiplatform/tree/master/benchmarks/showcases/LazyGridImageView\" target=\"_blank\" rel=\"noopener\"\u003eon GitHub\u003c/a\u003e. A detailed description of the methodology will be published soon at \u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev\" target=\"_blank\" rel=\"noopener\"\u003eKMP Development portal\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnd most importantly, this matches what developers are seeing in practice. According to our latest survey, over 96% of teams using Compose Multiplatform on iOS report no major performance concerns.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1836\" height=\"806\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-3.png\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003ch2\u003eDevelopment tools that boost your efficiency\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo make building Compose Multiplatform apps faster, smoother, and more enjoyable, we’re actively improving the KMP tooling. A new KMP plugin is coming soon for both IntelliJ IDEA and Android Studio. Besides features for writing common logic, it will bring support for Compose Previews in common code, and tools for managing resources.\u003c/p\u003e\n\n\n\n\u003cp\u003eEven more exciting: \u003cstrong\u003eCompose Hot Reload is already available\u003c/strong\u003e. It lets you make changes to your UI code and see the results instantly, without restarting the app or losing the current state. It intelligently reloads code as you work – making UI iteration faster and smoother than ever.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Screen-Recording-2025-05-06-at-17.34.06.mov\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Try Compose Hot Reload\" href=\"https://github.com/JetBrains/compose-hot-reload\" target=\"_blank\" rel=\"noopener\"\u003eTry Compose Hot Reload\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eProduction-ready and easy to adopt\u003c/h2\u003e\n\n\n\n\u003cp\u003eCompose Multiplatform for iOS now gives you the full package: stable APIs, great performance, a native feel, and modern tooling. Your users will feel right at home with the UI, while your team will notice the difference: fewer bugs, less duplicated work, and faster delivery across platforms.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd best of all, you don’t need to start from scratch. Many teams — including Markaz, Wrike, Feres, and Physics Wallah — are already integrating Compose Multiplatform into large-scale apps, one screen or feature at a time. It fits into your workflow and grows with your needs.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1220\" height=\"696\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/arch.png\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eCompose Multiplatform for iOS is Stable. The ecosystem is thriving. The tools are ready. And now, we can’t wait to see the apps that you‘ll build.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Get started with Compose Multiplatform\" href=\"https://jb.gg/e03vhv\" target=\"_blank\" rel=\"noopener\"\u003eGet started with Compose Multiplatform\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eCompose Multiplatform beyond mobile\u003c/h2\u003e\n\n\n\n\u003cp\u003eCompose Multiplatform for the web is also evolving rapidly. With 1.8.0, the Navigation library now supports browser back and forward buttons, making web apps feel more native. Developers can also experiment with pointer cursor customization and resource preloading APIs, which help reduce layout shifts and improve perceived performance.\u003c/p\u003e\n\n\n\n\u003cp\u003eThese updates bring Compose Multiplatform for the web one step closer to providing a polished, production-ready experience. In a few days, we’ll share more about our vision and plans for Kotlin web development in the upcoming post “The Present and Future of Kotlin for the Web.” Stay tuned.\u003c/p\u003e\n\n\n\n\u003ch2\u003eRead more\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.8.0\" target=\"_blank\" rel=\"noopener\"\u003eCompose Multiplatform 1.8.0\u003c/a\u003e – release notes on GitHub\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-180.html\" target=\"_blank\" rel=\"noopener\"\u003eWhat’s new in Compose Multiplatform 1.8.0\u003c/a\u003e – detailed release notes on the documentation portal\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://jb.gg/e03vhv\" target=\"_blank\" rel=\"noopener\"\u003eGet started with Compose Multiplatform\u003c/a\u003e – a tutorial\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-and-jetpack-compose.html\" target=\"_blank\" rel=\"noopener\"\u003eCompose Multiplatform and Jetpack Compose\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Kotlin Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
