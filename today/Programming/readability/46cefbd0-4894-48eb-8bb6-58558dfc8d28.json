{
  "id": "46cefbd0-4894-48eb-8bb6-58558dfc8d28",
  "title": "Fixing Unreal Engine Project Issues With Qodana",
  "link": "https://blog.jetbrains.com/qodana/2025/01/unreal-engine-project-qodana/",
  "description": "If you saw our blog post about using Qodana in Unity and .NET projects, you know that we’ve been striving to explore Qodana’s potential for game development. What’s our next stop on this mission? Seeing our code quality platform in action with Unreal Engine, one of the most popular engines for different types of projects […]",
  "author": "Kerry Beetge",
  "published": "Mon, 20 Jan 2025 11:00:47 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "tutorials",
    "game-development",
    "qodana",
    "teamcity",
    "unreal-engine"
  ],
  "byline": "Kerry Beetge",
  "length": 14236,
  "excerpt": "If you saw our blog post about using Qodana in Unity and .NET projects, you know that we’ve been striving to explore Qodana’s potential for game development. What’s our next stop on this mission? Seei",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The code quality platform for teams TutorialsFixing Unreal Engine Project Issues With Qodana If you saw our blog post about using Qodana in Unity and .NET projects, you know that we’ve been striving to explore Qodana’s potential for game development. What’s our next stop on this mission? Seeing our code quality platform in action with Unreal Engine, one of the most popular engines for different types of projects – from virtual reality prototypes to triple-A games.  In this post, we’ll demonstrate how we used our static analysis tool Qodana on Lyra Starter Game, a widely known sample project from Epic Games. We chose this project for its large codebase, which provides a wider range of potential issues to identify, analyze, and fix.  The analysis and the resolution of issues were carried out by a junior developer. Our goal was to check how someone still building their game development knowledge can use Qodana to improve code and product quality.  Table of ContentsRunning Qodana from the IDESetting up the CI/CD pipelineFixing problemsQodana’s Unreal Engine analysis summarizedSwitch to Qodana for code analysis and get 25% off Running Qodana from the IDE We started by running Qodana from an IDE (Rider) to see the initial results and set up filtering. As Qodana is integrated with the most popular JetBrains IDEs, it can be easily launched directly from the Tools menu. For a better team experience, we also recommend using the JetBrains CI/CD solution, TeamCity. After setting up we will switch that on as well to set up a seamless process and quality gate.  Running Qodana in the IDE You can run Qodana in your IDE without a token, but we wanted our results to be accessible from Qodana Cloud, a cloud-based tool for Qodana reports. To upload a report to the cloud, you need a license token, which you can get from the Qodana Cloud project. We will also use the token to integrate our analysis into the CI/CD pipeline. The qodana.yaml file is created automatically and shown in the popup below.  The qodana.yaml popup You can modify this file directly in the popup window if you need to, and you can run inspections with the qodana.starter profile to check if there are any critical errors. Once you run it, the file will be saved in the project root. We wanted to use a custom profile, so we modified this file to reference the custom profile.yaml. In the qodana.yaml file, we left a link to the profile. QDNET is a linter based on the Rider distribution and designed to work with Unreal Engine projects. version: \"1.0\" #Specify IDE code to run analysis without container (Applied in CI/CD pipeline) ide: QDNET #Specify inspection profile for code analysis profile: path: profile.yaml qodana.yaml In the profile.yaml file, we changed the profile to the more extensive qodana.recommended and identified scope to be excluded from the analysis. We wanted to analyze only the project codebase, without Unreal Engine or plugin sources. baseProfile: \"qodana.recommended\" name: \"UnrealEngine\" inspections: - group: ALL ignore: - \"scope#!file:Source/LyraGame//*\" profile.yaml These changes provided a relatively comprehensive analysis report.  We then linked our project to Qodana Cloud.   Linking the project to Qodana Cloud This will allow us to access future reports withinin the IDE and view problems locally. The report in the IDE Setting up the CI/CD pipeline We already had a CI/CD pipeline in TeamCity, which we used to build the project every time we pushed changes to the main branch. There are several ways to complete the build. One such method is with the Unreal Engine plugin for TeamCity which can be downloaded from JetBrains Marketplace. You don’t have to run the build before running Qodana, but it is convenient to put it in the same pipeline. This allows TeamCity to mark the build as Failed if Qodana finds any issues. To run the Qodana analysis, we added a PowerShell step that loaded and ran our Qodana CLI tool. We opted for the latest AMD64-compatible version and assets for our agents. If you are working with a different operating system and architecture, you will have to choose the assets designed for them.  Before implementing this in any project, you should discuss the security implications with the people responsible for this in your organization. Downloading a third-party binary without checking its integrity and checksum can be risky. You may need to save a fixed version of the binary yourself or verify the checksum of the downloaded distribution.  Invoke-WebRequest -Uri \"https://github.com/JetBrains/qodana-cli/releases/download/%VERSION%/qodana_windows_x86_64.exe\" -OutFile \"qodana_windows_x86_64.exe\" ./qodana_windows_x86_64.exe scan --ide QDNET PowerShell build step The linter requires a Qodana token, a value from the project page on Qodana Cloud. To pass the token through the pipeline, we added the QODANA_TOKEN environment variable with the Password value type to ensure the token remains secure. Then, in the same way, we added the desired version of Qodana CLI as a configuration parameter. Fixing problems For this Unreal Engine project, we were particularly interested in issues specific to projects created with the game engine. We used filters on Qodana Сloud to show only these problems. Unreal Engine problems Qodana’s sunburst diagram provides a convenient visualization of the detected issues, as well as an easy way to navigate to them. In our case, we could see there were seven types of problems, some of which could be resolved using context actions: BlueprintCallable function can be made const BlueprintCallable function can be made static Use of a class that has not been declared previously To quickly navigate to these issues in the IDE, we can click on the Open file in Rider button.Please note: to get this functionality to work you have to install JetBrains Toolbox on your computer. Example of a problem in Qodana Cloud After opening the file in the IDE, we resolved this problem using the relevant quick-fix with a context action. Example of a problem in the IDE You can also navigate by opening a report locally in the IDE and going through the list of problems grouped there by type, fixing them one by one. As you fix problems in the IDE, the number of issues detected will decrease. We decided not to fix problems like BlueprintCallable function is never used in Blueprint or C++ code, as the Lyra project is considered learning material, and it’s actively maintained. The project contains methods that are not currently being used but may be in the future.  Additionally, we decided not to fix inconsistent Unreal Engine naming problems because the project uses a different naming convention, where upper case is used for all abbreviations. Example of a naming problem in the IDE To deactivate these inspections, we added their inspection IDs to profile.yaml and set the enabled property to false, ensuring these types of problems will no longer be shown in reports. The problem ID can be found in the qodana.sarif.json file. Next, we moved to C++ problems. We decided to only fix the problems that were categorized as higher than moderate severity, as most low-level issues could be fixed with quick-fixes. We excluded the non-critical issues by changing the profile.yaml file. baseProfile: \"qodana.recommended\" name: \"UnrealEngine\" inspections: - group: ALL ignore: - \"scope#!file:Source/LyraGame//*\" - group: \"severity:TYPO\" enabled: false - inspection: \"CppUE4CodingStandardNamingViolationWarning\" enabled: false - inspection: \"CppUEBlueprintCallableFunctionUnused\" enabled: false profile.yaml This produced a report with less than a thousand problems. To experiment with different filtering strategies, we used separate branches for each YAML file. This allowed us to divide the problems into groups based on type, tackling each type in a separate branch with different settings and then merging the branches. Low-severity C++ problems excluded Even without the low-level results, we saw many types of problems that were not in the Unreal Engine category.  In total, our team fixed 822 of 937 problems from the categories we examined next. As you can see below, the most common problems fell into the Common Practices and Code Improvements category and included issues like variables that could be made const or static. We resolved most of them with quick-fixes. We left problems like Function is not implemented, as they could be fixed in future development. We decided not to fix some of the problems, as the changes required to mitigate them would make the project uncompilable and in need of further refactoring. Problems classified as Common Practices and Code Improvements As a result, we were left with only 26 problems in the Common Practices and Code Improvements category, which we could deal with later.  Remaining problems classified as Common Practices and Code Improvements Up next were potential code quality issues. From this category, we fixed problems where we needed to remove unused declarators or directives. We then moved to redundancies in code, most of which were resolved easily with a quick-fix. We did not address any problems where developers left comments with their plans or TODOs because we assumed that these problems would be fixed with future changes. Example of a TODO Last but not least, the Syntax Style category contained only two types of problems, both of which concerned the use of virtual and override specifiers when overriding functions. We fixed all of them by adding the missing specifiers. Syntax Style problems We were left with 123 unresolved problems, either due to ongoing development or the lack of a feasible solution. We moved these issues to the baseline. To apply the baseline, we downloaded the baseline file and stored it in the repository. Selecting problems Downloading the baseline file Then, by adding the –baseline parameter and path to the file, we adjusted the pipeline to include the baseline in future analyses. Invoke-WebRequest -Uri \"https://github.com/JetBrains/qodana-cli/releases/download/%VERSION%/qodana_windows_x86_64.exe\" -OutFile \"qodana_windows_x86_64.exe\" ./qodana_windows_x86_64.exe scan --ide QDNET --baseline qodana.sarif.json PowerShell build step And finally, we had a flawless report. If our team decided to continue working on this project, we could fix new problems as they appeared or we could focus on eliminating problems from the baseline, depending on our priorities. We set up a quality gate to enforce the standards we had achieved with these efforts, and we added a several failureConditions section to qodana.yaml to configure additional quality gates for the total number of problems, as well as the numbers of critical and high-severity issues. Going forward, if any of these limits are exceeded, the build will fail. failureConditions: severityThresholds: any: 10 # Total problems critical: 0 # Critical and other severities high: 5 Added qodana.yaml configuration We also adjusted the execution of qodana-cli to consider exit code, failing the build if the result fails the quality gates. By failing builds that don’t meet our quality criteria, we can identify and address issues immediately. Invoke-WebRequest -Uri \"https://github.com/JetBrains/qodana-cli/releases/download/%VERSION%/qodana_windows_x86_64.exe\" -OutFile \"qodana_windows_x86_64.exe\" ./qodana_windows_x86_64.exe scan --ide QDNET # Capture the exit code of the command $exitCode = $LASTEXITCODE # Print the exit code Write-Output \"Exit code: $exitCode\" # Exit the script with the same exit code exit $exitCode PowerShell build step A failed build in TeamCity Qodana’s Unreal Engine analysis summarized We successfully analyzed the Lyra project, got a detailed report, and fixed more than 800 problems. While conducting professional reviews will likely require a deeper understanding of Unreal Engine, Qodana’s analysis still helped a single junior developer clean up the code and make it more concise.  For large-scale projects like Lyra, Qodana can effectively highlight and prioritize critical code issues that may be overlooked in manual reviews. Since Lyra is a private repo, we can’t share the outcome, but we hope we’ve shown you how this process could work for your team and what kind of results it can deliver. If you’d like more information, visit our website, view Qodana’s features, or try it in your next game development project.  Switch to Qodana for code analysis and get 25% off Qodana gets better with every release and provides a cost-effective way for teams to build confidence in code quality.  With this in mind, we’re offering you 25% off your first year of Qodana if you switch from a comparable commercial solution. Click on the button below to speak to our team.  Switch To Qodana Thank you to Software Developer Ekaterina Trukhan for her contribution to this analysis.  Subscribe to Qodana Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/01/qd-social_share_blog_1280x720_en-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/qodana/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2021/07/Qodana-1.svg\" alt=\"Qodana logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe code quality platform for teams\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/qodana/category/tutorials/\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eFixing Unreal Engine Project Issues With Qodana\u003c/h2\u003e                    \n                    \n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2560\" height=\"1440\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/01/qd-featured_blog_1280x720_en-5.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf you saw our blog post about using \u003ca href=\"https://blog.jetbrains.com/qodana/2024/01/new-improve-team-code-quality-in-unity-and-net-projects-with-qodana/\"\u003eQodana in Unity and .NET projects\u003c/a\u003e, you know that we’ve been striving to explore Qodana’s potential for game development. What’s our next stop on this mission? Seeing our code quality platform in action with \u003ca href=\"https://www.unrealengine.com\" target=\"_blank\" rel=\"noopener\"\u003eUnreal Engine\u003c/a\u003e, one of the most popular engines for different types of projects – from virtual reality prototypes to triple-A games. \u003c/p\u003e\n\n\n\n\u003cp\u003eIn this post, we’ll demonstrate how we used our static analysis tool Qodana on \u003ca href=\"https://www.unrealengine.com/marketplace/learn/lyra\" target=\"_blank\" rel=\"noopener\"\u003eLyra Starter Game\u003c/a\u003e, a widely known sample project from Epic Games. We chose this project for its large codebase, which provides a wider range of potential issues to identify, analyze, and fix. \u003c/p\u003e\n\n\n\n\u003cp\u003eThe analysis and the resolution of issues were carried out by a junior developer. Our goal was to check how someone still building their game development knowledge can use Qodana to improve code and product quality. \u003c/p\u003e\n\n\n\n\u003cdiv id=\"rank-math-toc\" id=\"rank-math-toc\"\u003e\u003ch2\u003eTable of Contents\u003c/h2\u003e\u003cnav\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#running-qodana-from-the-ide\"\u003eRunning Qodana from the IDE\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#setting-up-the-ci-cd-pipeline\"\u003eSetting up the CI/CD pipeline\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#fixing-problems\"\u003eFixing problems\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#qodanas-unreal-engine-analysis-summarized\"\u003eQodana’s Unreal Engine analysis summarized\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#switch-to-qodana-for-code-analysis-and-get-25-off\"\u003eSwitch to Qodana for code analysis and get 25% off\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\n\n\n\u003ch2 id=\"running-qodana-from-the-ide\"\u003eRunning Qodana from the IDE\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe started by \u003ca href=\"https://www.jetbrains.com/help/qodana/quick-start.html\" target=\"_blank\" rel=\"noopener\"\u003erunning Qodana from an IDE\u003c/a\u003e (Rider) to see the initial results and set up filtering. As Qodana is integrated with the most popular JetBrains IDEs, it can be easily launched directly from the \u003cem\u003eTools\u003c/em\u003e menu. For a better team experience, we also recommend using the JetBrains CI/CD solution, TeamCity. After setting up we will switch that on as well to set up a seamless process and quality gate.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdEt-Nfyo6qMaah211mz1Gwe7aEWajoRyPESCL3cgbKpF4fy8nm83pSv_gdurQRGpQyBJ_MDE9CZ6iRxeWphGKzaoEbgQVbWA7YwtsMhqMiaQggNlM23Y1WwTdCSm0mRN2n_HZp2Qgg0QMT6XfQ4l3oQag?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\" Running Qodana in the IDE\"/\u003e\u003cfigcaption\u003e Running Qodana in the IDE\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can run Qodana in your IDE without a token, but we wanted our results to be accessible from \u003ca href=\"https://qodana.cloud/\" target=\"_blank\" rel=\"noopener\"\u003eQodana Cloud\u003c/a\u003e, a cloud-based tool for Qodana reports. To upload a report to the cloud, you need a license token, which you can get from the \u003ca href=\"https://www.jetbrains.com/help/qodana/cloud-projects.html\" target=\"_blank\" rel=\"noopener\"\u003eQodana Cloud project\u003c/a\u003e. We will also use the token to integrate our analysis into the CI/CD pipeline.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe qodana.yaml file is created automatically and shown in the popup below. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXf8BG5AR8GRsxqeKwpi8y4MU4aea-pBTwfjqPi0kc2GEgwBzeWVHjbt0h2mTgA905Eydx27i-roc8pYWOKp0wpFpIbAl2pwvC9LusdblJhsjv14aIYrhGT9o9ED8KmpXX0vgWhIb6MDxJ8xChmT4NXYdw?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"The qodana.yaml popup\"/\u003e\u003cfigcaption\u003e\u003cem\u003eT\u003c/em\u003ehe qodana.yaml popup\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can modify this file directly in the popup window if you need to, and you can run inspections with the\u003cstrong\u003e \u003c/strong\u003eqodana.starter\u003cstrong\u003e \u003c/strong\u003eprofile to check if there are any critical errors. Once you run it, the file will be saved in the project root. We wanted to use a custom profile, so we modified this file to reference the custom profile.yaml.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the qodana.yaml \u003ca href=\"https://www.jetbrains.com/help/qodana/qodana-yaml.html\" target=\"_blank\" rel=\"noopener\"\u003efile\u003c/a\u003e, we left a link to the profile. QDNET is a linter based on the Rider distribution and designed to work with Unreal Engine projects.\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eversion: \u0026#34;1.0\u0026#34;\n\n#Specify IDE code to run analysis without container (Applied in CI/CD pipeline)\nide: QDNET\n\n#Specify inspection profile for code analysis\nprofile:\n  path: profile.yaml\u003c/pre\u003e\n\n\n\n\u003cp\u003eqodana.yaml\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the profile.yaml \u003ca href=\"https://www.jetbrains.com/help/qodana/custom-profiles.html\" target=\"_blank\" rel=\"noopener\"\u003efile\u003c/a\u003e, we changed the profile to the more extensive qodana.recommended and identified scope to be excluded from the analysis. We wanted to analyze only the project codebase, without Unreal Engine or plugin sources.\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003ebaseProfile: \u0026#34;qodana.recommended\u0026#34;\nname: \u0026#34;UnrealEngine\u0026#34;\n\ninspections:\n  - group: ALL\n    ignore:\n      - \u0026#34;scope#!file:Source/LyraGame//*\u0026#34;\u003c/pre\u003e\n\n\n\n\u003cp\u003eprofile.yaml\u003c/p\u003e\n\n\n\n\u003cp\u003eThese changes provided a relatively comprehensive analysis report.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cimg decoding=\"async\" width=\"856\" height=\"521\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXf5LpMoBPuKJzva_JO2TNVDh2NS4lDAL6vkwnxQvnr6Bg_5I-iWui8ph9gsR4o_lH1lxb2pIa93gvoYgpwMCVpE1CT8ZolB8M_MiH-Enp4UFIOT1yafL6_MKcbzECkFqx72mbB3Pm6pJEho3VXMKX8Tbg?key=S9b9SXPJZlN2xMPLYjUjeA\"/\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003e \u003c/em\u003eWe then linked our project to Qodana Cloud. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcYT9rZvU4jfrD68cgj0ZMoU_vrGDLlIGdgE2-V_loaC80XXZR1xQUUsmnJTUEtet4BY6PLBwd3tke_lteHtNEDZHNlwkF11wEXI2Kzsz9Tdn1WrxP6cr2IcyThDrLBX_qoUYCd2JqbQNVigehMYy0uEA?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\" Linking the project to Qodana Cloud\"/\u003e\u003cfigcaption\u003e\u003cem\u003e Linking the project to Qodana Cloud\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis will allow us to access future reports withinin the IDE and view problems locally.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfxKBvJJWQBIs-1zpKHFWB2aiW44jyQhdJWWl2aj14aozs1t0SGZjOD8HyagLcR6Xy8n-M7ok0bLdVzFn7KEu-A53Z8FkseAUWPeFR1odls2mb2WRK7zi_CH_iAnjj7WypcLA7oRC-e3zzERJRXqZ1gAQ?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"The report in the IDE\"/\u003e\u003cfigcaption\u003e\u003cem\u003eThe report in the IDE\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"setting-up-the-ci-cd-pipeline\"\u003eSetting up the CI/CD pipeline\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe already had a CI/CD pipeline in \u003ca href=\"https://www.jetbrains.com/teamcity/\" target=\"_blank\" rel=\"noopener\"\u003eTeamCity\u003c/a\u003e, which we used to build the project every time we pushed changes to the main branch. There are several ways to complete the build. One such method is with the \u003ca href=\"https://blog.jetbrains.com/teamcity/2024/05/unreal-engine-plugin-for-teamcity/#try-it-out\"\u003eUnreal Engine plugin\u003c/a\u003e for TeamCity which can be downloaded from JetBrains Marketplace. You don’t have to run the build before running Qodana, but it is convenient to put it in the same pipeline. This allows TeamCity to mark the build as \u003cem\u003eFailed\u003c/em\u003e if Qodana finds any issues.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo run the Qodana analysis, we added a PowerShell step that loaded and ran our \u003ca href=\"https://github.com/JetBrains/qodana-cli\" target=\"_blank\" rel=\"noopener\"\u003eQodana CLI\u003c/a\u003e tool. We opted for the latest AMD64-compatible version and assets for our agents. If you are working with a different operating system and architecture, you will have to choose the assets designed for them. \u003c/p\u003e\n\n\n\n\u003cp\u003eBefore implementing this in any project, you should discuss the security implications with the people responsible for this in your organization. Downloading a third-party binary without checking its integrity and checksum can be risky. You may need to save a fixed version of the binary yourself or verify the checksum of the downloaded distribution. \u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"powershell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eInvoke-WebRequest -Uri \u0026#34;https://github.com/JetBrains/qodana-cli/releases/download/%VERSION%/qodana_windows_x86_64.exe\u0026#34; -OutFile \u0026#34;qodana_windows_x86_64.exe\u0026#34; \n\n./qodana_windows_x86_64.exe scan --ide QDNET\u003c/pre\u003e\n\n\n\n\u003cp\u003ePowerShell build step\u003c/p\u003e\n\n\n\n\u003cp\u003eThe linter requires a \u003ca href=\"https://www.jetbrains.com/help/qodana/cloud-projects.html#cloud-manage-projects\" target=\"_blank\" rel=\"noopener\"\u003eQodana token\u003c/a\u003e, a value from the project page on Qodana Cloud. To pass the token through the pipeline, we added the QODANA_TOKEN environment variable with the \u003cem\u003ePassword\u003c/em\u003e value type to ensure the token remains secure.\u003c/p\u003e\n\n\n\n\u003cp\u003eThen, in the same way, we added the desired version of Qodana CLI as a configuration parameter.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXc-LfQ5Fptyx9UB3IdiW0WQaNdapLolrPnaJ8N3cum98sZMoS_C6f6PeQ8S-Em51EfQJ2_6fBejCd-xMNIKMxeSojst8RkCdVS2l84YcTPqzpy1P4eFMZBOrFaPOchTJipJjMW82yC7ZKy65oRNNmJ1W30?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"fixing-problems\"\u003eFixing problems\u003c/h2\u003e\n\n\n\n\u003cp\u003eFor this Unreal Engine project, we were particularly interested in issues specific to projects created with the game engine. We used filters on Qodana Сloud to show only these problems.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXf5LpMoBPuKJzva_JO2TNVDh2NS4lDAL6vkwnxQvnr6Bg_5I-iWui8ph9gsR4o_lH1lxb2pIa93gvoYgpwMCVpE1CT8ZolB8M_MiH-Enp4UFIOT1yafL6_MKcbzECkFqx72mbB3Pm6pJEho3VXMKX8Tbg?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Analyzing an Unreal Engine project\"/\u003e\u003cfigcaption\u003e\u003cem\u003eUnreal Engine problems\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eQodana’s sunburst diagram provides a convenient visualization of the detected issues, as well as an easy way to navigate to them. In our case, we could see there were seven types of problems, some of which could be resolved using \u003ca href=\"https://www.jetbrains.com/help/rider/Coding_Assistance__Context_Actions.html#apply-context-actions\" target=\"_blank\" rel=\"noopener\"\u003econtext actions\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eBlueprintCallable\u003c/em\u003e\u003cem\u003e function can be made \u003c/em\u003e\u003cem\u003econst\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eBlueprintCallable\u003c/em\u003e\u003cem\u003e function can be made \u003c/em\u003e\u003cem\u003estatic\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eUse of a class that has not been declared previously\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eTo quickly navigate to these issues in the IDE, we can click on the \u003cem\u003eOpen file in Rider\u003c/em\u003e button.\u003c/p\u003e\u003cp\u003ePlease note: to get this functionality to work you have to install JetBrains Toolbox on your computer. \u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXclvhgZc0i72iUD3m6Zpll9QJBkdwE7hRey20dpZT255dvYpcIfAZGWL1E54jiNnh_YSOu3fIf6py7R4j-_p5x2vlTkikD9SDMmJFm92Fa84t_2J_v9FsqgF_49i25M2GNoMLJxSGRctbokIviRGNirkQ0?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Example of a problem in Qodana Cloud\"/\u003e\u003cfigcaption\u003e\u003cem\u003eExample of a problem in Qodana Cloud\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAfter opening the file in the IDE, we resolved this problem using the relevant quick-fix with a context action.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcSCkWoEOZlt9i4Y26Hqc23tnXpFi5wysiQD9vxfMXiYxVhDcJPBE2KcpEVvUjSV1BrLEHn1d3u-tkDgjMKEvd_fM0b5xnxYYeA5QvTmdC3Bi_FBtZHjdyZl3euzdFSG_GoNSP_KJ8o9bcYGytbKYwoJwg?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Example of a problem in the IDE\"/\u003e\u003cfigcaption\u003e\u003cem\u003eExample of a problem in the IDE\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can also navigate by opening a report locally in the IDE and going through the list of problems grouped there by type, fixing them one by one. As you fix problems in the IDE, the number of issues detected will decrease.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXej8LzQJlTFFjUbWPE5Os6Zia1tmkN1n4QDe9xM0A8j0t3MioSHA63LItyGRqKLYI26FpkEz2YuxDxwoixfcPvaPV4I-q-ZTo_zogiOAqXervHv63JkTjjT0OcqggBSu6DwuOwBm_C37VQQddbHnePw7w?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe decided not to fix problems like \u003cem\u003eBlueprintCallable\u003c/em\u003e\u003cem\u003e function is never used in Blueprint or C++ code\u003c/em\u003e, as the Lyra project is considered learning material, and it’s actively maintained. The project contains methods that are not currently being used but may be in the future. \u003c/p\u003e\n\n\n\n\u003cp\u003eAdditionally, we decided not to fix inconsistent Unreal Engine naming problems because the project uses a different naming convention, where upper case is used for all abbreviations.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeAgpDvmZCIGCi0YxGGcc3KBQehBBLE245zuTf5SnSs8esMdfvPou7xjBvclMUbieUUg0SAGFA9vgYjzp5mccUkzTTL4tfSS5YztvA7bsqxmXLGPJ42hacsV79T6I1mYJA2tx2tp20PVMH2BK01fmhYMEs?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Example of a naming problem in the IDE\"/\u003e\u003cfigcaption\u003e\u003cem\u003eExample of a naming problem in the IDE\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTo \u003ca href=\"https://www.jetbrains.com/help/qodana/override-a-profile.html#Exclude+a+specific+inspection\" target=\"_blank\" rel=\"noopener\"\u003edeactivate these inspections\u003c/a\u003e, we added their inspection IDs to\u003cstrong\u003e \u003c/strong\u003eprofile.yaml and set the enabled property to false, ensuring these types of problems will no longer be shown in reports. The problem ID can be found in the qodana.sarif.json file.\u003c/p\u003e\n\n\n\n\u003cp\u003eNext, we moved to C++ problems. We decided to only fix the problems that were categorized as higher than moderate severity, as most low-level issues could be fixed with quick-fixes. We excluded the non-critical issues by changing the profile.yaml \u003ca href=\"https://www.jetbrains.com/help/qodana/custom-profiles.html\" target=\"_blank\" rel=\"noopener\"\u003efile\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003ebaseProfile: \u0026#34;qodana.recommended\u0026#34;\nname: \u0026#34;UnrealEngine\u0026#34;\n\ninspections:\n - group: ALL\n   ignore:\n     - \u0026#34;scope#!file:Source/LyraGame//*\u0026#34;\n - group: \u0026#34;severity:TYPO\u0026#34;\n   enabled: false\n - inspection: \u0026#34;CppUE4CodingStandardNamingViolationWarning\u0026#34;\n   enabled: false\n - inspection: \u0026#34;CppUEBlueprintCallableFunctionUnused\u0026#34;\n   enabled: false\u003c/pre\u003e\n\n\n\n\u003cp\u003eprofile.yaml\u003c/p\u003e\n\n\n\n\u003cp\u003eThis produced a report with less than a thousand problems. To experiment with different filtering strategies, we used separate branches for each YAML file. This allowed us to divide the problems into groups based on type, tackling each type in a separate branch with different settings and then merging the branches.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeGKlXC7I069tFmLWAeBIqJe8EYzXUgAfYipCLJIDZPB3uzMj8xfJvyVh7eSSw7Ubw60HHQIUTUNRANzbdl-6I4mSiHU0Un07hVQT5tplIPqzxeK9KjBKTvIwRe2YaTG2LsEkBTMl0QcrxY-nnVco6KPlg?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Low-severity C++ problems excluded\"/\u003e\u003cfigcaption\u003e\u003cem\u003eLow-severity C++ problems excluded\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eEven without the low-level results, we saw many types of problems that were not in the Unreal Engine category. \u003c/p\u003e\n\n\n\n\u003cp\u003eIn total, our team fixed 822 of 937 problems from the categories we examined next.\u003c/p\u003e\n\n\n\n\u003cp\u003eAs you can see below, the most common problems fell into the C\u003cem\u003eommon Practices and Code Improvements\u003c/em\u003e category and included issues like variables that could be made const or static. We resolved most of them with quick-fixes. We left problems like \u003cem\u003eFunction is not implemented,\u003c/em\u003e as they could be fixed in future development. We decided not to fix some of the problems, as the changes required to mitigate them would make the project uncompilable and in need of further refactoring.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcYcKEnOkerG88rWQonC3As2S3d10xip4MRj0Q66hpuTnoojUyGpLSZjPblb22XHUH-OtC6vgST3p7fAGoK1cMn6uPIUvUIZGbeOGr0LFEmKOKBFyLREiGaTfr7DSKpqSUQRibYRolVWr5hgHMJ54A66A?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Problems classified as Common Practices and Code Improvements\"/\u003e\u003cfigcaption\u003e\u003cem\u003eProblems classified as \u003c/em\u003eCommon Practices and Code Improvements\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAs a result, we were left with only 26 problems in the \u003cem\u003eCommon Practices and Code Improvements\u003c/em\u003e category, which we could deal with later. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXc6Dx2FVJ5EWn8Y7eBi0S994vlKkqKvQXlim3rJBDw4BQoCEw4gF9Ve24do45s_H7-FkRKeu7orTVZm5LBOEE1wh-DJyZi_MvNwntv8yRkD5BlLvagrpNGG21SpkHQKqaTJpnTINm_7GQcTz3B9cPUXA2c?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Remaining problems classified as Common Practices and Code Improvements\"/\u003e\u003cfigcaption\u003e\u003cem\u003eRemaining problems classified as \u003c/em\u003eCommon Practices and Code Improvements\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eUp next were potential code quality issues. From this category, we fixed problems where we needed to remove unused declarators or directives. We then moved to redundancies in code, most of which were resolved easily with a quick-fix. We did not address any problems where developers left comments with their plans or TODOs because we assumed that these problems would be fixed with future changes.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeWi0iiVWaTwqula4oazqMmKWMPRRK7ee6jinu_4LZ41ZIdbpOrBbqwK9p6bkAioQWDlOZNTp-HiXE8LowZhBLX1pDPdxMGTDEpzsSMRUUfbVd0bApgeL9bdsoojkn1PLbsuOqKXm7bL75fTmelpzhrhbI?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Example of a TODO\"/\u003e\u003cfigcaption\u003e\u003cem\u003eExample of a TODO\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eLast but not least, the S\u003cem\u003eyntax Style\u003c/em\u003e category contained only two types of problems, both of which concerned the use of virtual and override specifiers when overriding functions. We fixed all of them by adding the missing specifiers.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXccmwGgEJzn8ZcqZZWMssE-cLVUf5qRvNkeWfZ6Xex8plKElzLZmnP_2Lf6RrVqSYsW7TL9mes4c5AtROvzOa3xXJCaoU5XfKSvnTQN5quSQ5tGC8Om8oIvG4AQGbKdSlNQBbnzmVCoP-UimUpDVbc2F-M?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Syntax Style problems\"/\u003e\u003cfigcaption\u003eSyntax Style\u003cem\u003e problems\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe were left with 123 unresolved problems, either due to ongoing development or the lack of a feasible solution. We moved these issues to the \u003ca href=\"https://www.jetbrains.com/help/qodana/baseline.html\" target=\"_blank\" rel=\"noopener\"\u003ebaseline\u003c/a\u003e. To apply the baseline, we downloaded the baseline file and stored it in the repository.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdhHDbEbDNtSqnhYBBQoACWcKtRs8_3_h8nmk9B8nDLCyBtWl2syA71icgobciVz6cmPdgM1-nguV9B8f810wa7Y8VZf_PJqOY7YCzIVVL5G-x7B-zETBu2DPwDEOPMS3Z4hF0RSdyUCdifRz9ul92P7XY?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Selecting problems\"/\u003e\u003cfigcaption\u003e\u003cem\u003eSelecting problems\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdfyMdsJh_GsBHeOQxGm8A9_-rGQTmYSc4UEzvVKTcdy6Tq1ialIf10FvOXxYfa_uI7vlItDfIZbQHkE0Kbl9qORafcRH-vYc89A2AIHqooa-U7rbwju06QWJKGjNnu7p_XK6CHKCI-fN8egJwE2sVOm2U?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"Downloading the baseline file\"/\u003e\u003cfigcaption\u003e\u003cem\u003eDownloading the baseline file\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThen, by adding the –baseline parameter and path to the file, we adjusted the pipeline to include the baseline in future analyses.\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"powershell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eInvoke-WebRequest -Uri \u0026#34;https://github.com/JetBrains/qodana-cli/releases/download/%VERSION%/qodana_windows_x86_64.exe\u0026#34; -OutFile \u0026#34;qodana_windows_x86_64.exe\u0026#34; \n./qodana_windows_x86_64.exe scan --ide QDNET --baseline qodana.sarif.json\u003c/pre\u003e\n\n\n\n\u003cp\u003ePowerShell build step\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd finally, we had a flawless report.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXf9wGy5sCEQ1S1rMTf0ZN-eIFonnPo22WTQC_3bFsVSippChSz9GNXLD6YJqcDM-HWqR_g5VjrXhmIE5ZzD7t_aDzX0l-FWQrR6H_CFnvHlaCBWJ8AlKTZ8xuHENNxlpqbKFIUG1H8JT8mnwd3Gre3Yiw?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf our team decided to continue working on this project, we could fix new problems as they appeared or we could focus on eliminating problems from the baseline, depending on our priorities.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe set up a \u003ca href=\"https://www.jetbrains.com/help/qodana/quality-gate.html#quality-gate-severity-threshold\" target=\"_blank\" rel=\"noopener\"\u003equality gate\u003c/a\u003e to enforce the standards we had achieved with these efforts, and we added a several failureConditions section to qodana.yaml\u003cstrong\u003e \u003c/strong\u003eto configure additional quality gates for the total number of problems, as well as the numbers of critical and high-severity issues. Going forward, if any of these limits are exceeded, the build will fail.\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003efailureConditions:\n  severityThresholds:\n    any: 10 # Total problems\n    critical: 0 # Critical and other severities\n    high: 5\n\u003c/pre\u003e\n\n\n\n\u003cp\u003eAdded qodana.yaml configuration\u003c/p\u003e\n\n\n\n\u003cp\u003eWe also adjusted the execution of qodana-cli to consider exit code, failing the build if the result fails the quality gates. By failing builds that don’t meet our quality criteria, we can identify and address issues immediately.\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"powershell\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003eInvoke-WebRequest -Uri \u0026#34;https://github.com/JetBrains/qodana-cli/releases/download/%VERSION%/qodana_windows_x86_64.exe\u0026#34; -OutFile \u0026#34;qodana_windows_x86_64.exe\u0026#34; \n./qodana_windows_x86_64.exe scan --ide QDNET \n\n# Capture the exit code of the command\n$exitCode = $LASTEXITCODE\n\n# Print the exit code\nWrite-Output \u0026#34;Exit code: $exitCode\u0026#34;\n\n# Exit the script with the same exit code\nexit $exitCode\u003c/pre\u003e\n\n\n\n\u003cp\u003ePowerShell build step\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXddDCIwT1B55BLN9PKLf_BPoMJR97466cYhplP2vmiJ3LSKI4u7-OkbNYCgLbOO6_mR-KdQv4TCSGw4HpNUSwVa234VWJpmsX04eg3t4q2PRYXQPzQ7bYnShp_Gs3Rx2cGitLP9IBAoSVc2ibumB7DnhEo?key=S9b9SXPJZlN2xMPLYjUjeA\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eA failed build in TeamCity\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"qodanas-unreal-engine-analysis-summarized\"\u003eQodana’s Unreal Engine analysis summarized\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe successfully analyzed the Lyra project, got a detailed report, and fixed more than 800 problems. While conducting professional reviews will likely require a deeper understanding of Unreal Engine, Qodana’s analysis still helped a single junior developer clean up the code and make it more concise. \u003c/p\u003e\n\n\n\n\u003cp\u003eFor large-scale projects like Lyra, Qodana can effectively highlight and prioritize critical code issues that may be overlooked in manual reviews.\u003c/p\u003e\n\n\n\n\u003cp\u003eSince Lyra is a private repo, we can’t share the outcome, but we hope we’ve shown you how this process could work for your team and what kind of results it can deliver.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you’d like more information, \u003ca href=\"http://www.qodana.com\" target=\"_blank\" rel=\"noopener\"\u003evisit our website\u003c/a\u003e, view \u003ca href=\"https://www.jetbrains.com/qodana/features/\" target=\"_blank\" rel=\"noopener\"\u003eQodana’s features\u003c/a\u003e, or try it in your next game development project. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"switch-to-qodana-for-code-analysis-and-get-25-off\"\u003e\u003cstrong\u003eSwitch to Qodana for code analysis and get 25% off\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eQodana gets better with every release and provides a cost-effective way for teams to build confidence in code quality. \u003c/p\u003e\n\n\n\n\u003cp\u003eWith this in mind, we’re offering you 25% off your first year of Qodana if you switch from a comparable commercial solution. Click on the button below to speak to our team. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Switch To Qodana\" href=\"https://www.jetbrains.com/support/sales/#email-sales\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://www.jetbrains.com/support/sales/#email-sales\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eSwitch To Qodana\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eThank you to Software Developer \u003ca href=\"https://www.linkedin.com/in/ekaterina-trukhan/\" target=\"_blank\" rel=\"noopener\"\u003eEkaterina Trukhan\u003c/a\u003e for her contribution to this analysis. \u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Qodana Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": null,
  "modifiedTime": null
}
