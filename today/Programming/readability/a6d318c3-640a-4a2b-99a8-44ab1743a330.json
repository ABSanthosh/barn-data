{
  "id": "a6d318c3-640a-4a2b-99a8-44ab1743a330",
  "title": "Upgrading a 20 year old University Project to .NET 6 with dotnet-upgrade-assistant",
  "link": "http://feeds.hanselman.com/~/673659136/0/scotthanselman~Upgrading-a-year-old-University-Project-to-NET-with-dotnetupgradeassistant",
  "description": "I wrote a Tiny Virtual Operating System for a 300-level OS class in C# for college back in 2001 (?) and later moved it to VB.NET in 2002. This is all pre-.NET Core, and on early .NET 1.1 or 2.0 on Windows. I moved it to GitHub 5 years ago and ported it to .NET Core 2.0 at the time. At this point it was 15 years old, so it was cool to see this project running on Windows, Linux, in Docker, and on a Raspberry Pi...a machine that didn't exist when the project was originally written. NOTE: If the timeline is confusing, I had already been working in industry for years at this point but was still plugging away at my 4 year degree at night. It eventually took 11 years to complete my BS in Software Engineering. This evening, as the children slept, I wanted to see if I could run the .NET Upgrade Assistant on this now 20 year old app and get it running on .NET 6. Let's start:$ upgrade-assistant upgrade .\\TinyOS.sln-----------------------------------------------------------------------------------------------------------------Microsoft .NET Upgrade Assistant v0.3.256001+3c4e05c787f588e940fe73bfa78d7eedfe0190bdWe are interested in your feedback! Please use the following link to open a survey: https://aka.ms/DotNetUASurvey-----------------------------------------------------------------------------------------------------------------[22:58:01 INF] Loaded 5 extensions[22:58:02 INF] Using MSBuild from C:\\Program Files\\dotnet\\sdk\\6.0.100\\[22:58:02 INF] Using Visual Studio install from C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview [v17][22:58:06 INF] Initializing upgrade step Select an entrypoint[22:58:07 INF] Setting entrypoint to only project in solution: C:\\Users\\scott\\TinyOS\\src\\TinyOSCore\\TinyOSCore.csproj[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable[22:58:07 INF] Initializing upgrade step Select project to upgrade[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable[22:58:07 INF] Initializing upgrade step Back up project See how the process is interactive at the command line, with color prompts and a series of dynamic multiple-choice questions? Interestingly, it builds on the first try, no errors. When I manually look at the .csproj I can see some weird version numbers, likely from some not-quite-baked version of .NET Core 2 I used many years ago. My spidey sense says this is wrong, and I'm assuming the upgrade assistant didn't understand it. I also note a commented-out reference to ILLink.Tasks which was a preview feature in Mono's Linker to reduce the final size of apps and tree-trim them. Some of that functionality is built into .NET 6 now so I'll use that during the build and packaging process later. The reference is not needed today. I'm gonna blindly upgrade them to .NET 6 and see what happens. I could do this by just changing the numbers and seeing if it restores and builds, but I can also try dotnet outdated which remains a lovely tool in the upgrader's toolkit. This \"outdated\" tool is nice as it talks to NuGet and confirms that there are newer versions of certain packages. In my tests - which were just batch files at this early time - I was calling my dotnet app like this:dotnet netcoreapp2.0/TinyOSCore.dll 512 scott13.txt This will change to the modern form with just TinyOSCore.exe 512 scott13.txt with an exe and args and no ceremony. Publishing and trimming my TinyOS turns into just a 15 meg EXE. Nice considering that the .NET I need is in there with no separate install. I could turn this little synthetic OS into a microservice if I wanted to be totally extra.dotnet publish -r win-x64 --self-contained -p:PublishSingleFile=true -p:SuppressTrimAnalysisWarnings=true If I add -p:EnableCompressionInSingleFile=true Then it's even smaller. No code changes. Run all my tests, looks good. My project from university from .NET 1.1 is now .NET 6.0, cross platform, self-contained in 11 megs in a single EXE. Sweet. Sponsor: At Rocket Mortgage® the work you do around here will be 100% impactful but won’t take all your free time, giving you the perfect work-life balance. Or as we call it, tech/life balance! Learn more.© 2021 Scott Hanselman. All rights reserved.",
  "author": "Scott Hanselman",
  "published": "Thu, 18 Nov 2021 21:18:00 GMT",
  "source": "http://feeds.hanselman.com/ScottHanselman",
  "categories": [
    "DotNetCore",
    "Open Source"
  ],
  "byline": "Scott Hanselman",
  "length": 5310,
  "excerpt": "I wrote a Tiny Virtual Operating System for a 300-level OS class in C# for ...",
  "siteName": "",
  "favicon": "https://images.hanselman.com/main/apple-touch-icon-114x114.png",
  "text": "I wrote a Tiny Virtual Operating System for a 300-level OS class in C# for college back in 2001 (?) and later moved it to VB.NET in 2002. This is all pre-.NET Core, and on early .NET 1.1 or 2.0 on Windows. I moved it to GitHub 5 years ago and ported it to .NET Core 2.0 at the time. At this point it was 15 years old, so it was cool to see this project running on Windows, Linux, in Docker, and on a Raspberry Pi...a machine that didn't exist when the project was originally written. NOTE: If the timeline is confusing, I had already been working in industry for years at this point but was still plugging away at my 4 year degree at night. It eventually took 11 years to complete my BS in Software Engineering. This evening, as the children slept, I wanted to see if I could run the .NET Upgrade Assistant on this now 20 year old app and get it running on .NET 6. Let's start:$ upgrade-assistant upgrade .\\TinyOS.sln-----------------------------------------------------------------------------------------------------------------Microsoft .NET Upgrade Assistant v0.3.256001+3c4e05c787f588e940fe73bfa78d7eedfe0190bdWe are interested in your feedback! Please use the following link to open a survey: https://aka.ms/DotNetUASurvey-----------------------------------------------------------------------------------------------------------------[22:58:01 INF] Loaded 5 extensions[22:58:02 INF] Using MSBuild from C:\\Program Files\\dotnet\\sdk\\6.0.100\\[22:58:02 INF] Using Visual Studio install from C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview [v17][22:58:06 INF] Initializing upgrade step Select an entrypoint[22:58:07 INF] Setting entrypoint to only project in solution: C:\\Users\\scott\\TinyOS\\src\\TinyOSCore\\TinyOSCore.csproj[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable[22:58:07 INF] Initializing upgrade step Select project to upgrade[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable[22:58:07 INF] Initializing upgrade step Back up project See how the process is interactive at the command line, with color prompts and a series of dynamic multiple-choice questions? Interestingly, it builds on the first try, no errors. When I manually look at the .csproj I can see some weird version numbers, likely from some not-quite-baked version of .NET Core 2 I used many years ago. My spidey sense says this is wrong, and I'm assuming the upgrade assistant didn't understand it. \u003c!-- \u003cPackageReference Include=\"ILLink.Tasks\" Version=\"0.1.4-preview-906439\" /\u003e --\u003e \u003cPackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"2.0.0-preview2-final\" /\u003e \u003cPackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.0-preview2-final\" /\u003e \u003cPackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"2.0.0-preview2-final\" /\u003e \u003cPackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" Version=\"2.0.0-preview2-final\" /\u003e I also note a commented-out reference to ILLink.Tasks which was a preview feature in Mono's Linker to reduce the final size of apps and tree-trim them. Some of that functionality is built into .NET 6 now so I'll use that during the build and packaging process later. The reference is not needed today. I'm gonna blindly upgrade them to .NET 6 and see what happens. I could do this by just changing the numbers and seeing if it restores and builds, but I can also try dotnet outdated which remains a lovely tool in the upgrader's toolkit. This \"outdated\" tool is nice as it talks to NuGet and confirms that there are newer versions of certain packages. In my tests - which were just batch files at this early time - I was calling my dotnet app like this:dotnet netcoreapp2.0/TinyOSCore.dll 512 scott13.txt This will change to the modern form with just TinyOSCore.exe 512 scott13.txt with an exe and args and no ceremony. Publishing and trimming my TinyOS turns into just a 15 meg EXE. Nice considering that the .NET I need is in there with no separate install. I could turn this little synthetic OS into a microservice if I wanted to be totally extra.dotnet publish -r win-x64 --self-contained -p:PublishSingleFile=true -p:SuppressTrimAnalysisWarnings=true If I add -p:EnableCompressionInSingleFile=true Then it's even smaller. No code changes. Run all my tests, looks good. My project from university from .NET 1.1 is now .NET 6.0, cross platform, self-contained in 11 megs in a single EXE. Sweet. Sponsor: At Rocket Mortgage® the work you do around here will be 100% impactful but won’t take all your free time, giving you the perfect work-life balance. Or as we call it, tech/life balance! Learn more. About Scott Scott Hanselman is a former professor, former Chief Architect in finance, now speaker, consultant, father, diabetic, and Microsoft employee. He is a failed stand-up comic, a cornrower, and a book author. About   Newsletter Hosting By",
  "image": "https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/16297583fa52_12B8A/image_102c9b35-682a-46ed-9bb3-3d313ddda313.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n            \n            \u003cp\u003eI wrote a \u003ca href=\"https://www.hanselman.com/blog/rescuing-the-tiny-os-in-c\"\u003eTiny Virtual Operating System\u003c/a\u003e for a 300-level OS class in C# for college back in 2001 (?) and later \u003ca href=\"https://www.hanselman.com/blog/ive-ported-my-tiny-abstract-os-and-cpu-in-c-projectnbspfr\"\u003emoved it to VB.NET in 2002\u003c/a\u003e. This is all pre-.NET Core, and on early .NET 1.1 or 2.0 on Windows. I \u003ca href=\"https://github.com/shanselman/TinyOS\"\u003emoved it to GitHub 5 years ago\u003c/a\u003e and \u003ca href=\"https://www.hanselman.com/blog/porting-a-15-year-old-net-11-virtual-cpu-tiny-operating-system-school-project-to-net-core-20\"\u003eported it to .NET Core 2.0 at the time\u003c/a\u003e. At this point it was 15 years old, so it was cool to see this project running on Windows, Linux, in Docker, and on a Raspberry Pi...a machine that didn\u0026#39;t exist when the project was originally written.\u003c/p\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNOTE: \u003c/strong\u003eIf the timeline is confusing, I had already been working in industry for years at this point but was still plugging away at my 4 year degree at night. It eventually took 11 years to complete my BS in Software Engineering.\u003c/p\u003e\u003c/blockquote\u003e \u003cp\u003eThis evening, as the children slept, I wanted to see if I could run the \u003ca href=\"https://dotnet.microsoft.com/platform/upgrade-assistant\"\u003e.NET Upgrade Assistant\u003c/a\u003e on this now 20 year old app and get it running on .NET 6. \u003c/p\u003e \u003cp\u003eLet\u0026#39;s start:\u003c/p\u003e\u003cpre\u003e$ upgrade-assistant upgrade .\\TinyOS.sln\u003cbr/\u003e-----------------------------------------------------------------------------------------------------------------\u003cbr/\u003eMicrosoft .NET Upgrade Assistant v0.3.256001+3c4e05c787f588e940fe73bfa78d7eedfe0190bd\u003cp\u003eWe are interested in your feedback! Please use the following link to open a survey: https://aka.ms/DotNetUASurvey\u003cbr/\u003e-----------------------------------------------------------------------------------------------------------------\u003c/p\u003e\u003cp\u003e[22:58:01 INF] Loaded 5 extensions\u003cbr/\u003e[22:58:02 INF] Using MSBuild from C:\\Program Files\\dotnet\\sdk\\6.0.100\\\u003cbr/\u003e[22:58:02 INF] Using Visual Studio install from C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview [v17]\u003cbr/\u003e[22:58:06 INF] Initializing upgrade step Select an entrypoint\u003cbr/\u003e[22:58:07 INF] Setting entrypoint to only project in solution: C:\\Users\\scott\\TinyOS\\src\\TinyOSCore\\TinyOSCore.csproj\u003cbr/\u003e[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable\u003cbr/\u003e[22:58:07 INF] Initializing upgrade step Select project to upgrade\u003cbr/\u003e[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable\u003cbr/\u003e[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable\u003cbr/\u003e[22:58:07 INF] Initializing upgrade step Back up project\u003c/p\u003e\u003c/pre\u003e\n\u003cp\u003eSee how the process is interactive at the command line, with color prompts and a series of dynamic multiple-choice questions?\u003c/p\u003e\u003cfigure\u003e\u003cimg title=\"Updating .NET project with the upgrade assistant\" alt=\"Updating .NET project with the upgrade assistant\" src=\"https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/16297583fa52_12B8A/image_102c9b35-682a-46ed-9bb3-3d313ddda313.png\" width=\"939\" height=\"352\"/\u003e\u003c/figure\u003e \n\u003cp\u003eInterestingly, it builds on the first try, no errors.\u003c/p\u003e\n\u003cp\u003eWhen I manually look at the .csproj I can see some weird version numbers, likely from some not-quite-baked version of .NET Core 2 I used many years ago. My spidey sense says this is wrong, and I\u0026#39;m assuming the upgrade assistant didn\u0026#39;t understand it. \u003c/p\u003e\u003cpre\u003e    \u0026lt;!-- \u0026lt;PackageReference Include=\u0026#34;ILLink.Tasks\u0026#34; Version=\u0026#34;0.1.4-preview-906439\u0026#34; /\u0026gt; --\u0026gt;\u003cbr/\u003e    \u0026lt;PackageReference Include=\u0026#34;Microsoft.Extensions.Configuration\u0026#34; Version=\u0026#34;2.0.0-preview2-final\u0026#34; /\u0026gt;\u003cbr/\u003e    \u0026lt;PackageReference Include=\u0026#34;Microsoft.Extensions.Configuration.Json\u0026#34; Version=\u0026#34;2.0.0-preview2-final\u0026#34; /\u0026gt;\u003cbr/\u003e    \u0026lt;PackageReference Include=\u0026#34;Microsoft.Extensions.DependencyInjection\u0026#34; Version=\u0026#34;2.0.0-preview2-final\u0026#34; /\u0026gt;\u003cbr/\u003e    \u0026lt;PackageReference Include=\u0026#34;Microsoft.Extensions.Options.ConfigurationExtensions\u0026#34; Version=\u0026#34;2.0.0-preview2-final\u0026#34; /\u0026gt;\n\u003c/pre\u003e\n\u003cp\u003eI also note a commented-out reference to ILLink.Tasks which was a preview feature in Mono\u0026#39;s Linker to reduce the final size of apps and tree-trim them. Some of that functionality is built into .NET 6 now so I\u0026#39;ll use that during the build and packaging process later. The reference is not needed today.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;m gonna blindly upgrade them to .NET 6 and see what happens. I could do this by just changing the numbers and seeing if it restores and builds, but I can also try \u003ca href=\"https://www.hanselman.com/blog/your-dotnet-outdated-is-outdated-update-and-help-keep-your-net-projects-up-to-date\"\u003edotnet outdated\u003c/a\u003e which remains a lovely tool in the upgrader\u0026#39;s toolkit.\u003c/p\u003e\u003cfigure\u003e\u003cimg title=\"image\" alt=\"image\" src=\"https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/16297583fa52_12B8A/image_4a71ee64-6bb1-4730-86f8-689475662465.png\" width=\"999\" height=\"156\"/\u003e\u003c/figure\u003e \n\u003cp\u003eThis \u0026#34;outdated\u0026#34; tool is nice as it talks to NuGet and confirms that there are newer versions of certain packages.\u003c/p\u003e\n\u003cp\u003eIn my tests - which were just batch files at this early time - I was calling my dotnet app like this:\u003c/p\u003e\u003cpre\u003edotnet netcoreapp2.0/TinyOSCore.dll 512 scott13.txt  \u003c/pre\u003e\n\u003cp\u003eThis will change to the modern form with just \u003ccode\u003eTinyOSCore.exe 512 scott13.txt\u003c/code\u003e with an exe and args and no ceremony.\u003c/p\u003e\n\u003cp\u003ePublishing and trimming my TinyOS turns into just a 15 meg EXE. Nice considering that the .NET I need is in there with no separate install. I could turn this little synthetic OS into a microservice if I wanted to be totally extra.\u003c/p\u003e\u003cpre\u003edotnet publish -r win-x64 --self-contained -p:PublishSingleFile=true -p:SuppressTrimAnalysisWarnings=true\u003c/pre\u003e\n\u003cp\u003eIf I add \u003c/p\u003e\u003cpre\u003e-p:EnableCompressionInSingleFile=true\u003c/pre\u003e\n\u003cp\u003eThen it\u0026#39;s even smaller. No code changes. Run all my tests, looks good. My project from university from .NET 1.1 is now .NET 6.0, cross platform, self-contained in 11 megs in a single EXE. Sweet.\u003c/p\u003e\n\u003chr/\u003e\n\n\u003cp\u003e\u003cstrong\u003eSponsor: \u003c/strong\u003eAt Rocket Mortgage® the work you do around here will be 100% impactful but won’t take all your free time, giving you the perfect work-life balance. Or as we call it, tech/life balance! \u003ca href=\"https://hnsl.mn/3qVUu5O\"\u003eLearn more.\u003c/a\u003e\u003c/p\u003e\n\n\n\n            \u003cdiv\u003e\n                \u003cdiv\u003e\n                    \u003ch4\u003eAbout Scott\u003c/h4\u003e\n                    \u003cdiv\u003e\n                        \u003cp\u003eScott Hanselman is a former professor, former Chief Architect in finance, now speaker, consultant, father, diabetic, and Microsoft employee. He is a failed stand-up comic, a cornrower, and a book author.\u003c/p\u003e\n                        \u003cp\u003e\u003ca href=\"https://facebook.com/shanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-fb.png\" alt=\"facebook\"/\u003e\u003c/a\u003e\n                        \u003ca href=\"https://twitter.com/shanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-twitter.png\" alt=\"twitter\"/\u003e\u003c/a\u003e\n                        \u003ca href=\"http://feeds.hanselman.com/ScottHanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-rss.png\" alt=\"subscribe\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n                        \u003ca href=\"http://hanselman.com/about\"\u003eAbout\u003c/a\u003e   \u003ca href=\"http://www.hanselman.com/newsletter\"\u003eNewsletter\u003c/a\u003e\n                    \u003c/p\u003e\u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv\u003e\n                    \u003cp\u003e\u003cstrong\u003eHosting By\u003c/strong\u003e\u003cbr/\u003e\n                        \u003ca rel=\"nofollow\" href=\"https://azure.microsoft.com/free\"\u003e\u003cimg alt=\"Hosted in an Azure App Service\" width=\"125\" height=\"125\" src=\"http://images.hanselman.com/main/azure-250x250.png\"/\u003e\u003c/a\u003e\n                    \u003c/p\u003e\n\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \n\n\n            \n\n            \n        \u003c/section\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
