{
  "id": "329c0190-8d0e-48cc-8830-d1a2276dd1cb",
  "title": "Learning to Think in an AI World: 5 Lessons for Novice Programmers",
  "link": "https://blog.jetbrains.com/education/2025/05/12/five-lessons-for-novice-programmers-ai-world/",
  "description": "This is the second article of the series How to Learn to Code in an AI World. Don’t miss the first, Is it Still Worth Learning to Code? Imagine the following scenario: A student is enrolled in an introductory computer science course. They have no previous programming experience and don’t consider themselves very good at […]",
  "author": "Clara Maine",
  "published": "Mon, 12 May 2025 14:19:37 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "jetbrains-academy",
    "ai",
    "ai-assistance",
    "career",
    "developers",
    "education",
    "for-learners",
    "jetbrains-research",
    "jetbrainsacademy-2",
    "learn",
    "learn-programming",
    "research"
  ],
  "byline": "Clara Maine",
  "length": 12884,
  "excerpt": "Part 2 of our \"How to Learn to Code in an AI World\" series.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The place for learning and teaching computer science your way JetBrains AcademyLearning to Think in an AI World: 5 Lessons for Novice Programmers This is the second article of the series How to Learn to Code in an AI World. Don’t miss the first, Is it Still Worth Learning to Code? Imagine the following scenario: A student is enrolled in an introductory computer science course. They have no previous programming experience and don’t consider themselves very good at math or technical subjects. In this course, the teacher allows the use of large language models like ChatGPT and AI code completion software to help students with their work. When completing a homework assignment, the student carefully reads the prompt and begins to code. Almost immediately, an AI code suggestion tool generates a long function, which overwhelms them, prompting them to turn to ChatGPT instead. Believing it’s best to use AI as a tutor rather than an answer machine, they request step-by-step guidance. However, after reading the first point of advice, they scroll past the explanation in search of a quicker solution and copy the generated code. This code, however, does not fully match the problem and contains unfamiliar syntax, leading to confusion. After repeatedly passing their code back and forth between the IDE and ChatGPT, they eventually produce a version that passes the test cases, though without fully understanding how it works. When asked later about how useful they found the AI, they answered “very” and appreciated its utility as a personal tutor in a class they struggle in. They lack awareness of the way they actually use the AI and have a skewed perception of their understanding of the material. Now imagine another student in the same class. She once attended a STEM-focused summer camp and is familiar with the frustration of learning to code. She does not find it easy, but has the experience behind her to know she is capable of producing working output. When completing the same assignment, the student carefully reads the problem description and begins structuring her solution by naming variables and adding comments to outline her approach. As she types, the AI-powered code suggestion tool provides frequent input, which she occasionally glances at but mostly ignores, preferring to follow her own plan. When she does accept suggestions, they are small and deliberate – filling in predictable elements like closing brackets or simple conditionals. While she encounters a few syntax mistakes, she methodically corrects them and successfully completes the assignment, passing all test cases in a short time. Looking back, she acknowledges that AI helped her move faster but credits her own structured thinking for getting to the right solution. The example above is not hypothetical. This scenario was illustrated in a 2024 study about AI’s role in the widening gap between struggling and non-struggling students. Although it may seem counterintuitive, the emergence of AI being there at any moment to write code for us might mean an increased emphasis on writing more of it by hand, at least in the beginning.  Considering this, we’ve introduced several AI-powered features in our plugin, including machine translation for course content, theory lookup, and AI hints. The goal is not to avoid AI entirely but to learn how to think effectively alongside it. The following five lessons will help you develop the skills and practices you’ll need to navigate AI tools and become a stronger, more independent programmer. If you missed it, read part one of this series: Is it Still Worth Learning to Code? Focus on problem solving, not output Pauses in programming are useful, even if they feel like getting stuck. Novice programmers are often surprised at how much time will go into a single function or even a single line of working code. This slow and often frustrating process is necessary for building the kind of cognitive processes you’ll need to become a better programmer. Refining your thinking will also improve your ability to quickly read and understand code you haven’t written yourself. While this has always been important for collaboration, now that we have AI code assistants, developers are reading a lot more code than they used to. If a large-language model autocompletes your function, you want to be able to quickly accept or reject the suggestion without getting caught up in understanding the logic of it. Hack your own psychology If there’s one idea that should leave the gated garden of research and make its way into classrooms immediately, it’s the concept of meta-cognitive awareness. Granted, the reason it hasn’t is probably because “meta-cognitive awareness” is not a very enticing term – but the idea is quite simple. It’s about your ability to recognize “thinking traps” and effectively problem-solve your way out of them. Research has shown that teaching beginners about these challenges produces immediate and lasting changes to the students’ productivity, independence, and confidence. Given that, it might be good to take the time to learn them! Here are a few meta-cognitive difficulties or “thinking traps” common in programming: Right question, wrong answer (Forming) – You understand the problem, but you’re using the wrong approach to solve it. Stuck in a Rut (Dislodging) – Even when you realize your approach isn’t working, you struggle to change it.  Wrong question, right answer (Assumption) – You perfectly solve a problem… just not the one you were supposed to. So close, but so far (Location) – You zoom through the steps too fast, thinking you’re almost done, only to realize you skipped something crucial. Band-aid on a broken bone (Achievement) – You keep making small fixes in hopes your code will start working, but actually, it needs a total overhaul. Interestingly, researchers found that rather than helping with these challenges, AI actually introduced new meta-cognitive difficulties for beginners. Namely,  Falling Behind Without Noticing (Progression) – You think you’re keeping up with the course, but because AI assistance can generate working code that surpasses your current understanding, you’re falling behind and don’t realize it. Distracting Pop-Ups (Interruption) – Every time you try to focus, an AI code-completion tool throws a suggestion at you, breaking your train of thought.  Following bad advice (Mislead) – You trust a suggestion (from an AI, a tutorial, or even your own guess) that seems right but actually takes you in the wrong direction. At the moment, most AI tools are not built with these challenges in mind. Even if they were, you are the sole expert of your own mind, and there is only so much an external resource can do to see the traps in your thoughts. Don’t rush too quickly towards ill-conceived code Although it looks good in the movies, speed-coding is unproductive for learning. Much of getting through your first programming assignments involves taking the time to understand the problem and then properly strategizing a solution. Both of these are mental processes and should be done before you start coding! While it’s satisfying to generate a lot of code very quickly – in practice, the faster you write the code, the more time you have to spend debugging it Don’t make the classic mistake of grinding through a vague idea until you’re left with a steaming pile of broken syntax and semantic errors you’ve put five hours into debugging and are too invested in to rebuild the right way. Much of that time would be better spent working out the data structures and program architecture before you write a single line. Once the logic of your program is solid in your mind, implementing it just becomes a matter of syntax. Take steps to avoid the illusion of competence Many novice programmers in the study above confidently believed they had solved a programming problem using AI tools, but missed the central lesson of the assignment. This unwarranted confidence, described as an illusion of competence, was compounded by the fact that using too many AI suggestions​ contributed to a lack of awareness of what was holding them back.  Research uses the term self-efficacy to describe the confidence people have in their ability to complete specific tasks. A healthy level of self-efficacy fosters persistence and engagement, but when you overestimate your abilities, you may neglect critical reflection and fail to address gaps in your knowledge. While the illusion of competence can occur regardless of the tools used, AI can amplify it. By providing ready-made suggestions or solutions, AI might give you the false impression that you have mastered a concept, even if you struggle to apply it independently. Here are some suggestions for avoiding this illusion in your own learning: Prioritize active learning above all else: Writing code, debugging, and breaking down problems actively engages the brain more than reading or copying solutions. This engaged state is the key to activating the neural circuitry necessary for learning.  Try rubber duck debugging: Instead of going to an AI assistant when you get stuck, try the tested and true technique of rubber duck debugging, where you attempt to explain what the faulty code is doing, step by step, out loud. This technique helps you translate a vague intuitive understanding into concrete sentences, which almost always helps you see what needs to change. Teach a beginner what you’re learning: Even if you only know the basics, teaching someone else to program is genuinely one of the most underrated educational tactics there is. Novices usually ask questions that can reveal bigger ideas about the material you may have missed. Code replays and critique: Anything worth doing is worth doing well. Seeking out peer reviews, instructor feedback, or even automated tools that offer detailed critiques can highlight areas of misunderstanding. This extra step will pay off. Reframe mistakes as “negative expertise”: Even if your DIY code is rife with bugs and flawed approaches, learning to be a good programmer is as much about knowing what doesn’t work as it is about knowing what does. Build confidence without sophisticated tools: Challenge yourself to solve your next assignment without using an LLM or stack overflow. By depriving yourself of easy answers, you build stronger coding muscles. You may go back to the tools eventually, but these sessions can help build confidence and awareness of your understanding. Understand the emotions of learning All coders know that the mind of a programmer often oscillates between two extremes: there is either the ecstatic rush of implementing perfectly working code or overwhelming, frustrated confusion. Whether you’ve been coding for a week or a lifetime, this emotional experience is pretty much the same. The trick is to learn to work with and through these experiences, not against them. To truly sustain your programming practice, you should work to foster true confidence, develop a productive response to frustration, let yourself be inspired to play and be creative, and take satisfaction and pride in your work. Understand that these are almost more important than the information you study, because they determine your attitude to programming. Developing and maintaining the belief that you are someone who enjoys programming will serve you well beyond the ability to work out each step of a sorting algorithm by hand. This is the second post in our series How to Learn to Program in an AI World, keep an eye out for the next ones on our blog in the coming months. If you missed it, check out part 1: Is it still worth learning to code? Subscribe to JetBrains Academy updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/05/DSGN-22098-Banners-for-AI-world-blog-post-series-part-2-social-share.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/education/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2020/07/JetBrains-Academy-1.svg\" alt=\"Education logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe place for learning and teaching computer science your way\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/education/category/jetbrains-academy/\"\u003eJetBrains Academy\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eLearning to Think in an AI World: 5 Lessons for Novice Programmers\u003c/h2\u003e                    \n                    \n\u003cp\u003eThis is the second article of the series \u003cem\u003eHow to Learn to Code in an AI World\u003c/em\u003e. Don’t miss the first, \u003ca href=\"https://blog.jetbrains.com/education/2025/04/23/is-it-still-worth-learning-to-code/\" data-type=\"link\" data-id=\"https://blog.jetbrains.com/education/2025/04/23/is-it-still-worth-learning-to-code/\"\u003eIs it Still Worth Learning to Code?\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eImagine the following scenario: \u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eA\u003cem\u003e student is enrolled in an introductory computer science course. They have no previous programming experience and don’t consider themselves very good at math or technical subjects. In this course, the teacher allows the use of large language models like ChatGPT and AI code completion software to help students with their work.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eWhen completing a homework assignment, the student carefully reads the prompt and begins to code. Almost immediately, an AI code suggestion tool generates a long function, which overwhelms them, prompting them to turn to ChatGPT instead. Believing it’s best to use AI as a tutor rather than an answer machine, they request step-by-step guidance. However, after reading the first point of advice, they scroll past the explanation in search of a quicker solution and copy the generated code. This code, however, does not fully match the problem and contains unfamiliar syntax, leading to confusion. After repeatedly passing their code back and forth between the IDE and ChatGPT, they eventually produce a version that passes the test cases, though without fully understanding how it works.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eWhen asked later about how useful they found the AI, they answered “very” and appreciated its utility as a personal tutor in a class they struggle in. They lack awareness of the way they actually use the AI and have a skewed perception of their understanding of the material.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eNow imagine another student in the same class. She once attended a STEM-focused summer camp and is familiar with the frustration of learning to code. She does not find it easy, but has the experience behind her to know she is capable of producing working output.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eWhen completing the same assignment, the student carefully reads the problem description and begins structuring her solution by naming variables and adding comments to outline her approach. As she types, the AI-powered code suggestion tool provides frequent input, which she occasionally glances at but mostly ignores, preferring to follow her own plan. When she does accept suggestions, they are small and deliberate – filling in predictable elements like closing brackets or simple conditionals. While she encounters a few syntax mistakes, she methodically corrects them and successfully completes the assignment, passing all test cases in a short time. Looking back, she acknowledges that AI helped her move faster but credits her own structured thinking for getting to the right solution.\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2560\" height=\"1440\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/DSGN-22098-Banners-for-AI-world-blog-post-series-part-2-Social_featured_1280x720.png\" alt=\"Two beginner programmers are depicted. One is struggling to learn programming and one is not, one offloads their thinking to AI and misses crucial concepts, and one prioritizes the thinking skills.\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe example above is not hypothetical. This scenario was illustrated in a 2024 study about AI’s role in \u003ca href=\"https://dl.acm.org/doi/10.1145/3632620.3671116\" target=\"_blank\" rel=\"noopener\"\u003ethe widening gap\u003c/a\u003e between struggling and non-struggling students. Although it may seem counterintuitive, the emergence of AI being there at any moment to write code for us might mean an increased emphasis on writing \u003cem\u003emore \u003c/em\u003eof it by hand, at least in the beginning. \u003c/p\u003e\n\n\n\n\u003cp\u003eConsidering this, we’ve introduced several AI-powered features in our plugin, including machine translation for course content, theory lookup, and AI hints. The goal is not to avoid AI entirely but to learn how to think effectively alongside it. The following five lessons will help you develop the skills and practices you’ll need to navigate AI tools and become a stronger, more independent programmer.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you missed it, read part one of this series: \u003ca href=\"https://blog.jetbrains.com/education/2025/04/23/is-it-still-worth-learning-to-code/\" data-type=\"link\" data-id=\"https://blog.jetbrains.com/education/2025/04/23/is-it-still-worth-learning-to-code/\"\u003eIs it Still Worth Learning to Code?\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eFocus on \u003cem\u003eproblem solving\u003c/em\u003e, not output\u003c/h2\u003e\n\n\n\n\u003cp\u003ePauses in programming are useful, even if they feel like getting stuck. Novice programmers are often surprised at how much time will go into a single function or even a single \u003cem\u003eline \u003c/em\u003eof working code. This slow and often frustrating process is necessary for building the kind of cognitive processes you’ll need to become a better programmer.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1280\" height=\"201\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/divider1-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eRefining your thinking will also improve your ability to quickly read and understand code you haven’t written yourself. While this has always been important for collaboration, now that we have AI code assistants, developers are reading a \u003cem\u003elot \u003c/em\u003emore code than they used to. If a large-language model autocompletes your function, you want to be able to quickly accept or reject the suggestion without getting caught up in understanding the logic of it.\u003c/p\u003e\n\n\n\n\u003ch2\u003eHack your own psychology\u003c/h2\u003e\n\n\n\n\u003cp\u003eIf there’s one idea that should leave the gated garden of research and make its way into classrooms immediately, it’s the concept of \u003cem\u003emeta-cognitive awareness\u003c/em\u003e. Granted, the reason it hasn’t is probably because “meta-cognitive awareness” is not a very enticing term – but the idea is quite simple. It’s about your ability to recognize “thinking traps” and effectively problem-solve your way out of them.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://dl.acm.org/doi/10.1145/2858036.2858252\" target=\"_blank\" rel=\"noopener\"\u003eResearch has shown\u003c/a\u003e that teaching beginners about these challenges produces immediate and lasting changes to the students’ productivity, independence, and confidence. Given that, it might be good to take the time to learn them!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1280\" height=\"201\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/divider2-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHere are a few meta-cognitive difficulties or “thinking traps” common in programming:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eRight question, wrong answer (Forming)\u003c/strong\u003e – You understand the problem, but you’re using the wrong approach to solve it.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eStuck in a Rut (Dislodging)\u003c/strong\u003e – Even when you realize your approach isn’t working, you struggle to change it. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eWrong question, right answer (Assumption)\u003c/strong\u003e – You perfectly solve a problem… just not the one you were supposed to.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eSo close, but so far (Location)\u003c/strong\u003e – You zoom through the steps too fast, thinking you’re almost done, only to realize you skipped something crucial.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eBand-aid on a broken bone (Achievement)\u003c/strong\u003e – You keep making small fixes in hopes your code will start working, but actually, it needs a total overhaul.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eInterestingly, \u003ca href=\"https://dl.acm.org/doi/10.1145/3632620.3671116\" target=\"_blank\" rel=\"noopener\"\u003eresearchers found\u003c/a\u003e that rather than helping with these challenges, AI actually \u003cem\u003eintroduced\u003c/em\u003e new meta-cognitive difficulties for beginners. Namely, \u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eFalling Behind Without Noticing (Progression)\u003c/strong\u003e – You think you’re keeping up with the course, but because AI assistance can generate working code that surpasses your current understanding, you’re falling behind and don’t realize it.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDistracting Pop-Ups (Interruption)\u003c/strong\u003e – Every time you try to focus, an AI code-completion tool throws a suggestion at you, breaking your train of thought. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eFollowing bad advice (Mislead)\u003c/strong\u003e – You trust a suggestion (from an AI, a tutorial, or even your own guess) that seems right but actually takes you in the wrong direction.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eAt the moment, most AI tools are not built with these challenges in mind. Even if they were, you are the sole expert of your own mind, and there is only so much an external resource can do to see the traps in your thoughts.\u003c/p\u003e\n\n\n\n\u003ch2\u003eDon’t rush too quickly towards ill-conceived code\u003c/h2\u003e\n\n\n\n\u003cp\u003eAlthough it looks good in the movies, speed-coding is unproductive for learning. Much of getting through your first programming assignments involves taking the time to understand the problem and then properly strategizing a solution. Both of these are mental processes and should be done \u003cem\u003ebefore \u003c/em\u003eyou start coding! While it’s satisfying to generate a lot of code very quickly – in practice, the faster you write the code, the more time you have to spend debugging it\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1280\" height=\"201\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/divider3-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eDon’t make the classic mistake of grinding through a vague idea until you’re left with a steaming pile of broken syntax and semantic errors you’ve put five hours into debugging and are too invested in to rebuild the right way. Much of that time would be better spent working out the data structures and program architecture before you write a single line. Once the logic of your program is solid in your mind, implementing it just becomes a matter of syntax.\u003c/p\u003e\n\n\n\n\u003ch2\u003eTake steps to avoid the illusion of competence\u003c/h2\u003e\n\n\n\n\u003cp\u003eMany novice programmers in \u003ca href=\"https://dl.acm.org/doi/10.1145/3632620.3671116\" target=\"_blank\" rel=\"noopener\"\u003ethe study above\u003c/a\u003e confidently believed they had solved a programming problem using AI tools, but missed the central lesson of the assignment. This unwarranted confidence, described as an \u003cem\u003eillusion of competence\u003c/em\u003e, was compounded by the fact that using too many AI suggestions​ contributed to a\u003cem\u003e lack of awareness\u003c/em\u003e of what was holding them back. \u003c/p\u003e\n\n\n\n\u003cp\u003eResearch uses the term \u003cem\u003eself-efficacy\u003c/em\u003e to describe the confidence people have in their ability to complete specific tasks. A healthy level of self-efficacy fosters persistence and engagement, but when you overestimate your abilities, you may neglect critical reflection and fail to address gaps in your knowledge.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"5330\" height=\"822\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/03/DSGN-22097-Banners-for-AI-world-blog-post-series-part-1-Divider-2.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWhile the illusion of competence can occur regardless of the tools used, AI can amplify it. By providing ready-made suggestions or solutions, AI might give you the false impression that you have mastered a concept, even if you struggle to apply it independently.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere are some suggestions for avoiding this illusion in your own learning:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ePrioritize active learning above all else\u003c/strong\u003e: Writing code, debugging, and breaking down problems actively engages the brain more than reading or copying solutions. This engaged state is the key to activating the neural circuitry necessary for learning. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eTry rubber duck debugging: \u003c/strong\u003eInstead of going to an AI assistant when you get stuck, try the tested and true technique of rubber duck debugging, where you attempt to explain what the faulty code is doing, step by step, out loud. This technique helps you translate a vague intuitive understanding into concrete sentences, which almost always helps you see what needs to change.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eTeach a beginner what you’re learning: \u003c/strong\u003eEven if you only know the basics, teaching someone else to program is genuinely one of the most underrated educational tactics there is. Novices usually ask questions that can reveal bigger ideas about the material you may have missed.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCode replays and critique\u003c/strong\u003e: Anything worth doing is worth doing well. Seeking out peer reviews, instructor feedback, or even automated tools that offer detailed critiques can highlight areas of misunderstanding. This extra step will pay off.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eReframe mistakes as “negative expertise”\u003c/strong\u003e: Even if your DIY code is rife with bugs and flawed approaches, learning to be a good programmer is as much about knowing what \u003cem\u003edoesn’t \u003c/em\u003ework as it is about knowing what \u003cem\u003edoes.\u003c/em\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eBuild confidence \u003c/strong\u003e\u003cstrong\u003e\u003cem\u003ewithout \u003c/em\u003e\u003c/strong\u003e\u003cstrong\u003esophisticated tools: \u003c/strong\u003eChallenge yourself to solve your next assignment without using an LLM or stack overflow. By depriving yourself of easy answers, you build stronger coding muscles. You may go back to the tools eventually, but these sessions can help build confidence and awareness of your understanding.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003ch2\u003eUnderstand the emotions of learning\u003c/h2\u003e\n\n\n\n\u003cp\u003eAll coders know that the mind of a programmer often oscillates between two extremes: there is either the ecstatic rush of implementing perfectly working code or overwhelming, frustrated confusion. Whether you’ve been coding for a week or a lifetime, this emotional experience is pretty much the same. The trick is to learn to work \u003cem\u003ewith \u003c/em\u003eand \u003cem\u003ethrough \u003c/em\u003ethese experiences, not against them.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo truly sustain your programming practice, you should work to foster true confidence, develop a productive response to frustration, let yourself be inspired to play and be creative, and take satisfaction and pride in your work. Understand that these are almost \u003cem\u003emore \u003c/em\u003eimportant than the information you study, because they determine your attitude to programming. Developing and maintaining the belief that \u003cstrong\u003eyou are someone who enjoys programming\u003c/strong\u003e will serve you well beyond the ability to work out each step of a sorting algorithm by hand.\u003c/p\u003e\n\n\n    \n\n\n\n\n\n\n\n\u003cp\u003eThis is the second post in our series \u003cem\u003eHow to Learn to Program in an AI World,\u003c/em\u003e keep an eye out for the next ones on \u003ca href=\"https://blog.jetbrains.com/education/\"\u003eour blog\u003c/a\u003e in the coming months. If you missed it, check out part 1: \u003ca href=\"https://blog.jetbrains.com/education/2025/04/23/is-it-still-worth-learning-to-code/\" data-type=\"link\" data-id=\"https://blog.jetbrains.com/education/2025/04/23/is-it-still-worth-learning-to-code/\"\u003eIs it still worth learning to code?\u003c/a\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to JetBrains Academy updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
