{
  "id": "8b753be7-dd06-417c-8f42-fe7792b16bed",
  "title": "npm audit: Broken by Design",
  "link": "https://overreacted.io/npm-audit-broken-by-design/",
  "description": "Found 99 vulnerabilities (84 moderately irrelevant, 15 highly irrelevant)",
  "author": "",
  "published": "Wed, 07 Jul 2021 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 20777,
  "excerpt": "Found 99 vulnerabilities (84 moderately irrelevant, 15 highly irrelevant)",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "Security is important. Nobody wants to be the person advocating for less security. So nobody wants to say it. But somebody has to say it. So I guess I’ll say it. The way npm audit works is broken. Its rollout as a default after every npm install was rushed, inconsiderate, and inadequate for the front-end tooling. Have you heard the story about the boy who cried wolf? Spoiler alert: the wolf eats the sheep. If we don’t want our sheep to be eaten, we need better tools. As of today, npm audit is a stain on the entire npm ecosystem. The best time to fix it was before rolling it out as a default. The next best time to fix it is now. In this post, I will briefly outline how it works, why it’s broken, and what changes I’m hoping to see. Note: this article is written with a critical and somewhat snarky tone. I understand it’s super hard to maintain massive projects like Node.js/npm, and that mistakes may take a while to become apparent. I am frustrated only at the situation, not at the people involved. I kept the snarky tone because the level of my frustration has increased over the years, and I don’t want to pretend that the situation isn’t as dire as it really is. Most of all I am frustrated to see all the people for whom this is the first programming experience, as well as all the people who are blocked from deploying their changes due to irrelevant warnings. I am excited that this issue is being considered and I will do my best to provide input on the proposed solutions! 💜 How does npm audit work? Skip ahead if you already know how it works. Your Node.js application has a dependency tree. It might look like this: your-app - view-library@1.0.0 - design-system@1.0.0 - model-layer@1.0.0 - database-layer@1.0.0 - network-utility@1.0.0 Most likely, it’s a lot deeper. Now say there’s a vulnerability discovered in network-utility@1.0.0: your-app - view-library@1.0.0 - design-system@1.0.0 - model-layer@1.0.0 - database-layer@1.0.0 - network-utility@1.0.0 (Vulnerable!) This gets published in a special registry that npm will access next time you run npm audit. Since npm v6+, you’ll learn about this after every npm install: 1 vulnerabilities (0 moderate, 1 high) To address issues that do not require attention, run: npm audit fix To address all issues (including breaking changes), run: npm audit fix --force You run npm audit fix, and npm tries to install the latest network-utility@1.0.1 with the fix in it. As long as database-layer specifies that it depends not on exactly on network-utility@1.0.0 but some permissible range that includes 1.0.1, the fix “just works” and you get a working application: your-app - view-library@1.0.0 - design-system@1.0.0 - model-layer@1.0.0 - database-layer@1.0.0 - network-utility@1.0.1 (Fixed!) Alternatively, maybe database-layer@1.0.0 depends strictly on network-utility@1.0.0. In that case, the maintainer of database-layer needs to release a new version too, which would allow network-utility@1.0.1 instead: your-app - view-library@1.0.0 - design-system@1.0.0 - model-layer@1.0.0 - database-layer@1.0.1 (Updated to allow the fix.) - network-utility@1.0.1 (Fixed!) Finally, if there is no way to gracefully upgrade the tree, you could try npm audit fix --force. This is supposed to be used if database-layer doesn’t accept the new version of network-utility and also doesn’t release an update to accept it. So you’re kind of taking matters in your own hands, potentially risking breaking changes. Seems like a reasonable option to have. This is how npm audit is supposed to work in theory. As someone wise said, in theory there is no difference between theory and practice. But in practice there is. And that’s where all the fun starts. Why is npm audit broken? Let’s see how this works in practice. I’ll use Create React App for my testing. If you’re not familiar with it, it’s an integration facade that combines multiple other tools, including Babel, webpack, TypeScript, ESLint, PostCSS, Terser, and others. Create React App takes your JavaScript source code and converts it into a static HTML+JS+CSS folder. Notably, it does not produce a Node.js app. Let’s create a new project! npx create-react-app myapp Immediately upon creating a project, I see this: found 5 vulnerabilities (3 moderate, 2 high) run `npm audit fix` to fix them, or `npm audit` for details Oh no, that seems bad! My just-created app is already vulnerable! Or so npm tells me. Let’s run npm audit to see what’s up. First “vulnerability” Here is the first problem reported by npm audit: ┌───────────────┬──────────────────────────────────────────────────────────────┐ │ Moderate │ Regular Expression Denial of Service │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Package │ browserslist │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Patched in │ \u003e=4.16.5 │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Dependency of │ react-scripts │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Path │ react-scripts \u003e react-dev-utils \u003e browserslist │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ More info │ https://npmjs.com/advisories/1747 │ └───────────────┴──────────────────────────────────────────────────────────────┘ Apparently, browserslist is vulnerable. What’s that and how is it used? Create React App generates CSS files optimized for the browsers you target. For example, you can say you only target modern browsers in your package.json: \"browserslist\": { \"production\": [ \"\u003e0.2%\", \"not dead\", \"not op_mini all\" ], \"development\": [ \"last 1 chrome version\", \"last 1 firefox version\", \"last 1 safari version\" ] } Then it won’t include outdated flexbox hacks in the output. Since multiple tools rely on the same configuration format for the browsers you target, Create React App uses the shared browserslist package to parse the configuration file. So what’s the vulnerability here? “Regular Expression Denial of Service” means that there is a regex in browserslist that, with malicious input, could become very slow. So an attacker can craft a special configuration string that, when passed to browserslist, could slow it down exponentially. This sounds bad… Wait, what?! Let’s remember how your app works. You have a configuration file on your machine. You build your project. You get static HTML+CSS+JS in a folder. You put it on static hosting. There is simply no way for your application user to affect your package.json configuration. This doesn’t make any sense. If the attacker already has access to your machine and can change your configuration files, you have a much bigger problem than slow regular expressions! Okay, so I guess this “Moderate” “vulnerability” was neither moderate nor a vulnerability in the context of a project. Let’s keep going. Verdict: this “vulnerability” is absurd in this context. Second “vulnerability” Here is the next issue npm audit has helpfully reported: ┌───────────────┬──────────────────────────────────────────────────────────────┐ │ Moderate │ Regular expression denial of service │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Package │ glob-parent │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Patched in │ \u003e=5.1.2 │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Dependency of │ react-scripts │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Path │ react-scripts \u003e webpack-dev-server \u003e chokidar \u003e glob-parent │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ More info │ https://npmjs.com/advisories/1751 │ └───────────────┴──────────────────────────────────────────────────────────────┘ Let’s look at the webpack-dev-server \u003e chokidar \u003e glob-parent dependency chain. Here, webpack-dev-server is a development-only server that’s used to quickly serve your app locally. It uses chokidar to watch your filesystem for changes (such as when you save a file in your editor). And it uses glob-parent in order to extract a part of the filesystem path from a filesystem watch pattern. Unfortunately, glob-parent is vulnerable! If an attacker supplies a specially crafted filepath, it could make this function exponentially slow, which would… Wait, what?! The development server is on your computer. The files are on your computer. The file watcher is using the configuration that you have specified. None of this logic leaves your computer. If your attacker is sophisticated enough to log into your machine during local development, the last thing they’ll want to do is to craft special long filepaths to slow down your development. They’ll want to steal your secrets instead. So this whole threat is absurd. Looks like this “Moderate” “vulnerability” was neither moderate nor a vulnerability in the context of a project. Verdict: this “vulnerability” is absurd in this context. ### Third “vulnerability” Let’s have a look at this one: ┌───────────────┬──────────────────────────────────────────────────────────────┐ │ Moderate │ Regular expression denial of service │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Package │ glob-parent │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Patched in │ \u003e=5.1.2 │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Dependency of │ react-scripts │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Path │ react-scripts \u003e webpack \u003e watchpack \u003e watchpack-chokidar2 \u003e │ │ │ chokidar \u003e glob-parent │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ More info │ https://npmjs.com/advisories/1751 │ └───────────────┴──────────────────────────────────────────────────────────────┘ Wait, it’s the same thing as above, but through a different dependency path. Verdict: this “vulnerability” is absurd in this context. Fourth “vulnerability” Oof, this one looks really bad! npm audit has the nerve to show it in red color: ┌───────────────┬──────────────────────────────────────────────────────────────┐ │ High │ Denial of Service │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Package │ css-what │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Patched in │ \u003e=5.0.1 │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Dependency of │ react-scripts │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Path │ react-scripts \u003e @svgr/webpack \u003e @svgr/plugin-svgo \u003e svgo \u003e │ │ │ css-select \u003e css-what │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ More info │ https://npmjs.com/advisories/1754 │ └───────────────┴──────────────────────────────────────────────────────────────┘ What is this “high” severity issue? “Denial of service.” I don’t want service to be denied! That would be really bad… Unless… Let’s look at the issue. Apparently css-what, which is a parser for CSS selectors, can be slow with specially crafted input. This parser is used by a plugin that generates React components from SVG files. So what this means is that if the attacker takes control of my development machine or my source code, they put a special SVG file that will have a specially crafted CSS selector in it, which will make my build slow. That checks out… Wait, what?! If the attacker can modify my app’s source code, they’ll probably just put a bitcoin miner in it. Why would they add SVG files into my app, unless you can mine bitcoins with SVG? Again, this doesn’t make any sense. Verdict: this “vulnerability” is absurd in this context. So much for the “high” severity. Fifth “vulnerability” ┌───────────────┬──────────────────────────────────────────────────────────────┐ │ High │ Denial of Service │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Package │ css-what │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Patched in │ \u003e=5.0.1 │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Dependency of │ react-scripts │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ Path │ react-scripts \u003e optimize-css-assets-webpack-plugin \u003e cssnano │ │ │ \u003e cssnano-preset-default \u003e postcss-svgo \u003e svgo \u003e css-select │ │ │ \u003e css-what │ ├───────────────┼──────────────────────────────────────────────────────────────┤ │ More info │ https://npmjs.com/advisories/1754 │ └───────────────┴──────────────────────────────────────────────────────────────┘ This is just the same exact thing as above. Verdict: this “vulnerability” is absurd in this context. Shall we keep going? So far the boy has cried wolf five times. Two of them are duplicates. The rest are absurd non-issues in the context of how these dependencies are used. Five false alarms wouldn’t be too bad. Unfortunately, there are hundreds. Here are a few typical threads, but there are many more linked from here: I’ve spent several hours looking through every npm audit issue reported to us over the last several months, and they all appear to be false positives in the context of a build tool dependency like Create React App. Of course, they are possible to fix. We could relax some of the top-level dependencies to not be exact (leading to bugs in patches slipping in more often). We could make more releases just to stay ahead of this security theater. But this is inadequate. Imagine if your tests failed 99% of the times for bogus reasons! This wastes person-decades of effort and makes everyone miserable: It makes beginners miserable because they run into this as their first programming experience in the Node.js ecosystem. As if installing Node.js/npm was not confusing enough (good luck if you added sudo somewhere because a tutorial told you), this is what they’re greeted with when they try examples online or even when they create a project. A beginner doesn’t know what a RegExp is. Of course they don’t have the know-how to be able to tell whether a RegExp DDoS or prototype pollution is something to worry about when they’re using a build tool to produce a static HTML+CSS+JS site. It makes experienced app developers miserable because they have to either waste time doing obviously unnecessary work, or fight with their security departments trying to explain how npm audit is a broken tool unsuitable for real security audits by design. Yeah, somehow it was made a default in this state. It makes maintainers miserable because instead of working on bugfixes and improvements, they have to pull in bogus vulnerability fixes that can’t possibly affect their project because otherwise their users are frustrated, scared, or both. Someday, it will make our users miserable because we have trained an entire generation of developers to either not understand the warnings due to being overwhelmed, or to simply ignore them because they always show up but the experienced developers (correctly) tell them there is no real issue in each case. It doesn’t help that npm audit fix (which the tool suggests using) is buggy. I ran npm audit fix --force today and it downgraded the main dependency to a three-year-old version with actual real vulnerabilities. Thanks, npm, great job. What next? I don’t know how to solve this. But I didn’t add this system in the first place, so I’m probably not the best person to solve it. All I know is it’s horribly broken. There are a few possible solutions that I have seen. Move dependency to devDependencies if it doesn’t run in production. This offers a way to specify that some dependency isn’t used in production code paths, so there is no risk associated with it. However, this solution is flawed: npm audit still warns for development dependencies by default. You have to know to run npm audit --production to not see the warnings from development dependencies. People who know to do that probably already don’t trust it anyway. This also doesn’t help beginners or people working at companies whose security departments want to audit everything. npm install still uses information from plain npm audit, so you will effectively still see all the false positives every time you install something. As any security professional will tell you, development dependencies actually are an attack vector, and perhaps one of the most dangerous ones because it’s so hard to detect and the code runs with high trust assumptions. This is why the situation is so bad in particular: any real issue gets buried below dozens of non-issues that npm audit is training people and maintainers to ignore. It’s only a matter of time until this happens. Inline all dependencies during publish. This is what I’m increasingly seeing packages similar to Create React App do. For example, both Vite and Next.js simply bundle their dependencies directly in the package instead of relying on the npm node_modules mechanism. From a maintainer’s point of view, the upsides are clear: you get faster boot time, smaller downloads, and — as a nice bonus — no bogus vulnerability reports from your users. It’s a neat way to game the system but I’m worried about the incentives npm is creating for the ecosystem. Inlining dependencies kind of goes against the whole point of npm. Offer some way to counter-claim vulnerability reports. The problem is not entirely unknown to Node.js and npm, of course. Different people have worked on different suggestions to fix it. For example, there is a proposal for a way to manually resolve audit warnings so that they don’t display again. However, this still places the burden on app users, which don’t necessarily have context on what vulnerabilities deeper in the tree are real or bogus. I also have a proposal: I need a way to mark for my users that a certain vulnerability can’t possibly affect them. If you don’t trust my judgement, why are you running my code on your computer? I’d be happy to discuss other options too. The root of the issue is that npm added a default behavior that, in many situations, leads to a 99%+ false positive rate, creates an incredibly confusing first programming experience, makes people fight with security departments, makes maintainers never want to deal with Node.js ecosystem ever again, and at some point will lead to actually bad vulnerabilities slipping in unnnoticed. Something has to be done. In the meantime, I am planning to close all GitHub issues from npm audit that I see going forward that don’t correspond to a real vulnerability that can affect the project. I invite other maintainers to adopt the same policy. This will create frustration for our users, but the core of the issue is with npm. I am done with this security theater. Node.js/npm have all the power to fix the problem. I am in contact with them, and I hope to see this problem prioritized. Today, npm audit is broken by design. Beginners, experienced developers, maintainers, security departments, and, most importantly — our users — deserve better.Discuss on 𝕏  ·  Edit on GitHub",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eSecurity is important. Nobody wants to be the person advocating for less security. So nobody wants to say it. But somebody has to say it.\u003c/p\u003e\n\u003cp\u003eSo I guess I’ll say it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe way \u003ccode\u003enpm audit\u003c/code\u003e works is broken. Its rollout as a default after every \u003ccode\u003enpm install\u003c/code\u003e was rushed, inconsiderate, and inadequate for the front-end tooling.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eHave you heard the story about \u003ca target=\"_blank\" href=\"https://en.wikipedia.org/wiki/The_Boy_Who_Cried_Wolf\"\u003ethe boy who cried wolf?\u003c/a\u003e Spoiler alert: the wolf eats the sheep. If we don’t want our sheep to be eaten, we need better tools.\u003c/p\u003e\n\u003cp\u003eAs of today, \u003ccode\u003enpm audit\u003c/code\u003e is a stain on the entire npm ecosystem. The best time to fix it was before rolling it out as a default. The next best time to fix it is now.\u003c/p\u003e\n\u003cp\u003eIn this post, I will briefly outline how it works, why it’s broken, and what changes I’m hoping to see.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cem\u003eNote: this article is written with a critical and somewhat snarky tone. I understand it’s super hard to maintain massive projects like Node.js/npm, and that mistakes may take a while to become apparent. I am frustrated only at the situation, not at the people involved. I kept the snarky tone because the level of my frustration has increased over the years, and I don’t want to pretend that the situation isn’t as dire as it really is. Most of all I am frustrated to see all the people for whom this is the first programming experience, as well as all the people who are blocked from deploying their changes due to irrelevant warnings. I am excited that \u003ca target=\"_blank\" href=\"https://twitter.com/bitandbang/status/1412803378279759872\"\u003ethis issue is being considered\u003c/a\u003e and I will do my best to provide input on the proposed solutions! 💜\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch2\u003eHow does npm audit work?\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003e\u003ca target=\"_blank\" href=\"#why-is-npm-audit-broken\"\u003eSkip ahead\u003c/a\u003e if you already know how it works.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eYour Node.js application has a dependency tree. It might look like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eyour-app\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - view-library@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - design-system@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - model-layer@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    - database-layer@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      - network-utility@1.0.0\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMost likely, it’s a lot deeper.\u003c/p\u003e\n\u003cp\u003eNow say there’s a vulnerability discovered in \u003ccode\u003enetwork-utility@1.0.0\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eyour-app\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - view-library@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - design-system@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - model-layer@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    - database-layer@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      - network-utility@1.0.0 (Vulnerable!)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis gets published in a special registry that \u003ccode\u003enpm\u003c/code\u003e will access next time you run \u003ccode\u003enpm audit\u003c/code\u003e. Since npm v6+, you’ll learn about this after every \u003ccode\u003enpm install\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e1 vulnerabilities (0 moderate, 1 high)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eTo address issues that do not require attention, run:\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  npm audit fix\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eTo address all issues (including breaking changes), run:\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  npm audit fix --force\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou run \u003ccode\u003enpm audit fix\u003c/code\u003e, and npm tries to install the latest \u003ccode\u003enetwork-utility@1.0.1\u003c/code\u003e with the fix in it. As long as \u003ccode\u003edatabase-layer\u003c/code\u003e specifies that it depends not on \u003cem\u003eexactly\u003c/em\u003e on \u003ccode\u003enetwork-utility@1.0.0\u003c/code\u003e but some permissible range that includes \u003ccode\u003e1.0.1\u003c/code\u003e, the fix “just works” and you get a working application:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eyour-app\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - view-library@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - design-system@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - model-layer@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    - database-layer@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      - network-utility@1.0.1 (Fixed!)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAlternatively, maybe \u003ccode\u003edatabase-layer@1.0.0\u003c/code\u003e depends strictly on \u003ccode\u003enetwork-utility@1.0.0\u003c/code\u003e. In that case, the maintainer of \u003ccode\u003edatabase-layer\u003c/code\u003e needs to release a new version too, which would allow \u003ccode\u003enetwork-utility@1.0.1\u003c/code\u003e instead:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eyour-app\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - view-library@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - design-system@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  - model-layer@1.0.0\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    - database-layer@1.0.1 (Updated to allow the fix.)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      - network-utility@1.0.1 (Fixed!)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, if there is no way to gracefully upgrade the tree, you could try \u003ccode\u003enpm audit fix --force\u003c/code\u003e. This is supposed to be used if \u003ccode\u003edatabase-layer\u003c/code\u003e doesn’t accept the new version of \u003ccode\u003enetwork-utility\u003c/code\u003e and \u003cem\u003ealso\u003c/em\u003e doesn’t release an update to accept it. So you’re kind of taking matters in your own hands, potentially risking breaking changes. Seems like a reasonable option to have.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThis is how \u003ccode\u003enpm audit\u003c/code\u003e is supposed to work in theory.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eAs someone wise said, in theory there is no difference between theory and practice. But in practice there is. And that’s where all the fun starts.\u003c/p\u003e\n\u003ch2\u003eWhy is npm audit broken?\u003c/h2\u003e\n\u003cp\u003eLet’s see how this works in practice. I’ll use Create React App for my testing.\u003c/p\u003e\n\u003cp\u003eIf you’re not familiar with it, it’s an integration facade that combines multiple other tools, including Babel, webpack, TypeScript, ESLint, PostCSS, Terser, and others. Create React App takes your JavaScript source code and converts it into a static HTML+JS+CSS folder. \u003cstrong\u003eNotably, it does \u003cem\u003enot\u003c/em\u003e produce a Node.js app.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eLet’s create a new project!\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003enpx create-react-app myapp\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eImmediately upon creating a project, I see this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efound 5 vulnerabilities (3 moderate, 2 high)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  run `npm audit fix` to fix them, or `npm audit` for details\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOh no, that seems bad! My just-created app is already vulnerable!\u003c/p\u003e\n\u003cp\u003eOr so npm tells me.\u003c/p\u003e\n\u003cp\u003eLet’s run \u003ccode\u003enpm audit\u003c/code\u003e to see what’s up.\u003c/p\u003e\n\u003ch3\u003eFirst “vulnerability”\u003c/h3\u003e\n\u003cp\u003eHere is the first problem reported by \u003ccode\u003enpm audit\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e┌───────────────┬──────────────────────────────────────────────────────────────┐\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Moderate      │ Regular Expression Denial of Service                         │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Package       │ browserslist                                                 │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Patched in    │ \u0026gt;=4.16.5                                                     │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Dependency of │ react-scripts                                                │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Path          │ react-scripts \u0026gt; react-dev-utils \u0026gt; browserslist               │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ More info     │ https://npmjs.com/advisories/1747                            │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e└───────────────┴──────────────────────────────────────────────────────────────┘\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eApparently, \u003ccode\u003ebrowserslist\u003c/code\u003e is vulnerable. What’s that and how is it used? Create React App generates CSS files optimized for the browsers you target. For example, you can say you only target modern browsers in your \u003ccode\u003epackage.json\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ebrowserslist\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eproduction\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;0.2%\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003enot dead\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003enot op_mini all\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e],\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003edevelopment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003elast 1 chrome version\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003elast 1 firefox version\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003elast 1 safari version\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen it won’t include outdated flexbox hacks in the output. Since multiple tools rely on the same configuration format for the browsers you target, Create React App uses the shared \u003ccode\u003ebrowserslist\u003c/code\u003e package to parse the configuration file.\u003c/p\u003e\n\u003cp\u003eSo what’s the vulnerability here? \u003ca target=\"_blank\" href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\"\u003e“Regular Expression Denial of Service”\u003c/a\u003e means that there is a regex in \u003ccode\u003ebrowserslist\u003c/code\u003e that, with malicious input, could become very slow. So an attacker can craft a special configuration string that, when passed to \u003ccode\u003ebrowserslist\u003c/code\u003e, could slow it down exponentially. This sounds bad…\u003c/p\u003e\n\u003cp\u003eWait, what?! Let’s remember how your app works. You have a configuration file \u003cem\u003eon your machine\u003c/em\u003e. You \u003cem\u003ebuild\u003c/em\u003e your project. You get static HTML+CSS+JS in a folder. You put it on static hosting. There is simply \u003cstrong\u003eno way\u003c/strong\u003e for your application user to affect your \u003ccode\u003epackage.json\u003c/code\u003e configuration. \u003cstrong\u003eThis doesn’t make any sense.\u003c/strong\u003e If the attacker already has access to your machine and can change your configuration files, you have a much bigger problem than slow regular expressions!\u003c/p\u003e\n\u003cp\u003eOkay, so I guess this “Moderate” “vulnerability” was neither moderate nor a vulnerability in the context of a project. Let’s keep going.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVerdict: this “vulnerability” is absurd in this context.\u003c/strong\u003e\u003c/p\u003e\n\u003ch3\u003eSecond “vulnerability”\u003c/h3\u003e\n\u003cp\u003eHere is the next issue \u003ccode\u003enpm audit\u003c/code\u003e has helpfully reported:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e┌───────────────┬──────────────────────────────────────────────────────────────┐\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Moderate      │ Regular expression denial of service                         │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Package       │ glob-parent                                                  │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Patched in    │ \u0026gt;=5.1.2                                                      │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Dependency of │ react-scripts                                                │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Path          │ react-scripts \u0026gt; webpack-dev-server \u0026gt; chokidar \u0026gt; glob-parent  │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ More info     │ https://npmjs.com/advisories/1751                            │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e└───────────────┴──────────────────────────────────────────────────────────────┘\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet’s look at the \u003ccode\u003ewebpack-dev-server \u0026gt; chokidar \u0026gt; glob-parent\u003c/code\u003e dependency chain. Here, \u003ccode\u003ewebpack-dev-server\u003c/code\u003e is a \u003cstrong\u003edevelopment-only\u003c/strong\u003e server that’s used to quickly serve your app \u003cstrong\u003elocally\u003c/strong\u003e. It uses \u003ccode\u003echokidar\u003c/code\u003e to watch your filesystem for changes (such as when you save a file in your editor). And it uses \u003ca target=\"_blank\" href=\"https://www.npmjs.com/package/glob-parent\"\u003e\u003ccode\u003eglob-parent\u003c/code\u003e\u003c/a\u003e in order to extract a part of the filesystem path from a filesystem watch pattern.\u003c/p\u003e\n\u003cp\u003eUnfortunately, \u003ccode\u003eglob-parent\u003c/code\u003e is vulnerable! If an attacker supplies a specially crafted filepath, it could make this function exponentially slow, which would…\u003c/p\u003e\n\u003cp\u003eWait, what?! The development server is on your computer. The files are on your computer. The file watcher is using the configuration that \u003cem\u003eyou\u003c/em\u003e have specified. None of this logic leaves your computer. If your attacker is sophisticated enough to log into \u003cem\u003eyour machine\u003c/em\u003e during local development, the last thing they’ll want to do is to craft special long filepaths to slow down your development. They’ll want to steal your secrets instead. \u003cstrong\u003eSo this whole threat is absurd.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eLooks like this “Moderate” “vulnerability” was neither moderate nor a vulnerability in the context of a project.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVerdict: this “vulnerability” is absurd in this context.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e### Third “vulnerability”\u003c/p\u003e\n\u003cp\u003eLet’s have a look at this one:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e┌───────────────┬──────────────────────────────────────────────────────────────┐\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Moderate      │ Regular expression denial of service                         │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Package       │ glob-parent                                                  │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Patched in    │ \u0026gt;=5.1.2                                                      │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Dependency of │ react-scripts                                                │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Path          │ react-scripts \u0026gt; webpack \u0026gt; watchpack \u0026gt; watchpack-chokidar2 \u0026gt;  │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│               │ chokidar \u0026gt; glob-parent                                       │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ More info     │ https://npmjs.com/advisories/1751                            │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e└───────────────┴──────────────────────────────────────────────────────────────┘\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWait, it’s the same thing as above, but through a different dependency path.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVerdict: this “vulnerability” is absurd in this context.\u003c/strong\u003e\u003c/p\u003e\n\u003ch3\u003eFourth “vulnerability”\u003c/h3\u003e\n\u003cp\u003eOof, this one looks really bad! \u003cstrong\u003e\u003ccode\u003enpm audit\u003c/code\u003e has the nerve to show it in red color:\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e┌───────────────┬──────────────────────────────────────────────────────────────┐\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ High          │ Denial of Service                                            │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Package       │ css-what                                                     │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Patched in    │ \u0026gt;=5.0.1                                                      │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Dependency of │ react-scripts                                                │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Path          │ react-scripts \u0026gt; @svgr/webpack \u0026gt; @svgr/plugin-svgo \u0026gt; svgo \u0026gt;   │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│               │ css-select \u0026gt; css-what                                        │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ More info     │ https://npmjs.com/advisories/1754                            │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e└───────────────┴──────────────────────────────────────────────────────────────┘\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhat is this “high” severity issue? “Denial of service.” I don’t want service to be denied! That would be really bad… Unless…\u003c/p\u003e\n\u003cp\u003eLet’s look at the \u003ca target=\"_blank\" href=\"https://www.npmjs.com/advisories/1754\"\u003eissue\u003c/a\u003e. Apparently \u003ca target=\"_blank\" href=\"https://www.npmjs.com/package/css-what\"\u003e\u003ccode\u003ecss-what\u003c/code\u003e\u003c/a\u003e, which is a parser for CSS selectors, can be slow with specially crafted input. This parser is used by a plugin that generates React components from SVG files.\u003c/p\u003e\n\u003cp\u003eSo what this means is that if the attacker takes control of my development machine or my source code, they put a special SVG file that will have a specially crafted CSS selector in it, which will make my build slow. That checks out…\u003c/p\u003e\n\u003cp\u003eWait, what?! If the attacker can modify my app’s source code, they’ll probably just put a bitcoin miner in it. Why would they add SVG files into my app, unless you can mine bitcoins with SVG? Again, this doesn’t make \u003cem\u003eany\u003c/em\u003e sense.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVerdict: this “vulnerability” is absurd in this context.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSo much for the “high” severity.\u003c/p\u003e\n\u003ch3\u003eFifth “vulnerability”\u003c/h3\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"\" data-theme=\"default\"\u003e\u003ccode data-language=\"\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e┌───────────────┬──────────────────────────────────────────────────────────────┐\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ High          │ Denial of Service                                            │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Package       │ css-what                                                     │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Patched in    │ \u0026gt;=5.0.1                                                      │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Dependency of │ react-scripts                                                │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ Path          │ react-scripts \u0026gt; optimize-css-assets-webpack-plugin \u0026gt; cssnano │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│               │ \u0026gt; cssnano-preset-default \u0026gt; postcss-svgo \u0026gt; svgo \u0026gt; css-select  │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│               │ \u0026gt; css-what                                                   │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e├───────────────┼──────────────────────────────────────────────────────────────┤\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e│ More info     │ https://npmjs.com/advisories/1754                            │\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e└───────────────┴──────────────────────────────────────────────────────────────┘\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is just the same exact thing as above.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eVerdict: this “vulnerability” is absurd in this context.\u003c/strong\u003e\u003c/p\u003e\n\u003ch3\u003eShall we keep going?\u003c/h3\u003e\n\u003cp\u003eSo far the boy has cried wolf five times. Two of them are duplicates. The rest are absurd non-issues in the context of how these dependencies are used.\u003c/p\u003e\n\u003cp\u003eFive false alarms wouldn’t be too bad.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUnfortunately, there are hundreds.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eHere are a \u003ca target=\"_blank\" href=\"https://github.com/facebook/create-react-app/issues/11053\"\u003efew\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://github.com/facebook/create-react-app/issues/11092\"\u003etypical\u003c/a\u003e threads, but there are many more \u003ca target=\"_blank\" href=\"https://github.com/facebook/create-react-app/issues/11174\"\u003elinked from here\u003c/a\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://imgur.com/ABDK4Ky.png\" alt=\"Screenshot of many GH threads\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eI’ve spent several hours looking through every \u003ccode\u003enpm audit\u003c/code\u003e issue reported to us over the last several months, and they all appear to be false positives in the context of a build tool dependency like Create React App.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOf course, they are possible to fix. We could relax some of the top-level dependencies to not be exact (leading to bugs in patches slipping in more often). We could make more releases just to stay ahead of this security theater.\u003c/p\u003e\n\u003cp\u003eBut this is inadequate. Imagine if your tests failed 99% of the times for bogus reasons! This wastes person-decades of effort and makes everyone miserable:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIt makes beginners miserable\u003c/strong\u003e because they run into this as their first programming experience in the Node.js ecosystem. As if installing Node.js/npm was not confusing enough (good luck if you added \u003ccode\u003esudo\u003c/code\u003e somewhere because a tutorial told you), this is what they’re greeted with when they try examples online or even when they create a project. A beginner doesn’t know what a RegExp \u003cem\u003eis\u003c/em\u003e. Of course they don’t have the know-how to be able to tell whether a RegExp DDoS or prototype pollution is something to worry about when they’re using a build tool to produce a static HTML+CSS+JS site.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIt makes experienced app developers miserable\u003c/strong\u003e because they have to either waste time doing obviously unnecessary work, or fight with their security departments trying to explain how \u003ccode\u003enpm audit\u003c/code\u003e is a broken tool unsuitable for real security audits \u003cem\u003eby design\u003c/em\u003e. Yeah, somehow it was made a default in this state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIt makes maintainers miserable\u003c/strong\u003e because instead of working on bugfixes and improvements, they have to pull in bogus vulnerability fixes that can’t possibly affect their project because otherwise their users are frustrated, scared, or both.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSomeday, it will make our users miserable\u003c/strong\u003e because we have trained an entire generation of developers to either not understand the warnings due to being overwhelmed, or to simply \u003cem\u003eignore\u003c/em\u003e them because they always show up but the experienced developers (correctly) tell them there is no real issue in each case.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt doesn’t help that \u003ccode\u003enpm audit fix\u003c/code\u003e (which the tool suggests using) is buggy. I ran \u003ccode\u003enpm audit fix --force\u003c/code\u003e today and it \u003cstrong\u003edowngraded\u003c/strong\u003e the main dependency to a three-year-old version with actual \u003cem\u003ereal\u003c/em\u003e vulnerabilities. Thanks, npm, great job.\u003c/p\u003e\n\u003ch2\u003eWhat next?\u003c/h2\u003e\n\u003cp\u003eI don’t know how to solve this. But I didn’t add this system in the first place, so I’m probably not the best person to solve it. All I know is it’s horribly broken.\u003c/p\u003e\n\u003cp\u003eThere are a few possible solutions that I have seen.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eMove dependency to \u003ccode\u003edevDependencies\u003c/code\u003e if it doesn’t run in production.\u003c/strong\u003e This offers a way to specify that some dependency isn’t used in production code paths, so there is no risk associated with it. However, this solution is flawed:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enpm audit\u003c/code\u003e still warns for development dependencies by default. You have to \u003cem\u003eknow\u003c/em\u003e to run \u003ccode\u003enpm audit --production\u003c/code\u003e to not see the warnings from development dependencies. People who know to do that probably already don’t trust it anyway. This also doesn’t help beginners or people working at companies whose security departments want to audit everything.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enpm install\u003c/code\u003e still uses information from plain \u003ccode\u003enpm audit\u003c/code\u003e, so you will effectively still see all the false positives every time you install something.\u003c/li\u003e\n\u003cli\u003eAs any security professional will tell you, development dependencies actually \u003cem\u003eare\u003c/em\u003e an attack vector, and perhaps one of the most dangerous ones because it’s so hard to detect and the code runs with high trust assumptions. \u003cstrong\u003eThis is why the situation is so bad in particular: any real issue gets buried below dozens of non-issues that \u003ccode\u003enpm audit\u003c/code\u003e is training people and maintainers to ignore.\u003c/strong\u003e It’s only a matter of time until this happens.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInline all dependencies during publish.\u003c/strong\u003e This is what I’m increasingly seeing packages similar to Create React App do. For example, both \u003ca target=\"_blank\" href=\"https://unpkg.com/browse/vite@2.4.1/dist/node/\"\u003eVite\u003c/a\u003e and \u003ca target=\"_blank\" href=\"https://unpkg.com/browse/next@11.0.1/dist/\"\u003eNext.js\u003c/a\u003e simply bundle their dependencies directly in the package instead of relying on the npm \u003ccode\u003enode_modules\u003c/code\u003e mechanism. From a maintainer’s point of view, \u003ca target=\"_blank\" href=\"https://github.com/vitejs/vite/blob/main/CONTRIBUTING.md#notes-on-dependencies\"\u003ethe upsides are clear\u003c/a\u003e: you get faster boot time, smaller downloads, and — as a nice bonus — no bogus vulnerability reports from your users. It’s a neat way to game the system but I’m worried about the incentives npm is creating for the ecosystem. Inlining dependencies kind of goes against the whole point of npm.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOffer some way to counter-claim vulnerability reports.\u003c/strong\u003e The problem is not entirely unknown to Node.js and npm, of course. Different people have worked on different suggestions to fix it. For example, there is a \u003ca target=\"_blank\" href=\"https://github.com/npm/rfcs/pull/18\"\u003eproposal\u003c/a\u003e for a way to manually resolve audit warnings so that they don’t display again. However, this still places the burden on app users, which don’t necessarily have context on what vulnerabilities deeper in the tree are real or bogus. I also have a \u003ca target=\"_blank\" href=\"https://twitter.com/dan_abramov/status/1412380714012594178\"\u003eproposal\u003c/a\u003e: I need a way to mark for my users that a certain vulnerability can’t possibly affect them. If you don’t trust my judgement, why are you running my code on your computer? I’d be happy to discuss other options too.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe root of the issue is that npm added a default behavior that, in many situations, leads to a 99%+ false positive rate, creates an incredibly confusing first programming experience, makes people fight with security departments, makes maintainers never want to deal with Node.js ecosystem ever again, and at some point will lead to actually bad vulnerabilities slipping in unnnoticed.\u003c/p\u003e\n\u003cp\u003eSomething has to be done.\u003c/p\u003e\n\u003cp\u003eIn the meantime, I am planning to close all GitHub issues from \u003ccode\u003enpm audit\u003c/code\u003e that I see going forward that don’t correspond to a \u003cem\u003ereal\u003c/em\u003e vulnerability that can affect the project. I invite other maintainers to adopt the same policy. This will create frustration for our users, but the core of the issue is with npm. I am done with this security theater. Node.js/npm have all the power to fix the problem. I am in contact with them, and I hope to see this problem prioritized.\u003c/p\u003e\n\u003cp\u003eToday, \u003ccode\u003enpm audit\u003c/code\u003e is broken by design.\u003c/p\u003e\n\u003cp\u003eBeginners, experienced developers, maintainers, security departments, and, most importantly — our users — deserve better.\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://x.com/search?q=https%3A%2F%2Foverreacted.io%2Fnpm-audit-broken-by-design%2F\"\u003eDiscuss on 𝕏\u003c/a\u003e  ·  \u003ca target=\"_blank\" href=\"https://github.com/gaearon/overreacted.io/edit/main/public/npm-audit-broken-by-design/index.md\"\u003eEdit on GitHub\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "22 min read",
  "publishedTime": null,
  "modifiedTime": null
}
