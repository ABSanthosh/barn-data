{
  "id": "a6016eb1-0df8-45e3-846f-96da153760e8",
  "title": "Agent Development Kit: Making it easy to build multi-agent applications",
  "link": "https://developers.googleblog.com/en/agent-development-kit-easy-to-build-multi-agent-applications/",
  "description": "The Agent Development Kit (ADK), an open-source framework from Google designed to simplify the development of multi-agent systems, providing tools for building, interacting, evaluating, and deploying agents.",
  "author": "",
  "published": "",
  "source": "http://feeds.feedburner.com/GDBcode",
  "categories": null,
  "byline": "Erwin Huizenga, Bo Yang",
  "length": 13613,
  "excerpt": "The Agent Development Kit (ADK), an open-source framework from Google designed to simplify the development of multi-agent systems, providing tools for building, interacting, evaluating, and deploying agents.",
  "siteName": "",
  "favicon": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/meta/apple-touch-icon.png",
  "text": "The world of AI is rapidly moving beyond single-purpose models towards intelligent, autonomous multi-agent systems. Building these multi-agent systems, however, presents new challenges. That is why today, we have introduced Agent Development Kit (ADK) at Google Cloud NEXT 2025, a new open-source framework from Google designed to simplify the full stack end-to-end development of agents and multi-agent systems. ADK empowers developers like you to build production-ready agentic applications with greater flexibility and precise control.ADK is the same framework powering agents within Google products like Agentspace and the Google Customer Engagement Suite (CES). By open-sourcing ADK, we aim to provide developers with powerful, flexible tools to build in the rapidly evolving agent landscape. The ADK is designed to be flexible, use different models and build production ready agents for different deployment environments.Core Pillars of ADK: Build, Interact, Evaluate, DeployADK provides capabilities across the entire agent development lifecycle:Multi-Agent by Design: Build modular and scalable applications by composing multiple specialized agents in a hierarchy. Enable complex coordination and delegation.Rich Model Ecosystem: Choose the model that works best for your needs. ADK works with your model of choice – whether it is Gemini or your any model accessible via Vertex AI Model Garden. The framework also offers LiteLLM integration letting you choose from a wide selection of models from providers like Anthropic, Meta, Mistral AI, AI21 Labs, and many more!Rich Tool Ecosystem: Equip agents with diverse capabilities: use pre-built tools (Search, Code Exec), Model Context Protocol (MCP) tools, integrate 3rd-party libraries (LangChain, LlamaIndex), or even use other agents as tools (LangGraph, CrewAI, etc).Built-in streaming: Interact with your agents in human-like conversations with ADK's unique bidirectional audio and video streaming capabilities. With just a few lines of code, you can create natural interactions that change how you work with agents – moving beyond text into rich, multimodal dialogue.Flexible Orchestration: Define workflows using workflow agents (Sequential, Parallel, Loop) for predictable pipelines, or leverage LLM-driven dynamic routing (LlmAgent transfer) for adaptive behavior.Integrated Developer Experience: Develop, test, and debug locally with a powerful CLI and a visual Web UI. Inspect events, state, and agent execution step-by-step.Built-in Evaluation: Systematically assess agent performance by evaluating both the final response quality and the step-by-step execution trajectory against predefined test cases.Easy Deployment: Containerize and deploy your agents anywhere.Getting started with your first agentWhile we encourage you to explore the examples in the docs, the core idea is Pythonic simplicity. You define your agent's logic, the tools it can use, and how it should process information. ADK provides the structure to manage state, orchestrate tool calls, and interact with the underlying LLMs. Here is an illustrative example of a basic agent.The code can be found in the quickstart guide. from google.adk.agents import LlmAgent from google.adk.tools import google_Search dice_agent = LlmAgent( model=\"gemini-2.0-flash-exp\", # Required: Specify the LLM name=\"question_answer_agent\", # Requdired: Unique agent name description=\"A helpful assistant agent that can answer questions.\", instruction=\"\"\"Respond to the query using google search\"\"\", tools=[google_search], # Provide an instance of the tool ) # you can run this by using adk web This simple example shows the basic structure. ADK truly shines when building more complex applications involving multiple agents, sophisticated tool use, and dynamic orchestration, all while maintaining control.ADK offers flexibility in the way you interact with your agents: CLI, Web UI, API Server and API (Python). The way you define your agent (the core logic within agent.py) is the same regardless of how you choose to interact with it. The difference lies in how you initiate and manage the interaction. For all you find examples in the ADK documentation. Building Multi-Agent Applications with ADKADK truly shines when you move beyond single agents to build collaborative multi-agent systems that leverage tools. Imagine creating a team of specialized agents where a primary agent can delegate tasks based on the conversation. ADK makes this easy through hierarchical structures and intelligent routing.Let's walk through an illustrative example – a WeatherAgent that handles weather queries but delegates greetings to a specialized GreetingAgent.1. Define a Tool: Agents use tools to perform actions. Here, our WeatherAgent needs a tool to fetch weather data. We define a Python function; ADK uses its docstring to understand when and how to use it. def get_weather(city: str) -\u003e Dict: # Best Practice: Log tool execution for easier debugging print(f\"--- Tool: get_weather called for city: {city} ---\") city_normalized = city.lower().replace(\" \", \"\") # Basic input normalization # Mock weather data for simplicity (matching Step 1 structure) mock_weather_db = { \"newyork\": {\"status\": \"success\", \"report\": \"The weather in New York is sunny with a temperature of 25°C.\"}, \"london\": {\"status\": \"success\", \"report\": \"It's cloudy in London with a temperature of 15°C.\"}, \"tokyo\": {\"status\": \"success\", \"report\": \"Tokyo is experiencing light rain and a temperature of 18°C.\"}, \"chicago\": {\"status\": \"success\", \"report\": \"The weather in Chicago is sunny with a temperature of 25°C.\"}, \"toronto\": {\"status\": \"success\", \"report\": \"It's partly cloudy in Toronto with a temperature of 30°C.\"}, \"chennai\": {\"status\": \"success\", \"report\": \"It's rainy in Chennai with a temperature of 15°C.\"}, } # Best Practice: Handle potential errors gracefully within the tool if city_normalized in mock_weather_db: return mock_weather_db[city_normalized] else: return {\"status\": \"error\", \"error_message\": f\"Sorry, I don't have weather information for '{city}'.\"} 2. Define the Agents and Their Relationship: We use LlmAgent to create our agents. Pay close attention to the instruction and description fields – the LLM relies heavily on these for understanding roles and making delegation decisions using auto delegations for sub agents. greeting_agent = Agent( model=LiteLlm(model=\"anthropic/claude-3-sonnet-20240229\"), name=\"greeting_agent\", instruction=\"You are the Greeting Agent. Your ONLY task is to provide a friendly greeting to the user. \" \"Do not engage in any other conversation or tasks.\", # Crucial for delegation: Clear description of capability description=\"Handles simple greetings and hellos\", ) farewell_agent = Agent( model=LiteLlm(model=\"anthropic/claude-3-sonnet-20240229\"), name=\"farewell_agent\", instruction=\"You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message. \" \"Do not perform any other actions.\", # Crucial for delegation: Clear description of capability description=\"Handles simple farewells and goodbyes\", ) root_agent = Agent( name=\"weather_agent_v2\", model=\"gemini-2.0-flash-exp\", description=\"You are the main Weather Agent, coordinating a team. - Your main task: Provide weather using the `get_weather` tool. Handle its 'status' response ('report' or 'error_message'). - Delegation Rules: - If the user gives a simple greeting (like 'Hi', 'Hello'), delegate to `greeting_agent`. - If the user gives a simple farewell (like 'Bye', 'See you'), delegate to `farewell_agent`. - Handle weather requests yourself using `get_weather`. - For other queries, state clearly if you cannot handle them.\", tools=[get_weather], # Root agent still needs the weather tool sub_agents=[greeting_agent, farewell_agent] ) How Delegation Works:The default agent behavior is to allow delegation.When processing a user message, the LLM considers the query, the current agent's description, and the description fields of related agents (parent / sub agents defined in the hierarchy).If the LLM determines another agent is a better fit based on its description (e.g., user says \"Hi\", matching the GreetingAgent description, it initiates a transfer.Clear, distinct descriptions are vital! The LLM uses them to route tasks effectively.In this setup, if a user starts with \"Hi\", the WeatherAgent (if it's the root agent processing the input) can recognize it's not a weather query, see the GreetingAgent is suitable via its description, and automatically transfer control. If the user asks \"What's the weather in Chicago?\", the WeatherAgent handles it directly using its get_weather tool.This example demonstrates how ADK's hierarchical structure and description-driven delegation allow you to build organized, maintainable, and sophisticated multi-agent applications.Completing the Lifecycle: Evaluation and DeploymentBuilding intelligent agents like our weather agent is foundational, but bringing them reliably to users involves crucial next steps: rigorous evaluation and seamless deployment. Before going live, ensuring your agent behaves predictably and correctly is paramount. ADK's integrated evaluation tools are designed precisely for this, letting you systematically test execution paths and response quality against predefined datasets, like evaluation.test.json or test.json. You can run these checks programmatically within your test suites using AgentEvaluator.evaluate(). You can also use evaluation directly via the ADK eval command-line tool or via the web UI.Once you're satisfied with performance, ADK offers a clear and streamlined path to production through the option to deploy to any container runtime or using its integration with Vertex AI Agent Engine. This allows you to leverage a fully managed, scalable, and enterprise-grade runtime, completing the development lifecycle and empowering you to move from sophisticated prototypes to robust, production-ready agentic applications.Choosing the framework for you: ADK or Genkit?As you explore the possibilities of building multi-agent systems with ADK, you might be wondering how it fits into the broader landscape of GenAI development tools from Google. While a variety of SDKs and frameworks are available, such as the Genkit framework, it's helpful to understand ADK's relative focus. Here's a quick comparison:Agent Development Kit:Optimized for complex agents and multi-agent systems, it provides higher-level abstractions for agent development with built-in integration for LiteLLM and Vertex AI Model Garden supporting a variety of models.Focuses on defining agent behaviors and interactions.Supports bidirectional streaming.Genkit:Provides fundamental building blocks for building a large variety of AI powered experiences.Includes developer tooling for iterating, testing and debugging your AI related interactions.Support a wide variety of large language models from Google AI, Vertex AI, and from 3rd parties through community plugins.Choosing the Right ToolUltimately, the best choice depends on your project's specific goals. If you are building intricate, collaborative agent systems within a well-defined framework, ADK offers a powerful solution. For many other GenAI projects requiring flexibility and broad model support, Genkit is an excellent choice.ADK works anywhere, but optimized for Google CloudWhile the Agent Development Kit (ADK) offers flexibility to work with various tools, it is optimized for seamless integration within the Google Cloud ecosystem, specifically with Gemini models and Vertex AI. This tailored design allows developers to fully leverage the advanced capabilities of Gemini, such as the enhanced reasoning and tool use found in Gemini 2.5 Pro Experimental, and provides a direct, native pathway to deploy these agents onto Vertex AI's fully-managed, enterprise-grade runtime for scalability.Crucially, this deep integration extends to your broader enterprise landscape; ADK enables agents to connect directly to systems and data through over 100 pre-built connectors, utilize workflows built with Application Integration, and access data stored in systems like AlloyDB, BigQuery, and NetApp without requiring data duplication.Additionally, agents built with ADK can securely tap into your organization's existing API investments managed through Apigee, further enhancing their capabilities by leveraging established interfaces.This comprehensive connectivity across advanced AI models, scalable deployment, diverse data sources, and existing APIs makes ADK exceptionally powerful when used within the Google Cloud environment.Build the next generation of Agents with ADKThe Agent Development Kit (ADK) provides a powerful, flexible, and open-source foundation for building the next generation of AI applications. It tackles the core challenges of multi-agent development by offering:Precise control over agent behavior and orchestration.A rich ecosystem for tools and integrations.An integrated developer experience for building and debugging.A robust evaluation framework essential for reliable agents.A clear path to deployment, including managed options.We're incredibly excited to see what you build with ADK!Explore the Code: Official ADK Documentation.",
  "image": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/Ai-1-meta.2e16d0ba.fill-1200x600.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n    \n      \n    \n\n    \n\n    \n\n    \n\n    \n    \u003cdiv\u003e\n          \n\n\u003cdiv\u003e\n    \u003cp data-block-key=\"fb946\"\u003eThe world of AI is rapidly moving beyond single-purpose models towards intelligent, autonomous multi-agent systems. Building these multi-agent systems, however, presents new challenges. That is why today, we have \u003ca href=\"https://cloud.google.com/blog/products/ai-machine-learning/build-and-manage-multi-system-agents-with-vertex-ai\"\u003eintroduced Agent Development Kit\u003c/a\u003e (ADK) at \u003cb\u003eGoogle Cloud NEXT 2025\u003c/b\u003e, a new open-source framework from Google designed to simplify the full stack end-to-end development of agents and multi-agent systems. ADK empowers developers like you to build production-ready agentic applications with greater flexibility and precise control.\u003c/p\u003e\u003cp data-block-key=\"v2cv\"\u003eADK is the same framework powering agents within Google products like Agentspace and the Google Customer Engagement Suite (CES). By open-sourcing ADK, we aim to provide developers with powerful, flexible tools to build in the rapidly evolving agent landscape. The ADK is designed to be flexible, use different models and build production ready agents for different deployment environments.\u003c/p\u003e\u003ch2 data-block-key=\"1ldl\"\u003e\u003cbr/\u003eCore Pillars of ADK: Build, Interact, Evaluate, Deploy\u003c/h2\u003e\u003cp data-block-key=\"9l1p3\"\u003eADK provides capabilities across the entire agent development lifecycle:\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"253hh\"\u003e\u003cb\u003eMulti-Agent by Design:\u003c/b\u003e Build modular and scalable applications by composing multiple specialized agents in a hierarchy. Enable complex coordination and delegation.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"1up9q\"\u003e\u003cb\u003eRich Model Ecosystem:\u003c/b\u003e Choose the model that works best for your needs. ADK works with your model of choice – whether it is Gemini or your any model accessible via Vertex AI Model Garden. The framework also offers LiteLLM integration letting you choose from a wide selection of models from providers like Anthropic, Meta, Mistral AI, AI21 Labs, and many more!\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"68g93\"\u003e\u003cb\u003eRich Tool Ecosystem:\u003c/b\u003e Equip agents with diverse capabilities: use pre-built tools (Search, Code Exec), Model Context Protocol (MCP) tools, integrate 3rd-party libraries (LangChain, LlamaIndex), or even use other agents as tools (LangGraph, CrewAI, etc).\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"53lls\"\u003e\u003cb\u003eBuilt-in streaming:\u003c/b\u003e Interact with your agents in human-like conversations with ADK\u0026#39;s unique bidirectional audio and video streaming capabilities. With just a few lines of code, you can create natural interactions that change how you work with agents – moving beyond text into rich, multimodal dialogue.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"4d03o\"\u003e\u003cb\u003eFlexible Orchestration:\u003c/b\u003e Define workflows using workflow agents (\u003ccode\u003eSequential\u003c/code\u003e, \u003ccode\u003eParallel\u003c/code\u003e, \u003ccode\u003eLoop\u003c/code\u003e) for predictable pipelines, or leverage LLM-driven dynamic routing (\u003ccode\u003eLlmAgent\u003c/code\u003e transfer) for adaptive behavior.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"8fm2\"\u003e\u003cb\u003eIntegrated Developer Experience:\u003c/b\u003e Develop, test, and debug locally with a powerful CLI and a visual Web UI. Inspect events, state, and agent execution step-by-step.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"e0mq7\"\u003e\u003cb\u003eBuilt-in Evaluation\u003c/b\u003e: Systematically assess agent performance by evaluating both the final response quality and the step-by-step execution trajectory against predefined test cases.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"dnsck\"\u003e\u003cb\u003eEasy Deployment\u003c/b\u003e: Containerize and deploy your agents anywhere.\u003c/li\u003e\u003c/ul\u003e\u003ch2 data-block-key=\"bnueo\"\u003e\u003cbr/\u003eGetting started with your first agent\u003c/h2\u003e\u003cp data-block-key=\"4vlpb\"\u003eWhile we encourage you to explore the examples in the \u003ca href=\"https://google.github.io/adk-docs/\"\u003edocs\u003c/a\u003e, the core idea is Pythonic simplicity. You define your agent\u0026#39;s logic, the tools it can use, and how it should process information. ADK provides the structure to manage state, orchestrate tool calls, and interact with the underlying LLMs. Here is an illustrative example of a basic agent.\u003c/p\u003e\u003cp data-block-key=\"8lgik\"\u003eThe code can be found in the \u003ca href=\"https://google.github.io/adk-docs/agents/llm-agents/\"\u003equickstart guide\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003egoogle.adk.agents\u003c/span\u003e \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eLlmAgent\u003c/span\u003e \n\u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003egoogle.adk.tools\u003c/span\u003e \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003egoogle_Search\u003c/span\u003e\n\n\u003cspan\u003edice_agent\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eLlmAgent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003emodel\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;gemini-2.0-flash-exp\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e# Required: Specify the LLM \u003c/span\u003e\n    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;question_answer_agent\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e# Requdired: Unique agent name\u003c/span\u003e\n    \u003cspan\u003edescription\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;A helpful assistant agent that can answer questions.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003einstruction\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;Respond to the query using google search\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003etools\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003egoogle_search\u003c/span\u003e\u003cspan\u003e],\u003c/span\u003e \u003cspan\u003e# Provide an instance of the tool\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003e# you can run this by using adk web\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cdiv\u003e\n    \u003cp data-block-key=\"fb946\"\u003eThis simple example shows the basic structure. ADK truly shines when building more complex applications involving multiple agents, sophisticated tool use, and dynamic orchestration, all while maintaining control.\u003c/p\u003e\u003cp data-block-key=\"8fu7k\"\u003eADK offers flexibility in the way you interact with your agents: CLI, Web UI, API Server and API (Python). The way you define your agent (the core logic within \u003ccode\u003eagent.py\u003c/code\u003e) is the same regardless of how you choose to interact with it. The difference lies in how you initiate and manage the interaction. For all you find examples in the \u003ca href=\"https://google.github.io/adk-docs/\"\u003eADK documentation\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \u003cp\u003e\u003cimg src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/ADK-architecture.original.png\" alt=\"ADK architecture\"/\u003e\n        \n        \n    \u003c/p\u003e\n\u003c/div\u003e\n  \u003cdiv\u003e\n    \u003ch2 data-block-key=\"fb946\"\u003eBuilding Multi-Agent Applications with ADK\u003c/h2\u003e\u003cp data-block-key=\"20j34\"\u003eADK truly shines when you move beyond single agents to build collaborative multi-agent systems that leverage tools. Imagine creating a team of specialized agents where a primary agent can delegate tasks based on the conversation. ADK makes this easy through hierarchical structures and intelligent routing.\u003c/p\u003e\u003cp data-block-key=\"amh0c\"\u003eLet\u0026#39;s walk through an illustrative example – a \u003ccode\u003eWeatherAgent\u003c/code\u003e that handles weather queries but delegates greetings to a specialized GreetingAgent.\u003c/p\u003e\u003cp data-block-key=\"dh1o8\"\u003e\u003cb\u003e\u003cbr/\u003e1. Define a Tool:\u003c/b\u003e Agents use tools to perform actions. Here, our \u003ccode\u003eWeatherAgent\u003c/code\u003e needs a tool to fetch weather data. We define a Python function; ADK uses its \u003ccode\u003edocstring\u003c/code\u003e to understand when and how to use it.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eget_weather\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecity\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003estr\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eDict\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n\n    \u003cspan\u003e# Best Practice: Log tool execution for easier debugging\u003c/span\u003e\n    \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ef\u003c/span\u003e\u003cspan\u003e\u0026#34;--- Tool: get_weather called for city: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ecity\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e ---\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003ecity_normalized\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ecity\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elower\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereplace\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e# Basic input normalization\u003c/span\u003e\n\n    \u003cspan\u003e# Mock weather data for simplicity (matching Step 1 structure)\u003c/span\u003e\n    \u003cspan\u003emock_weather_db\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;newyork\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;report\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;The weather in New York is sunny with a temperature of 25°C.\u0026#34;\u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;london\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;report\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;It\u0026#39;s cloudy in London with a temperature of 15°C.\u0026#34;\u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;tokyo\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;report\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Tokyo is experiencing light rain and a temperature of 18°C.\u0026#34;\u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;chicago\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;report\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;The weather in Chicago is sunny with a temperature of 25°C.\u0026#34;\u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;toronto\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;report\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;It\u0026#39;s partly cloudy in Toronto with a temperature of 30°C.\u0026#34;\u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;chennai\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;success\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;report\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;It\u0026#39;s rainy in Chennai with a temperature of 15°C.\u0026#34;\u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e# Best Practice: Handle potential errors gracefully within the tool\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003ecity_normalized\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003emock_weather_db\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003emock_weather_db\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ecity_normalized\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003eelse\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\u0026#34;status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e\u0026#34;error_message\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003ef\u003c/span\u003e\u003cspan\u003e\u0026#34;Sorry, I don\u0026#39;t have weather information for \u0026#39;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ecity\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026#39;.\u0026#34;\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cp data-block-key=\"fb946\"\u003e\u003cb\u003e2. Define the Agents and Their Relationship:\u003c/b\u003e We use \u003ccode\u003eLlmAgent\u003c/code\u003e to create our agents. Pay close attention to the instruction and description fields – the LLM relies heavily on these for understanding roles and making delegation decisions using auto delegations for sub agents.\u003c/p\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003egreeting_agent\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAgent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n         \u003cspan\u003emodel\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003eLiteLlm\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emodel\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;anthropic/claude-3-sonnet-20240229\u0026#34;\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\n            \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;greeting_agent\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003einstruction\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;You are the Greeting Agent. Your ONLY task is to provide a friendly greeting to the user. \u0026#34;\u003c/span\u003e \u003cspan\u003e\u0026#34;Do not engage in any other conversation or tasks.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e# Crucial for delegation: Clear description of capability\u003c/span\u003e\n            \u003cspan\u003edescription\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;Handles simple greetings and hellos\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \n \u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003efarewell_agent\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAgent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n          \u003cspan\u003emodel\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003eLiteLlm\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emodel\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;anthropic/claude-3-sonnet-20240229\u0026#34;\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\n            \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;farewell_agent\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003einstruction\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;You are the Farewell Agent. Your ONLY task is to provide a polite goodbye message. \u0026#34;\u003c/span\u003e\n                        \u003cspan\u003e\u0026#34;Do not perform any other actions.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \u003cspan\u003e# Crucial for delegation: Clear description of capability\u003c/span\u003e\n            \u003cspan\u003edescription\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;Handles simple farewells and goodbyes\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n            \n \u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003eroot_agent\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eAgent\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;weather_agent_v2\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \n        \u003cspan\u003emodel\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;gemini-2.0-flash-exp\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003edescription\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;You are the main Weather Agent, coordinating a team. - Your main task: Provide weather using the `get_weather` tool. Handle its \u0026#39;status\u0026#39; response (\u0026#39;report\u0026#39; or \u0026#39;error_message\u0026#39;). - Delegation Rules: - If the user gives a simple greeting (like \u0026#39;Hi\u0026#39;, \u0026#39;Hello\u0026#39;), delegate to `greeting_agent`. - If the user gives a simple farewell (like \u0026#39;Bye\u0026#39;, \u0026#39;See you\u0026#39;), delegate to `farewell_agent`. - Handle weather requests yourself using `get_weather`. - For other queries, state clearly if you cannot handle them.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003etools\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eget_weather\u003c/span\u003e\u003cspan\u003e],\u003c/span\u003e \u003cspan\u003e# Root agent still needs the weather tool\u003c/span\u003e\n        \u003cspan\u003esub_agents\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003egreeting_agent\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efarewell_agent\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cdiv\u003e\n    \u003ch3 data-block-key=\"fb946\"\u003e\u003cb\u003eHow Delegation Works:\u003c/b\u003e\u003c/h3\u003e\u003cul\u003e\u003cli data-block-key=\"6aop0\"\u003eThe default agent behavior is to allow delegation.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"411mr\"\u003eWhen processing a user message, the LLM considers the query, the current agent\u0026#39;s \u003ccode\u003edescription\u003c/code\u003e, and the \u003ccode\u003edescription\u003c/code\u003e fields of related agents (parent / sub agents defined in the hierarchy).\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"62n6s\"\u003eIf the LLM determines another agent is a better fit based on its description (e.g., user says \u0026#34;Hi\u0026#34;, matching the \u003ccode\u003eGreetingAgent\u003c/code\u003e description, it initiates a transfer.\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"9k12\"\u003eClear, distinct descriptions are vital! The LLM uses them to route tasks effectively.\u003c/p\u003e\u003cp data-block-key=\"8tp29\"\u003eIn this setup, if a user starts with \u0026#34;Hi\u0026#34;, the \u003ccode\u003eWeatherAgent\u003c/code\u003e (if it\u0026#39;s the root agent processing the input) can recognize it\u0026#39;s not a weather query, see the \u003ccode\u003eGreetingAgent\u003c/code\u003e is suitable via its description, and automatically transfer control. If the user asks \u0026#34;What\u0026#39;s the weather in Chicago?\u0026#34;, the \u003ccode\u003eWeatherAgent\u003c/code\u003e handles it directly using its \u003ccode\u003eget_weather\u003c/code\u003e tool.\u003c/p\u003e\u003cp data-block-key=\"a4aju\"\u003eThis example demonstrates how ADK\u0026#39;s hierarchical structure and description-driven delegation allow you to build organized, maintainable, and sophisticated multi-agent applications.\u003c/p\u003e\u003ch2 data-block-key=\"2850f\"\u003e\u003cbr/\u003eCompleting the Lifecycle: Evaluation and Deployment\u003c/h2\u003e\u003cp data-block-key=\"cu93j\"\u003eBuilding intelligent agents like our weather agent is foundational, but bringing them reliably to users involves crucial next steps: rigorous evaluation and seamless deployment. Before going live, ensuring your agent behaves predictably and correctly is paramount. ADK\u0026#39;s integrated evaluation tools are designed precisely for this, letting you systematically test execution paths and response quality against predefined datasets, like \u003ccode\u003eevaluation.test.json\u003c/code\u003e or \u003ccode\u003etest.json\u003c/code\u003e. You can run these checks programmatically within your test suites using \u003ccode\u003eAgentEvaluator.evaluate()\u003c/code\u003e. You can also use evaluation directly via the ADK eval command-line tool or via the web UI.\u003c/p\u003e\u003cp data-block-key=\"41uhc\"\u003eOnce you\u0026#39;re satisfied with performance, ADK offers a clear and streamlined path to production through the option to deploy to any container runtime or using its integration with Vertex AI Agent Engine. This allows you to leverage a fully managed, scalable, and enterprise-grade runtime, completing the development lifecycle and empowering you to move from sophisticated prototypes to robust, production-ready agentic applications.\u003c/p\u003e\u003ch2 data-block-key=\"2ns13\"\u003e\u003cbr/\u003eChoosing the framework for you: ADK or Genkit?\u003c/h2\u003e\u003cp data-block-key=\"3ja90\"\u003eAs you explore the possibilities of building multi-agent systems with ADK, you might be wondering how it fits into the broader landscape of GenAI development tools from Google. While a variety of SDKs and frameworks are available, such as the \u003ca href=\"https://github.com/firebase/genkit\"\u003eGenkit framework\u003c/a\u003e, it\u0026#39;s helpful to understand ADK\u0026#39;s relative focus. Here\u0026#39;s a quick comparison:\u003c/p\u003e\u003ch3 data-block-key=\"7lbs1\"\u003e\u003cb\u003e\u003cbr/\u003eAgent Development Kit:\u003c/b\u003e\u003c/h3\u003e\u003cul\u003e\u003cli data-block-key=\"cpuku\"\u003eOptimized for complex agents and multi-agent systems, it provides higher-level abstractions for agent development with built-in integration for LiteLLM and Vertex AI Model Garden supporting a variety of models.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"d5aat\"\u003eFocuses on defining agent behaviors and interactions.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"14dmi\"\u003eSupports bidirectional streaming.\u003c/li\u003e\u003c/ul\u003e\u003ch3 data-block-key=\"8nqtc\"\u003e\u003cb\u003e\u003cbr/\u003eGenkit:\u003c/b\u003e\u003c/h3\u003e\u003cul\u003e\u003cli data-block-key=\"9mrp0\"\u003eProvides fundamental building blocks for building a large variety of AI powered experiences.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"8c74p\"\u003eIncludes developer tooling for iterating, testing and debugging your AI related interactions.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"dj4b6\"\u003eSupport a wide variety of large language models from Google AI, Vertex AI, and from 3rd parties through community plugins.\u003c/li\u003e\u003c/ul\u003e\u003ch3 data-block-key=\"eegsh\"\u003e\u003cb\u003e\u003cbr/\u003eChoosing the Right Tool\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"fl2vk\"\u003eUltimately, the best choice depends on your project\u0026#39;s specific goals. If you are building intricate, collaborative agent systems within a well-defined framework, ADK offers a powerful solution. For many other GenAI projects requiring flexibility and broad model support, Genkit is an excellent choice.\u003c/p\u003e\u003ch2 data-block-key=\"3t4ml\"\u003e\u003cbr/\u003eADK works anywhere, but optimized for Google Cloud\u003c/h2\u003e\u003cp data-block-key=\"b5281\"\u003eWhile the Agent Development Kit (ADK) offers flexibility to work with various tools, it is optimized for seamless integration within the Google Cloud ecosystem, specifically with Gemini models and Vertex AI. This tailored design allows developers to fully leverage the advanced capabilities of Gemini, such as the enhanced reasoning and tool use found in Gemini 2.5 Pro Experimental, and provides a direct, native pathway to deploy these agents onto Vertex AI\u0026#39;s fully-managed, enterprise-grade runtime for scalability.\u003c/p\u003e\u003cp data-block-key=\"2uh8\"\u003eCrucially, this deep integration extends to your broader enterprise landscape; ADK enables agents to connect directly to systems and data through over 100 pre-built connectors, utilize workflows built with Application Integration, and access data stored in systems like AlloyDB, BigQuery, and NetApp without requiring data duplication.\u003c/p\u003e\u003cp data-block-key=\"drn9c\"\u003eAdditionally, agents built with ADK can securely tap into your organization\u0026#39;s existing API investments managed through Apigee, further enhancing their capabilities by leveraging established interfaces.\u003c/p\u003e\u003cp data-block-key=\"f756a\"\u003eThis comprehensive connectivity across advanced AI models, scalable deployment, diverse data sources, and existing APIs makes ADK exceptionally powerful when used within the Google Cloud environment.\u003c/p\u003e\u003ch2 data-block-key=\"95li4\"\u003e\u003cbr/\u003eBuild the next generation of Agents with ADK\u003c/h2\u003e\u003cp data-block-key=\"9avrt\"\u003eThe Agent Development Kit (ADK) provides a powerful, flexible, and open-source foundation for building the next generation of AI applications. It tackles the core challenges of multi-agent development by offering:\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"dam5p\"\u003e\u003cb\u003ePrecise control\u003c/b\u003e over agent behavior and orchestration.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"53p32\"\u003eA \u003cb\u003erich ecosystem\u003c/b\u003e for tools and integrations.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"8coiu\"\u003eAn \u003cb\u003eintegrated developer experience\u003c/b\u003e for building and debugging.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"ena9c\"\u003eA \u003cb\u003erobust evaluation framework\u003c/b\u003e essential for reliable agents.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"bkkjl\"\u003eA \u003cb\u003eclear path to deployment\u003c/b\u003e, including managed options.\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"5j7jk\"\u003eWe\u0026#39;re incredibly excited to see what you build with ADK!\u003c/p\u003e\u003cp data-block-key=\"7qo4p\"\u003e\u003cb\u003eExplore the Code:\u003c/b\u003e \u003ca href=\"https://google.github.io/adk-docs\"\u003eOfficial ADK Documentation\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e \n      \u003c/div\u003e\n    \n\n    \n\n    \n    \n    \n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-04-09T00:00:00Z",
  "modifiedTime": null
}
