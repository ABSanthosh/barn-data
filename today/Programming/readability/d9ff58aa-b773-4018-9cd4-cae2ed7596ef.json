{
  "id": "d9ff58aa-b773-4018-9cd4-cae2ed7596ef",
  "title": "How to Pass a Table Valued Parameter to a T-SQL Function with jOOQ",
  "link": "https://blog.jooq.org/how-to-pass-a-table-valued-parameter-to-a-t-sql-function-with-jooq/",
  "description": "Microsoft T-SQL supports a language feature called table-valued parameter (TVP), which is a parameter of a table type that can be passed to a stored procedure or function. For example, you may write: This function takes a table-valued parameter (TVP), and produces a result set containing the cross product of the parameter table with itself. … Continue reading How to Pass a Table Valued Parameter to a T-SQL Function with jOOQ →",
  "author": "lukaseder",
  "published": "Tue, 25 Apr 2023 12:16:30 +0000",
  "source": "https://blog.jooq.org/feed",
  "categories": [
    "jooq-in-use",
    "Code generation",
    "code generator",
    "java",
    "JDBC",
    "jooq",
    "SQL Server",
    "T-SQL",
    "Table-valued function",
    "Table-valued parameter"
  ],
  "byline": "Published by lukaseder I made jOOQ View all posts by lukaseder",
  "length": 3298,
  "excerpt": "Using jOOQ's code generator, it is very easy to call a stored function accepting a table-valued parameter in SQL Server from your Java application.",
  "siteName": "Java, SQL and jOOQ.",
  "favicon": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=180%2C180\u0026ssl=1",
  "text": "Microsoft T-SQL supports a language feature called table-valued parameter (TVP), which is a parameter of a table type that can be passed to a stored procedure or function. For example, you may write: CREATE TYPE u_number_table AS TABLE (column_value INTEGER); CREATE FUNCTION f_cross_multiply ( @numbers u_number_table READONLY ) RETURNS @result TABLE ( i1 INTEGER, i2 INTEGER, product INTEGER ) AS BEGIN INSERT INTO @result SELECT n1.column_value, n2.column_value, n1.column_value * n2.column_value FROM @numbers n1 CROSS JOIN @numbers n2 RETURN END This function takes a table-valued parameter (TVP), and produces a result set containing the cross product of the parameter table with itself. The function happens to be a table-valued function, but this isn’t strictly necessary. Table-valued parameters can be passed to any function or procedure. In native T-SQL, the above function can be used as follows: DECLARE @t u_number_table; INSERT INTO @t VALUES (1), (2), (3); SELECT * FROM f_cross_multiply(@t); Producing the following output: |i1 |i2 |product| |---|---|-------| |1 |1 |1 | |2 |1 |2 | |3 |1 |3 | |1 |2 |2 | |2 |2 |4 | |3 |2 |6 | |1 |3 |3 | |2 |3 |6 | |3 |3 |9 | Calling the function from Java Using native JDBC, it is possible to follow the table-valued parameters tutorials and use a com.microsoft.sqlserver.jdbc.SQLServerDataTable, but if you’re using jOOQ and its code generator, both the user-defined type and the function will have generated Java code for you to call easily: List\u003cInteger\u003e l = List.of(1, 2, 3); Result\u003cFCrossMultiplyRecord\u003e result = ctx .selectFrom(fCrossMultiply(new UNumberTableRecord( l.stream().map(UNumberTableElementTypeRecord::new).toList() ))) .fetch(); You can imagine more complex queries where the table-valued function is used e.g. in a CROSS APPLY operator. There are multiple generated objects here: FCrossMultiplyRecord is a TableRecord containing the rows produced by the f_cross_multiply function. Routines.fCrossMultiply is a static-imported method that models an embedded call to a table-valued function (standalone calls are also possible) UNumberTableRecord is a record representing the user-defined type u_number_table, which can be passed as a table valued parameter UNumberTableElementTypeRecord is a synthetic record type for a single row of a u_number_table (more complex types with multiple attributes are possible, too!) Printing this result yields: +----+----+-------+ | i1| i2|product| +----+----+-------+ | 1| 1| 1| | 2| 1| 2| | 3| 1| 3| | 1| 2| 2| | 2| 2| 4| | 3| 2| 6| | 1| 3| 3| | 2| 3| 6| | 3| 3| 9| +----+----+-------+ Alternatively, just use the generated code to access the result rows like this: result.forEach(r -\u003e { System.out.println( r.getI1() + \" * \" + r.getI2() + \" = \" + r.getProduct() ); }); To get: 1 * 1 = 1 2 * 1 = 2 3 * 1 = 3 1 * 2 = 2 2 * 2 = 4 3 * 2 = 6 1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 Just connect jOOQ’s code generator to your SQL Server database, and start calling your functions accepting table-valued parameters with ease!",
  "image": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=750%2C750\u0026ssl=1",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"post-12111\"\u003e\n\t\n\t\n\t\u003cdiv\u003e\n\t\t\n\u003cp\u003eMicrosoft T-SQL supports a language feature called \u003ca href=\"https://learn.microsoft.com/en-us/sql/relational-databases/tables/use-table-valued-parameters-database-engine?view=sql-server-ver16\" data-type=\"URL\" data-id=\"https://learn.microsoft.com/en-us/sql/relational-databases/tables/use-table-valued-parameters-database-engine?view=sql-server-ver16\"\u003etable-valued parameter\u003c/a\u003e (TVP), which is a parameter of a table type that can be passed to a stored procedure or function.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, you may write:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eCREATE TYPE u_number_table AS TABLE (column_value INTEGER);\n\nCREATE FUNCTION f_cross_multiply (\n  @numbers u_number_table READONLY\n)\nRETURNS @result TABLE (\n  i1 INTEGER,\n  i2 INTEGER,\n  product INTEGER\n)\nAS\nBEGIN\n  INSERT INTO @result\n  SELECT\n    n1.column_value, \n    n2.column_value, \n    n1.column_value * n2.column_value\n  FROM @numbers n1\n  CROSS JOIN @numbers n2\n\n  RETURN\nEND\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eThis function takes a table-valued parameter (TVP), and produces a result set containing the cross product of the parameter table with itself. The function happens to be a \u003ca href=\"https://blog.jooq.org/postgresqls-table-valued-functions/\" data-type=\"URL\" data-id=\"https://blog.jooq.org/postgresqls-table-valued-functions/\"\u003etable-valued function\u003c/a\u003e, but this isn’t strictly necessary. Table-valued parameters can be passed to any function or procedure.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn native T-SQL, the above function can be used as follows:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eDECLARE @t u_number_table;\nINSERT INTO @t VALUES (1), (2), (3);\nSELECT * FROM f_cross_multiply(@t);\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eProducing the following output:\u003c/p\u003e\n\n\n\n\u003cpre\u003e|i1 |i2 |product|\n|---|---|-------|\n|1  |1  |1      |\n|2  |1  |2      |\n|3  |1  |3      |\n|1  |2  |2      |\n|2  |2  |4      |\n|3  |2  |6      |\n|1  |3  |3      |\n|2  |3  |6      |\n|3  |3  |9      |\n\u003c/pre\u003e\n\n\n\n\u003ch2\u003eCalling the function from Java\u003c/h2\u003e\n\n\n\n\u003cp\u003eUsing native JDBC, it is possible to \u003ca href=\"https://learn.microsoft.com/en-us/sql/connect/jdbc/using-table-valued-parameters?view=sql-server-ver16\"\u003efollow the table-valued parameters tutorials\u003c/a\u003e and use a \u003ccode\u003ecom.microsoft.sqlserver.jdbc.SQLServerDataTable\u003c/code\u003e, but if you’re using \u003ca href=\"https://blog.jooq.org/why-you-should-use-jooq-with-code-generation/\"\u003ejOOQ and its code generator\u003c/a\u003e, both the user-defined type and the function will have generated Java code for you to call easily:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eList\u0026lt;Integer\u0026gt; l = List.of(1, 2, 3);\nResult\u0026lt;FCrossMultiplyRecord\u0026gt; result = ctx\n    .selectFrom(fCrossMultiply(new UNumberTableRecord(\n        l.stream().map(UNumberTableElementTypeRecord::new).toList()\n    )))\n    .fetch();\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eYou can imagine more complex queries where the table-valued function is used e.g. in a \u003ca href=\"https://blog.jooq.org/add-lateral-joins-or-cross-apply-to-your-sql-tool-chain/\" data-type=\"post\" data-id=\"2936\"\u003e\u003ccode\u003eCROSS APPLY\u003c/code\u003e operator\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere are multiple generated objects here:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eFCrossMultiplyRecord\u003c/code\u003e is a \u003ccode\u003e\u003ca href=\"https://www.jooq.org/javadoc/latest/org.jooq/org/jooq/TableRecord.html\" data-type=\"URL\" data-id=\"https://www.jooq.org/javadoc/latest/org.jooq/org/jooq/TableRecord.html\"\u003eTableRecord\u003c/a\u003e\u003c/code\u003e containing the rows produced by the \u003ccode\u003ef_cross_multiply\u003c/code\u003e function.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eRoutines.fCrossMultiply\u003c/code\u003e is a static-imported method that models an \u003ca href=\"https://blog.jooq.org/postgresqls-table-valued-functions/\" data-type=\"URL\" data-id=\"https://blog.jooq.org/postgresqls-table-valued-functions/\"\u003eembedded call to a table-valued function\u003c/a\u003e (standalone calls are also possible)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eUNumberTableRecord\u003c/code\u003e is a record representing the user-defined type \u003ccode\u003eu_number_table\u003c/code\u003e, which can be passed as a table valued parameter\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eUNumberTableElementTypeRecord\u003c/code\u003e is a synthetic record type for a single row of a \u003ccode\u003eu_number_table\u003c/code\u003e (more complex types with multiple attributes are possible, too!)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003ePrinting this result yields:\u003c/p\u003e\n\n\n\n\u003cpre\u003e+----+----+-------+\n|  i1|  i2|product|\n+----+----+-------+\n|   1|   1|      1|\n|   2|   1|      2|\n|   3|   1|      3|\n|   1|   2|      2|\n|   2|   2|      4|\n|   3|   2|      6|\n|   1|   3|      3|\n|   2|   3|      6|\n|   3|   3|      9|\n+----+----+-------+\u003c/pre\u003e\n\n\n\n\u003cp\u003eAlternatively, just use the generated code to access the result rows like this:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eresult.forEach(r -\u0026gt; {\n    System.out.println(\n        r.getI1() + \u0026#34; * \u0026#34; + r.getI2() + \u0026#34; = \u0026#34; + r.getProduct()\n    );\n});\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eTo get:\u003c/p\u003e\n\n\n\n\u003cpre\u003e1 * 1 = 1\n2 * 1 = 2\n3 * 1 = 3\n1 * 2 = 2\n2 * 2 = 4\n3 * 2 = 6\n1 * 3 = 3\n2 * 3 = 6\n3 * 3 = 9\u003c/pre\u003e\n\n\n\n\u003cp\u003eJust connect jOOQ’s code generator to your SQL Server database, and start calling your functions accepting table-valued parameters with ease!\u003c/p\u003e\n\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2023-04-25T12:16:30Z",
  "modifiedTime": "2023-04-25T12:16:30Z"
}
