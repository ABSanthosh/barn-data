{
  "id": "7d62c1c0-de0d-4556-b6e2-7f81f8fdf387",
  "title": "JavaScript and TypeScript Projects with React, Angular, or Vue in Visual Studio 2022 with or without .NET",
  "link": "http://feeds.hanselman.com/~/674283520/0/scotthanselman~JavaScript-and-TypeScript-Projects-with-React-Angular-or-Vue-in-Visual-Studio-with-or-without-NET",
  "description": "I was reading Gabby's blog post about the new TypeScript/JavaScript project experience in Visual Studio 2022. You should read the docs on JavaScript and TypeScript in Visual Studio 2022. If you're used to ASP.NET apps when you think about apps that are JavaScript heavy, \"front end apps\" or TypeScript focused, it can be confusing as to \"where does .NET fit in?\" You need to consider the responsibilities of your various projects or subsystems and the multiple totally valid ways you can build a web site or web app. Let's consider just a few: An ASP.NET Web app that renders HTML on the server but uses TS/JS This may have a Web API, Razor Pages, with or without the MVC pattern. You maybe have just added JavaScript via tags \u003cli\u003eMaybe you added a script minimizer/minifier task \u003cli\u003eCan be confusing because it can feel like your app needs to 'build both the client and the server' from one project\u003c/li\u003e\u003c/ul\u003e \u003cli\u003eA mostly JavaScript/TypeScript frontend app where the HTML could be served from any web server (node, kestrel, static web apps, nginx, etc) \u003cul\u003e \u003cli\u003eThis app may use Vue or React or Angular but it's not an \"ASP.NET app\" \u003cli\u003eIt calls backend Web APIs that may be served by ASP.NET, Azure Functions, 3rd party REST APIs, or all of the above \u003cli\u003eThis scenario has sometimes been confusing for ASP.NET developers who may get confused about responsibility. Who builds what, where do things end up, how do I build and deploy this?\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ol\u003e \u003cp\u003e\u003ca href=\"https://docs.microsoft.com/en-us/visualstudio/javascript/javascript-in-vs-2022?view=vs-2022\"\u003eVS2022\u003c/a\u003e brings JavaScript and TypeScript support into VS with a full JavaScript Language Service based on TS. It provides a TypeScript NuGet Package so you can build your whole app with MSBuild and VS will do the right thing.\u003c/p\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNEW: \u003c/strong\u003eStarting in Visual Studio 2022, there is a new JavaScript/TypeScript project type (.esproj) that allows you to create standalone Angular, React, and Vue projects in Visual Studio.\u003c/p\u003e\u003c/blockquote\u003e \u003cp\u003eThe .esproj concept is great for folks familiar with Visual Studio as we know that a Solution contains one or more Projects. Visual Studio manages files for a single application in a \u003cem\u003eProject\u003c/em\u003e. The project includes source code, resources, and configuration files. In this case we can have a .csproj for a backend Web API and an .esproj that uses a client side template like Angular, React, or Vue.\u003c/p\u003e \u003cp\u003eThing is, historically when Visual Studio supported Angular, React, or Vue, it's templates were out of date and not updated enough. VS2022 uses the native CLIs for these front ends, solving that problem with \u003ca href=\"https://angular.io/cli\"\u003eAngular CLI\u003c/a\u003e, \u003ca href=\"https://github.com/facebook/create-react-app\"\u003eCreate React App\u003c/a\u003e, and \u003ca href=\"https://cli.vuejs.org/\"\u003eVue CLI\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eIf I am in VS and go \"File New Project\" there are Standalone templates that solve Example 2 above. I'll pick JavaScript React.\u003c/p\u003e \u003cp\u003e\u003cimg title=\"Standalone JavaScript Templates in VS2022\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"Standalone JavaScript Templates in VS2022\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_8fbe4808-d001-4208-a77c-614f8ed4126d.png\" width=\"567\" height=\"610\"\u003e\u003c/p\u003e \u003cp\u003eThen I'll click \"Add integration for Empty ASP.NET Web API. This will give me a frontend with javascript ready to call a ASP.NET Web API backend. I'll \u003ca href=\"https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-asp-net-core-with-react?view=vs-2022\"\u003efollow along here\u003c/a\u003e.\u003c/p\u003e \u003cp\u003e\u003cimg title=\"Standalone JavaScript React Template\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"Standalone JavaScript React Template\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_bc274b03-19f1-4f1f-8fb8-f9d2f9dce344.png\" width=\"467\" height=\"119\"\u003e\u003c/p\u003e \u003cp\u003eIt then uses the React CLI to make the front end, which again, is cool as it's whatever version I want it to be.\u003c/p\u003e \u003cp\u003e\u003cimg title=\"React Create CLI\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"React Create CLI\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_3b618c5d-75cd-4dc3-b9c6-78be33dbe019.png\" width=\"600\" height=\"133\"\u003e\u003c/p\u003e \u003cp\u003eThen I'll add my ASP.NET Web API backend to the same solution, so now I have an esproj and a csproj like this\u003c/p\u003e \u003cp\u003e\u003cimg title=\"frontend and backend\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"frontend and backend\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_ecdd0c10-39eb-4eb9-aa87-6d9c712d362f.png\" width=\"221\" height=\"330\"\u003e\u003c/p\u003e \u003cp\u003eNow I have a nice clean two project system - in this case more JavaScript focused than .NET focused. This one uses npm to startup the project using their web development server and proxyMiddleware to proxy localhost:3000 calls over to the ASP.NET Web API project. \u003c/p\u003e \u003cp\u003eHere is a React app served by npm calling over to the Weather service served from Kestrel on ASP.NET.\u003c/p\u003e \u003cfigure\u003e\u003cimg title=\"npm app running in VS 2022 against an ASP.NET Web API\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px\" border=\"0\" alt=\"npm app running in VS 2022 against an ASP.NET Web API\" src=\"https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_5d1af2f4-4754-4aa8-9e24-8ab9fa23a01c.png\" width=\"915\" height=\"986\"\u003e\u003c/figure\u003e\u003cp\u003eThis is inverted than most ASP.NET Folks are used to, and that's OK. This shows me that Visual Studio 2022 can support either development style, use the CLI that is installed for whatever Frontend Framework, and allow me to choose what web server and web browser (via Launch.json) I want.\u003c/p\u003e \u003cp\u003eIf you want to flip it, and \u003ca href=\"https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-aspnet-with-typescript?view=vs-2022\"\u003eput ASP.NET Core as the primary and then bring in some TypeScript/JavaScript, follow this tutorial because\u003c/a\u003e that's also possible!\u003c/p\u003e \u003chr\u003e \u003cp\u003e\u003cstrong\u003eSponsor: \u003c/strong\u003eMake login Auth0’s problem. Not yours. Provide the convenient login features your customers want, like social login, multi-factor authentication, single sign-on, passwordless, and more. \u003ca href=\"http://pubads.g.doubleclick.net/gampad/clk?id=5840349572\u0026iu=/6839/lqm.scotthanselman.site\"\u003eGet started for free.\u003c/a\u003e\u003c/p\u003e\u003cbr/\u003e\u003chr/\u003e© 2021 Scott Hanselman. All rights reserved. \u003cbr/\u003e\u003c/div\u003e\u003cdiv style=\"clear:both;padding-top:0.2em;\"\u003e\u003ca title=\"Like on Facebook\" href=\"http://feeds.hanselman.com/_/28/674283520/scotthanselman\"\u003e\u003cimg height=\"20\" src=\"https://assets.feedblitz.com/i/fblike20.png\" style=\"border:0;margin:0;padding:0;\"\u003e\u003c/a\u003e \u003ca title=\"Post to X.com\" href=\"http://feeds.hanselman.com/_/24/674283520/scotthanselman\"\u003e\u003cimg height=\"20\" src=\"https://assets.feedblitz.com/i/x.png\" style=\"border:0;margin:0;padding:0;\"\u003e\u003c/a\u003e \u003ca title=\"Subscribe by email\" href=\"http://feeds.hanselman.com/_/19/674283520/scotthanselman\"\u003e\u003cimg height=\"20\" src=\"https://assets.feedblitz.com/i/email20.png\" style=\"border:0;margin:0;padding:0;\"\u003e\u003c/a\u003e \u003ca title=\"Subscribe by RSS\" href=\"http://feeds.hanselman.com/_/20/674283520/scotthanselman\"\u003e\u003cimg height=\"20\" src=\"https://assets.feedblitz.com/i/rss20.png\" style=\"border:0;margin:0;padding:0;\"\u003e\u003c/a\u003e \u003c/div\u003e",
  "author": "Scott Hanselman",
  "published": "Thu, 25 Nov 2021 20:50:00 GMT",
  "source": "http://feeds.hanselman.com/ScottHanselman",
  "categories": [
    "ASP.NET",
    "Javascript",
    "Web Services"
  ],
  "byline": "Scott Hanselman",
  "length": 4552,
  "excerpt": "I was reading Gabby's blog post about the new TypeScript/JavaScript project ...",
  "siteName": "",
  "favicon": "https://images.hanselman.com/main/apple-touch-icon-114x114.png",
  "text": "I was reading Gabby's blog post about the new TypeScript/JavaScript project experience in Visual Studio 2022. You should read the docs on JavaScript and TypeScript in Visual Studio 2022. If you're used to ASP.NET apps when you think about apps that are JavaScript heavy, \"front end apps\" or TypeScript focused, it can be confusing as to \"where does .NET fit in?\" You need to consider the responsibilities of your various projects or subsystems and the multiple totally valid ways you can build a web site or web app. Let's consider just a few: An ASP.NET Web app that renders HTML on the server but uses TS/JS This may have a Web API, Razor Pages, with or without the MVC pattern. You maybe have just added JavaScript via \u003cscript\u003e tags Maybe you added a script minimizer/minifier task Can be confusing because it can feel like your app needs to 'build both the client and the server' from one project A mostly JavaScript/TypeScript frontend app where the HTML could be served from any web server (node, kestrel, static web apps, nginx, etc) This app may use Vue or React or Angular but it's not an \"ASP.NET app\" It calls backend Web APIs that may be served by ASP.NET, Azure Functions, 3rd party REST APIs, or all of the above This scenario has sometimes been confusing for ASP.NET developers who may get confused about responsibility. Who builds what, where do things end up, how do I build and deploy this? VS2022 brings JavaScript and TypeScript support into VS with a full JavaScript Language Service based on TS. It provides a TypeScript NuGet Package so you can build your whole app with MSBuild and VS will do the right thing. NEW: Starting in Visual Studio 2022, there is a new JavaScript/TypeScript project type (.esproj) that allows you to create standalone Angular, React, and Vue projects in Visual Studio. The .esproj concept is great for folks familiar with Visual Studio as we know that a Solution contains one or more Projects. Visual Studio manages files for a single application in a Project. The project includes source code, resources, and configuration files. In this case we can have a .csproj for a backend Web API and an .esproj that uses a client side template like Angular, React, or Vue. Thing is, historically when Visual Studio supported Angular, React, or Vue, it's templates were out of date and not updated enough. VS2022 uses the native CLIs for these front ends, solving that problem with Angular CLI, Create React App, and Vue CLI. If I am in VS and go \"File New Project\" there are Standalone templates that solve Example 2 above. I'll pick JavaScript React. Then I'll click \"Add integration for Empty ASP.NET Web API. This will give me a frontend with javascript ready to call a ASP.NET Web API backend. I'll follow along here. It then uses the React CLI to make the front end, which again, is cool as it's whatever version I want it to be. Then I'll add my ASP.NET Web API backend to the same solution, so now I have an esproj and a csproj like this Now I have a nice clean two project system - in this case more JavaScript focused than .NET focused. This one uses npm to startup the project using their web development server and proxyMiddleware to proxy localhost:3000 calls over to the ASP.NET Web API project. Here is a React app served by npm calling over to the Weather service served from Kestrel on ASP.NET. This is inverted than most ASP.NET Folks are used to, and that's OK. This shows me that Visual Studio 2022 can support either development style, use the CLI that is installed for whatever Frontend Framework, and allow me to choose what web server and web browser (via Launch.json) I want. If you want to flip it, and put ASP.NET Core as the primary and then bring in some TypeScript/JavaScript, follow this tutorial because that's also possible! Sponsor: Make login Auth0’s problem. Not yours. Provide the convenient login features your customers want, like social login, multi-factor authentication, single sign-on, passwordless, and more. Get started for free. About Scott Scott Hanselman is a former professor, former Chief Architect in finance, now speaker, consultant, father, diabetic, and Microsoft employee. He is a failed stand-up comic, a cornrower, and a book author. About   Newsletter Hosting By",
  "image": "https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_8fbe4808-d001-4208-a77c-614f8ed4126d.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n            \n            \u003cp\u003eI was reading \u003ca href=\"https://devblogs.microsoft.com/visualstudio/the-new-javascript-typescript-experience-in-vs-2022-preview-3/\"\u003eGabby\u0026#39;s blog post about the new TypeScript/JavaScript project experience in Visual Studio 2022\u003c/a\u003e. You should read the docs on \u003ca href=\"https://docs.microsoft.com/en-us/visualstudio/javascript/javascript-in-vs-2022?view=vs-2022\"\u003eJavaScript and TypeScript in Visual Studio 2022\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eIf you\u0026#39;re used to ASP.NET apps when you think about apps that are JavaScript heavy, \u0026#34;front end apps\u0026#34; or TypeScript focused, it can be confusing as to \u0026#34;where does .NET fit in?\u0026#34;\u003c/p\u003e \u003cp\u003eYou need to consider the responsibilities of your various projects or subsystems and the multiple totally valid ways you can build a web site or web app. Let\u0026#39;s consider just a few:\u003c/p\u003e \u003col\u003e \u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-aspnet-with-typescript?view=vs-2022\"\u003eAn ASP.NET Web app that renders HTML on the server but uses TS/JS\u003c/a\u003e  \u003cul\u003e \u003cli\u003eThis may have a Web API, Razor Pages, with or without the MVC pattern.  \u003c/li\u003e\u003cli\u003eYou maybe have just added JavaScript via \u0026lt;script\u0026gt; tags  \u003c/li\u003e\u003cli\u003eMaybe you added a script minimizer/minifier task  \u003c/li\u003e\u003cli\u003eCan be confusing because it can feel like your app needs to \u0026#39;build both the client and the server\u0026#39; from one project\u003c/li\u003e\u003c/ul\u003e \u003c/li\u003e\u003cli\u003eA mostly JavaScript/TypeScript frontend app where the HTML could be served from any web server (node, kestrel, static web apps, nginx, etc)  \u003cul\u003e \u003cli\u003eThis app may use Vue or React or Angular but it\u0026#39;s not an \u0026#34;ASP.NET app\u0026#34;  \u003c/li\u003e\u003cli\u003eIt calls backend Web APIs that may be served by ASP.NET, Azure Functions, 3rd party REST APIs, or all of the above  \u003c/li\u003e\u003cli\u003eThis scenario has sometimes been confusing for ASP.NET developers who may get confused about responsibility. Who builds what, where do things end up, how do I build and deploy this?\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ol\u003e \u003cp\u003e\u003ca href=\"https://docs.microsoft.com/en-us/visualstudio/javascript/javascript-in-vs-2022?view=vs-2022\"\u003eVS2022\u003c/a\u003e brings JavaScript and TypeScript support into VS with a full JavaScript Language Service based on TS. It provides a TypeScript NuGet Package so you can build your whole app with MSBuild and VS will do the right thing.\u003c/p\u003e \u003cblockquote\u003e \u003cp\u003e\u003cstrong\u003eNEW: \u003c/strong\u003eStarting in Visual Studio 2022, there is a new JavaScript/TypeScript project type (.esproj) that allows you to create standalone Angular, React, and Vue projects in Visual Studio.\u003c/p\u003e\u003c/blockquote\u003e \u003cp\u003eThe .esproj concept is great for folks familiar with Visual Studio as we know that a Solution contains one or more Projects. Visual Studio manages files for a single application in a \u003cem\u003eProject\u003c/em\u003e. The project includes source code, resources, and configuration files. In this case we can have a .csproj for a backend Web API and an .esproj that uses a client side template like Angular, React, or Vue.\u003c/p\u003e \u003cp\u003eThing is, historically when Visual Studio supported Angular, React, or Vue, it\u0026#39;s templates were out of date and not updated enough. VS2022 uses the native CLIs for these front ends, solving that problem with \u003ca href=\"https://angular.io/cli\"\u003eAngular CLI\u003c/a\u003e, \u003ca href=\"https://github.com/facebook/create-react-app\"\u003eCreate React App\u003c/a\u003e, and \u003ca href=\"https://cli.vuejs.org/\"\u003eVue CLI\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eIf I am in VS and go \u0026#34;File New Project\u0026#34; there are Standalone templates that solve Example 2 above. I\u0026#39;ll pick JavaScript React.\u003c/p\u003e \u003cp\u003e\u003cimg title=\"Standalone JavaScript Templates in VS2022\" alt=\"Standalone JavaScript Templates in VS2022\" src=\"https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/97390fb5b7df_12523/image_8fbe4808-d001-4208-a77c-614f8ed4126d.png\" width=\"567\" height=\"610\"/\u003e\u003c/p\u003e \u003cp\u003eThen I\u0026#39;ll click \u0026#34;Add integration for Empty ASP.NET Web API. This will give me a frontend with javascript ready to call a ASP.NET Web API backend. I\u0026#39;ll \u003ca href=\"https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-asp-net-core-with-react?view=vs-2022\"\u003efollow along here\u003c/a\u003e.\u003c/p\u003e \u003cp\u003e\u003cimg title=\"Standalone JavaScript React Template\" alt=\"Standalone JavaScript React Template\" src=\"https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/97390fb5b7df_12523/image_bc274b03-19f1-4f1f-8fb8-f9d2f9dce344.png\" width=\"467\" height=\"119\"/\u003e\u003c/p\u003e \u003cp\u003eIt then uses the React CLI to make the front end, which again, is cool as it\u0026#39;s whatever version I want it to be.\u003c/p\u003e \u003cp\u003e\u003cimg title=\"React Create CLI\" alt=\"React Create CLI\" src=\"https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/97390fb5b7df_12523/image_3b618c5d-75cd-4dc3-b9c6-78be33dbe019.png\" width=\"600\" height=\"133\"/\u003e\u003c/p\u003e \u003cp\u003eThen I\u0026#39;ll add my ASP.NET Web API backend to the same solution, so now I have an esproj and a csproj like this\u003c/p\u003e \u003cp\u003e\u003cimg title=\"frontend and backend\" alt=\"frontend and backend\" src=\"https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/97390fb5b7df_12523/image_ecdd0c10-39eb-4eb9-aa87-6d9c712d362f.png\" width=\"221\" height=\"330\"/\u003e\u003c/p\u003e \u003cp\u003eNow I have a nice clean two project system - in this case more JavaScript focused than .NET focused. This one uses npm to startup the project using their web development server and proxyMiddleware to proxy localhost:3000 calls over to the ASP.NET Web API project. \u003c/p\u003e \u003cp\u003eHere is a React app served by npm calling over to the Weather service served from Kestrel on ASP.NET.\u003c/p\u003e \u003cfigure\u003e\u003cimg title=\"npm app running in VS 2022 against an ASP.NET Web API\" alt=\"npm app running in VS 2022 against an ASP.NET Web API\" src=\"https://hanselmanblogcontent.azureedge.net/Windows-Live-Writer/97390fb5b7df_12523/image_5d1af2f4-4754-4aa8-9e24-8ab9fa23a01c.png\" width=\"915\" height=\"986\"/\u003e\u003c/figure\u003e\u003cp\u003eThis is inverted than most ASP.NET Folks are used to, and that\u0026#39;s OK. This shows me that Visual Studio 2022 can support either development style, use the CLI that is installed for whatever Frontend Framework, and allow me to choose what web server and web browser (via Launch.json) I want.\u003c/p\u003e \u003cp\u003eIf you want to flip it, and \u003ca href=\"https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-aspnet-with-typescript?view=vs-2022\"\u003eput ASP.NET Core as the primary and then bring in some TypeScript/JavaScript, follow this tutorial because\u003c/a\u003e that\u0026#39;s also possible!\u003c/p\u003e \u003chr/\u003e  \u003cp\u003e\u003cstrong\u003eSponsor: \u003c/strong\u003eMake login Auth0’s problem. Not yours. Provide the convenient login features your customers want, like social login, multi-factor authentication, single sign-on, passwordless, and more. \u003ca href=\"http://pubads.g.doubleclick.net/gampad/clk?id=5840349572\u0026amp;iu=/6839/lqm.scotthanselman.site\"\u003eGet started for free.\u003c/a\u003e\u003c/p\u003e\n\n\n\n            \u003cdiv\u003e\n                \u003cdiv\u003e\n                    \u003ch4\u003eAbout Scott\u003c/h4\u003e\n                    \u003cdiv\u003e\n                        \u003cp\u003eScott Hanselman is a former professor, former Chief Architect in finance, now speaker, consultant, father, diabetic, and Microsoft employee. He is a failed stand-up comic, a cornrower, and a book author.\u003c/p\u003e\n                        \u003cp\u003e\u003ca href=\"https://facebook.com/shanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-fb.png\" alt=\"facebook\"/\u003e\u003c/a\u003e\n                        \u003ca href=\"https://twitter.com/shanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-twitter.png\" alt=\"twitter\"/\u003e\u003c/a\u003e\n                        \u003ca href=\"http://feeds.hanselman.com/ScottHanselman\"\u003e\u003cimg src=\"http://images.hanselman.com/main/icon-rss.png\" alt=\"subscribe\"/\u003e\u003c/a\u003e\u003cbr/\u003e\n                        \u003ca href=\"http://hanselman.com/about\"\u003eAbout\u003c/a\u003e   \u003ca href=\"http://www.hanselman.com/newsletter\"\u003eNewsletter\u003c/a\u003e\n                    \u003c/p\u003e\u003c/div\u003e\n                \u003c/div\u003e\n\n                \u003cdiv\u003e\n                    \u003cp\u003e\u003cstrong\u003eHosting By\u003c/strong\u003e\u003cbr/\u003e\n                        \u003ca rel=\"nofollow\" href=\"https://azure.microsoft.com/free\"\u003e\u003cimg alt=\"Hosted in an Azure App Service\" width=\"125\" height=\"125\" src=\"http://images.hanselman.com/main/azure-250x250.png\"/\u003e\u003c/a\u003e\n                    \u003c/p\u003e\n\n                \u003c/div\u003e\n            \u003c/div\u003e\n\n            \n\n\n            \n\n            \n        \u003c/section\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
