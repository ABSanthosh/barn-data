{
  "id": "bd1563e2-f954-4743-a3f8-2c389b5c8e79",
  "title": "How to Generate Package Private Code with jOOQ’s Code Generator",
  "link": "https://blog.jooq.org/how-to-generate-package-private-code-with-jooqs-code-generator/",
  "description": "Java’s package private visibility is an underrated feature. When you omit any visibility modifier in Java, then the default (for most objects) is package private, i.e. the object is visible only to types in the same package: In fact, a compilation unit (the .java file) can contain multiple such classes. You don’t have to create … Continue reading How to Generate Package Private Code with jOOQ’s Code Generator →",
  "author": "lukaseder",
  "published": "Wed, 28 Jun 2023 15:54:18 +0000",
  "source": "https://blog.jooq.org/feed",
  "categories": [
    "jooq-in-use",
    "code generator",
    "jooq",
    "jOOQ code generator",
    "Modularity",
    "package private",
    "visibility",
    "visibility modifier"
  ],
  "byline": "Published by lukaseder I made jOOQ View all posts by lukaseder",
  "length": 2493,
  "excerpt": "This article shows a simple example configuration of the jOOQ code generator for keeping generated output in a single package, and making it package private",
  "siteName": "Java, SQL and jOOQ.",
  "favicon": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=180%2C180\u0026ssl=1",
  "text": "Java’s package private visibility is an underrated feature. When you omit any visibility modifier in Java, then the default (for most objects) is package private, i.e. the object is visible only to types in the same package: class YouDontSeeMe {} class YouDontSeeMeEither {} In fact, a compilation unit (the .java file) can contain multiple such classes. You don’t have to create a file per package private type. You could even put all of these types in your package-info.java file, it doesn’t matter. When using jOOQ’s code generator, things are generated as public types per default, as you are likely going to use this generated code everywhere. You can still restrict access using Java 9’s module system if you want. But occasionally, even with jOOQ generated code, package private visibility can be useful, if some data access package wants to hide its implementation details from other packages in the module. Here’s an example code generation configuration to make this happen: \u003cconfiguration\u003e \u003cgenerator\u003e \u003cstrategy\u003e \u003cname\u003ecom.example.codegen.SinglePackageStrategy\u003c/name\u003e \u003c!-- Generates all objects in the same package --\u003e \u003c!-- Starting from jOOQ 3.19, you can declare the strategy code here This will simplify your code generation setup. In older versions, just put the class in an auxiliary build module and add it as a dependency. --\u003e \u003cjava\u003e\u003c![CDATA[package com.example.codegen; import org.jooq.codegen.DefaultGeneratorStrategy; import org.jooq.codegen.GeneratorStrategy.Mode; import org.jooq.meta.Definition; public class SinglePackageStrategy extends DefaultGeneratorStrategy { @Override public String getJavaPackageName(Definition definition, Mode mode) { return getTargetPackage(); } }]]\u003e\u003c/java\u003e \u003c/strategy\u003e \u003cgenerate\u003e \u003c!-- Removes the \"public\" visibility modifier everywhere --\u003e \u003cvisibilityModifier\u003eNONE\u003c/visibilityModifier\u003e \u003c/generate\u003e \u003ctarget\u003e \u003cpackageName\u003ecom.example\u003c/packageName\u003e \u003c!-- This may be important if generating code in src/main/java! It will prevent cleaning the other package directory contents. Alternatively, use a separate target \u003cdirectory/\u003e --\u003e \u003cclean\u003efalse\u003c/clean\u003e \u003c/target\u003e \u003c/generator\u003e \u003c/configuration\u003e That wasn’t too hard? Using this approach, you can ensure that your jOOQ generated code never leaks into any client code that shouldn’t see jOOQ types.",
  "image": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=750%2C750\u0026ssl=1",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"post-12178\"\u003e\n\t\n\t\n\t\u003cdiv\u003e\n\t\t\n\u003cp\u003eJava’s package private visibility is an underrated feature. When you omit any visibility modifier in Java, then the default (for most objects) is package private, i.e. the object is visible only to types in the same package:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eclass YouDontSeeMe {}\nclass YouDontSeeMeEither {}\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eIn fact, a compilation unit (the \u003ccode\u003e.java\u003c/code\u003e file) can contain multiple such classes. You don’t have to create a file per package private type. You could even put all of these types in your \u003ccode\u003epackage-info.java\u003c/code\u003e file, it doesn’t matter.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen using \u003ca href=\"https://blog.jooq.org/why-you-should-use-jooq-with-code-generation/\" data-type=\"URL\" data-id=\"https://blog.jooq.org/why-you-should-use-jooq-with-code-generation/\"\u003ejOOQ’s code generator\u003c/a\u003e, things are generated as \u003ccode\u003epublic\u003c/code\u003e types per default, as you are likely going to use this generated code everywhere. You can still restrict access using Java 9’s \u003ccode\u003emodule\u003c/code\u003e system if you want.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut occasionally, even with jOOQ generated code, package private visibility can be useful, if some data access package wants to hide its implementation details from other packages in the module.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s an example code generation configuration to make this happen:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003e\u0026lt;configuration\u0026gt;\n  \u0026lt;generator\u0026gt;\n    \u0026lt;strategy\u0026gt;\n      \u0026lt;name\u0026gt;com.example.codegen.SinglePackageStrategy\u0026lt;/name\u0026gt;\n\n      \u0026lt;!-- Generates all objects in the same package --\u0026gt;\n      \u0026lt;!-- Starting from jOOQ 3.19, you can declare the strategy code here\n           This will simplify your code generation setup. In older\n           versions, just put the class in an auxiliary build module and\n           add it as a dependency.\n        --\u0026gt;\n      \u0026lt;java\u0026gt;\u0026lt;![CDATA[package com.example.codegen;\n\nimport org.jooq.codegen.DefaultGeneratorStrategy;\nimport org.jooq.codegen.GeneratorStrategy.Mode;\nimport org.jooq.meta.Definition;\n\npublic class SinglePackageStrategy extends DefaultGeneratorStrategy {\n    @Override\n    public String getJavaPackageName(Definition definition, Mode mode) {\n        return getTargetPackage();\n    }\n}]]\u0026gt;\u0026lt;/java\u0026gt;\n    \u0026lt;/strategy\u0026gt;\n\n    \u0026lt;generate\u0026gt;\n\n      \u0026lt;!-- Removes the \u0026#34;public\u0026#34; visibility modifier everywhere --\u0026gt;\n      \u0026lt;visibilityModifier\u0026gt;NONE\u0026lt;/visibilityModifier\u0026gt;\n    \u0026lt;/generate\u0026gt;\n\n    \u0026lt;target\u0026gt;\n      \u0026lt;packageName\u0026gt;com.example\u0026lt;/packageName\u0026gt;\n\n      \u0026lt;!-- This may be important if generating code in src/main/java! \n           It will prevent cleaning the other package directory contents.\n           Alternatively, use a separate target \u0026lt;directory/\u0026gt;\n        --\u0026gt;\n      \u0026lt;clean\u0026gt;false\u0026lt;/clean\u0026gt;\n    \u0026lt;/target\u0026gt;\n  \u0026lt;/generator\u0026gt;\n\u0026lt;/configuration\u0026gt;\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eThat wasn’t too hard? Using this approach, you can ensure that your jOOQ generated code never leaks into any client code that shouldn’t see jOOQ types.\u003c/p\u003e\n\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2023-06-28T15:54:18Z",
  "modifiedTime": "2023-06-28T15:54:18Z"
}
