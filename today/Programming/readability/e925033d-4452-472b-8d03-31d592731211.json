{
  "id": "e925033d-4452-472b-8d03-31d592731211",
  "title": "QCon San Francisco 2024 Day 2: Shift-Left, GenAI, Engineering Productivity, Languages/Paradigms",
  "link": "https://www.infoq.com/news/2024/11/day-two-qcon-sf-2024/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "The 18th annual QCon San Francisco conference was held at the Hyatt Regency San Francisco in San Francisco, California. This five-day event, organized by C4Media, consists of three days of presentations and two days of workshops. Day Two, scheduled on November 19th, 2024, included a keynote address by Lizzie Matusov and presentations from four conference tracks. By Michael Redlich",
  "author": "Michael Redlich",
  "published": "Sun, 24 Nov 2024 22:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Java",
    "Platform Engineering",
    "Legacy Code",
    "QCon San Francisco 2024",
    "Apache Iceberg",
    "Large language models",
    "Development",
    "Architecture \u0026 Design",
    "news"
  ],
  "byline": "Michael Redlich",
  "length": 10171,
  "excerpt": "The 18th annual QCon San Francisco conference was held at the Hyatt Regency San Francisco in San Francisco, California. This five-day event, organized by C4Media, consists of three days of presentatio",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241119073511/apple-touch-icon.png",
  "text": "Day Two of the 18th annual QCon San Francisco conference was held on November 19th, 2024, at the Hyatt Regency in San Francisco, California. Key takeaways included: the hidden social drivers behind high-performing engineering teams; challenges in refactoring stubborn legacy systems; improved incremental processing with Netflix Maestro and Apache Iceberg; and lessons learned in building LLM platforms. What follows is a summary of the keynote address and highlighted presentations. Keynote Address: The (Not So) Hidden Social Drivers Behind the Highest Performing Engineering Teams Lizzie Matusov, Co-Founder and CEO at Quotient and Official Member Forbes Technology Council, presented her keynote address entitled, The (Not So) Hidden Social Drivers Behind the Highest Performing Engineering Teams. Matusov kicked off her presentation with a quick journey into her experiences of software teams at Red Hat and discovered that social drivers are key to successful teams. Matusov maintained: Without knowing the social drivers that impact a team, we don't know how our team will perform under different circumstances. Data has shown how high performing teams demonstrating speed and quality can have a low rate psychological safety and high rate burnout. Matusov showed a cartoon of a development team where one of the team members discovered a bug right before product launch. The TAPPs Framework includes: trust; autonomy; purpose; and psychological safety. The team member who discovered the bug may experience low or high degrees of these attributes. Trust is the belief among team members that each person will reliably contribute, communicate openly, and support the shared objectives. Trust unlocks open communication, faster problem solving and less rework. Autonomy is the ability of software engineers and teams to make decisions independently regarding their work. Autonomy empowers engineers to make decisions and solve problems faster. Purpose is a clear, shared understanding of why the team's work matters and how it aligns with broader organizational goals. According to the 2024 DORA Report, with higher user-centricity, delivery throughput does not correlate with product performance. The report explains the reasoning as: Suddenly, work has meaning...there is no longer a disconnect between the software that is developed and the world in which it lives. Psychological Safety is a shared belief among teammates that they can take interpersonal risks - such as speaking up, asking questions, or admitting mistakes - without the fear of negative consequences. She was also keen to ensure the audience was aware of what psychological safety is not as described by Dr. Amy Edmonson, Novartis Professor of Leadership and Management at the Harvard Business School: The term implies to people a sense of coziness...that we're all going to be nice to each other. That's not what it's really about. What it's about is candor; what it's about is being direct, taking risks, being willing to say, I screwed up. The team member who discovered the bug may experience low psychological safety or high psychological safety in this scenario as shown in the graph below. Psychological safety enables risk-taking, honest communication, and greater innovation. Measurement (Who and How) involves who is involved in the data. Software engineers generally contribute to the data, but managers and executives view and analyze the data. Matusov maintains that software engineers should also view and analyze the data. To contribute to data, teams must trust the data. In short, building alignment builds results. Matusov closed with these key takeaways: To capture the top social drivers behind engineering team performance, use the TAPPs framework. Autonomy empowers engineers to make decisions and solve problems faster. Purpose aligns engineers' work to the customers they serve. Psychological Safety enable risk-taking, honest communication, and greater innovation. For best results, engineers should have visibility into data collection and analysis. The best way to measure social drivers is through anonymous, aggregated surveys. To get started today, teams should: build a consistent process; review data regularly; and drive actions and improvements. When we know the top social drivers that impact a team, we can create a happier, higher-performing engineering culture. Highlighted Presentations: Refactoring Legacy Code | Efficient Incremental Processing | A Framework for Building Micro Metrics for LLM System Evaluation Refactoring Stubborn, Legacy Codebases was presented by Jake Zimmerman, Technical Lead of Sorbet at Stripe, and Getty Ritter, Ruby Infrastructure Engineer at Stripe. Zimmerman kicked off the presentation on common complaints about stubborn codebases. Zimmer maintained that we can refactor to a happy state. The best way to centralize a refactoring involves having one team drive it in such a way to concentrate on expertise, incentivize automation and a higher probability of finishing. A centralized migration needs two things: leverage over the codebase; and a method to \"ratchet\" incremental progress. With this in mind, Zimmerman introduced Sorbet, a type checker for Ruby. He maintained: To refactor a large, stubborn codebase, you need to have a point of leverage and to pick good ratchets. According to a 2017 company survey, developers at Stripes were unhappy and logged many complaints. Building Sorbet was key to address all of these complaints and introduced points of leverage to address them. Use of ratcheting is achieved with the # typed comments located at the top of each file. It acts like a ratchet because it's easy to \"go up a little.\" Valid use of this construct is: # typed: false is used for syntax and constants # typed: true is used for inference in methods # typed: strict is used for every method that needs a signature As a result, there was an improvement in developer satisfaction because a significant amount of the large, stubborn codebase was refactored, having a point of leverage using Sorbet and selecting good ratchets. Ritter discussed why modularity is important with an example of a simple logger application containing personally identifiable information. The solution, however, can create tangled code despite writing well-intentioned code. Ritter discussed two points of leverage: Packaging, which is inherent in Sorbet, but isn't enough to address modularity: and Layering, the \"essential principle is that any element of a layer depends only on other elements in the same layer or on elements of the layer 'beneath' it. Communication upward must pass through some indirect mechanism\" as defined by Eric Evans. Ritter provided many code examples of layering, using ratchets that Zimmerman had earlier described, and the attributes of what makes a good ratchet. How can this all fall apart? Walter J. Savitch, relaying a quote overheard at a computer science conference, stated: In theory, there is no difference between theory and practice. In practice, there is. Tools aren't always perfect at first, said Ritter, and recommended to not rush the launch of a project. One team can refactor a larger, stubborn codebase. Efficient Incremental Processing with Netflix Maestro and Apache Iceberg was presented by Jun He, Staff Software Engineer at Netflix. Jun kicked off his presentation with common problems at Netflix: data accuracy; data freshness; and cost efficiency. Incremental Processing is an approach to process data in batch, but only on new or changed data. The intent is to capture incremental data changes and track their states regardless of how a change is processed. Jun introduced Apache Iceberg, a high performance format for huge analytic tables. Key concepts include: catalog, table, snapshot, data file, partition, and Netflix Maestro, a horizontally scalable workflow orchestrator. Incremental Processing Support (IPS) provides a clean and easy-to-adopt solution for the efficient incremental processing that addresses the aforementioned three common problems. Incremental Change Capture defines how to efficiently capture the data change using Apache Iceberg metadata related to new and updated files. Key takeaways on rethinking batch the Extract, Transform, Load (ETL) pipeline included: Efficient Capturing: the Apache Iceberg metadata enables incremental processing without accessing the data Simplified Adoption: decoupling change capture reduces complexity Improved Experience: clean interfaces improve usability New Patterns: IPS patterns apply to many scenarios Jun concluded his presentation by describing planned, future improvements to the platform. A Framework for Building Micro Metrics for LLM System Evaluation was presented by Denys Linkov, Head of Machine Learning at Voiceflow and LinkedIn Learning Instructor. Linkov kicked off his presentation by asking the question: \"So you're thinking about changing a system prompt?\" Building LLM platforms is challenging as the process may be moving along nicely until there are unexpected consequences. Linkov introduced his five lessons and described each one in detail: The flaws of one metric (single metrics are flawed) Models as systems (recommended) Build metrics that alert of user issues (recommended) Focus on business metrics (recommended) Crawl, walk, run (don't overcomplicate things) What makes a good LLM response can be a philosophical question. LLMs generate plausible responses, but folks don't often agree on what is good. Conclusion QCon San Francisco, a five-day event, consisting of three days of presentations and two days of workshops, is organized by C4Media, a software media company focused on unbiased content and information in the enterprise development community and creators of InfoQ and QCon. For details on some of the conference tracks, check out these Software Architecture and Artificial Intelligence and Machine Learning news items. About the Author Michael Redlich",
  "image": "https://res.infoq.com/news/2024/11/day-two-qcon-sf-2024/en/headerimage/java-istock-image-01-1732485257501.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eDay Two of the 18th annual \u003ca href=\"https://qconsf.com/\"\u003eQCon San Francisco\u003c/a\u003e conference was held on November 19th, 2024, at the \u003ca href=\"https://www.hyatt.com/en-US/hotel/california/hyatt-regency-san-francisco/sfors\"\u003eHyatt Regency\u003c/a\u003e in San Francisco, California. Key takeaways included: the hidden social drivers behind high-performing engineering teams; challenges in refactoring stubborn legacy systems; improved incremental processing with Netflix Maestro and Apache Iceberg; and lessons learned in building LLM platforms.\u003c/p\u003e\n\n\u003cp\u003eWhat follows is a summary of the keynote address and highlighted presentations.\u003c/p\u003e\n\n\u003ch4\u003eKeynote Address: The (Not So) Hidden Social Drivers Behind the Highest Performing Engineering Teams\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://qconsf.com/speakers/lizziematusov\"\u003eLizzie Matusov\u003c/a\u003e, Co-Founder and CEO at Quotient and Official Member Forbes Technology Council, presented her keynote address entitled, \u003ca href=\"https://qconsf.com/keynote/nov2024/not-so-hidden-social-drivers-behind-highest-performing-engineering-teams\"\u003eThe (Not So) Hidden Social Drivers Behind the Highest Performing Engineering Teams\u003c/a\u003e. Matusov kicked off her presentation with a quick journey into her experiences of software teams at Red Hat and discovered that social drivers are key to successful teams. Matusov maintained:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWithout knowing the social drivers that impact a team, we don\u0026#39;t know how our team will perform under different circumstances.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eData has shown how high performing teams demonstrating speed and quality can have a low rate psychological safety and high rate burnout.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2024/11/day-two-qcon-sf-2024/en/resources/1infoq-social-drivers-slide-1732485255895.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/11/day-two-qcon-sf-2024/en/resources/1infoq-social-drivers-slide-1732485255895.jpg\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eMatusov showed a cartoon of a development team where one of the team members discovered a bug right before product launch.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2024/11/day-two-qcon-sf-2024/en/resources/1infoq-setting-the-scene-1732485255895.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/11/day-two-qcon-sf-2024/en/resources/1infoq-setting-the-scene-1732485255895.jpg\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eTAPPs Framework \u003c/strong\u003eincludes: trust; autonomy; purpose; and psychological safety. The team member who discovered the bug may experience low or high degrees of these attributes.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eTrust\u003c/strong\u003e is the belief among team members that each person will reliably contribute, communicate openly, and support the shared objectives. Trust unlocks open communication, faster problem solving and less rework.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eAutonomy\u003c/strong\u003e is the ability of software engineers and teams to make decisions independently regarding their work. Autonomy empowers engineers to make decisions and solve problems faster.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePurpose\u003c/strong\u003e is a clear, shared understanding of why the team\u0026#39;s work matters and how it aligns with broader organizational goals. According to the \u003ca href=\"https://cloud.google.com/blog/products/devops-sre/announcing-the-2024-dora-report\"\u003e2024 DORA Report\u003c/a\u003e, with higher user-centricity, delivery throughput does not correlate with product performance. The report explains the reasoning as:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eSuddenly, work has meaning...there is no longer a disconnect between the software that is developed and the world in which it lives.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003ePsychological Safety\u003c/strong\u003e is a shared belief among teammates that they can take interpersonal risks - such as speaking up, asking questions, or admitting mistakes - without the fear of negative consequences. She was also keen to ensure the audience was aware of what psychological safety is \u003cstrong\u003enot\u003c/strong\u003e as described by \u003ca href=\"https://amycedmondson.com/about/\"\u003eDr. Amy Edmonson\u003c/a\u003e, Novartis Professor of Leadership and Management at the Harvard Business School:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe term implies to people a sense of coziness...that we\u0026#39;re all going to be nice to each other. That\u0026#39;s not what it\u0026#39;s really about. What it\u0026#39;s about is candor; what it\u0026#39;s about is being direct, taking risks, being willing to say, I screwed up.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe team member who discovered the bug may experience low psychological safety or high psychological safety in this scenario as shown in the graph below.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2024/11/day-two-qcon-sf-2024/en/resources/1infoq-psychological-safety-1732485255895.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/11/day-two-qcon-sf-2024/en/resources/1infoq-psychological-safety-1732485255895.jpg\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003ePsychological safety enables risk-taking, honest communication, and greater innovation.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eMeasurement (Who and How)\u003c/strong\u003e involves who is involved in the data. Software engineers generally contribute to the data, but managers and executives view and analyze the data. Matusov maintains that software engineers should also view and analyze the data. To contribute to data, teams must trust the data. In short, building alignment builds results.\u003c/p\u003e\n\n\u003cp\u003eMatusov closed with these key takeaways:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eTo capture the top social drivers behind engineering team performance, use the TAPPs framework.\u003c/li\u003e\n\t\u003cli\u003eAutonomy empowers engineers to make decisions and solve problems faster.\u003c/li\u003e\n\t\u003cli\u003ePurpose aligns engineers\u0026#39; work to the customers they serve.\u003c/li\u003e\n\t\u003cli\u003ePsychological Safety enable risk-taking, honest communication, and greater innovation.\u003c/li\u003e\n\t\u003cli\u003eFor best results, engineers should have visibility into data collection and analysis.\u003c/li\u003e\n\t\u003cli\u003eThe best way to measure social drivers is through anonymous, aggregated surveys.\u003c/li\u003e\n\t\u003cli\u003eTo get started today, teams should: \u003cstrong\u003ebuild\u003c/strong\u003e a consistent process; \u003cstrong\u003ereview\u003c/strong\u003e data regularly; and \u003cstrong\u003edrive\u003c/strong\u003e actions and improvements.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen we know the top social drivers that impact a team, we can create a happier, higher-performing engineering culture.\u003c/p\u003e\n\n\u003ch4\u003eHighlighted Presentations: Refactoring Legacy Code | Efficient Incremental Processing | A Framework for Building Micro Metrics for LLM System Evaluation\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://qconsf.com/presentation/nov2024/refactoring-stubborn-legacy-codebases\"\u003eRefactoring Stubborn, Legacy Codebases\u003c/a\u003e\u003c/strong\u003e was presented by \u003ca href=\"https://qconsf.com/speakers/jakezimmerman\"\u003eJake Zimmerman\u003c/a\u003e, Technical Lead of Sorbet at Stripe, and \u003ca href=\"https://qconsf.com/speakers/gettyritter\"\u003eGetty Ritter\u003c/a\u003e, Ruby Infrastructure Engineer at Stripe. Zimmerman kicked off the presentation on common complaints about stubborn codebases. Zimmer maintained that we can refactor to a happy state. The best way to centralize a refactoring involves having one team drive it in such a way to concentrate on expertise, incentivize automation and a higher probability of finishing.\u003c/p\u003e\n\n\u003cp\u003eA centralized migration needs two things: leverage over the codebase; and a method to \u0026#34;ratchet\u0026#34; incremental progress. With this in mind, Zimmerman introduced \u003ca href=\"https://sorbet.org/\"\u003eSorbet\u003c/a\u003e, a type checker for Ruby. He maintained:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTo refactor a large, stubborn codebase, you need to have a point of leverage and to pick good ratchets.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAccording to a 2017 company survey, developers at Stripes were unhappy and logged many complaints. Building Sorbet was key to address all of these complaints and introduced points of leverage to address them.\u003c/p\u003e\n\n\u003cp\u003eUse of ratcheting is achieved with the \u003cstrong\u003e\u003ccode\u003e# typed\u003c/code\u003e\u003c/strong\u003e comments located at the top of each file. It acts like a ratchet because it\u0026#39;s easy to \u0026#34;\u003cem\u003ego up a little.\u003c/em\u003e\u0026#34; Valid use of this construct is:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e# typed: false\u003c/code\u003e\u003c/strong\u003e is used for syntax and constants\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e# typed: true\u003c/code\u003e\u003c/strong\u003e is used for inference in methods\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e# typed: strict\u003c/code\u003e\u003c/strong\u003e is used for every method that needs a signature\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAs a result, there was an improvement in developer satisfaction because a significant amount of the large, stubborn codebase was refactored, having a point of leverage using Sorbet and selecting good ratchets.\u003c/p\u003e\n\n\u003cp\u003eRitter discussed why modularity is important with an example of a simple logger application containing personally identifiable information. The solution, however, can create tangled code despite writing well-intentioned code.\u003c/p\u003e\n\n\u003cp\u003eRitter discussed two points of leverage: \u003cstrong\u003ePackaging\u003c/strong\u003e, which is inherent in Sorbet, but isn\u0026#39;t enough to address modularity: and \u003cstrong\u003eLayering\u003c/strong\u003e, the \u0026#34;\u003cem\u003eessential principle is that any element of a layer depends only on other elements in the same layer or on elements of the layer \u0026#39;beneath\u0026#39; it. Communication upward must pass through some indirect mechanism\u003c/em\u003e\u0026#34; as defined by \u003ca href=\"https://www.linkedin.com/in/ericevansddd/\"\u003eEric Evans\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eRitter provided many code examples of layering, using ratchets that Zimmerman had earlier described, and the attributes of what makes a good ratchet.\u003c/p\u003e\n\n\u003cp\u003eHow can this all fall apart? \u003ca href=\"https://jacobsschool.ucsd.edu/people/profile/walter-savitch\"\u003eWalter J. Savitch\u003c/a\u003e, relaying a quote overheard at a computer science conference, stated:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn theory, there is no difference between theory and practice. In practice, there is.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eTools aren\u0026#39;t always perfect at first, said Ritter, and recommended to not rush the launch of a project. One team can refactor a larger, stubborn codebase.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://qconsf.com/presentation/nov2024/efficient-incremental-processing-netflix-maestro-and-apache-iceberg\"\u003eEfficient Incremental Processing with Netflix Maestro and Apache Iceberg\u003c/a\u003e\u003c/strong\u003e was presented by \u003ca href=\"https://qconsf.com/speakers/junhe\"\u003eJun He\u003c/a\u003e, Staff Software Engineer at Netflix. Jun kicked off his presentation with common problems at Netflix: data accuracy; data freshness; and cost efficiency.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIncremental Processing\u003c/strong\u003e is an approach to process data in batch, but only on new or changed data. The intent is to capture incremental data changes and track their states regardless of how a change is processed.\u003c/p\u003e\n\n\u003cp\u003eJun introduced \u003ca href=\"https://iceberg.apache.org/\"\u003eApache Iceberg\u003c/a\u003e, a high performance format for huge analytic tables. Key concepts include: catalog, table, snapshot, data file, partition, and \u003ca href=\"https://github.com/Netflix/maestro/blob/main/README.md\"\u003eNetflix Maestro\u003c/a\u003e, a horizontally scalable workflow orchestrator.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIncremental Processing Support\u003c/strong\u003e (IPS) provides a clean and easy-to-adopt solution for the efficient incremental processing that addresses the aforementioned three common problems.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIncremental Change Capture\u003c/strong\u003e defines how to efficiently capture the data change using Apache Iceberg metadata related to new and updated files.\u003c/p\u003e\n\n\u003cp\u003eKey takeaways on rethinking batch the Extract, Transform, Load (ETL) pipeline included:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eEfficient Capturing: the Apache Iceberg metadata enables incremental processing without accessing the data\u003c/li\u003e\n\t\u003cli\u003eSimplified Adoption: decoupling change capture reduces complexity\u003c/li\u003e\n\t\u003cli\u003eImproved Experience: clean interfaces improve usability\u003c/li\u003e\n\t\u003cli\u003eNew Patterns: IPS patterns apply to many scenarios\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eJun concluded his presentation by describing planned, future improvements to the platform.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://qconsf.com/presentation/nov2024/framework-building-micro-metrics-llm-system-evaluation\"\u003eA Framework for Building Micro Metrics for LLM System Evaluation\u003c/a\u003e\u003c/strong\u003e was presented by \u003ca href=\"https://qconsf.com/speakers/denyslinkov\"\u003eDenys Linkov\u003c/a\u003e, Head of Machine Learning at Voiceflow and LinkedIn Learning Instructor. Linkov kicked off his presentation by asking the question: \u0026#34;\u003cem\u003eSo you\u0026#39;re thinking about changing a system prompt?\u003c/em\u003e\u0026#34; Building LLM platforms is challenging as the process may be moving along nicely until there are unexpected consequences.\u003c/p\u003e\n\n\u003cp\u003eLinkov introduced his five lessons and described each one in detail:\u003c/p\u003e\n\n\u003col\u003e\n\t\u003cli\u003eThe flaws of one metric (single metrics are flawed)\u003c/li\u003e\n\t\u003cli\u003eModels as systems (recommended)\u003c/li\u003e\n\t\u003cli\u003eBuild metrics that alert of user issues (recommended)\u003c/li\u003e\n\t\u003cli\u003eFocus on business metrics (recommended)\u003c/li\u003e\n\t\u003cli\u003eCrawl, walk, run (don\u0026#39;t overcomplicate things)\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eWhat makes a good LLM response can be a philosophical question. LLMs generate plausible responses, but folks don\u0026#39;t often agree on what is good.\u003c/p\u003e\n\n\u003ch4\u003eConclusion\u003c/h4\u003e\n\n\u003cp\u003eQCon San Francisco, a five-day event, consisting of three days of presentations and two days of workshops, is organized by \u003ca href=\"https://c4media.com/\"\u003eC4Media\u003c/a\u003e, a software media company focused on unbiased content and information in the enterprise development community and creators of \u003ca href=\"https://www.infoq.com/\"\u003eInfoQ\u003c/a\u003e and \u003ca href=\"https://qconferences.com/\"\u003eQCon\u003c/a\u003e. For details on some of the conference tracks, check out these \u003ca href=\"https://www.infoq.com/news/2024/11/architecture-qcon-san-francisco/\"\u003eSoftware Architecture\u003c/a\u003e and \u003ca href=\"https://www.infoq.com/news/2024/10/ai-ml-qcon-san-francisco-2024/\"\u003eArtificial Intelligence and Machine Learning\u003c/a\u003e news items.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Michael-Redlich\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMichael Redlich\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2024-11-24T00:00:00Z",
  "modifiedTime": null
}
