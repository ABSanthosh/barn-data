{
  "id": "4b37cfef-7c1f-4498-9a1f-d56ea3020156",
  "title": "How Are Function Components Different from Classes?",
  "link": "https://overreacted.io/how-are-function-components-different-from-classes/",
  "description": "They’re a whole different Pokémon.",
  "author": "",
  "published": "Sun, 03 Mar 2019 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 16487,
  "excerpt": "They’re a whole different Pokémon.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "How do React function components differ from React classes? For a while, the canonical answer has been that classes provide access to more features (like state). With Hooks, that’s not true anymore. Maybe you’ve heard one of them is better for performance. Which one? Many of such benchmarks are flawed so I’d be careful drawing conclusions from them. Performance primarily depends on what the code is doing rather than whether you chose a function or a class. In our observation, the performance differences are negligible, though optimization strategies are a bit different. In either case we don’t recommend rewriting your existing components unless you have other reasons and don’t mind being an early adopter. Hooks are still new (like React was in 2014), and some “best practices” haven’t yet found their way into the tutorials. So where does that leave us? Are there any fundamental differences between React functions and classes at all? Of course, there are — in the mental model. In this post, I will look at the biggest difference between them. It existed ever since function components were introduced in 2015 but it’s often overlooked: Function components capture the rendered values. Let’s unpack what this means. Note: this post isn’t a value judgement of either classes or functions. I’m only describing the difference between these two programming models in React. For questions about adopting functions more widely, refer to the Hooks FAQ. Consider this component: function ProfilePage(props) { const showMessage = () =\u003e { alert('Followed ' + props.user); }; const handleClick = () =\u003e { setTimeout(showMessage, 3000); }; return ( \u003cbutton onClick={handleClick}\u003eFollow\u003c/button\u003e ); } It shows a button that simulates a network request with setTimeout and then shows a confirmation alert. For example, if props.user is 'Dan', it will show 'Followed Dan' after three seconds. Simple enough. (Note it doesn’t matter whether I use arrows or function declarations in the above example. function handleClick() would work exactly the same way.) How do we write it as a class? A naïve translation might look like this: class ProfilePage extends React.Component { showMessage = () =\u003e { alert('Followed ' + this.props.user); }; handleClick = () =\u003e { setTimeout(this.showMessage, 3000); }; render() { return \u003cbutton onClick={this.handleClick}\u003eFollow\u003c/button\u003e; } } It is common to think these two snippets of code are equivalent. People often freely refactor between these patterns without noticing their implications: However, these two snippets of code are subtly different. Take a good look at them. Do you see the difference yet? Personally, it took me a while to see this. There are spoilers ahead so here’s a live demo if you wanna figure it out on your own. The rest of this article explains the difference and why it matters. Before we continue, I’d like to emphasize that the difference I’m describing has nothing to do with React Hooks per se. Examples above don’t even use Hooks! It’s all about the difference between functions and classes in React. If you plan to use functions more often in a React app, you might want to understand it. We’ll illustrate the difference with a bug that is common in React applications. Open this example sandbox with a current profile selector and the two ProfilePage implementations from above — each rendering a Follow button. Try this sequence of actions with both buttons: Click one of the Follow buttons. Change the selected profile before 3 seconds pass. Read the alert text. You will notice a peculiar difference: With the above ProfilePage function, clicking Follow on Dan’s profile and then navigating to Sophie’s would still alert 'Followed Dan'. With the above ProfilePage class, it would alert 'Followed Sophie': In this example, the first behavior is the correct one. If I follow a person and then navigate to another person’s profile, my component shouldn’t get confused about who I followed. This class implementation is clearly buggy. (You should totally follow Sophie though.) So why does our class example behave this way? Let’s look closely at the showMessage method in our class: class ProfilePage extends React.Component { showMessage = () =\u003e { alert('Followed ' + this.props.user); }; This class method reads from this.props.user. Props are immutable in React so they can never change. However, this is, and has always been, mutable. Indeed, that’s the whole purpose of this in a class. React itself mutates it over time so that you can read the fresh version in the render and lifecycle methods. So if our component re-renders while the request is in flight, this.props will change. The showMessage method reads the user from the “too new” props. This exposes an interesting observation about the nature of user interfaces. If we say that a UI is conceptually a function of current application state, the event handlers are a part of the render result — just like the visual output. Our event handlers “belong” to a particular render with particular props and state. However, scheduling a timeout whose callback reads this.props breaks that association. Our showMessage callback is not “tied” to any particular render, and so it “loses” the correct props. Reading from this severed that connection. Let’s say function components didn’t exist. How would we solve this problem? We’d want to somehow “repair” the connection between the render with the correct props and the showMessage callback that reads them. Somewhere along the way the props get lost. One way to do it would be to read this.props early during the event, and then explicitly pass them through into the timeout completion handler: class ProfilePage extends React.Component { showMessage = (user) =\u003e { alert('Followed ' + user); }; handleClick = () =\u003e { const {user} = this.props; setTimeout(() =\u003e this.showMessage(user), 3000); }; render() { return \u003cbutton onClick={this.handleClick}\u003eFollow\u003c/button\u003e; } } This works. However, this approach makes the code significantly more verbose and error-prone with time. What if we needed more than a single prop? What if we also needed to access the state? If showMessage calls another method, and that method reads this.props.something or this.state.something, we’ll have the exact same problem again. So we would have to pass this.props and this.state as arguments through every method called from showMessage. Doing so defeats the ergonomics normally afforded by a class. It is also difficult to remember or enforce, which is why people often settle for bugs instead. Similarly, inlining the alert code inside handleClick doesn’t answer the bigger problem. We want to structure the code in a way that allows splitting it into more methods but also reading the props and state that correspond to the render related to that call. This problem isn’t even unique to React — you can reproduce it in any UI library that puts data into a mutable object like this. Perhaps, we could bind the methods in the constructor? class ProfilePage extends React.Component { constructor(props) { super(props); this.showMessage = this.showMessage.bind(this); this.handleClick = this.handleClick.bind(this); } showMessage() { alert('Followed ' + this.props.user); } handleClick() { setTimeout(this.showMessage, 3000); } render() { return \u003cbutton onClick={this.handleClick}\u003eFollow\u003c/button\u003e; } } No, this doesn’t fix anything. Remember, the problem is us reading from this.props too late — not with the syntax we’re using! However, the problem would go away if we fully relied on JavaScript closures. Closures are often avoided because it’s hard to think about a value that can be mutated over time. But in React, props and state are immutable! (Or at least, it’s a strong recommendation.) That removes a major footgun of closures. This means that if you close over props or state from a particular render, you can always count on them staying exactly the same: class ProfilePage extends React.Component { render() { // Capture the props! const props = this.props; // Note: we are *inside render*. // These aren't class methods. const showMessage = () =\u003e { alert('Followed ' + props.user); }; const handleClick = () =\u003e { setTimeout(showMessage, 3000); }; return \u003cbutton onClick={handleClick}\u003eFollow\u003c/button\u003e; } } You’ve “captured” props at the time of render: This way any code inside it (including showMessage) is guaranteed to see the props for this particular render. React doesn’t “move our cheese” anymore. We could then add as many helper functions inside as we want, and they would all use the captured props and state. Closures to the rescue! The example above is correct but it looks odd. What’s the point of having a class if you define functions inside render instead of using class methods? Indeed, we can simplify the code by removing the class “shell” around it: function ProfilePage(props) { const showMessage = () =\u003e { alert('Followed ' + props.user); }; const handleClick = () =\u003e { setTimeout(showMessage, 3000); }; return ( \u003cbutton onClick={handleClick}\u003eFollow\u003c/button\u003e ); } Just like above, the props are still being captured — React passes them as an argument. Unlike this, the props object itself is never mutated by React. It’s a bit more obvious if you destructure props in the function definition: function ProfilePage({ user }) { const showMessage = () =\u003e { alert('Followed ' + user); }; const handleClick = () =\u003e { setTimeout(showMessage, 3000); }; return ( \u003cbutton onClick={handleClick}\u003eFollow\u003c/button\u003e ); } When the parent component renders ProfilePage with different props, React will call the ProfilePage function again. But the event handler we already clicked “belonged” to the previous render with its own user value and the showMessage callback that reads it. They’re all left intact. This is why, in the function version of this demo, clicking Follow on Sophie’s profile and then changing selection to Sunil would alert 'Followed Sophie': This behavior is correct. (Although you might want to follow Sunil too!) Now we understand the big difference between functions and classes in React: Function components capture the rendered values. With Hooks, the same principle applies to state as well. Consider this example: function MessageThread() { const [message, setMessage] = useState(''); const showMessage = () =\u003e { alert('You said: ' + message); }; const handleSendClick = () =\u003e { setTimeout(showMessage, 3000); }; const handleMessageChange = (e) =\u003e { setMessage(e.target.value); }; return ( \u003c\u003e \u003cinput value={message} onChange={handleMessageChange} /\u003e \u003cbutton onClick={handleSendClick}\u003eSend\u003c/button\u003e \u003c/\u003e ); } (Here’s a live demo.) While this isn’t a very good message app UI, it illustrates the same point: if I send a particular message, the component shouldn’t get confused about which message actually got sent. This function component’s message captures the state that “belongs” to the render which returned the click handler called by the browser. So the message is set to what was in the input when I clicked “Send”. So we know functions in React capture props and state by default. But what if we want to read the latest props or state that don’t belong to this particular render? What if we want to “read them from the future”? In classes, you’d do it by reading this.props or this.state because this itself is mutable. React mutates it. In function components, you can also have a mutable value that is shared by all component renders. It’s called a “ref”: function MyComponent() { const ref = useRef(null); // You can read or write `ref.current`. // ... } However, you’ll have to manage it yourself. A ref plays the same role as an instance field. It’s the escape hatch into the mutable imperative world. You may be familiar with “DOM refs” but the concept is much more general. It’s just a box into which you can put something. Even visually, this.something looks like a mirror of something.current. They represent the same concept. By default, React doesn’t create refs for latest props or state in function components. In many cases you don’t need them, and it would be wasted work to assign them. However, you can track the value manually if you’d like: function MessageThread() { const [message, setMessage] = useState(''); const latestMessage = useRef(''); const showMessage = () =\u003e { alert('You said: ' + latestMessage.current); }; const handleSendClick = () =\u003e { setTimeout(showMessage, 3000); }; const handleMessageChange = (e) =\u003e { setMessage(e.target.value); latestMessage.current = e.target.value; }; If we read message in showMessage, we’ll see the message at the time we pressed the Send button. But when we read latestMessage.current, we get the latest value — even if we kept typing after the Send button was pressed. You can compare the two demos to see the difference yourself. A ref is a way to “opt out” of the rendering consistency, and can be handy in some cases. Generally, you should avoid reading or setting refs during rendering because they’re mutable. We want to keep the rendering predictable. However, if we want to get the latest value of a particular prop or state, it can be annoying to update the ref manually. We could automate it by using an effect: function MessageThread() { const [message, setMessage] = useState(''); // Keep track of the latest value. const latestMessage = useRef(''); useEffect(() =\u003e { latestMessage.current = message; }); const showMessage = () =\u003e { alert('You said: ' + latestMessage.current); }; (Here’s a demo.) We do the assignment inside an effect so that the ref value only changes after the DOM has been updated. This ensures our mutation doesn’t break features like Time Slicing and Suspense which rely on interruptible rendering. Using a ref like this isn’t necessary very often. Capturing props or state is usually a better default. However, it can be handy when dealing with imperative APIs like intervals and subscriptions. Remember that you can track any value like this — a prop, a state variable, the whole props object, or even a function. This pattern can also be handy for optimizations — such as when useCallback identity changes too often. However, using a reducer is often a better solution. (A topic for a future blog post!) In this post, we’ve looked at common broken pattern in classes, and how closures help us fix it. However, you might have noticed that when you try to optimize Hooks by specifying a dependency array, you can run into bugs with stale closures. Does it mean that closures are the problem? I don’t think so. As we’ve seen above, closures actually help us fix the subtle problems that are hard to notice. Similarly, they make it much easier to write code that works correctly in the Concurrent Mode. This is possible because the logic inside the component closes over the correct props and state with which it was rendered. In all cases I’ve seen so far, the “stale closures” problems happen due to a mistaken assumption that “functions don’t change” or that “props are always the same”. This is not the case, as I hope this post has helped to clarify. Functions close over their props and state — and so their identity is just as important. This is not a bug, but a feature of function components. Functions shouldn’t be excluded from the “dependencies array” for useEffect or useCallback, for example. (The right fix is usually either useReducer or the useRef solution above — we will soon document how to choose between them.) When we write the majority of our React code with functions, we need to adjust our intuition about optimizing code and what values can change over time. As Fredrik put it: The best mental rule I’ve found so far with hooks is ”code as if any value can change at any time”. Functions are no exception to this rule. It will take some time for this to be common knowledge in React learning materials. It requires some adjustment from the class mindset. But I hope this article helps you see it with fresh eyes. React functions always capture their values — and now we know why. They’re a whole different Pokémon.Discuss on 𝕏  ·  Edit on GitHub",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eHow do React function components differ from React classes?\u003c/p\u003e\n\u003cp\u003eFor a while, the canonical answer has been that classes provide access to more features (like state). With \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-intro.html\"\u003eHooks\u003c/a\u003e, that’s not true anymore.\u003c/p\u003e\n\u003cp\u003eMaybe you’ve heard one of them is better for performance. Which one? Many of such benchmarks are \u003ca target=\"_blank\" href=\"https://medium.com/@dan_abramov/this-benchmark-is-indeed-flawed-c3d6b5b6f97f?source=your_stories_page---------------------------\"\u003eflawed\u003c/a\u003e so I’d be careful \u003ca target=\"_blank\" href=\"https://github.com/ryardley/hooks-perf-issues/pull/2\"\u003edrawing conclusions\u003c/a\u003e from them. Performance primarily depends on what the code is doing rather than whether you chose a function or a class. In our observation, the performance differences are negligible, though optimization strategies are a bit \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render\"\u003edifferent\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn either case we \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-hooks-classes-or-a-mix-of-both\"\u003edon’t recommend\u003c/a\u003e rewriting your existing components unless you have other reasons and don’t mind being an early adopter. Hooks are still new (like React was in 2014), and some “best practices” haven’t yet found their way into the tutorials.\u003c/p\u003e\n\u003cp\u003eSo where does that leave us? Are there any fundamental differences between React functions and classes at all? Of course, there are — in the mental model. \u003cstrong\u003eIn this post, I will look at the biggest difference between them.\u003c/strong\u003e It existed ever since function components were \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components\"\u003eintroduced\u003c/a\u003e in 2015 but it’s often overlooked:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eFunction components capture the rendered values.\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet’s unpack what this means.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003eNote: this post isn’t a value judgement of either classes or functions. I’m only describing the difference between these two programming models in React. For questions about adopting functions more widely, refer to the \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-faq.html#adoption-strategy\"\u003eHooks FAQ\u003c/a\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eConsider this component:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eProfilePage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFollowed \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e props\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003cspan\u003eFollow\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt shows a button that simulates a network request with \u003ccode\u003esetTimeout\u003c/code\u003e and then shows a confirmation alert. For example, if \u003ccode\u003eprops.user\u003c/code\u003e is \u003ccode\u003e\u0026#39;Dan\u0026#39;\u003c/code\u003e, it will show \u003ccode\u003e\u0026#39;Followed Dan\u0026#39;\u003c/code\u003e after three seconds. Simple enough.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(Note it doesn’t matter whether I use arrows or function declarations in the above example. \u003ccode\u003efunction handleClick()\u003c/code\u003e would work exactly the same way.)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eHow do we write it as a class? A naïve translation might look like this:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eProfilePage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFollowed \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003cspan\u003eFollow\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt is common to think these two snippets of code are equivalent. People often freely refactor between these patterns without noticing their implications:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/how-are-function-components-different-from-classes/wtf.gif\" alt=\"Spot the difference between two versions\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHowever, these two snippets of code are subtly different.\u003c/strong\u003e Take a good look at them. Do you see the difference yet? Personally, it took me a while to see this.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThere are spoilers ahead so here’s a \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/pjqnl16lm7\"\u003elive demo\u003c/a\u003e if you wanna figure it out on your own.\u003c/strong\u003e The rest of this article explains the difference and why it matters.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eBefore we continue, I’d like to emphasize that the difference I’m describing has nothing to do with React Hooks per se. Examples above don’t even use Hooks!\u003c/p\u003e\n\u003cp\u003eIt’s all about the difference between functions and classes in React. If you plan to use functions more often in a React app, you might want to understand it.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003eWe’ll illustrate the difference with a bug that is common in React applications.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOpen this \u003cstrong\u003e\u003ca target=\"_blank\" href=\"https://codesandbox.io/s/pjqnl16lm7\"\u003eexample sandbox\u003c/a\u003e\u003c/strong\u003e with a current profile selector and the two \u003ccode\u003eProfilePage\u003c/code\u003e implementations from above — each rendering a Follow button.\u003c/p\u003e\n\u003cp\u003eTry this sequence of actions with both buttons:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eClick\u003c/strong\u003e one of the Follow buttons.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eChange\u003c/strong\u003e the selected profile before 3 seconds pass.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRead\u003c/strong\u003e the alert text.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou will notice a peculiar difference:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eWith the above \u003ccode\u003eProfilePage\u003c/code\u003e \u003cstrong\u003efunction\u003c/strong\u003e, clicking Follow on Dan’s profile and then navigating to Sophie’s would still alert \u003ccode\u003e\u0026#39;Followed Dan\u0026#39;\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWith the above \u003ccode\u003eProfilePage\u003c/code\u003e \u003cstrong\u003eclass\u003c/strong\u003e, it would alert \u003ccode\u003e\u0026#39;Followed Sophie\u0026#39;\u003c/code\u003e:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/how-are-function-components-different-from-classes/bug.gif\" alt=\"Demonstration of the steps\"/\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eIn this example, the first behavior is the correct one. \u003cstrong\u003eIf I follow a person and then navigate to another person’s profile, my component shouldn’t get confused about who I followed.\u003c/strong\u003e This class implementation is clearly buggy.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e(You should totally \u003ca target=\"_blank\" href=\"https://mobile.twitter.com/sophiebits\"\u003efollow Sophie\u003c/a\u003e though.)\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eSo why does our class example behave this way?\u003c/p\u003e\n\u003cp\u003eLet’s look closely at the \u003ccode\u003eshowMessage\u003c/code\u003e method in our class:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eProfilePage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFollowed \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis class method reads from \u003ccode\u003ethis.props.user\u003c/code\u003e. Props are immutable in React so they can never change. \u003cstrong\u003eHowever, \u003ccode\u003ethis\u003c/code\u003e \u003cem\u003eis\u003c/em\u003e, and has always been, mutable.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIndeed, that’s the whole purpose of \u003ccode\u003ethis\u003c/code\u003e in a class. React itself mutates it over time so that you can read the fresh version in the \u003ccode\u003erender\u003c/code\u003e and lifecycle methods.\u003c/p\u003e\n\u003cp\u003eSo if our component re-renders while the request is in flight, \u003ccode\u003ethis.props\u003c/code\u003e will change. The \u003ccode\u003eshowMessage\u003c/code\u003e method reads the \u003ccode\u003euser\u003c/code\u003e from the “too new” \u003ccode\u003eprops\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis exposes an interesting observation about the nature of user interfaces. If we say that a UI is conceptually a function of current application state, \u003cstrong\u003ethe event handlers are a part of the render result — just like the visual output\u003c/strong\u003e. Our event handlers “belong” to a particular render with particular props and state.\u003c/p\u003e\n\u003cp\u003eHowever, scheduling a timeout whose callback reads \u003ccode\u003ethis.props\u003c/code\u003e breaks that association. Our \u003ccode\u003eshowMessage\u003c/code\u003e callback is not “tied” to any particular render, and so it “loses” the correct props. Reading from \u003ccode\u003ethis\u003c/code\u003e severed that connection.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cstrong\u003eLet’s say function components didn’t exist.\u003c/strong\u003e How would we solve this problem?\u003c/p\u003e\n\u003cp\u003eWe’d want to somehow “repair” the connection between the \u003ccode\u003erender\u003c/code\u003e with the correct props and the \u003ccode\u003eshowMessage\u003c/code\u003e callback that reads them. Somewhere along the way the \u003ccode\u003eprops\u003c/code\u003e get lost.\u003c/p\u003e\n\u003cp\u003eOne way to do it would be to read \u003ccode\u003ethis.props\u003c/code\u003e early during the event, and then explicitly pass them through into the timeout completion handler:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eProfilePage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFollowed \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst {\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e} \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003cspan\u003eFollow\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/3q737pw8lq\"\u003eworks\u003c/a\u003e. However, this approach makes the code significantly more verbose and error-prone with time. What if we needed more than a single prop? What if we also needed to access the state? \u003cstrong\u003eIf \u003ccode\u003eshowMessage\u003c/code\u003e calls another method, and that method reads \u003ccode\u003ethis.props.something\u003c/code\u003e or \u003ccode\u003ethis.state.something\u003c/code\u003e, we’ll have the exact same problem again.\u003c/strong\u003e So we would have to pass \u003ccode\u003ethis.props\u003c/code\u003e and \u003ccode\u003ethis.state\u003c/code\u003e as arguments through every method called from \u003ccode\u003eshowMessage\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eDoing so defeats the ergonomics normally afforded by a class. It is also difficult to remember or enforce, which is why people often settle for bugs instead.\u003c/p\u003e\n\u003cp\u003eSimilarly, inlining the \u003ccode\u003ealert\u003c/code\u003e code inside \u003ccode\u003ehandleClick\u003c/code\u003e doesn’t answer the bigger problem. We want to structure the code in a way that allows splitting it into more methods \u003cem\u003ebut\u003c/em\u003e also reading the props and state that correspond to the render related to that call. \u003cstrong\u003eThis problem isn’t even unique to React — you can reproduce it in any UI library that puts data into a mutable object like \u003ccode\u003ethis\u003c/code\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003ePerhaps, we could \u003cem\u003ebind\u003c/em\u003e the methods in the constructor?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eProfilePage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econstructor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esuper\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshowMessage \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebind\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleClick \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebind\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFollowed \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003cspan\u003eFollow\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNo, this doesn’t fix anything. Remember, the problem is us reading from \u003ccode\u003ethis.props\u003c/code\u003e too late — not with the syntax we’re using! \u003cstrong\u003eHowever, the problem would go away if we fully relied on JavaScript closures.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eClosures are often avoided because it’s \u003ca target=\"_blank\" href=\"https://wsvincent.com/javascript-closure-settimeout-for-loop/\"\u003ehard\u003c/a\u003e to think about a value that can be mutated over time. But in React, props and state are immutable! (Or at least, it’s a strong recommendation.) That removes a major footgun of closures.\u003c/p\u003e\n\u003cp\u003eThis means that if you close over props or state from a particular render, you can always count on them staying exactly the same:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eProfilePage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eextends\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eReact\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eComponent \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Capture the props!\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e this\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Note: we are *inside render*.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// These aren\u0026#39;t class methods.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFollowed \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e props\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003cspan\u003eFollow\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cstrong\u003eYou’ve “captured” props at the time of render:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/how-are-function-components-different-from-classes/pokemon.gif\" alt=\"Capturing Pokemon\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis way any code inside it (including \u003ccode\u003eshowMessage\u003c/code\u003e) is guaranteed to see the props for this particular render. React doesn’t “move our cheese” anymore.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWe could then add as many helper functions inside as we want, and they would all use the captured props and state.\u003c/strong\u003e Closures to the rescue!\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eThe \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/oqxy9m7om5\"\u003eexample above\u003c/a\u003e is correct but it looks odd. What’s the point of having a class if you define functions inside \u003ccode\u003erender\u003c/code\u003e instead of using class methods?\u003c/p\u003e\n\u003cp\u003eIndeed, we can simplify the code by removing the class “shell” around it:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eProfilePage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprops\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFollowed \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e props\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003cspan\u003eFollow\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eJust like above, the \u003ccode\u003eprops\u003c/code\u003e are still being captured — React passes them as an argument. \u003cstrong\u003eUnlike \u003ccode\u003ethis\u003c/code\u003e, the \u003ccode\u003eprops\u003c/code\u003e object itself is never mutated by React.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIt’s a bit more obvious if you destructure \u003ccode\u003eprops\u003c/code\u003e in the function definition:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eProfilePage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ user }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eFollowed \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euser\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ehandleClick\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003cspan\u003eFollow\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen the parent component renders \u003ccode\u003eProfilePage\u003c/code\u003e with different props, React will call the \u003ccode\u003eProfilePage\u003c/code\u003e function again. But the event handler we already clicked “belonged” to the previous render with its own \u003ccode\u003euser\u003c/code\u003e value and the \u003ccode\u003eshowMessage\u003c/code\u003e callback that reads it. They’re all left intact.\u003c/p\u003e\n\u003cp\u003eThis is why, in the function version of \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/pjqnl16lm7\"\u003ethis demo\u003c/a\u003e, clicking Follow on Sophie’s profile and then changing selection to Sunil would alert \u003ccode\u003e\u0026#39;Followed Sophie\u0026#39;\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/how-are-function-components-different-from-classes/fix.gif\" alt=\"Demo of correct behavior\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis behavior is correct. \u003cem\u003e(Although you might want to \u003ca target=\"_blank\" href=\"https://mobile.twitter.com/threepointone\"\u003efollow Sunil\u003c/a\u003e too!)\u003c/em\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eNow we understand the big difference between functions and classes in React:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eFunction components capture the rendered values.\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eWith Hooks, the same principle applies to state as well.\u003c/strong\u003e Consider this example:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMessageThread\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetMessage\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eYou said: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ehandleSendClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ehandleMessageChange\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003einput\u003c/span\u003e\u003cspan\u003e value={\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e} onChange={\u003c/span\u003e\u003cspan\u003ehandleMessageChange\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e onClick={\u003c/span\u003e\u003cspan\u003ehandleSendClick\u003c/span\u003e\u003cspan\u003e}\u0026gt;\u003c/span\u003e\u003cspan\u003eSend\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(Here’s a \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/93m5mz9w24\"\u003elive demo\u003c/a\u003e.)\u003c/p\u003e\n\u003cp\u003eWhile this isn’t a very good message app UI, it illustrates the same point: if I send a particular message, the component shouldn’t get confused about which message actually got sent. This function component’s \u003ccode\u003emessage\u003c/code\u003e captures the state that “belongs” to the render which returned the click handler called by the browser. So the \u003ccode\u003emessage\u003c/code\u003e is set to what was in the input when I clicked “Send”.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eSo we know functions in React capture props and state by default. \u003cstrong\u003eBut what if we \u003cem\u003ewant\u003c/em\u003e to read the latest props or state that don’t belong to this particular render?\u003c/strong\u003e What if we want to \u003ca target=\"_blank\" href=\"https://dev.to/scastiel/react-hooks-get-the-current-state-back-to-the-future-3op2\"\u003e“read them from the future”\u003c/a\u003e?\u003c/p\u003e\n\u003cp\u003eIn classes, you’d do it by reading \u003ccode\u003ethis.props\u003c/code\u003e or \u003ccode\u003ethis.state\u003c/code\u003e because \u003ccode\u003ethis\u003c/code\u003e itself is mutable. React mutates it. In function components, you can also have a mutable value that is shared by all component renders. It’s called a “ref”:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMyComponent\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eref\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseRef\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003enull\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// You can read or write `ref.current`.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHowever, you’ll have to manage it yourself.\u003c/p\u003e\n\u003cp\u003eA ref \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\"\u003eplays the same role\u003c/a\u003e as an instance field. It’s the escape hatch into the mutable imperative world. You may be familiar with “DOM refs” but the concept is much more general. It’s just a box into which you can put something.\u003c/p\u003e\n\u003cp\u003eEven visually, \u003ccode\u003ethis.something\u003c/code\u003e looks like a mirror of \u003ccode\u003esomething.current\u003c/code\u003e. They represent the same concept.\u003c/p\u003e\n\u003cp\u003eBy default, React doesn’t create refs for latest props or state in function components. In many cases you don’t need them, and it would be wasted work to assign them. However, you can track the value manually if you’d like:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMessageThread\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetMessage\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003elatestMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseRef\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eYou said: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e latestMessage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ehandleSendClick\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetTimeout\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e3000\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ehandleMessageChange\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003esetMessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    latestMessage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e e\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etarget\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf we read \u003ccode\u003emessage\u003c/code\u003e in \u003ccode\u003eshowMessage\u003c/code\u003e, we’ll see the message at the time we pressed the Send button. But when we read \u003ccode\u003elatestMessage.current\u003c/code\u003e, we get the latest value — even if we kept typing after the Send button was pressed.\u003c/p\u003e\n\u003cp\u003eYou can compare the \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/93m5mz9w24\"\u003etwo\u003c/a\u003e \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/ox200vw8k9\"\u003edemos\u003c/a\u003e to see the difference yourself. A ref is a way to “opt out” of the rendering consistency, and can be handy in some cases.\u003c/p\u003e\n\u003cp\u003eGenerally, you should avoid reading or setting refs \u003cem\u003eduring\u003c/em\u003e rendering because they’re mutable. We want to keep the rendering predictable. \u003cstrong\u003eHowever, if we want to get the latest value of a particular prop or state, it can be annoying to update the ref manually.\u003c/strong\u003e We could automate it by using an effect:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"jsx\" data-theme=\"default\"\u003e\u003ccode data-language=\"jsx\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eMessageThread\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetMessage\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Keep track of the latest value.\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003elatestMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseRef\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003euseEffect\u003c/span\u003e\u003cspan\u003e(()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elatestMessage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e message\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eshowMessage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e =\u0026gt; \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ealert\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eYou said: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e latestMessage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecurrent\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e(Here’s a \u003ca target=\"_blank\" href=\"https://codesandbox.io/s/yqmnz7xy8x\"\u003edemo\u003c/a\u003e.)\u003c/p\u003e\n\u003cp\u003eWe do the assignment \u003cem\u003einside\u003c/em\u003e an effect so that the ref value only changes after the DOM has been updated. This ensures our mutation doesn’t break features like \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\"\u003eTime Slicing and Suspense\u003c/a\u003e which rely on interruptible rendering.\u003c/p\u003e\n\u003cp\u003eUsing a ref like this isn’t necessary very often. \u003cstrong\u003eCapturing props or state is usually a better default.\u003c/strong\u003e However, it can be handy when dealing with \u003ca href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks/\"\u003eimperative APIs\u003c/a\u003e like intervals and subscriptions. Remember that you can track \u003cem\u003eany\u003c/em\u003e value like this — a prop, a state variable, the whole props object, or even a function.\u003c/p\u003e\n\u003cp\u003eThis pattern can also be handy for optimizations — such as when \u003ccode\u003euseCallback\u003c/code\u003e identity changes too often. However, \u003ca target=\"_blank\" href=\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\"\u003eusing a reducer\u003c/a\u003e is often a \u003ca target=\"_blank\" href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\"\u003ebetter solution\u003c/a\u003e. (A topic for a future blog post!)\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eIn this post, we’ve looked at common broken pattern in classes, and how closures help us fix it. However, you might have noticed that when you try to optimize Hooks by specifying a dependency array, you can run into bugs with stale closures. Does it mean that closures are the problem? I don’t think so.\u003c/p\u003e\n\u003cp\u003eAs we’ve seen above, closures actually help us \u003cem\u003efix\u003c/em\u003e the subtle problems that are hard to notice. Similarly, they make it much easier to write code that works correctly in the \u003ca target=\"_blank\" href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\"\u003eConcurrent Mode\u003c/a\u003e. This is possible because the logic inside the component closes over the correct props and state with which it was rendered.\u003c/p\u003e\n\u003cp\u003eIn all cases I’ve seen so far, \u003cstrong\u003ethe “stale closures” problems happen due to a mistaken assumption that “functions don’t change” or that “props are always the same”\u003c/strong\u003e. This is not the case, as I hope this post has helped to clarify.\u003c/p\u003e\n\u003cp\u003eFunctions close over their props and state — and so their identity is just as important. This is not a bug, but a feature of function components. Functions shouldn’t be excluded from the “dependencies array” for \u003ccode\u003euseEffect\u003c/code\u003e or \u003ccode\u003euseCallback\u003c/code\u003e, for example. (The right fix is usually either \u003ccode\u003euseReducer\u003c/code\u003e or the \u003ccode\u003euseRef\u003c/code\u003e solution above — we will soon document how to choose between them.)\u003c/p\u003e\n\u003cp\u003eWhen we write the majority of our React code with functions, we need to adjust our intuition about \u003ca target=\"_blank\" href=\"https://github.com/ryardley/hooks-perf-issues/pull/3\"\u003eoptimizing code\u003c/a\u003e and \u003ca target=\"_blank\" href=\"https://github.com/facebook/react/issues/14920\"\u003ewhat values can change over time\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs \u003ca target=\"_blank\" href=\"https://mobile.twitter.com/EphemeralCircle/status/1099095063223812096\"\u003eFredrik put it\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe best mental rule I’ve found so far with hooks is ”code as if any value can change at any time”.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFunctions are no exception to this rule. It will take some time for this to be common knowledge in React learning materials. It requires some adjustment from the class mindset. But I hope this article helps you see it with fresh eyes.\u003c/p\u003e\n\u003cp\u003eReact functions always capture their values — and now we know why.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://overreacted.io/how-are-function-components-different-from-classes/pikachu.gif\" alt=\"Smiling Pikachu\"/\u003e\u003c/p\u003e\n\u003cp\u003eThey’re a whole different Pokémon.\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://x.com/search?q=https%3A%2F%2Foverreacted.io%2Fhow-are-function-components-different-from-classes%2F\"\u003eDiscuss on 𝕏\u003c/a\u003e  ·  \u003ca target=\"_blank\" href=\"https://github.com/gaearon/overreacted.io/edit/main/public/how-are-function-components-different-from-classes/index.md\"\u003eEdit on GitHub\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": null,
  "modifiedTime": null
}
