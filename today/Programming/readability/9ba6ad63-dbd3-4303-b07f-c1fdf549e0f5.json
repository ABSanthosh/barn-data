{
  "id": "9ba6ad63-dbd3-4303-b07f-c1fdf549e0f5",
  "title": "GitHub Copilot Extensions Integrate IDEs with External Services",
  "link": "https://www.infoq.com/news/2025/02/github-copilot-extensions/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Now generally available, GitHub Copilot Extensions allow developers to use natural language to query documentation, generate code, retrieve data, and execute actions on external services without leaving their IDEs. Besides using public extensions from companies like Docker, MongoDB, Sentry, and many more, developers can create their own extensions to work with internal libraries or APIs. By Sergio De Simone",
  "author": "Sergio De Simone",
  "published": "Wed, 26 Feb 2025 11:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "IDE",
    "Visual Studio",
    "Visual Studio Code",
    "github",
    "Large language models",
    "Development",
    "AI, ML \u0026 Data Engineering",
    "news"
  ],
  "byline": "Sergio De Simone",
  "length": 3139,
  "excerpt": "Now generally available, GitHub Copilot Extensions allow developers to use natural language to query documentation, generate code, retrieve data, and execute actions on external services without leavi",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250225074537/apple-touch-icon.png",
  "text": "Now generally available, GitHub Copilot Extensions allow developers to use natural language to query documentation, generate code, retrieve data, and execute actions on external services without leaving their IDEs. Besides using public extensions from companies like Docker, MongoDB, Sentry, and many more, developers can create their own extensions to work with internal libraries or APIs. The GitHub Marketplace already offers a couple of dozen extensions covering a wide range of development-oriented services. For example, you can use the Stack Overflow extension to ask questions about coding tasks without leaving the editor; instead, the GitBook extension allows you to ask questions about GitBook docs. Besides providing access to documentation, Copilot extensions may help developers interact with a service directly from their IDEs. For example, the Docker extension allows you to generate Docker assets and analyze vulnerabilities; the LambdaTest extension lets developers manage testing workflows and streamlines test execution, automation, and insight generation; the Mermaid Chart extension can generate various kinds of diagrams based on you GitHub Actions, SQL, or other files you are currently working within your IDE. As mentioned, developers can also create their own extensions to access private data or in-house services. To make it easier for developers to create extensions, GitHub has published several repositories showing how you build a basic \"Hello World\" extension, how to gather feedback from extension beta users, and more. There are two ways to build Copilot extensions. On the one hand, you can define a skillset, meaning you have Copilot handle all AI interactions with the extension providing a description of several endpoints it can call to process user requests. Currently, a single extension can use up to five distinct skills. On the other hand, you can use your own AI agent, in which case you pass certain information from the user context to the agent, such as details about a user’s current file, selected text, and repository. In this case, the agent receives server-sent events (SSEs) with user messages and references to their current environment. The actual context information varies with the client hosting the extension. For example, while Visual Studio and Visual Studio Code pass the current selection or the whole file content, GitHub.com doesn't, but provides the URL of the page the user is currently visiting. To make it easier for extension builders to manage authentication, GitHub has recently added support for OpenID Connect (OIDC). This frees developers from having to verify a GitHub token's validity on each request by allowing them to use a pre-exchanged token. GitHub Copilot Extensions can be used in a variety of clients, including Visual Studio and Visual Studio Code, GitHub.com and GitHub's mobile app, and JetBrains' IDEs. They are not supported in Xcode or GitHub Codespaces, though, nor vim or emacs. About the Author Sergio De Simone",
  "image": "https://res.infoq.com/news/2025/02/github-copilot-extensions/en/headerimage/github-copilot-extensions-1740566154323.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eNow generally available, \u003ca href=\"https://github.blog/changelog/2025-02-19-announcing-the-general-availability-of-github-copilot-extensions/\"\u003eGitHub Copilot Extensions allow developers to use natural language to query documentation, generate code, retrieve data, and execute actions on external services\u003c/a\u003e without leaving their IDEs. Besides using public extensions from companies like Docker, MongoDB, Sentry, and many more, developers can create their own extensions to work with internal libraries or APIs.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://github.com/marketplace?type=apps\u0026amp;copilot_app=true\"\u003eGitHub Marketplace already offers a couple of dozen extensions\u003c/a\u003e covering a wide range of development-oriented services. For example, you can use the \u003ca href=\"https://github.com/marketplace/stack-overflow-extension-for-github-copilot\"\u003eStack Overflow extension\u003c/a\u003e to ask questions about coding tasks without leaving the editor; instead, the \u003ca href=\"https://github.com/marketplace/gitbook-for-github-copilot\"\u003eGitBook extension\u003c/a\u003e allows you to ask questions about GitBook docs.\u003c/p\u003e\n\n\u003cp\u003eBesides providing access to documentation, Copilot extensions may help developers interact with a service directly from their IDEs. For example, the \u003ca href=\"https://github.com/marketplace/docker-for-github-copilot\"\u003eDocker extension\u003c/a\u003e allows you to generate Docker assets and analyze vulnerabilities; the \u003ca href=\"https://github.com/marketplace/lambdatest\"\u003eLambdaTest extension\u003c/a\u003e lets developers manage testing workflows and streamlines test execution, automation, and insight generation; the \u003ca href=\"https://github.com/marketplace/mermaid-chart\"\u003eMermaid Chart\u003c/a\u003e extension can generate various kinds of diagrams based on you GitHub Actions, SQL, or other files you are currently working within your IDE.\u003c/p\u003e\n\n\u003cp\u003eAs mentioned, developers can also create their own extensions to access private data or in-house services. To make it easier for developers to create extensions, GitHub has published several repositories showing how you build a \u003ca href=\"https://github.com/copilot-extensions/blackbeard-extension\"\u003ebasic \u0026#34;Hello World\u0026#34; extension\u003c/a\u003e, how to \u003ca href=\"https://github.com/copilot-extensions/user-feedback\"\u003egather feedback from extension beta users\u003c/a\u003e, and more.\u003c/p\u003e\n\n\u003cp\u003eThere are two ways to build Copilot extensions. On the one hand, you can define a skillset, meaning you have Copilot handle all AI interactions with the extension providing a description of several endpoints it can call to process user requests. Currently, a single extension can use up to five distinct skills.\u003c/p\u003e\n\n\u003cp\u003eOn the other hand, you can use your own AI agent, in which case you pass certain information from the user context to the agent, such as details about a user’s current file, selected text, and repository. In this case, the agent receives server-sent events (SSEs) with user messages and references to their current environment. The actual context information varies with the client hosting the extension. For example, \u003ca href=\"https://docs.github.com/en/copilot/building-copilot-extensions/building-a-copilot-agent-for-your-copilot-extension/context-passing-for-your-agent#understanding-context-passing\"\u003ewhile Visual Studio and Visual Studio Code pass the current selection or the whole file content, GitHub.com doesn\u0026#39;t, but provides the URL of the page the user is currently visiting\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eTo make it easier for extension builders to manage authentication, GitHub has recently added support for \u003ca href=\"https://docs.github.com/copilot/building-copilot-extensions/using-oidc-with-github-copilot-extensions\"\u003eOpenID Connect (OIDC)\u003c/a\u003e. This frees developers from having to verify a GitHub token\u0026#39;s validity on each request by allowing them to use a pre-exchanged token.\u003c/p\u003e\n\n\u003cp\u003eGitHub Copilot Extensions can be used in a variety of clients, including Visual Studio and Visual Studio Code, GitHub.com and GitHub\u0026#39;s mobile app, and JetBrains\u0026#39; IDEs. They are not supported in Xcode or GitHub Codespaces, though, nor vim or emacs.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio-De-Simone\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio De Simone\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-02-26T00:00:00Z",
  "modifiedTime": null
}
