[
  {
    "id": "b3bc887f-9154-4679-8773-f095143ff729",
    "title": "Re: Music Year-End Lists",
    "link": "https://tyler.io/2024/12/re-music-year-end-lists/",
    "description": "What should have been an email is now this blog post listing my top music albums from 2024. I'm not sure what to make of them other than to notice it's a much louder collection of artists than in past years. Why louder? Well, _gestures wildly at the world_",
    "author": "Tyler",
    "published": "Thu, 19 Dec 2024 04:53:11 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "db4bfd0b-8fc0-4bcb-b0c7-02b278c04acf",
    "title": "Steve",
    "link": "https://tyler.io/2024/12/steve/",
    "description": "An eighteen hour family road trip the week before Thanksgiving certainly gives your mind time to wander and the opportunity to play. So, let's play. Steve is a new, casual, puzzle game for your iPhone, iPad, Mac, and Vision Pro. The goal is simple. Fill the grid using the correct number of blocks. As my family and friends and (so far) five-hundred strangers will tell you, it's easy to learn. But annoyingly difficult to master.",
    "author": "Tyler",
    "published": "Tue, 17 Dec 2024 20:56:29 +0000",
    "image": "https://cdn.tyler.io/wp-content/uploads/2024/12/two-up-1-220x300.png",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "fad13bc9-c8ad-4480-93e8-7abbd4f037b8",
    "title": "My Home Automation setup",
    "link": "https://swiftrocks.com/my-home-automation-setup",
    "description": "I recently upgraded my smart home hardware, and I felt like writing a post describing my current setup to serve as inspiration for those wanting to get started or just interested in home automation in general. The Software I use Home Assistant OS like many others. The way I like to describe HA is that it's an Alexa on steroids. With an Alexa, you buy smart devices, link them with the Alexa, and then setup automations to control those devices based on conditions like time, weather, and so on. But the problem with Alexas is that 1) the devices must support Alexas specifically, and 2) the automations themselves are very limited, only allowing you to do simple things. Home Assistant doesn't have such limitations. HA is open-source and has a thriving community, meaning you can find plugins that enable integrations for pretty much anything you can think of, and if you don't, you can build such plugins yourself assuming you have the programming chops to do it! HA is very extensible, and thus perfect for power users who want to set up complex automations or integrate unusual devices in unusual ways. The Hardware For a long time, my setup used to be a simple Raspberry Pi 3b and a SD card. The HA community tells you that this is a bad idea (The 3b is weak and SD cards can die if you use them too much), but in my experience this is fine as long as you don't have too many devices / automations / integrations. It's a good starting point, and it did the trick for me for a couple of years until I started wanting to do more complicated integrations. Nowadays, I've retired the 3b in favor of a Raspberry Pi 5 w/ 8GB RAM, with a 256GB official RPi NVMe SSD and enclosed on the Argon One V3 case. This gives HA enough power and cooling to do everything that I need with ease. The way I run the server is via WiFi. The community says that this is also a bad idea and that you should use a wired connection to prevent latency issues, but I never had any such issues running HA via WiFi. For voice control, I use an Alexa. The way this works is that HA has a plugin called Emulated Hue which allows you to trick an Alexa into thinking your HA server is a Philips Hue hub, allowing you to expose your devices and scripts to the Alexa in order to make use of its voice features. But you can also pay for HA Cloud and enjoy the official \"proper\" Alexa integration, which I don't because I want to keep everything running on the local network. I also have a Sonoff ZBDongle-E USB stick plugged into the server in order to drive my Zigbee devices, which I'll mention in more detail further below. The Protocol Currently, I'm running a combination of WiFi and Zigbee devices, which is an alternate wireless protocol made specifically to be used by IoT devices that uses less energy and lays off a mesh network where the devices communicate with each other (as opposed to WiFi devices where everything goes through the router, thus creating a star network). The reason I run this mix is just because I didn't know about Zigbee in the beginning. If I could go back in time, I would have the entire network consist of Zigbee devices because I think they are just better than WiFi ones overall. It uses significantly less energy (many Zigbee devices can run on those coin cell batteries), the mesh network allows you to have devices very far away from the server, and best of all: they work even when the WiFi is down. When you buy Zigbee devices, usually the store will say that you need a hub to drive them, which they also sell. It's true that you need a hub, but it doesn't have to be that store's specific hub. When using something like HA, you can use a USB antenna stick like the one mentioned above and that will allow you to control any Zigbee device from any manufacturer via HA. The Devices Here are the IoT devices that I have around my apartment, excluding things that are \"smart\" by default like TVs and such. Sonoff Basic R2 (WiFi) This is a DIY WiFi switch that you hook into \"dumb\" devices in order to be able to make them smart and turn them on and off via WiFi. Given a bit of skill with electronics (stripping / crimping wires), these switches are much cheaper and more durable compared to buying smart lamps, and I have many of these spread around the apartment! By default, these require you to expose your device to some awful Chinese cloud server. Luckily for us, you can flash these devices with custom firmware like Tasmota, allowing you to have full control of them. This also requires skills with electronics and some special equipment, so keep that in mind. As previously mentioned, If I could go back in time, I would have instead bought these switches' Zigbee equivalent to make things easier and better, so I'm in the process of replacing them. Sonoff S26 R2 (WiFi) This is the same as above, but as something that you plug directly into the wall socket, thus requiring no messing with wires unless you want to flash the firmware to stop China from spying on you. If I could back in time, I would have bought these IKEA wall sockets instead, as they run on Zigbee and can even provide data on your electrical consumption, so these are also something I'll be replacing soon. Broadlink RM4C mini This is a WiFi IR blaster that you can configure IR commands and thus be able to create automations that allow you to control devices that require a remote control, like your TV. In my case it turned out that newer Samsung TVs have some sort of API integration where you can control them over the web, but I used these blasters for a long time before I discovered this. This also puts your device on some Chinese cloud though, and in this case I'm not sure if custom firmwares are available. Random IKEA IoT utilities IKEA has lots of IoT devices like buttons, remote controls, motion detectors, temperature thingies, and more. They are all Zigbee and thus very easy to connect to use. I think only the button and the remote control took a bit more effort because you need to find out exactly how they work in order to build automations against them in HA, but nothing that a simple Google search couldn't solve.",
    "author": "Bruno Rocha",
    "published": "Sat, 4 Jan 2025 13:00:00 GMT+1",
    "image": "https://i.imgur.com/CRUuh6Q.png",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "a6e612cc-c56e-4318-a3b3-9f72e0e230e0",
    "title": "What happens when you move a file in git?",
    "link": "https://swiftrocks.com/what-happens-when-you-move-a-file-in-git",
    "description": "Recently at work we were considering renaming a folder that contains an enormous amount of files, and we wondered whether or not that would have notable negative consequences for our git repository. Would the repo become considerably larger? Would accessing git history become slower? Or would this be completely fine? After investigating this, I thought the answer was interesting enough that I felt like writing an article about it. To answer this question, we need to briefly explain how git works under the hood. There's also a TL;DR at the bottom if you'd like to skip the entire explanation. How does git handle files? It's somewhat commonly believed that git's commits are diffs, but this is not true. Commits are snapshots of your repository, meaning that when you make changes to a file, git will store a full copy of that file on your repository (there is an important exception, but let's keep it simple for now). This is why you can easily switch between commits and branches no matter how old they are; git doesn't need to \"replay\" thousands of diffs, it just needs to read and apply the snapshot for the commit you're trying to access. Under the hood, git will store all different versions of your files in the .git/objects folder, and this is something we can play with in order to find out what will happen regarding the main question we're trying to answer. Let's make a new git repo and add a file called swiftrocks.txt with the Hello World! contents, and commit it: git init echo 'Hello World!' \u003e swiftrocks.txt git add swiftrocks.txt git commit -m \"Add SwiftRocks\" If you now go to .git/objects, you'll see a bunch of folders with encoded files inside of them. The file we just added is there, but which one? When you add a file to git, git will do the following things: Compress the file with zlib Calculate a SHA1 hash based on the contents Place it in .git/objects/(first two hash characters)/(remaining hash characters) We can locate our file in the objects folder by reproducing this process, and luckily for us, we don't have to code anything to achieve this. We can find out what the resulting hash for a given file would be by running git hash-object: git hash-object swiftrocks.txt 980a0d5f19a64b4b30a87d4206aade58726b60e3 In my case, the hash of the file was 980a0d5f19a64b4b30a87d4206aade58726b60e3, meaning I can find the \"stored\" version of that file in .git/objects/98/0a0d5f19a64b4b30a87d4206aade58726b60e3. If you do this however, you'll notice that the file is unreadable because it's compressed. Similarly to the previous case, we don't have to code anything to de-compress this file! We just need to run git cat-file -p and git will do so automatically for us: git cat-file -p 980a0d5f19a64b4b30a87d4206aade58726b60e3 Hello World! There it is! Let's now make a change to this file and see what happens: echo 'Hello World (changed)!' \u003e swiftrocks.txt git add swiftrocks.txt git commit -m \"Change swiftrocks.txt\" git hash-object swiftrocks.txt cf15f0bb6b07a66f78f6de328e3cd6ea2747de6b git cat-file -p cf15f0bb6b07a66f78f6de328e3cd6ea2747de6b Hello World (changed)! Since we've made a change to the file, the SHA1 of the compressed contents changed, leading to a full copy of that file being added to the objects folder. As already mentioned above, this is because git works primarily in terms of snapshots rather than file diffs. You can even see that the \"original\" file is still there, which is what allows git to quickly switch between commits / branches. git cat-file -p 980a0d5f19a64b4b30a87d4206aade58726b60e3 Hello World! # The original file is still there! Now here's the relevant part: What happens if we change our file back to its original contents? echo 'Hello World!' \u003e swiftrocks.txt git add swiftrocks.txt git commit -m \"Change swiftrocks.txt back\" git hash-object swiftrocks.txt 980a0d5f19a64b4b30a87d4206aade58726b60e3 The hash is the same as before! Even though this is a new commit making a new change to the file, the hashing process allows git to determine that the file is exactly the same as the one we had in previous commits, meaning that there's no need to create a new copy. This will be the case even if you rename the file, because the hash is calculated based on the contents, not the file's name. This is a great finding, but it doesn't fully answer the original question. We now know that renaming files will not result in new copies of those files being added to the objects folder, but what about folders? And how are those files and folders attached to actual commits? How does git handle folders (and commits)? The most useful thing to know right off the bat is that commits are also objects in git. This is why you might have seen other folders / files in .git/objects when first inspecting it; the other files were related to the commits you made when adding the file. Since commits are also objects, we can read them with git cat-file just like with \"regular\" files. Let's do it with our latest commit (26d4302 in my case): git cat-file -p 26d4302 tree 350cef2a8054111568f82dc87bbd683ee14bb1a6 parent 2891fe1393c9e1bff116c1b58a30bcf85e0596a8 author Bruno Rocha 1733136171 +0100 committer Bruno Rocha 1733136223 +0100 Change swiftrocks.txt back As you can see, a \"commit\" is nothing more than a small text file containing the following bits of information: The author of the commit, and the commit message The hash of the parent commit The hash of the commit's \"tree\", containing information about the file system snapshot for that particular commit In this case, what we're interested in is the last point. Luckily for us, trees are also objects in git. Thus, if we want to see what the file system looks like for that particular commit, we just need to run git cat-file -p against the commit's tree hash: git cat-file -p 350cef2a8054111568f82dc87bbd683ee14bb1a6 100644 blob 980a0d5f19a64b4b30a87d4206aade58726b60e3 swiftrocks.txt Like with commits, tree objects are also very simple text files. In this case, the tree states that there's only one file (a blob) in the repository, which is a file called swiftrocks.txt with the 980a0d5f... hash. We've already uncovered that git prevents individual files from being duped, but let's see how this is reflected in the tree object: (made a commit adding some copies, and did cat-file -p on the new commit / tree) 100644 blob 980a0d5f19a64b4b30a87d4206aade58726b60e3 swiftrocks.txt 100644 blob 980a0d5f19a64b4b30a87d4206aade58726b60e3 swiftrocks2.txt 100644 blob 980a0d5f19a64b4b30a87d4206aade58726b60e3 swiftrocks3.txt The tree object references the new copies and their different names, but as expected, their hashes all point to the same underlying object under the hood. If we add folders to our repository, the tree object will include references to other tree objects (related to each of those folders), allowing you to recursively inspect each folder of that commit's snapshot. Here's an example: 100644 blob dd99cb611e0c77b2214392b253ed555fb838d8ee .DS_Store 040000 tree 350cef2a8054111568f82dc87bbd683ee14bb1a6 folder1 040000 tree 11ca8c2fe64b078be34824f071d32a560aba62a7 folder2 100644 blob 980a0d5f19a64b4b30a87d4206aade58726b60e3 swiftrocks.txt As you can see above, the output directly identifies what each hash is so that you know exactly what you're looking at. (An alternative is to run git cat-file -t, which returns the \"type\" for a given object hash.) So what happens if you rename / move an entire folder? The important bit to know here is that tree objects (and commits) are calculated and stored just like regular file (blob) objects, meaning they follow the same rules. This means that if the contents of two folders are exactly the same, git will not create a new tree object for those folders; it will simply reuse the hash it had already computed in the past, just like in the case of files: 040000 tree 350cef2a8054111568f82dc87bbd683ee14bb1a6 folder1 040000 tree 350cef2a8054111568f82dc87bbd683ee14bb1a6 folder1 (copy) However, since tree objects contain references to a folder / file's name, renaming something can result in new tree objects being created for that folder / file's parent tree in order to account for the name change, resulting in new hashes and tree objects recursively all the way up to the root of the repository. This will also be the case when moving files / folders. The above snippet is one example of this. Even though git was able to avoid duplicating the internal contents of folder1, git still needed to generate a new tree object for its parent in order to account for the fact that a new folder called folder1 (copy) exists. If there are more parents up the chain, they would also require new tree objects. Whether or not this would be a problem depends on where exactly the change is being made. If the change is too \"deep\" into the filesystem and / or the affected trees contain a massive number of files then you'd end up with lots of potentially large new tree objects. Still, as you can see, tree objects are quite simple, so you'd need a truly gargantuan repository and / or unfortunate folder setup for this to be an actual problem. If you do have a setup that is bad enough for this to be an issue, then the good thing is that there are ways to improve it. By understanding how tree objects are created and which files change / move more often in your repo, it's possible to optimize the structure of your repository to minimize the \"blast radius\" of any given change. For example, placing files that change very often closer to the root of the repo could reduce the number of trees that would have to be regenerated and their overall size. (Bonus) When are commits not snapshots? At the beginning of this article, I mentioned that there are cases where commits are not snapshots. While this is not particularly relevant for this article, I wanted to briefly cover this as it's an important aspect of how git works. We've seen that git will make copies of your files when you change them, but this introduces a massive problem: If a particular file happens to be really big, then duplicating it for every small change could be disastrous. When this is the case, git will pivot into calculating change deltas instead of making full copies of the file. This feature is called Packfiles, and is something that is automatically managed by git for you. I recommend reading this great write-up by Aditya Mukerjee if you'd like to know more about it. TL;DR Git works in terms of snapshots (for the most part) Git knows that two files are the same and can avoid duplicating them in its internal storage, even if they have different names Similarly, Git can also determine if two folders are the same, regardless of where they are or are named Thus, renaming files or folders will not have any impact on git's internal storage for those files and folders However, git may end up needing to duplicate information regarding parent folders, recursively, to account for naming changes and / or new files In theory this can be an issue if the change happens very \"deeply\" into the file system and / or the parent folders contain massive amounts of files, but you'd need a truly gargantuan repository and / or unfortunate folder setup for this to be an actual problem Understanding how git objects work under the hood allows you to optimize your repository's folders in ways that can prevent too many unnecessary objects from being created Sources / References Julia Evans's many articles on git Unpacking git packfiles Git from the inside out",
    "author": "Bruno Rocha",
    "published": "Mon, 2 Dec 2024 13:00:00 GMT+1",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "6a8acdcf-9626-4654-8936-1d3c7322234e",
    "title": "308: What's In Our Toolbox: Simulators \u0026 Source Control",
    "link": "http://relay.fm/radar/308",
    "description": "In the second of a multi-part series sharing the apps that we use to develop software, we discuss the tools we use to enhance the iOS Simulator, make the most of on-device testing, and manage our code in source control.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 19 Dec 2024 11:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar308.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "8a76015e-1cfc-4afc-b6b1-27c20a341488",
    "title": "307: What's In Our Toolbox: Code \u0026 Design",
    "link": "http://relay.fm/radar/307",
    "description": "In the first of a multi-part series sharing the apps that we use to develop software, we discuss the tools we use to write code and design visuals.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 05 Dec 2024 17:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar307.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "d73f36fc-61ab-48de-832a-68bf9984244b",
    "title": "Solar Powered Birdhouse",
    "link": "https://atomicbird.com/blog/birdhouse-solar-power/",
    "description": "In my last couple of posts I’ve talked about the hardware and software behind my birdhouse camera project. I haven’t previously covered how I’m giving it all enough power to operate, and therein lies a tale. No Power? No Problem If I had a power outlet located anywhere near the bird house, this would have been easy. Pretty much any micro-USB power adapter would plug into the Raspberry Pi, and I’d be set.",
    "author": "",
    "published": "Thu, 19 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "c256fe4c-7d9a-46c4-b15e-48e47d4b97b6",
    "title": "Raspberry Pi Birdhouse Software",
    "link": "https://atomicbird.com/blog/birdhouse-software/",
    "description": "In my last post I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work. Initial Setup Being relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space.",
    "author": "",
    "published": "Mon, 09 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "ff0a1fa5-cab5-41fa-a445-ed48c0919fcc",
    "title": "Migrating XCTest to Swift Testing",
    "link": "https://useyourloaf.com/blog/migrating-xctest-to-swift-testing/",
    "description": "A quick guide to migrating XCTest unit tests to Swift Testing. What is Swift Testing? Swift Testing is an open-source testing framework designed for Swift. Apple introduced it at WWDC24 and shipped it with Xcode 16. Swift Testing uses modern features like concurrency and macros. It supports Windows and Linux as well as Apple’s platforms. Do I Need To Migrate? No. The XCTest framework is not deprecated, There’s no urgent reason to migrate your tests unless you want to. You cannot migrate UI Automation tests or performance (XCTMetric) tests as they are not supported by Swift Testing. I’m finding that I prefer writing tests with Swift Testing over XCTest (see below for some of the reasons). I started adding new tests with Swift Testing to XCTest unit test source files but at a certain point I want to migrate all the tests in a source file to Swift Testing. These are my notes on that process. Getting Started You can mix XCTest and Swift Testing unit tests in a test target. You can even mix both types of test in the same source file. That make it possible to add new tests with Swift Testing and migrate your XCTests over time. Do not mix testing frameworks within a test. Do not call XCTAssert from a Swift Testing test or a Swift Testing macro like #expect or #require from XCTests. Import Swift Testing To get started import the Swift Testing framework: import Testing Apple warns that you should only import the testing library into a test target. Importing into an application or library target is not supported. Grouping Tests You group Swift Testing unit tests by adding them to a type (struct or class). Xcode organises your tests based on your chosen grouping in the Test Navigator. Unlike XCTest which requires you subclass XCTestCase, Swift Testing can use a struct, class or actor. Apple recommends you start with a struct unless you need a deinit for cleanup (see below). // XCTest import XCTest class StoreXCTests: XCTestCase { } // Swift Testing import Testing struct StoreTests { } Swift Testing creates a new instance of the StoreTests type for each unit test it runs. You’re not forced to organise Swift Testing tests in a type. For example, Apple recommends you convert an XCTestCase subclass with a single test to a global function. Test Setup and Teardown Swift Testing uses the types init (and deinit for class) methods to setup and teardown tests. I find this a big improvement over the XCTest approach of overriding one of the many setUp and tearDown methods. The init can be async or throwing as needed: // XCTest import XCTest class StoreXCTests: XCTestCase { let store: DataStore! override func setupWithError() throws { store = try DataStore(inMemory: true) } } // Swift Testing import Testing struct StoreTests { let store: DataStore init() throws { store = try DataStore(inMemory: true) } } For convenience I was using a forced unwrapped optional for the stored property in my XCTest. Using the normal Swift init method for my test type removes the need for that. As I mentioned above if you need to cleanup after the test runs, use a class and add the cleanup code to the deinit: // Swift Testing import Testing class StoreTests { let store: DataStore init() throws { store = try DataStore(inMemory: true) } deinit { store.reset() } } Creating Tests A Swift Testing test is a normal Swift method. It can be a standalone global function or one of many methods organised into a Swift struct, class, or actor. A method becomes a unit test when you add the @Test macro: // XCTest func testStoreIsReady() { } // Swift Testing @Test func storeIsReady() { } As with XCTest, you can mark test methods with async or throws and isolate them to an actor as needed. Unlike with XCTest, you don’t need to prefix your test method name with “test”. The @Test attribute is a macro so you can expand it to see the implementation if you wish. XCTest uses multiple Simulator instances to run tests in parallel. It doesn’t support running tests in-parallel on device. Swift Testing runs tests in-process using Swift Concurrency so it can run tests in-parallel on physical devices. Asserting with #expect and #require. For me, the biggest improvement over XCTest is replacing the forty odd variations of XCTAssert with the #expect and #require macros. The #expect macro accepts a Swift expression that you expect to be true. When the expression is false the #expect macro logs the failed expectation and the test continues: @Test func storeIsReady() { #expect(store.isReady) #expect(store.error == nil) } The error messages are generally more informative than the equivalent XCTest failure: Clicking the red cross in the error message and then the Show button expands the values in the expression which I find is sometimes more readable: It took me a little while to get used to but I prefer the flexibility of being able to use any Swift expression for the #expect rather than trying to remember which version of XCTAssert I need: // XCTest XCTAssertTrue(store.isReady) XCTAssertFalse(store.isReady) XCTAssertNil(store.error) XCTAssertNotNil(store.error) XCTAssertEqual(items.count, 5) // Swift Testing #expect(store.isReady) #expect(!store.isReady) #expect(store.error == nil) #expect(store.error != nil) #expect(items.count == 5) Unwrapping with #require The second expectation macro is #require. This is throwing version of #expect that stops the test execution on error. A common usage is to replace XCTUnwrap when unwrapping an optional. If the optional is nil the test stops: // XCTest func testCreateItem() throws { // createItem returns an Item? let item = try XCTUnwrap(store.createItem()) XCTAssertEqual(item.title == \"New item\") } // Swift Testing @Test func createItem() throws { // createItem returns an Item? let item = try #require(store.createItem()) #expect(item.title == \"New item\") } Replacing XCTFail Sometimes you need to cause a test to fail without evaluating a condition. For example, when certain cases in a switch are test failures. The XCTest framework has XCTFail for this. The Swift Testing equivalent is Issue.record: // Swift Testing @Test func storeReady() { switch store.state { case .failed: Issue.record(\"Expected ready, got failed\") case .loading: Issue.record(\"Expected ready, got loading\") case .ready: #expect(store.error == nil) } } Wrapping Up There’s a lot more you can do to customize tests, control when and how they run, handle async code, and organize with tags and test suites. I’ll save those topics for future posts. In the meantime, I recommend browsing the Apple article linked below for more details on migrating from XCTest. Learn More WWDC24 Meet Swift Testing Apple Article: Migrating a test from XCTest Migrating XCTest to Swift Testing was originally posted 09 Dec 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 09 Dec 2024 10:59:14 +0000",
    "image": "https://useyourloaf.com/blog/migrating-xctest-to-swift-testing/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "c1de5fdf-5720-4450-aa10-a4ad7d755baf",
    "title": "SwiftUI Charts Plotting Functions",
    "link": "https://useyourloaf.com/blog/swiftui-charts-plotting-functions/",
    "description": "In iOS 18 Apple added function plotting to the SwiftUI Charts framework. Function Plotting Both the LinePlot and AreaPlot charts accept a function to graph. The function accepts a Double and returns a Double. For example: Chart { LinePlot(x: \"x\", y: \"y\") { x in x * x } } .chartYAxisLabel(\"y = x * x\") Another example, with a range applied to the x-axis (you can also apply the domain parameter directly to the LinePlot method): Chart { LinePlot(x: \"x\", y: \"y\") { sin($0) } } .chartXScale(domain: -15...15) .chartYAxisLabel(\"y = sin(x)\") Note: Apple’s documentation mentions that for x values where the function is undefined or infinity you should return Double.nan or Double.infinity: Chart { LinePlot(x: \"x\", y: \"y\", domain: -5...5) { x in guard x != 0 else { return .nan } return 1 / x } } .chartYAxisLabel(\"y = 1/x\") .clipped() An area plot of a single function fills the area between the function and zero: Chart { AreaPlot(x: \"x\", y: \"y\") { sin($0) } } .chartXScale(domain: -15...15) .chartYAxisLabel(\"y = sin(x)\") If you give an area plot two functions for the starting and ending y value, it fills the area between the two functions: Chart { AreaPlot(x: \"x\", yStart: \"x\", yEnd: \"sin(x)\") { x in (yStart: sin(x), yEnd: sin(x + .pi)) } } Where I think function plotting becomes useful is when we’re visualising data that we expect to approximate a function. Adding an area and line plot of the function we can highlight the comparison between this bar chart and the expected results: Chart { AreaPlot(x: \"x\", y: \"y\") { $0 * $0 } .foregroundStyle(.gray) .opacity(0.5) LinePlot(x: \"x\", y: \"y\") { $0 * $0 } ForEach(data) { item in BarMark( x: .value(\"Sample\", item.score), y: .value(\"Result\", item.count) ) } } Learn More WWDC24 Swift Charts: Vectorized and function plots SwiftUI Charts Plotting Functions was originally posted 24 Nov 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Sun, 24 Nov 2024 13:33:26 +0000",
    "image": "https://useyourloaf.com/blog/swiftui-charts-plotting-functions/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "06ca838c-bd37-4094-aecb-80ef9db5c1a8",
    "title": "Harris for President",
    "link": "https://inessential.com/2024/10/31/harris_for_president.html",
    "description": "Donald Trump is a gross villain and a traitor to our country. He’s a convicted felon, adjudicated rapist, and head of a criminal organization; he works with criminals and he pardons criminals; he’s a narcissist and violent insurrectionist, racist and misogynist; he’s the master of lies and corruption and self-serving. He plans to rule as a fascist dictator, and this time has the backing to do so, for the benefit of him and his ultra-wealthy friends. Not for you. For everybody else, the various enemies within — everybody who isn’t a straight white male who goes along with the program — there will be concentration camps, deportation, prison, and rumors and threats of each. There will be more deaths in hospital parking lots. I have voted for Kamala Harris. I ask you to vote for her too. I happen to think Harris would be very good, possibly even great, as president. But it hardly matters! Voting for her is how we stop this. And we have to stop this.",
    "author": "",
    "published": "Thu, 31 Oct 2024 13:04:03 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "042797a6-0f4d-4eca-b780-9c956916d698",
    "title": "Seattle Xcoders 20th Anniversary Meetup",
    "link": "https://inessential.com/2024/10/16/seattle_xcoders_20th_anniversary_meetup.html",
    "description": "This Thursday, Oct. 17, 2024, is the 20th anniversary of the Seattle Xcoders! We’d love to see you there, at 7 pm at Bale Breaker and Yonder Cider taproom in Ballard. Everyone is welcome! It’s not just for people who write code — it’s for designers, testers, support folks, and everyone who helps make Apple-ecosystem apps. Even if you just like those kinds of apps and like talking about them, come join us! We’re usually outside by these propane fire things, but I’m not sure this time — we might have a room or some area or something. We should be easy to find, at any rate. It’s not actually a meeting with presentations — it’s just hanging out and talking. Which we do every first, third, and fifth Thursday (you can subscribe to our calendar). One of these days we’ll get back to presentations — but the social part is valuable, and so we keep it up. PS Looks like the food truck is Impeckable Chicken, which I’ve heard good things about. :) PPS I’m usually easy to spot: quite well into middle age, with nothing like the amount of hair I once had. Black jeans, usually a black sweatshirt. Glasses. Doc Martens. Not tall.",
    "author": "",
    "published": "Wed, 16 Oct 2024 19:13:25 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "2e072193-0f28-4972-9ce2-346098e828a3",
    "title": "Scalable Continuous Integration for iOS",
    "link": "https://albertodebortoli.com/2024/01/03/scalable-continuous-integration-for-ios/",
    "description": "How Just Eat Takeaway.com leverage AWS, Packer, Terraform and GitHub Actions to manage a CI stack of macOS runners.",
    "author": "Alberto De Bortoli",
    "published": "Wed, 03 Jan 2024 22:26:50 GMT",
    "image": "https://albertodebortoli.com/content/images/2024/01/1_SaGE67XSSeflkTKknVOHbg.webp",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "CI",
      "mobile",
      "iOS",
      "AWS",
      "macOS"
    ]
  },
  {
    "id": "9bbb55d8-ec28-4ab5-9856-54e27493dc97",
    "title": "The idea of a Fastlane replacement",
    "link": "https://albertodebortoli.com/2023/10/29/the-idea-of-a-fastlane-replacement/",
    "description": "PreludeFastlane is widely used by iOS teams all around the world. It became the standard de facto to automate common tasks such as building apps, running tests, and uploading builds to App Store Connect. Fastlane has been recently moved under the Mobile Native Foundation which is amazing as Google",
    "author": "Alberto De Bortoli",
    "published": "Sun, 29 Oct 2023 22:57:38 GMT",
    "image": "https://images.unsplash.com/photo-1647118762210-393b52e96fbc?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=M3wxMTc3M3wwfDF8c2VhcmNofDE4fHxzdGVsbGFyfGVufDB8fHx8MTY5ODYxODcwNXww\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=2000",
    "source": "https://albertodebortoli.com/rss/",
    "categories": null
  },
  {
    "id": "658421bc-ec0a-4104-8762-2fdaf2bc9b92",
    "title": "From Engineer to Manager: A Year of Growth and Transformation",
    "link": "https://benoitpasquier.com/2023/06/from-engineer-to-manager-a-year-of-growth-and-transformation/",
    "description": "It feels like it was yesterday when I became an engineering manager but it has been almost a year. I want to take this time to reflect on the challenges and learnings from this journey.",
    "author": "",
    "published": "Sun, 11 Jun 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "48691005-b8ad-4b32-a523-9b2bef141c02",
    "title": "Things to know before becoming an Engineering Manager",
    "link": "https://benoitpasquier.com/2023/02/things-to-know-before-becoming-an-engineering-manager/",
    "description": "The journey from individual contributor to engineering manager isn’t always straightforward. Today, I’ll share what it means to become an engineering manager from my point of view, and a few important points to be aware of before making this transition.",
    "author": "",
    "published": "Sun, 19 Feb 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "d30d541e-a865-437d-b1cd-99f5e4d2c5ae",
    "title": "Swift 6 suitable notification observers in iOS",
    "link": "https://augmentedcode.io/2024/11/18/swift-6-friendlier-notification-observers/",
    "description": "The author discusses challenges managing side projects, specifically updating SignalPath to Swift 6. They encountered errors related to multiple notification observations but resolved them by shifting to publishers, avoiding sendable closure issues. Although the new approach risks background thread notifications, the compiler is satisfied with the adjustments made to the code.",
    "author": "Toomas Vahter",
    "published": "Mon, 18 Nov 2024 16:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Swift"
    ]
  },
  {
    "id": "74442cee-4ec6-4166-96e8-19c2ca62a1a5",
    "title": "AnyClass protocol and Objective-C methods",
    "link": "https://augmentedcode.io/2024/11/04/anyclass-protocol-and-objective-c-methods/",
    "description": "AnyClass is a protocol all classes conform to and it comes with a feature I was not aware of. But first, how to I ended up with using AnyClass. While working on code using CoreData, I needed a way to enumerate all the CoreData entities and call a static function on them. If that function […]",
    "author": "Toomas Vahter",
    "published": "Mon, 04 Nov 2024 16:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Swift",
      "AnyClass"
    ]
  },
  {
    "id": "b416900d-82f7-4fb7-a45e-6408d312bc38",
    "title": "iOS Accessibility Values",
    "link": "https://mobilea11y.com/blog/accessibility-values/",
    "description": "For iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with traits, labels, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the value part of WCAG 4.1.2: Name, Role, Value. Values Not every element in your view will have a value - in fact, most won’t. Any element that ‘contains’ some data, data that is not included in the element’s label requires an accessibility value to be set.",
    "author": "",
    "published": "Sun, 19 Jun 2022 10:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "ed453e94-fa69-454d-a790-cbf050dcded2",
    "title": "iOS UIKit Accessibility traits",
    "link": "https://mobilea11y.com/blog/traits/",
    "description": "Accessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - WCAG’s 4.",
    "author": "",
    "published": "Fri, 13 Aug 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "55e1ceea-aca0-4368-9c01-aa440b867705",
    "title": "Introducing Plinky: My Love Letter To Links",
    "link": "https://fabisevi.ch/2024/05/09/introducing-plinky/",
    "description": "The post below was written by me, originally featured on the Plinky blog. To celebrate the launch of Plinky you can get 50% off of a yearly subscription by redeeming this offer: plinky.app/offer/REDPANDA There are few words I've ever said more excitedly than these: I want to tell you about my latest app, Plinky. Plinky makes it incredibly easy to do something we do every day, save links for later. You may already have a way to save links, I know I've tried every method under the sun, to the point where I decided to build my own app. That app is Plinky, and today it's available to download on the App Store. Over the last 18 months people have been loving Plinky, because it fixes the same problems I ran into when I've tried to save links in the past.",
    "author": "Joe Fabisevich",
    "published": "Thu, 09 May 2024 00:00:00 GMT",
    "image": "/static/c3d9146a8edf380ee267c61558f3a91b/ec7ce/plinky-screenshots.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "abe49595-49e1-49f1-be19-007054b01770",
    "title": "The Reasoning Computer",
    "link": "https://fabisevi.ch/2023/11/10/the-reasoning-computer/",
    "description": "The Turing test is dead, and we killed it. The Turing test is a test of a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human. From the 1940s 1 to the 2010s people programmed computers, and computers could only do what they were programmed to do in a rules-based deterministic manner. Sometimes a person would program the computer and it would do something unexpected, but 100 out of 100 times the computer was doing what it was programmed to do whether the person liked it or not. While there has been experimentation with what today we call AI since the 1950s, those machines were a long ways away from passing the Turing test. Why does using ChatGPT feel more like a conversation with the smartest person you know than a computer? It's because ChatGPT doesn't solve problems deterministically the way a programmed computer does, it solves them probabilistically. 2 ChatGPT demonstrates the ability to think about something in a logical, sensible way, the definition of reasoning. 3 We've created something completely new here, a reasoning computer. 4",
    "author": "Joe Fabisevich",
    "published": "Fri, 10 Nov 2023 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "359c509d-f4e5-4e0a-b391-65b13ce68e3d",
    "title": "Get ready with the latest beta releases",
    "link": "https://developer.apple.com/news/?id=rcvik60x",
    "description": "The beta versions of iOS 18.3, iPadOS 18.3, macOS 15.3, tvOS 18.3, visionOS 2.3, and watchOS 11.3 are now available. Get your apps ready by confirming they work as expected on these releases. And to take advantage of the advancements in the latest SDKs, make sure to build and test with Xcode 16.2.View downloads and release notes Learn about testing a beta OS Learn about sending feedback",
    "author": "",
    "published": "Mon, 16 Dec 2024 11:31:12 PST",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "74d72cde-ccc9-4c05-ac1d-edc623fbf0ff",
    "title": "App Store Award winners announced",
    "link": "https://developer.apple.com/news/?id=t9ha5xqc",
    "description": "Join us in celebrating the outstanding work of these developers from around the world.Meet the winners",
    "author": "",
    "published": "Wed, 11 Dec 2024 09:00:25 PST",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/572DF998-E42E-4EA8-A2E2-EE9F05DF58B6/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "fc5ff447-f41b-488c-806f-3dbb4e1082f9",
    "title": "Building with nightly Swift toolchains on macOS",
    "link": "https://oleb.net/2024/swift-toolchains/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-03-05T18:54:44Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "1d708ff6-aa0e-420c-92d7-c5edae580f27",
    "title": "How the Swift compiler knows that DispatchQueue.main implies @MainActor",
    "link": "https://oleb.net/2024/dispatchqueue-mainactor/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-02-29T18:54:47Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "87f40435-8378-48f0-9047-4a590923c778",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "4eb606ee-73d8-4dbf-aed5-7be9c62ee48d",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "02d4e5a7-f553-466a-b9fe-9413cfba2f90",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "a1e6d35d-130a-4310-93a3-ee04a4f47204",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "298994a7-872c-417b-96da-93139824bf81",
    "title": "Magical Particle Effects with SwiftUI Canvas",
    "link": "https://nerdyak.tech/development/2024/06/27/particle-effects-with-SwiftUI-Canvas.html",
    "description": "In one of the previous posts, I shared a simple way of Creating particle effects in SwiftUI. The approach is super easy and utilizes the power of viewModifiers, but I would not recommend it for production use as it is performance-greedy when having a bigger amount of particles in place (because each particle is a single view)",
    "author": "Pavel Zak",
    "published": "2024-06-27T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Canvas",
      "Particles",
      "BlendMode",
      "TimelineView"
    ]
  },
  {
    "id": "e5b92975-af87-463f-be77-aec067288f0f",
    "title": "SwiftUI transitions with distortion effect and Metal Shaders",
    "link": "https://nerdyak.tech/development/2023/06/16/distortionEffect-with-Metal-shaders-for-better-transitions.html",
    "description": "This year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the PhaseAnimator, KeyframeAnimator and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (docs).",
    "author": "Pavel Zak",
    "published": "2023-06-16T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "distortionEffect",
      "Metal",
      "Shaders",
      "transitions"
    ]
  }
]
