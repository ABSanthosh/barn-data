[
  {
    "id": "32f13057-ec99-4929-b256-f4d485cff4d0",
    "title": "Hello Developer: October 2024",
    "link": "https://developer.apple.com/news/?id=tdh8tuh0",
    "description": "Get your app up to speed, meet the team behind Lies of P, explore new student resources, and more.Read the full article",
    "author": "",
    "published": "Thu, 10 Oct 2024 08:01:36 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/943A87F6-7281-4353-9695-BC1729C56C96/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "70b9df6a-9330-492d-958d-dd8dd4f28e95",
    "title": "Masters of puppets: How ROUND8 Studio carved out a niche for Lies of P",
    "link": "https://developer.apple.com/news/?id=jimo1g6z",
    "description": "Lies of P is closer to its surprising source material than you might think.Based on Carlo Collodi’s 1883 novel The Adventures of Pinocchio, the Apple Design Award-winning game is a macabre reimagining of the story of a puppet who longs to be a real boy. Collodi’s story is still best known as a children’s fable. But it’s also preprogrammed with more than its share of darkness — which made it an appealing foundation for Lies of P director Jiwon Choi.“When we were looking for stories to base the game on, we had a checklist of needs,” says Choi. “We wanted something dark. We wanted a story that was familiar but not entirely childish. And the deeper we dove into Pinocchio, the more we found that it checked off everything we were looking for.”ADA FACT SHEETLies of P Winner: Visuals and Graphics Team: ROUND8 Studio (developer), NEOWIZ (publisher) Available on: Mac Team size: 100 Previous accolades: App Store 2023 Mac Game of the Year, App Store Editors’ Choice Developed by the South Korea-based ROUND8 Studio and published by its parent company, NEOWIZ, Lies of P is a lavishly rendered dark fantasy adventure and a technical showpiece for Mac with Apple silicon. Yes, players control a humanoid puppet created by Geppetto. But instead of a little wooden boy with a penchant for little white lies, the game’s protagonist is a mechanical warrior with an array of massive swords and a mission to battle through the burned-out city of Krat to find his maker — who isn’t exactly the genial old woodcarver from the fable.“The story is well-known, and so are the characters,” says Choi. “We knew that to create a lasting memory for gamers, we had to add our own twists.”Those twists abound. The puppet is accompanied by a digital lamp assistant named Gemini — pronounced “jim-i-nee,” of course. A major character is a play on the original’s kindly Blue Fairy. A game boss named Mad Donkey is a lot more irritable than the donkeys featured in Collodi’s story. And though nobody’s nose grows in Lies of P, characters have opportunities to lie in a way that directly affects the storyline — and potentially one of the game’s multiple endings.We knew that to create a lasting memory for gamers, we had to add our own twists.Jiwon Choi, Lies of P director“If you play without knowing the original story, you might not catch all those twists,” says Choi. “But it goes the other way, too. We’ve heard from players who became curious about the original story, so they went back and found out about our twists that way.”There’s nothing curious about the game’s success: In addition to winning a 2024 Apple Design Award for Visuals and Graphics, Lies of P was named the App Store’s 2023 Mac Game of the Year and has collected a bounty of accolades from the gaming community. Many of those call out the game’s visual beauty, a world of rich textures, detailed lighting, and visual customization options like MetalFX upscaling and volumetric fog effects that let you style the ruined city to your liking. For that city, the ROUND8 team added another twist by moving the story from its original Italian locale to the Belle Èpoque era of pre-WWI France. “Everyone expected Italy, and everyone expected steampunk,” says Choi, “but we wanted something that wasn’t quite as common in the gaming industry. We considered a few other locations, like the wild west, but the Belle Èpoque was the right mix of beauty and prosperity. We just made it darker and gloomier.”We considered a few other locations, like the wild west, but the Belle Èpoque was the right mix of beauty and prosperity. We just made it darker and gloomier.Jiwon Choi, Lies of P directorTo create the game’s fierce (and oily) combat, Choi and the team took existing Soulslike elements and added their own touches, like customizable weapons that can be assembled from items lying around Krat. “We found that players will often find a weapon they like and use it until the ending,” says Choi. “We found that inefficient. But we also know that everyone has a different taste for weapons.”The system, he says, gives players the freedom to choose their own combinations instead of pursuing a “best” pre-ordained weapon. And the strategy worked: Choi says players are often found online discussing the best combinations rather than the best weapons. “That was our intention when creating the system,” he says.Also intentional: The game’s approach to lying, another twist on the source material. “Lying in the game isn’t just about deceiving a counterpart,” says Choi. “Humans are the only species who can lie to one another, so lying is about exploring the core of this character.” It’s also about the murky ethics of lying: Lies of P suggests that, at times, nothing is as human — or humane — as a well-intentioned falsehood.“The puppet of Geppetto is not human,” says Choi. “But at the same time, the puppet acts like a human and occasionally exhibits human behavior, like getting emotional listening to music. The idea was: Lying is something a human might do. That’s why it’s part of the game.”The Lies of P story might not be done just yet. Choi and team are working on downloadable content and a potential sequel — possibly starring another iconic character who’s briefly teased in the game’s ending. But in the meantime, the team is taking a moment to enjoy the fruits of their success. “At the beginning of development, I honestly doubted that we could even pull this off,” says Choi. “For me, the most surprising thing is that we achieved this. And that makes us think, ‘Well, maybe we could do better next time.’”Meet the 2024 Apple Design Award winnersBehind the Design is a series that explores design practices and philosophies from finalists and winners of the Apple Design Awards. In each story, we go behind the screens with the developers and designers of these award-winning apps and games to discover how they brought their remarkable creations to life.",
    "author": "",
    "published": "Thu, 10 Oct 2024 08:00:50 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/58B1D4A7-C03F-42A6-BAFB-33B5BD6F040C/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "5637ca5c-3abc-45b9-a45f-b9f67809c9be",
    "title": "Announcing the Swift Student Challenge 2025",
    "link": "https://developer.apple.com/news/?id=hu2iq38q",
    "description": "We’re thrilled to announce the Swift Student Challenge 2025. The Challenge provides the next generation of student developers the opportunity to showcase their creativity and coding skills by building app playgrounds with Swift.Applications for the next Challenge will open in February 2025 for three weeks.We’ll select 350 Swift Student Challenge winners whose submissions demonstrate excellence in innovation, creativity, social impact, or inclusivity. From this esteemed group, we’ll name 50 Distinguished Winners whose work is truly exceptional and invite them to join us at Apple in Cupertino for three incredible days where they’ll gain invaluable insights from Apple experts and engineers, connect with their peers, and enjoy a host of unforgettable experiences.All Challenge winners will receive one year of membership in the Apple Developer Program, a special gift from Apple, and more.To help you get ready, we’re launching new coding resources, including Swift Coding Clubs designed for students to develop skills for a future career, build community, and get ready for the Challenge.Learn more",
    "author": "",
    "published": "Tue, 08 Oct 2024 05:01:37 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/4C086A3B-E1E3-4F77-AD6A-C3D00F14A2C3/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "d34bddd6-36e1-462e-99b5-e75c1767cbbe",
    "title": "Upcoming regional age ratings in Australia and France",
    "link": "https://developer.apple.com/news/?id=4mfp130q",
    "description": "Apple is committed to making the App Store a safe place for everyone — especially kids. Within the next few months, the following regional age ratings for Australia and France will be implemented in accordance with local laws. No action is needed on your part. Where required by local regulations, regional ratings will appear alongside Apple global age ratings.AustraliaApps with any instances of simulated gambling will display an R18+ regional age rating in addition to the Apple global age rating on the App Store in Australia.FranceApps with a 17+ Apple global age rating will also display an 18+ regional age rating on the App Store in France.Learn more about the age ratings",
    "author": "",
    "published": "Thu, 26 Sep 2024 08:00:01 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "5de4d6a6-bd07-4485-a951-c73b5e59d20a",
    "title": "Update on iPadOS 18 apps distributed in the European Union",
    "link": "https://developer.apple.com/news/?id=4sn7e783",
    "description": "The App Review Guidelines have been revised to add iPadOS to Notarization.Starting September 16: Users in the EU can download iPadOS apps on the App Store and through alternative distribution. As mentioned in May, if you have entered into the Alternative Terms Addendum for Apps in the EU, iPadOS first annual installs will begin to accrue and the lower App Store commission rate will apply. Alternative browser engines can be used in iPadOS apps. Historical App Install Reports in App Store Connect that can be used with our fee calculator will include iPadOS. If you’ve entered into a previous version of the following agreements, be sure to sign the latest version, which supports iPadOS: Alternative Terms Addendum for Apps in the EU Web Browser Engine Entitlement Addendum for Apps in the EU Embedded Browser Engine Entitlement Addendum for Apps in the EU Learn more about the update on apps distributed in the EUTranslations of the guidelines will be available on the Apple Developer website within one month.",
    "author": "",
    "published": "Fri, 13 Sep 2024 00:00:18 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "13b94ceb-5170-46f0-b3b8-a43c24b8d801",
    "title": "Win-back offers for auto-renewable subscriptions now available",
    "link": "https://developer.apple.com/news/?id=8utnewzk",
    "description": "You can now configure win-back offers — a new type of offer for auto-renewable subscriptions — in App Store Connect. Win-back offers allow you to reach previous subscribers and encourage them to resubscribe to your app or game. For example, you can create a pay up front offer for a reduced subscription price of $9.99 for six months, with a standard renewal price of $39.99 per year. Based on your offer configuration, Apple displays these offers to eligible customers in various places, including: Across the App Store, including on your product page, as well as in personalized recommendations and editorial selections on the Today, Games, and Apps tabs. In your app or game. Via a direct link you share using your own marketing channels. In Subscription settings. When creating win-back offers in App Store Connect, you’ll determine customer eligibility, select regional availability, and choose the discount type. Eligible customers will be able to discover win-back offers this fall.Set up win-back offersLearn about win-back offers",
    "author": "",
    "published": "Tue, 10 Sep 2024 07:00:08 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/36DAEB9E-B718-4A1A-B6F6-F35FB864E810/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "8fc486cc-adec-490b-8e9e-c9ccac71c05a",
    "title": "App Store submissions now open for the latest OS releases",
    "link": "https://developer.apple.com/news/?id=utw4yhtp",
    "description": "iOS 18, iPadOS 18, macOS Sequoia, tvOS 18, visionOS 2, and watchOS 11 will soon be available to customers worldwide. Build your apps and games using the Xcode 16 Release Candidate and latest SDKs, test them using TestFlight, and submit them for review to the App Store. You can now start deploying seamlessly to TestFlight and the App Store from Xcode Cloud. With exciting new features like watchOS Live Activities, app icon customization, and powerful updates to Swift, Siri, Controls, and Core ML, you can deliver even more unique experiences on Apple platforms.And beginning next month, you’ll be able to bring the incredible new features of Apple Intelligence into your apps to help inspire the way users communicate, work, and express themselves.Starting April 2025, apps uploaded to App Store Connect must be built with SDKs for iOS 18, iPadOS 18, tvOS 18, visionOS 2, or watchOS 11.Learn about submitting apps",
    "author": "",
    "published": "Mon, 09 Sep 2024 08:00:34 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "47e4f530-5caa-46f5-89d9-a28ebb02773f",
    "title": "Hello Developer: September 2024",
    "link": "https://developer.apple.com/news/?id=myu3gpem",
    "description": "Get your apps ready by digging into these video sessions and resources. Explore machine learning on Apple platforms Watch now Bring expression to your app with Genmoji Watch now Browse new resourcesLearn how to make actions available to Siri and Apple Intelligence. Ebook actions Camera actions Presentation actions Need a boost?Check out our curated guide to machine learning and AI.FEATUREDGet ready for OS updatesDive into the latest updates with these developer sessions.Level up your games Port advanced games to Apple platforms Watch now Design advanced games for Apple platforms Watch now Bring your vision to life Design great visionOS apps Watch now Design interactive experiences for visionOS Watch now Upgrade your iOS and iPadOS apps Extend your app’s controls across the system Watch now Elevate your tab and sidebar experience in iPadOS Watch now Browse Apple Developer on YouTubeGet expert guidanceCheck out curated guides to the latest features and technologies. Games visionOS iOS and iPadOS BEHIND THE DESIGNRytmos: A puzzle game with a global beatFind out how Floppy Club built an Apple Design Award winner that sounds as good as it looks. Behind the Design: The rhythms of Rytmos View now MEET WITH APPLEReserve your spot for upcoming developer activities Envision the future: Create great apps for visionOS: Find out how to build visionOS apps for a variety of use cases. (October 2, Cupertino) Build faster and more efficient apps: Learn how to optimize your use of Apple frameworks, resolve performance issues, and reduce launch time. (October 23, Cupertino) Subscribe to Hello DeveloperWant to get Hello Developer in your inbox? Make sure you’ve opted in to receive emails about developer news and events by updating your email preferences in your developer account.Share your thoughtsWe’d love to hear from you. If you have suggestions for our activities or stories, please let us know.",
    "author": "",
    "published": "Tue, 03 Sep 2024 07:00:47 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/121AB9CF-BAE9-4C92-BFE7-1B923E1C2972/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "675165f5-d4ed-4a81-93d9-47165ef2ff95",
    "title": "Behind the Design: The rhythms of Rytmos",
    "link": "https://developer.apple.com/news/?id=34m9vbvv",
    "description": "Rytmos is a game that sounds as good as it looks.With its global rhythms, sci-fi visuals, and clever puzzles, the 2024 Apple Design Award winner for Interaction is both a challenge and an artistic achievement. To solve each level, players must create linear pathways on increasingly complex boards, dodging obstacles and triggering buttons along the way. It’s all set to a world-music backdrop; different levels feature genres as diverse as Ethiopian jazz, Hawaiian slack key guitar, and Gamelan from Indonesia, just to name a few.And here’s the hook: Every time you clear a level, you add an instrument to an ever-growing song.“The idea is that instead of reacting to the music, you’re creating it,” says Asger Strandby, cofounder of Floppy Club, the Denmark-based studio behind Rytmos. “We do a lot to make sure it doesn’t sound too wild. But the music in Rytmos is entirely generated by the way you solve the puzzles.”ADA FACT SHEETRytmos Winner: Interaction Team: Floppy Club Available on: iPhone, iPad Team size: 5 Learn more about RytmosDownload Rytmos from the App StoreThe artful game is the result of a partnership that dates back decades. In addition to being developers, Strandby and Floppy Club cofounder Niels Böttcher are both musicians who hail from the town of Aarhus in Denmark. “It’s a small enough place that if you work in music, you probably know everyone in the community,” laughs Böttcher. The music in Rytmos comes mostly from traveling and being curious.Niels Böttcher, Floppy Club cofounderThe pair connected back in the early 2000s, bonding over music more than games. “For me, games were this magical thing that you could never really make yourself,” says Strandby. “I was a geeky kid, so I made music and eventually web pages on computers, but I never really thought I could make games until I was in my twenties.” Instead, Strandby formed bands like Analogik, which married a wild variety of crate-digging samples — swing music, Eastern European folk, Eurovision-worthy pop — with hip-hop beats. Strandby was the frontman, while Böttcher handled the behind-the-scenes work. “I was the manager in everything but name,” he says.The band was a success: Analogik went on to release five studio albums and perform at Glastonbury, Roskilde, and other big European festivals. But when their music adventure ended, the pair moved back into separate tech jobs for several years — until the time came to join forces again. “We found ourselves brainstorming one day, thinking about, ‘Could we combine music and games in some way?’” says Böttcher. “There are fun similarities between the two in terms of structures and patterns. We thought, ‘Well, let’s give it a shot.’”The duo launched work on a rhythm game that was powered by their histories and travels. “I’ve collected CDs and tapes from all over the world, so the genres in Rytmos are very carefully chosen,” says Böttcher. “We really love Ethiopian jazz music, so we included that. Gamelan music (traditional Indonesian ensemble music that’s heavy on percussion) is pretty wild, but incredible. And sometimes, you just hear an instrument and say, ‘Oh, that tabla has a really nice sound.’ So the music in Rytmos comes mostly from traveling and being curious.”The game took shape early, but the mazes in its initial versions were much more intricate. To help bring them down to a more approachable level, the Floppy Club team brought on art director Niels Fyrst. “He was all about making things cleaner and clearer,” says Böttcher. “Once we saw what he was proposing — and how it made the game stronger — we realized, ‘OK, maybe we’re onto something.’”Success in Rytmos isn't just that you're beating a level. It's that you're creating something.Asger Strandby, Floppy Club cofounderStill, even with a more manageable set of puzzles, a great deal of design complexity remained. Building Rytmos levels was like stacking a puzzle on a puzzle; the team not only had to build out the levels, but also create the music to match. To do so, Strandby and his brother, Bo, would sketch out a level and then send it over to Böttcher, who would sync it to music — a process that proved even more difficult than it seems. “The sound is very dependent on the location of the obstacles in the puzzles,” says Strandby. “That’s what shapes the music that comes out of the game. So we’d test and test again to make sure the sound didn’t break the idea of the puzzle.”The process, he says, was “quite difficult” to get right. “Usually with something like this, you create a loop, and then maybe add another loop, and then add layers on top of it,” says Böttcher. “In Rytmos, hitting an emitter triggers a tone, percussion sound, or chord. One tone hits another tone, and then another, and then another. In essence, you’re creating a pattern while playing the game.”We’ve actually gone back to make some of the songs more imprecise, because we want them to sound human.Niels Böttcher, Floppy Club cofounderThe unorthodox approach leaves room for creativity. “Two different people’s solutions can sound different,” says Strandby. And when players win a level, they unlock a “jam mode” where they can play and practice freely. \"It’s just something to do with no rules after all the puzzling,” laughs Strandby.Yet despite all the technical magic happening behind the scenes, the actual musical results had to have a human feel. “We’re dealing with genres that are analog and organic, so they couldn’t sound electronic at all,” says Böttcher. “We’ve actually gone back to make some of the songs more imprecise, because we want them to sound human.”Best of all, the game is shot through with creativity and cleverness — even offscreen. Each letter in the Rytmos logo represents the solution to a puzzle. The company’s logo is a 3.5-inch floppy disk, a little nod to their first software love. (“That’s all I wished for every birthday,” laughs Böttcher.) And both Böttcher and Strandby hope that the game serves as an introduction to both sounds and people they might not be familiar with. \"Learning about music is a great way to learn about a culture,” says Strandby.But mostly, Rytmos is an inspirational experience that meets its lofty goal. “Success in Rytmos isn’t just that you’re beating a level,” says Strandby. “It’s that you’re creating something.”Meet the 2024 Apple Design Award winnersBehind the Design is a series that explores design practices and philosophies from finalists and winners of the Apple Design Awards. In each story, we go behind the screens with the developers and designers of these award-winning apps and games to discover how they brought their remarkable creations to life.",
    "author": "",
    "published": "Tue, 03 Sep 2024 06:59:53 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/4455E7D1-C2DD-46EB-95E1-15422B3103F1/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "efbc4f3d-7d63-47ae-b6e9-338658431c03",
    "title": "Price and tax updates for apps, In-App Purchases, and subscriptions",
    "link": "https://developer.apple.com/news/?id=rob1vlg0",
    "description": "The App Store is designed to make it easy to sell your digital goods and services globally, with support for 44 currencies across 175 storefronts.From time to time, we may need to adjust prices or your proceeds due to changes in tax regulations or foreign exchange rates. These adjustments are made using publicly available exchange rate information from financial data providers to help make sure prices for apps and In-App Purchases stay consistent across all storefronts.Price updatesOn September 16: Pricing for apps and In-App Purchases¹ will be updated for the Chile, Laos, and Senegal storefronts if you haven’t selected one of these as the base for your app or In‑App Purchase.¹ These updates also consider value‑added tax (VAT) introductions listed in the “Tax updates” section below. If you’ve selected the Chile, Laos, or Senegal storefront as the base for your app or In-App Purchase, prices won’t change. On other storefronts, prices will be updated to maintain equalization with your chosen base price.Prices won’t change in any region if your In‑App Purchase is an auto‑renewable subscription and won’t change on the storefronts where you manually manage prices instead of using the automated equalized prices.The Pricing and Availability section of Apps has been updated in App Store Connect to display these upcoming price changes. As always, you can change the prices of your apps, In‑App Purchases, and auto‑renewable subscriptions at any time.Learn more about managing your pricesView or edit upcoming price changesEdit your app’s base country or regionPricing and availability start times by regionSet a price for an In-App PurchaseTax updatesAs of August 29:Your proceeds from the sale of eligible apps and In‑App Purchases have been modified in: Laos: VAT introduction of 10% Senegal: VAT introduction of 18% India: Equalization levy of 2% no longer applicable Exhibit B of the Paid Applications Agreement has been updated to indicate that Apple collects and remits applicable taxes in Laos and Senegal.Beginning in September:Your proceeds from the sale of eligible apps and In‑App Purchases will be modified in: Canada: Digital services tax introduction of 3% Finland: VAT increase from 24% to 25.5% Learn more about your proceedsView payments and proceedsDownload financial reports1: Excludes auto-renewable subscriptions.",
    "author": "",
    "published": "Thu, 29 Aug 2024 07:00:52 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "072ba5ec-50c5-47ff-99a5-46f12284a015",
    "title": "It’s Glowtime.",
    "link": "https://developer.apple.com/news/?id=zvdnvggt",
    "description": "Join us for a special Apple Event on September 9 at 10 a.m. PT. Watch on apple.com, Apple TV, or YouTube Live.",
    "author": "",
    "published": "Mon, 26 Aug 2024 08:00:01 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/AFB3A2B1-7463-4BC2-A7DA-27BAF1AA2636/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "b9d0ddac-37b1-46ee-9b2c-c5756a1dadf8",
    "title": "Upcoming changes to the browser choice screen, default apps, and app deletion for EU users",
    "link": "https://developer.apple.com/news/?id=zglax7gc",
    "description": "By the end of this year, we’ll make changes to the browser choice screen, default apps, and app deletion for iOS and iPadOS for users in the EU. These updates come from our ongoing and continuing dialogue with the European Commission about compliance with the Digital Market Act’s requirements in these areas.Developers of browsers offered in the browser choice screen in the EU will have additional information about their browser shown to users who view the choice screen, and will get access to more data about the performance of the choice screen. The updated choice screen will be shown to all EU users who have Safari set as their default browser. For details about the changes coming to the browser choice screen, view About the browser choice screen in the EU.For users in the EU, iOS 18 and iPadOS 18 will also include a new Default Apps section in Settings that lists defaults available to each user. In future software updates, users will get new default settings for dialing phone numbers, sending messages, translating text, navigation, managing passwords, keyboards, and call spam filters. To learn more, view Update on apps distributed in the European Union.Additionally, the App Store, Messages, Photos, Camera, and Safari apps will now be deletable for users in the EU.",
    "author": "",
    "published": "Thu, 22 Aug 2024 07:00:36 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "5d24bc7e-7987-4214-8cd9-98fb80947e18",
    "title": "Upcoming requirements for app distribution in the European Union",
    "link": "https://developer.apple.com/news/?id=a0nevv65",
    "description": "As a reminder, Account Holders or Admins in the Apple Developer Program need to enter trader status in App Store Connect for apps on the App Store in the European Union (EU) in order to comply with the Digital Services Act.Please note these new dates and requirements: October 16, 2024: Trader status will be required to submit app updates. If you’re a trader, you’ll need to provide your trader information before you can submit your app for review. February 17, 2025: Apps without trader status will be removed from the App Store in the EU until trader status is provided and verified. Learn what a trader is and how to enter your status",
    "author": "",
    "published": "Thu, 15 Aug 2024 09:00:14 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "28b9a7ed-01dd-4fb9-a03f-065a4cb1d37a",
    "title": "Apple Entrepreneur Camp applications are now open",
    "link": "https://developer.apple.com/news/?id=49500drc",
    "description": "Apple Entrepreneur Camp supports underrepresented founders and developers, and encourages the pipeline and longevity of these entrepreneurs in technology. Attendees benefit from one-on-one code-level guidance, receive unprecedented access to Apple engineers and experts, and become part of the extended global network of Apple Entrepreneur Camp alumni.Applications are now open for female,* Black, Hispanic/Latinx, and Indigenous founders and developers. And this year we’re thrilled to bring back our in-person programming at Apple in Cupertino. For those who can’t attend in person, we’re still offering our full program online. We welcome established entrepreneurs with app-driven businesses to learn more about eligibility requirements and apply today.Apply by September 3, 2024.Learn more * Apple believes that gender expression is a fundamental right. We welcome all women to apply to this program.",
    "author": "",
    "published": "Tue, 13 Aug 2024 07:00:33 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/99A1800C-E399-41AB-9A95-F58AEA6B28F9/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "f27b40d5-de54-433b-b752-554d94671ac5",
    "title": "Updates to the StoreKit External Purchase Link Entitlement",
    "link": "https://developer.apple.com/news/?id=szrqxadx",
    "description": "In response to the announcement by the European Commission in June, we’re making the following changes to Apple’s Digital Markets Act compliance plan. We’re introducing updated terms that will apply this fall for developers with apps in the European Union storefronts of the App Store that use the StoreKit External Purchase Link Entitlement. Key changes include: Developers can communicate and promote offers for purchases available at a destination of their choice. The destination can be an alternative app marketplace, another app, or a website, and it can be accessed outside the app or via a web view that appears in the app. Developers may design and execute within their apps the communication and promotion of offers. This includes providing information about prices of subscriptions or any other offer available both within or outside the app, and providing explanations or instructions about how to subscribe to offers outside the application. These communications must provide accurate information regarding the digital goods or services available for purchase. Developers may choose to use an actionable link that can be tapped, clicked, or scanned, to take users to their destination. Developers can use any number of URLs, without declaring them in the app’s Info.plist. Links with parameters, redirects, and intermediate links to landing pages are permitted. Updated business terms for apps with the External Purchase Link Entitlement are being introduced to align with the changes to these capabilities. Learn more by visiting Alternative payment options on the App Store in the European Union or request a 30-minute online consultation to ask questions and provide feedback about these changes.",
    "author": "",
    "published": "Thu, 08 Aug 2024 07:00:20 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "4b23c639-14dd-40ee-9af8-7af81c18bead",
    "title": "Hello Developer: August 2024",
    "link": "https://developer.apple.com/news/?id=2keszuqr",
    "description": "Meet with AppleExplore the latest developer activities — including sessions, consultations, and labs — all around the world.Browse the full schedule \u003eBEHIND THE DESIGNCreating the make-believe magic of Lost in PlayDiscover how the developers of this Apple Design Award-winning game conjured up an imaginative world of oversized frogs, mischievous gnomes, and occasional pizzas. Behind the Design: Creating the make-believe magic of Lost in Play View now Get resourceful Build local experiences with room tracking: Use room tracking in visionOS to provide custom interactions with physical spaces. Preview your app’s interface in Xcode: Iterate designs quickly and preview your apps’ displays across different Apple devices. News snippets Explore Apple Music Feed: Now available through the Apple Developer Program, Apple Music Feed provides bulk rich catalog metadata for developing experiences that link back to Apple Music. Updates to runtime protection in macOS Sequoia: Find out about updates to Gatekeeper. Evaluate your app’s performance: Find out what’s working — and what you can improve — with peer group benchmark metrics across app categories, business models, and download volumes. SESSION OF THE MONTHExtend your Xcode Cloud workflowsDiscover how Xcode Cloud can adapt to your development needs. Extend your Xcode Cloud workflows Watch now Subscribe to Hello DeveloperWant to get Hello Developer in your inbox? Make sure you’ve opted in to receive emails about developer news and events by updating your email preferences in your developer account.Share your thoughtsWe’d love to hear from you. If you have suggestions for our activities or stories, please let us know.",
    "author": "",
    "published": "Tue, 06 Aug 2024 08:01:16 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/8A632EAC-4846-4E41-BE7D-1F35D9BC2A78/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "9f60cf90-bc47-4272-9f41-b65cedab6b2c",
    "title": "Behind the Design: Creating the make-believe magic of Lost in Play",
    "link": "https://developer.apple.com/news/?id=n4w6zydm",
    "description": "Lost in Play is a game created by and for people who love to play make-believe.The 2024 Apple Design Award (ADA) winner for Innovation is a point-and-click adventure that follows two young siblings, Toto and Gal, through a beautifully animated world of forbidden forests, dark caverns, friendly frogs, and mischievous gnomes. To advance through the game’s story, players complete fun mini-games and puzzles, all of which feel like a Saturday morning cartoon: Before the journey is out, the pair will fetch a sword from a stone, visit a goblin village, soar over the sea on an enormous bird, and navigate the real-world challenges of sibling rivalry. They will also order several pizzas.ADA FACT SHEETLost in Play Winner: Innovation Team: Happy Juice Games, Israel Available on: iPhone, iPad Team size: 7 Previous accolades: iPad Game of the Year (2023) Download Lost in PlayLearn more about Lost in PlayLost in Play is the brainchild of Happy Juice Games, a small Israel-based team whose three cofounders drew inspiration from their own childhoods — and their own families. “We’ve all watched our kids get totally immersed playing make-believe games,” says Happy Juice’s Yuval Markovich. “We wanted to recreate that feeling. And we came up with the idea of kids getting lost, partly in their imaginations, and partly in real life.”The team was well-equipped for the job. Happy Juice cofounders Markovich, Oren Rubin, and Alon Simon, all have backgrounds in TV and film animation, and knew what they wanted a playful, funny adventure even before drawing their first sketch. “As adults, we can forget how to enjoy simple things like that,” says Simon, “so we set out to make a game about imagination, full of crazy creatures and colorful places.”For his part, Markovich didn’t just have a history in gaming; he taught himself English by playing text-based adventure games in the ‘80s. “You played those games by typing ‘go north’ or ‘look around,’ so every time I had to do something, I’d open the dictionary to figure out how to say it,” he laughs. “At some point I realized, ‘Oh wait, I know this language.’”The story became a matter of, ‘OK, a goblin village sounds fun — how do we get there?’Yuval Markovich, Happy Juice Games cofounderBut those games could be frustrating, as anyone who ever tried to “leave house” or “get ye flask” can attest. Lost in Play was conceived from day one to be light and navigable. “We wanted to keep it comic, funny, and easy,” says Rubin. “That’s what we had in mind from the very beginning.”Lost in Play may be a linear experience — it feels closer to playing a movie than a sandbox game — but it’s hardly simple. As befitting a playable dream, its story feels a little unmoored, like it’s being made up on the fly. That’s because the team started with art, characters, and environments, and then went back to add a hero’s journey to the elements.“We knew we’d have a dream in the beginning that introduced a few characters. We knew we’d end up back at the house. And we knew we wanted one scene under the sea, and another in a maker space, and so on,” says Markovich. “The story became a matter of, ‘OK, a goblin village sounds fun — how do we get there?’” Naturally, the team drew on their shared backgrounds in animation to shape the game all throughout its three-year development process — and not just in terms of art. Like a lot of cartoons, Lost in Play has no dialogue, both to increase accessibility and to enhance the story’s illusion. Characters speak in a silly gibberish. And there are little cartoon-inspired tricks throughout; for instance, the camera shakes when something is scary. “When you study animation, you also study script writing, cinematography, acting, and everything else,” Markovich says. “I think that’s why I like making games so much: They have everything.”The best thing we hear is that it’s a game parents enjoy playing with their kids.Oren Rubin, Happy Juice games cofounderAnd in a clever acknowledgment of the realities of childhood, brief story beats return Toto and Gal to the real world to navigate practical issues like sibling rivalries. That’s on purpose: Simon says early versions of the game were maybe a little too cute. “Early on, we had the kids sleeping neatly in their beds,” says Simon. “But we decided that wasn’t realistic. We added a bit more of them picking on each other, and a conflict in the middle of the game.” Still, Markovich says that even the real-world interludes keep one foot in the imaginary world. “They may go through a park where an old lady is feeding pigeons, but then they walk left and there’s a goblin in a swamp,” he laughs. On the puzzle side, Lost in Play’s mini-games are designed to strike the right level of challenging. The team is especially proud of the game’s system of hints, which often present challenges in themselves. “We didn’t want people getting trapped like I did in those old adventure games,” laughs Markovich. “I loved those, but you could get stuck for months. And we didn’t want people going online to find answers either.” The answer: A hint system that doesn’t just hand over the answer but gives players a feeling of accomplishment, an incentive to go back for more.It all adds up to a unique experience for players of all ages — and that’s by design too. “The best feedback we get is that it’s suitable for all audiences,” says Rubin, “and the best thing we hear is that it’s a game parents enjoy playing with their kids.”Meet the 2024 Apple Design Award winnersBehind the Design is a series that explores design practices and philosophies from finalists and winners of the Apple Design Awards. In each story, we go behind the screens with the developers and designers of these award-winning apps and games to discover how they brought their remarkable creations to life.",
    "author": "",
    "published": "Tue, 06 Aug 2024 08:00:48 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/4A2594D4-FDE6-437C-B564-800B32455D8F/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "e0fe74c5-f515-4ead-93d1-9319ebaef4bf",
    "title": "Updates to runtime protection in macOS Sequoia",
    "link": "https://developer.apple.com/news/?id=saqachfa",
    "description": "In macOS Sequoia, users will no longer be able to Control-click to override Gatekeeper when opening software that isn’t signed correctly or notarized. They’ll need to visit System Settings \u003e Privacy \u0026 Security to review security information for software before allowing it to run.If you distribute software outside of the Mac App Store, we recommend that you submit your software to be notarized. The Apple notary service automatically scans your Developer ID-signed software and performs security checks. When your software is ready for distribution, it’s assigned a ticket to let Gatekeeper know it’s been notarized so customers can run it with confidence.Learn how to notarize your macOS software",
    "author": "",
    "published": "Tue, 06 Aug 2024 06:00:37 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "07e536ba-476e-4852-81b9-3da8d01be37f",
    "title": "Updated guidelines now available",
    "link": "https://developer.apple.com/news/?id=ty0avr2s",
    "description": "The App Review Guidelines have been revised to support updated policies and upcoming features, and to provide clarification. Updated 4.7 to clarify that PC emulator apps can offer to download games. Added 4.7, 4.7.2, and 4.7.3 to Notarization. View the App Review GuidelinesGet resources and support to prepare for App Review Translations of the guidelines will be available on the Apple Developer website within one month.",
    "author": "",
    "published": "Thu, 01 Aug 2024 08:00:32 PDT",
    "image": "",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "93637e73-72b6-42c9-8684-fff2721bed13",
    "title": "Hello Developer: July 2024",
    "link": "https://developer.apple.com/news/?id=v9l8j3j9",
    "description": "Dive into all the new updates from WWDC24Our doors are open. Join us to explore all the new sessions, documentation, and features through online and in-person activities held in 15 cities around the world.Sign up now \u003eJoin us July 22–26 for online office hours to get one-on-one guidance about your app or game. And visit the forums where more engineers are ready to answer your questions.Reserve your spot \u003eBrowse the forums \u003e WWDC24 highlights View now BEHIND THE DESIGNPositive vibrations: How Gentler Streak approaches fitness with “humanity”Find out why the team behind this Apple Design Award-winning lifestyle app believes success is about more than stats. Behind the Design: How Gentler Streak approaches fitness with “humanity“ View now GET RESOURCEFULNew sample code Grow your skills with the BOT-anist: Build a multiplatform app that uses windows, volumes, and animations to create a robot botanist’s greenhouse. Doing the things a particle can: Add a range of visual effects to a RealityKit view by attaching a particle emitter component to an entity. Chart a course for Destination Video: Leverage SwiftUI to build an immersive media experience. New in the HIG Design for games: Make your game feel at home on all Apple devices. Take control of controls: Provide quick access to a feature of your app from Control Center, the Lock Screen, or the Action button. Tint your icons: Create dark and tinted app icon variants for iOS and iPadOS. SESSION OF THE MONTHSay hello to the next generation of CarPlay design systemLearn how the system at the heart of CarPlay allows each automaker to express their vehicle’s character and brand. Say hello to the next generation of CarPlay design system Watch now Subscribe to Hello DeveloperWant to get Hello Developer in your inbox? Make sure you’ve opted in to receive emails about developer news and events by updating your email preferences in your developer account.Share your thoughtsWe’d love to hear from you. If you have suggestions for our activities or stories, please let us know.",
    "author": "",
    "published": "Thu, 11 Jul 2024 08:00:13 PDT",
    "image": "https://devimages-cdn.apple.com/wwdc-services/articles/images/CC518C5C-E78B-4CE0-86E9-3024CFF9DCFB/2048.jpeg",
    "source": "https://developer.apple.com/news/rss/news.rss",
    "categories": null
  },
  {
    "id": "a4f49a63-7b40-448a-9286-4a941cde13a0",
    "title": "Scalable Continuous Integration for iOS",
    "link": "https://albertodebortoli.com/2024/01/03/scalable-continuous-integration-for-ios/",
    "description": "How Just Eat Takeaway.com leverage AWS, Packer, Terraform and GitHub Actions to manage a CI stack of macOS runners.",
    "author": "Alberto De Bortoli",
    "published": "Wed, 03 Jan 2024 22:26:50 GMT",
    "image": "https://albertodebortoli.com/content/images/2024/01/1_SaGE67XSSeflkTKknVOHbg.webp",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "CI",
      "mobile",
      "iOS",
      "AWS",
      "macOS"
    ]
  },
  {
    "id": "c6012a82-e543-49d2-bc65-af9291aa9d75",
    "title": "The idea of a Fastlane replacement",
    "link": "https://albertodebortoli.com/2023/10/29/the-idea-of-a-fastlane-replacement/",
    "description": "PreludeFastlane is widely used by iOS teams all around the world. It became the standard de facto to automate common tasks such as building apps, running tests, and uploading builds to App Store Connect. Fastlane has been recently moved under the Mobile Native Foundation which is amazing as Google",
    "author": "Alberto De Bortoli",
    "published": "Sun, 29 Oct 2023 22:57:38 GMT",
    "image": "https://images.unsplash.com/photo-1647118762210-393b52e96fbc?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=M3wxMTc3M3wwfDF8c2VhcmNofDE4fHxzdGVsbGFyfGVufDB8fHx8MTY5ODYxODcwNXww\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=2000",
    "source": "https://albertodebortoli.com/rss/",
    "categories": null
  },
  {
    "id": "7caffb4c-72e4-47ef-b294-eb046863cd04",
    "title": "CloudWatch dashboards and alarms on Mac instances",
    "link": "https://albertodebortoli.com/2023/08/06/cloudwatch-dashboards-and-alarms-on-mac-instances/",
    "description": "CloudWatch is great for observing and monitoring resources and applications on AWS, on premises, and on other clouds.While it's trivial to have the agent running on Linux, it's a bit more involved for mac instances (which are commonly used as CI workers). The support was",
    "author": "Alberto De Bortoli",
    "published": "Sun, 06 Aug 2023 14:24:43 GMT",
    "image": "https://albertodebortoli.com/content/images/2023/08/image.png",
    "source": "https://albertodebortoli.com/rss/",
    "categories": null
  },
  {
    "id": "2a405920-c90d-425b-8a99-43ce20c5180c",
    "title": "Easy connection to AWS Mac instances with EC2macConnector",
    "link": "https://albertodebortoli.com/2023/07/05/easy-connection-to-aws-mac-instances-with-ec2macconnector/",
    "description": "OverviewAmazon Web Services (AWS) provides EC2 Mac instances commonly used as CI workers. Configuring them can be either a manual or an automated process, depending on the DevOps and Platform Engineering experience in your company. No matter what process you adopt, it is sometimes useful to log into the",
    "author": "Alberto De Bortoli",
    "published": "Wed, 05 Jul 2023 13:54:56 GMT",
    "image": "https://albertodebortoli.com/content/images/2023/07/MacStadium.webp",
    "source": "https://albertodebortoli.com/rss/",
    "categories": null
  },
  {
    "id": "0d3dbb81-0e2c-4c05-a422-dc57519aec8a",
    "title": "Toggles: the easiest feature flagging in Swift",
    "link": "https://albertodebortoli.com/2023/03/26/toggles/",
    "description": "I previously wrote about JustTweak here. It's the feature flagging mechanism we've been using at Just Eat Takeaway.com to power the iOS consumer apps since 2017. It's proved to be very stable and powerful and it has evolved over time. Friends have heard",
    "author": "Alberto De Bortoli",
    "published": "Sun, 26 Mar 2023 22:02:24 GMT",
    "image": "https://images.unsplash.com/photo-1644361566696-3d442b5b482a?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=MnwxMTc3M3wwfDF8c2VhcmNofDN8fHRvZ2dsZXxlbnwwfHx8fDE2Nzk4Njc1NTE\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=2000",
    "source": "https://albertodebortoli.com/rss/",
    "categories": null
  },
  {
    "id": "66c2cad6-607f-4fd5-bd21-15772c61869b",
    "title": "The Continuous Integration system used by the mobile teams",
    "link": "https://albertodebortoli.com/2021/07/23/the-continuous-integration-system-used-by-the-mobile-teams/",
    "description": "In this article, we’ll discuss the way our mobile teams have evolved the Continuous Integration (CI) stack over the recent years.",
    "author": "Alberto De Bortoli",
    "published": "Fri, 23 Jul 2021 09:22:24 GMT",
    "image": "https://albertodebortoli.com/content/images/2021/06/GettyImages-1279041535.jpg",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "iOS",
      "Continuous Integration",
      "Jenkins",
      "DevOps"
    ]
  },
  {
    "id": "4a0a82a0-cab8-49cf-b456-36a0bf52d086",
    "title": "iOS Monorepo \u0026 CI Pipelines",
    "link": "https://albertodebortoli.com/2021/06/16/ios-monorepo-ci-pipelines/",
    "description": "We have presented our modular iOS architecture in a previous article and I gave a talk at Swift Heroes 2020 about it. In this article, we’ll analyse the challenges we faced to have the modular architecture integrated with our CI pipelines and the reasoning behind migrating to a monorepo.",
    "author": "Alberto De Bortoli",
    "published": "Wed, 16 Jun 2021 12:01:10 GMT",
    "image": "https://albertodebortoli.com/content/images/2021/06/GettyImages-1297512889.jpg",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "iOS",
      "Monorepo",
      "Continuous Integration",
      "Jenkins",
      "Cocoapods"
    ]
  },
  {
    "id": "5d1813b8-2e23-4633-bba1-5a77b170a883",
    "title": "Swift Heroes Digital 2020",
    "link": "https://albertodebortoli.com/2020/10/28/swift-heroes-2020/",
    "description": "Hey there! I had the pleasure to talk at Swift Heroes Digital on October 1, 2020.The talk \"Scalable Modular iOS Architecture\" is about the unfolding of a multi-year iOS vision at Just Eat, restructuring the whole app from the ground up to make it modular and global",
    "author": "Alberto De Bortoli",
    "published": "Wed, 28 Oct 2020 19:09:30 GMT",
    "image": "",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "Just Eat",
      "Swift Heroes",
      "Modular Architecture"
    ]
  },
  {
    "id": "315ffb3b-5381-49f0-b23a-8a1db229cc5d",
    "title": "The algorithm powering iHarmony",
    "link": "https://albertodebortoli.com/2020/05/24/the-algorithm-powering-iharmony/",
    "description": "ProblemI wrote the first version of iHarmony in 2008. It was the very first iOS app I gave birth to, combining my passion for music and programming. I remember buying an iPhone and my first Mac with the precise purpose of jumping on the apps train at a time",
    "author": "Alberto De Bortoli",
    "published": "Sun, 24 May 2020 17:44:21 GMT",
    "image": "https://albertodebortoli.com/content/images/2020/05/shame.png",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "music",
      "chords",
      "scales",
      "iOS",
      "swift",
      "App Store"
    ]
  },
  {
    "id": "c48a096d-d6be-4b32-93af-a46093862eff",
    "title": "The iOS internationalization basics I keep forgetting",
    "link": "https://albertodebortoli.com/2020/01/06/the-ios-internationalization-basics-i-keep-forgetting/",
    "description": "Localizations, locales, timezones, date and currency formatting... it's shocking how easy is to forget how they work and how to use them correctly. In this article, I try to summarize the bare minimum one needs to know to add internationalization support to an iOS app.",
    "author": "Alberto De Bortoli",
    "published": "Mon, 06 Jan 2020 13:59:01 GMT",
    "image": "https://albertodebortoli.com/content/images/2019/12/hand-1030552_1920.jpg",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "iOS",
      "formatting",
      "date",
      "currency",
      "timezone",
      "locale",
      "language"
    ]
  },
  {
    "id": "be7d4022-6c13-4c5b-9cb5-e2d2daa03cf9",
    "title": "Modular iOS Architecture @ Just Eat",
    "link": "https://albertodebortoli.com/2019/12/19/modular-ios-architecture-at-just-eat/",
    "description": "The journey towards a modular architecture taken by the Just Eat iOS team.",
    "author": "Alberto De Bortoli",
    "published": "Thu, 19 Dec 2019 00:43:15 GMT",
    "image": "https://albertodebortoli.com/content/images/2019/12/lego-1629073_1920-1.jpg",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "iOS",
      "Just Eat",
      "architecture",
      "modulrization",
      "Cocoapods"
    ]
  },
  {
    "id": "a7b1ccd9-ae50-483a-b8a9-2a4b1a80c144",
    "title": "Lessons learned from handling JWT on mobile",
    "link": "https://albertodebortoli.com/2019/12/04/recommendations-on-handling-jwt-on-mobile/",
    "description": "Implementing Authorization on mobile can be tricky. Here are some recommendations to avoid common issues.Originally published on the Just Eat Engineering Blog. OverviewModern mobile apps are more complicated than they used to be back in the early days and developers have to face a variety of interesting problems.",
    "author": "Alberto De Bortoli",
    "published": "Wed, 04 Dec 2019 17:21:58 GMT",
    "image": "https://albertodebortoli.com/content/images/2019/11/diagram.svg",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "iOS",
      "Authorization",
      "JWT",
      "Token",
      "mobile"
    ]
  },
  {
    "id": "4db5ad0b-357c-4ebc-b28e-9812b2a13d8a",
    "title": "A Smart Feature Flagging System for iOS",
    "link": "https://albertodebortoli.com/2019/11/26/a-smart-feature-flagging-system-for-ios/",
    "description": "At Just Eat we have experimentation and feature flagging at our heart and we've developed a component, named JustTweak, to make things easier on iOS.",
    "author": "Alberto De Bortoli",
    "published": "Tue, 26 Nov 2019 20:17:00 GMT",
    "image": "https://albertodebortoli.com/content/images/2019/11/demo_app_view_controller.png",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "iOS",
      "feature flags",
      "Optimizely",
      "Just Eat"
    ]
  },
  {
    "id": "e711a354-e783-437c-9fd6-05ed8ba646a7",
    "title": "Deep Linking at Scale on iOS",
    "link": "https://albertodebortoli.com/2019/04/16/deep-linking-at-scale-on-ios/",
    "description": "How the iOS team at Just Eat built a scalable architecture to support navigation and deep linking. Originally published on the Just Eat Engineering Blog. In this article, we propose an architecture to implement a scalable solution to Deep Linking on iOS using an underlying Flow Controller-based architecture, all powered",
    "author": "Alberto De Bortoli",
    "published": "Tue, 16 Apr 2019 06:43:00 GMT",
    "image": "https://albertodebortoli.com/content/images/2019/04/class_diagram_demo-1.png",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "deep links",
      "deep linking",
      "universal links",
      "iOS",
      "navigation",
      "flow controllers",
      "state machine",
      "futures",
      "promises",
      "Just Eat"
    ]
  },
  {
    "id": "74c4f6d6-fc8d-42bf-b539-beeeb716444a",
    "title": "Principal Manifesto",
    "link": "https://albertodebortoli.com/2019/04/02/principal-manifesto/",
    "description": "Edit: in 2020, Will Larson published Staff Engineer, the first book that properly reasons about Staff+ roles. I cannot recommend the book, the articles, and the podcast enough. You can find all about them at staffeng.com.To extend the tech career ladder, a number of roles have been introduced",
    "author": "Alberto De Bortoli",
    "published": "Tue, 02 Apr 2019 17:57:56 GMT",
    "image": "",
    "source": "https://albertodebortoli.com/rss/",
    "categories": [
      "manifesto",
      "tech",
      "roles",
      "principal",
      "staff",
      "engineering"
    ]
  },
  {
    "id": "aa29cb77-33bd-463a-a454-0e64bd9903fa",
    "title": "From Engineer to Manager: A Year of Growth and Transformation",
    "link": "https://benoitpasquier.com/2023/06/from-engineer-to-manager-a-year-of-growth-and-transformation/",
    "description": "It feels like it was yesterday when I became an engineering manager but it has been almost a year. I want to take this time to reflect on the challenges and learnings from this journey.",
    "author": "",
    "published": "Sun, 11 Jun 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "0844c3d9-0818-428f-9a92-d65fbb062540",
    "title": "Things to know before becoming an Engineering Manager",
    "link": "https://benoitpasquier.com/2023/02/things-to-know-before-becoming-an-engineering-manager/",
    "description": "The journey from individual contributor to engineering manager isn’t always straightforward. Today, I’ll share what it means to become an engineering manager from my point of view, and a few important points to be aware of before making this transition.",
    "author": "",
    "published": "Sun, 19 Feb 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "8a929ff7-3627-42d0-8c43-e102dfdd5712",
    "title": "Transitioning to an Engineering Manager role",
    "link": "https://benoitpasquier.com/2023/02/transitioning-to-an-engineering-manager-role/",
    "description": "It’s been a while since I haven’t posted anything on my website, it’s because there have been a few changes in 2022 that kept me away from writing. It’s time to resume it.",
    "author": "",
    "published": "Tue, 07 Feb 2023 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "fa567b61-de36-44ad-87bd-36957e9765a1",
    "title": "Security Application Static Analysis applied to iOS and Gitlab CI",
    "link": "https://benoitpasquier.com/2022/07/security-application-static-analysis-applied-to-ios-and-gitlab-ci/",
    "description": "Security is a big topic in software engineering but how does it apply to mobile development? We care about user experience or mobile performance, security issues are rarely prioritized. This week, I’ll share how to integrate security tools into your CI pipeline to stay aware of your codebase health.",
    "author": "",
    "published": "Sun, 31 Jul 2022 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "4ab122c2-6618-4a56-92ea-e23e0512f17e",
    "title": "Being more efficient as a mobile engineer",
    "link": "https://benoitpasquier.com/being-efficient-mobile-engineer/",
    "description": "I was reading this week about “10x engineer” and what it means in the tech industry. If the title can be questionable, I wanted to reflect on its definition and what it can mean in mobile engineering.",
    "author": "",
    "published": "Sat, 25 Jun 2022 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "9b88e67a-0e9a-41cf-b7a2-80eb5256eace",
    "title": "When to remove your iOS app from the App Store",
    "link": "https://benoitpasquier.com/remove-ios-app-from-app-store/",
    "description": "For most mobile engineers, the end game is to release our own apps. For the few projects that make it to the App Store, it can be pretty hard to keep them alive over time. Eventually, the question comes up: should I remove my app from the App Store? Today, I’ll share about the thought process that makes me sunset one.",
    "author": "",
    "published": "Tue, 10 May 2022 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "479caeaa-7884-4455-b60a-1747d0bf7d24",
    "title": "Weak self, a story about memory management and closure in Swift",
    "link": "https://benoitpasquier.com/weak-self-story-memory-management-closure-swift/",
    "description": "Memory management is a big topic in Swift and iOS development. If there are plenty of tutorials explaining when to use weak self with closure, here is a short story when memory leaks can still happen with it.",
    "author": "",
    "published": "Sat, 02 Apr 2022 01:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "a3bbdd5e-6491-4b76-a73a-99ee0e5ff7f6",
    "title": "Setting up Auto Layout constraints programmatically in Swift",
    "link": "https://benoitpasquier.com/auto-layout-constraint-swift/",
    "description": "In iOS development, content alignment and spacing is something that can take a lot of our time. Today, let’s explore how to set constraint with UIKit, update them and resolve constraint conflicts.",
    "author": "",
    "published": "Mon, 14 Mar 2022 01:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "82838153-b905-46f5-8078-8613efd9121a",
    "title": "Ten years of blogging, one article at a time",
    "link": "https://benoitpasquier.com/2022/03/ten-years-of-blogging-one-article-at-a-time/",
    "description": "Most of people don’t know but I’ve been blogging for some time now. Actually, tomorrow will be ten years. Today is a good time to take a walk on memory lane.",
    "author": "",
    "published": "Thu, 03 Mar 2022 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "0b7354ef-ec5e-4b0d-8c64-04bfce990e97",
    "title": "Deep linking and URL scheme in iOS",
    "link": "https://benoitpasquier.com/deep-linking-url-scheme-ios/",
    "description": "Opening an app from an URL is such a powerful iOS feature. Its drives users to your app, and can create shortcuts to specific features. This week, we’ll dive into deep linking on iOS and how to create an URL scheme for your app.",
    "author": "",
    "published": "Sun, 13 Feb 2022 01:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "808957a5-ee72-4df6-a2ab-1cb12876bc37",
    "title": "Tips and tweaks to integrate Github Action to your iOS project",
    "link": "https://benoitpasquier.com/tips-tweaks-github-action-ios/",
    "description": "I’ve been exploring more and more tooling around iOS ecosystem. One tool I really enjoy using those days is Github Action as a continuous integration for my projects. Today we’ll dive into tips and tweaks to make the most of it.",
    "author": "",
    "published": "Fri, 28 Jan 2022 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "a665a914-5caa-4501-8477-e112232e2d51",
    "title": "Flutter and fastlane, how to setup an iOS continuous delivery solution",
    "link": "https://benoitpasquier.com/fastlane-flutter-ios/",
    "description": "When it comes to iOS development, everybody have their own favorite language and framework: Swift, Objective-C, SwiftUI, React-Native, Flutter and so on. Unlike most of my previous post, today we’re going to leverage some iOS tooling for cross platforms technology: fastlane and Flutter.",
    "author": "",
    "published": "Sat, 04 Dec 2021 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "2fc47175-9fc6-47d3-9ea1-ff9eb2b3a620",
    "title": "Currency TextField in SwiftUI",
    "link": "https://benoitpasquier.com/currency-textfield-in-swiftui/",
    "description": "Between banking and crypto apps, it’s quite often we interact with currency inputs on daily basis. If creating a localized UITextField can already be tricky in UIKit, I was wondering how hard it would be to do a similar one in SwiftUI. Let’s see today how to create a localized currency TextField in SwiftUI.",
    "author": "",
    "published": "Thu, 04 Nov 2021 06:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "e0ceb659-1bae-4180-a12c-f53c6550cdd1",
    "title": "Open Source checklist for your next Swift library",
    "link": "https://benoitpasquier.com/open-source-checklist-swift-library/",
    "description": "Like many developers, I use open source tools on daily basis. Recently, I’ve got the chance to create one for other teammates and try to think about what I should consider before launching it. Today I share this checklist.",
    "author": "",
    "published": "Sat, 11 Sep 2021 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "82104f3a-6fad-4cdb-85f7-ac01f3108416",
    "title": "Unit testing UIView action and gesture in Swift",
    "link": "https://benoitpasquier.com/unit-testing-uiview-action-gesture-swift/",
    "description": "A big part of the developer journey is make sure our code behaves as expected. It’s best practice to setup tests that allow us to test quickly and often that nothing is broken. If unit testing is common practice to check the business logic, we can also extend it to cover some specific UI behaviors. Let’s how to unit test views and gesture in UIKit.",
    "author": "",
    "published": "Fri, 20 Aug 2021 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "1bcaee8e-e0b5-4b3f-bd9d-d5b17a15de94",
    "title": "Dependency injection and Generics to create a modular app in Swift",
    "link": "https://benoitpasquier.com/modular-app-dependency-injection-generics-swift/",
    "description": "When we talk about modular app, we rarely mention how complex it can be over time and get out of hand. In most cases, importing frameworks into one another is a reasonable solution but we can do more. Let’s explore how with dependency inversion in Swift and how to create order into our components.",
    "author": "",
    "published": "Tue, 10 Aug 2021 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "1189a1f2-8a1b-4174-bf11-99d7c0213906",
    "title": "Things I wish I knew in my early coding career",
    "link": "https://benoitpasquier.com/2021/07/things-i-wish-i-knew-in-my-early-coding-career/",
    "description": "For the past few years, I had the opportunity to mentor new joiners through different roles. In some aspects, I could see myself in them the same way I started years back: eager to prove themselves, jumping on the code and hacking around. I tried to think about what I learnt the hard way since my first role in the tech industry and how could I help them learn the easy way.",
    "author": "",
    "published": "Sun, 25 Jul 2021 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "efeae108-d681-4d17-8b0d-0f96952c3ba9",
    "title": "Create a web browser with WebKit and SwiftUI",
    "link": "https://benoitpasquier.com/create-webview-in-swiftui/",
    "description": "Recently, I’ve been more and more curious about web experience through mobile apps. Most of web browser apps look alike, I was wondering how could I recreate one with WebKit and SwiftUI. Let’s dive in.",
    "author": "",
    "published": "Tue, 15 Jun 2021 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "21575e87-a15f-49ae-8d48-0dcfd744bcce",
    "title": "Migrating an iOS app to SwiftUI - Database with Realm",
    "link": "https://benoitpasquier.com/migrating-ios-app-swiftui-part-2-realm-database/",
    "description": "To move an existing iOS app codebase to SwiftUI can quickly become a challenge if we don’t scope the difficulties ahead. After covering the navigation and design layer last week, it’s time to dive deeper into the logic and handle the code migration for a database and the user preferences.",
    "author": "",
    "published": "Mon, 15 Feb 2021 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "8f5c427e-6373-469d-a37b-f07895b35296",
    "title": "Migrating an iOS app to SwiftUI - Navigation \u0026 Storyboards",
    "link": "https://benoitpasquier.com/migrating-ios-app-swiftui-part-1/",
    "description": "If SwiftUI is great for many things, migrating completely an existing app codebase to it can be really tricky. In a series of blog posts, I’ll share how to migrate an iOS app written in Swift with UIKit to SwiftUI. Today, let’s start with the navigation and the UI components with storyboards.",
    "author": "",
    "published": "Mon, 08 Feb 2021 08:00:00 +0000",
    "image": "",
    "source": "https://benoitpasquier.com/index.xml",
    "categories": null
  },
  {
    "id": "bc8f1b4f-9841-487b-a113-eedd60fde1ec",
    "title": "Sorting arrays in Swift: multi-criteria",
    "link": "https://augmentedcode.io/2024/10/07/sorting-arrays-in-swift-multi-criteria/",
    "description": "Swift’s foundation library provides a sorted(by:) function for sorting arrays. The areInIncreasingOrder closure needs to return true if the closure’s arguments are increasing, false otherwise. How to use the closure for sorting by multiple criteria? Let’s take a look at an example of sorting an array of Player structs. As said before, the closure should […]",
    "author": "Toomas Vahter",
    "published": "Mon, 07 Oct 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "Foundation",
      "iOS",
      "Swift",
      "localizedCaseInsensitiveCompare",
      "sort",
      "sorted(by:)"
    ]
  },
  {
    "id": "7cce0baa-3973-4b6f-a031-ce12b053ccdb",
    "title": "How to keep Date’s microseconds precision in Swift",
    "link": "https://augmentedcode.io/2024/09/23/how-to-keep-dates-microseconds-precision-in-swift/",
    "description": "DateFormatter is used for converting string representation of date and time to a Date type and visa-versa. Something to be aware of is that the conversion loses microseconds precision. This is extremely important if we use these Date values for sorting and therefore ending up with incorrect order. Let’s consider an iOS app which uses […]",
    "author": "Toomas Vahter",
    "published": "Mon, 23 Sep 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "Foundation",
      "iOS",
      "Swift",
      "ISO8601DateFormatter"
    ]
  },
  {
    "id": "eed6c579-8c8d-40de-8259-5be605f42117",
    "title": "Wrapping async-await with a completion handler in Swift",
    "link": "https://augmentedcode.io/2024/09/09/wrapping-async-await-with-a-completion-handler-in-swift/",
    "description": "It is not often when we need to wrap an async function with a completion handler. Typically, the reverse is what happens. This need can happen in codebases where the public interface can’t change just right now, but internally it is moving towards async-await functions. Let’s jump in and see how to wrap an async […]",
    "author": "Toomas Vahter",
    "published": "Mon, 09 Sep 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "Swift",
      "async",
      "iOS"
    ]
  },
  {
    "id": "37ed7695-1da7-4b51-b2c2-52aeee1564f7",
    "title": "Dark Augmented Code theme for Xcode",
    "link": "https://augmentedcode.io/2024/08/26/dark-augmented-code-theme-for-xcode/",
    "description": "After a couple of years, I tend to get tired of looking at the same colour scheme in Xcode. Then I spend quite a bit of time looking for a new theme and then coming back with empty hands. Material default has served me for a while, but it never felt like a perfect colour […]",
    "author": "Toomas Vahter",
    "published": "Mon, 26 Aug 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "Swift",
      "Xcode"
    ]
  },
  {
    "id": "cc80f3ba-57db-4a42-be82-3860c120012f",
    "title": "Cancellable withObservationTracking in Swift",
    "link": "https://augmentedcode.io/2024/08/12/cancellable-withobservationtracking-in-swift/",
    "description": "Observation framework came out along with iOS 17 in 2023. Using this framework, we can make objects observable very easily. Please refer to @Observable macro in SwiftUI for quick recap if needed. It also has a function withObservationTracking(_:onChange:) what can be used for cases where we would want to manually get a callback when a tracked […]",
    "author": "Toomas Vahter",
    "published": "Mon, 12 Aug 2024 20:16:48 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Swift",
      "SwiftUI",
      "observation",
      "withObservationTracking"
    ]
  },
  {
    "id": "c4f3edce-d43a-45f8-b140-5ef443d78741",
    "title": "Referencing itself in a struct in Swift",
    "link": "https://augmentedcode.io/2024/07/29/referencing-itself-in-a-struct-in-swift/",
    "description": "It took a long time, I mean years, but it finally happened. I stumbled on a struct which had a property of the same type. At first, it is kind of interesting that the replies property compiles fine, although it is a collection of the same type. I guess it is so because array’s storage […]",
    "author": "Toomas Vahter",
    "published": "Mon, 29 Jul 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "Foundation",
      "iOS",
      "Swift"
    ]
  },
  {
    "id": "79ec1149-26dd-4f37-9b6d-fc31cb60db61",
    "title": "ScrollView phase changes on iOS 18",
    "link": "https://augmentedcode.io/2024/07/15/scrollview-phase-changes-on-ios-18/",
    "description": "In addition to scroll related view modifiers covered in the previous blog post, there is another one for detecting scroll view phases aka the state of the scrolling. The new view modifier is called onScrollPhaseChange(_:) and has three arguments in the change closure: old phase, new phase and a context. ScrollPhase is an enum with […]",
    "author": "Toomas Vahter",
    "published": "Mon, 15 Jul 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "Swift",
      "SwiftUI",
      "iOS",
      "onScrollPhaseChange",
      "ScrollGeometry",
      "ScrollPhase",
      "ScrollPhaseChangeContext",
      "ScrollView"
    ]
  },
  {
    "id": "a84da32d-5499-45f6-a29a-d583b31ffb6f",
    "title": "Scroll geometry and position view modifiers in SwiftUI on iOS 18",
    "link": "https://augmentedcode.io/2024/07/01/scroll-geometry-and-position-view-modifiers-in-swiftui-on-ios-18/",
    "description": "WWDC’24 brought some updates to scrolling. One of which is onScrollGeometryChange(for:of:action:) what we can use for reacting to scroll geometry changes. The view modifier has two closures, where the first one is transforming the scroll geometry into an arbitrary equatable type of our liking. If that value changes, the action closure is called. It is […]",
    "author": "Toomas Vahter",
    "published": "Mon, 01 Jul 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "Swift",
      "SwiftUI",
      "iOS",
      "ScrollView",
      "WWDC24"
    ]
  },
  {
    "id": "b432f9cb-90ec-48b5-8369-a2dca57370a2",
    "title": "Zoom navigation transition in SwiftUI",
    "link": "https://augmentedcode.io/2024/06/17/zoom-navigation-transition-in-swiftui/",
    "description": "WWDC’24 brought a lot of new and SwiftUI received many updates. One of which, is the new NavigationTransition protocol and the zoom transition. And that is pretty much what it contains at the moment. A built-in way to add a zoom transition to the view. Easy to get going, but does not provide customization, at […]",
    "author": "Toomas Vahter",
    "published": "Mon, 17 Jun 2024 15:00:00 +0000",
    "image": "http://videos.files.wordpress.com/nCcFASSd/2024-06-17-1.mp4",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "iOS",
      "Swift",
      "SwiftUI",
      "NavigationTransition",
      "zoom"
    ]
  },
  {
    "id": "a48a0395-9541-4a91-845f-38eb70e0812c",
    "title": "Aligning views in different stacks in SwiftUI",
    "link": "https://augmentedcode.io/2024/06/03/aligning-views-in-different-stacks-in-swiftui/",
    "description": "While working on a SwiftUI view, I needed a way for aligning views in different stacks in a way that they are centred. Most of the time I can get away using default alignment values, what HStack and VStack provide. In that case I had two views in different stacks and I needed a way […]",
    "author": "Toomas Vahter",
    "published": "Mon, 03 Jun 2024 15:00:00 +0000",
    "image": "https://2.gravatar.com/avatar/e55a8cd331ba727a325fb2029717f9d584df498403c1462d032f2fa0be8e4777?s=96\u0026d=identicon\u0026r=G",
    "source": "https://augmentedcode.io/feed/",
    "categories": [
      "Swift",
      "SwiftUI",
      "alignmentGuide",
      "iOS",
      "VerticalAlignment"
    ]
  },
  {
    "id": "5a177917-fd27-4ef6-b87f-070acfcc121a",
    "title": "Introducing Plinky: My Love Letter To Links",
    "link": "https://fabisevi.ch/2024/05/09/introducing-plinky/",
    "description": "The post below was written by me, originally featured on the Plinky blog. To celebrate the launch of Plinky you can get 50% off of a yearly subscription by redeeming this offer: plinky.app/offer/REDPANDA There are few words I've ever said more excitedly than these: I want to tell you about my latest app, Plinky. Plinky makes it incredibly easy to do something we do every day, save links for later. You may already have a way to save links, I know I've tried every method under the sun, to the point where I decided to build my own app. That app is Plinky, and today it's available to download on the App Store. Over the last 18 months people have been loving Plinky, because it fixes the same problems I ran into when I've tried to save links in the past.",
    "author": "Joe Fabisevich",
    "published": "Thu, 09 May 2024 00:00:00 GMT",
    "image": "/static/c3d9146a8edf380ee267c61558f3a91b/ec7ce/plinky-screenshots.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "edb85730-e616-4a8d-b2b6-59a466660a54",
    "title": "The Reasoning Computer",
    "link": "https://fabisevi.ch/2023/11/10/the-reasoning-computer/",
    "description": "The Turing test is dead, and we killed it. The Turing test is a test of a machine's ability to exhibit intelligent behavior equivalent to, or indistinguishable from, that of a human. From the 1940s 1 to the 2010s people programmed computers, and computers could only do what they were programmed to do in a rules-based deterministic manner. Sometimes a person would program the computer and it would do something unexpected, but 100 out of 100 times the computer was doing what it was programmed to do whether the person liked it or not. While there has been experimentation with what today we call AI since the 1950s, those machines were a long ways away from passing the Turing test. Why does using ChatGPT feel more like a conversation with the smartest person you know than a computer? It's because ChatGPT doesn't solve problems deterministically the way a programmed computer does, it solves them probabilistically. 2 ChatGPT demonstrates the ability to think about something in a logical, sensible way, the definition of reasoning. 3 We've created something completely new here, a reasoning computer. 4",
    "author": "Joe Fabisevich",
    "published": "Fri, 10 Nov 2023 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "db735e0c-3908-49a1-a5da-38f63fbe8ffd",
    "title": "The Present Should Be Signed",
    "link": "https://fabisevi.ch/2023/08/09/the-present-should-be-signed/",
    "description": "When I wrote The Future Will Be Signed almost six years ago the latest in AI advancements was Google Duplex. If you're like me and have never used Google Duplex, it's a feature of Google Assistant that could make calls on behalf of a person and automatically perform a task, such as booking restaurant tables. While you may have never heard of Google Duplex there's a good chance you've used a generative AI tool like ChatGPT, Midjourney, or GitHub Copilot. Authenticity We’re going to need a way to prove the authenticity of a piece of digital content, everywhere, in a simple manner. This is where public key cryptography comes in. Our current solutions are noble efforts, but remain too complex. It's quite an understatement to say that AI has come a long way since 2018, and yet the blog post's core thesis is even stronger today than when it was written. At the time I was concerned about a future where deepfakes, audio manipulation, and text generation spread across the internet. We're now living in the beginning of that future, this is our present. It has never been faster or easier to generate inorganic content, the tools to do so are more usable and accessible than ever. AI already has us questioning what we see on the internet, and the problem isn't going away. Fake news articles are being written by ChatGPT, fake books are being written with ChatGPT, and of course fake reviews made up by ChatGPT are being used to sell all of this.",
    "author": "Joe Fabisevich",
    "published": "Wed, 09 Aug 2023 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "6bcde7d9-3b00-47c1-93c8-30af3300cfba",
    "title": "Displaced And Disillusioned On The Internet",
    "link": "https://fabisevi.ch/2023/07/17/displaced-and-disillusioned-on-the-internet/",
    "description": "Sometimes I think about all of the societal issues I cared about 10 years ago: privacy, government overreach, and platform accountability. More and more as I look at the technological landscape it feels like none of that care seems to have mattered. When I worked on the Societal Health team at Twitter I had a voice and direct impact on these matters. If the feedback I received and still hear from my peers and higher ups holds true, that voice was not only well-received but considered thoughtful and led to meaningful change. With hindsight I can't say that every choice we made was right, there are few easy answers and no correct answers, but we made the best decisions we could with the information we knew at the time. These days I build indie apps like Short Circuit and Plinky for many reasons, it's what I think will make me truly happiest right now, but one of my reasons is to carry less emotional weight on my shoulders. I still have my morals, but without having the position I once had it’s harder than ever to translate my values into change. The self-induced immolation of Twitter has caused a schism with the community I formed, cultivated, and connected with on the platform. People I follow, people I learn from, and many people I’d call my friends have all scattered to the four winds across a myriad of text-based social networks. I’ve spent the last week thinking about whether to join the latest Twitter-esque social network Threads, where many people close to me have made their way.",
    "author": "Joe Fabisevich",
    "published": "Mon, 17 Jul 2023 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "96a33e6a-8173-43d0-9480-4b9fd9cac978",
    "title": "Year Of Focus",
    "link": "https://fabisevi.ch/2023/01/01/year-of-focus/",
    "description": "To set expectations for you my dear reader, this blog post was written for me, not for you. It's very long (quite long), but I'm still proud of it enough to post for the world to read. The frigid days of December are often unbearable in New York City, but those same freezing temperatures combined with the slow down of work, life, and everyone's collective desire to rest up after a long year afford plenty of opportunity to sit and reflect. At the end of every year I start to think about what I'd like the next year to look like, and then I set a theme for the upcoming year to help me make those ideas become a reality. Yearly Whats? A yearly theme is explicitly not a resolution, but a guiding principle you can look to over the next year. A yearly theme shouldn't be too specific, otherwise you could just craft a resolution, and it shouldn't be so broad that anything could fall into that theme. I've borrowed the idea of yearly themes from the Cortex podcast, where they discuss at length what yearly themes are, and how they approach their own themes. \"We are what we repeatedly do. Excellence, then, is not an act, but a habit.\" — A quote commonly misattributed to Aristotle What I like to do for my yearly theme is to look at a part of my life that's stopping me from being the person I want to be, and then work backwards to figure out what ideas, practices, and habits I can adopt to become that person. New year new me, right? Wrong. I treat yearly themes as a way to build upon the work I did in the previous year, always striving to become more the person that I want myself to be.",
    "author": "Joe Fabisevich",
    "published": "Sun, 01 Jan 2023 00:00:00 GMT",
    "image": "/static/05c1f1d7ec77168c5627caffb20c06ee/46b1b/resolutions.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "ab9f7126-0797-43bb-bc6c-1a2b7687b838",
    "title": "Coding As Creative Expression",
    "link": "https://fabisevi.ch/2022/05/21/coding-as-creative-expression/",
    "description": "Is coding a science or an art?— Matthew Garlington (@dejadu13) May 21, 2022 I've seen many versions of this question posed over the years, and to Matthew's credit it's a very good question. As you can see in the replies people translate their lived experience writing code and answer art or science based on however they conceptualize and practice programming. A few years ago MIT conducted a study that concluded \"reading computer code is not the same as reading language\", answering the question of whether coding is art or science with a rigorously documented \"both\". While I'm hard-pressed to argue with science, I'd like to provide a different answer, one that's a little more conceptual.",
    "author": "Joe Fabisevich",
    "published": "Sat, 21 May 2022 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "19599036-6b8e-4da4-bb1e-b7bd3b23f61c",
    "title": "One Last Visible Change, Goodbye Fellow Tweeps",
    "link": "https://fabisevi.ch/2022/04/01/goodbye-fellow-tweeps/",
    "description": "Hard to believe it's over. My time at Twitter wasn’t perfect but it was incredibly special and there's little I would change about it (though less crypto would be cool). I was able to provide constant feedback about products across the entire platform and the entire organization, work on some of the most pressing digital societal health issues of our time, including the 2020 US presidential election, and help launch numerous products to minimize abuse and harassment. I never once felt like I couldn't advocate for the concerns of the sometimes thoughtful sometimes bonkers people who use Twitter, providing a voice for people who don't get to have a voice inside Twitter. There's so much more I could say but instead I decided to post the going away email I sent to a thousand or so people at Twitter.",
    "author": "Joe Fabisevich",
    "published": "Fri, 01 Apr 2022 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "b55b622b-76c8-4834-9491-c0c455f28a46",
    "title": "Designing A High Signal Interview Process",
    "link": "https://fabisevi.ch/2022/03/07/designing-a-high-signal-interview-process/",
    "description": "Crafting a great interview process is difficult1, especially for software development where a company is often trying to assess years of specialized knowledge and potential in only a few hours. The best interviews are said to feel like a discussion amongst peers, where each side is providing the other with signal about what it will be like to work together. Candidates share signals about their experience and thought process, while interviewers help provide signal and insight about a company’s values, the working environment, the state of a company, and more.",
    "author": "Joe Fabisevich",
    "published": "Mon, 07 Mar 2022 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "89518306-5b39-4a40-99f9-9e9de81d12af",
    "title": "The Best Twitter Bio? The Humble Tweet",
    "link": "https://fabisevi.ch/2022/02/20/the-best-twitter-bio-the-humble-tweet/",
    "description": "Tell me who you are in 160 characters. I'll wait while you try and achieve the level of nuance necessary for the task. This constraint is why you end up with generic Twitter bios that don't tell you much about someone and all look like: Father, cyclist, biz-dev, and fighting every day for the Quebec sovereignty movement. Working on saving democracy @Meta, ex-Palantir, ex-Accenture, ex of my ex. Kinda hard to stand out, right? The inability to differentiate yourself on a platform built upon self-expression has always felt surprising to me, so I started to look for alternative means of letting people get to know more about me. The most common approach to gain additional room for expression is to use Twitter's Website field, linking out to a more information-rich bio. But that jump to the web is an opportunity to lose focus, especially in a world where nobody has the attention span to read (or leave Twitter). There are even solutions like Linktree that build upon the link to link to a link of links, letting those links speak for you.",
    "author": "Joe Fabisevich",
    "published": "Sun, 20 Feb 2022 00:00:00 GMT",
    "image": "/static/1072f61529d2c918b0082617085a7a56/ec7ce/vmware-twitter-carousel.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "e34f8482-62e8-4a65-bee1-94c23340cbc7",
    "title": "Creating Slick Color Palette APIs",
    "link": "https://fabisevi.ch/2021/08/24/creating-slick-color-palette-apis/",
    "description": "The work of writing maintainable code is an ongoing endeavor and some of my favorite problems to solve are ones that build maintainable systems. Maintainable systems are ones you can learn once, easily manipulate, and ideally take from project to project. My favorite part of building maintainable systems is that it minimizes the amount of work I need to do when starting a new project, and like it is for many programmers hitting ⌘ + ⇪ + N to start a new project is one of the most satisfying feelings in the world for me.",
    "author": "Joe Fabisevich",
    "published": "Tue, 24 Aug 2021 00:00:00 GMT",
    "image": "/static/280e1a499cb4929777117648ebcf35dc/07854/color-palette-resources-folder.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "cb888baa-9e0a-46ea-a752-799e7da5c060",
    "title": "It's Not Better If It's Also Worse",
    "link": "https://fabisevi.ch/2021/04/08/its-not-better-if-its-also-worse/",
    "description": "For a long time I've told people that I love technology and all it enables, yet dislike the technology industry and working in tech. People often find my statement hard to rectify, probably because they see the two as inextricably linked. Technology is an ever-changing process, one that pushes humanity forward through the application of science, and the industry has become (and arguably always has been) about capitalizing those mechanisms of change.",
    "author": "Joe Fabisevich",
    "published": "Thu, 08 Apr 2021 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "21e9493e-3337-40ed-9ba9-84c4dc3a39f2",
    "title": "Putting the U in GraphQL",
    "link": "https://fabisevi.ch/2021/03/12/putting-the-u-in-graphql/",
    "description": "GraphQL has been on my list of technologies to learn for a few months now, and last week I came across Majid Jabrayilov's post, feeling pretty excited to tackle the subject. The post was very good, but it didn't answer the one question I've had as I've gone through numerous exercises to understand GraphQL, how do I make GraphQL requests without a library?",
    "author": "Joe Fabisevich",
    "published": "Fri, 12 Mar 2021 00:00:00 GMT",
    "image": "/static/b08ba9dc0b0d41a9a4982798800ac1d2/ec7ce/not-using-apollo.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "4985c90d-90af-4c55-a040-8881280ced34",
    "title": "App Store [P]review",
    "link": "https://fabisevi.ch/2021/02/15/app-store-preview/",
    "description": "Apple's been in the news quite a bit lately over concerns that many apps on the App Store are little more than scams. Some of these apps aren't even functional, they don't provide anything more than a screen with no functionality, only a button to purchase an indefinite weekly subscription. Many developers and consumers are confused or surprised that Apple isn't catching these scams, given Apple has a process for App Review which every app must go through, and while I'm not surprised given the breadth of the problem, I find myself thinking it's very problematic for the digital economy and consumer confidence in buying services through what once was considered a safe place.",
    "author": "Joe Fabisevich",
    "published": "Mon, 15 Feb 2021 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "c87459f0-e291-46d7-9f11-ba4ab1b586d2",
    "title": "Empower Apps Podcast - Large Scale Teams",
    "link": "https://fabisevi.ch/2021/02/12/empower-apps-large-scale-teams/",
    "description": "I recorded an episode of the Empower Apps podcast, where Leo Dion and I discussed a wide range of topics. We spoke about everything from how we scale app development to thousands of people and millions of users at Twitter, communication, documentation, people working together, and a lot about and the complexity of holding moral frameworks at a global level.",
    "author": "Joe Fabisevich",
    "published": "Fri, 12 Feb 2021 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "ec5435bf-48f5-4662-8da2-1a3e45b0b4da",
    "title": "Context-Bound Types",
    "link": "https://fabisevi.ch/2020/09/21/Context-Bound-Types/",
    "description": "I've been thinking about privacy lately. No, not online privacy, but about how APIs can balance exposing the right amount of implementation details without revealing too much. I'll walk through a task I find myself doing often when building iOS apps, creating a view controller with header view, and four different ways to go about it.",
    "author": "Joe Fabisevich",
    "published": "Mon, 21 Sep 2020 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "728c569b-1156-4870-ac6f-6bb9097ccdbe",
    "title": "Building Better Views (Part I)",
    "link": "https://fabisevi.ch/2019/12/26/building-better-views-part-i/",
    "description": "As iOS developers, a lot of our work involves taking models from a server, and transforming them to be displayed on an iPhone or iPad. This sounds like a job for some declarative architecture. 🤔",
    "author": "Joe Fabisevich",
    "published": "Thu, 26 Dec 2019 00:00:00 GMT",
    "image": "/static/0f600b07895848c61817aa8345f754af/587b0/view_data_diagram.png",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "8e34ba51-1671-437c-a769-7d151d73174a",
    "title": "Building Better Views (Part II), Next Steps",
    "link": "https://fabisevi.ch/2019/12/26/building-better-views-part-ii/",
    "description": "If you haven't checked out Part I, I recommend reading it because if you don't, none of writing below will make sense!",
    "author": "Joe Fabisevich",
    "published": "Thu, 26 Dec 2019 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "e6404ef3-9cb6-4e4b-86f7-c8a631565278",
    "title": "How To Keep Friends And Influence People Or Something",
    "link": "https://fabisevi.ch/2019/09/15/how-to-keep-friends-and-influence-people-or-something/",
    "description": "Maybe the real friends were the friends we made along the way. I quit using Facebook years ago, and only follow ~70 people on Twitter, which leads some to assume that I don’t find keeping in touch with people to be a top priority, but that couldn’t be further from the truth. My todo list is where I hold my priorities, and my friends and family are the biggest priorities in my life, so that’s where I turn to for making sure I’m staying close to them. At first blush you may think that a todo list sounds incredibly impersonal, it’s actually a deep expression of caring. When people ask for more details, I receive pretty much universally positive feedback, so now I’ll share it with you.",
    "author": "Joe Fabisevich",
    "published": "Sun, 15 Sep 2019 00:00:00 GMT",
    "image": "/static/972ae95811411aeeafdea36dcec52c2e/ec7ce/keep-in-touch-list.jpg",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "0fe84b12-02fc-44ca-aa8b-cbe6f23dc290",
    "title": "Pushing The Boundaries of Technology",
    "link": "https://fabisevi.ch/2019/01/01/pushing-the-boundaries-of-technology/",
    "description": "Throughout history technology has aided humanity. Not the other way around. From the invention of fire, to the creation of the wheel, the printing press, and the personal computer, technology has acted as a multiplier for what humans can do. Technology doesn’t exist in a vacuum, and it won’t stand as an industry by itself. We — as software developers — should always keep this in mind when creating technology.",
    "author": "Joe Fabisevich",
    "published": "Tue, 01 Jan 2019 00:00:00 GMT",
    "image": "",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "67d6a865-b2fc-4cae-875d-b81af4a49d8e",
    "title": "What I Read in 2018",
    "link": "https://fabisevi.ch/2018/12/31/what-i-read-in-2018/",
    "description": "When 2018 started I set out to read 10 books this year. Much to my surprise I ended up reading 25 books in 2018. The most important reason I was able to get through 15 more books than I'd expected was that when the year started I set a goal for myself to read at least 15 minutes every day. I ended up accomplishing that 328 times over 2018, meaning 9 out of every 10 days I made significant progress on a book. I was able to find time by replacing a couple of podcasts I'd listened to with time for reading, a strategy that netted me about 1-2 hours every week. Without further ado, the books I read this year are below in reverse chronological order, newest at the top.",
    "author": "Joe Fabisevich",
    "published": "Mon, 31 Dec 2018 00:00:00 GMT",
    "image": "/static/575ba77add58f63638d629df075e4388/587b0/2018-pocket-reading-report.png",
    "source": "https://www.fabisevi.ch/feed.xml",
    "categories": null
  },
  {
    "id": "2fcb3965-2df9-4e9f-a1fe-5e4dc6c0f386",
    "title": "iOS Accessibility Values",
    "link": "https://mobilea11y.com/blog/accessibility-values/",
    "description": "For iOS, Accessibility values are one of the building blocks of how Accessibility works on the platform, along with traits, labels, hints, and showing/hiding elements. If you’re familiar with WCAG or web accessibility, accessibility values are the value part of WCAG 4.1.2: Name, Role, Value. Values Not every element in your view will have a value - in fact, most won’t. Any element that ‘contains’ some data, data that is not included in the element’s label requires an accessibility value to be set.",
    "author": "",
    "published": "Sun, 19 Jun 2022 10:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "332b5482-f9cf-4463-9643-a11209fb2b24",
    "title": "iOS UIKit Accessibility traits",
    "link": "https://mobilea11y.com/blog/traits/",
    "description": "Accessibility traits on iOS is the system by which assistive technologies know how to present your interface to your users. The exact experience will vary between assistive technologies, in some cases they may change the intonation of what VoiceOver reads, or add additional options for navigation, sometimes they will disable that assistive technology from accessing the element, or change how the assistive tech functions. They are the ‘Role’ part of the fundamental rule of making something accessible to screen readers - WCAG’s 4.",
    "author": "",
    "published": "Fri, 13 Aug 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "8801e626-89e2-4b81-b6f5-814b4d5fe3ce",
    "title": "iOS Custom Accessibility Actions",
    "link": "https://mobilea11y.com/blog/a11y-custom-actions/",
    "description": "When testing your app with VoiceOver or Switch Control, a common test is to ensure you can reach every interactive element on screen. If these assistive technologies can’t focus all of your buttons how will your customers be able to interact fully with your app? Except there are times when hiding buttons from your assistive technology users is the better choice. Consider an app with a table view that has many repeating interactive elements - this could be a social media app where ’like, share, reply’ etc is repeated for each post.",
    "author": "",
    "published": "Sun, 01 Aug 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "905bc2be-394b-4e74-98ca-07f818000c71",
    "title": "Test Your App's Accessibility with Evinced",
    "link": "https://mobilea11y.com/blog/evinced-ios/",
    "description": "Disclosure: Evinced has paid for my time in writing this blog, and I have provided them feedback on the version of their tool reviewed and an early beta. I agreed to this because I believe in the product they are offering. Testing your app for accessibility is an essential part of making an accessible app, as with any part of the software you build, if you don’t test it, how can you be sure it works?",
    "author": "",
    "published": "Wed, 24 Mar 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "0bca215a-4422-40e8-9482-61cec96c20a5",
    "title": "How Do I Get My App an Accessibility Audit?",
    "link": "https://mobilea11y.com/blog/accessibility-professionals/",
    "description": "This is a common question I get asked - how do I go about arranging an accessibility audit for my app so I know where I can make improvements? If you’re truly looking for an answer to that question then I have a few options for you below, but first, are you asking the right question? Accessibility Isn’t About Box Ticking You can’t make your app accessible by getting a report, fixing the findings, and accepting it as done.",
    "author": "",
    "published": "Sun, 21 Mar 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "4b9ff023-4958-48e9-8c5f-e27bd3cfc7e5",
    "title": "Quick Win - Start UI Testing",
    "link": "https://mobilea11y.com/quick-wins/ui-testing/",
    "description": "I’ll admit, adding UI testing to an app that currently doesn’t have it included is probably stretching the definition of quick win, but the aim here isn’t 100% coverage - not right away anyway. Start small and add to your test suite as you gain confidence. Even a small suite of crucial happy-path UI tests will help to ensure and persist accessibility in your app. And the more you get comfortable with UI tests the more accessible your apps will become, because an app that is easy to test is also great for accessibility.",
    "author": "",
    "published": "Wed, 03 Feb 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "f1d08fe2-fddc-40f8-9c79-c80f0d96495f",
    "title": "Quick Win - Support Dark Mode",
    "link": "https://mobilea11y.com/quick-wins/dark-mode/",
    "description": "Many people don’t realise dark mode is an accessibility feature. It’s often just considered a nice to have, a cool extra feature that power users will love. But dark mode is also a valuable accessibility feature. Some types of visual impairment can make it painful to look at bright colours, or large blocks of white might wash over the black text. Some people with dyslexia or Irlen’s Syndrome can struggle to read black text on a white background.",
    "author": "",
    "published": "Thu, 28 Jan 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "5f6b8e1e-ee8e-4674-b4e9-5ed07490803a",
    "title": "Quick Win - Support Landscape",
    "link": "https://mobilea11y.com/quick-wins/landscape/",
    "description": "If you have a regulatory requirement to provide accessibility in your app (spoiler, you do) the chances are it will say you have a requirement to reach WCAG AA. While this is likely meaningless to anyone other an accessibility professionals, in short it means you are providing the minimum level of accessibility features required to make your app usable by the majority of people. This post is about one such requirement, the jazzily titled Success Criterion 1.",
    "author": "",
    "published": "Thu, 28 Jan 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "3fdd142d-b783-42fc-8340-f7fc39643b2e",
    "title": "Quick Win - Image Descriptions",
    "link": "https://mobilea11y.com/quick-wins/image-descriptions/",
    "description": "Images are a major part of our apps. They add meaning and interest, they give your app character and context. The adage is that a picture is worth a thousand words. But if you can’t see the image clearly, how do you know what those words are? If you aren’t providing image descriptions in your app many of your users will be missing out on the experience you’ve crafted. The result can be an app thats missing that spark an character, or worse an app thats just meaningless and unusable.",
    "author": "",
    "published": "Tue, 19 Jan 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "90a600f9-d39a-4460-a4a9-3aadf3246d67",
    "title": "Quick Win - Text Contrast",
    "link": "https://mobilea11y.com/quick-wins/text-contrast/",
    "description": "How many shades of grey do you use in your app? OK, maybe thats a bit cruel towards designers, grey is a great colour, but the problem with grey is that it can be deceptively difficult to distinguish from a background. And this problem is not just limited to greys - lighter colours too can blend into the background. This effect can be heightened too for people who have blurred or obscured vision, or one of many forms of colour blindness.",
    "author": "",
    "published": "Tue, 19 Jan 2021 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "59ba1ac9-62db-4c52-9a56-57b872e1ac55",
    "title": "iOS 14: Custom Accessibility Content",
    "link": "https://mobilea11y.com/blog/custom-accessibility-content/",
    "description": "Each year at WWDC Xcode Santa brings us exciting new APIs to play with, and this year our accessibility present is Customized Accessibility Content. This API flew under the radar a little, I’m told this is because it’s so new there wasn’t even time for inclusion at WWDC. But this new feature helps to solve a difficult question when designing a VoiceOver interface - where is the balance between too much and too little content.",
    "author": "",
    "published": "Mon, 29 Jun 2020 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "208dc742-1c42-44ae-87c8-e503eabb2ee4",
    "title": "Accessibility Review: Huh? - International languages",
    "link": "https://mobilea11y.com/blog/huh-dictionary/",
    "description": "The Accessibility Review series uses real world apps to provide examples of common accessibility issues and provide tips on how to fix them. Each of the developers has kindly volunteered their app to be tested. Huh? is a dictionary and thesaurus app from Peter Yaacoub. Enter a word into the search bar then choose a dictionary service. Press search and the app will present your chosen service’s entry for the term you entered.",
    "author": "",
    "published": "Sun, 28 Jun 2020 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "b4d2df21-cca8-47b4-b28c-d40f5003dc11",
    "title": "Accessibility Review: Figure Case - Button Labels",
    "link": "https://mobilea11y.com/blog/figure-case/",
    "description": "The Accessibility Review series uses real world apps to provide examples of common accessibility issues and provide tips on how to fix them. Each of the developers has kindly volunteered their app to be tested. Figure Case is an app to help organise a tabletop miniature collection created by Simon Nickel. The app helps to track miniatures you own, and what state they currently find themselves in - unassembled, assembled, or painted.",
    "author": "",
    "published": "Sun, 21 Jun 2020 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "33058888-8955-472b-ac11-2840815bd17a",
    "title": "Accessibility Review: Daily Dictionary - Screen changes",
    "link": "https://mobilea11y.com/blog/daily-dictionary/",
    "description": "The Accessibility Review series uses real world apps to provide examples of common accessibility issues and provide tips on how to fix them. Each of the developers has kindly volunteered their app to be tested. Daily Dictionary is an app from Benjamin Mayo providing a new word every day with definitions and real-world uses designed to help increase your vocabulary. Assessing the app, I noticed Benjamin has made a design decision around presenting the app’s settings.",
    "author": "",
    "published": "Sat, 16 May 2020 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "6c48c6ed-f6df-4c89-8ace-c26212ce1def",
    "title": "iOS Attributed Accessibility Labels",
    "link": "https://mobilea11y.com/blog/attributed-accessibility-labels/",
    "description": "Attributed accessibility labels are an incredible tool for making some next-level accessible experiences. They let you tell VoiceOver not just what to speak, but how to say it too. Using the accessibilityAttributedLabel property you can provide an NSAttributedString to VoiceOver, much the same way you would provide an NSAttributedString to a label’s attributedText property to display a string with an underline or character colour for example. The difference here is that all of our attributes are instructions for VoiceOver.",
    "author": "",
    "published": "Sun, 03 May 2020 10:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "fca8aaba-86a5-4bd2-a92d-d5f78cda6309",
    "title": "Writing Great iOS Accessibility Labels",
    "link": "https://mobilea11y.com/blog/writing-great-labels/",
    "description": "A good accessibility label lets your customer know exactly what a control does in as few words as possible, without having to rely on implied context. Don’t Add the Element Type iOS already knows your button is a button and your image is an image, it does this using an accessibility trait. If you label your button as ‘Play button’ your VoiceOver customers will hear ‘Play button. Button.’ Keep it Succinct Don’t frustrate your customer by adding too much information to your labels.",
    "author": "",
    "published": "Sun, 03 May 2020 09:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "b1353fb6-8c8c-4fe6-b0df-6b4da92afe84",
    "title": "When to use Accessibility Labels",
    "link": "https://mobilea11y.com/blog/when-to-use-accessibility-labels/",
    "description": "There’s a few circumstances when you’ll want to set your own accessibility label, such as… An interactive element that you haven’t given a text value to, such as an image button. An interactive element with a long visual label. An interactive element with a short visual label that takes context from your design. A control or view you have created yourself or built by combining elements. Images of text. Elements Without a text value Take the controls for a music player as an example.",
    "author": "",
    "published": "Sun, 03 May 2020 08:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "308d6cc4-a00c-41a3-916b-40f558b3ad60",
    "title": "iOS Accessibility Labels",
    "link": "https://mobilea11y.com/blog/ios-accessibility-labels/",
    "description": "This blog was inspired by Jeff Watkins’ series of blogs on UIButton. UIButton is a fundamental part of building interfaces on iOS. So much so, that it probably doesn’t get the love it deserves. But it’s also really powerful and customisable when used correctly. Accessibility labels on iOS I feel are very similar. They’re fundamental to how accessibility works on iOS, yet I think they suffer from a few PR issues.",
    "author": "",
    "published": "Sun, 03 May 2020 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "9105dff0-b444-4d1d-a100-48ed139f4dd6",
    "title": "A11y Box Android",
    "link": "https://mobilea11y.com/blog/a11y-box-android/",
    "description": "A few months ago I shared a project I’d been working on for iOS exploring the accessibility API available on that platform. The Android accessibility API is equally large and full featured, and really deserves the same treatment. So here’s A11y Box for Android. A11y Box for Android is an exploration of what is available on the Android accessibility api and how you can make use of it in your apps.",
    "author": "",
    "published": "Sun, 26 Apr 2020 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "f0e68842-4354-41ab-92a1-f819194fc4b0",
    "title": "Mobile A11y Talk: Accessibility in SwiftUI",
    "link": "https://mobilea11y.com/blog/swiftui-talk/",
    "description": "I was supposed to be attending the 2020 CSUN Assistive Technology conference to present a couple of talks, unfortunately with COVID-19 starting to take hold at that time, I wasn’t able to attend. In lieu of attending I decided to record one of the talks I was scheduled to present on Accessibility in SwiftUI. SwiftUI is Apple’s new paradigm for creating user interfaces on Apple platforms, and it has a bunch of new approaches that really help create more accessible experiences.",
    "author": "",
    "published": "Sun, 12 Apr 2020 07:30:56 +0000",
    "image": "",
    "source": "https://mobilea11y.com/index.xml",
    "categories": null
  },
  {
    "id": "934ef03c-609b-4de9-83ca-ae76ac9fc8ec",
    "title": "RUX: JSX-Style Rails View Components - RUBY 517",
    "link": "https://rubyrogues.com/rux-jsx-style-rails-view-components-ruby-517",
    "description": "Cameron Dutro joins the Rogues to discuss RUX, a system for managing your View Components in Rails in a similar way to how React uses JSX to manage its Component views. He discusses how it works, how it goes together, and what inspired it. Panel Charles Max Wood Darren Broemmer Luke Stutters Valentino Stoll Guest Cameron Dutro Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links GitHub | camertron/rux Primer Design System ViewComponent GitHub | opal/opal Matestack Reimagined Rails views using Matestack with Jonas Jabari Ruby 2.5 allows creating structs with keyword arguments GitHub: Cameron Dutro ( camertron ) Twitter: Кэмерон Дутро ( @camertron ) Picks Cameron- GitHub | camertron/erb2rux Charles- PodcastBootcamp.io Charles- JavaScript Picks Charles- Ready Player Two Charles- Masters of Doom Charles- Top End Devs Darren- Is Ruby Dead Darren- 16 New ML Gems for Ruby Luke- GitHub | jeremyevans/sequel_postgresql_triggers Luke- DEF CON 29 - James Kettle - HTTP2: The Sequel is Always Worse Luke- The Wire  Valentino- Flux Valentino- Add strict_loading mode to optionally prevent lazy loading Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) Contact Darren: Twitter: Darren Broemmer ( @DarrenBroemmer ) Contact Luke: GitHub: Luke Stutters ( lukestuts ) Contact Valentino: Doximity Technology Blog Work @ Doximity GitHub: Valentino Stoll ( codenamev ) Twitter: V ( @thecodenamev )",
    "author": "",
    "published": "Wed, 06 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/ruby-rogues/RUBY_517.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "cb6b2c65-5158-4705-86ec-daae78cbb03f",
    "title": "React Do's and Don't's - RRU 158",
    "link": "https://reactroundup.com/react-do-s-and-don-t-s-rru-158",
    "description": "This week the panel discusses several Do's and Don't's for your React Apps that are lessons they've learned building React applications over the years. Panel Jack Herrington Paige Niedringhaus TJ Vantoll Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links GitHub | welldone-software/why-did-you-render Picks Jack- Hades Paige- Versailles (TV series) TJ- Land of the Giants Contact Jack: Jack Herrington – YouTube Blue Collar Coder Twitter: Jack Herrington ( @jherr ) Contact Paige: Paige Niedringhaus Paige Niedringhaus – Medium Twitter: Paige Niedringhaus ( @pniedri ) GitHub: Paige Niedringhaus ( paigen11 ) Contact TJ: TJ VanToll's Blog Progress Software KendoReact Twitter: TJ VanToll ( @tjvantoll )",
    "author": "",
    "published": "Wed, 06 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/reactroundup/RRU_158.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "067366b3-1763-486e-ac28-91d709e95c7e",
    "title": "Talking Vue and Other Things with Andrew Welch of devmode.fm - VUE 167",
    "link": "https://viewsonvue.com/talking-vue-and-other-things-with-andrew-welch-of-devmode-fm-vue-167",
    "description": "Steve sits down with Andrew Welch of the devmode.fm podcast and they cover a wide variety of topics, ranging from Andrew’s history with web development and his own companies, to VueJS, Nuxt and Vite, how he uses them with CraftCMS, and what’s he’s looking forward to with Nuxt 3. In addition they discuss the history of a couple of HTML response codes, and Andrew’s unique way of asking guests to explain their subjects on his own podcast. Panel Steve Edwards Guest Andrew Welch Sponsors Dev Influencers Accelerator PodcastBootcamp.io Level Up | Devchat.tv Links devMode.fm Craft CMS nystudio107 Twitter: nystudio107 ( @nystudio107 ) Picks Andrew- The White Lotus Andrew- Wasabi Peanut Crunchies Steve- PunHub on Instagram Steve- The wholly pun bible on instagram Contact Steve: Twitter: Steve Edwards ( @wonder95 ) GitHub: Steve Edwards ( wonder95 ) LinkedIn: Steve Edwards",
    "author": "",
    "published": "Tue, 05 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/viewsonvue/VUE_167.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "bf76b2a5-82d4-4342-b147-beae6d4c9eb7",
    "title": "Javascript and the Blockchain with Max Kordek - JSJ 503",
    "link": "https://javascriptjabber.com/javascript-and-the-blockchain-with-max-kordek-jsj-503",
    "description": "Steve and AJ talk with Max Kordek, founder of his startup Lisk, which is geared towards helping JavaScript developers use the blockchain to develop new applications for new industries. We delve deep into the origins and base technologies of the blockchain, how it has been used, and how it can be used in the future. They also discuss Lisk, it’s purpose, and how Max hopes their SDK will be used by developers to explore the blockchain and find brand new applications for it. Panel AJ O'Neal Steve Edwards Guest Max Kordek Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links GitHub | Lisk HackonLisk Lisk Mastering blockchain: Meet Lisk, a blockchain platform for JavaScript developers Blog Archives | Lisk Introducing the Lisk Grant Program The 5th Anniversary of Lisk Network Introducing Lisk Interoperability - YouTube Lisk International - YouTube Events - YouTube Lisk - Discord Lisk Community Lisk - Reddit Lisk - YouTube Twitter: Lisk ( @LiskHQ ) Max Kordek - YouTube Twitter: Max Kordek | HODLing the Lisk Gem ( @maxkordek ) Picks AJ- Blockchain Backer on Teachable AJ- Blockchain Backer - YouTube AJ- Hashcash AJ- Cryptocurrency is an abject disaster AJ- Nyan Cat NFT AJ- Walmart urges its suppliers to use IBM blockchain technology AJ- Ep. 139 – Smart Contracts \u0026 Oracles – insights from Chainlink Max- Technology | NASA Contact AJ: AJ ONeal CoolAJ86 on GIT Beyond Code Bootcamp Beyond Code Bootcamp | GitHub Follow Beyond Code Bootcamp | Facebook Twitter: Beyond Code Bootcamp ( @_beyondcode ) Contact Steve: Twitter: Steve Edwards ( @wonder95 ) GitHub: Steve Edwards ( wonder95 ) LinkedIn: Steve Edwards",
    "author": "",
    "published": "Tue, 05 Oct 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/js-jabber/JsJ_503.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "ac79978c-bdbf-4c7a-9a3b-482947950d44",
    "title": "TypeScript Mixins - AiA 327",
    "link": "https://devchat.tv/adv-in-angular/typescript-mixins-aia-327/",
    "description": "Armen takes the lead this week to discuss TypeScript usage and how to bring in mixins into the picture as you build more complicated applications with TypeScript. Panel Armen Vardanyan Charles Max Wood Sponsors Dev Influencers Accelerator PodcastBootcamp.io Level Up | Devchat.tv Picks Armen- Our Planet Charles- Masters of Doom Charles- Ready Player Two Charles- The Chosen Charles- Top End Devs Contact Armen: Armen Vardanyan Armen Vardanyan – Medium Twitter: Armen Vardanyan ( @Armandotrue ) Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) ﻿",
    "author": "",
    "published": "Thu, 30 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/adventures-in-angular/AiA_327.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "b4bec248-1e3b-489a-ade2-a4fdbae59b4a",
    "title": "Docker and Ruby ft. Huzefa Biyawarwala - RUBY 516",
    "link": "https://devchat.tv/ruby-rogues/docker-and-ruby-ft-huzefa-biyawarwala-ruby-516/",
    "description": "Huzefa Biyawarwala joins the Rogues to discuss developer tooling around Docker and how it's used with Ruby and Rails. The Rogues join in and discuss the ways they've used Docker in their own setups and how they deploy apps using Docker and how Docker is used on their own development environment. Panel Charles Max Wood John Epperson  Luke Stutters Valentino Stoll Guest Huzefa Biyawarwala Sponsors Dev Influencers Accelerator Level Up | Devchat.tv PodcastBootcamp.io Links Rails On Docker Simplified Dokku Ruby - Docker Hub Codacy huzefabiyawar/rails-docker:rails-project GitHub | huzefahuzu/rails-sidekiq LinkedIn: Huzefa Biyawarwala Twitter: Huzefa Biyawar ( @huzub ) Picks Charles- PodcastBootcamp.io Charles- The Sword of Shannara Charles- Ready Player One Huzefa- Dokku John- Minecraft Luke- ELF64 hello world Valentino- Move over Rake, Thor is the new king Valentino- GitHub | avmnu-sng/rspec-tracer Valentino- Nushell  Valentino- RubyKaigi Takeout 2021 Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) Contact John: Rock Agile Consulting GitHub: John Epperson ( kirillian ) LinkedIn: John Epperson Contact Luke: GitHub: Luke Stutters ( lukestuts ) Contact Valentino: Doximity Technology Blog Work @ Doximity GitHub: Valentino Stoll ( codenamev ) Twitter: V ( @thecodenamev )",
    "author": "",
    "published": "Wed, 29 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/ruby-rogues/RUBY_516.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "5bd02dd4-65d2-4656-9f1a-49f086135e1f",
    "title": "How to Stay Current and Learn New Things ft. Charles Max Wood - RRU 157",
    "link": "https://devchat.tv/react-round-up/how-to-stay-current-and-learn-new-things-ft-charles-max-wood-rru-157/",
    "description": "Charles Max Wood from Top End Devs joins the round up to discuss his strategies and tactics to get the career you want by keeping current on technologies and learning new things. He explains how to determine what you want in your career. Going and building things, and continuing your learning journey. Panel Jack Herrington Paige Niedringhaus TJ VanToll Guest Charles Max Wood Sponsors React Error and Performance Monitoring | Sentry Dev Influencers Accelerator PodcastBootcamp.io Links The 360 Degree Leader Masters of Doom Top End Devs Twitter: DevChat.tv ( @devchattv ) Picks Charles- The Road Back to You Jack- Introduction to Public Speaking Paige- The Yeti Mug TJ- An Ember in the Ashes  Contact Jack: Jack Herrington – YouTube Blue Collar Coder Twitter: Jack Herrington ( @jherr ) Contact Paige: Paige Niedringhaus Paige Niedringhaus – Medium Twitter: Paige Niedringhaus ( @pniedri ) GitHub: Paige Niedringhaus ( paigen11 ) Contact TJ: TJ VanToll's Blog Progress Software KendoReact Twitter: TJ VanToll ( @tjvantoll )",
    "author": "",
    "published": "Wed, 29 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/reactroundup/RRU_157.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "99aff395-6ab8-4376-b332-c419b936fee6",
    "title": "Talking About Hygen and Docuvaluate with Henry Eze - VUE 166",
    "link": "https://devchat.tv/views-on-vue/talking-about-hygen-and-docuvaluate-with-henry-eze-vue-166/",
    "description": "Steve and Solomon talk to Henry Eze about Hygen. Hygen is a generic file generator that allows you to dynamically generate files, such as Vue templates, tests, and any other file needed in a project. In addition, they talk about Docuvaluate, an AI-based program Henry is working on that is used to evaluate contract language and structure. As always, they wrap up the show with picks, including Steve’s famous dad jokes of the week. Panel Solomon Eseme Steve Edwards Guest Henry Eze Sponsors Dev Influencers Accelerator Level Up | Devchat.tv PodcastBootcamp.io Links Generating files in a Vue application using Hygen Production-Grade Vue.js Docuvaluate Godofjs Eze Henry - Medium GitHub: Henry Eze ( god-of-js ) LinkedIn: Henry Eze Twitter: developer on musical steroids ( @godofjs ) Picks Henry- AI - Driven Customer Support Automation Solomon- Profaily Solomon- Mastering Backend Development Steve- The Very First Webcam Was Invented to Keep an Eye on a Coffee Pot at Cambridge University Contact Solomon: Profaily Mastering Backend Development Twitter: Solomon Eseme ( @Kaperskyguru ) GitHub: Solomon Eseme ( Kaperskyguru ) Contact Steve: Twitter: Steve Edwards ( @wonder95 ) GitHub: Steve Edwards ( wonder95 ) LinkedIn: Steve Edwards",
    "author": "",
    "published": "Tue, 28 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/viewsonvue/VUE_166.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "f9c4f79b-b198-413b-9b65-b212c19ca4f5",
    "title": "DevOps for JavaScript ft. Will Button - JSJ 502",
    "link": "https://devchat.tv/js-jabber/devops-for-javascript-ft-will-button-jsj-502/",
    "description": "Our very own Will Button from Adventures in DevOps joins us to discuss DevOps in JavaScript. Will also hosts his own YouTube channel discussing DevOps for Developers and is a consultant helping early stage startups getting their applications set up and scaling. He joins the panel to help the Jabber panel understand how to make Node and JavaScript deploy, scale, and grow. Panel Aimee Knight AJ O'Neal Steve Edwards Guest Will Button Sponsors JavaScript Error and Performance Monitoring | Sentry Dev Influencers Accelerator PodcastBootcamp.io Links Choice Words about the Upcoming Deprecation of JavaScript Dialogs DevOps For Developers - YouTube DevOps For Developers Will Button GitHub: Will Button ( rekibnikufesin ) Twitter: Will Button ( @wfbutton ) Picks Aimee- Qwiklabs AJ-  Learn Two Languages (and one of them should be Go) AJ- webinstall.dev AJ- The Phoenix Project AJ- The Vanilla DevOps Git Credentials \u0026 Private Packages Cheatsheet AJ- Performance - Stack Exchange AJ- The Zen of Python AJ- Crockford on JavaScript Will- Site Reliability Engineering Contact Aimee: Aimee Knight – Software Architect, and International Keynote Speaker GitHub: Aimee Knight ( AimeeKnight ) Twitter: Aimee Knight ( @Aimee_Knight ) LinkedIn: Aimee K. aimeemarieknight | Instagram Aimee Knight | Facebook Contact AJ: AJ ONeal CoolAJ86 on GIT Beyond Code Bootcamp Beyond Code Bootcamp | GitHub Follow Beyond Code Bootcamp | Facebook Twitter: Beyond Code Bootcamp ( @_beyondcode ) Contact Steve: Twitter: Steve Edwards ( @wonder95 ) GitHub: Steve Edwards ( wonder95 ) LinkedIn: Steve Edwards",
    "author": "",
    "published": "Tue, 28 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/js-jabber/JsJ_502.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "042a119e-19c8-40d8-848b-6efa07db23e6",
    "title": "All Things TypeScript ft. Wycliffe Maina - AiA 326",
    "link": "https://devchat.tv/adv-in-angular/all-things-typescript-ft-wycliffe-maina-aia-326/",
    "description": "Wycliffe Maina is a Kenyan developer who has written several articles about TypeScript. He joins the adventure to discuss the ins and outs and several tips and tricks for using TypeScript in your Angular and other applications. Panel Armen Vardanyan Subrat Mishra Guest Wycliffe Maina Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links Type Narrowing in TypeScript Template Literal Types in TypeScript Transforming Types in TypeScript with Utility Types Types and Mocking - Typescript Twitter: Maina Wycliffe ( @mwycliffe_dev ) GitHub: Maina Wycliffe ( mainawycliffe ) LinkedIn: Wycliffe Maina Picks Armen- How to become a tyrant  Maina- Docs are not optional Subrat- Atomic Habits Subrat- Money Heist Contact Armen: Armen Vardanyan Armen Vardanyan – Medium Twitter: Armen Vardanyan ( @Armandotrue ) Contact Subrat: Fun Of Heuristic – YouTube GitHub: Fun Of Heuristic ( funOfheuristic ) Twitter: Subrat Kumar Mishra ( @subrat_msr )",
    "author": "",
    "published": "Thu, 23 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/adventures-in-angular/AiA_326.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "4ef01c24-6f9b-47d7-8662-9c06382ab180",
    "title": "Containerizing and Moving Apps to Kuberetes ft. Michael Orr – RUBY 515",
    "link": "https://devchat.tv/ruby-rogues/containerizing-and-moving-apps-to-kuberetes-ft-michael-orr-ruby-515/",
    "description": "Michael Orr joins the Rogues to discuss how to move applications into Docker for development and production environments in Kubernetes. He walks the panel through the process of orchestrating a Rails setup in Kubernetes that you can run in the cloud. Panel Charles Max Wood Darren Broemmer Luke Stutters Valentino Stoll Guest Michael Orr  Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links Containerizing Ruby on Rails Applications Open Tracing Twitter: Michael Orr ( @imightbeinatree ) Picks Charles- Rocket Fuel Charles- $100M Offers Charles- The Chosen Charles- Top End Devs Charles- PodcastBootcamp.io Darren- 10 Things in Engineering We Don't Spend Enough Time On Luke- Handle request abortion  Luke- Mastering Roda Luke- Moving your PINDA probe on your Prusa printer Michael- Create Recording Rules in Prometheus Valentino- Adafruit Gemma M0 Valentino- Conductive Thread  Valentino- What is a Reed Switch and How Does it Work? Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) Contact Darren: Twitter: Darren Broemmer ( @DarrenBroemmer ) Contact Luke: GitHub: Luke Stutters ( lukestuts ) Contact Valentino: Doximity Technology Blog Work @ Doximity GitHub: Valentino Stoll ( codenamev ) Twitter: V ( @thecodenamev )",
    "author": "",
    "published": "Wed, 22 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/ruby-rogues/RUBY_515.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "ba3079e7-85de-4b26-8e85-08820640090d",
    "title": "Composing Layouts for React ft. Travis Waith-Mair - RRU 156",
    "link": "https://devchat.tv/react-round-up/composing-layouts-for-react-ft-travis-waith-mair-rru-156/",
    "description": "Travis Waith-Mair joins the round up to discuss how to compose layouts in React and the bedrock tools and principles that build up good layouts in React. Panel Jack Herrington Paige Niedringhaus TJ Vantoll Guest Travis Waith-Mair Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links Composing Layouts in React Bedrock Layout Primitives Chromatic The Non-Traditional Developer Twitter: Travis Waith-Mair ( @travisWaithMair ) Picks Jack- Shang-Chi and the Legend of the Ten Rings Paige- Davinci Resolve 17 TJ- Svelte Travis- React Podcast Contact Jack: Jack Herrington – YouTube Blue Collar Coder Twitter: Jack Herrington ( @jherr ) Contact Paige: Paige Niedringhaus Paige Niedringhaus – Medium Twitter: Paige Niedringhaus ( @pniedri ) GitHub: Paige Niedringhaus ( paigen11 ) Contact TJ: TJ VanToll's Blog Progress Software KendoReact Twitter: TJ VanToll ( @tjvantoll )",
    "author": "",
    "published": "Wed, 22 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/reactroundup/RRU_156.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "6b8f3be6-7e72-4cb8-8235-9a2abb437e64",
    "title": "Adoping Vue at Wikimedia with Eric Gardner - VUE 165",
    "link": "https://devchat.tv/views-on-vue/adoping-vue-at-wikimedia-with-eric-gardner-vue-165/",
    "description": "Lindsay and Steve talk with Eric Gardner, Senior Software Engineer at the Wikimedia Foundation, about his journey from graphic design to Vue and the adoption of Vue at the Wikimedia Foundation. They discuss the challenges faced in MediaWiki, the core application behind Wikipedia, and how and why the foundation moved to adopt Vue as its frontend framework of choice. They also discuss some of the future developments at the Foundation, as well as some of the challenges that they still face. Panel Lindsay Wardell Steve Edwards Guest Eric Gardner Sponsors Dev Influencers Accelerator Level Up | Devchat.tv PodcastBootcamp.io Links Adopt a modern JavaScript framework for use with MediaWiki Getty Wikimedia Commons Vue.js has been selected as Wikimedia Foundation's future JavaScript framework Abstract Wikipedia Vite Exploring Code Design – VUE 163 Transitioning a Large Front-End Codebase to TypeScript ft. Priscila Oliveira and Mark Story – JSJ 498 Get Started With TypeScript the Easy Way JavaScript Marathon: Upgrade to Typescript with Vue 3 reMARKable - YouTube Wikimedia Phabricator Design Systems Team Twitter: Eric Gardner ( @ecgardner ) Picks Eric- reMARKable Lindsay- GitHub | lindsaykwardell/vite-elm-template Contact Lindsay: Twitter: Lindsay Wardell ( @lindsaykwardell ) Contact Steve: Twitter: Steve Edwards ( @wonder95 ) GitHub: Steve Edwards ( wonder95 ) LinkedIn: Steve Edwards",
    "author": "",
    "published": "Tue, 21 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/viewsonvue/VUE_165.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "a5b1b626-f31e-4304-ac8f-8b3c1e9df93b",
    "title": "Monitoring Performance and Core Web Vitals ft. Bianca Grizhar and Sumitra Manga - JSJ 501",
    "link": "https://devchat.tv/js-jabber/monitoring-performance-and-core-web-vitals-ft-bianca-grizhar-and-sumitra-manga-jsj-501/",
    "description": "Bianca and Sumitra from Raygun join the panel to talk about Core Web Vitals and how tools like Raygun can help keep tabs on and monitor your performance stats as you change your web application to get you better results on Google. Panel Aimee Knight AJ O'Neal Charles Max Wood Dan Shappir Steve Edwards Guest Bianca Grizhar Sumitra Manga Sponsors Dev Influencers Accelerator Raygun | Click here to get started on your free 14-day trial PodcastBootcamp.io Links CrUX and Core Web Vitals – What to Measure on the Web with Rick Viscomi – JSJ 486 JSJ 477: Understanding Search Engines and SEO (for devs) – Part 2 Opinionated Core Web Vitals – JSJ 495 Twitter: Raygun ( @raygunio ) LinkedIn: Bianca Grizhar LinkedIn: Sumitra Manga Picks AJ- How to ADHD - YouTube AJ- The Biggest Myth In Education - YouTube AJ- Brave Search AJ- GitHub | go-gitea/gitea Bianca- How to monitor and optimize Core Web Vitals - YouTube Charles- Level Up | Devchat.tv Charles- Rhythm of War Dan- Is our universe the only universe? - Brian Greene - YouTube Sumitra- Formula 1: Drive to Survive Contact Aimee: Aimee Knight – Software Architect, and International Keynote Speaker GitHub: Aimee Knight ( AimeeKnight ) Twitter: Aimee Knight ( @Aimee_Knight ) LinkedIn: Aimee K. aimeemarieknight | Instagram Aimee Knight | Facebook Contact AJ: AJ ONeal CoolAJ86 on GIT Beyond Code Bootcamp Beyond Code Bootcamp | GitHub Follow Beyond Code Bootcamp | Facebook Twitter: Beyond Code Bootcamp ( @_beyondcode ) Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) Contact Dan: GitHub: Dan Shappir ( DanShappir ) LinkedIn: Dan Shappir Twitter: Dan Shappir ( @DanShappir ) Contact Steve: Twitter: Steve Edwards ( @wonder95 ) GitHub: Steve Edwards ( wonder95 ) LinkedIn: Steve Edwards",
    "author": "",
    "published": "Tue, 21 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/js-jabber/JsJ_501.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "1279a3d4-7f65-4cbb-9bcf-3349c558bbbe",
    "title": "Managing and Capturing Errors in Angular ft. Philipp Kief - AiA 325",
    "link": "https://devchat.tv/adventures-in-angular/managing-and-capturing-errors-in-angular-ft-philipp-kief-aia-325",
    "description": "Philipp Kief is a German developer who walks through how to manage and capture errors in your Angular application and how to display them to users. He discusses how he standardized error handlers in his applications and what he does to make sure that they get logged someplace. Panel Charles Max Wood Richard Sithole Subrat Mishra Guest Philipp Kief Sponsors Dev Influencers Accelerator Level Up | Devchat.tv PodcastBootcamp.io Links Angular Component Extractor Philipp Kief - Medium Philipp Kief Twitter: Philipp Kief ( @PhilippKief ) Picks Charles- Level Up | Devchat.tv Charles- PodcastBootcamp.io Charles- The Chosen Philipp- Web-based editor Richard- Material Icon Theme Subrat- Start with Why: How Great Leaders Inspire Everyone to Take Action Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) Contact Richard: Enterprise Content Management Software Twitter: Ricci Rich ( @sliqric ) LinkedIn: Richard Sithole Contact Subrat: Fun Of Heuristic – YouTube GitHub: Fun Of Heuristic ( funOfheuristic ) Twitter: Subrat Kumar Mishra ( @subrat_msr )",
    "author": "",
    "published": "Thu, 16 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/adventures-in-angular/AiA_325.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "ab97ebd0-2aa0-4be4-a6fd-59354b03e996",
    "title": "Building Mobile Apps and Ruby ft. Maxwell Anselm - RUBY 514",
    "link": "https://devchat.tv/ruby-rogues/building-mobile-apps-and-ruby-ft-maxwell-anselm-ruby-514/",
    "description": "Maxwell Anselm discusses the options that he's found to build multi-platform mobile applications. The panel chimes in on different options. Maxwell also goes into how he uses Ruby in non-Ruby codebases. Panel Darren Broemmer Dave Kimura John Epperson Luke Stutters Guest Maxwell Anselm Sponsors Dev Influencers Accelerator Level Up | Devchat.tv PodcastBootcamp.io Links The Definitive Guide to RUBY's C API Kotlin for Cross-Platform Mobile Development Flutter Shardbox RubyMotion Life in the slow lane GitHub: Max ( silverhammermba ) Picks Darren- Gosu Dave-  TKD Breakable Boards Dave-  12v USB Fan Cable  John- GitHub | svenfuchs/gem-release John- fastlane Luke- Linux Fun Luke- LRUG August 2021 Maxwell- ffi | RubyGems Contact Darren: Twitter: Darren Broemmer ( @DarrenBroemmer ) Contact Dave: Ruby on Rails Screencasts Twitter: Dave Kimura ( @kobaltz ) GitHub: David Kimura ( kobaltz ) Contact John: Rock Agile Consulting GitHub: John Epperson ( kirillian ) LinkedIn: John Epperson Contact Luke: GitHub: Luke Stutters ( lukestuts )",
    "author": "",
    "published": "Wed, 15 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/ruby-rogues/RUBY_514.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "554fb370-7f86-4790-9d62-296f94094334",
    "title": "Run NextJS and Node in the Browser ft. Eric Simons - RRU 155",
    "link": "https://devchat.tv/react-round-up/run-nextjs-and-node-in-the-browser-ft-eric-simons-rru-155/",
    "description": "Eric Simons joins the round up to discuss the latest advancements made by StackBlitz that enables you to run NodeJS in the browser. Eric expands that to the work they've done with the NextJS team to run NextJS in the browser without the need to have a server in the background. Panel Jack Herrington Paige Niedringhaus TJ VanToll Guest Eric Simons  Sponsors React Error and Performance Monitoring | Sentry Level Up | Devchat.tv PodcastBootcamp.io Links Introducing WebContainers: Run Node.js natively in your browser StackBlitz StackBlitz EricSimons – StackBlitz Twitter: Eric Simons ( @ericsimons40 ) Picks Eric- Vite Jack- Westworld Paige- Elgato Wave:3 TJ- Podcast from The Verge Contact Jack: Jack Herrington – YouTube Blue Collar Coder Twitter: Jack Herrington ( @jherr ) Contact Paige: Paige Niedringhaus Paige Niedringhaus – Medium Twitter: Paige Niedringhaus ( @pniedri ) GitHub: Paige Niedringhaus ( paigen11 ) Contact TJ: TJ VanToll's Blog Progress Software KendoReact Twitter: TJ VanToll ( @tjvantoll )",
    "author": "",
    "published": "Wed, 15 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/reactroundup/RRU_155.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "a5b7fcbb-b95c-4ca9-8de9-f1f18888a3d6",
    "title": "Deep Dive into Nuxt with Mike Gallagher - VUE 164",
    "link": "https://devchat.tv/views-on-vue/deep-dive-into-nuxt-with-mike-gallagher-vue-164/",
    "description": "Lindsay and Steve talk to Mike Gallagher, Software Architect at Hip eCommerce, about his blog post exploring server-side rendering and how Nuxt functions under the hood. They explore Mike's specific use case of needing to manage routing on the client, rather than the server, and how he was able to find a solution. They also discuss how Mike approaches difficult problems like this, and how he determines the next steps to find a solution. They explore some of the intricate details of Nuxt, including how Mike's company handles caching with Nuxt and other production use cases. Panel Lindsay Wardell Steve Edwards Guest Mike Gallagher Sponsors Dev Influencers Accelerator Level Up | Devchat.tv PodcastBootcamp.io Links Server-side rendering and the journey to the center of Nuxt.js GitHub | mikeapr4/vue-backbone Awesome Nuxt Modules  Plugins directory - NUXTJS Tracing or Debugging Vue.js Reactivity: The computed tree GitHub | GoogleChrome/rendertron GitHub | lindsaykwardell/nuxt-github-api Agility CMS Hip eCommerce Michael Gallagher - Medium LinkedIn: Michael Gallagher GitHub: Michael Gallagher ( mikeapr4 ) Picks Lindsay- GitHub | nuxt-community/module-template Lindsay- vitejs/awesome-vite Lindsay- Nuxt Nation Conference Mike- AST Explorer Steve- standup.trex - Instagram Steve- dadjokesallday - Instragram Steve- Failed Comedian Becomes Pastor Contact Lindsay: Twitter: Lindsay Wardell ( @lindsaykwardell ) Contact Steve: Twitter: Steve Edwards ( @wonder95 ) GitHub: Steve Edwards ( wonder95 ) LinkedIn: Steve Edwards",
    "author": "",
    "published": "Tue, 14 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/viewsonvue/VUE_164.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "256a2fdc-2240-4884-9a8f-c68a021a74fd",
    "title": "Episode 500 Celebration! - JSJ 500",
    "link": "https://devchat.tv/js-jabber/episode-500-celebration-jsj-500/",
    "description": "The JavaScript Jabber panel teams up to discuss their favorite moments and episodes over the last nearly 10 years of the show. They discuss where things are at and where they're going next. Panel Aimee Knight AJ O'Neal Charles Max Wood Dan Shappir Steve Edwards Sponsors JavaScript Error and Performance Monitoring | Sentry Level Up | Devchat.tv PodcastBootcamp.io Links JSJ 478: Browser Standards Rampage: Can We Have Nice Things? Live Pull Request Review, Review: Pushback (kindly) when appropriate. Don't let pride ruin you. Pt.6 Picks Aimee- GitHub | syncfast/clockwise Aimee- Inner Engineering AJ- Laws of UX AJ- The Better Parts. Douglas Crockford. JS Fest 2018 AJ- GitHub | ewjoachim/zen-of-python AJ- GitHub | BeyondCodeBootcamp/go-proverbs AJ- Manifesto for Agile Software Development AJ- The Twelve-Factor App AJ- AHA Programming AJ- Our Software Dependency Problem AJ- THE FALLACY OF PREMATURE OPTIMIZATION AJ- Crockford on JavaScript Charles- Jungle Cruise Charles- Podcast Playbook Dan- Pick-A-Flick Steve- Stay alert Steve- Jungle cruise puns Contact Aimee: Aimee Knight – Software Architect, and International Keynote Speaker GitHub: Aimee Knight ( AimeeKnight ) Twitter: Aimee Knight ( @Aimee_Knight ) LinkedIn: Aimee K. aimeemarieknight | Instagram Aimee Knight | Facebook Contact AJ: AJ ONeal CoolAJ86 on GIT Beyond Code Bootcamp Beyond Code Bootcamp | GitHub Follow Beyond Code Bootcamp | Facebook Twitter: Beyond Code Bootcamp ( @_beyondcode ) Contact Charles: Devchat.tv DevChat.tv | Facebook Twitter: DevChat.tv ( @devchattv ) Contact Dan: GitHub: Dan Shappir ( DanShappir ) LinkedIn: Dan Shappir Twitter: Dan Shappir ( @DanShappir ) Contact Steve: Twitter: Steve Edwards ( @wonder95 ) GitHub: Steve Edwards ( wonder95 ) LinkedIn: Steve Edwards",
    "author": "",
    "published": "Tue, 14 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/js-jabber/JsJ_500.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "ce29835f-61ec-4c3f-b3b6-3c8165f2bf10",
    "title": "Exploring Code Design - VUE 163",
    "link": "https://devchat.tv/views-on-vue/exploring-code-design-vue-163/",
    "description": "Lindsay, Luke, and Steve talk about different ways to organize Vue code. They discuss the Composition API, comparing it to the Options API, and the available options for abstracting code from components to be reusable. They also discuss Evan You’s comments about the Composition API becoming the recommended path for using Vue in the future. Panel Lindsay Wardell Luke Diebold Steve Edwards Sponsors Dev Influencers Accelerator Level Up | Devchat.tv PodcastBootcamp.io Links VueUse Sacrificing Simplicity  Migration Build Picks Luke- What is DDD - Eric Evans  Luke- Clickbait is Unreasonably Effective Luke- Laravel Lindsay- Rust Adventure Lindsay- Rockstar Steve- Dad Jokes - Instagram Steve- Dad Jokes by Pubity - Instagram Contact Lindsay: Twitter: Lindsay Wardell ( @lindsaykwardell ) Contact Luke: QuasarCast Twitter: Luke Diebold ( @LukeDiebold ) Contact Steve: Twitter: Steve Edwards ( @wonder95 ) GitHub: Steve Edwards ( wonder95 ) LinkedIn: Steve Edwards",
    "author": "",
    "published": "Tue, 07 Sep 2021 06:00:00 -0400",
    "image": "https://media.devchat.tv/viewsonvue/VUE_163.mp3",
    "source": "https://feeds.feedwrench.com/all-shows-devchattv.rss",
    "categories": null
  },
  {
    "id": "28578fd9-3ea8-4283-b5a0-b17a05e25b10",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "e397772a-a478-40aa-a0be-99d592993612",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "4cca73b5-c13a-47dc-8ea9-e2ec519f11a5",
    "title": "Podcast: “The evolution of Swift”, with special guest Nick Lockwood",
    "link": "https://www.swiftbysundell.com/podcast/123",
    "description": "On this final episode of 2022, Nick Lockwood returns to the show to discuss the overall evolution of Swift and its ecosystem of tools and libraries. How has Swift changed since its original introduction in 2014, how does it compare to other modern programming languages, and how might the language continue to evolve in 2023 and beyond?",
    "author": "",
    "published": "Mon, 19 Dec 2022 16:05:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "0b4b2bda-ab25-46bd-b138-be03078df897",
    "title": "Podcast: “Swift concurrency in practice”, with special guest Ben Scheirman",
    "link": "https://www.swiftbysundell.com/podcast/122",
    "description": "Ben Scheirman returns to the show to discuss how Swift’s built-in concurrency features, such as async/await and tasks, can be used in practice when building apps for Apple’s platforms.",
    "author": "",
    "published": "Fri, 18 Nov 2022 20:30:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "5b63935b-0dfa-4494-bc39-9d6dfcf93ac4",
    "title": "Combining opaque return types with primary associated types",
    "link": "https://www.swiftbysundell.com/articles/opaque-return-types-primary-associated-types",
    "description": "How Swift’s opaque return types can be combined with primary associated types in order to create powerful abstractions without the need for any type erasure.",
    "author": "",
    "published": "Sat, 12 Nov 2022 13:50:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "f22a4edb-2c41-4543-8fa3-c0a50e7c3b1c",
    "title": "Podcast: “Responsive and smooth UIs”, with special guest Adam Bell",
    "link": "https://www.swiftbysundell.com/podcast/121",
    "description": "Adam Bell returns to the podcast to discuss different techniques and approaches for optimizing UI code, and how to utilize tools like animations in order to build iOS apps that feel fast and responsive.",
    "author": "",
    "published": "Mon, 31 Oct 2022 18:45:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "462d254d-5e39-408a-bed7-21f239d881fd",
    "title": "Podcast: “Freelancing and WWDC22 highlights”, with special guest Donny Wals",
    "link": "https://www.swiftbysundell.com/podcast/120",
    "description": "Donny Wals returns to the show to talk about being an iOS developer freelancer, and to discuss some of the key new APIs, Swift language features, and frameworks that were introduced at WWDC22.",
    "author": "",
    "published": "Sat, 17 Sep 2022 17:35:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "65b79e39-ed97-4fb3-ad97-e206aaab5918",
    "title": "Podcast: “The role of system design”, with special guest Gui Rambo",
    "link": "https://www.swiftbysundell.com/podcast/119",
    "description": "Gui Rambo returns to the show to talk about the role and importance of system design when building apps and open source tools, and how common app architectures and design patterns can be augmented with custom systems.",
    "author": "",
    "published": "Wed, 31 Aug 2022 19:15:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "55e60dfd-9ab4-4687-816b-774b124f52f7",
    "title": "Sponsored: Essential Developer",
    "link": "https://www.swiftbysundell.com/sponsor/essential-developer-july-2022",
    "description": "Thanks a lot to Essential Developer for sponsoring Swift by Sundell.",
    "author": "",
    "published": "Wed, 13 Jul 2022 12:00:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "1729c2bd-2be7-4ab4-ba59-02fd70174d46",
    "title": "Podcast: “What’s new in SwiftUI in iOS 16?”, with special guest Natalia Panferova",
    "link": "https://www.swiftbysundell.com/podcast/118",
    "description": "Natalia Panferova joins John to discuss some of the key new features that are coming to SwiftUI and UIKit in iOS 16, and to talk about her experience working on SwiftUI at Apple.",
    "author": "",
    "published": "Mon, 11 Jul 2022 15:30:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "34ac6917-9b3f-4208-a342-313197813f92",
    "title": "Switching between SwiftUI’s HStack and VStack",
    "link": "https://www.swiftbysundell.com/articles/switching-between-swiftui-hstack-vstack",
    "description": "Different ways to implement a dynamic SwiftUI stack that renders its content either horizontally or vertically, depending on the current context.",
    "author": "",
    "published": "Fri, 8 Jul 2022 15:50:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "0e0ec23f-b9e5-447e-86c2-80858d66cc00",
    "title": "Podcast: “Swift 5.7, generics, and the road to Swift 6”, with special guest Ben Cohen",
    "link": "https://www.swiftbysundell.com/podcast/117",
    "description": "Ben Cohen, manager of the Swift team at Apple, joins John on this WWDC22 special to discuss Swift 5.7, how generics have been made more powerful and easy to use, and how the language is expected to evolve towards Swift 6.",
    "author": "",
    "published": "Fri, 10 Jun 2022 17:10:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "976a52c6-2887-460e-afa1-54bae6744ace",
    "title": "Using the ‘some’ and ‘any’ keywords to reference generic protocols in Swift 5.7",
    "link": "https://www.swiftbysundell.com/articles/referencing-generic-protocols-with-some-and-any-keywords",
    "description": "How Swift 5.7 makes generic protocols more powerful and easier to work with, thanks to the ‘some’ and ‘any’ keywords.",
    "author": "",
    "published": "Thu, 9 Jun 2022 00:20:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "fe88d059-fc0e-4ff8-8d8c-ec34cbbe445c",
    "title": "Swift 5.7’s new optional unwrapping syntax",
    "link": "https://www.swiftbysundell.com/articles/swifts-new-shorthand-optional-unwrapping-syntax",
    "description": "A quick look at a new, more concise way to unwrap optional values that’s being introduced in Swift 5.7.",
    "author": "",
    "published": "Tue, 7 Jun 2022 22:20:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "e9f9720d-818e-4e32-a2ca-50b483abc1ec",
    "title": "Rendering SwiftUI views within UITableView or UICollectionView cells on iOS 16",
    "link": "https://www.swiftbysundell.com/articles/rendering-swiftui-views-within-uitableview-or-uicollectionview",
    "description": "Exploring how iOS 16’s new UIHostingConfiguration API enables us to inline SwiftUI views within our UITableView or UICollectionView cells.",
    "author": "",
    "published": "Tue, 7 Jun 2022 13:00:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "8723f944-7c88-4274-a47f-f697274fc980",
    "title": "Podcast: “The evolution of SwiftUI”, with special guest Chris Eidhof",
    "link": "https://www.swiftbysundell.com/podcast/116",
    "description": "Chris Eidhof returns to the podcast to talk about how SwiftUI has evolved since its initial release, to share several key learnings from using it over the past few years, and to discuss concepts like app architecture and state management.",
    "author": "",
    "published": "Wed, 18 May 2022 14:55:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "895c41ce-4046-48d2-b79f-cc8e33b39a8b",
    "title": "Swift by Sundell turns five years old today! Here’s what’s next for the website and the podcast",
    "link": "https://www.swiftbysundell.com/special/five-years",
    "description": "Celebrating the fifth birthday of this website, while also sharing some important announcements about its future.",
    "author": "",
    "published": "Thu, 5 May 2022 16:40:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "dd2accab-c903-4875-9a13-16f8f4fe5f2e",
    "title": "Podcast: “A framework and an app”, with special guest Simon Støvring",
    "link": "https://www.swiftbysundell.com/podcast/115",
    "description": "Simon Støvring returns to the show to talk about how he built his new text editor Runestone, how to effectively manage an app’s settings, performance tuning, and implementing an app’s core logic as a stand-alone framework.",
    "author": "",
    "published": "Sat, 30 Apr 2022 19:20:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "ef1b3def-38e7-40d6-886f-2becfcca5454",
    "title": "Type placeholders in Swift",
    "link": "https://www.swiftbysundell.com/articles/type-placeholders-in-swift",
    "description": "New in Swift 5.6: We can now use type placeholders to select what generic types that we want the compiler to infer. Let’s take a look at how those placeholders work, and what kinds of situations that they could be really useful in.",
    "author": "",
    "published": "Thu, 14 Apr 2022 12:55:00 +0200",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "255d5314-7820-4b4e-95fc-ea61aa94273d",
    "title": "Podcast: “Accessibility on Apple’s platforms”, with special guest Sommer Panage",
    "link": "https://www.swiftbysundell.com/podcast/114",
    "description": "Sommer Panage returns to the show to discuss Apple’s various accessibility APIs and tools, how to incorporate accessibility support into a team’s overall development workflow, and what it was like being an engineering manager at Apple.",
    "author": "",
    "published": "Mon, 21 Mar 2022 19:55:00 +0100",
    "image": "",
    "source": "https://swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "361af7c7-82e8-4b54-b5f1-f49840959353",
    "title": "Building with nightly Swift toolchains on macOS",
    "link": "https://oleb.net/2024/swift-toolchains/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-03-05T18:54:44Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "18501f41-dd38-46f3-a34f-dfb7eb06dbca",
    "title": "How the Swift compiler knows that DispatchQueue.main implies @MainActor",
    "link": "https://oleb.net/2024/dispatchqueue-mainactor/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2024-02-29T18:54:47Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "80037f57-d42b-46b0-bee8-127f20816c41",
    "title": "How the relative size modifier interacts with stack views",
    "link": "https://oleb.net/2023/swiftui-relative-size-in-stacks/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2023-03-24T20:14:49Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "27e424f5-f7d3-4f9b-8507-11a036f637ae",
    "title": "Working with percentages in SwiftUI layout",
    "link": "https://oleb.net/2023/swiftui-relative-size/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2023-03-23T22:31:11Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "fe169de6-d2ff-42ac-aa14-0da67e224247",
    "title": "Keyboard shortcuts for Export Unmodified Original in Photos for Mac",
    "link": "https://oleb.net/2023/photos-keyboard-shortcuts/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2023-03-21T21:42:04Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "a2c8732e-a9b5-4a96-85f4-f6f7792f2361",
    "title": "Swift Evolution proposals in Alfred",
    "link": "https://oleb.net/2023/alfred-swift-evolution/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2023-03-09T22:33:14Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "3339c955-9a00-45ae-a739-2180733ee8f5",
    "title": "Pattern matching on error codes",
    "link": "https://oleb.net/2023/catch-error-code/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2023-02-27T19:32:22Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "44d7701b-86d2-4e9e-b2f6-c87f1e1737ae",
    "title": "You should watch Double Fine Adventure",
    "link": "https://oleb.net/2023/double-fine-adventure/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2023-01-31T18:39:27Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "2f10280e-2d30-4aed-bc61-e050c709163e",
    "title": "Understanding SwiftUI view lifecycles",
    "link": "https://oleb.net/2022/swiftui-view-lifecycle/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-12-15T20:52:46Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "80b29bb3-8739-4b91-830f-8e5277fe793e",
    "title": "clipped() doesn’t affect hit testing",
    "link": "https://oleb.net/2022/clipped-hit-testing/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-11-24T18:30:58Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "0136fcbf-74ef-4a19-82af-d12b66f538c8",
    "title": "When .animation animates more (or less) than it’s supposed to",
    "link": "https://oleb.net/2022/animation-modifier-position/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-11-10T21:48:45Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "8cdc7003-5543-4c2f-8085-ba0f0c7a0512",
    "title": "Xcode 14.0 generates wrong concurrency code for macOS targets",
    "link": "https://oleb.net/2022/xcode-14-mac-concurrency-bugs/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-10-12T19:12:17Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "5849959f-a3f3-44ae-80f7-148bc94d70f0",
    "title": "Where View.task gets its main-actor isolation from",
    "link": "https://oleb.net/2022/swiftui-task-mainactor/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-10-11T16:41:34Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "af798f16-1353-4337-b772-f684ee5f47ea",
    "title": "Experimenting with Live Activities",
    "link": "https://oleb.net/2022/live-activity/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-08-03T16:50:39Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "c75dbee1-1e0f-45d7-b9aa-c7722c451fc6",
    "title": "How @MainActor works",
    "link": "https://oleb.net/2022/how-mainactor-works/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-05-05T13:52:42Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "29e00ebc-c02d-4bc7-a98c-4a8a3cafecc4",
    "title": "AttributedString’s Codable format and what it has to do with Unicode",
    "link": "https://oleb.net/2022/attributedstring-codable/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-04-27T13:28:03Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "7d330eeb-f6ec-41f2-94c1-92dcef743831",
    "title": "A heterogeneous dictionary with strong types in Swift",
    "link": "https://oleb.net/2022/heterogeneous-dictionary/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-04-19T15:52:08Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "30fd0bec-96f4-4818-bb0f-d34508c7628d",
    "title": "Advanced Swift, fifth edition",
    "link": "https://oleb.net/2022/advanced-swift-5/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-03-28T14:03:30Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "ef1e385c-161d-4d16-b2b3-1ebd46340604",
    "title": "Synchronous functions can support cancellation too",
    "link": "https://oleb.net/2022/sync-functions-cancellation/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-02-01T22:59:43Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "3639019e-8f41-40d7-9ec0-c9e6314d3e1b",
    "title": "Cancellation can come in many forms",
    "link": "https://oleb.net/2022/cancellation-forms/",
    "description": "",
    "author": "Ole Begemann",
    "published": "2022-01-31T18:20:07Z",
    "image": "",
    "source": "https://oleb.net/blog/atom.xml",
    "categories": null
  },
  {
    "id": "8de44dc4-a326-4304-8b84-1262782352c7",
    "title": "SwiftUI views versus modifiers",
    "link": "https://www.swiftbysundell.com/articles/swiftui-views-versus-modifiers",
    "description": "What’s really the difference between building a piece of UI as a view versus a modifier, and how to choose between those two solutions?",
    "author": "",
    "published": "Mon, 27 Feb 2023 11:05:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "1cc2cedf-d4f4-483c-b788-581aeaa68a8d",
    "title": "Observing the content offset of a SwiftUI ScrollView",
    "link": "https://www.swiftbysundell.com/articles/observing-swiftui-scrollview-content-offset",
    "description": "How the content offset of a SwiftUI ScrollView can be observed without bridging to UIKit.",
    "author": "",
    "published": "Mon, 30 Jan 2023 12:50:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "6acae330-d4e8-4c1a-8297-84b183257c9f",
    "title": "Podcast: “The evolution of Swift”, with special guest Nick Lockwood",
    "link": "https://www.swiftbysundell.com/podcast/123",
    "description": "On this final episode of 2022, Nick Lockwood returns to the show to discuss the overall evolution of Swift and its ecosystem of tools and libraries. How has Swift changed since its original introduction in 2014, how does it compare to other modern programming languages, and how might the language continue to evolve in 2023 and beyond?",
    "author": "",
    "published": "Mon, 19 Dec 2022 16:05:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "2391276d-e4d9-4314-b8bd-12efd4849a76",
    "title": "Podcast: “Swift concurrency in practice”, with special guest Ben Scheirman",
    "link": "https://www.swiftbysundell.com/podcast/122",
    "description": "Ben Scheirman returns to the show to discuss how Swift’s built-in concurrency features, such as async/await and tasks, can be used in practice when building apps for Apple’s platforms.",
    "author": "",
    "published": "Fri, 18 Nov 2022 20:30:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "19e0df94-0f99-42d0-847b-d8106fae23e3",
    "title": "Combining opaque return types with primary associated types",
    "link": "https://www.swiftbysundell.com/articles/opaque-return-types-primary-associated-types",
    "description": "How Swift’s opaque return types can be combined with primary associated types in order to create powerful abstractions without the need for any type erasure.",
    "author": "",
    "published": "Sat, 12 Nov 2022 13:50:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "2c01062d-5c9e-4c94-840d-6bd72e07715e",
    "title": "Podcast: “Responsive and smooth UIs”, with special guest Adam Bell",
    "link": "https://www.swiftbysundell.com/podcast/121",
    "description": "Adam Bell returns to the podcast to discuss different techniques and approaches for optimizing UI code, and how to utilize tools like animations in order to build iOS apps that feel fast and responsive.",
    "author": "",
    "published": "Mon, 31 Oct 2022 18:45:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "2469e1e1-eca8-41bf-bfc5-e33d93795d33",
    "title": "Podcast: “Freelancing and WWDC22 highlights”, with special guest Donny Wals",
    "link": "https://www.swiftbysundell.com/podcast/120",
    "description": "Donny Wals returns to the show to talk about being an iOS developer freelancer, and to discuss some of the key new APIs, Swift language features, and frameworks that were introduced at WWDC22.",
    "author": "",
    "published": "Sat, 17 Sep 2022 17:35:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "d1c0a641-1adb-4120-9296-6df32751219c",
    "title": "Podcast: “The role of system design”, with special guest Gui Rambo",
    "link": "https://www.swiftbysundell.com/podcast/119",
    "description": "Gui Rambo returns to the show to talk about the role and importance of system design when building apps and open source tools, and how common app architectures and design patterns can be augmented with custom systems.",
    "author": "",
    "published": "Wed, 31 Aug 2022 19:15:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "5d31b4c4-8ac6-47a7-a859-59e9242d3580",
    "title": "Sponsored: Essential Developer",
    "link": "https://www.swiftbysundell.com/sponsor/essential-developer-july-2022",
    "description": "Thanks a lot to Essential Developer for sponsoring Swift by Sundell.",
    "author": "",
    "published": "Wed, 13 Jul 2022 12:00:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "1deb179c-463c-4dbf-96dc-f732159f10d1",
    "title": "Podcast: “What’s new in SwiftUI in iOS 16?”, with special guest Natalia Panferova",
    "link": "https://www.swiftbysundell.com/podcast/118",
    "description": "Natalia Panferova joins John to discuss some of the key new features that are coming to SwiftUI and UIKit in iOS 16, and to talk about her experience working on SwiftUI at Apple.",
    "author": "",
    "published": "Mon, 11 Jul 2022 15:30:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "9ed8ea4c-305f-40b4-a969-a0f351515f16",
    "title": "Switching between SwiftUI’s HStack and VStack",
    "link": "https://www.swiftbysundell.com/articles/switching-between-swiftui-hstack-vstack",
    "description": "Different ways to implement a dynamic SwiftUI stack that renders its content either horizontally or vertically, depending on the current context.",
    "author": "",
    "published": "Fri, 8 Jul 2022 15:50:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "e8094157-6d1b-4fd5-8e50-2f48b27dedce",
    "title": "Podcast: “Swift 5.7, generics, and the road to Swift 6”, with special guest Ben Cohen",
    "link": "https://www.swiftbysundell.com/podcast/117",
    "description": "Ben Cohen, manager of the Swift team at Apple, joins John on this WWDC22 special to discuss Swift 5.7, how generics have been made more powerful and easy to use, and how the language is expected to evolve towards Swift 6.",
    "author": "",
    "published": "Fri, 10 Jun 2022 17:10:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "a118f719-db52-49d0-ae29-5d6d2b8f0147",
    "title": "Using the ‘some’ and ‘any’ keywords to reference generic protocols in Swift 5.7",
    "link": "https://www.swiftbysundell.com/articles/referencing-generic-protocols-with-some-and-any-keywords",
    "description": "How Swift 5.7 makes generic protocols more powerful and easier to work with, thanks to the ‘some’ and ‘any’ keywords.",
    "author": "",
    "published": "Thu, 9 Jun 2022 00:20:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "445329c0-d5f5-44b1-9433-7c6a479d18d5",
    "title": "Swift 5.7’s new optional unwrapping syntax",
    "link": "https://www.swiftbysundell.com/articles/swifts-new-shorthand-optional-unwrapping-syntax",
    "description": "A quick look at a new, more concise way to unwrap optional values that’s being introduced in Swift 5.7.",
    "author": "",
    "published": "Tue, 7 Jun 2022 22:20:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "39e60ce2-92c3-4151-958e-e4697cd7f5b4",
    "title": "Rendering SwiftUI views within UITableView or UICollectionView cells on iOS 16",
    "link": "https://www.swiftbysundell.com/articles/rendering-swiftui-views-within-uitableview-or-uicollectionview",
    "description": "Exploring how iOS 16’s new UIHostingConfiguration API enables us to inline SwiftUI views within our UITableView or UICollectionView cells.",
    "author": "",
    "published": "Tue, 7 Jun 2022 13:00:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "ca434e00-ab58-4afc-a151-1fcd75a82481",
    "title": "Podcast: “The evolution of SwiftUI”, with special guest Chris Eidhof",
    "link": "https://www.swiftbysundell.com/podcast/116",
    "description": "Chris Eidhof returns to the podcast to talk about how SwiftUI has evolved since its initial release, to share several key learnings from using it over the past few years, and to discuss concepts like app architecture and state management.",
    "author": "",
    "published": "Wed, 18 May 2022 14:55:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "88f3508b-0853-4752-9cb8-673f637b4e45",
    "title": "Swift by Sundell turns five years old today! Here’s what’s next for the website and the podcast",
    "link": "https://www.swiftbysundell.com/special/five-years",
    "description": "Celebrating the fifth birthday of this website, while also sharing some important announcements about its future.",
    "author": "",
    "published": "Thu, 5 May 2022 16:40:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "48014498-887f-441f-9336-7261da4b9f00",
    "title": "Podcast: “A framework and an app”, with special guest Simon Støvring",
    "link": "https://www.swiftbysundell.com/podcast/115",
    "description": "Simon Støvring returns to the show to talk about how he built his new text editor Runestone, how to effectively manage an app’s settings, performance tuning, and implementing an app’s core logic as a stand-alone framework.",
    "author": "",
    "published": "Sat, 30 Apr 2022 19:20:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "3928fe8c-77c4-4405-870e-89a9fb44082c",
    "title": "Type placeholders in Swift",
    "link": "https://www.swiftbysundell.com/articles/type-placeholders-in-swift",
    "description": "New in Swift 5.6: We can now use type placeholders to select what generic types that we want the compiler to infer. Let’s take a look at how those placeholders work, and what kinds of situations that they could be really useful in.",
    "author": "",
    "published": "Thu, 14 Apr 2022 12:55:00 +0200",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "86791015-12dc-45a9-b29e-68a3a270e63a",
    "title": "Podcast: “Accessibility on Apple’s platforms”, with special guest Sommer Panage",
    "link": "https://www.swiftbysundell.com/podcast/114",
    "description": "Sommer Panage returns to the show to discuss Apple’s various accessibility APIs and tools, how to incorporate accessibility support into a team’s overall development workflow, and what it was like being an engineering manager at Apple.",
    "author": "",
    "published": "Mon, 21 Mar 2022 19:55:00 +0100",
    "image": "",
    "source": "https://www.swiftbysundell.com/feed.rss",
    "categories": null
  },
  {
    "id": "330937c2-a5af-478d-8194-f1240717aa02",
    "title": "Magical Particle Effects with SwiftUI Canvas",
    "link": "https://nerdyak.tech/development/2024/06/27/particle-effects-with-SwiftUI-Canvas.html",
    "description": "In one of the previous posts, I shared a simple way of Creating particle effects in SwiftUI. The approach is super easy and utilizes the power of viewModifiers, but I would not recommend it for production use as it is performance-greedy when having a bigger amount of particles in place (because each particle is a single view)",
    "author": "Pavel Zak",
    "published": "2024-06-27T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Canvas",
      "Particles",
      "BlendMode",
      "TimelineView"
    ]
  },
  {
    "id": "8457f03d-b943-49cb-9e31-84d0772366ec",
    "title": "SwiftUI transitions with distortion effect and Metal Shaders",
    "link": "https://nerdyak.tech/development/2023/06/16/distortionEffect-with-Metal-shaders-for-better-transitions.html",
    "description": "This year DubDub is over and I am very excited about the new developer treats that iOS17 will bring us that expand the animation possibilities of SwiftUI. I am talking mainly about the PhaseAnimator, KeyframeAnimator and the ability to utilize Metal shaders on SwiftUI views through modifiers .distortionEffect, .layerEffect, and .colorEffect (docs).",
    "author": "Pavel Zak",
    "published": "2023-06-16T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "distortionEffect",
      "Metal",
      "Shaders",
      "transitions"
    ]
  },
  {
    "id": "f2424d62-d10e-4e1b-8398-3f419ceb996d",
    "title": "Avoid Spacers in SwiftUI Stacks",
    "link": "https://nerdyak.tech/development/2023/04/06/avoid-swiftui-spacers-in-stacks.html",
    "description": "As I teach SwiftUI here and there I have noticed a particular pattern that is being used and I would like to comment on a possible issue it can lead to. Let’s explore it!",
    "author": "Pavel Zak",
    "published": "2023-04-06T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Spacer",
      "Stack",
      "Frame"
    ]
  },
  {
    "id": "70dfc29e-0ea9-4538-bfeb-b656a9ec555c",
    "title": "Creating particles in SwiftUI - in less than 50 lines of code",
    "link": "https://nerdyak.tech/development/2020/12/12/create-particles-in-swiftui.html",
    "description": "I have put together a short video about creating particle effects with SwiftUI. It showcases the easiest/lazy way, which is great for simple eye candies and experimenting.",
    "author": "Pavel Zak",
    "published": "2020-12-12T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Particle",
      "ViewModifier"
    ]
  },
  {
    "id": "10fee781-b0df-41fa-b1ac-1792ddeb3298",
    "title": "Mastering transitions in SwiftUI",
    "link": "https://nerdyak.tech/development/2020/10/12/transitions-in-swiftui.html",
    "description": "Transitions play a vital role in the user experience of our apps. They are visual keys signalizing that the app or screen context is changing.",
    "author": "Pavel Zak",
    "published": "2020-10-12T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Transition",
      "ViewModifier",
      "ConditionalView"
    ]
  },
  {
    "id": "ae398ce7-0554-40d9-87f2-9f37e40d0871",
    "title": "Creating onboarding screens in SwiftUI",
    "link": "https://nerdyak.tech/development/2020/07/17/creating-onboarding-screens-in-swiftui.html",
    "description": "In this post, I would like to discuss several ways how to create onboarding/introduction screens for your app. Let me keep aside the discussion if such screens are good UX pattern, but let me rather examine SwiftUI capabilities for such task instead.",
    "author": "Pavel Zak",
    "published": "2020-07-17T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "SwiftUI",
      "Transition",
      "ScrollView",
      "TabView",
      "PageTabViewStyle"
    ]
  },
  {
    "id": "d5531b0a-45d1-40b9-8140-8b028c0afba9",
    "title": "TikTok logo-ish effect in SwiftUI",
    "link": "https://nerdyak.tech/development/2020/06/12/create-tiktok-logo-effect-in-swiftui.html",
    "description": "Hello and welcome to another blog post about SwiftUI. This years WWDC is approaching fast and the expectation of new SwiftUI features and/or changes is tremendous. So I have decided to dedicate this post to something lighter yet still playful.",
    "author": "Pavel Zak",
    "published": "2020-06-12T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "swiftUI",
      "tiktok",
      "effect",
      "BlendMode",
      "ViewModifier",
      "ButtonStyle"
    ]
  },
  {
    "id": "37114edf-642a-44b8-8544-366ce6d44b76",
    "title": "Morphing shapes in SwiftUI",
    "link": "https://nerdyak.tech/development/2020/05/07/morphing-shapes-in-swiftui.html",
    "description": "Hello and welcome to another blog post about SwiftUI animations. In the previous post dedicated mainly to AnimatableData, we have constructed AnimatableVector that allowed us to create animatable charts. Today we will utilize the same class for morphing shapes.",
    "author": "Pavel Zak",
    "published": "2020-05-07T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "swiftUI",
      "shape",
      "animation",
      "animatableData",
      "animatablePair",
      "animatableVector",
      "path",
      "morphing",
      "transition"
    ]
  },
  {
    "id": "4d6780a0-4c0e-4af0-964b-d4c8b42c3a17",
    "title": "How to define custom LLDB command in Xcode",
    "link": "https://nerdyak.tech/development/2020/04/20/define-custom-lldb-command-xcode.html",
    "description": "It has been a couple of months since my last post. I have been quite occupied with a big project where I am helping to modernize its archaic code-base.",
    "author": "Pavel Zak",
    "published": "2020-04-20T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "Xcode",
      "LLDB",
      "command",
      "Swift"
    ]
  },
  {
    "id": "8582a727-ea31-4fb6-9481-7261d30f1ea4",
    "title": "Animating complex shapes in SwiftUI",
    "link": "https://nerdyak.tech/development/2020/01/12/animating-complex-shapes-in-swiftui.html",
    "description": "Hello and welcome to another blog post about SwiftUI. This time, we will talk about the animation of complex shapes in SwiftUI. You will understand animatableData property and will be able to implement animatable custom Shape struct that depends on multiple parameters.",
    "author": "Pavel Zak",
    "published": "2020-01-12T00:00:00+00:00",
    "image": "",
    "source": "https://nerdyak.tech/atom.xml",
    "categories": [
      "development",
      "swiftUI",
      "shape",
      "animation",
      "animatableData",
      "animatablePair",
      "animatableVector",
      "path",
      "charts"
    ]
  },
  {
    "id": "24644fbc-ebf2-4c0d-b7f5-d7fcde947e5f",
    "title": "My process for learning new languages",
    "link": "https://swiftrocks.com/my-process-for-learning-new-languages",
    "description": "Throughout my life, I have met several people who struggle to learn a new language, with some of them being unable to communicate at a basic level despite having studied for several years. I believe that learning a language is not a matter of talent, but that of dedication and following a good process. In this article, I would like to share the process I used more than once (and am still using) to tackle the challenge of learning a new language with great success. I currently speak three languages (native Portuguese, English, Swedish), and am in the process of learning a fourth (Japanese). My process For me, learning a new language consists of three major steps: Learning basic grammar Becoming good at reading and listening Becoming good at speaking Learning basic grammar My first step towards learning a new language consists of understanding the basics of the language. This includes things like learning how sentences are structured, how words should be pronounced, how to count, and any other language-specific basics that may apply (for example, for Swedish, learning the difference between en / ett, or the concept of soft / hard vowels). The word \"basic\" here is very important. I want to have a good understanding of how things work in that language, but I don't want to waste time reasoning about complex grammar rules. Think of the sorts of things a mom would correct a child for; my mom would correct me if I used a word in the wrong place, but she wouldn't lecture me about the theory of participle clauses. Knowledge of basic grammar massively pays off because later on it will simplify the process of expanding the vocabulary. Although at this point I will not know many words, my knowledge of basic grammar will allow me to more easily figure out how to pronounce any new words that I may encounter in the future, to properly classify them (subject? verb? noun? adjective? present? past tense?) based on their format and position in a sentence, and in some cases even accurately guess their meaning based on this information. Although in the next section I'm going to complain about traditional language learning books / schools, I think they are one of the best resources for learning basic grammar. It's also usually straightforward and can be mastered in just a couple of months. Becoming good at reading and listening But this is about as far as those language schools and books will help you out, because in my opinion they massively fuck up pretty much everything beyond this point. In my experience, after learning basic grammar, schools and books usually follow up by teaching advanced grammar. I think this is a complete waste of time and is why in my opinion many adults struggle with learning a language despite attending classes for multiple years. Learning complex grammar rules will not help you learn the language, even natives don't know this stuff! What natives know is vocabulary, and this is what I believe is the right focus at this stage. My goal then becomes to expand my vocabulary as much as possible by immersing myself in the language, consuming as much media as I can and as frequently as possible. This is something that is usually referred to as the immersion method. Here are some examples of things I do in this step: Changing the language of my phone / computer Watching shows with either sound or subtitles in that language, preferably both if available Listening to podcasts, sometimes actively and sometimes passively as background noise Finding internet forums / subreddits / YouTube channels for topics I like Reading the news You might think that this doesn't make sense because you won't understand anything, but that's exactly the point. Children also don't understand anything at first, yet magically they seem to just \"get it\" after one point, simply by being exposed to the language. This is because our brains are big pattern-matching machines; the more you expose yourself to a language, the more patterns / words you discover, which leads to further discoveries until you eventually reach a point where everything just clicks. In other words, the purpose of this step is to try to replicate how a child would learn a language at home. I find watching shows / YouTube videos to be particularly excellent for this because you can usually guess what a word means based on the context of the scene, meaning you don't need to spend as much time translating words as you would when compared to other types of media. Duolingo can also be a good tool to expand your vocabulary, as long as you don't use it in isolation. This is because although Duolingo is a good way to learn new words, it tends to be quite bad at everything else (e.g grammar), so I think it's important to back it up with the other methods mentioned in this section. It's important to note also that the quality of Duolingo's exercises varies greatly between languages, so looking for reviews before getting started is a must here. If you tend to quickly forget things like I do, a spaced repetition system can greatly assist you with fixating all of this new knowledge. In my case I quite enjoyed using Readwise for this, but I know many who have used Anki / traditional flashcards with great success. This entire process is very painful at first, but gets easier with time as your vocabulary improves. The unfortunate part is that this is a lengthy process; it can take several years of doing this before reaching a point where reading / listening to the language becomes effortless, and I think there's no way around it. Becoming good at speaking Although the previous step is excellent at making me good at reading and listening, in my experience it doesn't necessarily help me become good at speaking. When I was learning Swedish for example, although I had an easy time understanding what people were saying and knew in theory what to answer back, I still had a very hard time doing so, mostly because I just wasn't used to it. Although I knew the vocabulary in theory, it would still take several seconds for the right words to emerge in my mind when having a conversation with someone. Unlike the other steps, I don't think there is any special method that one can use to become good at speaking a new language. This is something you just have to keep doing until your brain gets used to it. It's a massive advantage if you actually live in the country in question, but this is doable even if you don't as there are many online services designed around connecting you with native speakers of a particular language. I personally never used them though, so I cannot comment on their efficiency. Another interesting to mention is that nowadays there are websites that connect LLMs to voice recognition models, allowing you to chat with something like ChatGPT with your voice for the purpose of language learning. I've tried one but personally didn't like the experience as talking to a robot felt completely different from talking to a real person, but if you'd like to try it out, you can easily find them on Google (there are hundreds of websites for this as of writing). I think the most important part here is to resist the urge to switch to another language when you start to struggle, especially if you live in a country like Sweden where the natives are good at English. (In fact I would say that the hardest thing about learning a language like Swedish is not the language itself, but rather that Swedes are so good at English that they automatically switch to it when they see you struggling with Swedish, making it almost impossible for you to improve!) Conclusion Although we can divide the process of learning a new language in logical steps, we're still talking about a multi-year effort. That's just how it works, there are no shortcuts. If you struggle with learning a new language, I hope this post was able to teach you something new that can help you in your journey!",
    "author": "Bruno Rocha",
    "published": "Sun, 1 Sep 2024 10:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "fbecc907-9f16-464d-9bc1-4e550feed829",
    "title": "What are mobile release engineering teams and when do you need one? (Runway)",
    "link": "https://www.runway.team/blog/what-are-mobile-release-engineering-teams-and-when-do-you-need-one",
    "description": "The early (and also not-so-early) days of building a tech startup means hiring and working with people who are capable of wearing a lot of hats. There are a ton of things to do and nowhere near an equal amount of resources to do them. Even if you join as a specialist, chances are you'll find yourself getting deep into other areas. This is true across the organization, including in mobile engineering. Early engineers don’t just write the code that builds the foundation for the app’s future success (while building up the tech debt that future engineers will pull their hair out over) but also the initial infrastructure both for how teams get things done and how they ship code out the door. This doesn’t last forever though. As teams grow they make the transition out of generalist, jack-of-all-trades roles and begin focusing on specialization. But one part of the org where there is often a lag in making this transition — and sometimes a very long one — is on the mobile team. Very few mobile engineers will have time to support both their team's app features and the series of Ruby scripts that support their release process, yet the expectation that they do both often lingers far beyond when other teams in the organization have fully specialized. In this article, we'll look at why this happens and how big tech companies follow-up on this problem.",
    "author": "Bruno Rocha",
    "published": "Fri, 28 Jun 2024 09:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "e34f6a1d-629f-4b8f-a7ae-8373bf729cb7",
    "title": "Recommended WWDC24 Sessions",
    "link": "https://swiftrocks.com/recommended-wwdc24-sessions",
    "description": "Every year I watch WWDC and write down some notes. But I've just realized that I've never shared those notes and it felt like something I should do, so I've decided to do just that! My approach is to pick a handful of sessions that are immediately useful / interesting to me and ignore the rest. I find this to be a good strategy because in my experience trying to keep up with things that you don't care about / don't have an immediate need for is a very easy way to burn yourself out, especially because Apple has this awful habit of announcing things and then proceeding to make them completely obsolete the next year. If in the future I happen to start working with something where one of the ignored sessions would be handy, I go back and watch it. Otherwise, it stays unwatched. I think the Keynote and the State of the Union should always be watched, so I won't cover them here. Meet Swift Testing I really like this feature. Greatly recommend watching this as it shows not only how it works but also many interesting tricks that you can do with it. To make it better, it's open source and even works on VSCode, although I haven't tried the latter myself. What’s new in StoreKit and In-App Purchase I watch StoreKit sessions because I have an app that has IAPs, so I'm always eager to see what's new in this regard. StoreKit Views aren't a new concept but I'm glad to see they made them more powerful. They also show how you can test IAPs directly in Xcode, which is pretty neat. What's new in Swift This session happens every year and it's always a good watch. As someone who has been working with build systems a lot recently, I'm particularly interested in the new explicit modules feature. What's new in Xcode 16 This is a great watch as Xcode 16 changed quite a bit in good ways. The time profiler now has a flame graph, and the new unified backtrace view looks awesome. What's new in UIKit I haven't worked directly with UI for a very long time, but I enjoy watching these to see what they're improving. I like the improved interop between SwiftUI and UIKit and the new fluid animation type. The new UIUpdateLink type is also very interesting. What's new in SwiftUI Similarly to \"What's new in UIKit\", I enjoy watching these to see what's up with the frameworks. Particularly great things this year are custom containers, how things like @Environment and state in Previews have been greatly simplified, and a much better integration with scroll views. Go small with Embedded Swift This is one of those things that I don't have a use for but watch anyway because it sounded cool, and indeed it was. I think this can also work as a hardcore app size optimization for your apps if you're fine with losing a bunch of Swift's features. Extend your app’s controls across the system Watching sessions about new iOS features is always a good idea if they relate to something that you can potentially implement in your apps. I can think of many things that I can App Controls for and it seems also really easy to implement since it's all based on the existing Widgets infra. Xcode essentials This session is great. Xcode has a ton of tools and shortcuts that we're not aware of, and many of them are extremely useful if you can remember that they exist! Demystify explicitly built modules Apart from talking about the new Swift 6 feature of the same name, this session goes into great detail about how imports work in Swift/Obj-C and how to debug them. I learned a lot from this one. Demystify SwiftUI containers I am not super interested in SwiftUI improvements, but the new custom container feature is a great addition. I believe this is something that will be used a lot, so it's worth it to check this session that shows how it works and what you can do with it. This session also shares many interesting details about how subviews work in SwiftUI. Consume noncopyable types in Swift Most people will probably never use this feature, but it's one of those things that are really cool in practice and worth a look. You might also want to check this out because generics involving the new ~Copyable type are really complicated, so watching this session will help you be less confused if you end up bumping into it. Run, Break, Inspect: Explore effective debugging in LLDB Every year has a session on LLDB, and this year's one is especially good. It's hard to summarize this one because they show a ton of different things, so just go there and watch it! I was surprised to find out that you can open crash logs in Xcode (maybe it was always a thing?) and that you can create \"manual\" breakpoints by calling raise(SIGSTOP). Explore Swift performance This was not as actionable as I thought it would be, but I still found it to be interesting because it contains \"official\" evidence about how structs/protocols can be bad for performance / app size if you misuse them, which is something I've covered in a recent talk and that a lot of people wanted to know more about. Analyze heap memory This session not only shows interesting examples of how to use the memory debugger and instrument, but also shares a lot of interesting pieces of info about the difference between weak and unowned that I believe weren't documented before, including how to debug their performance! It also now serves as an \"official\" source for the autoreleasepool trick I wrote an article about a long time ago, which is pretty neat.",
    "author": "Bruno Rocha",
    "published": "Mon, 17 Jun 2024 11:20:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "bbe68e65-3402-438b-addb-113ede8c996e",
    "title": "Using @_silgen_name to forward declare functions in Swift and improve build times",
    "link": "https://swiftrocks.com/using-silgenname-to-call-private-swift-code",
    "description": "Disclaimer: The trick I'm going to show here is quite powerful, but like every other underscored attribute in Swift, this is something you should avoid messing with unless you know exactly what you're doing. There are lots of pitfalls attached to these attributes, and the behavior of underscored attributes can change at any time and even stop existing entirely without warning. Don't go around sprinkling this in your projects if you don't fully understand the consequences of doing so! Swift is regarded for its type safety, meaning the compiler (usually) doesn't allow you to reference or do things that might potentially not exist / be invalid; the complete opposite of languages like Obj-C where the compiler allows you to do pretty much whatever you want in exchange for compile-time safety. But here's an obscure fact about Swift: The language does support ObjC-like Selectors / forward declarations, it's just that we're not supposed to use it. If you know how a function is going to be named in the compiled binary, you can use the @_silgen_name attribute to craft a direct reference to that function, allowing a module to reference and call it regardless of whether or not it actually has \"visibility\" of it: @_silgen_name(\"somePrivateFunctionSomewhereThatICantSee\") func refToThatFuncIReallyWantToCall() func foo() { refToThatFuncIReallyWantToCall() // Just called something I wasn't suposed to be able to! } This is used extensively by the Swift standard library to create something akin to the old-school forward declarations in Obj-C / C, allowing it to call functions that live deeper in the Swift Runtime even though it shouldn't be able to. As denoted by the underscore, this is not an official feature of Swift, but rather an internal detail of the compiler that is not meant to be used outside of this specific internal case. Nonetheless, you can use it in your regular Swift apps, so if you know what you're doing and is aware of the consequences / implications, you can do some pretty neat stuff with it. @_silgen_name and symbol mangling Since Swift has namespacing features, the names you give to your Swift functions are not actually what they will be called in the compiled binary. To prevent naming collisions, Swift injects a bunch of context-specific information into a function's symbol that allows it to differentiate it from other functions in the app that might have the same name, in a process referred to as symbol mangling: // Module name: MyLib func myFunc() { print(\"foo\") } swiftc -emit-library -module-name MyLib test.swift nm libMyLib.dylib # MyLib.myFunc()'s \"real\" name is: $s5MyLib6myFuncyyF What @_silgen_name does under the hood is override a function's mangled symbol with something of your choosing, giving us the ability to reference functions in ways that Swift generally wouldn't allow us to (which I'll show further below). The attribute can be used in two ways: to override the symbol of a declaration and to override the symbol of a reference to a declaration. When added to a declaration, as in, a function with a body, the attribute overrides that function's mangled name with whatever it is that you passed to the attribute: @_silgen_name(\"myCustomMangledName\") func myFunc() { print(\"foo\") } swiftc -emit-library -module-name MyLib test.swift nm libMyLib.dylib # MyLib.myFunc()'s name now is: myCustomMangledName This is interesting, but what we truly care about here is what happens when you add it to a function that doesn't have a body. This would usually be invalid Swift code, but because we've added @_silgen_name to it, the compiler will treat it as valid code and assume that this function is somehow being declared somewhere else under the name we passed to the attribute, effectively allowing us to build forward declarations in pure Swift: @_silgen_name(\"$s5MyLib6myFuncyyF\") func referenceToMyFunc() func foo() { // Successfully compiles and calls MyLib.myFunc(), even though // this module doesn't actually import the MyLib module // that defines myFunc() referenceToMyFunc() } (This only works if the \"target\" is a free function, so for things like a class's static functions you'll need to first define a function that wraps them.) Now, it should be noted that knowing a Swift function's mangled name in advance ($s5MyLib6myFuncyyF, in the above example) is not straight-forward as the compiler doesn't expose an easy way of predicting what these values will be, but we can fix this by using @_silgen_name on the declaration itself in order to modify it to something that we know and is under our control, like in the previous example where we replaced it with \"myCustomMangledName\". Note that you only need to worry about this when referencing Swift functions; For Obj-C / C, a function's \"mangled name\" will be the function's actual name as those languages have no namespacing features. @_silgen_name(\"myCustomMangledName\") func referenceToFooMyFunc() It's critical to note that this is extremely unsafe by Swift compiler standards as it sidesteps any and every type safety check that would normally apply here. The compiler will not run any validations here; it will instead completely trust that you know exactly what you're doing, that somehow these functions will exist in runtime even though this doesn't seem to be the case during compilation, that any custom names you're using are unique and not causing any potential conflicts with other parts of the codebase, and that whatever parameters you're passing to the forward-declared functions are correct and managed properly memory-wise (if your target is a C function, you need to do manual memory management with Unmanaged). If everything is done correctly, you just got yourself a nice forward-declared function, but if not, you'll experience undefined behavior. You do get a compile-time linker error though if the functions don't exist at all, which is pretty handy as I've noticed that in addition to all of the above concerns, the compiler also may sometimes accidentally tag these functions as \"unused\" depending on how you declare them, causing them to be stripped out of the compiled binary when they should not. I am sure that there are way more things that can go wrong here that I'm not aware of. Cool, but why? Lack of safety aside, there are two situations where I find this attribute useful outside the Swift standard library. The first one is being able to do C interop without having to define annoying headers and imports, similar to how the Swift standard library has been using it. It seems that a lot of people have been doing this, but I'll not cover this here because it's not the use case that led me to use this attribute. I'll just point out that this is something you also need to be very careful about, particularly because @_silgen_name functions use the Swift calling convention, which is incompatible with C (thanks Ole Begemann for pointing that out!). Trading safety for better build times The second one however, which is what I have been using this for, is that when applied strategically, you can use this attribute to greatly improve your app's incremental build times. Let's assume that we're developers of a large modularized Swift app that has some sort of type safe dependency injection mechanism to pass values around. For this mechanism to work, we might end up with a \"central\" registry of dependencies that imports every module and configures every possible dependency these modules might request: import MyDepAImplModule import MyDepBImplModule import MyDepCImplModule ... func setupRegistry() { myRegistry.register(MyDepA(), forType: MyDepAProtocol.self) myRegistry.register(MyDepB( depA: myRegistry.depA, ), forType: MyDepBProtocol.self) myRegistry.register(MyDepC( depA: myRegistry.depA, depB: myRegistry.depB, ), forType: MyDepCProtocol.self) } Something like this allows us to have a nice and safe system where features are unable to declare dependencies that don't exist, but it will come at the cost of increased incremental build times. Importing all modules like this will cause this module to be constantly invalidated, and the bigger your project gets, the worse this problem will get. In my personal experience, projects with a setup like this and with several hundred modules can easily end up with a massive 10~60 seconds delay to incremental builds, depending on the number of modules and how slow your machine is. However, by using forward-declared @_silgen_name references to a function that wraps the initializers instead of referencing these initializers directly, we can achieve the same injection behavior without having to import any of the modules that define said initializers! @_silgen_name(\"myDepAInitializer\") func makeMyDepA() @_silgen_name(\"myDepBInitializer\") func makeMyDepB(_ depA: MyDepAProtocol) @_silgen_name(\"myDepCInitializer\") func makeMyDepC(_ depA: MyDepAProtocol, _ depB: MyDepBProtocol) This allows projects like this to completely eliminate these build time bottlenecks, but it comes at the price of losing all type safety around this code. This might sound like a bad trade-off since type safety is the reason why a developer would want to have a dependency injection setup like this in the first place, but if you have other ways of validating those types and dependencies (such as a CLI that scans your app and automatically generates / validates this registry), you can abstract the dangerous bits away from your developers and effectively enjoy all the build time improvements without having to worry about any negatives other than having to be extra careful when making changes to this part of the code. Conclusion Forward-declaring Swift functions allow you to do all sorts of crazy things, but remember, this is not an official feature of the language. As mentioned in the beginning, my recommendation is that you should avoid messing with internal compiler features unless you're familiar with how Swift works under the hood and know exactly what you're doing. But putting this aside, one thing that I tend to reflect on when learning about features like this is how the danger involved in using them is not so much about the features themselves, but rather that their behavior might change without warning. Although I understand the Core team's vision of making Swift a safe and predictable language, I think there is a real demand for having poweruser-ish / \"I know this is dangerous, I don't care\" features like this officially supported in Swift, and it would be amazing if @_silgen_name could be recognized as one such feature. I like what you can achieve with it, and I would love to be able to use it without fear that it might change or stop existing in the future.",
    "author": "Bruno Rocha",
    "published": "Thu, 14 Mar 2024 13:00:00 GMT+1",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "4bee26ca-626e-463a-aabe-c30cf3801efb",
    "title": "Software engineering book recommendations",
    "link": "https://swiftrocks.com/software-engineering-book-recommendations",
    "description": "The following is a list of software engineering books I've read that I felt had a strong and lasting positive impact on my career. It's not a list of everything I enjoyed (that would be impossible to list down), but rather a special list of resources that taught/helped me so much that I still find myself thinking about them years later. They are my top recommendations for other software engineers. Some are about iOS development specifically, but most relate to general software engineering. If you strive to be a world-class developer, these books and resources will help you get there. (I'm constantly learning new things, so expect this list to expand. I also have been struggling with bad memory as of late, so I predict that I'll also be updating this list to include things that I failed to recall when first writing it. I'll post a message whenever I update it!) Write Great Code: Understanding The Machine (Randall Hyde) - Probably my favorite software engineering book. This book teaches you how modern computers work in a high-level way that is easy to understand and not overly technical. It's not going to teach you new fancy APIs, but it will give you the ability to “understand” code; an ability that has proved to be useful almost daily in my career. Operating Systems: Three Easy Pieces (Remzi Arpaci-Dusseau, Andrea Arpaci-Dusseau) - This is similar to Understanding The Machine, but is more technical and focused on operating systems specifically. Amazing resource to learn about core OS fundamentals such as memory, threads / concurrency, file systems, and CPU virtualization. It's also free. *OS Internals Trilogy (Jonathan Levin) - This trilogy about how Apple platforms work internally is an absolute goldmine for us who develop for said platforms, but it's not for everyone. They will teach you everything you could possibly want to know about these platforms, but they're massive and go into extreme detail on things that you're never going to interact with, making this series a very painful read for beginners and those looking for quick / practical knowledge. But if you're reasonably experienced and is interested in things like linkers and kernels, then these books are a godsend. The only problem with these books is that Amazon only delivers them if you live in the US, so getting a copy can be challenging. Game Engine Black Book: DOOM (Fabien Sanglard) - Fantastic deep-dive on not only the source code, but also the hardware, tooling, and team dynamics that allowed the masterpiece known as DOOM to be conceived. iOS developers will find this book extra interesting because DOOM was developed on NeXT workstations; many of the tools were written in Objective-C, so the book has a lot of interesting information about the language and frameworks like Foundation that is still relevant to this day. Cracking the Coding Interview (Gayle Laakmann McDowell) - Even if you don’t care about the interviewing bits (I’m not even sure if companies like Apple still run LeetCode puzzles), this book is still a legendary resource for getting started with computer science theory. If you’re not sure why you’d want to do that, check out my article about it. The Staff Engineer's Path (Tanya Reilly) - Perfect book for senior engineers looking to get to the next level. This book demystifies the concept of a Staff Engineer and provides a gigantic amount of great advice on how to get there and how to do a good job once you’re there. Effective Objective-C 2.0 (Matt Galloway) - Even though we don’t directly write apps in Obj-C anymore, we still have to do so indirectly when using older frameworks like UIKit. This book does a great job of explaining how Obj-C works, which is something you’ll wish you knew when dealing with issues that either originate or pass through Obj-C. Clean Code (Robert C. Martin) - This book gets a lot of flack in the community because some people treat it as some sort of bible that must be followed religiously, but it is nonetheless a great resource for learning how to write code that is easy to read and maintain by humans. Just don’t be like those folks. Other Resources The following are not “books” in the traditional sense, but are nonetheless great software engineering resources that I think should be present here. System Design Primer - A collection of resources for learning how to design scalable backends. Great resource for learning how giant products like Twitter work. For mobile developers, this knowledge can help you make sure the client-side bits are designed properly. Nand2Tetris - A free online course that teaches you how to build a modern computer and make it run Tetris, from scratch. Another amazing resource for learning how computers work. Prateek Gianchandani’s articles about iOS security, and DVIA - This giant series of 50 articles teaches you how to hack iOS apps and is how I learned everything I know about iOS security. It’s quite old so I’m not sure how much of it still applies, but is an interesting read regardless. Prateek also has a project called Damn Vulnerable iOS App (DVIA) that is basically a playground where you can try out everything he mentions in his articles, but unfortunately it seems that the website that explained it doesn’t exist anymore. I was able to find it in the Internet Archive, so hopefully that still allows you to try it. Learn Git Branching - A page that teaches you to use git in the CLI by presenting it as a browser game. This is how I learned how to use git and is a resource that I greatly recommend even if you prefer using GUI apps for your git needs. MIT OpenCourseWare - MIT has a lot of free content on YouTube, and the ones related to software engineering are amazing. Here’s a link to my favorite one, which is a class about HTTPS/SSL/modern cryptography.",
    "author": "Bruno Rocha",
    "published": "Sun, 3 Mar 2024 13:00:00 GMT+1",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "3a79706d-84ca-4f1e-9537-d3ce2f6cb47e",
    "title": "What the hell are passkeys? (Runway)",
    "link": "https://www.runway.team/blog/an-introduction-to-passkeys",
    "description": "Passkeys are an alternative to passwords that allow you to sign in to any website or app that supports this technology without needing to define/remember a password. Over the last couple of years, the tech world has been witnessing many companies updating their products to add support to this new technology, including tech giants like Apple, who introduced several APIs and device features related to passkeys in iOS 16, and Google, who has been pushing passkeys hard since announcing passkeys support for Chrome and Gmail back in 2022. When I first saw Apple and Google’s announcements, I wasn't sure what I was looking at. The fact that the tech industry has been trying to move away from old-school passwords wasn't news to me, but I asked myself: didn't we already solve this problem when products started allowing users to register a \"secondary\" authentication requirement, such as receiving an SMS containing a PIN code? I then decided to look deeper into this topic, and was so pleasantly surprised by what I found that I thought it would be cool to share it with you. In this article, we'll take a look at what passkeys are, why companies like Apple and Google are adding support for them, how they work under the hood, and whether or not you should convert your own accounts to use them and build support for them in your mobile apps!",
    "author": "Bruno Rocha",
    "published": "Thu, 22 Feb 2024 13:00:00 GMT+1",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "83c72313-2eeb-4000-9dd4-02d695bef5ab",
    "title": "There is no right or wrong in software engineering",
    "link": "https://swiftrocks.com/there-is-no-right-or-wrong-in-software-engineering",
    "description": "Have you ever seen \"preachings\" like these in the wild west of Twitter, Medium, and LinkedIn? \"If you're not using X in 2023 you're an idiot!\" \"XYZ architecture is the only way to go!\" \"Doing X in Swift? Stop immediately!\" Humans' obsession with dividing things into groups is not unknown to psychology. The ability to quickly classify information is a core contributor to humanity's evolution and is something we start doing as soon as we're born. But we need to be careful with the fact that sometimes this classification \"feature\" goes wrong. Instead of categorizing something as \"this or that\", we sometimes go for something more in terms of \"us vs them\", which not only leads to a lot of unnecessary conflict, but is also bad for our lives in general. As far as I understand, the exact reason why humans do this is not fully understood. You might have heard of the \"tribalism\" theory which defines that humans are hardcoded to divide themselves in this \"us vs them\" fashion; this is mentioned a lot in pop culture, but from my understanding, this theory is heavily critized by experts and should not be considered true. But explanations aside, we know that this happens and is something everyone needs to understand and overcome at one point. When it comes to software engineering, the reality is most things cannot be cleanly divided into \"right or wrong\" boxes like that. Yes, some things are concrete and indisputable. If an OS-level API states that you should never call it outside of the main thread, then that's what you should follow. But most things are the opposite of that. When we talk about general problems and best practices, it's extremely rare for them to have a clear right or wrong way to go. Instead, they depend on what you're trying to achieve, and everyone is trying to achieve something different. There is no right or wrong in these situations, only different approaches. To add another layer to the problem, a lot of stuff is also largely subjective! Many of our daily choices boil down to personal preference, making it even more senseless to attempt to categorize such things into clean \"right\" or \"wrong\" boxes. The industry even has a saying for this: there are no solutions, only trade-offs. One's ability to understand this concept is the greatest indicator of seniority in my personal opinion. It's so common for intermediate-level engineers to fail to understand the subjectivity of software engineering that I find that you can accurately gauge someone's experience level by simply observing how well they grasp this concept. Those who don't understand it overengineer things and tend to get bogged down on details that are either subjective or outright pointless, while those who do understand it keep things simple and display a much better ability to prioritize important work and ignore less important details. In this article, I'd like to shine a light on some of the topics that iOS developers tend to be divided on as a way to help developers who still haven't cleared that hurdle understand that these topics are not as straightforward as we might tend to think. Overcoming this barrier is part of the process of becoming a more experienced software engineer, and is something almost everyone goes through in their careers, so it's not something to be anxious about. I also had a period where I thought I had all the answers to the coding universe! Tool Wars (e.g SwiftUI vs UIKit, Hybrid vs Native, CLI vs GUI, programming languages) When a new framework, tool, or programming language is released, it's not uncommon for developers to divide themselves into groups and argue about which one of them is \"better\", claiming that theirs is the only option and everything else is a mistake. The problem with this line of thought is that it assumes that one tool was created to completely replace another, and while sometimes this may very well be the case, in most cases it's not. As a developer, it's important to understand that different tools solve different problems. While there may be some overlap between them, they were likely designed with different use cases in mind. The biggest example here as of writing is the SwiftUI vs UIKit discussion. Despite being largely different from each other, social media is full of content about how one is \"better\" than the other. Yes, SwiftUI and UIKit are both frameworks for building UI, but they solve different problems. As covered in my earlier \"Thoughts on SwiftUI vs UIKit\" article, SwiftUI is amazing for simple projects but quickly becomes inferior to UIKit as the project grows in complexity. Neither of these frameworks is better than the other, they are simply different tools for different jobs. Discussions about Hybrid vs Native development also fall into this category. Hybrid development has a bad reputation because it generally results in apps of very low quality, but it saves companies a lot of time and money. Most companies reject this trade-off as they determine that quality is more important than saving a few bucks, but that doesn't mean that nobody should do so. If you're starting a company but don't have a lot of time or money, hybrid development can be a good way to bootstrap your business. It's not fair to compare these two in a \"better/worse\" fashion because they don't target the same set of problems. I find that one example of how things can be subjective in this context is how a developer uses git. There is a lot of discussion about whether you should use it via the CLI or as a dedicated GUI app, but there isn't much to be discussed here because this is something that entirely boils down to your personal preference. There are pros and cons to each approach, and you will know which one is the right one for you because you will feel that it better suits your set of preferences. Neither approach is universally right or wrong. Best Practices Wars (e.g architecture, general advice) Architecture is usually the first thing that an iOS developer fights about. Every year we get a new architecture with some fancy acronym, that architecture gets a bunch of loyal followers, and then the groups start arguing about which architecture has the coolest name and solves the biggest number of problems. The first thing you learn is that MVC is terrible and should be avoided at all costs. One unfortunate consequence of these fights around architecture is that it leads developers to pick architectures that solve problems that they don't really have (and not solving the problems they actually have), which are guaranteed to make a project harder to maintain in the long run. It's important to understand that there is no architecture that solves all problems. Just like in the tools example, different architectures are meant to solve different problems, and the right architecture for your project is the one that solves your particular set of problems. MVC for example, which developers love to hate for some reason, can be a great choice for simple projects! Architecture is not something that you pick once and stick with forever, but rather something that you continuously adjust as your project evolves and you start having to deal with different sets of problems. I have been told that my talk about how Spotify's iOS app is architected is great at demonstrating this, so I'm mentioning it here in case you want to check it out! The same applies to general programming advice that you find on the web. We have a lot of content creators in our community, and I find that most of them present their content in the following format: \"here's a thing, here's how it works, and here's what you can do with it\". This is what I also strive to do when writing content for this blog, and I like this format because it doesn't claim that something is the best way of achieving something, it's simply showing you one possible way and leaving for you to decide whether or not that's the right solution for you. But every once in a while, the algorithm recommends me content that is more in line with \"here's a thing, and here's why you should always use it and abandon everything else\". It's not about learning something new, it's about saying that you're wrong about something. There's usually a spike of this type of content in the WWDC week when new APIs are released. The problem with content like this is that most best practices are highly subjective. Even if the content is referring to a very specific problem, it's hardly the case that the problem in question has one single viable solution. As we've already mentioned a couple of times in this article, personal preference plays a major role in this type of stuff. Something very helpful to you might be terrible for someone else, so they cannot be classified in a universal \"right or wrong\" fashion. Programming Fundamentals War (e.g LeetCode) Another common discussion point for iOS developers is whether or not you should learn computer science theory as part of your career. This is usually brought up whenever a company that run old-school programming puzzles (LeetCode) as part of their interview processes is mentioned. This topic however is complex enough that it deserves its own article, and convieniently enough, such an article already exists! You can find more information about this in my \"How necessary are the programming fundamentals?\" article, but as a quick summary, this is a very complicated topic that has no objective right or wrong. Conclusion I hope this was able to help you see that some things in software engineering are more complicated than they might seem at first glance. Realizing this is an important step in a software engineer's career, and while this article will certainly not stop those wars from popping up every once in a while, I do believe that as a community we can help others get through this phase faster.",
    "author": "Bruno Rocha",
    "published": "Thu, 28 Dec 2023 15:00:00 GMT+1",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "40c46f67-7383-46ca-96e3-4414f5b12fd0",
    "title": "What even is code signing in iOS? (Runway)",
    "link": "https://www.runway.team/blog/what-even-is-code-signing-in-ios",
    "description": "If you have been developing for iOS for a while, chances are you had one of two issues involving code signing, the process where Apple/Xcode forces you to \"sign\" your app with a developer certificate in order to be able to archive it and submit it to the App Store. I find code signing to be interesting not just because of what it does, but because it's one of those things that iOS developers kinda just take for granted. We know it's there and we know how to deal with it, but we don't really stop to think why it's there or what it's doing under the hood. We just follow Apple's convoluted steps on how to make it work and move on with our lives. In practice, code signing is an incredibly important safety feature of Apple's ecosystems. Knowing what it is and why it exists makes debugging issues related to it considerably easier, so I've written this article to help you understand it.",
    "author": "Bruno Rocha",
    "published": "Fri, 15 Dec 2023 13:00:00 GMT+1",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "c0cd3485-2562-41af-905f-cbb6fae35e76",
    "title": "How I'm using ChatGPT for software engineering",
    "link": "https://swiftrocks.com/how-im-using-chatgpt-for-software-engineering",
    "description": "ChatGPT has become an important part of my daily software engineering work, so I thought it would be interesting to share what exactly I've been using it for in case you're wondering how to use it to improve your productivity. Use-case 1: I don't know what I'm looking for I find that Google tends to provide good results if you know exactly what you're looking for. But if you don't really know what is it that you're trying to find out, you'll have a hard time with it. For example, the other day I was trying to find what the _start function in iOS (the first function called when your app is launched) is, where it's defined, and what it does. But if I go now and search for \"_start function iOS\" on Google, I will not find a straight answer to this question. Google does return somewhat good results (the second search result contains some interesting information about it if you scroll down far enough), but it cannot give me a direct response because I asked the wrong question. I know today that what I should've done is ask it about details of how C programs are linked, but I didn't know this back then, so I couldn't have done that. ChatGPT does not have this problem. If you don't know what you're looking for, you can explain your situation to ChatGPT and it will point you in the right direction: In this example, you can see that ChatGPT immediately pointed out that I asked the wrong question before attempting to explain it. Although ChatGPT's answers aren't 100% accurate, I find them to be accurate enough to allow me to use Google to find the rest of the information. Use-case 2: My question is too specific for Google Even if you know exactly what you're looking for, you may have difficulty using Google if your question is too specific. For example, you cannot search Google on \"how to implement X thing in Swift in my app that is using XYZ frameworks in X iOS version with dependency injection bridging an Obj-C type after the user logged in on my TODO list app using Apple Sign-in from Italy during a rainy day in October\". For cases like this, usually what you need to do is break your problem into multiple, more generic queries, open many tabs that each help you with a specific part of the problem, and then use all of that combined knowledge to come up with the actual answer to your question. ChatGPT excels at this. You can be as specific as you want and you'll get a relevant answer. Most coding questions fall into this category, although for these specifically I have mostly been using Copilot rather than ChatGPT itself. In this case, I could've probably found the answer I was looking for in Google by making a bunch of generic searches about C++ global constructors and good practices, opening a bunch of tabs, and summarizing everything I found. But by asking ChatGPT, I saved several hours of my time instead. Use-case 3: I want FAST answers It has been getting harder and harder to get fast answers to your questions with Google. Today, it's very unlikely that the answer to a question will lie at the top of a page you've opened. As SEO optimization became more and more important for survival on the web, the amount of stuff you have to endure before getting to the actual content has increased significantly. There will be a lengthy introduction, a pause for sponsors, ten paragraphs about how the question reminds the author about a personal story of how their dog bodyslammed their grandma on Christmas, a call to action for the author's newsletter, some backstory on the question, and only then you'll get to the actual content. I find that there are many cases where this fluff is relevant and worth reading. But there are also many cases when I'm in a hurry and would much rather just get a straight answer to my question. This is also something that I find ChatGPT to be quite good at. It generally doesn't try to educate you on things you didn't ask, it just straight up answers your question. By asking follow-up questions regarding one or more things it mentioned in its answer, I can get all of the information I need to learn something new considerably faster than if I had used Google instead. Even though I still need to use Google to double-check if ChatGPT didn't hallucinate particular pieces of information, this ability to quickly gather relevant information saves me an absurd amount of time.",
    "author": "Bruno Rocha",
    "published": "Mon, 11 Dec 2023 13:00:00 GMT+1",
    "image": "https://i.imgur.com/KuTBOgc.png",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "98bacdf2-2721-4c4d-9386-259a81351802",
    "title": "How async/await works internally in Swift",
    "link": "https://swiftrocks.com/how-async-await-works-internally-in-swift",
    "description": "async/await in Swift was introduced with iOS 15, and I would guess that at this point you probably already know how to use it. But have you ever wondered how async/await works internally? Or maybe why it looks and behaves the way it does, or even why was it even introduced in the first place? In typical SwiftRocks fashion, we're going deep into the Swift compiler to answer these and other questions about how async/await works internally in Swift. This is not a tutorial on how to use async/await; we're going to take a deep dive into the feature's history and implementation so that we can understand how it works, why it works, what you can achieve with it, and most importantly, what are the gotchas that you must be aware of when working with it. Disclaimer: I never worked at Apple and have nothing to do with the development of async/await. This is a result of my own research and reverse-engineering, so expect some of the information presented here to not be 100% accurate. Swift, and the goal of memory safety Swift's async/await brought to the language a brand new way of working with asynchronous code. But before trying to understand how it works, we must take a step back to understand why Swift introduced it in the first place. The concept of undefined behavior in programming languages is something that surely haunts anyone who ever needed to work with the so-called “precursor programming languages” like C++ or Obj-C. Programming languages historically provided you with 100% freedom. There were no real guardrails in place to prevent you from making horrible mistakes; you could do anything you wanted, and the compilers would always assume that you knew what you were doing. On one hand, this behavior on behalf of the languages made them extremely powerful, but on the other hand, it essentially made any piece of software written with them a minefield. Consider the following C code where we attempt to read an array's index that doesn't exist: // arr only has two elements void readArray(int arr[]) { int i = arr[20]; printf(\"%i\", i); } We know that in Swift this will trigger an exception, but we’re not talking about Swift yet, we’re talking about a precursor language that had complete trust in the developer. What will happen here? Will this crash? Will it work? The short answer is that we don't know. Sometimes you'll get 0, sometimes you'll get a random number, and sometimes you'll get a crash. It completely depends on the contents of that specific memory address will be at that specific point in time, so in other words, the behavior of that assignment is undefined. But again, this was intentional. The language assumed that you knew what you were doing and allowed you to proceed with it, even though that turned out to almost always be a huge mistake. Apple was one of the companies at the time that recognised the need for a safer, modern alternative to these languages. While no amount of compiler features can prevent you from introducing logic errors, they believed programming languages should be able to prevent undefined behavior, and this vision eventually led to the birth of Swift: a language that prioritized memory safety. One of the main focuses of Swift is making undefined behavior impossible, and today this is achieved via a combination of compiler features (like explicit initialization, type-safety, and optional types) and runtime features (like throwing an exception when an array is accessed at an index that doesn’t exist. It’s still a crash, but it’s not undefined behavior anymore because now we know what’s supposed to happen!). You could argue that this should come with the cost of making Swift an inferior language in terms of power and potential, but one interesting aspect of Swift is that it still allows you to tap into that raw power that came with the precursor languages when necessary. These are usually referred to within the language as “unsafe” operations, and you know when you’re dealing with one because they are literally prefixed with the “unsafe” keyword. let ptr: UnsafeMutablePointer = ... The problem of concurrency in Swift But despite being designed for memory safety, Swift was never truly 100% memory safe because concurrency was still a large source of undefined behavior in the language. The primary reason why this was the case is because Grand Central Dispatch (GCD), Apple’s main concurrency solution for iOS apps, was not a feature of the Swift compiler itself, but rather a C library (libdispatch) that was shipped into iOS as part of Foundation. Just as expected of a C library, GCD gave you a lot of freedom in regard to concurrency work, making it challenging for Swift to prevent common concurrency issues like data races, race conditions, deadlocks, priority inversions, and thread explosion. (If you’re not familiar with one or more of the terms above, here’s a quick glossary:) Data Race: Two threads accessing shared data at the same time, leading to unpredictable results Race Condition: Failing at synchronize the execution of two or more threads, leading to events happening in the wrong order Deadlock: Two threads waiting on each other, meaning neither is able to proceed Priority inversion: Low-priority task holding a resource needed by a high-priority task, causing delays in execution Thread explosion: Excessive number of threads in the program, leading to resource exhaustion and decreased system performance let semaphore = DispatchSemaphore(value: 0) highPrioQueue.async { semaphore.wait() // … } lowPrioQueue.async { semaphore.signal() // … } The above is a classic example of a priority inversion in iOS. Although you as a developer know that the above semaphore will cause one queue to wait on another, GCD would not necessarily agree and fail to properly escalate the lower priority queue’s priority. To be clear, GCD can adjust itself in certain situations, but patterns like the above example were not covered by it. Because the compiler was unable to assist you with such problems, concurrency (and thread safety specifically) historically was one of the hardest things to get right in iOS development, and Apple was well aware of it. In 2017, Chris Lattner, one of the driving forces behind Swift, laid out his vision for making concurrency safe in his Swift Concurrency Manifesto, and in 2020, a roadmap materialized which envisioned new key features to Swift, which included: The async/await pattern Task API and the concept of Structured Concurrency Actors \u0026 Actor Isolation But although what the roadmap proposed was new to the language, it was not new to tech itself. The async/await pattern, which was first introduced in 2007 as a feature of F#, has been an industry standard since 2012 (when C# made it mainstream) due to its ability to allow asynchronous code to be written as traditional synchronous ones, making concurrency-related code easier to read. For example, before you might write: func loadWebResource(_ path: String, completionBlock: (result: Resource) -\u003e Void) { ... } func decodeImage(_ r1: Resource, _ r2: Resource, completionBlock: (result: Image) -\u003e Void) func dewarpAndCleanupImage(_ i : Image, completionBlock: (result: Image) -\u003e Void) func processImageData1(completionBlock: (result: Image) -\u003e Void) { loadWebResource(\"dataprofile.txt\") { dataResource in loadWebResource(\"imagedata.dat\") { imageResource in decodeImage(dataResource, imageResource) { imageTmp in dewarpAndCleanupImage(imageTmp) { imageResult in completionBlock(imageResult) } } } } } whereas now you can write: func loadWebResource(_ path: String) async -\u003e Resource func decodeImage(_ r1: Resource, _ r2: Resource) async -\u003e Image func dewarpAndCleanupImage(_ i : Image) async -\u003e Image func processImageData1() async -\u003e Image { let dataResource = await loadWebResource(\"dataprofile.txt\") let imageResource = await loadWebResource(\"imagedata.dat\") let imageTmp = await decodeImage(dataResource, imageResource) let imageResult = await dewarpAndCleanupImage(imageTmp) return imageResult } Introducing this pattern in Swift specifically would not only improve the experience of working with completion handlers but also technically allow the compiler to detect and prevent common concurrency mistakes. It’s easy to see why Chris Lattner made the pattern the central piece of his manifesto, in which he declared, in his own words: “I suggest that we do the obvious thing and support this in Swift.” Over the years these features were gradually integrated into Swift, culminating in the Swift 5.5 release and the “official” release of async/await in Swift. Async/await under the hood Now that we understand why async/await became a part of Swift, we’re ready to take a look at how it works under the hood! But first, I have to set some expectations with you. Because what we refer to as “async/await” is actually multiple different compiler features working in unison, and because each of these features is complicated enough to warrant their own separate article(s), there’s no way I can possibly cover every single detail of how it works in just one article. I would lose my sanity within the first section if I did that. So instead of doing that, I’ve decided that a good plan would be to cover only what I believe to be async/await’s “core” functionality and to leave the remaining bits for future articles. But although we don’t go into details about those other bits here, I still made sure to mention some of them in the appropriate sections for you to know where they come into play. For simplicity, we’re also not going to cover compatibility modes and Obj-C bridging here. With that said, let’s get started! When I reverse-engineer something to learn more about it, I always start from the bottom and move my way up. So when I decided that I wanted to understand how async/await works, my first question was: “Who is managing the program’s background threads?” The Cooperative Thread Pool One of the most important aspects of how async/await works in Swift, and one that we must cover before anything else, is that while async/await technically uses GCD under the hood, it does not use the DispatchQueues that we are familiar with. Instead, what powers async/await is a completely new feature of libdispatch called The Cooperative Thread Pool. Unlike traditional DispatchQueues, which creates and terminates threads dynamically as it deems necessary, the Cooperative Thread Pool manages a fixed number of threads that are constantly helping each other with their tasks. The “fixed number”, which in this case is equal to the system’s number of CPU cores, is an intentional move that aims to prevent thread explosion and improve system performance in general, something which DispatchQueues were notoriously not very good at. In other words, the cooperative thread pool is similar to traditional GCD from an interface perspective (it’s a service that receives a job and arranges some thread to run it), but is more efficient and designed to better suit the Swift runtime’s special needs. We can see exactly how the Cooperative Thread Pool works by exploring the open-source libdispatch repo, but I would like to reserve that for a future article. In general, I find that this WWDC session from 2021 provides great information about how the pool works internally. Gotcha: Starving threads in the pool It must be noted that the fact that the pool holds a fixed number of threads has a significant impact on how asynchronous code is supposed to be written in the language. There is now an expectation that threads should always make forward progress, which means you need to be really careful with when and how you do expensive operations in async/await in order to avoid starving the system's threads. Swift's async/await has many gotchas like this, and we'll uncover some of them as we proceed. Let’s move up the abstraction layers. How does the compiler “speak” to the pool? Keep the jobs flowing: The Executors In Swift, you don't interact with the Cooperative Thread Pool directly. This is hidden by several layers of abstractions, and at the lowest of these layers, we can find the executors. Executors, just like the pool itself, are services that accept jobs and arrange for some thread to run them. The core difference between them is that while the pool is just, well, the pool, executors come in many shapes and forms. They all end up forwarding jobs to the pool, but the way they do so may change depending on which type of executor you’re using. As of writing, executors can be either concurrent (jobs can run in parallel) or serial (one at a time), and the compiler provides built-in implementations for both of them. The Built-in Concurrent Executor The built-in concurrent executor is referred to internally as the Global Concurrent Executor. The implementation of this executor in the Swift compiler is for the most part nothing more than an abstraction on top of the cooperative thread pool that we mentioned in the previous section. It starts by creating an instance of the new thread pool, which we can see is done by calling the good ol’ GCD API with a special new flag: constexpr size_t dispatchQueueCooperativeFlag = 4; queue = dispatch_get_global_queue((dispatch_qos_class_t)priority, dispatchQueueCooperativeFlag); Then, when the executor is asked to run a job, it forwards it to the pool via a special dispatch_async_swift_job API: JobPriority priority = job-\u003egetPriority(); auto queue = getGlobalQueue(priority); dispatch_async_swift_job(queue, job, (dispatch_qos_class_t)priority, DISPATCH_QUEUE_GLOBAL_EXECUTOR); I would like to leave the details of libdispatch and dispatch_async_swift_job for another time, but as mentioned in the previous section, this is supposed to be a special/more efficient variant of the regular dispatch_async API that iOS developers are familiar with that better suits the Swift runtime’s special needs. Another aspect of this executor worth mentioning is that it's \"global\", meaning there is only one instance of it for the entire program. The reasoning for this is similar to why a serial DispatchQueue would deep-down forward its jobs to the global ones: while from a systems perspective, it makes sense for the responsibilities to appear to be divided, from a performance perspective it would be a nightmare for each component to have their own dedicated threads. It's sensible then to have a single, global executor that will ultimately schedule most of the work in the system, and have everyone else forward their jobs to it. The Global Concurrent Executor is Swift’s default executor in general. If your async code is not explicitly requesting that it should go through a specific executor (we will see some examples of that as we continue to explore the abstractions), this is the executor that will handle it. (Swift uses a different global executor in platforms that don’t support libdispatch, but I will not go into details of that as the primary focus of this article is iOS development.) The Built-in Serial Executor Unlike the concurrent executor, the purpose of the serial executor is to make sure jobs are executed one by one and in the order in which they were submitted. The built-in serial executor is referred internally to as the \"Default Actor\" (spoiler alert!), and it is in its essence an abstraction of the concurrent executor that keeps track of a linked list of jobs: class DefaultActorImpl : public HeapObject { public: void initialize(); void destroy(); void enqueue(Job *job); bool tryAssumeThread(RunningJobInfo runner); void giveUpThread(RunningJobInfo runner); } struct alignas(2 * sizeof(void*)) State { JobRef FirstJob; struct Flags Flags; }; enum class Status { Idle, Scheduled, Running, }; swift::atomic CurrentState; When a job is enqueued, instead of immediately forwarding it to the concurrent executor, it stores it in the linked list and waits until there’s no one in front of it before truly passing it forward. static void setNextJobInQueue(Job *job, JobRef next) { *reinterpret_cast(job-\u003eSchedulerPrivate) = next; } The full extent of what happens when a job is enqueued to the serial executor is one of those things that I said I have to skip in order to maintain my sanity because this executor is responsible for managing a lot of stuff relating to other async/await features (Actor.cpp alone has 2077 lines of code). But one interesting thing worth mentioning is how it attempts to prevent priority inversions. When a high-priority job is enqueued to a list that previously only had low-priority jobs, the executor escalates the priority of all jobs that came before it. if (priority \u003e oldState.getMaxPriority()) { newState = newState.withEscalatedPriority(priority); } As the name implies, the Default Actor serial executor comes into play when writing async code via the Actors feature. We still have a couple of things to understand before we can look into actors though, so let’s move on for now. Custom Executors Besides the two built-in executors, it's also possible to build your own custom executor in Swift by creating a type that inherits from the Executor protocol: public protocol Executor: AnyObject, Sendable { func enqueue(_ job: consuming Job) } For serial executors specifically, Swift even provides a more specific SerialExecutor protocol: public protocol SerialExecutor: Executor { ... } The ability to do so was added in Swift 5.9 alongside the ability to pass custom executors to certain APIs, but there's little reason why you would do such a thing. This was added as a support tool for developers who use Swift in other platforms and is not something an iOS developer would have to deal with. With that said, we do have one very important feature to cover in this article that relies on this ability, but we need to answer a couple more questions before we can look into what that feature is. Let's keep moving up the abstraction layers. We now know that Swift's built-in executors are the ones passing jobs to the cooperative thread pool, but where do these jobs come from? Get me those jobs: The async/await pattern The next piece of the puzzle lies in the async/await pattern itself. As you might know by now, the async/await pattern consists of two new keywords (async and await) that allow you to define an asynchronous function and wait for an asynchronous function to return, respectively: func example() async { let fooResult = await foo() let barResult = await bar() doSomething(fooResult, barResult) } func foo() async -\u003e FooResult { // Some async code } func bar() async -\u003e BarResult { // Some async code } One of the main purposes of the async/await pattern is to allow you to write asynchronous code as if it were straight-line, synchronous code, and this might give you the impression that deep down this feature is just a compiler pass that is dividing a function into multiple components. This definition is important in order to understand how the machine is operating, but in reality, things are a lot more sophisticated than that! Instead of thinking of an asynchronous function as just a syntax sugar for declaring a bunch of closures, think of it as an ordinary function that has the special power to give up its thread and wait for something to happen. When that thing is complete, the function bootstraps itself back up and resumes its execution. This means that apart from how they wait for things to happen, asynchronous functions and synchronous ones are (sort of) the same thing in Swift! The only difference is that while the synchronous function gets to take full advantage of the thread and its stack, the asynchronous ones have the extra power of giving up that stack and maintaining their own, separate storage. Although our main interest here is exploring memory safety, one interesting thing to mention is how this definition is important from a code architecture perspective; because asynchronous functions in Swift are effectively the same as synchronous ones, this means you can use them for things that you previously couldn’t do with completion handler closures, such as marking a function as throws: func foo() async throws { // … throw MyError.failed // Can’t do this without async/await! } But enough theory. How does it work? Execution Contexts We can start understanding how the pattern is implemented by looking at what the Swift compiler does when it processes a line of code marked as await. By compiling the above example code with the -emit-sil flag, we can that the example’s Swift Intermediate Language output looks something like this (greatly simplified for readability): // example() sil hidden @$s4test7exampleyyYaF : $@convention(thin) @async () -\u003e () { bb0: hop_to_executor foo foo() hop_to_executor example hop_to_executor bar bar() hop_to_executor example return void } // end sil function '$s4test7exampleyyYaF' The SIL of an async function looks exactly the same as the one from a regular synchronous function would, with the difference that Swift calls something called hop_to_executor before and after an await function is supposed to be called. According to the compiler’s documentation, the purpose of this symbol is to make sure that the code is running in the right executor. Hmmmm. One important memory safety feature of Swift’s async/await is what it refers to as execution contexts. As we briefly mentioned when we talking about executors, whenever something runs asynchronously in Swift through async/await, it has to go through a specific executor; the majority of code will go through the default global concurrent one, but certain APIs may use different ones. The reason why certain APIs may have specific executor requirements is to prevent data races. We’re not ready to explore this topic yet though, so for now just keep in mind that this is why different executors exist. What hop_to_executor does in practice is check the current execution context. If the executor that the function is currently running on is the same as the function that we want to await expects, the code will run synchronously. But if it’s not, a suspension point is created; the function requests the necessary code to run in the correct context and gives up its thread while it waits for the result. This “request” is the job that we were looking for, and the same will happen when the job finishes in order to return to the original context and run the rest of the code. func example() async { (original executor) let fooResult = await foo() // POTENTIAL job 1 (go to foo’s executor) // POTENTIAL job 2 (back to original context) let barResult = await bar() // POTENTIAL job 3 (go to bar’s executor) // POTENTIAL job 4 (back to original context) doSomething(fooResult, barResult) } The word potential here is very important: As just mentioned, a suspension point is only created if we’re in the wrong context; If no context hopping is needed, the code will run synchronously. This is something that DispatchQueues notoriously could not do, and is a very welcome ability that we will mention again later in this article. In fact, since await only marks a potential suspension point, this has the interesting side-effect of allowing async protocol requirements to be fulfilled by regular, synchronous ones: protocol MyProto { func asyncFunction() async } struct MyType: MyProto { func asyncFunction() { // This is not an async function, but the Swift is fine with it // because `async` and `await` doesn’t mean that the // function is _actually_ async, only that it _may_ be. } } This is also why you can call synchronous functions from asynchronous ones but not vice-versa; asynchronous functions know how to synchronously wait for something, but synchronous ones don’t know how to create suspension points. Suspension points are a major win for memory safety in Swift: because they result in the thread being released (as opposed to how a lock, semaphore, or DispatchQueue.sync would hold onto it until the result arrived), this means that deadlocks cannot happen in async/await! As long as you’re not mixing async/await code with other thread-safety mechanisms (which Apple says you shouldn’t in their 2021 session), your code will always have a thread in which it can run. Gotcha: Reentrancy It must be noted though that this behavior has an important gotcha in terms of code architecture. Because suspension points may give up their thread while waiting for a result, it can (and will) happen that the thread that originated the request may start running other jobs while it waits for the result to arrive! In fact, unless you’re using Main Actors (which we will explore in detail later on), there’s no guarantee that the thread that will process the result will even be the same one that originated the request! func example() async { doSomething() // Running in thread A await somethingElse() doSomethingAgain() // This COULD also be running in thread A, but it’s probably not! // Also, thread A has likely moved on to do other things while we were waiting for somethingElse()! } This means that in order to implement thread-safe objects in async/await, you must structure your code in a way so that it’s never assuming or carrying state across suspension points because any assumptions that you made about the program’s state prior to the suspension point might not be true anymore after the suspension point. This behavior of async/await is called reentrancy and is something we’ll explain in more detail further below when we start speaking about race conditions specifically. In short, reentrancy in Swift’s async/await is intentional, and is something you must keep in mind at all times when working with async/await code in Swift. I would like to show you how exactly these suspension points and the re-bootstrapping work in the compiler’s code, but as of writing, I was not able to properly understand it. I’d still like to do that though, so I’ll update this article once I figure that out. We still have one important puzzle piece to investigate though. If synchronous functions are not allowed to call asynchronous ones because they don’t have the power to create a suspension point, what is the “entry point” for an asynchronous function? Tasks and Structured Concurrency In Swift’s async/await, the way you call an asynchronous function the first time is by creating a Task object: Task { await foo() } Because the closure of a task object is itself marked as async, you can use it to call other asynchronous functions. This is the “entry point” we were looking for. Swift’s Task struct has a much bigger role than simply allowing you to call async code; they form a fundamental part of what Swift calls \"Structured Concurrency,\" where asynchronous code is structured as a hierarchy of \"tasks.\" This structuring allows parent tasks to manage their child tasks, sharing information like status, context, priority, and local values, as well as enabling the creation of child \"task groups\" that comprise multiple tasks that run in parallel. Structured Concurrency forms the backbone of Swift's async/await architecture, but is a topic large enough to warrant its own article. For the purposes of this article, we’re going to focus only on the core functionality of tasks. Let’s get back to the original question. How is Task managing to create an async closure out of nowhere? The key to understanding how Task bootstraps an async closure lies in its initializer. When a Task is created, the closure it captures is managed not by the Task struct itself, but by a function that lives deep within the Swift runtime: extension Task where Failure == Never { public init( priority: TaskPriority? = nil, @_inheritActorContext @_implicitSelfCapture operation: __owned @Sendable @escaping () async -\u003e Success ) { let flags = taskCreateFlags( priority: priority, isChildTask: false, copyTaskLocals: true, inheritContext: true, enqueueJob: true, addPendingGroupTaskUnconditionally: false, isDiscardingTask: false) let (task, _) = Builtin.createAsyncTask(flags, operation) self._task = task } } The call to Builtin.createAsyncTask ultimately results in a call to swift_task_create in the Swift runtime, which creates a task based on a couple of flags that configure how the task should behave. The compiler conveniently takes that of that configuration automatically for you, and once the task is set up, it is immediately directed to the appropriate executor for execution. static AsyncTaskAndContext swift_task_create_commonImpl(…) { // The actual function is a lot more complicated than this. // This is just a pseudo-coded simplification for learning purposes. task.executor = task.parent.executor ?? globalConcurrentExecutor; task.checkIfItsChildTask(flags); task.checkIfItsTaskGroup(flags); task.inheritPriorityFromParentIfNeeded(flags); task.asJob.submitToExecutor(); } Structured Concurrency is the reason why the compiler knows all of this information. Similarly to how the serial executor tracks a linked list of jobs, the Swift runtime tracks a graph of all tasks running concurrently in the program. This tracking, in combination with a secondary map connecting asynchronous functions to the tasks that invoked them, allows Swift to infer all the necessary information to bootstrap a task, including the ability to make adjustments such as escalating the priority of a child task based on their parent's priority. Interestingly enough, Swift actually provides you with APIs that allow you to access these graphs in your Swift code, although they make it very clear that should only be used in special cases. One example of this is withUnsafeCurrentTask, which allows functions to determine if they were called as part of a task. func synchronous() { withUnsafeCurrentTask { maybeUnsafeCurrentTask in if let unsafeCurrentTask = maybeUnsafeCurrentTask { print(\"Seems I was invoked as part of a Task!\") } else { print(\"Not part of a task.\") } } } Gotcha: Accidental Task Inheritance Because child tasks by default inherit the properties of their parent, and because the runtime handles that automatically for you, you might end up in situations where a task is inheriting things you didn't mean to: func example() async { Task { // This is NOT a parentless task, as much as it looks like one! } } In the example above, what looks like a \"bland\" task is actually a child task of whatever job led to example() being called! This means this task will inherit that parent's properties, which may include things you don't want this particular task to inherit, such as the executor. One example case where this can be a problem is when dealing with code that interacts with the MainActor, which we will explore in detail further below. In order to avoid this, you must use alternate task initializers like Task.detached which define \"unstructured\" tasks with no parent, but it must be noted that they also have their own gotchas, so make sure to read their API documentation before using them. We’ve now covered all the core mechanics of async/await, but we still have one question left to answer. We’ve seen how async/await is able to prevent thread explosion, priority inversions, and deadlocks, but what about data races? We know that the concept of “execution contexts” is what’s supposed to prevent it, but we haven’t seen that in practice yet. We also haven’t even begun to talk about the infamous race conditions that plague every iOS app. What does Swift’s async/await do to protect you from those? Protecting shared mutable state: Actors We have left Actors to last because they don’t relate to the core functionality of async/await, but when it comes to memory safety, they are just as important as the other features we’ve covered. In Swift, an “actor” is a special type of class that is marked with the actor keyword: actor MyExample { var fooInt = 0 } Actors are mostly the same as classes, but they contain a special power: any mutable state managed by an actor can only be modified by the actor itself: func foo() { let example = MyExample() example.fooInt = 1 // Error: Actor-isolated `fooInt` // cannot be mutated from a non-isolated context } In the example above, in other to mutate fooInt, we must somehow abstract that action so that it happens within the bounds of the actor: actor MyExample { var fooInt = 0 func mutateFooInt() { fooInt = 1 } } This looks like it would make no difference, but this is where the actors’ second special power comes into play: only the actor is allowed to synchronously reference its methods and properties; everyone else must do it asynchronously: func foo() { let example = MyExample() Task { await example.mutateFooInt() // The actor itself is allowed to call mutateFooInt() synchronously, // but the example() function is not. } } This is a concept called actor isolation, and when combined with the concept of execution contexts we’ve seen above, Swift’s async/await is able to prevent you from introducing potential data races in your program. To make it better, those checks happen in compile time! To be more specific, when you await on an actor, your code will be forwarded not to the default global concurrent executor, but a serial one that was created specifically for that actor instance. This has the effect of not allowing you to call two actor functions at the same time (one will end before the other one starts), and when combined with the fact that the compiler doesn’t allow you to “leak” an actor’s mutable state, you have essentially a situation where it’s not possible for your actor’s state to be mutated by two threads at the same time. But how does this work internally? When it comes to their implementations, actors are surprisingly straightforward. In Swift, declaring an actor is just a syntax sugar for declaring a class that inherits from the Actor protocol: public protocol Actor: AnyObject, Sendable { nonisolated var unownedExecutor: UnownedSerialExecutor { get } } The only property of the protocol is unownedExecutor, which is a pointer to the serial executor that is supposed to manage the jobs related to that actor. The purpose of the UnownedSerialExecutor type is to wrap a type conforming to the SerialExecutor protocol we saw previously as an unowned reference, which the documentation describes as necessary for optimization reasons. public struct UnownedSerialExecutor: Sendable { internal var executor: Builtin.Executor public init(ordinary executor: __shared E) { self.executor = Builtin.buildOrdinarySerialExecutorRef(executor) } } When you declare an actor via the syntax sugar, Swift automatically generates this conformance for you: // What you write: actor MyActor {} // What is compiled: final class MyActor: Actor { nonisolated var unownedExecutor: UnownedSerialExecutor { return Builtin.buildDefaultActorExecutorRef(self) } init() { _defaultActorInitialize(self) } deinit { _defaultActorDestroy(self) } } We already know what this generated code is doing; it initializes the Default Actor serial executor that we’ve covered at the beginning. Since actors are deeply ingrained into Swift, the compiler knows that whenever someone references it, the eventual call to hop_to_executor should point to the actor’s unownedExecutor property and not the global one. Gotcha: Actor Reentrancy (Actors and thread-safety) While actors naturally protect you from data races, it’s critical to remember that they cannot protect you from logic mistakes like race conditions / straight-up incorrect code. We have already covered why this is the case when we talked about suspension points and reentrancy, but I’d like to reiterate this because this is extra important when working with actors specifically. When a suspension point is created, the actor will allow other jobs in the serial queue to run. This means that when the result for the original job finally arrives, it’s possible that the actor’s state may have changed in a way where whatever assumptions you made before the suspension point are no longer true! In actors specifically, this is referred to as Actor Reentrancy, and is once again something you must keep in mind at all times when attempting to write thread-safe code with async/await. As suggested in the section about reentrancy in general, in order for your actors to be thread-safe, you must structure your code so that no state is assumed or carried over across suspension points. Sendable and nonisolated Like in the case of deadlocks, an actor’s solution for data races has important consequences in terms of code architecture. If you cannot “leak” an actor’s mutable state, how does anything ever happen? Swift’s async/await provides two features to address this. The first one is the Sendable protocol, which marks types that can safely leave an actor: public protocol Sendable { } This protocol has no actual code; it’s simply a marker used by the compiler to determine which types are allowed to leave the actors that created them. This doesn’t mean that you can mark anything as Sendable through; Swift really doesn’t want you to introduce data races into your programs, so the compiler has very strict requirements of what can inherit it: Actors (does so by default) Value types final classes that have no mutable properties Functions and closures (by marking them with @Sendable) Gotcha: Sendable contagion While Sendable solves this problem, it must be noted that this protocol has been the target of criticism in the Swift community due how the necessity of tagging “safe” types combined with how the compiler has the tendency to behave like an overprotective mother (it will complain that a type must be Sendable even when in situations where no data race could possibly happen) can quickly cause Sendable to “plague” your program’s entire architecture. There have been pitches on potential improvements in this area, but I believe as of writing no formal proposals have been submitted yet. Aside from Sendable, the nonisolated keyword is also intended to assist with the problem of having to “leak” an actor’s state. As the name implies, this allows you to mark functions and properties that are allowed to ignore the actor’s isolation mechanism: actor BankAccount { nonisolated let accountNumber: Int } When referenced, the compiler will pretend that the type didn’t originate from an actor and skip any and all protection mechanisms that would normally apply. However, similarly to Sendable, not everything can be marked as nonisolated. Only types that are Sendable can be marked as such. Actors and the Main Thread At this point, we’ve covered everything we needed regarding async/await in Swift, but there’s still one thing we still need to cover regarding iOS development specifically. Where’s the main thread in all of this? We’ve talked a lot about the new thread pool and how executors interact with them, but iOS developers will know that UI work always needs to run in the main thread. How can you do that if the cooperative thread pool has no concept of a “main” thread? In Swift, this is where the ability to build custom executors that we’ve seen at the beginning of the article comes into play. Swift’s standard library ships a type called MainActor, which as the name implies, is a special type of actor that synchronizes all of its jobs to the main thread: @globalActor public final actor MainActor: GlobalActor { public static let shared = MainActor() public nonisolated var unownedExecutor: UnownedSerialExecutor { return UnownedSerialExecutor(Builtin.buildMainActorExecutorRef()) } public nonisolated func enqueue(_ job: UnownedJob) { _enqueueOnMain(job) } } The MainActor achieves this by overriding the default unownedExecutor with a custom Builtin.buildMainActorExecutorRef() one. Since we’re telling Swift that we don’t want to use the default serial executor for this actor, this will deep down cause the Swift runtime to call the MainActor’s custom-defined enqueue method instead. In the case of MainActor, the call to _enqueueOnMain will cause the job to be forwarded to the global concurrent executor as usual, but this time via a special function that causes the job to be submitted to GCD’s main queue instead of the cooperative thread pool. // The function where “regular” async/await jobs ends up in static void swift_task_enqueueGlobalImpl(Job *job) { auto queue = getCooperativeThreadPool(); dispatchEnqueue(queue, job); } // The function where MainActor jobs ends up in static void swift_task_enqueueMainExecutorImpl(Job *job) { auto mainQueue = dispatch_get_main_queue(); dispatchEnqueue(mainQueue, job); } In other words, code executed by the main actor is essentially the same thing as calling DispatchQueue.main.async, although not literally the same due to two facts that we have already covered: the fact that the Swift runtime uses a “special” version of DispatchQueue.async to submit its jobs, and the fact the dispatch will technically not happen if we’re already inside the main thread (MainActor’s “execution context”). // What you write: Task { await myMainActorMethod() } // What (sort of) actually happens: // (Actual behavior explained above) Task { DispatchQueue.main.async { myMainActorMethod() } } Global Actors The final thing I’d like to show you is how actors like the MainActor are used in practice. We know that regular actors are created and passed around as normal objects, but doing so with the MainActor would not scale well. Even though the MainActor is available as a singleton, there’s a lot of stuff that needs to run in the main thread in iOS, so if we were treating it like a regular object, we would end up with a lot of code looking like this: extension MainActor { func myMainActorMethod() {} } func example() { Task { await MainActor.shared.myMainActorMethod() } } ///////////// or: func example() { Task { await MainActor.run { myMainActorMethod() } } } func myMainActorMethod() {} Although both solutions “work”, Swift saw potential for improvement by creating the concept of “global actors”, which describe actors that can not only be referenced but also expanded from anywhere in the program. Instead of forcing everyone to reference singletons everywhere, Swift's Global Actors feature allows you to easily indicate that a certain piece of code should be executed within the bounds of a specific global actor by marking it with a special annotation: @MainActor func myMainActorMethod() {} This is essentially the same thing as the examples shown above, but with much less code. Instead of having to reference the MainActor’s singleton, we can now directly reference this method and be sure that it will be executed within the MainActor’s context. func example() { await myMainActorMethod() // This method is annotated as @MainActor, // so it will run in the MainActor’s context. } In order to be able to do this, the actor in question must be marked with the @globalActor keyword, and is something that you can do for your own actors if you find that this behavior would be useful for them. As one would expect, the MainActor is itself a global actor. Marking an actor as @globalActor is deep down a syntax sugar for declaring an actor that inherits from the GlobalActor protocol, which is essentially a variation of the regular Actor protocol that additionally defines a singleton that Swift can refer to when it finds one of those special annotations across the program. public protocol GlobalActor { associatedtype ActorType: Actor static var shared: ActorType { get } } Then, during compilation time, when Swift encounters one of those annotations, it follows up by emitting the underlying hop_to_executor call with a reference to that actor’s singleton. func example() { // SIL: hop_to_executor(MainActor.shared) await myMainActorMethod() // SIL: hop_to_executor(DefaultExecutor) } Conclusion: Swift's async/await makes concurrency simpler, but not necessarily easier In general, I like async/await. I think this is a nice addition to Swift, and it makes working with concurrency a lot more interesting. But you must not get this wrong. Although Swift prevents you from making memory-related mistakes, it does NOT prevent you from making logic mistakes / writing straight-up incorrect code, and the way the feature works today makes it very easy for you to introduce such mistakes. We've covered some of the pattern's gotchas in this article, but there are many more of them pertaining to features we didn't get to explore here. Matt Massicotte's \"The Bleeding Edge of Swift Concurrency\" talk from Swift TO 2023 goes into more detail about gotchas in async/await, and I believe is a talk that anyone working with async/await in Swift should watch. For more information on thread safety in Swift specifically, check out my article about it.",
    "author": "Bruno Rocha",
    "published": "Thu, 28 Sep 2023 14:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "1a15c837-521e-420a-b679-46e762b6a49d",
    "title": "Faster iOS performance debugging with ETTrace",
    "link": "https://swiftrocks.com/faster-performance-debugging-with-ettrace",
    "description": "Performance problems can be rare in this era of blazing-fast iPhones, but chances are you're still having to deal with them every once in a while. Classic performance issues such as scroll hitches are still very easy to introduce if you're not careful about them, and when it happens, you'll want to be properly equipped to get to the bottom of it. The \"standard\" way of debugging performance issues in iOS is to use Xcode's Time Profiler instrument, but I personally never had a good experience with it. While it contains all the information you need to understand a particular problem, that information is not exactly easy to make sense of. To make it worse, sometimes even getting the information to show up in the first place can be quite the challenge, as Instruments in iOS in general have been historically broken and plagued by bad UX. Thankfully, you don't have to go through any of that! Today much better performance debugging tools are available (and for free), and in this article, I'll show you one of them. Enter ETTrace ETTrace is an open-source performance measurement framework for iOS developed by the folks behind Emerge, and I can say that today this is my favorite tool for measuring and debugging performance problems in iOS. As mentioned in the beginning, while the Time Profiler does technically provide you with all the information that you need, actually understanding this information or even getting it to show up in the first place can be a big challenge, even if you know exactly what you're doing. For me, personally, there are three things that make the Time Profiler hard to use. The first one is that you need to compile a special Profile build for it to work, meaning you cannot run it ad-hoc on an existing build or device. The second is that the Time Profiler has a really annoying tendency to simply refuse to work every once in a while, mostly when it comes to symbolication. Finally, last but not least, when you do manage to get it to work, the way in which the data is presented to you is not very helpful when it comes to locating the source of a particular performance bottleneck. In other words, there are better ways to display this data. ETTrace, on the other hand, has none of these problems. It doesn't require a special build, it automatically handles symbolication for you, and it displays the data in a much more readable way. It's basically the Time Profiler on steroids, and I have found it to be in most cases a complete replacement for it. Example: Using ETTrace to find and fix a bottleneck For instructions on how to install ETTrace, check out the official repo. As of writing, ETTrace is installed by linking a dynamic framework into your app and installing a special ettrace CLI tool in your Mac. You can trace any build of your app that links against this framework, which is why you don't need to compile a special Profile build like you would when using Xcode and the Time Profiler. In practice you could even ship this framework alongside your App Store builds in order to be able to directly debug issues found in production, but I would personally not do that and keep it restricted to debug builds. To see how ETTrace can help us debug performance issues better than the standard Time Profiler, let's pretend that we have a view controller called ExploreCardViewController, and that we have noticed that tapping a specific collection view cell in this VC is causing the app to freeze for a while. To find out exactly why this is happening, we just need to run ETTrace. After following the usage steps as described on the repo, you'd be presented with something like this: This way of displaying information is called a Flame Graph, and I find it to be a very efficient way of locating performance bottlenecks in your app's code. Each \"entry\" that you see here is a single method call in your app, with the X axis dictating when it was called (and how long it took to run), and the Y axis dictating where/who called it. In the example above, the first 3 frames (start/main/UIApplicationMain) represent functions internal to iOS that are responsible for launching and keeping the app alive, while everything else below it is actual code from our example app. To find performance bottlenecks in a flame graph, all we need to do is look for the presence of a \"chunky\" stack trace and then go down the Y axis until we find which frame exactly is the source of the chunkiness. Consider how ExploreCardViewController is shown in the report. It's very large, which means that this method is taking a really long time to run. But what exactly is causing it? Is it the literal call to didSelectItemAt, or is it something else further down the stack trace? By going down the trace we can see that at its very bottom there's a very expensive call to usleep originating from ArticleViewController.viewDidLoad(), which is the reason why that entire stack trace is being reported as being expensive: Oops, seems like we forgot some debug code in our class! func viewDidLoad() { sleep(1) // TODO: remove this! } After deleting the call, the bottleneck was gone! You may find this to be a dumb example, but I find that debugging real performance issues doesn't stray too far from this. The difference is just that instead of a dumb call to sleep, you'd see some other expensive operation. Otherwise, the process to locate it and the different ways in which you could fix it are the same. Other useful ETTrace features The example above showed a bottleneck that originated from a single very expensive call, but that's not the only source of performance issues. Sometimes the bottleneck may originate not from one large call, but multiple small ones in rapid sequence. ETTrace's Invert and Cluster Libraries allow you to quickly debug issues like this by merging all those small calls together. For clarity, this is something that the Time Profiler can also do, but again, it's just that I personally find that ETTrace's flame graphs are much easier to understand than the Time Profiler's tree structure. Another feature I find myself using a lot is the comparison view. By uploading a second trace file, ETTrace will present you the difference between both traces, allowing you to quickly determine which methods became faster and which methods became slower. This can be good for getting some quick information about whether or something improves or causes a bottleneck, but note that this is not a very reliable way of determining how fast/slow exactly a particular method is. If you need very accurate information, then I recommend using Attabench. Alternatively, if your company happens to pay for Emerge's enterprise solutions, you can also use their performance analysis product, which is similar to ETTrace but with the difference that it can actually provide you with data that is statistically significant. Does it completely replace the Time Profiler? I have been using ETTrace for most of my performance debugging work, but there are still a couple of cases where you might need to use the Time Profiler. The first case that comes to my mind is when you need to debug something that you cannot reproduce, which is something that I've covered previously here at SwiftRocks. For cases like this you'll find Apple's performance trace profiles to be the best solution, which currently require you to use Xcode and the Time Profiler. Another case you might still need the Time Profiler for is when you're looking not just for performance data, but also other types of iOS-related information such as thread state, device temperature, battery level, os_logs, signposts, hangs, and so on. Nothing currently matches Xcode's Instruments when it comes to putting all this device information into one single place, so issues that require looking at multiple types of device information are still perfectly suited for it.",
    "author": "Bruno Rocha",
    "published": "Thu, 7 Sep 2023 14:00:00 GMT+2",
    "image": "https://i.imgur.com/83Xzhe7.png",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "e2d8d99a-8062-4d99-b222-63a75d263e15",
    "title": "Performance Trace Profiles in iOS: Debugging performance issues you can't reproduce",
    "link": "https://swiftrocks.com/debugging-ios-performance-issues-you-cant-reproduce-with-performance-trace-profiles",
    "description": "If you landed at this article then it's possible that you're dealing with one of the most annoying things you can face as a developer: having to investigate an issue reported by your users that nobody seems to be able to reproduce internally. The topic of investigating crashes you can't reproduce is something I've already talked about here at SwiftRocks in the \"How To Solve Any iOS Crash Ever\" article, but what I wanted to show you today refers to a different yet equally challenging category of issues: performance problems, like hangs/freezing UI, slow code, unnecessary threading/concurrency, CPU/memory exceptions, and so on. While some of the techniques mentioned in the crashes article can also be used to investigate performance-related problems, chances are you won't have to, because this category of issues has access to a debugging weapon so powerful that you don't even need to run the app yourself to find the exact source of the problem! Performance Trace Profiles Debugging Profiles are relatively unknown in the iOS community (possibly because the types of problems that require them are themselves quite rare to come across), but they are my current favorite way of debugging performance-related issues. The standard way of debugging performance problems is by hooking your device to Xcode's Instruments, but if you can't reproduce the issue yourself, then obviously you cannot do that. However, if you know anyone who can reproduce it (doesn't matter if it's a developer or a random user), you can still fully debug the problem by having them run a Performance Trace for you. Profiles are files you open in your iOS device to temporarily unlock features that the device wouldn't normally have access to, something you might've already experienced if you ever enrolled one of your devices to the beta OS program. What you might not know though is that there are many types of profiles out there that you can install, and some of them are oriented towards helping you debug issues in your apps! As the name implies, the Performance Trace profile gives your device performance-tracing capabilities. To be more specific, it allows the device that has it to run a system trace of everything that is currently running on the phone, generating a trace that you can later extract and open in Instruments. In other words, it's like if you were locally running a profile build of your app, except that it doesn't require the device to be plugged anywhere and works on any device and build of your product, even the App Store ones. Be careful though, because with this great power comes also great responsibility; the trace will capture everything that is happening on the user's phone, which includes a lot of personal/sensitive information about that particular device. If you're going to be asking strangers to do this process for you, make sure this is clear to them and that you're not violating any data protection laws from your country that may apply. Running a Performance Trace Follow these steps to enable performance tracing on your device: Open Apple's Profiles and Logs page. Find the Performance Trace entry in the list of profiles. Download the profile and install it on the device that can reproduce the issue. (You can, for example, use AirDrop to transfer the profile from a computer to the device). Restart the device if needed. Go to Settings \u003e Control Center \u003e Customize Controls, and then enable the Performance Trace control. To run a trace, follow these steps: Open Control Center and tap on the Performance Trace control to begin tracing. Open your app (if you haven't done it already), and reproduce the issue. Keep in mind that traces cannot be longer than 30 seconds. After reproducing the problem, either open Control Center and tap on the Performance Trace control again to stop tracing or wait for the 30 seconds time limit (after which the trace will automatically stop itself). Wait a while for your phone to process the trace. You will receive a notification when this is done containing the name of the generated file (usually trace_somethingsomething.tgz). Either tap the notification or go to Settings \u003e Privacy \u003e Analytics \u0026 Improvements \u003e Analytics Data Locate the trace in the list and send it to your Mac. Trace archives are usually a couple of hundred megabytes in size. (Optional) Find the profile in Settings \u003e VPN \u0026 Device Management and delete it. The profile will otherwise automatically delete itself after 7 days. From your Mac, uncompress the archive. The result will be an instruments report that you can open in Xcode. Analyzing the trace Once you open the trace you may find that Xcode will highlight the System Trace instrument for you, and that's exactly what you should open. Keep in mind that by default no symbols will be resolved since the trace was generated outside of Xcode, so you'll need access to the dSYMs for the build that was traced in hand in order to make sense of the report. Instruments should be able to automatically symbolicate the report if the dSYMs are in your machine, but if it doesn't do that (it almost never does for me), you can manually provide the path to the dSYMs at File -\u003e Symbols. If that also doesn't work, the Spotlight refreshing steps mentioned in this article should do the trick. I find that the best way to learn how to use this particular instrument is to watch Apple's WWDC session about it, but if you've watched it and still feel lost, the example below may help you. The System Trace instrument is basically the Time Profiler on steroids. While the latter (which I'm assuming you have prior experience with) allows you to analyze the CPU usage and memory footprint of an app, System Trace does that in addition to providing detailed information about the state of the different threads in the app, including what's causing them to not run code (if applicable). When facing performance issues, this additional threading information can usually point you to the exact source of the problem! Here's an example that shows how I usually approach performance issues. Consider this intentionally slow horrible piece of code: final class ViewController: UIViewController { let queue = DispatchQueue(label: \"slow-queue\") let waitSemaphore = DispatchSemaphore(value: 0) override func viewWillAppear(_ animated: Bool) { super.viewWillAppear(animated) queue.async { self.runVerySlowCode() self.waitSemaphore.signal() } waitSemaphore.wait() runVerySlowCode() } func runVerySlowCode() { var arr = Array(0...100_000) for i in (1.. for j in 0.. arr[j + 1] { arr.swapAt(j, j + 1) } } } } When displayed, this view controller will run some very expensive code in a background thread, block itself until that finishes (because why not?), and then proceed to run the same expensive code again because we really like it. This code, which results in the main thread hanging for several seconds, is obviously terrible, but pretend that somehow this slipped into production without your knowledge, your users are now complaining, and you had someone send you a performance trace. After opening the trace, you'll see something like this: The System Trace instrument tracks the state of all threads in the process, and here you can immediately see that something's wrong: the main thread is marked as Blocked by something for a really long time and then running non-stop for also a really long time. Each of these actions will result in the app hanging. Tips for debugging the blocked state What I really like about this instrument is that it's capable of telling you exactly why a thread is marked as blocked. If you change the bottom inspector to the Narrative mode and move the timeline to the beginning of the blocked section, the instrument will tell you that the main thread was blocked by a semaphore, which was later released by another thread: Many of the elements in this view are clickable and will provide more information when highlighted. In this case, by clicking the row that mentions the semaphore, you'll be able to see in the bottom right exactly which line triggered the event (which in this case is the semaphore in viewWillAppear). Another useful thing you can do is tap the name of the thread that eventually released it, which will take you to it in the timeline and reveal to you what exactly this thread was doing that caused the main thread to be blocked for so long (the next thing we'll look at). Tips for debugging the excessive work These traces will eventually lead you to a thread doing a lot of expensive work, and the process to debug those is no different than using the standard Time Profiler instrument; by highlighting the suspicious area and changing the bottom inspector to the Profile view, we can see what the app was doing at the time. I assume you already know how to use the Time Profiler so I'll skip explaining the many different ways in which you can read this data, but if you need a refresher, this WWDC session should cover what you need to know. We had two such cases (the work being done by the background thread that caused the main thread to be blocked and the work the main thread did on itself) in our example, and in any of them we can see that runVerySlowCode is the method to blame. What else can Performance Traces be used for? Performance Traces shine mostly in the very specific case we covered in the introduction: you are facing an issue that is connected to performance and for some reason you cannot reproduce it yourself. You could theoretically use it to gather data on more general logic/UI issues (assuming the data you're looking for would somehow materialize in the sampled stack traces), but for those cases, you'd probably find the steps defined in the article about crashes to be more effective. Despite being a rare situation to come by, these traces have saved by butt every time it happened and are now one of my favorite debugging techniques for this category of issues.",
    "author": "Bruno Rocha",
    "published": "Thu, 1 Jun 2023 13:30:00 GMT+2",
    "image": "https://i.imgur.com/NbmMGSM.png",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "7f6bd60d-907b-4eda-bbae-82609b7a3d4d",
    "title": "Thoughts on SwiftUI vs UIKit",
    "link": "https://swiftrocks.com/my-experience-with-swiftui",
    "description": "I had played with SwiftUI sporadically in the past, but it wasn't until now that I had built a complete App Store-ready app with it. When SwiftUI was first announced I was very concerned about certain quirks of the framework and how it was probably not suitable for professional iOS development, but with the framework evolving constantly over the past couple of years it became time to re-evaluate that statement. Through Burnout Buddy, I had the chance to develop a production app 100% with SwiftUI. Here are my thoughts on what works and what could be improved, and how I would fit SwiftUI and UIKit in my day-to-day work. Things that are great Previews / Hot Reloading I can't stress hard enough how awesome SwiftUI's previews are. The amount of time UIKit devs were wasting compiling and running code to make small iterative UI changes is unfathomable -- yes, there were LLDB tricks and tools like Reveal which could sort of let you make certain types of changes on the fly, but I don't know anyone who was actually able to flawlessly integrate these into their day-to-day work. The previews allow you to iterate on visual changes and sometimes even the app's logic itself extremely quickly, and its ability to bootstrap itself out of any arbitrary View pairs perfectly when building composable components. To be fair, the previews aren't perfect. I had a frequent bug where the preview refused to show up and was unable to do any form of debugging on the preview itself, and a lot of people reached out to say that the previews are painfully slow on their older Macbook models, but it generally works well and I'm very happy we finally have official hot-reloading support in iOS. I'm eager to see how it will be improved in the future. Development speed Another extremely notable SwiftUI benefit is how easy it is to build apps with it. You can quite literally build an app to start to finish in just a couple of minutes, something which would be unheard of in any professional-level UIKit app (meaning no Storyboards and similar features that are known for not being scalable). While Burnout Buddy took me a couple of weeks to build, the majority of that time was spent on the logic and architecture. The UI itself for the entire app was built in just a couple of minutes. It's important to mention that this is not always true. As we'll see down below there's an entire category of \"more complicated\" products where SwiftUI is actually extremely detrimental to development speed, but we should still appreciate that SwiftUI works amazingly well for the more straight-forward category of projects that the majority of developers deal with. It's also not too surprising that this is the case considering that they have been Apple's primary target audience for Xcode features since the dawn of iOS. It encourages great coding practices It's very easy to make a UIKit app that has everything shoved into one god object. You could theoretically do the same in SwiftUI, but you'd have a much harder doing so. The way views are setup and referenced between each other encourages you to break up your views into small independent pieces, which is an amazing habit to have when building apps of any size as it improves the quality of your project in multiple areas such as composability, scalability, testability and code readability. For developers who are not yet familiar with those concepts, SwiftUI is a great tool to learn and apply those practices. Things that are not so great Great for simple things, not so great for not-so-simple things It's generally easy to build state logic with UIKit. Because there are no constraints on what things should look like, you can build everything on the fly and achieve virtually anything you want at the cost of having to write a lot of annoying UI code. SwiftUI is the opposite on steroids. It's very, very easy to build UI with, and very, very hard to build any piece of real business logic that you wouldn't see in a simple Hello World tutorial. My first thought when SwiftUI was announced was that there's no way it works seamlessly for complex apps, and I imagine that anyone who ever had experience with React on the web front had the same thought. The reason for that is because data-drivenness, SwiftUI's main concept that some people already were experienced with due to React functioning roughly in the same way, doesn't scale very well. SwiftUI forces you to shape your model in a way so that the complete structure and state of all views are static and known well in advance, which while not an impossible task, can be insanely difficult for views that have lots of moving parts and conditions. The best example I can show of how data-drivenness can massively spike the complexity of an app is SwiftUI's ForEach API: ForEach(0..\u003c7) { i in MyObject(myStrings[i]) } If all you're doing is iterating a static list of elements, everything will work like in UIKit. You can build a loop that takes a fixed integer range and access the indexes without any additional trouble. Iterating the mutable state of your view is a bit trickier, but still doable. While in UIKit this doesn't incur any extra architectural cost on your behalf, SwiftUI forbids you from doing so unless the content conforms to Identifiable. This can be quite annoying given that almost nothing in Swift's Standard Library conforms to this protocol, but the requirement makes sense in the context of SwiftUI where the framework relies on the concept of model identity and uniqueness in order to determine when the UI should be re-drawn. ForEach(myStrings) { string in MyObject(string) } // Error: String does not conform to Identifiable // Solution: Replace \"myStrings\" with: struct MyModel: Identifiable { let id = ... // How this is implemented depends // on what the model represents in practice and how it should be updated let string: String } Try to do anything more complicated than that though and you'll face the wrath of data-drivenness. Consider the simple use-case of keeping track of the position of an item in a list while iterating it, something which is very common in iOS to implement features like alternating background colors in views: While this is trivial to pull off in UIKit, attempting to introduce dynamic behavior like this in SwiftUI can result in your view's entire architecture being body slammed! ForEach(contentList.enumerated()) { info in MyObject(info.element, info.offset) } // Error: Arbitrary sequences cannot be iterated in SwiftUI, only RandomAccessCollections ForEach(Array(strings.enumerated())) { info in MyObject(info.element, info.offset) } // Error: Tuples don't conform to Identifiable, the model must expose some form of unique id Because the concept of object identity is critical in SwiftUI, if the position of an item is relevant to the UI, we must architecture our view's state model around this fact and provide/predict it in advance alongside everything else that is relevant to the view: struct ListIndexable: Identifiable { let id = ... // How this is implemented depends // on what the model represents in practice and how it should be updated let index: Int let object: T } This means that trying to add new behavior to views can result in the entire architecture of that view needing to be refactored, which is a trade-off that developers creating complicated apps would want to avoid at all costs. But before we continue, we must mention something very important in this area. Astute readers that have used SwiftUI before might look at this example and point out that you don't really need to do any of these, because there's a variation of ForEach that allows you to manually provide the Hashable value that SwiftUI will use deep-down to enforce uniqueness. This allows you to skip the Identifiable requirement and solve the .enumerated() problem with zero extra code, and if you look up this problem in StackOverflow you can even find plug-and-play extensions for this exact use-case: private func ForEachEnumerated(_ arr: Binding\u003c[T]\u003e, @ViewBuilder content: @escaping (Int, Binding) -\u003e U) -\u003e some View { let arr = Array(arr.enumerated()) return ForEach(arr, id: \\.offset, content: content) } You need to be very careful when using snippets like this in SwiftUI, because trying to out-smart the framework is a very easy way to end up with cryptic and undebuggable rendering problems. In this case the problem with the snippet is that using the index itself as the definition of uniqueness has serious implications for how SwiftUI will draw updates to that particular list, which might not be what you're expecting for your particular use-case. This is the same reason why I've refrained from implementing let id in the examples above. When working with frameworks like SwiftUI and React, you should always avoid shortcuts and take the extra time to think how to architect your view's state in a static and predictable way. I've found that this forces you to put quite a lot of pre-thinking into what you want a certain view to do, because if you forget something down the line it can be very hard to recover from it. This won't be a big deal for simple products, but if you're developing a very complicated app, you might not be willing to make that trade-off. Rendering issues are impossible to debug Almost nothing you write in SwiftUI is \"real\" Swift code. With Property Wrappers and Function Builders at its core, almost everything you write will result in the compiler generating additional wiring code for you. The fact that SwiftUI relies heavily on generated code is not a problem by itself, because as long you know what that wiring code is, you can generally follow along and debug issues just as if that wasn't the case. When the wiring code leads to closed source code however, the story is different. Here's an example of how this can negatively affect your work. In Burnout Buddy, it's possible to shortcut your way into configuring time schedules for an entire week by setting just one of them and asking the tool to copy the values into the remaining days. In code, I attempted to achieve this by creating a custom Binding object that pastes Monday's schedule into the rest of the week: let weekdayBinding = Binding\u003c[TimeRange]\u003e { schedule.days[0] } set: { range, transaction in schedule.days[0] = range schedule.days[1] = range schedule.days[2] = range schedule.days[3] = range schedule.days[4] = range } The code above however did not work. To be very specific, it does quite literally nothing. While I could breakpoint the set closure and see that it was being called correctly with the right values, the view was not being updated accordingly. To make things worse, I was also seeing other completely unrelated things being updated as a result of this code that made no sense whatsoever! The reason it didn't work? I don't know, because Binding is closed source. It took me multiple hours to even realize that this particular piece of code was the source of the problem as there was no feedback from SwiftUI itself that there was something wrong, meaning the only thing I could do was re-write parts of the app aimlessly and hope for the best. I eventually managed to solve the problem by slightly re-shaping how the closure is executed. Instead of setting each array entry one by one, I chose to copy the entire structure, change it accordingly, and then apply it back to the original bound state object. Because I couldn't actually debug the problem, I can only speculate that the bug has something to do with State not being able to process more than one update in a single stack frame. let weekdayBinding = Binding\u003c[TimeRange]\u003e { schedule.days[0] } set: { range, transaction in var days = schedule.days days[0] = range days[1] = range days[2] = range days[3] = range days[4] = range schedule.days = days } This is not a problem with SwiftUI itself, but with Apple deciding to hide critical logic (in this case, what causes a view to re-render) from you. In contrast, you'd not see problems like this in UIKit because the important bits are always handled on your side of the field (e.g when to call addSubview, layoutIfNeeded, etc). The good news is that SwiftUI is already able to warn you when you make a rendering mistake in certain cases, so Apple is definitely aware of this problem and is working on ways to make it less disruptive. Should I learn SwiftUI? Ever since the dawn of software engineering, there have been people engaging in \"platform wars\". They'll evangelize for the \"best architecture\", \"best framework\", \"best OS\", \"best design pattern\", and claim that theirs is the only option and everything else is a mistake. This is no different for iOS development, and \"SwiftUI vs UIKit\" is, sure enough, the new \"conflict' of choice. As a software engineer, it's critical for you to realize that there is no such thing as \"best X\". Everything is a tool, and whether or not you should use them depends only on what you're trying to achieve. Even Objective-C still has its uses! (If you want more examples of that, I've written a full article about how there is no right or wrong in tech.) SwiftUI and UIKit do not cancel each other; they are both good and bad in different ways, and whether or not you should pick SwiftUI specifically will depend on the details of what you're trying to build. After building a SwiftUI app myself, these are the guidelines that I would personally follow for my next projects: Simple UI, Simple Logic: Would make it 100% with SwiftUI. Simple UI, Not-so-simple Logic: I'd start with a 100% SwiftUI app, but if it got too tough I'd fall back to using SwiftUI for the UI itself and UIKit for the more complex pieces of logic (via UIViewRepresentable). Not-so-simple UI, Simple Logic: Will greatly depend on what's being built. I find that more complex pieces of UI can be a lot harder to pull off with SwiftUI when compared to UIKit. Not-so-simple UI, Not-so-simple Logic: Probably best to go 100% UIKit to avoid issues in the long run. What should beginners learn first? I think the situation right now is very similar to when Swift was released. I started with iOS exactly when that happened, and the way I learned it was by first learning as much I could about Objective-C and then using that knowledge to seamlessly move over to Swift and making that my main tool of choice. As the years went by and everyone migrated to Swift, it became less and less necessary to strictly learn Objective-C to the point where nowadays you can defer learning it until you reach a point where you want/need to expand your knowledge of the platform itself. This is how I think beginners should approach SwiftUI vs UIKit. While people will always want to learn the shiny new thing, you should always learn both whilst focusing on what the majority of people use right now to maximize your hiring opportunities. I expect that as the years go the majority of UIKit projects will move over to SwiftUI, but it's still too early to tell if UIKit will completely go away given SwiftUI's current issues when used in more complicated projects.",
    "author": "Bruno Rocha",
    "published": "Thu, 20 Oct 2022 14:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "8242b2b5-c8d5-4b1b-92fd-8a6fd6deb76c",
    "title": "What's the 'any' keyword? Understanding Type Erasure in Swift",
    "link": "https://swiftrocks.com/whats-any-understanding-type-erasure-in-swift",
    "description": "The concept of Type Erasure is not new to Swift, but was radically improved in Swift 5.7 with the addition of the any prefix keyword (not to be confused with the capitalized Any type!) and improvements to the already existing some Opaque Type keyword. In this article, we'll explain the concept of type erasure, how it used to be done, what's different in Swift 5.7, and how these changes work under the hood. What the hell is Type Erasure? In programming languages with support for generic types, Type Erasure is the process of abstracting constrained generic types inside an unconstrained non-generic type that can be passed around freely. If you don't know why that's necessary, consider the following example where we define a protocol and a few conforming types: protocol Shape {} struct Circle: Shape {} struct Triangle: Shape {} Because the Shape protocol is unconstrained, Swift allows us to quite easily refer to Circle and Triangle as their bare conformances: var userShapes = [Shape]() func userDidCreate(shape: Shape) userShapes.append(shape) } userDidCreate(shape: Circle()) userDidCreate(shape: Triangle()) // No problems will arise here. It's fine to refer to these types as just \"Shape\". This will not be the case if the protocol has generic requirements. If the protocol has, for example, associated types that each underlying type provides on its own, Swift will strictly forbid you from referring to this protocol if you're also not providing appropriate generic constraints: protocol Sequence { associatedtype Element } var sequences = [Sequence]() // Can't do! // Error: Protocol 'Sequence' can only be used as a generic constraint // because it has Self or associated type requirements The reason you can't do this is that Swift is designed to be a type-safe language. Even though the compiler has no problem determining the underlying type of a Sequence type in the previous snippet, Swift has these features in order to allow you to ship safer products (runtime-wise). Think of access control properties like public and private; they are good examples of concepts that have absolutely no impact on the final binary. In the end, everything is accessible from everywhere, but inside your IDE, the compiler forces access control conventions to be followed so at the very least you are able to write code that is used the way you intended it to be used. The issue here with generic constraints is similar. The compiler does know what the underlying type of a particular generic protocol is in runtime, but because Swift is designed to be type-safe, for safety reasons, if it can't be determined in compile time, it will not let you do it. This is the complete opposite of Objective-C where you could easily do whatever you wanted for the (very big) cost of runtime safety. Before Swift 5.7, the solution to this problem was to box these objects into unconstrained and generally unsafe \"Any\" variations of their protocols, like this: class AnySequence { let value: Any init(_ sequence: T) { self.value = shape } } This process is called type erasure, and the Swift standard library itself contains many such objects. There are many situations in Swift where you'd need to do this, and one of them was covered in our 2020 article on how to use type erasure to build a dependency injection system. In general, you'll find yourself needing to type erase a protocol with generic requirements whenever you're in a situation where knowing the actual constraints of said protocols are irrelevant. After Swift 5.7: Enter \"any\" As far as I'm aware, this process was widely disliked by the Swift community. Not only it was a symptom of a design mistake in the language, but the process itself was also quite unsafe as it often involved the extensive usage of force-unwrapping (due to the need of referring to everything as Any). This has changed in Swift 5.7. With the addition of the new any existential type keyword, type erasure is now a feature of the Swift compiler. You do not need to create your own \"AnyMyType\" abstraction anymore; by adding any before a type, the Swift compiler will now automatically abstract it for you. While I like to call these \"type-erased values\" for simplicity, you should know that the proper terminology for referring to a value as an abstract representation is existential type. let erased: any Sequence = MyConcreteSequenceType() This also means that the old \"protocol can only be used as a generic constraint\" error has changed. In Swift 5.7, trying to use such protocols without their constraints will now make the compiler prompt you to refer to it as an existential. let erased: Sequence = MyConcreteSequenceType() // Error: Use of protocol 'Sequence' as a type must be written 'any Sequence' Type-safety of \"any\" One amazing benefit of this new keyword is that unlike manual type-erasure, using the new any keyword is type-safe. While before Swift 5.7 you generally had to force-unwrap your type-erased values in order to \"unbox\" them and access their constraints (and hope you didn't get anything wrong), the Swift 5.7 compiler will watch your back and prevent you from making mistakes. The way in which you achieve this is a bit tricky though, so I've modified an example from WWDC 2022's session about the feature to clarify it. Let's assume that we have a Animal protocol that defines a generic food type and a method to feed said food. We also have a FoodProvider protocol that is able to provide said food. protocol Animal { associatedtype Food func eat(_ food: Food) } protocol FoodProvider { func getFood(for animal: T) -\u003e T.Food } Let's now pretend that we have a helper method that receives a group of animals and tries to feed all of them. Because the particular type of animal doesn't matter to us in this scenario, we want to do so without declaring any generic constraints. func feedAll(_ animals: [Animal], provider: FoodProvider) { animals.forEach { let food = provider.getFood(for: $0) $0.eat(food) } } As you might expect after reading this article, the existence of an associated type will make Swift prevent us from doing that. Before Swift 5.7, the solution to this was generally to create a AnyAnimal type and abstract these actions under unsafe closures powered by force-unwrapping: final class AnyAnimal { var getFood: (FoodProvider) -\u003e Any var eatFood: (Any) -\u003e Void init(_ animal: T) { self.getFood = { provider in provider.getFood(for: animal) } self.eatFood = { food in animal.eat(food as! T.Food) } } } func feedAll(_ animals: [AnyAnimal], provider: FoodProvider) { animals.forEach { let food = $0.getFood(provider) $0.eatFood(food) } } While this solution will work for this case, it's not safe as you could quite easily pass the wrong food type to the erased value and cause a crash. Swift 5.7's any keyword solves this problem by enforcing complete type-safety on any existential value, but there's a small catch (Note: This refers to a limitation of Swift 5.7. If you're reading this in the future, this might not be the case anymore.). While Swift will freely allow you to call any unconstrained methods of the existential type, attempting to use any constrained methods can prove to be a bit challenging: func feedAll(_ animals: [any Animal], provider: FoodProvider) { animals.forEach { let food = provider.getFood(for: $0) $0.eat(food) // Member 'eat' cannot be used on value of type 'any Animal' } } Even though the naked eye might tell you that the output of getFood(_:) definitely matches the input of getFood(_:), Swift will not allow you to call any methods involving generic parameters unless you first explicitly \"unbox\" the existential by passing it to a generic method that receives a non-erased value (with no constraints): func feedAll(_ animals: [any Animal], provider: FoodProvider) { animals.forEach { feed($0, provider: provider) // Now works! } } func feed(_ animal: T, provider: FoodProvider) { let food = provider.getFood(for: animal) animal.eat(food) } I thought this seemed like a pointless step since they're both doing the same thing, so I asked about it on the official Swift Forums and it turns out that this is indeed a limitation of Swift 5.7. To be more specific, the proposal that introduced the ability to \"unbox\" existential types in a type-safe manner has a negative side-effect that makes the compiler \"lose\" information about a particular existential outside of said \"unboxing\" contexts. You can read more about it in the proposal. It's important to keep in mind though that the any keyword doesn't replace all cases in which you'd need to erase generic types. While it takes care of the basic case of hiding a type's constraints, more special cases such as transforming constraints (like in our tutorial about it) still require you to go with the manual approach for the time being. Supporting Features Despite not being directly related to the concept of type erasure, Swift 5.7 comes with some additional features that greatly empower it. Let's check them out. Opaque Parameters One thing we mentioned is the necessity of \"unboxing\" existentials by writing empty generic clauses. These empty clauses are very common even outside type erasure, and were improved in Swift 5.7 by the addition of the new Opaque Parameters feature. Now, instead of writing this: func feed(_ animal: T) You can write it like this: func feed(_ animal: some Animal) Deep down, these are exactly the same thing. Declaring a parameter as some Type is simply a syntax sugar for declaring an empty generic constraint clause. Despite not being a ground-breaking feature, this is a very welcome change as generic methods with several parameters tended to become borderline unreadable. Note: This is not to be confused with Swift 5.1's Opaque Return Types feature. Despite using the same keyword and behaving relatively similarly, they are different features that work in very different ways. Primary Associated Types Starting on Swift 5.7, you can now declare one or more of your protocol's associated types as its primary associated types by adding them between angle brackets in the protocol's declaration: protocol Sequence { // Element is now a primary associated type associatedtype Element associatedtype Iterator } This has two purposes. The first one is that it gives you a very welcome syntax sugar when declaring generic constraints just like the one we saw in the Opaque Parameters section; instead of declaring ugly constraint clauses for that particular type like this: extension Sequence where Element == Int { func grabSomeNumbers() { ... } } // or func grabSomeNumbers(_ s: T) where T.Element == Int { ... } ...you are now able to inform this directly in the type! extension Sequence { func grabSomeNumbers() { } } // or func grabSomeNumbers(_ s: Sequence) { ... } In addition to doing this to your own types, you may find it interesting that many protocols of Swift's Standard Library have already been updated to declare primary associated types. The second and most ground-breaking purpose is that this is not restricted to extensions and methods; you can combine with the any keyword to declare type-erased, partially constrained stored properties: let intSequences: [any Sequence] This was previously unheard of in Swift as we were never allowed to define generic constraints in properties. I'm partially disappointed though that they didn't go to the full way to allow us to declare any type of constraint on the fly (like Sequence), but the proposal indicates that the existence of primary associated types does not prevent this from being potentially implemented in the future.",
    "author": "Bruno Rocha",
    "published": "Mon, 12 Sep 2022 14:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "339c0e01-3057-4551-8158-f5d0865f28cf",
    "title": "Architecting iOS apps for fast build times (Runway)",
    "link": "https://www.runway.team/blog/how-to-improve-ios-build-times-with-modularization",
    "description": "Most mobile teams understand and appreciate the benefits of fast build times. Being able to quickly compile and test your code means quicker development and iteration, which in turn allows your team to ship more regularly and efficiently. But actually achieving fast build times, and implementing a long-term solution that keeps build times fast as your codebase grows, can be a complex undertaking. There are a number of different tactics, and while some are relatively trivial — reducing the size of bundled resources, for example — others can be much more involved, or even kind of dangerous (think questionable compiler tricks)! Luckily, the riskiest build time improvement techniques are rarely necessary. Instead, most teams will achieve build time success by implementing some of the more common approaches incrementally as their codebase grows and resources scale.",
    "author": "Bruno Rocha",
    "published": "Wed, 31 Aug 2022 14:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "c7c69551-e91d-4035-8096-280d7bf588e7",
    "title": "Are your frameworks bulletproof?",
    "link": "https://swiftrocks.com/are-your-frameworks-bulletproof",
    "description": "Imagine that you're a developer in a large company working to solve a high-profile architectural problem in an app. Your team has compiled all of the company's use-cases within that particular problem and developed a framework that solves not only all of those use-cases but also some additional ones that you're expecting developers will need in the near future as the project grows. The developers of the company are on board with this change, and over a large period of time, you've written extensive documentation on how to use this new framework, instructed developers on where to find said docs, and migrated the project to use it. Fast-forwarding a couple of years, the project is now in such a bad state that you're in a position in which you essentially need to throw everything away and start from scratch. To make matters worse, not only the architectural problem your framework was supposed to fix is still unsolved, it's now arguably in a much worse shape and considerably harder to fix than before. What in holy heaven happened here? I've been witnessing projects end up in this situation over and over throughout the years, and it's always because the developers are making the same mistake: they didn't account for human ingenuity. It's important to always keep in mind that the main priority of most developers is to save time; when facing a coding challenge in which the correct way to go is to completely refactor their current code, even if you provide extensive documentation on how to solve that particular problem, most people’s first instinct will be to avoid that as much as possible by trying to come up with clever workarounds. This is not necessarily done out of malice or ignorance. It could be very well that the developer is being pressured into following this path by external factors such as unreasonable product managers, but if you do not account for this when designing systems that will be used by other developers, you’re bound to have issues in the long run. While hacky code is generally not too much of a big deal in smaller companies where it’s common practice for all developers to be aware of what everyone else is doing (thus having more space for feedback and collaboration), in the world of large companies where teams are designed to run independently from each other with minimal collaboration, workarounds are ticking time bombs. As years go by and the project evolves, these hacks and workarounds get lodged so deep into the code that your project now has entire systems written on top of them, making them so unpredictable and fragile that one point you become outright unable to make any further improvements to a system without first removing the hacks from the code. However, in large companies, the amount of work necessary to fix situations like this can be so unfeasible that there's often no choice other than to write even more hacks and hope for the best, leading to borderline unmanageable systems with several years of unfixable legacy code that will haunt the project and its engineers for the rest of its life. In over a decade of software engineering, I have never gotten to know a single large product that didn’t have this problem. It seems that the nature of how large companies operate makes it inevitable that at one point someone will merge a dangerous workaround that will have severe consequences in the long run, but it's possible for you as a platform engineer to reduce the likelihood of this happening by designing your systems to be as bulletproof as possible. What this means exactly depends on what you’re developing, but if we take the original example and pretend that we're developing a large-scale framework for one of these large companies, your objective should be to make it as hard as possible for people to misuse your APIs by empowering static linters and implementing runtime safety checks. The best open-source example I can give of a framework that does this is Bazel. It can be very hard to configure Bazel projects as the build system has very strict rules you need to follow in order for it to work as intended, but no matter how hard you try, you simply cannot get them wrong. I've tried to workaround Bazel rules multiple times in moments where I was very unwilling to refactor my files to match what Bazel wanted me to do, but I never succeeded as Bazel has linters and safety checks that stop you dead on your tracks whenever you try to do anything funny. This can feel a bit excessive at first, but it makes complete sense as one of the main features of Bazel is the ability to hermetically seal your project. If I was allowed to go forward with any of the clever workarounds I was planning to write, I would have introduced issues that in the long term would have completely ruined those projects. This practice has a clear downside; it massively reduces the team's productivity when facing issues involving these frameworks. On the other hand, doing this can actually open up the way for you to develop intelligent systems that actually increase developer productivity in the long run, and the most interesting example of this happening is how Xcode's Automatic Reference Counting system came to be. At the beginning of the platform, reference counting on iOS used to be a completely manual process that was very easy to get wrong. Apple started helping developers by creating a series of static checks on Xcode that was able to detect and block developers from introducing some of the most common mistakes, and as they improved this system, they realized at one point that it became so good at reference counting that it wasn't necessary to have developers do it manually anymore. You still need to be careful with other forms of memory mistakes like retain cycles, but when it comes to general memory management, the process is now so automated and abstracted from you that it's being deemed unnecessary for new developers to even learn that this is a thing. While we cannot ignore the fact that these safety procedures can be extremely detrimental to productivity in the beginning, when it comes to large established projects, I'd argue that this is a very needed trade-off to ensure the project can continue to smoothly evolve as the years go by. Dangerous legacy codes are one of the biggest walls to overcome when maintaining large projects, and actively preventing them from being introduced can save you and the company countless hours of work in the long run.",
    "author": "Bruno Rocha",
    "published": "Mon, 18 Jul 2022 14:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "b33b9e9c-bcb0-4bbd-a2a1-349fc70da960",
    "title": "Mobile Platform Teams (Runway)",
    "link": "https://www.runway.team/blog/why-when-mobile-platform-teams",
    "description": "With every mobile project, you will eventually find yourself hitting roadblocks that are less about the product and features themselves and more about the surrounding infrastructure that allows everything to exist in the first place. This can manifest in a variety of ways, but as a mobile developer you’ve certainly witnessed some of the telltale signs in areas like maintaining project and build settings, managing code signing, and resolving issues with CI/CD pipelines. These are just a few examples of tasks outside the feature development domain that you might have to deal with when working on a mobile product, and which can really slow you and your team down. While these sorts of non-product issues are often dealt with in a distributed and ad-hoc way on smaller teams, this approach breaks down as you scale. Platform infrastructure issues can quickly become the single biggest bottleneck for team productivity and have a huge impact on team happiness as the size of both the codebase and the team increases. Mobile platform teams are born out of this need to tackle infrastructure pain points head-on. The end goal is to create a robust ecosystem that the wider mobile org can reliably build within and on top of, and members of a mobile platform team dedicate their time and attention entirely towards this end. That might sound bizarre to people on smaller teams – “mobile folks not working on our actual mobile product??” – but the allocation of resources to mobile platform work can be instrumental for larger companies looking to operate and scale successfully. In this article we'll look at why that's the case, and how to know when it’s becoming an important consideration for your organization.",
    "author": "Bruno Rocha",
    "published": "Fri, 15 Jul 2022 14:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "bf0cabbe-62e8-474d-965b-b003ae9a356f",
    "title": "Using a Macbook Pro as a gaming console",
    "link": "https://swiftrocks.com/using-a-macbook-pro-as-a-gaming-console",
    "description": "I had to leave my gaming computer behind when I moved to another country and have ever since felt an empty spot in my life. I watched many interesting games get released as the years went by, but I didn't feel it was enough justification to buy a gigantic gaming desktop again as I don't have enough space (or will) to have a dedicated space for one. The release of the Steam Deck got me really excited as it effectively solved the space problem, but it will still take several months until I can get my hands on mine. I then wondered: While my deck doesn't arrive, could I somehow use my work Macbook to emulate the console gaming experience? It's not hard to install Windows on a Macbook as this is a built-in feature of macOS, but this is not entirely what I was looking for. I wanted to play PC games on the comfort of my sofa, without removing the Macbook from my office. TL;DR: It worked, and really well! Step 1: Install Windows As mentioned before, there's nothing special about installing a Windows partition on a Macbook. The Bootcamp Assistant software is built-in in macOS, and all you need to do is provide a Windows iso file (which you can download for free from Microsoft). You can then boot into Windows by holding the Option key during startup: While Steam does work for macOS, the huge majority of games don't, so it's easier to just install Windows and run things as originally intended. This already lets me play whatever I want, but we're not done yet. Step 2: Streaming to the TV with Steam Link The Steam Link is one of these weird pieces of technology that are incredibly useful, yet for some reason pretty unknown. The link was released originally as a hardware in 2015 that allowed you to stream whatever you're using Steam for, but it was repurposed as a mobile/smart TV app around 2018. Luckily for me, my Samsung TV has the Steam Link app on its store. It's pretty straight-forward: once you turn on Steam on your computer and open the app on your TV, the computer will be detected by the app and you'll be able to stream right away! Step 3: Enjoy! ...sort of Streaming through WiFi definitely works, but well, it sucks. Even though I have pretty good internet the input lag is massive, and the image is full of artifacts (not visible in this picture, but think of how YouTube videos appear to \"glitch\" when your connection is unstable) I was already meaning to \"upgrade\" my Macbook to use a wired connection, so I thought this could be an interesting motivator to go forward with it! Step 4: Start passing wires through the apartment I'm lucky that half of the work was already done for me. My apartment had a ~10m RJ45 cable coming from the door into the living room, but I needed to re-route it so I could get it closer to the TV and the room in which the Macbook stays. The first thing I did was move the router to behind the TV, and then move a bunch of cable tunnels around to move the cable towards it: With the cable reaching the router, I could then use the router's outputs to wire the Macbook and the TV itself. Wiring the TV was straight-forward since the router is placed behind the TV, so all I needed to do now was pass a cable to the Macbook's room, which lied directly behind the TV's wall. As mentioned before, I got pretty lucky with this project. It seems that the previous owner tried to do something similar in the past, because the wall already had a perfectly-sized hole drilled into it! I then used a super long RJ45 cable I had laying around to connect the router through the hole and into a USB-C hub in my desk that is connected to the Macbook itself. Step 5: Enjoy! (for real!) The result was beyond my expectations. Both the input-lag and the artifacts were completely gone! I was also pleasantly surprised with how easy it was to use a controller with this setup. I'm not sure if the praise should go to Valve or Samsung, but plugging a Xbox 360 controller to the TV was all I needed to do for Steam to completely recognize it and let me play with it! In terms of performance, I can say that this 2019 Macbook Pro is well equipped for the task. These are the games I played and I had no issues with any of them: Elden Ring, Team Fortress 2, Devil May Cry 5, Hades and Dota 2. The only downside I experienced is that the image is not as crisp as it would be if you were playing directly on your computer. It's definitely noticeable if you compare them, but to be honest, after a couple of minutes playing it I sort of \"filtered\" it inside my brain and stopped noticing it, so it wasn't bad at all. It's hard to tell the exact difference in these pictures because of the room's lighting, but I think you should be able to tell that the colors on the TV are a bit more \"washed out\" than the PC one: In general, the only true problems I experienced were with Windows itself. God, I can't stress enough how awful this OS is. To be honest, I'm not entirely sure if Bootcamp played a role in the issues I experienced, but it didn't feel like it. The issues I experienced is that if anything is out of place in this mess of an OS, the entire system will freak out. The biggest issue I had is that after playing flawlessly for a couple of days, I got a random BSOD in Elden Ring that completely destroyed the video card drivers in a way that no amount of reinstalling or nuking files managed to fix. I was rendered unable to do anything that involved the GPU without getting massive stuttering and FPS drops, and the only fix that worked was to format Windows. I did get other BSODs after this, but luckily none that completely destroyed the system again, and I was then able to finish Elden Ring and feel satisfied with how this project turned out. Unfortunately I can't enjoy it anymore as my laptop was recently upgraded to one with the new M1 chips (which doesn't support Bootcamp anymore), but I was able to finish many games with it and can definitely recommend this setup for those who have a Intel MacBook for work and don't feel like getting a separate gaming rig.",
    "author": "Bruno Rocha",
    "published": "Fri, 8 Jul 2022 14:00:00 GMT+2",
    "image": "https://i.imgur.com/Ka2xWlV.jpg",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "6d60ef18-56a0-4380-af6b-a2c34a85877e",
    "title": "Sentiment Analysis with NSTagger: Ranking popular subreddits by the negativity/hostility of its comments",
    "link": "https://swiftrocks.com/sentiment-analysis-reddit-negativity",
    "description": "I have been feeling that Reddit is well on its way to taking away from 4chan the title of internet hate machine, because even when a subreddit is themed around happiness it takes little to no effort to find extremely hostile comment chains with complete strangers arguing about the most pointless things. I was curious to see what this looked like across different subreddits, so I decided to use Reddit's APIs and iOS's built-in sentiment analysis tools to visualize how negative a subreddit is. This is not a new problem, and you can find many GitHub repos of people who've done similar things with Reddit comments in the past. I started this \"project\" by modifying this script made by hein-j, but I wasn't satisfied with the results being given by the usual Python NL frameworks. I thought they were being way too eager at saying that a subreddit was neutral when they're in reality notorious for being negative (maybe they're not the best at detecting passive-aggressiveness?), so I wondered if I could get better results by using iOS's NLTagger that has been available since iOS 12. With a simple setup of extracting comments and running them through a Swift script, I grabbed a couple of popular subreddits, analyzed the comments of the top 10 submissions at the time and plotted the output by pasting the results in a Google Sheets doc. If you want to try this yourself and/or tweak the parameters, you can find the code I used at the bottom of the article. Info and Comments Neutrality was defined as sentiment scoring between -0.5 and 0.5. The huge majority of values in this range were on the negative side. Happy is the only subreddit that scored higher in positivity than in negativity. Despite naturally ranking high in positivity, subreddits themed around happiness showed to still contain an overwhelming amount of negative comments. Subreddits themed around advice/knowledge ranking as more hostile than subreddits themed around actual hate is interesting, but not surprising. They are famous among redditors for being hotspots for insecure individuals and often host some of the lowest-quality discussions in the platform. Code Python The purpose of the Python script is to connect to Reddit and dump the comments of a subreddit into a JSON file. The script requires praw and a praw.ini file in the project's root named bot with the following Reddit App parameters: client_id, client_secret, and user_agent. See here for help with creating a Reddit App and here for help with praw. Make sure to modify the output path of this script before running. Usage example: python comments.py getmotivated import praw import sys import argparse def parse(): print('parsing arguments and options...') parser = argparse.ArgumentParser(description=\"Get the comments of a subreddit\") parser.add_argument('subreddit', type=str, help='name of subreddit') return parser.parse_args() def gather(subreddit): print('searching subreddit for key phrase...') relevant_strings = [] print('gathering texts for analysis...') try: for submission in subreddit.hot(limit=10): print('...') if submission.selftext: relevant_strings.append(str(submission.selftext)) for comment in submission.comments.list(): if isinstance(comment, praw.models.MoreComments): continue relevant_strings.append(str(comment.body)) if len(relevant_strings) == 0: raise Exception return relevant_strings except: sys.exit('ERROR: No posts were found for the provided subreddit and key phrase.') args = parse() subreddit_str = args.subreddit print('establishing reddit instance...') try: reddit = praw.Reddit(\"bot\") except: sys.exit('ERROR: Failed to establish a reddit instance. Have you correctly set up your praw.ini file? See README.md for more detail.') print('connecting to subreddit...') subreddit = reddit.subreddit(subreddit_str) # Get user inputs to analyze relevant_strings = gather(subreddit) joined = \"||aa||aa||aa||aa||\".join(relevant_strings) #open text file text_file = open(\"~/Desktop/r\"+subreddit_str+\".json\", \"w\") #write string to file text_file.write(joined) #close file text_file.close() Swift The Swift part of the script loads the json files dumped by the Python script and runs them through iOS's NSTagger. Make sure to modify the input path and subreddits in the script to the subreddits you're analyzing. import Foundation import NaturalLanguage let subreddits = [\"gaming\", \"wholesomememes\", \"funny\", \"technology\", \"eyebleach\", \"dogswithjobs\", \"aww\", \"comedyheaven\", \"iamatotalpieceofshit\", \"mildlyinteresting\", \"mildlyinfuriating\", \"upliftingnews\", \"politics\", \"mademesmile\", \"interestingasfuck\", \"memes\", \"science\", \"animalsbeingbros\", \"askreddit\", \"relationships\", \"happy\", \"getmotivated\", \"rarepuppers\"] for sub in subreddits { let str = try! String(contentsOfFile: \"~/Desktop/r\\(sub).json\") let arr = str.components(separatedBy: \"||aa||aa||aa||aa||\") var negative: Double = 0 var neutral: Double = 0 var positive: Double = 0 for input in arr { let tagger = NLTagger(tagSchemes: [.sentimentScore]) tagger.string = input let (sentiment, _) = tagger.tag(at: input.startIndex, unit: .paragraph, scheme: .sentimentScore) let score = Double(sentiment?.rawValue ?? \"0\") ?? 0 if score \u003e 0.5 { positive += 1 } else if score \u003c -0.5 { negative += 1 } else { neutral += 1 } } let total = negative + neutral + positive print(sub.capitalized) print(negative / total * 100) print(neutral / total * 100) print(positive / total * 100) }",
    "author": "Bruno Rocha",
    "published": "Sun, 12 Jun 2022 16:00:00 GMT+2",
    "image": "https://i.imgur.com/n14Jsmi.png",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "1b15595a-e8a6-4aef-b097-7a3ffc4b4de8",
    "title": "Managing Provisioning Profiles as your team grows (Runway)",
    "link": "https://www.runway.team/blog/ios-certificates-provisioning-profiles-large-teams",
    "description": "The topic of certificates and provisioning profiles is one that causes a lot of confusion and blank stares in the realm of iOS development. Luckily, in general, these things “just work\". Apple has done a good job of abstracting away the inner workings of code signing so that, today, you don't need to understand the ins and outs of cryptographic theory to create a fully working iOS app and make it available to the world. But as your team grows, you'll notice that Apple’s abstraction only goes so far, and some understanding of signing and how to handle it is needed. In this post, we'll take a look at why that happens and how large-scale teams successfully navigate signing.",
    "author": "Bruno Rocha",
    "published": "Thu, 26 May 2022 14:00:00 GMT+2",
    "image": "",
    "source": "https://swiftrocks.com/rss.xml",
    "categories": null
  },
  {
    "id": "483a567f-9214-4362-8d9d-d237f0813b46",
    "title": "Little Known macOS Sequoia System Extensions",
    "link": "https://tyler.io/2024/09/little-known-macos-sequoia-system-extensions/",
    "description": "",
    "author": "Tyler",
    "published": "Wed, 18 Sep 2024 15:33:49 +0000",
    "image": "https://cdn.tyler.io/wp-content/uploads/2024/09/arc-extension.jpeg",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "908f6b65-b4c5-4c27-b21d-24e4f6830190",
    "title": "Here",
    "link": "https://tyler.io/2024/07/here/",
    "description": "Yesterday, we entered a new timeline. I don’t know if it’s a better one or a much worse one. But it’s something new. This evening, we arrived home from touring a new city — checking out neighborhoods and schools — and found the unspeakable had marched on our hometown. Filth and venom, spewing. The kids watched a movie, and I...",
    "author": "Tyler",
    "published": "Mon, 15 Jul 2024 04:40:31 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "87e8839e-b957-4d74-8c3e-4f62889c028d",
    "title": "Light Switch in a Dark Room",
    "link": "https://tyler.io/2024/06/light-switch-in-a-dark-room/",
    "description": "We're over a decade into the industry's voice assistant experiment, and given the same input, the output doesn't feel reliably deterministic. Voice is an interface that is not stable or discoverable.",
    "author": "Tyler",
    "published": "Sat, 08 Jun 2024 16:57:49 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "8eaea4a3-e1ec-4aa7-8ed9-825d04995a37",
    "title": "Inner Workings",
    "link": "https://tyler.io/2024/05/inner-workings/",
    "description": "If I complain that modern software is too generic and boring, I should take my own advice and try something fun and borderline silly.",
    "author": "Tyler",
    "published": "Thu, 30 May 2024 04:17:19 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "3103b686-caa9-4c3b-9ff8-bddfba2049ac",
    "title": "It’s not about the 30 percent",
    "link": "https://tyler.io/2024/03/its-not-about-the-30-percent/",
    "description": "In 2021, I received a cold email from an Apple director. They wanted to arrange a video call to learn more about developers' opinions of the App Store.",
    "author": "Tyler",
    "published": "Fri, 22 Mar 2024 04:52:45 +0000",
    "image": "https://cdn.tyler.io/wp-content/uploads/2024/03/app-review-call-1024x779.png",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "4ba5619b-bc6f-4d4b-bba2-305b1b259238",
    "title": "Break the Build On Purpose",
    "link": "https://tyler.io/2024/02/break-the-build-on-purpose/",
    "description": "Isaac Halvorson asked: \"What strategies do you use for quickly getting back into the flow and picking up where you left off?\" Here's a trick I started doing years ago.",
    "author": "Tyler",
    "published": "Tue, 06 Feb 2024 17:49:32 +0000",
    "image": "https://cdn.tyler.io/wp-content/uploads/2024/02/2024-02-06-break-build-comment-1024x626.png",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "5cb1d4af-9add-4010-b47b-1811f49789aa",
    "title": "Because what the world needs is one more post about their initial reactions to using Vision Pro, here’s mine.",
    "link": "https://tyler.io/2024/02/because-what-the-world-needs-is-one-more-post-about-their-initial-reactions-to-using-vision-pro-heres-mine/",
    "description": "What follows are questions a few developer friends have been asking me via text message this weekend and my (slightly edited) replies. (I'm mostly writing this so Future Me™️ can look back at my first thoughts in ten years.)",
    "author": "Tyler",
    "published": "Sun, 04 Feb 2024 17:51:50 +0000",
    "image": "https://s.w.org/images/core/emoji/15.0.3/72x72/2122.png",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "7e888d41-699d-4425-89b4-1eeca36ad387",
    "title": "“…not worthy of your love.”",
    "link": "https://tyler.io/2024/01/not-worthy-of-your-love/",
    "description": "Brent has a post today similar in spirit to my own but much more eloquently written. Just like the sixth finger in an AI-rendered hand, Apple’s policies for Distributing apps in the U.S. that provide an external purchase link are startlingly graceless and a jarring, but not surprising, reminder that Apple is not a real person and not worthy of your love....",
    "author": "Tyler",
    "published": "Wed, 17 Jan 2024 20:34:12 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "58ed97ea-e3c3-47c3-a529-8d9dc094716d",
    "title": "Modern-day Apple",
    "link": "https://tyler.io/2024/01/modern-day-apple/",
    "description": "I don't have anything to say about Apple's new guidelines for external purchase links on the App Store that smarter people than me aren't already saying. It's exactly what we all knew Apple would do. What I do want to comment on is the juxtaposition of the two most recent posts on Daring Fireball tonight.",
    "author": "Tyler",
    "published": "Wed, 17 Jan 2024 05:52:19 +0000",
    "image": "",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "29195aa4-f61d-47b7-a3f4-5f30a12d8850",
    "title": "Using Reminders to Add Attachments to Calendar Events",
    "link": "https://tyler.io/2023/09/using-reminders-to-add-attachments-to-calendar-events/",
    "description": "A macOS Shortcut that makes sure any meeting notes I prepare in advance are one-click away when I need them.",
    "author": "Tyler",
    "published": "Mon, 18 Sep 2023 02:24:07 +0000",
    "image": "https://cdn.tyler.io/wp-content/uploads/2023/09/attach-meeting-info-shortcut.jpg",
    "source": "https://tyler.io/feed/",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "4735e8b9-4ac8-439f-9e71-48834b0b0bfe",
    "title": "302: Artificial Walls",
    "link": "http://relay.fm/radar/302",
    "description": "Holding the line for our own standards, while being open to the possibility that we've chosen the wrong lines.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 26 Sep 2024 15:30:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar302.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "64721ebd-ed88-4f11-bd46-be233d070cec",
    "title": "301: Pending Apple Release",
    "link": "http://relay.fm/radar/301",
    "description": "Submitting our iOS 18 updates, and considering what this OS means for our apps and our customers.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 12 Sep 2024 14:00:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar301.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "8e1b3f6d-3567-421d-91e8-a7a548b96ae9",
    "title": "300: The Aftermath",
    "link": "http://relay.fm/radar/300",
    "description": "Fixing issues with the Overcast rewrite, dealing with negative feedback, and resolving mistakes.",
    "author": "Marco Arment and David Smith",
    "published": "Fri, 30 Aug 2024 16:30:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar300.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "6e6592f8-34d6-42e8-9a14-e47bcd993332",
    "title": "299: Mid-Summer Update",
    "link": "http://relay.fm/radar/299",
    "description": "As the summer races by at an alarming pace, we plan the rest of our time and consider the value of keeping some of our plans secret.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 01 Aug 2024 14:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar299.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "abd91e8d-765e-4823-bdd4-6e69de3cba54",
    "title": "298: The Storm",
    "link": "http://relay.fm/radar/298",
    "description": "The first few days after the launch of the Overcast rewrite, and how to process the mountain of feedback.",
    "author": "Marco Arment and David Smith",
    "published": "Fri, 19 Jul 2024 15:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar298.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "22b1b814-3aba-4213-927e-df2f7a3acdb4",
    "title": "297: The Storm Before The Storm",
    "link": "http://relay.fm/radar/297",
    "description": "Preparing for the launch of the big Overcast rewrite.",
    "author": "Marco Arment and David Smith",
    "published": "Wed, 03 Jul 2024 13:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar297.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "f8b6aa6f-9f6b-4c6b-8a8b-85707504fcc2",
    "title": "296: Summer Plans",
    "link": "http://relay.fm/radar/296",
    "description": "How we think about what to tackle each year between WWDC and the fall OS releases.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 20 Jun 2024 15:30:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar296.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "6b1cae54-55d3-4830-aa7f-e3a7f0163e47",
    "title": "295: WWDC 2024 Interview",
    "link": "http://relay.fm/radar/295",
    "description": "In this special episode from Apple's podcast studio at WWDC 2024, we interview Serenity Caldwell, Design Evangelist at Apple, and Kristin Oro, Product Marketing for Developer Technology on visionOS.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 13 Jun 2024 16:00:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar295.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "d742e3f6-5abf-4efb-8738-3f9d65d5542d",
    "title": "294: WWDC Excitement",
    "link": "http://relay.fm/radar/294",
    "description": "How we hope to spend next week at WWDC 2024.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 06 Jun 2024 15:00:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar294.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "213e7451-6ba7-4677-87cb-9a7a6e1427f5",
    "title": "293: Butterflies in the Garden",
    "link": "http://relay.fm/radar/293",
    "description": "The challenge of managing ourselves.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 23 May 2024 14:30:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar293.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "e2092d17-3e62-44cb-a81a-a53a4969ed3f",
    "title": "292: You Can Always Come Back Later",
    "link": "http://relay.fm/radar/292",
    "description": "It's sometimes fine to ship incomplete features, or technically non-ideal implementations, because you can improve them later if the need arises.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 09 May 2024 15:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar292.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "a5b4a326-40a9-4f62-aba7-a460553eb201",
    "title": "291: An Inclusive Mindset",
    "link": "http://relay.fm/radar/291",
    "description": "Designing our apps to be comfortably usable by as many people as possible.",
    "author": "Marco Arment and David Smith",
    "published": "Tue, 30 Apr 2024 15:00:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar291.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "dcfa5f5b-8388-445b-b535-5970376c978e",
    "title": "290: Pillar III: Retention",
    "link": "http://relay.fm/radar/290",
    "description": "We conclude a three-part series with the third pillar of a successful app: customer-retention methods and techniques.",
    "author": "Marco Arment and David Smith",
    "published": "Wed, 10 Apr 2024 16:45:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar290.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "84931028-bcce-47ce-b290-91b5cecf5a21",
    "title": "289: Vision Pro Numbers",
    "link": "http://relay.fm/radar/289",
    "description": "How the Apple Vision Pro is fitting into our lives so far, the usage of our apps on visionOS, and considering how to allocate our attention and resources to the platform.",
    "author": "Marco Arment and David Smith",
    "published": "Tue, 26 Mar 2024 15:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar289.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "6aa83f04-0bdf-4890-8f2a-388a826fe174",
    "title": "288: Feelings \u0026 Opportunities",
    "link": "http://relay.fm/radar/288",
    "description": "Thoughts on the new app-distribution options from the EU DMA and the implications for app developers.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 14 Mar 2024 14:30:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar288.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "b9151229-5604-4dfa-b5b0-2a223bb993ec",
    "title": "287: Pillar II: Monetization",
    "link": "http://relay.fm/radar/287",
    "description": "In the second of a three-part series, we look at the second pillar of a successful app: choosing a monetization model that fits the app's target market.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 29 Feb 2024 15:30:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar287.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "9518952f-677e-4f01-aa7e-d42d89c522a2",
    "title": "286: First Hire",
    "link": "http://relay.fm/radar/286",
    "description": "Thoughts and motivations behind David's hiring of an employee and what it means to be an indie developer.",
    "author": "Marco Arment and David Smith",
    "published": "Wed, 14 Feb 2024 17:00:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar286.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "8e30e2ed-6775-4166-b94a-a60d6bc27497",
    "title": "285: Recreational Computing",
    "link": "http://relay.fm/radar/285",
    "description": "Final considerations for the imminent Apple Vision Pro launch, and our expectations for visionOS apps.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 18 Jan 2024 16:45:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar285.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "c8ca7f87-ef59-4fa9-a63a-a8a7d9ac0a49",
    "title": "284: Pillar I: Acquisition",
    "link": "http://relay.fm/radar/284",
    "description": "In the first of a three-part series, we look at the first pillar of a successful app: customer acquisition, including paid advertising, word-of-mouth marketing, and editorial promotion.",
    "author": "Marco Arment and David Smith",
    "published": "Thu, 04 Jan 2024 09:30:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar284.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "9acbfbb8-b663-4968-8700-8eedc21d6a9b",
    "title": "283: Fifty Roles",
    "link": "http://relay.fm/radar/283",
    "description": "The many roles we need to juggle as independent developers, and considering which roles we can take off our plates.",
    "author": "Marco Arment and David Smith",
    "published": "Sat, 09 Dec 2023 17:15:00 GMT",
    "image": "https://www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/secure/radarrelay/undertheradar283.mp3",
    "source": "https://www.relay.fm/radar/feed",
    "categories": null
  },
  {
    "id": "6cec01ee-a2d8-4fec-bcb8-d6955ce99be3",
    "title": "iPhone 16 Screen Sizes",
    "link": "https://useyourloaf.com/blog/iphone-16-screen-sizes/",
    "description": "Two new sizes as the Pro phones grow in size, and weight, and get even smaller bezels. Here’s what you need to know about the iPhone 16. The New Models in a Nutshell As in earlier years, Apple has discontinued the iPhone 15 Pro models and added features to the base iPhone 16 models. Apple also continues to sell the base iPhone 15, iPhone 14, and the iPhone SE. The Pro models increase in size from last year given us four different screen sizes across the iPhone 16 range: The base models have the same screen sizes as last years iPhone 15 models, but still lack ProMotion and the Always-on display. They keep the aluminium body where the Pro models are Titanium. Support for USB-3 (10Gbp/s) transfer speeds is still limited to the Pro models. The displays have the same peak brightness as last year but now have a 1 nit minimum brightness and the latest generation Ceramic Shield. All models now have the Action button and the new Camera Control button. iPhone 16 The iPhone 16 gains new colours, the Action, and Camera Control buttons, and the A18 chip with support for Apple Intelligence. A18 chip (6-core CPU, 5-core GPU, 16-core Neural Engine) Display: 6.1\" Super Retina XDR OLED with Dynamic Island Screen resolution (points): 393 x 852 Native resolution (pixels): 1179 x 2556 (460 ppi) Native Scale factor: 3x Portrait size classes: w: Compact, h: Regular Landscape size classes: w: Compact, h: Compact There’s no change to the dynamic island design this year so the iPhone 16 keeps the same 54 point high status bar. The top safe area inset is 59 points reducing the height of the safe area in portrait to 759 points: Safe Area Insets (portrait): top: 59, bottom: 34, left: 0, right: 0 Safe Area Insets (landscape): top: 0, bottom: 21, left: 59, right: 59 iPhone 16 Plus Other than the larger screen size (and battery life) the iPhone 16 Plus shares the same specs as the iPhone 16. A18 Bionic chip (6-core CPU, 5-core GPU, 16-core Neural Engine) Display: 6.7\" Super Retina XDR OLED with Dynamic Island Screen resolution (points): 430 x 932 Native resolution (pixels): 1290 x 2796 (460 ppi) Scale factor: 3x Portrait size classes: w: Compact, h: Regular Landscape size classes: w: Regular, h: Compact The status bar is 54 points high with a top safe area inset of 59 points which gives the following safe area insets (same as the iPhone 16): Safe Area Insets (portrait): top: 59, bottom: 34, left: 0, right: 0 Safe Area Insets (landscape): top: 0, bottom: 21, left: 59, right: 59 iPhone 16 Pro The iPhone 16 Pro is 3mm taller, 0.9mm wider, and has smaller bezels than the iPhone 15 Pro. The screen size increases from 6.1\" to 6.3\" and it has the Pro version of the A18 chip: A18 Pro chip (6-core CPU, 6-core GPU, 16-core Neural Engine). Display: 6.3\" Super Retina XDR OLED with ProMotion, Always-On display, and Dynamic Island. Screen resolution (points): 402 x 874 Native resolution (pixels): 1206 x 2622 (460 ppi) Native Scale factor: 3x Portrait size classes: w: Compact, h: Regular Landscape size classes: w: Compact, h: Compact The status bar is 54 points high with a top safe area inset of 62 points which gives the following safe area insets: Safe Area Insets (portrait): top: 62, bottom: 34, left: 0, right: 0 Safe Area Insets (landscape): top: 0, bottom: 21, left: 62, right: 62 iPhone 16 Pro Max The iPhone 16 Pro Max is 3.1mm taller, 0.9mm wider, and has smaller bezels than the iPhone 15 Pro Max. The screen size increases from 6.7\" to 6.9\" and it has the Pro version of the A18 chip: A18 Pro chip (6-core CPU, 6-core GPU, 16-core Neural Engine). Display: 6.9\" Super Retina XDR OLED with ProMotion, Always-On display, and Dynamic Island. Screen resolution (points): 440 x 956 Native resolution (pixels): 1320 x 2868 (460 ppi) Scale factor: 3x Portrait size classes: w: Compact, h: Regular Landscape size classes: w: Regular, h: Compact The status bar is 54 points high with a top safe area inset of 62 points which gives the following safe area insets: Safe Area Insets (portrait): top: 62, bottom: 34, left: 0, right: 0 Safe Area Insets (landscape): top: 0, bottom: 21, left: 62, right: 62 The Complete List of iPhones (and an iPod) Apple added new 6.3\" and 6.9\" Pro model sizes this year. By my count, that means there are 13 different iPhone screen sizes that you need to support with a minimum deployment target of iOS 13 (new models in bold): 6.9\" (440 x 956 points at @3x) iPhone 16 Pro Max 6.7\" (430 x 932 points @3x) iPhone 16 Plus, iPhone 15 Pro Max, iPhone 15 Plus, iPhone 14 Pro Max 6.7\" (428 x 926 points @3x) iPhone 14 Plus, iPhone 13 Pro Max, iPhone 12 Pro Max 6.5\" (414 x 896 points @3x) iPhone 11 Pro Max, iPhone XS Max 6.3\" (402 x 874 points at @3x) iPhone 16 Pro 6.1\" (393 x 852 points @3x) iPhone 16, iPhone 15 Pro, iPhone 15, iPhone 14 Pro 6.1\" (390 x 844 points @3x) iPhone 14, iPhone 13 Pro, iPhone 13, iPhone 12 Pro, iPhone 12 6.1\" (414 x 896 points @2x) iPhone 11, iPhone XR 5.8\" (375 x 812 points @3x) iPhone 11 Pro, iPhone XS, iPhone X 5.5\" (414 x 736 points @3x) iPhone 8 Plus, iPhone 7 Plus, iPhone 6S Plus 5.4\" (375 x 812 points @3x) iPhone 13 mini, iPhone 12 mini 4.7\" (375 x 667 points @2x) iPhone SE (3rd \u0026 2nd Gen), iPhone 8, iPhone 7, iPhone 6S 4\" (320 x 568 @2x) iPhone SE (1st Gen), iPod Touch (7th Gen) App Store Screenshots Apple confirmed during WWDC24 that App Store Connect now requires just one set of screenshots for iPhone (and one for iPad). That screenshot can be for either the 6.9\" or 6.5\" iPhone display. You can upload either of the following sizes for the 6.9\" display (portrait sizes, reverse for landscape): 6.9\" 1320 x 2868 pixels (iPhone 16 Pro Max) 6.7\" 1290 x 2796 pixels (iPhone 16 Plus) If you don’t upload screenshots for the 6.9\" display you can provide either of the following for the 6.5\" display: 6.7\" 1284 x 2778 pixels (iPhone 14 Plus) 6.5\" 1242 x 2688 pixels (iPhone 11 Pro Max) All other iPhone display sizes can use scaled versions of the above. See Also iPhone 15 Screen Sizes Want To Learn More? If you’re struggling to build layouts with UIKit that work across the growing range of iOS devices you might like my book - Modern Auto Layout. iPhone 16 Screen Sizes was originally posted 16 Sep 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 16 Sep 2024 10:44:39 +0100",
    "image": "https://useyourloaf.com/blog/iphone-16-screen-sizes/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "16ad69de-04ac-41fc-9e86-f5bed506c58e",
    "title": "SwiftData Expressions",
    "link": "https://useyourloaf.com/blog/swiftdata-expressions/",
    "description": "SwiftData gained support for predicate expression in iOS 18. How does it compare to the expressions we can use with Core Data? Core Data Queries with NSExpression When Apple launched SwiftData with iOS 17 there were some gaps compared to Core Data. A big one for me was the ability to create an aggregate query (FB12292503). For example, to fetch the minimum, maximum, sum, or average of a property. I first wrote about using a Core Data expression to query for min and max values back in 2012. Here’s an updated example with a Core Data log entity that contains a set of markers: public final class CDLog: NSManagedObject { @NSManaged public var name: String? @NSManaged public var timestamp: Date? @NSManaged public var markers: NSSet? ... } The markers also contain a timestamp: public final class CDMarker: NSManagedObject { @NSManaged public var timestamp: Date? @NSManaged public var log: CDLog? ... } I want to know the range (min…max) of timestamps for the markers in a log entry. One way would be to fetch the markers, sorted by timestamp, and return the timestamps of the first, and last markers. A better way is to have SQLite calculate and directly return the values. Core Data has long supported creating fetch requests and predicates with the Foundation type NSExpression. It takes a lot of code but here’s a request that fetches the minimum (earliest) and maximum (latest) dates of markers in a log entry: public class func boundsRequest( _ timeline: NSManagedObjectID ) -\u003e NSFetchRequest\u003cNSFetchRequestResult\u003e { let request = NSFetchRequest\u003cNSFetchRequestResult\u003e( entityName: CDMarker.entityName) request.predicate = CDMarker.inTimeline(timeline) request.resultType = .dictionaryResultType let keyPathExpression = NSExpression(forKeyPath: \\CDMarker.timestamp) let earliestDescription = NSExpressionDescription() earliestDescription.name = \"earliestDate\" earliestDescription.expression = NSExpression(forFunction: \"min:\", arguments: [keyPathExpression]) earliestDescription.expressionResultType = .dateAttributeType let latestDescription = NSExpressionDescription() latestDescription.name = \"latestDate\" latestDescription.expression = NSExpression(forFunction: \"max:\", arguments: [keyPathExpression]) latestDescription.expressionResultType = .dateAttributeType request.propertiesToFetch = [ earliestDescription, latestDescription ] return request } The two NSExpression properties apply a function (min or max) to a keypath returning the two values in a dictionary. Core Data translates the expressions to an SQLite statement performing the work at the database level. SwiftData Predicate Expressions In iOS 18, SwiftData can make use of Foundation’s new #Expression macro to make it easier to build more complex predicates. From the WWDC session: Expressions allow for reference values that do not produce true or false but instead allow for arbitrary types. You can then evaluate the expression as part of more complex predicate. Let’s see an example. I have an Item model class that can contain one or more Record items: @Model final class Item { var name: String var timestamp: Date var record: [Record] } The Record model includes a score: @Model final class Record { var score: Int ... } Suppose I want to find all items with three or more records of which at least two are a passing score of 90 or more. We can write an expression that counts the number of passing records: let passingScore = #Expression\u003c[Record], Int\u003e { records in records.filter { $0.score \u003e= 90 }.count } Note: The body of the expression is restricted to a single expression. We can then evaluate this expression in a compound item predicate: let highScoring = #Predicate\u003cItem\u003e { item in item.records.count \u003e 2 \u0026\u0026 passingScore.evaluate(item.records) \u003e 1 } The resulting SQL query: CoreData: sql: SELECT 0, t0.Z_PK, t0.Z_OPT, t0.ZNAME, t0.ZTIMESTAMP FROM ZITEM t0 WHERE ( (SELECT COUNT(t1.Z_PK) FROM ZRECORD t1 WHERE ( t0.Z_PK = t1.Z1RECORDS) ) \u003e ? AND (SELECT COUNT(t2.Z_PK) FROM ZRECORD t2 WHERE ( t0.Z_PK = t2.Z1RECORDS AND ( t2.ZSCORE \u003e= ?)) ) \u003e ? ) This look promising but I could already write this predicate without the expression: let highScoring = #Predicate\u003cItem\u003e { item in item.records.count \u003e 2 \u0026\u0026 item.records.filter { $0.score \u003e= 90 }.count \u003e 1 } If you expand the expression macro or check the Expression documentation you’ll see it’s creating PredicateExpressions which appear to support a wide range of methods. Unfortunately I can’t seem to get most of them to work either in predicates or expressions. For example, similar to my earlier Core Data example, here’s an expression to return the maximum score in a collection of records: let maxScore = #Expression\u003c[Record], Int\u003e { records in records.map { $0.score }.max() ?? 0 } That fails to compile: The map() function is not supported in this expression So maybe this will improve in future updates but right now I’m not sure I’m gaining anything from using expressions? Let me know if you’ve had more success. Learn More What’s new in SwiftData SwiftData Expressions was originally posted 09 Sep 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 09 Sep 2024 13:03:47 +0100",
    "image": "",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "14c963d8-5dae-4bba-a29e-ef4ba2b2789d",
    "title": "SwiftUI Previewable Macro",
    "link": "https://useyourloaf.com/blog/swiftui-previewable-macro/",
    "description": "Apple added the Previewable macro to iOS 18. This generates the boilerplate wrapper view you need to preview a view with State bindings. What’s The Problem? I have mixed feelings about SwiftUI previews. When they work they can make creating a view an interactive experience. They can also be slow, break with confusing errors, and need boilerplate container views to create any state bindings. For that last point consider this form view that expects a binding to a bool: struct SettingsView: View { @Binding var showMessages: Bool var body: some View { NavigationStack { Form { Section(\"General Settings\") { Toggle(\"Show messages\", isOn: $showMessages) } ... } .navigationTitle(\"Settings\") } } } When previewing this view we need a binding. One way is to provide a constant value: #Preview { SettingsView(showMessages: .constant(true)) } That works but prevents us from interacting with the view. A better approach is to create a wrapper view that supplies the mutable state: private struct ContainerView: View { @State var showMessages: Bool = false var body: some View { SettingsView(showMessages: $showMessages) } } #Preview { ContainerView() } That gives us a preview with a working toggle button, but creating a wrapper view for our state each time gets to be tiresome. The Previewable Macro In Xcode 16, you can replace that boilerplate wrapper code with the Swift Previewable macro: #Preview { @Previewable @State var showMessages: Bool = false SettingsView(showMessages: $showMessages) } Declare any @State properties you need at the root level of the Preview and mark them with the @Previewable macro. A SwiftUI wrapper view is automatically generated containing the state properties. Expanding the Preview macro (abbreviated): static func makePreview() throws -\u003e DeveloperToolsSupport.Preview { DeveloperToolsSupport.Preview { struct __P_Previewable_Transform_Wrapper: SwiftUI.View { @State var showMessages: Bool = false var body: some SwiftUI.View { SettingsView(showMessages: $showMessages) } } return __P_Previewable_Transform_Wrapper() } } That looks pretty close to our original wrapper view. Note: The @Previewable macro deploys back to iOS 17.0, macOS 14.0, tvOS 17.0, visionOS 1.0, and watchOS 10.0. Learn More WWDC24 What’s new in SwiftUI SwiftUI Previewable Macro was originally posted 26 Aug 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 26 Aug 2024 13:14:36 +0100",
    "image": "https://useyourloaf.com/blog/swiftui-previewable-macro/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "fc12055a-4365-4154-bd74-75d0ea0fce15",
    "title": "Disabling Xcode Asset Symbol Generation",
    "link": "https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/",
    "description": "Xcode 16 added a property to asset catalogs to opt-out of asset symbol generation. This is especially useful for Swift Packages which had no way to disable the project settings they inherited. Asset Catalog Symbol Generation - A Recap Xcode 15 introduced a feature to create Swift, and Objective-C, symbols for colors and images in the asset catalog. Here’s the asset catalog in my main app bundle with the default accent color and app icon, to which I’ve added an image and color: Using my custom color and image in a SwiftUI view without symbol generation: VStack { Image(\"Star\") Text(\"Hello, world!\") .padding() .background(Color(\"TextBackground\")) } Using a string for an asset catalog entry is error prone and there’s no help from autocomplete or the compiler. If I get the name wrong the image or color are missing when my app runs. Starting in Xcode 15 I can rewrite my SwiftUI view to use the automatically generated symbol names for the image and color: VStack { Image(.star) Text(\"Hello, world!\") .padding() .background(.textBackground) } That has the advantage that my image and color names autocomplete and the compiler checks they are valid. If I rename the image in the asset catalog the compiler will now warn me: Note that Xcode generates the symbols when you build the target. You can find the generated code in GeneratedAssetSymbols.swift. For Objective-C, import the GeneratedAssetSymbols.h header file. The symbol generation is on, by default, for new projects but you can opt-out, and customise the scope, in the project or target settings: Xcode generates the color symbols as static properties of the ColorResource type: // GeneratedAssetSymbols.swift @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *) extension DeveloperToolsSupport.ColorResource { /// The \"TextBackground\" asset catalog color resource. static let textBackground = DeveloperToolsSupport.ColorResource( name: \"TextBackground\", bundle: resourceBundle) } The image symbols are likewise static properties of the ImageResource type: @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *) extension DeveloperToolsSupport.ImageResource { /// The \"Star\" asset catalog image resource. static let star = DeveloperToolsSupport.ImageResource( name: \"Star\", bundle: resourceBundle) } Note that the initial letter of the symbol is lowercase even if the name in the asset catalog starts with an uppercase letter. Framework Extensions Xcode also generates extensions for SwiftUI, UIKit, and AppKit color and image types (though you can restrict the framework support in the build settings if you wish). For example, here’s the generated code for the SwiftUI Color type: extension SwiftUI.Color { /// The \"TextBackground\" asset catalog color. static var textBackground: SwiftUI.Color { .init(.textBackground) } } Xcode generates the symbols for the module containing the asset catalog which means they also work for asset catalogs included in Swift Packages which inherit the settings. Unfortunately that created a problem in that there was no way to disable the symbol generation in a package. Opt-out for Swift Packages In Xcode 16, asset catalogs gained a new “Asset Symbols” property in the file inspector: Asset catalogs now provide an inspector property for enabling system color and image accessors for generated asset symbols, which allows Swift packages to opt-in to generating these accessors. (113704993) There are three possible values: Inherited. This is the default and inherits from the project/target settings. The inspector shows the value in effect. Extensions On Extensions Off The last two settings override the inherited settings allowing you to opt-in/out of symbol generation for individual asset catalogs in Swift package modules. That’s useful if the generated symbols clash with other names in the module or you prefer not to rely on Xcode generating code. One reason you might want to create your own symbols is that the Xcode generated ones only have internal scope. If you want to access the assets outside of the package scope you’ll need to create your own public symbols (see Add resources to swift packages). Learn More Xcode 16 Release Notes What’s new in Xcode 15 Disabling Xcode Asset Symbol Generation was originally posted 19 Aug 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 19 Aug 2024 11:34:59 +0100",
    "image": "https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/001.png",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "112b4f43-7e01-42fa-be7e-1286d9de9f9c",
    "title": "Entry Macro for Custom SwiftUI Environment Values",
    "link": "https://useyourloaf.com/blog/entry-macro-for-custom-swiftui-environment-values/",
    "description": "The Entry macro reduces the boilerplate when customizing the SwiftUI environment. Creating New Environment Values - A Recap Adding our own values to the SwiftUI environment is a common operation but it requires some boilerplate code each time. See SwiftUI Custom Environment Values for an example but here’s a quick recap: Create the environment key with a default value: private struct CaptionColorKey: EnvironmentKey { static let defaultValue = Color(.secondarySystemBackground) } Extend the environment adding a getter/setter for our key: extension EnvironmentValues { var captionBackgroundColor: Color { get { self[CaptionColorKey.self] } set { self[CaptionColorKey.self] = newValue } } } At this point we can already use our custom environment value: ContentView() .environment(\\.captionBackgroundColor, .yellow) Then in the ContentView: struct ContentView: View { @Environment(\\.captionBackgroundColor) var captionBackgroundColor var body: some View { Text(\"Hello, world!\") .background(captionBackgroundColor) } } An optional third step adds a view modifier to allow a more compact syntax: extension View { func captionBackgroundColor(_ color: Color) -\u003e some View { environment(\\.captionBackgroundColor, color) } } That allows us to write: ContentView() .captionBackgroundColor(.yellow) The Entry macro helps us with the first two steps. Using the Entry Macro The Entry macro allows us to replace the first two steps, directly extending the environment: extension EnvironmentValues { @Entry var captionBackgroundColor: Color = Color(.secondarySystemBackground) } Expanding the macro shows us the generated code: extension EnvironmentValues { { get { self[__Key_captionBackgroundColor.self] } set { self[__Key_captionBackgroundColor.self] = newValue } } private struct __Key_captionBackgroundColor: SwiftUICore.EnvironmentKey { typealias Value = Color static var defaultValue: Value { Color(.secondarySystemBackground) } } } The Entry macro doesn’t help with the final optional step of adding a view modifier but it does remove the rest of the boilerplate. It also works for adding Transaction, ContainerValues, and FocusedValues, and works back to iOS 13 so there’s no need to wait to use it. Learn More WWDC24 What’s new in SwiftUI SwiftUI Custom Environment Values Entry Macro for Custom SwiftUI Environment Values was originally posted 12 Aug 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
    "author": "",
    "published": "Mon, 12 Aug 2024 10:37:14 +0100",
    "image": "",
    "source": "https://useyourloaf.com/blog/rss.xml",
    "categories": null
  },
  {
    "id": "9014e159-c6f4-4764-8d72-a30ecb09a9a6",
    "title": "Solar Powered Birdhouse",
    "link": "https://atomicbird.com/blog/birdhouse-solar-power/",
    "description": "In my last couple of posts I’ve talked about the hardware and software behind my birdhouse camera project. I haven’t previously covered how I’m giving it all enough power to operate, and therein lies a tale. No Power? No Problem If I had a power outlet located anywhere near the bird house, this would have been easy. Pretty much any micro-USB power adapter would plug into the Raspberry Pi, and I’d be set.",
    "author": "",
    "published": "Thu, 19 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "2bdd817a-1bc4-46f1-9252-0fc51e4c3551",
    "title": "Raspberry Pi Birdhouse Software",
    "link": "https://atomicbird.com/blog/birdhouse-software/",
    "description": "In my last post I went over the components of the bird house camera I set up this year to get a better look at the local black-capped chickadees. Today I’ll talk about the software that makes it work. Initial Setup Being relatively new to Raspberry Pi, I started off with a full install of Raspbian Deskop. It’s more than I need, since I won’t have anything like a desktop setup, but with a 64GB SD card I wasn’t concerned about the space.",
    "author": "",
    "published": "Mon, 09 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "ff55198c-5ac1-4633-9021-6aad14a437d5",
    "title": "Raspberry Pi Birdhouse Camera",
    "link": "https://atomicbird.com/blog/birdhouse-camera-hardware/",
    "description": "My current non-app related project has taken me out into the back yard, but brought along my coding and technical experience. Given this site’s name, the project might be called the atomic birdhouse. For the past couple of years I’ve had a bird house in my yard, in which black-capped chickadees have nested and raised chicks. I’d see them come and go, and sometimes hear sounds from inside the house.",
    "author": "",
    "published": "Sat, 07 May 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "b85f2192-e0da-4964-bde7-ab27bf80e517",
    "title": "Clash of the Optionals",
    "link": "https://atomicbird.com/blog/clash-of-the-optionals/",
    "description": "…or, how to accidentally break Swift initialization rules. Today I’m going to talk about optionals. Swift optionals. And also another kind of optional. And how you might break the ironclad rules of Swift without realizing it until it’s too late. What is an “optional” anyway? It depends who you ask. Swift will give you one answer, but Core Data has other ideas. So what happens when you bring them together?",
    "author": "",
    "published": "Fri, 21 Jan 2022 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "e27dd3b3-6fb9-4094-9a81-66778edab438",
    "title": "Core Data Using Only Code",
    "link": "https://atomicbird.com/blog/core-data-code-only/",
    "description": "If you know anything about Core Data, you’re probably aware of Xcode’s built-in model editor. If you’ve used Core Data, you’ve probably spent more time with it than you care to remember. It edits the data model, which then gets compiled to a binary form Core Data can use when your app runs. Conveniently it can also generate some code for you, subclasses of NSManagedObject for each entity in the model.",
    "author": "",
    "published": "Mon, 08 Nov 2021 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "cd907b2f-584e-4331-ab3d-2441b835ae77",
    "title": "Stumping People for 1000* Years",
    "link": "https://atomicbird.com/blog/stumping-1000-years/",
    "description": "* Base 2 Last week at 360iDev I hosted the 8th edition of Stump 360. Stump is an evening event that, to my surprise as much as anyone else’s, has become a tradition at 360iDev. What is Stump 360? Stump started as an unofficial spin-off of “Stump the Experts” at Apple WWDC, which ran for many years. The two overlapped by a year or two, but WWDC Stump stopped several years ago.",
    "author": "",
    "published": "Thu, 02 Sep 2021 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "e668afd3-fc73-4696-87f1-35d73e495440",
    "title": "Core Data Backups, Redux",
    "link": "https://atomicbird.com/blog/core-data-backups-redux/",
    "description": "This is the second of two posts following up on my earlier post about backing up and restoring Core Data. My past post covered the difficulty of learning how to use mostly-undocumented framework methods, specifically about a Core Data method called replacePersistentStore(...). Arnaud Joubay recently messaged me to ask why I used a different approach when backing up and restoring persistent stores. Now that I’ve had some time to look at that method and work out what I can about how to use it, let’s see how it works in practice.",
    "author": "",
    "published": "Mon, 29 Mar 2021 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "a12fef6e-7436-46b8-abc3-bc91021401dc",
    "title": "Mostly Undocumented",
    "link": "https://atomicbird.com/blog/mostly-undocumented/",
    "description": "Last year I wrote about backing up and restoring Core Data. Recently Arnaud Joubay messaged me to ask about it. I used a method called migratePersistentStore(...) to duplicate a persistent store. Arnaud asked why I had not used a similar method called replacePersistentStore(...) instead. He also sent me a link to a post on Apple’s dev forum site, attributed to an anonymous framework engineer, which had this to say on the topic:",
    "author": "",
    "published": "Thu, 25 Mar 2021 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "a5f33a54-0723-482f-af21-c763a04a7065",
    "title": "Backing up Core Data Stores",
    "link": "https://atomicbird.com/blog/core-data-back-up-store/",
    "description": "Today we’re going to travel back in time a little with Core Data. Or at least find out how your app can do so. What if you want to make a backup copy of your app’s data? What if you want to restore from that backup later on? This won’t be mainly about data safety, because your app’s data will be getting backed up to the user’s iCloud account and, maybe, their Mac.",
    "author": "",
    "published": "Tue, 26 May 2020 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "28086ed8-4b54-4963-9926-b96a9c713b5d",
    "title": "Adding thumbnails with PDFKit",
    "link": "https://atomicbird.com/blog/pdfkit-thumbnails/",
    "description": "Today I’m continuing with some ideas from my recent post about using PDFKit. In that post I was using a custom PDF view for an app that would work something like a basic slide presentation app. Part of that was adding a thumbnail view with PDFThumbnailView, which ended up looking like this. PDFThumbnailView works with a PDFView and generates thumbnails for pages in the current document. You can tell it how big the thumbnails should be and whether to arrange the thumbnails horiontally or vertically, but that’s about it as far as layout goes.",
    "author": "",
    "published": "Wed, 15 Apr 2020 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "fbc4d67d-0051-4b7d-8210-92deb884528c",
    "title": "JSON vs Property Lists, Revisited",
    "link": "https://atomicbird.com/blog/json-vs-plists-2020/",
    "description": "In a previous post I wrote about How JSON compares to Apple property lists and the obstacles to converting data between them. That was a while ago but the post is still accurate, as far as it goes. But Swift changes the situation in some ways, so an update is in order. Recap: JSON vs. Property Lists The previous post was motivated by the problems some people encountered trying to download JSON from a server and then save it as a property list.",
    "author": "",
    "published": "Tue, 03 Mar 2020 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "704ecbf3-177d-40bd-8c95-ada523e41517",
    "title": "Getting started with PDFKit",
    "link": "https://atomicbird.com/blog/pdfkit-basics/",
    "description": "In my post about my custom presentation slide app I mentioned that because of time constraints, I decided against doing my own slide layout. Instead I’d do that in DeckSet, export my slides to PDF, and show the PDFs in my app. So, how do you do that then? Getting a PDF on the screen The basics of PDFKit are actually pretty basic. If you have a PDF, you create a PDFDocument to hold it and a PDFView to display it.",
    "author": "",
    "published": "Wed, 26 Feb 2020 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "4774ec72-9a58-4af3-a112-4e2c0079031e",
    "title": "Interactive Presentation Slides at 360iDev",
    "link": "https://atomicbird.com/blog/interactive-presentation-slides-at-360idev/",
    "description": "This is a story of how a trip to a karaoke bar led to me writing my own app to display presentation slides. Of how a user interface that allows live smartass comments led to me being completely nerd sniped until I was able to do something I’ve never seen in a conference session– however silly the result was. In the end audience members could send Emoji and other images directly to the slides during the session, which ended up looking like this.",
    "author": "",
    "published": "Tue, 28 Jan 2020 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "71b9466c-85a2-4c99-8def-061275238558",
    "title": "Better logging with Emoji",
    "link": "https://atomicbird.com/blog/emoji-logging/",
    "description": "Apple’s developer tools provide a rich variety of debugging aids. Sometimes though, it’s useful to do things the old fashioned way. With debugging, this often means just printing out data while your code runs, and then looking through the results to see what’s going on. Some scenarios where printing debug data helps include: When you need to check on something that happens a lot. When the mental context switching between using your app and using the debugger gets to be too much.",
    "author": "",
    "published": "Fri, 17 Jan 2020 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "250c9d21-3707-4ab7-9dc5-c03933e0d4f9",
    "title": "Return to Independence",
    "link": "https://atomicbird.com/blog/return-to-independence/",
    "description": "Aaaaand, I’m back. It’s been a long time since I posted anything here. Mainly this was because I worked full time for a while. I found it hard to work all day on someone else’s project, then come home and do even more blog-worthy code-related stuff. At the end of the work day I was done with code. So, this blog faded away. Back before that, in my glorious years of independence, I could find time to explore whatever technical areas caught my eye.",
    "author": "",
    "published": "Tue, 14 Jan 2020 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "786edeb1-d8eb-4132-aa80-d7798c13d92b",
    "title": "BombBomb in the Gazette",
    "link": "https://atomicbird.com/blog/bombbomb-gazette/",
    "description": "The Colorado Springs Gazette just did a nice feature article about BombBomb, the place where I write apps these days. The best part (for me) is that the lead photo shows Conor McCluskey (our CEO) showing off an iMessage extension I wrote for the company’s app.",
    "author": "",
    "published": "Sat, 04 Nov 2017 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "c60d6608-c479-4148-8e8a-c6f3d9dcca7d",
    "title": "Data Detection in Swift",
    "link": "https://atomicbird.com/blog/data-detection-in-swift/",
    "description": "I have a love/hate relationship with regular expressions. I love them because they’re great for examining text to find useful information and, often, to change the text in some way. I hate them because once you get beyond basic matching, they descend into bizarre write-only code that gives me flashbacks to my days writing Perl. In extreme cases they may well endanger the universe. And so we come to one of my recent coding issues: How can I find out if a string contains a valid email address?",
    "author": "",
    "published": "Wed, 25 Oct 2017 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "4652c83b-6b04-4686-a1b3-1a25355ca938",
    "title": "Migrating from Dropbox",
    "link": "https://atomicbird.com/blog/migrating-from-dropbox/",
    "description": "Over the past year or so I’ve been trying out Resilio Sync (formerly BitTorrent Sync) as a possible alternative to Dropbox. It’s gradually improved to where I think I can rely on it. With my Dropbox subscription up for renewal in a couple of weeks, now’s the time. In this post I’ll describe how to set up Resilio to get a Dropbox-like experience. What I want from file syncing I’ve used Dropbox for several years now.",
    "author": "",
    "published": "Thu, 10 Nov 2016 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "fe6d3468-a3a9-4a54-a2d4-db17f38c6c6e",
    "title": "Date Math is Hard, Let's Do it Tomorrow",
    "link": "https://atomicbird.com/blog/date-math-is-hard-lets-do-it-tomorrow/",
    "description": "This post is based on a lightning talk I gave at CocoaConf San Jose a couple of days ago. It’s that time of year– the time when summer time, or “Daylight Saving Time” as we for some reason call it in the USA– is ending. That time when a developer’s thoughts turn to date math and what a pain in the ass it can be. Why is this so hard to get right?",
    "author": "",
    "published": "Sun, 06 Nov 2016 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "42ffac74-3f66-4ef6-8ab1-201f87ed018d",
    "title": "My other blog",
    "link": "https://atomicbird.com/blog/my-other-blog/",
    "description": "I try to keep this blog on topic, sticking to technical posts of interest to iOS and macOS developers. So when I wanted to write about something else I set up a different blog unrelated to my business. As some of you are aware, when I’m not working on apps I’m also a radio DJ, at KRCC in Colorado Springs, CO. If you aren’t, you might still have noticed how I used to win prizes at “Stump the Experts” at Apple WWDC by identifying song.",
    "author": "",
    "published": "Fri, 09 Sep 2016 00:00:00 +0000",
    "image": "",
    "source": "https://atomicbird.com/index.xml",
    "categories": null
  },
  {
    "id": "71a6316f-2962-4cc8-9950-5a9cbc7b071c",
    "title": "NetNewsWire and Conditional GET Issues",
    "link": "https://inessential.com/2024/08/03/netnewswire_and_conditional_get_issues.html",
    "description": "I had thought that NetNewsWire’s conditional GET support was rock-solid — and so my first reaction was to be very surprised to learn that it’s not! My second reaction was to be appreciative — Rachel’s work here on setting up a test server and reporting on the results is really great. My goal has always been to make NetNewsWire a model net citizen, and learning where it’s not is super valuable. So: much respect and thanks to Rachel for this. The Data Let’s look at some data and try to figure out what’s happening. Here’s Rachel’s report for NetNewsWire. Things to know: these are all requests for a NetNewsWire-specific feed, and the copy of NetNewsWire making these requests is on my personal laptop. That laptop is occasionally used for development, which can throw things off, but not often. You can even see in the data a gap lasting just over two weeks where there were no requests (I was on vacation). (You can also see some anomalies from when I had it on my dev machine also — ignore every row where ip is v6, since that’s my dev machine.) Another thing to know: this is testing direct feed-reading, as with the On My Mac (or iPhone/iPad) and iCloud accounts. With systems such as Feedly, Feedbin, and so on, we get the data from the sync system and not directly from the site. Ignoring Timing Issues Let’s set aside, at least for today, the timing issues. That situation could be improved, but it very much reflects that this is a desktop app with a command that allows you to refresh feeds manually, without having to wait for the next poll. Conditional GET Issues First, a refresher on how this should work. When a server returns a Last-Modified header, the client should return that exact same string in follow-up requests in an If-Modified-Since header. The server then looks at the If-Modified-Since header and decides to either return a 200 plus the feed — if it has been modified since — or return a 304 Not Modified response and an empty body. It’s the same story with the Etag header. The client should save it and return it in follow-up requests in an If-None-Match header. This is great because it can save a ton of bandwidth, which is great for server and app alike. And NetNewsWire’s been doing this since the early 2000s. But clearly there’s a bug! In some cases, NetNewsWire is not picking up and saving the changed Last-Modified and Etag headers. Sometimes it does, and sometimes it keeps using whatever it already had and ignores the new ones. What could account for this? Let’s look at the logic. Feed processing logic Here’s what happens when a feed download completes without errors and the content is non-empty: First we check the hash of the raw feed data against the hash of the raw feed data the last time it actually changed. If those hashes match, then the app stops processing, because the feed hasn’t changed: it’s exactly the same as last time. This is an optimization that deals with the fact that many servers unfortunately don’t support conditional GET. It allows the app to skip feed parsing and updating the database. Saves a bunch of work. Good for battery life. If the hashes don’t match, then processing continues: it parses the feed and then sends the parsed articles to the code that updates the database. After that it updates and saves the hash of the raw feed data, and finally it stores the conditional GET info — it saves any Last-Modified and Etag header values to send with the next request. This isn’t actually the code, but it’s what the logic looks like: downloadDidComplete(httpResponse, feed, feedData) hash = feedData.md5 if hash == feed.previousHash then return parsedFeed = parse(feedData) updateDatabase(feed, parsedFeed) feed.previousHash = hash feed.conditionalGetInfo = conditionalGetInfoFromResponse(httpResponse) My theory There’s a great chance you’ve already spotted what I think is the issue: it’s that optimization where we check the hash of the raw feed data and return if it matches the previous hash. Here’s what I think has happened in some of the tests: the raw feed data was unchanged, but one or both of the Last-Modified and Etag header values did change. NetNewsWire never picked up the changes to those headers, because that code didn’t run — it had already bailed when it saw that the raw feed data was unchanged. The assumption I made when I wrote this code was that if the raw feed data was unchanged then of course the Last-Modified and Etag header values would be unchanged too, so there was no need to check to see if they were new. And I think that in real-world situations this is probably true pretty much all the time, and it’s only in tests like this where my assumption wouldn’t be true. But I can’t say that for sure! This is a real bug, and we’ll fix it and add a test or tests to make sure it doesn’t happen again. Here’s what the new logic should look like: downloadDidComplete(httpResponse, feedData, feed) hash = feedData.md5 if hash != feed.previousHash { parsedFeed = parse(feedData) updateDatabase(feed, parsedFeed) feed.previousHash = hash } feed.conditionalGetInfo = conditionalGetInfoFromResponse(httpResponse) With the above logic, conditionalGetInfo gets updated no matter what. PS There could be other bugs My theory does point to a bug that should get fixed. But is it the only bug? Is it even the bug that causes the issues in these tests? Though I’m pretty confident that this is the bug — seems pretty obvious, right? — more investigation and testing is warranted.",
    "author": "",
    "published": "Sat, 03 Aug 2024 14:21:37 -0700",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "92c09e1e-97c4-4396-89af-4b333f65b675",
    "title": "Reruns",
    "link": "https://inessential.com/2024/02/08/reruns.html",
    "description": "It’s not a bug in your RSS reader if recent articles in this feed all suddenly appeared as unread. You may even have seeming duplicates. Sorry about that! It’s due to my changing settings in my blog generator. Pages now have a .html suffix where before they had none. This change impacts permalinks, which also changes the guids in my RSS feed — and NetNewsWire and other RSS readers use the guid property to identify articles, which means these will show up as new articles. (Note: I’ve created redirects so that old links pointing in will still work.)",
    "author": "",
    "published": "Thu, 08 Feb 2024 08:16:00 -0800",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "915616be-0c2f-4594-8f04-ab5ac95c0787",
    "title": "Why NetNewsWire Isn’t Available for Vision Pro",
    "link": "https://inessential.com/2024/02/04/why_netnewswire_isnt_available_for_vision_pro.html",
    "description": "I’ve been getting questions about NetNewsWire’s unavailability on Vision Pro. Why isn’t it there? When might it be there? Here’s the scoop: I consider it risky to support an app running on a device I don’t own. Imagine writing a Mac or iPhone app and not actually running it on one of those machines — you wouldn’t. I realize that the app would act as if it were running on an iPad — but the Vision Pro is not really an iPad. It’s a device with very different interactions from the direct manipulation we’re used to on iPad. And the compatibility mode is a new thing because this device is a new thing — we don’t know how well it works and what the gotchas might be. I could test it on the simulator, sure, but the simulator is a convenience for developers. It’s no replacement for running it on a real device. And, yes, the app is open source, which could mean that other developers with a Vision Pro could help support it — but it’s important to remember that I’m the only person who has to support it. The NetNewsWire team is awesome, but I’m the one on the line for this. So I want to be careful and go slowly, because if I made it available it would be extremely difficult to reverse the decision and take it away, even with an excellent reason. I’m hoping that a consensus will form among developers that running apps on Vision Pro as iPad apps is fine, that it’s a cakewalk. If that happens, I’d go ahead and do it too. But it’s too soon for us to know that. PS Why don’t I have a Vision Pro? I’m sure it’s an incredible technical achievement and an amazing experience — and pretty damn wonderful in just about every way — but it’s just not my thing. I like reading and writing mostly, plus making apps for reading and writing. My personal future of computing has been here for all these years — the Mac. PPS Eventually the price will come down to where I’d consider buying one as a test device and for a little fun — but that may be a few years away. I’m hoping that we’ll find, sooner than that, that running as iPad on Vision Pro is a-okay.",
    "author": "",
    "published": "Sun, 04 Feb 2024 22:39:09 -0800",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "e134c1b3-9244-48af-8f08-d324cbcd6920",
    "title": "Corporations Are Not To Be Loved",
    "link": "https://inessential.com/2024/01/17/corporations_are_not_to_be_loved.html",
    "description": "I started using Apple computers — and writing code for them, starting with BASIC — 43 years ago, before the Macintosh, even, and I’ve made this my career. I’ve had all these decades to really, thoroughly delight in these incredible machines and software, and to give a little back with my own apps. Apple’s positive effect on my life should not be underestimated. My Mom once (lovingly, teasingly) said to me that my alternate career, had all this never happened, was “criminal genius.” Which might have been fun too, but possibly more stressful than I might have liked. At any rate, Apple has saved me from a life of crime, and I should love Apple for that. But I need to remember, now and again, that Apple is a corporation, and corporations aren’t people, and they can’t love you back. You wouldn’t love GE or Exxon or Comcast — and you shouldn’t love Apple. It’s not an exception to the rule: there are no exceptions. Apple doesn’t care about you personally in the least tiny bit, and if you were in their way somehow, they would do whatever their might — effectively infinite compared to your own — enables them to deal with you. Luckily, Apple has just provided us all with a reminder. Just like the sixth finger in an AI-rendered hand, Apple’s policies for Distributing apps in the U.S. that provide an external purchase link are startlingly graceless and a jarring, but not surprising, reminder that Apple is not a real person and not worthy of your love.",
    "author": "",
    "published": "Wed, 17 Jan 2024 10:25:56 -0800",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  },
  {
    "id": "32cc03f1-ff38-4be6-ab76-71e96639154a",
    "title": "On Mastodon Support in NetNewsWire",
    "link": "https://inessential.com/2023/12/17/on_mastodon_support_in_netnewswire.html",
    "description": "Tim Chambers, admin of the Mastodon server indieweb.social, which hosts my personal account and the NetNewsWire account, asked me if ActivityPub support is on the roadmap for NetNewsWire. Great question! Tim was responding to Richard MacManus: Are there any RSS Readers that are trying to integrate ActivityPub too? Pondering the glut of email newsletters in our inboxes these days, and wondering if we are due for an RSS Reader renaissance, except with a fediverse twist this time… I hear this. It’s not the first time this has come up, and I’ve spent the past year or so thinking about it. Since RSS is an open web thing that brings you stuff people write, and ActivityPub is also an open web thing that brings you stuff people write, it’s an obvious good idea to do both in the same app. Totally. But the question was specifically about NetNewsWire. We will make NetNewsWire work better with Mastodon-generated RSS feeds. There are some things we’re not doing yet that will make reading these a better experience. But should NetNewsWire become a Mastodon client? That’s where the answer is not so obvious. * * * Let’s compare the NetNewsWire and Mastodon experiences. NetNewsWire is a three-paned RSS reader. Sidebar (accounts, folders, feeds) on the left. Timeline (titles and/or first few lines) in the middle. Article on the right. See these screenshots to get the idea. Each article has a read/unread status. Selecting an article marks it as read, and there are commands to mark all as read (and mark all as read above or below the selection). This is not the only good model for an RSS reader, but it’s how NetNewsWire works — and it’s a bad fit for a Mastodon reading experience. Whether you use Mastodon on the web or in an app you’re used to a single timeline per account (with perhaps side streams for mentions and such). All posts from everyone you follow appear in that single timeline. You don’t deal with read/unread status — instead you have a chronological position. The timeline shows the entire post (usually), instead of an optional title and first few lines. There is no third article view, because the entire post is displayed in the timeline. This experience isn’t unique to Mastodon, of course — that’s how X, Threads, Micro.blog, Bluesky, and other social media apps work. But it’s not how NetNewsWire works, and if we try to mash that experience into the app — but have it on only when a Mastodon account is selected — we’d end up with a confusion that feels like two very different apps. Because it would be. * * * A second option: we could not change the experience and just assume that some people would like to use Mastodon in a NetNewsWire way instead of in the usual social media way. I’m extremely skeptical of this idea — I think it would be a pain, and I think most people who try it would drop it. The third option, which I think is best, which we already do, is to support Mastodon via RSS. (Mastodon feeds are usually available as RSS — you can add .rss to the end of a URL to get a feed.) There might be some Mastodon accounts you want to follow in your RSS reader instead of in your Mastodon client. Think of an account for a website that doesn’t have an RSS feed, but that reliably posts links to articles. Or a person you want to follow — but you don’t want to show up in their follower list. (Sounds a little antisocial, sure, but you can imagine good reasons.) We can, and will, do more to make Mastodon-over-RSS a good experience in NetNewsWire. Right now we’re not picking up avatars or image attachments, which we can fix. There might be more things like that to do. We might add the ability to post to Mastodon, since it’s a natural thing to want to share stuff from your RSS reader to Mastodon. But I don’t think we’ll make NetNewsWire a real Mastodon client. * * * It still seems like RSS and Mastodon could fit in the same app, though! If I were designing it, I’d start with the social media experience: the single timeline of posts. Very simple sidebar. No article view. No read/unread status — just position in the timeline. You could add RSS feeds, but they’d be treated like Mastodon posts. Any article short enough would appear in full in the timeline, but most would probably have to be truncated. You’d open articles in your browser, just like you do now with social media apps (there’d be no third article pane). Such an app could be a nice unified experience. Get your Mastodon, Threads, RSS feeds, Micro.blog and, hopefully, other services — anything that supports ActivityPub, RSS, or some other open format or API — all in one place, in a way that’s already familiar to everyone. Sounds pretty great! But it’s not NetNewsWire.",
    "author": "",
    "published": "Sun, 17 Dec 2023 18:56:35 -0800",
    "image": "",
    "source": "https://inessential.com/xml/rss.xml",
    "categories": null
  }
]
