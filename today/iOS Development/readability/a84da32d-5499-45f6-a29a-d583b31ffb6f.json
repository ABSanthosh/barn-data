{
  "id": "a84da32d-5499-45f6-a29a-d583b31ffb6f",
  "title": "Scroll geometry and position view modifiers in SwiftUI on iOS 18",
  "link": "https://augmentedcode.io/2024/07/01/scroll-geometry-and-position-view-modifiers-in-swiftui-on-ios-18/",
  "description": "WWDC’24 brought some updates to scrolling. One of which is onScrollGeometryChange(for:of:action:) what we can use for reacting to scroll geometry changes. The view modifier has two closures, where the first one is transforming the scroll geometry into an arbitrary equatable type of our liking. If that value changes, the action closure is called. It is […]",
  "author": "Toomas Vahter",
  "published": "Mon, 01 Jul 2024 15:00:00 +0000",
  "source": "https://augmentedcode.io/feed/",
  "categories": [
    "Swift",
    "SwiftUI",
    "iOS",
    "ScrollView",
    "WWDC24"
  ],
  "byline": "",
  "length": 3584,
  "excerpt": "WWDC’24 brought some updates to scrolling. One of which is onScrollGeometryChange(for:of:action:) what we can use for reacting to scroll geometry changes. The view modifier has two closures, …",
  "siteName": "Augmented Code",
  "favicon": "https://augmentedcode.io/wp-content/uploads/2017/11/site-icon.png?w=192",
  "text": "WWDC’24 brought some updates to scrolling. One of which is onScrollGeometryChange(for:of:action:) what we can use for reacting to scroll geometry changes. The view modifier has two closures, where the first one is transforming the scroll geometry into an arbitrary equatable type of our liking. If that value changes, the action closure is called. It is a convenient way for triggering view updates or updating other states. The new ScrollGeometry type provides the current scroll state: bounds containerSize contentInsets contentOffset contentSize visibleRect Here is another example where we can use the new modifier for showing a scroll to top button in combination with the new scrollPosition(_:anchor:) view modifier. This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters struct ContentView: View { let items: [String] = (0..\u003c100).map({ \"Item \\($0)\" }) @State private var canScrollToTop = false @State private var scrollPosition = ScrollPosition(idType: String.self) var body: some View { ScrollView { ForEach(items, id: \\.self) { item in Text(item) .frame(maxWidth: .infinity) .padding() .onScrollVisibilityChange() { visible in print(item, visible) } } } .scrollPosition($scrollPosition) .overlay(alignment: .top) { if canScrollToTop { Button(\"Top\") { withAnimation { scrollPosition.scrollTo(edge: .top) } } } } .onScrollGeometryChange( for: Bool.self, of: { scrollGeometry in scrollGeometry.contentOffset.y \u003e 50 }, action: { oldValue, newValue in canScrollToTop = newValue } ) } } If this was helpful, please let me know on Mastodon@toomasvahter or Twitter @toomasvahter. Feel free to subscribe to RSS feed. Thank you for reading.",
  "image": "https://augmentedcode.io/wp-content/uploads/2017/11/site-icon.png?w=200",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\t\n\u003cp\u003eWWDC’24 brought some updates to scrolling. One of which is \u003ca href=\"https://developer.apple.com/documentation/swiftui/view/onscrollgeometrychange(for:of:action:)\"\u003eonScrollGeometryChange(for:of:action:)\u003c/a\u003e what we can use for reacting to scroll geometry changes. The view modifier has two closures, where the first one is transforming the scroll geometry into an arbitrary equatable type of our liking. If that value changes, the action closure is called. It is a convenient way for triggering view updates or updating other states.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe new \u003ca href=\"https://developer.apple.com/documentation/swiftui/scrollgeometry\"\u003eScrollGeometry\u003c/a\u003e type provides the current scroll state:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebounds\u003c/li\u003e\n\n\n\n\u003cli\u003econtainerSize\u003c/li\u003e\n\n\n\n\u003cli\u003econtentInsets\u003c/li\u003e\n\n\n\n\u003cli\u003econtentOffset\u003c/li\u003e\n\n\n\n\u003cli\u003econtentSize\u003c/li\u003e\n\n\n\n\u003cli\u003evisibleRect\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHere is another example where we can use the new modifier for showing a scroll to top button in combination with the new \u003ca href=\"https://developer.apple.com/documentation/swiftui/view/scrollposition(_:anchor:)\"\u003escrollPosition(_:anchor:)\u003c/a\u003e view modifier.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cdiv itemprop=\"text\" id=\"gist131127566\" translate=\"no\" data-color-mode=\"light\" data-light-theme=\"light\"\u003e\n\n  \u003ctemplate\u003e\n  \u003cdiv data-view-component=\"true\"\u003e\n  \n    \u003cp\u003e\u003cspan\u003e\n      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.\n      \u003ca href=\"https://github.co/hiddenchars\" target=\"_blank\"\u003eLearn more about bidirectional Unicode characters\u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\u003c/template\u003e\n\u003ctemplate\u003e\n  \u003cspan aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\"\u003e\n    \n\u003c/span\u003e\u003c/template\u003e\n\n  \u003ctable data-hpc=\"\" data-tab-size=\"8\" data-paste-markdown-skip=\"\" data-tagsearch-lang=\"Swift\" data-tagsearch-path=\"ContentView.swift\"\u003e\n        \u003ctbody\u003e\u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L1\" data-line-number=\"1\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC1\"\u003estruct ContentView: View {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L2\" data-line-number=\"2\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC2\"\u003e  let items: [String] = (0..\u0026lt;100).map({ \u0026#34;Item \\($0)\u0026#34; })\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L3\" data-line-number=\"3\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC3\"\u003e  @State private var canScrollToTop = false\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L4\" data-line-number=\"4\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC4\"\u003e  @State private var scrollPosition = ScrollPosition(idType: String.self)\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L5\" data-line-number=\"5\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC5\"\u003e\n\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L6\" data-line-number=\"6\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC6\"\u003e  var body: some View {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L7\" data-line-number=\"7\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC7\"\u003e    ScrollView {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L8\" data-line-number=\"8\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC8\"\u003e      ForEach(items, id: \\.self) { item in\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L9\" data-line-number=\"9\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC9\"\u003e        Text(item)\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L10\" data-line-number=\"10\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC10\"\u003e          .frame(maxWidth: .infinity)\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L11\" data-line-number=\"11\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC11\"\u003e          .padding()\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L12\" data-line-number=\"12\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC12\"\u003e          .onScrollVisibilityChange() { visible in\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L13\" data-line-number=\"13\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC13\"\u003e            print(item, visible)\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L14\" data-line-number=\"14\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC14\"\u003e          }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L15\" data-line-number=\"15\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC15\"\u003e      }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L16\" data-line-number=\"16\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC16\"\u003e    }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L17\" data-line-number=\"17\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC17\"\u003e    .scrollPosition($scrollPosition)\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L18\" data-line-number=\"18\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC18\"\u003e    .overlay(alignment: .top) {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L19\" data-line-number=\"19\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC19\"\u003e      if canScrollToTop {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L20\" data-line-number=\"20\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC20\"\u003e        Button(\u0026#34;Top\u0026#34;) {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L21\" data-line-number=\"21\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC21\"\u003e          withAnimation {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L22\" data-line-number=\"22\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC22\"\u003e            scrollPosition.scrollTo(edge: .top)\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L23\" data-line-number=\"23\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC23\"\u003e          }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L24\" data-line-number=\"24\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC24\"\u003e        }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L25\" data-line-number=\"25\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC25\"\u003e      }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L26\" data-line-number=\"26\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC26\"\u003e    }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L27\" data-line-number=\"27\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC27\"\u003e    .onScrollGeometryChange(\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L28\" data-line-number=\"28\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC28\"\u003e      for: Bool.self,\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L29\" data-line-number=\"29\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC29\"\u003e      of: { scrollGeometry in\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L30\" data-line-number=\"30\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC30\"\u003e        scrollGeometry.contentOffset.y \u0026gt; 50\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L31\" data-line-number=\"31\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC31\"\u003e      },\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L32\" data-line-number=\"32\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC32\"\u003e      action: { oldValue, newValue in\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L33\" data-line-number=\"33\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC33\"\u003e        canScrollToTop = newValue\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L34\" data-line-number=\"34\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC34\"\u003e      }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L35\" data-line-number=\"35\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC35\"\u003e    )\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L36\" data-line-number=\"36\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC36\"\u003e  }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-contentview-swift-L37\" data-line-number=\"37\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-contentview-swift-LC37\"\u003e}\u003c/td\u003e\n        \u003c/tr\u003e\n  \u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf this was helpful, please let me know on \u003ca href=\"https://mastodon.social/@toomasvahter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMastodon@toomasvahter\u003c/a\u003e or \u003ca rel=\"noreferrer noopener\" href=\"https://twitter.com/toomasvahter\" target=\"_blank\"\u003eTwitter @toomasvahter\u003c/a\u003e. Feel free to subscribe to \u003ca rel=\"noreferrer noopener\" aria-label=\"RSS feed (opens in a new tab)\" href=\"https://augmentedcode.io/blog/feed/\" target=\"_blank\"\u003eRSS feed\u003c/a\u003e. Thank you for reading.\u003c/p\u003e\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\t\t\n\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-07-01T15:00:00Z",
  "modifiedTime": "2024-06-30T19:36:55Z"
}
