{
  "id": "3339c955-9a00-45ae-a739-2180733ee8f5",
  "title": "Pattern matching on error codes",
  "link": "https://oleb.net/2023/catch-error-code/",
  "description": "",
  "author": "Ole Begemann",
  "published": "2023-02-27T19:32:22Z",
  "source": "https://oleb.net/blog/atom.xml",
  "categories": null,
  "byline": "By Ole Begemann …",
  "length": 2044,
  "excerpt": "Foundation overloads the pattern matching operator ~= to enable matching against error codes in catch clauses.",
  "siteName": "Ole Begemann",
  "favicon": "",
  "text": "Foundation overloads the pattern matching operator ~= to enable matching against error codes in catch clauses. catch clauses in Swift support pattern matching, using the same patterns you’d use in a case clause inside a switch or in an if case … statement. For example, to handle a file-not-found error you might write: import Foundation do { let fileURL = URL(filePath: \"/abc\") // non-existent file let data = try Data(contentsOf: fileURL) } catch let error as CocoaError where error.code == .fileReadNoSuchFile { print(\"File doesn't exist\") } catch { print(\"Other error: \\(error)\") } This binds a value of type CocoaError to the variable error and then uses a where clause to check the specific error code. However, if you don’t need access to the complete error instance, there’s a shorter way to write this, matching directly against the error code: let data = try Data(contentsOf: fileURL) - } catch let error as CocoaError where error.code == .fileReadNoSuchFile { + } catch CocoaError.fileReadNoSuchFile { print(\"File doesn't exist\") Foundation overloads ~= I was wondering why this shorter syntax works. Is there some special compiler magic for pattern matching against error codes of NSError instances? Turns out: no, the answer is much simpler. Foundation includes an overload for the pattern matching operator ~= that matches error values against error codes.1 The implementation looks something like this: public func ~= (code: CocoaError.Code, error: any Error) -\u003e Bool { guard let error = error as? CocoaError else { return false } return error.code == code } The actual code in Foundation is a little more complex because it goes through a hidden protocol named _ErrorCodeProtocol, but that’s not important. You can check out the code in the Foundation repository: Darwin version, swift-corelibs-foundation version. This matching on error codes is available for CocoaError, URLError, POSIXError, and MachError (and possibly more types in other Apple frameworks, I haven’t checked).",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n          \u003cp\u003e\u003cstrong\u003eFoundation overloads the pattern matching operator \u003ccode\u003e~=\u003c/code\u003e to enable matching against error codes in \u003ccode\u003ecatch\u003c/code\u003e clauses.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003ecatch\u003c/code\u003e clauses in Swift support pattern matching, using the same \u003ca href=\"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/patterns/\"\u003epatterns\u003c/a\u003e you’d use in a \u003ccode\u003ecase\u003c/code\u003e clause inside a \u003ccode\u003eswitch\u003c/code\u003e or in an \u003ccode\u003eif case …\u003c/code\u003e statement. For example, to handle a \u003ca href=\"https://developer.apple.com/documentation/foundation/cocoaerror/2506537-filereadnosuchfile\"\u003efile-not-found error\u003c/a\u003e you might write:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eFoundation\u003c/span\u003e\n\n\u003cspan\u003edo\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003efileURL\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efilePath\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;/abc\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e// non-existent file\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003edata\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003eData\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econtentsOf\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003efileURL\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003e\u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eerror\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e \u003cspan\u003eCocoaError\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e \u003cspan\u003eerror\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efileReadNoSuchFile\u003c/span\u003e\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;File doesn\u0026#39;t exist\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003cspan\u003ecatch\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Other error: \u003c/span\u003e\u003cspan\u003e\\(\u003c/span\u003e\u003cspan\u003eerror\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis binds a value of type \u003ca href=\"https://developer.apple.com/documentation/foundation/cocoaerror\"\u003e\u003ccode\u003eCocoaError\u003c/code\u003e\u003c/a\u003e to the variable \u003ccode\u003eerror\u003c/code\u003e and then uses a \u003ccode\u003ewhere\u003c/code\u003e clause to check the specific error code.\u003c/p\u003e\n\n\u003cp\u003eHowever, if you don’t need access to the complete error instance, there’s a shorter way to write this, matching directly against the error code:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e      let data = try Data(contentsOf: fileURL)\n\u003cspan\u003e- } catch let error as CocoaError where error.code == .fileReadNoSuchFile {\n\u003c/span\u003e\u003cspan\u003e+ } catch CocoaError.fileReadNoSuchFile {\n\u003c/span\u003e      print(\u0026#34;File doesn\u0026#39;t exist\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"foundation-overloads-\"\u003eFoundation overloads \u003ccode\u003e~=\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eI was wondering why this shorter syntax works. Is there some special compiler magic for pattern matching against error codes of \u003ca href=\"https://developer.apple.com/documentation/foundation/nserror\"\u003e\u003ccode\u003eNSError\u003c/code\u003e\u003c/a\u003e instances? Turns out: no, the answer is much simpler. Foundation includes an overload for \u003ca href=\"https://developer.apple.com/documentation/swift/~=(_:_:)\"\u003ethe pattern matching operator \u003ccode\u003e~=\u003c/code\u003e\u003c/a\u003e that matches error values against error codes.\u003csup id=\"fnref:1\" role=\"doc-noteref\"\u003e\u003ca href=\"#fn:1\" rel=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003eThe implementation looks something like this:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003e~=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCocoaError\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eCode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eerror\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eany\u003c/span\u003e \u003cspan\u003eError\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eBool\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eguard\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eerror\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eerror\u003c/span\u003e \u003cspan\u003eas?\u003c/span\u003e \u003cspan\u003eCocoaError\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eerror\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecode\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003ecode\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe actual code in Foundation is a little more complex because it goes through a hidden protocol named \u003ccode\u003e_ErrorCodeProtocol\u003c/code\u003e, but that’s not important. You can check out the code in the Foundation repository: \u003ca href=\"https://github.com/apple/swift-corelibs-foundation/blob/6e3a6ac9069f05301e63a93ed365713faf2c5d10/Darwin/Foundation-swiftoverlay/NSError.swift#L503-L510\"\u003eDarwin version\u003c/a\u003e, \u003ca href=\"https://github.com/apple/swift-corelibs-foundation/blob/6e3a6ac9069f05301e63a93ed365713faf2c5d10/Sources/Foundation/NSError.swift#L596-L603\"\u003eswift-corelibs-foundation version\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis matching on error codes is available for \u003ca href=\"https://developer.apple.com/documentation/foundation/cocoaerror\"\u003e\u003ccode\u003eCocoaError\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://developer.apple.com/documentation/foundation/urlerror\"\u003e\u003ccode\u003eURLError\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://developer.apple.com/documentation/foundation/posixerror\"\u003e\u003ccode\u003ePOSIXError\u003c/code\u003e\u003c/a\u003e, and \u003ca href=\"https://developer.apple.com/documentation/foundation/macherror\"\u003e\u003ccode\u003eMachError\u003c/code\u003e\u003c/a\u003e (and possibly more types in other Apple frameworks, I haven’t checked).\u003c/p\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2023-02-27T19:32:22Z",
  "modifiedTime": "2023-02-27T19:32:22Z"
}
