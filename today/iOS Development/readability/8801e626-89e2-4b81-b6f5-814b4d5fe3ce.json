{
  "id": "8801e626-89e2-4b81-b6f5-814b4d5fe3ce",
  "title": "iOS Custom Accessibility Actions",
  "link": "https://mobilea11y.com/blog/a11y-custom-actions/",
  "description": "When testing your app with VoiceOver or Switch Control, a common test is to ensure you can reach every interactive element on screen. If these assistive technologies can’t focus all of your buttons how will your customers be able to interact fully with your app? Except there are times when hiding buttons from your assistive technology users is the better choice. Consider an app with a table view that has many repeating interactive elements - this could be a social media app where ’like, share, reply’ etc is repeated for each post.",
  "author": "",
  "published": "Sun, 01 Aug 2021 07:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 3241,
  "excerpt": "When testing your app with VoiceOver or Switch Control, a common test is to ensure you can reach every interactive element on screen. If these assistive technologies can’t focus all of your buttons how will your customers be able to interact fully with your app? Except there are times when hiding buttons from your assistive technology users is the better choice. Consider an app with a table view that has many repeating interactive elements - this could be a social media app where ’like, share, reply’ etc is repeated for each post. Or perhaps an e-commerce app with ‘wishlist, buy now, add to basket’ are repeated for each item. Visually these buttons won’t interrupt your users skimming the list of content, but for VoiceOver or Switch Control users, they will have to visit each one for every item on the screen. This is going to make navigating your app long and tedious, an means your users are more likely to drop out.",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "When testing your app with VoiceOver or Switch Control, a common test is to ensure you can reach every interactive element on screen. If these assistive technologies can’t focus all of your buttons how will your customers be able to interact fully with your app? Except there are times when hiding buttons from your assistive technology users is the better choice. Consider an app with a table view that has many repeating interactive elements - this could be a social media app where ’like, share, reply’ etc is repeated for each post. Or perhaps an e-commerce app with ‘wishlist, buy now, add to basket’ are repeated for each item. Visually these buttons won’t interrupt your users skimming the list of content, but for VoiceOver or Switch Control users, they will have to visit each one for every item on the screen. This is going to make navigating your app long and tedious, an means your users are more likely to drop out. To improve this, we can actually choose to hide these buttons from our assistive technology users, and in doing so make a better experience for them by turning them into an accessibility custom action. Buttons are accessible by default, so the first step is to hide our button from assistive technology. wishlistButton.isAccessibilityElement = false Next, we need to provide an alternate way for VoiceOver and Switch Control to present our actions to our assistive technology users. UIKit provides us an API to do this with accessibilityCustomActions. By adding our action as an Accessibility Custom Action VoiceOver will now announce ‘Actions available’ and allow users to swipe vertically to hear the options, then double tap to activate one. Switch Control users are presented a menu of all the available options, with an optional image provided by us, this menu is only shown if the Switch Control user decides they want to activate the item. To create our custom action we create a new UIAccessibilityCustomAction providing a name and optional image, and a block or selector to handle the action. Typically this will be the same code as would be executed if your user tapped the visual button. Your code should return true to let the assistive technology know the action has completed successfully, otherwise false. let wishlist = UIAccessibilityCustomAction(name: \"Add to Wishlist\", image: UIImage(systemName: \"wand.and.stars\")) { _ in self.actions?.action(.wishlist) return true } Once we have created all of our actions we need to add them to the view that will present the actions to our user using the accessibilityCustomActions property. In the case of a table view this will be your UITableViewCell, but whichever view you use, the view must be accessible and have an accessibility label defined either explicitly with accessibilityLabel or implicitly through setting a visual text value on a standard UIKit control. accessibilityCustomActions = [wishlist, basket, buyNow] You can find my sample code on github. In the first example I haven’t used custom actions meaning each button is navigated in turn. On the second example the buttons are hidden with custom actions added meaning much less navigation is required for assistive technology users.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cp\u003eWhen testing your app with VoiceOver or Switch Control, a common test is to ensure you can reach every interactive element on screen. If these assistive technologies can’t focus all of your buttons how will your customers be able to interact fully with your app? Except there are times when hiding buttons from your assistive technology users is the better choice. Consider an app with a table view that has many repeating interactive elements - this could be a social media app where ’like, share, reply’ etc is repeated for each post. Or perhaps an e-commerce app with ‘wishlist, buy now, add to basket’ are repeated for each item. Visually these buttons won’t interrupt your users skimming the list of content, but for VoiceOver or Switch Control users, they will have to visit each one for every item on the screen. This is going to make navigating your app long and tedious, an means your users are more likely to drop out.\u003c/p\u003e\n\u003cp\u003eTo improve this, we can actually choose to hide these buttons from our assistive technology users, and in doing so make a better experience for them by turning them into an accessibility custom action. Buttons are accessible by default, so the first step is to hide our button from assistive technology.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewishlistButton.isAccessibilityElement = false\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNext, we need to provide an alternate way for VoiceOver and Switch Control to present our actions to our assistive technology users. UIKit provides us an API to do this with \u003ccode\u003eaccessibilityCustomActions\u003c/code\u003e. By adding our action as an Accessibility Custom Action VoiceOver will now announce ‘Actions available’ and allow users to swipe vertically to hear the options, then double tap to activate one. Switch Control users are presented a menu of all the available options, with an optional image provided by us, this menu is only shown if the Switch Control user decides they want to activate the item.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/customactions.png\" alt=\"Switch Control presenting custom actions\"/\u003e\u003c/p\u003e\n\u003cp\u003eTo create our custom action we create a new \u003ccode\u003eUIAccessibilityCustomAction\u003c/code\u003e providing a name and optional image, and a block or selector to handle the action. Typically this will be the same code as would be executed if your user tapped the visual button. Your code should return true to let the assistive technology know the action has completed successfully, otherwise false.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003elet wishlist = UIAccessibilityCustomAction(name: \u0026#34;Add to Wishlist\u0026#34;,\n                                           image: UIImage(systemName: \u0026#34;wand.and.stars\u0026#34;)) { _ in\n    self.actions?.action(.wishlist)\n    return true\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOnce we have created all of our actions we need to add them to the view that will present the actions to our user using the \u003ccode\u003eaccessibilityCustomActions\u003c/code\u003e property. In the case of a table view this will be your UITableViewCell, but whichever view you use, the view must be accessible and have an accessibility label defined either explicitly with \u003ccode\u003eaccessibilityLabel\u003c/code\u003e or implicitly through setting a visual text value on a standard UIKit control.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eaccessibilityCustomActions = [wishlist, basket, buyNow]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can find my sample code on \u003ca href=\"https://github.com/rwapp/cell-button-actions\"\u003egithub\u003c/a\u003e. In the first example I haven’t used custom actions meaning each button is navigated in turn. On the second example the buttons are hidden with custom actions added meaning much less navigation is required for assistive technology users.\u003c/p\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
