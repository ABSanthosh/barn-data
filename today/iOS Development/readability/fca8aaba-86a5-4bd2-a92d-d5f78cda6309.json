{
  "id": "fca8aaba-86a5-4bd2-a92d-d5f78cda6309",
  "title": "Writing Great iOS Accessibility Labels",
  "link": "https://mobilea11y.com/blog/writing-great-labels/",
  "description": "A good accessibility label lets your customer know exactly what a control does in as few words as possible, without having to rely on implied context. Don’t Add the Element Type iOS already knows your button is a button and your image is an image, it does this using an accessibility trait. If you label your button as ‘Play button’ your VoiceOver customers will hear ‘Play button. Button.’ Keep it Succinct Don’t frustrate your customer by adding too much information to your labels.",
  "author": "",
  "published": "Sun, 03 May 2020 09:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 4402,
  "excerpt": "A good accessibility label lets your customer know exactly what a control does in as few words as possible, without having to rely on implied context.",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "A good accessibility label lets your customer know exactly what a control does in as few words as possible, without having to rely on implied context. Don’t Add the Element Type iOS already knows your button is a button and your image is an image, it does this using an accessibility trait. If you label your button as ‘Play button’ your VoiceOver customers will hear ‘Play button. Button.’ Keep it Succinct Don’t frustrate your customer by adding too much information to your labels. There’s no need to describe photos in detail for example, just let people know what the subject of the photo is. Take another look at the Spotify example from the post on when to use accessibility labels. Here our customer knows they’re on the player screen for Beyoncé’s ‘Pray You Catch Me’, so none of the labels include the name of the track. The pause button doesn’t say ‘Pause Pray You Catch Me by Beyoncé’, but simply ‘pause’. Use a single word wherever you can. Capitalise the First Character This allows VoiceOver to read the label with the correct inflection. Don’t End with a Period Your control’s label is a label, not a sentence, so there is no need to end it with a period. This rule excludes blocks of text. Localise it Ideally, you’ll localise your app into as many languages as practical. This will help you sell in different markets, but more than that, it allows your customers to use your app in the language they are most comfortable with. If you do localise your app, remember to localise your accessibility labels too. Keep it Current Sometimes our on-screen elements will change their behaviours throughout the life of the screen. Perhaps you have a button that acts as a toggle, or a shopping cart’s payment button might include the total value of the cart. It’s important that if your element does change state such as this that you update the accessibility label at the same time. Otherwise, you’ll be lying to your users. Not Just for VoiceOver It can be a common trap to fall into, thinking that accessibility labels are just for VoiceOver, but they’re also used for Voice Control and Braille displays too. This gives us a few other requirements. Voice Control For anything your customer interacts with, the accessibility label should be short enough they can easily say it, repeatedly if needed. And intuitive enough they can figure out what to say without having to ask iOS to tell them by saying ‘show names’. But you can specify alternatives for Voice Control using the accessibilityUserInputLabels property. This property takes an array of localised strings that Voice Control will listen for to toggle this control. Your label, the one displayed by Voice Control should be first, followed by any alternatives. Unfortunately, this functionality is not currently available in SwiftUI. // Giving alternative utterances for Voice Control to listen to for this button in UIKit. buyButton.accessibilityUserInputLabels = [\"Buy\", \"Pay\", \"Purchase\"] Braille For your users who have a Braille display, the accessibility label is the text that is presented to them. This can be a problem if you have forced your accessibility label into a format that means VoiceOver reads it better but will look weird if displayed. I’ve seen this as an issue for reference numbers for example. Let’s say you are building a shopping app, and when your customer makes an order, you present them with a reference number for that order. Your label displays ‘1234’. But VoiceOver reads ‘one thousand two hundred and thirty-four’. This is a bad experience for your VoiceOver customers, so the quick fix here is to add a space between each digit. This is a really bad option for Braille customers, as this then takes up a huge amount of space on their display. In Braille each number begins with a numerical indicator character. So ‘1234’ takes up 5 Braille characters. ‘1 2 3 4’ however, takes up 12. Many Braille displays can render around 14 characters. The best option to fix this would be to use an attributed accessibility label. We’ll cover those in the next post. Sources Apple Writing Great Accessibility Labels Apple Accessibility Programming Guide for iOS. Kristina Fox Adopting Voice Control Next Up The next blog in this series is iOS Attributed Accessibility Labels iOS Accessibility Labels When to use Accessibility Labels Writing Great iOS Accessibility Labels iOS Attributed Accessibility Labels",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cp\u003eA good accessibility label lets your customer know exactly what a control does in as few words as possible, without having to rely on implied context.\u003c/p\u003e\n\u003ch3 id=\"dont-add-the-element-type\"\u003eDon’t Add the Element Type\u003c/h3\u003e\n\u003cp\u003eiOS already knows your button is a button and your image is an image, it does this using an accessibility trait. If you label your button as ‘Play button’ your VoiceOver customers will hear ‘Play button. Button.’\u003c/p\u003e\n\u003ch3 id=\"keep-it-succinct\"\u003eKeep it Succinct\u003c/h3\u003e\n\u003cp\u003eDon’t frustrate your customer by adding too much information to your labels. There’s no need to describe photos in detail for example, just let people know what the subject of the photo is.\nTake another look at the Spotify example from the \u003ca href=\"https://mobilea11y.com/blog/when-to-use-accessibility-labels/\"\u003epost on when to use accessibility labels\u003c/a\u003e. Here our customer knows they’re on the player screen for Beyoncé’s ‘Pray You Catch Me’, so none of the labels include the name of the track. The pause button doesn’t say ‘Pause Pray You Catch Me by Beyoncé’, but simply ‘pause’. Use a single word wherever you can.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/PlayerControlsLabels.jpeg\" alt=\"Play controls for Spotify showing accessibility labels\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"capitalise-the-first-character\"\u003eCapitalise the First Character\u003c/h3\u003e\n\u003cp\u003eThis allows VoiceOver to read the label with the correct inflection.\u003c/p\u003e\n\u003ch3 id=\"dont-end-with-a-period\"\u003eDon’t End with a Period\u003c/h3\u003e\n\u003cp\u003eYour control’s label is a label, not a sentence, so there is no need to end it with a period. This rule excludes blocks of text.\u003c/p\u003e\n\u003ch3 id=\"localise-it\"\u003eLocalise it\u003c/h3\u003e\n\u003cp\u003eIdeally, you’ll localise your app into as many languages as practical. This will help you sell in different markets, but more than that, it allows your customers to use your app in the language they are most comfortable with. If you do localise your app, remember to localise your accessibility labels too.\u003c/p\u003e\n\u003ch3 id=\"keep-it-current\"\u003eKeep it Current\u003c/h3\u003e\n\u003cp\u003eSometimes our on-screen elements will change their behaviours throughout the life of the screen. Perhaps you have a button that acts as a toggle, or a shopping cart’s payment button might include the total value of the cart. It’s important that if your element does change state such as this that you update the accessibility label at the same time. Otherwise, you’ll be lying to your users.\u003c/p\u003e\n\u003ch2 id=\"not-just-for-voiceover\"\u003eNot Just for VoiceOver\u003c/h2\u003e\n\u003cp\u003eIt can be a common trap to fall into, thinking that accessibility labels are just for VoiceOver, but they’re also used for Voice Control and Braille displays too. This gives us a few other requirements.\u003c/p\u003e\n\u003ch3 id=\"voice-control\"\u003eVoice Control\u003c/h3\u003e\n\u003cp\u003eFor anything your customer interacts with, the accessibility label should be short enough they can easily say it, repeatedly if needed. And intuitive enough they can figure out what to say without having to ask iOS to tell them by saying ‘show names’.\nBut you can specify alternatives for Voice Control using the \u003ccode\u003eaccessibilityUserInputLabels\u003c/code\u003e property. This property takes an array of localised strings that Voice Control will listen for to toggle this control. Your label, the one displayed by Voice Control should be first, followed by any alternatives. Unfortunately, this functionality is not currently available in SwiftUI.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e// Giving alternative utterances for Voice Control to listen to for this button in UIKit.\nbuyButton.accessibilityUserInputLabels = [\u0026#34;Buy\u0026#34;, \u0026#34;Pay\u0026#34;, \u0026#34;Purchase\u0026#34;]\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"braille\"\u003eBraille\u003c/h3\u003e\n\u003cp\u003eFor your users who have a Braille display, the accessibility label is the text that is presented to them. This can be a problem if you have forced your accessibility label into a format that means VoiceOver reads it better but will look weird if displayed. I’ve seen this as an issue for reference numbers for example.\u003c/p\u003e\n\u003cp\u003eLet’s say you are building a shopping app, and when your customer makes an order, you present them with a reference number for that order. Your label displays ‘1234’. But VoiceOver reads ‘one thousand two hundred and thirty-four’. This is a bad experience for your VoiceOver customers, so the quick fix here is to add a space between each digit. This is a really bad option for Braille customers, as this then takes up a huge amount of space on their display. In Braille each number begins with a numerical indicator character. So ‘1234’ takes up 5 Braille characters. ‘1 2 3 4’ however, takes up 12. Many Braille displays can render around 14 characters.\u003c/p\u003e\n\u003cp\u003eThe best option to fix this would be to use an attributed accessibility label. We’ll cover those in the next post.\u003c/p\u003e\n\u003ch2 id=\"sources\"\u003eSources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eApple \u003ca href=\"https://developer.apple.com/videos/play/wwdc2019/254/\"\u003eWriting Great Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eApple \u003ca href=\"https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/iPhoneAccessibility/Making_Application_Accessible/Making_Application_Accessible.html\"\u003eAccessibility Programming Guide for iOS\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/krstnfx\"\u003eKristina Fox\u003c/a\u003e \u003ca href=\"https://kristina.io/adopting-voice-control/\"\u003eAdopting Voice Control\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"next-up\"\u003eNext Up\u003c/h2\u003e\n\u003cp\u003eThe next blog in this series is \u003ca href=\"https://mobilea11y.com/blog/attributed-accessibility-labels/\"\u003eiOS Attributed Accessibility Labels\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/ios-accessibility-labels/\"\u003eiOS Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/when-to-use-accessibility-labels/\"\u003eWhen to use Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/writing-great-labels/\"\u003eWriting Great iOS Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/attributed-accessibility-labels/\"\u003eiOS Attributed Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
