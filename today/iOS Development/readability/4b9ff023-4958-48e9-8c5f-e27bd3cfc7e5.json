{
  "id": "4b9ff023-4958-48e9-8c5f-e27bd3cfc7e5",
  "title": "Quick Win - Start UI Testing",
  "link": "https://mobilea11y.com/quick-wins/ui-testing/",
  "description": "I’ll admit, adding UI testing to an app that currently doesn’t have it included is probably stretching the definition of quick win, but the aim here isn’t 100% coverage - not right away anyway. Start small and add to your test suite as you gain confidence. Even a small suite of crucial happy-path UI tests will help to ensure and persist accessibility in your app. And the more you get comfortable with UI tests the more accessible your apps will become, because an app that is easy to test is also great for accessibility.",
  "author": "",
  "published": "Wed, 03 Feb 2021 07:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 2337,
  "excerpt": "I’ll admit, adding UI testing to an app that currently doesn’t have it included is probably stretching the definition of quick win, but the aim here isn’t 100% coverage - not right away anyway. Start small and add to your test suite as you gain confidence. Even a small suite of crucial happy-path UI tests will help to ensure and persist accessibility in your app. And the more you get comfortable with UI tests the more accessible your apps will become, because an app that is easy to test is also great for accessibility.",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "I’ll admit, adding UI testing to an app that currently doesn’t have it included is probably stretching the definition of quick win, but the aim here isn’t 100% coverage - not right away anyway. Start small and add to your test suite as you gain confidence. Even a small suite of crucial happy-path UI tests will help to ensure and persist accessibility in your app. And the more you get comfortable with UI tests the more accessible your apps will become, because an app that is easy to test is also great for accessibility. iOS XCUI tests are great for accessibility because thats exactly what they’re testing. The tests need something machine-readable to understand what is present on screen - something else that needs something machine-readable to understand the screen is assistive technologies. So XCUI reads the accessibility tree, the hierarchy of metadata and labels that represent to assistive technology what is on screen. This means the easier your app is to UI test, the more robust the accessibility experience is. In short - any XCUI test is an accessibility test. Paul Hudson provides this great tutorial on getting started with testing your user interface and a cheat sheet for when you want to go a little further. One caveat for ensuring your tests are checking accessibility - Referencing elements by index or identifier can make finding elements on screen easier, plus it means your tests can be robust when testing in different languages. But once you have found the element, be sure to check the label when you can, this ensures you are actually presenting the string you think you are. If you want to turbo-charge your XCUI accessibility testing I have a library available to add accessibility tests and a detailed blog on XCUITests for accessibility. Android Android’s Espresso testing framework from Google has a Google provided extension to add accessibility checks to your existing UI tests. Once you have written an espresso test, import androidx.test.espresso.accessibility.AccessibilityChecks and call AccessibilityChecks.enable() at the start of your test. As your test runs espresso will automatically check the accessibility of your app and report what it finds with no extra work needed from you. To get started writing espresso tests for your app Victoria Gonda has this awesome getting started guide.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cp\u003eI’ll admit, adding UI testing to an app that currently doesn’t have it included is probably stretching the definition of quick win, but the aim here isn’t 100% coverage - not right away anyway. Start small and add to your test suite as you gain confidence. Even a small suite of crucial happy-path UI tests will help to ensure and persist accessibility in your app. And the more you get comfortable with UI tests the more accessible your apps will become, because an app that is easy to test is also great for accessibility.\u003c/p\u003e\n\u003ch2 id=\"ios\"\u003eiOS\u003c/h2\u003e\n\u003cp\u003eXCUI tests are great for accessibility because thats exactly what they’re testing. The tests need something machine-readable to understand what is present on screen - something else that needs something machine-readable to understand the screen is assistive technologies. So XCUI reads the accessibility tree, the hierarchy of metadata and labels that represent to assistive technology what is on screen. This means the easier your app is to UI test, the more robust the accessibility experience is. In short - any XCUI test is an accessibility test.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/twostraws\"\u003ePaul Hudson\u003c/a\u003e provides this great tutorial on getting started with \u003ca href=\"https://www.hackingwithswift.com/articles/83/how-to-test-your-user-interface-using-xcode\"\u003etesting your user interface\u003c/a\u003e and a \u003ca href=\"https://www.hackingwithswift.com/articles/148/xcode-ui-testing-cheat-sheet\"\u003echeat sheet\u003c/a\u003e for when you want to go a little further.\nOne caveat for ensuring your tests are checking accessibility - Referencing elements by index or identifier can make finding elements on screen easier, plus it means your tests can be robust when testing in different languages. But once you have found the element, be sure to check the label when you can, this ensures you are actually presenting the string you think you are.\u003c/p\u003e\n\u003cp\u003eIf you want to turbo-charge your XCUI accessibility testing I have a library available to add \u003ca href=\"https://github.com/rwapp/A11yUITests\"\u003eaccessibility tests\u003c/a\u003e and a detailed blog on \u003ca href=\"https://mobilea11y.com/guides/xcui/\"\u003eXCUITests for accessibility\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"android\"\u003eAndroid\u003c/h2\u003e\n\u003cp\u003eAndroid’s Espresso testing framework from Google has a Google provided extension to add \u003ca href=\"https://developer.android.com/training/testing/espresso/accessibility-checking\"\u003eaccessibility checks\u003c/a\u003e to your existing UI tests. Once you have written an espresso test, import \u003ccode\u003eandroidx.test.espresso.accessibility.AccessibilityChecks\u003c/code\u003e and call \u003ccode\u003eAccessibilityChecks.enable()\u003c/code\u003e at the start of your test. As your test runs espresso will automatically check the accessibility of your app and report what it finds with no extra work needed from you.\u003c/p\u003e\n\u003cp\u003eTo get started writing espresso tests for your app \u003ca href=\"https://twitter.com/ttgonda\"\u003eVictoria Gonda\u003c/a\u003e has this awesome \u003ca href=\"https://www.raywenderlich.com/949489-espresso-testing-and-screen-robots-getting-started\"\u003egetting started guide\u003c/a\u003e.\u003c/p\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
