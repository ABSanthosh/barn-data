{
  "id": "b1353fb6-8c8c-4fe6-b0df-6b4da92afe84",
  "title": "When to use Accessibility Labels",
  "link": "https://mobilea11y.com/blog/when-to-use-accessibility-labels/",
  "description": "There’s a few circumstances when you’ll want to set your own accessibility label, such as… An interactive element that you haven’t given a text value to, such as an image button. An interactive element with a long visual label. An interactive element with a short visual label that takes context from your design. A control or view you have created yourself or built by combining elements. Images of text. Elements Without a text value Take the controls for a music player as an example.",
  "author": "",
  "published": "Sun, 03 May 2020 08:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 4655,
  "excerpt": "There’s a few circumstances when you’ll want to set your own accessibility label, such as…",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "There’s a few circumstances when you’ll want to set your own accessibility label, such as… An interactive element that you haven’t given a text value to, such as an image button. An interactive element with a long visual label. An interactive element with a short visual label that takes context from your design. A control or view you have created yourself or built by combining elements. Images of text. Elements Without a text value Take the controls for a music player as an example. Below is a screenshot of the controls for Spotify’s music player, each icon is a button. They’re all visual, but not text. As they’re buttons they’re all available to assistive technology but without a text value, assistive technologies would not know how to present each button to your user. VoiceOver would likely read each as ‘button’ giving no indication what each button does. Voice Control users would have to refer to each button by a number based on the order it appears on the screen. Instead, Spotify add accessibility labels to each of these buttons, you can see these labels below. Each label is short and tells our user exactly what will happen if they activate it. Elements with a long label Sometimes your buttons, or other interactive elements, will have really long labels. Take this example from Bear. This is a table cell which is fully tappable - see in this image VoiceOver highlights the whole cell. The cell features the note’s title and a couple of lines of the note’s content. That’s a lot of content to listen to VoiceOver read or to say to Voice Control. So instead of using the whole text on the cell, Bear set the cell’s accessibility label to just the title of the note. Additionally, the cell features the time elapsed since this note was edited, this is the first piece of text visually, but it’s not the most important. So Bear have moved this information to the end of the accessibility label. This makes navigation simpler and faster, importantly without losing context. Use this technique thoughtfully, removing content can lead to a worse experience, so to make sure you get the best result, test this with regular VoiceOver users. Take a shopping app as an example. Say the screen has a table of search results and each row has an ‘add to basket’ button. When swiping through the list, how would someone who can’t see the layout of the screen know what the ‘add to basket’ button applies to? It could be for the previous title VoiceOver read, or it could be for the next one. Setting the accessibility label of the ‘add to basket’ button to ‘add {item name} to basket’ clears up this confusion. Here’s an example from the BBC Sounds app. Each row in this table has a play button after it. To disambiguate what each play button does, the accessibility labels don’t just say ‘play’ but ‘play {name of mix}’. Your Custom Views If you’re combining views together to create a new control, iOS won’t know what part of that view is the important part to present to assistive technologies. So, in this case, you’ll need to add some code to the root view of your new control to pass that label to your customer in the form of an accessibility label. Images of Text As a general rule, avoid images of text if you can. But if you have to use an image that includes text, ensure you add the same text as an accessibility label to the image, otherwise people with no, or low, vision won’t know what the text is. When Not to Use an Accessibility Label Ensuring your on-screen elements have meaningful labels is an important step for improving accessibility, but just as important is knowing when not to add labels. Adding labels where they aren’t needed makes for a noisy experience, and can make navigating your app take longer, and be more confusing. Decorative Elements Decorative elements can be icons that aren’t buttons, smaller images such as thumbnails, layout elements, and other elements that have no explicit meaning shouldn’t have an accessibility label applied, and should all be marked as hidden to accessibility. Larger images or photos should probably have a short descriptive label added. Otherwise, it can be confusing for those with low vision who can tell something is present on screen, but not what. If Your Label Does the Job If your element already has a text label, that’s great in most cases. Don’t change it just for the sake of doing something. You risk making the accessible experience worse. Next Up The next blog in this series is Writing Great iOS Accessibility Labels iOS Accessibility Labels When to use Accessibility Labels Writing Great iOS Accessibility Labels iOS Attributed Accessibility Labels",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cp\u003eThere’s a few circumstances when you’ll want to set your own accessibility label, such as…\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAn interactive element that you haven’t given a \u003ccode\u003etext\u003c/code\u003e value to, such as an image button.\u003c/li\u003e\n\u003cli\u003eAn interactive element with a long visual label.\u003c/li\u003e\n\u003cli\u003eAn interactive element with a short visual label that takes context from your design.\u003c/li\u003e\n\u003cli\u003eA control or view you have created yourself or built by combining elements.\u003c/li\u003e\n\u003cli\u003eImages of text.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"elements-without-a-text-value\"\u003eElements Without a text value\u003c/h3\u003e\n\u003cp\u003eTake the controls for a music player as an example. Below is a screenshot of the controls for \u003ca href=\"https://apps.apple.com/gb/app/spotify-new-music-and-podcasts/id324684580\"\u003eSpotify’s\u003c/a\u003e music player, each icon is a button. They’re all visual, but not text. As they’re buttons they’re all available to assistive technology but without a text value, assistive technologies would not know how to present each button to your user. VoiceOver would likely read each as ‘button’ giving no indication what each button does. Voice Control users would have to refer to each button by a number based on the order it appears on the screen.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/PlayerControls.jpeg\" alt=\"Play controls for Spotify\"/\u003e\u003c/p\u003e\n\u003cp\u003eInstead, Spotify add accessibility labels to each of these buttons, you can see these labels below. Each label is short and tells our user exactly what will happen if they activate it.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/PlayerControlsLabels.jpeg\" alt=\"Play controls for Spotify showing accessibility labels\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"elements-with-a-long-label\"\u003eElements with a long label\u003c/h3\u003e\n\u003cp\u003eSometimes your buttons, or other interactive elements, will have really long labels. Take this example from \u003ca href=\"https://apps.apple.com/gb/app/bear/id1016366447\"\u003eBear\u003c/a\u003e. This is a table cell which is fully tappable - see in this image VoiceOver highlights the whole cell.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/CellButton.PNG\" alt=\"Bear\u0026amp;rsquo;s notes list\"/\u003e\u003c/p\u003e\n\u003cp\u003eThe cell features the note’s title and a couple of lines of the note’s content. That’s a lot of content to listen to VoiceOver read or to say to Voice Control. So instead of using the whole text on the cell, Bear set the cell’s accessibility label to just the title of the note. Additionally, the cell features the time elapsed since this note was edited, this is the first piece of text visually, but it’s not the most important. So Bear have moved this information to the end of the accessibility label.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/CellLabel.PNG\" alt=\"Bear\u0026amp;rsquo;s notes list showing accessibility labels\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis makes navigation simpler and faster, importantly without losing context. Use this technique thoughtfully, removing content can lead to a worse experience, so to make sure you get the best result, test this with regular VoiceOver users.\u003c/p\u003e\n\n\u003cp\u003eTake a shopping app as an example. Say the screen has a table of search results and each row has an ‘add to basket’ button. When swiping through the list, how would someone who can’t see the layout of the screen know what the ‘add to basket’ button applies to? It could be for the previous title VoiceOver read, or it could be for the next one. Setting the accessibility label of the ‘add to basket’ button to ‘add {item name} to basket’ clears up this confusion.\u003c/p\u003e\n\u003cp\u003eHere’s an example from the \u003ca href=\"https://apps.apple.com/gb/app/bbc-sounds/id1380676511\"\u003eBBC Sounds\u003c/a\u003e app. Each row in this table has a play button after it.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/BBCSoundsMixes.PNG\" alt=\"BBC Sounds Music Mixes list\"/\u003e\u003c/p\u003e\n\u003cp\u003eTo disambiguate what each play button does, the accessibility labels don’t just say ‘play’ but ‘play {name of mix}’.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/BBCSoundsMixesLabels.PNG\" alt=\"BBC Sounds Music Mixes list showing accessibility labels\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"your-custom-views\"\u003eYour Custom Views\u003c/h3\u003e\n\u003cp\u003eIf you’re combining views together to create a new control, iOS won’t know what part of that view is the important part to present to assistive technologies. So, in this case, you’ll need to add some code to the root view of your new control to pass that label to your customer in the form of an accessibility label.\u003c/p\u003e\n\u003ch3 id=\"images-of-text\"\u003eImages of Text\u003c/h3\u003e\n\u003cp\u003eAs a general rule, avoid images of text if you can. But if you have to use an image that includes text, ensure you add the same text as an accessibility label to the image, otherwise people with no, or low, vision won’t know what the text is.\u003c/p\u003e\n\u003ch2 id=\"when-not-to-use-an-accessibility-label\"\u003eWhen Not to Use an Accessibility Label\u003c/h2\u003e\n\u003cp\u003eEnsuring your on-screen elements have meaningful labels is an important step for improving accessibility, but just as important is knowing when not to add labels. Adding labels where they aren’t needed makes for a noisy experience, and can make navigating your app take longer, and be more confusing.\u003c/p\u003e\n\u003ch3 id=\"decorative-elements\"\u003eDecorative Elements\u003c/h3\u003e\n\u003cp\u003eDecorative elements can be icons that aren’t buttons, smaller images such as thumbnails, layout elements, and other elements that have no explicit meaning shouldn’t have an accessibility label applied, and should all be marked as hidden to accessibility. Larger images or photos should probably have a short descriptive label added. Otherwise, it can be confusing for those with low vision who can tell something is present on screen, but not what.\u003c/p\u003e\n\u003ch3 id=\"if-your-label-does-the-job\"\u003eIf Your Label Does the Job\u003c/h3\u003e\n\u003cp\u003eIf your element already has a text label, that’s great in most cases. Don’t change it just for the sake of doing something. You risk making the accessible experience worse.\u003c/p\u003e\n\u003ch2 id=\"next-up\"\u003eNext Up\u003c/h2\u003e\n\u003cp\u003eThe next blog in this series is \u003ca href=\"https://mobilea11y.com/blog/writing-great-labels/\"\u003eWriting Great iOS Accessibility Labels\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/ios-accessibility-labels/\"\u003eiOS Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/when-to-use-accessibility-labels/\"\u003eWhen to use Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/writing-great-labels/\"\u003eWriting Great iOS Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/attributed-accessibility-labels/\"\u003eiOS Attributed Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
