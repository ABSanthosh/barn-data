{
  "id": "4bee26ca-626e-463a-aabe-c30cf3801efb",
  "title": "Software engineering book recommendations",
  "link": "https://swiftrocks.com/software-engineering-book-recommendations",
  "description": "The following is a list of software engineering books I've read that I felt had a strong and lasting positive impact on my career. It's not a list of everything I enjoyed (that would be impossible to list down), but rather a special list of resources that taught/helped me so much that I still find myself thinking about them years later. They are my top recommendations for other software engineers. Some are about iOS development specifically, but most relate to general software engineering. If you strive to be a world-class developer, these books and resources will help you get there. (I'm constantly learning new things, so expect this list to expand. I also have been struggling with bad memory as of late, so I predict that I'll also be updating this list to include things that I failed to recall when first writing it. I'll post a message whenever I update it!) Write Great Code: Understanding The Machine (Randall Hyde) - Probably my favorite software engineering book. This book teaches you how modern computers work in a high-level way that is easy to understand and not overly technical. It's not going to teach you new fancy APIs, but it will give you the ability to “understand” code; an ability that has proved to be useful almost daily in my career. Operating Systems: Three Easy Pieces (Remzi Arpaci-Dusseau, Andrea Arpaci-Dusseau) - This is similar to Understanding The Machine, but is more technical and focused on operating systems specifically. Amazing resource to learn about core OS fundamentals such as memory, threads / concurrency, file systems, and CPU virtualization. It's also free. *OS Internals Trilogy (Jonathan Levin) - This trilogy about how Apple platforms work internally is an absolute goldmine for us who develop for said platforms, but it's not for everyone. They will teach you everything you could possibly want to know about these platforms, but they're massive and go into extreme detail on things that you're never going to interact with, making this series a very painful read for beginners and those looking for quick / practical knowledge. But if you're reasonably experienced and is interested in things like linkers and kernels, then these books are a godsend. The only problem with these books is that Amazon only delivers them if you live in the US, so getting a copy can be challenging. Game Engine Black Book: DOOM (Fabien Sanglard) - Fantastic deep-dive on not only the source code, but also the hardware, tooling, and team dynamics that allowed the masterpiece known as DOOM to be conceived. iOS developers will find this book extra interesting because DOOM was developed on NeXT workstations; many of the tools were written in Objective-C, so the book has a lot of interesting information about the language and frameworks like Foundation that is still relevant to this day. Cracking the Coding Interview (Gayle Laakmann McDowell) - Even if you don’t care about the interviewing bits (I’m not even sure if companies like Apple still run LeetCode puzzles), this book is still a legendary resource for getting started with computer science theory. If you’re not sure why you’d want to do that, check out my article about it. The Staff Engineer's Path (Tanya Reilly) - Perfect book for senior engineers looking to get to the next level. This book demystifies the concept of a Staff Engineer and provides a gigantic amount of great advice on how to get there and how to do a good job once you’re there. Effective Objective-C 2.0 (Matt Galloway) - Even though we don’t directly write apps in Obj-C anymore, we still have to do so indirectly when using older frameworks like UIKit. This book does a great job of explaining how Obj-C works, which is something you’ll wish you knew when dealing with issues that either originate or pass through Obj-C. Clean Code (Robert C. Martin) - This book gets a lot of flack in the community because some people treat it as some sort of bible that must be followed religiously, but it is nonetheless a great resource for learning how to write code that is easy to read and maintain by humans. Just don’t be like those folks. Other Resources The following are not “books” in the traditional sense, but are nonetheless great software engineering resources that I think should be present here. System Design Primer - A collection of resources for learning how to design scalable backends. Great resource for learning how giant products like Twitter work. For mobile developers, this knowledge can help you make sure the client-side bits are designed properly. Nand2Tetris - A free online course that teaches you how to build a modern computer and make it run Tetris, from scratch. Another amazing resource for learning how computers work. Prateek Gianchandani’s articles about iOS security, and DVIA - This giant series of 50 articles teaches you how to hack iOS apps and is how I learned everything I know about iOS security. It’s quite old so I’m not sure how much of it still applies, but is an interesting read regardless. Prateek also has a project called Damn Vulnerable iOS App (DVIA) that is basically a playground where you can try out everything he mentions in his articles, but unfortunately it seems that the website that explained it doesn’t exist anymore. I was able to find it in the Internet Archive, so hopefully that still allows you to try it. Learn Git Branching - A page that teaches you to use git in the CLI by presenting it as a browser game. This is how I learned how to use git and is a resource that I greatly recommend even if you prefer using GUI apps for your git needs. MIT OpenCourseWare - MIT has a lot of free content on YouTube, and the ones related to software engineering are amazing. Here’s a link to my favorite one, which is a class about HTTPS/SSL/modern cryptography.",
  "author": "Bruno Rocha",
  "published": "Sun, 3 Mar 2024 13:00:00 GMT+1",
  "source": "https://swiftrocks.com/rss.xml",
  "categories": null,
  "byline": "Bruno Rocha",
  "length": 5850,
  "excerpt": "Bruno's personal list of recommended books about software engineering and iOS development.",
  "siteName": "SwiftRocks",
  "favicon": "https://swiftrocks.com/images/favicon/iconsmall2.png",
  "text": "Software engineering book recommendations The following is a list of software engineering books I've read that I felt had a strong and lasting positive impact on my career. It's not a list of everything I enjoyed (that would be impossible to list down), but rather a special list of resources that taught/helped me so much that I still find myself thinking about them years later. They are my top recommendations for other software engineers. Some are about iOS development specifically, but most relate to general software engineering. If you strive to be a world-class developer, these books and resources will help you get there. (I'm constantly learning new things, so expect this list to expand. I also have been struggling with bad memory as of late, so I predict that I'll also be updating this list to include things that I failed to recall when first writing it. I'll post a message whenever I update it!) Write Great Code: Understanding The Machine (Randall Hyde) - Probably my favorite software engineering book. This book teaches you how modern computers work in a high-level way that is easy to understand and not overly technical. It's not going to teach you new fancy APIs, but it will give you the ability to “understand” code; an ability that has proved to be useful almost daily in my career. Operating Systems: Three Easy Pieces (Remzi Arpaci-Dusseau, Andrea Arpaci-Dusseau) - This is similar to Understanding The Machine, but is more technical and focused on operating systems specifically. Amazing resource to learn about core OS fundamentals such as memory, threads / concurrency, file systems, and CPU virtualization. It's also free. *OS Internals Trilogy (Jonathan Levin) - This trilogy about how Apple platforms work internally is an absolute goldmine for us who develop for said platforms, but it's not for everyone. They will teach you everything you could possibly want to know about these platforms, but they're massive and go into extreme detail on things that you're never going to interact with, making this series a very painful read for beginners and those looking for quick / practical knowledge. But if you're reasonably experienced and is interested in things like linkers and kernels, then these books are a godsend. The only problem with these books is that Amazon only delivers them if you live in the US, so getting a copy can be challenging. Game Engine Black Book: DOOM (Fabien Sanglard) - Fantastic deep-dive on not only the source code, but also the hardware, tooling, and team dynamics that allowed the masterpiece known as DOOM to be conceived. iOS developers will find this book extra interesting because DOOM was developed on NeXT workstations; many of the tools were written in Objective-C, so the book has a lot of interesting information about the language and frameworks like Foundation that is still relevant to this day. Cracking the Coding Interview (Gayle Laakmann McDowell) - Even if you don’t care about the interviewing bits (I’m not even sure if companies like Apple still run LeetCode puzzles), this book is still a legendary resource for getting started with computer science theory. If you’re not sure why you’d want to do that, check out my article about it. The Staff Engineer's Path (Tanya Reilly) - Perfect book for senior engineers looking to get to the next level. This book demystifies the concept of a Staff Engineer and provides a gigantic amount of great advice on how to get there and how to do a good job once you’re there. Effective Objective-C 2.0 (Matt Galloway) - Even though we don’t directly write apps in Obj-C anymore, we still have to do so indirectly when using older frameworks like UIKit. This book does a great job of explaining how Obj-C works, which is something you’ll wish you knew when dealing with issues that either originate or pass through Obj-C. Clean Code (Robert C. Martin) - This book gets a lot of flack in the community because some people treat it as some sort of bible that must be followed religiously, but it is nonetheless a great resource for learning how to write code that is easy to read and maintain by humans. Just don’t be like those folks. Other Resources The following are not “books” in the traditional sense, but are nonetheless great software engineering resources that I think should be present here. System Design Primer - A collection of resources for learning how to design scalable backends. Great resource for learning how giant products like Twitter work. For mobile developers, this knowledge can help you make sure the client-side bits are designed properly. Nand2Tetris - A free online course that teaches you how to build a modern computer and make it run Tetris, from scratch. Another amazing resource for learning how computers work. Prateek Gianchandani’s articles about iOS security, and DVIA - This giant series of 50 articles teaches you how to hack iOS apps and is how I learned everything I know about iOS security. It’s quite old so I’m not sure how much of it still applies, but is an interesting read regardless. Prateek also has a project called Damn Vulnerable iOS App (DVIA) that is basically a playground where you can try out everything he mentions in his articles, but unfortunately it seems that the website that explained it doesn’t exist anymore. I was able to find it in the Internet Archive, so hopefully that still allows you to try it. Learn Git Branching - A page that teaches you to use git in the CLI by presenting it as a browser game. This is how I learned how to use git and is a resource that I greatly recommend even if you prefer using GUI apps for your git needs. MIT OpenCourseWare - MIT has a lot of free content on YouTube, and the ones related to software engineering are amazing. Here’s a link to my favorite one, which is a class about HTTPS/SSL/modern cryptography.",
  "image": "https://swiftrocks.com/images/thumbs/thumb.jpg?4",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"WRITEIT_DYNAMIC_CONTENT\"\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003ctitle\u003eSoftware engineering book recommendations\u003c/title\u003e\n\u003cdiv\u003e\n    \n  \n\u003cp\u003eThe following is a list of software engineering books I\u0026#39;ve read that I felt had a strong and lasting positive impact on my career. It\u0026#39;s not a list of \u003ci\u003eeverything\u003c/i\u003e I enjoyed (that would be impossible to list down), but rather a special list of resources that taught/helped me so much that I still find myself thinking about them years later. They are my top recommendations for other software engineers.\u003c/p\u003e\n\u003cp\u003eSome are about iOS development specifically, but most relate to general software engineering. If you strive to be a world-class developer, these books and resources will help you get there.\u003c/p\u003e\n\u003cp\u003e(I\u0026#39;m constantly learning new things, so expect this list to expand. I also have been struggling with bad memory as of late, so I predict that I\u0026#39;ll also be updating this list to include things that I failed to recall when first writing it. I\u0026#39;ll post a message whenever I update it!)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://nostarch.com/writegreatcode1_2e\"\u003eWrite Great Code: Understanding The Machine (Randall Hyde)\u003c/a\u003e\u003c/b\u003e - Probably my favorite software engineering book. This book teaches you how modern computers work in a high-level way that is easy to understand and not overly technical. It\u0026#39;s not going to teach you new fancy APIs, but it will give you the ability to “understand” code; an ability that has proved to be useful almost daily in my career.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://pages.cs.wisc.edu/~remzi/OSTEP/\"\u003eOperating Systems: Three Easy Pieces (Remzi Arpaci-Dusseau, Andrea Arpaci-Dusseau)\u003c/a\u003e\u003c/b\u003e - This is similar to Understanding The Machine, but is more technical and focused on operating systems specifically. Amazing resource to learn about core OS fundamentals such as memory, threads / concurrency, file systems, and CPU virtualization. \u003cb\u003eIt\u0026#39;s also free.\u003c/b\u003e\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://newosxbook.com/home.html\"\u003e*OS Internals Trilogy (Jonathan Levin)\u003c/a\u003e\u003c/b\u003e - This trilogy about how Apple platforms work internally is an \u003cb\u003eabsolute goldmine\u003c/b\u003e for us who develop for said platforms, but it\u0026#39;s not for everyone. They will teach you everything you could possibly want to know about these platforms, but they\u0026#39;re massive and go into extreme detail on things that you\u0026#39;re never going to interact with, making this series a very painful read for beginners and those looking for quick / practical knowledge. But if you\u0026#39;re reasonably experienced and is interested in things like linkers and kernels, then these books are a godsend. The only problem with these books is that Amazon only delivers them if you live in the US, so getting a copy can be challenging.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://fabiensanglard.net/gebbdoom/index.html\"\u003eGame Engine Black Book: DOOM (Fabien Sanglard)\u003c/a\u003e\u003c/b\u003e - Fantastic deep-dive on not only the source code, but also the hardware, tooling, and team dynamics that allowed the masterpiece known as DOOM to be conceived. iOS developers will find this book extra interesting because DOOM was developed on NeXT workstations; many of the tools were written in Objective-C, so the book has a lot of interesting information about the language and frameworks like Foundation that is still relevant to this day.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://www.crackingthecodinginterview.com/\"\u003eCracking the Coding Interview (Gayle Laakmann McDowell)\u003c/a\u003e\u003c/b\u003e - Even if you don’t care about the interviewing bits (I’m not even sure if companies like Apple still run LeetCode puzzles), this book is still a legendary resource for getting started with computer science theory. If you’re not sure why you’d want to do that, \u003ca href=\"https://swiftrocks.com/how-necessary-are-the-programming-fundamentals\"\u003echeck out my article about it.\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://www.amazon.se/-/en/Tanya-Reilly/dp/1098118731\"\u003eThe Staff Engineer\u0026#39;s Path (Tanya Reilly)\u003c/a\u003e\u003c/b\u003e - Perfect book for senior engineers looking to get to the next level. This book demystifies the concept of a Staff Engineer and provides a gigantic amount of great advice on how to get there and how to do a good job once you’re there.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://www.amazon.com/Effective-Objective-C-2-0-Specific-Development/dp/0321917014\"\u003eEffective Objective-C 2.0 (Matt Galloway)\u003c/a\u003e\u003c/b\u003e - Even though we don’t directly write apps in Obj-C anymore, we still have to do so indirectly when using older frameworks like UIKit. This book does a great job of explaining how Obj-C works, which is something you’ll wish you knew when dealing with issues that either originate or pass through Obj-C.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882\"\u003eClean Code (Robert C. Martin)\u003c/a\u003e\u003c/b\u003e - This book gets a lot of flack in the community because some people treat it as some sort of bible that must be followed religiously, but it is nonetheless a great resource for learning how to write code that is easy to read and maintain by humans. \u003ca href=\"https://swiftrocks.com/there-is-no-right-or-wrong-in-software-engineering\"\u003eJust don’t be like those folks.\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eOther Resources\u003c/h2\u003e\n\u003cp\u003eThe following are not “books” in the traditional sense, but are nonetheless great software engineering resources that I think should be present here.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://github.com/donnemartin/system-design-primer\"\u003eSystem Design Primer\u003c/a\u003e\u003c/b\u003e - A collection of resources for learning how to design scalable backends. Great resource for learning how giant products like Twitter work. For mobile developers, this knowledge can help you make sure the client-side bits are designed properly.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://www.nand2tetris.org/\"\u003eNand2Tetris\u003c/a\u003e\u003c/b\u003e - A free online course that teaches you how to build a modern computer and make it run Tetris, from scratch. Another amazing resource for learning how computers work.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://highaltitudehacks.com/2013/06/16/ios-application-security-part-1-setting-up-a-mobile-pentesting-platform.html\"\u003ePrateek Gianchandani’s articles about iOS security, and DVIA\u003c/a\u003e\u003c/b\u003e - This giant series of 50 articles teaches you how to hack iOS apps and is how I learned everything I know about iOS security. It’s quite old so I’m not sure how much of it still applies, but is an interesting read regardless. Prateek also has a project called \u003ca href=\"https://github.com/prateek147/DVIA-v2\"\u003eDamn Vulnerable iOS App (DVIA)\u003c/a\u003e that is basically a playground where you can try out everything he mentions in his articles, but unfortunately it seems that the website that explained it doesn’t exist anymore. \u003ca href=\"https://web.archive.org/web/20220331031231/https://damnvulnerableiosapp.com/\"\u003eI was able to find it in the Internet Archive\u003c/a\u003e, so hopefully that still allows you to try it.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://learngitbranching.js.org/\"\u003eLearn Git Branching\u003c/a\u003e\u003c/b\u003e - A page that teaches you to use git in the CLI by presenting it as a browser game. This is how I learned how to use git and is a resource that I greatly recommend even if you prefer using GUI apps for your git needs.\u003c/li\u003e\n\u003cli\u003e\u003cb\u003e\u003ca href=\"https://ocw.mit.edu/\"\u003eMIT OpenCourseWare\u003c/a\u003e\u003c/b\u003e - MIT has a lot of free content on YouTube, and the ones related to software engineering are amazing. \u003ca href=\"https://www.youtube.com/watch?v=q1OF_0ICt9A\u0026amp;t=3794s\"\u003eHere’s a link to my favorite one, which is a class about HTTPS/SSL/modern cryptography.\u003c/a\u003e\n\u003c/li\u003e\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2024-03-03T14:00:00+02:00",
  "modifiedTime": null
}
