{
  "id": "6c48c6ed-f6df-4c89-8ace-c26212ce1def",
  "title": "iOS Attributed Accessibility Labels",
  "link": "https://mobilea11y.com/blog/attributed-accessibility-labels/",
  "description": "Attributed accessibility labels are an incredible tool for making some next-level accessible experiences. They let you tell VoiceOver not just what to speak, but how to say it too. Using the accessibilityAttributedLabel property you can provide an NSAttributedString to VoiceOver, much the same way you would provide an NSAttributedString to a label’s attributedText property to display a string with an underline or character colour for example. The difference here is that all of our attributes are instructions for VoiceOver.",
  "author": "",
  "published": "Sun, 03 May 2020 10:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 4560,
  "excerpt": "Attributed accessibility labels are an incredible tool for making some next-level accessible experiences. They let you tell VoiceOver not just what to speak, but how to say it too.",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "Attributed accessibility labels are an incredible tool for making some next-level accessible experiences. They let you tell VoiceOver not just what to speak, but how to say it too. Using the accessibilityAttributedLabel property you can provide an NSAttributedString to VoiceOver, much the same way you would provide an NSAttributedString to a label’s attributedText property to display a string with an underline or character colour for example. The difference here is that all of our attributes are instructions for VoiceOver. In the below example, we’re adding a pitch change to the word ‘best’ where in displayed text we might add a bold attribute to add emphasis. This means that your VoiceOver users will get a comparable experience to sighted users rather than a cut down one. This is the ultimate aim of digital accessibility. Create a comparable, inclusive interaction with your users, regardless of their abilities. Always ensure your text is localised and perform proper range calculations in your code, rather than hard coding everything as I am in this example. let attributedString = NSMutableAttributedString(string: \"This is the best app on the App Store!\") let range = attributedString.string.range(of: \"best\") attributedString.addAttributes([.accessibilitySpeechPitch: 1.5], range: NSRange(range!, in: attributedString.string)) appDescription?.accessibilityAttributedLabel = attributedString Much like visual NSAttributedStrings, there are several attributes to pick from to get the effect you’re aiming for. Language This attribute allows you to be explicit about the language VoiceOver uses to read a string. This is useful if you have multiple languages in your app. The attribute takes an argument representing the language you want VoiceOver to use in the BCP47 format such as this example for Latin American Spanish [.accessibilitySpeechLanguage: \"es-419\"]. Spell Out Spelling out the text is the ideal solution to the reference number problem we discussed in the previous post. This attribute lets you keep a neat visual string of ‘1234’, but when marked with [.accessibilitySpeechSpellOut: true] this is read by VoiceOver as ‘1 2 3 4’. Phonetic Notation You can use phonetic Notation to give VoiceOver exact instructions about how it should pronounce a word. VoiceOver’s pronunciation is not always perfect, and while this is usually still understandable by your customer, there are instances where you might want to be more prescriptive. Your brand name is a great example of this, as VoiceOver may not read this exactly as your brand expects. Words you use commonly in your app that have a specific domain meaning are another great use. For example, VoiceOver can’t pronounce the word ’expiry’ correctly. In the UK this word is used on credit cards as ’expiration’ would be in the US. Meaning any app in the UK handling credit card data should probably use this technique to ensure customers understand what data they need to enter in a form. Homonyms are another good example. In the BBC Sounds app, users are offered the opportunity to listen to ’live radio’. unfortunately, VoiceOver appears to be instructing the user to ’liv radio’. This can be fixed using the .accessibilitySpeechIPANotation attribute and providing an IPA string, such as this example: let attributedString = NSMutableAttributedString(string: \"Live radio\") let range = attributedString.string.range(of: \"Live\") attributedString.addAttributes([.accessibilitySpeechIPANotation: \"līv\"], range: NSRange(range!, in: attributedString.string)) liveRadio?.accessibilityAttributedLabel = attributedString Punctuation This attribute allows us to tell VoiceOver to read all punctuation. This can be useful if your app features code or some other technical notation. Be sure to apply [.accessibilitySpeechPunctuation: true] only to the range that contains your code, otherwise listening to the result will take a while. Sources Daniel Devesa Developing Accessible iOS Apps: Support VoiceOver, Dynamic Type, and More Rob Whitaker Developing Inclusive Mobile Apps: Building Accessible Apps for iOS and Android Next up This is the last article in the series of posts about iOS’ accessibility labels, so the next step is to go ahead and make some incredible accessible apps! iOS Accessibility Labels When to use Accessibility Labels Writing Great iOS Accessibility Labels iOS Attributed Accessibility Labels",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cp\u003eAttributed accessibility labels are an incredible tool for making some next-level accessible experiences. They let you tell VoiceOver not just what to speak, but how to say it too.\u003c/p\u003e\n\u003cp\u003eUsing the \u003ccode\u003eaccessibilityAttributedLabel\u003c/code\u003e property you can provide an \u003ccode\u003eNSAttributedString\u003c/code\u003e to VoiceOver, much the same way you would provide an \u003ccode\u003eNSAttributedString\u003c/code\u003e to a label’s \u003ccode\u003eattributedText\u003c/code\u003e property to display a string with an underline or character colour for example. The difference here is that all of our attributes are instructions for VoiceOver.\u003c/p\u003e\n\u003cp\u003eIn the below example, we’re adding a pitch change to the word ‘best’ where in displayed text we might add a bold attribute to add emphasis. This means that your VoiceOver users will get a comparable experience to sighted users rather than a cut down one. This is the ultimate aim of digital accessibility. Create a comparable, inclusive interaction with your users, regardless of their abilities. Always ensure your text is localised and perform proper range calculations in your code, rather than hard coding everything as I am in this example.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003elet attributedString = NSMutableAttributedString(string: \u0026#34;This is the best app on the App Store!\u0026#34;)\n\nlet range = attributedString.string.range(of: \u0026#34;best\u0026#34;)\nattributedString.addAttributes([.accessibilitySpeechPitch: 1.5], \n                                range: NSRange(range!, \n                                               in: attributedString.string))\n\nappDescription?.accessibilityAttributedLabel = attributedString\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMuch like visual \u003ccode\u003eNSAttributedString\u003c/code\u003es, there are several attributes to pick from to get the effect you’re aiming for.\u003c/p\u003e\n\u003ch2 id=\"language\"\u003eLanguage\u003c/h2\u003e\n\u003cp\u003eThis attribute allows you to be explicit about the language VoiceOver uses to read a string. This is useful if you have multiple languages in your app. The attribute takes an argument representing the language you want VoiceOver to use in the \u003ca href=\"https://www.rfc-editor.org/rfc/bcp/bcp47.txt\"\u003eBCP47 format\u003c/a\u003e such as this example for Latin American Spanish \u003ccode\u003e[.accessibilitySpeechLanguage: \u0026#34;es-419\u0026#34;]\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"spell-out\"\u003eSpell Out\u003c/h2\u003e\n\u003cp\u003eSpelling out the text is the ideal solution to the reference number problem we discussed in the \u003ca href=\"https://mobilea11y.com/blog/writing-great-labels/#not-just-for-voiceover\"\u003eprevious post\u003c/a\u003e. This attribute lets you keep a neat visual string of ‘1234’, but when marked with \u003ccode\u003e[.accessibilitySpeechSpellOut: true]\u003c/code\u003e this is read by VoiceOver as ‘1 2 3 4’.\u003c/p\u003e\n\u003ch2 id=\"phonetic-notation\"\u003ePhonetic Notation\u003c/h2\u003e\n\u003cp\u003eYou can use phonetic Notation to give VoiceOver exact instructions about how it should pronounce a word. VoiceOver’s pronunciation is not always perfect, and while this is usually still understandable by your customer, there are instances where you might want to be more prescriptive. Your brand name is a great example of this, as VoiceOver may not read this exactly as your brand expects.\u003c/p\u003e\n\u003cp\u003eWords you use commonly in your app that have a specific domain meaning are another great use. For example, VoiceOver can’t pronounce the word ’expiry’ correctly. In the UK this word is used on credit cards as ’expiration’ would be in the US. Meaning any app in the UK handling credit card data should probably use this technique to ensure customers understand what data they need to enter in a form.\u003c/p\u003e\n\u003cp\u003eHomonyms are another good example. In the \u003ca href=\"https://apps.apple.com/gb/app/bbc-sounds/id1380676511\"\u003eBBC Sounds\u003c/a\u003e app, users are offered the opportunity to listen to ’live radio’. unfortunately, VoiceOver appears to be instructing the user to ’liv radio’. This can be fixed using the \u003ccode\u003e.accessibilitySpeechIPANotation\u003c/code\u003e attribute and providing an IPA string, such as this example:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003elet attributedString = NSMutableAttributedString(string: \u0026#34;Live radio\u0026#34;)\n\nlet range = attributedString.string.range(of: \u0026#34;Live\u0026#34;)\nattributedString.addAttributes([.accessibilitySpeechIPANotation: \u0026#34;līv\u0026#34;],\n                                range: NSRange(range!, \n                                               in: attributedString.string))\n\nliveRadio?.accessibilityAttributedLabel = attributedString\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"punctuation\"\u003ePunctuation\u003c/h2\u003e\n\u003cp\u003eThis attribute allows us to tell VoiceOver to read all punctuation. This can be useful if your app features code or some other technical notation. Be sure to apply \u003ccode\u003e[.accessibilitySpeechPunctuation: true]\u003c/code\u003e only to the range that contains your code, otherwise listening to the result will take a while.\u003c/p\u003e\n\u003ch2 id=\"sources\"\u003eSources\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/dadederk\"\u003eDaniel Devesa\u003c/a\u003e \u003ca href=\"https://amzn.to/2WkLNkt\"\u003eDeveloping Accessible iOS Apps: Support VoiceOver, Dynamic Type, and More\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/RobRWAPP\"\u003eRob Whitaker\u003c/a\u003e \u003ca href=\"https://amzn.to/2KSDmaz\"\u003eDeveloping Inclusive Mobile Apps: Building Accessible Apps for iOS and Android\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"next-up\"\u003eNext up\u003c/h2\u003e\n\u003cp\u003eThis is the last article in the series of posts about iOS’ accessibility labels, so the next step is to go ahead and make some incredible accessible apps!\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/ios-accessibility-labels/\"\u003eiOS Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/when-to-use-accessibility-labels/\"\u003eWhen to use Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/writing-great-labels/\"\u003eWriting Great iOS Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/attributed-accessibility-labels/\"\u003eiOS Attributed Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
