{
  "id": "d5531b0a-45d1-40b9-8140-8b028c0afba9",
  "title": "TikTok logo-ish effect in SwiftUI",
  "link": "https://nerdyak.tech/development/2020/06/12/create-tiktok-logo-effect-in-swiftui.html",
  "description": "Hello and welcome to another blog post about SwiftUI. This years WWDC is approaching fast and the expectation of new SwiftUI features and/or changes is tremendous. So I have decided to dedicate this post to something lighter yet still playful.",
  "author": "Pavel Zak",
  "published": "2020-06-12T00:00:00+00:00",
  "source": "https://nerdyak.tech/atom.xml",
  "categories": [
    "development",
    "swiftUI",
    "tiktok",
    "effect",
    "BlendMode",
    "ViewModifier",
    "ButtonStyle"
  ],
  "byline": "Pavel Zak",
  "length": 5416,
  "excerpt": "Hello and welcome to another blog post about SwiftUI. This years WWDC is approaching fast and the expectation of new SwiftUI features and/or changes is tremendous. So I have decided to dedicate this post to something lighter yet still playful.",
  "siteName": "Pavel Zak",
  "favicon": "",
  "text": "Hello and welcome to another blog post about SwiftUI. This years WWDC is approaching fast and the expectation of new SwiftUI features and/or changes is tremendous. So I have decided to dedicate this post to something lighter yet still playful. I will share with you a simple way of creating a TikTok logo-ish effect but the main takeaway of this article is meant to be understanding how to create reusable styling for your app. Start with blending of layers The key to creating our logo is in specific blending of two colored shapes. Please check the code first: struct CommandLogoView: View { var body: some View { let logo = Image(systemName: \"command\") .font(.system(size: 200, weight: .bold, design: .default)) return logo .foregroundColor(Color(\"tiktokRed\")) .blendMode(.plusLighter) .overlay( logo .foregroundColor(Color(\"tiktokBlue\")) .blendMode(.plusLighter) .offset(CGSize(width: -4, height: -3)) ) } } As you see, I have used a simple SF Symbol as our logo. The resulting view takes this image, fills it with custom red color (defined in project assets) and as .overlay sets the same logo in blue, but slightly shifted with .offset viewModifier. The white area is the result of blend mode that is set to .plusLighter. Take this example and try to experiment with the viewModifier parameters, especially .blendMode to see how it affects the result. For instance, if you wish to use your logo on white background, you may want to set it to .plusDarker instead Wrap the effect as custom ViewModifier We have achieved our logo with effect quite easily, but what if we need to apply the same effect to more elements in our app? The beauty of SwiftUI is that you can specify custom ViewModifier and hide almost any of your styling into its implementation and thus gain the ability to reuse it anywhere. My implementation looks like this: struct TikTokEffect: ViewModifier { let offset: CGSize func negOffset()-\u003eCGSize { return CGSize(width: -self.offset.width, height: -self.offset.height) } func body(content: Content) -\u003e some View { content .offset(self.negOffset()) .foregroundColor(Color(\"tiktokRed\")) .blendMode(.plusLighter) .overlay( content .foregroundColor(Color(\"tiktokBlue\")) .blendMode(.plusLighter) .offset(self.offset) ) } } You can see that the overall structure derives from our first example, but it is no longer dependent on specific Image. Instead, the view modifier takes the Content that it has been applied to and sets the same content also as its overlay (but with a different color). Also, the offset is prepared to be set as viewModifier parameter so it can be changed from the outside. I have also introduced a negative offset here, that shifts the base content in the opposite direction to its overlay. With this improvement, the resulting view remains centered which I personaly prefer but it is optional change. Our view modifier can be used like this to any kind of view, even the root view if you wish;) Image(systemName: \"command\") .font(.system(size: 200, weight: .bold, design: .default)) .modifier(TikTokEffect(offset: CGSize(width: -4, height: -3))) Reuse view modifier within ButtonStyle Custom view modifiers are especially handy when creating custom ButtonStyle, transitions, or animations. Let me share here an example of a button, that applies our effect when pressed: struct TikTokButtonStyle: ButtonStyle { func backgroundShift(_ isPressed: Bool)-\u003eCGSize { if isPressed { return CGSize(width: -4, height: -3) } else { return CGSize() } } func makeBody(configuration: Self.Configuration) -\u003e some View { configuration.label .padding(20) .background( RoundedRectangle(cornerRadius: 10, style: .continuous) .modifier(TikTokEffect(offset: self.backgroundShift(configuration.isPressed))) ) .scaleEffect(configuration.isPressed ? 0.95: 1) .foregroundColor(.black) .animation(.spring()) } } Here we are changing the offset value of our effect based on configuration.isPressed value. The resulting button created as: Button(action: {}) { HStack { Image(systemName: \"command\") Text(\"Command Button\") } } .buttonStyle(TikTokButtonStyle()) now behaves like this: Summary Styling the app and creating reusable styles can benefit heavily from custom view modifiers. This is only one of the many use-cases, but the same approach can be used for any app look and feel It is wise to keep configurable interface of your view modifier so it can be tuned for specific scenarios and foremost - ANIMATIONS. As an inspiration and your challenge, I present you a loading indicator based on our TikTokEffect. Can you achieve the same - or better? Did you like this article? What do you want me to focus on next? Feel free to comment or criticize so the next one is even better. Or share it with other SwiftUI adopters ;)",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\" aria-label=\"Content\"\u003e\n    \u003carticle\u003e\n      \u003cdiv\u003e\n        \u003cp\u003eHello and welcome to another blog post about \u003ca href=\"https://developer.apple.com/documentation/swiftui\"\u003eSwiftUI\u003c/a\u003e. This years WWDC is approaching fast and the expectation of new SwiftUI features and/or changes is tremendous. So I have decided to dedicate this post to something lighter yet still playful.\u003c/p\u003e\n\n\u003cp\u003eI will share with you a simple way of creating a TikTok logo-ish effect but the main takeaway of this article is meant to be understanding how to create reusable styling for your app.\u003c/p\u003e\n\n\u003ch2 id=\"start-with-blending-of-layers\"\u003eStart with blending of layers\u003c/h2\u003e\n\n\u003cp\u003eThe key to creating our logo is in specific blending of two colored shapes. Please check the code first:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eCommandLogoView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003elogo\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;command\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efont\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esystem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eweight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebold\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edesign\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n        \n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003elogo\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforegroundColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;tiktokRed\u0026#34;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblendMode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eplusLighter\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoverlay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                \u003cspan\u003elogo\u003c/span\u003e\n                    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforegroundColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;tiktokBlue\u0026#34;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n                    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblendMode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eplusLighter\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoffset\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eCGSize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e4\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eAs you see, I have used a simple SF Symbol as our logo. The resulting view takes this image, fills it with custom red color (defined in project assets) and as \u003ccode\u003e.overlay\u003c/code\u003e sets the same logo in blue, but slightly shifted with \u003ccode\u003e.offset\u003c/code\u003e viewModifier. The white area is the result of blend mode that is set to \u003ccode\u003e.plusLighter\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://nerdyak.tech/assets/posts/10_tiktok_effect.jpg\" alt=\"logo\" title=\"Custom logo with TikTok effect\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eTake this example and try to experiment with the viewModifier parameters, especially \u003ccode\u003e.blendMode\u003c/code\u003e to see how it affects the result. For instance, if you wish to use your logo on white background, you may want to set it to \u003ccode\u003e.plusDarker\u003c/code\u003e instead\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2 id=\"wrap-the-effect-as-custom-viewmodifier\"\u003eWrap the effect as custom ViewModifier\u003c/h2\u003e\n\n\u003cp\u003eWe have achieved our logo with effect quite easily, but what if we need to apply the same effect to more elements in our app?\u003c/p\u003e\n\n\u003cp\u003eThe beauty of SwiftUI is that you can specify custom \u003ca href=\"https://developer.apple.com/documentation/swiftui/viewmodifier\"\u003eViewModifier\u003c/a\u003e and hide almost any of your styling into its implementation and thus gain the ability to reuse it anywhere.\u003c/p\u003e\n\n\u003cp\u003eMy implementation looks like this:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eTikTokEffect\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eViewModifier\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eoffset\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCGSize\u003c/span\u003e\n    \n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003enegOffset\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003eCGSize\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eCGSize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoffset\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoffset\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eContent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003econtent\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoffset\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enegOffset\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforegroundColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;tiktokRed\u0026#34;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblendMode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eplusLighter\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoverlay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                \u003cspan\u003econtent\u003c/span\u003e\n                    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforegroundColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;tiktokBlue\u0026#34;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n                    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblendMode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eplusLighter\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoffset\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eoffset\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\n            \n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eYou can see that the overall structure derives from our first example, but it is no longer dependent on specific Image. Instead, the view modifier takes the \u003ccode\u003eContent\u003c/code\u003e that it has been applied to and sets the same content also as its overlay (but with a different color).\u003c/p\u003e\n\n\u003cp\u003eAlso, the offset is prepared to be set as viewModifier parameter so it can be changed from the outside.\u003c/p\u003e\n\n\u003cp\u003eI have also introduced a negative offset here, that shifts the base content in the opposite direction to its overlay. With this improvement, the resulting view remains centered which I personaly prefer but it is optional change.\u003c/p\u003e\n\n\u003cp\u003eOur view modifier can be used like this to any kind of view, even the root view if you wish;)\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;command\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n   \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efont\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esystem\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eweight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebold\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003edesign\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n   \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emodifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eTikTokEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eoffset\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCGSize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e4\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e)))\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003ch2 id=\"reuse-view-modifier-within-buttonstyle\"\u003eReuse view modifier within ButtonStyle\u003c/h2\u003e\n\n\u003cp\u003eCustom view modifiers are especially handy when creating custom \u003ca href=\"https://developer.apple.com/documentation/swiftui/buttonstyle\"\u003eButtonStyle\u003c/a\u003e, transitions, or animations. Let me share here an example of a button, that applies our effect when pressed:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eTikTokButtonStyle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ebackgroundShift\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003eisPressed\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBool\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003eCGSize\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003eisPressed\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eCGSize\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e4\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eCGSize\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emakeBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSelf\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eConfiguration\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elabel\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e20\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n                \u003cspan\u003eRoundedRectangle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecornerRadius\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e10\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003estyle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtinuous\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emodifier\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eTikTokEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eoffset\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackgroundShift\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisPressed\u003c/span\u003e\u003cspan\u003e)))\u003c/span\u003e\n            \u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003escaleEffect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisPressed\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e0.95\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforegroundColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblack\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eanimation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003espring\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eHere we are changing the offset value of our effect based on \u003ccode\u003econfiguration.isPressed\u003c/code\u003e value. The resulting button created as:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eaction\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{})\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eHStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n                \u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;command\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n                \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Command Button\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n            \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuttonStyle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eTikTokButtonStyle\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003enow behaves like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://nerdyak.tech/assets/posts/10_tiktok_button.gif\" alt=\"button\" title=\"Example of custom button style utilizing TikTok effect\"/\u003e\u003c/p\u003e\n\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003eStyling the app and creating reusable styles can benefit heavily from custom view modifiers. This is only one of the many use-cases, but the same approach can be used for any app look and feel\u003c/li\u003e\n  \u003cli\u003eIt is wise to keep configurable interface of your view modifier so it can be tuned for specific scenarios and foremost - ANIMATIONS. As an inspiration and your challenge, I present you a loading indicator based on our TikTokEffect. Can you achieve the same - or better?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"https://nerdyak.tech/assets/posts/10_tiktok_loading.gif\" alt=\"loading\" title=\"Animating our TikTok effect\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eDid you like this article? What do you want me to focus on next?\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eFeel free to comment or criticize so the next one is even better. Or share it with other SwiftUI adopters ;)\u003c/em\u003e\u003c/p\u003e\n\n\n      \u003c/div\u003e\n      \n    \u003c/article\u003e\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2020-06-12T00:00:00Z",
  "modifiedTime": null
}
