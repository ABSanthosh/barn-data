{
  "id": "fe6d3468-a3a9-4a54-a2d4-db17f38c6c6e",
  "title": "Date Math is Hard, Let's Do it Tomorrow",
  "link": "https://atomicbird.com/blog/date-math-is-hard-lets-do-it-tomorrow/",
  "description": "This post is based on a lightning talk I gave at CocoaConf San Jose a couple of days ago. It’s that time of year– the time when summer time, or “Daylight Saving Time” as we for some reason call it in the USA– is ending. That time when a developer’s thoughts turn to date math and what a pain in the ass it can be. Why is this so hard to get right?",
  "author": "",
  "published": "Sun, 06 Nov 2016 00:00:00 +0000",
  "source": "https://atomicbird.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 10167,
  "excerpt": "This post is based on a lightning talk I gave at CocoaConf San Jose a couple of days ago. It’s that time of year– the time when summer time, or “Daylight Saving Time” as we for some reason call it in the USA– is ending. That time when a developer’s thoughts turn to date math and what a pain in the ass it can be. Why is this so hard to get right?",
  "siteName": "Title",
  "favicon": "https://atomicbird.com/apple-touch-icon-144-precomposed.png",
  "text": "This post is based on a lightning talk I gave at CocoaConf San Jose a couple of days ago. It’s that time of year– the time when summer time, or “Daylight Saving Time” as we for some reason call it in the USA– is ending. That time when a developer’s thoughts turn to date math and what a pain in the ass it can be. Why is this so hard to get right? It’d be nice to think that dates and times follow predictable routines whose cycles all use nice round (or at least consistent) numbers. But consider: What’s the weather on Sunday? However: The universe doesn’t care about regular numbers. The length of a year doesn’t divide into an integer number of days. Convenient time periods like months are no better. The Earth’s rotation isn’t entirely consistent. So we have leap years, and leap seconds. Months have variable lengths. Living on a planet which rotates on an axis that doesn’t point toward the sun means that time zones– or something like them– are inevitable. There have been various ideas about using a single global time zone, but that just ends up reinventing zones in a new guise (instead of tracking what time it is in different places, you end up needing to know what time the day starts in different places). Sadly the rules of time zones are in the hands of literally every government in the world. They can change at any time for reasons that don’t have to make sense. Times and dates are extremely familiar concepts. Anyone who uses a calendar and/or a clock of some sort tends to see them as mundane, routine things. That leads to complacency when writing code, and bugs inevitably result. Developers take date math for granted because it seems simple. Next thing you know you’re looking at an app that shows two Sundays in a week and nobody’s quite sure why. Doing all of this correctly often means using the iOS frameworks instead of mistakenly thinking you know what you’re doing. That hands the problem to people who do this kind of thing all the time and who are a lot less likely than you to screw it up. [NS]Calendar is your friend and will gladly help you out here. In iOS 8 it gained a bunch of useful new methods, too, so I recommend looking closely at the docs. But it’s not always so simple as finding the right framework method. In the rest of this post I’ll go through some common problems and how to avoid them. When is tomorrow? This is such an obvious question that it’s a pity so many developers get it wrong. The question is usually phrased as something like, how do I get a date that’s the same time tomorrow as it is right now? // WRONG let now = Date() let tomorrow = now.addingTimeInterval(24*60*60) Get the time 24 hours from now! Or maybe 23. Or 25. Or maybe 24 hours and one second. This is a fun one because it will very often give the correct answer. If you used this code most days, it’d be correct. But if you had used it on Saturday in the USA it would be off by an hour– because daylight saving time ended that night. This code is bad unless you actually want exactly 24 hours without considering time changes. In this case [NS]Calendar has you covered, with this handy method for doing date math: let tomorrow = Calendar.current.date(byAdding:.day, value:1, to:now) What is today? It sounds like a trivial concept. Maybe your app needs to find events that happen “today”. And you can get that by looking at the time from midnight to midnight. That’s today, right? Right? // Wrongy McWrongface let startOfDay = Calendar.current.date(bySettingHour:0, minute:0, second:0, of:now) let startOfTomorrow = startOfDay.addingTimeInterval(24*60*60) The first line takes today and gets a new date with the hour, minute, and second set to 0 to get the most recent midnight. The next line adds 24 hours, because we’re already being sloppy so why not? This one’s even better than the last. In the USA we’re used to the idea that summer time starts at 2 AM. But in some time zones it starts at midnight. One second it’s 11:59:59 and the next it’s 01:00:00 with no midnight. The code is fine, usually, but will have weird bugs that come up only occasionally and only in some countries. Oops. The code above uses [NS]Calendar but still makes bogus assumptions. A better approach would be: let startOfDay = Calendar.current.startOfDay(for:now) let startOfTomorrow = Calendar.current.date(byAdding:.day, value:1, to:startOfDay) If you’re looking for when “today” started, ask for when today started. Don’t assume you know. While you’re at it, don’t forget that “today” is a concept that depends on the local time zone. Today for you is different than today for someone a couple thousand miles east or west of you. Artisanal Locally-Grown Time So how do you deal with time zones, anyway? First, of course, don’t ever save local time. Save times and dates as UTC. Convert to and from local time when needed. When presenting dates to a user, use [NS]DateFormatter to convert the UTC date to an appropriate time zone. If your app lets the user enter times and/or dates, convert that to UTC before storing it. Whatever you do, do not attempt to do your own time zone conversions. True story: I once worked on an app where all time zone support was handled with the following values, which were hard coded in the app: Time Zone UTC offset Eastern -18000s Central -21600s Mountain -25200s Pacific -28800s Those are the four best-known time zones in North America with the GMT offsets for winter. Oh geez, I thought. It’s bad enough that this doesn’t account for moving clocks forward and back like we do. But it also misses the fact that Arizona doesn’t mess with daylight “saving” time. It’s correct maybe 45% of the time, if I’m generous and assume that the app won’t ever be used outside of the continental USA. True fact: there are several hundred time zones in the world. A time zone combines an offset from UTC with rules about how that offset changes based on the date. Most time zones have summer time, but not all. Those that do have it usually disagree about when it starts, or ends, or both. Any difference means you have a different time zone. Fortunately iOS encapsulates all this in [NS]TimeZone. It uses the IANA Time Zone Database which is a de facto standard used by pretty much every computer company everywhere. If you need to calculate dates in a different time zone, use [NS]Calendar and tell it what time zone to use. So if you need to know when “today” is somewhere else, just choose the right time zone. var myCalendar = Calendar.current if let timeZone = TimeZone(identifier: \"America/New_York\") { myCalendar.timeZone = timeZone } let startOfDay = myCalendar.startOfDay(for: now) How do I convert a date to a different time zone? You don’t, if by “date” you mean [NS]Date. It represents a single instant in time, everywhere (ignoring relativistic effects). That means if you use the following and someone on a different continent does so at the same moment, you both get the same result! Don’t forget: a Date has no time zone information. Also, don’t forget: A Date has no time zone information. I realize that technically those are the same thing, but it’s such a common mistake I thought it was worth mentioning twice. Since there’s no time zone information, converting to a different time zone doesn’t make sense. If you think you need to convert a date to a different time zone, you’re probably already in deep trouble with dates. It’s time to stop what you’re doing and reconsider your life choices. How long is a month? This one’s more obvious than the others because of course you know that different months have different lengths. But remember, it’s all edge cases. What if you want to get the date one month from today? What if “today” happens to be January 31? February 31 maybe? If you’re asking that question on the last day of the month, you probably want the last day of next month. You can use that handy date(byAdding:, value:, to:) method from earlier here, but you have to be careful how you do it. One way is a cumulative calculation, adding one month to the start date, and then one month to that, etc: // Get a date on 31 January 2017 let startDate = (Calendar.current as NSCalendar).date(era: 1, year: 2017, month: 1, day: 31, hour: 12, minute: 0, second: 0, nanosecond: 0) print(startDate) var currentDate : Date = startDate! for i in 1...12 { currentDate = Calendar.current.date(byAdding: .month, value: 1, to: currentDate)! print(currentDate) } Things start out OK, but quickly go awry: 2017-01-31 19:00:00 +0000 2017-02-28 19:00:00 +0000 2017-03-28 18:00:00 +0000 2017-04-28 18:00:00 +0000 2017-05-28 18:00:00 +0000 2017-06-28 18:00:00 +0000 2017-07-28 18:00:00 +0000 2017-08-28 18:00:00 +0000 2017-09-28 18:00:00 +0000 2017-10-28 18:00:00 +0000 2017-11-28 19:00:00 +0000 2017-12-28 19:00:00 +0000 January 31, then February 28? Good. But one month after that is March 28. You get stuck on the 28th instead of the end of the month. Another approach is to keep adding months to the start date, discarding intermediate values when you don’t need them anymore: for i in 1...12 { let nextDate = Calendar.current.date(byAdding: .month, value: i, to: startDate!) print(nextDate!) } This looks better: 2017-01-31 19:00:00 +0000 2017-02-28 19:00:00 +0000 2017-03-31 18:00:00 +0000 2017-04-30 18:00:00 +0000 2017-05-31 18:00:00 +0000 2017-06-30 18:00:00 +0000 2017-07-31 18:00:00 +0000 2017-08-31 18:00:00 +0000 2017-09-30 18:00:00 +0000 2017-10-31 18:00:00 +0000 2017-11-30 19:00:00 +0000 2017-12-31 19:00:00 +0000 There we go, last day of the month every time. Get up and do a happy dance, you’ve earned it. What can I do? ![](Entering Mountain.jpg) When it comes to dates, everything you know is wrong. At least sometimes. Code that looks like it works may well have weird bugs that only manifest on specific dates or in specific locations. So in short: assume nothing. Even the most obvious things, like when today started, are likely wrong at some point. Use the iOS frameworks whenever possible. But even then, test your results! “I used a framework method” doesn’t mean you actually did the right thing. Good luck, we’ll all need it.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \u003cp\u003e\u003cem\u003eThis post is based on a lightning talk I gave at \u003ca href=\"http://cocoaconf.com/sanjose-2016/home\"\u003eCocoaConf San Jose\u003c/a\u003e a couple of days ago.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://atomicbird.com/blog/date-math-is-hard-lets-do-it-tomorrow/IMG_7180.PNG#floatright\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eIt’s that time of year– the time when summer time, or “Daylight Saving Time” as we for some reason call it in the USA– is ending. That time when a developer’s thoughts turn to date math and what a pain in the ass it can be.\u003c/p\u003e\n\u003cp\u003eWhy is this so hard to get right? It’d be nice to think that dates and times follow predictable routines whose cycles all use nice round (or at least consistent) numbers. But consider: What’s the weather on Sunday?\u003c/p\u003e\n\u003cp\u003eHowever:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eThe universe doesn’t care about regular numbers. The length of a year doesn’t divide into an integer number of days. Convenient time periods like months are no better. The Earth’s rotation isn’t entirely consistent. So we have leap years, and leap seconds. Months have variable lengths.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLiving on a planet which rotates on an axis that doesn’t point toward the sun means that time zones– or something like them– are inevitable. There have been various ideas about using a single global time zone, but that just ends up reinventing zones in a new guise (instead of tracking what time it is in different places, you end up needing to know what time the day starts in different places). Sadly the rules of time zones are in the hands of literally every government in the world. They can change at any time for reasons that don’t have to make sense.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTimes and dates are extremely familiar concepts. Anyone who uses a calendar and/or a clock of some sort tends to see them as mundane, routine things. That leads to complacency when writing code, and bugs inevitably result. Developers take date math for granted because it seems simple. Next thing you know you’re looking at an app that shows two Sundays in a week and nobody’s quite sure why.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eDoing all of this correctly often means using the iOS frameworks instead of mistakenly thinking you know what you’re doing. That hands the problem to people who do this kind of thing \u003cem\u003eall the time\u003c/em\u003e and who are a lot less likely than you to screw it up.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003e[NS]Calendar\u003c/code\u003e is your friend\u003c/strong\u003e and will gladly help you out here. In iOS 8 it gained a bunch of useful new methods, too, so I recommend looking closely at the docs. But it’s not always so simple as finding the right framework method. In the rest of this post I’ll go through some common problems and how to avoid them.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://atomicbird.com/blog/date-math-is-hard-lets-do-it-tomorrow/1di9h0.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"when-is-tomorrow\"\u003eWhen is tomorrow?\u003c/h2\u003e\n\u003cp\u003eThis is such an obvious question that it’s a pity so many developers get it wrong. The question is usually phrased as something like, how do I get a date that’s the same time tomorrow as it is right now?\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// WRONG\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e now = Date()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e tomorrow = now.addingTimeInterval(\u003cspan\u003e24\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e60\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e60\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eGet the time 24 hours from now! Or maybe 23. Or 25. Or maybe 24 hours \u003cstrong\u003eand one second\u003c/strong\u003e. This is a fun one because it will very often give the correct answer. If you used this code \u003cstrong\u003emost days\u003c/strong\u003e, it’d be correct. But if you had used it \u003cstrong\u003eon Saturday in the USA\u003c/strong\u003e it would be off by an hour– because daylight saving time ended that night. This code is bad unless you actually want exactly 24 hours without considering time changes.\u003c/p\u003e\n\u003cp\u003eIn this case \u003ccode\u003e[NS]Calendar\u003c/code\u003e has you covered, with this handy method for doing date math:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e tomorrow = Calendar.current.date(byAdding:.day,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    value:\u003cspan\u003e1\u003c/span\u003e, to:now)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"what-is-today\"\u003eWhat is today?\u003c/h2\u003e\n\u003cp\u003eIt sounds like a trivial concept. Maybe your app needs to find events that happen “today”. And you can get that by looking at the time from midnight to midnight. That’s today, right?\u003c/p\u003e\n\u003cp\u003eRight?\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// Wrongy McWrongface\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e startOfDay = Calendar.current.date(bySettingHour:\u003cspan\u003e0\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    minute:\u003cspan\u003e0\u003c/span\u003e, second:\u003cspan\u003e0\u003c/span\u003e, of:now)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e startOfTomorrow = startOfDay.addingTimeInterval(\u003cspan\u003e24\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e60\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e60\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe first line takes \u003ccode\u003etoday\u003c/code\u003e and gets a new date with the hour, minute, and second set to 0 to get the most recent midnight. The next line adds 24 hours, because we’re already being sloppy so why not?\u003c/p\u003e\n\u003cp\u003eThis one’s even better than the last. In the USA we’re used to the idea that summer time starts at 2 AM. But in some time zones it starts at midnight. One second it’s 11:59:59 and the next it’s 01:00:00 \u003cstrong\u003ewith no midnight\u003c/strong\u003e. The code is fine, \u003cem\u003eusually\u003c/em\u003e, but will have weird bugs that come up only occasionally and only in some countries. Oops.\u003c/p\u003e\n\u003cp\u003eThe code above uses \u003ccode\u003e[NS]Calendar\u003c/code\u003e but still makes bogus assumptions. A better approach would be:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e startOfDay = Calendar.current.startOfDay(\u003cspan\u003efor\u003c/span\u003e:now)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e startOfTomorrow = Calendar.current.date(byAdding:.day,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    value:\u003cspan\u003e1\u003c/span\u003e, to:startOfDay)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you’re looking for when “today” started, \u003cstrong\u003eask for when today started\u003c/strong\u003e. Don’t assume you know. While you’re at it, don’t forget that “today” is a concept that depends on the local time zone. Today for you is different than today for someone a couple thousand miles east or west of you.\u003c/p\u003e\n\u003ch2 id=\"artisanal-locally-grown-time\"\u003eArtisanal Locally-Grown Time\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://atomicbird.com/blog/date-math-is-hard-lets-do-it-tomorrow/how-do-they-work.jpg\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eSo how do you deal with time zones, anyway?\u003c/p\u003e\n\u003cp\u003eFirst, of course, \u003cstrong\u003edon’t ever save local time\u003c/strong\u003e. Save times and dates as UTC. Convert to and from local time when needed. When presenting dates to a user, use \u003ccode\u003e[NS]DateFormatter\u003c/code\u003e to convert the UTC date to an appropriate time zone. If your app lets the user enter times and/or dates, convert that to UTC before storing it. Whatever you do, \u003cstrong\u003edo not attempt to do your own time zone conversions\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eTrue story: I once worked on an app where all time zone support was handled with the following values, which were hard coded in the app:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eTime Zone\u003c/th\u003e\n\u003cth\u003eUTC offset\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eEastern\u003c/td\u003e\n\u003ctd\u003e-18000s\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCentral\u003c/td\u003e\n\u003ctd\u003e-21600s\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eMountain\u003c/td\u003e\n\u003ctd\u003e-25200s\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ePacific\u003c/td\u003e\n\u003ctd\u003e-28800s\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThose are the four best-known time zones in North America with the GMT offsets for winter. Oh geez, I thought. It’s bad enough that this doesn’t account for moving clocks forward and back like we do. But it also misses the fact that Arizona doesn’t mess with daylight “saving” time. It’s correct maybe 45% of the time, if I’m generous and assume that the app won’t ever be used outside of the continental USA.\u003c/p\u003e\n\u003cp\u003eTrue fact: there are several hundred time zones in the world. A time zone combines an offset from UTC with rules about how that offset changes based on the date. Most time zones have summer time, but not all. Those that do have it usually disagree about when it starts, or ends, or both. Any difference means you have a different time zone.\u003c/p\u003e\n\u003cp\u003eFortunately iOS encapsulates all this in \u003ccode\u003e[NS]TimeZone\u003c/code\u003e. It uses the \u003ca href=\"https://www.iana.org/time-zones\"\u003eIANA Time Zone Database\u003c/a\u003e which is a de facto standard used by pretty much every computer company everywhere.\u003c/p\u003e\n\u003cp\u003eIf you need to calculate dates in a different time zone, use \u003ccode\u003e[NS]Calendar\u003c/code\u003e and tell it what time zone to use. So if you need to know when “today” is \u003cem\u003esomewhere else\u003c/em\u003e, just choose the right time zone.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e myCalendar = Calendar.current\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e timeZone = TimeZone(identifier: \u003cspan\u003e\u0026#34;America/New_York\u0026#34;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    myCalendar.timeZone = timeZone\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e startOfDay = myCalendar.startOfDay(\u003cspan\u003efor\u003c/span\u003e: now)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"how-do-i-convert-a-date-to-a-different-time-zone\"\u003eHow do I convert a date to a different time zone?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eYou don’t\u003c/strong\u003e, if by “date” you mean \u003ccode\u003e[NS]Date\u003c/code\u003e. It represents a single instant in time, \u003cem\u003eeverywhere\u003c/em\u003e (ignoring relativistic effects). That means if you use the following and someone on a different continent does so at the same moment, you both get the same result!\u003c/p\u003e\n\u003cp\u003eDon’t forget: a \u003ccode\u003eDate\u003c/code\u003e has no time zone information. Also, don’t forget: A \u003ccode\u003eDate\u003c/code\u003e has no time zone information. I realize that technically those are the same thing, but it’s such a common mistake I thought it was worth mentioning twice.\u003c/p\u003e\n\u003cp\u003eSince there’s no time zone information, converting to a different time zone doesn’t make sense. If you think you need to convert a date to a different time zone, you’re probably already in deep trouble with dates. It’s time to stop what you’re doing and reconsider your life choices.\u003c/p\u003e\n\u003ch2 id=\"how-long-is-a-month\"\u003eHow long is a month?\u003c/h2\u003e\n\u003cp\u003eThis one’s more obvious than the others because of course you know that different months have different lengths. But remember, it’s all edge cases. What if you want to get the date one month from today? What if “today” happens to be January 31? February 31 maybe?\u003c/p\u003e\n\u003cp\u003eIf you’re asking that question on the last day of the month, you probably want the last day of next month. You can use that handy \u003ccode\u003edate(byAdding:, value:, to:)\u003c/code\u003e method from earlier here, but you have to be careful how you do it.\u003c/p\u003e\n\u003cp\u003eOne way is a cumulative calculation, adding one month to the start date, and then one month to that, etc:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// Get a date on 31 January 2017\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e startDate = (Calendar.current \u003cspan\u003eas\u003c/span\u003e NSCalendar).date(era: \u003cspan\u003e1\u003c/span\u003e, year: \u003cspan\u003e2017\u003c/span\u003e, month: \u003cspan\u003e1\u003c/span\u003e, day: \u003cspan\u003e31\u003c/span\u003e, hour: \u003cspan\u003e12\u003c/span\u003e, minute: \u003cspan\u003e0\u003c/span\u003e, second: \u003cspan\u003e0\u003c/span\u003e, nanosecond: \u003cspan\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eprint(startDate)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e currentDate : Date = startDate!\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efor\u003c/span\u003e i \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e1.\u003c/span\u003e..\u003cspan\u003e12\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    currentDate = Calendar.current.date(byAdding: .month, value: \u003cspan\u003e1\u003c/span\u003e, to: currentDate)\u003cspan\u003e!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    print(currentDate)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThings start out OK, but quickly go awry:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e2017-01-31 19:00:00 +0000\n2017-02-28 19:00:00 +0000\n2017-03-28 18:00:00 +0000\n2017-04-28 18:00:00 +0000\n2017-05-28 18:00:00 +0000\n2017-06-28 18:00:00 +0000\n2017-07-28 18:00:00 +0000\n2017-08-28 18:00:00 +0000\n2017-09-28 18:00:00 +0000\n2017-10-28 18:00:00 +0000\n2017-11-28 19:00:00 +0000\n2017-12-28 19:00:00 +0000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJanuary 31, then February 28? Good. But one month after that is March 28. You get stuck on the 28th instead of the end of the month.\u003c/p\u003e\n\u003cp\u003eAnother approach is to keep adding months to the start date, discarding intermediate values when you don’t need them anymore:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003efor\u003c/span\u003e i \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003e1.\u003c/span\u003e..\u003cspan\u003e12\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e nextDate = Calendar.current.date(byAdding: .month, value: i, to: startDate!)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    print(nextDate!)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis looks better:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e2017-01-31 19:00:00 +0000\n2017-02-28 19:00:00 +0000\n2017-03-31 18:00:00 +0000\n2017-04-30 18:00:00 +0000\n2017-05-31 18:00:00 +0000\n2017-06-30 18:00:00 +0000\n2017-07-31 18:00:00 +0000\n2017-08-31 18:00:00 +0000\n2017-09-30 18:00:00 +0000\n2017-10-31 18:00:00 +0000\n2017-11-30 19:00:00 +0000\n2017-12-31 19:00:00 +0000\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThere we go, last day of the month every time. Get up and do a happy dance, you’ve earned it.\u003c/p\u003e\n\u003ch2 id=\"what-can-i-do\"\u003eWhat can I do?\u003c/h2\u003e\n\u003cp\u003e![](Entering Mountain.jpg)\u003c/p\u003e\n\u003cp\u003eWhen it comes to dates, everything you know is wrong. At least sometimes. Code that looks like it works may well have weird bugs that only manifest on specific dates or in specific locations.\u003c/p\u003e\n\u003cp\u003eSo in short: assume nothing. Even the most obvious things, like when today started, are likely wrong at some point. Use the iOS frameworks whenever possible.\u003c/p\u003e\n\u003cp\u003eBut even then, test your results! “I used a framework method” doesn’t mean you actually did the right thing.\u003c/p\u003e\n\u003cp\u003eGood luck, we’ll all need it.\u003c/p\u003e\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2016-11-06T00:00:00Z",
  "modifiedTime": "2016-11-06T00:00:00Z"
}
