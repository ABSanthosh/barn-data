{
  "id": "728c569b-1156-4870-ac6f-6bb9097ccdbe",
  "title": "Building Better Views (Part I)",
  "link": "https://fabisevi.ch/2019/12/26/building-better-views-part-i/",
  "description": "As iOS developers, a lot of our work involves taking models from a server, and transforming them to be displayed on an iPhone or iPad. This sounds like a job for some declarative architecture. ü§î",
  "author": "Joe Fabisevich",
  "published": "Thu, 26 Dec 2019 00:00:00 GMT",
  "source": "https://www.fabisevi.ch/feed.xml",
  "categories": null,
  "byline": "",
  "length": 6390,
  "excerpt": "As iOS developers, a lot of our work involves taking models from a server, and transforming them to be displayed on an iPhone or iPad. This sounds like a job for some declarative architecture. ü§î",
  "siteName": "",
  "favicon": "https://fabisevi.ch/icons/icon-512x512.png?v=b60b950dc439294a707fb76cdaca4274",
  "text": "As iOS developers, a lot of our work involves taking models from a server, and transforming them to be displayed on an iPhone or iPad. This sounds like a job for some declarative architecture. ü§î If you ask 3 programmers how to define MVVM, expect to get 7 different responses.‚Äî ‚ú® Joe Fabisevich‚Ñ¢ ‚ú® (@mergesort) April 14, 2016 Confession: I‚Äôve never fully bought into MVVM. I don‚Äôt think it‚Äôs worse than MVC. I use View Models as a place to store state and actions for View Controllers, and preferably stateless functions for manipulating data. In my experience, things become harder to maintain when they start becoming a crutch, as a place to put your code if it doesn‚Äôt neatly fall into the Model, View, or Controller label. With this in mind, I realized we need an answer for configuring our views in a way that‚Äôs maintainable, and ultimately transforms one or multiple models into a view. This led me to the idea of ViewData. I started working on this with @shengjundong at Timehop, and have been using it successfully across apps of varying sizes since. There are three parts to this approach: A UIView instance. This is your standard view that you‚Äôll be displaying in an app. It can be a regular class, or a custom subclass as you need. A ViewData protocol. This is what‚Äôs going to keep track of the data that needs to be displayed in your view. Most commonly this will be a slice of a model, used specifically for rendering the view. A configure(viewData: ViewData) function. This is what‚Äôs going to map your View to your ViewData. An Example Let‚Äôs start with an example, where we‚Äôre building a view to display a comment. It will have a few properties you‚Äôd expect from a comment view. A commenter, their avatar, some text, and a timestamp. To make it easier to visualize, let‚Äôs imagine it looks like this: We start with a simple model. This is what we‚Äôll be later manipulating for display purposes. public struct Comment { let text: String let commenter: String let createdAt: Date let avatarURL: URL? } A simple UIView subclass to display the comment. public final class CommentView: UIView { let titleLabel = UILabel() let subtitleLabel = UILabel() let statusLabel = UILabel() let replyButton = UIButton(type: .custom) let avatarImageView = UIImageView() } Now we get a little to the fun stuff. We‚Äôll make our first ViewData protocol. This represents how we will render the data we‚Äôre trying to populate the UIView with. protocol CommentViewData { var title: String { get } var subtitle: String { get } var timestamp: String { get } var replyText: String { get } var avatarURL: URL? { get } } Let‚Äôs conform our model to our CommentViewData protocol. This will be how we tell our CommentView how it should display our model whenever it comes across an instance of it. // The original data source is made to conform to the protocol which we are using for display, CommentViewData extension Comment: CommentViewData { var title: String { return self.commenter } var subtitle: String { return self.text } var replyText: String { return NSLocalizedString(\"Reply\", comment: \"Text for replying to a comment\") } var replyImage: UIImage? { return UIImage(named: \"reply\") } var timestamp: String { return self.createdAt.timeAgoSinceNow } } One thing to note is that the avatarURL property automatically conforms to the CommentViewData! As long as we plan to use it directly, we don‚Äôt have to add it to our extension. Last but not least, we need to configure the CommentView with a CommentViewData. extension CommentView { func configure(viewData: CommentViewData) { self.titleLabel.text = viewData.title self.subtitleLabel.text = viewData.subtitle self.statusLabel.text = viewData.timestamp self.replyButton.setTitle(viewData.replyText, for: .normal) self.replyButton.setImage(viewData.replyImage, for: .normal) self.avatarImageView.setImage(from: viewData.avatarURL) } } We‚Äôve got everything configured in a nice declarative fashion, but how do we actually use this? This is in my opinion the best part. Let‚Äôs look at the call-site. func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell { // My own homegrown solution, you're under no obligation to use it of course üòá let cell = tableView.dequeueReusableCell(forIndexPath: indexPath) as GenericTableCell\u003cCommentView\u003e // This is of type `Comment` let currentComment = self.comments[indexPath.row] // Comment conforms to `CommentViewData`, so we can use it directly! cell.customView.configure(viewData: currentComment) return cell } And that‚Äôs it! All you need to do is pass the original model object to the view, and as long as it conforms to the right protocol, you‚Äôve got it working without any intermediate objects. This may seem like a lot of boilerplate, and to be honest, it's more than I would like. There are other languages with features such as row polymorphism or extensible records which would make this easier. Until Swift supports these language features, or macros, or more powerful tooling that can fill the gaps, this is the best solution I‚Äôve found to enforcing good practices and leveraging compile-time safety for view configuration. Now you may also be thinking ‚Äúsometimes my models don‚Äôt map to how they‚Äôre displayed one to one, how can I make that work?‚Äù Follow along with part 2, where we'll cover that, and a few other questions you may have. As always, I'm excited to hear your thoughts, and am receptive to feedback!Joe Fabisevich is an indie developer creating software at Red Panda Club Inc. while writing about design, development, and building a company. Formerly an iOS developer working on societal issues @Twitter. These days I don't tweet, but I do post on Threads.Like my writing? You can keep up with it in your favorite RSS reader, or get posts emailed in newsletter form. I promise to never spam you or send you anything other than my posts, it's just a way for you to read my writing wherever's most comfortable for you.If you'd like to know more, wanna talk, or need some advice, feel free to sign up for office hours, I'm very friendly. üôÇ",
  "image": "https://fabisevi.ch/static/pic-f5999ef8dd476bfbf9d65ddbace7e387.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eAs iOS developers, a lot of our work involves taking models from a server, and transforming them to be displayed on an iPhone or iPad. This sounds like a job for some declarative architecture. ü§î\u003c/p\u003e\n\n\u003cblockquote data-theme=\"light\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eIf you ask 3 programmers how to define MVVM, expect to get 7 different responses.\u003c/p\u003e‚Äî ‚ú® Joe Fabisevich‚Ñ¢ ‚ú® (@mergesort) \u003ca href=\"https://twitter.com/mergesort/status/720706593982062592?ref_src=twsrc%5Etfw\"\u003eApril 14, 2016\u003c/a\u003e\u003c/blockquote\u003e \n\u003cp\u003eConfession: I‚Äôve never fully bought into MVVM. I don‚Äôt think it‚Äôs worse than MVC. I use View Models as a place to store state and actions for View Controllers, and preferably stateless functions for manipulating data. In my experience, things become harder to maintain when they start becoming a crutch, as a place to put your code if it doesn‚Äôt neatly fall into the Model, View, or Controller label.\u003c/p\u003e\n\u003cp\u003eWith this in mind, I realized we need an answer for configuring our views in a way that‚Äôs maintainable, and ultimately transforms one or multiple models into a view. This led me to the idea of \u003ccode\u003eViewData\u003c/code\u003e. I started working on this with \u003ca href=\"https://twitter.com/shengjundong\"\u003e@shengjundong\u003c/a\u003e at \u003ca href=\"https://www.timehop.com/\"\u003eTimehop\u003c/a\u003e, and have been using it successfully across apps of varying sizes since.\u003c/p\u003e\n\u003cp\u003eThere are three parts to this approach:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eA \u003ccode\u003eUIView\u003c/code\u003e instance. This is your standard view that you‚Äôll be displaying in an app. It can be a regular class, or a custom subclass as you need.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA \u003ccode\u003eViewData\u003c/code\u003e protocol. This is what‚Äôs going to keep track of the data that needs to be displayed in your view. Most commonly this will be a slice of a model, used specifically for rendering the view.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA \u003ccode\u003econfigure(viewData: ViewData)\u003c/code\u003e function. This is what‚Äôs going to map your View to your ViewData.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cpicture\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/fc615/view_data_diagram.avif 243w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/b3175/view_data_diagram.avif 485w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/006d3/view_data_diagram.avif 970w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/b52ec/view_data_diagram.avif 1455w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/dbea6/view_data_diagram.avif 1798w\" sizes=\"(max-width: 970px) 100vw, 970px\" type=\"image/avif\"/\u003e\u003csource srcset=\"https://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/0e3e2/view_data_diagram.webp 243w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/749af/view_data_diagram.webp 485w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/dbca2/view_data_diagram.webp 970w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/bda17/view_data_diagram.webp 1455w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/f98ee/view_data_diagram.webp 1798w\" sizes=\"(max-width: 970px) 100vw, 970px\" type=\"image/webp\"/\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/8aea6/view_data_diagram.png 243w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/44c61/view_data_diagram.png 485w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/587b0/view_data_diagram.png 970w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/5b795/view_data_diagram.png 1455w,\nhttps://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/8454b/view_data_diagram.png 1798w\" sizes=\"(max-width: 970px) 100vw, 970px\" type=\"image/png\"/\u003e\n\u003cimg src=\"https://fabisevi.ch/static/0f600b07895848c61817aa8345f754af/587b0/view_data_diagram.png\" alt=\"A diagram explaining the interaction flow of ViewData\" title=\"A diagram explaining the interaction flow of ViewData\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003c/picture\u003e\n\u003c/span\u003e\u003c/p\u003e\n\u003ch5\u003eAn Example\u003c/h5\u003e\n\u003cp\u003eLet‚Äôs start with an example, where we‚Äôre building a view to display a comment. It will have a few properties you‚Äôd expect from a comment view. A commenter, their avatar, some text, and a timestamp. To make it easier to visualize, let‚Äôs imagine it looks like this:\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cpicture\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/fc615/comment_example.avif 243w,\nhttps://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/b3175/comment_example.avif 485w,\nhttps://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/6bc71/comment_example.avif 710w\" sizes=\"(max-width: 710px) 100vw, 710px\" type=\"image/avif\"/\u003e\u003csource srcset=\"https://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/0e3e2/comment_example.webp 243w,\nhttps://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/749af/comment_example.webp 485w,\nhttps://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/457aa/comment_example.webp 710w\" sizes=\"(max-width: 710px) 100vw, 710px\" type=\"image/webp\"/\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/8aea6/comment_example.png 243w,\nhttps://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/44c61/comment_example.png 485w,\nhttps://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/7131f/comment_example.png 710w\" sizes=\"(max-width: 710px) 100vw, 710px\" type=\"image/png\"/\u003e\n\u003cimg src=\"https://fabisevi.ch/static/bb599d186a5165d938803a6110500edb/7131f/comment_example.png\" alt=\"A visual example of a commment box we\u0026#39;re going to build in code\" title=\"A visual example of a commment box we\u0026#39;re going to build in code\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003c/picture\u003e\n\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eWe start with a simple model. This is what we‚Äôll be later manipulating for display purposes.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eComment\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e text\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e commenter\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e createdAt\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e avatarURL\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eA simple \u003ccode\u003eUIView\u003c/code\u003e subclass to display the comment.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003efinal\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCommentView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUIView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e titleLabel \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUILabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e subtitleLabel \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUILabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e statusLabel \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUILabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e replyButton \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUIButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003etype\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003ecustom\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e avatarImageView \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eUIImageView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e \u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we get a little to the fun stuff.\u003c/p\u003e\n\u003cp\u003eWe‚Äôll make our first \u003ccode\u003eViewData\u003c/code\u003e protocol. This represents how we will render the data we‚Äôre trying to populate the \u003ccode\u003eUIView\u003c/code\u003e with.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprotocol\u003c/span\u003e \u003cspan\u003eCommentViewData\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e title\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e subtitle\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e timestamp\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e replyText\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e avatarURL\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet‚Äôs conform our model to our \u003ccode\u003eCommentViewData\u003c/code\u003e protocol. This will be how we tell our \u003ccode\u003eCommentView\u003c/code\u003e how it should display our model whenever it comes across an instance of it.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// The original data source is made to conform to the protocol which we are using for display, CommentViewData\u003c/span\u003e\n\n\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eComment\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCommentViewData\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e title\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecommenter\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e subtitle\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003etext\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e replyText\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eNSLocalizedString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;Reply\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e comment\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Text for replying to a comment\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e replyImage\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUIImage\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eUIImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003enamed\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;reply\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e timestamp\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecreatedAt\u003cspan\u003e.\u003c/span\u003etimeAgoSinceNow\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOne thing to note is that the \u003ccode\u003eavatarURL\u003c/code\u003e property automatically conforms to the \u003ccode\u003eCommentViewData\u003c/code\u003e! As long as we plan to use it directly, we don‚Äôt have to add it to our extension.\u003c/p\u003e\n\u003cp\u003eLast but not least, we need to configure the \u003ccode\u003eCommentView\u003c/code\u003e with a \u003ccode\u003eCommentViewData\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eCommentView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eviewData\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCommentViewData\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003etitleLabel\u003cspan\u003e.\u003c/span\u003etext \u003cspan\u003e=\u003c/span\u003e viewData\u003cspan\u003e.\u003c/span\u003etitle\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003esubtitleLabel\u003cspan\u003e.\u003c/span\u003etext \u003cspan\u003e=\u003c/span\u003e viewData\u003cspan\u003e.\u003c/span\u003esubtitle\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003estatusLabel\u003cspan\u003e.\u003c/span\u003etext \u003cspan\u003e=\u003c/span\u003e viewData\u003cspan\u003e.\u003c/span\u003etimestamp\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ereplyButton\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetTitle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eviewData\u003cspan\u003e.\u003c/span\u003ereplyText\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003enormal\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ereplyButton\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eviewData\u003cspan\u003e.\u003c/span\u003ereplyImage\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003enormal\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eavatarImageView\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esetImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efrom\u003cspan\u003e:\u003c/span\u003e viewData\u003cspan\u003e.\u003c/span\u003eavatarURL\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWe‚Äôve got everything configured in a nice declarative fashion, but how do we actually use this? This is in my opinion the best part. Let‚Äôs look at the call-site.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003etableView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e tableView\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUITableView\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e cellForRowAt indexPath\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIndexPath\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eUITableViewCell\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e// My own homegrown solution, you\u0026#39;re under no obligation to use it of course üòá\u003c/span\u003e\n      \u003cspan\u003elet\u003c/span\u003e cell \u003cspan\u003e=\u003c/span\u003e tableView\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edequeueReusableCell\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eforIndexPath\u003cspan\u003e:\u003c/span\u003e indexPath\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e \u003cspan\u003eGenericTableCell\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eCommentView\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\n        \n      \u003cspan\u003e// This is of type `Comment`\u003c/span\u003e\n      \u003cspan\u003elet\u003c/span\u003e currentComment \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecomments\u003cspan\u003e[\u003c/span\u003eindexPath\u003cspan\u003e.\u003c/span\u003erow\u003cspan\u003e]\u003c/span\u003e\n    \n      \u003cspan\u003e// Comment conforms to `CommentViewData`, so we can use it directly!\u003c/span\u003e\n      cell\u003cspan\u003e.\u003c/span\u003ecustomView\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eviewData\u003cspan\u003e:\u003c/span\u003e currentComment\u003cspan\u003e)\u003c/span\u003e\n    \n      \u003cspan\u003ereturn\u003c/span\u003e cell\n    \u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAnd that‚Äôs it! All you need to do is pass the original model object to the view, and as long as it conforms to the right protocol, you‚Äôve got it working without any intermediate objects.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eThis may seem like a lot of boilerplate, and to be honest, it\u0026#39;s more than I would like. There are other languages with features such as \u003ca href=\"https://github.com/purescript/documentation/blob/a15f4e6b40e0a8dc874285526afe13f3074b6d26/language/Types.md#row-polymorphism\"\u003erow polymorphism\u003c/a\u003e or \u003ca href=\"https://medium.com/@ckoster22/advanced-types-in-elm-extensible-records-67e9d804030d\"\u003eextensible records\u003c/a\u003e which would make this easier. Until Swift supports these language features, or macros, or more powerful tooling that can fill the gaps, this is the best solution I‚Äôve found to enforcing good practices and leveraging compile-time safety for view configuration.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eNow you may also be thinking ‚Äúsometimes my models don‚Äôt map to how they‚Äôre displayed one to one, how can I make that work?‚Äù Follow along with \u003ca href=\"https://fabisevi.ch/2019/12/26/building-better-views-part-ii\"\u003epart 2\u003c/a\u003e, where we\u0026#39;ll cover that, and a few other questions you may have.\u003c/p\u003e\n\u003cp\u003eAs always, I\u0026#39;m excited to hear your thoughts, and am receptive to \u003ca href=\"https://twitter.com/mergesort\"\u003efeedback\u003c/a\u003e!\u003c/p\u003e\u003c/div\u003e\u003cp\u003eJoe Fabisevich is an indie developer creating software at \u003ca href=\"https://redpanda.club\"\u003eRed Panda Club Inc.\u003c/a\u003e while writing about design, development, and building a company. Formerly an iOS developer working on societal issues \u003ca href=\"https://threads.net/mergesort\"\u003e@Twitter\u003c/a\u003e. These days I don\u0026#39;t tweet, but I do post on \u003ca href=\"https://threads.net/mergesort\"\u003eThreads\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLike my writing? You can keep up with it in your favorite \u003ca href=\"https://fabisevi.ch/feed.xml\"\u003eRSS\u003c/a\u003e reader, or get posts \u003ca href=\"https://mailchi.mp/3237be1819ae/fabisevich-blog-posts\"\u003eemailed\u003c/a\u003e in newsletter form. I promise to never spam you or send you anything other than my posts, it\u0026#39;s just a way for you to read my writing wherever\u0026#39;s most comfortable for you.\u003c/p\u003e\u003cp\u003eIf you\u0026#39;d like to know more, wanna talk, or need some advice, feel free to sign up for \u003ca href=\"https://cal.com/mergesort/office-hours\"\u003eoffice hours\u003c/a\u003e, I\u0026#39;m very friendly. üôÇ\u003c/p\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
