{
  "id": "80b29bb3-8739-4b91-830f-8e5277fe793e",
  "title": "clipped() doesn’t affect hit testing",
  "link": "https://oleb.net/2022/clipped-hit-testing/",
  "description": "",
  "author": "Ole Begemann",
  "published": "2022-11-24T18:30:58Z",
  "source": "https://oleb.net/blog/atom.xml",
  "categories": null,
  "byline": "By Ole Begemann …",
  "length": 2941,
  "excerpt": "The clipped() modifier in SwiftUI doesn’t limit hit testing to the clipping region. The clipped view can still receive taps/clicks outside the visible area. Add .contentShape(Rectangle()) to change this behavior.",
  "siteName": "Ole Begemann",
  "favicon": "",
  "text": "The clipped() modifier in SwiftUI clips a view to its bounds, hiding any out-of-bounds content. But note that clipping doesn’t affect hit testing; the clipped view can still receive taps/clicks outside the visible area. I tested this on iOS 16.1 and macOS 13.0. Example Here’s a 300×300 square, which we then constrain to a 100×100 frame. I also added a border around the outer frame to visualize the views: Rectangle() .fill(.orange.gradient) .frame(width: 300, height: 300) // Set view to 100×100 → renders out of bounds .frame(width: 100, height: 100) .border(.blue) SwiftUI views don’t clip their content by default, hence the full 300×300 square remains visible. Notice the blue border that indicates the 100×100 outer frame: Now let’s add .clipped() to clip the large square to the 100×100 frame. I also made the square tappable and added a button: VStack { Button(\"You can't tap me!\") { buttonTapCount += 1 } .buttonStyle(.borderedProminent) Rectangle() .fill(.orange.gradient) .frame(width: 300, height: 300) .frame(width: 100, height: 100) .clipped() .onTapGesture { rectTapCount += 1 } } When you run this code, you’ll discover that the button isn’t tappable at all. This is because the (unclipped) square, despite not being fully visible, obscures the button and “steals” all taps. The dashed outline indicates the hit area of the orange square. The button isn’t tappable because it’s covered by the clipped view with respect to hit testing. The fix: .contentShape() The contentShape(_:) modifier defines the hit testing area for a view. By adding .contentShape(Rectangle()) to the 100×100 frame, we limit hit testing to that area, making the button tappable again: Rectangle() .fill(.orange.gradient) .frame(width: 300, height: 300) .frame(width: 100, height: 100) .contentShape(Rectangle()) .clipped() Note that the order of .contentShape(Rectangle()) and .clipped() could be swapped. The important thing is that contentShape is an (indirect) parent of the 100×100 frame modifier that defines the size of the hit testing area. Video demo I made a short video that demonstrates the effect: Initially, taps on the button, or even on the surrounding whitespace, register as taps on the square. The top switch toggles display of the square before clipping. This illustrates its hit testing area. The second switch adds .contentShape(Rectangle()) to limit hit testing to the visible area. Now tapping the button increments the button’s tap count. The full code for this demo is available on GitHub. Download video Summary The clipped() modifier doesn’t affect the clipped view’s hit testing region. The same is true for clipShape(_:). It’s often a good idea to combine these modifiers with .contentShape(Rectangle()) to bring the hit testing logic in sync with the UI.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n          \u003cp\u003eThe \u003ca href=\"https://developer.apple.com/documentation/swiftui/view/clipped(antialiased:)\"\u003e\u003ccode\u003eclipped()\u003c/code\u003e\u003c/a\u003e modifier in SwiftUI clips a view to its bounds, hiding any out-of-bounds content. But note that clipping doesn’t affect hit testing; the clipped view can still receive taps/clicks outside the visible area.\u003c/p\u003e\n\n\u003cp\u003eI tested this on iOS 16.1 and macOS 13.0.\u003c/p\u003e\n\n\u003ch2 id=\"example\"\u003eExample\u003c/h2\u003e\n\n\u003cp\u003eHere’s a 300×300 square, which we then constrain to a 100×100 frame. I also added a border around the outer frame to visualize the views:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eRectangle\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efill\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eorange\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egradient\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e300\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e300\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e// Set view to 100×100 → renders out of bounds\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eborder\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSwiftUI views don’t clip their content by default, hence the full 300×300 square remains visible. Notice the blue border that indicates the 100×100 outer frame:\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cfigure\u003e\n  \u003ca href=\"https://oleb.net/media/2022-11-24-unclipped-rectangle.png\"\u003e\n  \u003cimg src=\"https://oleb.net/media/2022-11-24-unclipped-rectangle.png\" alt=\"Xcode preview displaying an orange square. A smaller square blue outline is centered in the orange square.\"/\u003e\n  \u003c/a\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow let’s add \u003ccode\u003e.clipped()\u003c/code\u003e to clip the large square to the 100×100 frame. I also made the square tappable and added a button:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eVStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;You can\u0026#39;t tap me!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003ebuttonTapCount\u003c/span\u003e \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuttonStyle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eborderedProminent\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n  \u003cspan\u003eRectangle\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efill\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eorange\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egradient\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e300\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e300\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclipped\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonTapGesture\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003erectTapCount\u003c/span\u003e \u003cspan\u003e+=\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWhen you run this code, you’ll discover that the button isn’t tappable at all. This is because the (unclipped) square, despite not being fully visible, obscures the button and “steals” all taps.\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cfigure\u003e\n  \u003ca href=\"https://oleb.net/media/2022-11-24-clipped-rectangle-visualized.png\"\u003e\n  \u003cimg src=\"https://oleb.net/media/2022-11-24-clipped-rectangle-visualized.png\" alt=\"Xcode preview displaying a blue button and a small orange square. A larger dashed orange outline covers both the smaller square and the button.\"/\u003e\n  \u003c/a\u003e\n  \u003cfigcaption\u003e\n    The dashed outline indicates the hit area of the orange square. The button isn’t tappable because it’s covered by the clipped view with respect to hit testing.\n  \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"the-fix-contentshape\"\u003eThe fix: \u003ccode\u003e.contentShape()\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developer.apple.com/documentation/swiftui/view/contentshape(_:eofill:)\"\u003e\u003ccode\u003econtentShape(_:)\u003c/code\u003e\u003c/a\u003e modifier defines the hit testing area for a view. By adding \u003ccode\u003e.contentShape(Rectangle())\u003c/code\u003e to the 100×100 frame, we limit hit testing to that area, making the button tappable again:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e  \u003cspan\u003eRectangle\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efill\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eorange\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egradient\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e300\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e300\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtentShape\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eRectangle\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eclipped\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that the order of \u003ccode\u003e.contentShape(Rectangle())\u003c/code\u003e and \u003ccode\u003e.clipped()\u003c/code\u003e could be swapped. The important thing is that \u003ccode\u003econtentShape\u003c/code\u003e is an (indirect) parent of the 100×100 frame modifier that defines the size of the hit testing area.\u003c/p\u003e\n\n\u003ch2 id=\"video-demo\"\u003eVideo demo\u003c/h2\u003e\n\n\u003cp\u003eI made a short video that demonstrates the effect:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eInitially, taps on the button, or even on the surrounding whitespace, register as taps on the square.\u003c/li\u003e\n  \u003cli\u003eThe top switch toggles display of the square before clipping. This illustrates its hit testing area.\u003c/li\u003e\n  \u003cli\u003eThe second switch adds \u003ccode\u003e.contentShape(Rectangle())\u003c/code\u003e to limit hit testing to the visible area. Now tapping the button increments the button’s tap count.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe full code for this demo is \u003ca href=\"https://gist.github.com/ole/7dfad1b91a0bf7185c6ad6ff37ab8c1b\"\u003eavailable on GitHub\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\n\u003cfigure\u003e\n  \u003cvideo controls=\"\" width=\"501\"\u003e\n    \u003csource src=\"https://oleb.net/media/2022-11-24-clipped-hit-testing-demo.mp4\" type=\"video/mp4\"/\u003e\n  \u003c/video\u003e\n  \u003cfigcaption\u003e\n    \u003ca href=\"https://oleb.net/media/2022-11-24-clipped-hit-testing-demo.mp4\"\u003eDownload video\u003c/a\u003e\n  \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode\u003eclipped()\u003c/code\u003e modifier doesn’t affect the clipped view’s hit testing region. The same is true for \u003ca href=\"https://developer.apple.com/documentation/swiftui/view/clipshape(_:style:)\"\u003e\u003ccode\u003eclipShape(_:)\u003c/code\u003e\u003c/a\u003e. It’s often a good idea to combine these modifiers with \u003ccode\u003e.contentShape(Rectangle())\u003c/code\u003e to bring the hit testing logic in sync with the UI.\u003c/p\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2022-11-24T18:30:58Z",
  "modifiedTime": "2022-11-25T10:48:10Z"
}
