{
  "id": "fc12055a-4365-4154-bd74-75d0ea0fce15",
  "title": "Disabling Xcode Asset Symbol Generation",
  "link": "https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/",
  "description": "Xcode 16 added a property to asset catalogs to opt-out of asset symbol generation. This is especially useful for Swift Packages which had no way to disable the project settings they inherited. Asset Catalog Symbol Generation - A Recap Xcode 15 introduced a feature to create Swift, and Objective-C, symbols for colors and images in the asset catalog. Here’s the asset catalog in my main app bundle with the default accent color and app icon, to which I’ve added an image and color: Using my custom color and image in a SwiftUI view without symbol generation: VStack { Image(\"Star\") Text(\"Hello, world!\") .padding() .background(Color(\"TextBackground\")) } Using a string for an asset catalog entry is error prone and there’s no help from autocomplete or the compiler. If I get the name wrong the image or color are missing when my app runs. Starting in Xcode 15 I can rewrite my SwiftUI view to use the automatically generated symbol names for the image and color: VStack { Image(.star) Text(\"Hello, world!\") .padding() .background(.textBackground) } That has the advantage that my image and color names autocomplete and the compiler checks they are valid. If I rename the image in the asset catalog the compiler will now warn me: Note that Xcode generates the symbols when you build the target. You can find the generated code in GeneratedAssetSymbols.swift. For Objective-C, import the GeneratedAssetSymbols.h header file. The symbol generation is on, by default, for new projects but you can opt-out, and customise the scope, in the project or target settings: Xcode generates the color symbols as static properties of the ColorResource type: // GeneratedAssetSymbols.swift @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *) extension DeveloperToolsSupport.ColorResource { /// The \"TextBackground\" asset catalog color resource. static let textBackground = DeveloperToolsSupport.ColorResource( name: \"TextBackground\", bundle: resourceBundle) } The image symbols are likewise static properties of the ImageResource type: @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *) extension DeveloperToolsSupport.ImageResource { /// The \"Star\" asset catalog image resource. static let star = DeveloperToolsSupport.ImageResource( name: \"Star\", bundle: resourceBundle) } Note that the initial letter of the symbol is lowercase even if the name in the asset catalog starts with an uppercase letter. Framework Extensions Xcode also generates extensions for SwiftUI, UIKit, and AppKit color and image types (though you can restrict the framework support in the build settings if you wish). For example, here’s the generated code for the SwiftUI Color type: extension SwiftUI.Color { /// The \"TextBackground\" asset catalog color. static var textBackground: SwiftUI.Color { .init(.textBackground) } } Xcode generates the symbols for the module containing the asset catalog which means they also work for asset catalogs included in Swift Packages which inherit the settings. Unfortunately that created a problem in that there was no way to disable the symbol generation in a package. Opt-out for Swift Packages In Xcode 16, asset catalogs gained a new “Asset Symbols” property in the file inspector: Asset catalogs now provide an inspector property for enabling system color and image accessors for generated asset symbols, which allows Swift packages to opt-in to generating these accessors. (113704993) There are three possible values: Inherited. This is the default and inherits from the project/target settings. The inspector shows the value in effect. Extensions On Extensions Off The last two settings override the inherited settings allowing you to opt-in/out of symbol generation for individual asset catalogs in Swift package modules. That’s useful if the generated symbols clash with other names in the module or you prefer not to rely on Xcode generating code. One reason you might want to create your own symbols is that the Xcode generated ones only have internal scope. If you want to access the assets outside of the package scope you’ll need to create your own public symbols (see Add resources to swift packages). Learn More Xcode 16 Release Notes What’s new in Xcode 15 Disabling Xcode Asset Symbol Generation was originally posted 19 Aug 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 19 Aug 2024 11:34:59 +0100",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 4250,
  "excerpt": "Xcode 16 added a property to asset catalogs to opt-out of asset symbol generation.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "Xcode 16 added a property to asset catalogs to opt-out of asset symbol generation. This is especially useful for Swift Packages which had no way to disable the project settings they inherited. Asset Catalog Symbol Generation - A Recap Xcode 15 introduced a feature to create Swift, and Objective-C, symbols for colors and images in the asset catalog. Here’s the asset catalog in my main app bundle with the default accent color and app icon, to which I’ve added an image and color: Using my custom color and image in a SwiftUI view without symbol generation: VStack { Image(\"Star\") Text(\"Hello, world!\") .padding() .background(Color(\"TextBackground\")) } Using a string for an asset catalog entry is error prone and there’s no help from autocomplete or the compiler. If I get the name wrong the image or color are missing when my app runs. Starting in Xcode 15 I can rewrite my SwiftUI view to use the automatically generated symbol names for the image and color: VStack { Image(.star) Text(\"Hello, world!\") .padding() .background(.textBackground) } That has the advantage that my image and color names autocomplete and the compiler checks they are valid. If I rename the image in the asset catalog the compiler will now warn me: Note that Xcode generates the symbols when you build the target. You can find the generated code in GeneratedAssetSymbols.swift. For Objective-C, import the GeneratedAssetSymbols.h header file. The symbol generation is on, by default, for new projects but you can opt-out, and customise the scope, in the project or target settings: Xcode generates the color symbols as static properties of the ColorResource type: // GeneratedAssetSymbols.swift @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *) extension DeveloperToolsSupport.ColorResource { /// The \"TextBackground\" asset catalog color resource. static let textBackground = DeveloperToolsSupport.ColorResource( name: \"TextBackground\", bundle: resourceBundle) } The image symbols are likewise static properties of the ImageResource type: @available(iOS 17.0, macOS 14.0, tvOS 17.0, watchOS 10.0, *) extension DeveloperToolsSupport.ImageResource { /// The \"Star\" asset catalog image resource. static let star = DeveloperToolsSupport.ImageResource( name: \"Star\", bundle: resourceBundle) } Note that the initial letter of the symbol is lowercase even if the name in the asset catalog starts with an uppercase letter. Framework Extensions Xcode also generates extensions for SwiftUI, UIKit, and AppKit color and image types (though you can restrict the framework support in the build settings if you wish). For example, here’s the generated code for the SwiftUI Color type: extension SwiftUI.Color { /// The \"TextBackground\" asset catalog color. static var textBackground: SwiftUI.Color { .init(.textBackground) } } Xcode generates the symbols for the module containing the asset catalog which means they also work for asset catalogs included in Swift Packages which inherit the settings. Unfortunately that created a problem in that there was no way to disable the symbol generation in a package. Opt-out for Swift Packages In Xcode 16, asset catalogs gained a new “Asset Symbols” property in the file inspector: Asset catalogs now provide an inspector property for enabling system color and image accessors for generated asset symbols, which allows Swift packages to opt-in to generating these accessors. (113704993) There are three possible values: Inherited. This is the default and inherits from the project/target settings. The inspector shows the value in effect. Extensions On Extensions Off The last two settings override the inherited settings allowing you to opt-in/out of symbol generation for individual asset catalogs in Swift package modules. That’s useful if the generated symbols clash with other names in the module or you prefer not to rely on Xcode generating code. One reason you might want to create your own symbols is that the Xcode generated ones only have internal scope. If you want to access the assets outside of the package scope you’ll need to create your own public symbols (see Add resources to swift packages). Learn More Xcode 16 Release Notes What’s new in Xcode 15",
  "image": "https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eXcode 16 added a property to asset catalogs to opt-out of asset symbol generation. This is especially useful for Swift Packages which had no way to disable the project settings they inherited.\u003c/p\u003e\n\u003ch3 id=\"asset-catalog-symbol-generation---a-recap\"\u003eAsset Catalog Symbol Generation - A Recap\u003c/h3\u003e\n\u003cp\u003eXcode 15 introduced a feature to create Swift, and Objective-C, symbols for colors and images in the asset catalog. Here’s the asset catalog in my main app bundle with the default accent color and app icon, to which I’ve added an image and color:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/001.png\" alt=\"Asset catalog containing a blue accent color, empty app icon, yellow star image and yellow text background color\" width=\"220\" height=\"105\" srcset=\"https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eUsing my custom color and image in a SwiftUI view without symbol generation:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eVStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Star\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;TextBackground\u0026#34;\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cstrong\u003eUsing a string for an asset catalog entry is error prone and there’s no help from autocomplete or the compiler.\u003c/strong\u003e If I get the name wrong the image or color are missing when my app runs.\u003c/p\u003e\n\u003cp\u003eStarting in Xcode 15 I can rewrite my SwiftUI view to use the automatically generated symbol names for the image and color:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eVStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003estar\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003etextBackground\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat has the advantage that my image and color names autocomplete and the compiler checks they are valid. If I rename the image in the asset catalog the compiler will now warn me:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/002.png\" alt=\"Error type image resource has no member star\" width=\"460\" height=\"100\" srcset=\"https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/002@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote that Xcode generates the symbols when you build the target.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eYou can find the generated code in \u003ccode\u003eGeneratedAssetSymbols.swift\u003c/code\u003e. For Objective-C, import the \u003ccode\u003eGeneratedAssetSymbols.h\u003c/code\u003e header file.\u003c/p\u003e\n\u003cp\u003eThe symbol generation is on, by default, for new projects but you can opt-out, and customise the scope, in the project or target settings:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/003.png\" alt=\"Asset catalog compiler options\" width=\"500\" height=\"105\" srcset=\"https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/003@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eXcode generates the color symbols as static properties of the \u003ccode\u003eColorResource\u003c/code\u003e type:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// GeneratedAssetSymbols.swift\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eavailable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eiOS\u003c/span\u003e \u003cspan\u003e17.0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003emacOS\u003c/span\u003e \u003cspan\u003e14.0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003etvOS\u003c/span\u003e \u003cspan\u003e17.0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ewatchOS\u003c/span\u003e \u003cspan\u003e10.0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eDeveloperToolsSupport\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eColorResource\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e/// The \u0026#34;TextBackground\u0026#34; asset catalog color resource.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003etextBackground\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eDeveloperToolsSupport\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eColorResource\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;TextBackground\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ebundle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eresourceBundle\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe image symbols are likewise static properties of the \u003ccode\u003eImageResource\u003c/code\u003e type:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eavailable\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eiOS\u003c/span\u003e \u003cspan\u003e17.0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003emacOS\u003c/span\u003e \u003cspan\u003e14.0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003etvOS\u003c/span\u003e \u003cspan\u003e17.0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ewatchOS\u003c/span\u003e \u003cspan\u003e10.0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eDeveloperToolsSupport\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eImageResource\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e/// The \u0026#34;Star\u0026#34; asset catalog image resource.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003estar\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eDeveloperToolsSupport\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eImageResource\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Star\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ebundle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eresourceBundle\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNote that the initial letter of the symbol is lowercase even if the name in the asset catalog starts with an uppercase letter.\u003c/p\u003e\n\u003ch4 id=\"framework-extensions\"\u003eFramework Extensions\u003c/h4\u003e\n\u003cp\u003eXcode also generates extensions for SwiftUI, UIKit, and AppKit color and image types (though you can restrict the framework support in the build settings if you wish). For example, here’s the generated code for the SwiftUI Color type:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eSwiftUI\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e/// The \u0026#34;TextBackground\u0026#34; asset catalog color.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003etextBackground\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSwiftUI\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003etextBackground\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eXcode generates the symbols for the module containing the asset catalog which means they also work for asset catalogs included in Swift Packages which inherit the settings. Unfortunately that created a problem in that there was no way to disable the symbol generation in a package.\u003c/p\u003e\n\u003ch3 id=\"opt-out-for-swift-packages\"\u003eOpt-out for Swift Packages\u003c/h3\u003e\n\u003cp\u003eIn Xcode 16, asset catalogs gained a new “Asset Symbols” property in the file inspector:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAsset catalogs now provide an inspector property for enabling system color and image accessors for generated asset symbols, which allows Swift packages to opt-in to generating these accessors. (113704993)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/004.png\" alt=\"File inspector for asset catalog with asset symbols inherited (extensions on\" width=\"260\" height=\"105\" srcset=\"https://useyourloaf.com/blog/disabling-xcode-asset-symbol-generation/004@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eThere are three possible values:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInherited. This is the default and inherits from the project/target settings. The inspector shows the value in effect.\u003c/li\u003e\n\u003cli\u003eExtensions On\u003c/li\u003e\n\u003cli\u003eExtensions Off\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe last two settings override the inherited settings allowing you to opt-in/out of symbol generation for individual asset catalogs in Swift package modules.\u003c/p\u003e\n\u003cp\u003eThat’s useful if the generated symbols clash with other names in the module or you \u003cstrong\u003eprefer not to rely on Xcode generating code\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eOne reason you might want to create your own symbols is that the Xcode generated ones only have internal scope. If you want to access the assets outside of the package scope you’ll need to create your own public symbols (see \u003ca href=\"https://useyourloaf.com/blog/add-resources-to-swift-packages/\"\u003eAdd resources to swift packages\u003c/a\u003e).\u003c/p\u003e\n\u003ch3 id=\"learn-more\"\u003eLearn More\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/documentation/xcode-release-notes/xcode-16-release-notes\"\u003eXcode 16 Release Notes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/wwdc23/10165?time=225\"\u003eWhat’s new in Xcode 15\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-08-19T11:34:59+01:00",
  "modifiedTime": "2024-08-19T16:08:29+01:00"
}
