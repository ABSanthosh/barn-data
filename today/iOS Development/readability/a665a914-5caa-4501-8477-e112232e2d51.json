{
  "id": "a665a914-5caa-4501-8477-e112232e2d51",
  "title": "Flutter and fastlane, how to setup an iOS continuous delivery solution",
  "link": "https://benoitpasquier.com/fastlane-flutter-ios/",
  "description": "When it comes to iOS development, everybody have their own favorite language and framework: Swift, Objective-C, SwiftUI, React-Native, Flutter and so on. Unlike most of my previous post, today we‚Äôre going to leverage some iOS tooling for cross platforms technology: fastlane and Flutter.",
  "author": "",
  "published": "Sat, 04 Dec 2021 08:00:00 +0000",
  "source": "https://benoitpasquier.com/index.xml",
  "categories": null,
  "byline": "Benoit Pasquier",
  "length": 10176,
  "excerpt": "When it comes to iOS development, everybody have their own favorite language and framework: Swift, Objective-C, SwiftUI, React-Native, Flutter and so on. Unlike most of my previous post, today we‚Äôre going to leverage some iOS tooling for cross platforms technology: fastlane and Flutter.",
  "siteName": "Benoit Pasquier",
  "favicon": "https://benoitpasquier.com/favicon.png",
  "text": "When it comes to iOS development, everybody have their own favorite language and framework: Swift, Objective-C, SwiftUI, React-Native, Flutter and so on. Unlike most of my previous post, today we‚Äôre going to leverage some iOS tooling for cross platforms technology: fastlane and Flutter. Everybody agree to say Flutter is getting more and more popular in mobile development, but when I recently got chance to work on it, I noticed the release process for the iOS version was mostly manual. This sound odd to me when we know the iOS ecosystem largely covered it. Today, we‚Äôll look into how setting up fastlane for a continuous delivery solution of your Flutter app. If you are new to iOS development, fastlane is one of the most used tool when it comes to automate building and shipping an application. It can do much more, but that‚Äôs the part that interest me today. However, when I checked fastlane and Flutter for continuous delivery, well, it can become quite confusing. Fastlane redirects to Flutter documentation but Flutter doesn‚Äôt dive much into it. So let‚Äôs see how we setup fastlane for Flutter. Setup fastlane The first part is to setup fastlane to the right place. When a Flutter app is built for each platform, it creates an ios folder with the native code. This is where fastlane needs to be initialized. Assuming we‚Äôve already installed fastlane, we can directly start with fastlane init. # Build for ios flutter build ios # Move to the right folder cd ios # Initialize fastlane fastlane init From there, the command line takes over and we can follow its documentation. At then end, it will create a Fastfile with some sample setup. A great advantage of fastlane is to handle iOS certificates and provisioning profiles for you. It‚Äôs really handy if you work in a team, it avoids sharing credentials or certificates manually. It would be hosted on your preferred location likw Github, S3 bucket and so on. Using match command line, we are able to create all the signing certificates and provisioning profiles, those are required later on when we build on physical device, but also uploading our app to th App Store Connect. So if it‚Äôs not done yet, I would advise to set up your repository for those certificates. Like the first fastlane command, match comes with Matchfile that also help defines a standard url, format, account and other key information for our continuous delivery. A good tip is to use environment variable that later on can be injected in the document. We‚Äôll come back to this. So far so good, the structure is setup, now we can tweak Flutter for its iOS generated project to fastlane command line. Continuous delivery If you are curious and open the Runner project in Xcode, you‚Äôll notice the organization team and signing settings might have been automatically setup. That sounds like a good idea, but if you don‚Äôt know how to navigate those settings, it can be get really messy real fast. If you are a novice to iOS, that‚Äôs the part I would suggest to avoid completely. After all, isn‚Äôt it why developers are keen on Flutter? To avoid the trouble of setting up manually all those specific platform-based stuff? That would be my expectations at least. I looked on flutter command line but I didn‚Äôt see a proper way to set this up, and that‚Äôs where the documentation came a bit short. The only related parameter app signing is to actually skip it, but we‚Äôll get back to this. Worry no more, let‚Äôs leverage fastlane so we never got to worry about signing again. So let‚Äôs create a new lane (equivalent to a command line) in our Fastfile so we can get going. First thing I want is to disable the auto signing that is suggested in the project, that sounds an easy for you or a teammate to regenerate files. default_platform(:ios) platform :ios do lane delivery do # disable auto signing disable_automatic_code_signing(path: \"Running.xcodeproj\") # ... end end So when running fastlane delivery, it just makes sure we disable the auto signing for the rest of the lane. Next step is to build the app using gym command line. default_platform(:ios) platform :ios do lane delivery do # disable auto signing disable_automatic_code_signing(path: \"Running.xcodeproj\") # build for app store / testflight gym(scheme: \"Runner\", workspace: \"Runner.xcworkspace\", export_method: \"app-store\") # ... end end In this case, gym will build the specific scheme and sign it to export for the app-store, which means for production use. In most cases, the command won‚Äôt have issue to detect the right certificates and provisioning profiles for it if you synced it with match before. If not, we have a back up solution with build_app action. It allows you set set specific provisioning profiles name, those would be matching the one you created earlier. Last step is to upload it to the App Store Connect using upload_to_testflight command line. This command has different aliases, like testflight or pilot, feel free to use the one that makes the most sense to you. default_platform(:ios) platform :ios do lane delivery do # disable auto signing disable_automatic_code_signing(path: \"Running.xcodeproj\") # build for app store / testflight gym(scheme: \"Runner\", workspace: \"Runner.xcworkspace\", export_method: \"app-store\") upload_to_testflight end end If you want to automatically set your Apple ID account when uploading to TestFlight, you can use Appfile which is similar to other fastlane configuration files to preset your environment. Almost there! Before we give it a go, let‚Äôs create a separate lane to sync our provisioning profiles for development and production use, it might come handy default_platform(:ios) platform :ios do lane sync_match do match(type: \"appstore\", readonly: true) match(type: \"development\", readonly: true) end end Our lanes is almost ready for a full use, only one thing is missing: environment variables. If you try to run them, you‚Äôll notice there are still few manual step that required an user entry, it could be for your Apple ID, the passphrase to decrypt your certificates, or else. In this case, I would suggest to create a separate bash script to import all the environment variables that would be required. Here is an example secrets-ios.sh: #!/bin/bash # fastlane match passphrase export MATCH_PASSWORD=\"my secret passphrase\" # Apple access export FASTLANE_USER=\"my apple id\" export FASTLANE_PASSWORD=\"my secret\" # 2FA access export FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD=\"secret key\" # ... Before moving one, make sure to NOT commit this file. Add it to your .gitignore or move it to another folder. This is holding all your secrets, it shouldn‚Äôt never be accessible through git history or published on the same repository. Alright, we‚Äôre really close to be done. Let‚Äôs step back to Flutter level. Flutter and fastlane So far, we‚Äôve mostly tweaked the tooling to make it easy to export our amazing app to the App Store / TestFlight, but it‚Äôs not yet completely done. If match handles all the iOS platforms signing in a separate repository, we still have other secrets variables in our bash that we don‚Äôt want to let hang around. The solution is pretty simple and can be quite handy: we can do exactly the same for Flutter that we do for iOS. We can manually create a separate repository for all our Flutter secrets, that‚Äôs where the secrets-ios.sh would belong. The great part? We can do the same for Android too, creating a similar secrets-android.sh with whatever will be useful in it. Although, I won‚Äôt cover this bit today. So we would have - ios/ - secrets-ios.sh - android/ - secrets-android.sh Why having a separate repository? Well, it makes your app a bit safer to not share manually passwords around and every ‚Äúrelease manager‚Äù can download when required. You can clone it separately, or you can try to ‚Äúhook it‚Äù with another homemade script, for instance here my setup-secrets.sh #!/bin/bash # Temporary clone and copy to right destination git clone {GIT_URL_FLUTTER_SECRETS} .tmp cp -RT .tmp/ios ios cp -RT .tmp/android android rm -rf .tmp So let‚Äôs put this all together now into a one release-ios.sh script. #!/bin/bash # Download and move secrets ./setup-secrets.sh # Generate latest ios build, with release properties, no signing flutter build ios --release --no-codesign # Move into ios cd ios # Import environment variables to current session source secrets-ios.sh # Sync certificates fastlane sync_match # Build and upload to App Store / TestFlight fastlane delivery That‚Äôs it üéâ Now we can just run our ./release-ios.sh to sync our private environment variables, generate native code with flutter, sync certificates, and finally build and upload for the App Store. It means that the next time there is a new contributor joining you team, you can focus on giving access to the repository of the flutter codebase, the iOS certificates repository and the flutter secrets, and nothing more. Even if we made it straightforward, there might be more optimization that could be bring to make it top notch. For instance the secret repository? It could be part of the main repository if your team has an encrypted system. Another thing I noticed is that we‚Äôre building the app twice: Flutter builds for iOS and generate an .app but then fastlane rebuild it again with the right signing. There might be a way for fastlane to piggyback on the first build. If Flutter is getting more and more maturity, the tooling around it can be a bit obscure if you don‚Äôt have enough background on the mobile platform. When it comes to iOS distribution, it‚Äôs something that‚Äôs the community had largely covered and fastlane definitely makes it easier once everything is aligned. On top of this, fastlane also works with Android and can be the right tool for a cross-platform delivery system. Today, we went from setting up a shared and secured secret environments, building the flutter app, to signing and uploading the iOS app to the App Store. All of this, only with few scripts.",
  "image": "https://benoitpasquier.com/images/2021/12/fastlane-ios-flutter.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n              \u003cp\u003eWhen it comes to iOS development, everybody have their own favorite language and framework: Swift, Objective-C, SwiftUI, React-Native, Flutter and so on. Unlike most of my previous post, today we‚Äôre going to leverage some iOS tooling for cross platforms technology: \u003cem\u003efastlane\u003c/em\u003e and \u003cem\u003eFlutter\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eEverybody agree to say Flutter is getting more and more popular in mobile development, but when I recently got chance to work on it, I noticed the release process for the iOS version was mostly manual. This sound odd to me when we know the iOS ecosystem largely covered it. Today, we‚Äôll look into how setting up fastlane for a continuous delivery solution of your Flutter app.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://benoitpasquier.com/images/2021/12/fastlane-ios-flutter.png\" alt=\"fastlane-ios-flutter\"/\u003e\u003c/p\u003e\n\u003cp\u003eIf you are new to iOS development, \u003ca href=\"https://docs.fastlane.tools/\"\u003efastlane\u003c/a\u003e is one of the most used tool when it comes to automate building and shipping an application. It can do much more, but that‚Äôs the part that interest me today.\u003c/p\u003e\n\u003cp\u003eHowever, when I checked fastlane and Flutter for continuous delivery, well, it can become quite confusing. Fastlane redirects to Flutter documentation but Flutter doesn‚Äôt dive much into it. So let‚Äôs see how we setup fastlane for Flutter.\u003c/p\u003e\n\u003ch2 id=\"setup-fastlane\"\u003eSetup fastlane\u003c/h2\u003e\n\u003cp\u003eThe first part is to setup fastlane \u003cem\u003eto the right place\u003c/em\u003e. When a Flutter app is built for each platform, it creates an \u003ccode\u003eios\u003c/code\u003e folder with the native code. This is where fastlane needs to be initialized.\u003c/p\u003e\n\u003cp\u003eAssuming we‚Äôve already \u003ca href=\"https://docs.fastlane.tools/getting-started/ios/setup/\"\u003einstalled fastlane\u003c/a\u003e, we can directly start with \u003ccode\u003efastlane init\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Build for ios\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eflutter build ios\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Move to the right folder\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003ecd\u003c/span\u003e ios\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Initialize fastlane\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003efastlane init\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFrom there, the command line takes over and we can follow its documentation. At then end, it will create a \u003ccode\u003eFastfile\u003c/code\u003e with some sample setup.\u003c/p\u003e\n\u003cp\u003eA great advantage of fastlane is to handle \u003ca href=\"https://developer.apple.com/support/certificates/\"\u003eiOS certificates and provisioning profiles\u003c/a\u003e for you. It‚Äôs really handy if you work in a team, it avoids sharing credentials or certificates manually. It would be hosted on your preferred location likw Github, S3 bucket and so on.\u003c/p\u003e\n\u003cp\u003eUsing \u003ca href=\"https://docs.fastlane.tools/actions/match/\"\u003ematch\u003c/a\u003e command line, we are able to create all the signing certificates and provisioning profiles, those are required later on when we build on physical device, but also uploading our app to th App Store Connect.\u003c/p\u003e\n\u003cp\u003eSo if it‚Äôs not done yet, I would advise to set up your repository for those certificates.\u003c/p\u003e\n\u003cp\u003eLike the first fastlane command, match comes with \u003ccode\u003eMatchfile\u003c/code\u003e that also help defines a standard url, format, account and other key information for our continuous delivery. A good tip is to use environment variable that later on can be injected in the document. We‚Äôll come back to this.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eSo far so good\u003c/em\u003e, the structure is setup, now we can tweak Flutter for its iOS generated project to fastlane command line.\u003c/p\u003e\n\u003ch2 id=\"continuous-delivery\"\u003eContinuous delivery\u003c/h2\u003e\n\u003cp\u003eIf you are curious and open the \u003ccode\u003eRunner\u003c/code\u003e project in Xcode, you‚Äôll notice the organization team and signing settings might have been automatically setup.\u003c/p\u003e\n\u003cp\u003eThat sounds like a good idea, but if you don‚Äôt know how to navigate those settings, it can be get really messy real fast.\u003c/p\u003e\n\u003cp\u003eIf you are a novice to iOS, that‚Äôs the part I would suggest to \u003cem\u003eavoid completely\u003c/em\u003e. After all, isn‚Äôt it why developers are keen on Flutter? To avoid the trouble of setting up manually all those specific platform-based stuff? That would be my expectations at least.\u003c/p\u003e\n\u003cp\u003eI looked on \u003ccode\u003eflutter\u003c/code\u003e command line but I didn‚Äôt see a proper way to set this up, and that‚Äôs where the documentation came a bit short. The only related parameter app signing is to actually skip it, but we‚Äôll get back to this.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eWorry no more\u003c/em\u003e, let‚Äôs leverage \u003ccode\u003efastlane\u003c/code\u003e so we never got to worry about signing again.\u003c/p\u003e\n\u003cp\u003eSo let‚Äôs create a new \u003ccode\u003elane\u003c/code\u003e (equivalent to a \u003cem\u003ecommand line\u003c/em\u003e) in our \u003ccode\u003eFastfile\u003c/code\u003e so we can get going.\u003c/p\u003e\n\u003cp\u003eFirst thing I want is to disable the auto signing that is suggested in the project, that sounds an easy for you or a teammate to regenerate files.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"ruby\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003edefault_platform\u003c/span\u003e(\u003cspan\u003e:ios\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eplatform\u003c/span\u003e \u003cspan\u003e:ios\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elane\u003c/span\u003e \u003cspan\u003edelivery\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e# disable auto signing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003edisable_automatic_code_signing\u003c/span\u003e(\u003cspan\u003epath\u003c/span\u003e: \u003cspan\u003e\u0026#34;Running.xcodeproj\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e# ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo when running \u003ccode\u003efastlane delivery\u003c/code\u003e, it just makes sure we disable the auto signing for the rest of the lane.\u003c/p\u003e\n\u003cp\u003eNext step is to build the app using \u003ca href=\"https://docs.fastlane.tools/actions/gym/\"\u003egym\u003c/a\u003e command line.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"ruby\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003edefault_platform\u003c/span\u003e(\u003cspan\u003e:ios\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eplatform\u003c/span\u003e \u003cspan\u003e:ios\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elane\u003c/span\u003e \u003cspan\u003edelivery\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e# disable auto signing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003edisable_automatic_code_signing\u003c/span\u003e(\u003cspan\u003epath\u003c/span\u003e: \u003cspan\u003e\u0026#34;Running.xcodeproj\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e# build for app store / testflight\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003egym\u003c/span\u003e(\u003cspan\u003escheme\u003c/span\u003e: \u003cspan\u003e\u0026#34;Runner\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eworkspace\u003c/span\u003e: \u003cspan\u003e\u0026#34;Runner.xcworkspace\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eexport_method\u003c/span\u003e: \u003cspan\u003e\u0026#34;app-store\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e# ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this case, \u003ccode\u003egym\u003c/code\u003e will build the specific scheme and sign it to export for the \u003ccode\u003eapp-store\u003c/code\u003e, which means for production use.\u003c/p\u003e\n\u003cp\u003eIn most cases, the command won‚Äôt have issue to detect the right certificates and provisioning profiles for it if you synced it with \u003ccode\u003ematch\u003c/code\u003e before. If not, we have a back up solution with \u003ccode\u003ebuild_app\u003c/code\u003e action. It allows you set set specific provisioning profiles name, those would be matching the one you created earlier.\u003c/p\u003e\n\u003cp\u003eLast step is to upload it to the App Store Connect using \u003ccode\u003eupload_to_testflight\u003c/code\u003e command line. This command has different aliases, like \u003ccode\u003etestflight\u003c/code\u003e or \u003ccode\u003epilot\u003c/code\u003e, feel free to use the one that makes the most sense to you.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"ruby\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003edefault_platform\u003c/span\u003e(\u003cspan\u003e:ios\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eplatform\u003c/span\u003e \u003cspan\u003e:ios\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elane\u003c/span\u003e \u003cspan\u003edelivery\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e# disable auto signing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003edisable_automatic_code_signing\u003c/span\u003e(\u003cspan\u003epath\u003c/span\u003e: \u003cspan\u003e\u0026#34;Running.xcodeproj\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e# build for app store / testflight\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003egym\u003c/span\u003e(\u003cspan\u003escheme\u003c/span\u003e: \u003cspan\u003e\u0026#34;Runner\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eworkspace\u003c/span\u003e: \u003cspan\u003e\u0026#34;Runner.xcworkspace\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eexport_method\u003c/span\u003e: \u003cspan\u003e\u0026#34;app-store\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eupload_to_testflight\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you want to automatically set your Apple ID account when uploading to TestFlight, you can use \u003ccode\u003eAppfile\u003c/code\u003e which is similar to other fastlane configuration files to preset your environment.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eAlmost there!\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eBefore we give it a go, let‚Äôs create a separate lane to sync our provisioning profiles for development and production use, it might come handy\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"ruby\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003edefault_platform\u003c/span\u003e(\u003cspan\u003e:ios\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eplatform\u003c/span\u003e \u003cspan\u003e:ios\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elane\u003c/span\u003e \u003cspan\u003esync_match\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ematch\u003c/span\u003e(\u003cspan\u003etype\u003c/span\u003e: \u003cspan\u003e\u0026#34;appstore\u0026#34;\u003c/span\u003e, \u003cspan\u003ereadonly\u003c/span\u003e: \u003cspan\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ematch\u003c/span\u003e(\u003cspan\u003etype\u003c/span\u003e: \u003cspan\u003e\u0026#34;development\u0026#34;\u003c/span\u003e, \u003cspan\u003ereadonly\u003c/span\u003e: \u003cspan\u003etrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOur \u003cem\u003elanes\u003c/em\u003e is almost ready for a full use, only one thing is missing: environment variables.\u003c/p\u003e\n\u003cp\u003eIf you try to run them, you‚Äôll notice there are still few manual step that required an user entry, it could be for your Apple ID, the passphrase to decrypt your certificates, or else.\u003c/p\u003e\n\u003cp\u003eIn this case, I would suggest to create a separate bash script to import all the environment variables that would be required. Here is an example \u003ccode\u003esecrets-ios.sh\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"sh\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# fastlane match passphrase\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eMATCH_PASSWORD\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;my secret passphrase\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Apple access\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eFASTLANE_USER\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;my apple id\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eFASTLANE_PASSWORD\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;my secret\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# 2FA access\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eFASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;secret key\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBefore moving one, make sure to NOT commit this file. Add it to your \u003ccode\u003e.gitignore\u003c/code\u003e or move it to another folder. This is holding all your secrets, it shouldn‚Äôt never be accessible through git history or published on the same repository.\u003c/p\u003e\n\u003cp\u003eAlright, we‚Äôre really close to be done. Let‚Äôs step back to Flutter level.\u003c/p\u003e\n\u003ch2 id=\"flutter-and-fastlane\"\u003eFlutter and fastlane\u003c/h2\u003e\n\u003cp\u003eSo far, we‚Äôve mostly tweaked the tooling to make it easy to export our amazing app to the App Store / TestFlight, but it‚Äôs not yet completely done.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003ematch\u003c/code\u003e handles all the iOS platforms signing in a separate repository, we still have other \u003cem\u003esecrets\u003c/em\u003e variables in our bash that we don‚Äôt want to let hang around.\u003c/p\u003e\n\u003cp\u003eThe solution is pretty simple and can be quite handy: we can do exactly the same for Flutter that we do for iOS. We can manually create a separate repository for all our Flutter secrets, that‚Äôs where the \u003ccode\u003esecrets-ios.sh\u003c/code\u003e would belong.\u003c/p\u003e\n\u003cp\u003eThe great part? We can do the same for Android too, creating a similar \u003ccode\u003esecrets-android.sh\u003c/code\u003e with whatever will be useful in it. Although, I won‚Äôt cover this bit today.\u003c/p\u003e\n\u003cp\u003eSo we would have\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e- ios/\n    - secrets-ios.sh\n- android/\n    - secrets-android.sh\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhy having a separate repository? Well, it makes your app a bit safer to not share manually passwords around and every ‚Äúrelease manager‚Äù can download when required. You can clone it separately, or you can try to ‚Äúhook it‚Äù with another homemade script, for instance here my \u003ccode\u003esetup-secrets.sh\u003c/code\u003e\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"sh\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Temporary clone and copy to right destination\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003egit clone \u003cspan\u003e{\u003c/span\u003eGIT_URL_FLUTTER_SECRETS\u003cspan\u003e}\u003c/span\u003e .tmp\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ecp -RT .tmp/ios ios\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ecp -RT .tmp/android android\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003erm -rf .tmp\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo let‚Äôs put this all together now into a one \u003ccode\u003erelease-ios.sh\u003c/code\u003e script.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"sh\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e#!/bin/bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Download and move secrets\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e./setup-secrets.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Generate latest ios build, with release properties, no signing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eflutter build ios --release --no-codesign\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Move into ios\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003ecd\u003c/span\u003e ios\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Import environment variables to current session\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003esource\u003c/span\u003e secrets-ios.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Sync certificates\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003efastlane sync_match\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e# Build and upload to App Store / TestFlight\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003efastlane delivery\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat‚Äôs it üéâ\u003c/p\u003e\n\u003cp\u003eNow we can just run our \u003ccode\u003e./release-ios.sh\u003c/code\u003e to sync our private environment variables, generate native code with flutter, sync certificates, and finally build and upload for the App Store.\u003c/p\u003e\n\u003cp\u003eIt means that the next time there is a new contributor joining you team, you can focus on giving access to the repository of the flutter codebase, the iOS certificates repository and the flutter secrets, and \u003cem\u003enothing more\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eEven if we made it straightforward, there might be more optimization that could be bring to make it top notch. For instance the secret repository? It could be part of the main repository if your team has an encrypted system.\u003c/p\u003e\n\u003cp\u003eAnother thing I noticed is that we‚Äôre building the app twice: Flutter builds for iOS and generate an \u003ccode\u003e.app\u003c/code\u003e but then fastlane rebuild it again with the right signing. There might be a way for fastlane to piggyback on the first build.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eIf Flutter is getting more and more maturity, the tooling around it can be a bit obscure if you don‚Äôt have enough background on the mobile platform.\u003c/p\u003e\n\u003cp\u003eWhen it comes to iOS distribution, it‚Äôs something that‚Äôs the community had largely covered and \u003ccode\u003efastlane\u003c/code\u003e definitely makes it easier once everything is aligned.\u003c/p\u003e\n\u003cp\u003eOn top of this, \u003ccode\u003efastlane\u003c/code\u003e also works with Android and can be the right tool for a cross-platform delivery system.\u003c/p\u003e\n\u003cp\u003eToday, we went from setting up a shared and secured secret environments, building the flutter app, to signing and uploading the iOS app to the App Store. All of this, only with few scripts.\u003c/p\u003e\n              \n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2021-12-04T08:00:00Z",
  "modifiedTime": "2021-12-04T08:00:00Z"
}
