{
  "id": "eb926076-6348-4c84-8fd3-a12f4460c80b",
  "title": "The idea of a Fastlane replacement",
  "link": "https://albertodebortoli.com/2023/10/29/the-idea-of-a-fastlane-replacement/",
  "description": "PreludeFastlane is widely used by iOS teams all around the world. It became the standard de facto to automate common tasks such as building apps, running tests, and uploading builds to App Store Connect. Fastlane has been recently moved under the Mobile Native Foundation which is amazing as Google",
  "author": "Alberto De Bortoli",
  "published": "Sun, 29 Oct 2023 22:57:38 GMT",
  "source": "https://albertodebortoli.com/rss/",
  "categories": null,
  "byline": "Alberto De Bortoli",
  "length": 7089,
  "excerpt": "Prelude Fastlane is widely used by iOS teams all around the world. It became the standard de facto to automate common tasks such as building apps, running tests, and uploading builds to App Store Connect. Fastlane has been recently moved under the Mobile Native Foundation which is amazing as Google wasn't actively maintaining the project. At Just Eat Takeaway, we have implemented an extensive number of custom lanes to perform domain-specific tasks and used them from our CI. The major problem",
  "siteName": "Alberto De Bortoli",
  "favicon": "",
  "text": "PreludeFastlane is widely used by iOS teams all around the world. It became the standard de facto to automate common tasks such as building apps, running tests, and uploading builds to App Store Connect. Fastlane has been recently moved under the Mobile Native Foundation which is amazing as Google wasn't actively maintaining the project.At Just Eat Takeaway, we have implemented an extensive number of custom lanes to perform domain-specific tasks and used them from our CI.The major problem with Fastlane is that it's written in Ruby. When it was born, using Ruby was a sound choice but iOS developers are not necessarily familiar with such language which represents a barrier to contributing and writing lanes.While Fastlane.swift, a version of Fastlane in Swift, has been in beta for years, it's not a rewrite in Swift but rather a \"solution on top\" meaning that developers and CI systems still have to rely on Ruby, install related software (rbenv or rvm) and most likely maintain a Gemfile. The average iOS dev knows well that Ruby environments are a pain to deal with and have caused an infinite number of headaches.In recent years, Apple has introduced technologies that would enable a replacement of Fastlane using Swift:Swift Package Manager (SPM)Swift Argument Parser (SAP)Being myself a big fan of CLI tools written in Swift, I soon started maturing the idea of a Fastlane rewrite in Swift in early 2022. I circulated the idea with friends and colleagues for months and the sentiment was clear: it's time for a fresh simil-Fastlane tool written in Swift.JourneyTowards the end of 2022, I was determined to start this project. I teamed up with 2 iOS devs (not working at Just Eat Takeaway) and we started working on a design. I was keen on calling this project \"Swiftlane\" but the preference seemed to be for the name \"Interstellar\" which was eventually shortened into \"Stellar\".Fastlane has the concept of Actions and I instinctively thought that in Swift-land, they could take the form of SPM packages. This would make Stellar a modular system with pluggable components.For example, consider the Scan action in Fastlane. It could be a package that solely solves the same problem around testing. My goal was not to implement the plethora of existing Fastlane actions but rather to create a system that allows plugging in any package building on macOS. A sound design of such system was crucial.The Stellar ecosystem I had in mind was composed of 4 parts:ActionsActions are the basic building blocks of the ecosystem. They are packages that define a library product. An action can do anything, from taking care of build tasks to integrating with GitHub.Actions are independent packages that have no knowledge of the Stellar system, which treats them as pluggable components to create higher abstractions.Ideally, actions should expose an executable product (the CLI tool) using SAP calling into the action code. This is not required by Stellar but it’s advisable as a best practice.Official Actions would be hosted in the Stellar organisation on GitHub. Custom Actions could be created using Stellar.TasksTasks are specific to a project and implemented by the project developers. They are SAP ParsableCommand or AsyncParsableCommand which use actions to construct complex logic specific to the needs of the project.ExecutorExecutor is a command line tool in the form of a package generated by Stellar. It’s the entry point to the user-defined tasks. Invoking tasks on the Executor is like invoking lanes in Fastlane.Both developers and CI would interface with the Executor (masked as Stellar) to perform all operations. E.g.stellar setup_environment --developer-mode stellar run_unit_tests module=OrderHistory stellar setup_demo_app module=OrderHistory stellar run_ui_tests module=OrderHistory device=\"iPhone 15 Pro\"Stellar CLIStellar CLI is a command line tool that takes care of the heavy lifting of dealing with the Executor and the Tasks. It allows the integration of Stellar in a project and it should expose the following main commands:init: initialise the project by creating an Exectutor package in the .stellar folderbuild: builds the Executor generating a binary that is shared with the team members and used by CIcreate-action: scaffolding to create a new action in the form of a packagecreate-task: scaffolding to create a new task in the form of a packageedit: opens the Executor package for editing, similar to tuist editThis design was presented to a restricted group of devs at Just Eat Takeaway and it didn't take long to get an agreement on it. It was clear that once Stellar was completed, we would have integrated it in the codebase.Wider designI believe that a combination of CLI tools can create complex, templateable and customizable stacks to support the creation and growth of iOS codebases.Based on the experience developed at JET working on a large modular project with lots of packages, helper tools and optimised CI pipelines, I wanted Stellar to be eventually part of a set of tools taking the name “Stellar Tools” that could enable the creation and the management of large codebases.Something like the following:Tuist: generates projects and workspaces programmaticallyPackageGenerator: generates packages using a DSLStacker: creates a modular iOS project based on a DSLStellar: automate tasksWorkflows: generates GitHub Actions workflows that use StellarFrom my old notes:Current stateAfter a few months of development within this team (made of devs not working at Just Eat Takeaway), I realised things were not moving in the direction I desired and I decided it was not beneficial to continue the collaboration with the team. We stopped working on Stellar mainly due to different levels of commitment from each of us and focus on the wrong tasks signalling a lack of project management from my end. For example, a considerable amount of time and effort went into the implementation of a version management system (vastly inspired by the one used in Tuist) that was not part of the scope of the Stellar project.The experience left me bitter and demotivated, learning that sometimes projects are best started alone. We made the repo public on GitHub aware that it was far from being production-ready but in my opinion, it's no doubt a nice, inspiring, MVP.GitHub - StellarTools/StellarContribute to StellarTools/Stellar development by creating an account on GitHub.GitHubStellarToolsGitHub - StellarTools/ActionDSLContribute to StellarTools/ActionDSL development by creating an account on GitHub.GitHubStellarToolsThe intent was then to progress on my own or with my colleagues at JET. As things evolved in 2023, we embarked on big projects that continued to evolve the platform such as a massive migration to GitHub Actions. To this day, we still plan to remove Fastlane as our vision is to rely on external dependencies as little as possible but there is no plan to use Stellar as-is. I suspect that, for the infrastructure team at JET, things will evolve in a way that sees more CLI tools being implemented and more GitHub actions using them.",
  "image": "https://images.unsplash.com/photo-1647118762210-393b52e96fbc?crop=entropy\u0026cs=tinysrgb\u0026fit=max\u0026fm=jpg\u0026ixid=M3wxMTc3M3wwfDF8c2VhcmNofDE4fHxzdGVsbGFyfGVufDB8fHx8MTY5ODYxODcwNXww\u0026ixlib=rb-4.0.3\u0026q=80\u0026w=2000",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n        \u003ch2 id=\"prelude\"\u003ePrelude\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://github.com/fastlane/fastlane?ref=albertodebortoli.com\"\u003eFastlane\u003c/a\u003e is widely used by iOS teams all around the world. It became the standard de facto to automate common tasks such as building apps, running tests, and uploading builds to App Store Connect. Fastlane has been recently \u003ca href=\"https://github.com/MobileNativeFoundation/discussions/discussions/194?ref=albertodebortoli.com#discussioncomment-7406759\"\u003emoved\u003c/a\u003e under the \u003ca href=\"https://mobilenativefoundation.org/?ref=albertodebortoli.com\"\u003eMobile Native Foundation\u003c/a\u003e which is amazing as Google wasn\u0026#39;t actively maintaining the project.\u003c/p\u003e\u003cp\u003eAt Just Eat Takeaway, we have implemented an extensive number of custom lanes to perform domain-specific tasks and used them from our CI.\u003c/p\u003e\u003cp\u003eThe major problem with Fastlane is that it\u0026#39;s written in Ruby. When it was born, using Ruby was a sound choice but iOS developers are not necessarily familiar with such language which represents a barrier to contributing and writing lanes.\u003c/p\u003e\u003cp\u003eWhile \u003ca href=\"https://docs.fastlane.tools/getting-started/ios/fastlane-swift/?ref=albertodebortoli.com\"\u003eFastlane.swift\u003c/a\u003e, a version of Fastlane in Swift, has been in beta for years, it\u0026#39;s not a rewrite in Swift but rather a \u0026#34;solution on top\u0026#34; meaning that developers and CI systems still have to rely on Ruby, install related software (\u003ca href=\"https://github.com/rbenv/rbenv?ref=albertodebortoli.com\"\u003erbenv\u003c/a\u003e or \u003ca href=\"https://rvm.io/?ref=albertodebortoli.com\"\u003ervm\u003c/a\u003e) and most likely maintain a Gemfile. The average iOS dev knows well that Ruby environments are a pain to deal with and have caused an infinite number of headaches.\u003c/p\u003e\u003cp\u003eIn recent years, Apple has introduced technologies that would enable a replacement of Fastlane using Swift:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.swift.org/package-manager/?ref=albertodebortoli.com\"\u003eSwift Package Manager\u003c/a\u003e (SPM)\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/apple/swift-argument-parser?ref=albertodebortoli.com\"\u003eSwift Argument Parser\u003c/a\u003e (SAP)\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eBeing myself a big fan of CLI tools written in Swift, I soon started maturing the idea of a Fastlane rewrite in Swift in early 2022. I circulated the idea with friends and colleagues for months and the sentiment was clear: it\u0026#39;s time for a fresh simil-Fastlane tool written in Swift.\u003c/p\u003e\u003ch2 id=\"journey\"\u003eJourney\u003c/h2\u003e\u003cp\u003eTowards the end of 2022, I was determined to start this project. I teamed up with 2 iOS devs (not working at Just Eat Takeaway) and we started working on a design. I was keen on calling this project \u0026#34;Swiftlane\u0026#34; but the preference seemed to be for the name \u0026#34;Interstellar\u0026#34; which was eventually shortened into \u0026#34;Stellar\u0026#34;.\u003c/p\u003e\u003cp\u003eFastlane has the concept of \u003ca href=\"https://docs.fastlane.tools/actions/?ref=albertodebortoli.com\"\u003eActions\u003c/a\u003e and I instinctively thought that in Swift-land, they could take the form of SPM packages. This would make Stellar a modular system with pluggable components.\u003c/p\u003e\u003cp\u003eFor example, consider the \u003ca href=\"https://docs.fastlane.tools/actions/scan/?ref=albertodebortoli.com\"\u003eScan\u003c/a\u003e action in Fastlane. It could be a package that solely solves the same problem around testing. My goal was not to implement the plethora of existing Fastlane actions but rather to create a system that allows plugging in any package building on macOS. A sound design of such system was crucial.\u003c/p\u003e\u003cp\u003eThe Stellar ecosystem I had in mind was composed of 4 parts:\u003c/p\u003e\u003ch3 id=\"actions\"\u003eActions\u003c/h3\u003e\u003cp\u003eActions are the basic building blocks of the ecosystem. They are packages that define a library product. An action can do anything, from taking care of build tasks to integrating with GitHub.\u003c/p\u003e\u003cp\u003eActions are independent packages that have no knowledge of the Stellar system, which treats them as pluggable components to create higher abstractions.\u003c/p\u003e\u003cp\u003eIdeally, actions should expose an executable product (the CLI tool) using SAP calling into the action code. This is not required by Stellar but it’s advisable as a best practice.\u003c/p\u003e\u003cp\u003eOfficial Actions would be hosted in the Stellar organisation on GitHub. Custom Actions could be created using Stellar.\u003c/p\u003e\u003ch3 id=\"tasks\"\u003eTasks\u003c/h3\u003e\u003cp\u003eTasks are specific to a project and implemented by the project developers. They are SAP \u003ccode\u003eParsableCommand\u003c/code\u003e or \u003ccode\u003eAsyncParsableCommand\u003c/code\u003e which use actions to construct complex logic specific to the needs of the project.\u003c/p\u003e\u003ch3 id=\"executor\"\u003eExecutor\u003c/h3\u003e\u003cp\u003eExecutor is a command line tool in the form of a package generated by Stellar. It’s the entry point to the user-defined tasks.  Invoking tasks on the Executor is like invoking lanes in Fastlane.\u003c/p\u003e\u003cp\u003eBoth developers and CI would interface with the Executor (masked as Stellar) to perform all operations. E.g.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003estellar setup_environment --developer-mode\nstellar run_unit_tests module=OrderHistory\nstellar setup_demo_app module=OrderHistory\nstellar run_ui_tests module=OrderHistory device=\u0026#34;iPhone 15 Pro\u0026#34;\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"stellar-cli\"\u003eStellar CLI\u003c/h3\u003e\u003cp\u003eStellar CLI is a command line tool that takes care of the heavy lifting of dealing with the Executor and the Tasks. It allows the integration of Stellar in a project and it should expose the following main commands:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ccode\u003einit\u003c/code\u003e: initialise the project by creating an Exectutor package in the \u003ccode\u003e.stellar\u003c/code\u003e folder\u003c/li\u003e\u003cli\u003e\u003ccode\u003ebuild\u003c/code\u003e: builds the Executor generating a binary that is shared with the team members and used by CI\u003c/li\u003e\u003cli\u003e\u003ccode\u003ecreate-action\u003c/code\u003e: scaffolding to create a new action in the form of a package\u003c/li\u003e\u003cli\u003e\u003ccode\u003ecreate-task\u003c/code\u003e: scaffolding to create a new task in the form of a package\u003c/li\u003e\u003cli\u003e\u003ccode\u003eedit\u003c/code\u003e: opens the Executor package for editing, similar to \u003ccode\u003etuist edit\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis design was presented to a restricted group of devs at Just Eat Takeaway and it didn\u0026#39;t take long to get an agreement on it. It was clear that once Stellar was completed, we would have integrated it in the codebase.\u003c/p\u003e\u003ch2 id=\"wider-design\"\u003eWider design\u003c/h2\u003e\u003cp\u003eI believe that a combination of CLI tools can create complex, templateable and customizable stacks to support the creation and growth of iOS codebases.\u003c/p\u003e\u003cp\u003eBased on the experience developed at JET working on a large modular project with lots of packages, helper tools and optimised CI pipelines, I wanted Stellar to be eventually part of a set of tools taking the name “Stellar Tools” that could enable the creation and the management of large codebases.\u003c/p\u003e\u003cp\u003eSomething like the following:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://tuist.io/?ref=albertodebortoli.com\"\u003eTuist\u003c/a\u003e: generates projects and workspaces programmatically\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/justeattakeaway/PackageGenerator?ref=albertodebortoli.com\"\u003ePackageGenerator\u003c/a\u003e: generates packages using a DSL\u003c/li\u003e\u003cli\u003eStacker: creates a modular iOS project based on a DSL\u003c/li\u003e\u003cli\u003eStellar: automate tasks\u003c/li\u003e\u003cli\u003eWorkflows: generates GitHub Actions workflows that use Stellar\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eFrom my old notes:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://albertodebortoli.com/content/images/2023/10/image-1.png\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"1395\" srcset=\"https://albertodebortoli.com/content/images/size/w600/2023/10/image-1.png 600w, https://albertodebortoli.com/content/images/size/w1000/2023/10/image-1.png 1000w, https://albertodebortoli.com/content/images/size/w1600/2023/10/image-1.png 1600w, https://albertodebortoli.com/content/images/size/w2400/2023/10/image-1.png 2400w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/figure\u003e\u003ch2 id=\"current-state\"\u003eCurrent state\u003c/h2\u003e\u003cp\u003eAfter a few months of development within this team (made of devs not working at Just Eat Takeaway), I realised things were not moving in the direction I desired and I decided it was not beneficial to continue the collaboration with the team. We stopped working on Stellar mainly due to different levels of commitment from each of us and focus on the wrong tasks signalling a lack of project management from my end. For example, a considerable amount of time and effort went into the implementation of a version management system (vastly inspired by the one used in \u003ca href=\"https://tuist.io/?ref=albertodebortoli.com\"\u003eTuist\u003c/a\u003e) that was not part of the scope of the Stellar project.\u003c/p\u003e\u003cp\u003eThe experience left me bitter and demotivated, learning that sometimes projects are best started alone. We made the repo public on GitHub aware that it was far from being production-ready but in my opinion, it\u0026#39;s no doubt a nice, inspiring, MVP.\u003c/p\u003e\u003cfigure\u003e\u003ca href=\"https://github.com/StellarTools/Stellar?ref=albertodebortoli.com\"\u003e\u003cdiv\u003e\u003cp\u003eGitHub - StellarTools/Stellar\u003c/p\u003e\u003cp\u003eContribute to StellarTools/Stellar development by creating an account on GitHub.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://github.githubassets.com/assets/pinned-octocat-093da3e6fa40.svg\" alt=\"\"/\u003e\u003cspan\u003eGitHub\u003c/span\u003e\u003cspan\u003eStellarTools\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://opengraph.githubassets.com/d16992a8bc857f411032868e40dadc952a75d0f54a48d0cec40d55592aa027e9/StellarTools/Stellar\" alt=\"\"/\u003e\u003c/p\u003e\u003c/a\u003e\u003c/figure\u003e\u003cfigure\u003e\u003ca href=\"https://github.com/StellarTools/ActionDSL/tree/main?ref=albertodebortoli.com\"\u003e\u003cdiv\u003e\u003cp\u003eGitHub - StellarTools/ActionDSL\u003c/p\u003e\u003cp\u003eContribute to StellarTools/ActionDSL development by creating an account on GitHub.\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://github.githubassets.com/assets/pinned-octocat-093da3e6fa40.svg\" alt=\"\"/\u003e\u003cspan\u003eGitHub\u003c/span\u003e\u003cspan\u003eStellarTools\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://opengraph.githubassets.com/2f7bf81f51f52e27ad08afc02b784f0d1d3f6c2e403a0e91c724d09967a9eb40/StellarTools/ActionDSL\" alt=\"\"/\u003e\u003c/p\u003e\u003c/a\u003e\u003c/figure\u003e\u003cp\u003eThe intent was then to progress on my own or with my colleagues at JET. As things evolved in 2023, we embarked on big projects that continued to evolve the platform such as a massive migration to GitHub Actions. To this day, we still plan to remove Fastlane as our vision is to rely on external dependencies as little as possible but there is no plan to use Stellar as-is. I suspect that, for the infrastructure team at JET, things will evolve in a way that sees more CLI tools being implemented and more GitHub actions using them.\u003c/p\u003e\n    \u003c/section\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2023-10-29T22:57:38Z",
  "modifiedTime": "2023-11-19T15:25:48Z"
}
