{
  "id": "af798f16-1353-4337-b772-f684ee5f47ea",
  "title": "Experimenting with Live Activities",
  "link": "https://oleb.net/2022/live-activity/",
  "description": "",
  "author": "Ole Begemann",
  "published": "2022-08-03T16:50:39Z",
  "source": "https://oleb.net/blog/atom.xml",
  "categories": null,
  "byline": "By Ole Begemann …",
  "length": 7675,
  "excerpt": "Learnings from implementing my first iOS 16 Live Activity.",
  "siteName": "Ole Begemann",
  "favicon": "",
  "text": "iOS 16 beta 4 is the first SDK release that supports Live Activities. A Live Activity is a widget-like view an app can place on your lock screen and update in real time. Examples where this can be useful include live sports scores or train departure times. These are my notes on playing with the API and implementing my first Live Activity. A bike computer on your lock screen My Live Activity is a display for a bike computer that I’ve been developing with a group a friends. Here’s a video of it in action: Download video And here with simulated data: Download video I haven’t talked much about our bike computer project publicly yet; that will hopefully change someday. In short, a group of friends and I designed a little box that connects to your bike’s hub dynamo, measures speed and distance, and sends the data via Bluetooth to an iOS app. The app records all your rides and can also act as a live speedometer when mounted on your bike’s handlebar. It’s this last feature that I wanted to replicate in the Live Activity. Follow Apple’s guide Adding a Live Activity to the app wasn’t hard. I found Apple’s guide Displaying live data on the Lock Screen with Live Activities easy to follow and quite comprehensive. No explicit user approval iOS doesn’t ask the user for approval when an app wants to show a Live Activity. I found this odd since it seems to invite developers to abuse the feature, but maybe it’s OK because of the foreground requirement (see below). Plus, users can disallow Live Activities on a per-app basis in Settings. Users can dismiss an active Live Activity from the lock screen by swiping (like a notification). Most apps will probably need to ask the user for notification permissions to update their Live Activities. The app must be in the foreground to start an activity To start a Live Activity, an app must be open in the foreground. This isn’t ideal for the bike computer because the speedometer can’t appear magically on the lock screen when the user starts riding (even though iOS wakes up the app in the background at this point to deliver the Bluetooth events from the bike). The user has to open the app manually at least once. On the other hand, this limitation may not be an issue for most use cases and will probably cut down on spamming/abuse significantly. The app must keep running in the background to update the activity (or use push notifications) As long as the app keeps running (in the foreground or background), it can update the Live Activity as often as it wants (I think). This is ideal for the bike computer as the app keeps running in the background processing Bluetooth events while the bike is in motion. I assume the same applies to other apps that can remain alive in the background, such as audio players or navigation apps doing continuous location monitoring. Updating the Live Activity once per second was no problem in my testing, and I didn’t experience any rate limiting. Most apps get suspended in the background, however. They must use push notifications to update their Live Activity (or background tasks or some other mechanism to have the system wake you up). Apple introduced a new kind of push notification that is delivered directly to the Live Activity, bypassing the app altogether. I haven’t played with push notification updates, so I don’t know the benefits of using this method over sending a silent push notification to wake the app and updating the Live Activity from there. Probably less aggressive rate limiting? Lock screen color matching I haven’t found a good way to match my Live Activity’s colors to the current system colors on the lock screen. By default, text in a Live Activity is black in light mode, whereas the built-in lock screen themes seem to favor white or other light text colors. If there is an API or environment value that allows apps to match the color style of the current lock screen, I haven’t found it. I experimented with various foreground styles, such as materials, without success. I ended up hardcoding the foreground color, but I’m not satisfied with the result. Depending on the user’s lock screen theme, the Live Activity can look out of place. The default text color of a Live Activity in light mode is black. This doesn’t match most lock screen themes. Animations can’t be disabled Apple’s guide clearly states that developers have little control over animations in a Live Activity: Animate content updates When you define the user interface of your Live Activity, the system ignores any animation modifiers — for example, withAnimation(_:_:) and animation(_:value:) — and uses the system’s animation timing instead. However, the system performs some animation when the dynamic content of the Live Activity changes. Text views animate content changes with blurred content transitions, and the system animates content transitions for images and SF Symbols. If you add or remove views from the user interface based on content or state changes, views fade in and out. Use the following view transitions to configure these built-in transitions: opacity, move(edge:), slide, push(from:), or combinations of them. Additionally, request animations for timer text with numericText(countsDown:). It makes total sense to me that Apple doesn’t want developers to go crazy with animations on the lock screen, and perhaps having full control over animations also makes it easier for Apple to integrate Live Activities into the always-on display that’s probably coming on the next iPhone. What surprised me is that I couldn’t find a way to disable the text change animations altogether. I find the blurred text transitions for the large speed value quite distracting and I think this label would look better without any animations. But no combination of .animation(nil), .contentTransition(.identity), and .transition(.identity) would do this. A Live Activity is very much like a widget: the UI must live in your app’s widget extension. You start the Live Activity with code that runs in your app, though. Both targets (the app and the widget extension) need access to a common data type that represents the data the widget displays. You should have a third target (a framework or SwiftPM package) that contains such shared types and APIs and that the downstream targets import. Availability annotations WidgetBundle apparently doesn’t support widgets with different minimum deployment targets. If your widget extension has a deployment target of iOS 14 or 15 for an existing widget and you now want to add a Live Activity, I’d expect your widget bundle to look like this: @main struct MyWidgets: WidgetBundle { var body: some Widget { MyNormalWidget() // Error: Closure containing control flow statement cannot // be used with result builder 'WidgetBundleBuilder' if #available(iOSApplicationExtension 16.0, *) { MyLiveActivityWidget() } } } But this doesn’t compile because the result builder type used by WidgetBundle doesn’t support availability conditions. I hope Apple fixes this. This wasn’t a problem for me because our app didn’t have any widgets until now, so I just set the deployment target of the widget extension to iOS 16.0. If you have existing widgets and can’t require iOS 16 yet, a workaround is to add a second widget extension target just for the Live Activity. I haven’t tried this, but WidgetKit explicitly supports having multiple widget extensions, so it should work: Typically, you include all your widgets in a single widget extension, although your app can contain multiple extensions.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n          \u003cp\u003eiOS 16 beta 4 is the first SDK release \u003ca href=\"https://developer.apple.com/news/?id=hi37aek8\"\u003ethat supports Live Activities\u003c/a\u003e. A Live Activity is a widget-like view an app can place on your lock screen and update in real time. Examples where this can be useful include live sports scores or train departure times.\u003c/p\u003e\n\n\u003cp\u003eThese are my notes on playing with the API and implementing my first Live Activity.\u003c/p\u003e\n\n\u003ch2 id=\"a-bike-computer-on-your-lock-screen\"\u003eA bike computer on your lock screen\u003c/h2\u003e\n\n\u003cp\u003eMy Live Activity is a display for a bike computer that I’ve been developing with a group a friends. Here’s a video of it in action:\u003c/p\u003e\n\n\u003cp\u003e\n\u003cfigure\u003e\n  \u003cvideo controls=\"\" width=\"640\"\u003e\n    \u003csource src=\"https://oleb.net/media/live-activity-bike-demo.mp4\" type=\"video/mp4\"/\u003e\n  \u003c/video\u003e\n  \u003cfigcaption\u003e\n    \u003ca href=\"https://oleb.net/media/live-activity-bike-demo.mp4\"\u003eDownload video\u003c/a\u003e\n  \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eAnd here with simulated data:\u003c/p\u003e\n\n\u003cp\u003e\n\u003cfigure\u003e\n  \u003cvideo controls=\"\" width=\"540\"\u003e\n    \u003csource src=\"https://oleb.net/media/live-activity-simulated.mp4\" type=\"video/mp4\"/\u003e\n  \u003c/video\u003e\n  \u003cfigcaption\u003e\n    \u003ca href=\"https://oleb.net/media/live-activity-simulated.mp4\"\u003eDownload video\u003c/a\u003e\n  \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/p\u003e\n\n\u003cp\u003eI haven’t talked much about our bike computer project publicly yet; that will hopefully change someday. In short, a group of friends and I designed a little box that connects to your bike’s \u003ca href=\"https://en.wikipedia.org/wiki/Hub_dynamo\"\u003ehub dynamo\u003c/a\u003e, measures speed and distance, and sends the data via Bluetooth to an iOS app. The app records all your rides and can also act as a live speedometer when mounted on your bike’s handlebar. It’s this last feature that I wanted to replicate in the Live Activity.\u003c/p\u003e\n\n\u003ch2 id=\"follow-apples-guide\"\u003eFollow Apple’s guide\u003c/h2\u003e\n\n\u003cp\u003eAdding a Live Activity to the app wasn’t hard. I found Apple’s guide \u003ca href=\"https://developer.apple.com/documentation/activitykit/displaying-live-data-on-the-lock-screen-with-live-activities\"\u003eDisplaying live data on the Lock Screen with Live Activities\u003c/a\u003e easy to follow and quite comprehensive.\u003c/p\u003e\n\n\u003ch2 id=\"no-explicit-user-approval\"\u003eNo explicit user approval\u003c/h2\u003e\n\n\u003cp\u003eiOS doesn’t ask the user for approval when an app wants to show a Live Activity. I found this odd since it seems to invite developers to abuse the feature, but maybe it’s OK because of the foreground requirement (see below). Plus, users can disallow Live Activities on a per-app basis in Settings.\u003c/p\u003e\n\n\u003cp\u003eUsers can dismiss an active Live Activity from the lock screen by swiping (like a notification).\u003c/p\u003e\n\n\u003cp\u003eMost apps will probably need to ask the user for notification permissions to update their Live Activities.\u003c/p\u003e\n\n\u003ch2 id=\"the-app-must-be-in-the-foreground-to-start-an-activity\"\u003eThe app must be in the foreground to start an activity\u003c/h2\u003e\n\n\u003cp\u003eTo start a Live Activity, an app must be open in the foreground. This isn’t ideal for the bike computer because the speedometer can’t appear magically on the lock screen when the user starts riding (even though iOS wakes up the app in the background at this point to deliver the Bluetooth events from the bike). The user has to open the app manually at least once.\u003c/p\u003e\n\n\u003cp\u003eOn the other hand, this limitation may not be an issue for most use cases and will probably cut down on spamming/abuse significantly.\u003c/p\u003e\n\n\u003ch2 id=\"the-app-must-keep-running-in-the-background-to-update-the-activity-or-use-push-notifications\"\u003eThe app must keep running in the background to update the activity (or use push notifications)\u003c/h2\u003e\n\n\u003cp\u003eAs long as the app keeps running (in the foreground or background), it can update the Live Activity as often as it wants (I think). This is ideal for the bike computer as the app keeps running in the background processing Bluetooth events while the bike is in motion. I assume the same applies to other apps that can remain alive in the background, such as audio players or navigation apps doing continuous location monitoring.\u003c/p\u003e\n\n\u003cp\u003eUpdating the Live Activity once per second was no problem in my testing, and I didn’t experience any rate limiting.\u003c/p\u003e\n\n\u003cp\u003eMost apps get suspended in the background, however. They must use push notifications to update their Live Activity (or \u003ca href=\"https://developer.apple.com/documentation/backgroundtasks\"\u003ebackground tasks\u003c/a\u003e or some other mechanism to have the system wake you up). Apple introduced a new kind of push notification that is delivered directly to the Live Activity, bypassing the app altogether. I haven’t played with push notification updates, so I don’t know the benefits of using this method over sending a silent push notification to wake the app and updating the Live Activity from there. Probably less aggressive rate limiting?\u003c/p\u003e\n\n\u003ch2 id=\"lock-screen-color-matching\"\u003eLock screen color matching\u003c/h2\u003e\n\n\u003cp\u003eI haven’t found a good way to match my Live Activity’s colors to the current system colors on the lock screen. By default, text in a Live Activity is black in light mode, whereas the built-in lock screen themes seem to favor white or other light text colors. If there is an API or environment value that allows apps to match the color style of the current lock screen, I haven’t found it. I experimented with various foreground styles, such as materials, without success.\u003c/p\u003e\n\n\u003cp\u003eI ended up hardcoding the foreground color, but I’m not satisfied with the result. Depending on the user’s lock screen theme, the Live Activity can look out of place.\u003c/p\u003e\n\n\u003cdiv\u003e\n\u003cfigure\u003e\n  \u003ca href=\"https://oleb.net/media/live-activity-default-color.jpg\"\u003e\n  \u003cimg src=\"https://oleb.net/media/live-activity-default-color.jpg\" alt=\"The lock screen of an iPhone running iOS 16. The system text (clock, date) is in a light, whitish color. The Live Activity at the bottom of the screen has black text.\"/\u003e\n  \u003c/a\u003e\n  \u003cfigcaption\u003e\n    The default text color of a Live Activity in light mode is black. This doesn’t match most lock screen themes.\n  \u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"animations-cant-be-disabled\"\u003eAnimations can’t be disabled\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://developer.apple.com/documentation/activitykit/displaying-live-data-on-the-lock-screen-with-live-activities#Animate-content-updates\"\u003eApple’s guide\u003c/a\u003e clearly states that developers have little control over animations in a Live Activity:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003eAnimate content updates\u003c/strong\u003e\u003c/p\u003e\n\n  \u003cp\u003eWhen you define the user interface of your Live Activity, the system ignores any animation modifiers — for example, \u003ca href=\"https://developer.apple.com/documentation/SwiftUI/withAnimation(_:_:)\"\u003e\u003ccode\u003ewithAnimation(_:_:)\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://developer.apple.com/documentation/SwiftUI/View/animation(_:value:)\"\u003e\u003ccode\u003eanimation(_:value:)\u003c/code\u003e\u003c/a\u003e — and uses the system’s animation timing instead. However, the system performs some animation when the dynamic content of the Live Activity changes. Text views animate content changes with blurred content transitions, and the system animates content transitions for images and SF Symbols. If you add or remove views from the user interface based on content or state changes, views fade in and out. Use the following view transitions to configure these built-in transitions: \u003ca href=\"https://developer.apple.com/documentation/SwiftUI/AnyTransition/opacity\"\u003e\u003ccode\u003eopacity\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://developer.apple.com/documentation/SwiftUI/AnyTransition/move(edge:)\"\u003e\u003ccode\u003emove(edge:)\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://developer.apple.com/documentation/SwiftUI/AnyTransition/slide\"\u003e\u003ccode\u003eslide\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://developer.apple.com/documentation/SwiftUI/AnyTransition/push(from:)\"\u003e\u003ccode\u003epush(from:)\u003c/code\u003e\u003c/a\u003e, or combinations of them. Additionally, request animations for timer text with \u003ca href=\"https://developer.apple.com/documentation/SwiftUI/ContentTransition/numericText(countsDown:)\"\u003e\u003ccode\u003enumericText(countsDown:)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIt makes total sense to me that Apple doesn’t want developers to go crazy with animations on the lock screen, and perhaps having full control over animations also makes it easier for Apple to integrate Live Activities into the always-on display that’s probably coming on the next iPhone.\u003c/p\u003e\n\n\u003cp\u003eWhat surprised me is that I couldn’t find a way to \u003cem\u003edisable\u003c/em\u003e the text change animations altogether. I find the blurred text transitions for the large speed value quite distracting and I think this label would look better without any animations. But no combination of \u003ccode\u003e.animation(nil)\u003c/code\u003e, \u003ccode\u003e.contentTransition(.identity)\u003c/code\u003e, and \u003ccode\u003e.transition(.identity)\u003c/code\u003e would do this.\u003c/p\u003e\n\n\n\n\u003cp\u003eA Live Activity is very much like a widget: the UI must live in your app’s widget extension. You start the Live Activity with code that runs in your app, though. Both targets (the app and the widget extension) need access to a common data type that represents the data the widget displays. You should have a third target (a framework or SwiftPM package) that contains such shared types and APIs and that the downstream targets import.\u003c/p\u003e\n\n\u003ch2 id=\"availability-annotations\"\u003eAvailability annotations\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003eWidgetBundle\u003c/code\u003e apparently doesn’t support widgets with different minimum deployment targets. If your widget extension has a deployment target of iOS 14 or 15 for an existing widget and you now want to add a Live Activity, I’d expect your widget bundle to look like this:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@main\u003c/span\u003e\n\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eMyWidgets\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eWidgetBundle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eWidget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eMyNormalWidget\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e// Error: Closure containing control flow statement cannot\u003c/span\u003e\n    \u003cspan\u003e// be used with result builder \u0026#39;WidgetBundleBuilder\u0026#39;\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e#available(iOSApplicationExtension 16.0, *)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003eMyLiveActivityWidget\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut this doesn’t compile because \u003ca href=\"https://developer.apple.com/documentation/swiftui/widgetbundlebuilder\"\u003ethe result builder type used by \u003ccode\u003eWidgetBundle\u003c/code\u003e\u003c/a\u003e doesn’t support availability conditions. I hope Apple fixes this.\u003c/p\u003e\n\n\u003cp\u003eThis wasn’t a problem for me because our app didn’t have any widgets until now, so I just set the deployment target of the widget extension to iOS 16.0. If you have existing widgets and can’t require iOS 16 yet, a workaround is to add a second widget extension target just for the Live Activity. I haven’t tried this, but \u003ca href=\"https://developer.apple.com/documentation/widgetkit/creating-a-widget-extension\"\u003eWidgetKit explicitly supports having multiple widget extensions\u003c/a\u003e, so it should work:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eTypically, you include all your widgets in a single widget extension, although your app can contain multiple extensions.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2022-08-03T16:50:39Z",
  "modifiedTime": "2022-09-22T21:17:10Z"
}
