{
  "id": "e34f8482-62e8-4a65-bee1-94c23340cbc7",
  "title": "Creating Slick Color Palette APIs",
  "link": "https://fabisevi.ch/2021/08/24/creating-slick-color-palette-apis/",
  "description": "The work of writing maintainable code is an ongoing endeavor and some of my favorite problems to solve are ones that build maintainable systems. Maintainable systems are ones you can learn once, easily manipulate, and ideally take from project to project. My favorite part of building maintainable systems is that it minimizes the amount of work I need to do when starting a new project, and like it is for many programmers hitting âŒ˜ + â‡ª + N to start a new project is one of the most satisfying feelings in the world for me.",
  "author": "Joe Fabisevich",
  "published": "Tue, 24 Aug 2021 00:00:00 GMT",
  "source": "https://www.fabisevi.ch/feed.xml",
  "categories": null,
  "byline": "",
  "length": 8515,
  "excerpt": "The work of writing maintainable code is an ongoing endeavor and some of my favorite problems to solve are ones that build maintainable systems. Maintainable systems are ones you can learn once, easily manipulate, and ideally take from project to project. My favorite part of building maintainable systems is that it minimizes the amount of work I need to do when starting a new project, and like it is for many programmers hitting âŒ˜ + â‡ª + N to start a new project is one of the most satisfying feelings in the world for me.",
  "siteName": "",
  "favicon": "https://fabisevi.ch/icons/icon-512x512.png?v=b60b950dc439294a707fb76cdaca4274",
  "text": "The work of writing maintainable code is an ongoing endeavor and some of my favorite problems to solve are ones that build maintainable systems. Maintainable systems are ones you can learn once, easily manipulate, and ideally take from project to project. My favorite part of building maintainable systems is that it minimizes the amount of work I need to do when starting a new project, and like it is for many programmers hitting âŒ˜ + â‡ª + N to start a new project is one of the most satisfying feelings in the world for me. A color palette is something every well-designed app needs, and it turns out there are a lot of ways to solve this problem. If you don't yet have a good sense for how to construct a color palette, I highly recommend this post by Refactoring UI that explains the fundamentals of a good color palette. Generating a good color palette can be tricky if youâ€™re new to the practice and can require some trial and error, so if youâ€™d like a shortcut a tool like Coolors is a great starting point. I've spent years iterating on approaches to codifying color palettes in my iOS and macOS apps, seeking to create one thatâ€™s flexible, scales well, and is easy to understand, landing on the version weâ€™ll explore below. We'll be able to leverage asset catalogs, create a clear sense of hierarchy, provide statically typed semantic colors, even take advantage of the built in features of SwiftUI. As a bonus, if you're working with designers, your palette will be so straightforward to modify that a designer can submit a pull request to change colors without ever involving you. Considering we'll be leveraging asset catalogs, the first step should be pretty intuitive, we should create an asset catalog to hold our color palettes. As I was piecing together different instructions and ideas this second step confused me, so I'll spare you the misery. You're going to want to make a different folder for each color palette you create, and you can do that by right clicking in the asset catalog and selecting New Folder. Now it's time to create our color palettes. I'm showing you the Night palette I created for my app, and below it are Spring, Summer, and Winter. Each palette has the same name but all of the colors are named the same, each palette will have colors named background-alt, primary, quaternary, etc. Do not miss this incredibly important step, guide your eyes towards the pink arrow on the right side of the image. You must select the folder you're adding colors to and check the Provides Namespace checkbox. This is what will enable our code to have a clear and consistent naming structure, matching the folderâ€™s name to our palette's name. Now that we've got our asset catalogs setup, we're ready to write some code. We'll start by constructing a new Palette struct, and populating it with some Colors that we'll reference across our app. extension Color { struct Palette { let name: String var mainBackground: Color { Color(fromPalette: self.name, semanticName: \"background-main\") } var midBackground: Color { Color(fromPalette: self.name, semanticName: \"background-mid\") } var alternativeBackground: Color { Color(fromPalette: self.name, semanticName: \"background-alt\") } var primaryText: Color { Color(fromPalette: self.name, semanticName: \"text-primary\") } var alternativeText: Color { Color(fromPalette: self.name, semanticName: \"text-alt\") } var primary: Color { Color(fromPalette: self.name, semanticName: \"primary\") } var secondary: Color { Color(fromPalette: self.name, semanticName: \"secondary\") } var tertiary: Color { Color(fromPalette: self.name, semanticName: \"tertiary\") } var quaternary: Color { Color(fromPalette: self.name, semanticName: \"quaternary\") } } } This is a pretty standard palette and should cover most of the use cases you'll encounter in building an app. You can modify it to your needs, but the important thing is that the colors you choose need to match the names of the colors you declared in your asset catalog. But what is this Color(fromPalette:semanticName:) initializer? private extension Color { init(fromPalette palette: String, semanticName: String) { #if os(macOS) self.init(NSColor(named: \"\\(palette)/\\(semanticName)\")!) #else self.init(UIColor(named: \"\\(palette)/\\(semanticName)\")!) #endif } } You can just as easily use a private method in Color.Palette, something like private func assetCatalogColor(semanticName: String). I happen to prefer the ergonomics of a custom initializer, and this whole post is about improving ergonomics, so let's run with that. This initializer lives in Color.Palette and takes advantage of our namespaced folder structure to pull out colors from the asset catalog. palette unsurprisingly is the name of our color palette, and semanticName is the name of the color we're pulling out of it, such as primary, secondary, or background-main. Combining the two with a /, we'll get the primary, secondary, or background-main color from our current palette. All that's left is to define the palettes we'll be constructing. extension Color.Palette { static let spring = Color.Palette(name: \"Spring\") static let summer = Color.Palette(name: \"Summer\") static let autumn = Color.Palette(name: \"Autumn\") static let winter = Color.Palette(name: \"Winter\") static let day = Color.Palette(name: \"Day\") static let dusk = Color.Palette(name: \"Dusk\") static let night = Color.Palette(name: \"Night\") } Constructing palettes is pretty easy. All you have to do is instantiate a Color.Palette object with a name. That name must match the folder name, so in my app the palette name for Night will be Night because the folder we chose for that palete was \"Night\". Now that we have a color palette created, we should probably start using it. If you're using UIKit you'll likely have built your palette atop UIColor instead of Color and used .palette.primaryText wherever a UIColor is expected. But if we're building our app in SwiftUI, we can go the extra mile with just a few lines of code to leverage the Environment, making our palette easily accessible and SwiftUI-friendly. private struct ColorPaletteKey: EnvironmentKey { // We need to default to a palette so without any particular preference let's pick `day` static let defaultValue = Color.Palette.day } extension EnvironmentValues { var preferredColorPalette: Color.Palette { get { return self[ColorPaletteKey.self] } set { self[ColorPaletteKey.self] = newValue } } } This creates the preferredColorPalette property in our Environment. If you're not sure how the Environment works there are a lot of great resources on the internet like this post by Keith Harrison. struct HeaderView: View { @Environment(\\.preferredColorPalette) private var palette var body: View { Text(\"Hello World\") .foregroundColor(palette.primaryText) } } Now accessing our colors is a nothing more than two lines of code, how slick is that? Hope I didn't wear you out, there's a lot here, but when you throw it into Xcode you'll see that it's pretty easy to digest. After a few iterations I'm really happy with this solution and have been using it in my personal apps for a while now. It allows us to easily add or change colors, have a visual representation of our colors, with minimal code, and a pretty slick API. But no code is perfect (except for mergesort), so I'm always looking for improvements. I'm excited to hear your thoughts or suggestions, so don't be shy about reaching out.Joe Fabisevich is an indie developer creating software at Red Panda Club Inc. while writing about design, development, and building a company. Formerly an iOS developer working on societal issues @Twitter. These days I don't tweet, but I do post on Threads.Like my writing? You can keep up with it in your favorite RSS reader, or get posts emailed in newsletter form. I promise to never spam you or send you anything other than my posts, it's just a way for you to read my writing wherever's most comfortable for you.If you'd like to know more, wanna talk, or need some advice, feel free to sign up for office hours, I'm very friendly. ðŸ™‚",
  "image": "https://fabisevi.ch/static/pic-f5999ef8dd476bfbf9d65ddbace7e387.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eThe work of writing maintainable code is an ongoing endeavor and some of my favorite problems to solve are ones that build maintainable systems. Maintainable systems are ones you can learn once, easily manipulate, and ideally take from project to project. My favorite part of building maintainable systems is that it minimizes the amount of work I need to do when starting a new project, and like it is for many programmers hitting âŒ˜ + â‡ª + N to start a new project is one of the most satisfying feelings in the world for me.\u003c/p\u003e\n\n\u003cp\u003eA color palette is something every well-designed app needs, and it turns out there are a lot of ways to solve this problem. If you don\u0026#39;t yet have a good sense for how to construct a color palette, I highly recommend \u003ca href=\"https://www.refactoringui.com/previews/building-your-color-palette\"\u003ethis post by Refactoring UI\u003c/a\u003e that explains the fundamentals of a good color palette. Generating a good color palette can be tricky if youâ€™re new to the practice and can require some trial and error, so if youâ€™d like a shortcut a tool like \u003ca href=\"https://coolors.co\"\u003eCoolors\u003c/a\u003e is a great starting point.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;ve spent years iterating on approaches to codifying color palettes in my iOS and macOS apps, seeking to create one thatâ€™s flexible, scales well, and is easy to understand, landing on the version weâ€™ll explore below. We\u0026#39;ll be able to leverage asset catalogs, create a clear sense of hierarchy, provide statically typed semantic colors, even take advantage of the built in features of SwiftUI. As a bonus, if you\u0026#39;re working with designers, your palette will be so straightforward to modify that a designer can submit a pull request to change colors without ever involving you.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eConsidering we\u0026#39;ll be leveraging asset catalogs, the first step should be pretty intuitive, we should create an asset catalog to hold our color palettes.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\n\u003ca href=\"https://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/07854/color-palette-resources-folder.jpg\" target=\"_blank\" rel=\"noopener\"\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cpicture\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/fc615/color-palette-resources-folder.avif 243w,\nhttps://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/b3175/color-palette-resources-folder.avif 485w,\nhttps://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/286f7/color-palette-resources-folder.avif 534w\" sizes=\"(max-width: 534px) 100vw, 534px\" type=\"image/avif\"/\u003e\u003csource srcset=\"https://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/0e3e2/color-palette-resources-folder.webp 243w,\nhttps://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/749af/color-palette-resources-folder.webp 485w,\nhttps://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/29722/color-palette-resources-folder.webp 534w\" sizes=\"(max-width: 534px) 100vw, 534px\" type=\"image/webp\"/\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/3f316/color-palette-resources-folder.jpg 243w,\nhttps://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/0d3a1/color-palette-resources-folder.jpg 485w,\nhttps://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/07854/color-palette-resources-folder.jpg 534w\" sizes=\"(max-width: 534px) 100vw, 534px\" type=\"image/jpeg\"/\u003e\n\u003cimg src=\"https://fabisevi.ch/static/280e1a499cb4929777117648ebcf35dc/07854/color-palette-resources-folder.jpg\" alt=\"An image displaying an asset catalog in a folder called Resources\" title=\"An image displaying an asset catalog in a folder called Resources\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003c/picture\u003e\n\u003c/a\u003e\n\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eAs I was piecing together different instructions and ideas this second step confused me, so I\u0026#39;ll spare you the misery. You\u0026#39;re going to want to make a different folder for each color palette you create, and you can do that by right clicking in the asset catalog and selecting \u003cem\u003eNew Folder\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\n\u003ca href=\"https://fabisevi.ch/static/ee87dfb419a3af64b7da4eee6a768652/f93b5/color-palette-right-click.jpg\" target=\"_blank\" rel=\"noopener\"\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cpicture\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/ee87dfb419a3af64b7da4eee6a768652/fc615/color-palette-right-click.avif 243w,\nhttps://fabisevi.ch/static/ee87dfb419a3af64b7da4eee6a768652/e47c0/color-palette-right-click.avif 300w\" sizes=\"(max-width: 300px) 100vw, 300px\" type=\"image/avif\"/\u003e\u003csource srcset=\"https://fabisevi.ch/static/ee87dfb419a3af64b7da4eee6a768652/0e3e2/color-palette-right-click.webp 243w,\nhttps://fabisevi.ch/static/ee87dfb419a3af64b7da4eee6a768652/c85cb/color-palette-right-click.webp 300w\" sizes=\"(max-width: 300px) 100vw, 300px\" type=\"image/webp\"/\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/ee87dfb419a3af64b7da4eee6a768652/3f316/color-palette-right-click.jpg 243w,\nhttps://fabisevi.ch/static/ee87dfb419a3af64b7da4eee6a768652/f93b5/color-palette-right-click.jpg 300w\" sizes=\"(max-width: 300px) 100vw, 300px\" type=\"image/jpeg\"/\u003e\n\u003cimg src=\"https://fabisevi.ch/static/ee87dfb419a3af64b7da4eee6a768652/f93b5/color-palette-right-click.jpg\" alt=\"An image displaying a New Folder option when you right click inside of an empty asset catalog\" title=\"An image displaying a New Folder option when you right click inside of an empty asset catalog\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003c/picture\u003e\n\u003c/a\u003e\n\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eNow it\u0026#39;s time to create our color palettes. I\u0026#39;m showing you the Night palette I created for my app, and below it are Spring, Summer, and Winter. Each palette has the same name but all of the colors are named the same, each palette will have colors named background-alt, primary, quaternary, etc.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\n\u003ca href=\"https://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/a525f/color-palette-asset-catalog.jpg\" target=\"_blank\" rel=\"noopener\"\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cpicture\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/fc615/color-palette-asset-catalog.avif 243w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/b3175/color-palette-asset-catalog.avif 485w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/006d3/color-palette-asset-catalog.avif 970w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/b52ec/color-palette-asset-catalog.avif 1455w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/44c94/color-palette-asset-catalog.avif 1940w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/7767f/color-palette-asset-catalog.avif 2768w\" sizes=\"(max-width: 970px) 100vw, 970px\" type=\"image/avif\"/\u003e\u003csource srcset=\"https://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/0e3e2/color-palette-asset-catalog.webp 243w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/749af/color-palette-asset-catalog.webp 485w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/dbca2/color-palette-asset-catalog.webp 970w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/bda17/color-palette-asset-catalog.webp 1455w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/0dc73/color-palette-asset-catalog.webp 1940w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/7fe0f/color-palette-asset-catalog.webp 2768w\" sizes=\"(max-width: 970px) 100vw, 970px\" type=\"image/webp\"/\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/3f316/color-palette-asset-catalog.jpg 243w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/0d3a1/color-palette-asset-catalog.jpg 485w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/ec7ce/color-palette-asset-catalog.jpg 970w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/8010b/color-palette-asset-catalog.jpg 1455w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/f32bc/color-palette-asset-catalog.jpg 1940w,\nhttps://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/a525f/color-palette-asset-catalog.jpg 2768w\" sizes=\"(max-width: 970px) 100vw, 970px\" type=\"image/jpeg\"/\u003e\n\u003cimg src=\"https://fabisevi.ch/static/b6c2900ee71e722221807bec730baa68/ec7ce/color-palette-asset-catalog.jpg\" alt=\"An image displaying four color palettes from my app\" title=\"An image displaying four color palettes from my app\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003c/picture\u003e\n\u003c/a\u003e\n\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDo not miss this incredibly important step, guide your eyes towards the pink arrow on the right side of the image.\u003c/strong\u003e You must select the folder you\u0026#39;re adding colors to and check the \u003cstrong\u003eProvides Namespace checkbox\u003c/strong\u003e. This is what will enable our code to have a clear and consistent naming structure, matching the folderâ€™s name to our palette\u0026#39;s name.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eNow that we\u0026#39;ve got our asset catalogs setup, we\u0026#39;re ready to write some code. We\u0026#39;ll start by constructing a new \u003ccode\u003ePalette\u003c/code\u003e struct, and populating it with some \u003ccode\u003eColor\u003c/code\u003es that we\u0026#39;ll reference across our app.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003ePalette\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e name\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n\n        \u003cspan\u003evar\u003c/span\u003e mainBackground\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;background-main\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003evar\u003c/span\u003e midBackground\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;background-mid\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003evar\u003c/span\u003e alternativeBackground\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;background-alt\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003evar\u003c/span\u003e primaryText\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;text-primary\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003evar\u003c/span\u003e alternativeText\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;text-alt\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003evar\u003c/span\u003e primary\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;primary\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003evar\u003c/span\u003e secondary\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;secondary\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003evar\u003c/span\u003e tertiary\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;tertiary\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n\n        \u003cspan\u003evar\u003c/span\u003e quaternary\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ename\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;quaternary\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis is a pretty standard palette and should cover most of the use cases you\u0026#39;ll encounter in building an app. You can modify it to your needs, but the important thing is that the colors you choose need to match the names of the colors you declared in your asset catalog. But what is this \u003ccode\u003eColor(fromPalette:semanticName:)\u003c/code\u003e initializer?\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003efromPalette palette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e semanticName\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e#if\u003c/span\u003e os\u003cspan\u003e(\u003c/span\u003emacOS\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eNSColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003enamed\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\\(\u003c/span\u003e\u003cspan\u003epalette\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\\(\u003c/span\u003e\u003cspan\u003esemanticName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e#else\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eUIColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003enamed\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\\(\u003c/span\u003e\u003cspan\u003epalette\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\\(\u003c/span\u003e\u003cspan\u003esemanticName\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e#endif\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou can just as easily use a private method in \u003ccode\u003eColor.Palette\u003c/code\u003e, something like \u003ccode\u003eprivate func assetCatalogColor(semanticName: String)\u003c/code\u003e. I happen to prefer the ergonomics of a custom initializer, and this whole post is about improving ergonomics, so let\u0026#39;s run with that.\u003c/p\u003e\n\u003cp\u003eThis initializer lives in \u003ccode\u003eColor.Palette\u003c/code\u003e and takes advantage of our namespaced folder structure to pull out colors from the asset catalog. \u003ccode\u003epalette\u003c/code\u003e unsurprisingly is the name of our color palette, and \u003ccode\u003esemanticName\u003c/code\u003e is the name of the color we\u0026#39;re pulling out of it, such as \u003ccode\u003eprimary\u003c/code\u003e, \u003ccode\u003esecondary\u003c/code\u003e, or \u003ccode\u003ebackground-main\u003c/code\u003e. Combining the two with a \u003ccode\u003e/\u003c/code\u003e, we\u0026#39;ll get the \u003ccode\u003eprimary\u003c/code\u003e, \u003ccode\u003esecondary\u003c/code\u003e, or \u003ccode\u003ebackground-main\u003c/code\u003e color from our current palette. All that\u0026#39;s left is to define the palettes we\u0026#39;ll be constructing.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e spring \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Spring\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e summer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Summer\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e autumn \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Autumn\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e winter \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Winter\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e day \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Day\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e dusk \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Dusk\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e night \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ename\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Night\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eConstructing palettes is pretty easy. All you have to do is instantiate a \u003ccode\u003eColor.Palette\u003c/code\u003e object with a name. That name must match the folder name, so in my app the palette name for \u003ccode\u003eNight\u003c/code\u003e will be \u003ccode\u003eNight\u003c/code\u003e because the folder we chose for that palete was \u003ccode\u003e\u0026#34;Night\u0026#34;\u003c/code\u003e.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eNow that we have a color palette created, we should probably start using it. If you\u0026#39;re using UIKit you\u0026#39;ll likely have built your palette atop \u003ccode\u003eUIColor\u003c/code\u003e instead of \u003ccode\u003eColor\u003c/code\u003e and used \u003ccode\u003e.palette.primaryText\u003c/code\u003e wherever a \u003ccode\u003eUIColor\u003c/code\u003e is expected.\u003c/p\u003e\n\u003cp\u003eBut if we\u0026#39;re building our app in SwiftUI, we can go the extra mile with just a few lines of code to leverage the \u003ccode\u003eEnvironment\u003c/code\u003e, making our palette easily accessible and SwiftUI-friendly.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eColorPaletteKey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eEnvironmentKey\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// We need to default to a palette so without any particular preference let\u0026#39;s pick `day`\u003c/span\u003e\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e defaultValue \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eday\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eEnvironmentValues\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e preferredColorPalette\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePalette\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eColorPaletteKey\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n        \u003cspan\u003eset\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n            \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eColorPaletteKey\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e newValue\n        \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis creates the \u003ccode\u003epreferredColorPalette\u003c/code\u003e property in our \u003ccode\u003eEnvironment\u003c/code\u003e. If you\u0026#39;re not sure how the \u003ccode\u003eEnvironment\u003c/code\u003e works there are a lot of great resources on the internet like \u003ca href=\"https://useyourloaf.com/blog/swiftui-custom-environment-values/\"\u003ethis post by Keith Harrison\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eHeaderView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n\t\u003cspan\u003e@Environment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003epreferredColorPalette\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e palette\n\n\t\u003cspan\u003evar\u003c/span\u003e body\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\t\t\u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\t\t\t\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforegroundColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003epalette\u003cspan\u003e.\u003c/span\u003eprimaryText\u003cspan\u003e)\u003c/span\u003e\n\t\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow accessing our colors is a nothing more than two lines of code, how slick is that?\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eHope I didn\u0026#39;t wear you out, there\u0026#39;s a lot here, but when you throw it into Xcode you\u0026#39;ll see that it\u0026#39;s pretty easy to digest. After a few iterations I\u0026#39;m really happy with this solution and have been using it in my personal apps for a while now. It allows us to easily add or change colors, have a visual representation of our colors, with minimal code, and a pretty slick API.\u003c/p\u003e\n\u003cp\u003eBut no code is perfect (except for \u003ca href=\"https://en.wikipedia.org/wiki/Merge_sort\"\u003emergesort\u003c/a\u003e), so I\u0026#39;m always looking for improvements. I\u0026#39;m excited to hear your thoughts or \u003ca href=\"https://twitter.com/mergesort\"\u003esuggestions\u003c/a\u003e, so don\u0026#39;t be shy about reaching out.\u003c/p\u003e\u003c/div\u003e\u003cp\u003eJoe Fabisevich is an indie developer creating software at \u003ca href=\"https://redpanda.club\"\u003eRed Panda Club Inc.\u003c/a\u003e while writing about design, development, and building a company. Formerly an iOS developer working on societal issues \u003ca href=\"https://threads.net/mergesort\"\u003e@Twitter\u003c/a\u003e. These days I don\u0026#39;t tweet, but I do post on \u003ca href=\"https://threads.net/mergesort\"\u003eThreads\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLike my writing? You can keep up with it in your favorite \u003ca href=\"https://fabisevi.ch/feed.xml\"\u003eRSS\u003c/a\u003e reader, or get posts \u003ca href=\"https://mailchi.mp/3237be1819ae/fabisevich-blog-posts\"\u003eemailed\u003c/a\u003e in newsletter form. I promise to never spam you or send you anything other than my posts, it\u0026#39;s just a way for you to read my writing wherever\u0026#39;s most comfortable for you.\u003c/p\u003e\u003cp\u003eIf you\u0026#39;d like to know more, wanna talk, or need some advice, feel free to sign up for \u003ca href=\"https://cal.com/mergesort/office-hours\"\u003eoffice hours\u003c/a\u003e, I\u0026#39;m very friendly. ðŸ™‚\u003c/p\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
