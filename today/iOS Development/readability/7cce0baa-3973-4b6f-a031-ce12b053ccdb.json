{
  "id": "7cce0baa-3973-4b6f-a031-ce12b053ccdb",
  "title": "How to keep Date’s microseconds precision in Swift",
  "link": "https://augmentedcode.io/2024/09/23/how-to-keep-dates-microseconds-precision-in-swift/",
  "description": "DateFormatter is used for converting string representation of date and time to a Date type and visa-versa. Something to be aware of is that the conversion loses microseconds precision. This is extremely important if we use these Date values for sorting and therefore ending up with incorrect order. Let’s consider an iOS app which uses […]",
  "author": "Toomas Vahter",
  "published": "Mon, 23 Sep 2024 15:00:00 +0000",
  "source": "https://augmentedcode.io/feed/",
  "categories": [
    "Foundation",
    "iOS",
    "Swift",
    "ISO8601DateFormatter"
  ],
  "byline": "",
  "length": 5410,
  "excerpt": "DateFormatter is used for converting string representation of date and time to a Date type and visa-versa. Something to be aware of is that the conversion loses microseconds precision. This is extr…",
  "siteName": "Augmented Code",
  "favicon": "https://augmentedcode.io/wp-content/uploads/2017/11/site-icon.png?w=192",
  "text": "DateFormatter is used for converting string representation of date and time to a Date type and visa-versa. Something to be aware of is that the conversion loses microseconds precision. This is extremely important if we use these Date values for sorting and therefore ending up with incorrect order. Let’s consider an iOS app which uses API for fetching a list of items and each of the item contains a timestamp used for sorting the list. Often, these timestamps have the ISO8601 format like 2024-09-21T10:32:32.113123Z. Foundation framework has a dedicated formatter for parsing these strings: ISO8601DateFormatter. It is simple to use: This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters Great, but there is on caveat, it ignores microseconds. Fortunately this can be fixed by manually parsing microseconds and adding the missing precision to the converted Date value. Here is an example, how to do this using an extension. This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters extension ISO8601DateFormatter { func microsecondsDate(from dateString: String) -\u003e Date? { guard let millisecondsDate = date(from: dateString) else { return nil } guard let fractionIndex = dateString.lastIndex(of: \".\") else { return millisecondsDate } guard let tzIndex = dateString.lastIndex(of: \"Z\") else { return millisecondsDate } guard let startIndex = dateString.index(fractionIndex, offsetBy: 4, limitedBy: tzIndex) else { return millisecondsDate } // Pad the missing zeros at the end and cut off nanoseconds let microsecondsString = dateString[startIndex..\u003ctzIndex].padding(toLength: 3, withPad: \"0\", startingAt: 0) guard let microseconds = TimeInterval(microsecondsString) else { return millisecondsDate } return Date(timeIntervalSince1970: millisecondsDate.timeIntervalSince1970 + microseconds / 1_000_000.0) } } That this code does is first converting the string using the original date(from:) method, followed by manually extracting digits for microseconds by handling cases where there are less than 3 digits or event there are nanoseconds present. Lastly a new Date value is created with the microseconds precision. Here are examples of the output (note that float’s precision comes into play). This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters let dateStrings = [ \"2024-09-21T10:32:32.113Z\", \"2024-09-21T10:32:32.1131Z\", \"2024-09-21T10:32:32.11312Z\", \"2024-09-21T10:32:32.113123Z\", \"2024-09-21T10:32:32.1131234Z\", \"2024-09-21T10:32:32.11312345Z\", \"2024-09-21T10:32:32.113123456Z\" ] let dates = dateStrings.compactMap(formatter.microsecondsDate(from:)) for (string, date) in zip(dateStrings, dates) { print(string, \"-\u003e\", date.timeIntervalSince1970) } /* 2024-09-21T10:32:32.113Z -\u003e 1726914752.113 2024-09-21T10:32:32.1131Z -\u003e 1726914752.1130998 2024-09-21T10:32:32.11312Z -\u003e 1726914752.1131198 2024-09-21T10:32:32.113123Z -\u003e 1726914752.113123 2024-09-21T10:32:32.1131234Z -\u003e 1726914752.113123 2024-09-21T10:32:32.11312345Z -\u003e 1726914752.113123 2024-09-21T10:32:32.113123456Z -\u003e 1726914752.113123 */ If this was helpful, please let me know on Mastodon@toomasvahter or Twitter @toomasvahter. Feel free to subscribe to RSS feed. Thank you for reading. Tags iOS, ISO8601DateFormatter, Swift",
  "image": "https://augmentedcode.io/wp-content/uploads/2017/11/site-icon.png?w=200",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"site-content\" role=\"main\"\u003e\n\n\t\n\u003carticle id=\"post-3772\"\u003e\n\n\t\n\n\n\t\u003cdiv\u003e\n\n\t\t\t\n\u003cp\u003eDateFormatter is used for converting string representation of date and time to a Date type and visa-versa. Something to be aware of is that the conversion loses microseconds precision. This is extremely important if we use these Date values for sorting and therefore ending up with incorrect order. Let’s consider an iOS app which uses API for fetching a list of items and each of the item contains a timestamp used for sorting the list. Often, these timestamps have the ISO8601 format like \u003ccode\u003e2024-09-21T10:32:32.113123Z\u003c/code\u003e. Foundation framework has a dedicated formatter for parsing these strings: \u003ca href=\"https://developer.apple.com/documentation/foundation/iso8601dateformatter\"\u003eISO8601DateFormatter\u003c/a\u003e. It is simple to use:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cdiv itemprop=\"text\" id=\"gist132852922\" translate=\"no\" data-color-mode=\"light\" data-light-theme=\"light\"\u003e\n\n  \u003ctemplate\u003e\n  \u003cdiv data-view-component=\"true\"\u003e\n  \n    \u003cp\u003e\u003cspan\u003e\n      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.\n      \u003ca href=\"https://github.co/hiddenchars\" target=\"_blank\"\u003eLearn more about bidirectional Unicode characters\u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\u003c/template\u003e\n\u003ctemplate\u003e\n  \u003cspan aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\"\u003e\n    \n\u003c/span\u003e\u003c/template\u003e\n\n  \n\u003c/div\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eGreat, but there is on caveat, it ignores microseconds. Fortunately this can be fixed by manually parsing microseconds and adding the missing precision to the converted Date value. Here is an example, how to do this using an extension.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cdiv itemprop=\"text\" id=\"gist132852960\" translate=\"no\" data-color-mode=\"light\" data-light-theme=\"light\"\u003e\n\n  \u003ctemplate\u003e\n  \u003cdiv data-view-component=\"true\"\u003e\n  \n    \u003cp\u003e\u003cspan\u003e\n      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.\n      \u003ca href=\"https://github.co/hiddenchars\" target=\"_blank\"\u003eLearn more about bidirectional Unicode characters\u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\u003c/template\u003e\n\u003ctemplate\u003e\n  \u003cspan aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\"\u003e\n    \n\u003c/span\u003e\u003c/template\u003e\n\n  \u003ctable data-hpc=\"\" data-tab-size=\"8\" data-paste-markdown-skip=\"\" data-tagsearch-lang=\"Swift\" data-tagsearch-path=\"ISO8601.swift\"\u003e\n        \u003ctbody\u003e\u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L1\" data-line-number=\"1\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC1\"\u003eextension ISO8601DateFormatter {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L2\" data-line-number=\"2\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC2\"\u003e  func microsecondsDate(from dateString: String) -\u0026gt; Date? {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L3\" data-line-number=\"3\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC3\"\u003e    guard let millisecondsDate = date(from: dateString) else { return nil }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L4\" data-line-number=\"4\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC4\"\u003e    guard let fractionIndex = dateString.lastIndex(of: \u0026#34;.\u0026#34;) else { return millisecondsDate }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L5\" data-line-number=\"5\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC5\"\u003e    guard let tzIndex = dateString.lastIndex(of: \u0026#34;Z\u0026#34;) else { return millisecondsDate }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L6\" data-line-number=\"6\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC6\"\u003e    guard let startIndex = dateString.index(fractionIndex, offsetBy: 4, limitedBy: tzIndex) else { return millisecondsDate }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L7\" data-line-number=\"7\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC7\"\u003e    // Pad the missing zeros at the end and cut off nanoseconds\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L8\" data-line-number=\"8\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC8\"\u003e    let microsecondsString = dateString[startIndex..\u0026lt;tzIndex].padding(toLength: 3, withPad: \u0026#34;0\u0026#34;, startingAt: 0)\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L9\" data-line-number=\"9\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC9\"\u003e    guard let microseconds = TimeInterval(microsecondsString) else { return millisecondsDate }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L10\" data-line-number=\"10\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC10\"\u003e    return Date(timeIntervalSince1970: millisecondsDate.timeIntervalSince1970 + microseconds / 1_000_000.0)\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L11\" data-line-number=\"11\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC11\"\u003e  }\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L12\" data-line-number=\"12\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC12\"\u003e}\u003c/td\u003e\n        \u003c/tr\u003e\n  \u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThat this code does is first converting the string using the original date(from:) method, followed by manually extracting digits for microseconds by handling cases where there are less than 3 digits or event there are nanoseconds present. Lastly a new Date value is created with the microseconds precision. Here are examples of the output (note that float’s precision comes into play).\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cdiv itemprop=\"text\" id=\"gist132852990\" translate=\"no\" data-color-mode=\"light\" data-light-theme=\"light\"\u003e\n\n  \u003ctemplate\u003e\n  \u003cdiv data-view-component=\"true\"\u003e\n  \n    \u003cp\u003e\u003cspan\u003e\n      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.\n      \u003ca href=\"https://github.co/hiddenchars\" target=\"_blank\"\u003eLearn more about bidirectional Unicode characters\u003c/a\u003e\n    \u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\u003c/template\u003e\n\u003ctemplate\u003e\n  \u003cspan aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\"\u003e\n    \n\u003c/span\u003e\u003c/template\u003e\n\n  \u003ctable data-hpc=\"\" data-tab-size=\"8\" data-paste-markdown-skip=\"\" data-tagsearch-lang=\"Swift\" data-tagsearch-path=\"ISO8601.swift\"\u003e\n        \u003ctbody\u003e\u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L1\" data-line-number=\"1\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC1\"\u003elet dateStrings = [\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L2\" data-line-number=\"2\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC2\"\u003e  \u0026#34;2024-09-21T10:32:32.113Z\u0026#34;,\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L3\" data-line-number=\"3\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC3\"\u003e  \u0026#34;2024-09-21T10:32:32.1131Z\u0026#34;,\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L4\" data-line-number=\"4\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC4\"\u003e  \u0026#34;2024-09-21T10:32:32.11312Z\u0026#34;,\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L5\" data-line-number=\"5\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC5\"\u003e  \u0026#34;2024-09-21T10:32:32.113123Z\u0026#34;,\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L6\" data-line-number=\"6\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC6\"\u003e  \u0026#34;2024-09-21T10:32:32.1131234Z\u0026#34;,\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L7\" data-line-number=\"7\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC7\"\u003e  \u0026#34;2024-09-21T10:32:32.11312345Z\u0026#34;,\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L8\" data-line-number=\"8\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC8\"\u003e  \u0026#34;2024-09-21T10:32:32.113123456Z\u0026#34;\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L9\" data-line-number=\"9\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC9\"\u003e]\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L10\" data-line-number=\"10\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC10\"\u003elet dates = dateStrings.compactMap(formatter.microsecondsDate(from:))\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L11\" data-line-number=\"11\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC11\"\u003efor (string, date) in zip(dateStrings, dates) {\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L12\" data-line-number=\"12\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC12\"\u003e  print(string, \u0026#34;-\u0026gt;\u0026#34;, date.timeIntervalSince1970)\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L13\" data-line-number=\"13\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC13\"\u003e}\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L14\" data-line-number=\"14\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC14\"\u003e/*\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L15\" data-line-number=\"15\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC15\"\u003e2024-09-21T10:32:32.113Z -\u0026gt; 1726914752.113\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L16\" data-line-number=\"16\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC16\"\u003e2024-09-21T10:32:32.1131Z -\u0026gt; 1726914752.1130998\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L17\" data-line-number=\"17\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC17\"\u003e2024-09-21T10:32:32.11312Z -\u0026gt; 1726914752.1131198\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L18\" data-line-number=\"18\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC18\"\u003e2024-09-21T10:32:32.113123Z -\u0026gt; 1726914752.113123\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L19\" data-line-number=\"19\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC19\"\u003e2024-09-21T10:32:32.1131234Z -\u0026gt; 1726914752.113123\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L20\" data-line-number=\"20\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC20\"\u003e2024-09-21T10:32:32.11312345Z -\u0026gt; 1726914752.113123\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L21\" data-line-number=\"21\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC21\"\u003e2024-09-21T10:32:32.113123456Z -\u0026gt; 1726914752.113123\u003c/td\u003e\n        \u003c/tr\u003e\n        \u003ctr\u003e\n          \u003ctd id=\"file-iso8601-swift-L22\" data-line-number=\"22\"\u003e\u003c/td\u003e\n          \u003ctd id=\"file-iso8601-swift-LC22\"\u003e*/\u003c/td\u003e\n        \u003c/tr\u003e\n  \u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf this was helpful, please let me know on \u003ca href=\"https://mastodon.social/@toomasvahter\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eMastodon@toomasvahter\u003c/a\u003e or \u003ca rel=\"noreferrer noopener\" href=\"https://twitter.com/toomasvahter\" target=\"_blank\"\u003eTwitter @toomasvahter\u003c/a\u003e. Feel free to subscribe to \u003ca rel=\"noreferrer noopener\" aria-label=\"RSS feed (opens in a new tab)\" href=\"https://augmentedcode.io/blog/feed/\" target=\"_blank\"\u003eRSS feed\u003c/a\u003e. Thank you for reading.\u003c/p\u003e\n\n\n\n\n\n\n\n\n\n\t\t\t\n\t\t\t\n\t\t\u003c/div\u003e\n\n\t\u003cdiv\u003e\n\n\t\t\t\u003cul\u003e\n\n\t\t\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\t\u003cspan\u003e\n\t\t\t\t\t\t\t\u003cspan\u003e\n\t\t\t\t\t\t\t\tTags\t\t\t\t\t\t\t\u003c/span\u003e\n\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/span\u003e\n\t\t\t\t\t\t\u003cspan\u003e\n\t\t\t\t\t\t\t\u003ca href=\"https://augmentedcode.io/tag/ios/\" rel=\"tag\"\u003eiOS\u003c/a\u003e, \u003ca href=\"https://augmentedcode.io/tag/iso8601dateformatter/\" rel=\"tag\"\u003eISO8601DateFormatter\u003c/a\u003e, \u003ca href=\"https://augmentedcode.io/tag/swift/\" rel=\"tag\"\u003eSwift\u003c/a\u003e\t\t\t\t\t\t\u003c/span\u003e\n\t\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\n\t\t\t\u003c/ul\u003e\n\n\t\t\u003c/div\u003e\n\n\t\n\t\n\n\t\n\u003c/article\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-09-23T15:00:00Z",
  "modifiedTime": "2024-09-22T10:45:31Z"
}
