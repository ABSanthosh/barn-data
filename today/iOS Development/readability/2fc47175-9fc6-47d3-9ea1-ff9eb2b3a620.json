{
  "id": "2fc47175-9fc6-47d3-9ea1-ff9eb2b3a620",
  "title": "Currency TextField in SwiftUI",
  "link": "https://benoitpasquier.com/currency-textfield-in-swiftui/",
  "description": "Between banking and crypto apps, it’s quite often we interact with currency inputs on daily basis. If creating a localized UITextField can already be tricky in UIKit, I was wondering how hard it would be to do a similar one in SwiftUI. Let’s see today how to create a localized currency TextField in SwiftUI.",
  "author": "",
  "published": "Thu, 04 Nov 2021 06:00:00 +0000",
  "source": "https://benoitpasquier.com/index.xml",
  "categories": null,
  "byline": "Benoit Pasquier",
  "length": 11763,
  "excerpt": "Between banking and crypto apps, it’s quite often we interact with currency inputs on daily basis. If creating a localized UITextField can already be tricky in UIKit, I was wondering how hard it would be to do a similar one in SwiftUI. Let’s see today how to create a localized currency TextField in SwiftUI.",
  "siteName": "Benoit Pasquier",
  "favicon": "https://benoitpasquier.com/favicon.png",
  "text": "November 4, 2021 in Swift Between banking and crypto apps, it’s quite often we interact with currency inputs on daily basis. If creating a localized UITextField can already be tricky in UIKit, I was wondering how hard it would be to do a similar one in SwiftUI. Let’s see today how to create a localized currency TextField in SwiftUI. This post is based on Xcode 12.5.1 Few days ago, I was using a local banking app and noticed their field to send money was quite nice. The field behaved like a payment terminal, typing from right to left and shifting digits along. That makes the experience really easy rather than just a free field prompt to validation error. I was wondering if something similar was doable in SwiftUI. Here is the goal. Ideally the field would support localization and reformat the currency based on the region. Contrary to my first thoughts, it happened to be really simple to use TextField for a localized field. SwiftUI TextField With TextField, Apple made it really easy to pass a formatter. Lucky enough, NumberFormatter is one of them. It is a really handy one when it comes to manipulating numbers, and it supports currency. import SwiftUI struct ContentView: View { @State private var value = 0 private let numberFormatter: NumberFormatter init() { numberFormatter = NumberFormatter() numberFormatter.numberStyle = .currency numberFormatter.maximumFractionDigits = 2 } var body: some View { VStack() { TextField(\"$0.00\", value: $value, formatter: numberFormatter) .textFieldStyle(RoundedBorderTextFieldStyle()) .keyboardType(.numberPad) } } } So far so good!. The formatter does the heavy lifting deep down into the TextField. However the experience isn’t completely there. For once, it’s a bit blurry what is the placeholder or the default value used. Also, since the value includes the currency symbol, it is available to edition. It would be great to be ignored from the edition: the user would only change the amount without the possibility to remove the symbol. The behaviors of the TextField is also a bit more limited that UIKit allows to. For instance, how to remove the cursor or the focus on conditions. Finally, capturing the latest value isn’t straightforward either: in iOS15, Apple introduced onSubmit(of:_:) but we don’t have similar for previous versions. It seems there is no choice but to bridge back from UIKit and expose it to SwiftUI. Currency UITextField First thing is to create a custom UITextField that will be exposed later on to SwiftUI. The goal is still to make it localizable so it should support NumberFormatter as well. I also want to support a binding value to pass back like other SwiftUI TextField does. import UIKit class CurrencyUITextField: UITextField { @Binding private var value: Int private let formatter: NumberFormatter init(formatter: NumberFormatterProtocol, value: Binding\u003cInt\u003e) { self.formatter = formatter self._value = value super.init(frame: .zero) } required init?(coder: NSCoder) { fatalError(\"init(coder:) has not been implemented\") } } The rest of this custom view will be to style it and to manipulate it the value for an observable value. The manipulation is multitude transformation from a type to another to get the expected behaviors of “pushing” number from the right, like a terminal would do: For any new number tapped, we get get a Decimal representation from the value (ignoring the symbol) Transforming to the right digit format based on the formatter and its number of fraction digits Transforming back to a string with the symbol in it again. The same way, when removing a digit, we want to shift all the others left to right. import UIKit class CurrencyUITextField: UITextField { @Binding private var value: Int private let formatter: NumberFormatter init(formatter: NumberFormatter, value: Binding\u003cInt\u003e) { self.formatter = formatter self._value = value super.init(frame: .zero) setupViews() } required init?(coder: NSCoder) { fatalError(\"init(coder:) has not been implemented\") } override func willMove(toSuperview newSuperview: UIView?) { addTarget(self, action: #selector(editingChanged), for: .editingChanged) addTarget(self, action: #selector(resetSelection), for: .allTouchEvents) keyboardType = .numberPad textAlignment = .right sendActions(for: .editingChanged) } override func deleteBackward() { text = textValue.digits.dropLast().string sendActions(for: .editingChanged) } private func setupViews() { tintColor = .clear font = .systemFont(ofSize: 40, weight: .regular) } @objc private func editingChanged() { text = currency(from: decimal) resetSelection() value = Int(doubleValue * 100) } @objc private func resetSelection() { selectedTextRange = textRange(from: endOfDocument, to: endOfDocument) } private var textValue: String { return text ?? \"\" } private var doubleValue: Double { return (decimal as NSDecimalNumber).doubleValue } private var decimal: Decimal { return textValue.decimal / pow(10, formatter.maximumFractionDigits) } private func currency(from decimal: Decimal) -\u003e String { return formatter.string(for: decimal) ?? \"\" } } extension StringProtocol where Self: RangeReplaceableCollection { var digits: Self { filter (\\.isWholeNumber) } } extension String { var decimal: Decimal { Decimal(string: digits) ?? 0 } } extension LosslessStringConvertible { var string: String { .init(self) } } The view is ready, I just need to bring it to SwiftUI. import SwiftUI struct CurrencyTextField: UIViewRepresentable { typealias UIViewType = CurrencyUITextField let numberFormatter: NumberFormatter let currencyField: CurrencyUITextField init(numberFormatter: NumberFormatter, value: Binding\u003cInt\u003e) { self.numberFormatter = numberFormatter currencyField = CurrencyUITextField(formatter: numberFormatter, value: value) } func makeUIView(context: Context) -\u003e CurrencyUITextField { return currencyField } func updateUIView(_ uiView: CurrencyUITextField, context: Context) { } } This is pretty simple, I only make sure the view is created once for time being. Back to SwiftUI view, let’s see how it goes. struct ContentView: View { @State private var isSubtitleHidden = false @State private var value = 0 private var numberFormatter: NumberFormatter init(numberFormatter: NumberFormatter = NumberFormatter()) { self.numberFormatter = numberFormatter self.numberFormatter.numberStyle = .currency self.numberFormatter.maximumFractionDigits = 2 } var body: some View { VStack(spacing: 20) { Text(\"Send money\") .font(.title) CurrencyTextField(numberFormatter: numberFormatter, value: $value) .padding(20) .overlay(RoundedRectangle(cornerRadius: 16) .stroke(Color.gray.opacity(0.3), lineWidth: 2)) .frame(height: 100) Rectangle() .frame(width: 0, height: 40) Text(\"Send\") .fontWeight(.bold) .padding(30) .frame(width: 180, height: 50) .background(Color.yellow) .cornerRadius(20) .onTapGesture { if !isSubtitleHidden { isSubtitleHidden.toggle() } } if isSubtitleHidden { Text(\"Sending \\(value)\") } Spacer() } .padding(.top, 60) .padding(.horizontal, 20) } } Most currency transfers and payment handle amount at the fraction level. It means that $12.34 would be represented as 1234 so I kept my binding value the same way. Here is how it looks One thing I haven’t got chance to test is localization. Thing is environment variable locale doesn’t seem to apply to formatters during preview without a small effort. So, similar to what I did in the past for DateFormatter, I created a protocol and preview type to make it work. protocol NumberFormatterProtocol: AnyObject { func string(from number: NSNumber) -\u003e String? func string(for obj: Any?) -\u003e String? var numberStyle: NumberFormatter.Style { get set } var maximumFractionDigits: Int { get set } } extension NumberFormatter: NumberFormatterProtocol { } class PreviewNumberFormatter: NumberFormatterProtocol { let numberFormatter: NumberFormatter init(locale: Locale) { numberFormatter = NumberFormatter() numberFormatter.locale = locale } var numberStyle: NumberFormatter.Style { get { return numberFormatter.numberStyle } set { numberFormatter.numberStyle = newValue } } var maximumFractionDigits: Int { get { return numberFormatter.maximumFractionDigits } set { numberFormatter.maximumFractionDigits = newValue } } func string(from number: NSNumber) -\u003e String? { return numberFormatter.string(from: number) } func string(for obj: Any?) -\u003e String? { numberFormatter.string(for: obj) } } I can now update the view accordingly and preview any specific region without launching the app or editing the current scheme. struct ContentView: View { @State private var isSubtitleHidden = false @State private var value = 0 private var numberFormatter: NumberFormatterProtocol init(numberFormatter: NumberFormatterProtocol = NumberFormatter()) { self.numberFormatter = numberFormatter ... } ... } struct ContentView_Previews: PreviewProvider { static var previews: some View { ContentView(numberFormatter: PreviewNumberFormatter(locale: Locale(identifier: \"fr_FR\")) ) } } Testing for French region and language, we can get into EUR: Before concluding this post, here are few things to note. If the custom view has the feeling I was looking for, it required to set the style and observers within the view itself. Those aren’t exposed to SwiftUI, so it would require to create few ViewModifier to make things right. The currency manipulation has also been inspired by a similar question asked on StackOverflow. It works decently in this demo, but I would be careful using it into production, transforming String to Decimal to then Double can expose you to rounded numbers (or too accurate like 10.1999999) and give you an approximative output. In conclusion, even though the default TextField in SwiftUI is a great place to start to handle currency inputs, I had to bridge back from UIKit to get a more complete experience for what I was looking for. I feel TextField have still few gaps in SwiftUI like UITextFieldDelegate and few observers that UIKit has that are key for a more advance experience. That being said, as always, each project is different and might require a special touch to make things right, bridging views from UIKit shouldn’t be the default solution to all problems. This code is available on Github. Happy coding",
  "image": "https://benoitpasquier.com/images/2021/11/currency-preview.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n  \n    \n  \n  \n  \u003cp\u003e\u003ctime itemprop=\"datePublished\" datetime=\"2021-11-04T06:00:00Z\"\u003e\n        \n  November 4, 2021\n\n      \u003c/time\u003e\n    \n    \n  \n  \n    \u003cspan\u003ein\u003c/span\u003e\n    \n      \u003ca href=\"https://benoitpasquier.com/categories/swift\"\u003eSwift\u003c/a\u003e\n    \n  \n\n  \u003c/p\u003e\n\n\u003c/div\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n              \u003cp\u003eBetween banking and crypto apps, it’s quite often we interact with currency inputs on daily basis. If creating a localized \u003ccode\u003eUITextField\u003c/code\u003e can already be tricky in UIKit, I was wondering how hard it would be to do a similar one in SwiftUI. Let’s see today how to create a localized currency \u003ccode\u003eTextField\u003c/code\u003e in SwiftUI.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThis post is based on Xcode 12.5.1\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eFew days ago, I was using a local banking app and noticed their field to send money was quite nice. The field behaved like a payment terminal, typing from right to left and shifting digits along. That makes the experience really easy rather than just a free field prompt to validation error. I was wondering if something similar was doable in SwiftUI.\u003c/p\u003e\n\u003cp\u003eHere is the goal.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://benoitpasquier.com/images/2021/11/currency-textfield.png\" alt=\"currency-textfield\"/\u003e\u003c/p\u003e\n\u003cp\u003eIdeally the field would support localization and reformat the currency based on the region. Contrary to my first thoughts, it happened to be really simple to use \u003ccode\u003eTextField\u003c/code\u003e for a localized field.\u003c/p\u003e\n\u003ch2 id=\"swiftui-textfield\"\u003eSwiftUI TextField\u003c/h2\u003e\n\u003cp\u003eWith \u003ccode\u003eTextField\u003c/code\u003e, Apple made it really easy to pass a formatter. Lucky enough, \u003ccode\u003eNumberFormatter\u003c/code\u003e  is one of them. It is a really handy one when it comes to manipulating numbers, and it supports currency.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eSwiftUI\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eContentView\u003c/span\u003e: \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  @\u003cspan\u003eState\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e = \u003cspan\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003enumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003enumberFormatter\u003c/span\u003e = \u003cspan\u003eNumberFormatter\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003enumberStyle\u003c/span\u003e = .\u003cspan\u003ecurrency\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003emaximumFractionDigits\u003c/span\u003e = \u003cspan\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e: \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eVStack\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eTextField\u003c/span\u003e(\u003cspan\u003e\u0026#34;$0.00\u0026#34;\u003c/span\u003e, \u003cspan\u003evalue\u003c/span\u003e: \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e, \u003cspan\u003eformatter\u003c/span\u003e: \u003cspan\u003enumberFormatter\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003etextFieldStyle\u003c/span\u003e(\u003cspan\u003eRoundedBorderTextFieldStyle\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003ekeyboardType\u003c/span\u003e(.\u003cspan\u003enumberPad\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo far so good!. The formatter does the heavy lifting deep down into the \u003ccode\u003eTextField\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHowever the experience isn’t completely there.\u003c/p\u003e\n\u003cp\u003eFor once, it’s a bit blurry what is the placeholder or the default value used. Also, since the value includes the currency symbol, it is available to edition. It would be great to be ignored from the edition: the user would only change the amount without the possibility to remove the symbol.\u003c/p\u003e\n\u003cp\u003eThe behaviors of the \u003ccode\u003eTextField\u003c/code\u003e is also a bit more limited that UIKit allows to. For instance, how to remove the cursor or the focus on conditions.\u003c/p\u003e\n\u003cp\u003eFinally, capturing the latest value isn’t straightforward either: in iOS15, Apple introduced \u003ca href=\"https://developer.apple.com/documentation/swiftui/form/onsubmit(of:_:)\"\u003eonSubmit(of:_:)\u003c/a\u003e but we don’t have similar for previous versions.\u003c/p\u003e\n\u003cp\u003eIt seems there is no choice but to bridge back from UIKit and expose it to SwiftUI.\u003c/p\u003e\n\u003ch2 id=\"currency-uitextfield\"\u003eCurrency UITextField\u003c/h2\u003e\n\u003cp\u003eFirst thing is to create a custom \u003ccode\u003eUITextField\u003c/code\u003e that will be exposed later on to SwiftUI. The goal is still to make it localizable so it should support \u003ccode\u003eNumberFormatter\u003c/code\u003e as well.\u003c/p\u003e\n\u003cp\u003eI also want to support a binding value to pass back like other SwiftUI \u003ccode\u003eTextField\u003c/code\u003e does.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eUIKit\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCurrencyUITextField\u003c/span\u003e: \u003cspan\u003eUITextField\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eBinding\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e: \u003cspan\u003eInt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eformatter\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e(\u003cspan\u003eformatter\u003c/span\u003e: \u003cspan\u003eNumberFormatterProtocol\u003c/span\u003e, \u003cspan\u003evalue\u003c/span\u003e: \u003cspan\u003eBinding\u003c/span\u003e\u0026lt;\u003cspan\u003eInt\u003c/span\u003e\u0026gt;) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003eformatter\u003c/span\u003e = \u003cspan\u003eformatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003e_value\u003c/span\u003e = \u003cspan\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003esuper\u003c/span\u003e.\u003cspan\u003einit\u003c/span\u003e(\u003cspan\u003eframe\u003c/span\u003e: .\u003cspan\u003ezero\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003erequired\u003c/span\u003e \u003cspan\u003einit\u003c/span\u003e?(\u003cspan\u003ecoder\u003c/span\u003e: \u003cspan\u003eNSCoder\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003efatalError\u003c/span\u003e(\u003cspan\u003e\u0026#34;init(coder:) has not been implemented\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe rest of this custom view will be to style it and to manipulate it the value for an observable value.\u003c/p\u003e\n\u003cp\u003eThe manipulation is multitude transformation from a type to another to get the expected behaviors of “pushing” number from the right, like a terminal would do:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor any new number tapped, we get get a \u003ccode\u003eDecimal\u003c/code\u003e representation from the value (ignoring the symbol)\u003c/li\u003e\n\u003cli\u003eTransforming to the right digit format based on the formatter and its number of fraction digits\u003c/li\u003e\n\u003cli\u003eTransforming back to a string with the symbol in it again.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe same way, when removing a digit, we want to shift all the others left to right.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eUIKit\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eCurrencyUITextField\u003c/span\u003e: \u003cspan\u003eUITextField\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eBinding\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e: \u003cspan\u003eInt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eformatter\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e(\u003cspan\u003eformatter\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e, \u003cspan\u003evalue\u003c/span\u003e: \u003cspan\u003eBinding\u003c/span\u003e\u0026lt;\u003cspan\u003eInt\u003c/span\u003e\u0026gt;) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003eformatter\u003c/span\u003e = \u003cspan\u003eformatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003e_value\u003c/span\u003e = \u003cspan\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003esuper\u003c/span\u003e.\u003cspan\u003einit\u003c/span\u003e(\u003cspan\u003eframe\u003c/span\u003e: .\u003cspan\u003ezero\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003esetupViews\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003erequired\u003c/span\u003e \u003cspan\u003einit\u003c/span\u003e?(\u003cspan\u003ecoder\u003c/span\u003e: \u003cspan\u003eNSCoder\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003efatalError\u003c/span\u003e(\u003cspan\u003e\u0026#34;init(coder:) has not been implemented\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ewillMove\u003c/span\u003e(\u003cspan\u003etoSuperview\u003c/span\u003e \u003cspan\u003enewSuperview\u003c/span\u003e: \u003cspan\u003eUIView\u003c/span\u003e?) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eaddTarget\u003c/span\u003e(\u003cspan\u003eself\u003c/span\u003e, \u003cspan\u003eaction\u003c/span\u003e: \u003cspan\u003e#selector\u003c/span\u003e(\u003cspan\u003eeditingChanged\u003c/span\u003e), \u003cspan\u003efor\u003c/span\u003e: .\u003cspan\u003eeditingChanged\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eaddTarget\u003c/span\u003e(\u003cspan\u003eself\u003c/span\u003e, \u003cspan\u003eaction\u003c/span\u003e: \u003cspan\u003e#selector\u003c/span\u003e(\u003cspan\u003eresetSelection\u003c/span\u003e), \u003cspan\u003efor\u003c/span\u003e: .\u003cspan\u003eallTouchEvents\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ekeyboardType\u003c/span\u003e = .\u003cspan\u003enumberPad\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003etextAlignment\u003c/span\u003e = .\u003cspan\u003eright\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003esendActions\u003c/span\u003e(\u003cspan\u003efor\u003c/span\u003e: .\u003cspan\u003eeditingChanged\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003edeleteBackward\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003etext\u003c/span\u003e = \u003cspan\u003etextValue\u003c/span\u003e.\u003cspan\u003edigits\u003c/span\u003e.\u003cspan\u003edropLast\u003c/span\u003e().\u003cspan\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003esendActions\u003c/span\u003e(\u003cspan\u003efor\u003c/span\u003e: .\u003cspan\u003eeditingChanged\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003esetupViews\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003etintColor\u003c/span\u003e = .\u003cspan\u003eclear\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003efont\u003c/span\u003e = .\u003cspan\u003esystemFont\u003c/span\u003e(\u003cspan\u003eofSize\u003c/span\u003e: \u003cspan\u003e40\u003c/span\u003e, \u003cspan\u003eweight\u003c/span\u003e: .\u003cspan\u003eregular\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e@objc\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eeditingChanged\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003etext\u003c/span\u003e = \u003cspan\u003ecurrency\u003c/span\u003e(\u003cspan\u003efrom\u003c/span\u003e: \u003cspan\u003edecimal\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eresetSelection\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003evalue\u003c/span\u003e = \u003cspan\u003eInt\u003c/span\u003e(\u003cspan\u003edoubleValue\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e@objc\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eresetSelection\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eselectedTextRange\u003c/span\u003e = \u003cspan\u003etextRange\u003c/span\u003e(\u003cspan\u003efrom\u003c/span\u003e: \u003cspan\u003eendOfDocument\u003c/span\u003e, \u003cspan\u003eto\u003c/span\u003e: \u003cspan\u003eendOfDocument\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003etextValue\u003c/span\u003e: \u003cspan\u003eString\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etext\u003c/span\u003e ?? \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003edoubleValue\u003c/span\u003e: \u003cspan\u003eDouble\u003c/span\u003e { \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003ereturn\u003c/span\u003e (\u003cspan\u003edecimal\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e \u003cspan\u003eNSDecimalNumber\u003c/span\u003e).\u003cspan\u003edoubleValue\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003edecimal\u003c/span\u003e: \u003cspan\u003eDecimal\u003c/span\u003e { \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etextValue\u003c/span\u003e.\u003cspan\u003edecimal\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e \u003cspan\u003epow\u003c/span\u003e(\u003cspan\u003e10\u003c/span\u003e, \u003cspan\u003eformatter\u003c/span\u003e.\u003cspan\u003emaximumFractionDigits\u003c/span\u003e) \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ecurrency\u003c/span\u003e(\u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003edecimal\u003c/span\u003e: \u003cspan\u003eDecimal\u003c/span\u003e) -\u0026gt; \u003cspan\u003eString\u003c/span\u003e { \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eformatter\u003c/span\u003e.\u003cspan\u003estring\u003c/span\u003e(\u003cspan\u003efor\u003c/span\u003e: \u003cspan\u003edecimal\u003c/span\u003e) ?? \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eStringProtocol\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e \u003cspan\u003eSelf\u003c/span\u003e: \u003cspan\u003eRangeReplaceableCollection\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003edigits\u003c/span\u003e: \u003cspan\u003eSelf\u003c/span\u003e { \u003cspan\u003efilter\u003c/span\u003e (\u003cspan\u003e\\\u003c/span\u003e.\u003cspan\u003eisWholeNumber\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003edecimal\u003c/span\u003e: \u003cspan\u003eDecimal\u003c/span\u003e { \u003cspan\u003eDecimal\u003c/span\u003e(\u003cspan\u003estring\u003c/span\u003e: \u003cspan\u003edigits\u003c/span\u003e) ?? \u003cspan\u003e0\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eLosslessStringConvertible\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e: \u003cspan\u003eString\u003c/span\u003e { .\u003cspan\u003einit\u003c/span\u003e(\u003cspan\u003eself\u003c/span\u003e) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe view is ready, I just need to bring it to SwiftUI.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eSwiftUI\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eCurrencyTextField\u003c/span\u003e: \u003cspan\u003eUIViewRepresentable\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003etypealias\u003c/span\u003e \u003cspan\u003eUIViewType\u003c/span\u003e = \u003cspan\u003eCurrencyUITextField\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003enumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003ecurrencyField\u003c/span\u003e: \u003cspan\u003eCurrencyUITextField\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e(\u003cspan\u003enumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e, \u003cspan\u003evalue\u003c/span\u003e: \u003cspan\u003eBinding\u003c/span\u003e\u0026lt;\u003cspan\u003eInt\u003c/span\u003e\u0026gt;) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003enumberFormatter\u003c/span\u003e = \u003cspan\u003enumberFormatter\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ecurrencyField\u003c/span\u003e = \u003cspan\u003eCurrencyUITextField\u003c/span\u003e(\u003cspan\u003eformatter\u003c/span\u003e: \u003cspan\u003enumberFormatter\u003c/span\u003e, \u003cspan\u003evalue\u003c/span\u003e: \u003cspan\u003evalue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emakeUIView\u003c/span\u003e(\u003cspan\u003econtext\u003c/span\u003e: \u003cspan\u003eContext\u003c/span\u003e) -\u0026gt; \u003cspan\u003eCurrencyUITextField\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003ecurrencyField\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eupdateUIView\u003c/span\u003e(\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003euiView\u003c/span\u003e: \u003cspan\u003eCurrencyUITextField\u003c/span\u003e, \u003cspan\u003econtext\u003c/span\u003e: \u003cspan\u003eContext\u003c/span\u003e) { }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is pretty simple, I only make sure the view is created once for time being.\u003c/p\u003e\n\u003cp\u003eBack to SwiftUI view, let’s see how it goes.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eContentView\u003c/span\u003e: \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eState\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eisSubtitleHidden\u003c/span\u003e = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eState\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e = \u003cspan\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003enumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e(\u003cspan\u003enumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e = \u003cspan\u003eNumberFormatter\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003enumberFormatter\u003c/span\u003e = \u003cspan\u003enumberFormatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003enumberStyle\u003c/span\u003e = .\u003cspan\u003ecurrency\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003emaximumFractionDigits\u003c/span\u003e = \u003cspan\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e: \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eVStack\u003c/span\u003e(\u003cspan\u003espacing\u003c/span\u003e: \u003cspan\u003e20\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eText\u003c/span\u003e(\u003cspan\u003e\u0026#34;Send money\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003efont\u003c/span\u003e(.\u003cspan\u003etitle\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eCurrencyTextField\u003c/span\u003e(\u003cspan\u003enumberFormatter\u003c/span\u003e: \u003cspan\u003enumberFormatter\u003c/span\u003e, \u003cspan\u003evalue\u003c/span\u003e: \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003epadding\u003c/span\u003e(\u003cspan\u003e20\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003eoverlay\u003c/span\u003e(\u003cspan\u003eRoundedRectangle\u003c/span\u003e(\u003cspan\u003ecornerRadius\u003c/span\u003e: \u003cspan\u003e16\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                            .\u003cspan\u003estroke\u003c/span\u003e(\u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003egray\u003c/span\u003e.\u003cspan\u003eopacity\u003c/span\u003e(\u003cspan\u003e0.3\u003c/span\u003e), \u003cspan\u003elineWidth\u003c/span\u003e: \u003cspan\u003e2\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003eframe\u003c/span\u003e(\u003cspan\u003eheight\u003c/span\u003e: \u003cspan\u003e100\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eRectangle\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003eframe\u003c/span\u003e(\u003cspan\u003ewidth\u003c/span\u003e: \u003cspan\u003e0\u003c/span\u003e, \u003cspan\u003eheight\u003c/span\u003e: \u003cspan\u003e40\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eText\u003c/span\u003e(\u003cspan\u003e\u0026#34;Send\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003efontWeight\u003c/span\u003e(.\u003cspan\u003ebold\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003epadding\u003c/span\u003e(\u003cspan\u003e30\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003eframe\u003c/span\u003e(\u003cspan\u003ewidth\u003c/span\u003e: \u003cspan\u003e180\u003c/span\u003e, \u003cspan\u003eheight\u003c/span\u003e: \u003cspan\u003e50\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003ebackground\u003c/span\u003e(\u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003eyellow\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003ecornerRadius\u003c/span\u003e(\u003cspan\u003e20\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003eonTapGesture\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003eisSubtitleHidden\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        \u003cspan\u003eisSubtitleHidden\u003c/span\u003e.\u003cspan\u003etoggle\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003eisSubtitleHidden\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eText\u003c/span\u003e(\u003cspan\u003e\u0026#34;Sending \u003c/span\u003e\u003cspan\u003e\\(\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eSpacer\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        .\u003cspan\u003epadding\u003c/span\u003e(.\u003cspan\u003etop\u003c/span\u003e, \u003cspan\u003e60\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        .\u003cspan\u003epadding\u003c/span\u003e(.\u003cspan\u003ehorizontal\u003c/span\u003e, \u003cspan\u003e20\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMost currency transfers and payment handle amount at the fraction level. It means that \u003ccode\u003e$12.34\u003c/code\u003e would be represented as \u003ccode\u003e1234\u003c/code\u003e so I kept my binding value the same way.\u003c/p\u003e\n\u003cp\u003eHere is how it looks\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://benoitpasquier.com/images/2021/11/currency-swiftui.gif\" alt=\"currency-swiftui\"/\u003e\u003c/p\u003e\n\u003cp\u003eOne thing I haven’t got chance to test is localization. Thing is environment variable locale doesn’t seem to apply to formatters during preview without a small effort. So, similar to what I did in the past for \u003ca href=\"https://benoitpasquier.com/date-formatter-swiftui/\"\u003eDateFormatter\u003c/a\u003e, I created a protocol and preview type to make it work.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eprotocol\u003c/span\u003e \u003cspan\u003eNumberFormatterProtocol\u003c/span\u003e: \u003cspan\u003eAnyObject\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e(\u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003enumber\u003c/span\u003e: \u003cspan\u003eNSNumber\u003c/span\u003e) -\u0026gt; \u003cspan\u003eString\u003c/span\u003e?\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e(\u003cspan\u003efor\u003c/span\u003e \u003cspan\u003eobj\u003c/span\u003e: \u003cspan\u003eAny\u003c/span\u003e?) -\u0026gt; \u003cspan\u003eString\u003c/span\u003e?\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003enumberStyle\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e.\u003cspan\u003eStyle\u003c/span\u003e { \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003emaximumFractionDigits\u003c/span\u003e: \u003cspan\u003eInt\u003c/span\u003e { \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003eset\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eNumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatterProtocol\u003c/span\u003e { }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003ePreviewNumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatterProtocol\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003enumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e(\u003cspan\u003elocale\u003c/span\u003e: \u003cspan\u003eLocale\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003enumberFormatter\u003c/span\u003e = \u003cspan\u003eNumberFormatter\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003elocale\u003c/span\u003e = \u003cspan\u003elocale\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003enumberStyle\u003c/span\u003e: \u003cspan\u003eNumberFormatter\u003c/span\u003e.\u003cspan\u003eStyle\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003enumberStyle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eset\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003enumberStyle\u003c/span\u003e = \u003cspan\u003enewValue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003emaximumFractionDigits\u003c/span\u003e: \u003cspan\u003eInt\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003emaximumFractionDigits\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eset\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003emaximumFractionDigits\u003c/span\u003e = \u003cspan\u003enewValue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e(\u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003enumber\u003c/span\u003e: \u003cspan\u003eNSNumber\u003c/span\u003e) -\u0026gt; \u003cspan\u003eString\u003c/span\u003e? {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003estring\u003c/span\u003e(\u003cspan\u003efrom\u003c/span\u003e: \u003cspan\u003enumber\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e(\u003cspan\u003efor\u003c/span\u003e \u003cspan\u003eobj\u003c/span\u003e: \u003cspan\u003eAny\u003c/span\u003e?) -\u0026gt; \u003cspan\u003eString\u003c/span\u003e? {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003enumberFormatter\u003c/span\u003e.\u003cspan\u003estring\u003c/span\u003e(\u003cspan\u003efor\u003c/span\u003e: \u003cspan\u003eobj\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI can now update the view accordingly and preview any specific region without launching the app or editing the current scheme.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eContentView\u003c/span\u003e: \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eState\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eisSubtitleHidden\u003c/span\u003e = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eState\u003c/span\u003e \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e = \u003cspan\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003enumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatterProtocol\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e(\u003cspan\u003enumberFormatter\u003c/span\u003e: \u003cspan\u003eNumberFormatterProtocol\u003c/span\u003e = \u003cspan\u003eNumberFormatter\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003enumberFormatter\u003c/span\u003e = \u003cspan\u003enumberFormatter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eContentView_Previews\u003c/span\u003e: \u003cspan\u003ePreviewProvider\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003epreviews\u003c/span\u003e: \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eContentView\u003c/span\u003e(\u003cspan\u003enumberFormatter\u003c/span\u003e: \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        \u003cspan\u003ePreviewNumberFormatter\u003c/span\u003e(\u003cspan\u003elocale\u003c/span\u003e: \u003cspan\u003eLocale\u003c/span\u003e(\u003cspan\u003eidentifier\u003c/span\u003e: \u003cspan\u003e\u0026#34;fr_FR\u0026#34;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTesting for French region and language, we can get into EUR:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://benoitpasquier.com/images/2021/11/currency-localized.png\" alt=\"currency-localized\"/\u003e\u003c/p\u003e\n\u003cp\u003eBefore concluding this post, here are few things to note.\u003c/p\u003e\n\u003cp\u003eIf the custom view has the feeling I was looking for, it required to set the style and observers within the view itself. Those aren’t exposed to SwiftUI, so it would require to create few \u003ccode\u003eViewModifier\u003c/code\u003e to make things right.\u003c/p\u003e\n\u003cp\u003eThe currency manipulation has also been inspired by a similar question asked on \u003ca href=\"https://stackoverflow.com/a/29783546/1503502\"\u003eStackOverflow\u003c/a\u003e. It works decently in this demo, but I would be careful using it into production, transforming \u003ccode\u003eString\u003c/code\u003e to \u003ccode\u003eDecimal\u003c/code\u003e to then \u003ccode\u003eDouble\u003c/code\u003e can expose you to rounded numbers (or too accurate like 10.1999999) and give you an approximative output.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eIn conclusion, even though the default TextField in SwiftUI is a great place to start to handle currency inputs, I had to bridge back from UIKit to get a more complete experience for what I was looking for.\u003c/p\u003e\n\u003cp\u003eI feel \u003ccode\u003eTextField\u003c/code\u003e have still few gaps in SwiftUI like \u003ccode\u003eUITextFieldDelegate\u003c/code\u003e and few observers that UIKit has that are key for a more advance experience.\u003c/p\u003e\n\u003cp\u003eThat being said, as always, each project is different and might require a special touch to make things right, bridging views from UIKit shouldn’t be the default solution to all problems.\u003c/p\u003e\n\u003cp\u003eThis code is available on \u003ca href=\"https://github.com/popei69/samples/tree/master/NumberSample\"\u003eGithub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHappy coding\u003c/em\u003e\u003c/p\u003e\n              \n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2021-11-04T06:00:00Z",
  "modifiedTime": "2021-11-04T06:00:00Z"
}
