{
  "id": "445329c0-d5f5-44b1-9433-7c6a479d18d5",
  "title": "Swift 5.7’s new optional unwrapping syntax",
  "link": "https://www.swiftbysundell.com/articles/swifts-new-shorthand-optional-unwrapping-syntax",
  "description": "A quick look at a new, more concise way to unwrap optional values that’s being introduced in Swift 5.7.",
  "author": "",
  "published": "Tue, 7 Jun 2022 22:20:00 +0200",
  "source": "https://www.swiftbysundell.com/feed.rss",
  "categories": null,
  "byline": "",
  "length": 1562,
  "excerpt": "A quick look at a new, more concise way to unwrap optional values that’s being introduced in Swift 5.7.",
  "siteName": "Swift by Sundell",
  "favicon": "https://www.swiftbysundell.com/images/favicon.png",
  "text": "Swift 5.7 introduces a new, more concise way to unwrap optional values using if let and guard let statements. Before, we always had to explicitly name each unwrapped value, for example like this:class AnimationController { var animation: Animation? func update() { if let animation = animation { // Perform updates ... } } }But now, we can simply drop the assignment after our if let statement, and the Swift compiler will automatically unwrap our optional into a concrete value with the exact same name:class AnimationController { var animation: Animation? func update() { if let animation { // Perform updates ... } } }Neat! The above new syntax also works with guard statements:class AnimationController { var animation: Animation? func update() { guard let animation else { return } // Perform updates ... } }It can also be used to unwrap multiple optionals all at once:struct Message { var title: String? var body: String? var recipient: String? var isSendable: Bool { guard let title, let body, let recipient else { return false } return ![title, body, recipient].contains(where: \\.isEmpty) } }A small, but very welcome feature. Of course, we still have the option to explicitly name each unwrapped optional if we wish to do so — either for code style reasons, or if we want to give a certain optional a different name when unwrapped.",
  "image": "https://www.swiftbysundell.com/images/articles/swifts-new-shorthand-optional-unwrapping-syntax.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eSwift 5.7 introduces a new, more concise way to unwrap optional values using \u003ccode\u003eif let\u003c/code\u003e and \u003ccode\u003eguard let\u003c/code\u003e statements. Before, we always had to explicitly name each unwrapped value, for example like this:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e AnimationController {\n    \u003cspan\u003evar\u003c/span\u003e animation: \u003cspan\u003eAnimation\u003c/span\u003e?\n\n    \u003cspan\u003efunc\u003c/span\u003e update() {\n        \u003cspan\u003e\u003cspan\u003eif let\u003c/span\u003e animation = animation\u003c/span\u003e {\n            \u003cspan\u003e// Perform updates\u003c/span\u003e\n            ...\n        }\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBut now, we can simply drop the assignment after our \u003ccode\u003eif let\u003c/code\u003e statement, and the Swift compiler will automatically unwrap our optional into a concrete value with the exact same name:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e AnimationController {\n    \u003cspan\u003evar\u003c/span\u003e animation: \u003cspan\u003eAnimation\u003c/span\u003e?\n\n    \u003cspan\u003efunc\u003c/span\u003e update() {\n        \u003cspan\u003e\u003cspan\u003eif let\u003c/span\u003e animation\u003c/span\u003e {\n            \u003cspan\u003e// Perform updates\u003c/span\u003e\n            ...\n        }\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNeat! The above new syntax also works with \u003ccode\u003eguard\u003c/code\u003e statements:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e AnimationController {\n    \u003cspan\u003evar\u003c/span\u003e animation: \u003cspan\u003eAnimation\u003c/span\u003e?\n\n    \u003cspan\u003efunc\u003c/span\u003e update() {\n        \u003cspan\u003e\u003cspan\u003eguard let\u003c/span\u003e animation\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003ereturn\u003c/span\u003e\n        }\n\n        \u003cspan\u003e// Perform updates\u003c/span\u003e\n        ...\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt can also be used to unwrap multiple optionals all at once:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003estruct\u003c/span\u003e Message {\n    \u003cspan\u003evar\u003c/span\u003e title: \u003cspan\u003eString\u003c/span\u003e?\n    \u003cspan\u003evar\u003c/span\u003e body: \u003cspan\u003eString\u003c/span\u003e?\n    \u003cspan\u003evar\u003c/span\u003e recipient: \u003cspan\u003eString\u003c/span\u003e?\n\n    \u003cspan\u003evar\u003c/span\u003e isSendable: \u003cspan\u003eBool\u003c/span\u003e {\n        \u003cspan\u003e\u003cspan\u003eguard let\u003c/span\u003e title, \u003cspan\u003elet\u003c/span\u003e body, \u003cspan\u003elet\u003c/span\u003e recipient\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e {\n            \u003cspan\u003ereturn false\u003c/span\u003e\n        }\n\n        \u003cspan\u003ereturn\u003c/span\u003e ![title, body, recipient].\u003cspan\u003econtains\u003c/span\u003e(where: \\.\u003cspan\u003eisEmpty\u003c/span\u003e)\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA small, but very welcome feature. Of course, we still have the \u003cem\u003eoption\u003c/em\u003e to explicitly name each unwrapped optional if we wish to do so — either for code style reasons, or if we want to give a certain optional a different name when unwrapped.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": null,
  "modifiedTime": null
}
