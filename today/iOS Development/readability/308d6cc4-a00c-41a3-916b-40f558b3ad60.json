{
  "id": "308d6cc4-a00c-41a3-916b-40f558b3ad60",
  "title": "iOS Accessibility Labels",
  "link": "https://mobilea11y.com/blog/ios-accessibility-labels/",
  "description": "This blog was inspired by Jeff Watkins’ series of blogs on UIButton. UIButton is a fundamental part of building interfaces on iOS. So much so, that it probably doesn’t get the love it deserves. But it’s also really powerful and customisable when used correctly. Accessibility labels on iOS I feel are very similar. They’re fundamental to how accessibility works on iOS, yet I think they suffer from a few PR issues.",
  "author": "",
  "published": "Sun, 03 May 2020 07:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 3615,
  "excerpt": "This blog was inspired by Jeff Watkins’ series of blogs on UIButton. UIButton is a fundamental part of building interfaces on iOS. So much so, that it probably doesn’t get the love it deserves. But it’s also really powerful and customisable when used correctly.",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "This blog was inspired by Jeff Watkins’ series of blogs on UIButton. UIButton is a fundamental part of building interfaces on iOS. So much so, that it probably doesn’t get the love it deserves. But it’s also really powerful and customisable when used correctly. Accessibility labels on iOS I feel are very similar. They’re fundamental to how accessibility works on iOS, yet I think they suffer from a few PR issues. Firstly, Apple has done such a good job with them that we often don’t give the humble accessibility label the consideration it deserves, instead relying on the Apple default behaviour. Secondly, they’re just some text, right? Who can get excited about just a boring old label? Well, I’m sure this won’t surprise you, but I can. What’s an Accessibility Label? When iOS presents your app’s interface to assistive technologies such as VoiceOver, Voice Control or Switch Control, it’s not passing your app’s screen, but a representation of the screen in what’s known as an accessibility tree, or accessible user interface as Apple often call it. Your customer’s chosen assistive technology will then handle how to present your interface in the way that best suits your customer. But assistive technologies need something to present, and their first port of call is your element’s accessibility label. VoiceOver will read it, braille displays will display it, and Voice Control will listen for it. It Just Works Here’s the first cool thing about accessibility labels on iOS. You don’t need to think about them. All of iOS’ inbuilt controls will work out what their accessibility label is from the content you’ve given it. Mostly this will be the control’s text value. Set this and you’re done. I’m not letting you get out of this post that easily though. Because although this behaviour is great, don’t think this absolves you of your responsibility for accessibility in your app. Most of the time this behaviour is fine, but why settle for fine when you make your app’s experience awesome? Setting Your Own Sometimes you’ll need to specify an accessibility label yourself instead of relying on iOS to figure this out for you. Fortunately, doing that is just as simple as setting a text value. In code, you set the element’s accessibilityLabel property in UIKit, for SwiftUI use the .accessibility(label: ) modifier. And in Interface Builder look out for the Accessibility section in the Identity Inspector pane. // Setting an accessibility label to 'My accessibility label' in UIKit myButton.accessibilityLabel = \"My accessibility label\" // Setting an accessibility label to 'My accessibility label' in SwiftUI Button(action: {}) { Text(\"Button\") }.accessibility(label: Text(\"My accessibility label\")) It’s important to remember that assistive technologies will only pick up your accessibility label if the element is visible to them. Again, Apple has made some sensible default choices on their UI elements for this value, but if you need to set an element to be visible or hidden to accessibility use the Accessibility Enabled checkbox in the screenshot above. Or for UIKit, isAccessibilityElement and the .accessibility(hidden: ) modifier in SwiftUI, both of these take a Boolean argument. // Hiding an image to assistive technologies in SwiftUI Image(\"Image\") .accessibility(hidden: true) // Revealing an image to assistive technologies in UIKit myImage.isAccessibilityElement = true Next Up The next blog in this series is When to use Accessibility Labels iOS Accessibility Labels When to use Accessibility Labels Writing Great iOS Accessibility Labels iOS Attributed Accessibility Labels",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cp\u003eThis blog was inspired by \u003ca href=\"https://twitter.com/jeffwatkins\"\u003eJeff Watkins’\u003c/a\u003e \u003ca href=\"https://jeffwatkins.dev/articles/dressing-up-your-uibutton\"\u003eseries\u003c/a\u003e of \u003ca href=\"https://jeffwatkins.dev/articles/constraints-and-uibutton\"\u003eblogs\u003c/a\u003e on \u003ca href=\"https://jeffwatkins.dev/articles/nobody-loves-uibutton\"\u003eUIButton\u003c/a\u003e. UIButton is a fundamental part of building interfaces on iOS. So much so, that it probably doesn’t get the love it deserves. But it’s also really powerful and customisable when used correctly.\u003c/p\u003e\n\u003cp\u003eAccessibility labels on iOS I feel are very similar. They’re fundamental to how accessibility works on iOS, yet I think they suffer from a few PR issues. Firstly, Apple has done such a good job with them that we often don’t give the humble accessibility label the consideration it deserves, instead relying on the Apple default behaviour. Secondly, they’re just some text, right? Who can get excited about just a boring old label? Well, I’m sure this won’t surprise you, but I can.\u003c/p\u003e\n\u003ch2 id=\"whats-an-accessibility-label\"\u003eWhat’s an Accessibility Label?\u003c/h2\u003e\n\u003cp\u003eWhen iOS presents your app’s interface to assistive technologies such as VoiceOver, Voice Control or Switch Control, it’s not passing your app’s screen, but a representation of the screen in what’s known as an accessibility tree, or accessible user interface as Apple often call it. Your customer’s chosen assistive technology will then handle how to present your interface in the way that best suits your customer. But assistive technologies need something to present, and their first port of call is your element’s accessibility label. VoiceOver will read it, braille displays will display it, and Voice Control will listen for it.\u003c/p\u003e\n\u003ch2 id=\"it-just-works\"\u003eIt Just Works\u003c/h2\u003e\n\u003cp\u003eHere’s the first cool thing about accessibility labels on iOS. You don’t need to think about them. All of iOS’ inbuilt controls will work out what their accessibility label is from the content you’ve given it. Mostly this will be the control’s \u003ccode\u003etext\u003c/code\u003e value. Set this and you’re done.\u003c/p\u003e\n\u003cp\u003eI’m not letting you get out of this post that easily though. Because although this behaviour is great, don’t think this absolves you of your responsibility for accessibility in your app. Most of the time this behaviour is fine, but why settle for fine when you make your app’s experience awesome?\u003c/p\u003e\n\u003ch2 id=\"setting-your-own\"\u003eSetting Your Own\u003c/h2\u003e\n\u003cp\u003eSometimes you’ll need to specify an accessibility label yourself instead of relying on iOS to figure this out for you. Fortunately, doing that is just as simple as setting a \u003ccode\u003etext\u003c/code\u003e value. In code, you set the element’s \u003ccode\u003eaccessibilityLabel\u003c/code\u003e property in UIKit, for SwiftUI use the \u003ccode\u003e.accessibility(label: )\u003c/code\u003e modifier. And in Interface Builder look out for the Accessibility section in the Identity Inspector pane.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e// Setting an accessibility label to \u0026#39;My accessibility label\u0026#39; in UIKit\nmyButton.accessibilityLabel = \u0026#34;My accessibility label\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e// Setting an accessibility label to \u0026#39;My accessibility label\u0026#39; in SwiftUI\nButton(action: {}) {\n    Text(\u0026#34;Button\u0026#34;)\n}.accessibility(label: Text(\u0026#34;My accessibility label\u0026#34;))\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/IdentityInspector.png\" alt=\"Accessibility Identity Inspector\"/\u003e\u003c/p\u003e\n\u003cp\u003eIt’s important to remember that assistive technologies will only pick up your accessibility label if the element is visible to them. Again, Apple has made some sensible default choices on their UI elements for this value, but if you need to set an element to be visible or hidden to accessibility use the Accessibility Enabled checkbox in the screenshot above. Or for UIKit, \u003ccode\u003eisAccessibilityElement\u003c/code\u003e and the \u003ccode\u003e.accessibility(hidden: )\u003c/code\u003e modifier in SwiftUI, both of these take a Boolean argument.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e// Hiding an image to assistive technologies in SwiftUI\nImage(\u0026#34;Image\u0026#34;)\n    .accessibility(hidden: true)\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e// Revealing an image to assistive technologies in UIKit\nmyImage.isAccessibilityElement = true\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"next-up\"\u003eNext Up\u003c/h2\u003e\n\u003cp\u003eThe next blog in this series is \u003ca href=\"https://mobilea11y.com/blog/when-to-use-accessibility-labels/\"\u003eWhen to use Accessibility Labels\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/ios-accessibility-labels/\"\u003eiOS Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/when-to-use-accessibility-labels/\"\u003eWhen to use Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/writing-great-labels/\"\u003eWriting Great iOS Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://mobilea11y.com/blog/attributed-accessibility-labels/\"\u003eiOS Attributed Accessibility Labels\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
