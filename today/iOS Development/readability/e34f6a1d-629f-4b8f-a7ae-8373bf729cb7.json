{
  "id": "e34f6a1d-629f-4b8f-a7ae-8373bf729cb7",
  "title": "Recommended WWDC24 Sessions",
  "link": "https://swiftrocks.com/recommended-wwdc24-sessions",
  "description": "Every year I watch WWDC and write down some notes. But I've just realized that I've never shared those notes and it felt like something I should do, so I've decided to do just that! My approach is to pick a handful of sessions that are immediately useful / interesting to me and ignore the rest. I find this to be a good strategy because in my experience trying to keep up with things that you don't care about / don't have an immediate need for is a very easy way to burn yourself out, especially because Apple has this awful habit of announcing things and then proceeding to make them completely obsolete the next year. If in the future I happen to start working with something where one of the ignored sessions would be handy, I go back and watch it. Otherwise, it stays unwatched. I think the Keynote and the State of the Union should always be watched, so I won't cover them here. Meet Swift Testing I really like this feature. Greatly recommend watching this as it shows not only how it works but also many interesting tricks that you can do with it. To make it better, it's open source and even works on VSCode, although I haven't tried the latter myself. What’s new in StoreKit and In-App Purchase I watch StoreKit sessions because I have an app that has IAPs, so I'm always eager to see what's new in this regard. StoreKit Views aren't a new concept but I'm glad to see they made them more powerful. They also show how you can test IAPs directly in Xcode, which is pretty neat. What's new in Swift This session happens every year and it's always a good watch. As someone who has been working with build systems a lot recently, I'm particularly interested in the new explicit modules feature. What's new in Xcode 16 This is a great watch as Xcode 16 changed quite a bit in good ways. The time profiler now has a flame graph, and the new unified backtrace view looks awesome. What's new in UIKit I haven't worked directly with UI for a very long time, but I enjoy watching these to see what they're improving. I like the improved interop between SwiftUI and UIKit and the new fluid animation type. The new UIUpdateLink type is also very interesting. What's new in SwiftUI Similarly to \"What's new in UIKit\", I enjoy watching these to see what's up with the frameworks. Particularly great things this year are custom containers, how things like @Environment and state in Previews have been greatly simplified, and a much better integration with scroll views. Go small with Embedded Swift This is one of those things that I don't have a use for but watch anyway because it sounded cool, and indeed it was. I think this can also work as a hardcore app size optimization for your apps if you're fine with losing a bunch of Swift's features. Extend your app’s controls across the system Watching sessions about new iOS features is always a good idea if they relate to something that you can potentially implement in your apps. I can think of many things that I can App Controls for and it seems also really easy to implement since it's all based on the existing Widgets infra. Xcode essentials This session is great. Xcode has a ton of tools and shortcuts that we're not aware of, and many of them are extremely useful if you can remember that they exist! Demystify explicitly built modules Apart from talking about the new Swift 6 feature of the same name, this session goes into great detail about how imports work in Swift/Obj-C and how to debug them. I learned a lot from this one. Demystify SwiftUI containers I am not super interested in SwiftUI improvements, but the new custom container feature is a great addition. I believe this is something that will be used a lot, so it's worth it to check this session that shows how it works and what you can do with it. This session also shares many interesting details about how subviews work in SwiftUI. Consume noncopyable types in Swift Most people will probably never use this feature, but it's one of those things that are really cool in practice and worth a look. You might also want to check this out because generics involving the new ~Copyable type are really complicated, so watching this session will help you be less confused if you end up bumping into it. Run, Break, Inspect: Explore effective debugging in LLDB Every year has a session on LLDB, and this year's one is especially good. It's hard to summarize this one because they show a ton of different things, so just go there and watch it! I was surprised to find out that you can open crash logs in Xcode (maybe it was always a thing?) and that you can create \"manual\" breakpoints by calling raise(SIGSTOP). Explore Swift performance This was not as actionable as I thought it would be, but I still found it to be interesting because it contains \"official\" evidence about how structs/protocols can be bad for performance / app size if you misuse them, which is something I've covered in a recent talk and that a lot of people wanted to know more about. Analyze heap memory This session not only shows interesting examples of how to use the memory debugger and instrument, but also shares a lot of interesting pieces of info about the difference between weak and unowned that I believe weren't documented before, including how to debug their performance! It also now serves as an \"official\" source for the autoreleasepool trick I wrote an article about a long time ago, which is pretty neat.",
  "author": "Bruno Rocha",
  "published": "Mon, 17 Jun 2024 11:20:00 GMT+2",
  "source": "https://swiftrocks.com/rss.xml",
  "categories": null,
  "byline": "Bruno Rocha",
  "length": 5430,
  "excerpt": "Every year I watch WWDC and write down some notes.",
  "siteName": "SwiftRocks",
  "favicon": "https://swiftrocks.com/images/favicon/iconsmall2.png",
  "text": "Every year I watch WWDC and write down some notes. But I've just realized that I've never shared those notes and it felt like something I should do, so I've decided to do just that! My approach is to pick a handful of sessions that are immediately useful / interesting to me and ignore the rest. I find this to be a good strategy because in my experience trying to keep up with things that you don't care about / don't have an immediate need for is a very easy way to burn yourself out, especially because Apple has this awful habit of announcing things and then proceeding to make them completely obsolete the next year. If in the future I happen to start working with something where one of the ignored sessions would be handy, I go back and watch it. Otherwise, it stays unwatched. I think the Keynote and the State of the Union should always be watched, so I won't cover them here. Meet Swift Testing I really like this feature. Greatly recommend watching this as it shows not only how it works but also many interesting tricks that you can do with it. To make it better, it's open source and even works on VSCode, although I haven't tried the latter myself. What’s new in StoreKit and In-App Purchase I watch StoreKit sessions because I have an app that has IAPs, so I'm always eager to see what's new in this regard. StoreKit Views aren't a new concept but I'm glad to see they made them more powerful. They also show how you can test IAPs directly in Xcode, which is pretty neat. What's new in Swift This session happens every year and it's always a good watch. As someone who has been working with build systems a lot recently, I'm particularly interested in the new explicit modules feature. What's new in Xcode 16 This is a great watch as Xcode 16 changed quite a bit in good ways. The time profiler now has a flame graph, and the new unified backtrace view looks awesome. What's new in UIKit I haven't worked directly with UI for a very long time, but I enjoy watching these to see what they're improving. I like the improved interop between SwiftUI and UIKit and the new fluid animation type. The new UIUpdateLink type is also very interesting. What's new in SwiftUI Similarly to \"What's new in UIKit\", I enjoy watching these to see what's up with the frameworks. Particularly great things this year are custom containers, how things like @Environment and state in Previews have been greatly simplified, and a much better integration with scroll views. Go small with Embedded Swift This is one of those things that I don't have a use for but watch anyway because it sounded cool, and indeed it was. I think this can also work as a hardcore app size optimization for your apps if you're fine with losing a bunch of Swift's features. Extend your app’s controls across the system Watching sessions about new iOS features is always a good idea if they relate to something that you can potentially implement in your apps. I can think of many things that I can App Controls for and it seems also really easy to implement since it's all based on the existing Widgets infra. Xcode essentials This session is great. Xcode has a ton of tools and shortcuts that we're not aware of, and many of them are extremely useful if you can remember that they exist! Demystify explicitly built modules Apart from talking about the new Swift 6 feature of the same name, this session goes into great detail about how imports work in Swift/Obj-C and how to debug them. I learned a lot from this one. Demystify SwiftUI containers I am not super interested in SwiftUI improvements, but the new custom container feature is a great addition. I believe this is something that will be used a lot, so it's worth it to check this session that shows how it works and what you can do with it. This session also shares many interesting details about how subviews work in SwiftUI. Consume noncopyable types in Swift Most people will probably never use this feature, but it's one of those things that are really cool in practice and worth a look. You might also want to check this out because generics involving the new ~Copyable type are really complicated, so watching this session will help you be less confused if you end up bumping into it. Run, Break, Inspect: Explore effective debugging in LLDB Every year has a session on LLDB, and this year's one is especially good. It's hard to summarize this one because they show a ton of different things, so just go there and watch it! I was surprised to find out that you can open crash logs in Xcode (maybe it was always a thing?) and that you can create \"manual\" breakpoints by calling raise(SIGSTOP). Explore Swift performance This was not as actionable as I thought it would be, but I still found it to be interesting because it contains \"official\" evidence about how structs/protocols can be bad for performance / app size if you misuse them, which is something I've covered in a recent talk and that a lot of people wanted to know more about. Analyze heap memory This session not only shows interesting examples of how to use the memory debugger and instrument, but also shares a lot of interesting pieces of info about the difference between weak and unowned that I believe weren't documented before, including how to debug their performance! It also now serves as an \"official\" source for the autoreleasepool trick I wrote an article about a long time ago, which is pretty neat.",
  "image": "https://swiftrocks.com/images/thumbs/thumb.jpg?4",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \n  \n\u003cp\u003eEvery year I watch WWDC and write down some notes. But I\u0026#39;ve just realized that I\u0026#39;ve never shared those notes and it felt like something I should do, so I\u0026#39;ve decided to do just that!\u003c/p\u003e\n\n\u003cp\u003eMy approach is to pick a handful of sessions that are immediately useful / interesting to me and ignore the rest. I find this to be a good strategy because in my experience trying to keep up with things that you don\u0026#39;t care about / don\u0026#39;t have an immediate need for is a very easy way to burn yourself out, especially because Apple has this awful habit of announcing things and then proceeding to make them completely obsolete the next year. If in the future I happen to start working with something where one of the ignored sessions would be handy, I go back and watch it. Otherwise, it stays unwatched.\u003c/p\u003e\n\n\u003cp\u003eI think the Keynote and the State of the Union should always be watched, so I won\u0026#39;t cover them here.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10179\"\u003eMeet Swift Testing\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI really like this feature. Greatly recommend watching this as it shows not only how it works but also many interesting tricks that you can do with it. To make it better, it\u0026#39;s open source and even works on VSCode, although I haven\u0026#39;t tried the latter myself.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10061\"\u003eWhat’s new in StoreKit and In-App Purchase\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI watch StoreKit sessions because I have an app that has IAPs, so I\u0026#39;m always eager to see what\u0026#39;s new in this regard. StoreKit Views aren\u0026#39;t a new concept but I\u0026#39;m glad to see they made them more powerful. They also show how you can test IAPs directly in Xcode, which is pretty neat.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10136\"\u003eWhat\u0026#39;s new in Swift\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis session happens every year and it\u0026#39;s always a good watch. As someone who has been working with build systems a lot recently, I\u0026#39;m particularly interested in the new explicit modules feature.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10135\"\u003eWhat\u0026#39;s new in Xcode 16\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is a great watch as Xcode 16 changed quite a bit in good ways. The time profiler now has a flame graph, and the new unified backtrace view looks awesome.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10118\"\u003eWhat\u0026#39;s new in UIKit\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI haven\u0026#39;t worked directly with UI for a very long time, but I enjoy watching these to see what they\u0026#39;re improving. I like the improved interop between SwiftUI and UIKit and the new fluid animation type. The new \u003ccode\u003eUIUpdateLink\u003c/code\u003e type is also very interesting.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10144\"\u003eWhat\u0026#39;s new in SwiftUI\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSimilarly to \u0026#34;What\u0026#39;s new in UIKit\u0026#34;, I enjoy watching these to see what\u0026#39;s up with the frameworks. Particularly great things this year are custom containers, how things like \u003ccode\u003e@Environment\u003c/code\u003e and state in \u003ccode\u003ePreviews\u003c/code\u003e have been greatly simplified, and a much better integration with scroll views.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10197\"\u003eGo small with Embedded Swift\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis is one of those things that I don\u0026#39;t have a use for but watch anyway because it sounded cool, and indeed it was. I think this can also work as a hardcore app size optimization for your apps if you\u0026#39;re fine with losing a bunch of Swift\u0026#39;s features.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10157\"\u003eExtend your app’s controls across the system\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWatching sessions about new iOS features is always a good idea if they relate to something that you can potentially implement in your apps. I can think of many things that I can App Controls for and it seems also really easy to implement since it\u0026#39;s all based on the existing Widgets infra.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10181\"\u003eXcode essentials\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis session is great. Xcode has a ton of tools and shortcuts that we\u0026#39;re not aware of, and many of them are extremely useful if you can remember that they exist!\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10171\"\u003eDemystify explicitly built modules\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eApart from talking about the new Swift 6 feature of the same name, this session goes into great detail about how imports work in Swift/Obj-C and how to debug them. I learned a lot from this one.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10146\"\u003eDemystify SwiftUI containers\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI am not super interested in SwiftUI improvements, but the new custom container feature is a great addition. I believe this is something that will be used a lot, so it\u0026#39;s worth it to check this session that shows how it works and what you can do with it. This session also shares many interesting details about how subviews work in SwiftUI.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10170\"\u003eConsume noncopyable types in Swift\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eMost people will probably never use this feature, but it\u0026#39;s one of those things that are really cool in practice and worth a look. You might also want to check this out because generics involving the new \u003ccode\u003e~Copyable\u003c/code\u003e type are really complicated, so watching this session will help you be less confused if you end up bumping into it.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10198\"\u003eRun, Break, Inspect: Explore effective debugging in LLDB\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEvery year has a session on LLDB, and this year\u0026#39;s one is especially good. It\u0026#39;s hard to summarize this one because they show a ton of different things, so just go there and watch it! I was surprised to find out that you can open crash logs in Xcode (maybe it was always a thing?) and that you can create \u0026#34;manual\u0026#34; breakpoints by calling \u003ccode\u003eraise(SIGSTOP)\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10217\"\u003eExplore Swift performance\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis was not as actionable as I thought it would be, but I still found it to be interesting because it contains \u0026#34;official\u0026#34; evidence about how structs/protocols can be bad for performance / app size if you misuse them, which is something I\u0026#39;ve covered in a recent talk and that a lot of people wanted to know more about.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003ca href=\"https://developer.apple.com/videos/play/wwdc2024-10173\"\u003eAnalyze heap memory\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThis session not only shows interesting examples of how to use the memory debugger and instrument, but also shares a lot of interesting pieces of info about the difference between \u003ccode\u003eweak\u003c/code\u003e and \u003ccode\u003eunowned\u003c/code\u003e that I believe weren\u0026#39;t documented before, including how to debug their performance! It also now serves as an \u0026#34;official\u0026#34; source for \u003ca href=\"https://swiftrocks.com/autoreleasepool-in-swift\"\u003ethe autoreleasepool trick I wrote an article about a long time ago\u003c/a\u003e, which is pretty neat.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-06-17T11:20:00+02:00",
  "modifiedTime": null
}
