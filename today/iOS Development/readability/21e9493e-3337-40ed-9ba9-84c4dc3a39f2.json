{
  "id": "21e9493e-3337-40ed-9ba9-84c4dc3a39f2",
  "title": "Putting the U in GraphQL",
  "link": "https://fabisevi.ch/2021/03/12/putting-the-u-in-graphql/",
  "description": "GraphQL has been on my list of technologies to learn for a few months now, and last week I came across Majid Jabrayilov's post, feeling pretty excited to tackle the subject. The post was very good, but it didn't answer the one question I've had as I've gone through numerous exercises to understand GraphQL, how do I make GraphQL requests without a library?",
  "author": "Joe Fabisevich",
  "published": "Fri, 12 Mar 2021 00:00:00 GMT",
  "source": "https://www.fabisevi.ch/feed.xml",
  "categories": null,
  "byline": "",
  "length": 5248,
  "excerpt": "GraphQL has been on my list of technologies to learn for a few months now, and last week I came across Majid Jabrayilov's post, feeling pretty excited to tackle the subject. The post was very good, but it didn't answer the one question I've had as I've gone through numerous exercises to understand GraphQL, how do I make GraphQL requests without a library?",
  "siteName": "",
  "favicon": "https://fabisevi.ch/icons/icon-512x512.png?v=b60b950dc439294a707fb76cdaca4274",
  "text": "GraphQL has been on my list of technologies to learn for a few months now, and last week I came across Majid Jabrayilov's post, feeling pretty excited to tackle the subject. The post was very good, but it didn't answer the one question I've had as I've gone through numerous exercises to understand GraphQL, how do I make GraphQL requests without a library? I've read about how to create a GraphQL query and how to integrate GraphQL on your server a dozen times, but one topic that's highly under-covered is how to make a GraphQL request from the client. In the world of GraphQL it's very common to reach for Apollo, a library that handles turning GraphQL queries into functions, leveraging tooling to turn those functions into type-safe API requests the client can make. While this is a perfectly reasonable approach, and actually a pretty good developer experience, it still didn't answer the questions I had as an ever-curious engineer, how would I do this on my own? I broke the problem I saw down into two smaller problems, request-generation and request-making. Generating a request, especially in Swift, it turns out is pretty easy. I really like the approach that SociableWeaver takes, leveraging Swift's function builders to let you build a type-safe directly in Swift. The second problem was a bit fiddlier. I knew that I had to make a POST request, and I knew the endpoint that was being hit, and through some trial and error (and a friend's help1), I was able to start making GraphQL requests without any external libraries needed. extension URLSession { func graphQLRequest(url: URL, query: String) -\u003e URLSession.DataTaskPublisher { var request = URLRequest(url: url) request.httpMethod = \"POST\" request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\") let body = \"\"\" { \"query\": \"\\(query)\" } \"\"\" let queryData = body.data(using: .utf8) request.httpBody = queryData return self.dataTaskPublisher(for: request) } // If using SociableWeaver or a similar GraphQL query generator, you can do it in a type-safe manner. func graphQLRequest(url: URL, query: Weave) -\u003e URLSession.DataTaskPublisher { return self.executeGraphQLQuery(url: url, query: query.description) } } After looking over the above code a few times I realized that the majority of it was handling the creation of a URLRequest. That served as a hint to me that we could refactor the code into a custom URLRequest initializer. This would be less prescriptive about how the URLRequest is used, since my first code snippet assumes you always want to return a URLSession.DataTaskPublisher. extension URLRequest { init(url: URL, graphQLQuery query: String) { self.init(url: url) self.httpMethod = \"POST\" self.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\") let body = \"\"\" { \"query\": \"\\(query)\" } \"\"\" let queryData = body.data(using: .utf8) self.httpBody = queryData } // If we're going all in on SociableWeaver we can make a similar initializer that takes a `Weave` parameter instead of a `String`. } Now if you'd like to use URLSession.DataTaskPublisher you're free to by creating a URLRequest from our new initializer and using it, but you can also return a URLSession.DataTask or any other reason mechanism that involves a URLRequest. extension URLSession { func graphQLRequest(url: URL, query: String) -\u003e URLSession.DataTaskPublisher { let request = URLRequest(url: url, graphQLQuery: query) return self.dataTaskPublisher(for: request) } func graphQLRequest(url: URL, query: Weave) -\u003e URLSession.DataTaskPublisher { return self.graphQLRequest(url: url, query: query.description) } } That looks a lot cleaner, and our responsibilities seem a lot more well-divided. Is there room for tools like Apollo? Absolutely! I'm not going to pretend that my dozen lines of code replaces the value that a multimillion dollar company provides. (I'll only make sick jokes about it.) But before importing a library like Apollo, any library really, it's worth asking yourself whether you need a big solution for a small problem. Or maybe question the better question to ask before that is, have you really understood the problem you're trying to solve? But we still haven't really answered where exactly we should put the U in GraphQL. (I say after the Q since Q is almost always followed by U, but I'm open to feedback on that or the rest of this post.) Joe Fabisevich is an indie developer creating software at Red Panda Club Inc. while writing about design, development, and building a company. Formerly an iOS developer working on societal issues @Twitter. These days I don't tweet, but I do post on Threads.Like my writing? You can keep up with it in your favorite RSS reader, or get posts emailed in newsletter form. I promise to never spam you or send you anything other than my posts, it's just a way for you to read my writing wherever's most comfortable for you.If you'd like to know more, wanna talk, or need some advice, feel free to sign up for office hours, I'm very friendly. ðŸ™‚",
  "image": "https://fabisevi.ch/static/pic-f5999ef8dd476bfbf9d65ddbace7e387.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003eGraphQL has been on my list of technologies to learn for a few months now, and last week I came across \u003ca href=\"https://swiftwithmajid.com/2021/02/24/graphql-in-swift/\"\u003eMajid Jabrayilov\u0026#39;s post\u003c/a\u003e, feeling pretty excited to tackle the subject. The post was very good, but it didn\u0026#39;t answer the one question I\u0026#39;ve had as I\u0026#39;ve gone through numerous exercises to understand GraphQL, how do I make GraphQL requests without a library?\u003c/p\u003e\n\n\u003cp\u003eI\u0026#39;ve read about how to create a GraphQL query and how to integrate GraphQL on your server a dozen times, but one topic that\u0026#39;s highly under-covered is how to make a GraphQL request from the client. In the world of GraphQL it\u0026#39;s very common to reach for \u003ca href=\"https://www.apollographql.com\"\u003eApollo\u003c/a\u003e, a library that handles turning GraphQL queries into functions, leveraging tooling to turn those functions into type-safe API requests the client can make.\u003c/p\u003e\n\u003cp\u003eWhile this is a perfectly reasonable approach, and actually a pretty good developer experience, it still didn\u0026#39;t answer the questions I had as an ever-curious engineer, how would I do this on my own?\u003c/p\u003e\n\u003cp\u003eI broke the problem I saw down into two smaller problems, request-generation and request-making. Generating a request, especially in Swift, it turns out is pretty easy. I really like the approach that \u003ca href=\"https://github.com/NicholasBellucci/SociableWeaver\"\u003eSociableWeaver\u003c/a\u003e takes, leveraging Swift\u0026#39;s function builders to let you build a type-safe directly in Swift. The second problem was a bit fiddlier. I knew that I had to make a \u003ccode\u003ePOST\u003c/code\u003e request, and I knew the endpoint that was being hit, and through some trial and error (and a friend\u0026#39;s help\u003csup id=\"fnref-1\"\u003e\u003ca href=\"#fn-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e), I was able to start making GraphQL requests without any external libraries needed.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eURLSession\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egraphQLRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e query\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eURLSession\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eDataTaskPublisher\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003evar\u003c/span\u003e request \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eURLRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e url\u003cspan\u003e)\u003c/span\u003e\n        request\u003cspan\u003e.\u003c/span\u003ehttpMethod \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;POST\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        request\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e forHTTPHeaderField\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Content-Type\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n        \u003cspan\u003elet\u003c/span\u003e body \u003cspan\u003e=\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n            { \u0026#34;query\u0026#34;: \u0026#34;\u003c/span\u003e\u003cspan\u003e\\(\u003c/span\u003e\u003cspan\u003equery\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e\u0026#34; }\n        \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e queryData \u003cspan\u003e=\u003c/span\u003e body\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eusing\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003eutf8\u003cspan\u003e)\u003c/span\u003e\n        request\u003cspan\u003e.\u003c/span\u003ehttpBody \u003cspan\u003e=\u003c/span\u003e queryData\n\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edataTaskPublisher\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e request\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003e// If using SociableWeaver or a similar GraphQL query generator, you can do it in a type-safe manner.\u003c/span\u003e\n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egraphQLRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e query\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eWeave\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eURLSession\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eDataTaskPublisher\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eexecuteGraphQLQuery\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e url\u003cspan\u003e,\u003c/span\u003e query\u003cspan\u003e:\u003c/span\u003e query\u003cspan\u003e.\u003c/span\u003edescription\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAfter looking over the above code a few times I realized that the majority of it was handling the creation of a \u003ccode\u003eURLRequest\u003c/code\u003e. That served as a hint to me that we could refactor the code into a custom \u003ccode\u003eURLRequest\u003c/code\u003e initializer. This would be less prescriptive about how the \u003ccode\u003eURLRequest\u003c/code\u003e is used, since my first code snippet assumes you always want to return a \u003ccode\u003eURLSession.DataTaskPublisher\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eURLRequest\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e graphQLQuery query\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e url\u003cspan\u003e)\u003c/span\u003e\n\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ehttpMethod \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;POST\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e forHTTPHeaderField\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;Content-Type\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n        \u003cspan\u003elet\u003c/span\u003e body \u003cspan\u003e=\u003c/span\u003e\n        \u003cspan\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n            { \u0026#34;query\u0026#34;: \u0026#34;\u003c/span\u003e\u003cspan\u003e\\(\u003c/span\u003e\u003cspan\u003equery\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e\u0026#34; }\n        \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e queryData \u003cspan\u003e=\u003c/span\u003e body\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eusing\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003eutf8\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ehttpBody \u003cspan\u003e=\u003c/span\u003e queryData\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003e// If we\u0026#39;re going all in on SociableWeaver we can make a similar initializer that takes a `Weave` parameter instead of a `String`.\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow if you\u0026#39;d like to use \u003ccode\u003eURLSession.DataTaskPublisher\u003c/code\u003e you\u0026#39;re free to by creating a \u003ccode\u003eURLRequest\u003c/code\u003e from our new initializer and using it, but you can also return a \u003ccode\u003eURLSession.DataTask\u003c/code\u003e or any other reason mechanism that involves a \u003ccode\u003eURLRequest\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eURLSession\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egraphQLRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e query\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eURLSession\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eDataTaskPublisher\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e request \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eURLRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e url\u003cspan\u003e,\u003c/span\u003e graphQLQuery\u003cspan\u003e:\u003c/span\u003e query\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edataTaskPublisher\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e request\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egraphQLRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e query\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eWeave\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eURLSession\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eDataTaskPublisher\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egraphQLRequest\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eurl\u003cspan\u003e:\u003c/span\u003e url\u003cspan\u003e,\u003c/span\u003e query\u003cspan\u003e:\u003c/span\u003e query\u003cspan\u003e.\u003c/span\u003edescription\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThat looks a lot cleaner, and our responsibilities seem a lot more well-divided.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003e\u003cspan\u003e\n\u003ca href=\"https://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/3694a/not-using-apollo.jpg\" target=\"_blank\" rel=\"noopener\"\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cpicture\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/fc615/not-using-apollo.avif 243w,\nhttps://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/b3175/not-using-apollo.avif 485w,\nhttps://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/006d3/not-using-apollo.avif 970w,\nhttps://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/18276/not-using-apollo.avif 1054w\" sizes=\"(max-width: 970px) 100vw, 970px\" type=\"image/avif\"/\u003e\u003csource srcset=\"https://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/0e3e2/not-using-apollo.webp 243w,\nhttps://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/749af/not-using-apollo.webp 485w,\nhttps://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/dbca2/not-using-apollo.webp 970w,\nhttps://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/d7d7f/not-using-apollo.webp 1054w\" sizes=\"(max-width: 970px) 100vw, 970px\" type=\"image/webp\"/\u003e\n\u003csource srcset=\"https://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/3f316/not-using-apollo.jpg 243w,\nhttps://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/0d3a1/not-using-apollo.jpg 485w,\nhttps://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/ec7ce/not-using-apollo.jpg 970w,\nhttps://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/3694a/not-using-apollo.jpg 1054w\" sizes=\"(max-width: 970px) 100vw, 970px\" type=\"image/jpeg\"/\u003e\n\u003cimg src=\"https://fabisevi.ch/static/b08ba9dc0b0d41a9a4982798800ac1d2/ec7ce/not-using-apollo.jpg\" alt=\"A text message saying \u0026#34;Take that multi-million dollar company, not gonna use your so called library.\u0026#34;\" title=\"A text message saying \u0026#34;Take that multi-million dollar company, not gonna use your so called library.\u0026#34;\" loading=\"lazy\" decoding=\"async\"/\u003e\n\u003c/picture\u003e\n\u003c/a\u003e\n\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eIs there room for tools like Apollo? Absolutely! I\u0026#39;m not going to pretend that my dozen lines of code replaces the value that a multimillion dollar company provides. (I\u0026#39;ll only make sick jokes about it.) But before importing a library like Apollo, any library really, it\u0026#39;s worth asking yourself whether you need a big solution for a small problem. Or maybe question the better question to ask before that is, have you really understood the problem you\u0026#39;re trying to solve?\u003c/p\u003e\n\u003cp\u003eBut we still haven\u0026#39;t really answered where exactly we should put the U in GraphQL. (I say after the Q since Q is almost always followed by U, but I\u0026#39;m \u003ca href=\"https://twitter.com/mergesort\"\u003eopen to feedback\u003c/a\u003e on that or the rest of this post.)\u003c/p\u003e\n\u003c/div\u003e\u003cp\u003eJoe Fabisevich is an indie developer creating software at \u003ca href=\"https://redpanda.club\"\u003eRed Panda Club Inc.\u003c/a\u003e while writing about design, development, and building a company. Formerly an iOS developer working on societal issues \u003ca href=\"https://threads.net/mergesort\"\u003e@Twitter\u003c/a\u003e. These days I don\u0026#39;t tweet, but I do post on \u003ca href=\"https://threads.net/mergesort\"\u003eThreads\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLike my writing? You can keep up with it in your favorite \u003ca href=\"https://fabisevi.ch/feed.xml\"\u003eRSS\u003c/a\u003e reader, or get posts \u003ca href=\"https://mailchi.mp/3237be1819ae/fabisevich-blog-posts\"\u003eemailed\u003c/a\u003e in newsletter form. I promise to never spam you or send you anything other than my posts, it\u0026#39;s just a way for you to read my writing wherever\u0026#39;s most comfortable for you.\u003c/p\u003e\u003cp\u003eIf you\u0026#39;d like to know more, wanna talk, or need some advice, feel free to sign up for \u003ca href=\"https://cal.com/mergesort/office-hours\"\u003eoffice hours\u003c/a\u003e, I\u0026#39;m very friendly. ðŸ™‚\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
