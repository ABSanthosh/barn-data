{
  "id": "28086ed8-4b54-4963-9926-b96a9c713b5d",
  "title": "Adding thumbnails with PDFKit",
  "link": "https://atomicbird.com/blog/pdfkit-thumbnails/",
  "description": "Today I’m continuing with some ideas from my recent post about using PDFKit. In that post I was using a custom PDF view for an app that would work something like a basic slide presentation app. Part of that was adding a thumbnail view with PDFThumbnailView, which ended up looking like this. PDFThumbnailView works with a PDFView and generates thumbnails for pages in the current document. You can tell it how big the thumbnails should be and whether to arrange the thumbnails horiontally or vertically, but that’s about it as far as layout goes.",
  "author": "",
  "published": "Wed, 15 Apr 2020 00:00:00 +0000",
  "source": "https://atomicbird.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 6006,
  "excerpt": "Today I’m continuing with some ideas from my recent post about using PDFKit. In that post I was using a custom PDF view for an app that would work something like a basic slide presentation app. Part of that was adding a thumbnail view with PDFThumbnailView, which ended up looking like this. PDFThumbnailView works with a PDFView and generates thumbnails for pages in the current document. You can tell it how big the thumbnails should be and whether to arrange the thumbnails horiontally or vertically, but that’s about it as far as layout goes.",
  "siteName": "Title",
  "favicon": "https://atomicbird.com/apple-touch-icon-144-precomposed.png",
  "text": "Today I’m continuing with some ideas from my recent post about using PDFKit. In that post I was using a custom PDF view for an app that would work something like a basic slide presentation app. Part of that was adding a thumbnail view with PDFThumbnailView, which ended up looking like this. PDFThumbnailView works with a PDFView and generates thumbnails for pages in the current document. You can tell it how big the thumbnails should be and whether to arrange the thumbnails horiontally or vertically, but that’s about it as far as layout goes. As you can see above, if there are more slides than fit in the view, the view shows thumbnails of pages at regular intervals in the document. My test document is 50 pages, so I end up with pages 1, 11, 21, 30, 40, and 50 always visible in the thumbnail view. If you tap and hold you can drag to any page, so all pages are available, just not always visible. By the way, I’m using a 50 page test PDF I made that just shows the current page number, which is super handy for testing. Feel free to get a copy if you can use it. But I want to see every page That works OK but if I’m looking for a specific page in a presentation, I’d prefer to see thumbnails of every slide in a scrolling list, like in actual presentation apps. So let’s make it bigger. And since it’ll be too big to fit on the screen, let’s put it in a scroll view. First I’ll change the constraints on the thumbnail view to make it wide enough to accomodate all the slides. Back in my previous PDFKit post I configured the thumbnail view. Now I’ll change to use these constraints. NSLayoutConstraint.activate([ pdfThumbnailView.heightAnchor.constraint(equalToConstant: CGFloat(thumbnailSize)), pdfThumbnailView.widthAnchor.constraint(equalToConstant: CGFloat(pdfDocument.pageCount*thumbnailSize)) ]) The height is the same, but the width is the thumbnail size multiplied by the number of pages– which should be enough to contain every page in the document. I’ll deal with position in a bit. Next I’ll create the scroll view and add the thumbnail view as its only subview. I’m leaving out things like background color to keep it simple here. var pdfThumbnailScrollView = UIScrollView() pdfThumbnailScrollView.translatesAutoresizingMaskIntoConstraints = false pdfThumbnailScrollView.addSubview(pdfThumbnailView) Finally I’ll add some constraints so the scroll view and the thumbnail view know how to lay themselves out. The scroll view only has one subview, so I constrain it to fit. I’m not using my addSubviewAndConstrain function from the previous post here because I need the width to be the value I configured earlier. NSLayoutConstraint.activate([ pdfThumbnailView.leadingAnchor.constraint(equalTo: pdfThumbnailScrollView.leadingAnchor), pdfThumbnailView.trailingAnchor.constraint(equalTo: pdfThumbnailScrollView.trailingAnchor), pdfThumbnailView.topAnchor.constraint(equalTo: pdfThumbnailScrollView.topAnchor), pdfThumbnailView.bottomAnchor.constraint(equalTo: pdfThumbnailScrollView.bottomAnchor) ]) Add the scroll view to the view hierarchy, and that’s it! Well… almost. It looks good at first, but as you go through the document, something weird happens. Near the beginning of the document it’s exactly right. But as you go through the document, the larger thumbnail for the current page gets skewed off center. Near the end of the document it’s off by nearly a full thumbnail. You end up with the same page number appearing twice with different sizes. Not good. And not buggy because of any documented requirements I’m not meeting. I experimented with a few random-seeming changes hoping for a fix (a bit of shotgun debugging) and eventually found that if I made the thumbnail view wider, the problem disappeared. Why though? It should be big enough. I guessed that this might be due to spacing between thumbnail images. I can choose what size thumbnail I want, but I can’t tell the thumbnail view anything else about its layout. So maybe there’s some padding between thumbnails I should account for? I took a couple of screenshots and examined them with xScope and found that this was the case. The horizontal distance from one thumbnail to the next was 2 pixels more than the thumbnail width. My thumbnail view was not quite wide enough to hold all the thumbnails. But I still couldn’t be sure that this was what caused the off-center thumbnails. Let’s try it out. I’ll add a variable to hold the extra padding, and then modify the thumbnail view’s width constraint to use it. let pdfThumbnailPerPagePadding = 2 // ...later... pdfThumbnailView.widthAnchor.constraint(equalToConstant: CGFloat(pdfDocument.pageCount*(thumbnailSize + pdfThumbnailPerPagePadding))) The width is now the number of pages multiplied by the thumbnail width plus a fudge factor for every page. I gave it a try, and… Yes! That was it. A little extra width was all the layout needed. All thumbnails are visible in a scrolling view, and the current page’s thumbnail is exactly where it should be. One detail I don’t completely understand is that I needed to add the extra padding once per page. If it’s necessary because of space between thumbnails, it seems like the padding should appear pdfDocument.pageCount - 1 times. Doing it that way still has layout issues though– it has to be at least pdfDocument.pageCount times. I speculate that there’s a bit of padding before the first thumbnail and after the last one, but I can’t be sure. Caution, bugs may exist Of course this is all based on my observations of how PDFThumbnailView currently works. Sicne this isn’t documented, it could change in the next version of iOS and break my layout. It’s a risk and I’ll have to test on beta iOS releases. I’m also not certain that I’m using PDFThumbnailView as intended here, so maybe this isn’t even supposed to work and I’ve just stumbled across something that makes it do what I want. Regardless, I filed FB7379442 with Apple in the hope that these details will someday become clear.",
  "image": "https://atomicbird.com/blog/pdfkit-thumbnails/pdfthumbnail-page-48-bad.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \u003cp\u003eToday I’m continuing with some ideas from \u003ca href=\"https://atomicbird.com/blog/pdfkit-basics/\"\u003emy recent post about using PDFKit\u003c/a\u003e. In that post I was using a custom PDF view for an app that would work something like a basic slide presentation app.\u003c/p\u003e\n\u003cp\u003ePart of that was adding a thumbnail view with \u003ccode\u003ePDFThumbnailView\u003c/code\u003e, which ended up looking like this.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://atomicbird.com/blog/pdfkit-basics/PDFThumbnailView-step-1.png#center75\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePDFThumbnailView\u003c/code\u003e works with a \u003ccode\u003ePDFView\u003c/code\u003e and generates thumbnails for pages in the current document. You can tell it how big the thumbnails should be and whether to arrange the thumbnails horiontally or vertically, but that’s about it as far as layout goes.\u003c/p\u003e\n\u003cp\u003eAs you can see above, if there are more slides than fit in the view, the view shows thumbnails of pages at regular intervals in the document. My test document is 50 pages, so I end up with pages 1, 11, 21, 30, 40, and 50 always visible in the thumbnail view. If you tap and hold you can drag to any page, so all pages are available, just not always visible.\u003c/p\u003e\n\u003cp\u003e\u003ciframe src=\"https://player.vimeo.com/video/408154461?title=0\u0026amp;byline=0\u0026amp;portrait=0\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\u003c/p\u003e\n\u003cp\u003eBy the way, I’m using a 50 page test PDF I made that just shows the current page number, which is super handy for testing. \u003ca href=\"https://atomicbird.com/blog/pdfkit-thumbnails/TestSlides50.pdf\"\u003eFeel free to get a copy if you can use it.\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"but-i-want-to-see-every-page\"\u003eBut I want to see \u003cem\u003eevery\u003c/em\u003e page\u003c/h2\u003e\n\u003cp\u003eThat works OK but if I’m looking for a specific page in a presentation, I’d prefer to see thumbnails of every slide in a scrolling list, like in actual presentation apps. So let’s make it bigger. And since it’ll be too big to fit on the screen, let’s put it in a scroll view.\u003c/p\u003e\n\u003cp\u003eFirst I’ll change the constraints on the thumbnail view to make it wide enough to accomodate all the slides. Back in \u003ca href=\"https://atomicbird.com/blog/pdfkit-basics/\"\u003emy previous PDFKit post\u003c/a\u003e I configured the thumbnail view. Now I’ll change to use these constraints.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003eNSLayoutConstraint.activate([\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.heightAnchor.constraint(equalToConstant: CGFloat(thumbnailSize)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.widthAnchor.constraint(equalToConstant: CGFloat(pdfDocument.pageCount\u003cspan\u003e*\u003c/span\u003ethumbnailSize))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe height is the same, but the width is the thumbnail size multiplied by the number of pages– which should be enough to contain every page in the document. I’ll deal with position in a bit.\u003c/p\u003e\n\u003cp\u003eNext I’ll create the scroll view and add the thumbnail view as its only subview. I’m leaving out things like background color to keep it simple here.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003evar\u003c/span\u003e pdfThumbnailScrollView = UIScrollView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003epdfThumbnailScrollView.translatesAutoresizingMaskIntoConstraints = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003epdfThumbnailScrollView.addSubview(pdfThumbnailView)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFinally I’ll add some constraints so the scroll view and the thumbnail view know how to lay themselves out. The scroll view only has one subview, so I constrain it to fit. I’m not using my \u003ccode\u003eaddSubviewAndConstrain\u003c/code\u003e function from the previous post here because I need the width to be the value I configured earlier.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003eNSLayoutConstraint.activate([\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.leadingAnchor.constraint(equalTo: pdfThumbnailScrollView.leadingAnchor),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.trailingAnchor.constraint(equalTo: pdfThumbnailScrollView.trailingAnchor),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.topAnchor.constraint(equalTo: pdfThumbnailScrollView.topAnchor),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.bottomAnchor.constraint(equalTo: pdfThumbnailScrollView.bottomAnchor)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAdd the scroll view to the view hierarchy, and that’s it!\u003c/p\u003e\n\u003cp\u003eWell… almost. It looks good at first, but as you go through the document, something weird happens. Near the beginning of the document it’s exactly right.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://atomicbird.com/blog/pdfkit-thumbnails/pdfthumbnail-page-5-ok.png#center75\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eBut as you go through the document, the larger thumbnail for the current page gets skewed off center. Near the end of the document it’s off by nearly a full thumbnail. You end up with the same page number appearing twice with different sizes.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://atomicbird.com/blog/pdfkit-thumbnails/pdfthumbnail-page-48-bad.png#center75\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eNot good. And not buggy because of any documented requirements I’m not meeting.\u003c/p\u003e\n\u003cp\u003eI experimented with a few random-seeming changes hoping for a fix (a bit of \u003ca href=\"https://en.wikipedia.org/wiki/Shotgun_debugging\"\u003eshotgun debugging\u003c/a\u003e) and eventually found that if I made the thumbnail view wider, the problem disappeared. Why though? It should be big enough. I guessed that this might be due to spacing between thumbnail images. I can choose what size thumbnail I want, but I can’t tell the thumbnail view anything else about its layout. So maybe there’s some padding between thumbnails I should account for?\u003c/p\u003e\n\u003cp\u003eI took a couple of screenshots and examined them with \u003ca href=\"https://xscopeapp.com/\"\u003exScope\u003c/a\u003e and found that this was the case. The horizontal distance from one thumbnail to the next was 2 pixels more than the thumbnail width. My thumbnail view was not quite wide enough to hold all the thumbnails. But I still couldn’t be sure that this was what caused the off-center thumbnails.\u003c/p\u003e\n\u003cp\u003eLet’s try it out. I’ll add a variable to hold the extra padding, and then modify the thumbnail view’s width constraint to use it.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e pdfThumbnailPerPagePadding = \u003cspan\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// ...later...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.widthAnchor.constraint(equalToConstant: CGFloat(pdfDocument.pageCount\u003cspan\u003e*\u003c/span\u003e(thumbnailSize \u003cspan\u003e+\u003c/span\u003e pdfThumbnailPerPagePadding)))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe width is now the number of pages multiplied by the thumbnail width \u003cem\u003eplus a fudge factor for every page\u003c/em\u003e. I gave it a try, and…\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://atomicbird.com/blog/pdfkit-thumbnails/pdfthumbnail-page-48-good.png#center75\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eYes! That was it. A little extra width was all the layout needed. All thumbnails are visible in a scrolling view, and the current page’s thumbnail is exactly where it should be.\u003c/p\u003e\n\u003cp\u003eOne detail I don’t completely understand is that I needed to add the extra padding once per page. If it’s necessary because of space between thumbnails, it seems like the padding should appear \u003ccode\u003epdfDocument.pageCount - 1\u003c/code\u003e times. Doing it that way still has layout issues though– it has to be at least \u003ccode\u003epdfDocument.pageCount\u003c/code\u003e times. I speculate that there’s a bit of padding before the first thumbnail and after the last one, but I can’t be sure.\u003c/p\u003e\n\u003ch2 id=\"caution-bugs-may-exist\"\u003eCaution, bugs may exist\u003c/h2\u003e\n\u003cp\u003eOf course this is all based on my observations of how \u003ccode\u003ePDFThumbnailView\u003c/code\u003e currently works. Sicne this isn’t documented, it could change in the next version of iOS and break my layout. It’s a risk and I’ll have to test on beta iOS releases.\u003c/p\u003e\n\u003cp\u003eI’m also not certain that I’m using \u003ccode\u003ePDFThumbnailView\u003c/code\u003e as intended here, so maybe this isn’t even supposed to work and I’ve just stumbled across something that makes it do what I want. Regardless, I filed FB7379442 with Apple in the hope that these details will someday become clear.\u003c/p\u003e\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2020-04-15T00:00:00Z",
  "modifiedTime": "2020-04-15T00:00:00Z"
}
