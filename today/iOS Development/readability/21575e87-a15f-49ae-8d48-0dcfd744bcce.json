{
  "id": "21575e87-a15f-49ae-8d48-0dcfd744bcce",
  "title": "Migrating an iOS app to SwiftUI - Database with Realm",
  "link": "https://benoitpasquier.com/migrating-ios-app-swiftui-part-2-realm-database/",
  "description": "To move an existing iOS app codebase to SwiftUI can quickly become a challenge if we don’t scope the difficulties ahead. After covering the navigation and design layer last week, it’s time to dive deeper into the logic and handle the code migration for a database and the user preferences.",
  "author": "",
  "published": "Mon, 15 Feb 2021 08:00:00 +0000",
  "source": "https://benoitpasquier.com/index.xml",
  "categories": null,
  "byline": "Benoit Pasquier",
  "length": 12678,
  "excerpt": "To move an existing iOS app codebase to SwiftUI can quickly become a challenge if we don’t scope the difficulties ahead. After covering the navigation and design layer last week, it’s time to dive deeper into the logic and handle the code migration for a database and the user preferences.",
  "siteName": "Benoit Pasquier",
  "favicon": "https://benoitpasquier.com/favicon.png",
  "text": "February 15, 2021 in Swift To move an existing iOS app codebase to SwiftUI can quickly become a challenge if we don’t scope the difficulties ahead. After covering the navigation and design layer last week, it’s time to dive deeper into the logic and handle the code migration for a database and the user preferences. If you’ve missed it, have a look at the first part, covering navigation and storyboards. My current app relies on two type of data storage: a database for the user’s content and another storage fo the app preferences. We’ll look into moving the existing logic to a more friendly integration to SwiftUI. User Defaults For app preferences, UserDefaults is almost always the “go to”. It’s a good fit for non sensitive data or content that doesn’t require to be persisted on a very long term. In my previous version, I created a struct to wrap around the UserDefaults and makes it easier to handle the key access. However, for SwiftUI content, to send and observe new values, it requires to convert it to an ObservableObject which also requires a class. // old code struct UserHelper { static var isOnboarded : Bool { get { return UserDefaults.standard.bool(forKey: \"onboard\") } set { UserDefaults.standard.set(newValue, forKey: \"onboard\") } } } // new code class UserHelper: ObservableObject { @Published var isOnboarded: Bool { didSet { UserDefaults.standard.set(isOnboarded, forKey: \"onboard\") } } init() { isOnboarded = UserDefaults.standard.bool(forKey: \"onboard\") } } When initialized, I want to make sure I had the latest values, but when setting a new one, I want ideally that the current observer and the record are both been updated. On the view layer, the AppDelegate handled the user flow to know what view controller to present (remember the app is very small, I wouldn’t advise this at scale). I need to do something very similar for my SwiftUI App structure. Good thing is that SwiftUI has its own property wrapper to observe UserDefaults which is @AppStorage. @main struct AppyApp: App { @AppStorage(\"onboard\") var isOnboarded = false var body: some Scene { WindowGroup { NavigationView { if !isOnboarded { OnboardingFirstView() .navigationBarTitleDisplayMode(.inline) } else { DashboardView() .navigationBarTitleDisplayMode(.inline) } } } } } That makes my life much easier. When the value changes (and it should change only from false to true), the app will automatically update the main view of our navigation stack. On the downside, we don’t have a real control about the transition, so it can feel a bit jumpy when the onboarding is completed. The rest of the user preferences will be handled similarly, we can move on to the database with Realm. Database with Realm The app is designed to help people quit their bad habits, so the user needs to log his progress on daily basis. These records are added to a local encrypted database. For this, I’ve used Realm database. The very first step is to update the data model to use a unique identifier. It was implicit before, but with SwiftUI, it’s important to highlight it to make identifiable later on. import RealmSwift class Activity : Object, ObjectKeyIdentifiable { /// The unique ID of the Item. @objc dynamic var _id = ObjectId.generate() @objc dynamic var name : String = \"\" @objc dynamic var isActive = false let logs = RealmSwift.List\u003cLog\u003e() override class func primaryKey() -\u003e String? { \"_id\" } // ... } I use to have a specific class to handle all the data transactions, either for reading or writing. It also helped me initialize the database for the first launch. Since the goal is to integrate it to SwiftUI, moving this logic to use Combine framework instead of closures does make sense, hoping to take advantage of the chaining of events and asynchronous requests. Here is the higher level. import RealmSwift // old code protocol ActivityDatastoreProtocol { var activeActivity : Activity? { get } func getActivities() -\u003e Results\u003cActivity\u003e func addActivity(_ title: String, completion: ((Bool) -\u003e())?) } // new code protocol ActivityDataStorageObservable { var activeActivity: Activity? { get } func getActivities() -\u003e AnyPublisher\u003c[Activity], Never\u003e func addActivity(_ title: String) -\u003e AnyPublisher\u003cVoid, Error\u003e } Since writing into the database can fail, I’ll take advantage of the Fail and failure() signal to raise the error and terminate the stream of events. class DataStorage { private let realm: Realm private var cancellables: Set\u003cAnyCancellable\u003e init() { realm = try! Realm() cancellables = Set\u003cAnyCancellable\u003e() } // ... private func write(writeClosure: @escaping (Realm) -\u003e ()) -\u003e AnyPublisher\u003cVoid, Error\u003e { Future { [weak self] promise in guard let self = self else { return promise(.failure(NeverError.never)) } do { try self.realm.write { writeClosure(self.realm) } return promise(.success(())) } catch { print(\"Could not write to database: \", error) return promise(.failure(error)) } } .eraseToAnyPublisher() } } I chose Future here because it felt a bit more elegant to handle success and failure content. However, it requires to weakify self to avoid keeping a strong reference to my class. There were other alternatives, using Just and Fail like the following to avoid creating extra closures. // alt code private func write(writeClosure: (Realm) -\u003e ()) -\u003e AnyPublisher\u003cVoid, Error\u003e { do { try realm.write { writeClosure(realm) } return Just(()) .setFailureType(to: Error.self) .eraseToAnyPublisher() } catch { print(\"Could not write to database: \", error) return Fail(error: error) .eraseToAnyPublisher() } } You might notice that it also need an extra care to handle the error even when it succeed. Well, since we specified an AnyPublisher\u003cVoid, Error\u003e, the compiler is expecting an error type returned, where Just should never fail and uses Never, so it won’t compile as is. I found different solutions to work around, one is changing the type like above, but you could map the error to a custom one or create a specific Result.Publisher. // option 2 return Just(()) .mapError({ _ in NeverError.never }) .eraseToAnyPublisher() // option 3 return Result.Publisher(.success(())) .eraseToAnyPublisher() There might be more solutions, I’ll let you decide what fits best. Then we can wrap up the implementation. extension DataStorage: ActivityDataStorageObservable { var activeActivity: Activity? { realm.objects(Activity.self) .filter({ $0.isActive }) .first } func getActivities() -\u003e AnyPublisher\u003c[Activity], Never\u003e { Just(realm.objects(Activity.self)) .map({ Array($0) }) .eraseToAnyPublisher() } func addActivity(_ title: String) -\u003e AnyPublisher\u003cVoid, Error\u003e { write { realm in realm.create(Activity.self, value: [ObjectId.generate(), title]) } } } Regarding Results in Realm SDK, if it’s for a listing view only, I would suggest to use freeze() to make sure the data record stays immutable, but in my case getActivities() will help defined what activty is active for the rest of the app usage, so I’ll use without. The class is now reactive, I can start using it through my project. SwiftUI \u0026 Realm Back to the view layer, the first step will be to list the available activities during the onboarding. I will also need to set the selected one as active. For this part, I’ll follow an Input/Output approach where the selected item will be our input, and the list of activities our output. class OnboardingViewModel: ObservableObject { let selectedItem = PassthroughSubject\u003cActivity, Never\u003e() @Published var activities: [Activity] = [] @AppStorage(\"onboard\") var isOnboarded = false private let dataStorage = DataStorage() private var cancellables = Set\u003cAnyCancellable\u003e() init() { setupBindings() } func setupBindings() { selectedItem .sink(receiveCompletion: { _ in }, receiveValue: { [weak self] activity in // turn activity as active self?.userHelper.isOnboarded = true }) .store(in: \u0026cancellables) } func loadActivities() { dataStorage.getActivities() .assign(to: \u0026$activities) } } We can finally bind the activities to our list. struct OnboardingSecondView: View { @ObservedObject var viewModel = OnboardingViewModel() var body: some View { ZStack { defaultBackgroundView VStack(alignment: .leading, spacing: 30, content: { Text(L10n.onboardingChooseTitle.withNoOrphan) .modifier(TitleModifier()) ScrollView { LazyVStack { ForEach(viewModel.activities) { item in ActivityRowView(activity: item) .onTapGesture { viewModel.selectedItem.send(item) } } createButton } } }) .padding() } .onAppear(perform: { viewModel.loadActivities() }) } var createButton: some View { NavigationLink(\"Create my own\", destination: AddActivityView()) .font(.custom(AppFont.bold.name, size: 27)) .foregroundColor(.white) .frame(maxWidth: .infinity, minHeight: 90, alignment: .center) } } One thing I really like here is to avoid using the constructor of my view to load the activities. I discover that we can make the view a bit smarter and rely on its life cycle using onAppear. Since we don’t have UITableViewDelegate to handle the selection, I’ve used .onTapGesture to forward the selection back to the view model. Finally, the ForEach will handle to display the activities. It works nicely here because the data model has its own identifier. I’ll follow a similar approach throughout the rest of the project, to get the latest activity and records and add new one. Before leaving, here is a couple of thoughts during this storage migration to keep in mind. If handling the user preferences was straightforward, Realm came with its own set of challenges and it mostly comes from the design architecture. To be more reactive, I wanted to take advantage of Combine framework and make Realm’s highest implementation a bit better to observe and react to. However, that’s not what really happened in my code. Even if reading and writing data is asynchronous, Realm SDK doesn’t return observables or closures like any observer design pattern. I believe this is why we can find open source project to bridge the gap, like RxRealm for RxSwift and CombineRealm for Combine framework. let realm = try! Realm() let colors = realm.objects(Color.self)) RealmPublishers.array(from: colors) .addToRealm() I believe that keeping my first data storage implementation without reactive layer could have been much easier to use. At the end, the view model passes the content via @Published which avoid exposing the heavy lifting to the view. It’s important to know where you want to land before starting your own code migration to avoid creating layer of complexity. Remember, no silver bullet. Of course, if you are using CoreData or any other framework, paired with any architectural design pattern, maybe it makes sense to be reactive with SwiftUI. It’s good to experiment in a smaller part of your code first to understand those limits. In conclusion, we managed to read and write content using UserDefaults and Realm SDK and to store information for the app usage, still using SwiftUI and getting rid of old implementation when possible. Last step would be to wrap up any leftover logic and getting into unit testing. Happy coding.",
  "image": "https://benoitpasquier.com/images/2019/08/appy-ios-app.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n  \n    \n  \n  \n  \u003cp\u003e\u003ctime itemprop=\"datePublished\" datetime=\"2021-02-15T08:00:00Z\"\u003e\n        \n  February 15, 2021\n\n      \u003c/time\u003e\n    \n    \n  \n  \n    \u003cspan\u003ein\u003c/span\u003e\n    \n      \u003ca href=\"https://benoitpasquier.com/categories/swift\"\u003eSwift\u003c/a\u003e\n    \n  \n\n  \u003c/p\u003e\n\n\u003c/div\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n              \u003cp\u003eTo move an existing iOS app codebase to SwiftUI can quickly become a challenge if we don’t scope the difficulties ahead. After covering the navigation and design layer last week, it’s time to dive deeper into the logic and handle the code migration for a database and the user preferences.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIf you’ve missed it, have a look at the first part, covering \u003ca href=\"https://benoitpasquier.com/migrating-ios-app-swiftui-part-1/\"\u003enavigation and storyboards\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://benoitpasquier.com/images/2019/08/appy-ios-app.png\" alt=\"appy-migration-swiftui\"/\u003e\u003c/p\u003e\n\u003cp\u003eMy current app relies on two type of data storage: a database for the user’s content and another storage fo the app preferences. We’ll look into moving the existing logic to a more friendly integration to SwiftUI.\u003c/p\u003e\n\u003ch2 id=\"user-defaults\"\u003eUser Defaults\u003c/h2\u003e\n\u003cp\u003eFor app preferences, \u003ccode\u003eUserDefaults\u003c/code\u003e is almost always the “go to”. It’s a good fit for non sensitive data or content that doesn’t require to be persisted on a very long term.\u003c/p\u003e\n\u003cp\u003eIn my previous version, I created a struct to wrap around the \u003ccode\u003eUserDefaults\u003c/code\u003e and makes it easier to handle the key access. However, for SwiftUI content, to send and observe new values, it requires to convert it to an \u003ccode\u003eObservableObject\u003c/code\u003e which also requires a class.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// old code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eUserHelper\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eisOnboarded\u003c/span\u003e : \u003cspan\u003eBool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eUserDefaults\u003c/span\u003e.\u003cspan\u003estandard\u003c/span\u003e.\u003cspan\u003ebool\u003c/span\u003e(\u003cspan\u003eforKey\u003c/span\u003e: \u003cspan\u003e\u0026#34;onboard\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eset\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eUserDefaults\u003c/span\u003e.\u003cspan\u003estandard\u003c/span\u003e.\u003cspan\u003eset\u003c/span\u003e(\u003cspan\u003enewValue\u003c/span\u003e, \u003cspan\u003eforKey\u003c/span\u003e: \u003cspan\u003e\u0026#34;onboard\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    } \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// new code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eUserHelper\u003c/span\u003e: \u003cspan\u003eObservableObject\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003ePublished\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eisOnboarded\u003c/span\u003e: \u003cspan\u003eBool\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003edidSet\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eUserDefaults\u003c/span\u003e.\u003cspan\u003estandard\u003c/span\u003e.\u003cspan\u003eset\u003c/span\u003e(\u003cspan\u003eisOnboarded\u003c/span\u003e, \u003cspan\u003eforKey\u003c/span\u003e: \u003cspan\u003e\u0026#34;onboard\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eisOnboarded\u003c/span\u003e = \u003cspan\u003eUserDefaults\u003c/span\u003e.\u003cspan\u003estandard\u003c/span\u003e.\u003cspan\u003ebool\u003c/span\u003e(\u003cspan\u003eforKey\u003c/span\u003e: \u003cspan\u003e\u0026#34;onboard\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen initialized, I want to make sure I had the latest values, but when setting a new one, I want ideally that the current observer and the record are both been updated.\u003c/p\u003e\n\u003cp\u003eOn the view layer, the \u003ccode\u003eAppDelegate\u003c/code\u003e handled the user flow to know what view controller to present (remember the app is very small, I wouldn’t advise this at scale). I need to do something very similar for my SwiftUI \u003ccode\u003eApp\u003c/code\u003e structure.\u003c/p\u003e\n\u003cp\u003eGood thing is that SwiftUI has its own property wrapper to observe \u003ccode\u003eUserDefaults\u003c/code\u003e which is \u003ccode\u003e@AppStorage\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e@\u003cspan\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eAppyApp\u003c/span\u003e: \u003cspan\u003eApp\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eAppStorage\u003c/span\u003e(\u003cspan\u003e\u0026#34;onboard\u0026#34;\u003c/span\u003e) \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eisOnboarded\u003c/span\u003e = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e: \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eScene\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eWindowGroup\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eNavigationView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e!\u003c/span\u003e\u003cspan\u003eisOnboarded\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003eOnboardingFirstView\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        .\u003cspan\u003enavigationBarTitleDisplayMode\u003c/span\u003e(.\u003cspan\u003einline\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                } \u003cspan\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003eDashboardView\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        .\u003cspan\u003enavigationBarTitleDisplayMode\u003c/span\u003e(.\u003cspan\u003einline\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat makes my life much easier. When the value changes (and it should change only from false to true), the app will automatically update the main view of our navigation stack.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eOn the downside,\u003c/em\u003e we don’t have a real control about the transition, so it can feel a bit jumpy when the onboarding is completed.\u003c/p\u003e\n\u003cp\u003eThe rest of the user preferences will be handled similarly, we can move on to the database with Realm.\u003c/p\u003e\n\u003ch2 id=\"database-with-realm\"\u003eDatabase with Realm\u003c/h2\u003e\n\u003cp\u003eThe app is designed to help people quit their bad habits, so the user needs to log his progress on daily basis. These records are added to a local encrypted database. For this, I’ve used \u003ca href=\"https://docs.mongodb.com/realm/sdk/\"\u003eRealm\u003c/a\u003e database.\u003c/p\u003e\n\u003cp\u003eThe very first step is to update the data model to use a unique identifier. It was implicit before, but with SwiftUI, it’s important to highlight it to make identifiable later on.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eRealmSwift\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eActivity\u003c/span\u003e : \u003cspan\u003eObject\u003c/span\u003e, \u003cspan\u003eObjectKeyIdentifiable\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e/// The unique ID of the Item.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e@objc\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003e_id\u003c/span\u003e = \u003cspan\u003eObjectId\u003c/span\u003e.\u003cspan\u003egenerate\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e@objc\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e : \u003cspan\u003eString\u003c/span\u003e = \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e@objc\u003c/span\u003e \u003cspan\u003edynamic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eisActive\u003c/span\u003e = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003elogs\u003c/span\u003e = \u003cspan\u003eRealmSwift\u003c/span\u003e.\u003cspan\u003eList\u003c/span\u003e\u0026lt;\u003cspan\u003eLog\u003c/span\u003e\u0026gt;()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eprimaryKey\u003c/span\u003e() -\u0026gt; \u003cspan\u003eString\u003c/span\u003e? {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e\u0026#34;_id\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e   \u003cspan\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI use to have a specific class to handle all the data transactions, either for reading or writing. It also helped me initialize the database for the first launch.\u003c/p\u003e\n\u003cp\u003eSince the goal is to integrate it to SwiftUI, moving this logic to use Combine framework instead of closures does make sense, hoping to take advantage of the chaining of events and asynchronous requests.\u003c/p\u003e\n\u003cp\u003eHere is the higher level.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003eRealmSwift\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// old code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eprotocol\u003c/span\u003e \u003cspan\u003eActivityDatastoreProtocol\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eactiveActivity\u003c/span\u003e : \u003cspan\u003eActivity\u003c/span\u003e? { \u003cspan\u003eget\u003c/span\u003e }  \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egetActivities\u003c/span\u003e() -\u0026gt; \u003cspan\u003eResults\u003c/span\u003e\u0026lt;\u003cspan\u003eActivity\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eaddActivity\u003c/span\u003e(\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003etitle\u003c/span\u003e: \u003cspan\u003eString\u003c/span\u003e, \u003cspan\u003ecompletion\u003c/span\u003e: ((\u003cspan\u003eBool\u003c/span\u003e) -\u0026gt;())?)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// new code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eprotocol\u003c/span\u003e \u003cspan\u003eActivityDataStorageObservable\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eactiveActivity\u003c/span\u003e: \u003cspan\u003eActivity\u003c/span\u003e? { \u003cspan\u003eget\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egetActivities\u003c/span\u003e() -\u0026gt; \u003cspan\u003eAnyPublisher\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e[\u003cspan\u003eActivity\u003c/span\u003e], \u003cspan\u003eNever\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eaddActivity\u003c/span\u003e(\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003etitle\u003c/span\u003e: \u003cspan\u003eString\u003c/span\u003e) -\u0026gt; \u003cspan\u003eAnyPublisher\u003c/span\u003e\u0026lt;\u003cspan\u003eVoid\u003c/span\u003e, \u003cspan\u003eError\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSince writing into the database can fail, I’ll take advantage of the \u003ccode\u003eFail\u003c/code\u003e and \u003ccode\u003efailure()\u003c/code\u003e signal to raise the error and terminate the stream of events.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eDataStorage\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003erealm\u003c/span\u003e: \u003cspan\u003eRealm\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecancellables\u003c/span\u003e: \u003cspan\u003eSet\u003c/span\u003e\u0026lt;\u003cspan\u003eAnyCancellable\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003erealm\u003c/span\u003e = \u003cspan\u003etry\u003c/span\u003e! \u003cspan\u003eRealm\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ecancellables\u003c/span\u003e = \u003cspan\u003eSet\u003c/span\u003e\u0026lt;\u003cspan\u003eAnyCancellable\u003c/span\u003e\u0026gt;()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e// ...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ewrite\u003c/span\u003e(\u003cspan\u003ewriteClosure\u003c/span\u003e: @\u003cspan\u003eescaping\u003c/span\u003e (\u003cspan\u003eRealm\u003c/span\u003e) -\u0026gt; ()) -\u0026gt; \u003cspan\u003eAnyPublisher\u003c/span\u003e\u0026lt;\u003cspan\u003eVoid\u003c/span\u003e, \u003cspan\u003eError\u003c/span\u003e\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eFuture\u003c/span\u003e { [\u003cspan\u003eweak\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e] \u003cspan\u003epromise\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eguard\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e = \u003cspan\u003eself\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003epromise\u003c/span\u003e(.\u003cspan\u003efailure\u003c/span\u003e(\u003cspan\u003eNeverError\u003c/span\u003e.\u003cspan\u003enever\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003edo\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003erealm\u003c/span\u003e.\u003cspan\u003ewrite\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003ewriteClosure\u003c/span\u003e(\u003cspan\u003eself\u003c/span\u003e.\u003cspan\u003erealm\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003epromise\u003c/span\u003e(.\u003cspan\u003esuccess\u003c/span\u003e(()))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            } \u003cspan\u003ecatch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eprint\u003c/span\u003e(\u003cspan\u003e\u0026#34;Could not write to database: \u0026#34;\u003c/span\u003e, \u003cspan\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003epromise\u003c/span\u003e(.\u003cspan\u003efailure\u003c/span\u003e(\u003cspan\u003eerror\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        .\u003cspan\u003eeraseToAnyPublisher\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI chose \u003ccode\u003eFuture\u003c/code\u003e here because it felt a bit more elegant to handle success and failure content. However, it requires to weakify \u003ccode\u003eself\u003c/code\u003e to avoid keeping a strong reference to my class. There were other alternatives, using \u003ccode\u003eJust\u003c/code\u003e and \u003ccode\u003eFail\u003c/code\u003e like the following to avoid creating extra closures.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// alt code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ewrite\u003c/span\u003e(\u003cspan\u003ewriteClosure\u003c/span\u003e: (\u003cspan\u003eRealm\u003c/span\u003e) -\u0026gt; ()) -\u0026gt; \u003cspan\u003eAnyPublisher\u003c/span\u003e\u0026lt;\u003cspan\u003eVoid\u003c/span\u003e, \u003cspan\u003eError\u003c/span\u003e\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003edo\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003etry\u003c/span\u003e \u003cspan\u003erealm\u003c/span\u003e.\u003cspan\u003ewrite\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003ewriteClosure\u003c/span\u003e(\u003cspan\u003erealm\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eJust\u003c/span\u003e(())\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003esetFailureType\u003c/span\u003e(\u003cspan\u003eto\u003c/span\u003e: \u003cspan\u003eError\u003c/span\u003e.\u003cspan\u003eself\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003eeraseToAnyPublisher\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    } \u003cspan\u003ecatch\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eprint\u003c/span\u003e(\u003cspan\u003e\u0026#34;Could not write to database: \u0026#34;\u003c/span\u003e, \u003cspan\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eFail\u003c/span\u003e(\u003cspan\u003eerror\u003c/span\u003e: \u003cspan\u003eerror\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003eeraseToAnyPublisher\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou might notice that it also need an extra care to handle the error even when it succeed. \u003cem\u003eWell\u003c/em\u003e, since we specified an \u003ccode\u003eAnyPublisher\u0026lt;Void, Error\u0026gt;\u003c/code\u003e, the compiler is expecting an error type returned, where \u003ccode\u003eJust\u003c/code\u003e should never fail and uses \u003ccode\u003eNever\u003c/code\u003e, so it won’t compile as is.\u003c/p\u003e\n\u003cp\u003eI found different solutions to work around, one is changing the type like above, but you could map the error to a custom one or create a specific \u003ccode\u003eResult.Publisher\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// option 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eJust\u003c/span\u003e(())\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    .\u003cspan\u003emapError\u003c/span\u003e({ \u003cspan\u003e_\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003eNeverError\u003c/span\u003e.\u003cspan\u003enever\u003c/span\u003e })\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    .\u003cspan\u003eeraseToAnyPublisher\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// option 3\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eResult\u003c/span\u003e.\u003cspan\u003ePublisher\u003c/span\u003e(.\u003cspan\u003esuccess\u003c/span\u003e(()))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    .\u003cspan\u003eeraseToAnyPublisher\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere might be more solutions, I’ll let you decide what fits best.\u003c/p\u003e\n\u003cp\u003eThen we can wrap up the implementation.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eDataStorage\u003c/span\u003e: \u003cspan\u003eActivityDataStorageObservable\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eactiveActivity\u003c/span\u003e: \u003cspan\u003eActivity\u003c/span\u003e? {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003erealm\u003c/span\u003e.\u003cspan\u003eobjects\u003c/span\u003e(\u003cspan\u003eActivity\u003c/span\u003e.\u003cspan\u003eself\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003efilter\u003c/span\u003e({ \u003cspan\u003e$0\u003c/span\u003e.\u003cspan\u003eisActive\u003c/span\u003e })\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003efirst\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egetActivities\u003c/span\u003e() -\u0026gt; \u003cspan\u003eAnyPublisher\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e[\u003cspan\u003eActivity\u003c/span\u003e], \u003cspan\u003eNever\u003c/span\u003e\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eJust\u003c/span\u003e(\u003cspan\u003erealm\u003c/span\u003e.\u003cspan\u003eobjects\u003c/span\u003e(\u003cspan\u003eActivity\u003c/span\u003e.\u003cspan\u003eself\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003emap\u003c/span\u003e({ \u003cspan\u003eArray\u003c/span\u003e(\u003cspan\u003e$0\u003c/span\u003e) })\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003eeraseToAnyPublisher\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eaddActivity\u003c/span\u003e(\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003etitle\u003c/span\u003e: \u003cspan\u003eString\u003c/span\u003e) -\u0026gt; \u003cspan\u003eAnyPublisher\u003c/span\u003e\u0026lt;\u003cspan\u003eVoid\u003c/span\u003e, \u003cspan\u003eError\u003c/span\u003e\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ewrite\u003c/span\u003e { \u003cspan\u003erealm\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003erealm\u003c/span\u003e.\u003cspan\u003ecreate\u003c/span\u003e(\u003cspan\u003eActivity\u003c/span\u003e.\u003cspan\u003eself\u003c/span\u003e, \u003cspan\u003evalue\u003c/span\u003e: [\u003cspan\u003eObjectId\u003c/span\u003e.\u003cspan\u003egenerate\u003c/span\u003e(), \u003cspan\u003etitle\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRegarding \u003ccode\u003eResults\u003c/code\u003e in Realm SDK, if it’s for a listing view only, I would suggest to use \u003ccode\u003efreeze()\u003c/code\u003e to make sure the data record stays immutable, but in my case \u003ccode\u003egetActivities()\u003c/code\u003e will help defined what activty is active for the rest of the app usage, so I’ll use without.\u003c/p\u003e\n\u003cp\u003eThe class is now \u003cem\u003ereactive\u003c/em\u003e, I can start using it through my project.\u003c/p\u003e\n\u003ch2 id=\"swiftui--realm\"\u003eSwiftUI \u0026amp; Realm\u003c/h2\u003e\n\u003cp\u003eBack to the view layer, the first step will be to list the available activities during the onboarding. I will also need to set the selected one as \u003cem\u003eactive\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eFor this part, I’ll follow an \u003cem\u003eInput/Output\u003c/em\u003e approach where the selected item will be our input, and the list of activities our output.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eOnboardingViewModel\u003c/span\u003e: \u003cspan\u003eObservableObject\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eselectedItem\u003c/span\u003e = \u003cspan\u003ePassthroughSubject\u003c/span\u003e\u0026lt;\u003cspan\u003eActivity\u003c/span\u003e, \u003cspan\u003eNever\u003c/span\u003e\u0026gt;()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003ePublished\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eactivities\u003c/span\u003e: [\u003cspan\u003eActivity\u003c/span\u003e] = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eAppStorage\u003c/span\u003e(\u003cspan\u003e\u0026#34;onboard\u0026#34;\u003c/span\u003e) \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eisOnboarded\u003c/span\u003e = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003edataStorage\u003c/span\u003e = \u003cspan\u003eDataStorage\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecancellables\u003c/span\u003e = \u003cspan\u003eSet\u003c/span\u003e\u0026lt;\u003cspan\u003eAnyCancellable\u003c/span\u003e\u0026gt;()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003esetupBindings\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003esetupBindings\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eselectedItem\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003esink\u003c/span\u003e(\u003cspan\u003ereceiveCompletion\u003c/span\u003e: { \u003cspan\u003e_\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e }, \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                  \u003cspan\u003ereceiveValue\u003c/span\u003e: { [\u003cspan\u003eweak\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e] \u003cspan\u003eactivity\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                  \u003cspan\u003e// turn activity as active\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eself\u003c/span\u003e?.\u003cspan\u003euserHelper\u003c/span\u003e.\u003cspan\u003eisOnboarded\u003c/span\u003e = \u003cspan\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            })\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003estore\u003c/span\u003e(\u003cspan\u003ein\u003c/span\u003e: \u0026amp;\u003cspan\u003ecancellables\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eloadActivities\u003c/span\u003e() {        \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003edataStorage\u003c/span\u003e.\u003cspan\u003egetActivities\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003eassign\u003c/span\u003e(\u003cspan\u003eto\u003c/span\u003e: \u003cspan\u003e\u0026amp;\u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003eactivities\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe can finally bind the activities to our list.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eOnboardingSecondView\u003c/span\u003e: \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eObservedObject\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eviewModel\u003c/span\u003e = \u003cspan\u003eOnboardingViewModel\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e: \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eZStack\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003edefaultBackgroundView\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eVStack\u003c/span\u003e(\u003cspan\u003ealignment\u003c/span\u003e: .\u003cspan\u003eleading\u003c/span\u003e, \u003cspan\u003espacing\u003c/span\u003e: \u003cspan\u003e30\u003c/span\u003e, \u003cspan\u003econtent\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eText\u003c/span\u003e(\u003cspan\u003eL10n\u003c/span\u003e.\u003cspan\u003eonboardingChooseTitle\u003c/span\u003e.\u003cspan\u003ewithNoOrphan\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    .\u003cspan\u003emodifier\u003c/span\u003e(\u003cspan\u003eTitleModifier\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eScrollView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003eLazyVStack\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        \u003cspan\u003eForEach\u003c/span\u003e(\u003cspan\u003eviewModel\u003c/span\u003e.\u003cspan\u003eactivities\u003c/span\u003e) { \u003cspan\u003eitem\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                            \u003cspan\u003eActivityRowView\u003c/span\u003e(\u003cspan\u003eactivity\u003c/span\u003e: \u003cspan\u003eitem\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                                .\u003cspan\u003eonTapGesture\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                                    \u003cspan\u003eviewModel\u003c/span\u003e.\u003cspan\u003eselectedItem\u003c/span\u003e.\u003cspan\u003esend\u003c/span\u003e(\u003cspan\u003eitem\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        \u003cspan\u003ecreateButton\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            })\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003epadding\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        .\u003cspan\u003eonAppear\u003c/span\u003e(\u003cspan\u003eperform\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eviewModel\u003c/span\u003e.\u003cspan\u003eloadActivities\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        })\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecreateButton\u003c/span\u003e: \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eNavigationLink\u003c/span\u003e(\u003cspan\u003e\u0026#34;Create my own\u0026#34;\u003c/span\u003e, \u003cspan\u003edestination\u003c/span\u003e: \u003cspan\u003eAddActivityView\u003c/span\u003e())\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003efont\u003c/span\u003e(.\u003cspan\u003ecustom\u003c/span\u003e(\u003cspan\u003eAppFont\u003c/span\u003e.\u003cspan\u003ebold\u003c/span\u003e.\u003cspan\u003ename\u003c/span\u003e, \u003cspan\u003esize\u003c/span\u003e: \u003cspan\u003e27\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003eforegroundColor\u003c/span\u003e(.\u003cspan\u003ewhite\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003eframe\u003c/span\u003e(\u003cspan\u003emaxWidth\u003c/span\u003e: .\u003cspan\u003einfinity\u003c/span\u003e, \u003cspan\u003eminHeight\u003c/span\u003e: \u003cspan\u003e90\u003c/span\u003e, \u003cspan\u003ealignment\u003c/span\u003e: .\u003cspan\u003ecenter\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOne thing I really like here is to avoid using the constructor of my view to load the activities. I discover that we can make the view a bit smarter and rely on its life cycle using \u003ccode\u003eonAppear\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSince we don’t have \u003ccode\u003eUITableViewDelegate\u003c/code\u003e to handle the selection, I’ve used \u003ccode\u003e.onTapGesture\u003c/code\u003e to forward the selection back to the view model.\u003c/p\u003e\n\u003cp\u003eFinally, the \u003ccode\u003eForEach\u003c/code\u003e will handle to display the activities. It works nicely here because the data model has its own identifier.\u003c/p\u003e\n\u003cp\u003eI’ll follow a similar approach throughout the rest of the project, to get the latest activity and records and add new one.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://benoitpasquier.com/images/2021/02/realm-database-swiftui.png\" alt=\"realm-database-swiftui\"/\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eBefore leaving, here is a couple of thoughts during this storage migration to keep in mind. If handling the user preferences was straightforward, Realm came with its own set of challenges and it mostly comes from the design architecture.\u003c/p\u003e\n\u003cp\u003eTo be more \u003cem\u003ereactive\u003c/em\u003e, I wanted to take advantage of Combine framework and make Realm’s highest implementation a bit better to observe and react to. However, that’s not what really happened in my code.\u003c/p\u003e\n\u003cp\u003eEven if reading and writing data is asynchronous, Realm SDK doesn’t return observables or closures like any \u003ca href=\"https://benoitpasquier.com/observer-design-pattern-swift/\"\u003eobserver design pattern\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI believe this is why we can find open source project to bridge the gap, like \u003ca href=\"https://github.com/RxSwiftCommunity/RxRealm\"\u003eRxRealm\u003c/a\u003e for RxSwift and \u003ca href=\"https://github.com/CombineCommunity/CombineRealm\"\u003eCombineRealm\u003c/a\u003e for Combine framework.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003erealm\u003c/span\u003e = \u003cspan\u003etry\u003c/span\u003e! \u003cspan\u003eRealm\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003ecolors\u003c/span\u003e = \u003cspan\u003erealm\u003c/span\u003e.\u003cspan\u003eobjects\u003c/span\u003e(\u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003eself\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eRealmPublishers\u003c/span\u003e.\u003cspan\u003earray\u003c/span\u003e(\u003cspan\u003efrom\u003c/span\u003e: \u003cspan\u003ecolors\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  .\u003cspan\u003eaddToRealm\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI believe that keeping my first data storage implementation \u003cem\u003ewithout reactive layer\u003c/em\u003e could have been much easier to use. At the end, the view model passes the content via \u003ccode\u003e@Published\u003c/code\u003e which avoid exposing the heavy lifting to the view.\u003c/p\u003e\n\u003cp\u003eIt’s important to know where you want to land before starting your own code migration to avoid creating layer of complexity. Remember, no silver bullet.\u003c/p\u003e\n\u003cp\u003eOf course, if you are using CoreData or any other framework, paired with any architectural design pattern, maybe it makes sense to be reactive with SwiftUI. It’s good to experiment in a smaller part of your code first to understand those limits.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eIn conclusion, we managed to read and write content using \u003ccode\u003eUserDefaults\u003c/code\u003e and Realm SDK and to store information for the app usage, still using SwiftUI and getting rid of old implementation when possible.\u003c/p\u003e\n\u003cp\u003eLast step would be to wrap up any leftover logic and getting into unit testing.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHappy coding.\u003c/em\u003e\u003c/p\u003e\n              \n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2021-02-15T08:00:00Z",
  "modifiedTime": "2021-02-15T08:00:00Z"
}
