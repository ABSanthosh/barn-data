{
  "id": "14c963d8-5dae-4bba-a29e-ef4ba2b2789d",
  "title": "SwiftUI Previewable Macro",
  "link": "https://useyourloaf.com/blog/swiftui-previewable-macro/",
  "description": "Apple added the Previewable macro to iOS 18. This generates the boilerplate wrapper view you need to preview a view with State bindings. What’s The Problem? I have mixed feelings about SwiftUI previews. When they work they can make creating a view an interactive experience. They can also be slow, break with confusing errors, and need boilerplate container views to create any state bindings. For that last point consider this form view that expects a binding to a bool: struct SettingsView: View { @Binding var showMessages: Bool var body: some View { NavigationStack { Form { Section(\"General Settings\") { Toggle(\"Show messages\", isOn: $showMessages) } ... } .navigationTitle(\"Settings\") } } } When previewing this view we need a binding. One way is to provide a constant value: #Preview { SettingsView(showMessages: .constant(true)) } That works but prevents us from interacting with the view. A better approach is to create a wrapper view that supplies the mutable state: private struct ContainerView: View { @State var showMessages: Bool = false var body: some View { SettingsView(showMessages: $showMessages) } } #Preview { ContainerView() } That gives us a preview with a working toggle button, but creating a wrapper view for our state each time gets to be tiresome. The Previewable Macro In Xcode 16, you can replace that boilerplate wrapper code with the Swift Previewable macro: #Preview { @Previewable @State var showMessages: Bool = false SettingsView(showMessages: $showMessages) } Declare any @State properties you need at the root level of the Preview and mark them with the @Previewable macro. A SwiftUI wrapper view is automatically generated containing the state properties. Expanding the Preview macro (abbreviated): static func makePreview() throws -\u003e DeveloperToolsSupport.Preview { DeveloperToolsSupport.Preview { struct __P_Previewable_Transform_Wrapper: SwiftUI.View { @State var showMessages: Bool = false var body: some SwiftUI.View { SettingsView(showMessages: $showMessages) } } return __P_Previewable_Transform_Wrapper() } } That looks pretty close to our original wrapper view. Note: The @Previewable macro deploys back to iOS 17.0, macOS 14.0, tvOS 17.0, visionOS 1.0, and watchOS 10.0. Learn More WWDC24 What’s new in SwiftUI SwiftUI Previewable Macro was originally posted 26 Aug 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 26 Aug 2024 13:14:36 +0100",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 2404,
  "excerpt": "Apple added the Previewable macro to iOS 18. This generates the boilerplate wrapper view you need to preview a view with State bindings.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "Apple added the Previewable macro to iOS 18. This generates the boilerplate wrapper view you need to preview a view with State bindings. What’s The Problem? I have mixed feelings about SwiftUI previews. When they work they can make creating a view an interactive experience. They can also be slow, break with confusing errors, and need boilerplate container views to create any state bindings. For that last point consider this form view that expects a binding to a bool: struct SettingsView: View { @Binding var showMessages: Bool var body: some View { NavigationStack { Form { Section(\"General Settings\") { Toggle(\"Show messages\", isOn: $showMessages) } ... } .navigationTitle(\"Settings\") } } } When previewing this view we need a binding. One way is to provide a constant value: #Preview { SettingsView(showMessages: .constant(true)) } That works but prevents us from interacting with the view. A better approach is to create a wrapper view that supplies the mutable state: private struct ContainerView: View { @State var showMessages: Bool = false var body: some View { SettingsView(showMessages: $showMessages) } } #Preview { ContainerView() } That gives us a preview with a working toggle button, but creating a wrapper view for our state each time gets to be tiresome. The Previewable Macro In Xcode 16, you can replace that boilerplate wrapper code with the Swift Previewable macro: #Preview { @Previewable @State var showMessages: Bool = false SettingsView(showMessages: $showMessages) } Declare any @State properties you need at the root level of the Preview and mark them with the @Previewable macro. A SwiftUI wrapper view is automatically generated containing the state properties. Expanding the Preview macro (abbreviated): static func makePreview() throws -\u003e DeveloperToolsSupport.Preview { DeveloperToolsSupport.Preview { struct __P_Previewable_Transform_Wrapper: SwiftUI.View { @State var showMessages: Bool = false var body: some SwiftUI.View { SettingsView(showMessages: $showMessages) } } return __P_Previewable_Transform_Wrapper() } } That looks pretty close to our original wrapper view. Note: The @Previewable macro deploys back to iOS 17.0, macOS 14.0, tvOS 17.0, visionOS 1.0, and watchOS 10.0. Learn More WWDC24 What’s new in SwiftUI",
  "image": "https://useyourloaf.com/blog/swiftui-previewable-macro/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eApple added the Previewable macro to iOS 18. This generates the boilerplate wrapper view you need to preview a view with State bindings.\u003c/p\u003e\n\u003ch3 id=\"whats-the-problem\"\u003eWhat’s The Problem?\u003c/h3\u003e\n\u003cp\u003eI have mixed feelings about SwiftUI previews. When they work they can make creating a view an interactive experience. They can also be slow, break with confusing errors, and need boilerplate container views to create any state bindings.\u003c/p\u003e\n\u003cp\u003eFor that last point consider this form view that expects a binding to a bool:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eSettingsView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eBinding\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBool\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eNavigationStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eForm\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eSection\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;General Settings\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003eToggle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Show messages\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eisOn\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enavigationTitle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Settings\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-previewable-macro/001.png\" alt=\"Settings form with a toggle switch (on) to show messages\" width=\"325\" height=\"200\" srcset=\"https://useyourloaf.com/blog/swiftui-previewable-macro/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhen previewing this view we need a binding. One way is to provide a constant value:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePreview\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eSettingsView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econstant\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat works but prevents us from interacting with the view. A better approach is to create a wrapper view that supplies the mutable state:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eContainerView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eState\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBool\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eSettingsView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePreview\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eContainerView\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat gives us a preview with a working toggle button, but creating a wrapper view for our state each time gets to be tiresome.\u003c/p\u003e\n\u003ch3 id=\"the-previewable-macro\"\u003eThe Previewable Macro\u003c/h3\u003e\n\u003cp\u003eIn Xcode 16, you can replace that boilerplate wrapper code with the Swift Previewable macro:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e#\u003c/span\u003e\u003cspan\u003ePreview\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003ePreviewable\u003c/span\u003e \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eState\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBool\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eSettingsView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eDeclare any @State properties you need at the root level of the Preview and mark them with the @Previewable macro. A SwiftUI wrapper view is automatically generated containing the state properties. Expanding the Preview macro (abbreviated):\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emakePreview\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eDeveloperToolsSupport\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePreview\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eDeveloperToolsSupport\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePreview\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003e__P_Previewable_Transform_Wrapper\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSwiftUI\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eState\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBool\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eSwiftUI\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eSettingsView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003eshowMessages\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e__P_Previewable_Transform_Wrapper\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat looks pretty close to our original wrapper view.\u003c/p\u003e\n\u003cp\u003eNote: The @Previewable macro deploys back to iOS 17.0, macOS 14.0, tvOS 17.0, visionOS 1.0, and watchOS 10.0.\u003c/p\u003e\n\u003ch3 id=\"learn-more\"\u003eLearn More\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/wwdc24/10144?time=890\"\u003eWWDC24 What’s new in SwiftUI\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-08-26T13:14:36+01:00",
  "modifiedTime": "2024-09-02T15:10:08+01:00"
}
