{
  "id": "efeae108-d681-4d17-8b0d-0f96952c3ba9",
  "title": "Create a web browser with WebKit and SwiftUI",
  "link": "https://benoitpasquier.com/create-webview-in-swiftui/",
  "description": "Recently, I’ve been more and more curious about web experience through mobile apps. Most of web browser apps look alike, I was wondering how could I recreate one with WebKit and SwiftUI. Let’s dive in.",
  "author": "",
  "published": "Tue, 15 Jun 2021 08:00:00 +0000",
  "source": "https://benoitpasquier.com/index.xml",
  "categories": null,
  "byline": "Benoit Pasquier",
  "length": 8505,
  "excerpt": "Recently, I’ve been more and more curious about web experience through mobile apps. Most of web browser apps look alike, I was wondering how could I recreate one with WebKit and SwiftUI. Let’s dive in.",
  "siteName": "Benoit Pasquier",
  "favicon": "https://benoitpasquier.com/favicon.png",
  "text": "Recently, I’ve been more and more curious about web experience through mobile apps. Most of web browser apps look alike, I was wondering how could I recreate one with WebKit and SwiftUI. Let’s dive in. First Web View If you’re familiar with UIKit, since Apple deprecated UIWebView, there is only one way to support a web view in iOS: using WKWebView from WebKit framework. We could use SFSafariViewController but it’s not made to be customized, so we’ll stick with WebKit for this time. Unfortunately, SwiftUI doesn’t have any web view out of the box, even through WebKit import. Similar to what I have done to get a video player in SwiftUI (before Apple released a much simpler way), we’ll need to create a bridge to bring WKWebView to the SwiftUI world. For this, we’ll need to create a new representable view. struct WebView: UIViewRepresentable { typealias UIViewType = WKWebView let webView: WKWebView func makeUIView(context: Context) -\u003e WKWebView { return webView } func updateUIView(_ uiView: WKWebView, context: Context) { } } We might be tempted to build our struct with an URL parameter instead of a view and return a brand new WKWebView from makeUIView(..) function, but that’s not ideal. Any changes affecting the struct will recreate the whole object where we just want to reload its content only. Then, how do we load a url? We’ll need a class to handle the different state of our WebView. class WebViewModel: ObservableObject { let webView: WKWebView let url: URL init() { webView = WKWebView(frame: .zero) url = URL(string: https://benoitpasquier.com)! loadUrl() } func loadUrl() { webView.load(URLRequest(url: url)) } } So far so good, our WebViewModel is holding the logic of the web destination and how to load its content. We can now pack everything back to a container to test it. struct ContentView: View { @StateObject var model = WebViewModel() var body: some View { WebView(webView: model.webView) } } That’s it! Our WKWebView is passed as parameter to be render, but it’s the actual model that controls its content. Why does the model has to implement ObservableObject protocol? It’s to make the model observable but at the point, it actually doesn’t require to be yet. We’re not done yet with this sample, let’s try to improve the experience. WKWebView with Combine First, like any web browsers, I want to leave mobile users the ability to feed their own url destinations. Then how about adding a back and forward buttons when possible like any good browsing experience? Let’s get to it. For those 2 cases, we need some kind of binding system to be notified when the user set a new url destination. We also need to know when we can go back or forward based on the WKWebView. Nothing to worry, let’s use Combine for this. Usually, WKWebView property changes like canGoBack or canGoForward are only observable through Key-Value Observing. However, WKWebView also support key paths which are observable through Combine framework which makes our life much easier. class WebViewModel: ObservableObject { ... // outputs @Published var canGoBack: Bool = false @Published var canGoForward: Bool = false private func setupBindings() { webView.publisher(for: \\.canGoBack) .assign(to: \u0026$canGoBack) webView.publisher(for: \\.canGoForward) .assign(to: \u0026$canGoForward) } } Then we can expose couple more actions to load the url, navigate back as well as forward. We can get rid of our hardcoded url. class WebViewModel: ObservableObject { ... // inputs @Published var urlString: String = \"\" // actions func loadUrl() { guard let url = URL(string: urlString) else { return } webView.load(URLRequest(url: url)) } func goForward() { webView.goForward() } func goBack() { webView.goBack() } } Almost there. We can connect it altogether in our container view. I’ll be using a TextField for the url destination and a ToolbarItemGroup with items to navigate back and forward. struct ContentView: View { @StateObject var model = WebViewModel() var body: some View { ZStack(alignment: .bottom) { Color.black .ignoresSafeArea() VStack(spacing: 0) { HStack(spacing: 10) { HStack { TextField(\"Tap an url\", text: $model.urlString) .keyboardType(.URL) .autocapitalization(.none) .padding(10) Spacer() } .background(Color.white) .cornerRadius(30) Button(\"Go\", action: { model.loadUrl() }) .foregroundColor(.white) .padding(10) }.padding(10) WebView(webView: model.webView) } } .toolbar { ToolbarItemGroup(placement: .bottomBar) { Button(action: { model.goBack() }, label: { Image(systemName: \"arrowshape.turn.up.backward\") }) .disabled(!model.canGoBack) Button(action: { model.goForward() }, label: { Image(systemName: \"arrowshape.turn.up.right\") }) .disabled(!model.canGoForward) Spacer() } } } } Let’s see how it looks Great! Our web view works as expected: we can load an url, navigates its content and go back or forward and possible. Caveats If this can be good enough for a small app, how easy can it be to create a full web browser with WebKit and SwiftUI only? Here is a list of things that I noticed and could be challenging moving forward. The actual SwiftUI code is pretty simple since it only requires to layout the view but the bridge between SwiftUI and UIKit will become more and more complex over time. For instance, WKWebView can require a navigation delegate for navigation policy or UI delegate for transition. Those protocols requires to conform to NSObjectProtocol as well. If we need to make this layer observable the View layer, it’s going to be extra effort from a delegate pattern to Combine. class WebViewNavigationDelegate: NSObject, WKNavigationDelegate { func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -\u003e Void) { // TODO decisionHandler(.allow) } func webView(_ webView: WKWebView, decidePolicyFor navigationResponse: WKNavigationResponse, decisionHandler: @escaping (WKNavigationResponsePolicy) -\u003e Void) { // TODO decisionHandler(.allow) } } class WebViewModel: ObservableObject { let webView: WKWebView private let navigationDelegate: WebViewNavigationDelegate ... } The other part worth mentioning is about JavaScript. Mobile developers tend to inject or observe Javascript content in WKWebView through evaluateJavaScript(..) like the content size of the web view to resize it’s container. That could become quite challenging to resize a ContentView based on a WKWebView SwiftUI representation and brings some complexity to the View layer. Finally, the sample only support one web view at a time, but as users we tend to open multiple tabs, swapping between those tabs could require more delegates or interchange the observers to make sure the bottom tab bar reflect latest changes. In conclusion, if bringing WebKit to SwiftUI sounds a great idea, it can become quite a complex solution depending of the control we want to keep on the web experience. In some of those cases, it might be simpler to stick with UIKit and Auto Layout, or even just open a That being said, it’s still interesting to see what can be done with SwiftUI and Combine. For instance, binding key path of a web view straight to the View layer sounds pretty great without diving into KVO. This code is available on Github. Happy Coding!",
  "image": "https://benoitpasquier.com/images/2021/06/webkit-swiftui.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n              \u003cp\u003eRecently, I’ve been more and more curious about web experience through mobile apps. Most of web browser apps look alike, I was wondering how could I recreate one with WebKit and SwiftUI. \u003cem\u003eLet’s dive in.\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"first-web-view\"\u003eFirst Web View\u003c/h2\u003e\n\u003cp\u003eIf you’re familiar with UIKit, since Apple deprecated \u003ccode\u003eUIWebView\u003c/code\u003e, there is only one way to support a web view in iOS: using \u003ccode\u003eWKWebView\u003c/code\u003e from WebKit framework. We could use \u003ccode\u003eSFSafariViewController\u003c/code\u003e but it’s not made to be customized, so we’ll stick with WebKit for this time.\u003c/p\u003e\n\u003cp\u003eUnfortunately, SwiftUI doesn’t have any web view out of the box, even through WebKit import. Similar to what I have done to get a \u003ca href=\"https://benoitpasquier.com/playing-video-avplayer-swiftui/\"\u003evideo player in SwiftUI\u003c/a\u003e (before Apple released a much simpler way), we’ll need to create a bridge to bring \u003ccode\u003eWKWebView\u003c/code\u003e to the SwiftUI world. For this, we’ll need to create a new representable view.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eWebView\u003c/span\u003e: \u003cspan\u003eUIViewRepresentable\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003etypealias\u003c/span\u003e \u003cspan\u003eUIViewType\u003c/span\u003e = \u003cspan\u003eWKWebView\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003ewebView\u003c/span\u003e: \u003cspan\u003eWKWebView\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emakeUIView\u003c/span\u003e(\u003cspan\u003econtext\u003c/span\u003e: \u003cspan\u003eContext\u003c/span\u003e) -\u0026gt; \u003cspan\u003eWKWebView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003ewebView\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eupdateUIView\u003c/span\u003e(\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003euiView\u003c/span\u003e: \u003cspan\u003eWKWebView\u003c/span\u003e, \u003cspan\u003econtext\u003c/span\u003e: \u003cspan\u003eContext\u003c/span\u003e) { }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe might be tempted to build our struct with an \u003ccode\u003eURL\u003c/code\u003e parameter instead of a view and return a brand new \u003ccode\u003eWKWebView\u003c/code\u003e from \u003ccode\u003emakeUIView(..)\u003c/code\u003e function, but that’s not ideal. Any changes affecting the struct will recreate the whole object where we just want to reload its content only.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThen, how do we load a url?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWe’ll need a class to handle the different state of our \u003ccode\u003eWebView\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eWebViewModel\u003c/span\u003e: \u003cspan\u003eObservableObject\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003ewebView\u003c/span\u003e: \u003cspan\u003eWKWebView\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eurl\u003c/span\u003e: \u003cspan\u003eURL\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003einit\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ewebView\u003c/span\u003e = \u003cspan\u003eWKWebView\u003c/span\u003e(\u003cspan\u003eframe\u003c/span\u003e: .\u003cspan\u003ezero\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eurl\u003c/span\u003e = \u003cspan\u003eURL\u003c/span\u003e(\u003cspan\u003estring\u003c/span\u003e: \u003cspan\u003ehttps\u003c/span\u003e:\u003cspan\u003e//benoitpasquier.com)!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eloadUrl\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eloadUrl\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ewebView\u003c/span\u003e.\u003cspan\u003eload\u003c/span\u003e(\u003cspan\u003eURLRequest\u003c/span\u003e(\u003cspan\u003eurl\u003c/span\u003e: \u003cspan\u003eurl\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo far so good, our \u003ccode\u003eWebViewModel\u003c/code\u003e is holding the logic of the web destination and how to load its content. We can now pack everything back to a container to test it.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eContentView\u003c/span\u003e: \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eStateObject\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003emodel\u003c/span\u003e = \u003cspan\u003eWebViewModel\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e: \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eWebView\u003c/span\u003e(\u003cspan\u003ewebView\u003c/span\u003e: \u003cspan\u003emodel\u003c/span\u003e.\u003cspan\u003ewebView\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003eThat’s it!\u003c/em\u003e Our \u003ccode\u003eWKWebView\u003c/code\u003e is passed as parameter to be render, but it’s the actual model that controls its content.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhy does the model has to implement \u003ccode\u003eObservableObject\u003c/code\u003e protocol?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIt’s to make the model observable but at the point, it actually doesn’t require to be yet. We’re not done yet with this sample, let’s try to improve the experience.\u003c/p\u003e\n\u003ch2 id=\"wkwebview-with-combine\"\u003eWKWebView with Combine\u003c/h2\u003e\n\u003cp\u003eFirst, like any web browsers, I want to leave mobile users the ability to feed their own url destinations. Then how about adding a \u003ccode\u003eback\u003c/code\u003e and \u003ccode\u003eforward\u003c/code\u003e buttons when possible like any good browsing experience? \u003cem\u003eLet’s get to it.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eFor those 2 cases, we need some kind of \u003cem\u003ebinding\u003c/em\u003e system to be notified when the user set a new url destination. We also need to know when we can go back or forward based on the \u003ccode\u003eWKWebView\u003c/code\u003e. Nothing to worry, let’s use Combine for this.\u003c/p\u003e\n\u003cp\u003eUsually, \u003ccode\u003eWKWebView\u003c/code\u003e property changes like \u003ccode\u003ecanGoBack\u003c/code\u003e or \u003ccode\u003ecanGoForward\u003c/code\u003e are only observable through \u003ca href=\"https://benoitpasquier.com/using-key-value-observing-to-debug-your-app/\"\u003eKey-Value Observing\u003c/a\u003e. However, \u003ccode\u003eWKWebView\u003c/code\u003e also support key paths which are observable through Combine framework which makes our life much easier.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eWebViewModel\u003c/span\u003e: \u003cspan\u003eObservableObject\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e// outputs\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003ePublished\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecanGoBack\u003c/span\u003e: \u003cspan\u003eBool\u003c/span\u003e = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003ePublished\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecanGoForward\u003c/span\u003e: \u003cspan\u003eBool\u003c/span\u003e = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003esetupBindings\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ewebView\u003c/span\u003e.\u003cspan\u003epublisher\u003c/span\u003e(\u003cspan\u003efor\u003c/span\u003e: \u003cspan\u003e\\\u003c/span\u003e.\u003cspan\u003ecanGoBack\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003eassign\u003c/span\u003e(\u003cspan\u003eto\u003c/span\u003e: \u003cspan\u003e\u0026amp;\u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003ecanGoBack\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ewebView\u003c/span\u003e.\u003cspan\u003epublisher\u003c/span\u003e(\u003cspan\u003efor\u003c/span\u003e: \u003cspan\u003e\\\u003c/span\u003e.\u003cspan\u003ecanGoForward\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            .\u003cspan\u003eassign\u003c/span\u003e(\u003cspan\u003eto\u003c/span\u003e: \u003cspan\u003e\u0026amp;\u003c/span\u003e\u003cspan\u003e$\u003c/span\u003e\u003cspan\u003ecanGoForward\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen we can expose couple more actions to load the url, navigate back as well as forward. We can get rid of our hardcoded url.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eWebViewModel\u003c/span\u003e: \u003cspan\u003eObservableObject\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e// inputs\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003ePublished\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eurlString\u003c/span\u003e: \u003cspan\u003eString\u003c/span\u003e = \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e// actions\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eloadUrl\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eguard\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003eurl\u003c/span\u003e = \u003cspan\u003eURL\u003c/span\u003e(\u003cspan\u003estring\u003c/span\u003e: \u003cspan\u003eurlString\u003c/span\u003e) \u003cspan\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003ereturn\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ewebView\u003c/span\u003e.\u003cspan\u003eload\u003c/span\u003e(\u003cspan\u003eURLRequest\u003c/span\u003e(\u003cspan\u003eurl\u003c/span\u003e: \u003cspan\u003eurl\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egoForward\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ewebView\u003c/span\u003e.\u003cspan\u003egoForward\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003egoBack\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003ewebView\u003c/span\u003e.\u003cspan\u003egoBack\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlmost there. We can connect it altogether in our container view.\nI’ll be using a \u003ccode\u003eTextField\u003c/code\u003e for the url destination and a \u003ccode\u003eToolbarItemGroup\u003c/code\u003e with items to navigate back and forward.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eContentView\u003c/span\u003e: \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    @\u003cspan\u003eStateObject\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003emodel\u003c/span\u003e = \u003cspan\u003eWebViewModel\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e: \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eZStack\u003c/span\u003e(\u003cspan\u003ealignment\u003c/span\u003e: .\u003cspan\u003ebottom\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003eblack\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003eignoresSafeArea\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eVStack\u003c/span\u003e(\u003cspan\u003espacing\u003c/span\u003e: \u003cspan\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eHStack\u003c/span\u003e(\u003cspan\u003espacing\u003c/span\u003e: \u003cspan\u003e10\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003eHStack\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        \u003cspan\u003eTextField\u003c/span\u003e(\u003cspan\u003e\u0026#34;Tap an url\u0026#34;\u003c/span\u003e, \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                                  \u003cspan\u003etext\u003c/span\u003e: \u003cspan\u003e$\u003c/span\u003e\u003cspan\u003emodel\u003c/span\u003e.\u003cspan\u003eurlString\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                            .\u003cspan\u003ekeyboardType\u003c/span\u003e(.\u003cspan\u003eURL\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                            .\u003cspan\u003eautocapitalization\u003c/span\u003e(.\u003cspan\u003enone\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                            .\u003cspan\u003epadding\u003c/span\u003e(\u003cspan\u003e10\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        \u003cspan\u003eSpacer\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    .\u003cspan\u003ebackground\u003c/span\u003e(\u003cspan\u003eColor\u003c/span\u003e.\u003cspan\u003ewhite\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    .\u003cspan\u003ecornerRadius\u003c/span\u003e(\u003cspan\u003e30\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003eButton\u003c/span\u003e(\u003cspan\u003e\u0026#34;Go\u0026#34;\u003c/span\u003e, \u003cspan\u003eaction\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                        \u003cspan\u003emodel\u003c/span\u003e.\u003cspan\u003eloadUrl\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    })\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    .\u003cspan\u003eforegroundColor\u003c/span\u003e(.\u003cspan\u003ewhite\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    .\u003cspan\u003epadding\u003c/span\u003e(\u003cspan\u003e10\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                }.\u003cspan\u003epadding\u003c/span\u003e(\u003cspan\u003e10\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eWebView\u003c/span\u003e(\u003cspan\u003ewebView\u003c/span\u003e: \u003cspan\u003emodel\u003c/span\u003e.\u003cspan\u003ewebView\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        .\u003cspan\u003etoolbar\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eToolbarItemGroup\u003c/span\u003e(\u003cspan\u003eplacement\u003c/span\u003e: .\u003cspan\u003ebottomBar\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eButton\u003c/span\u003e(\u003cspan\u003eaction\u003c/span\u003e: { \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003emodel\u003c/span\u003e.\u003cspan\u003egoBack\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                }, \u003cspan\u003elabel\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003eImage\u003c/span\u003e(\u003cspan\u003esystemName\u003c/span\u003e: \u003cspan\u003e\u0026#34;arrowshape.turn.up.backward\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                })\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003edisabled\u003c/span\u003e(\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003emodel\u003c/span\u003e.\u003cspan\u003ecanGoBack\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eButton\u003c/span\u003e(\u003cspan\u003eaction\u003c/span\u003e: { \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003emodel\u003c/span\u003e.\u003cspan\u003egoForward\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                }, \u003cspan\u003elabel\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                    \u003cspan\u003eImage\u003c/span\u003e(\u003cspan\u003esystemName\u003c/span\u003e: \u003cspan\u003e\u0026#34;arrowshape.turn.up.right\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                })\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                .\u003cspan\u003edisabled\u003c/span\u003e(\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003emodel\u003c/span\u003e.\u003cspan\u003ecanGoForward\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e                \u003cspan\u003eSpacer\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet’s see how it looks\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://benoitpasquier.com/images/2021/06/webkit-swiftui.png\" alt=\"webview-swiftui\"/\u003e\u003c/p\u003e\n\u003cp\u003eGreat! Our web view works as expected: we can load an url, navigates its content and go back or forward and possible.\u003c/p\u003e\n\u003ch2 id=\"caveats\"\u003eCaveats\u003c/h2\u003e\n\u003cp\u003eIf this can be good enough for a small app, how easy can it be to create a full web browser with WebKit and SwiftUI only? Here is a list of things that I noticed and could be challenging moving forward.\u003c/p\u003e\n\u003cp\u003eThe actual SwiftUI code is pretty simple since it only requires to layout the view but the bridge between SwiftUI and UIKit will become more and more complex over time.\u003c/p\u003e\n\u003cp\u003eFor instance, \u003ccode\u003eWKWebView\u003c/code\u003e can require a navigation delegate for navigation policy or UI delegate for transition. Those protocols requires to conform to \u003ccode\u003eNSObjectProtocol\u003c/code\u003e as well. If we need to make this layer observable the View layer, it’s going to be extra effort from a delegate pattern to Combine.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eWebViewNavigationDelegate\u003c/span\u003e: \u003cspan\u003eNSObject\u003c/span\u003e, \u003cspan\u003eWKNavigationDelegate\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ewebView\u003c/span\u003e(\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003ewebView\u003c/span\u003e: \u003cspan\u003eWKWebView\u003c/span\u003e, \u003cspan\u003edecidePolicyFor\u003c/span\u003e \u003cspan\u003enavigationAction\u003c/span\u003e: \u003cspan\u003eWKNavigationAction\u003c/span\u003e, \u003cspan\u003edecisionHandler\u003c/span\u003e: @\u003cspan\u003eescaping\u003c/span\u003e (\u003cspan\u003eWKNavigationActionPolicy\u003c/span\u003e) -\u0026gt; \u003cspan\u003eVoid\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e// TODO\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003edecisionHandler\u003c/span\u003e(.\u003cspan\u003eallow\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ewebView\u003c/span\u003e(\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003ewebView\u003c/span\u003e: \u003cspan\u003eWKWebView\u003c/span\u003e, \u003cspan\u003edecidePolicyFor\u003c/span\u003e \u003cspan\u003enavigationResponse\u003c/span\u003e: \u003cspan\u003eWKNavigationResponse\u003c/span\u003e, \u003cspan\u003edecisionHandler\u003c/span\u003e: @\u003cspan\u003eescaping\u003c/span\u003e (\u003cspan\u003eWKNavigationResponsePolicy\u003c/span\u003e) -\u0026gt; \u003cspan\u003eVoid\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e// TODO\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003edecisionHandler\u003c/span\u003e(.\u003cspan\u003eallow\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eWebViewModel\u003c/span\u003e: \u003cspan\u003eObservableObject\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003ewebView\u003c/span\u003e: \u003cspan\u003eWKWebView\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003enavigationDelegate\u003c/span\u003e: \u003cspan\u003eWebViewNavigationDelegate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe other part worth mentioning is about JavaScript. Mobile developers tend to inject or observe Javascript content in \u003ccode\u003eWKWebView\u003c/code\u003e through \u003ccode\u003eevaluateJavaScript(..)\u003c/code\u003e like the content size of the web view to resize it’s container.\u003c/p\u003e\n\u003cp\u003eThat could become quite challenging to resize a ContentView based on a \u003ccode\u003eWKWebView\u003c/code\u003e SwiftUI representation and brings some complexity to the View layer.\u003c/p\u003e\n\u003cp\u003eFinally, the sample only support one web view at a time, but as users we tend to open multiple tabs, swapping between those tabs could require more delegates or interchange the observers to make sure the bottom tab bar reflect latest changes.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eIn conclusion, if bringing WebKit to SwiftUI sounds a great idea, it can become quite a complex solution depending of the control we want to keep on the web experience. In some of those cases, it might be simpler to stick with UIKit and Auto Layout, or even just open a\u003c/p\u003e\n\u003cp\u003eThat being said, it’s still interesting to see what can be done with SwiftUI and Combine. For instance, binding key path of a web view straight to the View layer sounds pretty great without diving into KVO.\u003c/p\u003e\n\u003cp\u003eThis code is available on \u003ca href=\"https://github.com/popei69/samples/tree/master/PrivateWeb\"\u003eGithub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHappy Coding!\u003c/em\u003e\u003c/p\u003e\n              \n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2021-06-15T08:00:00Z",
  "modifiedTime": "2021-06-15T08:00:00Z"
}
