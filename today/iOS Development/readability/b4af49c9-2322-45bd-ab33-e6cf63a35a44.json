{
  "id": "b4af49c9-2322-45bd-ab33-e6cf63a35a44",
  "title": "SwiftUI Label and Button Style View Modifiers",
  "link": "https://useyourloaf.com/blog/swiftui-label-and-button-style-view-modifiers/",
  "description": "A quick tip on creating convenient extensions on SwiftUI Label and Button Styles. Button and Label Styles I’ve written about creating custom SwiftUI Button and Label styles. Here’s an example of an adaptive label style which switches the icon and title to a vertical layout for compact horizontal size classes: struct AdaptiveLabelStyle: LabelStyle { @Environment(\\.horizontalSizeClass) var horizontalSizeClass func makeBody(configuration: Configuration) -\u003e some View { if horizontalSizeClass == .compact { VStack { configuration.icon configuration.title } } else { Label(configuration) } } } Another example of a custom capsule button style which places the button label in a filled yellow capsule, uses a monospaced font design, and animates the symbol when pressed: struct CapsuleButtonStyle: ButtonStyle { func makeBody(configuration: Configuration) -\u003e some View { configuration.label .padding() .foregroundStyle(.black) .background(.yellow, in: Capsule()) .fontDesign(.monospaced) .symbolVariant(configuration.isPressed ? .fill : .none) } } Here’s how they both look when applied to a view: VStack(spacing: 16) { Label(\"Favourite\", systemImage: \"star\") .labelStyle(AdaptiveLabelStyle()) Button(\"Start\", systemImage: \"play.circle\") {} .buttonStyle(CapsuleButtonStyle()) } This is like creating custom View modifiers. The difference is that it seems less common to create the convenience extension on LabelStyle or ButtonStyle. For example, I’d like to use a more compact form of the modifier: Label(\"Favourite\", systemImage: \"star\") .labelStyle(.adaptive) Button(\"Start\", systemImage: \"play.circle\") {} .buttonStyle(.capsule) It’s a small improvement, but I don’t see any documentation from Apple on how to achieve that. Extending ButtonStyle Looking at the definitions of the built-in styles gives us a clue on what’s needed. For example, here’s the bordered button style (some annotations omitted for brevity): extension PrimitiveButtonStyle where Self == BorderedButtonStyle { static var bordered: BorderedButtonStyle { get } } I’m not using the more flexible PrimitiveButtonStyle but a similar approach works for ButtonStyle: extension ButtonStyle where Self == CapsuleButtonStyle { static var capsule: CapsuleButtonStyle { CapsuleButtonStyle() } } I can now use the compact form of the button style modifier: .buttonStyle(.capsule) Extending LabelStyle The LabelStyle works the same way: extension LabelStyle where Self == AdaptiveLabelStyle { static var adaptive: AdaptiveLabelStyle { AdaptiveLabelStyle() } } That allows me to write: .labelStyle(.adaptive) What About Parameters? What if my custom style has a parameter? Let’s make the color in our capsule button style configurable: struct CapsuleButtonStyle: ButtonStyle { let color: Color init(_ color: Color) { self.color = color } func makeBody(configuration: Configuration) -\u003e some View { configuration.label .padding() .foregroundStyle(.black) .background(color, in: Capsule()) .fontDesign(.monospaced) .symbolVariant(configuration.isPressed ? .fill : .none) } } Our ButtonStyle extension becomes a function instead of a var: extension ButtonStyle where Self == CapsuleButtonStyle { static func capsule(_ color: Color) -\u003e CapsuleButtonStyle { CapsuleButtonStyle(color) } } In use: .buttonStyle(.capsule(.orange)) See Also SwiftUI Button Imaged When Pressed Adapting SwiftUI Label Style SwiftUI Custom View modifiers SwiftUI Label and Button Style View Modifiers was originally posted 28 Apr 2025 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 28 Apr 2025 10:50:50 +0100",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 3528,
  "excerpt": "A quick tip on creating convenient extensions on SwiftUI Label and Button Styles.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "A quick tip on creating convenient extensions on SwiftUI Label and Button Styles. Button and Label Styles I’ve written about creating custom SwiftUI Button and Label styles. Here’s an example of an adaptive label style which switches the icon and title to a vertical layout for compact horizontal size classes: struct AdaptiveLabelStyle: LabelStyle { @Environment(\\.horizontalSizeClass) var horizontalSizeClass func makeBody(configuration: Configuration) -\u003e some View { if horizontalSizeClass == .compact { VStack { configuration.icon configuration.title } } else { Label(configuration) } } } Another example of a custom capsule button style which places the button label in a filled yellow capsule, uses a monospaced font design, and animates the symbol when pressed: struct CapsuleButtonStyle: ButtonStyle { func makeBody(configuration: Configuration) -\u003e some View { configuration.label .padding() .foregroundStyle(.black) .background(.yellow, in: Capsule()) .fontDesign(.monospaced) .symbolVariant(configuration.isPressed ? .fill : .none) } } Here’s how they both look when applied to a view: VStack(spacing: 16) { Label(\"Favourite\", systemImage: \"star\") .labelStyle(AdaptiveLabelStyle()) Button(\"Start\", systemImage: \"play.circle\") {} .buttonStyle(CapsuleButtonStyle()) } This is like creating custom View modifiers. The difference is that it seems less common to create the convenience extension on LabelStyle or ButtonStyle. For example, I’d like to use a more compact form of the modifier: Label(\"Favourite\", systemImage: \"star\") .labelStyle(.adaptive) Button(\"Start\", systemImage: \"play.circle\") {} .buttonStyle(.capsule) It’s a small improvement, but I don’t see any documentation from Apple on how to achieve that. Extending ButtonStyle Looking at the definitions of the built-in styles gives us a clue on what’s needed. For example, here’s the bordered button style (some annotations omitted for brevity): extension PrimitiveButtonStyle where Self == BorderedButtonStyle { static var bordered: BorderedButtonStyle { get } } I’m not using the more flexible PrimitiveButtonStyle but a similar approach works for ButtonStyle: extension ButtonStyle where Self == CapsuleButtonStyle { static var capsule: CapsuleButtonStyle { CapsuleButtonStyle() } } I can now use the compact form of the button style modifier: Extending LabelStyle The LabelStyle works the same way: extension LabelStyle where Self == AdaptiveLabelStyle { static var adaptive: AdaptiveLabelStyle { AdaptiveLabelStyle() } } That allows me to write: What About Parameters? What if my custom style has a parameter? Let’s make the color in our capsule button style configurable: struct CapsuleButtonStyle: ButtonStyle { let color: Color init(_ color: Color) { self.color = color } func makeBody(configuration: Configuration) -\u003e some View { configuration.label .padding() .foregroundStyle(.black) .background(color, in: Capsule()) .fontDesign(.monospaced) .symbolVariant(configuration.isPressed ? .fill : .none) } } Our ButtonStyle extension becomes a function instead of a var: extension ButtonStyle where Self == CapsuleButtonStyle { static func capsule(_ color: Color) -\u003e CapsuleButtonStyle { CapsuleButtonStyle(color) } } In use: .buttonStyle(.capsule(.orange)) See Also SwiftUI Button Imaged When Pressed Adapting SwiftUI Label Style SwiftUI Custom View modifiers",
  "image": "https://useyourloaf.com/blog/swiftui-label-and-button-style-view-modifiers/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eA quick tip on creating convenient extensions on SwiftUI Label and Button Styles.\u003c/p\u003e\n\u003ch3 id=\"button-and-label-styles\"\u003eButton and Label Styles\u003c/h3\u003e\n\u003cp\u003eI’ve written about creating custom SwiftUI \u003ca href=\"https://useyourloaf.com/blog/swiftui-button-image-when-pressed/\"\u003eButton\u003c/a\u003e and \u003ca href=\"https://useyourloaf.com/blog/adapting-swiftui-label-style/\"\u003eLabel\u003c/a\u003e styles. Here’s an example of an adaptive label style which switches the icon and title to a vertical layout for compact horizontal size classes:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eAdaptiveLabelStyle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eLabelStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eEnvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehorizontalSizeClass\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ehorizontalSizeClass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emakeBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eConfiguration\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eif\u003c/span\u003e \u003cspan\u003ehorizontalSizeClass\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecompact\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eVStack\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eicon\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnother example of a custom capsule button style which places the button label in a filled yellow capsule, uses a monospaced font design, and animates the symbol when pressed:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eCapsuleButtonStyle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emakeBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eConfiguration\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elabel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforegroundStyle\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eblack\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eyellow\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCapsule\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efontDesign\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003emonospaced\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esymbolVariant\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisPressed\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efill\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enone\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere’s how they both look when applied to a view:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eVStack\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003espacing\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Favourite\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;star\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elabelStyle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eAdaptiveLabelStyle\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Start\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;play.circle\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuttonStyle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eCapsuleButtonStyle\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg src=\"https://useyourloaf.com/blog/swiftui-label-and-button-style-view-modifiers/001.png\" alt=\"Label and button arranged vertically. Label has a vertical star image about favourite text. The button is a yellow horizontal capsule with black play icon and start text\" width=\"200\" height=\"190\" srcset=\"https://useyourloaf.com/blog/swiftui-label-and-button-style-view-modifiers/001@2x.png 2x\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis is like creating \u003ca href=\"https://useyourloaf.com/blog/swiftui-custom-view-modifiers/\"\u003ecustom View modifiers\u003c/a\u003e. The difference is that it seems less common to create the convenience extension on \u003ccode\u003eLabelStyle\u003c/code\u003e or \u003ccode\u003eButtonStyle\u003c/code\u003e. For example, I’d like to use a more compact form of the modifier:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eLabel\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Favourite\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;star\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elabelStyle\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eadaptive\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eButton\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Start\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003esystemImage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;play.circle\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuttonStyle\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003ecapsule\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt’s a small improvement, but I don’t see any documentation from Apple on how to achieve that.\u003c/p\u003e\n\u003ch3 id=\"extending-buttonstyle\"\u003eExtending ButtonStyle\u003c/h3\u003e\n\u003cp\u003eLooking at the definitions of the built-in styles gives us a clue on what’s needed. For example, here’s the bordered button style (some annotations omitted for brevity):\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003ePrimitiveButtonStyle\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e \u003cspan\u003eSelf\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eBorderedButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebordered\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eBorderedButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI’m not using the more flexible \u003ccode\u003ePrimitiveButtonStyle\u003c/code\u003e but a similar approach works for \u003ccode\u003eButtonStyle\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eButtonStyle\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e \u003cspan\u003eSelf\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eCapsuleButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecapsule\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCapsuleButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eCapsuleButtonStyle\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI can now use the compact form of the button style modifier:\u003c/p\u003e\n\u003ch3 id=\"extending-labelstyle\"\u003eExtending LabelStyle\u003c/h3\u003e\n\u003cp\u003eThe LabelStyle works the same way:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eLabelStyle\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e \u003cspan\u003eSelf\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eAdaptiveLabelStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003eadaptive\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eAdaptiveLabelStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eAdaptiveLabelStyle\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat allows me to write:\u003c/p\u003e\n\u003ch3 id=\"what-about-parameters\"\u003eWhat About Parameters?\u003c/h3\u003e\n\u003cp\u003eWhat if my custom style has a parameter? Let’s make the color in our capsule button style configurable:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eCapsuleButtonStyle\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003einit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ecolor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003emakeBody\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eConfiguration\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elabel\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epadding\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eforegroundStyle\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eblack\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCapsule\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efontDesign\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003emonospaced\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esymbolVariant\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econfiguration\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisPressed\u003c/span\u003e \u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efill\u003c/span\u003e \u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003enone\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOur ButtonStyle extension becomes a function instead of a \u003ccode\u003evar\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eButtonStyle\u003c/span\u003e \u003cspan\u003ewhere\u003c/span\u003e \u003cspan\u003eSelf\u003c/span\u003e \u003cspan\u003e==\u003c/span\u003e \u003cspan\u003eCapsuleButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ecapsule\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eCapsuleButtonStyle\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eCapsuleButtonStyle\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn use:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuttonStyle\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003ecapsule\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eorange\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"see-also\"\u003eSee Also\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://useyourloaf.com/blog/swiftui-button-image-when-pressed/\"\u003eSwiftUI Button Imaged When Pressed\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://useyourloaf.com/blog/adapting-swiftui-label-style/\"\u003eAdapting SwiftUI Label Style\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://useyourloaf.com/blog/swiftui-custom-view-modifiers/\"\u003eSwiftUI Custom View modifiers\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-04-28T10:50:50+01:00",
  "modifiedTime": "2025-04-28T16:23:03+01:00"
}
