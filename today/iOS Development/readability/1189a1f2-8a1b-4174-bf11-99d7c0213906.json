{
  "id": "1189a1f2-8a1b-4174-bf11-99d7c0213906",
  "title": "Things I wish I knew in my early coding career",
  "link": "https://benoitpasquier.com/2021/07/things-i-wish-i-knew-in-my-early-coding-career/",
  "description": "For the past few years, I had the opportunity to mentor new joiners through different roles. In some aspects, I could see myself in them the same way I started years back: eager to prove themselves, jumping on the code and hacking around. I tried to think about what I learnt the hard way since my first role in the tech industry and how could I help them learn the easy way.",
  "author": "",
  "published": "Sun, 25 Jul 2021 08:00:00 +0000",
  "source": "https://benoitpasquier.com/index.xml",
  "categories": null,
  "byline": "Benoit Pasquier",
  "length": 5920,
  "excerpt": "For the past few years, I had the opportunity to mentor new joiners through different roles. In some aspects, I could see myself in them the same way I started years back: eager to prove themselves, jumping on the code and hacking around. I tried to think about what I learnt the hard way since my first role in the tech industry and how could I help them learn the easy way.",
  "siteName": "Benoit Pasquier",
  "favicon": "https://benoitpasquier.com/favicon.png",
  "text": "For the past few years, I had the opportunity to mentor new joiners through different roles. In some aspects, I could see myself in them the same way I started years back: eager to prove themselves, jumping on the code and hacking around. I tried to think about what I learnt the hard way since my first role in the tech industry and how could I help them learn the easy way. I‚Äôm making a list of things I wish I knew / somebody told me when I started working in tech. What advice would you give to your young self?‚Äî Benoit Pasquier (@BenoitPasquier_) July 20, 2021 Take your time to learn In my early days, I was all about hacking around. French education is unfortunately not known for their excellence teaching English, so going through pages of documentation in English was foreign to me. I thought naively I could work around without this guidance. I learnt coding without it, how hard could it be? It was about trying again and again until I figured things out. My approach was plain wrong, coding is not a guessing game. Taking more time to consolidate fundamentals make you a much better engineer. Unfortunately, most documentations are in English today, so non-English speaker will have to grasp this before getting to the meaty part of the learning. The same applies to some Computer Science fundamentals, like algorithm or data structures. Some could naively think this is only required to pass grades at university but it‚Äôs missing a big point: most coding problems can be reduced to known algorithms or data structure. It‚Äôs also a very common subject during technical interviews and believe me, it‚Äôs quite hard to get back at it when you miss it. It‚Äôs important to have strong foundations, it‚Äôs like a set a tools, you‚Äôll know which one to use when you meet a problem. You‚Äôll avoid a lot of bugs and the frustration that comes with it. It‚Äôs okay to not know I met young engineers who were anxious not knowing ‚Äúeverything‚Äù for a role when joining a company. So let me tell you something: learning is a big part of the job, the technology changes way to fast to be able to catch up and know everything. I believe that‚Äôs why so many engineers share their knowledge and findings through blog posts and books, it‚Äôs to help others catching up. So not knowing ‚Äúeverything‚Äù isn‚Äôt the problem, the key is to know how to find the knowledge you‚Äôre missing. Lucky you, knowledge has many forms those days. I‚Äôll pass on Googling - digging into StackOverflow answers, but what about the language documentation? Is there any technical books you can get access to? Any videos available on the subject from previous WWDC or Youtube? Maybe you‚Äôre lucky and there is a Podcast on it? Nothing found? Don‚Äôt give up just yet. You can try and try again to learn by yourself and don‚Äôt be shy asking peers to. Re-learning is the skill that will help you go through any jobs. On the other hand, don‚Äôt be lazy either. There is a difference between trying to find the answer and not looking for it at all. People notice this kind of things, it won‚Äôt help you. Focus on your craft, not your job title When I started, I felt job title meant everything. How great would it be to be senior software engineer, or staff, or manager or even CTO? I spent too much time worrying how to progress within my organization instead of focusing on my skill set. Don‚Äôt get me wrong, job title matters, but it doesn‚Äôt matter as much as you think. Here‚Äôs why. First, every job title depends of the company you are part of. Each organization has their own career evolution and measure progress differently. Being an ‚ÄúiOS ninja‚Äù won‚Äôt have the same meaning in your next job, you get my point. Second, your job title can evolve quite fast early on in your career. Moving from junior developer to mid could take you couple years, maybe less. Don‚Äôt expect the same speed later on. Each title comes with responsibilities and expectations, some takes years to learn and master. So once again, take your time. Challenging yourself to extend your skill set and demonstrating it your knowledge on you day to day job is more important in my opinion. People notice those efforts and eventually, your title will reflect that. It‚Äôs same as running, focus on your form rather than your pace. When you‚Äôve acquired a good technique, the speed will follow. Over the past 10 years, the development tools have evolved a lot. We saw new tech and tools improving our day to day work. We saw new dependency managers, new debugging tools, memory management graph, functional reactive programming coming in, and so on. I noticed a lot of developers focus on the tools more than understanding how it works and why some became best practices. For instance, iOS development went from an overly used MVC architectural pattern to MVVM with protocol oriented programming and dependency injection. But why MVVM is so great? Why do we use dependency injection? Those are only a solution to support some best practices, like separation of concern or testability of your codebase. The same solution has trade-off and won‚Äôt fit all purpose. Having a better understanding of development best practices and how some tools and design patterns support them will be me much more valuable in long term. It will be the compass to give you a direction, so when the ecosystem will pivot to a new tech or latest tool, you‚Äôll still be able to gauge the value of it for your project and understand the tradeoff. On the other hand, if you pivot your codebase every 6 months for a new framework, chances is you won‚Äôt find the stability you‚Äôre looking for. At the end of the day, in my opinion, learning and re-learning is a skill that takes time. There is no shortcut to become a better engineer, focus on your craft, take your time to understand what you‚Äôre doing and this dedication into the details will make the difference. Eventually, it will pay off and open any doors for you. Happy learning üìö",
  "image": "https://benoitpasquier.com/images/2021/07/thoughts.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n              \u003cp\u003eFor the past few years, I had the opportunity to mentor new joiners through different roles. In some aspects, I could see myself in them the same way I started years back: eager to prove themselves, jumping on the code and hacking around.\u003c/p\u003e\n\u003cp\u003eI tried to think about what I learnt the hard way since my first role in the tech industry and how could I help them learn the easy way.\u003c/p\u003e\n\u003cblockquote\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eI‚Äôm making a list of things I wish I knew / somebody told me when I started working in tech. What advice would you give to your young self?\u003c/p\u003e‚Äî Benoit Pasquier (@BenoitPasquier_) \u003ca href=\"https://twitter.com/BenoitPasquier_/status/1417459646164455426?ref_src=twsrc%5Etfw\"\u003eJuly 20, 2021\u003c/a\u003e\u003c/blockquote\u003e\n\n\n\u003ch2 id=\"take-your-time-to-learn\"\u003eTake your time to learn\u003c/h2\u003e\n\u003cp\u003eIn my early days, I was all about hacking around. French education is unfortunately not known for their excellence teaching English, so going through pages of documentation in English was foreign to me.\u003c/p\u003e\n\u003cp\u003eI thought naively I could work around without this guidance. I learnt coding without it, how hard could it be? It was about trying again and again until I figured things out.\u003c/p\u003e\n\u003cp\u003eMy approach was plain wrong, coding is not a guessing game. Taking more time to consolidate fundamentals make you a much better engineer. Unfortunately, most documentations are in English today, so non-English speaker will have to grasp this before getting to the meaty part of the learning.\u003c/p\u003e\n\u003cp\u003eThe same applies to some Computer Science fundamentals, like algorithm or data structures. Some could naively think this is only required to pass grades at university but it‚Äôs missing a big point: most coding problems can be reduced to known \u003ca href=\"https://benoitpasquier.com/data-structure-algorithm-applied-to-swift/\"\u003ealgorithms or data structure\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt‚Äôs also a very common subject during technical interviews and believe me, \u003ca href=\"https://benoitpasquier.com/100-days-algorithm-data-structure-swift/\"\u003eit‚Äôs quite hard to get back at it\u003c/a\u003e when you miss it.\u003c/p\u003e\n\u003cp\u003eIt‚Äôs important to have strong foundations, it‚Äôs like a set a tools, you‚Äôll know which one to use when you meet a problem. You‚Äôll avoid a lot of bugs and the frustration that comes with it.\u003c/p\u003e\n\u003ch2 id=\"its-okay-to-not-know\"\u003eIt‚Äôs okay to not know\u003c/h2\u003e\n\u003cp\u003eI met young engineers who were anxious not knowing ‚Äúeverything‚Äù for a role when joining a company. So let me tell you something: learning is a big part of the job, the technology changes way to fast to be able to catch up and know everything.\u003c/p\u003e\n\u003cp\u003eI believe that‚Äôs why so many engineers share their knowledge and findings through blog posts and books, it‚Äôs to help others catching up.\u003c/p\u003e\n\u003cp\u003eSo not knowing ‚Äúeverything‚Äù isn‚Äôt the problem, the key is to know \u003cem\u003ehow\u003c/em\u003e to find the knowledge you‚Äôre missing. Lucky you, knowledge has many forms those days.\u003c/p\u003e\n\u003cp\u003eI‚Äôll pass on Googling - digging into StackOverflow answers, but what about the language documentation? Is there any technical books you can get access to? Any videos available on the subject from previous WWDC or Youtube? Maybe you‚Äôre lucky and there is a Podcast on it?\u003c/p\u003e\n\u003cp\u003eNothing found? Don‚Äôt give up just yet. You can try and try again to learn by yourself and don‚Äôt be shy asking peers to.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eRe-learning is the skill that will help you go through any jobs.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOn the other hand, don‚Äôt be lazy either. There is a difference between trying to find the answer and not looking for it at all. People notice this kind of things, it won‚Äôt help you.\u003c/p\u003e\n\u003ch2 id=\"focus-on-your-craft-not-your-job-title\"\u003eFocus on your craft, not your job title\u003c/h2\u003e\n\u003cp\u003eWhen I started, I felt job title meant everything. How great would it be to be senior software engineer, or staff, or manager or even CTO? I spent too much time worrying how to progress within my organization instead of focusing on my skill set.\u003c/p\u003e\n\u003cp\u003eDon‚Äôt get me wrong, job title matters, but it doesn‚Äôt matter as much as you think. Here‚Äôs why.\u003c/p\u003e\n\u003cp\u003eFirst, every job title depends of the company you are part of. Each organization has their own career evolution and measure progress differently. Being an ‚ÄúiOS ninja‚Äù won‚Äôt have the same meaning in your next job, you get my point.\u003c/p\u003e\n\u003cp\u003eSecond, your job title can evolve quite fast early on in your career. Moving from junior developer to mid could take you couple years, maybe less. Don‚Äôt expect the same speed later on. Each title comes with responsibilities and expectations, some takes years to learn and master. So once again, take your time.\u003c/p\u003e\n\u003cp\u003eChallenging yourself to extend your skill set and demonstrating it your knowledge on you day to day job is more important in my opinion. People notice those efforts and eventually, your title will reflect that.\u003c/p\u003e\n\u003cp\u003eIt‚Äôs same as running, focus on your form rather than your pace. When you‚Äôve acquired a good technique, the speed will follow.\u003c/p\u003e\n\n\u003cp\u003eOver the past 10 years, the development tools have evolved a lot. We saw new tech and tools improving our day to day work. We saw new dependency managers, new debugging tools, memory management graph, functional reactive programming coming in, and so on.\u003c/p\u003e\n\u003cp\u003eI noticed a lot of developers focus on the tools more than understanding how it works and why some became best practices. For instance, iOS development went from an overly used MVC architectural pattern to MVVM with protocol oriented programming and dependency injection.\u003c/p\u003e\n\u003cp\u003eBut why MVVM is so great? Why do we use dependency injection? Those are only a solution to support some best practices, like separation of concern or testability of your codebase. The same solution has trade-off and won‚Äôt fit all purpose.\u003c/p\u003e\n\u003cp\u003eHaving a better understanding of development best practices and how some tools and design patterns support them will be me much more valuable in long term. It will be the compass to give you a direction, so when the ecosystem will pivot to a new tech or latest tool, you‚Äôll still be able to gauge the value of it for your project and understand the tradeoff.\u003c/p\u003e\n\u003cp\u003eOn the other hand, if you pivot your codebase every 6 months for a new framework, chances is you won‚Äôt find the stability you‚Äôre looking for.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eAt the end of the day, in my opinion, learning and re-learning is a skill that takes time. There is no shortcut to become a better engineer, focus on your craft, take your time to understand what you‚Äôre doing and this dedication into the details will make the difference. Eventually, it will pay off and open any doors for you.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHappy learning üìö\u003c/em\u003e\u003c/p\u003e\n              \n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2021-07-25T08:00:00Z",
  "modifiedTime": "2021-07-25T08:00:00Z"
}
