{
  "id": "c7034df6-5c4c-4a71-91de-e63e9dea1d95",
  "title": "Things that did (and didn't) contribute to Burnout Buddy's success",
  "link": "https://swiftrocks.com/things-that-did-and-didnt-contribute-to-burnout-buddys-success",
  "description": "Back in 2022 I launched Burnout Buddy, and today the app has succeeded far beyond my expectations. Netting between $600 and $1000 each month as of writing, BB has been growing 100% organically with little to no effort on my part. In this post, I'd like to lay out exactly what I've done that I believe contributed (and didn't contribute) to this growth, serving as documentation and inspiration for the indie dev community out there. Things that helped Understanding ASO I cannot understate the value of having a good grasp of App Store Optimization (ASO). The case is simple: It doesn't matter how good your app is, if you don't get eyes on it, it will never succeed. ASO refers to being strategic about how you assemble your app's store listing (keywords, name, subtitle, description, screenshots, etc) so that it ranks well when people search for keywords related to your app. In many cases what you actually want to do is avoid popular keywords in the beginning, focusing on less popular ones where you have more of a fighting chance until you get \"popular\" enough that you can try challenging the real ones. How and when you ask for reviews also plays a big role here as reviews also affect your app's rank. I strongly recommend Appfigures for learning and applying ASO for your apps. The owner, Ariel, has posted many videos explaining different strategies you can take, and that's how I got to know about it. In my case, ASO was only time-intensive in the first few weeks following the app's launch. After it picked up some steam and became no.1 in a couple of important keywords, I was able to leave it alone and enjoy full organic growth ever since. I'm my app's primary user Most indie apps fail because they are trying to solve problems that don't exist. The devs come up with the solution first, and then try to find users who have a problem that match their solution. This rarely works. The easiest way to avoid this is to ignore other people and just focus on your own set of problems. If you can manage to build something that would make your own life better, certainly you'll find other people who will also appreciate it. In my case, I built Burnout Buddy because iOS's default Screen Time feature was too simple for me. I wanted to make more complex scenarios such as schedule or location based conditions, but iOS only allows you to setup simple time limits. You also can't do \"strict\" conditions where there's no way to disable the block once it goes into effect. I searched for other alternatives, but none of them were good enough for me. So I built my own! Once my problem was solved, I figured out that most likely there were others out there who could also make use of it. I made the app public with zero expectations, and sure enough, there were tons of other people with the same problem I had. Being my app's primary user also means that I'm perfectly positioned to know which features the app should and shouldn't have. I don't need things like user interviews, because again, I built this for myself. All I have to do is ask myself what I'd like the app to do, and the result is sure to also be a hit with others with the same problem the app aims to solve. I attribute Pieter Level's Make book for helping me understand this concept. It's also a great resource for learning more about indie development and how to create successful products in general! No backend, everything happens client-side Another decision that I've made that massively simplified things for me is that everything happens on the client. There are no accounts or backend, and I gather zero data from the users. This means I have no backend to manage, and most importantly, no monthly server costs. As long as Apple doesn't push iOS updates that break the APIs I use (unfortunately happens a lot), I can trust that everything is working as it should and focus my attention on other things. People seem to really appreciate this too, since many apps nowadays have accounts for no reason other than wanting to hoard data which is really shady. The app just works After the first couple of releases, I spent a good amount of time building a good suite of tests and architecting the app so that it would be easy to expand and make it even more testable. This means I very rarely have to worry about whether or not I'll push something that will fundamentally break the app. Having no backend-related code also greatly helped here. This doesn't mean that the app is bug-free (there are a bunch of SwiftUI issues I can't seem to solve, and Apple somehow manages to break their APIs on every iOS release as mentioned above), but when it comes to the core experience of the app, I can trust that everything works as it should. This saved a lot of testing / debugging time on my end and also made sure I almost never had to deal with support e-mails regarding broken features and such. I don't extort my users Burnout Buddy is a one-time $9.99 bucks purchase. For a long time it used to be $4.99 even. Why this matters? Because most alternatives are stupidly expensive subscriptions. Most of them also don't have backends and have even less features than BB, why the hell are these apps subscription-based??? Some people justify that subscriptions are necessary even for \"simple\" apps like BB because of things like recurring support work. While I can see the point, I also think there are other ways to tackle these issues. I for example created a FAQ support page, and that reduced 99.9% of the support requests. I'm not trying to extort my users and I believe this was a strong factor for the app's success. Things that didn't help It would be naive of me to claim that everything went right. I've made a couple of bad decisions that worked against the app's success, and I wanted to document them as well. Thinking I could make it big without marketing Like I mentioned in the ASO section, it doesn't matter how good your app is. You need to get the word out, otherwise it will just not work. There is a saying in tech that goes \"if you build something good, people will follow\". Whoever said this has absolutely never attempted to sell something. I'm as a tech nerd as it can get and I can safely say that when it comes to building businesses, marketing is a billion times more important than building the actual product! Unfortunately for me, I hate doing marketing work. I'm fine with putting a sponsorship section on this blog, but reaching out to journalists and hustling on X / LinkedIn is really not my thing. This means that while thankfully I was able to do just enough of it to get some nice results in the beginning, the app is destined to die a slow death as it drops in ranking in the App Store and other similar apps manage to get their word out better than me. Marketing is something you have to do constantly, but unfortunately for me it's something I just don't want to do, so there will always be a hard cap to how far I can go with any given project alone. Making the app too cheap This will sound weird because I mentioned above that not extorting my users was a positive. But allow me to clarify this. One thing I've learned the hard way is that you need to avoid cheapskates like the plague. This means people who expect nothing but the highest quality products, but at the same time are not willing to pay anything for it. You know when you see one because they behave like huge assholes and will do everything in their power to extract as much value from you as possible while giving nothing in return, much like the meme of a Karen screaming at the supermarket cashier because of some worthless coupon. When Burnout Buddy was $4.99, I was constantly having my support e-mail being spammed by such people. They would constantly aggressively complain about different app features and demand refunds, often threatening that they would download a different app if I didn't help them (...why would I care about that?). A lot of these reports didn't even make sense, they were clearly people just searching for excuses to be an asshole and get free stuff. It was such a waste of my time that I even briefly considered abandoning the project entirely / pulling it from the App Store just so I wouldn't have to deal with them anymore. It was only when I read someone complaining about the exact same problem on HackerNews that I realized what my issue was. It's not that giving support is a thankless job, it's that the app was too cheap. The cheapskates are attracted by free (or in this case, almost free) products. If you raise the price of your product just slightly, you can filter out these people without driving way the good (and kind) users. After doing just that, these bizarre e-mails completely vanished without resulting in any loss of revenue. While I of course still get support requests every now and then, they are now all very polite and helpful, which makes everything a breeze! In other words, the \"fail\" here is that I should've made the app cost $9.99 from the get-go to have filtered the cheapskates from the very beginning. Not gathering analytics This is an interesting one because it's both a good and a bad thing depending on how you look at it. I mentioned above that having no accounts was a good thing because it made things easier on my side and was appreciated by the users. But it also meant that I had no information regarding how users were using the app. This made things harder for me because 1) I couldn't determine which features were more popular / worth expanding upon (and which ones weren't), and 2) when people reported bugs, I had no easy way to trace their steps in order to quickly reproduce the issue (or to confirm they misunderstood the app / were doing something wrong). If I could go back, I would probably have gone for a solution that allowed me to gather analytics data for the above reasons. Using SwiftUI This is mostly out-of-topic for this post, so I'll keep it short. I decided to use SwiftUI for this project as a learning opportunity, and I sort of regret it. As mentioned in my SwiftUI vs UIKit post, SwiftUI is good for simple apps, but awful for more complex ones. As BB grew and became more intricate, SwiftUI became more and more of an issue. The app today is full of dirty hacks and visual bugs that are impossible to solve (as of writing) because they originate from SwiftUI itself, in ways that are impossible for me to control without dumping the entire framework.",
  "author": "Bruno Rocha",
  "published": "Thu, 23 Jan 2025 13:00:00 GMT+1",
  "source": "https://swiftrocks.com/rss.xml",
  "categories": null,
  "byline": "Bruno Rocha",
  "length": 10450,
  "excerpt": "ack in 2022 I launched Burnout Buddy, and today the app has succeeded far beyond my expectations.",
  "siteName": "SwiftRocks",
  "favicon": "https://swiftrocks.com/images/favicon/iconsmall2.png",
  "text": "Back in 2022 I launched Burnout Buddy, and today the app has succeeded far beyond my expectations. Netting between $600 and $1000 each month as of writing, BB has been growing 100% organically with little to no effort on my part. In this post, I'd like to lay out exactly what I've done that I believe contributed (and didn't contribute) to this growth, serving as documentation and inspiration for the indie dev community out there. Things that helped Understanding ASO I cannot understate the value of having a good grasp of App Store Optimization (ASO). The case is simple: It doesn't matter how good your app is, if you don't get eyes on it, it will never succeed. ASO refers to being strategic about how you assemble your app's store listing (keywords, name, subtitle, description, screenshots, etc) so that it ranks well when people search for keywords related to your app. In many cases what you actually want to do is avoid popular keywords in the beginning, focusing on less popular ones where you have more of a fighting chance until you get \"popular\" enough that you can try challenging the real ones. How and when you ask for reviews also plays a big role here as reviews also affect your app's rank. I strongly recommend Appfigures for learning and applying ASO for your apps. The owner, Ariel, has posted many videos explaining different strategies you can take, and that's how I got to know about it. In my case, ASO was only time-intensive in the first few weeks following the app's launch. After it picked up some steam and became no.1 in a couple of important keywords, I was able to leave it alone and enjoy full organic growth ever since. I'm my app's primary user Most indie apps fail because they are trying to solve problems that don't exist. The devs come up with the solution first, and then try to find users who have a problem that match their solution. This rarely works. The easiest way to avoid this is to ignore other people and just focus on your own set of problems. If you can manage to build something that would make your own life better, certainly you'll find other people who will also appreciate it. In my case, I built Burnout Buddy because iOS's default Screen Time feature was too simple for me. I wanted to make more complex scenarios such as schedule or location based conditions, but iOS only allows you to setup simple time limits. You also can't do \"strict\" conditions where there's no way to disable the block once it goes into effect. I searched for other alternatives, but none of them were good enough for me. So I built my own! Once my problem was solved, I figured out that most likely there were others out there who could also make use of it. I made the app public with zero expectations, and sure enough, there were tons of other people with the same problem I had. Being my app's primary user also means that I'm perfectly positioned to know which features the app should and shouldn't have. I don't need things like user interviews, because again, I built this for myself. All I have to do is ask myself what I'd like the app to do, and the result is sure to also be a hit with others with the same problem the app aims to solve. I attribute Pieter Level's Make book for helping me understand this concept. It's also a great resource for learning more about indie development and how to create successful products in general! No backend, everything happens client-side Another decision that I've made that massively simplified things for me is that everything happens on the client. There are no accounts or backend, and I gather zero data from the users. This means I have no backend to manage, and most importantly, no monthly server costs. As long as Apple doesn't push iOS updates that break the APIs I use (unfortunately happens a lot), I can trust that everything is working as it should and focus my attention on other things. People seem to really appreciate this too, since many apps nowadays have accounts for no reason other than wanting to hoard data which is really shady. The app just works After the first couple of releases, I spent a good amount of time building a good suite of tests and architecting the app so that it would be easy to expand and make it even more testable. This means I very rarely have to worry about whether or not I'll push something that will fundamentally break the app. Having no backend-related code also greatly helped here. This doesn't mean that the app is bug-free (there are a bunch of SwiftUI issues I can't seem to solve, and Apple somehow manages to break their APIs on every iOS release as mentioned above), but when it comes to the core experience of the app, I can trust that everything works as it should. This saved a lot of testing / debugging time on my end and also made sure I almost never had to deal with support e-mails regarding broken features and such. I don't extort my users Burnout Buddy is a one-time $9.99 bucks purchase. For a long time it used to be $4.99 even. Why this matters? Because most alternatives are stupidly expensive subscriptions. Most of them also don't have backends and have even less features than BB, why the hell are these apps subscription-based??? Some people justify that subscriptions are necessary even for \"simple\" apps like BB because of things like recurring support work. While I can see the point, I also think there are other ways to tackle these issues. I for example created a FAQ support page, and that reduced 99.9% of the support requests. I'm not trying to extort my users and I believe this was a strong factor for the app's success. Things that didn't help It would be naive of me to claim that everything went right. I've made a couple of bad decisions that worked against the app's success, and I wanted to document them as well. Thinking I could make it big without marketing Like I mentioned in the ASO section, it doesn't matter how good your app is. You need to get the word out, otherwise it will just not work. There is a saying in tech that goes \"if you build something good, people will follow\". Whoever said this has absolutely never attempted to sell something. I'm as a tech nerd as it can get and I can safely say that when it comes to building businesses, marketing is a billion times more important than building the actual product! Unfortunately for me, I hate doing marketing work. I'm fine with putting a sponsorship section on this blog, but reaching out to journalists and hustling on X / LinkedIn is really not my thing. This means that while thankfully I was able to do just enough of it to get some nice results in the beginning, the app is destined to die a slow death as it drops in ranking in the App Store and other similar apps manage to get their word out better than me. Marketing is something you have to do constantly, but unfortunately for me it's something I just don't want to do, so there will always be a hard cap to how far I can go with any given project alone. Making the app too cheap This will sound weird because I mentioned above that not extorting my users was a positive. But allow me to clarify this. One thing I've learned the hard way is that you need to avoid cheapskates like the plague. This means people who expect nothing but the highest quality products, but at the same time are not willing to pay anything for it. You know when you see one because they behave like huge assholes and will do everything in their power to extract as much value from you as possible while giving nothing in return, much like the meme of a Karen screaming at the supermarket cashier because of some worthless coupon. When Burnout Buddy was $4.99, I was constantly having my support e-mail being spammed by such people. They would constantly aggressively complain about different app features and demand refunds, often threatening that they would download a different app if I didn't help them (...why would I care about that?). A lot of these reports didn't even make sense, they were clearly people just searching for excuses to be an asshole and get free stuff. It was such a waste of my time that I even briefly considered abandoning the project entirely / pulling it from the App Store just so I wouldn't have to deal with them anymore. It was only when I read someone complaining about the exact same problem on HackerNews that I realized what my issue was. It's not that giving support is a thankless job, it's that the app was too cheap. The cheapskates are attracted by free (or in this case, almost free) products. If you raise the price of your product just slightly, you can filter out these people without driving way the good (and kind) users. After doing just that, these bizarre e-mails completely vanished without resulting in any loss of revenue. While I of course still get support requests every now and then, they are now all very polite and helpful, which makes everything a breeze! In other words, the \"fail\" here is that I should've made the app cost $9.99 from the get-go to have filtered the cheapskates from the very beginning. Not gathering analytics This is an interesting one because it's both a good and a bad thing depending on how you look at it. I mentioned above that having no accounts was a good thing because it made things easier on my side and was appreciated by the users. But it also meant that I had no information regarding how users were using the app. This made things harder for me because 1) I couldn't determine which features were more popular / worth expanding upon (and which ones weren't), and 2) when people reported bugs, I had no easy way to trace their steps in order to quickly reproduce the issue (or to confirm they misunderstood the app / were doing something wrong). If I could go back, I would probably have gone for a solution that allowed me to gather analytics data for the above reasons. Using SwiftUI This is mostly out-of-topic for this post, so I'll keep it short. I decided to use SwiftUI for this project as a learning opportunity, and I sort of regret it. As mentioned in my SwiftUI vs UIKit post, SwiftUI is good for simple apps, but awful for more complex ones. As BB grew and became more intricate, SwiftUI became more and more of an issue. The app today is full of dirty hacks and visual bugs that are impossible to solve (as of writing) because they originate from SwiftUI itself, in ways that are impossible for me to control without dumping the entire framework.",
  "image": "https://swiftrocks.com/images/thumbs/thumb.jpg?4",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \n  \n\u003cp\u003eBack in 2022 I launched \u003ca href=\"https://burnoutbuddy.io/\"\u003eBurnout Buddy\u003c/a\u003e, and today the app has succeeded far beyond my expectations. Netting between $600 and $1000 each month as of writing, BB has been growing 100% organically with little to no effort on my part.\u003c/p\u003e\n\u003cp\u003eIn this post, I\u0026#39;d like to lay out exactly what I\u0026#39;ve done that I believe contributed (and didn\u0026#39;t contribute) to this growth, serving as documentation and inspiration for the indie dev community out there.\u003c/p\u003e\n\u003ch2\u003eThings that helped\u003c/h2\u003e\n\u003ch3\u003eUnderstanding ASO\u003c/h3\u003e\n\u003cp\u003eI cannot understate the value of having a good grasp of \u003cb\u003eApp Store Optimization (ASO)\u003c/b\u003e. The case is simple: It doesn\u0026#39;t matter how good your app is, if you don\u0026#39;t get eyes on it, it will never succeed.\u003c/p\u003e\n\n\u003cp\u003eASO refers to being strategic about how you assemble your app\u0026#39;s store listing (keywords, name, subtitle, description, screenshots, etc) so that it ranks well when people search for keywords related to your app. In many cases what you actually want to do is \u003cb\u003eavoid\u003c/b\u003e popular keywords in the beginning, focusing on less popular ones where you have more of a fighting chance until you get \u0026#34;popular\u0026#34; enough that you can try challenging the real ones. How and \u003ci\u003ewhen\u003c/i\u003e you ask for reviews also plays a big role here as reviews also affect your app\u0026#39;s rank.\u003c/p\u003e\n\u003cp\u003eI strongly recommend \u003ca href=\"https://appfigures.com/\"\u003eAppfigures\u003c/a\u003e for learning and applying ASO for your apps. The owner, Ariel, has posted many videos explaining different strategies you can take, and that\u0026#39;s how I got to know about it.\u003c/p\u003e\n\u003cp\u003eIn my case, ASO was only time-intensive in the first few weeks following the app\u0026#39;s launch. After it picked up some steam and became no.1 in a couple of important keywords, I was able to leave it alone and enjoy full organic growth ever since.\u003c/p\u003e\n\u003ch3\u003eI\u0026#39;m my app\u0026#39;s primary user\u003c/h3\u003e\n\u003cp\u003eMost indie apps fail because they are trying to solve problems that don\u0026#39;t exist. The devs come up with the solution \u003ci\u003efirst\u003c/i\u003e, and \u003ci\u003ethen\u003c/i\u003e try to find users who have a problem that match their solution. This rarely works.\u003c/p\u003e\n\u003cp\u003eThe easiest way to avoid this is to ignore other people and just focus on \u003cb\u003eyour own set of problems.\u003c/b\u003e If you can manage to build something that would make your own life better, certainly you\u0026#39;ll find other people who will also appreciate it.\u003c/p\u003e\n\u003cp\u003eIn my case, I built Burnout Buddy because iOS\u0026#39;s default Screen Time feature was too simple for me. I wanted to make more complex scenarios such as schedule or location based conditions, but iOS only allows you to setup simple time limits. You also can\u0026#39;t do \u0026#34;strict\u0026#34; conditions where there\u0026#39;s no way to disable the block once it goes into effect. I searched for other alternatives, but none of them were good enough for me. So I built my own!\u003c/p\u003e\n\u003cp\u003eOnce my problem was solved, I figured out that most likely there were others out there who could also make use of it. I made the app public with zero expectations, and sure enough, there were tons of other people with the same problem I had.\u003c/p\u003e\n\u003cp\u003eBeing my app\u0026#39;s primary user also means that I\u0026#39;m perfectly positioned to know \u003cb\u003ewhich features the app should and shouldn\u0026#39;t have.\u003c/b\u003e I don\u0026#39;t need things like user interviews, because again, I built this for myself. All I have to do is ask myself what I\u0026#39;d like the app to do, and the result is sure to also be a hit with others with the same problem the app aims to solve.\u003c/p\u003e\n\u003cp\u003eI attribute Pieter Level\u0026#39;s \u003ca href=\"https://readmake.com/\"\u003eMake book\u003c/a\u003e for helping me understand this concept. It\u0026#39;s also a great resource for learning more about indie development and how to create successful products in general!\u003c/p\u003e\n\u003ch3\u003eNo backend, everything happens client-side\u003c/h3\u003e\n\u003cp\u003eAnother decision that I\u0026#39;ve made that massively simplified things for me is that everything happens on the client. There are no accounts or backend, and I gather zero data from the users.\u003c/p\u003e\n\u003cp\u003eThis means I have no backend to manage, and most importantly, no monthly server costs. As long as Apple doesn\u0026#39;t push iOS updates that break the APIs I use \u003ca href=\"https://x.com/rockbruno_/status/1835791308746789344\"\u003e(unfortunately happens a lot)\u003c/a\u003e, I can trust that everything is working as it should and focus my attention on other things. People seem to really appreciate this too, since many apps nowadays have accounts for no reason other than wanting to hoard data which is really shady.\u003c/p\u003e\n\u003ch3\u003eThe app just works\u003c/h3\u003e\n\u003cp\u003eAfter the first couple of releases, I spent a good amount of time building a good suite of tests and architecting the app so that it would be easy to expand and make it even more testable. This means I very rarely have to worry about whether or not I\u0026#39;ll push something that will fundamentally break the app. Having no backend-related code also greatly helped here.\u003c/p\u003e\n\u003cp\u003eThis doesn\u0026#39;t mean that the app is bug-free (there are a bunch of SwiftUI issues I can\u0026#39;t seem to solve, and Apple somehow manages to break their APIs on every iOS release as mentioned above), but when it comes to the core experience of the app, I can trust that everything works as it should. This saved a lot of testing / debugging time on my end and also made sure I almost never had to deal with support e-mails regarding broken features and such.\u003c/p\u003e\n\u003ch3\u003eI don\u0026#39;t extort my users\u003c/h3\u003e\n\u003cp\u003eBurnout Buddy is a one-time $9.99 bucks purchase. For a long time it used to be $4.99 even.\u003c/p\u003e\n\u003cp\u003eWhy this matters? Because most alternatives are stupidly expensive subscriptions. Most of them also don\u0026#39;t have backends and have even less features than BB, why the hell are these apps subscription-based???\u003c/p\u003e\n\u003cp\u003eSome people justify that subscriptions are necessary even for \u0026#34;simple\u0026#34; apps like BB because of things like recurring support work. While I can see the point, I also think there are other ways to tackle these issues. I for example created a FAQ support page, and that reduced 99.9% of the support requests. I\u0026#39;m not trying to extort my users and I believe this was a strong factor for the app\u0026#39;s success.\u003c/p\u003e\n\u003ch2\u003eThings that didn\u0026#39;t help\u003c/h2\u003e\n\u003cp\u003eIt would be naive of me to claim that everything went right. I\u0026#39;ve made a couple of bad decisions that worked against the app\u0026#39;s success, and I wanted to document them as well.\u003c/p\u003e\n\u003ch3\u003eThinking I could make it big without marketing\u003c/h3\u003e\n\u003cp\u003eLike I mentioned in the ASO section, it doesn\u0026#39;t matter how good your app is. You need to get the word out, otherwise it will just not work.\u003c/p\u003e\n\u003cp\u003eThere is a saying in tech that goes \u0026#34;if you build something good, people will follow\u0026#34;. Whoever said this has absolutely never attempted to sell something. I\u0026#39;m as a tech nerd as it can get and I can safely say that when it comes to building businesses, marketing is a billion times more important than building the actual product!\u003c/p\u003e\n\u003cp\u003eUnfortunately for me, I hate doing marketing work. I\u0026#39;m fine with putting a sponsorship section on this blog, but reaching out to journalists and hustling on X / LinkedIn is really not my thing. This means that while thankfully I was able to do just enough of it to get some nice results in the beginning, the app is destined to die a slow death as it drops in ranking in the App Store and other similar apps manage to get their word out better than me. Marketing is something you have to do constantly, but unfortunately for me it\u0026#39;s something I just don\u0026#39;t want to do, so there will always be a hard cap to how far I can go with any given project alone.\u003c/p\u003e\n\u003ch3\u003eMaking the app too cheap\u003c/h3\u003e\n\u003cp\u003eThis will sound weird because I mentioned above that not extorting my users was a positive. But allow me to clarify this.\u003c/p\u003e\n\u003cp\u003eOne thing I\u0026#39;ve learned the hard way is that you need to avoid \u003cb\u003echeapskates\u003c/b\u003e like the plague. This means people who expect nothing but the highest quality products, but at the same time are not willing to pay anything for it. You know when you see one because they behave like huge assholes and will do everything in their power to extract as much value from you as possible while giving nothing in return, much like the meme of a Karen screaming at the supermarket cashier because of some worthless coupon.\u003c/p\u003e\n\u003cp\u003eWhen Burnout Buddy was $4.99, I was constantly having my support e-mail being spammed by such people. They would constantly aggressively complain about different app features and demand refunds, often threatening that they would download a different app if I didn\u0026#39;t help them (...why would I care about that?). A lot of these reports didn\u0026#39;t even make sense, they were clearly people just searching for excuses to be an asshole and get free stuff. It was such a waste of my time that I even briefly considered abandoning the project entirely / pulling it from the App Store just so I wouldn\u0026#39;t have to deal with them anymore.\u003c/p\u003e\n\u003cp\u003eIt was only when I read someone complaining about the \u003ci\u003eexact same problem\u003c/i\u003e on HackerNews that I realized what my issue was. It\u0026#39;s not that giving support is a thankless job, \u003cb\u003eit\u0026#39;s that the app was too cheap.\u003c/b\u003e The cheapskates are attracted by free (or in this case, almost free) products. If you raise the price of your product \u003ci\u003ejust slightly\u003c/i\u003e, you can filter out these people without driving way the good (and kind) users.\u003c/p\u003e\n\u003cp\u003eAfter doing just that, these bizarre e-mails \u003cb\u003ecompletely vanished\u003c/b\u003e without resulting in any loss of revenue. While I of course still get support requests every now and then, they are now all very polite and helpful, which makes everything a breeze!\u003c/p\u003e\n\n\u003cp\u003eIn other words, the \u0026#34;fail\u0026#34; here is that I should\u0026#39;ve made the app cost $9.99 from the get-go to have filtered the cheapskates from the very beginning.\u003c/p\u003e\n\u003ch3\u003eNot gathering analytics\u003c/h3\u003e\n\u003cp\u003eThis is an interesting one because it\u0026#39;s both a good and a bad thing depending on how you look at it.\u003c/p\u003e\n\u003cp\u003eI mentioned above that having no accounts was a good thing because it made things easier on my side and was appreciated by the users. But it also meant that I had no information regarding how users were using the app. This made things harder for me because 1) I couldn\u0026#39;t determine which features were more popular / worth expanding upon (and which ones weren\u0026#39;t), and 2) when people reported bugs, I had no easy way to trace their steps in order to quickly reproduce the issue (or to confirm they misunderstood the app / were doing something wrong).\u003c/p\u003e\n\u003cp\u003eIf I could go back, I would probably have gone for a solution that allowed me to gather analytics data for the above reasons.\u003c/p\u003e\n\u003ch3\u003eUsing SwiftUI\u003c/h3\u003e\n\u003cp\u003eThis is mostly out-of-topic for this post, so I\u0026#39;ll keep it short. I decided to use SwiftUI for this project as a learning opportunity, and I sort of regret it. As mentioned in my \u003ca href=\"https://swiftrocks.com/my-experience-with-swiftui \"\u003eSwiftUI vs UIKit post\u003c/a\u003e, SwiftUI is good for simple apps, but awful for more complex ones. As BB grew and became more intricate, SwiftUI became more and more of an issue. The app today is full of dirty hacks and visual bugs that are impossible to solve (as of writing) because they originate from SwiftUI itself, in ways that are impossible for me to control without dumping the entire framework.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2025-01-23T14:00:00+02:00",
  "modifiedTime": null
}
