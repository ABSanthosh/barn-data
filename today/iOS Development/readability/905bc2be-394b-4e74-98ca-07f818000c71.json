{
  "id": "905bc2be-394b-4e74-98ca-07f818000c71",
  "title": "Test Your App's Accessibility with Evinced",
  "link": "https://mobilea11y.com/blog/evinced-ios/",
  "description": "Disclosure: Evinced has paid for my time in writing this blog, and I have provided them feedback on the version of their tool reviewed and an early beta. I agreed to this because I believe in the product they are offering. Testing your app for accessibility is an essential part of making an accessible app, as with any part of the software you build, if you don’t test it, how can you be sure it works?",
  "author": "",
  "published": "Wed, 24 Mar 2021 07:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 4599,
  "excerpt": "Disclosure: Evinced has paid for my time in writing this blog, and I have provided them feedback on the version of their tool reviewed and an early beta. I agreed to this because I believe in the product they are offering.",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "Disclosure: Evinced has paid for my time in writing this blog, and I have provided them feedback on the version of their tool reviewed and an early beta. I agreed to this because I believe in the product they are offering. Testing your app for accessibility is an essential part of making an accessible app, as with any part of the software you build, if you don’t test it, how can you be sure it works? Because accessibility is human, there are no true shortcuts to this, a through manual test will always be the most productive form of accessibility testing possible. But with some carefully designed automated checks, you can detect common accessibility issues quicker and earlier. This makes fixing them easier, the chance of these errors reaching your customers is reduced, and it saves you valuable time for resolving more complex issues. It’s not an easy problem to solve - I’ve tried with A11yUITests, and Apple built their offering, Accessibility Inspector, right in to Xcode. Now a new tool has entered the arena from Evinced, the iOS Accessibility Debugger. Evinced already produces an accessibility scanner tool for the web, and now they have decided to turn their expertise to mobile. Their initial offering for iOS is available for free for any developer to add to their workflow. So if you’re looking to take a positive step towards making a more accessible app, this tool is a no-brainer. Installation is through cocoapods, and while there are a few steps, if you’re familiar with including a cocoapod library the process should be straightforward. Once you’ve installed the library, build your app to a test device. Your app’s results are presented in a companion app for Mac or PC. Pairing your iOS app to the companion is achieved painlessly through scanning a QR code, and you’re ready to start checking your app’s accessibility. In your iOS app, navigate to the screen you want to audit, and in the Evinced desktop app hit the “Scan” button. After a brief pause you’ll see a screenshot of your app appear in the debugger with accessibility violations highlighted and labeled. The list of scan results provides a summary of the failure and a hint on how to fix it. Also included is a link to a more detailed knowledge base article covering what the violation is, who it may affect, and code samples to fix the issue. Followed by links to the relevant WCAG guideline. Evinced’s tool can currently detect missing traits, missing accessibility labels, invalid accessibility labels, insufficient colour contrast for text against the background, small hit targets, and interactive elements that are not accessible to assistive technologies. Validations on Evinced’s roadmap include highlighting elements that are accessible to assistive tech but not visible on screen, focus order when this differs from visual order, and conflicting hit targets. Sharing reports is simple too. You can export each screen and it’s failures, along with screenshots highlighting them, in a single HTML file, allowing you to easily spread the knowledge across your team. Fitting Evinced into Your Workflow Knowing how to use a tool like Evinced is important. It can’t, and shouldn’t, replace manual accessibility testing with assistive technologies enabled. Neither should it replace user testing with a diverse group of participants. It’s essential that you don’t assume your app will be compliant, or indeed even usable, by virtue of running Evinced’s scanner. Where Evinced can help is by catching potential issues earlier in the development cycle. Developers can run a scan on a screen quickly and simply to find potential issues in how a screen is built before progressing a ticket. QA engineers can use the results as a way of identifying common errors faster than with manual testing. But because accessibility is about humans, that human interaction with the software still needs to happen to be sure your app is accessible. This is a promising contribution to the accessibility tool space for mobile. This is Evinced’s initial release, but in my testing their tool is already comparable with Apple’s own Accessibility Inspector, with Accessibility Inspector beating Evinced only on detecting Dynamic Type support. Evinced have received backing from some big names, so future development is promising for where this tool can go. As well as making the tool free, Evinced have also open sourced the SDK under the MIT licence opening the door for community contributions to their rules engine. To get started with Evinced’s free iOS Accessibility Debugger register for an account at Evinced.com",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cblockquote\u003e\n\u003cp\u003eDisclosure: Evinced has paid for my time in writing this blog, and I have provided them feedback on the version of their tool reviewed and an early beta. I agreed to this because I believe in the product they are offering.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTesting your app for accessibility is an essential part of making an accessible app, as with any part of the software you build, if you don’t test it, how can you be sure it works? Because accessibility is human, there are no true shortcuts to this, a through manual test will always be the most productive form of accessibility testing possible. But with some carefully designed automated checks, you can detect common accessibility issues quicker and earlier. This makes fixing them easier, the chance of these errors reaching your customers is reduced, and it saves you valuable time for resolving more complex issues. It’s not an easy problem to solve - I’ve tried with \u003ca href=\"https://github.com/rwapp/A11yUITests\"\u003eA11yUITests\u003c/a\u003e, and Apple built their offering, \u003ca href=\"https://developer.apple.com/videos/play/wwdc2019/257/\"\u003eAccessibility Inspector\u003c/a\u003e, right in to Xcode. Now a new tool has entered the arena from \u003ca href=\"https://evinced.com\"\u003eEvinced\u003c/a\u003e, the iOS Accessibility Debugger.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/evinced.png\" alt=\"Evinced\u0026amp;rsquo;s iOS debugger highlighting a colour contrast failure\"/\u003e\u003c/p\u003e\n\u003cp\u003eEvinced already produces an accessibility scanner tool for the \u003ca href=\"https://marcysutton.com/evinced-automated-accessibility-testing\"\u003eweb\u003c/a\u003e, and now they have decided to turn their expertise to mobile. Their initial offering for \u003ca href=\"https://www.evinced.com/products/flow-analyzer-mobile\"\u003eiOS\u003c/a\u003e is available for free for any developer to add to their workflow. So if you’re looking to take a positive step towards making a more accessible app, this tool is a no-brainer.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.evinced.com/products/flow-analyzer-mobile/product-documentation/ios-connection\"\u003eInstallation\u003c/a\u003e is through \u003ca href=\"https://cocoapods.org\"\u003ecocoapods\u003c/a\u003e, and while there are a few steps, if you’re familiar with including a cocoapod library the process should be straightforward. Once you’ve installed the library, build your app to a test device. Your app’s results are presented in a companion app for Mac or PC. Pairing your iOS app to the companion is achieved painlessly through scanning a QR code, and you’re ready to start checking your app’s accessibility.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/evinced-buttons.png\" alt=\"Evinced\u0026amp;rsquo;s iOS debugger\u0026amp;rsquo;s scan, clear and QR code pair buttons\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn your iOS app, navigate to the screen you want to audit, and in the Evinced desktop app hit the “Scan” button. After a brief pause you’ll see a screenshot of your app appear in the debugger with accessibility violations highlighted and labeled. The list of scan results provides a summary of the failure and a hint on how to fix it. Also included is a link to a more detailed \u003ca href=\"https://knowledge.evinced.com/mobile-validations/color-contrast\"\u003eknowledge base\u003c/a\u003e article covering what the violation is, who it may affect, and code samples to fix the issue. Followed by links to the relevant \u003ca href=\"https://www.w3.org/TR/WCAG21/\"\u003eWCAG\u003c/a\u003e guideline.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/evinced-result.png\" alt=\"Evinced iOS debugger highlighting a tappable area failure\"/\u003e\u003c/p\u003e\n\u003cp\u003eEvinced’s tool can currently detect missing traits, missing accessibility labels, invalid accessibility labels, insufficient colour contrast for text against the background, small hit targets, and interactive elements that are not accessible to assistive technologies. Validations on Evinced’s roadmap include highlighting elements that are accessible to assistive tech but not visible on screen, focus order when this differs from visual order, and conflicting hit targets. Sharing reports is simple too. You can export each screen and it’s failures, along with screenshots highlighting them, in a single HTML file, allowing you to easily spread the knowledge across your team.\u003c/p\u003e\n\u003ch2 id=\"fitting-evinced-into-your-workflow\"\u003eFitting Evinced into Your Workflow\u003c/h2\u003e\n\u003cp\u003eKnowing how to use a tool like Evinced is important. It can’t, and shouldn’t, replace manual accessibility testing with assistive technologies enabled. Neither should it replace user testing with a diverse group of participants. It’s essential that you don’t assume your app will be compliant, or indeed even usable, by virtue of running Evinced’s scanner. Where Evinced can help is by catching potential issues earlier in the development cycle. Developers can run a scan on a screen quickly and simply to find potential issues in how a screen is built before progressing a ticket. QA engineers can use the results as a way of identifying common errors faster than with manual testing. But because accessibility is about humans, that human interaction with the software still needs to happen to be sure your app is accessible.\u003c/p\u003e\n\u003cp\u003eThis is a promising contribution to the accessibility tool space for mobile. This is Evinced’s initial release, but in my testing their tool is already comparable with Apple’s own Accessibility Inspector, with Accessibility Inspector beating Evinced only on detecting Dynamic Type support. Evinced have received backing from some \u003ca href=\"https://www.prnewswire.com/news-releases/evinced-raises-17m-announces-series-a-to-launch-enterprise-digital-accessibility-platform-for-software-development-teams-301220961.html\"\u003ebig names\u003c/a\u003e, so future development is promising for where this tool can go. As well as making the tool free, Evinced have also \u003ca href=\"https://github.com/GetEvinced/ios-sdk\"\u003eopen sourced\u003c/a\u003e the SDK under the MIT licence opening the door for community contributions to their rules engine.\u003c/p\u003e\n\u003cp\u003eTo get started with \u003ca href=\"https://www.evinced.com\"\u003eEvinced’s\u003c/a\u003e free \u003ca href=\"https://www.evinced.com/products/flow-analyzer-mobile\"\u003eiOS Accessibility Debugger\u003c/a\u003e register for an account at \u003ca href=\"https://www.evinced.com/\"\u003eEvinced.com\u003c/a\u003e\u003c/p\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
