{
  "id": "5f6b8e1e-ee8e-4674-b4e9-5ed07490803a",
  "title": "Quick Win - Support Landscape",
  "link": "https://mobilea11y.com/quick-wins/landscape/",
  "description": "If you have a regulatory requirement to provide accessibility in your app (spoiler, you do) the chances are it will say you have a requirement to reach WCAG AA. While this is likely meaningless to anyone other an accessibility professionals, in short it means you are providing the minimum level of accessibility features required to make your app usable by the majority of people. This post is about one such requirement, the jazzily titled Success Criterion 1.",
  "author": "",
  "published": "Thu, 28 Jan 2021 07:30:56 +0000",
  "source": "https://mobilea11y.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 2655,
  "excerpt": "If you have a regulatory requirement to provide accessibility in your app (spoiler, you do) the chances are it will say you have a requirement to reach WCAG AA. While this is likely meaningless to anyone other an accessibility professionals, in short it means you are providing the minimum level of accessibility features required to make your app usable by the majority of people.",
  "siteName": "",
  "favicon": "https://mobilea11y.com/apple-touch-icon.png",
  "text": "If you have a regulatory requirement to provide accessibility in your app (spoiler, you do) the chances are it will say you have a requirement to reach WCAG AA. While this is likely meaningless to anyone other an accessibility professionals, in short it means you are providing the minimum level of accessibility features required to make your app usable by the majority of people. This post is about one such requirement, the jazzily titled Success Criterion 1.3.4. 1.3.4 is often overlooked, I’ve see it forgotten by accessibility auditors, overlooked by testers, removed by engineers, and ignored by designers. Yet this feature is one that is already enabled by default in your app. One that you have to choose to disable. For both Android and iOS when you create a new app, the app supports landscape mode out of the box, and all you need to do to continue supporting it is to build robust interfaces, and not disable it. Yet often one of the first things developers do when creating a new app is to disable landscape modes. I get it, most apps probably do work and look best in portrait, and the majority of your users probably will never want to use landscape. But accessibility is about providing the flexibility for your customers to use your software the way that is most comfortable for them, not the way you’re forcing them to because it makes your development work easier. Landscape allows more characters per line, ideal for larger text sizes. It makes on screen keyboards bigger meaning the keys are easier to see and easier to hit. Some users may have their device locked or secured in position, such as a wheelchair mount, or a stand for if the user can’t easily hold or manually manipulate their device. All these categories of people will appreciate you leaving this default option available to them. So next time you start an app, don’t disable landscape. And if you have already disabled it, consider re-enabling landscape orientations by checking these settings. In Android check your activities don’t include the following property. android:screenOrientation=\"portrait\" For iOS check your app target’s general settings and ensure the landscape checkboxes are enabled. If your app wasn’t built with landscape in mind it’s now worth checking your app’s screens in a landscape orientation. If your interfaces were built in a robust manner using the correct constraints, stacks and layouts then your app should just work. But you might find some components that need a little updating so they know how to correctly display in this new orientation. Check for overlapping elements, or elements that haven’t expanded as far as they should.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n    \u003cp\u003eIf you have a regulatory requirement to provide accessibility in your app (spoiler, you do) the chances are it will say you have a requirement to reach \u003ca href=\"https://www.w3.org/TR/WCAG21/\"\u003eWCAG AA\u003c/a\u003e. While this is likely meaningless to anyone other an accessibility professionals, in short it means you are providing the minimum level of accessibility features required to make your app usable by the majority of people.\u003c/p\u003e\n\u003cp\u003eThis post is about one such requirement, the jazzily titled \u003ca href=\"https://www.w3.org/WAI/WCAG21/Understanding/orientation.html\"\u003eSuccess Criterion 1.3.4\u003c/a\u003e. 1.3.4 is often overlooked, I’ve see it forgotten by accessibility auditors, overlooked by testers, removed by engineers, and ignored by designers. Yet this feature is one that is already enabled by default in your app. One that you have to choose to disable. For both Android and iOS when you create a new app, the app supports landscape mode out of the box, and all you need to do to continue supporting it is to build robust interfaces, and not disable it. Yet often one of the first things developers do when creating a new app is to disable landscape modes.\u003c/p\u003e\n\u003cp\u003eI get it, most apps probably do work and look best in portrait, and the majority of your users probably will never want to use landscape. But accessibility is about providing the flexibility for your customers to use your software the way that is most comfortable for them, not the way you’re forcing them to because it makes your development work easier.\u003c/p\u003e\n\u003cp\u003eLandscape allows more characters per line, ideal for larger text sizes. It makes on screen keyboards bigger meaning the keys are easier to see and easier to hit. Some users may have their device locked or secured in position, such as a wheelchair mount, or a stand for if the user can’t easily hold or manually manipulate their device. All these categories of people will appreciate you leaving this default option available to them.\u003c/p\u003e\n\u003cp\u003eSo next time you start an app, don’t disable landscape. And if you have already disabled it, consider re-enabling landscape orientations by checking these settings.\u003c/p\u003e\n\u003cp\u003eIn Android check your activities don’t include the following property.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eandroid:screenOrientation=\u0026#34;portrait\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor iOS check your app target’s general settings and ensure the landscape checkboxes are enabled.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://mobilea11y.com/images/LandscapeCheckbox.png\" alt=\"Xcode checkboxes for device orientation.\"/\u003e\u003c/p\u003e\n\u003cp\u003eIf your app wasn’t built with landscape in mind it’s now worth checking your app’s screens in a landscape orientation. If your interfaces were built in a robust manner using the correct constraints, stacks and layouts then your app should just work. But you might find some components that need a little updating so they know how to correctly display in this new orientation. Check for overlapping elements, or elements that haven’t expanded as far as they should.\u003c/p\u003e\n\n    \n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
