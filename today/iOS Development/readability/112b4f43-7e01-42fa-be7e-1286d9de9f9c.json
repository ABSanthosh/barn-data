{
  "id": "112b4f43-7e01-42fa-be7e-1286d9de9f9c",
  "title": "Entry Macro for Custom SwiftUI Environment Values",
  "link": "https://useyourloaf.com/blog/entry-macro-for-custom-swiftui-environment-values/",
  "description": "The Entry macro reduces the boilerplate when customizing the SwiftUI environment. Creating New Environment Values - A Recap Adding our own values to the SwiftUI environment is a common operation but it requires some boilerplate code each time. See SwiftUI Custom Environment Values for an example but here’s a quick recap: Create the environment key with a default value: private struct CaptionColorKey: EnvironmentKey { static let defaultValue = Color(.secondarySystemBackground) } Extend the environment adding a getter/setter for our key: extension EnvironmentValues { var captionBackgroundColor: Color { get { self[CaptionColorKey.self] } set { self[CaptionColorKey.self] = newValue } } } At this point we can already use our custom environment value: ContentView() .environment(\\.captionBackgroundColor, .yellow) Then in the ContentView: struct ContentView: View { @Environment(\\.captionBackgroundColor) var captionBackgroundColor var body: some View { Text(\"Hello, world!\") .background(captionBackgroundColor) } } An optional third step adds a view modifier to allow a more compact syntax: extension View { func captionBackgroundColor(_ color: Color) -\u003e some View { environment(\\.captionBackgroundColor, color) } } That allows us to write: ContentView() .captionBackgroundColor(.yellow) The Entry macro helps us with the first two steps. Using the Entry Macro The Entry macro allows us to replace the first two steps, directly extending the environment: extension EnvironmentValues { @Entry var captionBackgroundColor: Color = Color(.secondarySystemBackground) } Expanding the macro shows us the generated code: extension EnvironmentValues { { get { self[__Key_captionBackgroundColor.self] } set { self[__Key_captionBackgroundColor.self] = newValue } } private struct __Key_captionBackgroundColor: SwiftUICore.EnvironmentKey { typealias Value = Color static var defaultValue: Value { Color(.secondarySystemBackground) } } } The Entry macro doesn’t help with the final optional step of adding a view modifier but it does remove the rest of the boilerplate. It also works for adding Transaction, ContainerValues, and FocusedValues, and works back to iOS 13 so there’s no need to wait to use it. Learn More WWDC24 What’s new in SwiftUI SwiftUI Custom Environment Values Entry Macro for Custom SwiftUI Environment Values was originally posted 12 Aug 2024 on useyourloaf.com. Want this direct to your inbox? Sign up and get my free WWDC viewing guide PDF.",
  "author": "",
  "published": "Mon, 12 Aug 2024 10:37:14 +0100",
  "source": "https://useyourloaf.com/blog/rss.xml",
  "categories": null,
  "byline": "",
  "length": 2378,
  "excerpt": "The Entry macro reduces the boilerplate when customizing the SwiftUI environment.",
  "siteName": "Use Your Loaf - iOS Development News \u0026 Tips",
  "favicon": "https://useyourloaf.com/apple-touch-icon.png",
  "text": "The Entry macro reduces the boilerplate when customizing the SwiftUI environment. Creating New Environment Values - A Recap Adding our own values to the SwiftUI environment is a common operation but it requires some boilerplate code each time. See SwiftUI Custom Environment Values for an example but here’s a quick recap: Create the environment key with a default value: private struct CaptionColorKey: EnvironmentKey { static let defaultValue = Color(.secondarySystemBackground) } Extend the environment adding a getter/setter for our key: extension EnvironmentValues { var captionBackgroundColor: Color { get { self[CaptionColorKey.self] } set { self[CaptionColorKey.self] = newValue } } } At this point we can already use our custom environment value: ContentView() .environment(\\.captionBackgroundColor, .yellow) Then in the ContentView: struct ContentView: View { @Environment(\\.captionBackgroundColor) var captionBackgroundColor var body: some View { Text(\"Hello, world!\") .background(captionBackgroundColor) } } An optional third step adds a view modifier to allow a more compact syntax: extension View { func captionBackgroundColor(_ color: Color) -\u003e some View { environment(\\.captionBackgroundColor, color) } } That allows us to write: ContentView() .captionBackgroundColor(.yellow) The Entry macro helps us with the first two steps. Using the Entry Macro The Entry macro allows us to replace the first two steps, directly extending the environment: extension EnvironmentValues { @Entry var captionBackgroundColor: Color = Color(.secondarySystemBackground) } Expanding the macro shows us the generated code: extension EnvironmentValues { { get { self[__Key_captionBackgroundColor.self] } set { self[__Key_captionBackgroundColor.self] = newValue } } private struct __Key_captionBackgroundColor: SwiftUICore.EnvironmentKey { typealias Value = Color static var defaultValue: Value { Color(.secondarySystemBackground) } } } The Entry macro doesn’t help with the final optional step of adding a view modifier but it does remove the rest of the boilerplate. It also works for adding Transaction, ContainerValues, and FocusedValues, and works back to iOS 13 so there’s no need to wait to use it. Learn More WWDC24 What’s new in SwiftUI SwiftUI Custom Environment Values",
  "image": "https://useyourloaf.com/blog/entry-macro-for-custom-swiftui-environment-values/cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eThe Entry macro reduces the boilerplate when customizing the SwiftUI environment.\u003c/p\u003e\n\u003ch3 id=\"creating-new-environment-values---a-recap\"\u003eCreating New Environment Values - A Recap\u003c/h3\u003e\n\u003cp\u003eAdding our own values to the SwiftUI environment is a common operation but it requires some boilerplate code each time. See \u003ca href=\"https://useyourloaf.com/blog/swiftui-custom-environment-values/\"\u003eSwiftUI Custom Environment Values\u003c/a\u003e for an example but here’s a quick recap:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eCreate the environment key with a default value:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eCaptionColorKey\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eEnvironmentKey\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e \u003cspan\u003edefaultValue\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003esecondarySystemBackground\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eExtend the environment adding a getter/setter for our key:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eEnvironmentValues\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecaptionBackgroundColor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eCaptionColorKey\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eset\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eCaptionColorKey\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enewValue\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAt this point we can already use our custom environment value:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eContentView\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eenvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecaptionBackgroundColor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eyellow\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen in the \u003ccode\u003eContentView\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eContentView\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eEnvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecaptionBackgroundColor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecaptionBackgroundColor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e     \u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Hello, world!\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e         \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebackground\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecaptionBackgroundColor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAn optional third step adds a view modifier to allow a more compact syntax:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003ecaptionBackgroundColor\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e \u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003esome\u003c/span\u003e \u003cspan\u003eView\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eenvironment\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecaptionBackgroundColor\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ecolor\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat allows us to write:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eContentView\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecaptionBackgroundColor\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003eyellow\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe \u003ccode\u003eEntry\u003c/code\u003e macro helps us with the first two steps.\u003c/p\u003e\n\u003ch3 id=\"using-the-entry-macro\"\u003eUsing the Entry Macro\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eEntry\u003c/code\u003e macro allows us to replace the first two steps, directly extending the environment:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eEnvironmentValues\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e@\u003c/span\u003e\u003cspan\u003eEntry\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003ecaptionBackgroundColor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003esecondarySystemBackground\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExpanding the macro shows us the generated code:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eEnvironmentValues\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e__Key_captionBackgroundColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003eset\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e__Key_captionBackgroundColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enewValue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003e__Key_captionBackgroundColor\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSwiftUICore\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eEnvironmentKey\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003etypealias\u003c/span\u003e \u003cspan\u003eValue\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003evar\u003c/span\u003e \u003cspan\u003edefaultValue\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eValue\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e(.\u003c/span\u003e\u003cspan\u003esecondarySystemBackground\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe Entry macro doesn’t help with the final optional step of adding a view modifier but it does remove the rest of the boilerplate. It also works for adding Transaction, ContainerValues, and FocusedValues, and works back to iOS 13 so there’s no need to wait to use it.\u003c/p\u003e\n\u003ch3 id=\"learn-more\"\u003eLearn More\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.apple.com/wwdc24/10144\"\u003eWWDC24 What’s new in SwiftUI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://useyourloaf.com/blog/swiftui-custom-environment-values/\"\u003eSwiftUI Custom Environment Values\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-08-12T10:37:14+01:00",
  "modifiedTime": "2024-08-12T11:15:08+01:00"
}
