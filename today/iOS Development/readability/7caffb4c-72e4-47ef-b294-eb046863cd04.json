{
  "id": "7caffb4c-72e4-47ef-b294-eb046863cd04",
  "title": "CloudWatch dashboards and alarms on Mac instances",
  "link": "https://albertodebortoli.com/2023/08/06/cloudwatch-dashboards-and-alarms-on-mac-instances/",
  "description": "CloudWatch is great for observing and monitoring resources and applications on AWS, on premises, and on other clouds.While it's trivial to have the agent running on Linux, it's a bit more involved for mac instances (which are commonly used as CI workers). The support was",
  "author": "Alberto De Bortoli",
  "published": "Sun, 06 Aug 2023 14:24:43 GMT",
  "source": "https://albertodebortoli.com/rss/",
  "categories": null,
  "byline": "Alberto De Bortoli",
  "length": 13449,
  "excerpt": "CloudWatch is great for observing and monitoring resources and applications on AWS, on premises, and on other clouds. While it's trivial to have the agent running on Linux, it's a bit more involved for mac instances (which are commonly used as CI workers). The support was announced in January 2021 for mac1.metal (Intel/x86_64) and I bumped into some challenges on mac2.metal (M1/ARM64) that the team at AWS helped me solve (see this issue on the GitHub repo). I couldn't find other articles nor p",
  "siteName": "Alberto De Bortoli",
  "favicon": "",
  "text": "CloudWatch is great for observing and monitoring resources and applications on AWS, on premises, and on other clouds.While it's trivial to have the agent running on Linux, it's a bit more involved for mac instances (which are commonly used as CI workers). The support was announced in January 2021 for mac1.metal (Intel/x86_64) and I bumped into some challenges on mac2.metal (M1/ARM64) that the team at AWS helped me solve (see this issue on the GitHub repo).I couldn't find other articles nor precise documentation from AWS which is why I'm writing this article to walk you through a common CloudWatch setup.The given code samples are for the HashiCorp tools Packer and Terraform and focus on mac2.metal instances.I'll cover the following steps:install the CloudWatch agent on mac2.metal instancesconfigure the CloudWatch agentcreate a CloudWatch dashboardsetup CloudWatch alarmssetup IAM permissionsInstall the CloudWatch agentThe CloudWatch agent can be installed by downloading the pkg file listed on this page and running the installer. You probably want to bake the agent into your AMI, so here is the Packer code for mac2.metal (ARM):# Install wget via brew provisioner \"shell\" { inline = [ \"source ~/.zshrc\", \"brew install wget\" ] } # Install CloudWatch agent provisioner \"shell\" { inline = [ \"source ~/.zshrc\", \"wget https://s3.amazonaws.com/amazoncloudwatch-agent/darwin/arm64/latest/amazon-cloudwatch-agent.pkg\", \"sudo installer -pkg ./amazon-cloudwatch-agent.pkg -target /\" ] }For the agent to work, you'll need collectd (https://collectd.org/) to be installed on the machine, which is usually done via brew. Brew installs it at /opt/homebrew/sbin/. This is also a step you want to perform when creating your AMI.# Install collectd via brew provisioner \"shell\" { inline = [ \"source ~/.zshrc\", \"brew install collectd\" ] }Configure the CloudWatch agentIn order to run, the agent needs a configuration which can be created using the wizard. This page defines the metric sets that are available.Running the wizard with the command below will allow you to generate a basic json configuration which you can modify later.sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizardThe following is a working configuration for Mac instances so you can skip the process.{ \"agent\": { \"metrics_collection_interval\": 60, \"run_as_user\": \"root\" }, \"metrics\": { \"aggregation_dimensions\": [ [ \"InstanceId\" ] ], \"append_dimensions\": { \"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\", \"ImageId\": \"${aws:ImageId}\", \"InstanceId\": \"${aws:InstanceId}\", \"InstanceType\": \"${aws:InstanceType}\" }, \"metrics_collected\": { \"collectd\": { \"collectd_typesdb\": [ \"/opt/homebrew/opt/collectd/share/collectd/types.db\" ], \"metrics_aggregation_interval\": 60 }, \"cpu\": { \"measurement\": [ \"cpu_usage_idle\", \"cpu_usage_iowait\", \"cpu_usage_user\", \"cpu_usage_system\" ], \"metrics_collection_interval\": 60, \"resources\": [ \"*\" ], \"totalcpu\": false }, \"disk\": { \"measurement\": [ \"used_percent\", \"inodes_free\" ], \"metrics_collection_interval\": 60, \"resources\": [ \"*\" ] }, \"diskio\": { \"measurement\": [ \"io_time\", \"write_bytes\", \"read_bytes\", \"writes\", \"reads\" ], \"metrics_collection_interval\": 60, \"resources\": [ \"*\" ] }, \"mem\": { \"measurement\": [ \"mem_used_percent\" ], \"metrics_collection_interval\": 60 }, \"netstat\": { \"measurement\": [ \"tcp_established\", \"tcp_time_wait\" ], \"metrics_collection_interval\": 60 }, \"statsd\": { \"metrics_aggregation_interval\": 60, \"metrics_collection_interval\": 10, \"service_address\": \":8125\" }, \"swap\": { \"measurement\": [ \"swap_used_percent\" ], \"metrics_collection_interval\": 60 } } } }I have enhanced the output of the wizard with some reasonable metrics to collect. The configuration created by the wizard is almost working but it's lacking a fundamental config to make it work out-of-the-box: the collectd_typesdb value. Linux and Mac differ when it comes to the location of collectd and types.db, and the agent defaults to the Linux path even if it was built for Mac, causing the following error when trying to run the agent:======== Error Log ======== 2023-07-23T04:57:28Z E! [telegraf] Error running agent: Error loading config file /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml: error parsing socket_listener, open /usr/share/collectd/types.db: no such file or directory Moreover, the /usr/share/ folder is not writable unless you disable SIP (System Integrity Protection) which cannot be done on EC2 mac instances nor is something you want to do for security reasons.The final configuration is something you want to save in System Manager Parameter Store using the ssm_parameter resource in Terraform:resource \"aws_ssm_parameter\" \"cw_agent_config_darwin\" { name = \"/cloudwatch-agent/config/darwin\" description = \"CloudWatch agent config for mac instances\" type = \"String\" value = file(\"./cw-agent-config-darwin.json\") }and use it when running the agent in a provisioning step:resource \"null_resource\" \"run_cloudwatch_agent\" { depends_on = [ aws_instance.mac_instance ] connection { type = \"ssh\" agent = false host = aws_instance.mac_instance.private_ip user = \"ec2-user\" private_key = tls_private_key.mac_instance.private_key_pem timeout = \"30m\" } # Run CloudWatch agent provisioner \"remote-exec\" { inline = [ \"sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:${aws_ssm_parameter.cw_agent_config_darwin.name}\" ] } }Create a CloudWatch dashboardOnce the instances are deployed and running, they will send events to CloudWatch and we can create a dashboard to visualise them. You can create a dashboard manually in the console and once you are happy with it, you can just copy the source code, store it in a file and feed it to Terraform.Here is mine that could probably work for you too if you tag your instances with the Type set to macOS:{ \"widgets\": [ { \"height\": 15, \"width\": 24, \"y\": 0, \"x\": 0, \"type\": \"explorer\", \"properties\": { \"metrics\": [ { \"metricName\": \"cpu_usage_user\", \"resourceType\": \"AWS::EC2::Instance\", \"stat\": \"Average\" }, { \"metricName\": \"cpu_usage_system\", \"resourceType\": \"AWS::EC2::Instance\", \"stat\": \"Average\" }, { \"metricName\": \"disk_used_percent\", \"resourceType\": \"AWS::EC2::Instance\", \"stat\": \"Average\" }, { \"metricName\": \"diskio_read_bytes\", \"resourceType\": \"AWS::EC2::Instance\", \"stat\": \"Average\" }, { \"metricName\": \"diskio_write_bytes\", \"resourceType\": \"AWS::EC2::Instance\", \"stat\": \"Average\" } ], \"aggregateBy\": { \"key\": \"\", \"func\": \"\" }, \"labels\": [ { \"key\": \"Type\", \"value\": \"macOS\" } ], \"widgetOptions\": { \"legend\": { \"position\": \"bottom\" }, \"view\": \"timeSeries\", \"stacked\": false, \"rowsPerPage\": 50, \"widgetsPerRow\": 1 }, \"period\": 60, \"splitBy\": \"\", \"region\": \"eu-west-1\" } } ] }You can then use the cloudwatch_dashboard resource in Terraform:resource \"aws_cloudwatch_dashboard\" \"mac_instances\" { dashboard_name = \"mac-instances\" dashboard_body = file(\"./cw-dashboard-mac-instances.json\") }It will show something like this:Setup CloudWatch alarmsOnce the dashboard is up, you should set up alarms so that you are notified of any anomalies, rather than actively monitoring the dashboard for them.What works for me is having alarms triggered via email when the used disk space is going above a certain level (say 80%). We can use the cloudwatch_metric_alarm resource.resource \"aws_cloudwatch_metric_alarm\" \"disk_usage\" { alarm_name = \"mac-${aws_instance.mac_instance.id}-disk-usage\" comparison_operator = \"GreaterThanThreshold\" evaluation_periods = 30 metric_name = \"disk_used_percent\" namespace = \"CWAgent\" period = 120 statistic = \"Average\" threshold = 80 alarm_actions = [aws_sns_topic.disk_usage.arn] dimensions = { InstanceId = aws_instance.mac_instance.id } } We can then create an SNS topic and subscribe all interested parties to it. This will allow us to broadcast to all subscribers when the alarm is triggered. For this, we can use the sns_topic and sns_topic_subscription resources.resource \"aws_sns_topic\" \"disk_usage\" { name = \"CW_Alarm_disk_usage_mac_${aws_instance.mac_instance.id}\" } resource \"aws_sns_topic_subscription\" \"disk_usage\" { for_each = toset(var.alarm_subscriber_emails) topic_arn = aws_sns_topic.disk_usage.arn protocol = \"email\" endpoint = each.value } variable \"alarm_subscriber_emails\" { type = list(string) }If you are deploying your infrastructure via GitHub Actions, you can set your subscribers as a workflow input or as an environment variable. Here is how you should pass a list of strings via a variable in Terraform:name: Deploy Mac instance env: ALARM_SUBSCRIBERS: '[\"user1@example.com\",\"user2@example.com\"]' AMI: ... jobs: deploy: ... steps: - name: Terraform apply run: | terraform apply \\ --var ami=${{ env.AMI }} \\ --var alarm_subscriber_emails='${{ env.ALARM_SUBSCRIBERS }}' \\ --auto-approveSetup IAM permissionsThe instance that performs the deployment requires permissions for CloudWatch, System Manager, and SNS.The following is a policy that is enough to perform both terraform apply and terraform destroy. Please consider restricting to specific resources. { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"CloudWatchDashboardsPermissions\", \"Effect\": \"Allow\", \"Action\": [ \"cloudwatch:DeleteDashboards\", \"cloudwatch:GetDashboard\", \"cloudwatch:ListDashboards\", \"cloudwatch:PutDashboard\" ], \"Resource\": \"*\" }, { \"Sid\": \"CloudWatchAlertsPermissions\", \"Effect\": \"Allow\", \"Action\": [ \"cloudwatch:DescribeAlarms\", \"cloudwatch:DescribeAlarmsForMetric\", \"cloudwatch:DescribeAlarmHistory\", \"cloudwatch:DeleteAlarms\", \"cloudwatch:DisableAlarmActions\", \"cloudwatch:EnableAlarmActions\", \"cloudwatch:ListTagsForResource\", \"cloudwatch:PutMetricAlarm\", \"cloudwatch:PutCompositeAlarm\", \"cloudwatch:SetAlarmState\" ], \"Resource\": \"*\" }, { \"Sid\": \"SystemsManagerPermissions\", \"Effect\": \"Allow\", \"Action\": [ \"ssm:GetParameter\", \"ssm:GetParameters\", \"ssm:ListTagsForResource\", \"ssm:DeleteParameter\", \"ssm:DescribeParameters\", \"ssm:PutParameter\" ], \"Resource\": \"*\" }, { \"Sid\": \"SNSPermissions\", \"Effect\": \"Allow\", \"Action\": [ \"sns:CreateTopic\", \"sns:DeleteTopic\", \"sns:GetTopicAttributes\", \"sns:GetSubscriptionAttributes\", \"sns:ListSubscriptions\", \"sns:ListSubscriptionsByTopic\", \"sns:ListTopics\", \"sns:SetSubscriptionAttributes\", \"sns:SetTopicAttributes\", \"sns:Subscribe\", \"sns:Unsubscribe\" ], \"Resource\": \"*\" } ] } On the other hand, to send logs to CloudWatch, the Mac instances require permissions given by the CloudWatchAgentServerPolicy:resource \"aws_iam_role_policy_attachment\" \"mac_instance_iam_role_cw_policy_attachment\" { role = aws_iam_role.mac_instance_iam_role.name policy_arn = \"arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\" }ConclusionYou have now defined your CloudWatch dashboard and alarms using \"Infrastructure as Code\" via Packer and Terraform. I've covered the common use case of instances running out of space on disk which is useful to catch before CI starts becoming unresponsive slowing your team down.",
  "image": "https://albertodebortoli.com/content/images/size/w1200/2024/02/joshua-fuller-N2q8hRVzEg8-unsplash.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\t\t\t\u003cp\u003e\u003ca href=\"https://aws.amazon.com/cloudwatch/?ref=albertodebortoli.com\"\u003eCloudWatch\u003c/a\u003e is great for observing and monitoring resources and applications on AWS, on premises, and on other clouds.\u003c/p\u003e\u003cp\u003eWhile it\u0026#39;s trivial to have the agent running on Linux, it\u0026#39;s a bit more involved for mac instances (which are commonly used as CI workers). The support \u003ca href=\"https://aws.amazon.com/about-aws/whats-new/2021/01/amazon-cloudwatch-agent-now-supports-macos-on-amazon-ec2-mac-instances/?ref=albertodebortoli.com\"\u003ewas\u003c/a\u003e\u003ca href=\"https://aws.amazon.com/about-aws/whats-new/2021/01/amazon-cloudwatch-agent-now-supports-macos-on-amazon-ec2-mac-instances/?ref=albertodebortoli.com\"\u003e announced\u003c/a\u003e in January 2021 for mac1.metal (Intel/x86_64) and I bumped into some challenges on mac2.metal (M1/ARM64) that the team at AWS helped me solve (see \u003ca href=\"https://github.com/aws/amazon-cloudwatch-agent/issues/798?ref=albertodebortoli.com\"\u003ethis issue\u003c/a\u003e on the GitHub repo).\u003c/p\u003e\u003cp\u003eI couldn\u0026#39;t find other articles nor precise documentation from AWS which is why I\u0026#39;m writing this article to walk you through a common CloudWatch setup.\u003c/p\u003e\u003cp\u003eThe given code samples are for the HashiCorp tools \u003ca href=\"https://www.packer.io/?ref=albertodebortoli.com\"\u003ePacker\u003c/a\u003e and \u003ca href=\"https://www.terraform.io/?ref=albertodebortoli.com\"\u003eTerraform\u003c/a\u003e and focus on mac2.metal instances.\u003c/p\u003e\u003cp\u003eI\u0026#39;ll cover the following steps:\u003c/p\u003e\u003cul\u003e\u003cli\u003einstall the CloudWatch agent on mac2.metal instances\u003c/li\u003e\u003cli\u003econfigure the CloudWatch agent\u003c/li\u003e\u003cli\u003ecreate a CloudWatch dashboard\u003c/li\u003e\u003cli\u003esetup CloudWatch alarms\u003c/li\u003e\u003cli\u003esetup IAM permissions\u003c/li\u003e\u003c/ul\u003e\u003ch3 id=\"install-the-cloudwatch-agent\"\u003eInstall the CloudWatch agent\u003c/h3\u003e\u003cp\u003eThe CloudWatch agent can be installed by downloading the \u003ccode\u003epkg\u003c/code\u003e file listed on \u003ca href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/download-cloudwatch-agent-commandline.html?ref=albertodebortoli.com\"\u003ethis page\u003c/a\u003e and running the installer. You probably want to bake the agent into your AMI, so here is the Packer code for mac2.metal (ARM):\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e# Install wget via brew\nprovisioner \u0026#34;shell\u0026#34; {\n  inline = [\n    \u0026#34;source ~/.zshrc\u0026#34;,\n    \u0026#34;brew install wget\u0026#34;\n  ]\n}\n\n# Install CloudWatch agent\nprovisioner \u0026#34;shell\u0026#34; {\n  inline = [\n    \u0026#34;source ~/.zshrc\u0026#34;,\n    \u0026#34;wget https://s3.amazonaws.com/amazoncloudwatch-agent/darwin/arm64/latest/amazon-cloudwatch-agent.pkg\u0026#34;,\n    \u0026#34;sudo installer -pkg ./amazon-cloudwatch-agent.pkg -target /\u0026#34;\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eFor the agent to work, you\u0026#39;ll need \u003ccode\u003ecollectd\u003c/code\u003e (\u003ca href=\"https://collectd.org/?ref=albertodebortoli.com\"\u003ehttps://collectd.org/\u003c/a\u003e) to be installed on the machine, which is usually done via brew. Brew installs it at \u003ccode\u003e/opt/homebrew/sbin/\u003c/code\u003e. This is also a step you want to perform when creating your AMI.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e# Install collectd via brew\nprovisioner \u0026#34;shell\u0026#34; {\n  inline = [\n    \u0026#34;source ~/.zshrc\u0026#34;,\n    \u0026#34;brew install collectd\u0026#34;\n  ]\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"configure-the-cloudwatch-agent\"\u003eConfigure the CloudWatch agent\u003c/h3\u003e\u003cp\u003eIn order to run, the agent needs a configuration which can be created using the wizard. \u003ca href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/create-cloudwatch-agent-configuration-file-wizard.html?ref=albertodebortoli.com\"\u003eThis page\u003c/a\u003e defines the metric sets that are available.\u003c/p\u003e\u003cp\u003eRunning the wizard with the command below will allow you to generate a basic json configuration which you can \u003ca href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html?ref=albertodebortoli.com\"\u003e\u003c/a\u003e\u003ca href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html?ref=albertodebortoli.com\"\u003emodify\u003c/a\u003e later.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003esudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe following is a working configuration for Mac instances so you can skip the process.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e{\n\t\u0026#34;agent\u0026#34;: {\n\t  \u0026#34;metrics_collection_interval\u0026#34;: 60,\n\t  \u0026#34;run_as_user\u0026#34;: \u0026#34;root\u0026#34;\n\t},\n\t\u0026#34;metrics\u0026#34;: {\n\t  \u0026#34;aggregation_dimensions\u0026#34;: [\n\t\t[\n\t\t  \u0026#34;InstanceId\u0026#34;\n\t\t]\n\t  ],\n\t  \u0026#34;append_dimensions\u0026#34;: {\n\t\t\u0026#34;AutoScalingGroupName\u0026#34;: \u0026#34;${aws:AutoScalingGroupName}\u0026#34;,\n\t\t\u0026#34;ImageId\u0026#34;: \u0026#34;${aws:ImageId}\u0026#34;,\n\t\t\u0026#34;InstanceId\u0026#34;: \u0026#34;${aws:InstanceId}\u0026#34;,\n\t\t\u0026#34;InstanceType\u0026#34;: \u0026#34;${aws:InstanceType}\u0026#34;\n\t  },\n\t  \u0026#34;metrics_collected\u0026#34;: {\n\t\t\u0026#34;collectd\u0026#34;: {\n\t\t  \u0026#34;collectd_typesdb\u0026#34;: [\n\t\t\t\u0026#34;/opt/homebrew/opt/collectd/share/collectd/types.db\u0026#34;\n\t\t  ],\n\t\t  \u0026#34;metrics_aggregation_interval\u0026#34;: 60\n\t\t},\n\t\t\u0026#34;cpu\u0026#34;: {\n\t\t  \u0026#34;measurement\u0026#34;: [\n\t\t\t\u0026#34;cpu_usage_idle\u0026#34;,\n\t\t\t\u0026#34;cpu_usage_iowait\u0026#34;,\n\t\t\t\u0026#34;cpu_usage_user\u0026#34;,\n\t\t\t\u0026#34;cpu_usage_system\u0026#34;\n\t\t  ],\n\t\t  \u0026#34;metrics_collection_interval\u0026#34;: 60,\n\t\t  \u0026#34;resources\u0026#34;: [\n\t\t\t\u0026#34;*\u0026#34;\n\t\t  ],\n\t\t  \u0026#34;totalcpu\u0026#34;: false\n\t\t},\n\t\t\u0026#34;disk\u0026#34;: {\n\t\t  \u0026#34;measurement\u0026#34;: [\n\t\t\t\u0026#34;used_percent\u0026#34;,\n\t\t\t\u0026#34;inodes_free\u0026#34;\n\t\t  ],\n\t\t  \u0026#34;metrics_collection_interval\u0026#34;: 60,\n\t\t  \u0026#34;resources\u0026#34;: [\n\t\t\t\u0026#34;*\u0026#34;\n\t\t  ]\n\t\t},\n\t\t\u0026#34;diskio\u0026#34;: {\n\t\t  \u0026#34;measurement\u0026#34;: [\n\t\t\t\u0026#34;io_time\u0026#34;,\n\t\t\t\u0026#34;write_bytes\u0026#34;,\n\t\t\t\u0026#34;read_bytes\u0026#34;,\n\t\t\t\u0026#34;writes\u0026#34;,\n\t\t\t\u0026#34;reads\u0026#34;\n\t\t  ],\n\t\t  \u0026#34;metrics_collection_interval\u0026#34;: 60,\n\t\t  \u0026#34;resources\u0026#34;: [\n\t\t\t\u0026#34;*\u0026#34;\n\t\t  ]\n\t\t},\n\t\t\u0026#34;mem\u0026#34;: {\n\t\t  \u0026#34;measurement\u0026#34;: [\n\t\t\t\u0026#34;mem_used_percent\u0026#34;\n\t\t  ],\n\t\t  \u0026#34;metrics_collection_interval\u0026#34;: 60\n\t\t},\n\t\t\u0026#34;netstat\u0026#34;: {\n\t\t  \u0026#34;measurement\u0026#34;: [\n\t\t\t\u0026#34;tcp_established\u0026#34;,\n\t\t\t\u0026#34;tcp_time_wait\u0026#34;\n\t\t  ],\n\t\t  \u0026#34;metrics_collection_interval\u0026#34;: 60\n\t\t},\n\t\t\u0026#34;statsd\u0026#34;: {\n\t\t  \u0026#34;metrics_aggregation_interval\u0026#34;: 60,\n\t\t  \u0026#34;metrics_collection_interval\u0026#34;: 10,\n\t\t  \u0026#34;service_address\u0026#34;: \u0026#34;:8125\u0026#34;\n\t\t},\n\t\t\u0026#34;swap\u0026#34;: {\n\t\t  \u0026#34;measurement\u0026#34;: [\n\t\t\t\u0026#34;swap_used_percent\u0026#34;\n\t\t  ],\n\t\t  \u0026#34;metrics_collection_interval\u0026#34;: 60\n\t\t}\n\t  }\n\t}\n  }\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI have enhanced the output of the wizard with some reasonable metrics to collect. The configuration created by the wizard is almost working but it\u0026#39;s lacking a fundamental config to make it work out-of-the-box: the \u003ccode\u003ecollectd_typesdb\u003c/code\u003e value. \u003c/p\u003e\u003cp\u003eLinux and Mac differ when it comes to the location of \u003ccode\u003ecollectd\u003c/code\u003e and \u003ccode\u003etypes.db\u003c/code\u003e, and the agent defaults to the Linux path even if it was built for Mac, causing the following error when trying to run the agent:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e======== Error Log ========\n2023-07-23T04:57:28Z E! [telegraf] Error running agent: Error loading config file /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.toml: error parsing socket_listener, open /usr/share/collectd/types.db: no such file or directory\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eMoreover, the \u003ccode\u003e/usr/share/\u003c/code\u003e folder is not writable unless you disable SIP (System Integrity Protection) which cannot be done on EC2 mac instances nor is something you want to do for security reasons.\u003c/p\u003e\u003cp\u003eThe final configuration is something you want to save in \u003ca href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html?ref=albertodebortoli.com\"\u003eSystem Manager Parameter Store\u003c/a\u003e using the \u003ca href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ssm_parameter?ref=albertodebortoli.com\"\u003essm_parameter\u003c/a\u003e resource in Terraform:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eresource \u0026#34;aws_ssm_parameter\u0026#34; \u0026#34;cw_agent_config_darwin\u0026#34; {\n  name        = \u0026#34;/cloudwatch-agent/config/darwin\u0026#34;\n  description = \u0026#34;CloudWatch agent config for mac instances\u0026#34;\n  type        = \u0026#34;String\u0026#34;\n  value       = file(\u0026#34;./cw-agent-config-darwin.json\u0026#34;)\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eand use it when running the agent in a provisioning step:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eresource \u0026#34;null_resource\u0026#34; \u0026#34;run_cloudwatch_agent\u0026#34; {\n\n  depends_on = [\n    aws_instance.mac_instance\n  ]\n\n  connection {\n    type        = \u0026#34;ssh\u0026#34;\n    agent       = false\n    host        = aws_instance.mac_instance.private_ip\n    user        = \u0026#34;ec2-user\u0026#34;\n    private_key = tls_private_key.mac_instance.private_key_pem\n    timeout     = \u0026#34;30m\u0026#34;\n  }\n\n  # Run CloudWatch agent\n  provisioner \u0026#34;remote-exec\u0026#34; {\n    inline = [\n      \u0026#34;sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:${aws_ssm_parameter.cw_agent_config_darwin.name}\u0026#34;\n    ]\n  }\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"create-a-cloudwatch-dashboard\"\u003eCreate a CloudWatch dashboard\u003c/h3\u003e\u003cp\u003eOnce the instances are deployed and running, they will send events to CloudWatch and we can create a dashboard to visualise them. You can create a dashboard manually in the console and once you are happy with it, you can just copy the source code, store it in a file and feed it to Terraform.\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://albertodebortoli.com/content/images/2023/08/image.png\" alt=\"\" loading=\"lazy\" width=\"370\" height=\"688\"/\u003e\u003c/figure\u003e\u003cp\u003eHere is mine that could probably work for you too if you tag your instances with the \u003ccode\u003eType\u003c/code\u003e set to \u003ccode\u003emacOS\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e{\n    \u0026#34;widgets\u0026#34;: [\n        {\n            \u0026#34;height\u0026#34;: 15,\n            \u0026#34;width\u0026#34;: 24,\n            \u0026#34;y\u0026#34;: 0,\n            \u0026#34;x\u0026#34;: 0,\n            \u0026#34;type\u0026#34;: \u0026#34;explorer\u0026#34;,\n            \u0026#34;properties\u0026#34;: {\n                \u0026#34;metrics\u0026#34;: [\n                    {\n                        \u0026#34;metricName\u0026#34;: \u0026#34;cpu_usage_user\u0026#34;,\n                        \u0026#34;resourceType\u0026#34;: \u0026#34;AWS::EC2::Instance\u0026#34;,\n                        \u0026#34;stat\u0026#34;: \u0026#34;Average\u0026#34;\n                    },\n                    {\n                        \u0026#34;metricName\u0026#34;: \u0026#34;cpu_usage_system\u0026#34;,\n                        \u0026#34;resourceType\u0026#34;: \u0026#34;AWS::EC2::Instance\u0026#34;,\n                        \u0026#34;stat\u0026#34;: \u0026#34;Average\u0026#34;\n                    },\n                    {\n                        \u0026#34;metricName\u0026#34;: \u0026#34;disk_used_percent\u0026#34;,\n                        \u0026#34;resourceType\u0026#34;: \u0026#34;AWS::EC2::Instance\u0026#34;,\n                        \u0026#34;stat\u0026#34;: \u0026#34;Average\u0026#34;\n                    },\n                    {\n                        \u0026#34;metricName\u0026#34;: \u0026#34;diskio_read_bytes\u0026#34;,\n                        \u0026#34;resourceType\u0026#34;: \u0026#34;AWS::EC2::Instance\u0026#34;,\n                        \u0026#34;stat\u0026#34;: \u0026#34;Average\u0026#34;\n                    },\n                    {\n                        \u0026#34;metricName\u0026#34;: \u0026#34;diskio_write_bytes\u0026#34;,\n                        \u0026#34;resourceType\u0026#34;: \u0026#34;AWS::EC2::Instance\u0026#34;,\n                        \u0026#34;stat\u0026#34;: \u0026#34;Average\u0026#34;\n                    }\n                ],\n                \u0026#34;aggregateBy\u0026#34;: {\n                    \u0026#34;key\u0026#34;: \u0026#34;\u0026#34;,\n                    \u0026#34;func\u0026#34;: \u0026#34;\u0026#34;\n                },\n                \u0026#34;labels\u0026#34;: [\n                    {\n                        \u0026#34;key\u0026#34;: \u0026#34;Type\u0026#34;,\n                        \u0026#34;value\u0026#34;: \u0026#34;macOS\u0026#34;\n                    }\n                ],\n                \u0026#34;widgetOptions\u0026#34;: {\n                    \u0026#34;legend\u0026#34;: {\n                        \u0026#34;position\u0026#34;: \u0026#34;bottom\u0026#34;\n                    },\n                    \u0026#34;view\u0026#34;: \u0026#34;timeSeries\u0026#34;,\n                    \u0026#34;stacked\u0026#34;: false,\n                    \u0026#34;rowsPerPage\u0026#34;: 50,\n                    \u0026#34;widgetsPerRow\u0026#34;: 1\n                },\n                \u0026#34;period\u0026#34;: 60,\n                \u0026#34;splitBy\u0026#34;: \u0026#34;\u0026#34;,\n                \u0026#34;region\u0026#34;: \u0026#34;eu-west-1\u0026#34;\n            }\n        }\n    ]\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou can then use the \u003ca href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_dashboard?ref=albertodebortoli.com\"\u003ecloudwatch_dashboard\u003c/a\u003e resource in Terraform:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eresource \u0026#34;aws_cloudwatch_dashboard\u0026#34; \u0026#34;mac_instances\u0026#34; {\n  dashboard_name = \u0026#34;mac-instances\u0026#34;\n  dashboard_body = file(\u0026#34;./cw-dashboard-mac-instances.json\u0026#34;)\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt will show something like this:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://albertodebortoli.com/content/images/2023/08/Screenshot-2023-08-06-at-13.43.09.png\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"1569\" srcset=\"https://albertodebortoli.com/content/images/size/w600/2023/08/Screenshot-2023-08-06-at-13.43.09.png 600w, https://albertodebortoli.com/content/images/size/w1000/2023/08/Screenshot-2023-08-06-at-13.43.09.png 1000w, https://albertodebortoli.com/content/images/size/w1600/2023/08/Screenshot-2023-08-06-at-13.43.09.png 1600w, https://albertodebortoli.com/content/images/size/w2400/2023/08/Screenshot-2023-08-06-at-13.43.09.png 2400w\" sizes=\"(min-width: 1200px) 1200px\"/\u003e\u003c/figure\u003e\u003ch3 id=\"setup-cloudwatch-alarms\"\u003eSetup CloudWatch alarms\u003c/h3\u003e\u003cp\u003eOnce the dashboard is up, you should set up alarms so that you are notified of any anomalies, rather than actively monitoring the dashboard for them.\u003c/p\u003e\u003cp\u003eWhat works for me is having alarms triggered via email when the used disk space is going above a certain level (say 80%). We can use the \u003ca href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudwatch_metric_alarm?ref=albertodebortoli.com\"\u003ecloudwatch_metric_alarm\u003c/a\u003e resource.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eresource \u0026#34;aws_cloudwatch_metric_alarm\u0026#34; \u0026#34;disk_usage\u0026#34; {\n  alarm_name          = \u0026#34;mac-${aws_instance.mac_instance.id}-disk-usage\u0026#34;\n  comparison_operator = \u0026#34;GreaterThanThreshold\u0026#34;\n  evaluation_periods  = 30\n  metric_name         = \u0026#34;disk_used_percent\u0026#34;\n  namespace           = \u0026#34;CWAgent\u0026#34;\n  period              = 120\n  statistic           = \u0026#34;Average\u0026#34;\n  threshold           = 80\n  alarm_actions       = [aws_sns_topic.disk_usage.arn]\n  dimensions = {\n    InstanceId = aws_instance.mac_instance.id\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can then create an SNS topic and subscribe all interested parties to it. This will allow us to broadcast to all subscribers when the alarm is triggered. For this, we can use the \u003ca href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sns_topic?ref=albertodebortoli.com\"\u003esns_topic\u003c/a\u003e and \u003ca href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sns_topic_subscription?ref=albertodebortoli.com\"\u003esns_topic_subscription\u003c/a\u003e resources.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eresource \u0026#34;aws_sns_topic\u0026#34; \u0026#34;disk_usage\u0026#34; {\n  name = \u0026#34;CW_Alarm_disk_usage_mac_${aws_instance.mac_instance.id}\u0026#34;\n}\n\nresource \u0026#34;aws_sns_topic_subscription\u0026#34; \u0026#34;disk_usage\u0026#34; {\n  for_each  = toset(var.alarm_subscriber_emails)\n  topic_arn = aws_sns_topic.disk_usage.arn\n  protocol  = \u0026#34;email\u0026#34;\n  endpoint  = each.value\n}\n\nvariable \u0026#34;alarm_subscriber_emails\u0026#34; {\n  type = list(string)\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you are deploying your infrastructure via \u003ca href=\"https://github.com/features/actions?ref=albertodebortoli.com\"\u003eGitHub Actions\u003c/a\u003e, you can set your subscribers as a workflow input or as an environment variable. Here is how you should pass a list of strings via a variable in Terraform:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ename: Deploy Mac instance\n\nenv:\n  ALARM_SUBSCRIBERS: \u0026#39;[\u0026#34;user1@example.com\u0026#34;,\u0026#34;user2@example.com\u0026#34;]\u0026#39;\n  AMI: ...\n  \njobs:\n  deploy:\n    ...\n    steps:\n      - name: Terraform apply\n        run: |\n          terraform apply \\\n            --var ami=${{ env.AMI }} \\\n            --var alarm_subscriber_emails=\u0026#39;${{ env.ALARM_SUBSCRIBERS }}\u0026#39; \\\n            --auto-approve\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"setup-iam-permissions\"\u003eSetup IAM permissions\u003c/h3\u003e\u003cp\u003eThe instance that performs the deployment requires permissions for CloudWatch, System Manager, and SNS.\u003c/p\u003e\u003cp\u003eThe following is a policy that is enough to perform both \u003ccode\u003eterraform apply\u003c/code\u003e and \u003ccode\u003eterraform destroy\u003c/code\u003e. Please consider restricting to specific resources. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e{\n    \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\n    \u0026#34;Statement\u0026#34;: [\n        {\n            \u0026#34;Sid\u0026#34;: \u0026#34;CloudWatchDashboardsPermissions\u0026#34;,\n            \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\n            \u0026#34;Action\u0026#34;: [\n                \u0026#34;cloudwatch:DeleteDashboards\u0026#34;,\n                \u0026#34;cloudwatch:GetDashboard\u0026#34;,\n                \u0026#34;cloudwatch:ListDashboards\u0026#34;,\n                \u0026#34;cloudwatch:PutDashboard\u0026#34;\n            ],\n            \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\n        },\n        {\n            \u0026#34;Sid\u0026#34;: \u0026#34;CloudWatchAlertsPermissions\u0026#34;,\n            \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\n            \u0026#34;Action\u0026#34;: [\n                \u0026#34;cloudwatch:DescribeAlarms\u0026#34;,\n                \u0026#34;cloudwatch:DescribeAlarmsForMetric\u0026#34;,\n                \u0026#34;cloudwatch:DescribeAlarmHistory\u0026#34;,\n                \u0026#34;cloudwatch:DeleteAlarms\u0026#34;,\n                \u0026#34;cloudwatch:DisableAlarmActions\u0026#34;,\n                \u0026#34;cloudwatch:EnableAlarmActions\u0026#34;,\n                \u0026#34;cloudwatch:ListTagsForResource\u0026#34;,\n                \u0026#34;cloudwatch:PutMetricAlarm\u0026#34;,\n                \u0026#34;cloudwatch:PutCompositeAlarm\u0026#34;,\n                \u0026#34;cloudwatch:SetAlarmState\u0026#34;\n            ],\n            \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\n        },\n        {\n            \u0026#34;Sid\u0026#34;: \u0026#34;SystemsManagerPermissions\u0026#34;,\n            \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\n            \u0026#34;Action\u0026#34;: [\n                \u0026#34;ssm:GetParameter\u0026#34;,\n                \u0026#34;ssm:GetParameters\u0026#34;,\n                \u0026#34;ssm:ListTagsForResource\u0026#34;,\n                \u0026#34;ssm:DeleteParameter\u0026#34;,\n                \u0026#34;ssm:DescribeParameters\u0026#34;,\n                \u0026#34;ssm:PutParameter\u0026#34;\n            ],\n            \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\n        },\n        {\n            \u0026#34;Sid\u0026#34;: \u0026#34;SNSPermissions\u0026#34;,\n            \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\n            \u0026#34;Action\u0026#34;: [\n                \u0026#34;sns:CreateTopic\u0026#34;,\n                \u0026#34;sns:DeleteTopic\u0026#34;,\n                \u0026#34;sns:GetTopicAttributes\u0026#34;,\n                \u0026#34;sns:GetSubscriptionAttributes\u0026#34;,\n                \u0026#34;sns:ListSubscriptions\u0026#34;,\n                \u0026#34;sns:ListSubscriptionsByTopic\u0026#34;,\n                \u0026#34;sns:ListTopics\u0026#34;,\n                \u0026#34;sns:SetSubscriptionAttributes\u0026#34;,\n                \u0026#34;sns:SetTopicAttributes\u0026#34;,\n                \u0026#34;sns:Subscribe\u0026#34;,\n                \u0026#34;sns:Unsubscribe\u0026#34;\n            ],\n            \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;\n        }\n    ]\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOn the other hand, to send logs to CloudWatch, the Mac instances require permissions given by the \u003ccode\u003eCloudWatchAgentServerPolicy\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eresource \u0026#34;aws_iam_role_policy_attachment\u0026#34; \u0026#34;mac_instance_iam_role_cw_policy_attachment\u0026#34; {\n  role       = aws_iam_role.mac_instance_iam_role.name\n  policy_arn = \u0026#34;arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\u0026#34;\n}\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"conclusion\"\u003eConclusion\u003c/h3\u003e\u003cp\u003eYou have now defined your CloudWatch dashboard and alarms using \u0026#34;Infrastructure as Code\u0026#34; via Packer and Terraform. I\u0026#39;ve covered the common use case of instances running out of space on disk which is useful to catch before CI starts becoming unresponsive slowing your team down.\u003c/p\u003e\n\t\t\t\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2023-08-06T14:24:43Z",
  "modifiedTime": "2023-08-06T14:28:06Z"
}
