{
  "id": "704ecbf3-177d-40bd-8c95-ada523e41517",
  "title": "Getting started with PDFKit",
  "link": "https://atomicbird.com/blog/pdfkit-basics/",
  "description": "In my post about my custom presentation slide app I mentioned that because of time constraints, I decided against doing my own slide layout. Instead I’d do that in DeckSet, export my slides to PDF, and show the PDFs in my app. So, how do you do that then? Getting a PDF on the screen The basics of PDFKit are actually pretty basic. If you have a PDF, you create a PDFDocument to hold it and a PDFView to display it.",
  "author": "",
  "published": "Wed, 26 Feb 2020 00:00:00 +0000",
  "source": "https://atomicbird.com/index.xml",
  "categories": null,
  "byline": "",
  "length": 6243,
  "excerpt": "In my post about my custom presentation slide app I mentioned that because of time constraints, I decided against doing my own slide layout. Instead I’d do that in DeckSet, export my slides to PDF, and show the PDFs in my app. So, how do you do that then? Getting a PDF on the screen The basics of PDFKit are actually pretty basic. If you have a PDF, you create a PDFDocument to hold it and a PDFView to display it.",
  "siteName": "Title",
  "favicon": "https://atomicbird.com/apple-touch-icon-144-precomposed.png",
  "text": "In my post about my custom presentation slide app I mentioned that because of time constraints, I decided against doing my own slide layout. Instead I’d do that in DeckSet, export my slides to PDF, and show the PDFs in my app. So, how do you do that then? Getting a PDF on the screen The basics of PDFKit are actually pretty basic. If you have a PDF, you create a PDFDocument to hold it and a PDFView to display it. Put that view on the screen and there it is. It can be as simple as this: if let pdfDocument = PDFDocument(url: documentURL) { pdfView = PDFView(frame: view.bounds) pdfView.document = pdfDocument view.addSubviewAndConstrain(pdfView) } Sharp eyed readers might wonder about that last line. It’s a convenience I often use when I want to add a new subview and have the subview completely fill the parent. It supplements addSubView(_:) with code to create some useful autolayout constraints: extension UIView { func addSubviewAndConstrain(_ subview: UIView) -\u003e Void { subview.frame = self.bounds subview.translatesAutoresizingMaskIntoConstraints = false subview.alpha = 1.0 self.addSubview(subview) NSLayoutConstraint.activate([ self.widthAnchor.constraint(equalTo: subview.widthAnchor, multiplier: 1.0), self.heightAnchor.constraint(equalTo: subview.heightAnchor, multiplier: 1.0), self.leadingAnchor.constraint(equalTo: subview.leadingAnchor), self.trailingAnchor.constraint(equalTo: subview.trailingAnchor), self.topAnchor.constraint(equalTo: subview.topAnchor), self.bottomAnchor.constraint(equalTo: subview.bottomAnchor) ]) } } So that’s… functional, I guess. But the PDF doesn’t fit the screen or work like I want a slide presentation app to work. Fortunately PDFView has some handy options to customize its behavior. Since I’m using it to show presentation slides, what I want is A PDF page should fill the parent view, so that it fills the screen. I want to swipe horizontally between slides. Exactly one full page should show at a time, so when I swipe I should end up with a complete slide. If the PDF doesn’t fit the screen aspect ratio, the background should be dark so it doesn’t stand out. PDFView has me covered: pdfView.displayMode = .singlePage pdfView.displayDirection = .horizontal pdfView.autoScales = true pdfView.usePageViewController(true, withViewOptions: nil) pdfView.backgroundColor = .black Improving slide navigation That covers the basic need of showing my slides, making them look good, and easily navigating from one slide to the next or previous one. I realized I needed one more thing. Anyone who’s done a presentation knows that, however much you plan, at some point you may need to jump to a different slide, out of order. Often it’s during Q\u0026A. In my case I was hoping for a lot of audience participation so I wanted to make this easy. For this I turned to PDFThumbnailView, which as its name suggests, shows thumbnail images of a PDF. It works with a PDFView, so tapping on a thumbnail updates the PDFView state, and changing pages in a PDFView updates the thumbnail display. Setting it up basically involves telling it what size thumbnails you want and what PDFView to work with. let thumbnailSize: Int = 150 pdfThumbnailView = PDFThumbnailView() pdfThumbnailView.translatesAutoresizingMaskIntoConstraints = false pdfThumbnailView.pdfView = pdfView pdfThumbnailView.layoutMode = .horizontal pdfThumbnailView.thumbnailSize = CGSize(width: thumbnailSize, height: thumbnailSize) view.addSubview(pdfThumbnailView) This sets up a horizontal thumbnail view. The thumbnail size above is arbitrary, just a size that looked good to me. Then there’s some typical layout and appearance stuff that you’d have with any UIView: NSLayoutConstraint.activate([ pdfThumbnailView.heightAnchor.constraint(equalToConstant: CGFloat(thumbnailSize)), pdfThumbnailView.leadingAnchor.constraint(equalTo: view.leadingAnchor), pdfThumbnailView.trailingAnchor.constraint(equalTo: view.trailingAnchor), pdfThumbnailView.bottomAnchor.constraint(equalTo: view.bottomAnchor) ]) pdfThumbnailView.backgroundColor = .clear That puts the horizontal thumbnail view across the bottom of the enclosing view, which means it’s in front of the PDFView. I didn’t use addSubviewAndConstrain here because I don’t want the thumbnail to fill the view, I want it to run along the bottom. It ends up looking like this (using a demo slide PDF that just shows the current page number in large text): Keeping those Slides Visible I don’t want this to be there all the time though, so I need some way to make it show and hide. Initially I’ll make it hidden: pdfThumbnailView.alpha = 0 Then I’ll add a gesture recognizer to the PDFView, so that tapping on it triggers an action: // Add tap gesture to show/hide thumbnails let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(pdfViewTapped)) pdfView.addGestureRecognizer(tapGestureRecognizer) And finally I’ll make that action smoothly make the thumbnail fade in and out: @objc func pdfViewTapped() -\u003e Void { let newAlpha: CGFloat = { if thumbnailContainerView.alpha \u003c 0.5 { return 1.0 } else { return 0.0 } }() UIView.animate(withDuration: 0.3) { self.pdfThumbnailView.alpha = newAlpha } } I don’t store any state about whether the thumbnail view is visible or hidden. Instead I check on the current UI and make the appropriate change. Now, I can tap on the PDF view and the thumbnails appear and disappear as needed. Next Steps You might notice that the thumbnail screenshot doesn’t show every slide. It’s a 50 slide test presentation but there are only a few thumbnails. That comes down to my choice of thumbnail size, as compared to screen size, combined with the fact that PDFThumbnailView does not scroll. Presentation apps generally show thumbnails of every slide though, and that’s what I wanted. I’ll follow up with another post where I explain why this is happening, and what I did about it. You can find that followup here.",
  "image": "https://atomicbird.com/blog/pdfkit-basics/PDFThumbnailView-step-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n            \n    \n\u003carticle\u003e\n  \u003cheader\u003e\n    \n    \n    \n\n\n\n  \u003c/header\u003e\n  \n  \n  \u003cdiv\u003e\n    \u003cp\u003eIn my post about my \u003ca href=\"https://atomicbird.com/blog/interactive-presentation-slides-at-360idev/\"\u003ecustom presentation slide app\u003c/a\u003e I mentioned that because of time constraints, I decided against doing my own slide layout. Instead I’d do that in \u003ca href=\"https://www.deckset.com/\"\u003eDeckSet\u003c/a\u003e, export my slides to PDF, and show the PDFs in my app.\u003c/p\u003e\n\u003cp\u003eSo, how do you do that then?\u003c/p\u003e\n\u003ch3 id=\"getting-a-pdf-on-the-screen\"\u003eGetting a PDF on the screen\u003c/h3\u003e\n\u003cp\u003eThe basics of PDFKit are actually pretty basic. If you have a PDF, you create a \u003ccode\u003ePDFDocument\u003c/code\u003e to hold it and a \u003ccode\u003ePDFView\u003c/code\u003e to display it. Put that view on the screen and there it is. It can be as simple as this:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e pdfDocument = PDFDocument(url: documentURL) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfView = PDFView(frame: view.bounds)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfView.document = pdfDocument\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    view.addSubviewAndConstrain(pdfView)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSharp eyed readers might wonder about that last line. It’s a convenience I often use when I want to add a new subview and have the subview completely fill the parent. It supplements \u003ccode\u003eaddSubView(_:)\u003c/code\u003e with code to create some useful autolayout constraints:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eUIView\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003eaddSubviewAndConstrain\u003c/span\u003e(\u003cspan\u003e_\u003c/span\u003e subview: UIView) -\u0026gt; Void {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        subview.frame = \u003cspan\u003eself\u003c/span\u003e.bounds\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        subview.translatesAutoresizingMaskIntoConstraints = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        subview.alpha = \u003cspan\u003e1.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.addSubview(subview)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        NSLayoutConstraint.activate([\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eself\u003c/span\u003e.widthAnchor.constraint(equalTo: subview.widthAnchor, multiplier: \u003cspan\u003e1.0\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eself\u003c/span\u003e.heightAnchor.constraint(equalTo: subview.heightAnchor, multiplier: \u003cspan\u003e1.0\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eself\u003c/span\u003e.leadingAnchor.constraint(equalTo: subview.leadingAnchor),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eself\u003c/span\u003e.trailingAnchor.constraint(equalTo: subview.trailingAnchor),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eself\u003c/span\u003e.topAnchor.constraint(equalTo: subview.topAnchor),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003eself\u003c/span\u003e.bottomAnchor.constraint(equalTo: subview.bottomAnchor)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            ])\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo that’s… functional, I guess. But the PDF doesn’t fit the screen or work like I want a slide presentation app to work. Fortunately \u003ccode\u003ePDFView\u003c/code\u003e has some handy options to customize its behavior. Since I’m using it to show presentation slides, what I want is\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA PDF page should fill the parent view, so that it fills the screen.\u003c/li\u003e\n\u003cli\u003eI want to swipe horizontally between slides.\u003c/li\u003e\n\u003cli\u003eExactly one full page should show at a time, so when I swipe I should end up with a complete slide.\u003c/li\u003e\n\u003cli\u003eIf the PDF doesn’t fit the screen aspect ratio, the background should be dark so it doesn’t stand out.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003ePDFView\u003c/code\u003e has me covered:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e    pdfView.displayMode = .singlePage\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfView.displayDirection = .horizontal\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfView.autoScales = \u003cspan\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfView.usePageViewController(\u003cspan\u003etrue\u003c/span\u003e, withViewOptions: \u003cspan\u003enil\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfView.backgroundColor = .black\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"improving-slide-navigation\"\u003eImproving slide navigation\u003c/h3\u003e\n\u003cp\u003eThat covers the basic need of showing my slides, making them look good, and easily navigating from one slide to the next or previous one. I realized I needed one more thing. Anyone who’s done a presentation knows that, however much you plan, at some point you may need to jump to a different slide, out of order. Often it’s during Q\u0026amp;A. In my case I was hoping for \u003cem\u003ea lot\u003c/em\u003e of audience participation so I wanted to make this easy.\u003c/p\u003e\n\u003cp\u003eFor this I turned to \u003ccode\u003ePDFThumbnailView\u003c/code\u003e, which as its name suggests, shows thumbnail images of a PDF. It works with a \u003ccode\u003ePDFView\u003c/code\u003e, so tapping on a thumbnail updates the \u003ccode\u003ePDFView\u003c/code\u003e state, and changing pages in a \u003ccode\u003ePDFView\u003c/code\u003e updates the thumbnail display. Setting it up basically involves telling it what size thumbnails you want and what \u003ccode\u003ePDFView\u003c/code\u003e to work with.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e thumbnailSize: Int = \u003cspan\u003e150\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView = PDFThumbnailView()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.translatesAutoresizingMaskIntoConstraints = \u003cspan\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.pdfView = pdfView\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.layoutMode = .horizontal\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.thumbnailSize = CGSize(width: thumbnailSize, height: thumbnailSize)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    view.addSubview(pdfThumbnailView)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis sets up a horizontal thumbnail view. The thumbnail size above is arbitrary, just a size that looked good to me.\u003c/p\u003e\n\u003cp\u003eThen there’s some typical layout and appearance stuff that you’d have with any \u003ccode\u003eUIView\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e    NSLayoutConstraint.activate([\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        pdfThumbnailView.heightAnchor.constraint(equalToConstant: CGFloat(thumbnailSize)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        pdfThumbnailView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        pdfThumbnailView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        pdfThumbnailView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    ])\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    pdfThumbnailView.backgroundColor = .clear\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat puts the horizontal thumbnail view across the bottom of the enclosing view, which means it’s in front of the \u003ccode\u003ePDFView\u003c/code\u003e. I didn’t use \u003ccode\u003eaddSubviewAndConstrain\u003c/code\u003e here because I don’t want the thumbnail to fill the view, I want it to run along the bottom.\u003c/p\u003e\n\u003cp\u003eIt ends up looking like this (using a demo slide PDF that just shows the current page number in large text):\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://atomicbird.com/blog/pdfkit-basics/PDFThumbnailView-step-1.png#center75\" alt=\"\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"keeping-those-slides-visible\"\u003eKeeping those Slides Visible\u003c/h3\u003e\n\u003cp\u003eI don’t want this to be there \u003cem\u003eall the time\u003c/em\u003e though, so I need some way to make it show and hide. Initially I’ll make it hidden:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003epdfThumbnailView.alpha = \u003cspan\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen I’ll add a gesture recognizer to the \u003ccode\u003ePDFView\u003c/code\u003e, so that tapping on it triggers an action:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e// Add tap gesture to show/hide thumbnails\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003elet\u003c/span\u003e tapGestureRecognizer = UITapGestureRecognizer(target: \u003cspan\u003eself\u003c/span\u003e, action: \u003cspan\u003e#selector\u003c/span\u003e(pdfViewTapped))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003epdfView.addGestureRecognizer(tapGestureRecognizer)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAnd finally I’ll make that action smoothly make the thumbnail fade in and out:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e@objc\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003epdfViewTapped\u003c/span\u003e() -\u0026gt; Void {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003elet\u003c/span\u003e newAlpha: CGFloat = {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eif\u003c/span\u003e thumbnailContainerView.alpha \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003e0.5\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e1.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        } \u003cspan\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e0.0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    UIView.animate(withDuration: \u003cspan\u003e0.3\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003eself\u003c/span\u003e.pdfThumbnailView.alpha = newAlpha\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI don’t store any state about whether the thumbnail view is visible or hidden. Instead I check on the current UI and make the appropriate change. Now, I can tap on the PDF view and the thumbnails appear and disappear as needed.\u003c/p\u003e\n\u003ch3 id=\"next-steps\"\u003eNext Steps\u003c/h3\u003e\n\u003cp\u003eYou might notice that the thumbnail screenshot doesn’t show every slide. It’s a 50 slide test presentation but there are only a few thumbnails. That comes down to my choice of thumbnail size, as compared to screen size, combined with the fact that \u003ccode\u003ePDFThumbnailView\u003c/code\u003e does not scroll. Presentation apps generally show thumbnails of every slide though, and that’s what I wanted. I’ll follow up with another post where I explain why this is happening, and what I did about it.\u003c/p\u003e\n\u003cp\u003eYou can find that followup \u003ca href=\"https://atomicbird.com/blog/pdfkit-thumbnails\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n  \u003c/div\u003e\n  \n\n\n\n\n  \n\n  \n    \n\n\n\u003c/article\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2020-02-26T00:00:00Z",
  "modifiedTime": "2020-02-26T00:00:00Z"
}
