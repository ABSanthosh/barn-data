{
  "id": "f2424d62-d10e-4e1b-8398-3f419ceb996d",
  "title": "Avoid Spacers in SwiftUI Stacks",
  "link": "https://nerdyak.tech/development/2023/04/06/avoid-swiftui-spacers-in-stacks.html",
  "description": "As I teach SwiftUI here and there I have noticed a particular pattern that is being used and I would like to comment on a possible issue it can lead to. Let’s explore it!",
  "author": "Pavel Zak",
  "published": "2023-04-06T00:00:00+00:00",
  "source": "https://nerdyak.tech/atom.xml",
  "categories": [
    "development",
    "SwiftUI",
    "Spacer",
    "Stack",
    "Frame"
  ],
  "byline": "Pavel Zak",
  "length": 1609,
  "excerpt": "As I teach SwiftUI here and there I have noticed a particular pattern that is being used and I would like to comment on a possible issue it can lead to. Let’s explore it!",
  "siteName": "Pavel Zak",
  "favicon": "",
  "text": "As I teach SwiftUI here and there I have noticed a particular pattern that is being used and I would like to comment on a possible issue it can lead to. Let’s explore it! This is a widespread structure in various apps and a very common way how to code it in SwiftUI: HStack(spacing: 12) { Text(self.text) Spacer() Image(systemName: \"tortoise.fill\") } At first glance, everything looks fine. But what if the text starts to overflow? Suddenly it feels, that the wrapping leaves too much space between the text and the trailing icon even though we have set it to some fixed value… Hmm, let’s examine by replacing the views with just colors: HStack(spacing: 12) { Color.blue Spacer() Color.red } Aha, we are right! The space between is twice as wide as it should be. So the Stack here, even though the spacer does not add anything, puts declared spaces around it. So how to fix it? You can either remove the spacing parameter from the stack and use explicit padding to its child views, or IMO more convenient way is to make one of the views stretchable using a .frame modifier and setting its maxWidth attribute to .infinity like so: HStack(spacing: 12) { Text(self.text) .frame(maxWidth: .infinity, alignment: .leading) Image(systemName: \"tortoise.fill\") } Let’s compare the behavior of before and after approaches: I personally like the latter solution as it brings simpler code structure has the flexibility to set the alignment of the stretched view (ideal for centering of the view content when needed) prevents padding/spacing issues when having optional views in the Stacks",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\" aria-label=\"Content\"\u003e\n    \u003carticle\u003e\n      \u003cdiv\u003e\n        \u003cp\u003eAs I teach SwiftUI here and there I have noticed a particular pattern that is being used and I would like to comment on a possible issue it can lead to. Let’s explore it!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://nerdyak.tech/assets/posts/14_cell.png\" alt=\"image1\" title=\"Typical view layout\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThis is a widespread structure in various apps and a very common way how to code it in SwiftUI:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003eHStack\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003espacing\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e12\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\t\u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\t\u003cspan\u003eSpacer\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\t\u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;tortoise.fill\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eAt first glance, everything looks fine. But what if the text starts to overflow? Suddenly it feels, that the wrapping leaves too much space between the text and the trailing icon even though we have set it to some fixed value…\u003c/p\u003e\n\n\u003cp\u003eHmm, let’s examine by replacing the views with just colors:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003eHStack\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003espacing\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e12\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\t\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eblue\u003c/span\u003e\n\t\u003cspan\u003eSpacer\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\t\u003cspan\u003eColor\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ered\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eAha, we are right! The space between is twice as wide as it should be. So the Stack here, even though the spacer does not add anything, puts declared spaces around it.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://nerdyak.tech/assets/posts/14_colors.png\" alt=\"image2\" title=\"Expected layout and the actual issue\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eSo how to fix it? You can either remove the spacing parameter from the stack and use explicit padding to its child views, or IMO more convenient way is to make one of the views stretchable using a \u003cem\u003e.frame\u003c/em\u003e modifier and setting its \u003cem\u003emaxWidth\u003c/em\u003e attribute to \u003cem\u003e.infinity\u003c/em\u003e like so:\u003c/p\u003e\n\n\u003cfigure\u003e\u003cpre\u003e\u003ccode data-lang=\"swift\"\u003e\u003cspan\u003eHStack\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003espacing\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e12\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\t\u003cspan\u003eText\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\t\t\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eframe\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emaxWidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einfinity\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ealignment\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eleading\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\t\u003cspan\u003eImage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esystemName\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;tortoise.fill\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\n\u003cp\u003eLet’s compare the behavior of before and after approaches:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://nerdyak.tech/assets/posts/14_comparison.png\" alt=\"image3\" title=\"Comparing solutions\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eI personally like the latter solution as it\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ebrings simpler code structure\u003c/li\u003e\n  \u003cli\u003ehas the flexibility to set the \u003cem\u003ealignment\u003c/em\u003e of the stretched view (ideal for centering of the view content when needed)\u003c/li\u003e\n  \u003cli\u003eprevents padding/spacing issues when having optional views in the Stacks\u003c/li\u003e\n\u003c/ul\u003e\n\n\n      \u003c/div\u003e\n      \n    \u003c/article\u003e\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2023-04-06T00:00:00Z",
  "modifiedTime": null
}
