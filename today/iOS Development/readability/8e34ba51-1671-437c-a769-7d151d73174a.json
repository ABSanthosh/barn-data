{
  "id": "8e34ba51-1671-437c-a769-7d151d73174a",
  "title": "Building Better Views (Part II), Next Steps",
  "link": "https://fabisevi.ch/2019/12/26/building-better-views-part-ii/",
  "description": "If you haven't checked out Part I, I recommend reading it because if you don't, none of writing below will make sense!",
  "author": "Joe Fabisevich",
  "published": "Thu, 26 Dec 2019 00:00:00 GMT",
  "source": "https://www.fabisevi.ch/feed.xml",
  "categories": null,
  "byline": "",
  "length": 5758,
  "excerpt": "If you haven't checked out Part I, I recommend reading it because if you don't, none of writing below will make sense!",
  "siteName": "",
  "favicon": "https://fabisevi.ch/icons/icon-512x512.png?v=b60b950dc439294a707fb76cdaca4274",
  "text": "If you haven't checked out Part I, I recommend reading it because if you don't, none of writing below will make sense! Three Unanswered Questions 1. What happens when the views you want to configure are more complex? My recommended approach is to construct a one-time use struct, specifically for displaying in that one place. This type should only have the properties you need to render the view. struct HomeScreenCourseProgressViewDisplay { let course: Course let enrollment: Enrollment let customization: SchoolCustomization } Creating the ViewData should look familiar. We're going to do the exact same thing we did before. extension HomeScreenCourseProgressViewDisplay: CourseProgressViewData { var titleLabelText: String { return self.course.name } var subtitleLabelText: String { return self.course.author.name } var statusLabelText: String { return String.localizedStringWithFormat(NSLocalizedString(\"%@% complete\", comment: \"The percentage a course is complete\"), self.enrollment.percentComplete) } var progress: CGFloat { return CGFloat(self.enrollment.percentComplete) / 100 } var imageUrl: URL? { return self.course.imageUrl } } Using this ViewData object is just as simple as it was before. On our home screen, we now create the struct, and configure our custom view with it. Same as before, just leveraging how lightweight creating types in Swift is! func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -\u003e UITableViewCell { guard let currentUser = self.userAtIndexPath(indexPath: indexPath), self.hasCoursesAtIndexPath(indexPath: indexPath) else { fatalError(\"Ruh roh\"!) } let currentCourse = currentUser.courses[indexPath.row] let currentEnrollment = currentUser.enrollments[indexPath.row] let schoolCustomization = currentUser.school.customization let homeScreenDisplay = HomeScreenCourseProgressViewDisplay( course: currentCourse, enrollment: currentEnrollment, customization: schoolCustomization ) cell.customView.configure(viewData: homeScreenDisplay) return cell } 2. How does the ViewData pattern deal with user interaction? I advise keeping user actions in the UIView realm. You can continue using the delegate pattern, closures, or wherever your preferences may lie. If youâ€™re looking to get a little more advanced, Iâ€™d consider reading Dave DeLongâ€™s A Better MVC series. 3. Where does logic code reside, and what happens if you have more complex transformations? The scenarios so far have worked great. The models you received from the server looked a lot like the way you plan to display them, but that's not always the case. Sometimes you're going to need business logic, and that's ok. This is the question I had the most trouble coming up with one answer for. I realized the reason I couldn't come up with one answer is because there isn't only one answer. Looking back at our Comment model, we see that there is a Date object in there. public struct Comment { let text: String let commenter: String let createdAt: Date let imageUrl: URL? } In our first example we simply glossed over the fact that we were translating a Date into a String, by using a simple function that already exists in a third party library. extension Comment: CommentViewData { var timestamp: String { return self.createdAt.timeAgoSinceNow } } But now let's pretend we don't have timeAgoSinceNow available to us. Where does that transformation code live? The answer is, it's up to you! Some people prefer to make an object to handle business logic, to make their code more testable. If it makes you happy to keep it in the ViewData file, go right ahead. If not, then don't. Who am I to tell people how to be happy? extension Comment: CommentViewData { var timestamp: String { let dateTransformer = DateTransformer(self.createdAt) return dateTransformer.asString() } private static func transformDateToString(date: Date) -\u003e String { return someMagicalWayToTransformDatesToStrings() } } struct DateTransformer { let date: Date func asString() -\u003e Date { return someMagicalDateTransformer() } } My personal preference is to use private static functions, keeping in tune with the functional nature of this approach. extension Comment: CommentViewData { var timestamp: String { return transformDateToString(self.createdAt) } } private extension Comment { static func transformDateToString(date: Date) -\u003e String { return someMagicalDateTransformer() } } The important thing to note is that when it comes to business logic, you have the agency to structure your codebase however you'd like. The ViewData pattern isn't prohibitive or prescriptive, it's just there to aid you in transforming models into views. These are the big questions I've received while using this pattern over the last few years. I'm excited to hear your thoughts, and am always receptive to feedback!Joe Fabisevich is an indie developer creating software at Red Panda Club Inc. while writing about design, development, and building a company. Formerly an iOS developer working on societal issues @Twitter. These days I don't tweet, but I do post on Threads.Like my writing? You can keep up with it in your favorite RSS reader, or get posts emailed in newsletter form. I promise to never spam you or send you anything other than my posts, it's just a way for you to read my writing wherever's most comfortable for you.If you'd like to know more, wanna talk, or need some advice, feel free to sign up for office hours, I'm very friendly. ðŸ™‚",
  "image": "https://fabisevi.ch/static/pic-f5999ef8dd476bfbf9d65ddbace7e387.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cp\u003eIf you haven\u0026#39;t checked out \u003ca href=\"https://fabisevi.ch/2019/12/26/building-better-views-part-i\"\u003ePart I\u003c/a\u003e, I recommend reading it because if you don\u0026#39;t, none of writing below will make sense!\u003c/p\u003e\n\n\u003ch2 id=\"three-unanswered-questions\"\u003e\u003ca href=\"#three-unanswered-questions\" aria-label=\"three unanswered questions permalink\"\u003e\u003c/a\u003eThree Unanswered Questions\u003c/h2\u003e\n\u003ch4 id=\"1-what-happens-when-the-views-you-want-to-configure-are-more-complex\"\u003e\u003ca href=\"#1-what-happens-when-the-views-you-want-to-configure-are-more-complex\" aria-label=\"1 what happens when the views you want to configure are more complex permalink\"\u003e\u003c/a\u003e1. What happens when the views you want to configure are more complex?\u003c/h4\u003e\n\u003cp\u003eMy recommended approach is to construct a one-time use struct, specifically for displaying in that one place. This type should only have the properties you need to render the view.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eHomeScreenCourseProgressViewDisplay\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e course\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCourse\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e enrollment\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eEnrollment\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e customization\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eSchoolCustomization\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCreating the \u003ccode\u003eViewData\u003c/code\u003e should look familiar. We\u0026#39;re going to do the exact same thing we did before.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eHomeScreenCourseProgressViewDisplay\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCourseProgressViewData\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e titleLabelText\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecourse\u003cspan\u003e.\u003c/span\u003ename\n    \u003cspan\u003e}\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e subtitleLabelText\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecourse\u003cspan\u003e.\u003c/span\u003eauthor\u003cspan\u003e.\u003c/span\u003ename\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e statusLabelText\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elocalizedStringWithFormat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eNSLocalizedString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;%@% complete\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e comment\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e\u0026#34;The percentage a course is complete\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eenrollment\u003cspan\u003e.\u003c/span\u003epercentComplete\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e progress\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCGFloat\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eCGFloat\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003eenrollment\u003cspan\u003e.\u003c/span\u003epercentComplete\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e \u003cspan\u003e100\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003evar\u003c/span\u003e imageUrl\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecourse\u003cspan\u003e.\u003c/span\u003eimageUrl\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eUsing this \u003ccode\u003eViewData\u003c/code\u003e object is just as simple as it was before. On our home screen, we now create the struct, and configure our custom view with it. Same as before, just leveraging how lightweight creating types in Swift is!\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003etableView\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e tableView\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eUITableView\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e cellForRowAt indexPath\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eIndexPath\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eUITableViewCell\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eguard\u003c/span\u003e \u003cspan\u003elet\u003c/span\u003e currentUser \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003euserAtIndexPath\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eindexPath\u003cspan\u003e:\u003c/span\u003e indexPath\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ehasCoursesAtIndexPath\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eindexPath\u003cspan\u003e:\u003c/span\u003e indexPath\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003efatalError\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;Ruh roh\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003elet\u003c/span\u003e currentCourse \u003cspan\u003e=\u003c/span\u003e currentUser\u003cspan\u003e.\u003c/span\u003ecourses\u003cspan\u003e[\u003c/span\u003eindexPath\u003cspan\u003e.\u003c/span\u003erow\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e currentEnrollment \u003cspan\u003e=\u003c/span\u003e currentUser\u003cspan\u003e.\u003c/span\u003eenrollments\u003cspan\u003e[\u003c/span\u003eindexPath\u003cspan\u003e.\u003c/span\u003erow\u003cspan\u003e]\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e schoolCustomization \u003cspan\u003e=\u003c/span\u003e currentUser\u003cspan\u003e.\u003c/span\u003eschool\u003cspan\u003e.\u003c/span\u003ecustomization\n    \n    \u003cspan\u003elet\u003c/span\u003e homeScreenDisplay \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eHomeScreenCourseProgressViewDisplay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n        course\u003cspan\u003e:\u003c/span\u003e currentCourse\u003cspan\u003e,\u003c/span\u003e \n        enrollment\u003cspan\u003e:\u003c/span\u003e currentEnrollment\u003cspan\u003e,\u003c/span\u003e \n        customization\u003cspan\u003e:\u003c/span\u003e schoolCustomization\n    \u003cspan\u003e)\u003c/span\u003e\n    \n    cell\u003cspan\u003e.\u003c/span\u003ecustomView\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econfigure\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003eviewData\u003cspan\u003e:\u003c/span\u003e homeScreenDisplay\u003cspan\u003e)\u003c/span\u003e\n    \n    \u003cspan\u003ereturn\u003c/span\u003e cell\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4 id=\"2-how-does-the-viewdata-pattern-deal-with-user-interaction\"\u003e\u003ca href=\"#2-how-does-the-viewdata-pattern-deal-with-user-interaction\" aria-label=\"2 how does the viewdata pattern deal with user interaction permalink\"\u003e\u003c/a\u003e2. How does the \u003ccode\u003eViewData\u003c/code\u003e pattern deal with user interaction?\u003c/h4\u003e\n\u003cp\u003eI advise keeping user actions in the \u003ccode\u003eUIView\u003c/code\u003e realm. You can continue using the delegate pattern, closures, or wherever your preferences may lie. If youâ€™re looking to get a little more advanced, Iâ€™d consider reading Dave DeLongâ€™s \u003ca href=\"https://davedelong.com/blog/2017/11/06/a-better-mvc-part-1-the-problems/\"\u003eA Better MVC\u003c/a\u003e series.\u003c/p\u003e\n\u003ch4 id=\"3-where-does-logic-code-reside-and-what-happens-if-you-have-more-complex-transformations\"\u003e\u003ca href=\"#3-where-does-logic-code-reside-and-what-happens-if-you-have-more-complex-transformations\" aria-label=\"3 where does logic code reside and what happens if you have more complex transformations permalink\"\u003e\u003c/a\u003e3. Where does logic code reside, and what happens if you have more complex transformations?\u003c/h4\u003e\n\u003cp\u003eThe scenarios so far have worked great. The models you received from the server looked a lot like the way you plan to display them, but that\u0026#39;s not always the case. Sometimes you\u0026#39;re going to need business logic, and that\u0026#39;s ok.\u003c/p\u003e\n\u003cp\u003eThis is the question I had the most trouble coming up with one answer for. I realized the reason I couldn\u0026#39;t come up with one answer is because there isn\u0026#39;t only one answer.\u003c/p\u003e\n\u003cp\u003eLooking back at our \u003ccode\u003eComment\u003c/code\u003e model, we see that there is a \u003ccode\u003eDate\u003c/code\u003e object in there.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eComment\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e text\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e commenter\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e createdAt\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e imageUrl\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIn our first example we simply glossed over the fact that we were translating a \u003ccode\u003eDate\u003c/code\u003e into a \u003ccode\u003eString\u003c/code\u003e, by using a simple function that already exists in a third party library.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eComment\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCommentViewData\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003evar\u003c/span\u003e timestamp\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecreatedAt\u003cspan\u003e.\u003c/span\u003etimeAgoSinceNow\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBut now let\u0026#39;s pretend we don\u0026#39;t have \u003ccode\u003etimeAgoSinceNow\u003c/code\u003e available to us. Where does that transformation code live? The answer is, it\u0026#39;s up to you!\u003c/p\u003e\n\u003cp\u003eSome people prefer to make an object to handle business logic, to make their code more testable. If it makes you happy to keep it in the \u003ccode\u003eViewData\u003c/code\u003e file, go right ahead. If not, then don\u0026#39;t. Who am I to tell people how to be happy?\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eComment\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCommentViewData\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e timestamp\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003elet\u003c/span\u003e dateTransformer \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eDateTransformer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecreatedAt\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e dateTransformer\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003easString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003etransformDateToString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003edate\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003esomeMagicalWayToTransformDatesToStrings\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\n    \n\u003cspan\u003estruct\u003c/span\u003e \u003cspan\u003eDateTransformer\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003elet\u003c/span\u003e date\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e\n\n    \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003easString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003esomeMagicalDateTransformer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMy personal preference is to use private static functions, keeping in tune with the functional nature of this approach.\u003c/p\u003e\n\u003cdiv data-language=\"swift\"\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eComment\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eCommentViewData\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003evar\u003c/span\u003e timestamp\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etransformDateToString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eself\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003ecreatedAt\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eextension\u003c/span\u003e \u003cspan\u003eComment\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\n    \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003efunc\u003c/span\u003e \u003cspan\u003etransformDateToString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003edate\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003esomeMagicalDateTransformer\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe important thing to note is that when it comes to business logic, you have the agency to structure your codebase however you\u0026#39;d like. The \u003ccode\u003eViewData\u003c/code\u003e pattern isn\u0026#39;t prohibitive or prescriptive, it\u0026#39;s just there to aid you in transforming models into views.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eThese are the big questions I\u0026#39;ve received while using this pattern over the last few years. I\u0026#39;m excited to hear your thoughts, and am always receptive to \u003ca href=\"https://twitter.com/mergesort\"\u003efeedback\u003c/a\u003e!\u003c/p\u003e\u003c/div\u003e\u003cp\u003eJoe Fabisevich is an indie developer creating software at \u003ca href=\"https://redpanda.club\"\u003eRed Panda Club Inc.\u003c/a\u003e while writing about design, development, and building a company. Formerly an iOS developer working on societal issues \u003ca href=\"https://threads.net/mergesort\"\u003e@Twitter\u003c/a\u003e. These days I don\u0026#39;t tweet, but I do post on \u003ca href=\"https://threads.net/mergesort\"\u003eThreads\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eLike my writing? You can keep up with it in your favorite \u003ca href=\"https://fabisevi.ch/feed.xml\"\u003eRSS\u003c/a\u003e reader, or get posts \u003ca href=\"https://mailchi.mp/3237be1819ae/fabisevich-blog-posts\"\u003eemailed\u003c/a\u003e in newsletter form. I promise to never spam you or send you anything other than my posts, it\u0026#39;s just a way for you to read my writing wherever\u0026#39;s most comfortable for you.\u003c/p\u003e\u003cp\u003eIf you\u0026#39;d like to know more, wanna talk, or need some advice, feel free to sign up for \u003ca href=\"https://cal.com/mergesort/office-hours\"\u003eoffice hours\u003c/a\u003e, I\u0026#39;m very friendly. ðŸ™‚\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
