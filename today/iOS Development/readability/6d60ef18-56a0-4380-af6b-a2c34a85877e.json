{
  "id": "6d60ef18-56a0-4380-af6b-a2c34a85877e",
  "title": "Sentiment Analysis with NSTagger: Ranking popular subreddits by the negativity/hostility of its comments",
  "link": "https://swiftrocks.com/sentiment-analysis-reddit-negativity",
  "description": "I have been feeling that Reddit is well on its way to taking away from 4chan the title of internet hate machine, because even when a subreddit is themed around happiness it takes little to no effort to find extremely hostile comment chains with complete strangers arguing about the most pointless things. I was curious to see what this looked like across different subreddits, so I decided to use Reddit's APIs and iOS's built-in sentiment analysis tools to visualize how negative a subreddit is. This is not a new problem, and you can find many GitHub repos of people who've done similar things with Reddit comments in the past. I started this \"project\" by modifying this script made by hein-j, but I wasn't satisfied with the results being given by the usual Python NL frameworks. I thought they were being way too eager at saying that a subreddit was neutral when they're in reality notorious for being negative (maybe they're not the best at detecting passive-aggressiveness?), so I wondered if I could get better results by using iOS's NLTagger that has been available since iOS 12. With a simple setup of extracting comments and running them through a Swift script, I grabbed a couple of popular subreddits, analyzed the comments of the top 10 submissions at the time and plotted the output by pasting the results in a Google Sheets doc. If you want to try this yourself and/or tweak the parameters, you can find the code I used at the bottom of the article. Info and Comments Neutrality was defined as sentiment scoring between -0.5 and 0.5. The huge majority of values in this range were on the negative side. Happy is the only subreddit that scored higher in positivity than in negativity. Despite naturally ranking high in positivity, subreddits themed around happiness showed to still contain an overwhelming amount of negative comments. Subreddits themed around advice/knowledge ranking as more hostile than subreddits themed around actual hate is interesting, but not surprising. They are famous among redditors for being hotspots for insecure individuals and often host some of the lowest-quality discussions in the platform. Code Python The purpose of the Python script is to connect to Reddit and dump the comments of a subreddit into a JSON file. The script requires praw and a praw.ini file in the project's root named bot with the following Reddit App parameters: client_id, client_secret, and user_agent. See here for help with creating a Reddit App and here for help with praw. Make sure to modify the output path of this script before running. Usage example: python comments.py getmotivated import praw import sys import argparse def parse(): print('parsing arguments and options...') parser = argparse.ArgumentParser(description=\"Get the comments of a subreddit\") parser.add_argument('subreddit', type=str, help='name of subreddit') return parser.parse_args() def gather(subreddit): print('searching subreddit for key phrase...') relevant_strings = [] print('gathering texts for analysis...') try: for submission in subreddit.hot(limit=10): print('...') if submission.selftext: relevant_strings.append(str(submission.selftext)) for comment in submission.comments.list(): if isinstance(comment, praw.models.MoreComments): continue relevant_strings.append(str(comment.body)) if len(relevant_strings) == 0: raise Exception return relevant_strings except: sys.exit('ERROR: No posts were found for the provided subreddit and key phrase.') args = parse() subreddit_str = args.subreddit print('establishing reddit instance...') try: reddit = praw.Reddit(\"bot\") except: sys.exit('ERROR: Failed to establish a reddit instance. Have you correctly set up your praw.ini file? See README.md for more detail.') print('connecting to subreddit...') subreddit = reddit.subreddit(subreddit_str) # Get user inputs to analyze relevant_strings = gather(subreddit) joined = \"||aa||aa||aa||aa||\".join(relevant_strings) #open text file text_file = open(\"~/Desktop/r\"+subreddit_str+\".json\", \"w\") #write string to file text_file.write(joined) #close file text_file.close() Swift The Swift part of the script loads the json files dumped by the Python script and runs them through iOS's NSTagger. Make sure to modify the input path and subreddits in the script to the subreddits you're analyzing. import Foundation import NaturalLanguage let subreddits = [\"gaming\", \"wholesomememes\", \"funny\", \"technology\", \"eyebleach\", \"dogswithjobs\", \"aww\", \"comedyheaven\", \"iamatotalpieceofshit\", \"mildlyinteresting\", \"mildlyinfuriating\", \"upliftingnews\", \"politics\", \"mademesmile\", \"interestingasfuck\", \"memes\", \"science\", \"animalsbeingbros\", \"askreddit\", \"relationships\", \"happy\", \"getmotivated\", \"rarepuppers\"] for sub in subreddits { let str = try! String(contentsOfFile: \"~/Desktop/r\\(sub).json\") let arr = str.components(separatedBy: \"||aa||aa||aa||aa||\") var negative: Double = 0 var neutral: Double = 0 var positive: Double = 0 for input in arr { let tagger = NLTagger(tagSchemes: [.sentimentScore]) tagger.string = input let (sentiment, _) = tagger.tag(at: input.startIndex, unit: .paragraph, scheme: .sentimentScore) let score = Double(sentiment?.rawValue ?? \"0\") ?? 0 if score \u003e 0.5 { positive += 1 } else if score \u003c -0.5 { negative += 1 } else { neutral += 1 } } let total = negative + neutral + positive print(sub.capitalized) print(negative / total * 100) print(neutral / total * 100) print(positive / total * 100) }",
  "author": "Bruno Rocha",
  "published": "Sun, 12 Jun 2022 16:00:00 GMT+2",
  "source": "https://swiftrocks.com/rss.xml",
  "categories": null,
  "byline": "Bruno Rocha",
  "length": 5893,
  "excerpt": "I have been feeling that Reddit is well on its way to taking away from 4chan the title of internet hate machine, because even when a subreddit is themed around happiness it takes little to no effort to find extremely hostile comment chains.",
  "siteName": "SwiftRocks",
  "favicon": "https://swiftrocks.com/images/favicon/iconsmall2.png",
  "text": "I have been feeling that Reddit is well on its way to taking away from 4chan the title of internet hate machine, because even when a subreddit is themed around happiness it takes little to no effort to find extremely hostile comment chains with complete strangers arguing about the most pointless things. I was curious to see what this looked like across different subreddits, so I decided to use Reddit's APIs and iOS's built-in sentiment analysis tools to visualize how negative a subreddit is. This is not a new problem, and you can find many GitHub repos of people who've done similar things with Reddit comments in the past. I started this \"project\" by modifying this script made by hein-j, but I wasn't satisfied with the results being given by the usual Python NL frameworks. I thought they were being way too eager at saying that a subreddit was neutral when they're in reality notorious for being negative (maybe they're not the best at detecting passive-aggressiveness?), so I wondered if I could get better results by using iOS's NLTagger that has been available since iOS 12. With a simple setup of extracting comments and running them through a Swift script, I grabbed a couple of popular subreddits, analyzed the comments of the top 10 submissions at the time and plotted the output by pasting the results in a Google Sheets doc. If you want to try this yourself and/or tweak the parameters, you can find the code I used at the bottom of the article. Info and Comments Neutrality was defined as sentiment scoring between -0.5 and 0.5. The huge majority of values in this range were on the negative side. Happy is the only subreddit that scored higher in positivity than in negativity. Despite naturally ranking high in positivity, subreddits themed around happiness showed to still contain an overwhelming amount of negative comments. Subreddits themed around advice/knowledge ranking as more hostile than subreddits themed around actual hate is interesting, but not surprising. They are famous among redditors for being hotspots for insecure individuals and often host some of the lowest-quality discussions in the platform. Code Python The purpose of the Python script is to connect to Reddit and dump the comments of a subreddit into a JSON file. The script requires praw and a praw.ini file in the project's root named bot with the following Reddit App parameters: client_id, client_secret, and user_agent. See here for help with creating a Reddit App and here for help with praw. Make sure to modify the output path of this script before running. Usage example: python comments.py getmotivated import praw import sys import argparse def parse(): print('parsing arguments and options...') parser = argparse.ArgumentParser(description=\"Get the comments of a subreddit\") parser.add_argument('subreddit', type=str, help='name of subreddit') return parser.parse_args() def gather(subreddit): print('searching subreddit for key phrase...') relevant_strings = [] print('gathering texts for analysis...') try: for submission in subreddit.hot(limit=10): print('...') if submission.selftext: relevant_strings.append(str(submission.selftext)) for comment in submission.comments.list(): if isinstance(comment, praw.models.MoreComments): continue relevant_strings.append(str(comment.body)) if len(relevant_strings) == 0: raise Exception return relevant_strings except: sys.exit('ERROR: No posts were found for the provided subreddit and key phrase.') args = parse() subreddit_str = args.subreddit print('establishing reddit instance...') try: reddit = praw.Reddit(\"bot\") except: sys.exit('ERROR: Failed to establish a reddit instance. Have you correctly set up your praw.ini file? See README.md for more detail.') print('connecting to subreddit...') subreddit = reddit.subreddit(subreddit_str) # Get user inputs to analyze relevant_strings = gather(subreddit) joined = \"||aa||aa||aa||aa||\".join(relevant_strings) #open text file text_file = open(\"~/Desktop/r\"+subreddit_str+\".json\", \"w\") #write string to file text_file.write(joined) #close file text_file.close() Swift The Swift part of the script loads the json files dumped by the Python script and runs them through iOS's NSTagger. Make sure to modify the input path and subreddits in the script to the subreddits you're analyzing. import Foundation import NaturalLanguage let subreddits = [\"gaming\", \"wholesomememes\", \"funny\", \"technology\", \"eyebleach\", \"dogswithjobs\", \"aww\", \"comedyheaven\", \"iamatotalpieceofshit\", \"mildlyinteresting\", \"mildlyinfuriating\", \"upliftingnews\", \"politics\", \"mademesmile\", \"interestingasfuck\", \"memes\", \"science\", \"animalsbeingbros\", \"askreddit\", \"relationships\", \"happy\", \"getmotivated\", \"rarepuppers\"] for sub in subreddits { let str = try! String(contentsOfFile: \"~/Desktop/r\\(sub).json\") let arr = str.components(separatedBy: \"||aa||aa||aa||aa||\") var negative: Double = 0 var neutral: Double = 0 var positive: Double = 0 for input in arr { let tagger = NLTagger(tagSchemes: [.sentimentScore]) tagger.string = input let (sentiment, _) = tagger.tag(at: input.startIndex, unit: .paragraph, scheme: .sentimentScore) let score = Double(sentiment?.rawValue ?? \"0\") ?? 0 if score \u003e 0.5 { positive += 1 } else if score \u003c -0.5 { negative += 1 } else { neutral += 1 } } let total = negative + neutral + positive print(sub.capitalized) print(negative / total * 100) print(neutral / total * 100) print(positive / total * 100) }",
  "image": "https://swiftrocks.com/images/thumbs/thumb.jpg?4",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \n  \n\u003cp\u003eI have been feeling that Reddit is well on its way to taking away from 4chan the title of \u003ci\u003einternet hate machine\u003c/i\u003e, because even when a subreddit is themed around happiness it takes little to no effort to find extremely hostile comment chains with complete strangers arguing about the most pointless things. I was curious to see what this looked like across different subreddits, so I decided to use Reddit\u0026#39;s APIs and iOS\u0026#39;s built-in sentiment analysis tools to visualize how negative a subreddit is.\u003c/p\u003e\n\n\u003cp\u003eThis is not a new problem, and you can find many GitHub repos of people who\u0026#39;ve done similar things with Reddit comments in the past. I started this \u0026#34;project\u0026#34; by \u003ca href=\"https://github.com/hein-j/reddit-sentiment-analysis\"\u003emodifying this script made by hein-j\u003c/a\u003e, but I wasn\u0026#39;t satisfied with the results being given by the usual Python NL frameworks. I thought they were being way too eager at saying that a subreddit was neutral when they\u0026#39;re in reality notorious for being negative (maybe they\u0026#39;re not the best at detecting passive-aggressiveness?), so I wondered if I could get better results by using iOS\u0026#39;s \u003ccode\u003eNLTagger\u003c/code\u003e that has been available since iOS 12.\u003c/p\u003e\n\u003cp\u003eWith a simple setup of extracting comments and running them through a Swift script, I grabbed a couple of popular subreddits, analyzed the comments of the top 10 submissions at the time and plotted the output by pasting the results in a Google Sheets doc. If you want to try this yourself and/or tweak the parameters, you can find the code I used at the bottom of the article.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/n14Jsmi.png\" alt=\"Alt\"/\u003e                                    \n\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/Xmw2WK9.png\" alt=\"Alt\"/\u003e                                    \n\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://i.imgur.com/JZA3vx0.png\" alt=\"Alt\"/\u003e                                    \n\u003c/p\u003e\n\u003ch2\u003eInfo and Comments\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eNeutrality was defined as sentiment scoring between -0.5 and 0.5. The huge majority of values in this range were on the negative side.\u003c/li\u003e\n\u003cli\u003e\u003ci\u003eHappy\u003c/i\u003e is the only subreddit that scored higher in positivity than in negativity.\u003c/li\u003e\n\u003cli\u003eDespite naturally ranking high in positivity, subreddits themed around happiness showed to still contain an overwhelming amount of negative comments.\u003c/li\u003e\n\u003cli\u003eSubreddits themed around advice/knowledge ranking as \u003ci\u003emore hostile\u003c/i\u003e than subreddits themed around \u003ci\u003eactual\u003c/i\u003e hate is interesting, but not surprising. They are famous among redditors for being hotspots for insecure individuals and often host some of the lowest-quality discussions in the platform.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eCode\u003c/h2\u003e\n\u003ch3\u003ePython\u003c/h3\u003e\n\u003cp\u003eThe purpose of the Python script is to connect to Reddit and dump the comments of a subreddit into a JSON file. The script requires \u003ccode\u003epraw\u003c/code\u003e and a \u003ccode\u003epraw.ini\u003c/code\u003e file in the project\u0026#39;s root named \u003ccode\u003ebot\u003c/code\u003e with the following Reddit App parameters: \u003ccode\u003eclient_id\u003c/code\u003e, \u003ccode\u003eclient_secret\u003c/code\u003e, and \u003ccode\u003euser_agent\u003c/code\u003e. See \u003ca href=\"https://www.geeksforgeeks.org/how-to-get-client_id-and-client_secret-for-python-reddit-api-registration/\"\u003ehere\u003c/a\u003e for help with creating a Reddit App and \u003ca href=\"https://praw.readthedocs.io/en/latest/getting_started/configuration/prawini.html\"\u003ehere\u003c/a\u003e for help with praw.\u003c/p\u003e\n\u003cp\u003eMake sure to modify the output path of this script before running.\u003c/p\u003e\n\u003cp\u003eUsage example: \u003ccode\u003epython comments.py getmotivated\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport praw\u003c/code\u003e\n\u003ccode\u003eimport sys\u003c/code\u003e\n\u003ccode\u003eimport argparse\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003edef parse():\u003c/code\u003e\n\u003ccode\u003e    print(\u0026#39;parsing arguments and options...\u0026#39;)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e    parser = argparse.ArgumentParser(description=\u0026#34;Get the comments of a subreddit\u0026#34;)\u003c/code\u003e\n\u003ccode\u003e    parser.add_argument(\u0026#39;subreddit\u0026#39;, type=str, help=\u0026#39;name of subreddit\u0026#39;)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e    return parser.parse_args()\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003edef gather(subreddit):\u003c/code\u003e\n\u003ccode\u003e    print(\u0026#39;searching subreddit for key phrase...\u0026#39;)\u003c/code\u003e\n\u003ccode\u003e    relevant_strings = []\u003c/code\u003e\n\u003ccode\u003e    print(\u0026#39;gathering texts for analysis...\u0026#39;)\u003c/code\u003e\n\u003ccode\u003e    try:\u003c/code\u003e\n\u003ccode\u003e        for submission in subreddit.hot(limit=10):\u003c/code\u003e\n\u003ccode\u003e            print(\u0026#39;...\u0026#39;)\u003c/code\u003e\n\u003ccode\u003e            if submission.selftext:\u003c/code\u003e\n\u003ccode\u003e                relevant_strings.append(str(submission.selftext))\u003c/code\u003e\n\u003ccode\u003e            for comment in submission.comments.list():\u003c/code\u003e\n\u003ccode\u003e                if isinstance(comment, praw.models.MoreComments):\u003c/code\u003e\n\u003ccode\u003e                    continue\u003c/code\u003e\n\u003ccode\u003e                relevant_strings.append(str(comment.body))\u003c/code\u003e\n\u003ccode\u003e        if len(relevant_strings) == 0:\u003c/code\u003e\n\u003ccode\u003e            raise Exception\u003c/code\u003e\n\u003ccode\u003e        return relevant_strings\u003c/code\u003e\n\u003ccode\u003e    except:\u003c/code\u003e\n\u003ccode\u003e        sys.exit(\u0026#39;ERROR: No posts were found for the provided subreddit and key phrase.\u0026#39;)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003eargs = parse()\u003c/code\u003e\n\u003ccode\u003esubreddit_str = args.subreddit\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003eprint(\u0026#39;establishing reddit instance...\u0026#39;)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003etry:\u003c/code\u003e\n\u003ccode\u003e    reddit = praw.Reddit(\u0026#34;bot\u0026#34;)\u003c/code\u003e\n\u003ccode\u003eexcept:\u003c/code\u003e\n\u003ccode\u003e    sys.exit(\u0026#39;ERROR: Failed to establish a reddit instance. Have you correctly set up your praw.ini file? See README.md for more detail.\u0026#39;)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003eprint(\u0026#39;connecting to subreddit...\u0026#39;)\u003c/code\u003e\n\u003ccode\u003esubreddit = reddit.subreddit(subreddit_str)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e# Get user inputs to analyze\u003c/code\u003e\n\u003ccode\u003erelevant_strings = gather(subreddit)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003ejoined = \u0026#34;||aa||aa||aa||aa||\u0026#34;.join(relevant_strings)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e#open text file\u003c/code\u003e\n\u003ccode\u003etext_file = open(\u0026#34;~/Desktop/r\u0026#34;+subreddit_str+\u0026#34;.json\u0026#34;, \u0026#34;w\u0026#34;)\u003c/code\u003e\n\u003ccode\u003e \u003c/code\u003e\n\u003ccode\u003e#write string to file\u003c/code\u003e\n\u003ccode\u003etext_file.write(joined)\u003c/code\u003e\n\u003ccode\u003e \u003c/code\u003e\n\u003ccode\u003e#close file\u003c/code\u003e\n\u003ccode\u003etext_file.close()\u003c/code\u003e\n\u003c/pre\u003e\n\u003ch3\u003eSwift\u003c/h3\u003e\n\u003cp\u003eThe Swift part of the script loads the json files dumped by the Python script and runs them through iOS\u0026#39;s \u003ccode\u003eNSTagger\u003c/code\u003e. Make sure to modify the input path and subreddits in the script to the subreddits you\u0026#39;re analyzing.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport Foundation\u003c/code\u003e\n\u003ccode\u003eimport NaturalLanguage\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003elet subreddits = [\u0026#34;gaming\u0026#34;, \u0026#34;wholesomememes\u0026#34;, \u0026#34;funny\u0026#34;, \u0026#34;technology\u0026#34;, \u0026#34;eyebleach\u0026#34;, \u0026#34;dogswithjobs\u0026#34;, \u0026#34;aww\u0026#34;, \u0026#34;comedyheaven\u0026#34;, \u0026#34;iamatotalpieceofshit\u0026#34;, \u0026#34;mildlyinteresting\u0026#34;, \u0026#34;mildlyinfuriating\u0026#34;, \u0026#34;upliftingnews\u0026#34;, \u0026#34;politics\u0026#34;, \u0026#34;mademesmile\u0026#34;, \u0026#34;interestingasfuck\u0026#34;, \u0026#34;memes\u0026#34;, \u0026#34;science\u0026#34;, \u0026#34;animalsbeingbros\u0026#34;, \u0026#34;askreddit\u0026#34;, \u0026#34;relationships\u0026#34;, \u0026#34;happy\u0026#34;, \u0026#34;getmotivated\u0026#34;, \u0026#34;rarepuppers\u0026#34;]\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003efor sub in subreddits {\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e    let str = try! String(contentsOfFile: \u0026#34;~/Desktop/r\\(sub).json\u0026#34;)\u003c/code\u003e\n\u003ccode\u003e    let arr = str.components(separatedBy: \u0026#34;||aa||aa||aa||aa||\u0026#34;)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e    var negative: Double = 0\u003c/code\u003e\n\u003ccode\u003e    var neutral: Double = 0\u003c/code\u003e\n\u003ccode\u003e    var positive: Double = 0\u003c/code\u003e\n\u003ccode\u003e    for input in arr {\u003c/code\u003e\n\u003ccode\u003e        let tagger = NLTagger(tagSchemes: [.sentimentScore])\u003c/code\u003e\n\u003ccode\u003e        tagger.string = input\u003c/code\u003e\n\u003ccode\u003e        let (sentiment, _) = tagger.tag(at: input.startIndex, unit: .paragraph, scheme: .sentimentScore)\u003c/code\u003e\n\u003ccode\u003e        let score = Double(sentiment?.rawValue ?? \u0026#34;0\u0026#34;) ?? 0\u003c/code\u003e\n\u003ccode\u003e        if score \u0026gt; 0.5 {\u003c/code\u003e\n\u003ccode\u003e            positive += 1\u003c/code\u003e\n\u003ccode\u003e        } else if score \u0026lt; -0.5 {\u003c/code\u003e\n\u003ccode\u003e            negative += 1\u003c/code\u003e\n\u003ccode\u003e        } else {\u003c/code\u003e\n\u003ccode\u003e            neutral += 1\u003c/code\u003e\n\u003ccode\u003e        }\u003c/code\u003e\n\u003ccode\u003e    }\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e    let total = negative + neutral + positive\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e    print(sub.capitalized)\u003c/code\u003e\n\u003ccode\u003e    print(negative / total * 100)\u003c/code\u003e\n\u003ccode\u003e    print(neutral / total * 100)\u003c/code\u003e\n\u003ccode\u003e    print(positive / total * 100)\u003c/code\u003e\n\u003ccode\u003e\u003c/code\u003e\n\u003ccode\u003e}\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2022-06-12T16:00:00+02:00",
  "modifiedTime": null
}
