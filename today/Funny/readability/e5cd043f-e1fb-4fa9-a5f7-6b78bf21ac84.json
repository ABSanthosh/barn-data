{
  "id": "e5cd043f-e1fb-4fa9-a5f7-6b78bf21ac84",
  "title": "CodeSOD: ConVersion Version",
  "link": "https://thedailywtf.com/articles/conversion-version",
  "description": "Mads introduces today's code sample with this line: \" this was before they used git to track changes\". Note, this is not to say that they were using SVN, or Mercurial, or even Visual Source Safe. They were not using anything. How do I know? /** * Converts HTML to PDF using HTMLDOC. * * @param printlogEntry ** @param inBytes * html. * @param outPDF * pdf. * @throws IOException * when error. * @throws ParseException */ public void fromHtmlToPdfOld(PrintlogEntry printlogEntry, byte[] inBytes, final OutputStream outPDF) throws IOException, ParseException {...} /** * Converts HTML to PDF using HTMLDOC. * * @param printlogEntry ** @param inBytes * html. * @param outPDF * pdf. * @throws IOException * when error. * @throws ParseException */ public void fromHtmlToPdfNew(PrintlogEntry printlogEntry, byte[] inBytes, final OutputStream outPDF) throws IOException, ParseException {...} Originally, the function was just called fromHtmlToPdf. Instead of updating the implementation, or using it as a wrapper to call the correct implementation, they renamed it to Old, added one named New, then let the compiler tell them where they needed to update the code to use the new implementation. Mads adds: \"And this is just one example in this code. This far, I have found 5 of these.\" .comment { border: none; } [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "author": "Remy Porter",
  "published": "Thu, 24 Jul 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1751,
  "excerpt": "Mads introduces today's code sample with this line: \" this was before they used git to track changes\". Note, this is not to say that they were using SVN, or Mercurial, or even Visual Source Safe. They were not using anything. How do I know?",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-07-24 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Mads introduces today's code sample with this line: \" this was before they used git to track changes\". Note, this is not to say that they were using SVN, or Mercurial, or even Visual Source Safe. They were not using anything. How do I know? /** * Converts HTML to PDF using HTMLDOC. * * @param printlogEntry ** @param inBytes * html. * @param outPDF * pdf. * @throws IOException * when error. * @throws ParseException */ public void fromHtmlToPdfOld(PrintlogEntry printlogEntry, byte[] inBytes, final OutputStream outPDF) throws IOException, ParseException {...} /** * Converts HTML to PDF using HTMLDOC. * * @param printlogEntry ** @param inBytes * html. * @param outPDF * pdf. * @throws IOException * when error. * @throws ParseException */ public void fromHtmlToPdfNew(PrintlogEntry printlogEntry, byte[] inBytes, final OutputStream outPDF) throws IOException, ParseException {...} Originally, the function was just called fromHtmlToPdf. Instead of updating the implementation, or using it as a wrapper to call the correct implementation, they renamed it to Old, added one named New, then let the compiler tell them where they needed to update the code to use the new implementation. Mads adds: \"And this is just one example in this code. This far, I have found 5 of these.\" [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-07-24\"\u003e2025-07-24\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10968\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eMads\u003c/strong\u003e introduces today\u0026#39;s code sample with this line: \u0026#34; this was before they used git to track changes\u0026#34;.\u003c/p\u003e\n\u003cp\u003eNote, this is not to say that they were using SVN, or Mercurial, or even Visual Source Safe. They were not using \u003cem\u003eanything\u003c/em\u003e. How do I know?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e/**\n  * Converts HTML to PDF using HTMLDOC.\n  * \n  * \u003cspan\u003e@param\u003c/span\u003e printlogEntry\n  ** \u003cspan\u003e@param\u003c/span\u003e inBytes\n  *            html.\n  * \u003cspan\u003e@param\u003c/span\u003e outPDF\n  *            pdf.\n  * \u003cspan\u003e@throws\u003c/span\u003e IOException\n  *             when error.\n  * \u003cspan\u003e@throws\u003c/span\u003e ParseException\n*/\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003efromHtmlToPdfOld\u003c/span\u003e\u003cspan\u003e(PrintlogEntry printlogEntry, \u003cspan\u003ebyte\u003c/span\u003e[] inBytes, \u003cspan\u003efinal\u003c/span\u003e OutputStream outPDF)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e IOException, ParseException\n\t{...}\n\n\u003cspan\u003e/**\n * Converts HTML to PDF using HTMLDOC.\n * \n * \u003cspan\u003e@param\u003c/span\u003e printlogEntry\n ** \u003cspan\u003e@param\u003c/span\u003e inBytes\n *            html.\n * \u003cspan\u003e@param\u003c/span\u003e outPDF\n *            pdf.\n * \u003cspan\u003e@throws\u003c/span\u003e IOException\n *             when error.\n * \u003cspan\u003e@throws\u003c/span\u003e ParseException\n */\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003efromHtmlToPdfNew\u003c/span\u003e\u003cspan\u003e(PrintlogEntry printlogEntry, \u003cspan\u003ebyte\u003c/span\u003e[] inBytes, \u003cspan\u003efinal\u003c/span\u003e OutputStream outPDF)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e IOException, ParseException\n\t{...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOriginally, the function was just called \u003ccode\u003efromHtmlToPdf\u003c/code\u003e. Instead of updating the implementation, or using it as a wrapper to call the correct implementation, they renamed it to \u003ccode\u003eOld\u003c/code\u003e, added one named \u003ccode\u003eNew\u003c/code\u003e, then let the compiler tell them where they needed to update the code to use the new implementation.\u003c/p\u003e\n\u003cp\u003eMads adds: \u0026#34;And this is just one example in this code. This far, I have found 5 of these.\u0026#34;\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tProGet’s got you covered with security and access controls on your NuGet feeds. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=GotYouCoveredFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-07-24T06:30:00Z",
  "modifiedTime": null
}
