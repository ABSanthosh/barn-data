{
  "id": "0f281443-1f12-429c-9b9c-8c7aeddd08d7",
  "title": "CodeSOD: Perfect Test Coverage",
  "link": "https://thedailywtf.com/articles/perfect-test-coverage",
  "description": "When SC got hired, the manager said \"unit testing is very important to us, and we have 100% test coverage.\" Well, that didn't sound terrible, and SC was excited to see what kind of practices they used to keep them at that high coverage. [Test] public void a_definition() { Assert.True(new TypeExpectations() .DerivesFrom\u003cobject\u003e() .IsConcreteClass() .IsSealed() .HasDefaultConstructor() .IsNotDecorated() .Implements() .Result); } This is an example of what all of their tests look like. There are almost no tests of functionality, and instead just long piles of these kinds of type assertions. Which, having type assertions isn't a bad idea, most of these would be caught by the compiler: DerviesFrom is a tautology (perhaps this test framework is ensuring it doesn't derive from other classes? but object is the parent of all classes) IsConcreteClass would be caught at compile time anywhere someone created an instance HasDefaultConstructor would again, be caught if it were used Implement would also be caught anywhere you actually tried to use polymorphism. IsSealed and IsNotDecorated will actually do something, I suppose, though I wonder how much I actually care about that something. It's not wrong to check, but in the absence of actual real unit tests, why do I care? Because every class had a test like this, and because of the way the test framework worked, when they ran code coverage metrics, they got a 100% score. It wasn't testing any of the code, mind you, but hey, the tests touched all of it. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Mon, 21 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2147,
  "excerpt": "When SC got hired, the manager said \"unit testing is very important to us, and we have 100% test coverage.\" Well, that didn't sound terrible, and SC was excited to see what kind of practices they used to keep them at that high coverage.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-10-21 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. When SC got hired, the manager said \"unit testing is very important to us, and we have 100% test coverage.\" Well, that didn't sound terrible, and SC was excited to see what kind of practices they used to keep them at that high coverage. [Test] public void a_definition() { Assert.True(new TypeExpectations\u003cIndexViewModel\u003e() .DerivesFrom\u003cobject\u003e() .IsConcreteClass() .IsSealed() .HasDefaultConstructor() .IsNotDecorated() .Implements\u003cIEntity\u003e() .Result); } This is an example of what all of their tests look like. There are almost no tests of functionality, and instead just long piles of these kinds of type assertions. Which, having type assertions isn't a bad idea, most of these would be caught by the compiler: DerviesFrom\u003cobject\u003e is a tautology (perhaps this test framework is ensuring it doesn't derive from other classes? but object is the parent of all classes) IsConcreteClass would be caught at compile time anywhere someone created an instance HasDefaultConstructor would again, be caught if it were used Implement\u003cIEntity\u003e would also be caught anywhere you actually tried to use polymorphism. IsSealed and IsNotDecorated will actually do something, I suppose, though I wonder how much I actually care about that something. It's not wrong to check, but in the absence of actual real unit tests, why do I care? Because every class had a test like this, and because of the way the test framework worked, when they ran code coverage metrics, they got a 100% score. It wasn't testing any of the code, mind you, but hey, the tests touched all of it. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-10-21\"\u003e2024-10-21\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10763\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eWhen \u003cstrong\u003eSC\u003c/strong\u003e got hired, the manager said \u0026#34;unit testing is very important to us, and we have 100% test coverage.\u0026#34;\u003c/p\u003e\n\u003cp\u003eWell, that didn\u0026#39;t sound terrible, and SC was excited to see what kind of practices they used to keep them at that high coverage.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\u003cspan\u003eTest\u003c/span\u003e]\n\u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003ea_definition\u003c/span\u003e()\u003c/span\u003e {   \n\nAssert.True(\u003cspan\u003enew\u003c/span\u003e TypeExpectations\u0026lt;IndexViewModel\u0026gt;()\n                            .DerivesFrom\u0026lt;\u003cspan\u003eobject\u003c/span\u003e\u0026gt;()\n                            .IsConcreteClass()\n                            .IsSealed()\n                            .HasDefaultConstructor()\n                            .IsNotDecorated()\n                            .Implements\u0026lt;IEntity\u0026gt;()\n                            .Result);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is an example of what \u003cem\u003eall\u003c/em\u003e of their tests look like. There are almost no tests of functionality, and instead just long piles of these kinds of type assertions. Which, having type assertions isn\u0026#39;t a \u003cem\u003ebad\u003c/em\u003e idea, \u003cem\u003emost\u003c/em\u003e of these would be caught by the compiler:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eDerviesFrom\u0026lt;object\u0026gt;\u003c/code\u003e is a tautology (perhaps this test framework is ensuring it doesn\u0026#39;t derive from other classes? but \u003ccode\u003eobject\u003c/code\u003e is the parent of all classes)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIsConcreteClass\u003c/code\u003e would be caught at compile time anywhere someone created an instance\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHasDefaultConstructor\u003c/code\u003e would again, be caught if it were used\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eImplement\u0026lt;IEntity\u0026gt;\u003c/code\u003e would also be caught anywhere you actually tried to use polymorphism.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003eIsSealed\u003c/code\u003e and \u003ccode\u003eIsNotDecorated\u003c/code\u003e will actually do something, I suppose, though I wonder how much I actually \u003cem\u003ecare\u003c/em\u003e about that something. It\u0026#39;s not wrong to check, but in the absence of actual real unit tests, why do I care?\u003c/p\u003e\n\u003cp\u003eBecause every class had a test like this, and because of the way the test framework worked, when they ran code coverage metrics, they got a 100% score. It wasn\u0026#39;t testing any of the code, mind you, but hey, the tests touched \u003cem\u003eall\u003c/em\u003e of it.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-10-21T06:30:00Z",
  "modifiedTime": null
}
