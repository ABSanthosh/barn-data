{
  "id": "7f692de6-ceb1-4051-b7d8-aa1d6d299c45",
  "title": "CodeSOD: Conventional Events",
  "link": "https://thedailywtf.com/articles/conventional-events",
  "description": "Now, I would argue that the event-driven lifecycle of ASP .Net WebForms is a bad way to design web applications. And it's telling that the model is basically dead; it seems my take is at best lukewarm, if not downright cold. Pete inherited code from Bob, and Bob wrote an ASP .Net WebForm many many ages ago, and it's still the company's main application. Bob may not be with the company, but his presence lingers, both in the code he wrote and the fact that he commented frequently with // bob was here Bob liked to reinvent wheels. Maybe that's why most methods he wrote were at least 500 lines long. He wrote his own localization engine, which doesn't work terribly well. What code he did write, he copy/pasted multiple times. He was fond of this pattern: if (SomeMethodReturningBoolean()) { return true; } else { return false; } Now, in a Web Form, you usually attach your events to parts of the page lifecycle by convention. Name a method Page_Load? It gets called when the load event fires. Page_PreRender? Yep- when the pre-render event fires. SomeField_MouseClick? You get it. Bob didn't, or Bob didn't like coding by naming convention. Which, I'll be frank, I also don't like coding by naming convention, but it was the paradigm Web Forms favored, it's what the documentation assumed, it's what every other developer was going to expect to see. Still, Bob had his own Bob way of doing it. In every page he'd write code like this: this.PreRender += this.RequestPagePreRender That line manually registers an event handler, which invokes the method RequestPagePreRender. And while I might object to wiring up events by convention- this is still just a convention. It's not done with any thought at all- every page has this line, even if the RequestPagePreRender method is empty. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "author": "Remy Porter",
  "published": "Wed, 16 Apr 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2154,
  "excerpt": "Now, I would argue that the event-driven lifecycle of ASP .Net WebForms is a bad way to design web applications. And it's telling that the model is basically dead; it seems my take is at best lukewarm, if not downright cold. Pete inherited code from Bob, and Bob wrote an ASP .Net WebForm many many ages ago, and it's still the company's main application. Bob may not be with the company, but his presence lingers, both in the code he wrote and the fact that he commented frequently with // bob was here",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-04-16 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Now, I would argue that the event-driven lifecycle of ASP .Net WebForms is a bad way to design web applications. And it's telling that the model is basically dead; it seems my take is at best lukewarm, if not downright cold. Pete inherited code from Bob, and Bob wrote an ASP .Net WebForm many many ages ago, and it's still the company's main application. Bob may not be with the company, but his presence lingers, both in the code he wrote and the fact that he commented frequently with // bob was here Bob liked to reinvent wheels. Maybe that's why most methods he wrote were at least 500 lines long. He wrote his own localization engine, which doesn't work terribly well. What code he did write, he copy/pasted multiple times. He was fond of this pattern: if (SomeMethodReturningBoolean()) { return true; } else { return false; } Now, in a Web Form, you usually attach your events to parts of the page lifecycle by convention. Name a method Page_Load? It gets called when the load event fires. Page_PreRender? Yep- when the pre-render event fires. SomeField_MouseClick? You get it. Bob didn't, or Bob didn't like coding by naming convention. Which, I'll be frank, I also don't like coding by naming convention, but it was the paradigm Web Forms favored, it's what the documentation assumed, it's what every other developer was going to expect to see. Still, Bob had his own Bob way of doing it. In every page he'd write code like this: this.PreRender += this.RequestPagePreRender That line manually registers an event handler, which invokes the method RequestPagePreRender. And while I might object to wiring up events by convention- this is still just a convention. It's not done with any thought at all- every page has this line, even if the RequestPagePreRender method is empty. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-04-16\"\u003e2025-04-16\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10893\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eNow, I would argue that the event-driven lifecycle of ASP .Net WebForms is a bad way to design web applications. And it\u0026#39;s telling that the model is basically dead; it seems my take is at best lukewarm, if not downright cold.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePete\u003c/strong\u003e inherited code from Bob, and Bob wrote an ASP .Net WebForm many many ages ago, and it\u0026#39;s still the company\u0026#39;s main application. Bob may not be with the company, but his presence lingers, both in the code he wrote and the fact that he commented frequently with \u003ccode\u003e// bob was here\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eBob liked to reinvent wheels. Maybe that\u0026#39;s why most methods he wrote were at least 500 lines long. He wrote his own localization engine, which doesn\u0026#39;t work terribly well. What code he did write, he copy/pasted multiple times.\u003c/p\u003e\n\u003cp\u003eHe was fond of this pattern:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e (SomeMethodReturningBoolean())\n{\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e;\n}\n\u003cspan\u003eelse\u003c/span\u003e\n{\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, in a Web Form, you usually attach your events to parts of the page lifecycle by convention. Name a method \u003ccode\u003ePage_Load\u003c/code\u003e? It gets called when the load event fires. \u003ccode\u003ePage_PreRender\u003c/code\u003e? Yep- when the pre-render event fires. \u003ccode\u003eSomeField_MouseClick\u003c/code\u003e? You get it.\u003c/p\u003e\n\u003cp\u003eBob didn\u0026#39;t, or Bob didn\u0026#39;t like coding by naming convention. Which, I\u0026#39;ll be frank, I also don\u0026#39;t like coding by naming convention, but it was the paradigm Web Forms favored, it\u0026#39;s what the documentation assumed, it\u0026#39;s what every other developer was going to expect to see.\u003c/p\u003e\n\u003cp\u003eStill, Bob had his own Bob way of doing it.\u003c/p\u003e\n\u003cp\u003eIn every page he\u0026#39;d write code like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ethis\u003c/span\u003e.PreRender += \u003cspan\u003ethis\u003c/span\u003e.RequestPagePreRender\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat line manually registers an event handler, which invokes the method \u003ccode\u003eRequestPagePreRender\u003c/code\u003e. And while I might object to wiring up events \u003cem\u003eby convention\u003c/em\u003e- this is still just a convention. It\u0026#39;s not done with any thought at all- every page has this line, even if the \u003ccode\u003eRequestPagePreRender\u003c/code\u003e method is empty.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep the plebs out of prod. Restrict NuGet feed privileges with ProGet. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-04-16T06:30:00Z",
  "modifiedTime": null
}
