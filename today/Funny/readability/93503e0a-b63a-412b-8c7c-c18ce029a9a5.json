{
  "id": "93503e0a-b63a-412b-8c7c-c18ce029a9a5",
  "title": "CodeSOD: Zero Competence",
  "link": "https://thedailywtf.com/articles/zero-competence",
  "description": "Michael had a co-worker who was new to the team. As such, there was definitely an expected ramp-up time. But this new developer got that ramp up time, and still wasn't performing. Worse, they ended up dragging down the entire team, as they'd go off, write a bunch of code, end up in a situation that they couldn't understand why nothing was working, and then beg for help. For example, this dev was tasked with adding timestamps to a set of logging messages. The logs had started as simple \"print\" debugging messages, but had grown in complexity and it was time to treat them like real logging. This stumped them, as the following C# code only ever printed out a zero: DateTime d = new DateTime(); int timestamp = d.Minute + d.Second + d.Millisecond; Console.WriteLine(timestamp + message); On one hand, this is a clear example of not understanding operator overloading- clearly, they understood that + could be used for string concatenation, but they seem to have forgotten that it could also be used for arithmetic. I don't think this actually only ever printed out a zero. It certainly didn't print out a timestamp, but it also didn't print out a zero. So not only is the code bad, but the understanding of how it's bad is also bad. It's bad. Bad. Bad. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Thu, 19 Dec 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1513,
  "excerpt": "Michael had a co-worker who was new to the team. As such, there was definitely an expected ramp-up time. But this new developer got that ramp up time, and still wasn't performing. Worse, they ended up dragging down the entire team, as they'd go off, write a bunch of code, end up in a situation that they couldn't understand why nothing was working, and then beg for help. For example, this dev was tasked with adding timestamps to a set of logging messages. The logs had started as simple \"print\" debugging messages, but had grown in complexity and it was time to treat them like real logging.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-12-19 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Michael had a co-worker who was new to the team. As such, there was definitely an expected ramp-up time. But this new developer got that ramp up time, and still wasn't performing. Worse, they ended up dragging down the entire team, as they'd go off, write a bunch of code, end up in a situation that they couldn't understand why nothing was working, and then beg for help. For example, this dev was tasked with adding timestamps to a set of logging messages. The logs had started as simple \"print\" debugging messages, but had grown in complexity and it was time to treat them like real logging. This stumped them, as the following C# code only ever printed out a zero: DateTime d = new DateTime(); int timestamp = d.Minute + d.Second + d.Millisecond; Console.WriteLine(timestamp + message); On one hand, this is a clear example of not understanding operator overloading- clearly, they understood that + could be used for string concatenation, but they seem to have forgotten that it could also be used for arithmetic. I don't think this actually only ever printed out a zero. It certainly didn't print out a timestamp, but it also didn't print out a zero. So not only is the code bad, but the understanding of how it's bad is also bad. It's bad. Bad. Bad.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-12-19\"\u003e2024-12-19\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10807\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eMichael\u003c/strong\u003e had a co-worker who was new to the team. As such, there was definitely an expected ramp-up time. But this new developer got that ramp up time, and still wasn\u0026#39;t performing. Worse, they ended up dragging down the entire team, as they\u0026#39;d go off, write a bunch of code, end up in a situation that they couldn\u0026#39;t understand why nothing was working, and then beg for help.\u003c/p\u003e\n\u003cp\u003eFor example, this dev was tasked with adding timestamps to a set of logging messages. The logs had started as simple \u0026#34;print\u0026#34; debugging messages, but had grown in complexity and it was time to treat them like real logging.\u003c/p\u003e\n\u003cp\u003eThis stumped them, as the following C# code only ever printed out a zero:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDateTime d = \u003cspan\u003enew\u003c/span\u003e DateTime();\n\u003cspan\u003eint\u003c/span\u003e timestamp = d.Minute + d.Second + d.Millisecond;\nConsole.WriteLine(timestamp + message);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOn one hand, this is a clear example of not understanding operator overloading- clearly, they understood that \u003ccode\u003e+\u003c/code\u003e could be used for string concatenation, but they seem to have forgotten that it could also be used for arithmetic.\u003c/p\u003e\n\u003cp\u003eI don\u0026#39;t think this actually only ever printed out a zero. It certainly didn\u0026#39;t print out a timestamp, but it also didn\u0026#39;t print out a zero. So not only is the code bad, but the understanding of how it\u0026#39;s bad is also bad. It\u0026#39;s bad. Bad. Bad.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-12-19T06:30:00Z",
  "modifiedTime": null
}
