{
  "id": "f678b309-cc24-4bcd-b0a0-55c47a43245a",
  "title": "CodeSOD: Contains Bad Choices",
  "link": "https://thedailywtf.com/articles/contains-bad-choices",
  "description": "Paul's co-worker needed to manage some data in a tree. To do that, they wrote this Java function: private static boolean existsFather(ArrayList fatherFolder, Integer fatherId) { for (Integer father : fatherFolder) { if (father.equals(fatherId)) return true; } return false; } I do not know what the integers in use represent here. I don't think they're actually representing \"folders\", despite the variable names in the code. I certainly hope it's not representing files and folders, because that implies they're tossing around file handles in some C-brained approach (but badly, since it implies they've got an open handle for every object). The core WTF, in my opinion, is this- the code clearly implies some sort of tree structure, the tree contains integers, but they're not using any of the Java structures for handling trees, and implementing this slipshod approach. And even then, this code could be made more generic, as the general process works with any sane Java type. But there's also the obvious WTF: the java.util.Collection interface, which an ArrayList implements, already handles all of this in its contains method. This entire function could be replaced with fatherFolder.contains(fatherId). Paul writes: \"I guess the last developer didn't know that every implementation of a java.util.Collection has a method called contains. At least they knew how to do a for-each.\". [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "author": "Remy Porter",
  "published": "Tue, 28 Jan 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1998,
  "excerpt": "Paul's co-worker needed to manage some data in a tree. To do that, they wrote this Java function: private static boolean existsFather(ArrayList\u003cInteger\u003e fatherFolder, Integer fatherId) { for (Integer father : fatherFolder) { if (father.equals(fatherId)) return true; } return false; }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-01-28 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Paul's co-worker needed to manage some data in a tree. To do that, they wrote this Java function: private static boolean existsFather(ArrayList\u003cInteger\u003e fatherFolder, Integer fatherId) { for (Integer father : fatherFolder) { if (father.equals(fatherId)) return true; } return false; } I do not know what the integers in use represent here. I don't think they're actually representing \"folders\", despite the variable names in the code. I certainly hope it's not representing files and folders, because that implies they're tossing around file handles in some C-brained approach (but badly, since it implies they've got an open handle for every object). The core WTF, in my opinion, is this- the code clearly implies some sort of tree structure, the tree contains integers, but they're not using any of the Java structures for handling trees, and implementing this slipshod approach. And even then, this code could be made more generic, as the general process works with any sane Java type. But there's also the obvious WTF: the java.util.Collection interface, which an ArrayList implements, already handles all of this in its contains method. This entire function could be replaced with fatherFolder.contains(fatherId). Paul writes: \"I guess the last developer didn't know that every implementation of a java.util.Collection has a method called contains. At least they knew how to do a for-each.\". [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-01-28\"\u003e2025-01-28\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10836\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003ePaul\u003c/strong\u003e\u0026#39;s co-worker needed to manage some data in a tree. To do that, they wrote this Java function:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003eboolean\u003c/span\u003e \u003cspan\u003eexistsFather\u003c/span\u003e\u003cspan\u003e(ArrayList\u0026lt;Integer\u0026gt; fatherFolder, Integer fatherId)\u003c/span\u003e {\n        \u003cspan\u003efor\u003c/span\u003e (Integer father : fatherFolder) {\n                \u003cspan\u003eif\u003c/span\u003e (father.equals(fatherId))\n                        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e;\n        }\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI do not know what the integers in use represent here. I don\u0026#39;t \u003cem\u003ethink\u003c/em\u003e they\u0026#39;re actually representing \u0026#34;folders\u0026#34;, despite the variable names in the code. I certainly hope it\u0026#39;s not representing files and folders, because that implies they\u0026#39;re tossing around file handles in some C-brained approach (but badly, since it implies they\u0026#39;ve got an open handle for every object).\u003c/p\u003e\n\u003cp\u003eThe core WTF, in my opinion, is this- the code clearly implies some sort of tree structure, the tree contains integers, but they\u0026#39;re not using any of the Java structures for handling trees, and implementing this slipshod approach. And even then, this code could be made more generic, as the general process works with any sane Java type.\u003c/p\u003e\n\u003cp\u003eBut there\u0026#39;s also the obvious WTF: the \u003ccode\u003ejava.util.Collection\u003c/code\u003e interface, which an \u003ccode\u003eArrayList\u003c/code\u003e implements, already handles all of this in its \u003ccode\u003econtains\u003c/code\u003e method. This entire function could be replaced with \u003ccode\u003efatherFolder.contains(fatherId)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003ePaul writes: \u0026#34;I guess the last developer didn\u0026#39;t know that every implementation of a java.util.Collection has a method called contains. At least they knew how to do a for-each.\u0026#34;.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.\u003ca href=\"https://inedo.com/proget?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-01-28T06:30:00Z",
  "modifiedTime": null
}
