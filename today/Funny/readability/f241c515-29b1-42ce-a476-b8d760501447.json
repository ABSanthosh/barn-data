{
  "id": "f241c515-29b1-42ce-a476-b8d760501447",
  "title": "CodeSOD: The Big Pictures",
  "link": "https://thedailywtf.com/articles/the-big-pictures",
  "description": "Loading times for web pages is one of the key metrics we like to tune. Users will put up with a lot if they feel like they application is responsive. So when Caivs was handed 20MB of PHP and told, \"one of the key pages takes like 30-45 seconds to load. Figure out why,\" it was at least a clear goal. Combing through that gigantic pile of code to try and understand what was happening was an uphill battle. Eventually, Caivs just decided to check the traffic logs while running the application. That highlighted a huge spike in traffic every time the page loaded, and that helped Caivs narrow down exactly where the problem was. $first_image = ''; foreach($images as $the_image) { $image = $the_image['url']; if(file_exists($config-\u003ebase_url.'/uploads/'.$image)) { if($first_image=='') { $first_image = $image; } $image_dimensions = '\u0026w=648\u0026h=432'; $get_dimensions = getimagesize('http://old.datacenter.ip.address/'.$config-\u003ebase_url.'/uploads/'.$image); if($get_dimensions[0] \u003c $get_dimensions[1]) $image_dimensions = '\u0026h=432'; echo ''.$config-\u003ebase_url.'/timthumb.php?src='.$config-\u003ebase_url.'/uploads/'.$image.'\u0026w=125\u0026h=80\u0026zc=1'), 'javascript:;', array('onclick'=\u003e'$(\\'.image_gallery .feature .image\\').html(\\''.$config-\u003ebase_url.'/timthumb.php?src='.$config-\u003ebase_url.'/uploads/'.$image.$image_dimensions.'\u0026zc=1').'\\');$(\\'.image_gallery .feature .title\\').show();$(\\'.image_gallery .feature .title\\').html(\"'.str_replace('\"', '', $the_image['Image Description']).'\");$(\\'.image_gallery .bar ul li a\\').removeClass(\\'active\\');$(\\'.image_gallery .bar ul li\\').removeClass(\\'active\\');$(this).addClass(\\'active\\');$(this).parents(\\'li\\').addClass(\\'active\\');sidebarHeight();curImg=$(this).attr(\\'id\\');translate()','id'=\u003e$img_num)).''; $img_num++; } } For every image they want to display in a gallery, they echo out a list item for it, which that part makes sense- more or less. The mix of PHP, JavaScript, JQuery, and HTML tags is ugly and awful and I hate it. But that's just a prosaic kind of awful, background radiation of looking at PHP code. Yes, it should be launched into the Kupier belt (it doesn't deserve the higher delta-V required to launch it into the sun), but that's not why we're here. The cause of the long load times was in the lines above- where for each image, we getimagesize- a function which downloads the image and checks its stats, all so we can set $image_dimensions. Which, presumably, the server hosting the images uses the query string to resize the returned image. All this is to check- if the height is greater than the width we force the height to be 432 pixels, otherwise we force the whole image to be 648x432 pixels. Now, the server supplying those images had absolutely no caching, so that meant for every image request it needed to resize the image before sending. And for reasons which were unclear, if the requested aspect ratio were wildly different than the actual aspect ratio, it would also sometimes just refused to resize and return a gigantic original image file. But someone also had thought about the perils of badly behaved clients downloading too many images, so if a single host were requesting too many images, it would start throttling the responses. When you add all this up, it meant that this PHP web application was getting throttled by its own file server, because it was requesting too many images, too quickly. Any reasonable user load hitting it would be viewed as an attempted denial of service attack on the file hosting backend. Caivs was able to simply remove the check on filesize, and add a few CSS rules which ensured that files in the gallery wouldn't misbehave terribly. The performance problems went away- at least for that page of the application. Buried in that 20MB of PHP/HTML code, there were plenty more places where things could go wrong. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Tue, 06 May 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 4282,
  "excerpt": "Loading times for web pages is one of the key metrics we like to tune. Users will put up with a lot if they feel like they application is responsive. So when Caivs was handed 20MB of PHP and told, \"one of the key pages takes like 30-45 seconds to load. Figure out why,\" it was at least a clear goal. Combing through that gigantic pile of code to try and understand what was happening was an uphill battle. Eventually, Caivs just decided to check the traffic logs while running the application. That highlighted a huge spike in traffic every time the page loaded, and that helped Caivs narrow down exactly where the problem was.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-05-06 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Loading times for web pages is one of the key metrics we like to tune. Users will put up with a lot if they feel like they application is responsive. So when Caivs was handed 20MB of PHP and told, \"one of the key pages takes like 30-45 seconds to load. Figure out why,\" it was at least a clear goal. Combing through that gigantic pile of code to try and understand what was happening was an uphill battle. Eventually, Caivs just decided to check the traffic logs while running the application. That highlighted a huge spike in traffic every time the page loaded, and that helped Caivs narrow down exactly where the problem was. $first_image = ''; foreach($images as $the_image) { $image = $the_image['url']; if(file_exists($config-\u003ebase_url.'/uploads/'.$image)) { if($first_image=='') { $first_image = $image; } $image_dimensions = '\u0026w=648\u0026h=432'; $get_dimensions = getimagesize('http://old.datacenter.ip.address/'.$config-\u003ebase_url.'/uploads/'.$image); if($get_dimensions[0] \u003c $get_dimensions[1]) $image_dimensions = '\u0026h=432'; echo '\u003cli\u003e'.$config-\u003ebase_url.'/timthumb.php?src='.$config-\u003ebase_url.'/uploads/'.$image.'\u0026w=125\u0026h=80\u0026zc=1'), 'javascript:;', array('onclick'=\u003e'$(\\'.image_gallery .feature .image\\').html(\\''.$config-\u003ebase_url.'/timthumb.php?src='.$config-\u003ebase_url.'/uploads/'.$image.$image_dimensions.'\u0026zc=1').'\\');$(\\'.image_gallery .feature .title\\').show();$(\\'.image_gallery .feature .title\\').html(\"'.str_replace('\"', '', $the_image['Image Description']).'\");$(\\'.image_gallery .bar ul li a\\').removeClass(\\'active\\');$(\\'.image_gallery .bar ul li\\').removeClass(\\'active\\');$(this).addClass(\\'active\\');$(this).parents(\\'li\\').addClass(\\'active\\');sidebarHeight();curImg=$(this).attr(\\'id\\');translate()','id'=\u003e$img_num)).'\u003c/li\u003e'; $img_num++; } } For every image they want to display in a gallery, they echo out a list item for it, which that part makes sense- more or less. The mix of PHP, JavaScript, JQuery, and HTML tags is ugly and awful and I hate it. But that's just a prosaic kind of awful, background radiation of looking at PHP code. Yes, it should be launched into the Kupier belt (it doesn't deserve the higher delta-V required to launch it into the sun), but that's not why we're here. The cause of the long load times was in the lines above- where for each image, we getimagesize- a function which downloads the image and checks its stats, all so we can set $image_dimensions. Which, presumably, the server hosting the images uses the query string to resize the returned image. All this is to check- if the height is greater than the width we force the height to be 432 pixels, otherwise we force the whole image to be 648x432 pixels. Now, the server supplying those images had absolutely no caching, so that meant for every image request it needed to resize the image before sending. And for reasons which were unclear, if the requested aspect ratio were wildly different than the actual aspect ratio, it would also sometimes just refused to resize and return a gigantic original image file. But someone also had thought about the perils of badly behaved clients downloading too many images, so if a single host were requesting too many images, it would start throttling the responses. When you add all this up, it meant that this PHP web application was getting throttled by its own file server, because it was requesting too many images, too quickly. Any reasonable user load hitting it would be viewed as an attempted denial of service attack on the file hosting backend. Caivs was able to simply remove the check on filesize, and add a few CSS rules which ensured that files in the gallery wouldn't misbehave terribly. The performance problems went away- at least for that page of the application. Buried in that 20MB of PHP/HTML code, there were plenty more places where things could go wrong. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-05-06\"\u003e2025-05-06\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10907\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eLoading times for web pages is one of the key metrics we like to tune. Users will put up with a lot if they feel like they application is responsive. So when \u003cstrong\u003eCaivs\u003c/strong\u003e was handed 20MB of PHP and told, \u0026#34;one of the key pages takes like 30-45 seconds to load. Figure out why,\u0026#34; it was at least a \u003cem\u003eclear\u003c/em\u003e goal.\u003c/p\u003e\n\u003cp\u003eCombing through that gigantic pile of code to try and understand what was happening was an uphill battle. Eventually, Caivs just decided to check the traffic logs while running the application. \u003cem\u003eThat\u003c/em\u003e highlighted a huge spike in traffic every time the page loaded, and that helped Caivs narrow down exactly where the problem was.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e$first_image\u003c/span\u003e = \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eforeach\u003c/span\u003e(\u003cspan\u003e$images\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e \u003cspan\u003e$the_image\u003c/span\u003e)\n{ \n    \u003cspan\u003e$image\u003c/span\u003e = \u003cspan\u003e$the_image\u003c/span\u003e[\u003cspan\u003e\u0026#39;url\u0026#39;\u003c/span\u003e];\n \n  \u003cspan\u003eif\u003c/span\u003e(\u003cspan\u003efile_exists\u003c/span\u003e(\u003cspan\u003e$config\u003c/span\u003e-\u0026gt;base_url.\u003cspan\u003e\u0026#39;/uploads/\u0026#39;\u003c/span\u003e.\u003cspan\u003e$image\u003c/span\u003e))\n  {\n    \u003cspan\u003eif\u003c/span\u003e(\u003cspan\u003e$first_image\u003c/span\u003e==\u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e)\n    {\n      \u003cspan\u003e$first_image\u003c/span\u003e = \u003cspan\u003e$image\u003c/span\u003e;\n    }\n   \n    \u003cspan\u003e$image_dimensions\u003c/span\u003e = \u003cspan\u003e\u0026#39;\u0026amp;w=648\u0026amp;h=432\u0026#39;\u003c/span\u003e;\n    \u003cspan\u003e$get_dimensions\u003c/span\u003e = \u003cspan\u003egetimagesize\u003c/span\u003e(\u003cspan\u003e\u0026#39;http://old.datacenter.ip.address/\u0026#39;\u003c/span\u003e.\u003cspan\u003e$config\u003c/span\u003e-\u0026gt;base_url.\u003cspan\u003e\u0026#39;/uploads/\u0026#39;\u003c/span\u003e.\u003cspan\u003e$image\u003c/span\u003e);\n    \u003cspan\u003eif\u003c/span\u003e(\u003cspan\u003e$get_dimensions\u003c/span\u003e[\u003cspan\u003e0\u003c/span\u003e] \u0026lt; \u003cspan\u003e$get_dimensions\u003c/span\u003e[\u003cspan\u003e1\u003c/span\u003e])\n      \u003cspan\u003e$image_dimensions\u003c/span\u003e = \u003cspan\u003e\u0026#39;\u0026amp;h=432\u0026#39;\u003c/span\u003e;\n\n    \u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e\u0026#39;\u0026lt;li\u0026gt;\u0026#39;\u003c/span\u003e.\u003cspan\u003e$config\u003c/span\u003e-\u0026gt;base_url.\u003cspan\u003e\u0026#39;/timthumb.php?src=\u0026#39;\u003c/span\u003e.\u003cspan\u003e$config\u003c/span\u003e-\u0026gt;base_url.\u003cspan\u003e\u0026#39;/uploads/\u0026#39;\u003c/span\u003e.\u003cspan\u003e$image\u003c/span\u003e.\u003cspan\u003e\u0026#39;\u0026amp;w=125\u0026amp;h=80\u0026amp;zc=1\u0026#39;\u003c/span\u003e), \u003cspan\u003e\u0026#39;javascript:;\u0026#39;\u003c/span\u003e, \u003cspan\u003earray\u003c/span\u003e(\u003cspan\u003e\u0026#39;onclick\u0026#39;\u003c/span\u003e=\u0026gt;\u003cspan\u003e\u0026#39;$(\\\u0026#39;.image_gallery .feature .image\\\u0026#39;).html(\\\u0026#39;\u0026#39;\u003c/span\u003e.\u003cspan\u003e$config\u003c/span\u003e-\u0026gt;base_url.\u003cspan\u003e\u0026#39;/timthumb.php?src=\u0026#39;\u003c/span\u003e.\u003cspan\u003e$config\u003c/span\u003e-\u0026gt;base_url.\u003cspan\u003e\u0026#39;/uploads/\u0026#39;\u003c/span\u003e.\u003cspan\u003e$image\u003c/span\u003e.\u003cspan\u003e$image_dimensions\u003c/span\u003e.\u003cspan\u003e\u0026#39;\u0026amp;zc=1\u0026#39;\u003c/span\u003e).\u003cspan\u003e\u0026#39;\\\u0026#39;);$(\\\u0026#39;.image_gallery .feature .title\\\u0026#39;).show();$(\\\u0026#39;.image_gallery .feature .title\\\u0026#39;).html(\u0026#34;\u0026#39;\u003c/span\u003e.\u003cspan\u003estr_replace\u003c/span\u003e(\u003cspan\u003e\u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e, \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e, \u003cspan\u003e$the_image\u003c/span\u003e[\u003cspan\u003e\u0026#39;Image Description\u0026#39;\u003c/span\u003e]).\u003cspan\u003e\u0026#39;\u0026#34;);$(\\\u0026#39;.image_gallery .bar ul li a\\\u0026#39;).removeClass(\\\u0026#39;active\\\u0026#39;);$(\\\u0026#39;.image_gallery .bar ul li\\\u0026#39;).removeClass(\\\u0026#39;active\\\u0026#39;);$(this).addClass(\\\u0026#39;active\\\u0026#39;);$(this).parents(\\\u0026#39;li\\\u0026#39;).addClass(\\\u0026#39;active\\\u0026#39;);sidebarHeight();curImg=$(this).attr(\\\u0026#39;id\\\u0026#39;);translate()\u0026#39;\u003c/span\u003e,\u003cspan\u003e\u0026#39;id\u0026#39;\u003c/span\u003e=\u0026gt;\u003cspan\u003e$img_num\u003c/span\u003e)).\u003cspan\u003e\u0026#39;\u0026lt;/li\u0026gt;\u0026#39;\u003c/span\u003e;\n    \u003cspan\u003e$img_num\u003c/span\u003e++;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor every image they want to display in a gallery, they \u003ccode\u003eecho\u003c/code\u003e out a list item for it, which that part makes sense- more or less. The mix of PHP, JavaScript, JQuery, and HTML tags is ugly and awful and I hate it. But that\u0026#39;s just a prosaic kind of awful, background radiation of looking at PHP code. Yes, it should be launched into the Kupier belt (it doesn\u0026#39;t deserve the higher delta-V required to launch it into the sun), but that\u0026#39;s not why we\u0026#39;re here.\u003c/p\u003e\n\u003cp\u003eThe cause of the long load times was in the lines above- where for each image, we \u003ccode\u003egetimagesize\u003c/code\u003e- a function which downloads the image and checks its stats, all so we can set \u003ccode\u003e$image_dimensions\u003c/code\u003e. Which, presumably, the server hosting the images uses the query string to resize the returned image.\u003c/p\u003e\n\u003cp\u003eAll this is to check- if the height is greater than the width we force the height to be 432 pixels, otherwise we force the whole image to be 648x432 pixels.\u003c/p\u003e\n\u003cp\u003eNow, the server supplying those images had absolutely no caching, so that meant for \u003cem\u003eevery\u003c/em\u003e image request it needed to resize the image before sending. And for reasons which were unclear, if the requested aspect ratio were wildly different than the actual aspect ratio, it would also sometimes just refused to resize and return a gigantic original image file. But someone \u003cem\u003ealso\u003c/em\u003e had thought about the perils of badly behaved clients downloading too many images, so if a single host were requesting too many images, it would start throttling the responses.\u003c/p\u003e\n\u003cp\u003eWhen you add all this up, it meant that this PHP web application was getting throttled by its own file server, because it was requesting too many images, too quickly. Any reasonable user load hitting it would be viewed as an attempted denial of service attack on the file hosting backend.\u003c/p\u003e\n\u003cp\u003eCaivs was able to simply remove the check on filesize, and add a few CSS rules which ensured that files in the gallery wouldn\u0026#39;t misbehave terribly. The performance problems went away- at least for that page of the application. Buried in that 20MB of PHP/HTML code, there were plenty more places where things could go wrong.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-05-06T06:30:00Z",
  "modifiedTime": null
}
