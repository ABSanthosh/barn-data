{
  "id": "260d4bf2-52b5-4508-b77c-b97712054152",
  "title": "CodeSOD: It's Not Wrong to Say We're Equal",
  "link": "https://thedailywtf.com/articles/it-s-not-wrong-to-say-we-re-equal",
  "description": "Aaron was debugging some C# code, and while this wasn't the source of the bug, it annoyed him enough to send it to us. protected override int DoCompare(Item item1, Item item2) { try { DateTime thisDate = ((DateField)item1.Fields[\"Create Date\"]).DateTime; DateTime thatDate = ((DateField)item2.Fields[\"Create Date\"]).DateTime; return thatDate.CompareTo(thisDate); } catch (Exception) { return 0; // Sorry, ran out of budget! } } Not to be the pedantic code reviewer, but the name of this function is terrible. Also, DoCompare clearly should be static, but this is just pedantry. Now, there's a lot of implied WTFs hidden in the Item class. They're tracking fields in a dictionary, or maybe a ResultSet, but I don't think it's a ResultSet because they're converting it to a DateField object, which I believe to be a custom type. I don't know what all is in that class, but the whole thing looks like a mess and I suspect that there are huge WTFs under that. But we're not here to look at implied WTFs. We're here to talk about that exception handler. It's one of those \"swallow every error\" exception handlers, which is always a \"good\" start, and it's the extra helpful kind, which returns a value that is likely incorrect and provides no indication that anything failed. Now, I suspect it's impossible for anything to have failed- as stated, this seems to be some custom objects and I don't think anything is actively talking to a database in this function (but I don't know that!) so the exception handler likely never triggers. But hoo boy, does the comment tell us a lot about the codebase. \"Sorry, ran out of budget!\". Bugs are inevitable, but this is arguably the worst way to end up with a bug in your code: because you simply ran out of money and decided to leave it broken. And ironically, I suspect the code would be less broken if you just let the exception propagate up- if nothing else, you'd know that something failed, instead of incorrectly thinking two dates were the same. .comment { border: none; } [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Tue, 01 Jul 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2428,
  "excerpt": "Aaron was debugging some C# code, and while this wasn't the source of the bug, it annoyed him enough to send it to us. protected override int DoCompare(Item item1, Item item2) { try { DateTime thisDate = ((DateField)item1.Fields[\"Create Date\"]).DateTime; DateTime thatDate = ((DateField)item2.Fields[\"Create Date\"]).DateTime; return thatDate.CompareTo(thisDate); } catch (Exception) { return 0; // Sorry, ran out of budget! } }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-07-01 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Aaron was debugging some C# code, and while this wasn't the source of the bug, it annoyed him enough to send it to us. protected override int DoCompare(Item item1, Item item2) { try { DateTime thisDate = ((DateField)item1.Fields[\"Create Date\"]).DateTime; DateTime thatDate = ((DateField)item2.Fields[\"Create Date\"]).DateTime; return thatDate.CompareTo(thisDate); } catch (Exception) { return 0; // Sorry, ran out of budget! } } Not to be the pedantic code reviewer, but the name of this function is terrible. Also, DoCompare clearly should be static, but this is just pedantry. Now, there's a lot of implied WTFs hidden in the Item class. They're tracking fields in a dictionary, or maybe a ResultSet, but I don't think it's a ResultSet because they're converting it to a DateField object, which I believe to be a custom type. I don't know what all is in that class, but the whole thing looks like a mess and I suspect that there are huge WTFs under that. But we're not here to look at implied WTFs. We're here to talk about that exception handler. It's one of those \"swallow every error\" exception handlers, which is always a \"good\" start, and it's the extra helpful kind, which returns a value that is likely incorrect and provides no indication that anything failed. Now, I suspect it's impossible for anything to have failed- as stated, this seems to be some custom objects and I don't think anything is actively talking to a database in this function (but I don't know that!) so the exception handler likely never triggers. But hoo boy, does the comment tell us a lot about the codebase. \"Sorry, ran out of budget!\". Bugs are inevitable, but this is arguably the worst way to end up with a bug in your code: because you simply ran out of money and decided to leave it broken. And ironically, I suspect the code would be less broken if you just let the exception propagate up- if nothing else, you'd know that something failed, instead of incorrectly thinking two dates were the same. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-07-01\"\u003e2025-07-01\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10950\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eAaron\u003c/strong\u003e was debugging some C# code, and while this wasn\u0026#39;t the source of the bug, it annoyed him enough to send it to us.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eprotected\u003c/span\u003e \u003cspan\u003eoverride\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003eDoCompare\u003c/span\u003e(\u003cspan\u003eItem item1, Item item2\u003c/span\u003e)\u003c/span\u003e\n{\n\t\u003cspan\u003etry\u003c/span\u003e\n\t{\n\t\tDateTime thisDate = ((DateField)item1.Fields[\u003cspan\u003e\u0026#34;Create Date\u0026#34;\u003c/span\u003e]).DateTime;\n\t\tDateTime thatDate = ((DateField)item2.Fields[\u003cspan\u003e\u0026#34;Create Date\u0026#34;\u003c/span\u003e]).DateTime;\n\n\t\t\u003cspan\u003ereturn\u003c/span\u003e thatDate.CompareTo(thisDate);\n\t}\n\t\u003cspan\u003ecatch\u003c/span\u003e (Exception)\n\t{\n\t\t\u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e; \u003cspan\u003e// Sorry, ran out of budget!\u003c/span\u003e\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNot to be the pedantic code reviewer, but the name of this function is terrible. Also, \u003ccode\u003eDoCompare\u003c/code\u003e clearly should be \u003cem\u003estatic\u003c/em\u003e, but this is just pedantry.\u003c/p\u003e\n\u003cp\u003eNow, there\u0026#39;s a lot of implied WTFs hidden in the \u003ccode\u003eItem\u003c/code\u003e class. They\u0026#39;re tracking fields in a dictionary, or maybe a \u003ccode\u003eResultSet\u003c/code\u003e, but I don\u0026#39;t think it\u0026#39;s a \u003ccode\u003eResultSet\u003c/code\u003e because they\u0026#39;re converting it to a \u003ccode\u003eDateField\u003c/code\u003e object, which I believe to be a custom type. I don\u0026#39;t know what all is in that class, but the whole thing looks like a mess and I suspect that there are huge WTFs under that.\u003c/p\u003e\n\u003cp\u003eBut we\u0026#39;re not here to look at implied WTFs. We\u0026#39;re here to talk about that exception handler.\u003c/p\u003e\n\u003cp\u003eIt\u0026#39;s one of those \u0026#34;swallow every error\u0026#34; exception handlers, which is always a \u0026#34;good\u0026#34; start, and it\u0026#39;s the extra helpful kind, which returns a value that is likely incorrect and provides no indication that anything failed.\u003c/p\u003e\n\u003cp\u003eNow, I suspect it\u0026#39;s impossible for anything \u003cem\u003eto\u003c/em\u003e have failed- as stated, this seems to be some custom objects and I don\u0026#39;t \u003cem\u003ethink\u003c/em\u003e anything is actively talking to a database in this function (but I don\u0026#39;t know that!) so the exception handler likely never triggers.\u003c/p\u003e\n\u003cp\u003eBut hoo boy, does the comment tell us a lot about the codebase. \u0026#34;Sorry, ran out of budget!\u0026#34;. Bugs are inevitable, but this is arguably the worst way to end up with a bug in your code: because you simply ran out of money and decided to leave it broken. And ironically, I suspect the code would be less broken if you just let the exception propagate up- if nothing else, you\u0026#39;d \u003cem\u003eknow\u003c/em\u003e that something failed, instead of incorrectly thinking two dates were the same.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-07-01T06:30:00Z",
  "modifiedTime": null
}
