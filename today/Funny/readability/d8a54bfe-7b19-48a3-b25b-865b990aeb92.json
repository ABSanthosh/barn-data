{
  "id": "d8a54bfe-7b19-48a3-b25b-865b990aeb92",
  "title": "CodeSOD: Dating in Another Language",
  "link": "https://thedailywtf.com/articles/dating-in-another-language",
  "description": "It takes a lot of time and effort to build a code base that exceeds 100kloc. Rome wasn't built in a day; it just burned down in one. Liza was working in a Python shop. They had a mildly successful product that ran on Linux. The sales team wanted better sales software to help them out, and instead of buying something off the shelf, they hired a C# developer to make something entirely custom. Within a few months, that developer had produced a codebase of 320kloc I say \"produced\" and not \"wrote\" because who knows how much of it was copy/pasted, stolen from Stack Overflow, or otherwise not the developer's own work. You have to wonder, how do you get such a large codebase so quickly? private String getDatum() { DateTime datum = new DateTime(); datum = DateTime.Now; return datum.ToShortDateString(); } public int getTag() { int tag; DateTime datum = new DateTime(); datum = DateTime.Today; tag = datum.Day; return tag; } private int getMonat() { int monat; DateTime datum = new DateTime(); datum = DateTime.Today; monat = datum.Month; return monat; } private int getJahr() { int monat; DateTime datum = new DateTime(); datum = DateTime.Today; monat = datum.Year; return monat; } private int getStunde() { int monat; DateTime datum = new DateTime(); datum = DateTime.Now; monat = datum.Hour; return monat; } private int getMinute() { int monat; DateTime datum = new DateTime(); datum = DateTime.Now; monat = datum.Minute; return monat; } Instead of our traditional \"bad date handling code\" which eschews the built-in libraries, this just wraps the built in libraries with a less useful set of wrappers. Each of these could be replaced with some version of DateTime.Now.Minute. You'll notice that most of the methods are private, but one is public. That seems strange, doesn't it? Well this set of methods was pulled from one random class which implements them in the codebase, but many classes have these methods copy/pasted in. At some point, the developer realized that duplicating that much code was a bad idea, and started marking them as public, so that you could just call them as needed. Note, said developer never learned to use the keyword static, so you end up calling the method on whatever random instance of whatever random class you happen to have handy. The idea of putting it into a common base class, or dedicated date-time utility class never occurred to the developer, but I guess that's because they were already part of a dedicated date-time utility class. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Wed, 23 Apr 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 3022,
  "excerpt": "It takes a lot of time and effort to build a code base that exceeds 100kloc. Rome wasn't built in a day; it just burned down in one. Liza was working in a Python shop. They had a mildly successful product that ran on Linux. The sales team wanted better sales software to help them out, and instead of buying something off the shelf, they hired a C# developer to make something entirely custom.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-04-23 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. It takes a lot of time and effort to build a code base that exceeds 100kloc. Rome wasn't built in a day; it just burned down in one. Liza was working in a Python shop. They had a mildly successful product that ran on Linux. The sales team wanted better sales software to help them out, and instead of buying something off the shelf, they hired a C# developer to make something entirely custom. Within a few months, that developer had produced a codebase of 320kloc I say \"produced\" and not \"wrote\" because who knows how much of it was copy/pasted, stolen from Stack Overflow, or otherwise not the developer's own work. You have to wonder, how do you get such a large codebase so quickly? private String getDatum() { DateTime datum = new DateTime(); datum = DateTime.Now; return datum.ToShortDateString(); } public int getTag() { int tag; DateTime datum = new DateTime(); datum = DateTime.Today; tag = datum.Day; return tag; } private int getMonat() { int monat; DateTime datum = new DateTime(); datum = DateTime.Today; monat = datum.Month; return monat; } private int getJahr() { int monat; DateTime datum = new DateTime(); datum = DateTime.Today; monat = datum.Year; return monat; } private int getStunde() { int monat; DateTime datum = new DateTime(); datum = DateTime.Now; monat = datum.Hour; return monat; } private int getMinute() { int monat; DateTime datum = new DateTime(); datum = DateTime.Now; monat = datum.Minute; return monat; } Instead of our traditional \"bad date handling code\" which eschews the built-in libraries, this just wraps the built in libraries with a less useful set of wrappers. Each of these could be replaced with some version of DateTime.Now.Minute. You'll notice that most of the methods are private, but one is public. That seems strange, doesn't it? Well this set of methods was pulled from one random class which implements them in the codebase, but many classes have these methods copy/pasted in. At some point, the developer realized that duplicating that much code was a bad idea, and started marking them as public, so that you could just call them as needed. Note, said developer never learned to use the keyword static, so you end up calling the method on whatever random instance of whatever random class you happen to have handy. The idea of putting it into a common base class, or dedicated date-time utility class never occurred to the developer, but I guess that's because they were already part of a dedicated date-time utility class. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-04-23\"\u003e2025-04-23\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10898\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eIt takes a lot of time and effort to build a code base that exceeds 100kloc. Rome wasn\u0026#39;t built in a day; it just burned down in one.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLiza\u003c/strong\u003e was working in a Python shop. They had a mildly successful product that ran on Linux. The sales team wanted better sales software to help them out, and instead of buying something off the shelf, they hired a C# developer to make something entirely custom.\u003c/p\u003e\n\u003cp\u003eWithin a few months, that developer had produced a codebase of 320kloc I say \u0026#34;produced\u0026#34; and not \u0026#34;wrote\u0026#34; because who knows how much of it was copy/pasted, stolen from Stack Overflow, or otherwise not the developer\u0026#39;s own work.\u003c/p\u003e\n\u003cp\u003eYou have to wonder, how do you get such a large codebase so quickly?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e String \u003cspan\u003egetDatum\u003c/span\u003e()\u003c/span\u003e\n{\n    DateTime datum = \u003cspan\u003enew\u003c/span\u003e DateTime();\n    datum = DateTime.Now;\n    \u003cspan\u003ereturn\u003c/span\u003e datum.ToShortDateString();\n}\n\n\u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetTag\u003c/span\u003e()\u003c/span\u003e\n{\n    \u003cspan\u003eint\u003c/span\u003e tag;\n    DateTime datum = \u003cspan\u003enew\u003c/span\u003e DateTime();\n    datum = DateTime.Today;\n    tag = datum.Day;\n    \u003cspan\u003ereturn\u003c/span\u003e tag;\n}\n\n\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetMonat\u003c/span\u003e()\u003c/span\u003e\n{\n    \u003cspan\u003eint\u003c/span\u003e monat;\n    DateTime datum = \u003cspan\u003enew\u003c/span\u003e DateTime();\n    datum = DateTime.Today;\n    monat = datum.Month;\n    \u003cspan\u003ereturn\u003c/span\u003e monat;\n}\n\n\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetJahr\u003c/span\u003e()\u003c/span\u003e\n{\n    \u003cspan\u003eint\u003c/span\u003e monat;\n    DateTime datum = \u003cspan\u003enew\u003c/span\u003e DateTime();\n    datum = DateTime.Today;\n    monat = datum.Year;\n    \u003cspan\u003ereturn\u003c/span\u003e monat;\n}\n\n\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetStunde\u003c/span\u003e()\u003c/span\u003e\n{\n    \u003cspan\u003eint\u003c/span\u003e monat;\n    DateTime datum = \u003cspan\u003enew\u003c/span\u003e DateTime();\n    datum = DateTime.Now;\n    monat = datum.Hour;\n    \u003cspan\u003ereturn\u003c/span\u003e monat;\n}\n\n\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003egetMinute\u003c/span\u003e()\u003c/span\u003e\n{\n    \u003cspan\u003eint\u003c/span\u003e monat;\n    DateTime datum = \u003cspan\u003enew\u003c/span\u003e DateTime();\n    datum = DateTime.Now;\n    monat = datum.Minute;\n    \u003cspan\u003ereturn\u003c/span\u003e monat;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstead of our traditional \u0026#34;bad date handling code\u0026#34; which eschews the built-in libraries, this just wraps the built in libraries with a less useful set of wrappers. Each of these could be replaced with some version of \u003ccode\u003eDateTime.Now.Minute\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou\u0026#39;ll notice that most of the methods are private, but \u003cem\u003eone\u003c/em\u003e is public. That seems strange, doesn\u0026#39;t it? \u003cem\u003eWell\u003c/em\u003e this set of methods was pulled from one random class which implements them in the codebase, but \u003cem\u003emany classes\u003c/em\u003e have these methods copy/pasted in. At some point, the developer realized that duplicating that much code was a bad idea, and started marking them as public, so that you could just call them as needed. Note, said developer never learned to use the keyword \u003ccode\u003estatic\u003c/code\u003e, so you end up calling the method on whatever random instance of whatever random class you happen to have handy. The idea of putting it into a common base class, or dedicated date-time utility class never occurred to the developer, but I guess that\u0026#39;s because \u003cem\u003ethey were already part of a dedicated date-time utility class\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-04-23T06:30:00Z",
  "modifiedTime": null
}
