{
  "id": "449b9ebd-bfee-477e-8680-764a8b60cd4c",
  "title": "CodeSOD: The Pirate's Code",
  "link": "https://thedailywtf.com/articles/the-pirate-s-code",
  "description": "We've talked about ASP .Net WebForms in the past. In this style of development, everything was event driven: click a button, and the browser sends an HTTP request to the server which triggers a series of events, including a \"Button Click\" event, and renders a new page. When ASP .Net launched, one of the \"features\" was a lazy repaint in browsers which supported it (aka, Internet Explorer), where you'd click the button, the page would render on the server, download, and then the browser would repaint only the changed areas, making it feel more like a desktop application, albeit a laggy one. This model didn't translate super naturally to AJAX style calls, where JavaScript updated only portions of the page. The .Net team added some hooks for it- special \"AJAX enabled\" controls, as well as helper functions, like __doPostBack, in the UI to generate URLs for \"postbacks\" to trigger server side execution. A postback is just a POST request with .NET specific state data in the body. All this said, Chris maintains a booking system for a boat rental company. Specifically, he's a developer at a company which the boat rental company hires to maintain their site. The original developer left behind a barnacle covered mess of tangled lines and rotting hull. Let's start with the view ASPX definition: \u003cscript\u003e function btnSave_Click() { if (someCondition) { //Trimmed for your own sanity //PostBack to Save Data into the Database. javascript:\u003c%#getPostBack()%\u003e; } else { return false; } } script\u003e \u003chtml\u003e \u003cbody\u003e \u003cinput type=\"button\" value=\" Save Booking \" id=\"btnSave\" class=\"button\" title=\"Save [Alt]\" onclick=\"btnSave_Click()\" /\u003e body\u003e html\u003e __doPostBack is the .NET method for generating URLs for performing postbacks, and specifically, it populates two request fields: __EVENTTARGET (the ID of the UI element triggering the event) and __EVENTARGUMENT, an arbitrary field for your use. I assume getPostBack() is a helper method which calls that. The code in btnSave_Click is as submitted, and I think our submitter may have mangled it a bit in \"trimming\", but I can see the goal is to ensure than when the onclick event fires, we perform a \"postback\" operation with some hard-coded values for __EVENTTARGET and __EVENTELEMENT. Or maybe it isn't mangled, and this code just doesn't work? I enjoy that the tool-tip \"title\" field specifies that it's \"[Alt]\" text, and that the name of the button includes extra whitespace to ensure that it's padded out to a good rendering size, instead of using CSS. But we can skip past this into the real meat. How this gets handled on the server side: Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load '// Trimmed more garbage If Page.IsPostBack Then 'Check if save button has been Clicked. Dim eventArg As String = Request(\"__EVENTARGUMENT\") Dim offset As Integer = eventArg.IndexOf(\"@@@@@\") If (offset \u003e -1) Then 'this is an event that we raised. so do whatever you need to here. Save() End If End If End Sub From this, I conclude that getPostBack populates the __EVENTARGUMENT field with a pile of \"@\", and we use that to recognize that the save button was clicked. Except, and this is the important thing, if they populated the ID property with btnSave, then ASP .Net would automatically call btnSave_Click. The entire point of the __doPostBack functionality is that it hooks into the event handling pattern and acts just like any other postback, but lets you have JavaScript execute as part of sending the request. The entire application is a boat with multiple holes in it; it's taking on water and going down, and like a good captain, Chris is absolutely not going down with it and looking for a lifeboat. Chris writes: The thing in its entirety is probably one of the biggest WTFs I've ever had to work with. I've held off submitting because nothing was ever straight forward enough to be understood without posting the entire website. Honestly, I'm still not sure I understand it, but I do hate it. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Tue, 10 Jun 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 4338,
  "excerpt": "We've talked about ASP .Net WebForms in the past. In this style of development, everything was event driven: click a button, and the browser sends an HTTP request to the server which triggers a series of events, including a \"Button Click\" event, and renders a new page. When ASP .Net launched, one of the \"features\" was a lazy repaint in browsers which supported it (aka, Internet Explorer), where you'd click the button, the page would render on the server, download, and then the browser would repaint only the changed areas, making it feel more like a desktop application, albeit a laggy one.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "We've talked about ASP .Net WebForms in the past. In this style of development, everything was event driven: click a button, and the browser sends an HTTP request to the server which triggers a series of events, including a \"Button Click\" event, and renders a new page. When ASP .Net launched, one of the \"features\" was a lazy repaint in browsers which supported it (aka, Internet Explorer), where you'd click the button, the page would render on the server, download, and then the browser would repaint only the changed areas, making it feel more like a desktop application, albeit a laggy one. This model didn't translate super naturally to AJAX style calls, where JavaScript updated only portions of the page. The .Net team added some hooks for it- special \"AJAX enabled\" controls, as well as helper functions, like __doPostBack, in the UI to generate URLs for \"postbacks\" to trigger server side execution. A postback is just a POST request with .NET specific state data in the body. All this said, Chris maintains a booking system for a boat rental company. Specifically, he's a developer at a company which the boat rental company hires to maintain their site. The original developer left behind a barnacle covered mess of tangled lines and rotting hull. Let's start with the view ASPX definition: \u003cscript\u003e function btnSave_Click() { if (someCondition) { //Trimmed for your own sanity //PostBack to Save Data into the Database. javascript:\u003c%#getPostBack()%\u003e; } else { return false; } } \u003c/script\u003e \u003chtml\u003e \u003cbody\u003e \u003cinput type=\"button\" value=\" Save Booking \" id=\"btnSave\" class=\"button\" title=\"Save [Alt]\" onclick=\"btnSave_Click()\" /\u003e \u003c/body\u003e \u003c/html\u003e __doPostBack is the .NET method for generating URLs for performing postbacks, and specifically, it populates two request fields: __EVENTTARGET (the ID of the UI element triggering the event) and __EVENTARGUMENT, an arbitrary field for your use. I assume getPostBack() is a helper method which calls that. The code in btnSave_Click is as submitted, and I think our submitter may have mangled it a bit in \"trimming\", but I can see the goal is to ensure than when the onclick event fires, we perform a \"postback\" operation with some hard-coded values for __EVENTTARGET and __EVENTELEMENT. Or maybe it isn't mangled, and this code just doesn't work? I enjoy that the tool-tip \"title\" field specifies that it's \"[Alt]\" text, and that the name of the button includes extra whitespace to ensure that it's padded out to a good rendering size, instead of using CSS. But we can skip past this into the real meat. How this gets handled on the server side: Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load '// Trimmed more garbage If Page.IsPostBack Then 'Check if save button has been Clicked. Dim eventArg As String = Request(\"__EVENTARGUMENT\") Dim offset As Integer = eventArg.IndexOf(\"@@@@@\") If (offset \u003e -1) Then 'this is an event that we raised. so do whatever you need to here. Save() End If End If End Sub From this, I conclude that getPostBack populates the __EVENTARGUMENT field with a pile of \"@\", and we use that to recognize that the save button was clicked. Except, and this is the important thing, if they populated the ID property with btnSave, then ASP .Net would automatically call btnSave_Click. The entire point of the __doPostBack functionality is that it hooks into the event handling pattern and acts just like any other postback, but lets you have JavaScript execute as part of sending the request. The entire application is a boat with multiple holes in it; it's taking on water and going down, and like a good captain, Chris is absolutely not going down with it and looking for a lifeboat. Chris writes: The thing in its entirety is probably one of the biggest WTFs I've ever had to work with. I've held off submitting because nothing was ever straight forward enough to be understood without posting the entire website. Honestly, I'm still not sure I understand it, but I do hate it. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eWe\u0026#39;ve talked about ASP .Net WebForms in the past. In this style of development, everything was event driven: click a button, and the browser sends an HTTP request to the server which triggers a series of events, including a \u0026#34;Button Click\u0026#34; event, and renders a new page.\u003c/p\u003e\n\u003cp\u003eWhen ASP .Net launched, one of the \u0026#34;features\u0026#34; was a lazy repaint in browsers which supported it (aka, Internet Explorer), where you\u0026#39;d click the button, the page would render on the server, download, and then the browser would repaint only the changed areas, making it feel more like a desktop application, albeit a laggy one.\u003c/p\u003e\n\u003cp\u003eThis model didn\u0026#39;t translate super naturally to AJAX style calls, where JavaScript updated only portions of the page. The .Net team added some hooks for it- special \u0026#34;AJAX enabled\u0026#34; controls, as well as helper functions, like \u003ccode\u003e__doPostBack\u003c/code\u003e, in the UI to generate URLs for \u0026#34;postbacks\u0026#34; to trigger server side execution. A postback is just a POST request with .NET specific state data in the body.\u003c/p\u003e\n\u003cp\u003eAll this said, \u003cstrong\u003eChris\u003c/strong\u003e maintains a booking system for a boat rental company. Specifically, he\u0026#39;s a developer at a company which the boat rental company hires to maintain their site. The original developer left behind a barnacle covered mess of tangled lines and rotting hull.\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s start with the view ASPX definition:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003cspan\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ebtnSave_Click\u003c/span\u003e(\u003cspan\u003e\u003c/span\u003e)\n{\n    \u003cspan\u003eif\u003c/span\u003e (someCondition) \n    {\n    \u003cspan\u003e//Trimmed for your own sanity\u003c/span\u003e\n    \n    \u003cspan\u003e//PostBack to Save Data into the Database.\u003c/span\u003e\n        \u003cspan\u003ejavascript\u003c/span\u003e:\u0026lt;%#\u003cspan\u003egetPostBack\u003c/span\u003e()%\u0026gt;;                   \n    }\n    \u003cspan\u003eelse\u003c/span\u003e\n    {\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n    }\n}\n\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003cspan\u003escript\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003cspan\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;\u003cspan\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n          \u003cspan\u003e\u0026lt;\u003cspan\u003einput\u003c/span\u003e \u003cspan\u003etype\u003c/span\u003e=\u003cspan\u003e\u0026#34;button\u0026#34;\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e=\u003cspan\u003e\u0026#34;  Save  Booking  \u0026#34;\u003c/span\u003e \u003cspan\u003eid\u003c/span\u003e=\u003cspan\u003e\u0026#34;btnSave\u0026#34;\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e=\u003cspan\u003e\u0026#34;button\u0026#34;\u003c/span\u003e \u003cspan\u003etitle\u003c/span\u003e=\u003cspan\u003e\u0026#34;Save [Alt]\u0026#34;\u003c/span\u003e \u003cspan\u003eonclick\u003c/span\u003e=\u003cspan\u003e\u0026#34;btnSave_Click()\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\n      \u003cspan\u003e\u0026lt;/\u003cspan\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;/\u003cspan\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003e__doPostBack\u003c/code\u003e is the .NET method for generating URLs for performing postbacks, and specifically, it populates two request fields: \u003ccode\u003e__EVENTTARGET\u003c/code\u003e (the ID of the UI element triggering the event) and \u003ccode\u003e__EVENTARGUMENT\u003c/code\u003e, an arbitrary field for your use. I assume \u003ccode\u003egetPostBack()\u003c/code\u003e is a helper method which calls that. The code in \u003ccode\u003ebtnSave_Click\u003c/code\u003e is as submitted, and I think our submitter may have mangled it a bit in \u0026#34;trimming\u0026#34;, but I can see the goal is to ensure than when the \u003ccode\u003eonclick\u003c/code\u003e event fires, we perform a \u0026#34;postback\u0026#34; operation with some hard-coded values for \u003ccode\u003e__EVENTTARGET\u003c/code\u003e and \u003ccode\u003e__EVENTELEMENT\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOr maybe it isn\u0026#39;t mangled, and this code just doesn\u0026#39;t work?\u003c/p\u003e\n\u003cp\u003eI enjoy that the tool-tip \u0026#34;title\u0026#34; field specifies that it\u0026#39;s \u0026#34;[Alt]\u0026#34; text, and that the name of the button includes extra whitespace to ensure that it\u0026#39;s padded out to a good rendering size, instead of using CSS.\u003c/p\u003e\n\u003cp\u003eBut we can skip past this into the real meat. How this gets handled on the server side:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eProtected \u003cspan\u003eSub\u003c/span\u003e Page_Load(\u003cspan\u003eByVal\u003c/span\u003e sender As Object, \u003cspan\u003eByVal\u003c/span\u003e e As System.EventArgs) Handles \u003cspan\u003eMe\u003c/span\u003e.Load\n    \u003cspan\u003e\u0026#39;// Trimmed more garbage\u003c/span\u003e\n    \u003cspan\u003eIf\u003c/span\u003e Page.IsPostBack \u003cspan\u003eThen\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;Check if save button has been Clicked.\u003c/span\u003e\n        \u003cspan\u003eDim\u003c/span\u003e eventArg As String = \u003cspan\u003eRequest\u003c/span\u003e(\u003cspan\u003e\u0026#34;__EVENTARGUMENT\u0026#34;\u003c/span\u003e)\n        \u003cspan\u003eDim\u003c/span\u003e offset As Integer = eventArg.IndexOf(\u003cspan\u003e\u0026#34;@@@@@\u0026#34;\u003c/span\u003e)\n        \u003cspan\u003eIf\u003c/span\u003e (offset \u0026gt; \u003cspan\u003e-1\u003c/span\u003e) \u003cspan\u003eThen\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;this is an event that we raised. so do whatever you need to here.\u003c/span\u003e\n            Save()\n        \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eIf\u003c/span\u003e\n    \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eIf\u003c/span\u003e\n\u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eSub\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFrom this, I conclude that \u003ccode\u003egetPostBack\u003c/code\u003e populates the \u003ccode\u003e__EVENTARGUMENT\u003c/code\u003e field with a pile of \u0026#34;@\u0026#34;, and we use \u003cem\u003ethat\u003c/em\u003e to recognize that the save button was clicked. Except, and this is the important thing, if they populated the ID property with \u003ccode\u003ebtnSave\u003c/code\u003e, then ASP .Net would \u003cem\u003eautomatically call\u003c/em\u003e \u003ccode\u003ebtnSave_Click\u003c/code\u003e. The entire point of the \u003ccode\u003e__doPostBack\u003c/code\u003e functionality is that it hooks into the event handling pattern and acts just like any other postback, but lets you have JavaScript execute as part of sending the request.\u003c/p\u003e\n\u003cp\u003eThe entire application is a boat with multiple holes in it; it\u0026#39;s taking on water and going down, and like a good captain, Chris is absolutely not going down with it and looking for a lifeboat.\u003c/p\u003e\n\u003cp\u003eChris writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe thing in its entirety is probably one of the biggest WTFs I\u0026#39;ve ever had to work with.\u003cbr/\u003e\nI\u0026#39;ve held off submitting because nothing was ever straight forward enough to be understood without posting the entire website.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHonestly, I\u0026#39;m still not sure I understand it, but I do hate it.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-06-10T06:30:00Z",
  "modifiedTime": null
}
