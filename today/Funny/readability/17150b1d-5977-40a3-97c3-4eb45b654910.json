{
  "id": "17150b1d-5977-40a3-97c3-4eb45b654910",
  "title": "CodeSOD: A Cache Exists",
  "link": "https://thedailywtf.com/articles/a-cache-exists",
  "description": "Ben's web firm took on a new client, and they're using a rather questionable shopping cart system. Like a lot of PHP web plugins, someone decided that they needed to \"protect\" their code by obfuscating it. Either that, they were obfuscating it out of shame, one or the other. if(!function_exists(\"cache_exists\")) { eval(\"fu\" . \"nction cach\" . \"e_exi\" . \"sts(\\$Data) { echo base\" . \"64\" . \"_d\" . \"eco\" . \"de(\\$\" . \"Data); }\"); } It seems like they specifically chose an \"obfuscation\" method which makes it hard to CTRL+F through the code- a search for \"cache_exists\" won't find the function definition. It'll find the line right before the function definition, where the code is checking to see if the function already exists, but it won't find the function. But let's talk about what the function does. It echoes into the page body the base-64 decoded version of whatever was in $Data. This alone gives me so many questions. What is in $Data? How does this relate to caching? Why are we just echoing the raw contents of a variable? What is this even for? Given that we do a function_exists check, I have a dark suspicion that there are multiple possible definitions of the function. This is the stub one that doesn't rely on reading from a cache and sorta does… almost nothing? But in other circumstances, there are other versions which are actually returning whether or not an entry is in the cache. This is just a guess, as Ben didn't supply that information, but everything about this makes me Concerned™. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "author": "Remy Porter",
  "published": "Tue, 08 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1878,
  "excerpt": "Ben's web firm took on a new client, and they're using a rather questionable shopping cart system. Like a lot of PHP web plugins, someone decided that they needed to \"protect\" their code by obfuscating it. Either that, they were obfuscating it out of shame, one or the other. if(!function_exists(\"cache_exists\")) { eval(\"fu\" . \"nction cach\" . \"e_exi\" . \"sts(\\$Data) { echo base\" . \"64\" . \"_d\" . \"eco\" . \"de(\\$\" . \"Data); }\"); }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-10-08 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Ben's web firm took on a new client, and they're using a rather questionable shopping cart system. Like a lot of PHP web plugins, someone decided that they needed to \"protect\" their code by obfuscating it. Either that, they were obfuscating it out of shame, one or the other. if(!function_exists(\"cache_exists\")) { eval(\"fu\" . \"nction cach\" . \"e_exi\" . \"sts(\\$Data) { echo base\" . \"64\" . \"_d\" . \"eco\" . \"de(\\$\" . \"Data); }\"); } It seems like they specifically chose an \"obfuscation\" method which makes it hard to CTRL+F through the code- a search for \"cache_exists\" won't find the function definition. It'll find the line right before the function definition, where the code is checking to see if the function already exists, but it won't find the function. But let's talk about what the function does. It echoes into the page body the base-64 decoded version of whatever was in $Data. This alone gives me so many questions. What is in $Data? How does this relate to caching? Why are we just echoing the raw contents of a variable? What is this even for? Given that we do a function_exists check, I have a dark suspicion that there are multiple possible definitions of the function. This is the stub one that doesn't rely on reading from a cache and sorta does… almost nothing? But in other circumstances, there are other versions which are actually returning whether or not an entry is in the cache. This is just a guess, as Ben didn't supply that information, but everything about this makes me Concerned™. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-10-08\"\u003e2024-10-08\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10754\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eBen\u003c/strong\u003e\u0026#39;s web firm took on a new client, and they\u0026#39;re using a rather questionable shopping cart system. Like a lot of PHP web plugins, someone decided that they needed to \u0026#34;protect\u0026#34; their code by obfuscating it. Either that, they were obfuscating it out of shame, one or the other.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e(!\u003cspan\u003efunction_exists\u003c/span\u003e(\u003cspan\u003e\u0026#34;cache_exists\u0026#34;\u003c/span\u003e)) {\n\t\u003cspan\u003eeval\u003c/span\u003e(\u003cspan\u003e\u0026#34;fu\u0026#34;\u003c/span\u003e . \u003cspan\u003e\u0026#34;nction cach\u0026#34;\u003c/span\u003e . \u003cspan\u003e\u0026#34;e_exi\u0026#34;\u003c/span\u003e . \u003cspan\u003e\u0026#34;sts(\\$Data) { echo base\u0026#34;\u003c/span\u003e . \u003cspan\u003e\u0026#34;64\u0026#34;\u003c/span\u003e . \u003cspan\u003e\u0026#34;_d\u0026#34;\u003c/span\u003e . \u003cspan\u003e\u0026#34;eco\u0026#34;\u003c/span\u003e . \u003cspan\u003e\u0026#34;de(\\$\u0026#34;\u003c/span\u003e . \u003cspan\u003e\u0026#34;Data); }\u0026#34;\u003c/span\u003e);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt seems like they specifically chose an \u0026#34;obfuscation\u0026#34; method which makes it hard to CTRL+F through the code- a search for \u0026#34;cache_exists\u0026#34; won\u0026#39;t find the function definition. It\u0026#39;ll find the line right \u003cem\u003ebefore\u003c/em\u003e the function definition, where the code is checking to see if the function already exists, but it won\u0026#39;t find the function.\u003c/p\u003e\n\u003cp\u003eBut let\u0026#39;s talk about what the function does. It echoes into the page body the base-64 decoded version of whatever was in \u003ccode\u003e$Data\u003c/code\u003e. This alone gives me so many questions. What is in \u003ccode\u003e$Data\u003c/code\u003e? How does this relate to caching? Why are we just echoing the raw contents of a variable? What is this even \u003cem\u003efor\u003c/em\u003e? Given that we do a \u003ccode\u003efunction_exists\u003c/code\u003e check, I have a dark suspicion that there are \u003cem\u003emultiple possible definitions\u003c/em\u003e of the function. This is the stub one that doesn\u0026#39;t rely on reading from a cache and sorta does… almost nothing? But in other circumstances, there are other versions which are actually returning whether or not an entry is in the cache. This is just a guess, as Ben didn\u0026#39;t supply that information, but everything about this makes me Concerned™.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tProGet’s got you covered with security and access controls on your NuGet feeds. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=GotYouCoveredFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-10-08T06:30:00Z",
  "modifiedTime": null
}
