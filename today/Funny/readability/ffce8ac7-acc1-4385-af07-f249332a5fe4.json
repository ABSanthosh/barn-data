{
  "id": "ffce8ac7-acc1-4385-af07-f249332a5fe4",
  "title": "CodeSOD: Would a Function by Any Other Name Still be WTF?",
  "link": "https://thedailywtf.com/articles/would-a-function-by-any-other-name-still-be-wtf",
  "description": "\"Don't use exception handling for normal flow control,\" is generally good advice. But Andy's lead had a PhD in computer science, and with that kind of education, wasn't about to let good advice or best practices tell them what to do. That's why, when they needed to validate inputs, they wrote code C# like this: public static bool IsDecimal(string theValue) { try { Convert.ToDouble(theValue); return true; } catch { return false; } } They attempt to convert, and if they succeed, great, return true. If they fail, an exception gets caught, and they return false. What could be simpler? Well, using the built in TryParse function would be simpler. Despite its name, actually avoids throwing an exception, even internally, because exceptions are expensive in .NET. And it is already implemented, so you don't have to do this. Also, Decimal is a type in C#- a 16-byte floating point value. Now, I know they didn't actually mean Decimal, just \"a value with 0 or more digits behind the decimal point\", but pedantry is the root of clarity, and the naming convention makes this bad code unclear about its intent and purpose. Per the docs there are Single and Double values which can't be represented as Decimal and trigger an OverflowException. And conversely, Decimal loses precision if converted to Double. This means a value that would be represented as Decimal might not pass this function, and a value that can't be represented as Decimal might, and none of this actually matters but the name of the function is bad. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "author": "Remy Porter",
  "published": "Mon, 12 May 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1983,
  "excerpt": "\"Don't use exception handling for normal flow control,\" is generally good advice. But Andy's lead had a PhD in computer science, and with that kind of education, wasn't about to let good advice or best practices tell them what to do. That's why, when they needed to validate inputs, they wrote code C# like this: public static bool IsDecimal(string theValue) { try { Convert.ToDouble(theValue); return true; } catch { return false; } }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-05-12 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. \"Don't use exception handling for normal flow control,\" is generally good advice. But Andy's lead had a PhD in computer science, and with that kind of education, wasn't about to let good advice or best practices tell them what to do. That's why, when they needed to validate inputs, they wrote code C# like this: public static bool IsDecimal(string theValue) { try { Convert.ToDouble(theValue); return true; } catch { return false; } } They attempt to convert, and if they succeed, great, return true. If they fail, an exception gets caught, and they return false. What could be simpler? Well, using the built in TryParse function would be simpler. Despite its name, actually avoids throwing an exception, even internally, because exceptions are expensive in .NET. And it is already implemented, so you don't have to do this. Also, Decimal is a type in C#- a 16-byte floating point value. Now, I know they didn't actually mean Decimal, just \"a value with 0 or more digits behind the decimal point\", but pedantry is the root of clarity, and the naming convention makes this bad code unclear about its intent and purpose. Per the docs there are Single and Double values which can't be represented as Decimal and trigger an OverflowException. And conversely, Decimal loses precision if converted to Double. This means a value that would be represented as Decimal might not pass this function, and a value that can't be represented as Decimal might, and none of this actually matters but the name of the function is bad. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-05-12\"\u003e2025-05-12\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10911\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u0026#34;Don\u0026#39;t use exception handling for normal flow control,\u0026#34; is generally good advice. But \u003cstrong\u003eAndy\u003c/strong\u003e\u0026#39;s lead had a PhD in computer science, and with that kind of education, wasn\u0026#39;t about to let good advice or best practices tell them what to do. That\u0026#39;s why, when they needed to validate inputs, they wrote code C# like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    \u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003ebool\u003c/span\u003e \u003cspan\u003eIsDecimal\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e theValue\u003c/span\u003e)\u003c/span\u003e\n    {\n        \u003cspan\u003etry\u003c/span\u003e\n        {\n            Convert.ToDouble(theValue);\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e;\n        }\n        \u003cspan\u003ecatch\u003c/span\u003e\n        {\n            \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n        }\n    } \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThey attempt to convert, and if they succeed, great, \u003ccode\u003ereturn true\u003c/code\u003e. If they fail, an exception gets caught, and they \u003ccode\u003ereturn false\u003c/code\u003e. What could be simpler?\u003c/p\u003e\n\u003cp\u003eWell, using the built in \u003ccode\u003eTryParse\u003c/code\u003e function would be simpler. \u003cem\u003eDespite\u003c/em\u003e its name, actually avoids throwing an exception, even internally, because exceptions are expensive in .NET. And it is already implemented, so you don\u0026#39;t have to do this.\u003c/p\u003e\n\u003cp\u003eAlso, \u003ccode\u003eDecimal\u003c/code\u003e is a type in C#- a 16-byte floating point value. Now, I \u003cem\u003eknow\u003c/em\u003e they didn\u0026#39;t actually mean \u003ccode\u003eDecimal\u003c/code\u003e, just \u0026#34;a value with 0 or more digits behind the decimal point\u0026#34;, but pedantry is the root of clarity, and the naming convention makes this bad code \u003cem\u003eunclear\u003c/em\u003e about its intent and purpose. Per the \u003ca href=\"https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-decimal\"\u003edocs\u003c/a\u003e there are \u003ccode\u003eSingle\u003c/code\u003e and \u003ccode\u003eDouble\u003c/code\u003e values which can\u0026#39;t be represented as \u003ccode\u003eDecimal\u003c/code\u003e and trigger an \u003ccode\u003eOverflowException\u003c/code\u003e. And conversely, \u003ccode\u003eDecimal\u003c/code\u003e loses precision if converted to \u003ccode\u003eDouble\u003c/code\u003e. This means a value that would be represented as \u003ccode\u003eDecimal\u003c/code\u003e might not pass this function, and a value that \u003cem\u003ecan\u0026#39;t\u003c/em\u003e be represented as \u003ccode\u003eDecimal\u003c/code\u003e might, and none of this actually matters but \u003cem\u003ethe name of the function is bad\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tProGet’s got you covered with security and access controls on your NuGet feeds. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=GotYouCoveredFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-05-12T06:30:00Z",
  "modifiedTime": null
}
