{
  "id": "639d68e5-d266-4cf4-a03e-890a31194689",
  "title": "CodeSOD: Join or Die",
  "link": "https://thedailywtf.com/articles/join-or-die",
  "description": "Seuf sends us some old code, which entered production in 2011. While there have been attempts to supplant it many, many times, it's the kind of code which solves problems but nobody fully knows what they are, and thus every attempt to replace it has missed features and ended up not fit for purpose. That the tool is unmaintainable, buggy, and slow? Well, so it goes. Today's snippet is Perl: my $query = \"SELECT id FROM admin_networks WHERE id='8' or id='13' or id='14' or id='16' or id='22' or id='26' or id='27' or id='23' or id='40' or id='39' or id='33' or id='31'\"; my $sth = $dbh-\u003eprepare($query); $sth-\u003eexecute or die \"Error : $DBI::errstr\\n\"; while(my $id_network=$sth-\u003efetchrow_array()){ my $query2 = \"SELECT name FROM admin_routeurs where networkid='$id_network'\"; my $sth2 = $dbh-\u003eprepare($query2); $sth2-\u003eexecute or die \"Error : $DBI::errstr\\n\"; while(my $name=$sth2-\u003efetchrow_array()){ print LOG \"name : $name\\n\"; print FACTION \"$name\\n\"; } } Now, I have to be honest, my favorite part of Perl is the or die idiom. \"Do this thing, or die.\" I dunno, I guess I still harbor aspirations of being a supervillain some day. But here we have a beautiful little bit of bad code. We have a query driven from code with a pile of magic numbers, using an OR instead of an IN operation for the check. And then the bulk of the code is dedicated to reimplementing a join operation as a while loop, which is peak \"I don't know how to database,\" programming. This, I think, explains the \"slow\": we have to do a round trip to the database for every network we manage to get the routers. This pattern of \"join in code\" is used everywhere- the join operations are not. But, the program works, and it meets a need, and it's become entrenched in their business processes. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "author": "Remy Porter",
  "published": "Wed, 02 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2169,
  "excerpt": "Seuf sends us some old code, which entered production in 2011. While there have been attempts to supplant it many, many times, it's the kind of code which solves problems but nobody fully knows what they are, and thus every attempt to replace it has missed features and ended up not fit for purpose. That the tool is unmaintainable, buggy, and slow? Well, so it goes. Today's snippet is Perl:",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-10-02 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Seuf sends us some old code, which entered production in 2011. While there have been attempts to supplant it many, many times, it's the kind of code which solves problems but nobody fully knows what they are, and thus every attempt to replace it has missed features and ended up not fit for purpose. That the tool is unmaintainable, buggy, and slow? Well, so it goes. Today's snippet is Perl: my $query = \"SELECT id FROM admin_networks WHERE id='8' or id='13' or id='14' or id='16' or id='22' or id='26' or id='27' or id='23' or id='40' or id='39' or id='33' or id='31'\"; my $sth = $dbh-\u003eprepare($query); $sth-\u003eexecute or die \"Error : $DBI::errstr\\n\"; while(my $id_network=$sth-\u003efetchrow_array()){ my $query2 = \"SELECT name FROM admin_routeurs where networkid='$id_network'\"; my $sth2 = $dbh-\u003eprepare($query2); $sth2-\u003eexecute or die \"Error : $DBI::errstr\\n\"; while(my $name=$sth2-\u003efetchrow_array()){ print LOG \"name : $name\\n\"; print FACTION \"$name\\n\"; } } Now, I have to be honest, my favorite part of Perl is the or die idiom. \"Do this thing, or die.\" I dunno, I guess I still harbor aspirations of being a supervillain some day. But here we have a beautiful little bit of bad code. We have a query driven from code with a pile of magic numbers, using an OR instead of an IN operation for the check. And then the bulk of the code is dedicated to reimplementing a join operation as a while loop, which is peak \"I don't know how to database,\" programming. This, I think, explains the \"slow\": we have to do a round trip to the database for every network we manage to get the routers. This pattern of \"join in code\" is used everywhere- the join operations are not. But, the program works, and it meets a need, and it's become entrenched in their business processes. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-10-02\"\u003e2024-10-02\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10750\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eSeuf\u003c/strong\u003e sends us some old code, which entered production in 2011. While there have been attempts to supplant it many, many times, it\u0026#39;s the kind of code which solves problems but nobody fully knows what they are, and thus every attempt to replace it has missed features and ended up not fit for purpose. That the tool is unmaintainable, buggy, and slow? Well, so it goes.\u003c/p\u003e\n\u003cp\u003eToday\u0026#39;s snippet is Perl:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003emy\u003c/span\u003e $query = \u003cspan\u003e\u0026#34;SELECT id FROM admin_networks WHERE id=\u0026#39;8\u0026#39; or id=\u0026#39;13\u0026#39; or id=\u0026#39;14\u0026#39; or id=\u0026#39;16\u0026#39; or id=\u0026#39;22\u0026#39; or id=\u0026#39;26\u0026#39; or id=\u0026#39;27\u0026#39; or id=\u0026#39;23\u0026#39; or id=\u0026#39;40\u0026#39; or id=\u0026#39;39\u0026#39; or id=\u0026#39;33\u0026#39; or id=\u0026#39;31\u0026#39;\u0026#34;\u003c/span\u003e;\n\u003cspan\u003emy\u003c/span\u003e $sth = $dbh-\u0026gt;prepare($query);\n$sth-\u0026gt;execute \u003cspan\u003eor\u003c/span\u003e \u003cspan\u003edie\u003c/span\u003e \u003cspan\u003e\u0026#34;Error : $DBI::errstr\\n\u0026#34;\u003c/span\u003e;\n\u003cspan\u003ewhile\u003c/span\u003e(\u003cspan\u003emy\u003c/span\u003e $id_network=$sth-\u0026gt;fetchrow_array()){\n    \u003cspan\u003emy\u003c/span\u003e $query2 = \u003cspan\u003e\u0026#34;SELECT name FROM admin_routeurs where networkid=\u0026#39;$id_network\u0026#39;\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003emy\u003c/span\u003e $sth2 = $dbh-\u0026gt;prepare($query2);\n    $sth2-\u0026gt;execute \u003cspan\u003eor\u003c/span\u003e \u003cspan\u003edie\u003c/span\u003e \u003cspan\u003e\u0026#34;Error : $DBI::errstr\\n\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003ewhile\u003c/span\u003e(\u003cspan\u003emy\u003c/span\u003e $name=$sth2-\u0026gt;fetchrow_array()){\n\n        \u003cspan\u003eprint\u003c/span\u003e LOG \u003cspan\u003e\u0026#34;name : $name\\n\u0026#34;\u003c/span\u003e;\n        \u003cspan\u003eprint\u003c/span\u003e FACTION \u003cspan\u003e\u0026#34;$name\\n\u0026#34;\u003c/span\u003e;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, I have to be honest, my favorite part of Perl is the \u003ccode\u003eor die\u003c/code\u003e idiom. \u0026#34;Do this thing, \u003cem\u003eor die\u003c/em\u003e.\u0026#34; I dunno, I guess I still harbor aspirations of being a supervillain some day.\u003c/p\u003e\n\u003cp\u003eBut here we have a beautiful little bit of bad code. We have a query driven from code with a pile of magic numbers, using an \u003ccode\u003eOR\u003c/code\u003e instead of an \u003ccode\u003eIN\u003c/code\u003e operation for the check. And then the bulk of the code is dedicated to reimplementing a join operation as a while loop, which is peak \u0026#34;I don\u0026#39;t know how to database,\u0026#34; programming.\u003c/p\u003e\n\u003cp\u003eThis, I think, explains the \u0026#34;slow\u0026#34;: we have to do a round trip to the database for every network we manage to get the routers. This pattern of \u0026#34;join in code\u0026#34; is used everywhere- the join operations \u003cem\u003eare not\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eBut, the program works, and it meets a need, and it\u0026#39;s become entrenched in their business processes.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tProGet’s got you covered with security and access controls on your NuGet feeds. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=GotYouCoveredFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-10-02T06:30:00Z",
  "modifiedTime": null
}
