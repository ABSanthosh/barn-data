{
  "id": "404fc7a8-19b9-4c8b-a264-37491673825f",
  "title": "CodeSOD: An Overloaded Developer",
  "link": "https://thedailywtf.com/articles/an-overloaded-developer",
  "description": "\"Oh, I see what you mean, I'll just write an overloaded function which takes the different set of parameters,\" said the senior dev. That got SB's attention. You see, they were writing JavaScript, which doesn't have function overloading. \"Um,\" SB said, \"you're going to do what?\" \"Function overloading,\" the senior dev said. \"It's when you write multiple versions of the same method with different signatures-\" \"I know what it is,\" SB said. \"I'm just wondering how you're going to do that in JavaScript.\" \"Ah,\" the senior dev said with all the senior dev wisdom in the world. \"It's a popular misconception that function overloading isn't allowed in JavaScript. See this?\" function addMarker(lat,lng,title,desc,pic,link,linktext,cat,icontype) { addMarker(lat,lng,title,desc,pic,link,linktext,cat,icontype,false); } function addMarker(lat,lng,title,desc,pic,link,linktext,cat,icontype,external) { /* preparation code */ if (external){ /* glue code */ } else { /* other glue code */ } } This, in fact, did not overload the function. This first created a version of addMarker which called itself with the wrong number of parameters. It then replaced that definition with a new one that actually did the work. That it worked at all was a delightful coincidence- when you call a JavaScript function with too few parameters, it just defaults the remainders to null, and null is falsy. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Tue, 15 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1711,
  "excerpt": "\"Oh, I see what you mean, I'll just write an overloaded function which takes the different set of parameters,\" said the senior dev. That got SB's attention. You see, they were writing JavaScript, which doesn't have function overloading. \"Um,\" SB said, \"you're going to do what?\"",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-10-15 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. \"Oh, I see what you mean, I'll just write an overloaded function which takes the different set of parameters,\" said the senior dev. That got SB's attention. You see, they were writing JavaScript, which doesn't have function overloading. \"Um,\" SB said, \"you're going to do what?\" \"Function overloading,\" the senior dev said. \"It's when you write multiple versions of the same method with different signatures-\" \"I know what it is,\" SB said. \"I'm just wondering how you're going to do that in JavaScript.\" \"Ah,\" the senior dev said with all the senior dev wisdom in the world. \"It's a popular misconception that function overloading isn't allowed in JavaScript. See this?\" function addMarker(lat,lng,title,desc,pic,link,linktext,cat,icontype) { addMarker(lat,lng,title,desc,pic,link,linktext,cat,icontype,false); } function addMarker(lat,lng,title,desc,pic,link,linktext,cat,icontype,external) { /* preparation code */ if (external){ /* glue code */ } else { /* other glue code */ } } This, in fact, did not overload the function. This first created a version of addMarker which called itself with the wrong number of parameters. It then replaced that definition with a new one that actually did the work. That it worked at all was a delightful coincidence- when you call a JavaScript function with too few parameters, it just defaults the remainders to null, and null is falsy.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-10-15\"\u003e2024-10-15\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10760\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u0026#34;Oh, I see what you mean, I\u0026#39;ll just write an overloaded function which takes the different set of parameters,\u0026#34; said the senior dev.\u003c/p\u003e\n\u003cp\u003eThat got \u003cstrong\u003eSB\u003c/strong\u003e\u0026#39;s attention. You see, they were writing JavaScript, which doesn\u0026#39;t have function overloading. \u0026#34;Um,\u0026#34; SB said, \u0026#34;you\u0026#39;re going to do \u003cem\u003ewhat\u003c/em\u003e?\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u0026#34;Function overloading,\u0026#34; the senior dev said. \u0026#34;It\u0026#39;s when you write multiple versions of the same method with different signatures-\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u0026#34;I know what it is,\u0026#34; SB said. \u0026#34;I\u0026#39;m just wondering \u003cem\u003ehow\u003c/em\u003e you\u0026#39;re going to do that in JavaScript.\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u0026#34;Ah,\u0026#34; the senior dev said with all the senior dev wisdom in the world. \u0026#34;It\u0026#39;s a popular misconception that function overloading isn\u0026#39;t allowed in JavaScript. See this?\u0026#34;\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eaddMarker\u003c/span\u003e(\u003cspan\u003elat,lng,title,desc,pic,link,linktext,cat,icontype\u003c/span\u003e) {\n         \u003cspan\u003eaddMarker\u003c/span\u003e(lat,lng,title,desc,pic,link,linktext,cat,icontype,\u003cspan\u003efalse\u003c/span\u003e);\n}\n               \n\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eaddMarker\u003c/span\u003e(\u003cspan\u003elat,lng,title,desc,pic,link,linktext,cat,icontype,external\u003c/span\u003e) {       \n    \u003cspan\u003e/* preparation code */\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e (external){             \n        \u003cspan\u003e/* glue code */\u003c/span\u003e\n    } \u003cspan\u003eelse\u003c/span\u003e {\n        \u003cspan\u003e/* other glue code */\u003c/span\u003e\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis, in fact, did \u003cem\u003enot\u003c/em\u003e overload the function. This first created a version of \u003ccode\u003eaddMarker\u003c/code\u003e which called itself with the wrong number of parameters. It then replaced that definition with a new one that actually did the work. That it worked at all was a delightful coincidence- when you call a JavaScript function with too few parameters, it just defaults the remainders to \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003enull\u003c/code\u003e is falsy.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-10-15T06:30:00Z",
  "modifiedTime": null
}
