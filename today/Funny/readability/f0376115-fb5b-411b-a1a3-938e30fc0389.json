{
  "id": "f0376115-fb5b-411b-a1a3-938e30fc0389",
  "title": "Representative Line: One More Parameter, Bro",
  "link": "https://thedailywtf.com/articles/one-more-parameter-bro",
  "description": "Matt needed to add a new field to a form. This simple task was made complicated by the method used to save changes back to the database. Let's see if you can spot what the challenge was: public int saveQualif(String docClass, String transcomId, String cptyCod, String tradeId, String originalDealId, String codeEvent, String multiDeal, String foNumber, String codeInstrfamily, String terminationDate, String premiumAmount, String premiumCurrency, String notionalAmount, String codeCurrency, String notionalAmount2, String codeCurrency2, String fixedRate, String payout, String maType, String maDate, String isdaZoneCode, String tradeDate, String externalReference, String entityCode, String investigationFileReference, String investigationFileStartDate, String productType, String effectiveDate, String expiryDate, String paymentDate, String settInstrucTyp, String opDirection, String pdfPassword, String extlSysCod, String extlDeaId, String agrDt) throws TechnicalException, DfException That's 36 parameters right there. This function, internally, creates a data access object which takes just as many parameters in its constructor, and then does a check: if a field is non-null, it updates that field in the database, otherwise it doesn't. Of course, every single one of those parameters is stringly typed, which makes it super fun. Tracking premiumAmount and terminationDate as strings is certainly never going to lead to problems. I especially like the pdfPassword being stored, which is clearly just the low-security password meant to be used for encrypting a transaction statement or similar: \"the last 4 digits of your SSN\" or whatever. So I guess it's okay that it's being stored in the clear in the database, but also I still hate it. Do better! In any case, this function was called twice. Once from the form that Matt was editing, where every parameter was filled in. The second time, it was called like this: int nbUpdates = incoming.saveQualif(docClass, null, null, null, null, null, multiDeal, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null); As tempted as Matt was to fix this method and break it up into multiple calls or change the parameters to a set of classes or anything better, he was too concerned about breaking something and spending a lot of time on something which was meant to be a small, fast task. So like everyone who'd come before him, he just slapped in another parameter, tested it, and called it a day. Refactoring is a problem for tomorrow's developer. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Thu, 07 Nov 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Representative Line"
  ],
  "byline": "Remy Porter",
  "length": 2874,
  "excerpt": "Matt needed to add a new field to a form. This simple task was made complicated by the method used to save changes back to the database. Let's see if you can spot what the challenge was: public int saveQualif(String docClass, String transcomId, String cptyCod, String tradeId, String originalDealId, String codeEvent, String multiDeal, String foNumber, String codeInstrfamily, String terminationDate, String premiumAmount, String premiumCurrency, String notionalAmount, String codeCurrency, String notionalAmount2, String codeCurrency2, String fixedRate, String payout, String maType, String maDate, String isdaZoneCode, String tradeDate, String externalReference, String entityCode, String investigationFileReference, String investigationFileStartDate, String productType, String effectiveDate, String expiryDate, String paymentDate, String settInstrucTyp, String opDirection, String pdfPassword, String extlSysCod, String extlDeaId, String agrDt) throws TechnicalException, DfException",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Matt needed to add a new field to a form. This simple task was made complicated by the method used to save changes back to the database. Let's see if you can spot what the challenge was: public int saveQualif(String docClass, String transcomId, String cptyCod, String tradeId, String originalDealId, String codeEvent, String multiDeal, String foNumber, String codeInstrfamily, String terminationDate, String premiumAmount, String premiumCurrency, String notionalAmount, String codeCurrency, String notionalAmount2, String codeCurrency2, String fixedRate, String payout, String maType, String maDate, String isdaZoneCode, String tradeDate, String externalReference, String entityCode, String investigationFileReference, String investigationFileStartDate, String productType, String effectiveDate, String expiryDate, String paymentDate, String settInstrucTyp, String opDirection, String pdfPassword, String extlSysCod, String extlDeaId, String agrDt) throws TechnicalException, DfException That's 36 parameters right there. This function, internally, creates a data access object which takes just as many parameters in its constructor, and then does a check: if a field is non-null, it updates that field in the database, otherwise it doesn't. Of course, every single one of those parameters is stringly typed, which makes it super fun. Tracking premiumAmount and terminationDate as strings is certainly never going to lead to problems. I especially like the pdfPassword being stored, which is clearly just the low-security password meant to be used for encrypting a transaction statement or similar: \"the last 4 digits of your SSN\" or whatever. So I guess it's okay that it's being stored in the clear in the database, but also I still hate it. Do better! In any case, this function was called twice. Once from the form that Matt was editing, where every parameter was filled in. The second time, it was called like this: int nbUpdates = incoming.saveQualif(docClass, null, null, null, null, null, multiDeal, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null); As tempted as Matt was to fix this method and break it up into multiple calls or change the parameters to a set of classes or anything better, he was too concerned about breaking something and spending a lot of time on something which was meant to be a small, fast task. So like everyone who'd come before him, he just slapped in another parameter, tested it, and called it a day. Refactoring is a problem for tomorrow's developer. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eMatt\u003c/strong\u003e needed to add a new field to a form. This simple task was made complicated by the method used to save changes back to the database. Let\u0026#39;s see if you can spot what the challenge was:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003esaveQualif\u003c/span\u003e\u003cspan\u003e(String docClass, String transcomId, String cptyCod, String tradeId, String originalDealId, String codeEvent, String multiDeal,\n            String foNumber, String codeInstrfamily, String terminationDate, String premiumAmount, String premiumCurrency, String notionalAmount,\n            String codeCurrency, String notionalAmount2, String codeCurrency2, String fixedRate, String payout, String maType, String maDate,\n            String isdaZoneCode, String tradeDate, String externalReference, String entityCode, String investigationFileReference,\n            String investigationFileStartDate, String productType, String effectiveDate, String expiryDate, String paymentDate, String settInstrucTyp,\n            String opDirection, String pdfPassword, String extlSysCod, String extlDeaId, String agrDt)\u003c/span\u003e \u003cspan\u003ethrows\u003c/span\u003e TechnicalException, DfException\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat\u0026#39;s \u003cem\u003e36\u003c/em\u003e parameters right there. This function, internally, creates a data access object which takes just as many parameters in its constructor, and then does a check: if a field is non-null, it updates that field in the database, otherwise it doesn\u0026#39;t.\u003c/p\u003e\n\u003cp\u003eOf course, every single one of those parameters is stringly typed, which makes it super fun. Tracking \u003ccode\u003epremiumAmount\u003c/code\u003e and \u003ccode\u003eterminationDate\u003c/code\u003e as strings is certainly never going to lead to problems. I especially like the \u003ccode\u003epdfPassword\u003c/code\u003e being stored, which is clearly just the low-security password meant to be used for encrypting a transaction statement or similar: \u0026#34;the last 4 digits of your SSN\u0026#34; or whatever. So I guess it\u0026#39;s \u003cem\u003eokay\u003c/em\u003e that it\u0026#39;s being stored in the clear in the database, but also I still hate it. Do better!\u003c/p\u003e\n\u003cp\u003eIn any case, this function was called twice. Once from the form that Matt was editing, where every parameter was filled in. The second time, it was called like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eint\u003c/span\u003e \u003cspan\u003enbUpdates\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e incoming.saveQualif(docClass, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, multiDeal, \u003cspan\u003enull\u003c/span\u003e,\n                \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e,\n                \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e, \u003cspan\u003enull\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs tempted as Matt was to fix this method and break it up into multiple calls or change the parameters to a set of classes or \u003cem\u003eanything\u003c/em\u003e better, he was too concerned about breaking something and spending a lot of time on something which was meant to be a small, fast task. So like everyone who\u0026#39;d come before him, he just slapped in another parameter, tested it, and called it a day.\u003c/p\u003e\n\u003cp\u003eRefactoring is a problem for tomorrow\u0026#39;s developer.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-11-07T06:30:00Z",
  "modifiedTime": null
}
