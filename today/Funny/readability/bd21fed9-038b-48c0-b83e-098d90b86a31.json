{
  "id": "bd21fed9-038b-48c0-b83e-098d90b86a31",
  "title": "CodeSOD: A Jammed Up Session",
  "link": "https://thedailywtf.com/articles/a-jammed-up-session",
  "description": "Andre has inherited a rather antique ASP .Net WebForms application. It's a large one, with many pages in it, but they all follow a certain pattern. Let's see if you can spot it. protected void btnSearch_Click(object sender, EventArgs e) { ArrayList paramsRel = new ArrayList(); paramsRel[\"Name\"] = txtNome.Text; paramsRel[\"Date\"] = txtDate.Text; Session[\"paramsRel\"] = paramsRel; List clients = Controller.FindClients(); //Some other code } Now, at first glance, this doesn't look terrible. Using an ArrayList as a dictionary and frankly, storing a dictionary in the Session object is weird, but it's not an automatic red flag. But wait, why is it called paramsRel? They couldn't be… no, they wouldn't… public List FindClients() { ArrayList paramsRel = (ArrayList)Session[\"paramsRel\"]; string name = (string)paramsRel[\"Name\"]; string dateStr = (string)paramsRel[\"Date\"]; DateTime date = DateTime.Parse(dateStr); //More code... } Now there's the red flag. paramsRel is how they pass parameters to functions. They stuff it into the Session, then call a function which retrieves it from that Session. This pattern is used everywhere in the application. You can see that there's a vague gesture in the direction of trying to implement some kind of Model-View-Controller pattern (as FindClients is a member of the Controller object), but that modularization gets undercut by everything depending on Session as a pseudoglobal for passing state information around. The only good news is that the Session object is synchronized so there's no thread safety issue here, though not for want of trying. .comment { border: none; } [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "author": "Remy Porter",
  "published": "Thu, 15 May 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2197,
  "excerpt": "Andre has inherited a rather antique ASP .Net WebForms application. It's a large one, with many pages in it, but they all follow a certain pattern. Let's see if you can spot it. protected void btnSearch_Click(object sender, EventArgs e) { ArrayList paramsRel = new ArrayList(); paramsRel[\"Name\"] = txtNome.Text; paramsRel[\"Date\"] = txtDate.Text; Session[\"paramsRel\"] = paramsRel; List\u003cClient\u003e clients = Controller.FindClients(); //Some other code }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-05-15 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Andre has inherited a rather antique ASP .Net WebForms application. It's a large one, with many pages in it, but they all follow a certain pattern. Let's see if you can spot it. protected void btnSearch_Click(object sender, EventArgs e) { ArrayList paramsRel = new ArrayList(); paramsRel[\"Name\"] = txtNome.Text; paramsRel[\"Date\"] = txtDate.Text; Session[\"paramsRel\"] = paramsRel; List\u003cClient\u003e clients = Controller.FindClients(); //Some other code } Now, at first glance, this doesn't look terrible. Using an ArrayList as a dictionary and frankly, storing a dictionary in the Session object is weird, but it's not an automatic red flag. But wait, why is it called paramsRel? They couldn't be… no, they wouldn't… public List\u003cClient\u003e FindClients() { ArrayList paramsRel = (ArrayList)Session[\"paramsRel\"]; string name = (string)paramsRel[\"Name\"]; string dateStr = (string)paramsRel[\"Date\"]; DateTime date = DateTime.Parse(dateStr); //More code... } Now there's the red flag. paramsRel is how they pass parameters to functions. They stuff it into the Session, then call a function which retrieves it from that Session. This pattern is used everywhere in the application. You can see that there's a vague gesture in the direction of trying to implement some kind of Model-View-Controller pattern (as FindClients is a member of the Controller object), but that modularization gets undercut by everything depending on Session as a pseudoglobal for passing state information around. The only good news is that the Session object is synchronized so there's no thread safety issue here, though not for want of trying. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-05-15\"\u003e2025-05-15\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10914\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eAndre\u003c/strong\u003e has inherited a rather antique ASP .Net WebForms application. It\u0026#39;s a large one, with many pages in it, but they all follow a certain pattern. Let\u0026#39;s see if you can spot it.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eprotected\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003ebtnSearch_Click\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003eobject\u003c/span\u003e sender, EventArgs e\u003c/span\u003e)\u003c/span\u003e\n{\n    ArrayList paramsRel = \u003cspan\u003enew\u003c/span\u003e ArrayList();\n    paramsRel[\u003cspan\u003e\u0026#34;Name\u0026#34;\u003c/span\u003e] = txtNome.Text;\n    paramsRel[\u003cspan\u003e\u0026#34;Date\u0026#34;\u003c/span\u003e] = txtDate.Text;\n    Session[\u003cspan\u003e\u0026#34;paramsRel\u0026#34;\u003c/span\u003e] = paramsRel;\n   \n    List\u0026lt;Client\u0026gt; clients = Controller.FindClients();\n    \u003cspan\u003e//Some other code\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, at first glance, this doesn\u0026#39;t look terrible. Using an \u003ccode\u003eArrayList\u003c/code\u003e as a dictionary and frankly, \u003cem\u003estoring\u003c/em\u003e a dictionary in the \u003ccode\u003eSession\u003c/code\u003e object is weird, but it\u0026#39;s not an automatic red flag. But wait, why is it called \u003ccode\u003eparamsRel\u003c/code\u003e? They couldn\u0026#39;t be… no, they wouldn\u0026#39;t…\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e List\u0026lt;Client\u0026gt; \u003cspan\u003eFindClients\u003c/span\u003e()\u003c/span\u003e\n{\n    ArrayList paramsRel = (ArrayList)Session[\u003cspan\u003e\u0026#34;paramsRel\u0026#34;\u003c/span\u003e];\n    \u003cspan\u003estring\u003c/span\u003e name = (\u003cspan\u003estring\u003c/span\u003e)paramsRel[\u003cspan\u003e\u0026#34;Name\u0026#34;\u003c/span\u003e];\n    \u003cspan\u003estring\u003c/span\u003e dateStr = (\u003cspan\u003estring\u003c/span\u003e)paramsRel[\u003cspan\u003e\u0026#34;Date\u0026#34;\u003c/span\u003e];\n    DateTime date = DateTime.Parse(dateStr);\n   \n   \u003cspan\u003e//More code...\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow \u003cem\u003ethere\u0026#39;s\u003c/em\u003e the red flag. \u003ccode\u003eparamsRel\u003c/code\u003e is how they pass parameters to functions. They stuff it into the \u003ccode\u003eSession\u003c/code\u003e, then call a function which retrieves it from that \u003ccode\u003eSession\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis pattern is used \u003cem\u003eeverywhere\u003c/em\u003e in the application. You can see that there\u0026#39;s a vague gesture in the direction of trying to implement some kind of Model-View-Controller pattern (as \u003ccode\u003eFindClients\u003c/code\u003e is a member of the \u003ccode\u003eController\u003c/code\u003e object), but that modularization gets undercut by everything depending on \u003ccode\u003eSession\u003c/code\u003e as a pseudoglobal for passing state information around.\u003c/p\u003e\n\u003cp\u003eThe only good news is that the \u003ccode\u003eSession\u003c/code\u003e object is synchronized so there\u0026#39;s no thread safety issue here, though not for want of trying.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.\u003ca href=\"https://inedo.com/proget?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-05-15T06:30:00Z",
  "modifiedTime": null
}
