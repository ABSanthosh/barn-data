{
  "id": "d7f32043-4a85-4409-a92c-516f7e3ae893",
  "title": "Representative Line: Try to Catch This",
  "link": "https://thedailywtf.com/articles/try-to-catch-this",
  "description": "The power of exception handling is that it allows every layer in our stack be notified of an error condition, do something about it, and pass it on if necessary. For example, if you have a data access layer and a query fails, you may catch the exception and potentially retry there, only passing the exception up the stack after a few failures. Or, you may fail to connect, updates some internal status variables to represent that you're in an invalid state, and then pass that exception up the stack. There are other options one might use for propagating errors, but many languages use structure exception handling. Which brings us to today's anonymous submission, which is more of a representative comment than a representative line. This was in the public interface to the data access layer in a project: // error handling for this class occurs in the functions that call them.. This comment is half true. It's true in that the data access layer doesn't do a single bit of exception handling. It's false, in that the functions which call them also don't do any exception handling, unless you count \"letting the exception bubble to the top of the stack and cause the program to fail\" as \"exception handling\". There wasn't a single try/catch in the entire project. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Mon, 07 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Representative Line"
  ],
  "byline": "Remy Porter",
  "length": 1667,
  "excerpt": "The power of exception handling is that it allows every layer in our stack be notified of an error condition, do something about it, and pass it on if necessary. For example, if you have a data access layer and a query fails, you may catch the exception and potentially retry there, only passing the exception up the stack after a few failures. Or, you may fail to connect, updates some internal status variables to represent that you're in an invalid state, and then pass that exception up the stack.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Representative Line on 2024-10-07 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. The power of exception handling is that it allows every layer in our stack be notified of an error condition, do something about it, and pass it on if necessary. For example, if you have a data access layer and a query fails, you may catch the exception and potentially retry there, only passing the exception up the stack after a few failures. Or, you may fail to connect, updates some internal status variables to represent that you're in an invalid state, and then pass that exception up the stack. There are other options one might use for propagating errors, but many languages use structure exception handling. Which brings us to today's anonymous submission, which is more of a representative comment than a representative line. This was in the public interface to the data access layer in a project: // error handling for this class occurs in the functions that call them.. This comment is half true. It's true in that the data access layer doesn't do a single bit of exception handling. It's false, in that the functions which call them also don't do any exception handling, unless you count \"letting the exception bubble to the top of the stack and cause the program to fail\" as \"exception handling\". There wasn't a single try/catch in the entire project. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/representative-line\"\u003eRepresentative Line\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-10-07\"\u003e2024-10-07\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10753\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eThe power of exception handling is that it allows every layer in our stack be notified of an error condition, do something about it, and pass it on if necessary.\u003c/p\u003e\n\u003cp\u003eFor example, if you have a data access layer and a query fails, you may catch the exception and potentially retry there, only passing the exception up the stack after a few failures. Or, you may fail to connect, updates some internal status variables to represent that you\u0026#39;re in an invalid state, and then pass that exception up the stack.\u003c/p\u003e\n\u003cp\u003eThere are \u003cem\u003eother\u003c/em\u003e options one might use for propagating errors, but many languages use structure exception handling.\u003c/p\u003e\n\u003cp\u003eWhich brings us to today\u0026#39;s anonymous submission, which is more of a representative comment than a representative line. This was in the public interface to the data access layer in a project:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// error handling for this class occurs in the functions that call them..\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis comment is half true. It\u0026#39;s true in that the data access layer doesn\u0026#39;t do a single bit of exception handling. It\u0026#39;s false, in that the functions which call them \u003cem\u003ealso\u003c/em\u003e don\u0026#39;t do any exception handling, unless you count \u0026#34;letting the exception bubble to the top of the stack and cause the program to fail\u0026#34; as \u0026#34;exception handling\u0026#34;.\u003c/p\u003e\n\u003cp\u003eThere wasn\u0026#39;t a single try/catch in the entire project.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-10-07T06:30:00Z",
  "modifiedTime": null
}
