{
  "id": "af7b3279-425e-4bed-8428-6326645df14a",
  "title": "CodeSOD: The Mask Service",
  "link": "https://thedailywtf.com/articles/the-mask-service",
  "description": "Gretchen saw this line in the front-end code for their website and freaked out: let bucket = new AWS.S3({ params: { Bucket: 'initech-logos' } }); This appeared to be creating an object to interact with an Amazon S3 bucket on the client side. Which implied that tokens for interacting with S3 were available to anyone with a web browser. Fortunately, Gretchen quickly realized that this line was commented out. They were not hosting publicly available admin credentials on their website anymore. .comment { border: none; } They used to, however, and the comments in the code made this a bit more clear: // inside an angular component: uploadImage(): void { const uniqueName = `${this.utils.generateUUID()}_${this.encrDecSrvc.getObject(AppConstants.companyID)}_${this.file.name}` /*; @note: Disable usage of aws credential, transfer flow to the backend. @note; @disable-aws-credential */ /*; AWS.config.region = 'us-east-1' let bucket = new AWS.S3({ params: { Bucket: 'initech-billinglogos' } }); */ const bucket = ( AWSBucketMask ); const params = { Bucket: 'initech-logos', Key: 'userprofilepic/' + uniqueName, ACL: \"public-read\", Body: this.file }; const self = this; bucket.upload( params, function (err, data) { if (err) { console.log(\"error while saving file on s3 server\", err); return; } self.isImageUrl = true; self.imageUrl = data.Location; self.myProfileForm.controls['ProfilePic'].setValue(self.imageUrl); self.encrDecSrvc.addObject(AppConstants.imageUrl, self.imageUrl); self.initechAPISrvc.fireImageView(true); self.saveProfileData(); self.fileUpload.clear() }, self.APISrvc ); } Boy, this makes me wonder what that AWSBucketMask object is, and what its upload function does. export class AWSBucketMask { public static async upload( option, callback, service ){ const fileReader = new FileReader( ); fileReader.onloadend = ( ( ) =\u003e { const dataURI = ( `${ fileReader.result }` ); const [ entityType, mimeType, baseType, data ] = ( dataURI.split( /[\\:\\;\\,]/ ) ); option.ContentEncoding = baseType; option.ContentType = mimeType; option.Body = data; service.awsBucketMaskUpload( option ) .subscribe( function( responseData ){ callback( null, responseData.data ); }, function( error ){ callback( error ); } ); } ); fileReader.readAsDataURL( option.Body ); } public static async deleteObject( option, callback, service ){ service.awsBucketMaskDeleteObject( option ) .subscribe( function( responseData ){ callback( null, responseData ); }, function( error ){ callback( error ); } ); } public static async deleteObjects( option, callback, service ){ service.awsBucketMaskDeleteObjects( option ) .subscribe( function( responseData ){ callback( null, responseData ); }, function( error ){ callback( error ); } ); } public static async getSignedUrl( namespace, option, callback, service ){ service.awsBucketMaskGetSignedUrl( namespace, option ) .subscribe( function( responseData ){ callback(null, responseData.data); }, function( error ){ callback( error ); } ); } } The important thing to notice here is that each of the methods here invokes a web service service.awsBucketMaskUpload, for example. Given that nothing actually checks their return values and it's all handled through callback hell, this is a clear example of async pollution- methods being marked async without understanding what async is supposed to do. But that's not the real WTF. You may notice that these calls back to the webservice are pretty thin. You see, here's the problem: originally, they just bundled the S3 into the client-side, so the client-side code could do basically anything it wanted to in S3. Adding a service to \"mask\" that behavior would have potentially meant doing a lot of refactoring, so instead they made the service just a dumb proxy. Anything you want to do on S3, the service does for you. It does no authentication. It does no authorization. It runs with the admin keys, so if you can imagine a request you want to send it, you can send it that request. But at least the client doesn't have access to the admin keys any more. This is an accounting application, so some of the things stored in S3 are confidential financial information. Gretchen writes: We have to take cybersecurity courses every 3 months, but it seems like this has no effect on the capabilities of my fellow coworkers. You can lead a programmer to education, but you can't make them think. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "author": "Remy Porter",
  "published": "Tue, 18 Feb 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 5056,
  "excerpt": "Gretchen saw this line in the front-end code for their website and freaked out: let bucket = new AWS.S3({ params: { Bucket: 'initech-logos' } });",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Gretchen saw this line in the front-end code for their website and freaked out: let bucket = new AWS.S3({ params: { Bucket: 'initech-logos' } }); This appeared to be creating an object to interact with an Amazon S3 bucket on the client side. Which implied that tokens for interacting with S3 were available to anyone with a web browser. Fortunately, Gretchen quickly realized that this line was commented out. They were not hosting publicly available admin credentials on their website anymore. They used to, however, and the comments in the code made this a bit more clear: // inside an angular component: uploadImage(): void { const uniqueName = `${this.utils.generateUUID()}_${this.encrDecSrvc.getObject(AppConstants.companyID)}_${this.file.name}` /*; @note: Disable usage of aws credential, transfer flow to the backend. @note; @disable-aws-credential */ /*; AWS.config.region = 'us-east-1' let bucket = new AWS.S3({ params: { Bucket: 'initech-billinglogos' } }); */ const bucket = ( AWSBucketMask ); const params = { Bucket: 'initech-logos', Key: 'userprofilepic/' + uniqueName, ACL: \"public-read\", Body: this.file }; const self = this; bucket.upload( params, function (err, data) { if (err) { console.log(\"error while saving file on s3 server\", err); return; } self.isImageUrl = true; self.imageUrl = data.Location; self.myProfileForm.controls['ProfilePic'].setValue(self.imageUrl); self.encrDecSrvc.addObject(AppConstants.imageUrl, self.imageUrl); self.initechAPISrvc.fireImageView(true); self.saveProfileData(); self.fileUpload.clear() }, self.APISrvc ); } Boy, this makes me wonder what that AWSBucketMask object is, and what its upload function does. export class AWSBucketMask { public static async upload( option, callback, service ){ const fileReader = new FileReader( ); fileReader.onloadend = ( ( ) =\u003e { const dataURI = ( `${ fileReader.result }` ); const [ entityType, mimeType, baseType, data ] = ( dataURI.split( /[\\:\\;\\,]/ ) ); option.ContentEncoding = baseType; option.ContentType = mimeType; option.Body = data; service.awsBucketMaskUpload( option ) .subscribe( function( responseData ){ callback( null, responseData.data ); }, function( error ){ callback( error ); } ); } ); fileReader.readAsDataURL( option.Body ); } public static async deleteObject( option, callback, service ){ service.awsBucketMaskDeleteObject( option ) .subscribe( function( responseData ){ callback( null, responseData ); }, function( error ){ callback( error ); } ); } public static async deleteObjects( option, callback, service ){ service.awsBucketMaskDeleteObjects( option ) .subscribe( function( responseData ){ callback( null, responseData ); }, function( error ){ callback( error ); } ); } public static async getSignedUrl( namespace, option, callback, service ){ service.awsBucketMaskGetSignedUrl( namespace, option ) .subscribe( function( responseData ){ callback(null, responseData.data); }, function( error ){ callback( error ); } ); } } The important thing to notice here is that each of the methods here invokes a web service service.awsBucketMaskUpload, for example. Given that nothing actually checks their return values and it's all handled through callback hell, this is a clear example of async pollution- methods being marked async without understanding what async is supposed to do. But that's not the real WTF. You may notice that these calls back to the webservice are pretty thin. You see, here's the problem: originally, they just bundled the S3 into the client-side, so the client-side code could do basically anything it wanted to in S3. Adding a service to \"mask\" that behavior would have potentially meant doing a lot of refactoring, so instead they made the service just a dumb proxy. Anything you want to do on S3, the service does for you. It does no authentication. It does no authorization. It runs with the admin keys, so if you can imagine a request you want to send it, you can send it that request. But at least the client doesn't have access to the admin keys any more. This is an accounting application, so some of the things stored in S3 are confidential financial information. Gretchen writes: We have to take cybersecurity courses every 3 months, but it seems like this has no effect on the capabilities of my fellow coworkers. You can lead a programmer to education, but you can't make them think. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eGretchen\u003c/strong\u003e saw this line in the front-end code for their website and freaked out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003elet\u003c/span\u003e bucket = \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eAWS\u003c/span\u003e.\u003cspan\u003eS3\u003c/span\u003e({ \u003cspan\u003eparams\u003c/span\u003e: { \u003cspan\u003eBucket\u003c/span\u003e: \u003cspan\u003e\u0026#39;initech-logos\u0026#39;\u003c/span\u003e } });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis appeared to be creating an object to interact with an Amazon S3 bucket \u003cem\u003eon the client side\u003c/em\u003e. Which implied that tokens for interacting with S3 were available to anyone with a web browser.\u003c/p\u003e\n\u003cp\u003eFortunately, Gretchen quickly realized that this line was commented out. They were not hosting publicly available admin credentials on their website \u003cem\u003eanymore\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eThey used to, however, and the comments in the code made this a bit more clear:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// inside an angular component:\u003c/span\u003e\n\u003cspan\u003euploadImage\u003c/span\u003e(): \u003cspan\u003evoid\u003c/span\u003e {\n  \u003cspan\u003econst\u003c/span\u003e uniqueName = \u003cspan\u003e`\u003cspan\u003e${\u003cspan\u003ethis\u003c/span\u003e.utils.generateUUID()}\u003c/span\u003e_\u003cspan\u003e${\u003cspan\u003ethis\u003c/span\u003e.encrDecSrvc.getObject(AppConstants.companyID)}\u003c/span\u003e_\u003cspan\u003e${\u003cspan\u003ethis\u003c/span\u003e.file.name}\u003c/span\u003e`\u003c/span\u003e\n  \u003cspan\u003e/*;\n    @note:\n      Disable usage of aws credential, transfer flow to the backend.\n    @note;\n\n    @disable-aws-credential\n  */\u003c/span\u003e\n  \u003cspan\u003e/*;\n  AWS.config.region = \u0026#39;us-east-1\u0026#39;\n  let bucket = new AWS.S3({ params: { Bucket: \u0026#39;initech-billinglogos\u0026#39; } });\n  */\u003c/span\u003e\n  \u003cspan\u003econst\u003c/span\u003e bucket = (\n    \u003cspan\u003eAWSBucketMask\u003c/span\u003e\n  );\n\n  \u003cspan\u003econst\u003c/span\u003e params = { \u003cspan\u003eBucket\u003c/span\u003e: \u003cspan\u003e\u0026#39;initech-logos\u0026#39;\u003c/span\u003e, \u003cspan\u003eKey\u003c/span\u003e: \u003cspan\u003e\u0026#39;userprofilepic/\u0026#39;\u003c/span\u003e + uniqueName, \u003cspan\u003eACL\u003c/span\u003e: \u003cspan\u003e\u0026#34;public-read\u0026#34;\u003c/span\u003e, \u003cspan\u003eBody\u003c/span\u003e: \u003cspan\u003ethis\u003c/span\u003e.\u003cspan\u003efile\u003c/span\u003e };\n  \u003cspan\u003econst\u003c/span\u003e self = \u003cspan\u003ethis\u003c/span\u003e;\n  bucket.\u003cspan\u003eupload\u003c/span\u003e(\n    params,\n\n    \u003cspan\u003efunction\u003c/span\u003e (\u003cspan\u003eerr, data\u003c/span\u003e) {\n      \u003cspan\u003eif\u003c/span\u003e (err) {\n        \u003cspan\u003econsole\u003c/span\u003e.\u003cspan\u003elog\u003c/span\u003e(\u003cspan\u003e\u0026#34;error while saving file on s3 server\u0026#34;\u003c/span\u003e, err);\n        \u003cspan\u003ereturn\u003c/span\u003e;\n      }\n      self.\u003cspan\u003eisImageUrl\u003c/span\u003e = \u003cspan\u003etrue\u003c/span\u003e;\n      self.\u003cspan\u003eimageUrl\u003c/span\u003e = data.\u003cspan\u003eLocation\u003c/span\u003e;\n      self.\u003cspan\u003emyProfileForm\u003c/span\u003e.\u003cspan\u003econtrols\u003c/span\u003e[\u003cspan\u003e\u0026#39;ProfilePic\u0026#39;\u003c/span\u003e].\u003cspan\u003esetValue\u003c/span\u003e(self.\u003cspan\u003eimageUrl\u003c/span\u003e);\n      self.\u003cspan\u003eencrDecSrvc\u003c/span\u003e.\u003cspan\u003eaddObject\u003c/span\u003e(\u003cspan\u003eAppConstants\u003c/span\u003e.\u003cspan\u003eimageUrl\u003c/span\u003e, self.\u003cspan\u003eimageUrl\u003c/span\u003e);\n      self.\u003cspan\u003einitechAPISrvc\u003c/span\u003e.\u003cspan\u003efireImageView\u003c/span\u003e(\u003cspan\u003etrue\u003c/span\u003e);\n      self.\u003cspan\u003esaveProfileData\u003c/span\u003e();\n      self.\u003cspan\u003efileUpload\u003c/span\u003e.\u003cspan\u003eclear\u003c/span\u003e()\n    },\n\n    self.\u003cspan\u003eAPISrvc\u003c/span\u003e\n  );\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBoy, this makes me wonder what that \u003ccode\u003eAWSBucketMask\u003c/code\u003e object is, and what its \u003ccode\u003eupload\u003c/code\u003e function does.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eAWSBucketMask\u003c/span\u003e {\n  public \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003eupload\u003c/span\u003e(\u003cspan\u003e option, callback, service \u003c/span\u003e){\n    \u003cspan\u003econst\u003c/span\u003e fileReader = \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eFileReader\u003c/span\u003e( );\n\n    fileReader.\u003cspan\u003eonloadend\u003c/span\u003e = (\n      \u003cspan\u003e( ) =\u0026gt;\u003c/span\u003e {\n        \u003cspan\u003econst\u003c/span\u003e dataURI = (\n          \u003cspan\u003e`\u003cspan\u003e${ fileReader.result }\u003c/span\u003e`\u003c/span\u003e\n        );\n\n        \u003cspan\u003econst\u003c/span\u003e [ entityType, mimeType, baseType, data ] = (\n          dataURI.\u003cspan\u003esplit\u003c/span\u003e( \u003cspan\u003e/[\\:\\;\\,]/\u003c/span\u003e )\n        );\n\n        option.\u003cspan\u003eContentEncoding\u003c/span\u003e = baseType;\n        option.\u003cspan\u003eContentType\u003c/span\u003e = mimeType;\n        option.\u003cspan\u003eBody\u003c/span\u003e = data;\n\n        service.\u003cspan\u003eawsBucketMaskUpload\u003c/span\u003e( option )\n        .\u003cspan\u003esubscribe\u003c/span\u003e(\n          \u003cspan\u003efunction\u003c/span\u003e(\u003cspan\u003e responseData \u003c/span\u003e){\n            \u003cspan\u003ecallback\u003c/span\u003e( \u003cspan\u003enull\u003c/span\u003e, responseData.\u003cspan\u003edata\u003c/span\u003e );\n          },\n\n          \u003cspan\u003efunction\u003c/span\u003e(\u003cspan\u003e error \u003c/span\u003e){\n            \u003cspan\u003ecallback\u003c/span\u003e( error );\n          }\n        );\n      }\n    );\n\n    fileReader.\u003cspan\u003ereadAsDataURL\u003c/span\u003e( option.\u003cspan\u003eBody\u003c/span\u003e );\n  }\n\n  public \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003edeleteObject\u003c/span\u003e(\u003cspan\u003e option, callback, service \u003c/span\u003e){\n    service.\u003cspan\u003eawsBucketMaskDeleteObject\u003c/span\u003e( option )\n    .\u003cspan\u003esubscribe\u003c/span\u003e(\n      \u003cspan\u003efunction\u003c/span\u003e(\u003cspan\u003e responseData \u003c/span\u003e){\n        \u003cspan\u003ecallback\u003c/span\u003e( \u003cspan\u003enull\u003c/span\u003e, responseData );\n      },\n\n      \u003cspan\u003efunction\u003c/span\u003e(\u003cspan\u003e error \u003c/span\u003e){\n        \u003cspan\u003ecallback\u003c/span\u003e( error );\n      }\n    );\n  }\n\n  public \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003edeleteObjects\u003c/span\u003e(\u003cspan\u003e option, callback, service \u003c/span\u003e){\n    service.\u003cspan\u003eawsBucketMaskDeleteObjects\u003c/span\u003e( option )\n    .\u003cspan\u003esubscribe\u003c/span\u003e(\n      \u003cspan\u003efunction\u003c/span\u003e(\u003cspan\u003e responseData \u003c/span\u003e){\n        \u003cspan\u003ecallback\u003c/span\u003e( \u003cspan\u003enull\u003c/span\u003e, responseData );\n      },\n\n      \u003cspan\u003efunction\u003c/span\u003e(\u003cspan\u003e error \u003c/span\u003e){\n        \u003cspan\u003ecallback\u003c/span\u003e( error );\n      }\n    );\n  }\n\n  public \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003easync\u003c/span\u003e \u003cspan\u003egetSignedUrl\u003c/span\u003e(\u003cspan\u003e namespace, option, callback, service \u003c/span\u003e){\n    service.\u003cspan\u003eawsBucketMaskGetSignedUrl\u003c/span\u003e( namespace, option )\n    .\u003cspan\u003esubscribe\u003c/span\u003e(\n      \u003cspan\u003efunction\u003c/span\u003e(\u003cspan\u003e responseData \u003c/span\u003e){\n        \u003cspan\u003ecallback\u003c/span\u003e(\u003cspan\u003enull\u003c/span\u003e, responseData.\u003cspan\u003edata\u003c/span\u003e);\n      },\n\n      \u003cspan\u003efunction\u003c/span\u003e(\u003cspan\u003e error \u003c/span\u003e){\n        \u003cspan\u003ecallback\u003c/span\u003e( error );\n      }\n    );\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe important thing to notice here is that each of the methods here invokes a web service \u003ccode\u003eservice.awsBucketMaskUpload\u003c/code\u003e, for example. Given that nothing actually checks their return values and it\u0026#39;s all handled through callback hell, this is a clear example of \u003ccode\u003easync\u003c/code\u003e pollution- methods being marked async without understanding what async is supposed to do.\u003c/p\u003e\n\u003cp\u003eBut that\u0026#39;s not the real WTF. You may notice that these calls back to the webservice are pretty thin. You see, here\u0026#39;s the problem: originally, they just bundled the S3 into the client-side, so the client-side code could do basically anything it wanted to in S3. Adding a service to \u0026#34;mask\u0026#34; that behavior would have potentially meant doing a lot of refactoring, so instead they made the service just a dumb proxy. Anything you want to do on S3, the service does for you. It does no authentication. It does no authorization. It runs with the admin keys, so if you can imagine a request you want to send it, you can send it that request. But at least the client doesn\u0026#39;t have access to the admin keys any more.\u003c/p\u003e\n\u003cp\u003eThis is an accounting application, so some of the things stored in S3 are confidential financial information.\u003c/p\u003e\n\u003cp\u003eGretchen writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWe have to take cybersecurity courses every 3 months, but it seems like this has no effect on the capabilities of my fellow coworkers.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eYou can lead a programmer to education, but you can\u0026#39;t make them think.\u003c/p\u003e\n\u003cp\u003e\n\t[Advertisement] \u003cb\u003ePlan Your .NET 9 Migration with Confidence\u003c/b\u003e\u003cbr/\u003eYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. \u003cb\u003e\u003ca href=\"https://inedo.com/support/whitepapers/dotnet-guide?utm_campaign=dotnet\u0026amp;utm_source=tdwtf-footer\"\u003eDownload Free Guide Now!\u003c/a\u003e\u003c/b\u003e\n\u003c/p\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-02-18T06:30:00Z",
  "modifiedTime": null
}
