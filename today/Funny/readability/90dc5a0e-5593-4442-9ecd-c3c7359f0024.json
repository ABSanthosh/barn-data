{
  "id": "90dc5a0e-5593-4442-9ecd-c3c7359f0024",
  "title": "CodeSOD: Tangled Up in Foo",
  "link": "https://thedailywtf.com/articles/tangled-up-in-foo",
  "description": "DZ's tech lead is a doctor of computer science, and that doctor loves to write code. But you already know that \"PhD\" stands for \"Piled high and deep\", and that's true of the tech lead's clue. For example, in C#: private List ExtractListForId(string id) { List list = new List(); lock (this) { var items = _foos.Where(f =\u003e f.Id == id).ToList(); foreach (var item in items) { list.Add(item); } } return list; } The purpose of this function is to find all the elements in a list where they have a matching ID. That's accomplished in one line: _foo.Where(f =\u003e f.Id == id). For some reason, the function goes through the extra step of iterating across the returned list and constructing a new one. There's no real good reason for this, though it does force LINQ to be eager- by default, the Where expression won't be evaluated until you check the results. The lock is in there for thread safety, which hey- the enumerator returned by Where is not threadsafe, so that's not a useless thing to do there. But it's that lock which hints at the deeper WTF here: our PhD-having-tech-lead knows that adding threads ensures you're using more of the CPU, and they've thrown threads all over the place without any real sense to it. There's no clear data ownership of any given thread, which means everything is locked to hell and back, the whole thing frequently deadlocks, and it's impossible to debug. It's taken days for DZ to get this much of a picture of what's going on in the code, and further untangling of this multithreaded pile of spaghetti is going to take many, many more days- and much, much more of DZ's sanity. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Thu, 24 Apr 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1900,
  "excerpt": "DZ's tech lead is a doctor of computer science, and that doctor loves to write code. But you already know that \"PhD\" stands for \"Piled high and deep\", and that's true of the tech lead's clue. For example, in C#:",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-04-24 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. DZ's tech lead is a doctor of computer science, and that doctor loves to write code. But you already know that \"PhD\" stands for \"Piled high and deep\", and that's true of the tech lead's clue. For example, in C#: private List\u003cFoo\u003e ExtractListForId(string id) { List\u003cFoo\u003e list = new List\u003cFoo\u003e(); lock (this) { var items = _foos.Where(f =\u003e f.Id == id).ToList(); foreach (var item in items) { list.Add(item); } } return list; } The purpose of this function is to find all the elements in a list where they have a matching ID. That's accomplished in one line: _foo.Where(f =\u003e f.Id == id). For some reason, the function goes through the extra step of iterating across the returned list and constructing a new one. There's no real good reason for this, though it does force LINQ to be eager- by default, the Where expression won't be evaluated until you check the results. The lock is in there for thread safety, which hey- the enumerator returned by Where is not threadsafe, so that's not a useless thing to do there. But it's that lock which hints at the deeper WTF here: our PhD-having-tech-lead knows that adding threads ensures you're using more of the CPU, and they've thrown threads all over the place without any real sense to it. There's no clear data ownership of any given thread, which means everything is locked to hell and back, the whole thing frequently deadlocks, and it's impossible to debug. It's taken days for DZ to get this much of a picture of what's going on in the code, and further untangling of this multithreaded pile of spaghetti is going to take many, many more days- and much, much more of DZ's sanity.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-04-24\"\u003e2025-04-24\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10899\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eDZ\u003c/strong\u003e\u0026#39;s tech lead is a doctor of computer science, and that doctor loves to write code. But you already know that \u0026#34;PhD\u0026#34; stands for \u0026#34;Piled high and deep\u0026#34;, and that\u0026#39;s true of the tech lead\u0026#39;s clue.\u003c/p\u003e\n\u003cp\u003eFor example, in C#:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e List\u0026lt;Foo\u0026gt; \u003cspan\u003eExtractListForId\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003estring\u003c/span\u003e id\u003c/span\u003e)\u003c/span\u003e\n{\n\tList\u0026lt;Foo\u0026gt; list = \u003cspan\u003enew\u003c/span\u003e List\u0026lt;Foo\u0026gt;();\n\t\u003cspan\u003elock\u003c/span\u003e (\u003cspan\u003ethis\u003c/span\u003e)\n\t{\n\t\t\u003cspan\u003evar\u003c/span\u003e items = _foos.Where(f =\u0026gt; f.Id == id).ToList();\n\t\t\u003cspan\u003eforeach\u003c/span\u003e (\u003cspan\u003evar\u003c/span\u003e item \u003cspan\u003ein\u003c/span\u003e items)\n\t\t{\n\t\t\tlist.Add(item);\n\t\t}\n\t}\n\t\u003cspan\u003ereturn\u003c/span\u003e list;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe purpose of this function is to find all the elements in a list where they have a matching ID. That\u0026#39;s accomplished in one line: \u003ccode\u003e_foo.Where(f =\u0026gt; f.Id == id)\u003c/code\u003e. For some reason, the function goes through the extra step of iterating across the returned list and constructing a new one. There\u0026#39;s no real good reason for this, though it does force LINQ to be eager- by default, the \u003ccode\u003eWhere\u003c/code\u003e expression won\u0026#39;t be evaluated until you check the results.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003elock\u003c/code\u003e is in there for thread safety, which hey- the enumerator returned by \u003ccode\u003eWhere\u003c/code\u003e is \u003cem\u003enot\u003c/em\u003e threadsafe, so that\u0026#39;s not a useless thing to do there. But it\u0026#39;s that \u003ccode\u003elock\u003c/code\u003e which hints at the deeper WTF here: our PhD-having-tech-lead knows that adding threads ensures you\u0026#39;re using more of the CPU, and they\u0026#39;ve thrown threads all over the place without any real sense to it. There\u0026#39;s no clear data ownership of any given thread, which means everything is \u003ccode\u003elock\u003c/code\u003eed to hell and back, the whole thing frequently deadlocks, and it\u0026#39;s impossible to debug.\u003c/p\u003e\n\u003cp\u003eIt\u0026#39;s taken days for DZ to get this much of a picture of what\u0026#39;s going on in the code, and further untangling of this multithreaded pile of spaghetti is going to take many, many more days- and much, much more of DZ\u0026#39;s sanity.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-04-24T06:30:00Z",
  "modifiedTime": null
}
