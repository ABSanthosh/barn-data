{
  "id": "b6a328e8-f8f1-43b1-8e29-2d04f74cd35f",
  "title": "CodeSOD: Allowed Savings",
  "link": "https://thedailywtf.com/articles/allowed-savings",
  "description": "The CEO of Delia's company retired. They were an old hand in the industry, the kind of person who worked their way up and had an engineering background, and while the staff loved them, the shareholders were less than pleased, because the company was profitable, but not obscenely so. So the next CEO was a McKinsey-approved MBA who had one mission: cut costs. Out went the senior devs, and much of the managers. Anyone who was product or customer focused followed quickly behind. What remained were a few managers handpicked by the new CEO and a slew of junior engineers- and Pierre. Pierre was a contractor who followed the new CEO around from company to company. Pierre was there to ensure that nobody wasted any time on engineering that didn't directly impact features. Tests? Wastes of time. Module boundaries? Just slow you down. Move fast and break things, and don't worry about fixing anything because that's your successors' problem. So let's take a look at how Pierre wrote code. This block of PHP code was simply copy/pasted everywhere it needed to be used, across multiple applications. foreach($alphaCheck as $checkField) { if($paramsArray[$checkField['field']]) { if($paramsArray[$checkField['field']]) { $invalidChars = false; $checkValue = trim(strtoupper($paramsArray[$checkField['field']])); $allowedChars = explode('|',\"A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|-| |.|'\"); for($i=0; $i\u003cstrlen($checkValue); $i++) { if(!in_array($checkValue[$i],$allowedChars)) { $invalidChars = true; } } if($invalidChars) { $errorMsgs[] = $checkField['name'] . ' contains invalid characters'; } } } } This isn't the worst approach to this problem I've seen in PHP, but the fact that this is just a copy/pasted blob, and worse- the $allowedChars may vary a bit in each place it's copy/pasted is what makes it terrible. Don't worry. The new CEO only stayed for 18 months, got a huge bonus thanks to all the cost-cutting, and then left, taking Pierre along to the next company. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Wed, 26 Feb 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2554,
  "excerpt": "The CEO of Delia's company retired. They were an old hand in the industry, the kind of person who worked their way up and had an engineering background, and while the staff loved them, the shareholders were less than pleased, because the company was profitable, but not obscenely so. So the next CEO was a McKinsey-approved MBA who had one mission: cut costs. Out went the senior devs, and much of the managers. Anyone who was product or customer focused followed quickly behind. What remained were a few managers handpicked by the new CEO and a slew of junior engineers- and Pierre.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-02-26 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. The CEO of Delia's company retired. They were an old hand in the industry, the kind of person who worked their way up and had an engineering background, and while the staff loved them, the shareholders were less than pleased, because the company was profitable, but not obscenely so. So the next CEO was a McKinsey-approved MBA who had one mission: cut costs. Out went the senior devs, and much of the managers. Anyone who was product or customer focused followed quickly behind. What remained were a few managers handpicked by the new CEO and a slew of junior engineers- and Pierre. Pierre was a contractor who followed the new CEO around from company to company. Pierre was there to ensure that nobody wasted any time on engineering that didn't directly impact features. Tests? Wastes of time. Module boundaries? Just slow you down. Move fast and break things, and don't worry about fixing anything because that's your successors' problem. So let's take a look at how Pierre wrote code. This block of PHP code was simply copy/pasted everywhere it needed to be used, across multiple applications. foreach($alphaCheck as $checkField) { if($paramsArray[$checkField['field']]) { if($paramsArray[$checkField['field']]) { $invalidChars = false; $checkValue = trim(strtoupper($paramsArray[$checkField['field']])); $allowedChars = explode('|',\"A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|-| |.|'\"); for($i=0; $i\u003cstrlen($checkValue); $i++) { if(!in_array($checkValue[$i],$allowedChars)) { $invalidChars = true; } } if($invalidChars) { $errorMsgs[] = $checkField['name'] . ' contains invalid characters'; } } } } This isn't the worst approach to this problem I've seen in PHP, but the fact that this is just a copy/pasted blob, and worse- the $allowedChars may vary a bit in each place it's copy/pasted is what makes it terrible. Don't worry. The new CEO only stayed for 18 months, got a huge bonus thanks to all the cost-cutting, and then left, taking Pierre along to the next company. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-02-26\"\u003e2025-02-26\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10857\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eThe CEO of \u003cstrong\u003eDelia\u003c/strong\u003e\u0026#39;s company retired. They were an old hand in the industry, the kind of person who worked their way up and had an engineering background, and while the staff loved them, the shareholders were less than pleased, because the company was profitable, but not obscenely so. So the \u003cem\u003enext\u003c/em\u003e CEO was a McKinsey-approved MBA who had one mission: cut costs.\u003c/p\u003e\n\u003cp\u003eOut went the senior devs, and much of the managers. Anyone who was product or customer focused followed quickly behind. What remained were a few managers handpicked by the new CEO and a slew of junior engineers- and Pierre.\u003c/p\u003e\n\u003cp\u003ePierre was a contractor who followed the new CEO around from company to company. Pierre was there to ensure that nobody wasted any time on engineering that didn\u0026#39;t directly impact features. Tests? Wastes of time. Module boundaries? Just slow you down. Move fast and break things, and don\u0026#39;t worry about fixing anything because that\u0026#39;s your successors\u0026#39; problem.\u003c/p\u003e\n\u003cp\u003eSo let\u0026#39;s take a look at how Pierre wrote code. This block of PHP code was simply copy/pasted everywhere it needed to be used, across multiple applications.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eforeach\u003c/span\u003e(\u003cspan\u003e$alphaCheck\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e \u003cspan\u003e$checkField\u003c/span\u003e) {\n  \u003cspan\u003eif\u003c/span\u003e(\u003cspan\u003e$paramsArray\u003c/span\u003e[\u003cspan\u003e$checkField\u003c/span\u003e[\u003cspan\u003e\u0026#39;field\u0026#39;\u003c/span\u003e]]) {\n    \u003cspan\u003eif\u003c/span\u003e(\u003cspan\u003e$paramsArray\u003c/span\u003e[\u003cspan\u003e$checkField\u003c/span\u003e[\u003cspan\u003e\u0026#39;field\u0026#39;\u003c/span\u003e]]) {\n      \u003cspan\u003e$invalidChars\u003c/span\u003e = \u003cspan\u003efalse\u003c/span\u003e;\n      \u003cspan\u003e$checkValue\u003c/span\u003e = \u003cspan\u003etrim\u003c/span\u003e(\u003cspan\u003estrtoupper\u003c/span\u003e(\u003cspan\u003e$paramsArray\u003c/span\u003e[\u003cspan\u003e$checkField\u003c/span\u003e[\u003cspan\u003e\u0026#39;field\u0026#39;\u003c/span\u003e]]));\n      \u003cspan\u003e$allowedChars\u003c/span\u003e = \u003cspan\u003eexplode\u003c/span\u003e(\u003cspan\u003e\u0026#39;|\u0026#39;\u003c/span\u003e,\u003cspan\u003e\u0026#34;A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|-| |.|\u0026#39;\u0026#34;\u003c/span\u003e);\n      \u003cspan\u003efor\u003c/span\u003e(\u003cspan\u003e$i\u003c/span\u003e=\u003cspan\u003e0\u003c/span\u003e; \u003cspan\u003e$i\u003c/span\u003e\u0026lt;\u003cspan\u003estrlen\u003c/span\u003e(\u003cspan\u003e$checkValue\u003c/span\u003e); \u003cspan\u003e$i\u003c/span\u003e++) {\n        \u003cspan\u003eif\u003c/span\u003e(!\u003cspan\u003ein_array\u003c/span\u003e(\u003cspan\u003e$checkValue\u003c/span\u003e[\u003cspan\u003e$i\u003c/span\u003e],\u003cspan\u003e$allowedChars\u003c/span\u003e)) {\n          \u003cspan\u003e$invalidChars\u003c/span\u003e = \u003cspan\u003etrue\u003c/span\u003e;\n        }              \n      }            \n      \u003cspan\u003eif\u003c/span\u003e(\u003cspan\u003e$invalidChars\u003c/span\u003e) {\n        \u003cspan\u003e$errorMsgs\u003c/span\u003e[] = \u003cspan\u003e$checkField\u003c/span\u003e[\u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e] . \u003cspan\u003e\u0026#39; contains invalid characters\u0026#39;\u003c/span\u003e;\n      }            \n    }          \n  }        \n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis isn\u0026#39;t the worst approach to this problem I\u0026#39;ve seen in PHP, but the fact that this is just a copy/pasted blob, and worse- the \u003ccode\u003e$allowedChars\u003c/code\u003e may vary a bit in each place it\u0026#39;s copy/pasted is what makes it terrible.\u003c/p\u003e\n\u003cp\u003eDon\u0026#39;t worry. The new CEO only stayed for 18 months, got a huge bonus thanks to all the cost-cutting, and then left, taking Pierre along to the next company.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-02-26T06:30:00Z",
  "modifiedTime": null
}
