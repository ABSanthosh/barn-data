{
  "id": "a1dc33d8-b183-469d-9078-8b9cae929fe8",
  "title": "CodeSOD: JaphpaScript",
  "link": "https://thedailywtf.com/articles/japhpascript",
  "description": "Let's say you have a web application, and you need to transfer some data that exists in your backend, server-side, down to the front-end, client-side. If you're a normal person, you have the client do an HTTP request and return the data in something like a JSON format. You could certainly do that. Or, you could do what Alicia's predecessor did. \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e i; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e j; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e grpID; \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e group_Arr_\u003cspan class=\"hljs-meta\"\u003e\u003c?php\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"hljs-variable\"\u003e$varNamePrefix\u003c/span\u003e;\u003cspan class=\"hljs-meta\"\u003e?\u003e\u003c/span\u003e= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-title class_\"\u003eArray\u003c/span\u003e(); \u003cspan class=\"hljs-keyword\"\u003evar\u003c/span\u003e user_Arr_\u003cspan class=\"hljs-meta\"\u003e\u003c?php\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"hljs-variable\"\u003e$varNamePrefix\u003c/span\u003e;\u003cspan class=\"hljs-meta\"\u003e?\u003e\u003c/span\u003e= \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-title class_\"\u003eArray\u003c/span\u003e(); \u003cspan class=\"hljs-meta\"\u003e\u003c?php\u003c/span\u003e \u003cspan class=\"hljs-variable\"\u003e$i\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e; \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-title function_ invoke__\"\u003eis_array\u003c/span\u003e(\u003cspan class=\"hljs-variable\"\u003e$groupArr\u003c/span\u003e)) { \u003cspan class=\"hljs-keyword\"\u003eforeach\u003c/span\u003e(\u003cspan class=\"hljs-variable\"\u003e$groupArr\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-variable\"\u003e$groupData\u003c/span\u003e) { \u003cspan class=\"hljs-variable\"\u003e$t_groupID\u003c/span\u003e = \u003cspan class=\"hljs-variable\"\u003e$groupData\u003c/span\u003e[\u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e]; \u003cspan class=\"hljs-keyword\"\u003eif\u003c/span\u003e(\u003cspan class=\"hljs-title function_ invoke__\"\u003eis_array\u003c/span\u003e(\u003cspan class=\"hljs-variable\"\u003e$userArr\u003c/span\u003e[\u003cspan class=\"hljs-variable\"\u003e$t_groupID\u003c/span\u003e] ?? \u003cspan class=\"hljs-literal\"\u003enull\u003c/span\u003e)) { \u003cspan class=\"hljs-meta\"\u003e?\u003e\u003c/span\u003e i = \u003cspan class=\"hljs-string\"\u003e'\u003c?php echo $i; ?\u003e'\u003c/span\u003e; grpID = \u003cspan class=\"hljs-string\"\u003e'\u003c?php echo $t_groupID; ?\u003e'\u003c/span\u003e; group_Arr_\u003cspan class=\"hljs-meta\"\u003e\u003c?php\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"hljs-variable\"\u003e$varNamePrefix\u003c/span\u003e;\u003cspan class=\"hljs-meta\"\u003e?\u003e\u003c/span\u003e[i] = \u003cspan class=\"hljs-string\"\u003e'\u003c?php echo $t_groupID; ?\u003e'\u003c/span\u003e; user_Arr_\u003cspan class=\"hljs-meta\"\u003e\u003c?php\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"hljs-variable\"\u003e$varNamePrefix\u003c/span\u003e;\u003cspan class=\"hljs-meta\"\u003e?\u003e\u003c/span\u003e[grpID] = \u003cspan class=\"hljs-keyword\"\u003enew\u003c/span\u003e \u003cspan class=\"hljs-title class_\"\u003eArray\u003c/span\u003e(); \u003cspan class=\"hljs-meta\"\u003e\u003c?php\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003efor\u003c/span\u003e(\u003cspan class=\"hljs-variable\"\u003e$j\u003c/span\u003e = \u003cspan class=\"hljs-number\"\u003e0\u003c/span\u003e,\u003cspan class=\"hljs-variable\"\u003e$jMax\u003c/span\u003e = \u003cspan class=\"hljs-title function_ invoke__\"\u003ecount\u003c/span\u003e(\u003cspan class=\"hljs-variable\"\u003e$userArr\u003c/span\u003e[\u003cspan class=\"hljs-variable\"\u003e$t_groupID\u003c/span\u003e]); \u003cspan class=\"hljs-variable\"\u003e$j\u003c/span\u003e \u003c \u003cspan class=\"hljs-variable\"\u003e$jMax\u003c/span\u003e; \u003cspan class=\"hljs-variable\"\u003e$j\u003c/span\u003e++) { \u003cspan class=\"hljs-meta\"\u003e?\u003e\u003c/span\u003e j = \u003cspan class=\"hljs-string\"\u003e'\u003c?php echo $j; ?\u003e'\u003c/span\u003e; user_Arr_\u003cspan class=\"hljs-meta\"\u003e\u003c?php\u003c/span\u003e \u003cspan class=\"hljs-keyword\"\u003eecho\u003c/span\u003e \u003cspan class=\"hljs-variable\"\u003e$varNamePrefix\u003c/span\u003e;\u003cspan class=\"hljs-meta\"\u003e?\u003e\u003c/span\u003e[grpID][j] = \u003cspan class=\"hljs-string\"\u003e'\u003c?php echo $userArr[$t_groupID][$j][0]; ?\u003e'\u003c/span\u003e; \u003cspan class=\"hljs-meta\"\u003e\u003c?php\u003c/span\u003e } \u003cspan class=\"hljs-variable\"\u003e$i\u003c/span\u003e++; } } } \u003cspan class=\"hljs-meta\"\u003e?\u003e\u003c/span\u003e Here, we have PHP and JavaScript mixed together, like chocolate and peanut butter, except neither is chocolate or peanut butter and neither represents something you'd want to be eating. Here we have loop unrolling taken to a new, ridiculous extent. The loop is executed in PHP, and \"rendered\" in JavaScript, outputting a huge pile of array assignments. Worse than that, even the name of the variable is generated in PHP- group_Arr_. This pattern was used everywhere, and sometimes I wouldn't even call it a pattern- huge blocks of code were copy/pasted with minor modifications. This pile of spaghetti was, as you can imagine, difficult to understand or modify. But here's the scary part: it was remarkably bug free. The developer responsible for this had managed to do this everywhere, and it worked. Reliably. Any other developer who tried to change it ended up causing a cascade of failures that meant weeks of debugging to make what felt like should be minor changes, but in the state which ALicia inherited it, everything worked. Somehow. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. ProGet costs less than half of Artifactory and is just as good. Our easy-to-read comparison page lays out the editions, features, and pricing of the different editions of ProGet and Artifactory.Learn More.",
  "author": "Remy Porter",
  "published": "Wed, 09 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2945,
  "excerpt": "Let's say you have a web application, and you need to transfer some data that exists in your backend, server-side, down to the front-end, client-side. If you're a normal person, you have the client do an HTTP request and return the data in something like a JSON format. You could certainly do that. Or, you could do what Alicia's predecessor did.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-10-09 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Let's say you have a web application, and you need to transfer some data that exists in your backend, server-side, down to the front-end, client-side. If you're a normal person, you have the client do an HTTP request and return the data in something like a JSON format. You could certainly do that. Or, you could do what Alicia's predecessor did. \u003cscript\u003e var i; var j; var grpID; var group_Arr_\u003c?php echo $varNamePrefix;?\u003e= new Array(); var user_Arr_\u003c?php echo $varNamePrefix;?\u003e= new Array(); \u003c?php $i = 0; if(is_array($groupArr)) { foreach($groupArr as $groupData) { $t_groupID = $groupData[0]; if(is_array($userArr[$t_groupID] ?? null)) { ?\u003e i = '\u003c?php echo $i; ?\u003e'; grpID = '\u003c?php echo $t_groupID; ?\u003e'; group_Arr_\u003c?php echo $varNamePrefix;?\u003e[i] = '\u003c?php echo $t_groupID; ?\u003e'; user_Arr_\u003c?php echo $varNamePrefix;?\u003e[grpID] = new Array(); \u003c?php for($j = 0,$jMax = count($userArr[$t_groupID]); $j \u003c $jMax; $j++) { ?\u003e j = '\u003c?php echo $j; ?\u003e'; user_Arr_\u003c?php echo $varNamePrefix;?\u003e[grpID][j] = '\u003c?php echo $userArr[$t_groupID][$j][0]; ?\u003e'; \u003c?php } $i++; } } } ?\u003e \u003c/script\u003e Here, we have PHP and JavaScript mixed together, like chocolate and peanut butter, except neither is chocolate or peanut butter and neither represents something you'd want to be eating. Here we have loop unrolling taken to a new, ridiculous extent. The loop is executed in PHP, and \"rendered\" in JavaScript, outputting a huge pile of array assignments. Worse than that, even the name of the variable is generated in PHP- group_Arr_\u003c?php echo $varNamePrefix;?\u003e. This pattern was used everywhere, and sometimes I wouldn't even call it a pattern- huge blocks of code were copy/pasted with minor modifications. This pile of spaghetti was, as you can imagine, difficult to understand or modify. But here's the scary part: it was remarkably bug free. The developer responsible for this had managed to do this everywhere, and it worked. Reliably. Any other developer who tried to change it ended up causing a cascade of failures that meant weeks of debugging to make what felt like should be minor changes, but in the state which ALicia inherited it, everything worked. Somehow. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. ProGet costs less than half of Artifactory and is just as good. Our easy-to-read comparison page lays out the editions, features, and pricing of the different editions of ProGet and Artifactory.Learn More.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-10-09\"\u003e2024-10-09\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10755\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eLet\u0026#39;s say you have a web application, and you need to transfer some data that exists in your backend, server-side, down to the front-end, client-side. If you\u0026#39;re a normal person, you have the client do an HTTP request and return the data in something like a JSON format.\u003c/p\u003e\n\u003cp\u003eYou could certainly do that. Or, you could do what \u003cstrong\u003eAlicia\u003c/strong\u003e\u0026#39;s predecessor did.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;script\u0026gt;\n    \u003cspan\u003evar\u003c/span\u003e i;\n    \u003cspan\u003evar\u003c/span\u003e j;\n    \u003cspan\u003evar\u003c/span\u003e grpID;\n    \u003cspan\u003evar\u003c/span\u003e group_Arr_\u003cspan\u003e\u0026lt;?php\u003c/span\u003e \u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$varNamePrefix\u003c/span\u003e;\u003cspan\u003e?\u0026gt;\u003c/span\u003e= \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eArray\u003c/span\u003e();\n    \u003cspan\u003evar\u003c/span\u003e user_Arr_\u003cspan\u003e\u0026lt;?php\u003c/span\u003e \u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$varNamePrefix\u003c/span\u003e;\u003cspan\u003e?\u0026gt;\u003c/span\u003e= \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eArray\u003c/span\u003e();\n    \u003cspan\u003e\u0026lt;?php\u003c/span\u003e\n    \u003cspan\u003e$i\u003c/span\u003e = \u003cspan\u003e0\u003c/span\u003e;\n    \u003cspan\u003eif\u003c/span\u003e(\u003cspan\u003eis_array\u003c/span\u003e(\u003cspan\u003e$groupArr\u003c/span\u003e)) {\n        \u003cspan\u003eforeach\u003c/span\u003e(\u003cspan\u003e$groupArr\u003c/span\u003e \u003cspan\u003eas\u003c/span\u003e \u003cspan\u003e$groupData\u003c/span\u003e) {\n            \u003cspan\u003e$t_groupID\u003c/span\u003e = \u003cspan\u003e$groupData\u003c/span\u003e[\u003cspan\u003e0\u003c/span\u003e];\n            \u003cspan\u003eif\u003c/span\u003e(\u003cspan\u003eis_array\u003c/span\u003e(\u003cspan\u003e$userArr\u003c/span\u003e[\u003cspan\u003e$t_groupID\u003c/span\u003e] ?? \u003cspan\u003enull\u003c/span\u003e)) { \u003cspan\u003e?\u0026gt;\u003c/span\u003e\n                i = \u003cspan\u003e\u0026#39;\u0026lt;?php echo $i; ?\u0026gt;\u0026#39;\u003c/span\u003e;\n                grpID = \u003cspan\u003e\u0026#39;\u0026lt;?php echo $t_groupID; ?\u0026gt;\u0026#39;\u003c/span\u003e;\n                group_Arr_\u003cspan\u003e\u0026lt;?php\u003c/span\u003e \u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$varNamePrefix\u003c/span\u003e;\u003cspan\u003e?\u0026gt;\u003c/span\u003e[i] = \u003cspan\u003e\u0026#39;\u0026lt;?php echo $t_groupID; ?\u0026gt;\u0026#39;\u003c/span\u003e;\n                user_Arr_\u003cspan\u003e\u0026lt;?php\u003c/span\u003e \u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$varNamePrefix\u003c/span\u003e;\u003cspan\u003e?\u0026gt;\u003c/span\u003e[grpID] = \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eArray\u003c/span\u003e();\n                \u003cspan\u003e\u0026lt;?php\u003c/span\u003e \u003cspan\u003efor\u003c/span\u003e(\u003cspan\u003e$j\u003c/span\u003e = \u003cspan\u003e0\u003c/span\u003e,\u003cspan\u003e$jMax\u003c/span\u003e = \u003cspan\u003ecount\u003c/span\u003e(\u003cspan\u003e$userArr\u003c/span\u003e[\u003cspan\u003e$t_groupID\u003c/span\u003e]); \u003cspan\u003e$j\u003c/span\u003e \u0026lt; \u003cspan\u003e$jMax\u003c/span\u003e; \u003cspan\u003e$j\u003c/span\u003e++) { \u003cspan\u003e?\u0026gt;\u003c/span\u003e\n                    j = \u003cspan\u003e\u0026#39;\u0026lt;?php echo $j; ?\u0026gt;\u0026#39;\u003c/span\u003e;\n                    user_Arr_\u003cspan\u003e\u0026lt;?php\u003c/span\u003e \u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e$varNamePrefix\u003c/span\u003e;\u003cspan\u003e?\u0026gt;\u003c/span\u003e[grpID][j] = \u003cspan\u003e\u0026#39;\u0026lt;?php echo $userArr[$t_groupID][$j][0]; ?\u0026gt;\u0026#39;\u003c/span\u003e;\n                    \u003cspan\u003e\u0026lt;?php\u003c/span\u003e\n                }\n                \u003cspan\u003e$i\u003c/span\u003e++;\n            }\n        }\n    }\n    \u003cspan\u003e?\u0026gt;\u003c/span\u003e\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we have PHP and JavaScript mixed together, like chocolate and peanut butter, except neither is chocolate or peanut butter and neither represents something you\u0026#39;d want to be eating.\u003c/p\u003e\n\u003cp\u003eHere we have loop unrolling taken to a new, ridiculous extent. The loop is executed in PHP, and \u0026#34;rendered\u0026#34; in JavaScript, outputting a huge pile of array assignments.\u003c/p\u003e\n\u003cp\u003eWorse than that, even the \u003cem\u003ename of the variable\u003c/em\u003e is generated in PHP- \u003ccode\u003egroup_Arr_\u0026lt;?php echo $varNamePrefix;?\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis pattern was used everywhere, and sometimes I wouldn\u0026#39;t even call it a pattern- huge blocks of code were copy/pasted with minor modifications.\u003c/p\u003e\n\u003cp\u003eThis pile of spaghetti was, as you can imagine, difficult to understand or modify. But here\u0026#39;s the scary part: it was remarkably bug free. The developer responsible for this had managed to do \u003cem\u003ethis\u003c/em\u003e everywhere, and it \u003cem\u003eworked\u003c/em\u003e. Reliably. Any other developer who tried to change it ended up causing a cascade of failures that meant weeks of debugging to make what felt like should be minor changes, but in the state which ALicia inherited it, \u003cem\u003eeverything worked\u003c/em\u003e. Somehow.\u003c/p\u003e\n\u003cp\u003e\n\t[Advertisement] Picking up \u003cb\u003eNuGet\u003c/b\u003e is easy. Getting good at it takes time. ProGet costs less than half of Artifactory and is just as good. Our easy-to-read comparison page lays out the editions, features, and pricing of the different editions of ProGet and Artifactory.\u003ca href=\"https://inedo.com/proget/proget-vs-jfrog-artifactory?utm_source=tdwtf\u0026amp;utm_medium=Footerad\u0026amp;utm_campaign=artifactory-guide\"\u003eLearn More.\u003c/a\u003e\n\n\u003c/p\u003e\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-10-09T06:30:00Z",
  "modifiedTime": null
}
