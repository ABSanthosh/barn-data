{
  "id": "9320133e-885b-428d-abad-25704680b2eb",
  "title": "CodeSOD: Layered Like Spaghetti",
  "link": "https://thedailywtf.com/articles/layered-like-spaghetti",
  "description": "\"We use a three tier architecture,\" said the tech lead on Cristian's new team. \"It helps us keep concerns separated.\" This statement, as it turned out, was half true. They did divide the application into three tiers- a \"database layer\", a \"business layer\", and a \"presentation layer\". The \"database layer\" was a bunch of Java classes. The \"business layer\" was a collection of Servlets. And the \"presentation layer\" was a pile of JSP files. What they didn't do, however, was keep the concerns separated. Here's some code from their database layer: public synchronized StringBuffer getStocTotGest(String den, String gest) { StringBuffer sb = new StringBuffer(\"\" + \"\" + \"\" + \"\" + \"\" + \"\"); try { ResultSetrs= connectionManager .executeQuery(\"select (if(length(SUBSTRING(den,1,instr(den,'(')-1))\u003e0,SUBSTRING(den,1,instr(den,'(')-1),den)) as den,um,pret_vinz,sum(stoc) as stoc from stmarfzi_poli where den like '\" + den + \"%' \" + gest + \" group by den order by den\"); while (rs.next()) { sb.append(\"\"); sb.append(\"\"); sb.append(\"\"); } sb.append(\"DenumireCantPretVanz \" + rs.getString(\"den\") + \"\" + threeDecimalPlacesFormat.format(rs.getDouble(\"stoc\")) + \" \" + rs.getString(\"um\") + \"\" + teoDecimalPlacesFormat.format(rs.getDouble(\"pret_vinz\")) + \"\"); } catch (Exception ex) { ex.printStackTrace(); } return sb; } I guess a sufficiently motivated programmer can write PHP in any language. This just has a little bit of everything in it, doesn't it? There's the string-munged HTML generation in the database layer. The HTML is also wrong, as header fields are output with td tags, instead of th. There's the SQL injection vulnerability. There's the more-or-less useless exception handler. It's synchronized even though it's not doing anything thread unsafe. It's truly a thing of beauty, at least if you don't know what beauty is and think it means something horrible. This function was used in a few places. It was called from a few servlets in the \"business layer\", where the resulting StringBuffer was dumped into a session variable so that JSP files could access it. At least, that was for the JSP files which didn't invoke the function themselves- JSP files which mixed all the various layers together. Cristian's first task in the code base was changing the background colors of all of the rendered table headers. Since, as you can see, they weren't using CSS to make this easy, that involved searching through the entire codebase, in every layer, to find all the places where maybe a table was generated. Changing those colors was Cristian's first task in the code base. I assume that Cristian is still working on that, and will be working on that for some time to come. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Tue, 03 Dec 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 3376,
  "excerpt": "\"We use a three tier architecture,\" said the tech lead on Cristian's new team. \"It helps us keep concerns separated.\" This statement, as it turned out, was half true. They did divide the application into three tiers- a \"database layer\", a \"business layer\", and a \"presentation layer\". The \"database layer\" was a bunch of Java classes. The \"business layer\" was a collection of Servlets. And the \"presentation layer\" was a pile of JSP files.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-12-03 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. \"We use a three tier architecture,\" said the tech lead on Cristian's new team. \"It helps us keep concerns separated.\" This statement, as it turned out, was half true. They did divide the application into three tiers- a \"database layer\", a \"business layer\", and a \"presentation layer\". The \"database layer\" was a bunch of Java classes. The \"business layer\" was a collection of Servlets. And the \"presentation layer\" was a pile of JSP files. What they didn't do, however, was keep the concerns separated. Here's some code from their database layer: public synchronized StringBuffer getStocTotGest(String den, String gest) { StringBuffer sb = new StringBuffer(\"\u003ctable width=\\\"100%\\\" border=\\\"1\\\" cellspacing=\\\"1\\\" cellpadding=\\\"1\\\"\u003e\" + \"\u003ctr bgcolor=\\\"#999999\\\"\u003e\" + \"\u003ctd\u003eDenumire\u003c/td\u003e\" + \"\u003ctd\u003eCant\u003c/td\u003e\" + \"\u003ctd\u003ePretVanz\u003c/td\u003e\" + \"\u003c/tr\u003e\"); try { ResultSet rs = connectionManager .executeQuery(\"select (if(length(SUBSTRING(den,1,instr(den,'(')-1))\u003e0,SUBSTRING(den,1,instr(den,'(')-1),den)) as den,um,pret_vinz,sum(stoc) as stoc from stmarfzi_poli where den like '\" + den + \"%' \" + gest + \" group by den order by den\"); while (rs.next()) { sb.append(\"\u003ctr\u003e\u003ctd\u003e\" + rs.getString(\"den\") + \"\u003c/td\u003e\"); sb.append(\"\u003ctd\u003e\u003cdiv align=\\\"right\\\"\u003e\" + threeDecimalPlacesFormat.format(rs.getDouble(\"stoc\")) + \" \" + rs.getString(\"um\") + \"\u003c/div\u003e\u003c/td\u003e\"); sb.append(\"\u003ctd\u003e\u003cdiv align=\\\"right\\\"\u003e\" + teoDecimalPlacesFormat.format(rs.getDouble(\"pret_vinz\")) + \"\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\"); } sb.append(\"\u003c/table\u003e\"); } catch (Exception ex) { ex.printStackTrace(); } return sb; } I guess a sufficiently motivated programmer can write PHP in any language. This just has a little bit of everything in it, doesn't it? There's the string-munged HTML generation in the database layer. The HTML is also wrong, as header fields are output with td tags, instead of th. There's the SQL injection vulnerability. There's the more-or-less useless exception handler. It's synchronized even though it's not doing anything thread unsafe. It's truly a thing of beauty, at least if you don't know what beauty is and think it means something horrible. This function was used in a few places. It was called from a few servlets in the \"business layer\", where the resulting StringBuffer was dumped into a session variable so that JSP files could access it. At least, that was for the JSP files which didn't invoke the function themselves- JSP files which mixed all the various layers together. Cristian's first task in the code base was changing the background colors of all of the rendered table headers. Since, as you can see, they weren't using CSS to make this easy, that involved searching through the entire codebase, in every layer, to find all the places where maybe a table was generated. Changing those colors was Cristian's first task in the code base. I assume that Cristian is still working on that, and will be working on that for some time to come. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-12-03\"\u003e2024-12-03\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10796\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u0026#34;We use a three tier architecture,\u0026#34; said the tech lead on \u003cstrong\u003eCristian\u003c/strong\u003e\u0026#39;s new team. \u0026#34;It helps us keep concerns separated.\u0026#34;\u003c/p\u003e\n\u003cp\u003eThis statement, as it turned out, was half true. They did divide the application into three tiers- a \u0026#34;database layer\u0026#34;, a \u0026#34;business layer\u0026#34;, and a \u0026#34;presentation layer\u0026#34;. The \u0026#34;database layer\u0026#34; was a bunch of Java classes. The \u0026#34;business layer\u0026#34; was a collection of Servlets. And the \u0026#34;presentation layer\u0026#34; was a pile of JSP files.\u003c/p\u003e\n\u003cp\u003eWhat they didn\u0026#39;t do, however, was keep the concerns separated.\u003c/p\u003e\n\u003cp\u003eHere\u0026#39;s some code from their \u003cem\u003edatabase layer\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003esynchronized\u003c/span\u003e StringBuffer \u003cspan\u003egetStocTotGest\u003c/span\u003e\u003cspan\u003e(String den, String gest)\u003c/span\u003e {\n\t\t\u003cspan\u003eStringBuffer\u003c/span\u003e \u003cspan\u003esb\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eStringBuffer\u003c/span\u003e(\u003cspan\u003e\u0026#34;\u0026lt;table width=\\\u0026#34;100%\\\u0026#34;  border=\\\u0026#34;1\\\u0026#34; cellspacing=\\\u0026#34;1\\\u0026#34; cellpadding=\\\u0026#34;1\\\u0026#34;\u0026gt;\u0026#34;\u003c/span\u003e + \u003cspan\u003e\u0026#34;\u0026lt;tr bgcolor=\\\u0026#34;#999999\\\u0026#34;\u0026gt;\u0026#34;\u003c/span\u003e + \u003cspan\u003e\u0026#34;\u0026lt;td\u0026gt;Denumire\u0026lt;/td\u0026gt;\u0026#34;\u003c/span\u003e + \u003cspan\u003e\u0026#34;\u0026lt;td\u0026gt;Cant\u0026lt;/td\u0026gt;\u0026#34;\u003c/span\u003e\n\t\t\t\t+ \u003cspan\u003e\u0026#34;\u0026lt;td\u0026gt;PretVanz\u0026lt;/td\u0026gt;\u0026#34;\u003c/span\u003e + \u003cspan\u003e\u0026#34;\u0026lt;/tr\u0026gt;\u0026#34;\u003c/span\u003e);\n\t\t\u003cspan\u003etry\u003c/span\u003e {\n\t\t\t\u003cspan\u003eResultSet\u003c/span\u003e \u003cspan\u003ers\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e connectionManager\n\t\t\t\t\t.executeQuery(\u003cspan\u003e\u0026#34;select (if(length(SUBSTRING(den,1,instr(den,\u0026#39;(\u0026#39;)-1))\u0026gt;0,SUBSTRING(den,1,instr(den,\u0026#39;(\u0026#39;)-1),den)) as den,um,pret_vinz,sum(stoc) as stoc from stmarfzi_poli where den like \u0026#39;\u0026#34;\u003c/span\u003e\n\t\t\t\t\t\t\t+ den + \u003cspan\u003e\u0026#34;%\u0026#39; \u0026#34;\u003c/span\u003e + gest + \u003cspan\u003e\u0026#34;  group by den  order by den\u0026#34;\u003c/span\u003e);\n\t\t\t\u003cspan\u003ewhile\u003c/span\u003e (rs.next()) {\n\t\t\t\tsb.append(\u003cspan\u003e\u0026#34;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#34;\u003c/span\u003e + rs.getString(\u003cspan\u003e\u0026#34;den\u0026#34;\u003c/span\u003e) + \u003cspan\u003e\u0026#34;\u0026lt;/td\u0026gt;\u0026#34;\u003c/span\u003e);\n\t\t\t\tsb.append(\u003cspan\u003e\u0026#34;\u0026lt;td\u0026gt;\u0026lt;div align=\\\u0026#34;right\\\u0026#34;\u0026gt;\u0026#34;\u003c/span\u003e + threeDecimalPlacesFormat.format(rs.getDouble(\u003cspan\u003e\u0026#34;stoc\u0026#34;\u003c/span\u003e)) + \u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e + rs.getString(\u003cspan\u003e\u0026#34;um\u0026#34;\u003c/span\u003e) + \u003cspan\u003e\u0026#34;\u0026lt;/div\u0026gt;\u0026lt;/td\u0026gt;\u0026#34;\u003c/span\u003e);\n\t\t\t\tsb.append(\u003cspan\u003e\u0026#34;\u0026lt;td\u0026gt;\u0026lt;div align=\\\u0026#34;right\\\u0026#34;\u0026gt;\u0026#34;\u003c/span\u003e + teoDecimalPlacesFormat.format(rs.getDouble(\u003cspan\u003e\u0026#34;pret_vinz\u0026#34;\u003c/span\u003e)) + \u003cspan\u003e\u0026#34;\u0026lt;/div\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#34;\u003c/span\u003e);\n\t\t\t}\n\t\t\tsb.append(\u003cspan\u003e\u0026#34;\u0026lt;/table\u0026gt;\u0026#34;\u003c/span\u003e);\n\t\t} \u003cspan\u003ecatch\u003c/span\u003e (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t\t\u003cspan\u003ereturn\u003c/span\u003e sb;\n\t}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI guess a sufficiently motivated programmer can write PHP in any language.\u003c/p\u003e\n\u003cp\u003eThis just has a little bit of everything in it, doesn\u0026#39;t it? There\u0026#39;s the string-munged HTML generation \u003cem\u003ein the database layer\u003c/em\u003e. The HTML is also \u003cem\u003ewrong\u003c/em\u003e, as header fields are output with \u003ccode\u003etd\u003c/code\u003e tags, instead of \u003ccode\u003eth\u003c/code\u003e. There\u0026#39;s the SQL injection vulnerability. There\u0026#39;s the more-or-less useless exception handler. It\u0026#39;s \u003ccode\u003esynchronized\u003c/code\u003e even though it\u0026#39;s not doing anything thread unsafe. It\u0026#39;s truly a thing of beauty, at least if you don\u0026#39;t know what beauty is and think it means something horrible.\u003c/p\u003e\n\u003cp\u003eThis function was used in a few places. It was called from a few servlets in the \u0026#34;business layer\u0026#34;, where the resulting \u003ccode\u003eStringBuffer\u003c/code\u003e was dumped into a session variable so that JSP files could access it. At least, that was for the JSP files which didn\u0026#39;t invoke the function themselves- JSP files which mixed all the various layers together.\u003c/p\u003e\n\u003cp\u003eCristian\u0026#39;s first task in the code base was changing the background colors of \u003cem\u003eall\u003c/em\u003e of the rendered table headers. Since, as you can see, they weren\u0026#39;t using CSS to make this easy, that involved searching through the entire codebase, in \u003cem\u003eevery\u003c/em\u003e layer, to find all the places where maybe a table was generated.\u003c/p\u003e\n\u003cp\u003eChanging those colors was Cristian\u0026#39;s first task in the code base. I assume that Cristian is still working on that, and will be working on that for some time to come.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-12-03T06:30:00Z",
  "modifiedTime": null
}
