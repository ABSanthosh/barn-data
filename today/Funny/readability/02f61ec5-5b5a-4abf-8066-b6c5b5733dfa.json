{
  "id": "02f61ec5-5b5a-4abf-8066-b6c5b5733dfa",
  "title": "CodeSOD: Counting it All",
  "link": "https://thedailywtf.com/articles/counting-it-all",
  "description": "Since it's election day in the US, many people are thinking about counting today. We frequently discuss counting here, and how to do it wrong, so let's look at some code from RK. This code may not be counting votes, but whatever it's counting, we're not going to enjoy it: case LogMode.Row_limit: // row limit excel = 65536 rows if (File.Exists(personalFolder + @\"\\\" + fileName + \".CSV\")) { using (StreamReader reader = new StreamReader(personalFolder + @\"\\\" + fileName + \".CSV\")) { countRows = reader.ReadToEnd().Split(new char[] { '\\n' }).Length; } } Now, this code is from a rather old application, originally released in 2007. So the comment about Excel's row limit really puts us in a moment in time- Excel 2007 raised the row limit to 1,000,000 rows. But older versions of Excel did cap out at 65,536. And it wasn't the case that everyone just up and switched to Excel 2007 when it came out- transitioning to the new Office file formats was a conversion which took years. But we're not even reading an Excel file, we're reading a CSV. I enjoy that we construct the name twice, because that's useful. But the real magic of this one is how we count the rows. Because while Excel can handle 65,536 rows at this time, I don't think this program is going to do a great job of it- because we read the entire file into memory with ReadToEnd, then Split on newlines, then count the length that way. As you can imagine, in practice, this performed terribly on large files, of which there were many. Unfortunately for RK, there's one rule about old, legacy code: don't touch it. So despite fixing this being a rather easy task, nobody is working on fixing it, because nobody wants to be the one who touched it last. Instead, management is promising to launch a greenfield replacement project any day now… [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "author": "Remy Porter",
  "published": "Tue, 05 Nov 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2386,
  "excerpt": "Since it's election day in the US, many people are thinking about counting today. We frequently discuss counting here, and how to do it wrong, so let's look at some code from RK. This code may not be counting votes, but whatever it's counting, we're not going to enjoy it:",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-11-05 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Since it's election day in the US, many people are thinking about counting today. We frequently discuss counting here, and how to do it wrong, so let's look at some code from RK. This code may not be counting votes, but whatever it's counting, we're not going to enjoy it: case LogMode.Row_limit: // row limit excel = 65536 rows if (File.Exists(personalFolder + @\"\\\" + fileName + \".CSV\")) { using (StreamReader reader = new StreamReader(personalFolder + @\"\\\" + fileName + \".CSV\")) { countRows = reader.ReadToEnd().Split(new char[] { '\\n' }).Length; } } Now, this code is from a rather old application, originally released in 2007. So the comment about Excel's row limit really puts us in a moment in time- Excel 2007 raised the row limit to 1,000,000 rows. But older versions of Excel did cap out at 65,536. And it wasn't the case that everyone just up and switched to Excel 2007 when it came out- transitioning to the new Office file formats was a conversion which took years. But we're not even reading an Excel file, we're reading a CSV. I enjoy that we construct the name twice, because that's useful. But the real magic of this one is how we count the rows. Because while Excel can handle 65,536 rows at this time, I don't think this program is going to do a great job of it- because we read the entire file into memory with ReadToEnd, then Split on newlines, then count the length that way. As you can imagine, in practice, this performed terribly on large files, of which there were many. Unfortunately for RK, there's one rule about old, legacy code: don't touch it. So despite fixing this being a rather easy task, nobody is working on fixing it, because nobody wants to be the one who touched it last. Instead, management is promising to launch a greenfield replacement project any day now… [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-11-05\"\u003e2024-11-05\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10774\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eSince it\u0026#39;s election day in the US, many people are thinking about \u003cem\u003ecounting\u003c/em\u003e today. We frequently discuss counting here, and how to do it wrong, so let\u0026#39;s look at some code from \u003cstrong\u003eRK\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThis code may not be counting votes, but whatever it\u0026#39;s counting, we\u0026#39;re not going to enjoy it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecase\u003c/span\u003e LogMode.Row_limit: \u003cspan\u003e// row limit excel = 65536 rows\u003c/span\u003e\n    \u003cspan\u003eif\u003c/span\u003e (File.Exists(personalFolder + \u003cspan\u003e@\u0026#34;\\\u0026#34;\u003c/span\u003e + fileName + \u003cspan\u003e\u0026#34;.CSV\u0026#34;\u003c/span\u003e))\n    {\n        \u003cspan\u003eusing\u003c/span\u003e (StreamReader reader = \u003cspan\u003enew\u003c/span\u003e StreamReader(personalFolder + \u003cspan\u003e@\u0026#34;\\\u0026#34;\u003c/span\u003e + fileName + \u003cspan\u003e\u0026#34;.CSV\u0026#34;\u003c/span\u003e))\n        {\n            countRows = reader.ReadToEnd().Split(\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003echar\u003c/span\u003e[] { \u003cspan\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e }).Length;\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, this code is from a rather old application, originally released in 2007. So the comment about Excel\u0026#39;s row limit really puts us in a moment in time- Excel 2007 raised the row limit to 1,000,000 rows. But older versions of Excel did cap out at 65,536. And it wasn\u0026#39;t the case that everyone just up and switched to Excel 2007 when it came out- transitioning to the new Office file formats was a conversion which took years.\u003c/p\u003e\n\u003cp\u003eBut we\u0026#39;re not even reading an Excel file, we\u0026#39;re reading a CSV.\u003c/p\u003e\n\u003cp\u003eI enjoy that we construct the name twice, because that\u0026#39;s useful. But the real magic of this one is how we count the rows. Because while Excel can handle 65,536 rows at this time, I don\u0026#39;t think this program is going to do a great job of it- because we read the entire file into memory with \u003ccode\u003eReadToEnd\u003c/code\u003e, then \u003ccode\u003eSplit\u003c/code\u003e on newlines, then count the length that way.\u003c/p\u003e\n\u003cp\u003eAs you can imagine, in practice, this performed \u003cem\u003eterribly\u003c/em\u003e on large files, of which there were many.\u003c/p\u003e\n\u003cp\u003eUnfortunately for RK, there\u0026#39;s one rule about old, legacy code: don\u0026#39;t touch it. So despite fixing this being a rather easy task, nobody is working on fixing it, because nobody wants to be the one who touched it last. Instead, management is promising to launch a greenfield replacement project any day now…\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.\u003ca href=\"https://inedo.com/proget?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-11-05T06:30:00Z",
  "modifiedTime": null
}
