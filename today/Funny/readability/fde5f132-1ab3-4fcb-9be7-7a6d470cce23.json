{
  "id": "fde5f132-1ab3-4fcb-9be7-7a6d470cce23",
  "title": "Coded Smorgasbord: What the Hmm?",
  "link": "https://thedailywtf.com/articles/what-the-hmm",
  "description": "Our stories come from you, our readers- which, it's worth reminding everyone, keep those submissions coming in. There's nothing on this site without your submissions. Now, we do get some submissions which don't make the page. Frequently, it's simply because we simply don't have enough context from the submission to understand it or comment on it effectively. Often, it's just not that remarkable. And sometimes, it's because the code isn't a WTF at all. So I want to discuss some of these, because I think it's still interesting. And it's unfair to expect everyone to know everything, so for the submitters who discover they didn't understand why this code isn't bad, you're one of today's lucky 10,000. We start with this snippet, from Guss: #define FEATURE_SENSE_CHAN (1 \u003c\u003c 0) #define FEATURE_SENSE_PEER (1 \u003c\u003c 1) Guss writes: The Asterisk open source telephony engine has some features that need to know from which direction they've been invoked in a two-way call. This is called \"sense\" in the Asterisk lingo, and there are two macros defined in the source which allow you to textually know if you're talking about this direction or the other. This of course stands for 1 and 0 respectively, but they couldn't have just simply go on and say that - it has to be \"interesting\". Do also note, as this is a macro, it means that whenever someone sets or tests the \"sense\", another redundant bit shift operation is done. First, minor detail- this stands for 1 and 2 respectively. And what's important here is that these fields are clearly meant to be a bitmask. And when we're talking about a bitmask, using bitshift operators makes the code more clear. And we can generally rely on a shift by zero bits to be a no-op, and any compiler should be smart enough to spot that and optimize the operation out. Hell, a quick check with GCC shows that even the (1 \u003c\u003c 1) gets optimized to just the constant 0x2. Not a WTF, but it does highlight something we've commented on in the past- bitmasks can be confusing for people. This is a good example of that. But not only is this not a WTF, but it's not even bad code. (Now, it may be the case that these are never really used as a bitmask, in which case, that's a mild WTF, but that's not what Guss was drawing our attention to) In other cases, the code is bad, but it may be reacting to the badness it's surrounded by. Greg inherited this blob from some offshore contractors: RegistryKey RK = Registry.LocalMachine.OpenSubKey(\"SOFTWARE\\\\XXXXX\\\\YYYYY\"); string BoolLog = \"\"; if (RK != null) BoolLog = ((string)RK.GetValue(\"LogSocket\", \"\")).ToLower(); if (BoolLog == \"true\" || BoolLog == \"yes\" || BoolLog == \"1\") { ... } Now, seeing a string variable called BoolLog is a big red flag about bad code inbound. And we see handling some stringly typed boolean data to try and get a truth value. Which all whiffs of bad code. But let's talk about the Windows Registry. It's typed, but the types are strings, lists of strings, and various numeric types. There's no strictly boolean type. And sure, while explicitly storing a 1 in a numeric field is probably a better choice for the registry than string booleans, there are reasons why you might do that (especially if you frequently need to modify Registry keys by hand, like when you're debugging). The real WTF, in this case, isn't this code, but is instead the Windows Registry. Having a single tree store be the repository for all your system configuration sounds like a good idea on paper, but as anyone who's worked with it has discovered- it's a nightmare. The code here isn't terrible. It's not good, but it's a natural reaction to the terrible world in which it lives. Sometimes, the code is actually downright awful, but it's just hard to care about too much. Rudolf was shopping for bulk LEDs, which inevitably leads one to all sorts of websites based in China offering incredibly cheap prices and questionable quality control. The site Rudolf was looking at had all sorts of rendering glitches, and so out of curiosity, he viewed the source. {\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang2055{\\fonttbl{\\f0\\froman\\fcharset0 Times New Roman;}{\\f1\\fswiss\\fcharset0 Arial;}} {\\*\\generator Msftedit 5.41.21.2509;}\\viewkind4\\uc1\\pard\\f0\\fs24 \u003chtml\u003e\\par \\par \u003chead\u003e \u003cmeta http-equiv=\"refresh\" content=\"1; url=http://totally-fine-leds-really-its-fine.ch\"\u003e \\par Here we see someone wrote their HTML in WordPad, and saved the file as an RTF, instead of a plain text file. Which sure, is bad. But again, we need to put this in context: this almost certainly isn't the page for handling any transactions or sales (that almost certainly uses a prebaked ecommerce plugin). This is their approach to letting \"regular\" users upload content to the site- frequently documentation pages. This isn't a case where some developer should have known better messed up- this is almost certainly some sales person who has an HTML template to fill in and upload. It probably stretches their technical skills to the limit to \"Save Asâ€¦\" in WordPad. So the code isn't bad. Again, the environment in which it sits is bad. But this is a case where the environment doesn't matter- these kinds of sites are really hoping to score some B2B sales in bulk quantities, and \"customer service\" and \"useful website\" isn't going to drive sales better than \"bargain basement prices\" will. They're not trying to sell to consumers, they're trying to sell to a company which will put these into consumer products. Honestly, we should be grateful that they at least tried to make an HTML file, and didn't just upload PDFs, which is usually what you find on these sites. Sometimes, we don't have a WTF. Sometimes, we have a broken world that we can just do our best to navigate. We must simply do our best. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Tue, 22 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Coded Smorgasbord"
  ],
  "byline": "Remy Porter",
  "length": 5760,
  "excerpt": "Our stories come from you, our readers- which, it's worth reminding everyone, keep those submissions coming in. There's nothing on this site without your submissions. Now, we do get some submissions which don't make the page. Frequently, it's simply because we simply don't have enough context from the submission to understand it or comment on it effectively. Often, it's just not that remarkable. And sometimes, it's because the code isn't a WTF at all.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Our stories come from you, our readers- which, it's worth reminding everyone, keep those submissions coming in. There's nothing on this site without your submissions. Now, we do get some submissions which don't make the page. Frequently, it's simply because we simply don't have enough context from the submission to understand it or comment on it effectively. Often, it's just not that remarkable. And sometimes, it's because the code isn't a WTF at all. So I want to discuss some of these, because I think it's still interesting. And it's unfair to expect everyone to know everything, so for the submitters who discover they didn't understand why this code isn't bad, you're one of today's lucky 10,000. We start with this snippet, from Guss: #define FEATURE_SENSE_CHAN (1 \u003c\u003c 0) #define FEATURE_SENSE_PEER (1 \u003c\u003c 1) Guss writes: The Asterisk open source telephony engine has some features that need to know from which direction they've been invoked in a two-way call. This is called \"sense\" in the Asterisk lingo, and there are two macros defined in the source which allow you to textually know if you're talking about this direction or the other. This of course stands for 1 and 0 respectively, but they couldn't have just simply go on and say that - it has to be \"interesting\". Do also note, as this is a macro, it means that whenever someone sets or tests the \"sense\", another redundant bit shift operation is done. First, minor detail- this stands for 1 and 2 respectively. And what's important here is that these fields are clearly meant to be a bitmask. And when we're talking about a bitmask, using bitshift operators makes the code more clear. And we can generally rely on a shift by zero bits to be a no-op, and any compiler should be smart enough to spot that and optimize the operation out. Hell, a quick check with GCC shows that even the (1 \u003c\u003c 1) gets optimized to just the constant 0x2. Not a WTF, but it does highlight something we've commented on in the past- bitmasks can be confusing for people. This is a good example of that. But not only is this not a WTF, but it's not even bad code. (Now, it may be the case that these are never really used as a bitmask, in which case, that's a mild WTF, but that's not what Guss was drawing our attention to) In other cases, the code is bad, but it may be reacting to the badness it's surrounded by. Greg inherited this blob from some offshore contractors: RegistryKey RK = Registry.LocalMachine.OpenSubKey(\"SOFTWARE\\\\XXXXX\\\\YYYYY\"); string BoolLog = \"\"; if (RK != null) BoolLog = ((string)RK.GetValue(\"LogSocket\", \"\")).ToLower(); if (BoolLog == \"true\" || BoolLog == \"yes\" || BoolLog == \"1\") { ... } Now, seeing a string variable called BoolLog is a big red flag about bad code inbound. And we see handling some stringly typed boolean data to try and get a truth value. Which all whiffs of bad code. But let's talk about the Windows Registry. It's typed, but the types are strings, lists of strings, and various numeric types. There's no strictly boolean type. And sure, while explicitly storing a 1 in a numeric field is probably a better choice for the registry than string booleans, there are reasons why you might do that (especially if you frequently need to modify Registry keys by hand, like when you're debugging). The real WTF, in this case, isn't this code, but is instead the Windows Registry. Having a single tree store be the repository for all your system configuration sounds like a good idea on paper, but as anyone who's worked with it has discovered- it's a nightmare. The code here isn't terrible. It's not good, but it's a natural reaction to the terrible world in which it lives. Sometimes, the code is actually downright awful, but it's just hard to care about too much. Rudolf was shopping for bulk LEDs, which inevitably leads one to all sorts of websites based in China offering incredibly cheap prices and questionable quality control. The site Rudolf was looking at had all sorts of rendering glitches, and so out of curiosity, he viewed the source. {\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang2055{\\fonttbl{\\f0\\froman\\fcharset0 Times New Roman;}{\\f1\\fswiss\\fcharset0 Arial;}} {\\*\\generator Msftedit 5.41.21.2509;}\\viewkind4\\uc1\\pard\\f0\\fs24 \u003chtml\u003e\\par \\par \u003chead\u003e \u003cmeta http-equiv=\"refresh\" content=\"1; url=http://totally-fine-leds-really-its-fine.ch\"\u003e \\par Here we see someone wrote their HTML in WordPad, and saved the file as an RTF, instead of a plain text file. Which sure, is bad. But again, we need to put this in context: this almost certainly isn't the page for handling any transactions or sales (that almost certainly uses a prebaked ecommerce plugin). This is their approach to letting \"regular\" users upload content to the site- frequently documentation pages. This isn't a case where some developer should have known better messed up- this is almost certainly some sales person who has an HTML template to fill in and upload. It probably stretches their technical skills to the limit to \"Save Asâ€¦\" in WordPad. So the code isn't bad. Again, the environment in which it sits is bad. But this is a case where the environment doesn't matter- these kinds of sites are really hoping to score some B2B sales in bulk quantities, and \"customer service\" and \"useful website\" isn't going to drive sales better than \"bargain basement prices\" will. They're not trying to sell to consumers, they're trying to sell to a company which will put these into consumer products. Honestly, we should be grateful that they at least tried to make an HTML file, and didn't just upload PDFs, which is usually what you find on these sites. Sometimes, we don't have a WTF. Sometimes, we have a broken world that we can just do our best to navigate. We must simply do our best.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eOur stories come from you, our readers- which, it\u0026#39;s worth reminding everyone, keep those submissions coming in. There\u0026#39;s nothing on this site without your submissions.\u003c/p\u003e\n\u003cp\u003eNow, we do get some submissions which don\u0026#39;t make the page. Frequently, it\u0026#39;s simply because we simply don\u0026#39;t have enough context from the submission to understand it or comment on it effectively. Often, it\u0026#39;s just not that remarkable. And sometimes, it\u0026#39;s because the code isn\u0026#39;t a WTF at all.\u003c/p\u003e\n\u003cp\u003eSo I want to discuss some of these, because I think it\u0026#39;s still \u003cem\u003einteresting\u003c/em\u003e. And it\u0026#39;s unfair to expect everyone to know everything, so for the submitters who discover they didn\u0026#39;t understand why this code isn\u0026#39;t bad, \u003ca href=\"https://xkcd.com/1053/\"\u003eyou\u0026#39;re one of today\u0026#39;s lucky 10,000\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe start with this snippet, from \u003cstrong\u003eGuss\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e#\u003cspan\u003edefine\u003c/span\u003e FEATURE_SENSE_CHAN      (1 \u0026lt;\u0026lt; 0)\u003c/span\u003e\n\u003cspan\u003e#\u003cspan\u003edefine\u003c/span\u003e FEATURE_SENSE_PEER      (1 \u0026lt;\u0026lt; 1)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGuss writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe Asterisk open source telephony engine has some features that need to know from which direction they\u0026#39;ve been invoked in a two-way call. This is called \u0026#34;sense\u0026#34; in the Asterisk lingo, and there are two macros defined in the source which allow you to textually know if you\u0026#39;re talking about this direction or the other. This of course stands for 1 and 0 respectively, but they couldn\u0026#39;t have just simply go on and say that - it has to be \u0026#34;interesting\u0026#34;. Do also note, as this is a macro, it means that whenever someone sets or tests the \u0026#34;sense\u0026#34;, another redundant bit shift operation is done.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFirst, minor detail- this stands for \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e2\u003c/code\u003e respectively. And what\u0026#39;s important here is that these fields are clearly meant to be a bitmask. And when we\u0026#39;re talking about a bitmask, using bitshift operators makes the code more clear. And we can generally rely on a shift by zero bits to be a no-op, and any compiler should be smart enough to spot that and optimize the operation out. Hell, a quick check with GCC shows that even the \u003ccode\u003e(1 \u0026lt;\u0026lt; 1)\u003c/code\u003e gets optimized to just the constant \u003ccode\u003e0x2\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNot a WTF, but it does highlight something we\u0026#39;ve commented on in the past- bitmasks can be confusing for people. This is a good example of that. But not only is this not a WTF, but it\u0026#39;s not even bad code.\u003c/p\u003e\n\u003cp\u003e(Now, it may be the case that these are never really used as a bitmask, in which case, \u003cem\u003ethat\u0026#39;s\u003c/em\u003e a mild WTF, but that\u0026#39;s not what Guss was drawing our attention to)\u003c/p\u003e\n\u003cp\u003eIn other cases, the code is \u003cem\u003ebad\u003c/em\u003e, but it may be reacting to the badness it\u0026#39;s surrounded by. \u003cstrong\u003eGreg\u003c/strong\u003e inherited this blob from some offshore contractors:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRegistryKey RK = Registry.LocalMachine.OpenSubKey(\u003cspan\u003e\u0026#34;SOFTWARE\\\\XXXXX\\\\YYYYY\u0026#34;\u003c/span\u003e);\n\u003cspan\u003estring\u003c/span\u003e BoolLog = \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e;\n\u003cspan\u003eif\u003c/span\u003e (RK != \u003cspan\u003enull\u003c/span\u003e)\n\tBoolLog = ((\u003cspan\u003estring\u003c/span\u003e)RK.GetValue(\u003cspan\u003e\u0026#34;LogSocket\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e)).ToLower();\n\u003cspan\u003eif\u003c/span\u003e (BoolLog == \u003cspan\u003e\u0026#34;true\u0026#34;\u003c/span\u003e || BoolLog == \u003cspan\u003e\u0026#34;yes\u0026#34;\u003c/span\u003e || BoolLog == \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e)\n{\n\t...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, seeing a \u003ccode\u003estring\u003c/code\u003e variable called \u003ccode\u003eBoolLog\u003c/code\u003e is a big red flag about bad code inbound. And we see handling some stringly typed boolean data to try and get a truth value. Which all whiffs of bad code.\u003c/p\u003e\n\u003cp\u003eBut let\u0026#39;s talk about the Windows Registry. It\u0026#39;s \u003cem\u003etyped\u003c/em\u003e, but the types are strings, lists of strings, and various numeric types. There\u0026#39;s no strictly boolean type. And sure, while explicitly storing a \u003ccode\u003e1\u003c/code\u003e in a numeric field is probably a better choice for the registry than string booleans, there are reasons why you might do that (especially if you frequently need to modify Registry keys by hand, like when you\u0026#39;re debugging).\u003c/p\u003e\n\u003cp\u003eThe real WTF, in this case, isn\u0026#39;t this code, but is instead the Windows Registry. Having a single tree store be the repository for all your system configuration sounds like a good idea on paper, but as anyone who\u0026#39;s worked with it has discovered- it\u0026#39;s a nightmare. The code here isn\u0026#39;t \u003cem\u003eterrible\u003c/em\u003e. It\u0026#39;s not good, but it\u0026#39;s a natural reaction to the terrible world in which it lives.\u003c/p\u003e\n\u003cp\u003eSometimes, the code is actually downright awful, but it\u0026#39;s just hard to care about too much. \u003cstrong\u003eRudolf\u003c/strong\u003e was shopping for bulk LEDs, which inevitably leads one to all sorts of websites based in China offering incredibly cheap prices and questionable quality control. \u003c/p\u003e\n\u003cp\u003eThe site Rudolf was looking at had all sorts of rendering glitches, and so out of curiosity, he viewed the source.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang2055{\\fonttbl{\\f0\\froman\\fcharset0 Times New Roman;}{\\f1\\fswiss\\fcharset0 Arial;}}\n{\\*\\generator Msftedit 5.41.21.2509;}\\viewkind4\\uc1\\pard\\f0\\fs24 \u003cspan\u003e\u0026lt;\u003cspan\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\\par\n\\par\n\u003cspan\u003e\u0026lt;\u003cspan\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003cspan\u003emeta\u003c/span\u003e \u003cspan\u003ehttp-equiv\u003c/span\u003e=\u003cspan\u003e\u0026#34;refresh\u0026#34;\u003c/span\u003e \u003cspan\u003econtent\u003c/span\u003e=\u003cspan\u003e\u0026#34;1; url=http://totally-fine-leds-really-its-fine.ch\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e \\par\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere we see someone wrote their HTML in WordPad, and saved the file as an RTF, instead of a plain text file. Which sure, is bad. But again, we need to put this in context: this almost certainly isn\u0026#39;t the page for handling any transactions or sales (that almost certainly uses a prebaked ecommerce plugin). This is their approach to letting \u0026#34;regular\u0026#34; users upload content to the site- frequently documentation pages. This isn\u0026#39;t a case where some developer should have known better messed up- this is almost certainly some sales person who has an HTML template to fill in and upload. It probably stretches their technical skills to the limit to \u0026#34;Save Asâ€¦\u0026#34; in WordPad.\u003c/p\u003e\n\u003cp\u003eSo the \u003cem\u003ecode\u003c/em\u003e isn\u0026#39;t bad. Again, the environment in which it sits is bad. But this is a case where the environment doesn\u0026#39;t matter- these kinds of sites are really hoping to score some B2B sales in bulk quantities, and \u0026#34;customer service\u0026#34; and \u0026#34;useful website\u0026#34; isn\u0026#39;t going to drive sales better than \u0026#34;bargain basement prices\u0026#34; will. They\u0026#39;re not trying to sell to consumers, they\u0026#39;re trying to sell to a company which will put these into consumer products. Honestly, we should be grateful that they at least tried to make an HTML file, and didn\u0026#39;t just upload PDFs, which is usually what you find on these sites.\u003c/p\u003e\n\u003cp\u003eSometimes, we don\u0026#39;t have a WTF. Sometimes, we have a broken world that we can just do our best to navigate. We must simply do our best.\u003c/p\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2024-10-22T06:30:00Z",
  "modifiedTime": null
}
