[
  {
    "id": "2f3ac7fc-56d6-48f7-a922-697b870d65c4",
    "title": "Unsolved Physics Problems",
    "link": "https://xkcd.com/3115/",
    "description": "",
    "author": "",
    "published": "Mon, 14 Jul 2025 04:00:00 -0000",
    "image": "https://imgs.xkcd.com/comics/unsolved_physics_problems.png",
    "source": "https://xkcd.com/rss.xml",
    "categories": null
  },
  {
    "id": "b1663fef-3723-4540-bb23-90ed7a16eba9",
    "title": "Building a Fire",
    "link": "https://xkcd.com/3114/",
    "description": "",
    "author": "",
    "published": "Fri, 11 Jul 2025 04:00:00 -0000",
    "image": "https://imgs.xkcd.com/comics/building_a_fire.png",
    "source": "https://xkcd.com/rss.xml",
    "categories": null
  },
  {
    "id": "764a8e3a-11b6-41ae-9e53-1da826fc3ae3",
    "title": "Sweater People",
    "link": "https://awkwardfamilyphotos.com/sweater-people",
    "description": "“Mom wanted a family photo. So… we family photo’d the heck out of it!” (submitted by Shawna)   The post Sweater People appeared first on AwkwardFamilyPhotos.com.",
    "author": "Team Awkward",
    "published": "Thu, 03 Jul 2025 16:59:54 +0000",
    "image": "https://s3.awkwardfamilyphotos.com/wp-content/uploads/2025/07/03095950/inbound237534454506147220-1024x768.jpg",
    "source": "https://awkwardfamilyphotos.com/feed/",
    "categories": [
      "Family Portrait",
      "Misc"
    ]
  },
  {
    "id": "fa003fed-8880-410b-bdb2-6100931b5fb9",
    "title": "The Wicker Man",
    "link": "https://awkwardfamilyphotos.com/2025/07/01/the-wicker-man/",
    "description": "“Just a totally natural looking family portrait of a massive wicker peacock chair. Oh and me, my dad, and my sister. We apparently took this as a “gift” for my mom, which is why she was missing. Clearly this is the gift she didn’t know she wanted.”   The post The Wicker Man appeared first on AwkwardFamilyPhotos.com.",
    "author": "Jim Rowley",
    "published": "Wed, 02 Jul 2025 04:02:56 +0000",
    "image": "https://awkwardfamilyphotos.com/wp-content/uploads/2020/09/Screen-Shot-2020-09-21-at-4.01.55-PM-1024x1019.jpg",
    "source": "https://awkwardfamilyphotos.com/feed/",
    "categories": [
      "Photos"
    ]
  },
  {
    "id": "6d5cde78-4f5a-424d-8d56-20239911b1db",
    "title": "Jack McBrayer Roasts Seth Meyers’ Son Every Time They Meet",
    "link": "https://www.cracked.com/article_47392_jack-mcbrayer-roasts-seth-meyers-son-every-time-they-meet.html?newsletter-cat=movies-tv",
    "description": "By Keegan Kelly Published: July 15th, 2025",
    "author": "",
    "published": "Tue, 15 Jul 2025 17:30:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/CrackedRSS",
    "categories": null
  },
  {
    "id": "457c7236-cf8c-485f-affd-63d37c6684a6",
    "title": "‘King of the Hill’ Mysteriously Changes Classic Season 12 Episode Title on Streaming",
    "link": "https://www.cracked.com/article_47393_king-of-the-hill-mysteriously-changes-classic-season-12-episode-title-on-streaming.html?newsletter-cat=movies-tv",
    "description": "By Carly Tennes Published: July 15th, 2025",
    "author": "",
    "published": "Tue, 15 Jul 2025 16:30:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/CrackedRSS",
    "categories": null
  },
  {
    "id": "95ef00ab-857b-48dc-ad7e-992c641945cf",
    "title": "Comic for 2021.12.21",
    "link": "http://explosm.net/comics/6060/",
    "description": "New Cyanide and Happiness Comic",
    "author": "",
    "published": "Tue, 21 Dec 2021 00:00:00 -0600",
    "image": "",
    "source": "http://feeds.feedburner.com/Explosm",
    "categories": [
      "Comics"
    ]
  },
  {
    "id": "bf281d52-c447-4db7-9dbf-59bd0860f002",
    "title": "Comic for 2021.12.20",
    "link": "http://explosm.net/comics/6059/",
    "description": "New Cyanide and Happiness Comic",
    "author": "",
    "published": "Mon, 20 Dec 2021 00:00:00 -0600",
    "image": "",
    "source": "http://feeds.feedburner.com/Explosm",
    "categories": [
      "Comics"
    ]
  },
  {
    "id": "33cf9c7b-81e6-4859-b5c3-167804aed336",
    "title": "'Starting to mess with my kids is another level I just can't tolerate': Neighbor leaves car parked far into neighborhood sidewalk so children are unable to ride their bikes safely away from the street",
    "link": "https://cheezburger.com/41487365/starting-to-mess-with-my-kids-is-another-level-i-just-cant-tolerate-neighbor-leaves-car-parked-far",
    "description": "It's summertime, baby! You know what that means: Neighbor feuds, elders yelling at children in hopes they stop being children, and my personal favorite, parking wars. Does the heat of the season go to people's heads and make certain sensitive groups insane until the temperature drops below 65? We'll never know. What we do know, however, is that while it might not be fun experiencing a neighbor from down under (and no, I don't mean Australia), it sure is entertaining to read about!Some folks move to a neighborhood they know is riddled with kids, then complain about the fact that a child is riding a bike on the sidewalk. Most neighborhoods allow young kids to ride their bikes off the street because it's safer that way, and such seems like the case in this next story. A single mother's impolite neighbor decides to park their car in the middle of the sidewalk to prevent the kids from riding on it. There's a specific place reserved for people like this neighbor, especially because she's not only being childish in her \"tactics\", but she's also preventing children from safely experiencing the summer… Scroll below to read the full story",
    "author": "Lana DeGaetano",
    "published": "Tue, 15 Jul 2025 16:00:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/failblog",
    "categories": [
      "neighbors",
      "entitlement",
      "kids",
      "neighborhood",
      "neighborhood-drama",
      "bad neighbors",
      "neighborhood-stories",
      "reddit story",
      "terrible neighbors",
      "parenting",
      "entitled",
      "bike",
      "reddit thread",
      "Bad Neighbor",
      "r-entitled",
      "Reddit",
      "parking",
      "entitled people",
      "neighbor"
    ]
  },
  {
    "id": "5d3f0a20-3ae6-47a0-adfa-8b0139e73057",
    "title": "Employees working grueling 12-hour days are told they're not allowed to leave 5 minutes early and must stay until 6 pm, they comply but stop doing extra work, bringing productivity to a standstill for 3 weeks: 'The manager only lasted another 6 months'",
    "link": "https://cheezburger.com/41318661/employees-working-grueling-12-hour-days-are-told-theyre-not-allowed-to-leave-5-minutes-early-and",
    "description": "Flexibility begets flexibility. If you're not willing to offer it to others, don't be surprised when they don't offer it to you in return. This is true in any situation, and just because you hold authority over someone doesn't mean that you don't owe them the same flexibility that you expect to receive. Relationships, including working ones, are a two-way street, and you have to be able to show someone that you're able to offer them the same respect that you want in return. The thing is, some people, quite simply, are happy when things work in their favor but aren't willing to do things for others, and this eventually leads to conflict.This comes up all the time in employment situations where subordinates, who feel like they are going above and beyond their required tasks and scheduled hours, are reprimanded for some small technicality that calls into question their dedication to their job. This leads to a series of events where the worker silently protests by complying with their boss's demand that they adhere to this small technicality, but drops everything else they were doing that's not in their job description in the process.",
    "author": "Brad Dickson",
    "published": "Tue, 15 Jul 2025 15:00:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/failblog",
    "categories": null
  },
  {
    "id": "d454f920-1443-4c67-ab09-7328d1aca4d6",
    "title": "Rich dude refuses to pay $20 cleaning fee for a week of cat-sitting his special needs cat, freaks out when payment is demanded, then abandons the cat on the cat-sitter's front step: 'He never came back for the cat and I have another cat now'",
    "link": "https://cheezburger.com/41464325/rich-dude-refuses-to-pay-20-cleaning-fee-for-a-week-of-cat-sitting-his-special-needs-cat-freaks-out",
    "description": "Anybody who has ever owned a special-needs cat knows how big of a responsibility it is. These cats need extra from you. That's true and has always been true. So that is something that has to go into consideration when you adopt a special-needs cat. At first glance, it looks like the man in this story did realize this - the weight of the responsibility of having a cat like this. It seems that he looked for a cat-sitter who specializes in cats who need this little bit extra. But then things take a turn. A weird turn. This man, who is clearly well-off financially, seems to have had a problem with paying the $20 that this highly qualified cat sitter was asking for, a price that any cat owner, let alone a special-needs cat owner, should be willing to pay for something like this. He put off paying until the last second, and when the cat sitter put her foot down, he did the most unexpected thing of all.  Fluff. Chaos. Drama! Our weekly cat newsletter has it all -  subscribe here.",
    "author": "Mariel Ruvinsky",
    "published": "Tue, 15 Jul 2025 07:00:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/icanhascheezburger",
    "categories": [
      "cat",
      "drama",
      "special needs",
      "baby sitter",
      "story",
      "rich people",
      "payment",
      "Cats",
      "money",
      "rich"
    ]
  },
  {
    "id": "f3612282-6b6d-4246-b72d-f5e1837c1852",
    "title": "20 Meowgnificent Memes for Pawrents Plotting to Add More Cats to the Crew",
    "link": "https://cheezburger.com/41463301/20-meowgnificent-memes-for-pawrents-plotting-to-add-more-cats-to-the-crew",
    "description": "Some people dream of wealth or fame, but true cat lovers know the real goal: more cats. One feline friend is never quite enough. Two? Getting there. Three? Now it's a party! The craving for extra fluffballs is real, whether it's the irresistible charm of a stray whisker or the promise of more purrs, head boops, and playful paws.It's the daily struggle of trying to resist yet another adoption post, telling yourself \"just looking\" while your heart screams \"take them all home!\" There's the challenge of explaining to friends why your cat tower looks more like a skyscraper, why your furniture is mysteriously covered in fur, and why your lap is always full even when you thought you had some \"me time.\"Wanting more cats isn't just a phase. It's a full-on lifestyle. The love, the mischief, the endless cuddles. It's impossible to say no. Because in a cat lover's world, there's always room for one more purrfect companion to steal your heart (and your favorite chair), making every day a little brighter and a lot furrier.Fluff. Chaos. Drama! Our weekly cat newsletter has it all -  subscribe here.",
    "author": "Sarah Brown",
    "published": "Tue, 15 Jul 2025 15:00:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/icanhascheezburger",
    "categories": [
      "adopt",
      "kitten",
      "Memes",
      "lol",
      "feline",
      "hissterical",
      "Cats",
      "funny",
      "cat memes"
    ]
  },
  {
    "id": "4f6a3853-57d3-406c-8610-01f5175954c2",
    "title": "01/15/21 PHD comic: 'NEW BOOK! Out of Your Mind!'",
    "link": "http://www.phdcomics.com/comics.php?f=2051",
    "description": "Piled Higher \u0026 Deeper by Jorge Cham www.phdcomics.com title: \"NEW BOOK! Out of Your Mind!\" - originally published 1/15/2021 For the latest news in PHD Comics, CLICK HERE!",
    "author": "",
    "published": "Mon, 31 Jan 2022 11:24:26 -0800",
    "image": "http://www.phdcomics.com/comics/archive/phd011525s.gif",
    "source": "http://phdcomics.com/gradfeed.php",
    "categories": null
  },
  {
    "id": "176a3e34-706c-43ec-a3c6-c308841db9a4",
    "title": "08/31/23 PHD comic: 'New Book! Oliver's Great Big Universe!'",
    "link": "http://www.phdcomics.com/comics.php?f=2050",
    "description": "Piled Higher \u0026 Deeper by Jorge Cham www.phdcomics.com title: \"New Book! Oliver's Great Big Universe!\" - originally published 8/31/2023 For the latest news in PHD Comics, CLICK HERE!",
    "author": "",
    "published": "Tue, 14 Dec 2021 11:53:03 -0800",
    "image": "http://www.phdcomics.com/comics/archive/phd083123s.gif",
    "source": "http://phdcomics.com/gradfeed.php",
    "categories": null
  },
  {
    "id": "845cdf31-509f-4394-9cab-59db57e56bc8",
    "title": "Tony Hurk",
    "link": "https://www.penny-arcade.com/news/post/2025/07/14/tony-hurk",
    "description": "Gabriel buying the new old Tony Hawk game on PC of all places must be considered my final victory over the man. Nought remains now but to choose a new nemesis - or even nemeses! Good luck trying to replace a hobgoblin like the Mork with a single foe. It's either gonna have to be a team of people, like with a shared Gcal or something, or I'm gonna have to war with a timeless concept like \"hunger\" just to get the same high.",
    "author": "",
    "published": "Mon, 14 Jul 2025 17:12:00 +0000",
    "image": "",
    "source": "https://www.penny-arcade.com/feed",
    "categories": null
  },
  {
    "id": "874decc1-cd45-4504-bdfa-69030d72fb07",
    "title": "PA behind the scenes!",
    "link": "https://www.penny-arcade.com/news/post/2025/07/14/pa-behind-the-scenes",
    "description": "I’ve been messing around with the tools Clip Studio has for recording your work. I forgot to turn it on until I had finished my first sketch pass but I do have a recording of today’s strip getting made. If you like to see how the sausage gets made here is a quick little timelapse that shows how a Penny Arcade strip comes together.",
    "author": "",
    "published": "Mon, 14 Jul 2025 15:37:00 +0000",
    "image": "",
    "source": "https://www.penny-arcade.com/feed",
    "categories": null
  },
  {
    "id": "cda8b708-90b0-431e-8b58-16348994c933",
    "title": "Sunday Secrets",
    "link": "https://postsecret.com/2025/07/13/sunday-secrets-562/",
    "description": "Sunday Secrets began 20 years ago. This week I did not receive enough postcards to share back. Free your secrets today. The post Sunday Secrets appeared first on PostSecret.",
    "author": "Frank",
    "published": "Sun, 13 Jul 2025 00:08:00 +0000",
    "image": "https://i0.wp.com/postsecret.com/wp-content/uploads/2025/07/Screen-Shot-2024-03-25-at-1.05.52-PM.png?resize=520%2C315\u0026ssl=1",
    "source": "https://postsecret.com/feed/?alt=rss",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "f26fe8a4-3c3c-47ff-b910-d88f1c8afce8",
    "title": "Classic Secrets",
    "link": "https://postsecret.com/2025/07/13/classic-secrets-568/",
    "description": "The post Classic Secrets appeared first on PostSecret.",
    "author": "Frank",
    "published": "Sun, 13 Jul 2025 00:05:00 +0000",
    "image": "https://i0.wp.com/postsecret.com/wp-content/uploads/2025/07/worship.jpg?resize=526%2C381\u0026ssl=1",
    "source": "https://postsecret.com/feed/?alt=rss",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "ce5ec556-9a6b-4764-9b8c-739658ca80ad",
    "title": "Saturday Morning Breakfast Cereal - Prompt",
    "link": "https://www.smbc-comics.com/comic/prompt",
    "description": "Click here to go see the bonus panel!Hovertext:Suddenly wondering if someone has already done this.Today's News:",
    "author": "Zach Weinersmith",
    "published": "Tue, 15 Jul 2025 11:20:00 -0400",
    "image": "https://www.smbc-comics.com/comics/1752556806-20250716.png",
    "source": "https://www.smbc-comics.com/comic/rss",
    "categories": null
  },
  {
    "id": "b69b9757-39de-4664-b495-f0d785406850",
    "title": "Saturday Morning Breakfast Cereal - Waa",
    "link": "https://www.smbc-comics.com/comic/waa",
    "description": "Click here to go see the bonus panel!Hovertext:It's not the talking that's so creepy, but the baritone.Today's News:",
    "author": "Zach Weinersmith",
    "published": "Mon, 14 Jul 2025 11:20:00 -0400",
    "image": "https://www.smbc-comics.com/comics/1752300579-20250714.png",
    "source": "https://www.smbc-comics.com/comic/rss",
    "categories": null
  },
  {
    "id": "b336f1fd-f2f5-4a6c-b36a-685b08d472b1",
    "title": "Wait…is this going to work?",
    "link": "https://thebloggess.com/2025/07/08/wait-is-this-going-to-work/",
    "description": "I have not been ignoring you but my blog has been broken and giving error messages every time I try to write, but I think maybe it’s fixed? I guess we’ll see if this goes through. I’m too tired to be entirely cohesive or funny but I wanted you to know that Hailey is homeContinue reading \"Wait…is this going to work?\"",
    "author": "thebloggess",
    "published": "Tue, 08 Jul 2025 19:38:03 +0000",
    "image": "",
    "source": "https://thebloggess.com/feed/",
    "categories": [
      "Random Crap"
    ]
  },
  {
    "id": "33b0958e-9d7c-4ec5-ad63-16c226753f33",
    "title": "Rough week",
    "link": "https://thebloggess.com/2025/06/29/rough-week/",
    "description": "It’s been a very rough week and I’m lightly exhausted so instead of writing a real post I’m just sharing the letter I sent everyone on my art substack. Sorry. Any week with spinal taps in it doesn’t count as a real week. Hi friend, I’m writing this from the hospital where I’ve been withContinue reading \"Rough week\"",
    "author": "thebloggess",
    "published": "Mon, 30 Jun 2025 04:17:53 +0000",
    "image": "",
    "source": "https://thebloggess.com/feed/",
    "categories": [
      "Random Crap"
    ]
  },
  {
    "id": "3d943f09-30d2-4f6d-9be8-2823c0e07177",
    "title": "CodeSOD: Born Single",
    "link": "https://thedailywtf.com/articles/born-single",
    "description": "Alistair sends us a pretty big blob of code, but it's a blob which touches upon everyone's favorite design pattern: the singleton. It's a lot of Java code, so we're going to take this as chunks. Let's start with the two methods responsible for constructing the object. The purpose of this code is to parse an XML file, and construct a mapping from a \"name\" field in the XML to a \"batch descriptor\". /** * Instantiates a new batch manager. */ private BatchManager() { try { final XMLReader xmlReader = XMLReaderFactory.createXMLReader(); xmlReader.setContentHandler(this); xmlReader.parse(new InputSource(this.getClass().getClassLoader().getResourceAsStream(\"templates/\" + DOCUMENT))); } catch (final Exception e) { logger.error(\"Error parsing Batch XML.\", e); } } /* * (non-Javadoc) * * @see nz.this.is.absolute.crap.sax.XMLEntity#initChild(java.lang.String, * java.lang.String, java.lang.String, org.xml.sax.Attributes) */ @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { final BatchDescriptor batchDescriptor = new BatchDescriptor(); // put it in the map batchMap.put(attributes.getValue(\"name\"), batchDescriptor); return batchDescriptor; } Here we see a private constructor, which is reasonable for a singleton. It creates a SAX based reader. SAX is event driven- instead of loading the whole document into a DOM, it emits an event as it encounters each new key element in the XML document. It's cumbersome to use, but far more memory efficient, and I'd hardly say this.is.absolute.crap, but whatever. This code is perfectly reasonable. But do you know what's unreasonable? There's a lot more code, and these are the only things not marked as static. So let's keep going. // singleton instance so that static batch map can be initialised using // xml /** The Constant singleton. */ @SuppressWarnings(\"unused\") private static final Object singleton = new BatchManager(); Wait… why is the singleton object throwing warnings about being unused? And wait a second, what is that comment saying, \"so the static batch map can be initalalised\"? I saw a batchMap up in the initChild method above, but it can't be… private static Map batchMap = new HashMap(); Oh. Oh no. /** * Gets the. * * @param batchName * the batch name * * @return the batch descriptor */ public static BatchDescriptor get(String batchName) { return batchMap.get(batchName); } /** * Gets the post to selector name. * * @param batchName * the batch name * * @return the post to selector name */ public static String getPostToSelectorName(String batchName) { final BatchDescriptor batchDescriptor = batchMap.get(batchName); if (batchDescriptor == null) { return null; } return batchDescriptor.getPostTo(); } There are more methods, and I'll share the whole code at the end, but this gives us a taste. Here's what this code is actually doing. It creates a static Map. static, in this context, means that this instance is shared across all instances of BatchManager.They also create a static instance of BatchManager inside of itself. The constructor of that instance then executes, populating that static Map. Now, when anyone invokes BatchManager.get it will use that static Map to resolve that. This certainly works, and it offers a certain degree of cleanness in its implementation. A more conventional singleton would have the Map being owned by an instance, and it's just using the singleton convention to ensure there's only a single instance. This version's calling convention is certainly nicer than doing something like BatchManager.getInstance().get(…), but there's just something unholy about this that sticks into me. I can't say for certain if it's because I just hate Singletons, or if it's this specific abuse of constructors and static members. This is certainly one of the cases of misusing a singleton- it does not represent something there can be only one of, it's ensuring that an expensive computation is only allowed to be done once. There are better ways to handle that lifecycle. This approach also forces that expensive operation to happen at application startup, instead of being something flexible that can be evaluated lazily. It's not wrong to do this eagerly, but building something that can only do it eagerly is a mistake. In any case, the full code submission follows: package nz.this.is.absolute.crap.server.template; import java.io.IOException; import java.util.ArrayList; import java.util.Collection; import java.util.HashMap; import java.util.Iterator; import java.util.Map; import java.util.ResourceBundle; import nz.this.is.absolute.crap.KupengaException; import nz.this.is.absolute.crap.SafeComparator; import nz.this.is.absolute.crap.sax.XMLEntity; import nz.this.is.absolute.crap.selector.Selector; import nz.this.is.absolute.crap.selector.SelectorItem; import nz.this.is.absolute.crap.server.BatchValidator; import nz.this.is.absolute.crap.server.Validatable; import nz.this.is.absolute.crap.server.ValidationException; import nz.this.is.absolute.crap.server.business.BusinessObject; import nz.this.is.absolute.crap.server.database.EntityHandler; import nz.this.is.absolute.crap.server.database.SQLEntityHandler; import org.apache.log4j.Logger; import org.xml.sax.Attributes; import org.xml.sax.ContentHandler; import org.xml.sax.InputSource; import org.xml.sax.SAXException; import org.xml.sax.XMLReader; import org.xml.sax.helpers.XMLReaderFactory; /** * The Class BatchManager. */ public class BatchManager extends XMLEntity { private static final Logger logger = Logger.getLogger(BatchManager.class); /** The Constant DOCUMENT. */ private final static String DOCUMENT = \"Batches.xml\"; /** * The Class BatchDescriptor. */ public class BatchDescriptor extends XMLEntity { /** The batchSelectors. */ private final Collection batchSelectors = new ArrayList(); /** The dependentCollections. */ private final Collection dependentCollections = new ArrayList(); /** The directSelectors. */ private final Collection directSelectors = new ArrayList(); /** The postTo. */ private String postTo; /** The properties. */ private final Collection properties = new ArrayList(); /** * Gets the batch selectors iterator. * * @return the batch selectors iterator */ public Iterator getBatchSelectorsIterator() { return this.batchSelectors.iterator(); } /** * Gets the dependent collections iterator. * * @return the dependent collections iterator */ public Iterator getDependentCollectionsIterator() { return this.dependentCollections.iterator(); } /** * Gets the post to. * * @return the post to */ public String getPostTo() { return this.postTo; } /** * Gets the post to business object. * * @param businessObject * the business object * @param postHandler * the post handler * * @return the post to business object * * @throws ValidationException * the validation exception */ private BusinessObject getPostToBusinessObject( BusinessObject businessObject, EntityHandler postHandler) throws ValidationException { if (this.postTo == null) { return null; } final BusinessObject postToBusinessObject = businessObject .getBusinessObjectFromMap(this.postTo, postHandler); // copy properties for (final String propertyName : this.properties) { String postToPropertyName; if (\"postToStatus\".equals(propertyName)) { // status field on batch entity refers to the batch entity // itself // so postToStatus is used for updating the status property // of the postToBusinessObject itself postToPropertyName = \"status\"; } else { postToPropertyName = propertyName; } final SelectorItem destinationItem = postToBusinessObject .find(postToPropertyName); if (destinationItem != null) { final Object oldValue = destinationItem.getValue(); final Object newValue = businessObject.get(propertyName); if (SafeComparator.areDifferent(oldValue, newValue)) { destinationItem.setValue(newValue); } } } // copy direct selectors for (final String selectorName : this.directSelectors) { final SelectorItem destinationItem = postToBusinessObject .find(selectorName); if (destinationItem != null) { // get the old and new values for the selectors Selector oldSelector = (Selector) destinationItem .getValue(); Selector newSelector = (Selector) businessObject .get(selectorName); // strip them down to bare identifiers for comparison if (oldSelector != null) { oldSelector = oldSelector.getAsIdentifier(); } if (newSelector != null) { newSelector = newSelector.getAsIdentifier(); } // if they're different then update if (SafeComparator.areDifferent(oldSelector, newSelector)) { destinationItem.setValue(newSelector); } } } // copy batch selectors for (final String batchSelectorName : this.batchSelectors) { final Selector batchSelector = (Selector) businessObject .get(batchSelectorName); if (batchSelector == null) { throw new ValidationException( \"\\\"PostTo\\\" selector missing.\"); } final BusinessObject batchObject = postHandler .find(batchSelector); if (batchObject != null) { // get the postTo selector for the batch object we depend on final BatchDescriptor batchDescriptor = batchMap .get(batchObject.getName()); if (batchDescriptor.postTo != null \u0026\u0026 postToBusinessObject .containsKey(batchDescriptor.postTo)) { final Selector realSelector = batchObject .getBusinessObjectFromMap( batchDescriptor.postTo, postHandler); postToBusinessObject.put(batchDescriptor.postTo, realSelector); } } } businessObject.put(this.postTo, postToBusinessObject); return postToBusinessObject; } /* * (non-Javadoc) * * @see * nz.this.is.absolute.crap.sax.XMLEntity#initChild(java.lang.String, * java.lang.String, java.lang.String, org.xml.sax.Attributes) */ @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { if (\"Properties\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.properties.add(attributes .getValue(\"name\")); return null; } }; } else if (\"DirectSelectors\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.directSelectors.add(attributes .getValue(\"name\")); return null; } }; } else if (\"BatchSelectors\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.batchSelectors.add(attributes .getValue(\"name\")); return null; } }; } else if (\"PostTo\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.postTo = attributes .getValue(\"name\"); return null; } }; } else if (\"DependentCollections\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.dependentCollections .add(attributes.getValue(\"name\")); return null; } }; } return null; } } /** The batchMap. */ private static Map batchMap = new HashMap(); /** * Gets the. * * @param batchName * the batch name * * @return the batch descriptor */ public static BatchDescriptor get(String batchName) { return batchMap.get(batchName); } /** * Gets the post to selector name. * * @param batchName * the batch name * * @return the post to selector name */ public static String getPostToSelectorName(String batchName) { final BatchDescriptor batchDescriptor = batchMap.get(batchName); if (batchDescriptor == null) { return null; } return batchDescriptor.getPostTo(); } // singleton instance so that static batch map can be initialised using // xml /** The Constant singleton. */ @SuppressWarnings(\"unused\") private static final Object singleton = new BatchManager(); /** * Post. * * @param businessObject * the business object * * @throws Exception * the exception */ public static void post(BusinessObject businessObject) throws Exception { // validate the batch root object only - it can validate the rest if it // needs to if (businessObject instanceof Validatable) { if (!BatchValidator.validate(businessObject)) { logger.warn(String.format(\"Validating %s failed\", businessObject.getClass().getSimpleName())); throw new ValidationException( \"Batch did not validate - it was not posted\"); } ((Validatable) businessObject).validator().prepareToPost(); } final SQLEntityHandler postHandler = new SQLEntityHandler(true); final Iterator batchIterator = new BatchIterator( businessObject, null, postHandler); // iterate through batch again posting each object try { while (batchIterator.hasNext()) { post(batchIterator.next(), postHandler); } postHandler.commit(); } catch (final Exception e) { logger.error(\"Exception occurred while posting batches\", e); // something went wrong postHandler.rollback(); throw e; } return; } /** * Post. * * @param businessObject * the business object * @param postHandler * the post handler * * @throws KupengaException * the kupenga exception */ private static void post(BusinessObject businessObject, EntityHandler postHandler) throws KupengaException { if (businessObject == null) { return; } if (Boolean.TRUE.equals(businessObject.get(\"posted\"))) { return; } final BatchDescriptor batchDescriptor = batchMap.get(businessObject .getName()); final BusinessObject postToBusinessObject = batchDescriptor .getPostToBusinessObject(businessObject, postHandler); if (postToBusinessObject != null) { postToBusinessObject.save(postHandler); } businessObject.setItemValue(\"posted\", Boolean.TRUE); businessObject.save(postHandler); } /** * Instantiates a new batch manager. */ private BatchManager() { try { final XMLReader xmlReader = XMLReaderFactory.createXMLReader(); xmlReader.setContentHandler(this); xmlReader.parse(new InputSource(this.getClass().getClassLoader().getResourceAsStream(\"templates/\" + DOCUMENT))); } catch (final Exception e) { logger.error(\"Error parsing Batch XML.\", e); } } /* * (non-Javadoc) * * @see nz.this.is.absolute.crap.sax.XMLEntity#initChild(java.lang.String, * java.lang.String, java.lang.String, org.xml.sax.Attributes) */ @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { final BatchDescriptor batchDescriptor = new BatchDescriptor(); // put it in the map batchMap.put(attributes.getValue(\"name\"), batchDescriptor); return batchDescriptor; } } .comment { border: none; } [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
    "author": "Remy Porter",
    "published": "Tue, 15 Jul 2025 06:30:00 GMT",
    "image": "https://thedailywtf.com/images/inedo/proget-icon.png",
    "source": "http://syndication.thedailywtf.com/TheDailyWtf",
    "categories": [
      "CodeSOD"
    ]
  },
  {
    "id": "7245c406-c1c1-49a4-9a17-28719a91d470",
    "title": "CodeSOD: Back Up for a Moment",
    "link": "https://thedailywtf.com/articles/back-up-for-a-moment",
    "description": "James's team has a pretty complicated deployment process implemented as a series of bash scripts. The deployment is complicated, the scripts doing the deployment are complicated, and failures mid-deployment are common. That means they need to gracefully roll back, and they way they do that is by making backup copies of the modified files. This is how they do that. DATE=`date '+%Y%m%d'` BACKUPDIR=`dirname ${DESTINATION}`/backup if [ ! -d $BACKUPDIR ] then echo \"Creating backup directory ...\" mkdir -p $BACKUPDIR fi FILENAME=`basename ${DESTINATION}` BACKUPFILETYPE=${BACKUPDIR}/${FILENAME}.${DATE} BACKUPFILE=${BACKUPFILETYPE}-1 if [ -f ${BACKUPFILE} ] || [ -f ${BACKUPFILE}.gz ] ; then BACKUPFILE=${BACKUPFILETYPE}-2 ; fi if [ -f ${BACKUPFILE} ] || [ -f ${BACKUPFILE}.gz ] ; then BACKUPFILE=${BACKUPFILETYPE}-3 ; fi if [ -f ${BACKUPFILE} ] || [ -f ${BACKUPFILE}.gz ] ; then BACKUPFILE=${BACKUPFILETYPE}-4 ; fi if [ -f ${BACKUPFILE} ] || [ -f ${BACKUPFILE}.gz ] ; then BACKUPFILE=${BACKUPFILETYPE}-5 ; fi if [ -f ${BACKUPFILE} ] || [ -f ${BACKUPFILE}.gz ] ; then BACKUPFILE=${BACKUPFILETYPE}-6 ; fi if [ -f ${BACKUPFILE} ] || [ -f ${BACKUPFILE}.gz ] ; then BACKUPFILE=${BACKUPFILETYPE}-7 ; fi if [ -f ${BACKUPFILE} ] || [ -f ${BACKUPFILE}.gz ] ; then BACKUPFILE=${BACKUPFILETYPE}-8 ; fi if [ -f ${BACKUPFILE} ] || [ -f ${BACKUPFILE}.gz ] ; then BACKUPFILE=${BACKUPFILETYPE}-9 ; fi if [ -f ${BACKUPFILE} ] || [ -f ${BACKUPFILE}.gz ] ; then cat \u003c\u003cEOF You have already had 9 rates releases in one day. ${BACKUPFILE} already exists, do it manually !!! EOF exit 2 fi Look, I know that loops in bash can be annoying, but they're not that annoying. This code creates a backup directory (if it doesn't already exist), and then creates a file name for the file we're about to backup, in the form OriginalName.Ymd-n.gz. It tests to see if this file exists, and if it does, it increments n by one. It does this until either it finds a file name that doesn't exist, or it hits 9, at which point it gives you a delightfully passive aggressive message: You have already had 9 rates releases in one day. ${BACKUPFILE} already exists, do it manually !!! Yeah, do it manually. Now, admittedly, I don't think a lot of folks want to do more than 9 releases in a given day, but there's no reason why they couldn't just keep trying until they find a good filename. Or even better, require each release to have an identifier (like the commit or build number or whatever) and then use that for the filenames. Of course, just fixing this copy doesn't address the real WTF, because we laid out the real WTF in the first paragraph: deployment is a series of complicated bash scripts doing complicated steps that can fail all the time. I've worked in places like that, and it's always a nightmare. There are better tools! Our very own Alex has his product, of course, but there are a million ways to get your builds repeatable and reliable that don't involve BuildMaster but also don't involve fragile scripts. Please, please use one of those. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
    "author": "Remy Porter",
    "published": "Mon, 14 Jul 2025 06:30:00 GMT",
    "image": "",
    "source": "http://syndication.thedailywtf.com/TheDailyWtf",
    "categories": [
      "CodeSOD"
    ]
  },
  {
    "id": "1dcacd50-304d-4c8a-9523-5b013cb80915",
    "title": "They're doing it again",
    "link": "http://theoatmeal.com/comics/squirrel_filming?no_popup=1",
    "description": "A comic about an old couple recording a video of a squirrel and a cat.View on my website",
    "author": "Matthew Inman",
    "published": "2025-07-15T15:21:11+01:00",
    "image": "https://s3.amazonaws.com/theoatmeal-img/thumbnails/squirrel_filming_big.png",
    "source": "http://feeds.feedburner.com/oatmealfeed",
    "categories": null
  },
  {
    "id": "abbb1179-1834-47c8-abd0-02ce740ff06e",
    "title": "A toddler tells a joke",
    "link": "http://theoatmeal.com/comics/toddler_joke?no_popup=1",
    "description": "A comic about a toddler telling his first joke.View on my website",
    "author": "Matthew Inman",
    "published": "2025-07-09T21:58:45+01:00",
    "image": "https://s3.amazonaws.com/theoatmeal-img/thumbnails/toddler_joke_big.png",
    "source": "http://feeds.feedburner.com/oatmealfeed",
    "categories": null
  },
  {
    "id": "bca571b5-4655-463d-8e98-b5b0d75ab972",
    "title": "Hacked Elmo Account Posts Antisemitic Messages",
    "link": "https://theonion.com/hacked-elmo-account-posts-antisemitic-messages/",
    "description": "Popular Muppet character Elmo’s verified X account was hijacked, resulting in the posting of antisemitic and racist content before it was secured. What do you think? The post Hacked Elmo Account Posts Antisemitic Messages appeared first on The Onion.",
    "author": "The Onion Staff",
    "published": "Tue, 15 Jul 2025 22:01:04 +0000",
    "image": "https://theonion.com/wp-content/uploads/2025/05/Face-Black.jpg?w=200",
    "source": "https://www.theonion.com/rss",
    "categories": [
      "American Voices",
      "Social Media",
      "Vol 61: Issue 29"
    ]
  },
  {
    "id": "979ff492-933a-4cb0-851b-83d096e1c0b0",
    "title": "Yorgos Lanthimos Figures He 3 Films Away From Hanging With Emma Stone Outside Work",
    "link": "https://theonion.com/yorgos-lanthimos-figures-he-3-films-away-from-hanging-with-emma-stone-outside-work/",
    "description": "ATHENS, GREECE—Longing for the day they might cross the threshold from work friends to real friends, director Yorgos Lanthimos reportedly calculated Tuesday that he was only three films away from getting to hang out with Emma Stone outside of work. “I can feel it, I’m just one twisted period dramedy and two surrealist nightmares away […] The post Yorgos Lanthimos Figures He 3 Films Away From Hanging With Emma Stone Outside Work  appeared first on The Onion.",
    "author": "The Onion Staff",
    "published": "Tue, 15 Jul 2025 20:27:10 +0000",
    "image": "",
    "source": "https://www.theonion.com/rss",
    "categories": [
      "Entertainment",
      "Movies",
      "Vol 61: Issue 29"
    ]
  }
]
