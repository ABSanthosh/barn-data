{
  "id": "0fed8a88-8d21-4da9-9041-b10d739b1b86",
  "title": "Broadcastarr: Stream web content through your Jellyfin instance",
  "link": "https://github.com/Billos/Broadcastarr",
  "description": "Article URL: https://github.com/Billos/Broadcastarr Comments URL: https://news.ycombinator.com/item?id=42210022 Points: 10 # Comments: 10",
  "author": "thunderbong",
  "published": "Fri, 22 Nov 2024 00:13:00 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "Billos",
  "length": 6329,
  "excerpt": "Stream web content through your Jellyfin instance. Contribute to Billos/Broadcastarr development by creating an account on GitHub.",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "Broadcastarr Broadcastarr is a service that allows you to broadcast media content retrieved from web pages. Features AgendaTS The different actions are split into tasks that are handled by the AgendaTS service. The tasks are: Publish category Ensures that the active categories are published, and starts indexing the categories for each active indexer. Index category Indexes the category for each a given indexer, schedules the next indexation and the grabbing of the broadcast stream. Grab broadcast stream Grabs the broadcast stream for each broadcast in the category, schedules the release of the broadcast. Release broadcast Releases the broadcast to the active releasers, schedules the publishing of associated group. Publish group Publishes the group to the active publishers. Update category channel name Updates the category channel name on the active publishers. Delete broadcast Deletes the broadcast. Discord Bot Handles interactions and commands via Discord. If no authorization was set, the bot will be available to everyone. Available commands: addcategory addrole indexcategory removecategory setcategoryemoji setconfig setgroupemoji togglegroup toggleindexer Releaser A releaser is a service that can read the broadcasts. Implemented releasers: Jellyfin Publisher A publisher is a service that can publish the categories, groups and broadcasts to different platforms. Implemented publishers: Discord Matrix Scalability The service is designed to be scalable and can be deployed on multiple instances. VPN The docker compose includes a Wireguard client that allows the workers to scrape and grab the broadcasts from the web pages through a VPN. The used configuration file is ./wg0.conf. Installation First you need to create the env files and fill them with the correct values. cp .env.default .env cp .env.init.default .env.init Then you need to initialize the database and shut it down. docker compose up init docker compose down init Finally you can start the service. docker compose up -d server worker Additionally you can have multiple workers in the compose file to handle more tasks at the same time. Configuration Initialization In the .env.init file: Set the different delay values (in second). Set the limit values (in minutes). Set the Categories to create with their respective emoji. CATEGORIES_EMOJI=Football:‚öΩ,Basketball:üèÄ Set the groups to create with their respective category and country. GROUPS=\"Football:France*Ligue 1,Spain*La Liga|Basketball:USA*NBA\" Set the discord webhookks to activate. DISCORD_WEBHOOKS=\"Football:id:token,Rugby:id:token\" Add the definitions of the indexers as json files in the ./src/init/data type Replacement = { regex: RegExp; replace: string; } type DateReplacement = { regex: RegExp; format: string; } type Selector = { path: string; } type TextContentSelector = Selector \u0026 { attribute?: string; replacement?: Replacement; } type DateSelector = TextContentSelector \u0026 { format?: string; dateReplacement?: DateReplacement; } type RegexSelector\u003cT extends Record\u003cstring, string\u003e\u003e = TextContentSelector \u0026 { regex: RegExp; default?: T; } { \"name\": string, \"url\": string, \"active\": boolean, // The data to configure the indexation \"data\": { \"category\": { // The links to retrieve the categories \"links\": Selector[], // When set, the lookup is a map category =\u003e strings to look for in the category name in the links textContent retrieved by the links selectors \"lookups\": Map\u003cstring, string[]\u003e, }, // Element to wait before looking for links \"loadPageElement\": string, // Broadcasts can be grouped by sets, in this case we start by looking for the day \"broadcastSets\": { // The selectors to retrieve the sets of broadcasts \"selector\": Selector[], // The selectors to retrieve the day \"day\": DateSelector[], // Some sites have a \"today\" string instead of the current date, in this case we need to replace it \"today\": { \"regex\": string, \"format\": string, }, }, // The selectors to retrieve the broadcasts, is run in the context of the set, or the page if not set \"broadcast\": { // The selectors to retrieve the broadcasts \"selector\": Selector[], // The selectors to retrieve the broadcast start time, is run in the context of the broadcast \"startTime\": DateSelector[], // The selectors to retrieve the broadcast link, is run in the context of the broadcast \"link\": TextContentSelector[], // The selectors to retrieve the broadcast title, is run in the context of the broadcast \"name\": TextContentSelector[], // The selectors to retrieve the broadcast group, is run in the context of the broadcast \"group\": RegexSelector[], }, // The selectors to retrieve the next page link, as long as there is a next page, and the broadcastSets start before the future limit, we go to the next page and continue the indexation \"nextPage\": Selector[], }, // The data to configure the grabbing \"interceptorData\": { // Element to wait before looking for stream items \"loadPageElement\": string, // The selectors to retrieve the stream items \"streamItems\": Selector[], // The selectors to retrieve the score of the broadcast, is run in the context of the stream item \"positiveScores\": Selector[], // The selectors to retrieve the link of the broadcast, is run in the context of the stream item \"link\": TextContentSelector[], // If set, we go to the link(s) previously found with a referer header \"referer\": string, // If set, we click on the items found (play button for instance) \"clickButton\": Selector[], } } Server \u0026 Workers Fill the .env file with the correct values. Roadmap [] Unit tests [] Configuration to activate / deactivate publishers [] Discord bot commands to activate / deactivate publishers [] Configuration to activate / deactivate releasers [] Discord bot commands to activate / deactivate releasers [] Working API for TheSportsDB [] Option to reload a stream when proxying has been requested [] Script for versioning \u0026 automated changelog generation with the releases [] Create docker image that does not mount the src folder [] Improve doc with screenshots",
  "image": "https://opengraph.githubassets.com/f4a3554a0ea238535b280745e165ccbbd2ecab2b1341128087400229893d6cf9/Billos/Broadcastarr",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eBroadcastarr\u003c/h2\u003e\u003ca id=\"user-content-broadcastarr\" aria-label=\"Permalink: Broadcastarr\" href=\"#broadcastarr\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBroadcastarr is a service that allows you to broadcast media content retrieved from web pages.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eFeatures\u003c/h2\u003e\u003ca id=\"user-content-features\" aria-label=\"Permalink: Features\" href=\"#features\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eAgendaTS\u003c/h3\u003e\u003ca id=\"user-content-agendats\" aria-label=\"Permalink: AgendaTS\" href=\"#agendats\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe different actions are split into tasks that are handled by the AgendaTS service.\nThe tasks are:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003ePublish category\nEnsures that the active categories are published, and starts indexing the categories for each active indexer.\u003c/li\u003e\n\u003cli\u003eIndex category\nIndexes the category for each a given indexer, schedules the next indexation and the grabbing of the broadcast stream.\u003c/li\u003e\n\u003cli\u003eGrab broadcast stream\nGrabs the broadcast stream for each broadcast in the category, schedules the release of the broadcast.\u003c/li\u003e\n\u003cli\u003eRelease broadcast\nReleases the broadcast to the active releasers, schedules the publishing of associated group.\u003c/li\u003e\n\u003cli\u003ePublish group\nPublishes the group to the active publishers.\u003c/li\u003e\n\u003cli\u003eUpdate category channel name\nUpdates the category channel name on the active publishers.\u003c/li\u003e\n\u003cli\u003eDelete broadcast\nDeletes the broadcast.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eDiscord Bot\u003c/h3\u003e\u003ca id=\"user-content-discord-bot\" aria-label=\"Permalink: Discord Bot\" href=\"#discord-bot\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHandles interactions and commands via Discord.\nIf no authorization was set, the bot will be available to everyone.\nAvailable commands:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eaddcategory\u003c/li\u003e\n\u003cli\u003eaddrole\u003c/li\u003e\n\u003cli\u003eindexcategory\u003c/li\u003e\n\u003cli\u003eremovecategory\u003c/li\u003e\n\u003cli\u003esetcategoryemoji\u003c/li\u003e\n\u003cli\u003esetconfig\u003c/li\u003e\n\u003cli\u003esetgroupemoji\u003c/li\u003e\n\u003cli\u003etogglegroup\u003c/li\u003e\n\u003cli\u003etoggleindexer\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eReleaser\u003c/h3\u003e\u003ca id=\"user-content-releaser\" aria-label=\"Permalink: Releaser\" href=\"#releaser\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA releaser is a service that can read the broadcasts.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eImplemented releasers:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eJellyfin\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003ePublisher\u003c/h3\u003e\u003ca id=\"user-content-publisher\" aria-label=\"Permalink: Publisher\" href=\"#publisher\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eA publisher is a service that can publish the categories, groups and broadcasts to different platforms.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eImplemented publishers:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eDiscord\u003c/li\u003e\n\u003cli\u003eMatrix\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eScalability\u003c/h3\u003e\u003ca id=\"user-content-scalability\" aria-label=\"Permalink: Scalability\" href=\"#scalability\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe service is designed to be scalable and can be deployed on multiple instances.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eVPN\u003c/h3\u003e\u003ca id=\"user-content-vpn\" aria-label=\"Permalink: VPN\" href=\"#vpn\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe docker compose includes a Wireguard client that allows the workers to scrape and grab the broadcasts from the web pages through a VPN.\nThe used configuration file is ./wg0.conf.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eInstallation\u003c/h2\u003e\u003ca id=\"user-content-installation\" aria-label=\"Permalink: Installation\" href=\"#installation\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFirst you need to create the env files and fill them with the correct values.\u003c/p\u003e\n\u003cdiv data-snippet-clipboard-copy-content=\"cp .env.default .env\ncp .env.init.default .env.init\"\u003e\u003cpre\u003e\u003ccode\u003ecp .env.default .env\ncp .env.init.default .env.init\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eThen you need to initialize the database and shut it down.\u003c/p\u003e\n\u003cdiv data-snippet-clipboard-copy-content=\"docker compose up init\ndocker compose down init\"\u003e\u003cpre\u003e\u003ccode\u003edocker compose up init\ndocker compose down init\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eFinally you can start the service.\u003c/p\u003e\n\u003cdiv data-snippet-clipboard-copy-content=\"docker compose up -d server worker\"\u003e\u003cpre\u003e\u003ccode\u003edocker compose up -d server worker\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAdditionally you can have multiple workers in the compose file to handle more tasks at the same time.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eConfiguration\u003c/h2\u003e\u003ca id=\"user-content-configuration\" aria-label=\"Permalink: Configuration\" href=\"#configuration\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eInitialization\u003c/h3\u003e\u003ca id=\"user-content-initialization\" aria-label=\"Permalink: Initialization\" href=\"#initialization\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIn the .env.init file:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eSet the different delay values (in second).\u003c/li\u003e\n\u003cli\u003eSet the limit values (in minutes).\u003c/li\u003e\n\u003cli\u003eSet the Categories to create with their respective emoji.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"CATEGORIES_EMOJI=Football:‚öΩ,Basketball:üèÄ\"\u003e\u003cpre\u003e\u003cspan\u003eCATEGORIES_EMOJI\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003eFootball:‚öΩ,Basketball:üèÄ\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eSet the groups to create with their respective category and country.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"GROUPS=\u0026#34;Football:France*Ligue 1,Spain*La Liga|Basketball:USA*NBA\u0026#34;\"\u003e\u003cpre\u003e\u003cspan\u003eGROUPS\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eFootball:France*Ligue 1,Spain*La Liga|Basketball:USA*NBA\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eSet the discord webhookks to activate.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"DISCORD_WEBHOOKS=\u0026#34;Football:id:token,Rugby:id:token\u0026#34;\"\u003e\u003cpre\u003e\u003cspan\u003eDISCORD_WEBHOOKS\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003eFootball:id:token,Rugby:id:token\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003eAdd the definitions of the indexers as json files in the ./src/init/data\u003c/p\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"type Replacement = {\n  regex: RegExp;\n  replace: string;\n}\n\ntype DateReplacement = {\n  regex: RegExp;\n  format: string;\n}\n\ntype Selector = {\n  path: string;\n}\n\ntype TextContentSelector = Selector \u0026amp; {\n  attribute?: string;\n  replacement?: Replacement;\n}\n\ntype DateSelector = TextContentSelector \u0026amp; {\n  format?: string;\n  dateReplacement?: DateReplacement;\n}\n\ntype RegexSelector\u0026lt;T extends Record\u0026lt;string, string\u0026gt;\u0026gt; = TextContentSelector \u0026amp; {\n  regex: RegExp;\n  default?: T;\n}\"\u003e\u003cpre\u003e\u003cspan\u003etype\u003c/span\u003e \u003cspan\u003eReplacement\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eregex\u003c/span\u003e: \u003cspan\u003eRegExp\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003ereplace\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003etype\u003c/span\u003e \u003cspan\u003eDateReplacement\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eregex\u003c/span\u003e: \u003cspan\u003eRegExp\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003eformat\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003etype\u003c/span\u003e \u003cspan\u003eSelector\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003epath\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003etype\u003c/span\u003e \u003cspan\u003eTextContentSelector\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eSelector\u003c/span\u003e \u003cspan\u003e\u0026amp;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eattribute\u003c/span\u003e?: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003ereplacement\u003c/span\u003e?: \u003cspan\u003eReplacement\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003etype\u003c/span\u003e \u003cspan\u003eDateSelector\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTextContentSelector\u003c/span\u003e \u003cspan\u003e\u0026amp;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eformat\u003c/span\u003e?: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003edateReplacement\u003c/span\u003e?: \u003cspan\u003eDateReplacement\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003etype\u003c/span\u003e \u003cspan\u003eRegexSelector\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eT\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eRecord\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eTextContentSelector\u003c/span\u003e \u003cspan\u003e\u0026amp;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003eregex\u003c/span\u003e: \u003cspan\u003eRegExp\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n  \u003cspan\u003edefault\u003c/span\u003e?: \u003cspan\u003eT\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  \u0026#34;name\u0026#34;: string,\n  \u0026#34;url\u0026#34;: string,\n  \u0026#34;active\u0026#34;: boolean,\n  // The data to configure the indexation\n  \u0026#34;data\u0026#34;: {\n    \u0026#34;category\u0026#34;: {\n      // The links to retrieve the categories\n      \u0026#34;links\u0026#34;: Selector[],\n      // When set, the lookup is a map category =\u0026gt; strings to look for in the category name in the links textContent retrieved by the links selectors\n      \u0026#34;lookups\u0026#34;: Map\u0026lt;string, string[]\u0026gt;,\n    },\n    // Element to wait before looking for links\n    \u0026#34;loadPageElement\u0026#34;: string,\n    // Broadcasts can be grouped by sets, in this case we start by looking for the day\n    \u0026#34;broadcastSets\u0026#34;: {\n        // The selectors to retrieve the sets of broadcasts\n        \u0026#34;selector\u0026#34;: Selector[],\n        // The selectors to retrieve the day\n        \u0026#34;day\u0026#34;: DateSelector[],\n        // Some sites have  a \u0026#34;today\u0026#34; string instead of the current date, in this case we need to replace it\n        \u0026#34;today\u0026#34;: {\n        \u0026#34;regex\u0026#34;: string,\n        \u0026#34;format\u0026#34;: string,\n        },\n    },\n    // The selectors to retrieve the broadcasts, is run in the context of the set, or the page if not set\n    \u0026#34;broadcast\u0026#34;: {\n      // The selectors to retrieve the broadcasts\n      \u0026#34;selector\u0026#34;: Selector[],\n      // The selectors to retrieve the broadcast start time, is run in the context of the broadcast\n      \u0026#34;startTime\u0026#34;: DateSelector[],\n      // The selectors to retrieve the broadcast link, is run in the context of the broadcast\n      \u0026#34;link\u0026#34;: TextContentSelector[],\n      // The selectors to retrieve the broadcast title, is run in the context of the broadcast\n      \u0026#34;name\u0026#34;: TextContentSelector[],\n      // The selectors to retrieve the broadcast group, is run in the context of the broadcast\n      \u0026#34;group\u0026#34;: RegexSelector[],\n    },\n    // The selectors to retrieve the next page link, as long as there is a next page, and the broadcastSets start before the future limit, we go to the next page and continue the indexation\n    \u0026#34;nextPage\u0026#34;: Selector[],\n  },\n  // The data to configure the grabbing\n  \u0026#34;interceptorData\u0026#34;: {\n    // Element to wait before looking for stream items\n    \u0026#34;loadPageElement\u0026#34;: string,\n    // The selectors to retrieve the stream items\n    \u0026#34;streamItems\u0026#34;: Selector[],\n    // The selectors to retrieve the score of the broadcast, is run in the context of the stream item\n    \u0026#34;positiveScores\u0026#34;: Selector[],\n    // The selectors to retrieve the link of the broadcast, is run in the context of the stream item\n    \u0026#34;link\u0026#34;: TextContentSelector[],\n    // If set, we go to the link(s) previously found with a referer header\n    \u0026#34;referer\u0026#34;: string,\n    // If set, we click on the items found (play button for instance)\n    \u0026#34;clickButton\u0026#34;: Selector[],\n  }\n}\"\u003e\u003cpre\u003e\u003cspan\u003e{\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;url\u0026#34;\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;active\u0026#34;\u003c/span\u003e: \u003cspan\u003eboolean\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e// The data to configure the indexation\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;data\u0026#34;\u003c/span\u003e: \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;category\u0026#34;\u003c/span\u003e: \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e// The links to retrieve the categories\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;links\u0026#34;\u003c/span\u003e: \u003cspan\u003eSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e// When set, the lookup is a map category =\u0026gt; strings to look for in the category name in the links textContent retrieved by the links selectors\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;lookups\u0026#34;\u003c/span\u003e: \u003cspan\u003eMap\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e string\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// Element to wait before looking for links\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;loadPageElement\u0026#34;\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// Broadcasts can be grouped by sets, in this case we start by looking for the day\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;broadcastSets\u0026#34;\u003c/span\u003e: \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e// The selectors to retrieve the sets of broadcasts\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;selector\u0026#34;\u003c/span\u003e: \u003cspan\u003eSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e// The selectors to retrieve the day\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;day\u0026#34;\u003c/span\u003e: \u003cspan\u003eDateSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e// Some sites have  a \u0026#34;today\u0026#34; string instead of the current date, in this case we need to replace it\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;today\u0026#34;\u003c/span\u003e: \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;regex\u0026#34;\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;format\u0026#34;\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// The selectors to retrieve the broadcasts, is run in the context of the set, or the page if not set\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;broadcast\u0026#34;\u003c/span\u003e: \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e// The selectors to retrieve the broadcasts\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;selector\u0026#34;\u003c/span\u003e: \u003cspan\u003eSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e// The selectors to retrieve the broadcast start time, is run in the context of the broadcast\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;startTime\u0026#34;\u003c/span\u003e: \u003cspan\u003eDateSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e// The selectors to retrieve the broadcast link, is run in the context of the broadcast\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;link\u0026#34;\u003c/span\u003e: \u003cspan\u003eTextContentSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e// The selectors to retrieve the broadcast title, is run in the context of the broadcast\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e: \u003cspan\u003eTextContentSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e// The selectors to retrieve the broadcast group, is run in the context of the broadcast\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;group\u0026#34;\u003c/span\u003e: \u003cspan\u003eRegexSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// The selectors to retrieve the next page link, as long as there is a next page, and the broadcastSets start before the future limit, we go to the next page and continue the indexation\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;nextPage\u0026#34;\u003c/span\u003e: \u003cspan\u003eSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e// The data to configure the grabbing\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;interceptorData\u0026#34;\u003c/span\u003e: \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Element to wait before looking for stream items\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;loadPageElement\u0026#34;\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// The selectors to retrieve the stream items\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;streamItems\u0026#34;\u003c/span\u003e: \u003cspan\u003eSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// The selectors to retrieve the score of the broadcast, is run in the context of the stream item\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;positiveScores\u0026#34;\u003c/span\u003e: \u003cspan\u003eSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// The selectors to retrieve the link of the broadcast, is run in the context of the stream item\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;link\u0026#34;\u003c/span\u003e: \u003cspan\u003eTextContentSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// If set, we go to the link(s) previously found with a referer header\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;referer\u0026#34;\u003c/span\u003e: \u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e// If set, we click on the items found (play button for instance)\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;clickButton\u0026#34;\u003c/span\u003e: \u003cspan\u003eSelector\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 tabindex=\"-1\" dir=\"auto\"\u003eServer \u0026amp; Workers\u003c/h3\u003e\u003ca id=\"user-content-server--workers\" aria-label=\"Permalink: Server \u0026amp; Workers\" href=\"#server--workers\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFill the .env file with the correct values.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eRoadmap\u003c/h2\u003e\u003ca id=\"user-content-roadmap\" aria-label=\"Permalink: Roadmap\" href=\"#roadmap\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003e[] Unit tests\u003c/li\u003e\n\u003cli\u003e[] Configuration to activate / deactivate publishers\u003c/li\u003e\n\u003cli\u003e[] Discord bot commands to activate / deactivate publishers\u003c/li\u003e\n\u003cli\u003e[] Configuration to activate / deactivate releasers\u003c/li\u003e\n\u003cli\u003e[] Discord bot commands to activate / deactivate releasers\u003c/li\u003e\n\u003cli\u003e[] Working API for TheSportsDB\u003c/li\u003e\n\u003cli\u003e[] Option to reload a stream when proxying has been requested\u003c/li\u003e\n\u003cli\u003e[] Script for versioning \u0026amp; automated changelog generation with the releases\u003c/li\u003e\n\u003cli\u003e[] Create docker image that does not mount the src folder\u003c/li\u003e\n\u003cli\u003e[] Improve doc with screenshots\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
