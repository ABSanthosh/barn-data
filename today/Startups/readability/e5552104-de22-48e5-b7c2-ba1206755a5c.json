{
  "id": "e5552104-de22-48e5-b7c2-ba1206755a5c",
  "title": "EdgeDB is now Gel and Postgres is the future",
  "link": "https://www.geldata.com/blog/edgedb-is-now-gel-and-postgres-is-the-future",
  "description": "Article URL: https://www.geldata.com/blog/edgedb-is-now-gel-and-postgres-is-the-future Comments URL: https://news.ycombinator.com/item?id=43177931 Points: 30 # Comments: 27",
  "author": "mmastrac",
  "published": "Tue, 25 Feb 2025 21:47:06 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 6904,
  "excerpt": "EdgeDB is now Gel. New identity, renewed focus on delivering the best PostgreSQL data platform in the world.",
  "siteName": "",
  "favicon": "https://www.geldata.com/apple-touch-icon.png",
  "text": "We have news! EdgeDB is rebranding as Gel, more on that below. Let's talk about something else first. Something fascinating has been happening recently. PostgreSQL seems to be quietly eating the database world. It's not just topping the charts, its adoption momentum is accelerating. What's going on? The answer is right there in the PostgreSQL.org's tagline: The World's Most Advanced Open Source Relational Database It's not just an empty marketing boast. It's meaningful. Let's unpack, starting with what I think is the most important and consequential bit: Open Source. Regardless of source availability, most database systems on the market today (including MySQL) are developed by a commercial entity. Postgres is different. It got bootstrapped at Berkeley as a research project and released under a very liberal MIT-like license. A decently-sized user base formed and after the university stopped making new releases, the project (newly-renamed as PostgreSQL) was picked up by a group of motivated hackers and that's how Postgres as we know it still gets developed and released today. Arguably, this makes PostgreSQL the only mainsteam database system that is truly open-source. It can't be bought or license-rug-pulled and this creates a kind of trust that can't be emulated in any other way. I'm aware that the above might sound a bit funny coming from a co-founder of a VC-backed startup. Gel is Apache-licensed and we're about to future-proof that, stay tuned for a blog post. Now let's talk about the Advanced bit. When the POSTGRES project was begun at Berkeley in 1985, extensibility and modularity were made the cornerstones of its design. This is possibly one of the main factors that made PostgreSQL successful. Custom data types, index types and operators were there since the inception. PostgreSQL is a relational database at it's core, but with the ability to store (and index) JSON, spatial data, time series, vectors, it's arguably multimodal. Postgres might not be the best tool in any given use case, but it's good enough. Being able to run just one DBMS instead of 10 and do all the things you want to do is great! (Which is why, I think, most vector database startups are probably not going to make it in the long run.) Also, building Postgres extensions is fun and nowadays you can even do it in Rust. When it comes to actually running queries, PostgreSQL's query planner/optimizer is decidedly state-of-the-art. Given how much more compressed and expressive EdgeQL (Gel's query language) is compared to SQL, it's quite easy to write queries that translate to hundreds of kilobytes of SQL and Postgres usually chews through that without breaking a sweat. PostgreSQL is the cleanest and most documented C project of this scale, and the sheer quality of the codebase is what gives Postgres all of the powers mentioned above while also keeping it extremely stable and secure. So, yes, Postgres is the world's most advanced open source relational database (sorry, Sam!). What's even more fascinating is that Postgres seems to have been elevated to a sort of a de-facto standard. Have you noticed how almost every recent database startup claims or strives for PostgreSQL wire-protocol and SQL dialect compatibility? CockroachDB, YugabyteDB, TiDB, and even Google Spanner all either speak PostgreSQL exclusively or as an option. Oh, and you don't even need to build a whole new database from scratch to achieve compute and storage elasticity, just replace Postgres' storage layer like AWS Aurora or Neon did and you're good! OK, so Postgres is awesome (and that is likely not news for you), but why such a long intro to a rebrand announcement? It's because this is not just a rebrand, but also a good moment to reflect on what Gel really _is_ and where it fits in the Postgres ecosystem and the larger market of software infrastructure. Where Aurora and Neon replace PostgreSQL's storage layer, Gel replaces the frontend layer. To oversimplify, Gel to Postgres is what TypeScript is to JavaScript, and our business is that we write intelligent compilers for data schemas and queries and run the outputs in Postgres efficiently. Here lies an important point: TypeScript has been very successful in initial adoption because it provided full compatibility with vanilla JS and allows for incremental adoption. On the other hand, Gel historically required complete buy-in. We are changing this today. In Gel 6.0 we are introducing full support for SQL—not just in PostgreSQL protocol mode, but natively in the Gel protocol as well! Additionally, Gel is now fully supported in Drizzle (thanks, guys!). Guides will be available shortly on how to use Prisma and SQLAlchemy with Gel. What does this mean for the future of Gel? More compilers, more Postgres, more ecosystem integration. OK, a quick Q\u0026A on the rebrand is also in order. Why the Rebrand? Clarity The name \"EdgeDB\" is cool, but it carries some misleading connotations. \"Edge\" has led some to believe we are an edge computing database or a pure graph database—when in fact, EdgeDB is neither. Simplicity We wanted something short, memorable, and frictionless. Gel is easy to say, easy to type, and, most importantly, embodies how we see our platform: flexible, cohesive, and built to allow integrating software with databases seamlessly. What's Changing (and What's Not)? Nothing changes aside from the name, we're still the same company, same team, same mission. All tools and libraries are now available under the new name (just substitute edgedb with gel). For compatibility we are shipping shims, symlinks and transition packages under the old name, so nothing should break. This week is release week, keep an eye out for some more cool announcements coming from our corner! If you are new to Gel, the 1.0 release announcement still provides an excellent view of what we're building and why. Try Gel version 6.0 in Gel Cloud now. If you have any questions, please reach out and we'll be happy to help.",
  "image": "https://www.geldata.com/_images/_blog/e08f2e6c7185a3165848b1b079bc730ba89fddf7.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection data-section-id=\"edgedb-is-now-gel-and-postgres-is-the-future\" id=\"edgedb-is-now-gel-and-postgres-is-the-future\" data-theme=\"dark\"\u003e\n\n\u003cp\u003eWe have news! \u003cb\u003eEdgeDB\u003c/b\u003e is rebranding as Gel, more on that below.\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s talk about something else first.\u003c/p\u003e\n\u003cp\u003eSomething fascinating has been happening recently.  PostgreSQL seems to be\n            quietly \u003ca href=\"https://survey.stackoverflow.co/2024/technology#most-popular-technologies-database\"\u003eeating\u003c/a\u003e the \u003ca href=\"https://db-engines.com/en/blog_post/106\"\u003edatabase world\u003c/a\u003e.\n            It\u0026#39;s not just topping the charts, its adoption momentum is accelerating.\n            What\u0026#39;s going on?  The answer is right there in the PostgreSQL.org\u0026#39;s tagline:\u003c/p\u003e\n\u003cdiv\u003e\u003cp\u003eThe World\u0026#39;s Most Advanced Open Source Relational Database\u003c/p\u003e\u003c/div\u003e\n\u003cp\u003eIt\u0026#39;s not just an empty marketing boast.  It\u0026#39;s \u003cb\u003emeaningful\u003c/b\u003e.  Let\u0026#39;s unpack,\n            starting with what I think is the most important and consequential bit:\n            \u003cb\u003eOpen Source\u003c/b\u003e.\u003c/p\u003e\n\u003cp\u003eRegardless of source availability, most database systems on the market today\n            (including \u003ca href=\"https://en.wikipedia.org/wiki/MySQL_AB\"\u003eMySQL\u003c/a\u003e) are developed by a commercial entity.\n            Postgres is \u003cem\u003edifferent\u003c/em\u003e.  It got bootstrapped at Berkeley as a\n            \u003ca href=\"https://dsf.berkeley.edu/postgres.html\"\u003eresearch project\u003c/a\u003e and released under a very liberal\n            MIT-like license.  A decently-sized user base formed and after the university\n            stopped making new releases, the project (newly-renamed as PostgreSQL) was\n            picked up by a group of motivated hackers and that\u0026#39;s how Postgres as we know\n            it still gets developed and released today.\u003c/p\u003e\n\u003cp\u003eArguably, this makes PostgreSQL the \u003cem\u003eonly\u003c/em\u003e mainsteam database system that is\n            truly open-source.  It can\u0026#39;t be \u003ca href=\"https://techcrunch.com/2008/01/16/sun-picks-up-mysql-for-1-billion-open-source-is-a-legitimate-business-model/\"\u003ebought\u003c/a\u003e or\n            \u003ca href=\"https://redis.io/blog/redis-adopts-dual-source-available-licensing/\"\u003elicense-rug-pulled\u003c/a\u003e and this creates a kind of \u003cem\u003etrust\u003c/em\u003e\n            that can\u0026#39;t be emulated in any other way.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;m aware that the above might sound a bit funny coming from a\n                co-founder of a VC-backed startup.  Gel is Apache-licensed and\n                we\u0026#39;re about to future-proof that, stay tuned for a blog post.\u003c/p\u003e\n\u003cp\u003eNow let\u0026#39;s talk about the \u003cb\u003eAdvanced\u003c/b\u003e bit.\u003c/p\u003e\n\u003cp\u003eWhen the POSTGRES project was begun at Berkeley in 1985, extensibility and\n            modularity were made the \u003ca href=\"https://dl.acm.org/doi/pdf/10.1145/16856.16888\"\u003ecornerstones of its design\u003c/a\u003e.\n            This is possibly one of the main factors that made PostgreSQL successful.\n            Custom data types, index types and operators were there since the inception.\u003c/p\u003e\n\u003cp\u003ePostgreSQL is a relational database at it\u0026#39;s core, but with the ability to store\n            (and index) JSON, spatial data, time series, vectors, it\u0026#39;s arguably multimodal.\n            Postgres might not be the \u003cem\u003ebest\u003c/em\u003e tool in any given use case, but it\u0026#39;s \u003cem\u003egood\n                enough\u003c/em\u003e.  Being able to run just one DBMS instead of 10 and do all the things\n            you want to do is great! (Which is why, I think, most vector database startups\n            are probably not going to make it in the long run.)\u003c/p\u003e\n\u003cp\u003eAlso, building Postgres extensions is fun and nowadays you can even do it in\n            \u003ca href=\"https://github.com/pgcentralfoundation/pgrx\"\u003eRust\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen it comes to actually running queries, PostgreSQL\u0026#39;s query planner/optimizer\n            is decidedly state-of-the-art.  Given how much more compressed and expressive\n            EdgeQL (Gel\u0026#39;s query language) is compared to SQL, it\u0026#39;s quite easy to write\n            queries that translate to hundreds of kilobytes of SQL and Postgres usually\n            chews through that without breaking a sweat.\u003c/p\u003e\n\u003cp\u003ePostgreSQL is the cleanest and most documented C project of this scale, and the\n            sheer quality of the codebase is what gives Postgres all of the powers mentioned\n            above while also keeping it extremely stable and secure.\u003c/p\u003e\n\u003cp\u003eSo, yes, Postgres \u003cem\u003eis\u003c/em\u003e the world\u0026#39;s most advanced open source relational database\n            (sorry, Sam!).  What\u0026#39;s even more fascinating is that Postgres seems to have been\n            elevated to a sort of a \u003cem\u003ede-facto standard\u003c/em\u003e.  Have you noticed how almost every\n            recent database startup claims or strives for PostgreSQL wire-protocol and SQL\n            dialect compatibility?  CockroachDB, YugabyteDB, TiDB, and even \u003ca href=\"https://cloud.google.com/spanner/docs/postgresql-interface\"\u003eGoogle Spanner\u003c/a\u003e all either speak PostgreSQL exclusively or as an option.\n            Oh, and you don\u0026#39;t even need to build a whole new database from scratch to\n            achieve compute and storage elasticity, just replace Postgres\u0026#39; storage layer\n            like AWS Aurora or Neon did and you\u0026#39;re good!\u003c/p\u003e\n\u003cdiv data-section-id=\"supercharged-postgres-is-the-future\" id=\"supercharged-postgres-is-the-future\"\u003e\n\n\u003cp\u003eOK, so Postgres is awesome (and that is likely not news for you), but why such\n                a long intro to a rebrand announcement?  It\u0026#39;s because this is not just a\n                rebrand, but also a good moment to reflect on what Gel really _is_ and where\n                it fits in the Postgres ecosystem and the larger market of software\n                infrastructure.\u003c/p\u003e\n\u003cp\u003eWhere Aurora and Neon replace PostgreSQL\u0026#39;s storage layer, Gel replaces the\n                \u003cem\u003efrontend\u003c/em\u003e layer.  To oversimplify, Gel to Postgres is what TypeScript is to\n                JavaScript, and our business is that we write intelligent compilers for data\n                schemas and queries and run the outputs in Postgres efficiently.\u003c/p\u003e\n\u003cp\u003eHere lies an important point: TypeScript has been very successful in initial\n                adoption because it provided full compatibility with vanilla JS and allows\n                for incremental adoption.  On the other hand, Gel historically required\n                complete buy-in.  We are changing this today.\u003c/p\u003e\n\u003cp\u003eIn Gel 6.0 we are introducing full support for SQL—not just in PostgreSQL\n                protocol mode, but natively in the Gel protocol as well!  Additionally, Gel is\n                now fully supported in Drizzle (thanks, guys!). Guides will be available\n                shortly on how to use Prisma and SQLAlchemy with Gel.\u003c/p\u003e\n\u003cp\u003eWhat does this mean for the future of Gel?  More compilers, more Postgres,\n                more ecosystem integration.\u003c/p\u003e\n\u003cp\u003eOK, a quick Q\u0026amp;A on the rebrand is also in order.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv data-section-id=\"why-the-rebrand\" id=\"why-the-rebrand\"\u003e\n\u003ch2 id=\"why-the-rebrand\"\u003eWhy the Rebrand?\u003c/h2\u003e\n\u003cp\u003e\u003cb\u003eClarity\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003eThe name \u0026#34;EdgeDB\u0026#34; is cool, but it carries some misleading connotations. \u0026#34;Edge\u0026#34;\n                has led some to believe we are an edge computing database or a pure graph\n                database—when in fact, EdgeDB is neither.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eSimplicity\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003eWe wanted something short, memorable, and frictionless.  Gel is easy to say,\n                easy to type, and, most importantly, embodies how we see our platform:\n                flexible, cohesive, and built to allow integrating software with databases\n                seamlessly.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv data-section-id=\"what-s-changing-and-what-s-not\" id=\"what-s-changing-and-what-s-not\"\u003e\n\u003ch2 id=\"what-s-changing-and-what-s-not\"\u003eWhat\u0026#39;s Changing (and What\u0026#39;s Not)?\u003c/h2\u003e\n\u003cp\u003eNothing changes aside from the name, we\u0026#39;re still the same company, same team,\n                same mission.\u003c/p\u003e\n\u003cp\u003eAll tools and libraries are now available under the new name (just\n                substitute \u003ccode\u003eedgedb\u003c/code\u003e with \u003ccode\u003egel\u003c/code\u003e).  For compatibility we are shipping\n                shims, symlinks and transition packages under the old name, so nothing\n                should break.\u003c/p\u003e\n\u003c/div\u003e\n\u003cdiv data-section-id=\"wrapping-up\" id=\"wrapping-up\"\u003e\n\n\u003cp\u003eThis week is release week, keep an eye out for some more cool announcements\n                coming from our corner!\u003c/p\u003e\n\u003cp\u003eIf you are new to Gel, the \u003ca href=\"https://www.geldata.com/blog/edgedb-1-0%20blog-edgedb-1-0#blog-edgedb-1-0\"\u003e\u003cspan\u003e1.0 release announcement\u003c/span\u003e\u003c/a\u003e\n                still provides an excellent view of what we\u0026#39;re building and why.\u003c/p\u003e\n\u003cp\u003eTry Gel version 6.0 in \u003ca href=\"https://cloud.edgedb.com/\"\u003eGel Cloud\u003c/a\u003e now.\u003c/p\u003e\n\u003cp\u003eIf you have any questions, please\n                \u003ca href=\"mailto:support@geldata.com\"\u003ereach out\u003c/a\u003e and we\u0026#39;ll be happy to help.\u003c/p\u003e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003c/div\u003e\n\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
