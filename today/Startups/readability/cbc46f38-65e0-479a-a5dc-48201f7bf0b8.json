{
  "id": "cbc46f38-65e0-479a-a5dc-48201f7bf0b8",
  "title": "Claude Code now supports Hooks",
  "link": "https://docs.anthropic.com/en/docs/claude-code/hooks",
  "description": "Article URL: https://docs.anthropic.com/en/docs/claude-code/hooks Comments URL: https://news.ycombinator.com/item?id=44429225 Points: 68 # Comments: 23",
  "author": "ramoz",
  "published": "Tue, 01 Jul 2025 00:01:15 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 8887,
  "excerpt": "Customize and extend Claude Code's behavior by registering shell commands",
  "siteName": "Anthropic",
  "favicon": "https://mintlify.s3-us-west-1.amazonaws.com/anthropic/_generated/favicon/apple-touch-icon.png?v=3",
  "text": "Introduction Claude Code hooks are user-defined shell commands that execute at various points in Claude Code’s lifecycle. Hooks provide deterministic control over Claude Code’s behavior, ensuring certain actions always happen rather than relying on the LLM to choose to run them. Example use cases include: Notifications: Customize how you get notified when Claude Code is awaiting your input or permission to run something. Automatic formatting: Run prettier on .ts files, gofmt on .go files, etc. after every file edit. Logging: Track and count all executed commands for compliance or debugging. Feedback: Provide automated feedback when Claude Code produces code that does not follow your codebase conventions. Custom permissions: Block modifications to production files or sensitive directories. By encoding these rules as hooks rather than prompting instructions, you turn suggestions into app-level code that executes every time it is expected to run. Quickstart In this quickstart, you’ll add a hook that logs the shell commands that Claude Code runs. Quickstart Prerequisite: Install jq for JSON processing in the command line. Step 1: Open hooks configuration Run the /hooks slash command and select the PreToolUse hook event. PreToolUse hooks run before tool calls and can block them while providing Claude feedback on what to do differently. Step 2: Add a matcher Select + Add new matcher… to run your hook only on Bash tool calls. Type Bash for the matcher. Step 3: Add the hook Select + Add new hook… and enter this command: Step 4: Save your configuration For storage location, select User settings since you’re logging to your home directory. This hook will then apply to all projects, not just your current project. Then press Esc until you return to the REPL. Your hook is now registered! Step 5: Verify your hook Run /hooks again or check ~/.claude/settings.json to see your configuration: Configuration Claude Code hooks are configured in your settings files: ~/.claude/settings.json - User settings .claude/settings.json - Project settings .claude/settings.local.json - Local project settings (not committed) Enterprise managed policy settings Structure Hooks are organized by matchers, where each matcher can have multiple hooks: matcher: Pattern to match tool names (only applicable for PreToolUse and PostToolUse) Simple strings match exactly: Write matches only the Write tool Supports regex: Edit|Write or Notebook.* If omitted or empty string, hooks run for all matching events hooks: Array of commands to execute when the pattern matches type: Currently only \"command\" is supported command: The bash command to execute Hook Events PreToolUse Runs after Claude creates tool parameters and before processing the tool call. Common matchers: Task - Agent tasks Bash - Shell commands Glob - File pattern matching Grep - Content search Read - File reading Edit, MultiEdit - File editing Write - File writing WebFetch, WebSearch - Web operations PostToolUse Runs immediately after a tool completes successfully. Recognizes the same matcher values as PreToolUse. Notification Runs when Claude Code sends notifications. Stop Runs when Claude Code has finished responding. Hook Input Hooks receive JSON data via stdin containing session information and event-specific data: PreToolUse Input The exact schema for tool_input depends on the tool. PostToolUse Input The exact schema for tool_input and tool_response depends on the tool. Notification Input Stop Input stop_hook_active is true when Claude Code is already continuing as a result of a stop hook. Check this value or process the transcript to prevent Claude Code from running indefinitely. Hook Output There are two ways for hooks to return output back to Claude Code. The output communicates whether to block and any feedback that should be shown to Claude and the user. Simple: Exit Code Hooks communicate status through exit codes, stdout, and stderr: Exit code 0: Success. stdout is shown to the user in transcript mode (CTRL-R). Exit code 2: Blocking error. stderr is fed back to Claude to process automatically. See per-hook-event behavior below. Other exit codes: Non-blocking error. stderr is shown to the user and execution continues. Exit Code 2 Behavior Hook EventBehaviorPreToolUseBlocks the tool call, shows error to ClaudePostToolUseShows error to Claude (tool already ran)NotificationN/A, shows stderr to user onlyStopBlocks stoppage, shows error to Claude Advanced: JSON Output Hooks can return structured JSON in stdout for more sophisticated control: Common JSON Fields All hook types can include these optional fields: If continue is false, Claude stops processing after the hooks run. For PreToolUse, this is different from \"decision\": \"block\", which only blocks a specific tool call and provides automatic feedback to Claude. For PostToolUse, this is different from \"decision\": \"block\", which provides automated feedback to Claude. For Stop, this takes precedence over any \"decision\": \"block\" output. In all cases, \"continue\" = false takes precedence over any \"decision\": \"block\" output. stopReason accompanies continue with a reason shown to the user, not shown to Claude. PreToolUse Decision Control PreToolUse hooks can control whether a tool call proceeds. “approve” bypasses the permission system. reason is shown to the user but not to Claude. “block” prevents the tool call from executing. reason is shown to Claude. undefined leads to the existing permission flow. reason is ignored. PostToolUse Decision Control PostToolUse hooks can control whether a tool call proceeds. “block” automatically prompts Claude with reason. undefined does nothing. reason is ignored. Stop Decision Control Stop hooks can control whether Claude must continue. “block” prevents Claude from stopping. You must populate reason for Claude to know how to proceed. undefined allows Claude to stop. reason is ignored. JSON Output Example: Bash Command Editing Stop Decision Control Stop hooks can control tool execution: Claude Code hooks work seamlessly with Model Context Protocol (MCP) tools. When MCP servers provide tools, they appear with a special naming pattern that you can match in your hooks. MCP Tool Naming MCP tools follow the pattern mcp__\u003cserver\u003e__\u003ctool\u003e, for example: mcp__memory__create_entities - Memory server’s create entities tool mcp__filesystem__read_file - Filesystem server’s read file tool mcp__github__search_repositories - GitHub server’s search tool Configuring Hooks for MCP Tools You can target specific MCP tools or entire MCP servers: Examples Code Formatting Automatically format code after file modifications: Notification Customize the notification that is sent when Claude Code requests permission or when the prompt input has become idle. Security Considerations Disclaimer USE AT YOUR OWN RISK: Claude Code hooks execute arbitrary shell commands on your system automatically. By using hooks, you acknowledge that: You are solely responsible for the commands you configure Hooks can modify, delete, or access any files your user account can access Malicious or poorly written hooks can cause data loss or system damage Anthropic provides no warranty and assumes no liability for any damages resulting from hook usage You should thoroughly test hooks in a safe environment before production use Always review and understand any hook commands before adding them to your configuration. Security Best Practices Here are some key practices for writing more secure hooks: Validate and sanitize inputs - Never trust input data blindly Always quote shell variables - Use \"$VAR\" not $VAR Block path traversal - Check for .. in file paths Use absolute paths - Specify full paths for scripts Skip sensitive files - Avoid .env, .git/, keys, etc. Configuration Safety Direct edits to hooks in settings files don’t take effect immediately. Claude Code: Captures a snapshot of hooks at startup Uses this snapshot throughout the session Warns if hooks are modified externally Requires review in /hooks menu for changes to apply This prevents malicious hook modifications from affecting your current session. Hook Execution Details Timeout: 60-second execution limit Parallelization: All matching hooks run in parallel Environment: Runs in current directory with Claude Code’s environment Input: JSON via stdin Output: PreToolUse/PostToolUse/Stop: Progress shown in transcript (Ctrl-R) Notification: Logged to debug only (--debug) Debugging To troubleshoot hooks: Check if /hooks menu displays your configuration Verify that your settings files are valid JSON Test commands manually Check exit codes Review stdout and stderr format expectations Ensure proper quote escaping Progress messages appear in transcript mode (Ctrl-R) showing: Which hook is running Command being executed Success/failure status Output or error messages",
  "image": "https://anthropic.mintlify.app/_next/image?url=%2Fapi%2Fog%3Fdivision%3DDocumentation%26mode%3Dlight%26title%3DHooks%26description%3DCustomize%2Band%2Bextend%2BClaude%2BCode%2527s%2Bbehavior%2Bby%2Bregistering%2Bshell%2Bcommands%26logoLight%3Dhttps%253A%252F%252Fmintlify.s3.us-west-1.amazonaws.com%252Fanthropic%252Flogo%252Flight.svg%26logoDark%3Dhttps%253A%252F%252Fmintlify.s3.us-west-1.amazonaws.com%252Fanthropic%252Flogo%252Fdark.svg%26primaryColor%3D%25230E0E0E%26lightColor%3D%2523D4A27F%26darkColor%3D%25230E0E0E\u0026w=1200\u0026q=100",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"introduction\"\u003e\u003cspan\u003eIntroduction\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eClaude Code hooks are user-defined shell commands that execute at various points\nin Claude Code’s lifecycle. Hooks provide deterministic control over Claude\nCode’s behavior, ensuring certain actions always happen rather than relying on\nthe LLM to choose to run them.\u003c/p\u003e\n\u003cp\u003eExample use cases include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eNotifications\u003c/strong\u003e: Customize how you get notified when Claude Code is awaiting\nyour input or permission to run something.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAutomatic formatting\u003c/strong\u003e: Run \u003ccode\u003eprettier\u003c/code\u003e on .ts files, \u003ccode\u003egofmt\u003c/code\u003e on .go files,\netc. after every file edit.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLogging\u003c/strong\u003e: Track and count all executed commands for compliance or\ndebugging.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFeedback\u003c/strong\u003e: Provide automated feedback when Claude Code produces code that\ndoes not follow your codebase conventions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom permissions\u003c/strong\u003e: Block modifications to production files or sensitive\ndirectories.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy encoding these rules as hooks rather than prompting instructions, you turn\nsuggestions into app-level code that executes every time it is expected to run.\u003c/p\u003e\n\n\u003ch2 id=\"quickstart\"\u003e\u003cspan\u003eQuickstart\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eIn this quickstart, you’ll add a hook that logs the shell commands that Claude\nCode runs.\u003c/p\u003e\n\u003cp\u003eQuickstart Prerequisite: Install \u003ccode\u003ejq\u003c/code\u003e for JSON processing in the command line.\u003c/p\u003e\n\u003ch3 id=\"step-1%3A-open-hooks-configuration\"\u003e\u003cspan\u003eStep 1: Open hooks configuration\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eRun the \u003ccode\u003e/hooks\u003c/code\u003e \u003ca href=\"https://docs.anthropic.com/en/docs/claude-code/slash-commands\"\u003eslash command\u003c/a\u003e and select\nthe \u003ccode\u003ePreToolUse\u003c/code\u003e hook event.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ePreToolUse\u003c/code\u003e hooks run before tool calls and can block them while providing\nClaude feedback on what to do differently.\u003c/p\u003e\n\u003ch3 id=\"step-2%3A-add-a-matcher\"\u003e\u003cspan\u003eStep 2: Add a matcher\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eSelect \u003ccode\u003e+ Add new matcher…\u003c/code\u003e to run your hook only on Bash tool calls.\u003c/p\u003e\n\u003cp\u003eType \u003ccode\u003eBash\u003c/code\u003e for the matcher.\u003c/p\u003e\n\u003ch3 id=\"step-3%3A-add-the-hook\"\u003e\u003cspan\u003eStep 3: Add the hook\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eSelect \u003ccode\u003e+ Add new hook…\u003c/code\u003e and enter this command:\u003c/p\u003e\n\n\u003ch3 id=\"step-4%3A-save-your-configuration\"\u003e\u003cspan\u003eStep 4: Save your configuration\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eFor storage location, select \u003ccode\u003eUser settings\u003c/code\u003e since you’re logging to your home\ndirectory. This hook will then apply to all projects, not just your current\nproject.\u003c/p\u003e\n\u003cp\u003eThen press Esc until you return to the REPL. Your hook is now registered!\u003c/p\u003e\n\u003ch3 id=\"step-5%3A-verify-your-hook\"\u003e\u003cspan\u003eStep 5: Verify your hook\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eRun \u003ccode\u003e/hooks\u003c/code\u003e again or check \u003ccode\u003e~/.claude/settings.json\u003c/code\u003e to see your configuration:\u003c/p\u003e\n\n\u003ch2 id=\"configuration\"\u003e\u003cspan\u003eConfiguration\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eClaude Code hooks are configured in your\n\u003ca href=\"https://docs.anthropic.com/en/docs/claude-code/settings\"\u003esettings files\u003c/a\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e~/.claude/settings.json\u003c/code\u003e - User settings\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.claude/settings.json\u003c/code\u003e - Project settings\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.claude/settings.local.json\u003c/code\u003e - Local project settings (not committed)\u003c/li\u003e\n\u003cli\u003eEnterprise managed policy settings\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"structure\"\u003e\u003cspan\u003eStructure\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eHooks are organized by matchers, where each matcher can have multiple hooks:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ematcher\u003c/strong\u003e: Pattern to match tool names (only applicable for \u003ccode\u003ePreToolUse\u003c/code\u003e and\n\u003ccode\u003ePostToolUse\u003c/code\u003e)\n\u003cul\u003e\n\u003cli\u003eSimple strings match exactly: \u003ccode\u003eWrite\u003c/code\u003e matches only the Write tool\u003c/li\u003e\n\u003cli\u003eSupports regex: \u003ccode\u003eEdit|Write\u003c/code\u003e or \u003ccode\u003eNotebook.*\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eIf omitted or empty string, hooks run for all matching events\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehooks\u003c/strong\u003e: Array of commands to execute when the pattern matches\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etype\u003c/code\u003e: Currently only \u003ccode\u003e\u0026#34;command\u0026#34;\u003c/code\u003e is supported\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecommand\u003c/code\u003e: The bash command to execute\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"hook-events\"\u003e\u003cspan\u003eHook Events\u003c/span\u003e\u003c/h2\u003e\n\u003ch3 id=\"pretooluse\"\u003e\u003cspan\u003ePreToolUse\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eRuns after Claude creates tool parameters and before processing the tool call.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCommon matchers:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eTask\u003c/code\u003e - Agent tasks\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBash\u003c/code\u003e - Shell commands\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGlob\u003c/code\u003e - File pattern matching\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGrep\u003c/code\u003e - Content search\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eRead\u003c/code\u003e - File reading\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEdit\u003c/code\u003e, \u003ccode\u003eMultiEdit\u003c/code\u003e - File editing\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWrite\u003c/code\u003e - File writing\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eWebFetch\u003c/code\u003e, \u003ccode\u003eWebSearch\u003c/code\u003e - Web operations\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"posttooluse\"\u003e\u003cspan\u003ePostToolUse\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eRuns immediately after a tool completes successfully.\u003c/p\u003e\n\u003cp\u003eRecognizes the same matcher values as PreToolUse.\u003c/p\u003e\n\u003ch3 id=\"notification\"\u003e\u003cspan\u003eNotification\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eRuns when Claude Code sends notifications.\u003c/p\u003e\n\u003ch3 id=\"stop\"\u003e\u003cspan\u003eStop\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eRuns when Claude Code has finished responding.\u003c/p\u003e\n\u003ch2 id=\"hook-input\"\u003e\u003cspan\u003eHook Input\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eHooks receive JSON data via stdin containing session information and\nevent-specific data:\u003c/p\u003e\n\n\u003ch3 id=\"pretooluse-input\"\u003e\u003cspan\u003ePreToolUse Input\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eThe exact schema for \u003ccode\u003etool_input\u003c/code\u003e depends on the tool.\u003c/p\u003e\n\n\u003ch3 id=\"posttooluse-input\"\u003e\u003cspan\u003ePostToolUse Input\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eThe exact schema for \u003ccode\u003etool_input\u003c/code\u003e and \u003ccode\u003etool_response\u003c/code\u003e depends on the tool.\u003c/p\u003e\n\n\u003ch3 id=\"notification-input\"\u003e\u003cspan\u003eNotification Input\u003c/span\u003e\u003c/h3\u003e\n\n\u003ch3 id=\"stop-input\"\u003e\u003cspan\u003eStop Input\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003estop_hook_active\u003c/code\u003e is true when Claude Code is already continuing as a result of\na stop hook. Check this value or process the transcript to prevent Claude Code\nfrom running indefinitely.\u003c/p\u003e\n\n\u003ch2 id=\"hook-output\"\u003e\u003cspan\u003eHook Output\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eThere are two ways for hooks to return output back to Claude Code. The output\ncommunicates whether to block and any feedback that should be shown to Claude\nand the user.\u003c/p\u003e\n\u003ch3 id=\"simple%3A-exit-code\"\u003e\u003cspan\u003eSimple: Exit Code\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eHooks communicate status through exit codes, stdout, and stderr:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExit code 0\u003c/strong\u003e: Success. \u003ccode\u003estdout\u003c/code\u003e is shown to the user in transcript mode\n(CTRL-R).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExit code 2\u003c/strong\u003e: Blocking error. \u003ccode\u003estderr\u003c/code\u003e is fed back to Claude to process\nautomatically. See per-hook-event behavior below.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOther exit codes\u003c/strong\u003e: Non-blocking error. \u003ccode\u003estderr\u003c/code\u003e is shown to the user and\nexecution continues.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"exit-code-2-behavior\"\u003e\u003cspan\u003eExit Code 2 Behavior\u003c/span\u003e\u003c/h4\u003e\n\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003eHook Event\u003c/th\u003e\u003cth\u003eBehavior\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003ePreToolUse\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eBlocks the tool call, shows error to Claude\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003ePostToolUse\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eShows error to Claude (tool already ran)\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003eNotification\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eN/A, shows stderr to user only\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003eStop\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eBlocks stoppage, shows error to Claude\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003ch3 id=\"advanced%3A-json-output\"\u003e\u003cspan\u003eAdvanced: JSON Output\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eHooks can return structured JSON in \u003ccode\u003estdout\u003c/code\u003e for more sophisticated control:\u003c/p\u003e\n\u003ch4 id=\"common-json-fields\"\u003e\u003cspan\u003eCommon JSON Fields\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003eAll hook types can include these optional fields:\u003c/p\u003e\n\n\u003cp\u003eIf \u003ccode\u003econtinue\u003c/code\u003e is false, Claude stops processing after the hooks run.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor \u003ccode\u003ePreToolUse\u003c/code\u003e, this is different from \u003ccode\u003e\u0026#34;decision\u0026#34;: \u0026#34;block\u0026#34;\u003c/code\u003e, which only\nblocks a specific tool call and provides automatic feedback to Claude.\u003c/li\u003e\n\u003cli\u003eFor \u003ccode\u003ePostToolUse\u003c/code\u003e, this is different from \u003ccode\u003e\u0026#34;decision\u0026#34;: \u0026#34;block\u0026#34;\u003c/code\u003e, which\nprovides automated feedback to Claude.\u003c/li\u003e\n\u003cli\u003eFor \u003ccode\u003eStop\u003c/code\u003e, this takes precedence over any \u003ccode\u003e\u0026#34;decision\u0026#34;: \u0026#34;block\u0026#34;\u003c/code\u003e output.\u003c/li\u003e\n\u003cli\u003eIn all cases, \u003ccode\u003e\u0026#34;continue\u0026#34; = false\u003c/code\u003e takes precedence over any\n\u003ccode\u003e\u0026#34;decision\u0026#34;: \u0026#34;block\u0026#34;\u003c/code\u003e output.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003estopReason\u003c/code\u003e accompanies \u003ccode\u003econtinue\u003c/code\u003e with a reason shown to the user, not shown\nto Claude.\u003c/p\u003e\n\u003ch4 id=\"pretooluse-decision-control\"\u003e\u003cspan\u003e\u003ccode\u003ePreToolUse\u003c/code\u003e Decision Control\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003ePreToolUse\u003c/code\u003e hooks can control whether a tool call proceeds.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“approve” bypasses the permission system. \u003ccode\u003ereason\u003c/code\u003e is shown to the user but\nnot to Claude.\u003c/li\u003e\n\u003cli\u003e“block” prevents the tool call from executing. \u003ccode\u003ereason\u003c/code\u003e is shown to Claude.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eundefined\u003c/code\u003e leads to the existing permission flow. \u003ccode\u003ereason\u003c/code\u003e is ignored.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"posttooluse-decision-control\"\u003e\u003cspan\u003e\u003ccode\u003ePostToolUse\u003c/code\u003e Decision Control\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003ePostToolUse\u003c/code\u003e hooks can control whether a tool call proceeds.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“block” automatically prompts Claude with \u003ccode\u003ereason\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eundefined\u003c/code\u003e does nothing. \u003ccode\u003ereason\u003c/code\u003e is ignored.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"stop-decision-control\"\u003e\u003cspan\u003e\u003ccode\u003eStop\u003c/code\u003e Decision Control\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eStop\u003c/code\u003e hooks can control whether Claude must continue.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e“block” prevents Claude from stopping. You must populate \u003ccode\u003ereason\u003c/code\u003e for Claude\nto know how to proceed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eundefined\u003c/code\u003e allows Claude to stop. \u003ccode\u003ereason\u003c/code\u003e is ignored.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"json-output-example%3A-bash-command-editing\"\u003e\u003cspan\u003eJSON Output Example: Bash Command Editing\u003c/span\u003e\u003c/h4\u003e\n\n\u003ch4 id=\"stop-decision-control-2\"\u003e\u003cspan\u003e\u003ccode\u003eStop\u003c/code\u003e Decision Control\u003c/span\u003e\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eStop\u003c/code\u003e hooks can control tool execution:\u003c/p\u003e\n\n\n\u003cp\u003eClaude Code hooks work seamlessly with\n\u003ca href=\"https://docs.anthropic.com/en/docs/claude-code/mcp\"\u003eModel Context Protocol (MCP) tools\u003c/a\u003e. When MCP servers\nprovide tools, they appear with a special naming pattern that you can match in\nyour hooks.\u003c/p\u003e\n\u003ch3 id=\"mcp-tool-naming\"\u003e\u003cspan\u003eMCP Tool Naming\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eMCP tools follow the pattern \u003ccode\u003emcp__\u0026lt;server\u0026gt;__\u0026lt;tool\u0026gt;\u003c/code\u003e, for example:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003emcp__memory__create_entities\u003c/code\u003e - Memory server’s create entities tool\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emcp__filesystem__read_file\u003c/code\u003e - Filesystem server’s read file tool\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emcp__github__search_repositories\u003c/code\u003e - GitHub server’s search tool\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"configuring-hooks-for-mcp-tools\"\u003e\u003cspan\u003eConfiguring Hooks for MCP Tools\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eYou can target specific MCP tools or entire MCP servers:\u003c/p\u003e\n\n\u003ch2 id=\"examples\"\u003e\u003cspan\u003eExamples\u003c/span\u003e\u003c/h2\u003e\n\u003ch3 id=\"code-formatting\"\u003e\u003cspan\u003eCode Formatting\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eAutomatically format code after file modifications:\u003c/p\u003e\n\n\u003ch3 id=\"notification-2\"\u003e\u003cspan\u003eNotification\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eCustomize the notification that is sent when Claude Code requests permission or\nwhen the prompt input has become idle.\u003c/p\u003e\n\n\u003ch2 id=\"security-considerations\"\u003e\u003cspan\u003eSecurity Considerations\u003c/span\u003e\u003c/h2\u003e\n\u003ch3 id=\"disclaimer\"\u003e\u003cspan\u003eDisclaimer\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eUSE AT YOUR OWN RISK\u003c/strong\u003e: Claude Code hooks execute arbitrary shell commands on\nyour system automatically. By using hooks, you acknowledge that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou are solely responsible for the commands you configure\u003c/li\u003e\n\u003cli\u003eHooks can modify, delete, or access any files your user account can access\u003c/li\u003e\n\u003cli\u003eMalicious or poorly written hooks can cause data loss or system damage\u003c/li\u003e\n\u003cli\u003eAnthropic provides no warranty and assumes no liability for any damages\nresulting from hook usage\u003c/li\u003e\n\u003cli\u003eYou should thoroughly test hooks in a safe environment before production use\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlways review and understand any hook commands before adding them to your\nconfiguration.\u003c/p\u003e\n\u003ch3 id=\"security-best-practices\"\u003e\u003cspan\u003eSecurity Best Practices\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eHere are some key practices for writing more secure hooks:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eValidate and sanitize inputs\u003c/strong\u003e - Never trust input data blindly\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAlways quote shell variables\u003c/strong\u003e - Use \u003ccode\u003e\u0026#34;$VAR\u0026#34;\u003c/code\u003e not \u003ccode\u003e$VAR\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBlock path traversal\u003c/strong\u003e - Check for \u003ccode\u003e..\u003c/code\u003e in file paths\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUse absolute paths\u003c/strong\u003e - Specify full paths for scripts\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSkip sensitive files\u003c/strong\u003e - Avoid \u003ccode\u003e.env\u003c/code\u003e, \u003ccode\u003e.git/\u003c/code\u003e, keys, etc.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"configuration-safety\"\u003e\u003cspan\u003eConfiguration Safety\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eDirect edits to hooks in settings files don’t take effect immediately. Claude\nCode:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCaptures a snapshot of hooks at startup\u003c/li\u003e\n\u003cli\u003eUses this snapshot throughout the session\u003c/li\u003e\n\u003cli\u003eWarns if hooks are modified externally\u003c/li\u003e\n\u003cli\u003eRequires review in \u003ccode\u003e/hooks\u003c/code\u003e menu for changes to apply\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis prevents malicious hook modifications from affecting your current session.\u003c/p\u003e\n\u003ch2 id=\"hook-execution-details\"\u003e\u003cspan\u003eHook Execution Details\u003c/span\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTimeout\u003c/strong\u003e: 60-second execution limit\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eParallelization\u003c/strong\u003e: All matching hooks run in parallel\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnvironment\u003c/strong\u003e: Runs in current directory with Claude Code’s environment\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInput\u003c/strong\u003e: JSON via stdin\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003ePreToolUse/PostToolUse/Stop: Progress shown in transcript (Ctrl-R)\u003c/li\u003e\n\u003cli\u003eNotification: Logged to debug only (\u003ccode\u003e--debug\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"debugging\"\u003e\u003cspan\u003eDebugging\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eTo troubleshoot hooks:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCheck if \u003ccode\u003e/hooks\u003c/code\u003e menu displays your configuration\u003c/li\u003e\n\u003cli\u003eVerify that your \u003ca href=\"https://docs.anthropic.com/en/docs/claude-code/settings\"\u003esettings files\u003c/a\u003e are valid\nJSON\u003c/li\u003e\n\u003cli\u003eTest commands manually\u003c/li\u003e\n\u003cli\u003eCheck exit codes\u003c/li\u003e\n\u003cli\u003eReview stdout and stderr format expectations\u003c/li\u003e\n\u003cli\u003eEnsure proper quote escaping\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eProgress messages appear in transcript mode (Ctrl-R) showing:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhich hook is running\u003c/li\u003e\n\u003cli\u003eCommand being executed\u003c/li\u003e\n\u003cli\u003eSuccess/failure status\u003c/li\u003e\n\u003cli\u003eOutput or error messages\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": null,
  "modifiedTime": null
}
