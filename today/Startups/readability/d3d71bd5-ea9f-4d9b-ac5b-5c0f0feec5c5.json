{
  "id": "d3d71bd5-ea9f-4d9b-ac5b-5c0f0feec5c5",
  "title": "Retro Boy: simple Game Boy emulator written in Rust, can be played on the web",
  "link": "https://github.com/smparsons/retroboy",
  "description": "Article URL: https://github.com/smparsons/retroboy Comments URL: https://news.ycombinator.com/item?id=43429417 Points: 81 # Comments: 14",
  "author": "ingve",
  "published": "Thu, 20 Mar 2025 21:54:17 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "smparsons",
  "length": 2879,
  "excerpt": "A Game Boy emulator written in Rust. Contribute to smparsons/retroboy development by creating an account on GitHub.",
  "siteName": "GitHub",
  "favicon": "https://github.com/fluidicon.png",
  "text": "Retro Boy is a simple Game Boy emulator written in Rust that can be played on the web. Try it here. Introduction Retro Boy is a cycle-accurate Game Boy emulator written in Rust. It uses wasm-pack to translate the Rust code into WebAssembly so it can be played on the web. The web frontend then uses Web Audio API and HTML Canvas for audio and graphics. It also leverages the browser's local storage to persist cartridge RAM data for battery-backed MBC cartridges. Features Accurate CPU that passes all JSON CPU tests Accurate audio emulation Graphics emulation built using a scanline-based renderer MBC1, MBC3, MBC5, and HuC1 support RTC support for MBC3 cartridges Cartridge RAM that persists to browser local storage for battery-backed cartridges Support for GameShark or GameGenie cheats A web frontend that supports: Fullscreen mode Pausing/resuming Selectable monochrome or color modes Customizable key map for game controls Management and enabling/disabling of game cheat codes A mobile-friendy responsive design How to Compile to WebAssembly To compile the implementation to WebAssembly, you will first need to install wasm-pack with the command cargo install wasm-pack if you haven't done so already. Then, run sh ./build-wasm.sh to build the core project and generate the Javascript binding code in the web frontend directory. Web Frontend The web frontend for this emulator is a React/TypeScript app designed with Material UI. It is located in the frontends/web folder. The UI provides the ability to load a ROM as well as play, pause, or reset the emulator. It also provides a fullscreen mode. To run the web frontend: Compile the Rust code to WebAssembly and generate the Javascript binding code as described in the \"How to Compile to WebAssembly\" section. When the binding code is generated, it will be added to the frontends/web/src/core directory. Run yarn install in the frontends/web directory to install all dependencies. Run yarn start in the same directory to run the application locally. Screenshots Test ROMs This emulator passes the following test suites from Blargg's test ROM collection: CPU instruction tests CPU instruction timing tests Memory timing tests Memory timing tests 2 Interrupt timing tests (CGB) APU tests (DMG) APU tests (CGB) Additionally, this emulator passes all JSON CPU tests, and only some tests from the Mooneye test ROM collection. Test Suite This project holds a fairly extensive test suite, as the bulk of the logic was designed using a TDD approach. There are a lot of tests that exercise CPU opcodes, and basic tests that exercise the GPU. Run cargo test to run the test suite. Helpful Resources For convenience, here is a list of the resources I used to build this emulator: Gameboy CPU Manual Pan Docs Blargg's Test ROM Collection Gameboy Doctor Imran Nazar's Gameboy Emulator Tutorial",
  "image": "https://opengraph.githubassets.com/8e63030a09a7ef0c73f246fe048ec085c4966e90f78c7a2d2c843c63d73d89d6/smparsons/retroboy",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-hpc=\"true\"\u003e\u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/logo.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/logo.png\" width=\"175px\" height=\"175px\"/\u003e\u003c/a\u003e\n  \u003cbr/\u003e\n  Retro Boy is a simple Game Boy emulator written in Rust that can be played on the web. \u003ca href=\"https://smparsons.github.io/retroboy\" rel=\"nofollow\"\u003eTry it here.\u003c/a\u003e\n\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eIntroduction\u003c/h2\u003e\u003ca id=\"user-content-introduction\" aria-label=\"Permalink: Introduction\" href=\"#introduction\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eRetro Boy is a cycle-accurate Game Boy emulator written in Rust. It uses \u003ccode\u003ewasm-pack\u003c/code\u003e to translate the Rust code into WebAssembly so it can be played on the web. The web frontend then uses Web Audio API and HTML Canvas for audio and graphics. It also leverages the browser\u0026#39;s local storage to persist cartridge RAM data for battery-backed MBC cartridges.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eFeatures\u003c/h2\u003e\u003ca id=\"user-content-features\" aria-label=\"Permalink: Features\" href=\"#features\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eAccurate CPU that passes all \u003ca href=\"https://github.com/adtennant/GameboyCPUTests\"\u003eJSON CPU tests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAccurate audio emulation\u003c/li\u003e\n\u003cli\u003eGraphics emulation built using a scanline-based renderer\u003c/li\u003e\n\u003cli\u003eMBC1, MBC3, MBC5, and HuC1 support\u003c/li\u003e\n\u003cli\u003eRTC support for MBC3 cartridges\u003c/li\u003e\n\u003cli\u003eCartridge RAM that persists to browser local storage for battery-backed cartridges\u003c/li\u003e\n\u003cli\u003eSupport for GameShark or GameGenie cheats\u003c/li\u003e\n\u003cli\u003eA web frontend that supports:\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eFullscreen mode\u003c/li\u003e\n\u003cli\u003ePausing/resuming\u003c/li\u003e\n\u003cli\u003eSelectable monochrome or color modes\u003c/li\u003e\n\u003cli\u003eCustomizable key map for game controls\u003c/li\u003e\n\u003cli\u003eManagement and enabling/disabling of game cheat codes\u003c/li\u003e\n\u003cli\u003eA mobile-friendy responsive design\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eHow to Compile to WebAssembly\u003c/h2\u003e\u003ca id=\"user-content-how-to-compile-to-webassembly\" aria-label=\"Permalink: How to Compile to WebAssembly\" href=\"#how-to-compile-to-webassembly\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eTo compile the implementation to WebAssembly, you will first need to install wasm-pack with the command \u003ccode\u003ecargo install wasm-pack\u003c/code\u003e if you haven\u0026#39;t done so already. Then, run \u003ccode\u003esh ./build-wasm.sh\u003c/code\u003e to build the core project and generate the Javascript binding code in the web frontend directory.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eWeb Frontend\u003c/h2\u003e\u003ca id=\"user-content-web-frontend\" aria-label=\"Permalink: Web Frontend\" href=\"#web-frontend\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe web frontend for this emulator is a React/TypeScript app designed with Material UI. It is located in the frontends/web folder. The UI provides the ability to load a ROM as well as play, pause, or reset the emulator. It also provides a fullscreen mode.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eTo run the web frontend:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003eCompile the Rust code to WebAssembly and generate the Javascript binding code as described in the \u0026#34;How to Compile to WebAssembly\u0026#34; section.\u003c/li\u003e\n\u003cli\u003eWhen the binding code is generated, it will be added to the frontends/web/src/core directory.\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003eyarn install\u003c/code\u003e in the frontends/web directory to install all dependencies.\u003c/li\u003e\n\u003cli\u003eRun \u003ccode\u003eyarn start\u003c/code\u003e in the same directory to run the application locally.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eScreenshots\u003c/h2\u003e\u003ca id=\"user-content-screenshots\" aria-label=\"Permalink: Screenshots\" href=\"#screenshots\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/screenshots/pokemon-red.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/screenshots/pokemon-red.png\" width=\"240\"/\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/screenshots/pokemon-crystal.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/screenshots/pokemon-crystal.png\" width=\"240\"/\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/screenshots/yugioh-dds.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/screenshots/yugioh-dds.png\" width=\"240\"/\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/screenshots/marble-madness.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/screenshots/marble-madness.png\" width=\"240\"/\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/screenshots/pacman.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/screenshots/pacman.png\" width=\"240\"/\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/screenshots/super-mario-land.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/screenshots/super-mario-land.png\" width=\"240\"/\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/screenshots/tetris.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/screenshots/tetris.png\" width=\"240\"/\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/screenshots/kirby.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/screenshots/kirby.png\" width=\"240\"/\u003e\u003c/a\u003e\n  \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/smparsons/retroboy/blob/main/images/screenshots/links-awakening.png\"\u003e\u003cimg src=\"https://github.com/smparsons/retroboy/raw/main/images/screenshots/links-awakening.png\" width=\"240\"/\u003e\u003c/a\u003e\n\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eTest ROMs\u003c/h2\u003e\u003ca id=\"user-content-test-roms\" aria-label=\"Permalink: Test ROMs\" href=\"#test-roms\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis emulator passes the following test suites from Blargg\u0026#39;s test ROM collection:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/retrio/gb-test-roms/tree/master/cpu_instrs\"\u003eCPU instruction tests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/retrio/gb-test-roms/tree/master/instr_timing\"\u003eCPU instruction timing tests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/retrio/gb-test-roms/tree/master/mem_timing\"\u003eMemory timing tests\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/retrio/gb-test-roms/tree/master/mem_timing-2\"\u003eMemory timing tests 2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/retrio/gb-test-roms/tree/master/interrupt_time\"\u003eInterrupt timing tests (CGB)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/retrio/gb-test-roms/tree/master/dmg_sound\"\u003eAPU tests (DMG)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/retrio/gb-test-roms/tree/master/cgb_sound\"\u003eAPU tests (CGB)\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003eAdditionally, this emulator passes all \u003ca href=\"https://github.com/adtennant/GameboyCPUTests\"\u003eJSON CPU tests\u003c/a\u003e, and\nonly some tests from the \u003ca href=\"https://github.com/Gekkio/mooneye-test-suite\"\u003eMooneye test ROM collection\u003c/a\u003e.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eTest Suite\u003c/h2\u003e\u003ca id=\"user-content-test-suite\" aria-label=\"Permalink: Test Suite\" href=\"#test-suite\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis project holds a fairly extensive test suite, as the bulk of the logic was designed using a TDD approach. There are a lot of tests that exercise CPU opcodes, and basic tests that exercise the GPU. Run \u003ccode\u003ecargo test\u003c/code\u003e to run the test suite.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 tabindex=\"-1\" dir=\"auto\"\u003eHelpful Resources\u003c/h2\u003e\u003ca id=\"user-content-helpful-resources\" aria-label=\"Permalink: Helpful Resources\" href=\"#helpful-resources\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eFor convenience, here is a list of the resources I used to build this emulator:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003e\u003ca href=\"http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf\" rel=\"nofollow\"\u003eGameboy CPU Manual\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gbdev.io/pandocs/\" rel=\"nofollow\"\u003ePan Docs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/retrio/gb-test-roms\"\u003eBlargg\u0026#39;s Test ROM Collection\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/robert/gameboy-doctor\"\u003eGameboy Doctor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://imrannazar.com/series/gameboy-emulation-in-javascript\" rel=\"nofollow\"\u003eImran Nazar\u0026#39;s Gameboy Emulator Tutorial\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
