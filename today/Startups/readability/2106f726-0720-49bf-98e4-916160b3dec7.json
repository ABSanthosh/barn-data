{
  "id": "2106f726-0720-49bf-98e4-916160b3dec7",
  "title": "3600 MHz Raspberry Pi 5 with Liquid Nitrogen",
  "link": "https://skatterbencher.com/2024/11/11/3600-mhz-raspberry-pi-5-with-liquid-nitrogen/",
  "description": "Article URL: https://skatterbencher.com/2024/11/11/3600-mhz-raspberry-pi-5-with-liquid-nitrogen/ Comments URL: https://news.ycombinator.com/item?id=42120385 Points: 32 # Comments: 7",
  "author": "jonatron",
  "published": "Tue, 12 Nov 2024 22:18:43 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "Pieter",
  "length": 10169,
  "excerpt": "I tried everything but couldn’t turn this Raspberry Pi 5 into the World’s Fastest Pi 5. Unfortunately, we can’t quite claim that title.",
  "siteName": "SkatterBencher",
  "favicon": "",
  "text": "posted on November 11, 2024October 13, 2024 No Comment I tried everything but couldn’t turn this Raspberry Pi 5 into the World’s Fastest Pi 5. Unfortunately, we can’t quite claim that title … despite the software reporting 4 GHz. Table of Contents IntroductionRaspberry Pi OS + NUMA PatchLiquid Nitrogen CoolingRaspberry Pi “Amplified”ElmorLabs AMPLE-X1Crystal OscillatorElmorLabs ECBConclusive Thoughts Introduction We tried everything to make our Pi the fastest Pi in the world. That includes changing the operating system, subzero cooling with liquid nitrogen, boosting the power circuitry, and even swapping out the crystal oscillator.In this blog post I try to share some of the findings and insights from the several weeks of Pi hacking in collaboration with ElmorLabs. Let’s start where we left off: in SkatterBencher #77 I overclocked the Raspberry Pi 5 to 3 GHz with a slightly improved air cooler. It appears that the PMIC voltage controller is a key limiting factor for achieving higher frequencies. Not only does the PMIC impose voltage configuration limitations but we also saw the Pi shut down at high power consumption levels. Therefore, I decided to beef up the power circuitry using the ElmorLabs AMPLE-X1. But I’ll get back to that later, because the first concern for maximizing performance is the operating system. Raspberry Pi OS + NUMA Patch In preparation for the record attempt, it’s important to prepare the operating system first. Coming from Ubuntu in my SkatterBencher guide, there’s two things we can improve: Change to the official Raspberry Pi OS, and Apply the NUMA patch The official Raspberry Pi operating system can easily be downloaded from the website. Alternatively, you can also use the Raspberry Pi Imager software which does all the hard work for you. I first learned about the NUMA patch when discussing Raspberry Pi overclocking on the Tom’s Hardware Guide The Pi Cast #181 a couple of months ago. It boils down to this: NUMA emulation enables the BCM2721 memory controller to better utilize parallelism in physical memory chip organization. I followed Jeff Geerling’s guide on enabling the NUMA patch. Combining the Raspberry Pi operating system and applying the NUMA emulation patch improved the benchmark performance significantly. Liquid Nitrogen Cooling The next step of preparing the Raspberry Pi for higher voltages and frequencies is ensuring we have superior cooling. Preferably, extreme cooling like liquid nitrogen. The place to be for liquid nitrogen testing in Taipei, Taiwan, is of course the ElmorLabs office. The Raspberry Pi 5 has a small-footprint PCB with quite a lot of tall components spread around the PCB. So, we can’t use a regular container like our AI LN2 container or the ElmorLabs Volcano. However, we found this tiny chipset LN2 pot. This container is heavy enough that it can just sit on top of the SoC and provide enough cooling even at ambient. After all, the SoC is barely using any power. I first ran Geekbench at 3200 MHz as a performance sanity check and I achieved 1000 in single-core and 2000 in multi-core in for the first time. Then, I tried increasing the operating frequency with low ambient temperatures of 20 degrees Celsius. However, as you can see, with ambient temperatures I could only set the clock to 3600 MHz. Once I tried 3700 MHz the Pi would lock up. Reducing the temperature to minus 40 degrees resulted in the same type of crash: the Pi just locks up at 3.7 GHz. Strange! I also hooked up the ElmorLabs EVC2 to talk to the Renesas PMIC directly and elevate every voltage rail. However, none of them seemed to have any impact on the maximum clock frequency. For those interested: the Raspberry Pi 5 only starts having operating problems around -90 degrees Celsius. Not bad at all! Hitting a frequency wall at any temperature is  rather odd behavior because any modern SoCs should normally scale with both temperature and voltage, unless there’s an external bottleneck imposing a limit. But the lack of temperature scaling suggests that perhaps there would also be a lack of voltage scaling. But, there’s only one way to find out! Raspberry Pi “Amplified” In the SkatterBencher guide, I mention that the Raspberry Pi is shutting down in high load scenarios which use the NEON instructions. “If we have a closer look at the PassMark benchmark, we find that the benchmark crashes specifically at the NEON sub-test. […] If we track the current, voltage, and power of the VDD_core during the workload, we find that the NEON subtest is significantly more power-intensive than any other benchmark. We can see peak current exceeding 15 amps and the power consumption exceeding 18 watts. When the benchmark crashes, the Raspberry Pi shuts down, and we can’t even communicate with the PMIC unless we manually press the power button. This suggests the instability is not caused by too high frequency, but perhaps some other mechanism such as over-current or over-temperature protection. Based on the voltage telemetry provided by the Python script, it doesn’t seem like it’s an under-volt issue. However, unfortunately, the PMIC debug options are not available at the moment.” SkatterBencher #77: Raspberry Pi 5 Overclocked to 3000 MHz To address this problem – as well as the 1.2V voltage limit – we need to beef up the power circuit. And, once again, ElmorLabs comes to the rescue with the Ample-X1 Power Card. ElmorLabs AMPLE-X1 The ElmorLabs AMPLE-X1 is a power card that uses a single-phase step-down buck converter. It is optimized for operating from a 12V power supply but can work with down to 4.5V input. It achieves up to 91.7% efficiency and the parameters can be monitored and controlled digitally by connecting it to EVC2. To hook up the AMPLE-X1 to the Raspberry Pi 5, we need to perform some hard-to-reverse and definitely-warranty-voiding modifications. Remove the inductors of the 4-phase SoC to disconnect the PMIC from the SoC. Scratch off the PCB mask to expose more of the copper plane for Vcc and Gnd. Solder thick, short wires between the Raspberry Pi and the AMPLE-X1. Make sure the AMPLE-X1 is set by default around 1.0V (it can provide up to 5.0V!) Once that’s done, it’s time to try if the Pi still boots up. This is not guaranteed because sometimes the SoC has two-way communication with the PMIC to ensure correct bootup procedure. Luckily, it works. The important step is to turn on the AMPLE-X1 power to the SoC before connecting the USB Type-C to power the other rails and initiate bootup. Now, we can use the ElmorLabs EVC2 to adjust the output voltage as well as monitor the output current and power. You can use the EVC2 on a secondary system, like a Windows laptop, or use the unofficial Linux package available for download from the ElmorLabs discord here: https://discord.com/channels/514312075686838282/830630797962641468/1204348733249159218 (backup). Here’s an example of the AMPLE-X1 peaking at 25.5W during a Passmark run. With the beefed-up power circuit, we can now increase the voltage to get higher frequency. We tried increasing the voltage from 1.2V all the way up to 1.55V. Unfortunately, we didn’t achieve a single additional step of MHz. This is, unfortunately, aligns with the lack of temperature scaling. But why? Crystal Oscillator There are many reasons why the SoC frequency wouldn’t scale with temperature or voltage. For example, it could be a PLL locking problem like we’ve seen with Intel Tiger Lake. Or it could be that a specific IP block linked to the Arm cores is also getting overclocked. Or, it could be a specific PLL ratio being unstable. Unfortunately, most of these issues are hard to debug without the proper development tools. However, we can try one last thing to see if maybe the Arm core PLL is causing issues: swapping out the crystal oscillator. The idea is simple: we swap the fixed crystal oscillator with a variable oscillator. That allows us to change the PLL ratio for frequencies exceeding 3.6 GHz. ElmorLabs ECB The default clock crystal is a 54MHz crystal which is on the backside of the PCB. It can be removed with some heat. Next, we replace it with the ElmorLabs External Clock Board. Now, we can adjust the input clock lower or higher than the default 54 MHz. Upwards, we immediately ran into a limitation of around 56 MHz. However, downwards adjustment was much easier, and the Raspberry Pi 5 could go as low as 46 MHz. With 46 MHz, we can set the Arm frequency to 4000 MHz. As you can see, the Broadcom vcgencmd tool also reports as 4 GHz. But of course, the real frequency is much lower because the crystal oscillator reference clock is lower. The actual frequency is 4,000 / 54 x 46 = 3,407 MHz. Again, we run into the same frequency wall as we saw with temperature and voltage adjustments: about 3.4 GHz for benchmarks and 3.6 GHz as maximum configurable frequency. Oh, I did try to run Geekbench at the fake 4 GHz and, good news, it was able to catch the result isn’t legitimate. Great job! Conclusive Thoughts So, that’s basically it … we’ve tried everything we could reasonably come up with to push the Raspberry Pi 5 to 4 GHz. But despite the much lower temperatures, much higher voltages, and even a different crystal oscillator … 3.6 GHz is the highest possible frequency. But all things considered, I’m still very happy to have put in the time and effort to learn about Raspberry Pi overclocking. It gave me the opportunity to learn more about Linux and ARM, as well as pursue really advanced hardware modifications. I see this experience as a pivotal work forming a foundation for future experiments. I want to thank Jon from ElmorLabs for all the help and tools provided for this overclocking experiment. Without his help, this project would not have been possible! I thank you for reading and the Patreons for the support. If you have any questions or comments, please drop them in the comment section below.  See you next time!",
  "image": "https://cdn.skatterbencher.com/wp-content/uploads/2024/10/wfrpi5a_th_v3-jpg.webp",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"post-8837\"\u003e\n\t\u003cdiv\u003e\n\t\t\n\t\t\n\t\t\u003cdiv\u003e\n\t\t\t\u003cul\u003e\n\t\t\t\t\n\t\t\t\t\u003cli\u003e\u003cspan\u003e\u003c/span\u003e \u003cspan\u003eposted on \u003ca href=\"https://skatterbencher.com/2024/11/11/3600-mhz-raspberry-pi-5-with-liquid-nitrogen/\" rel=\"bookmark\"\u003e\u003ctime datetime=\"2024-11-11T12:00:00+08:00\"\u003eNovember 11, 2024\u003c/time\u003e\u003ctime datetime=\"2024-10-13T18:12:12+08:00\"\u003eOctober 13, 2024\u003c/time\u003e\u003c/a\u003e\u003c/span\u003e\u003c/li\u003e\n\t\t\t\t\u003cli\u003e \u003ca href=\"https://skatterbencher.com/2024/11/11/3600-mhz-raspberry-pi-5-with-liquid-nitrogen/#respond\"\u003eNo Comment\u003c/a\u003e\u003c/li\u003e\n\t\t\t\t\n\t\t\t\u003c/ul\u003e\n\t\t\u003c/div\u003e\n\t\t\u003cp\u003e\u003cimg data-od-removed-fetchpriority=\"high\" data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[4][self::DIV]/*[1][self::IMG]\" width=\"1920\" height=\"1080\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/wfrpi5a_th_v3-jpg.webp\" alt=\"pi 5 amplified\" decoding=\"async\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/wfrpi5a_th_v3-jpg.webp 1920w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/wfrpi5a_th_v3-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/wfrpi5a_th_v3-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/wfrpi5a_th_v3-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/wfrpi5a_th_v3-1536x864.webp 1536w\" sizes=\"(max-width: 1920px) 100vw, 1920px\" data-has-transparency=\"false\" data-dominant-color=\"696566\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eI tried everything but couldn’t turn this Raspberry Pi 5 into the World’s Fastest Pi 5. Unfortunately, we can’t quite claim that title … despite the software reporting 4 GHz.\u003c/p\u003e\n\n\n\n\u003cfigure data-od-added-id=\"\" id=\"embed-optimizer-b65c7c2ecfc14d9bb852e6c120704813\"\u003e\u003c/figure\u003e\n\n\n\n\u003cdiv id=\"ez-toc-container\"\u003e\n\u003cp\u003eTable of Contents\u003c/p\u003e\n\u003cnav\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#Introduction\" title=\"Introduction\"\u003eIntroduction\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#Raspberry_Pi_OS_NUMA_Patch\" title=\"Raspberry Pi OS + NUMA Patch\"\u003eRaspberry Pi OS + NUMA Patch\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#Liquid_Nitrogen_Cooling\" title=\"Liquid Nitrogen Cooling\"\u003eLiquid Nitrogen Cooling\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#Raspberry_Pi_%E2%80%9CAmplified%E2%80%9D\" title=\"Raspberry Pi “Amplified”\"\u003eRaspberry Pi “Amplified”\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#ElmorLabs_AMPLE-X1\" title=\"ElmorLabs AMPLE-X1\"\u003eElmorLabs AMPLE-X1\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#Crystal_Oscillator\" title=\"Crystal Oscillator\"\u003eCrystal Oscillator\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#ElmorLabs_ECB\" title=\"ElmorLabs ECB\"\u003eElmorLabs ECB\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#Conclusive_Thoughts\" title=\"Conclusive Thoughts\"\u003eConclusive Thoughts\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\u003ch2\u003e\u003cspan id=\"Introduction\"\u003e\u003c/span\u003eIntroduction\u003cspan\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe tried everything to make our Pi the fastest Pi in the world. That includes changing the operating system, subzero cooling with liquid nitrogen, boosting the power circuitry, and even swapping out the crystal oscillator.In this blog post I try to share some of the findings and insights from the several weeks of Pi hacking in collaboration with ElmorLabs. \u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s start where we left off: in \u003ca href=\"https://skatterbencher.com/2024/07/18/skatterbencher-77-raspberry-pi-5-overclocked-to-3000-mhz/\"\u003eSkatterBencher #77\u003c/a\u003e I overclocked the Raspberry Pi 5 to 3 GHz with a slightly improved air cooler. It appears that the PMIC voltage controller is a key limiting factor for achieving higher frequencies. Not only does the PMIC impose voltage configuration limitations but we also saw the Pi shut down at high power consumption levels.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-od-added-loading=\"\" data-od-replaced-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[11][self::FIGURE]/*[1][self::IMG]\" loading=\"lazy\" data-dominant-color=\"898282\" data-has-transparency=\"false\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/skatterbencher-pi5-1024x576.webp\" alt=\"skatterbencher pi 5 with cooling\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/skatterbencher-pi5-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/skatterbencher-pi5-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/skatterbencher-pi5-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/skatterbencher-pi5-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/skatterbencher-pi5-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTherefore, I decided to beef up the power circuitry using the ElmorLabs AMPLE-X1. But I’ll get back to that later, because the first concern for maximizing performance is the operating system.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cspan id=\"Raspberry_Pi_OS_NUMA_Patch\"\u003e\u003c/span\u003eRaspberry Pi OS + NUMA Patch\u003cspan\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn preparation for the record attempt, it’s important to prepare the operating system first. Coming from Ubuntu in my SkatterBencher guide, there’s two things we can improve:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eChange to the official Raspberry Pi OS, and\u003c/li\u003e\n\n\n\n\u003cli\u003eApply the NUMA patch\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eThe official Raspberry Pi operating system can easily be \u003ca href=\"https://www.raspberrypi.com/software/operating-systems/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edownloaded from the website\u003c/a\u003e. Alternatively, you can also use the Raspberry Pi Imager software which does all the hard work for you.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/rpi-imager-jpg.webp\" data-slb-active=\"1\" data-slb-asset=\"64984763\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[17][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"c5658f\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"721\" height=\"514\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/rpi-imager-jpg.webp\" alt=\"raspberry pi imager\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/rpi-imager-jpg.webp 721w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/rpi-imager-300x214.webp 300w\" sizes=\"auto, (max-width: 721px) 100vw, 721px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eI first learned about the \u003ca href=\"https://www.tomshardware.com/raspberry-pi/raspberry-pi-5-patch-boosts-performance-up-to-18-via-numa-emulation-geekbench-tests-reveal-gains-in-both-single-and-multi-threaded-performance\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNUMA patch\u003c/a\u003e when discussing Raspberry Pi overclocking on the Tom’s Hardware Guide \u003ca href=\"https://skatterbencher.com/2024/06/28/talking-raspberry-pi-5-overclocking-on-the-pi-cast-181/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eThe Pi Cast #181\u003c/a\u003e a couple of months ago. It boils down to this: \u003ca href=\"https://lore.kernel.org/lkml/20240625125803.38038-1-tursulin@igalia.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eNUMA emulation\u003c/a\u003e enables the BCM2721 memory controller to better utilize parallelism in physical memory chip organization.\u003c/p\u003e\n\n\n\n\u003cp\u003eI followed \u003ca href=\"https://www.jeffgeerling.com/blog/2024/numa-emulation-speeds-pi-5-and-other-improvements\"\u003eJeff Geerling’s guide\u003c/a\u003e on enabling the NUMA patch. Combining the Raspberry Pi operating system and applying the NUMA emulation patch improved the benchmark performance significantly.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide5-png.webp\" data-slb-active=\"1\" data-slb-asset=\"35784482\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[20][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"4d614f\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide5-1024x576.webp\" alt=\"raspberry pi 5 performance improvement\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide5-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide5-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide5-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide5-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide5-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e\u003cspan id=\"Liquid_Nitrogen_Cooling\"\u003e\u003c/span\u003eLiquid Nitrogen Cooling\u003cspan\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe next step of preparing the Raspberry Pi for higher voltages and frequencies is ensuring we have superior cooling. Preferably, extreme cooling like liquid nitrogen. The place to be for liquid nitrogen testing in Taipei, Taiwan, is of course the \u003ca href=\"https://elmorlabs.com/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eElmorLabs\u003c/a\u003e office.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe Raspberry Pi 5 has a small-footprint PCB with quite a lot of tall components spread around the PCB. So, we can’t use a regular container like our AI LN2 container or the ElmorLabs Volcano. However, we found this tiny chipset LN2 pot. This container is heavy enough that it can just sit on top of the SoC and provide enough cooling even at ambient. After all, the SoC is barely using any power.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4325_1200-jpg.webp\" data-slb-active=\"1\" data-slb-asset=\"660474971\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[24][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"807f81\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"575\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4325_1200-1024x575.webp\" alt=\"raspberry pi 5 liquid nitrogen\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4325_1200-1024x575.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4325_1200-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4325_1200-768x431.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4325_1200-jpg.webp 1200w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eI first ran Geekbench at 3200 MHz as a performance sanity check and \u003ca href=\"https://browser.geekbench.com/v6/cpu/7600778\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eI achieved\u003c/a\u003e 1000 in single-core and 2000 in multi-core in for the first time.\u003c/p\u003e\n\n\n\n\u003cp\u003eThen, I tried increasing the operating frequency with low ambient temperatures of 20 degrees Celsius. However, as you can see, with ambient temperatures I could only set the clock to 3600 MHz. Once I tried 3700 MHz the Pi would lock up.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/3700max-png.webp\" data-slb-active=\"1\" data-slb-asset=\"2037946552\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[27][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"434545\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/3700max-1024x576.webp\" alt=\"raspberry pi 5 3600 mhz maximum frequency\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/3700max-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/3700max-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/3700max-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/3700max-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/3700max-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eReducing the temperature to minus 40 degrees resulted in the same type of crash: the Pi just locks up at 3.7 GHz. Strange! I also hooked up the ElmorLabs EVC2 to talk to the Renesas PMIC directly and elevate every voltage rail. However, none of them seemed to have any impact on the maximum clock frequency.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor those interested: the Raspberry Pi 5 only starts having operating problems around -90 degrees Celsius. Not bad at all!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/90c_neg-png.webp\" data-slb-active=\"1\" data-slb-asset=\"70960510\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[30][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"141516\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/90c_neg-1024x576.webp\" alt=\"raspberry pi 5 -94.1C temperature reporting\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/90c_neg-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/90c_neg-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/90c_neg-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/90c_neg-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/90c_neg-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHitting a frequency wall at any temperature is  rather odd behavior because any modern SoCs should normally scale with both temperature and voltage, unless there’s an external bottleneck imposing a limit. But the lack of temperature scaling suggests that perhaps there would also be a lack of voltage scaling.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut, there’s only one way to find out!\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cspan id=\"Raspberry_Pi_%E2%80%9CAmplified%E2%80%9D\"\u003e\u003c/span\u003eRaspberry Pi “Amplified”\u003cspan\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn the \u003ca href=\"https://skatterbencher.com/2024/07/18/skatterbencher-77-raspberry-pi-5-overclocked-to-3000-mhz/\"\u003eSkatterBencher guide\u003c/a\u003e, I mention that the Raspberry Pi is shutting down in high load scenarios which use the NEON instructions.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e“If we have a closer look at the PassMark benchmark, we find that the benchmark crashes specifically at the NEON sub-test. […] If we track the current, voltage, and power of the VDD_core during the workload, we find that the NEON subtest is significantly more power-intensive than any other benchmark. We can see peak current exceeding 15 amps and the power consumption exceeding 18 watts.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eWhen the benchmark crashes, the Raspberry Pi shuts down, and we can’t even communicate with the PMIC unless we manually press the power button. This suggests the instability is not caused by too high frequency, but perhaps some other mechanism such as over-current or over-temperature protection. Based on the voltage telemetry provided by the Python script, it doesn’t seem like it’s an under-volt issue. However, unfortunately, the PMIC debug options are not available at the moment.”\u003c/em\u003e\u003c/p\u003e\n\u003ccite\u003eSkatterBencher #77: Raspberry Pi 5 Overclocked to 3000 MHz\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide54-png.webp\" data-slb-active=\"1\" data-slb-asset=\"1941389464\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[36][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"525248\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide54-1024x576.webp\" alt=\"Raspberry Pi 5 passmark\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide54-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide54-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide54-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide54-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/Slide54-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTo address this problem – as well as the 1.2V voltage limit – we need to beef up the power circuit. And, once again, ElmorLabs comes to the rescue with the Ample-X1 Power Card.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cspan id=\"ElmorLabs_AMPLE-X1\"\u003e\u003c/span\u003eElmorLabs AMPLE-X1\u003cspan\u003e\u003c/span\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://www.elmorlabs.com/product/elmorlabs-ample-x1-power-card/.\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eElmorLabs AMPLE-X1\u003c/a\u003e is a power card that uses a single-phase step-down buck converter. It is optimized for operating from a 12V power supply but can work with down to 4.5V input. It achieves up to 91.7% efficiency and the parameters can be monitored and controlled digitally by connecting it to EVC2.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo hook up the AMPLE-X1 to the Raspberry Pi 5, we need to perform some hard-to-reverse and definitely-warranty-voiding modifications.\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eRemove the inductors of the 4-phase SoC to disconnect the PMIC from the SoC.\u003c/li\u003e\n\n\n\n\u003cli\u003eScratch off the PCB mask to expose more of the copper plane for Vcc and Gnd.\u003c/li\u003e\n\n\n\n\u003cli\u003eSolder thick, short wires between the Raspberry Pi and the AMPLE-X1.\u003c/li\u003e\n\n\n\n\u003cli\u003eMake sure the AMPLE-X1 is set by default around 1.0V (it can provide up to 5.0V!)\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/vdd_core-png.webp\" data-slb-active=\"1\" data-slb-asset=\"1639749936\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[42][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"676d60\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/vdd_core-1024x576.webp\" alt=\"raspberry pi 5 vdd_core 4-phase inductors\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/vdd_core-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/vdd_core-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/vdd_core-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/vdd_core-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/vdd_core-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eOnce that’s done, it’s time to try if the Pi still boots up. This is not guaranteed because sometimes the SoC has two-way communication with the PMIC to ensure correct bootup procedure. Luckily, it works. The important step is to turn on the AMPLE-X1 power to the SoC before connecting the USB Type-C to power the other rails and initiate bootup.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_20240830_181157_2000-jpg.webp\" data-slb-active=\"1\" data-slb-asset=\"1582141503\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[44][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"6f6365\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"759\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_20240830_181157_2000-1024x759.webp\" alt=\"raspberry pi 5 modified with elmorlabs ample-x1 power board\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_20240830_181157_2000-1024x759.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_20240830_181157_2000-300x222.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_20240830_181157_2000-768x569.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_20240830_181157_2000-1536x1138.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_20240830_181157_2000-jpg.webp 2000w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, we can use the \u003ca href=\"https://elmorlabs.com/product/elmorlabs-evc2se/\"\u003eElmorLabs EVC2\u003c/a\u003e to adjust the output voltage as well as monitor the output current and power. You can use the EVC2 on a secondary system, like a Windows laptop, or use the unofficial Linux package available for download from the ElmorLabs discord here: \u003ca href=\"https://discord.com/channels/514312075686838282/830630797962641468/1204348733249159218\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ehttps://discord.com/channels/514312075686838282/830630797962641468/1204348733249159218\u003c/a\u003e (\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/EVC2_1.0.1.18_Linux.zip\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ebackup\u003c/a\u003e).\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s an example of the AMPLE-X1 peaking at 25.5W during a Passmark run.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/raspberry-pi-passmark-25w-png.webp\" data-slb-active=\"1\" data-slb-asset=\"1532695101\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[47][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"5c6063\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/raspberry-pi-passmark-25w-1024x576.webp\" alt=\"raspberry pi 5 25w during passmark\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/raspberry-pi-passmark-25w-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/raspberry-pi-passmark-25w-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/raspberry-pi-passmark-25w-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/raspberry-pi-passmark-25w-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/raspberry-pi-passmark-25w-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWith the beefed-up power circuit, we can now increase the voltage to get higher frequency. We tried increasing the voltage from 1.2V all the way up to 1.55V. Unfortunately, we didn’t achieve a single additional step of MHz. This is, unfortunately, aligns with the lack of temperature scaling.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut why?\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cspan id=\"Crystal_Oscillator\"\u003e\u003c/span\u003eCrystal Oscillator\u003cspan\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eThere are many reasons why the SoC frequency wouldn’t scale with temperature or voltage. For example, it could be a PLL locking problem like we’ve seen with \u003ca href=\"https://skatterbencher.com/2023/08/23/5800-mhz-intel-tiger-lake-with-liquid-nitrogen/\"\u003eIntel Tiger Lake\u003c/a\u003e. Or it could be that a specific IP block linked to the Arm cores is also getting overclocked. Or, it could be a specific PLL ratio being unstable.\u003c/p\u003e\n\n\n\n\u003cp\u003eUnfortunately, most of these issues are hard to debug without the proper development tools. However, we can try one last thing to see if maybe the Arm core PLL is causing issues: swapping out the crystal oscillator. The idea is simple: we swap the fixed crystal oscillator with a variable oscillator. That allows us to change the PLL ratio for frequencies exceeding 3.6 GHz.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cspan id=\"ElmorLabs_ECB\"\u003e\u003c/span\u003eElmorLabs ECB\u003cspan\u003e\u003c/span\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe default clock crystal is a 54MHz crystal which is on the backside of the PCB. It can be removed with some heat. Next, we replace it with the \u003ca href=\"https://elmorlabs.com/product/elmorlabs-ecb-external-clock-board/\"\u003eElmorLabs External Clock Board\u003c/a\u003e. Now, we can adjust the input clock lower or higher than the default 54 MHz.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/osc-png.webp\" data-slb-active=\"1\" data-slb-asset=\"1419330520\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[55][self::FIGURE]/*[1][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"636a5e\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" data-id=\"8855\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/osc-1024x576.webp\" alt=\"raspberry pi 5 54 mhz crystal oscillator\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/osc-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/osc-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/osc-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/osc-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/osc-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb-png.webp\" data-slb-active=\"1\" data-slb-asset=\"1306595917\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[55][self::FIGURE]/*[2][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"65685f\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" data-id=\"8856\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb-1024x576.webp\" alt=\"raspberry pi 5 crystal oscillator elmorlabs ecb modification\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003eUpwards, we immediately ran into a limitation of around 56 MHz. However, downwards adjustment was much easier, and the Raspberry Pi 5 could go as low as 46 MHz.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb_46mhz-png.webp\" data-slb-active=\"1\" data-slb-asset=\"250832845\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[57][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"7f797a\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb_46mhz-1024x576.webp\" alt=\"elmorlabs ecb at 46 mhz\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb_46mhz-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb_46mhz-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb_46mhz-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb_46mhz-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/el_ecb_46mhz-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWith 46 MHz, we can set the Arm frequency to 4000 MHz. As you can see, the Broadcom vcgencmd tool also reports as 4 GHz. But of course, the real frequency is much lower because the crystal oscillator reference clock is lower. The actual frequency is 4,000 / 54 x 46 = 3,407 MHz.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4399_2000-jpg.webp\" data-slb-active=\"1\" data-slb-asset=\"1156806730\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[59][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"515159\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"575\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4399_2000-1024x575.webp\" alt=\"raspberry pi 5 4000 mhz shot\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4399_2000-1024x575.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4399_2000-300x168.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4399_2000-768x431.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4399_2000-1536x862.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/IMG_4399_2000-jpg.webp 2000w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAgain, we run into the same frequency wall as we saw with temperature and voltage adjustments: about 3.4 GHz for benchmarks and 3.6 GHz as maximum configurable frequency.\u003c/p\u003e\n\n\n\n\u003cp\u003eOh, I did try to run Geekbench at the fake 4 GHz and, good news, it was able to catch the result isn’t legitimate. Great job!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ca href=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/gb6-png.webp\" data-slb-active=\"1\" data-slb-asset=\"404513110\" data-slb-group=\"8837\"\u003e\u003cimg data-od-xpath=\"/*[1][self::HTML]/*[2][self::BODY]/*[2][self::DIV]/*[2][self::DIV]/*[1][self::DIV]/*[1][self::MAIN]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::DIV]/*[1][self::ARTICLE]/*[1][self::DIV]/*[62][self::FIGURE]/*[1][self::A]/*[1][self::IMG]\" data-dominant-color=\"d9dadb\" data-has-transparency=\"false\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"576\" src=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/gb6-1024x576.webp\" alt=\"geekbench 5 pi 5 illegal timer result\" srcset=\"https://cdn.skatterbencher.com/wp-content/uploads/2024/10/gb6-1024x576.webp 1024w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/gb6-300x169.webp 300w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/gb6-768x432.webp 768w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/gb6-1536x864.webp 1536w, https://cdn.skatterbencher.com/wp-content/uploads/2024/10/gb6-png.webp 1920w\" sizes=\"auto, (max-width: 1024px) 100vw, 1024px\"/\u003e\u003c/a\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e\u003cspan id=\"Conclusive_Thoughts\"\u003e\u003c/span\u003eConclusive Thoughts\u003cspan\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eSo, that’s basically it … we’ve tried everything we could reasonably come up with to push the Raspberry Pi 5 to 4 GHz. But despite the much lower temperatures, much higher voltages, and even a different crystal oscillator … 3.6 GHz is the highest possible frequency.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut all things considered, I’m still very happy to have put in the time and effort to learn about Raspberry Pi overclocking. It gave me the opportunity to learn more about Linux and ARM, as well as pursue really advanced hardware modifications. I see this experience as a pivotal work forming a foundation for future experiments.\u003c/p\u003e\n\n\n\n\u003cp\u003eI want to thank Jon from ElmorLabs for all the help and tools provided for this overclocking experiment. Without his help, this project would not have been possible!\u003c/p\u003e\n\n\n\n\u003cp\u003eI thank you for reading and \u003ca href=\"https://www.patreon.com/skatterbencher\"\u003ethe Patreons\u003c/a\u003e for the support. If you have any questions or comments, please drop them in the comment section below. \u003c/p\u003e\n\n\n\n\u003cp\u003eSee you next time!\u003c/p\u003e\n\t\u003c/div\u003e\n\t\t\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2024-11-11T04:00:00Z",
  "modifiedTime": "2024-10-13T10:12:12Z"
}
