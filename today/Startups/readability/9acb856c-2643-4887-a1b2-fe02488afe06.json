{
  "id": "9acb856c-2643-4887-a1b2-fe02488afe06",
  "title": "Parametric Modeling with Grasshopper",
  "link": "https://baharmon.github.io/basics",
  "description": "Article URL: https://baharmon.github.io/basics Comments URL: https://news.ycombinator.com/item?id=43921681 Points: 8 # Comments: 0",
  "author": "downboots",
  "published": "Wed, 07 May 2025 23:57:12 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 7317,
  "excerpt": "Modeling points, lines, curves, and surfaces in Grasshopper",
  "siteName": "",
  "favicon": "https://baharmon.github.io/images/favicon.png",
  "text": "Modeling points, lines, curves, and surfaces in Grasshopper Contents Visual Programming with Grasshopper Points Lines Polylines Curves Surfaces Visual Programming with Grasshopper Grasshopper is a visual programming interface for the 3D modeling program Rhinoceros. Rhino uses non-uniform rational B-splines (NURBS) to precisely, mathematically model geometry. With visual programming, you can algorithmically generate geometry by composing diagrams that link data to functions. An algorithmic approach enables designers to create complex forms and rapidly generate alternative designs. Resources for learning more about Grasshopper include: The Grasshopper Primer Grasshopper Basics with David Rutten Grasshopper Docs TU Delft Grasshopper Tutorials This tutorial is an introduction to modeling basic geometry - such as points, line, polylines, curves, and surfaces - in Grasshopper. Download the Grasshopper definition for this tutorial as a guide. First start Rhino. Type grasshopper in the Rhino’s command line to launch the visual programming interface. The Grasshopper interface has a menu bar, a toolbar with parameters and components, and a canvas for composing diagrams. Parameters are used to set and store data. Components are functions for performing operations. Drop parameters and components on the canvas and connect them together with wires to create node based diagrams that generate geometry in Rhino. A visual programming diagram composed in Grasshopper generates geometry in Rhino. Points In Cartesian space a point is defined by x, y, and z coordinates. In Grasshopper points can either be constructed from x, y, and z coordinates or drawn in Rhino and referenced in Grasshopper. One way to define a point is with the Construct Point component. Find the Construct Point component in the Points panel of the Vector tab. Drop this component on the canvas. Then add input data for the x, y, and z parameters using Number Slider parameters. Find the Number Slider parameters in the Input panel of the Params tab. Or double click on the canvas to search for a component and then type in either number slider or a value for the slider such as 10. Connect wires from each of the output nodes on the right side of the number sliders to the respective input node on the left of the Construct Point component. Drag the handle on each slider to a set x, y, and z values for the point. Points can also be defined by text panels with x, y, and z values. Place a Point parameter from the Input panel of the Params tab on the canvas. Then place a Panel parameter from Input panel. Double click on the panel to edit it. Type in x, y, and z values separated by commas. Connect the Panel to the Point parameter. The Point parameter can also be set to a point drawn in Rhino. Right click on the Point parameter and select set one point. Grasshopper will minimize and the command line in Rhino will ask for a point location. Either draw a point in one of the Rhino viewports or type x, y, and z values separated by commas into the command line. Lines In Grasshopper lines can be defined by start and end points by a start point, direction, and length, or by drawing a line in Rhino. Start and end points can set by constructing points from sliders, by defining coordinate in panels, or by drawing points in Rhino. Place a Line component from the Input panel of the Params tab on the canvas. Then connect the output for start and end points - whether from Number Slider, Point, or Panel parameters - to the respective input parameters on the Line component. To reference a line drawn in Rhino, place a Line parameter. Right click on the Line parameter and select set one line. Grasshopper will minimize and the Rhino command line will ask for the starting point and then ending point of the line. Either draw the points in a Rhino viewport or enter the coordinates in the command line. To draw a line from a starting point, length, and distance, first place the Line SDL component. Set a start point with Point parameter, Panel, or Construct Point component. Set a direction with a vector component such as Unit Z. Set a length using a Number Slider or Panel parameter. To construct a line whose end point is relative to its start point, first define a starting point and then move it along a vector to the end position. Start by placing a Line component. Define its start point using a Point parameter, Panel, or Construct Point component. Then add a Move component to translate the point to a new position. Connect the start point to the input Geometry parameter for the Move component and connect the output Geometry component to the end point parameter for the Line component. Then connect a vector to the Motion input parameter for the Move component. For example add and connect a Unit X vector to set the direction of movement along the x-axis. Then connect a Number Slider parameter to the input Factor for the Unit X vector to set the length of movement. Polylines Polylines are a sequence of lines connecting an ordered collection of points. They can be closed to form polygons. Place a Polyline component and then connect multiple points to the Vertices input parameter. Hold shift while dragging wires to add multiple inputs. To close the polyline and form a polygon, set the Closed input parameter to True either by adding a Panel or a Boolean Toggle. Double click on the Boolean Toggle to change its state from true to false. Curves Non-uniform rational basis spline (NURBS) curves are interpolated through a set of control points. To draw a curve place an Interpolate component and connect its input vertices parameter to a set of points. Points for a curve can be created from x, y, z coordinates with the Construct Point component or a Panel parameter, drawn in Rhino and referenced with a Point parameter, or generated from a trigonometric function such as a sine wave. Point parameters can easily to be edited using the gumball to change the shape of the curve. To create a curve from a sine wave first generate a range of values from for example 0 to 10 using the Range component. Connect the range to the x coordinate of a Construct Point component. Also connect the range to a Sine component and then connect the output of the sine function to the z coordinate of the Construct Point component. Connect the point to the Vertices input parameter of an Interpolate component. Try changing the domain, frequency, and amplitude of the sine wave. Surfaces NURBS surfaces are interpolated through a 2-dimensional grid of control points. Primitive surfaces can be generated with components such as Plane Surface, Box 2Pt, and Center Box. Freeform surfaces can be generated with components such as Boundary Surfaces, Ruled Surface, and Loft. Create planar surfaces from planar curves with Boundary Surfaces or as primitives with components like Plane Surface. Create solids either by extruding surfaces with Extrude or as primitives such boxes or spheres. Freeform surfaces can be constructed from multiple curves with components like Ruled Surface, and Loft. Learn how to transform this surface into furniture in the next tutorial: Modeling a Parametric Bench in Grasshopper.",
  "image": "https://baharmon.github.io",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv class=\"page\" data-page-title=\"An Introduction to Grasshopper – Brendan Harmon\"\u003e\n\n\t\t\t\u003cdiv\u003e\n\n\t\t\n\t\t\u003cp\u003eModeling points, lines, curves, and surfaces in Grasshopper\u003c/p\u003e\n\n\t\u003c/div\u003e\n\n\u003cdiv\u003e\n\n\t\t\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-5.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eContents\u003c/strong\u003e\u003c/p\u003e\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#visual-programming-with-grasshopper\" id=\"markdown-toc-visual-programming-with-grasshopper\"\u003eVisual Programming with Grasshopper\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#points\" id=\"markdown-toc-points\"\u003ePoints\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#lines\" id=\"markdown-toc-lines\"\u003eLines\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#polylines\" id=\"markdown-toc-polylines\"\u003ePolylines\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#curves\" id=\"markdown-toc-curves\"\u003eCurves\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#surfaces\" id=\"markdown-toc-surfaces\"\u003eSurfaces\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr/\u003e\n\n\u003ch2 id=\"visual-programming-with-grasshopper\"\u003eVisual Programming with Grasshopper\u003c/h2\u003e\n\n\u003cp\u003eGrasshopper is a visual programming interface\nfor the 3D modeling program\n\u003ca href=\"https://www.rhino3d.com/\"\u003eRhinoceros\u003c/a\u003e.\nRhino uses non-uniform rational B-splines (NURBS)\nto precisely, mathematically model geometry.\nWith visual programming,\nyou can algorithmically generate geometry\nby composing diagrams that link data to functions.\nAn algorithmic approach enables designers\nto create complex forms and\nrapidly generate alternative designs.\nResources for learning more about Grasshopper include:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://modelab.gitbooks.io/grasshopper-primer/content/1-foundations/1-2/2_grasshopper-component-parts.html\"\u003eThe Grasshopper Primer\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://vimeo.com/channels/basicgh\"\u003eGrasshopper Basics with David Rutten\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://grasshopperdocs.com/\"\u003eGrasshopper Docs\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://wiki.bk.tudelft.nl/toi-pedia/Grasshopper\"\u003eTU Delft Grasshopper Tutorials\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis tutorial is an introduction to modeling basic geometry -\nsuch as points, line, polylines, curves, and surfaces - in Grasshopper.\nDownload the Grasshopper definition\n\u003ca href=\"https://github.com/baharmon/generative-design/raw/main/grasshopper/basics.gh\"\u003e\u003ci\u003e\u003c/i\u003e\u003c/a\u003e for this tutorial as a guide.\nFirst start Rhino.\nType \u003ccode\u003egrasshopper\u003c/code\u003e in the Rhino’s command line\nto launch the visual programming interface.\nThe Grasshopper interface has a menu bar,\na toolbar with parameters and components,\nand a canvas for composing diagrams.\nParameters are used to set and store data.\nComponents are functions for performing operations.\nDrop parameters and  components on the canvas\nand connect them together with wires\nto create node based diagrams\nthat generate geometry in Rhino.\nA visual programming diagram composed in Grasshopper\ngenerates geometry in Rhino.\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003ch2 id=\"points\"\u003ePoints\u003c/h2\u003e\n\n\u003cp\u003eIn Cartesian space a point\nis defined by x, y, and z coordinates.\nIn Grasshopper points can either be\nconstructed from x, y, and z coordinates or\ndrawn in Rhino and referenced in Grasshopper.\u003c/p\u003e\n\n\u003cp\u003eOne way to define a point is with the\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppervector/constructPoint.html\"\u003eConstruct Point\u003c/a\u003e\ncomponent.\nFind the \u003ccode\u003eConstruct Point\u003c/code\u003e component\nin the \u003ccode\u003ePoints\u003c/code\u003e panel of the \u003ccode\u003eVector\u003c/code\u003e tab.\nDrop this component on the canvas.\nThen add input data for the x, y, and z parameters\nusing \u003ccode\u003eNumber Slider\u003c/code\u003e parameters.\nFind the \u003ccode\u003eNumber Slider\u003c/code\u003e parameters\nin the \u003ccode\u003eInput\u003c/code\u003e panel of the \u003ccode\u003eParams\u003c/code\u003e tab.\nOr double click on the canvas to search for a component\nand then type in either number slider or a value for the slider such as 10.\nConnect wires from each of the output nodes\non the right side of the number sliders\nto the respective input node on the left of the \u003ccode\u003eConstruct Point\u003c/code\u003e component.\nDrag the handle on each slider to a set x, y, and z values for the point.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-1.png\" alt=\"Point from x, y, z coordinates\"/\u003e\u003c/p\u003e\n\n\u003cp\u003ePoints can also be defined by text panels with x, y, and z values.\nPlace a \u003ccode\u003ePoint\u003c/code\u003e parameter\nfrom the \u003ccode\u003eInput\u003c/code\u003e panel of the \u003ccode\u003eParams\u003c/code\u003e tab on the canvas.\nThen place a \u003ccode\u003ePanel\u003c/code\u003e parameter from \u003ccode\u003eInput\u003c/code\u003e panel.\u003cbr/\u003e\nDouble click on the panel to edit it.\nType in x, y, and z values separated by commas.\nConnect the \u003ccode\u003ePanel\u003c/code\u003e to the \u003ccode\u003ePoint\u003c/code\u003e parameter.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-2.png\" alt=\"Point from text panel\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003ePoint\u003c/code\u003e parameter can also be set\nto a point drawn in Rhino.\nRight click on the \u003ccode\u003ePoint\u003c/code\u003e parameter\nand select \u003ccode\u003eset one point\u003c/code\u003e.\nGrasshopper will minimize\nand the command line in Rhino will ask for a point location.\nEither draw a point in one of the Rhino viewports\nor type x, y, and z values separated by commas into the command line.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-3.png\" alt=\"Point from Rhino\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-1.png\" alt=\"Point from x, y, and z coordinates\"/\u003e\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003ch2 id=\"lines\"\u003eLines\u003c/h2\u003e\n\n\u003cp\u003eIn Grasshopper lines can be defined by start and end points\nby a start point, direction, and length,\nor by drawing a line in Rhino.\nStart and end points can set by\nconstructing points from sliders,\nby defining coordinate in panels,\nor by drawing points in Rhino.\nPlace a\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppercurve/line.html\"\u003eLine\u003c/a\u003e\ncomponent from the \u003ccode\u003eInput\u003c/code\u003e panel of the \u003ccode\u003eParams\u003c/code\u003e tab on the canvas.\nThen connect the output for start and end points -\nwhether from \u003ccode\u003eNumber Slider\u003c/code\u003e, \u003ccode\u003ePoint\u003c/code\u003e, or \u003ccode\u003ePanel\u003c/code\u003e parameters -\nto the respective input parameters on the \u003ccode\u003eLine\u003c/code\u003e component.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-4.png\" alt=\"Line from constructed points\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-5.png\" alt=\"Line from points defined in panels\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-6.png\" alt=\"Line from referenced points\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eTo reference a line drawn in Rhino,\nplace a \u003ccode\u003eLine\u003c/code\u003e parameter.\nRight click on the \u003ccode\u003eLine\u003c/code\u003e parameter and select \u003ccode\u003eset one line\u003c/code\u003e.\nGrasshopper will minimize and the Rhino command line will ask for\nthe starting point and then ending point of the line.\nEither draw the points in a Rhino viewport or\nenter the coordinates in the command line.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-7.png\" alt=\"Line from Rhino\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eTo draw a line from a starting point, length, and distance,\nfirst place the\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppercurve/lineSDL.html\"\u003eLine SDL\u003c/a\u003e\ncomponent.\nSet a start point with \u003ccode\u003ePoint\u003c/code\u003e parameter, \u003ccode\u003ePanel\u003c/code\u003e, or\n\u003ccode\u003eConstruct Point\u003c/code\u003e component.\nSet a direction with a vector component such as\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppervector/unitZ.html\"\u003eUnit Z\u003c/a\u003e.\nSet a length using a \u003ccode\u003eNumber Slider\u003c/code\u003e or \u003ccode\u003ePanel\u003c/code\u003e parameter.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-8.png\" alt=\"Line from start, tangent, and length\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eTo construct a line whose end point is relative to its start point,\nfirst define a starting point\nand then move it along a vector to the end position.\nStart by placing a\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppercurve/line.html\"\u003eLine\u003c/a\u003e\ncomponent.\nDefine its start point using a \u003ccode\u003ePoint\u003c/code\u003e parameter, \u003ccode\u003ePanel\u003c/code\u003e, or\n\u003ccode\u003eConstruct Point\u003c/code\u003e component.\nThen add a\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppertransform/move.html\"\u003eMove\u003c/a\u003e\ncomponent to translate the point to a new position.\nConnect the start point to the input \u003ccode\u003eGeometry\u003c/code\u003e parameter\nfor the \u003ccode\u003eMove\u003c/code\u003e component\nand connect the output \u003ccode\u003eGeometry\u003c/code\u003e component\nto the end point parameter for the \u003ccode\u003eLine\u003c/code\u003e component.\nThen connect a vector to the \u003ccode\u003eMotion\u003c/code\u003e input parameter for the \u003ccode\u003eMove\u003c/code\u003e component.\nFor example add and connect a\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppervector/unitX.html\"\u003eUnit X\u003c/a\u003e\nvector to set the direction of movement along the x-axis.\nThen connect a \u003ccode\u003eNumber Slider\u003c/code\u003e parameter\nto the input \u003ccode\u003eFactor\u003c/code\u003e for the\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppervector/unitX.html\"\u003eUnit X\u003c/a\u003e\nvector to set the length of movement.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-9.png\" alt=\"Line from translated end point\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-2.png\" alt=\"Line from constructed points\"/\u003e\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003ch2 id=\"polylines\"\u003ePolylines\u003c/h2\u003e\n\n\u003cp\u003ePolylines are a sequence of lines connecting an ordered collection of points.\nThey can be closed to form polygons.\nPlace a\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppercurve/polyLine.html\"\u003ePolyline\u003c/a\u003e\ncomponent and then connect multiple points to the \u003ccode\u003eVertices\u003c/code\u003e input parameter.\nHold shift while dragging wires to add multiple inputs.\nTo close the polyline and form a polygon, set the \u003ccode\u003eClosed\u003c/code\u003e input parameter\nto \u003ccode\u003eTrue\u003c/code\u003e either by adding a \u003ccode\u003ePanel\u003c/code\u003e or a \u003ccode\u003eBoolean Toggle\u003c/code\u003e.\nDouble click on the \u003ccode\u003eBoolean Toggle\u003c/code\u003e to change its state from true to false.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-10.png\" alt=\"Polyline\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-3.png\" alt=\"Polygon\"/\u003e\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003ch2 id=\"curves\"\u003eCurves\u003c/h2\u003e\n\n\u003cp\u003eNon-uniform rational basis spline (NURBS)\ncurves are interpolated through a set of control points.\nTo draw a curve place an\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppercurve/interpolate.html\"\u003eInterpolate\u003c/a\u003e\ncomponent and connect its input \u003ccode\u003evertices\u003c/code\u003e parameter to a set of points.\nPoints for a curve can be created from x, y, z coordinates with the\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppervector/constructPoint.html\"\u003eConstruct Point\u003c/a\u003e\ncomponent or a \u003ccode\u003ePanel\u003c/code\u003e parameter,\ndrawn in Rhino and referenced with a \u003ccode\u003ePoint\u003c/code\u003e parameter,\nor generated from a trigonometric function such as a sine wave.\n\u003ccode\u003ePoint\u003c/code\u003e parameters can easily to be edited using the gumball\nto change the shape of the curve.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-11.png\" alt=\"Curve\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eTo create a curve from a sine wave\nfirst generate a range of values from for example 0 to 10 using the\n\u003ca href=\"http://grasshopperdocs.com/components/grasshoppersets/range.html\"\u003eRange\u003c/a\u003e\ncomponent.\nConnect the range to the x coordinate of a\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppervector/constructPoint.html\"\u003eConstruct Point\u003c/a\u003e\ncomponent.\nAlso connect the range to a\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppermaths/sine.html\"\u003eSine\u003c/a\u003e\ncomponent and then connect the output of the sine function\nto the z coordinate of the \u003ccode\u003eConstruct Point\u003c/code\u003e component.\nConnect the point to the \u003ccode\u003eVertices\u003c/code\u003e input parameter of an\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppercurve/interpolate.html\"\u003eInterpolate\u003c/a\u003e\ncomponent.\nTry changing the domain, frequency, and amplitude of the sine wave.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-12.png\" alt=\"Curve\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-13.png\" alt=\"Curve\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-4.png\" alt=\"Curve\"/\u003e\u003c/p\u003e\n\n\u003chr/\u003e\n\n\u003ch2 id=\"surfaces\"\u003eSurfaces\u003c/h2\u003e\n\n\u003cp\u003eNURBS surfaces are interpolated through a 2-dimensional grid of control points.\nPrimitive surfaces can be generated with components such as\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppersurface/planeSurface.html\"\u003ePlane Surface\u003c/a\u003e,\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppersurface/box2Pt.html\"\u003eBox 2Pt\u003c/a\u003e, and\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppersurface/centerBox.html\"\u003eCenter Box\u003c/a\u003e.\nFreeform surfaces can be generated with components such as\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppersurface/boundarySurfaces.html\"\u003eBoundary Surfaces\u003c/a\u003e,\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppersurface/ruledSurface.html\"\u003eRuled Surface\u003c/a\u003e,\nand\n\u003ca href=\"http://grasshopperdocs.com/components/grasshoppersurface/loft.html\"\u003eLoft\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eCreate planar surfaces from planar curves with\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppersurface/boundarySurfaces.html\"\u003eBoundary Surfaces\u003c/a\u003e\nor as primitives with components like\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppersurface/planeSurface.html\"\u003ePlane Surface\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-14.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-15.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-16.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-17.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eCreate solids either by extruding surfaces with\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppersurface/extrude.html\"\u003eExtrude\u003c/a\u003e\nor as primitives such boxes or spheres.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-18.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-19.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-20.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eFreeform surfaces can be constructed from multiple curves\nwith components like\n\u003ca href=\"https://grasshopperdocs.com/components/grasshoppersurface/ruledSurface.html\"\u003eRuled Surface\u003c/a\u003e,\nand\n\u003ca href=\"http://grasshopperdocs.com/components/grasshoppersurface/loft.html\"\u003eLoft\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-21.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-22.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-program-23.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://media.githubusercontent.com/media/baharmon/baharmon.github.io/master/images/basics/basics-5.png\" alt=\"Surface\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eLearn how to transform this surface into furniture in the next tutorial:\n\u003ca href=\"https://baharmon.github.io/parametric-bench\"\u003eModeling a Parametric Bench in Grasshopper\u003c/a\u003e.\u003c/p\u003e\n\n\n\t\u003c/div\u003e\n\n\n\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
