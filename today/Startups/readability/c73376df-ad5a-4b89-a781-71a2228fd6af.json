{
  "id": "c73376df-ad5a-4b89-a781-71a2228fd6af",
  "title": "New era of slop security reports for open source",
  "link": "https://sethmlarson.dev/slop-security-reports",
  "description": "Article URL: https://sethmlarson.dev/slop-security-reports Comments URL: https://news.ycombinator.com/item?id=42312176 Points: 7 # Comments: 0",
  "author": "detaro",
  "published": "Tue, 03 Dec 2024 22:13:39 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "Seth Michael Larson",
  "length": 7343,
  "excerpt": "I'm on the security report triage team for CPython, pip, urllib3, Requests, and a handful of other open source projects. I'm also in a trusted position such that I get \"tagged in\" to other open sou...",
  "siteName": "sethmlarson.dev",
  "favicon": "",
  "text": "I'm on the security report triage team for CPython, pip, urllib3, Requests, and a handful of other open source projects. I'm also in a trusted position such that I get \"tagged in\" to other open source projects to help others when they need help with security. Recently I've noticed an uptick in extremely low-quality, spammy, and LLM-hallucinated security reports to open source projects. The issue is in the age of LLMs, these reports appear at first-glance to be potentially legitimate and thus require time to refute. Other projects such as curl have reported similar findings. Some reporters will run a variety of security scanning tools and open vulnerability reports based on the results seemingly without a moment of critical thinking. For example, urllib3 recently received a report because a tool was detecting our usage of SSLv2 as insecure even though our usage is to explicitly disable SSLv2. This issue is tough to tackle because it's distributed across thousands of open source projects and due to the security-sensitive nature of reports open source maintainers are discouraged from sharing their experiences or asking for help. Sharing experiences takes time and effort, something that is in short supply amongst maintainers. Responding to security reports is expensive If this is happening to a handful of projects that I have visibility for, then I suspect that this is happening on a large scale to open source projects. This is a very concerning trend. Security is already a topic that is not aligned with why many maintainers contribute their time to open source software, instead seeing security as important to help protect their users. It's critical as reporters to respect this often volunteered time. Security reports that waste maintainers' time result in confusion, stress, frustration, and to top it off a sense of isolation due to the secretive nature of security reports. All of these feelings can add to burn-out of likely highly-trusted contributors to open source projects. In many ways, these low-quality reports should be treated as if they are malicious. Even if this is not their intent, the outcome is maintainers that are burnt out and more averse to legitimate security work. What platforms can do If you're a platform accepting vulnerability reports on behalf of open source projects, here are things you can do: Add systems to prevent automated or abusive creation of security reports. Require reporters to solve CAPTCHAs or heavily rate-limit security report creation using automation. Allow a security report to be made public without publishing a vulnerability record. This would allow maintainers to \"name-and-shame\" offenders and better collaborate as a community how to fight back against low-quality reports. Today many of these reports aren't seen due to being private by default or when closed. Remove the public attribution of reporters that abuse the system, even removing previously credited reports in the case of abuse. Take away any positive incentive to reporting security issues, for example GitHub showing the number of GitHub Security Advisory \"credits\" a user appears on. Prevent or hamper newly registered users from reporting security issues. What reporters can do If you're starting a new campaign of scanning open source projects and reporting potential vulnerabilities upstream: DO NOT use AI / LLM systems for \"detecting\" vulnerabilities. These systems today cannot understand code, finding security vulnerabilities requires understanding code AND understanding human-level concepts like intent, common usage, and context. DO NOT run experiments on open source volunteers. My alma-mater the University of Minnesota rightfully had its reputation thrown in the trash in 2021 over their experiment to knowingly socially deceive Linux maintainers. DO NOT submit reports that haven't been reviewed BY A HUMAN. This reviewing time should be paid first by you, not open source volunteers. DO NOT spam projects, open a handful of reports and then WAIT. You could run the script and open tons of reports all-at-once, but likely you have faults in your process that will cause mass-frustration at scale. Learn from early mistakes and feedback. Have someone with experience in open source maintenance for the size of projects you are scanning review your plan before you begin. If that person is not on your team, then pay them for their time and expertise. Show up with patches, not just reports. By providing patches this makes the work of maintainers much easier. Doing all of the above will likely lead to better outcomes for everyone. What maintainers can do Put the same amount of effort into responding as the reporter put into submitting a sloppy report: ie, near zero. If you receive a report that you suspect is AI or LLM generated, reply with a short response and close the report: \"I suspect this report is (AI-generated|incorrect|spam). Please respond with more justification for this report. See: https://sethmlarson.dev/slop-security-reports\" If you hear back at all then admit your mistake and you move on with the security report. Maybe the reporter will fix their process and you'll have helped other open source maintainers along the way to helping yourself. If you don't hear back: great, you saved time and can get back to actually useful work. Here are some questions to ask of a security report and reporter: If you aren't sure: ask for help! Is there someone I trust in my community that I can ask for another look. You are not alone, there are many people around that are willing to help. For Python open source projects you can ask for help from me if needed. Does the reporter have a new account, no public identity, or multiple \"credited\" security reports of low quality? There are sometimes legitimate reasons to want anonymity, but I've seen this commonly on very low-stakes vulnerability reports. Is the vulnerability in the proof-of-concept code or the project itself? Oftentimes the proof-of-concept code will be using the project insecurely and thus the vulnerability is in the proof-of-concept code, not your code. Most vulnerability reporters are acting in good faith I wanted to end this article with a note that many vulnerability reporters are acting in good faith and are submitting high quality reports. Please keep in mind that vulnerability reporters are humans: not perfect and trying their best to make the world a better place. Unfortunately, an increasing majority of reports are of low quality and are ruining the experience for others. I hope we're able to fix this issue before it gets out of hand. Have thoughts or questions? Let's chat over email or social: sethmichaellarson@gmail.com @sethmlarson@fosstodon.org Want more articles like this one? Get notified of new posts by subscribing to the RSS feed or the email newsletter. I won't share your email or send spam, only whatever this is! Want more content now? This blog's archive has 100 ready-to-read articles. I also curate a list of cool URLs I find on the internet. Find a typo? This blog is open source, pull requests are appreciated. Thanks for reading! â™¡ This work is licensed under CC BY-SA 4.0",
  "image": "https://github.com/sethmlarson.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\u003cp\u003eI\u0026#39;m on the security report triage team for CPython, pip, urllib3, Requests, and a handful of other open source projects.\nI\u0026#39;m also in a trusted position such that I get \u0026#34;tagged in\u0026#34; to other open source projects\nto help others when they need help with security.\u003c/p\u003e\n\n\u003cp\u003eRecently I\u0026#39;ve noticed an uptick in extremely low-quality, spammy, and LLM-hallucinated security reports to open source projects.\nThe issue is in the age of LLMs, these reports appear at first-glance to be potentially legitimate\nand thus require time to refute. Other projects such as curl \u003ca href=\"https://daniel.haxx.se/blog/2024/01/02/the-i-in-llm-stands-for-intelligence/\"\u003ehave reported similar findings\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eSome reporters will run a variety of security scanning\ntools and open vulnerability reports based on the results seemingly without a moment of critical thinking.\nFor example, urllib3 recently received a report because a tool was detecting our usage of \u003ccode\u003eSSLv2\u003c/code\u003e as insecure\neven though our usage is to \u003ca href=\"https://github.com/urllib3/urllib3/blob/main/src/urllib3/util/ssl_.py#L309\"\u003eexplicitly disable SSLv2\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis issue is tough to tackle because it\u0026#39;s distributed across thousands of open source projects\nand due to the security-sensitive nature of reports open source maintainers are\ndiscouraged from sharing their experiences or asking for help. Sharing experiences\ntakes time and effort, something that is in short supply amongst maintainers.\u003c/p\u003e\n\n\u003ch2 id=\"responding-to-security-reports-is-expensive\"\u003eResponding to security reports is expensive\u003c/h2\u003e\n\n\u003cp\u003eIf this is happening to a handful of projects that I have visibility for, then I suspect that this\nis happening on a large scale to open source projects. This is a very concerning trend.\u003c/p\u003e\n\n\u003cp\u003eSecurity is already a topic that is not aligned with\nwhy many maintainers contribute their time to open source software,\ninstead seeing security as important to help protect their users.\nIt\u0026#39;s critical as reporters to respect this often volunteered time.\u003c/p\u003e\n\n\u003cp\u003eSecurity reports that waste maintainers\u0026#39; time\nresult in confusion, stress, frustration, and to top it off a sense of isolation due to the secretive nature of security reports.\nAll of these feelings can add to burn-out of likely highly-trusted\ncontributors to open source projects.\u003c/p\u003e\n\n\u003cp\u003eIn many ways, these low-quality reports should be treated as if they are malicious. Even if this is not their intent,\nthe outcome is maintainers that are burnt out and more averse to legitimate security work.\u003c/p\u003e\n\n\u003ch2 id=\"what-platforms-can-do\"\u003eWhat platforms can do\u003c/h2\u003e\n\n\u003cp\u003eIf you\u0026#39;re a platform accepting vulnerability reports on behalf of open source projects, here\nare things you can do:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd systems to prevent automated or abusive creation of security reports.\nRequire reporters to solve CAPTCHAs or heavily rate-limit security report creation\nusing automation.\u003c/li\u003e\n\u003cli\u003eAllow a security report to be made public without publishing a vulnerability record. This would\nallow maintainers to \u0026#34;name-and-shame\u0026#34; offenders and better collaborate as a community how to\nfight back against low-quality reports. Today many of these reports aren\u0026#39;t seen due to being private by default\nor when closed.\u003c/li\u003e\n\u003cli\u003eRemove the public attribution of reporters that abuse the system, even removing previously credited\nreports in the case of abuse.\u003c/li\u003e\n\u003cli\u003eTake away any positive incentive to reporting security issues, for example GitHub showing\nthe number of GitHub Security Advisory \u0026#34;credits\u0026#34; a user appears on.\u003c/li\u003e\n\u003cli\u003ePrevent or hamper newly registered users from reporting security issues.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"what-reporters-can-do\"\u003eWhat reporters can do\u003c/h2\u003e\n\n\u003cp\u003eIf you\u0026#39;re starting a new campaign of scanning open source projects\nand reporting potential vulnerabilities upstream:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDO NOT\u003c/strong\u003e use AI / LLM systems for \u0026#34;detecting\u0026#34; vulnerabilities. These systems today cannot understand code,\nfinding security vulnerabilities requires understanding code AND understanding human-level concepts like\nintent, common usage, and context.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDO NOT\u003c/strong\u003e run experiments on open source volunteers. My alma-mater the University of Minnesota\n\u003ca href=\"https://cse.umn.edu/cs/linux-incident\"\u003erightfully had its reputation thrown in the trash in 2021\u003c/a\u003e\nover their experiment to knowingly socially deceive Linux maintainers.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDO NOT\u003c/strong\u003e submit reports that haven\u0026#39;t been reviewed \u003cstrong\u003eBY A HUMAN\u003c/strong\u003e. This reviewing time should be paid first by you, not open source volunteers.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDO NOT\u003c/strong\u003e spam projects, open a handful of reports and then \u003cstrong\u003eWAIT\u003c/strong\u003e. You could run the script and open tons of reports\nall-at-once, but likely you have faults in your process that will cause mass-frustration at scale. Learn from early mistakes and feedback.\u003c/li\u003e\n\u003cli\u003eHave someone with experience in open source maintenance \u003cstrong\u003efor the size of projects you are scanning\u003c/strong\u003e\nreview your plan before you begin. If that person is not on your team, then pay them for their time and expertise.\u003c/li\u003e\n\u003cli\u003eShow up with patches, not just reports. By providing patches this makes the work of maintainers much easier.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDoing all of the above will likely lead to better outcomes for everyone.\u003c/p\u003e\n\n\u003ch2 id=\"what-maintainers-can-do\"\u003eWhat maintainers can do\u003c/h2\u003e\n\n\u003cp\u003ePut the same amount of effort into responding as the reporter put into submitting a sloppy report: ie, near zero.\nIf you receive a report that you suspect is AI or LLM generated, reply with a short response and close the report:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u0026#34;I suspect this report is (AI-generated|incorrect|spam). Please respond with more justification for this report. See: https://sethmlarson.dev/slop-security-reports\u0026#34;\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIf you hear back at all then admit your mistake and you move on\nwith the security report. Maybe the reporter will fix their process and you\u0026#39;ll have helped other\nopen source maintainers along the way to helping yourself.\u003c/p\u003e\n\n\u003cp\u003eIf you don\u0026#39;t hear back: great, you saved time and can get back to\nactually useful work.\u003c/p\u003e\n\n\u003cp\u003eHere are some questions to ask of a security report and reporter:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003eIf you aren\u0026#39;t sure: ask for help! Is there someone I trust in my community that\nI can ask for another look. \u003cstrong\u003eYou are not alone, there are many people around\nthat are willing to help\u003c/strong\u003e. For Python open source projects you can ask for help\nfrom me if needed.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eDoes the reporter have a new account, no public identity,\nor multiple \u0026#34;credited\u0026#34; security reports of low quality? There are sometimes\nlegitimate reasons to want anonymity, but I\u0026#39;ve seen this commonly on very\nlow-stakes vulnerability reports.\u003c/p\u003e\u003c/li\u003e\n\u003cli\u003e\u003cp\u003eIs the vulnerability in the proof-of-concept code or the project itself?\nOftentimes the proof-of-concept code will be using the project insecurely\nand thus the vulnerability is in the proof-of-concept code, not your code.\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"most-vulnerability-reporters-are-acting-in-good-faith\"\u003eMost vulnerability reporters are acting in good faith\u003c/h2\u003e\n\n\u003cp\u003eI wanted to end this article with a note that many vulnerability reporters are\nacting in good faith and are submitting high quality reports. Please keep in mind\nthat vulnerability reporters are humans: not perfect and trying their best\nto make the world a better place.\u003c/p\u003e\n\n\u003cp\u003eUnfortunately, an increasing majority of reports are of low quality and are ruining the\nexperience for others. I hope we\u0026#39;re able to fix this issue before it gets out of hand.\u003c/p\u003e\n\n\u003cblockquote\u003e\n    \u003cp\u003e\n        \u003cstrong\u003eHave thoughts or questions?\u003c/strong\u003e Let\u0026#39;s chat over email or social:\n    \u003c/p\u003e\n    \u003cp\u003e\n        \u003ca href=\"mailto:sethmichaellarson@gmail.com\"\u003e\u003ccode\u003esethmichaellarson@gmail.com\u003c/code\u003e\u003c/a\u003e\u003cbr/\u003e\n        \u003ca href=\"https://fosstodon.org/@sethmlarson\"\u003e\u003ccode\u003e@sethmlarson@fosstodon.org\u003c/code\u003e\u003c/a\u003e\n    \u003c/p\u003e\n    \u003cp\u003e\n        \u003cstrong\u003eWant more articles like this one?\u003c/strong\u003e\n        \u003cnobr\u003eGet notified of new posts\u003c/nobr\u003e by subscribing to the \u003ca href=\"https://sethmlarson.dev/feed\"\u003eRSS feed\u003c/a\u003e or the \u003ca href=\"https://buttondown.email/sethmlarson\"\u003eemail newsletter\u003c/a\u003e.\n        I won\u0026#39;t share your email or send spam, only whatever \u003cem\u003ethis\u003c/em\u003e is!\n    \u003c/p\u003e\n    \n    \u003cp\u003e\n        \u003cstrong\u003eWant more content now?\u003c/strong\u003e This \u003ca href=\"https://sethmlarson.dev/blog\"\u003eblog\u0026#39;s archive\u003c/a\u003e has 100 ready-to-read articles. I also curate\n        a \u003ca href=\"https://sethmlarson.dev/links\"\u003elist of cool URLs\u003c/a\u003e I find on the internet.\n    \u003c/p\u003e\n    \u003cp\u003e\n        \u003cstrong\u003eFind a typo?\u003c/strong\u003e \u003ca href=\"https://github.com/sethmlarson/sethmlarson.dev\"\u003eThis blog is open source\u003c/a\u003e, pull requests are appreciated.\n    \u003c/p\u003e\n    \u003cp\u003e\n        \u003cstrong\u003eThanks for reading!\u003c/strong\u003e â™¡ This work is licensed under \u003cnobr\u003e\u003ca href=\"https://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\"\u003eCC BY-SA 4.0\u003c/a\u003e \u003ca href=\"https://creativecommons.org/licenses/by-sa/4.0/?ref=chooser-v1\" target=\"_blank\" rel=\"license noopener noreferrer\"\u003e\u003cimg src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"/\u003e\u003cimg src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"/\u003e\u003cimg src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"/\u003e\u003c/a\u003e\u003c/nobr\u003e\n    \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
