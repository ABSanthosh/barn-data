{
  "id": "57f886e3-bcb0-4efa-af83-0a6df3b93158",
  "title": "Meta pauses mobile port tracking tech on Android after researchers cry foul",
  "link": "https://www.theregister.com/2025/06/03/meta_pauses_android_tracking_tech/",
  "description": "Article URL: https://www.theregister.com/2025/06/03/meta_pauses_android_tracking_tech/ Comments URL: https://news.ycombinator.com/item?id=44175940 Points: 8 # Comments: 1",
  "author": "coloneltcb",
  "published": "Tue, 03 Jun 2025 23:42:38 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "Thomas Claburn",
  "length": 6924,
  "excerpt": ": Zuckercorp and Yandex used localhost loophole to tie browser data to app users, say boffins",
  "siteName": "The Register",
  "favicon": "https://www.theregister.com/design_picker/13249a2e80709c7ff2e57dd3d49801cd534f2094/graphics/favicons/apple-touch-icon.png",
  "text": "Security researchers say Meta and Yandex used native Android apps to listen on localhost ports, allowing them to link web browsing data to user identities and bypass typical privacy protections. Following the disclosure, researchers observed that Meta's Pixel script stopped sending data to localhost and that the tracking code was largely removed. The move may help Meta avoid scrutiny under Google Play policies, which prohibit covert data collection in apps. \"We are in discussions with Google to address a potential miscommunication regarding the application of their policies,\" a Meta spokesperson told The Register. \"Upon becoming aware of the concerns, we decided to pause the feature while we work with Google to resolve the issue.\" Meta's spokesperson did not respond to a request to elaborate on the company's discussions with Google. What the researchers found In a report published Tuesday, computer scientists affiliated with IMDEA Networks (Spain), Radboud University (The Netherlands), and KU Leuven (Belgium) describe how the US social media giant and the Russian search engine were observed using native Android apps to gather web cookie data via the device's loopback interface, commonly known as localhost. Localhost is a loopback address that a device can use to make a network request to itself. It's commonly used by software developers to test server-based applications like websites on local hardware. The researchers – Aniketh Girish (PhD student), Gunes Acar (Assistant Professor), Narseo Vallina-Rodriguez (Associate Professor), Nipuna Weerasekara (PhD student), and Tim Vlummens (PhD student) – say they found native Android apps, including Facebook and Instagram, and Yandex's Maps and Browser – that listen silently on fixed local ports for tracking purposes. \"These native Android apps receive browsers' metadata, cookies and commands from the Meta Pixel and Yandex Metrica scripts embedded on thousands of websites,\" the computer scientists explain. \"These JavaScripts load on users' mobile browsers and silently connect with native apps running on the same device through localhost sockets.\" As these native apps access device identifiers like the Android Advertising ID or handle user identities in Meta apps, the researchers say, they're able to link mobile browsing sessions and web cookies to user identities. Essentially, by opening localhost ports that allow their Android apps to receive tracking data, such as cookies and browser metadata, from scripts running in mobile browsers, Meta and Yandex are able to bypass common privacy safeguards like cookie clearing, Incognito Mode, and Android's app permission system. The technique also violates assumptions about the scope of first-party cookies, which aren't supposed to be able to track browsing activity across different websites. According to the researchers, \"the method we disclose allows the linking of the different _fbp cookies to the same user, which bypasses existing protections and runs counter to user expectations.\" With regard to Meta, the tracking process involves scripts associated with Meta Pixel, analytics code used by marketers to gather data about interactions with websites. Various APIs and protocols can be used to implement the described app-web eavesdropping scheme. These include: SDP munging, which involves manually modifying Session Description Protocol (SDP) messages before the data gets passed to the browser; real-time communications protocols Websocket and WebRTC; Session Traversal Utilities for NAT (STUN), an address discovery mechanism; and Traversal Using Relays around NAT (TURN), a router restriction bypass method. X's new 'encrypted' XChat feature seems no more secure than the failure that came before it Meta – yep, Facebook Meta – is now a defense contractor Billions of cookies up for grabs as experts warn over session security Irish privacy watchdog OKs Meta to train AI on EU folks' posts The researchers describe Meta's approach thus: The user opens the native Facebook or Instagram app, which eventually is sent to the background and creates a background service to listen for incoming traffic on a TCP port (12387 or 12388) and a UDP port (the first unoccupied port in 12580-12585). Users must be logged-in with their credentials on the apps. The user opens their browser and visits a website integrating the Meta Pixel. At this stage, websites may ask for consent depending on the website's and visitor's locations. The Meta Pixel script sends the _fbp cookie to the native Instagram or Facebook app via WebRTC (STUN) SDP Munging. The Meta Pixel script also sends the _fbp value in a request to https://www.facebook.com/tr along with other parameters such as page URL (dl), website and browser metadata, and the event type (ev) (e.g., PageView, AddToCart, Donate, Purchase). The Facebook or Instagram apps receive the _fbp cookie from the Meta Pixel JavaScript running on the browser. The apps transmit _fbp as a GraphQL mutation to (https://graph[.]facebook[.]com/graphql) along with other persistent user identifiers, linking users' fbp ID (web visit) with their Facebook or Instagram account. Researchers observed Meta implementing this technique starting in September 2024, transmitting data via HTTP. Third-party developers working with Meta APIs noted and questioned the behavior in forum posts at the time. HTTP-based data transmission using this technique supposedly ended the following month, but other methods of transmission (WebSocket, WebRTC STUN (w/ SDP Munging), and WebRTC TURN (w/o SDP Munging)) were identified in subsequent months. Presently, however, Meta's use of these techniques appears to have halted. According to the researchers, \"As of June 3rd 7:45 CEST, Meta/Facebook Pixel script is no longer sending any packets or requests to localhost. The code responsible for sending the _fbp cookie has been almost completely removed.\" Yandex's use of localhost-based tracking dates back to 2017, according to the researchers. The Register sought to ask Yandex media relations about the researchers' claims but our inquiry was bounced as spam. The report authors note that their disclosure to Android browser vendors has led to several mitigations. Chrome 137, which shipped May 26, 2025, includes countermeasures to block the SDP Munging technique used by Meta Pixel, though these have only been made available to a subset of users participating in a gated field trial. A fix is currently being developed for Mozilla Firefox. Brave is unaffected as it requires consent for localhost use. And DuckDuckGo has modified its blocklist to stop Yandex's scripts. Beyond these, the authors suggest a Google proposal to create a new \"local network access\" permission that could help mitigate localhost-based tracking in the future. A prior proposal along these lines ran into technical barriers. ®",
  "image": "https://regmedia.co.uk/2019/04/30/zuck-private.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"body\"\u003e\n\u003cp\u003eSecurity researchers say Meta and Yandex used native Android apps to listen on localhost ports, allowing them to link web browsing data to user identities and bypass typical privacy protections.\u003c/p\u003e\n\u003cp\u003eFollowing the disclosure, researchers observed that Meta\u0026#39;s Pixel script stopped sending data to localhost and that the tracking code was largely removed. The move may help Meta avoid scrutiny under Google Play policies, which prohibit covert data collection in apps.\u003c/p\u003e\n\u003cp\u003e\u0026#34;We are in discussions with Google to address a potential miscommunication regarding the application of their policies,\u0026#34; a Meta spokesperson told \u003cem\u003eThe Register\u003c/em\u003e. \u0026#34;Upon becoming aware of the concerns, we decided to pause the feature while we work with Google to resolve the issue.\u0026#34;\u003c/p\u003e\n\n    \n\n\u003cp\u003eMeta\u0026#39;s spokesperson did not respond to a request to elaborate on the company\u0026#39;s discussions with Google.\u003c/p\u003e\n\u003ch3\u003eWhat the researchers found\u003c/h3\u003e\n\u003cp\u003eIn a \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://localmess.github.io/\"\u003ereport\u003c/a\u003e published Tuesday, computer scientists affiliated with IMDEA Networks (Spain), Radboud University (The Netherlands), and KU Leuven (Belgium) describe how the US social media giant and the Russian search engine were observed using native Android apps to gather web cookie data via the device\u0026#39;s loopback interface, commonly known as localhost.\u003c/p\u003e\n\u003cp\u003eLocalhost is a loopback address that a device can use to make a network request to itself. It\u0026#39;s commonly used by software developers to test server-based applications like websites on local hardware.\u003c/p\u003e\n\n        \n\n\n        \n\n\u003cp\u003eThe researchers – Aniketh Girish (PhD student), Gunes Acar (Assistant Professor), Narseo Vallina-Rodriguez (Associate Professor), Nipuna Weerasekara (PhD student), and Tim Vlummens (PhD student) – say they found native Android apps, including Facebook and Instagram, and Yandex\u0026#39;s Maps and Browser – that listen silently on fixed local ports for tracking purposes.\u003c/p\u003e\n\u003cp\u003e\u0026#34;These native Android apps receive browsers\u0026#39; metadata, cookies and commands from the Meta Pixel and Yandex Metrica scripts embedded on thousands of websites,\u0026#34; the computer scientists explain. \u0026#34;These JavaScripts load on users\u0026#39; mobile browsers and silently connect with native apps running on the same device through localhost sockets.\u0026#34;\u003c/p\u003e\n\n        \n\n\u003cp\u003eAs these native apps access device identifiers like the Android Advertising ID or handle user identities in Meta apps, the researchers say, they\u0026#39;re able to link mobile browsing sessions and web cookies to user identities.\u003c/p\u003e\n\u003cp\u003eEssentially, by opening localhost ports that allow their Android apps to receive tracking data, such as cookies and browser metadata, from scripts running in mobile browsers, Meta and Yandex are able to bypass common privacy safeguards like cookie clearing, Incognito Mode, and Android\u0026#39;s app permission system.\u003c/p\u003e\n\u003cp\u003eThe technique also violates assumptions about the scope of first-party cookies, which aren\u0026#39;t supposed to be able to track browsing activity across different websites. According to the researchers, \u0026#34;the method we disclose allows the linking of the different _fbp cookies to the same user, which bypasses existing protections and runs counter to user expectations.\u0026#34;\u003c/p\u003e\n\n        \n\n\u003cp\u003eWith regard to Meta, the tracking process involves scripts associated with \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://www.facebook.com/business/tools/meta-pixel\"\u003eMeta Pixel\u003c/a\u003e, analytics code used by marketers to gather data about interactions with websites.\u003c/p\u003e\n\u003cp\u003eVarious APIs and protocols can be used to implement the described app-web eavesdropping scheme. These include: SDP munging, which involves manually modifying Session Description Protocol (SDP) messages before the data gets passed to the browser; real-time communications protocols \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\"\u003eWebsocket\u003c/a\u003e and \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Protocols\"\u003eWebRTC\u003c/a\u003e; Session Traversal Utilities for NAT (STUN), an address discovery mechanism; and Traversal Using Relays around NAT (TURN), a router restriction bypass method.\u003c/p\u003e\n\u003cul\u003e\n\n\u003cli\u003e\u003ca href=\"https://www.theregister.com/2025/06/03/xs_new_encrypted_xchat_feature/\"\u003eX\u0026#39;s new \u0026#39;encrypted\u0026#39; XChat feature seems no more secure than the failure that came before it\u003c/a\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003ca href=\"https://www.theregister.com/2025/05/30/meta_is_now_a_defense/\"\u003eMeta – yep, Facebook Meta – is now a defense contractor\u003c/a\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003ca href=\"https://www.theregister.com/2025/05/29/billions_of_cookies_available/\"\u003eBillions of cookies up for grabs as experts warn over session security\u003c/a\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003ca href=\"https://www.theregister.com/2025/05/22/irish_data_protection_commission_gives/\"\u003eIrish privacy watchdog OKs Meta to train AI on EU folks\u0026#39; posts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe researchers describe Meta\u0026#39;s approach thus:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003col\u003e\n\n\u003cli\u003eThe user opens the native Facebook or Instagram app, which eventually is sent to the background and creates a background service to listen for incoming traffic on a TCP port (12387 or 12388) and a UDP port (the first unoccupied port in 12580-12585). Users must be logged-in with their credentials on the apps.\u003c/li\u003e\n\n\u003cli\u003eThe user opens their browser and visits a website integrating the Meta Pixel.\u003c/li\u003e\n\n\u003cli\u003eAt this stage, websites may ask for consent depending on the website\u0026#39;s and visitor\u0026#39;s locations.\u003c/li\u003e\n\n\u003cli\u003eThe Meta Pixel script sends the \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://localmess.github.io/#about_fbp\"\u003e_fbp cookie\u003c/a\u003e to the native Instagram or Facebook app via WebRTC (STUN) \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://webrtchacks.com/not-a-guide-to-sdp-munging/\"\u003eSDP Munging\u003c/a\u003e.\u003c/li\u003e\n\n\u003cli\u003eThe Meta Pixel script also sends the _fbp value in a request to https://www.facebook.com/tr along with other parameters such as page URL (dl), website and browser metadata, and the \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://web.archive.org/web/20250531104925/https://developers.facebook.com/docs/meta-pixel/reference/\"\u003eevent type\u003c/a\u003e (ev) (e.g., PageView, AddToCart, Donate, Purchase).\u003c/li\u003e\n\n\u003cli\u003eThe Facebook or Instagram apps receive the _fbp cookie from the Meta Pixel JavaScript running on the browser. The apps transmit _fbp as a GraphQL mutation to (https://graph[.]facebook[.]com/graphql) along with other persistent user identifiers, linking users\u0026#39; fbp ID (web visit) with their Facebook or Instagram account.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eResearchers observed Meta implementing this technique starting in September 2024, transmitting data via HTTP. Third-party developers working with Meta APIs noted and questioned the behavior in \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://web.archive.org/web/20250531105747/https://developers.facebook.com/community/threads/317050484803752/\"\u003eforum\u003c/a\u003e \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://web.archive.org/web/20250531105711/https://developers.facebook.com/community/threads/937149104821259/\"\u003eposts\u003c/a\u003e at the time.\u003c/p\u003e\n\u003cp\u003eHTTP-based data transmission using this technique supposedly ended the following month, but other methods of transmission (WebSocket, WebRTC STUN (w/ SDP Munging), and WebRTC TURN (w/o SDP Munging)) were identified in subsequent months.\u003c/p\u003e\n\u003cp\u003ePresently, however, Meta\u0026#39;s use of these techniques appears to have halted. According to the researchers, \u0026#34;As of June 3rd 7:45 CEST, Meta/Facebook Pixel script is no longer sending any packets or requests to localhost. The code responsible for sending the _fbp cookie has been almost completely removed.\u0026#34;\u003c/p\u003e\n\u003cp\u003eYandex\u0026#39;s use of localhost-based tracking dates back to 2017, according to the researchers.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eThe Register\u003c/em\u003e sought to ask Yandex media relations about the researchers\u0026#39; claims but our inquiry was bounced as spam.\u003c/p\u003e\n\u003cp\u003eThe report authors note that their disclosure to Android browser vendors has led to several mitigations.\u003c/p\u003e\n\u003cp\u003eChrome 137, which shipped May 26, 2025, includes countermeasures \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://webrtc.googlesource.com/src.git/+/72d6d748ddbe5d7f63ba5f2dd1ce195a342c0a12\"\u003eto block the SDP Munging\u003c/a\u003e technique used by Meta Pixel, though these have only been made available to a subset of users participating in a gated field trial. A fix is currently being developed for Mozilla Firefox. Brave is unaffected as it \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://brave.com/privacy-updates/27-localhost-permission/\"\u003erequires consent for localhost\u003c/a\u003e use. And DuckDuckGo has modified its blocklist to stop Yandex\u0026#39;s scripts.\u003c/p\u003e\n\u003cp\u003eBeyond these, the authors suggest a Google \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/explainers-by-googlers/local-network-access\"\u003eproposal\u003c/a\u003e to create a new \u0026#34;local network access\u0026#34; permission that could help mitigate localhost-based tracking in the future. A \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://wicg.github.io/private-network-access/\"\u003eprior proposal\u003c/a\u003e along these lines ran into \u003ca target=\"_blank\" rel=\"nofollow\" href=\"https://developer.chrome.com/blog/pna-on-hold\"\u003etechnical barriers\u003c/a\u003e. ®\u003c/p\u003e                                \n                    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-06-03T23:18:04Z",
  "modifiedTime": null
}
