{
  "id": "a890b5e2-f6e2-413d-8e45-7c6f82f6d4e6",
  "title": "Save your disk, write files directly into RAM with /dev/shm",
  "link": "https://hiandrewquinn.github.io/til-site/posts/save-your-disk-write-files-directly-into-ram-with-dev-shm/",
  "description": "Article URL: https://hiandrewquinn.github.io/til-site/posts/save-your-disk-write-files-directly-into-ram-with-dev-shm/ Comments URL: https://news.ycombinator.com/item?id=44392304 Points: 45 # Comments: 50",
  "author": "hiAndrewQuinn",
  "published": "Thu, 26 Jun 2025 23:04:30 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 1972,
  "excerpt": "Given my interest in extending the life of my SD cards and hard drives as much as possible, I’m surprised I haven’t come across /dev/shm before. In a word it’s a world-accessible RAM scratchpad, which seems baked right into POSIX, so that virtually every ~Unix~ EDIT: Linux system already has it mounted as a tmpfs by default: 1 2 ❯ mount | grep '/dev/shm' tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,inode64) Today’s lucky 10,000, indeed.",
  "siteName": "Andrew Quinn's TILs",
  "favicon": "https://hiandrewquinn.github.io/til-site/favicon-32x32.png",
  "text": "Given my interest in extending the life of my SD cards and hard drives as much as possible, I’m surprised I haven’t come across /dev/shm before. In a word it’s a world-accessible RAM scratchpad, which seems baked right into POSIX, so that virtually every ~Unix~ EDIT: Linux system already has it mounted as a tmpfs by default:1 2 ❯ mount | grep '/dev/shm' tmpfs on /dev/shm type tmpfs (rw,nosuid,nodev,inode64) Today’s lucky 10,000, indeed. It gets mentioned often in Hacker News comments, but surprisingly I couldn’t find any actual articles talking about it. The existence of /dev/shm is a boon for me mostly because it means I never have to worry about whether /tmp is really RAM-based again.Much like any filesystem running purely in silico this has to come with a big fat disclaimer that anything in /dev/shm is lost upon reboot. If you can live with that, and if you don’t run memory hog programs 24/7, you can put things you’re currently working with in there to mess with to your heart’s content, and get a few orders of magnitude more performance out of anything you might want to do with those files.Per the course for this blog, my use case today is linguistics. An average invocation of1 2 3 4 curl -s \"https://en.wiktionary.org/wiki/$word\" | \\ pandoc --from=html --to=plain | \\ sed -n '/^Finnish$/,$p' \u003e/dev/shm/$word.txt \\ \u0026\u0026 vim -c \"set nowrap\" /dev/shm/$word.txt adds a file of only around 40-50 KB to my little scratchpad, and opens it in everyone’s favorite pager that also happens to be a text editor. 1 GB of free RAM buys you about 20,000 such files. The entire corpus of English-language Finnish words in Wiktionary would probably fit in about 4-5 GB of RAM if we wanted to.In general I have found that moving 1-4 GB files I expect to work heavily with into /dev/shm first makes operating on them with standard command-line tools much, much more pleasant. File sieves which took tens of seconds to run, like jq or rg1, now run almost instantly.",
  "image": "https://hiandrewquinn.github.io/til-site/papermod-cover.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eGiven my interest in extending the life of my SD cards and hard drives\nas much as possible,\nI’m surprised I haven’t come across \u003ccode\u003e/dev/shm\u003c/code\u003e before.\nIn a word\nit’s a world-accessible RAM scratchpad, which seems baked right into POSIX,\nso that virtually every ~Unix~ EDIT: \u003cem\u003eLinux\u003c/em\u003e\nsystem already has it mounted as a\n\u003ccode\u003etmpfs\u003c/code\u003e by default:\u003c/p\u003e\u003cdiv\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u003cspan id=\"hl-0-1\"\u003e\u003ca href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan id=\"hl-0-2\"\u003e\u003ca href=\"#hl-0-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan\u003e\u003cspan\u003e❯ mount | grep \u003cspan\u003e\u0026#39;/dev/shm\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003etmpfs on /dev/shm type tmpfs \u003cspan\u003e(\u003c/span\u003erw,nosuid,nodev,inode64\u003cspan\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://xkcd.com/1053/\"\u003eToday’s lucky 10,000, indeed\u003c/a\u003e.\nIt gets mentioned often in Hacker News comments, but surprisingly I couldn’t\nfind any actual articles talking about it.\nThe existence of \u003ccode\u003e/dev/shm\u003c/code\u003e is a boon for me mostly because it means I never\nhave to worry about whether \u003ccode\u003e/tmp\u003c/code\u003e is \u003cem\u003ereally\u003c/em\u003e RAM-based again.\u003c/p\u003e\u003cp\u003eMuch like any filesystem running purely \u003cem\u003ein silico\u003c/em\u003e this has to come with a big\nfat disclaimer that \u003cstrong\u003eanything in \u003ccode\u003e/dev/shm\u003c/code\u003e is lost upon reboot\u003c/strong\u003e.\nIf you can\nlive with that, and if you don’t run memory hog programs 24/7, you can put\nthings you’re currently working with in there to mess with to your heart’s\ncontent, and get a few orders of magnitude more performance out of anything\nyou might want to do with those files.\u003c/p\u003e\u003cp\u003ePer the course for this blog, my use case today is linguistics. An average invocation of\u003c/p\u003e\u003cdiv\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u003cspan id=\"hl-1-1\"\u003e\u003ca href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan id=\"hl-1-2\"\u003e\u003ca href=\"#hl-1-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan id=\"hl-1-3\"\u003e\u003ca href=\"#hl-1-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003cspan id=\"hl-1-4\"\u003e\u003ca href=\"#hl-1-4\"\u003e4\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003ctd\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"bash\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -s \u003cspan\u003e\u0026#34;https://en.wiktionary.org/wiki/\u003c/span\u003e$word\u003cspan\u003e\u0026#34;\u003c/span\u003e | \u003cspan\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e  pandoc --from\u003cspan\u003e=\u003c/span\u003ehtml --to\u003cspan\u003e=\u003c/span\u003eplain | \u003cspan\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e  sed -n \u003cspan\u003e\u0026#39;/^Finnish$/,$p\u0026#39;\u003c/span\u003e \u0026gt;/dev/shm/$word.txt \u003cspan\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e  \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e vim -c \u003cspan\u003e\u0026#34;set nowrap\u0026#34;\u003c/span\u003e /dev/shm/$word.txt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/div\u003e\u003cp\u003eadds a file of only around 40-50 KB to my little scratchpad, and opens it in everyone’s\nfavorite pager that also happens to be a text editor. 1 GB of free RAM buys you about\n20,000 such files. The entire corpus of English-language Finnish words in Wiktionary\nwould probably fit in about 4-5 GB of RAM if we wanted to.\u003c/p\u003e\u003cp\u003eIn general I have found that moving 1-4 GB files I expect to work heavily with into\n\u003ccode\u003e/dev/shm\u003c/code\u003e first makes operating on them with standard command-line tools much, much\nmore pleasant. File sieves which took tens of seconds to run, like \u003ccode\u003ejq\u003c/code\u003e or \u003ccode\u003erg\u003c/code\u003e\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e,\nnow run almost instantly.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-06-26T00:00:00Z",
  "modifiedTime": "2025-06-26T00:00:00Z"
}
