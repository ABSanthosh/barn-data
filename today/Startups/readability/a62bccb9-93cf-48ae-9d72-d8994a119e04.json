{
  "id": "a62bccb9-93cf-48ae-9d72-d8994a119e04",
  "title": "Weird Languages",
  "link": "http://www.paulgraham.com/weird.html",
  "description": "",
  "author": "",
  "published": "",
  "source": "http://www.aaronsw.com/2002/feeds/pgessays.rss",
  "categories": null,
  "byline": "",
  "length": 2105,
  "excerpt": "When people say that in their experience all programming languages are basically equivalent, they're making a statement not about languages but about the kind of programming they've done.",
  "siteName": "",
  "favicon": "http://ycombinator.com/arc/arc.png",
  "text": "August 2021When people say that in their experience all programming languages are basically equivalent, they're making a statement not about languages but about the kind of programming they've done.99.5% of programming consists of gluing together calls to library functions. All popular languages are equally good at this. So one can easily spend one's whole career operating in the intersection of popular programming languages.But the other .5% of programming is disproportionately interesting. If you want to learn what it consists of, the weirdness of weird languages is a good clue to follow.Weird languages aren't weird by accident. Not the good ones, at least. The weirdness of the good ones usually implies the existence of some form of programming that's not just the usual gluing together of library calls.A concrete example: Lisp macros. Lisp macros seem weird even to many Lisp programmers. They're not only not in the intersection of popular languages, but by their nature would be hard to implement properly in a language without turning it into a dialect of Lisp. And macros are definitely evidence of techniques that go beyond glue programming. For example, solving problems by first writing a language for problems of that type, and then writing your specific application in it. Nor is this all you can do with macros; it's just one region in a space of program-manipulating techniques that even now is far from fully explored.So if you want to expand your concept of what programming can be, one way to do it is by learning weird languages. Pick a language that most programmers consider weird but whose median user is smart, and then focus on the differences between this language and the intersection of popular languages. What can you say in this language that would be impossibly inconvenient to say in others? In the process of learning how to say things you couldn't previously say, you'll probably be learning how to think things you couldn't previously think. Thanks to Trevor Blackwell, Patrick Collison, Daniel Gackle, Amjad Masad, and Robert Morris for reading drafts of this.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv width=\"435\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cimg src=\"https://s.turbifycdn.com/aah/paulgraham/weird-languages-4.gif\" width=\"139\" height=\"18\" alt=\"Weird Languages\"/\u003e\u003cspan size=\"2\" face=\"verdana\"\u003eAugust 2021\u003cp\u003eWhen people say that in their experience all programming languages\nare basically equivalent, they\u0026#39;re making a statement not about\nlanguages but about the kind of programming they\u0026#39;ve done.\u003c/p\u003e\u003cp\u003e99.5% of programming consists of gluing together calls to library\nfunctions. All popular languages are equally good at this. So one\ncan easily spend one\u0026#39;s whole career operating in the intersection\nof popular programming languages.\u003c/p\u003e\u003cp\u003eBut the other .5% of programming is disproportionately interesting.\nIf you want to learn what it consists of, the weirdness of weird\nlanguages is a good clue to follow.\u003c/p\u003e\u003cp\u003eWeird languages aren\u0026#39;t weird by accident. Not the good ones, at\nleast. The weirdness of the good ones usually implies the existence\nof some form of programming that\u0026#39;s not just the usual gluing together\nof library calls.\u003c/p\u003e\u003cp\u003eA concrete example: Lisp macros. Lisp macros seem weird even to\nmany Lisp programmers. They\u0026#39;re not only not in the intersection of\npopular languages, but by their nature would be hard to implement\nproperly in a language without turning it into a dialect of\nLisp. And macros are definitely evidence of techniques that go\nbeyond glue programming. For example, solving problems by first\nwriting a language for problems of that type, and then writing\nyour specific application in it. Nor is this all you can do with\nmacros; it\u0026#39;s just one region in a space of program-manipulating\ntechniques that even now is far from fully explored.\u003c/p\u003e\u003cp\u003eSo if you want to expand your concept of what programming can be,\none way to do it is by learning weird languages. Pick a language\nthat most programmers consider weird but whose median user is smart,\nand then focus on the differences between this language and the\nintersection of popular languages. What can you say in this language\nthat would be impossibly inconvenient to say in others? In the\nprocess of learning how to say things you couldn\u0026#39;t previously say,\nyou\u0026#39;ll probably be learning how to think things you couldn\u0026#39;t\npreviously think.\u003c/p\u003e\u003cspan color=\"888888\"\u003e\n\u003cb\u003eThanks\u003c/b\u003e to Trevor Blackwell, Patrick Collison, Daniel Gackle, Amjad\nMasad, and Robert Morris for reading drafts of this.\n\u003c/span\u003e\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
