{
  "id": "99b4bd1c-1f1d-4b5f-b9c9-2383ecde3682",
  "title": "Clerk",
  "link": "https://go.clerk.com/2n40MWr",
  "description": "",
  "author": "John Gruber",
  "published": "2025-02-16T18:00:00Z",
  "source": "https://daringfireball.net/feeds/main",
  "categories": null,
  "byline": "",
  "length": 2407,
  "excerpt": "Add authentication and user management to your iOS app with Clerk.",
  "siteName": "",
  "favicon": "",
  "text": "Disable bot protectionBot protection is enabled by default for all Clerk apps. However, it is not supported in native apps.To turn off bot protection: In the Clerk Dashboard, navigate to the Attack protection page. Disable Bot sign-up protection. Create an iOS ProjectTo get started using Clerk with iOS, create a new project in Xcode. Select SwiftUI as your interface and Swift as your language. See the Xcode documentation for more information.Install the Clerk iOS SDKFollow the Swift Package Manager instructions to install Clerk as a dependency. When prompted for the package URL, enter https://github.com/clerk/clerk-ios. Be sure to add the package to your target.Load ClerkTo use Clerk in your app, you must first configure and load Clerk. Inside your new project in Xcode, open your @main app file. Import Clerk. Create a reference to the shared Clerk instance. Replace ContentView() with the below ZStack. Inject your reference to the shared clerk instance into the environment. Attach a .task modifier to the new ZStack. In the body of the task, configure clerk with your Publishable Key, and then load clerk. You can get your Publishable Key from the API keys page in the Clerk Dashboard. ClerkQuickstartApp.swiftConditionally render contentTo render content based on whether a user is authenticated or not: Open your ContentView file. Import Clerk. Access the shared Clerk instance that you injected into the environment in the previous step. Replace the content of the view body with a conditional that checks for a clerk.user. ContentView.swiftCreate views for sign-up and sign-inSignUpViewThe following example creates a SignUpView that allows users to sign up using their email address and password, and sends an email verification code to confirm their email address.SignUpView.swiftSignInViewThe following example creates a SignInView that allows users to sign in using their email address and password.SignInView.swiftSignUpOrSignInViewFinally, create a SignUpOrSignInView container view that allows users to switch between sign up and sign in.SignUporSignInView.swiftAllow users to sign up or sign inGo back to your ContentView and render your newly created SignUpOrSignInView when the user isn't signed in.ContentView.swiftAllow users to sign outFinally, provide users with a way to sign out of your app: Open your ContentView. Add a button that ends a user's session. ContentView.swift",
  "image": "https://clerk.com/og-image?params=%7B%22title%22%3A%22iOS+Quickstart+%28beta%29%22%2C%22description%22%3A%22Add+authentication+and+user+management+to+your+iOS+app+with+Clerk.%22%2C%22breadcrumbs%22%3A%5B%22iOS%22%2C%22Getting+started%22%5D%7D\u0026token=2ce0aa93c42f095ae2e251433679a144a2ea341b80916d75a797af0fc83d51c3",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-component=\"Steps\"\u003e\u003cdiv\u003e\u003ch2 data-heading-step=\"\" id=\"disable-bot-protection\"\u003e\u003ca href=\"#disable-bot-protection\"\u003eDisable bot protection\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eBot protection is enabled by default for all Clerk apps. However, it is not supported in native apps.\u003c/p\u003e\u003cp\u003eTo turn off bot protection:\u003c/p\u003e\u003col\u003e\n\u003cli\u003eIn the Clerk Dashboard, navigate to the \u003ca target=\"_blank\" href=\"https://dashboard.clerk.com/last-active?path=user-authentication/attack-protection\"\u003e\u003cspan\u003e\u003cstrong\u003eAttack protection\u003c/strong\u003e\u003c/span\u003e\u003c/a\u003e page.\u003c/li\u003e\n\u003cli\u003eDisable \u003cstrong\u003eBot sign-up protection\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ol\u003e\u003ch2 data-heading-step=\"\" id=\"create-an-i-os-project\"\u003e\u003ca href=\"#create-an-i-os-project\"\u003eCreate an iOS Project\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo get started using Clerk with iOS, create a new project in Xcode. Select SwiftUI as your interface and Swift as your language.\nSee the \u003ca target=\"_blank\" href=\"https://developer.apple.com/documentation/xcode/creating-an-xcode-project-for-an-app\"\u003e\u003cspan\u003eXcode documentation\u003c/span\u003e\u003c/a\u003e for more information.\u003c/p\u003e\u003ch2 data-heading-step=\"\" id=\"install-the-clerk-i-os-sdk\"\u003e\u003ca href=\"#install-the-clerk-i-os-sdk\"\u003eInstall the Clerk iOS SDK\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFollow \u003ca target=\"_blank\" href=\"https://developer.apple.com/documentation/xcode/adding-package-dependencies-to-your-app\"\u003e\u003cspan\u003ethe Swift Package Manager instructions\u003c/span\u003e\u003c/a\u003e to install Clerk as a dependency.\nWhen prompted for the package URL, enter \u003ca target=\"_blank\" href=\"https://github.com/clerk/clerk-ios\"\u003e\u003cspan\u003ehttps://github.com/clerk/clerk-ios\u003c/span\u003e\u003c/a\u003e. Be sure to add the package to your target.\u003c/p\u003e\u003ch2 data-heading-step=\"\" id=\"load-clerk\"\u003e\u003ca href=\"#load-clerk\"\u003eLoad Clerk\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo use Clerk in your app, you must first configure and load \u003ccode\u003eClerk\u003c/code\u003e.\u003c/p\u003e\u003cul\u003e\n\u003cli\u003eInside your new project in Xcode, open your \u003ccode\u003e@main\u003c/code\u003e app file.\u003c/li\u003e\n\u003cli\u003eImport \u003ccode\u003eClerk\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eCreate a reference to the shared \u003ccode\u003eClerk\u003c/code\u003e instance.\u003c/li\u003e\n\u003cli\u003eReplace \u003ccode\u003eContentView()\u003c/code\u003e with the below \u003ccode\u003eZStack\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eInject your reference to the shared \u003ccode\u003eclerk\u003c/code\u003e instance into the environment.\u003c/li\u003e\n\u003cli\u003eAttach a \u003ccode\u003e.task\u003c/code\u003e modifier to the new \u003ccode\u003eZStack\u003c/code\u003e. In the body of the task, configure \u003ccode\u003eclerk\u003c/code\u003e with your Publishable Key, and then load \u003ccode\u003eclerk\u003c/code\u003e. You can get your Publishable Key from the \u003ca target=\"_blank\" href=\"https://dashboard.clerk.com/last-active?path=api-keys\"\u003e\u003cspan\u003e\u003cstrong\u003eAPI keys\u003c/strong\u003e\u003c/span\u003e\u003c/a\u003e page in the Clerk Dashboard.\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cspan\u003eClerkQuickstartApp.swift\u003c/span\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv\u003e\u003ch2 data-heading-step=\"\" id=\"conditionally-render-content\"\u003e\u003ca href=\"#conditionally-render-content\"\u003eConditionally render content\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eTo render content based on whether a user is authenticated or not:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003eOpen your \u003ccode\u003eContentView\u003c/code\u003e file.\u003c/li\u003e\n\u003cli\u003eImport \u003ccode\u003eClerk\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAccess the shared \u003ccode\u003eClerk\u003c/code\u003e instance that you injected into the environment in the previous step.\u003c/li\u003e\n\u003cli\u003eReplace the content of the view body with a conditional that checks for a \u003ccode\u003eclerk.user\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cspan\u003eContentView.swift\u003c/span\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv\u003e\u003ch2 data-heading-step=\"\" id=\"create-views-for-sign-up-and-sign-in\"\u003e\u003ca href=\"#create-views-for-sign-up-and-sign-in\"\u003eCreate views for sign-up and sign-in\u003c/a\u003e\u003c/h2\u003e\u003ch3 id=\"sign-up-view\"\u003e\u003ca href=\"#sign-up-view\"\u003e\u003ccode\u003eSignUpView\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe following example creates a \u003ccode\u003eSignUpView\u003c/code\u003e that allows users to sign up using their email address and password, and sends an email verification code to confirm their email address.\u003c/p\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cspan\u003eSignUpView.swift\u003c/span\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv\u003e\u003ch3 id=\"sign-in-view\"\u003e\u003ca href=\"#sign-in-view\"\u003e\u003ccode\u003eSignInView\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eThe following example creates a \u003ccode\u003eSignInView\u003c/code\u003e that allows users to sign in using their email address and password.\u003c/p\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cspan\u003eSignInView.swift\u003c/span\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv\u003e\u003ch3 id=\"sign-up-or-sign-in-view\"\u003e\u003ca href=\"#sign-up-or-sign-in-view\"\u003e\u003ccode\u003eSignUpOrSignInView\u003c/code\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFinally, create a \u003ccode\u003eSignUpOrSignInView\u003c/code\u003e container view that allows users to switch between sign up and sign in.\u003c/p\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cspan\u003eSignUporSignInView.swift\u003c/span\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv\u003e\u003ch2 data-heading-step=\"\" id=\"allow-users-to-sign-up-or-sign-in\"\u003e\u003ca href=\"#allow-users-to-sign-up-or-sign-in\"\u003eAllow users to sign up or sign in\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eGo back to your \u003ccode\u003eContentView\u003c/code\u003e and render your newly created \u003ccode\u003eSignUpOrSignInView\u003c/code\u003e when the user isn\u0026#39;t signed in.\u003c/p\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cspan\u003eContentView.swift\u003c/span\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv\u003e\u003ch2 data-heading-step=\"\" id=\"allow-users-to-sign-out\"\u003e\u003ca href=\"#allow-users-to-sign-out\"\u003eAllow users to sign out\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFinally, provide users with a way to sign out of your app:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003eOpen your \u003ccode\u003eContentView\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAdd a button that ends a user\u0026#39;s session.\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003cspan\u003eContentView.swift\u003c/span\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
