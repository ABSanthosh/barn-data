{
  "id": "abe1870e-1ad9-451d-a7f5-3fbd646d03b7",
  "title": "Adding to My Mac’s Swiss Army Knife: A Raycast Extension Roundup",
  "link": "https://www.macstories.net/roundups/adding-to-my-macs-swiss-army-knife-a-raycast-extension-roundup/",
  "description": "If you have ever heard or seen me talk about my macOS setup, you’ll know that I’m a huge fan of Raycast. A few years ago, Raycast took off on the Mac as an incredible alternative to Spotlight and the long-time Mac power user favorite, Alfred. Today, it has cemented itself as an essential piece […]",
  "author": "Niléane",
  "published": "Wed, 09 Oct 2024 14:30:45 +0000",
  "source": "https://www.macstories.net/feed",
  "categories": [
    "roundups",
    "app",
    "mac"
  ],
  "byline": "Niléane",
  "length": 13222,
  "excerpt": "If you have ever heard or seen me talk about my macOS setup, you’ll know that I’m a huge fan of Raycast. A few years ago, Raycast took off on the Mac as an incredible alternative to Spotlight and the long-time Mac power user favorite, Alfred. Today, it has cemented itself as an essential piece",
  "siteName": "",
  "favicon": "https://www.macstories.net/app/themes/macstories4/images/apple-touch-icon-152x152-precomposed.png",
  "text": "If you have ever heard or seen me talk about my macOS setup, you’ll know that I’m a huge fan of Raycast. A few years ago, Raycast took off on the Mac as an incredible alternative to Spotlight and the long-time Mac power user favorite, Alfred. Today, it has cemented itself as an essential piece of software in my daily workflows. Raycast’s main strength is that it’s fast. It lets you launch apps, run shortcuts, and manage your windows with straightforward commands, and it is extremely flexible in the way that it allows you to assign keyboard shortcuts and aliases to any command. That being said, I believe the one aspect of Raycast that drives the tool to its maximum potential is its ecosystem of third-party extensions. Developers can build their own commands and offer them in the Raycast extensions store for free. The store, which users can access by typing “Store” directly in the Raycast search bar, has hundreds of extensions available that vary in functionality and quality. And while some of those optional extensions can be pretty simple or offer a single feature each, the way that they come together to turn Raycast into a Swiss Army knife for your workflows on the Mac makes each of them valuable in their own respect. So today, rather than highlight Raycast’s well-known built-in features, I thought I would round up some of my favorite optional extensions instead. Here’s a word of warning: some extensions in this list are very specific. But at the same time, though, they’ve each become an integral part of my Mac’s Swiss Army knife. Alright, let’s get into it. Deepcast Since English is not my native language, I tend to rely on translation multiple times per day. The way that I use translation is quite specific: I mostly use it to proofread my English writing by translating it back into French. I’ve found that this trick helps me make sure that my sentences make sense and that I’m not misusing any French idioms that don’t translate well into English. (This happens way too often, believe it or not.) While Apple’s Translate app has only gotten better in recent years and its integration into macOS is very practical, I’ve found that the quality of its translations still isn’t up to the task in many instances. This is the reason I’ve gone back to DeepL as my main translation service. And thanks to Deepcast, a Raycast extension that lets you use DeepL from any text field on macOS, it has become just as practical as Apple’s integrated translation features. With Deepcast installed, translating text is as easy as selecting it and triggering one of its commands in Raycast. As with anything in Raycast, this can be done by invoking the launcher and typing in the command, or by pressing a keyboard shortcut of your choice. In my setup, I’ve assigned the alias “fr” to Deepcast’s ‘Translate to French’ command and the alias “en” to its ‘Translate to English’ command. Now, no matter what I’m currently working on, translating a string of text is always just three key presses away. If, like me, you rely on translation on a daily basis, I strongly recommend giving Deepcast a try. The extension requires a DeepL API key to work. However, it’s worth mentioning that, even though I use the extension tens of times every day, DeepL’s free API plan has been more than enough for my use case, and I’m never close to reaching its daily usage cap. Link Cleaner Link Cleaner is another extension that comes in handy when I’m writing and posting on Mastodon. The extension does one thing, and does it well: copy any link to your clipboard and invoke the Link Cleaner command via Raycast, and it will immediately strip tracking parameters from the URL. Tracking parameters are often added to URLs on the web and are mostly used by platforms for analytics purposes – for advertising optimizations. Even if they’re harmless in most cases, tracking parameters tend to over-lengthen your shared URLs, and they tend to make links less readable to anyone who attempts to parse them before clicking on them. Link Cleaner is a great, simple way to clean up your links before sharing them. QR Code Generator While we’re in the link-sharing department, let’s also mention the QR Code Generator extension. QR codes are useful in so many instances that I’m not going to attempt to sum up their infinite use cases here. As a result, there are plenty of websites online that let you generate a QR code for a given link. However, most of these websites tend to be unnecessarily complicated to use, if not sometimes outright bound to shady practices wherein anyone who scans your generated codes will be routed through undisclosed third-party domains to generate ad revenue. Fortunately, this QR Code Generator extension for Raycast doesn’t do any of that. To use it, copy a link to your clipboard and invoke the extension’s command, and it will immediately generate a simple QR code image that you can save and share however you like. It is a great tiny tool to add to your Raycast Swiss Army knife. Type Snob Type Snob is an extension that lets you search for a selection of typographic characters that may not be easily typed with a regular Latin keyboard layout. This includes a variety of punctuation characters (dashes, quotations marks, ellipses, and more), as well as basic mathematical characters. To use it, invoke the extension’s ‘Copy Character’ command in Raycast, search for a character, and press Enter to copy it to your clipboard. Another useful feature of the extension is its relatively hidden ability to let you copy the HTML code for every character (by pressing Command + K then selecting ‘Copy HTML’), which is very useful if you’re using them in a web development project. But even if you’re only using it in a writing or editing context, Type Snob is a good extension to have on hand. Safari Reading List Just like Federico, I’ve been struggling in my search for a read later app. As a result, over the past few weeks, I’ve started using Safari’s Reading List feature again to save articles for later. Apart from the addition of a table of contents and summaries to the Reader view in Safari, Reading List hasn’t evolved much. It is still limited to marking links as either read or unread, and it’s still constrained to the Safari sidebar and the browser’s customizable start page. That being said, it was a pleasant surprise when I discovered that the unofficial Safari extension for Raycast features a ‘Search Reading List’ command. The command is straightforward and simply displays your Reading List items directly inside the Raycast window. Yet, this keyboard-first approach that lets you open one of your read later items in just a few taps has made a world of difference for me. Not only that, but the command also allows you to quickly search through your Reading List items and even copy any of them in Markdown syntax. Using this command has made me realize how cumbersome it was to constantly have to open the Safari sidebar to access my Reading List. Maybe Apple can take some inspiration here and bake Safari Reading List directly into Spotlight. Color Picker We’re now touching on a category of Raycast extensions that may speak more to designers and developers. The first one of those in this list is Color Picker. Just as its name suggests, Color Picker is an extension that, when invoked, turns your mouse cursor into a loupe. Click anywhere on your screen to select a pixel, and the corresponding color code will be copied to your clipboard. You can configure the extension to use your preferred color format (HEX, RGB, HSL, and more), and you can use its additional ‘Color Wheel’ command to pick a color from… well, a color wheel. In addition to picking new colors, the extension also lets you access and manage the full history of your previously picked colors with the ‘Organize Colors’ command. There, you can copy colors in any of the supported color code formats and even assign custom names to them so you can find them again later. But it doesn’t stop there; in the extension’s settings, you also have the option to add Color Picker directly to the menu bar, which means you can use this extension entirely without having to remember a Raycast command. In my months spent developing my custom theme for Mastodon, the Color Picker extension has been an amazingly useful tool. While I’m sure there are more advanced color tools on the Mac, I recommend checking it out if, like me, you just need a simple color picker to get by. Ruler In a similar vein to Color Picker, the Ruler extension is a basic utility for designers and developers that probably won’t replace anything more advanced that you may already be using. All it does is let you drag segments on your screen to measure distances in pixels. This is useful when designing mockups, when referencing inspiration material, and even in some debugging scenarios when you need to check if an object of any kind is correctly sized onscreen. To use it, invoke the extension’s ‘Ruler’ command and click anywhere to start dragging a segment. Just as you would expect, you can also hold the Shift key to snap your measuring segment to regular angles if required. Git Commands and GitHub CLI Manual Now, let’s talk about Git for a minute. Git is a powerful piece of software that helps you minutely manage your projects and their version history. The unfortunate thing about Git is how extraordinarily complex it can be; not only is it complex to learn, but this complexity also gets exponentially worse every time your project grows in size and number of collaborators. Branch, merge, rebase, checkout, stash – those words and many more swirl around in front of my eyes whenever I need to type a Git command that’s not just ‘commit’ or ‘push’. If you’ve ever used Git, I’m willing to bet that you can relate to this feeling, at least to some extent. This is why it never hurts to equip yourself with a couple of Git cheat sheets. Git Commands and GitHub CLI Manual are two similar extensions that let you browse and search for Git commands. The former is ideal if you are already familiar with Git and just need the occasional reminder, while the latter is basically a way to quickly search through GitHub’s Git documentation so you can learn commands as you go. If you deal with Git on a regular basis, I recommend adding these two to your Raycast setup. Coffee For those times when I need to step away from the desk for a minute but don’t want to let my Mac go to sleep for fear of interrupting an important process (such as a video export or a long-running Terminal command), I use a Raycast extension called Coffee. When active, Coffee temporarily overrides your Mac’s screen saver and sleep settings, ensuring your Mac stays awake. Coffee includes several commands that allow you to toggle it on and off, activate it for a set duration, or keep it active as long as a specific application is running on your Mac. Just like the aforementioned Color Picker extension, Coffee can even be added to your menu bar so you can control it without having to invoke the Raycast search bar. The menu bar icon will also reflect the extension’s current state so you can tell at a glance whether your Mac is caffeinated or not. Bonus Pick: Twitch As a bonus pick, I’m going to recommend the great Twitch extension for Raycast. I spend a significant part of my days and nights on Twitch, although most of the time I keep it in Picture-in-Picture or listen to it in the background while I’m working in other apps. Here’s the thing, though: unless you enable push notifications on your iPhone, there is no easy way to know when one of your favorite streamers goes live while you’re on the Mac. This is where the Twitch extension for Raycast comes in. It allows you to log in with your Twitch account and browse through your followed channels. But the best part is that it can also be added to your Mac menu bar where you can easily tell at a glance how many of your favorite streamers are currently live. If you click the menu bar icon, it will even show you who is currently live, and from there, you can click a channel’s name to immediately start watching in the browser. This extension has been a great way to keep up with my favorite streamers without having to enable Twitch’s slightly obnoxious push notifications on my phone. I warned you that some extensions in this list would be extremely specific, but keep in mind that this is precisely why they’ve been so valuable to me. My hope is that this list will give you the urge to search through the Raycast extensions store in order to fulfill your own extremely specific Mac workflow needs. On a slightly less positive note, at a time when Raycast is rapidly expanding its ambitions, I’ve come to realize how much I depend on its tiny and powerful ecosystem of features and extensions to enjoy working on the Mac. And if I’m honest, I must say I’m increasingly worried that I’m knowingly putting all my eggs in a basket that may (or may not) go away one day. Still, I am glad for Raycast’s catalog of third-party extensions. It is tangible proof of success that can only prolong the platform’s life expectancy. After all, Swiss Army knives are meant to last.",
  "image": "https://cdn.macstories.net/macbook-air-2022-1728325841316.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n                        \n\u003cp id=\"p2\"\u003eIf you have ever \u003ca href=\"https://www.macstories.net/comfort-zone\" rel=\"noopener noreferrer\"\u003eheard\u003c/a\u003e or \u003ca href=\"https://www.macstories.net/tutorials/three-tips-to-combine-bettertouchtool-and-raycast-for-simpler-keyboard-shortcuts/\" rel=\"noopener noreferrer\"\u003eseen\u003c/a\u003e me talk about my macOS setup, you’ll know that I’m a huge fan of \u003ca href=\"https://www.raycast.com\" rel=\"noopener noreferrer\"\u003eRaycast\u003c/a\u003e. A few years ago, Raycast took off on the Mac as an incredible alternative to Spotlight and the long-time Mac power user favorite, \u003ca href=\"%5Bhttps://www.alfredapp.com%5D(https://www.alfredapp.com/)\" rel=\"noopener noreferrer\"\u003eAlfred\u003c/a\u003e. Today, it has cemented itself as an essential piece of software in my daily workflows.\u003c/p\u003e\n\u003cp id=\"p3\"\u003eRaycast’s main strength is that it’s fast. It lets you launch apps, run shortcuts, and manage your windows with straightforward commands, and it is extremely flexible in the way that it allows you to assign keyboard shortcuts and aliases to any command.\u003c/p\u003e\n\u003cp id=\"p4\"\u003eThat being said, I believe the one aspect of Raycast that drives the tool to its maximum potential is its ecosystem of third-party extensions. Developers can build their own commands and offer them in the Raycast extensions store for free. The store, which users can access by typing “Store” directly in the Raycast search bar, has hundreds of extensions available that vary in functionality and quality. And while some of those optional extensions can be pretty simple or offer a single feature each, the way that they come together to turn Raycast into a Swiss Army knife for your workflows on the Mac makes each of them valuable in their own respect.\u003c/p\u003e\n\u003cp id=\"p5\"\u003eSo today, rather than highlight Raycast’s well-known built-in features, I thought I would round up some of my favorite optional extensions instead. Here’s a word of warning: some extensions in this list are very specific. But at the same time, though, they’ve each become an integral part of my Mac’s Swiss Army knife.\u003c/p\u003e\n\u003cp id=\"p6\"\u003eAlright, let’s get into it.\u003c/p\u003e\n\n\u003ch2 id=\"deepcast\"\u003e\u003ca href=\"https://www.raycast.com/mooxl/deepcast\" rel=\"noopener noreferrer\"\u003eDeepcast\u003c/a\u003e\u003c/h2\u003e\n\u003cp id=\"p8\"\u003eSince English is not my native language, I tend to rely on translation multiple times per day. The way that I use translation is quite specific: I mostly use it to proofread my English writing by translating it back into French. I’ve found that this trick helps me make sure that my sentences make sense and that I’m not misusing any French idioms that don’t translate well into English. (This happens way too often, believe it or not.)\u003c/p\u003e\n\u003cp id=\"p9\"\u003eWhile Apple’s Translate app has only \u003ca href=\"https://www.macstories.net/reviews/is-apples-translate-app-still-getting-lost-in-translation/\" rel=\"noopener noreferrer\"\u003egotten better\u003c/a\u003e in recent years and its integration into macOS is very practical, I’ve found that the quality of its translations still isn’t up to the task in many instances. This is the reason I’ve gone back to \u003ca href=\"https://www.deepl.com/en/translator\" rel=\"noopener noreferrer\"\u003eDeepL\u003c/a\u003e as my main translation service. And thanks to Deepcast, a Raycast extension that lets you use DeepL from any text field on macOS, it has become just as practical as Apple’s integrated translation features.\u003c/p\u003e\n\u003cp id=\"p10\"\u003eWith Deepcast installed, translating text is as easy as selecting it and triggering one of its commands in Raycast. As with anything in Raycast, this can be done by invoking the launcher and typing in the command, or by pressing a keyboard shortcut of your choice. In my setup, I’ve assigned the alias “fr” to Deepcast’s ‘Translate to French’ command and the alias “en” to its ‘Translate to English’ command. Now, no matter what I’m currently working on, translating a string of text is always just three key presses away.\u003c/p\u003e\n\n\u003cp id=\"p12\"\u003eIf, like me, you rely on translation on a daily basis, I strongly recommend giving Deepcast a try. The extension requires a DeepL API key to work. However, it’s worth mentioning that, even though I use the extension tens of times every day, DeepL’s free API plan has been more than enough for my use case, and I’m never close to reaching its daily usage cap.\u003c/p\u003e\n\u003ch2 id=\"link-cleaner\"\u003e\u003ca href=\"https://www.raycast.com/MisakiCoca/link-cleaner\" rel=\"noopener noreferrer\"\u003eLink Cleaner\u003c/a\u003e\u003c/h2\u003e\n\n\u003cp id=\"p14\"\u003eLink Cleaner is another extension that comes in handy when I’m writing and posting on Mastodon. The extension does one thing, and does it well: copy any link to your clipboard and invoke the Link Cleaner command via Raycast, and it will immediately strip tracking parameters from the URL.\u003c/p\u003e\n\u003cp id=\"p15\"\u003eTracking parameters are often added to URLs on the web and are mostly used by platforms for analytics purposes – for advertising optimizations. Even if they’re harmless in most cases, tracking parameters tend to over-lengthen your shared URLs, and they tend to make links less readable to anyone who attempts to parse them before clicking on them. Link Cleaner is a great, simple way to clean up your links before sharing them.\u003c/p\u003e\n\u003ch2 id=\"qr-code-generator\"\u003e\u003ca href=\"https://www.raycast.com/Melvynx/qrcode-generator\" rel=\"noopener noreferrer\"\u003eQR Code Generator\u003c/a\u003e\u003c/h2\u003e\n\u003cp id=\"p16\"\u003eWhile we’re in the link-sharing department, let’s also mention the QR Code Generator extension. QR codes are useful in so many instances that I’m not going to attempt to sum up their infinite use cases here. As a result, there are plenty of websites online that let you generate a QR code for a given link. However, most of these websites tend to be unnecessarily complicated to use, if not sometimes outright bound to shady practices wherein anyone who scans your generated codes will be routed through undisclosed third-party domains to generate ad revenue.\u003c/p\u003e\n\u003cp id=\"p17\"\u003eFortunately, this QR Code Generator extension for Raycast doesn’t do any of that. To use it, copy a link to your clipboard and invoke the extension’s command, and it will immediately generate a simple QR code image that you can save and share however you like. It is a great tiny tool to add to your Raycast Swiss Army knife.\u003c/p\u003e\n\u003ch2 id=\"type-snob\"\u003e\u003ca href=\"https://www.raycast.com/sawyerh/type-snob\" rel=\"noopener noreferrer\"\u003eType Snob\u003c/a\u003e\u003c/h2\u003e\n\n\u003cp id=\"p19\"\u003eType Snob is an extension that lets you search for a selection of typographic characters that may not be easily typed with a regular Latin keyboard layout. This includes a variety of punctuation characters (dashes, quotations marks, ellipses, and more), as well as basic mathematical characters. To use it, invoke the extension’s ‘Copy Character’ command in Raycast, search for a character, and press Enter to copy it to your clipboard.\u003c/p\u003e\n\u003cp id=\"p20\"\u003eAnother useful feature of the extension is its relatively hidden ability to let you copy the HTML code for every character (by pressing Command + K then selecting ‘Copy HTML’), which is very useful if you’re using them in a web development project. But even if you’re only using it in a writing or editing context, Type Snob is a good extension to have on hand.\u003c/p\u003e\n\u003ch2 id=\"safari-reading-list\"\u003e\u003ca href=\"https://www.raycast.com/loris/safari\" rel=\"noopener noreferrer\"\u003eSafari Reading List\u003c/a\u003e\u003c/h2\u003e\n\n\u003cp id=\"p22\"\u003e\u003ca href=\"https://club.macstories.net/posts/i-had-to-pick-two-apps-eventually\" rel=\"noopener noreferrer\"\u003eJust like Federico\u003c/a\u003e, I’ve been struggling in my search for a read later app. As a result, over the past few weeks, I’ve started using Safari’s Reading List feature again to save articles for later. Apart from the addition of a table of contents and summaries to the Reader view in Safari, Reading List hasn’t evolved much. It is still limited to marking links as either read or unread, and it’s still constrained to the Safari sidebar and the browser’s customizable start page.\u003c/p\u003e\n\u003cp id=\"p23\"\u003eThat being said, it was a pleasant surprise when I discovered that the unofficial Safari extension for Raycast features a ‘Search Reading List’ command. The command is straightforward and simply displays your Reading List items directly inside the Raycast window. Yet, this keyboard-first approach that lets you open one of your read later items in just a few taps has made a world of difference for me. Not only that, but the command also allows you to quickly search through your Reading List items and even copy any of them in Markdown syntax.\u003c/p\u003e\n\u003cp id=\"p24\"\u003eUsing this command has made me realize how cumbersome it was to constantly have to open the Safari sidebar to access my Reading List. Maybe Apple can take some inspiration here and bake Safari Reading List directly into Spotlight.\u003c/p\u003e\n\u003ch2 id=\"color-picker\"\u003e\u003ca href=\"https://www.raycast.com/thomas/color-picker\" rel=\"noopener noreferrer\"\u003eColor Picker\u003c/a\u003e\u003c/h2\u003e\n\n\u003cp id=\"p26\"\u003eWe’re now touching on a category of Raycast extensions that may speak more to designers and developers. The first one of those in this list is Color Picker. Just as its name suggests, Color Picker is an extension that, when invoked, turns your mouse cursor into a loupe. Click anywhere on your screen to select a pixel, and the corresponding color code will be copied to your clipboard. You can configure the extension to use your preferred color format (HEX, RGB, HSL, and more), and you can use its additional ‘Color Wheel’ command to pick a color from… well, a color wheel.\u003c/p\u003e\n\u003cp id=\"p27\"\u003eIn addition to picking new colors, the extension also lets you access and manage the full history of your previously picked colors with the ‘Organize Colors’ command. There, you can copy colors in any of the supported color code formats and even assign custom names to them so you can find them again later. But it doesn’t stop there; in the extension’s settings, you also have the option to add Color Picker directly to the menu bar, which means you can use this extension entirely without having to remember a Raycast command.\u003c/p\u003e\n\n\u003cp id=\"p29\"\u003eIn my months spent developing \u003ca href=\"https://github.com/nileane/TangerineUI-for-Mastodon\" rel=\"noopener noreferrer\"\u003emy custom theme for Mastodon\u003c/a\u003e, the Color Picker extension has been an amazingly useful tool. While I’m sure there are more advanced color tools on the Mac, I recommend checking it out if, like me, you just need a simple color picker to get by.\u003c/p\u003e\n\u003ch2 id=\"ruler\"\u003e\u003ca href=\"https://www.raycast.com/anwarulislam/ruler\" rel=\"noopener noreferrer\"\u003eRuler\u003c/a\u003e\u003c/h2\u003e\n\u003cp id=\"p30\"\u003eIn a similar vein to Color Picker, the Ruler extension is a basic utility for designers and developers that probably won’t replace anything more advanced that you may already be using. All it does is let you drag segments on your screen to measure distances in pixels. This is useful when designing mockups, when referencing inspiration material, and even in some debugging scenarios when you need to check if an object of any kind is correctly sized onscreen.\u003c/p\u003e\n\u003cp id=\"p31\"\u003eTo use it, invoke the extension’s ‘Ruler’ command and click anywhere to start dragging a segment. Just as you would expect, you can also hold the Shift key to snap your measuring segment to regular angles if required.\u003c/p\u003e\n\n\u003ch2 id=\"git-commands-and-github-cli-manual\"\u003e\u003ca href=\"https://www.raycast.com/manumorante/git-commands\" rel=\"noopener noreferrer\"\u003eGit Commands\u003c/a\u003e and \u003ca href=\"https://www.raycast.com/demartini/github-cli-manual\" rel=\"noopener noreferrer\"\u003eGitHub CLI Manual\u003c/a\u003e\u003c/h2\u003e\n\n\u003cp id=\"p34\"\u003eNow, let’s talk about Git for a minute. Git is a powerful piece of software that helps you minutely manage your projects and their version history. The unfortunate thing about Git is how extraordinarily complex it can be; not only is it complex to learn, but this complexity also gets exponentially worse every time your project grows in size and number of collaborators. Branch, merge, rebase, checkout, stash – those words and many more swirl around in front of my eyes whenever I need to type a Git command that’s not just ‘commit’ or ‘push’. If you’ve ever used Git, I’m willing to bet that you can relate to this feeling, at least to some extent.\u003c/p\u003e\n\u003cp id=\"p35\"\u003eThis is why it never hurts to equip yourself with a couple of Git cheat sheets. Git Commands and GitHub CLI Manual are two similar extensions that let you browse and search for Git commands. The former is ideal if you are already familiar with Git and just need the occasional reminder, while the latter is basically a way to quickly search through GitHub’s Git documentation so you can learn commands as you go.\u003c/p\u003e\n\u003cp id=\"p36\"\u003eIf you deal with Git on a regular basis, I recommend adding these two to your Raycast setup.\u003c/p\u003e\n\u003ch2 id=\"coffee\"\u003e\u003ca href=\"https://www.raycast.com/mooxl/coffee\" rel=\"noopener noreferrer\"\u003eCoffee\u003c/a\u003e\u003c/h2\u003e\n\n\u003cp id=\"p38\"\u003eFor those times when I need to step away from the desk for a minute but don’t want to let my Mac go to sleep for fear of interrupting an important process (such as a video export or a long-running Terminal command), I use a Raycast extension called Coffee. When active, Coffee temporarily overrides your Mac’s screen saver and sleep settings, ensuring your Mac stays awake.\u003c/p\u003e\n\u003cp id=\"p39\"\u003eCoffee includes several commands that allow you to toggle it on and off, activate it for a set duration, or keep it active as long as a specific application is running on your Mac. Just like the aforementioned Color Picker extension, Coffee can even be added to your menu bar so you can control it without having to invoke the Raycast search bar. The menu bar icon will also reflect the extension’s current state so you can tell at a glance whether your Mac is caffeinated or not.\u003c/p\u003e\n\u003ch2 id=\"bonus-pick-twitch\"\u003eBonus Pick: \u003ca href=\"https://www.raycast.com/dieserRobin/twitch\" rel=\"noopener noreferrer\"\u003eTwitch\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cbr/\u003e\nAs a bonus pick, I’m going to recommend the great Twitch extension for Raycast. I spend a significant part of my days and nights on Twitch, although most of the time I keep it in Picture-in-Picture or listen to it in the background while I’m working in other apps. Here’s the thing, though: unless you enable push notifications on your iPhone, there is no easy way to know when one of your favorite streamers goes live while you’re on the Mac.\u003c/p\u003e\n\u003cp id=\"p41\"\u003eThis is where the Twitch extension for Raycast comes in. It allows you to log in with your Twitch account and browse through your followed channels. But the best part is that it can also be added to your Mac menu bar where you can easily tell at a glance how many of your favorite streamers are currently live. If you click the menu bar icon, it will even show you \u003cem\u003ewho\u003c/em\u003e is currently live, and from there, you can click a channel’s name to immediately start watching in the browser.\u003c/p\u003e\n\n\u003cp id=\"p43\"\u003eThis extension has been a great way to keep up with my favorite  streamers without having to enable Twitch’s slightly obnoxious push notifications on my phone.\u003c/p\u003e\n\u003chr id=\"hr44\"/\u003e\u003cp id=\"p45\"\u003eI warned you that some extensions in this list would be extremely specific, but keep in mind that this is precisely why they’ve been so valuable to me. My hope is that this list will give you the urge to search through the Raycast extensions store in order to fulfill your own extremely specific Mac workflow needs.\u003c/p\u003e\n\u003cp id=\"p46\"\u003eOn a slightly less positive note, at a time when Raycast is rapidly expanding \u003ca href=\"https://www.raycast.com/blog/series-b\" rel=\"noopener noreferrer\"\u003eits ambitions\u003c/a\u003e, I’ve come to realize how much I depend on its tiny and powerful ecosystem of features and extensions to enjoy working on the Mac. And if I’m honest, I must say I’m increasingly worried that I’m knowingly putting all my eggs in a basket that may (or may not) go away one day.\u003c/p\u003e\n\u003cp id=\"p47\"\u003eStill, I am glad for Raycast’s catalog of third-party extensions. It is tangible proof of success that can only prolong the platform’s life expectancy. After all, Swiss Army knives are meant to last.\u003c/p\u003e\n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2024-10-09T14:30:45-04:00",
  "modifiedTime": null
}
