{
  "id": "947b2d5d-9e84-42b4-a372-92998f82fe13",
  "title": "How macOS protects your data from malware",
  "link": "https://appleinsider.com/inside/macos/tips/how-macos-protects-your-data-from-malware?utm_medium=rss",
  "description": "Malware is bad software you don't want to encounter, as it can harm your Mac or cause data loss. Here's how to protect against it.Courtesy stg_max_gtsWith security being an ever-increasing concern in the connected age, malicious attacks by bad actors continue to be a problem for many organizations and users.Malignant software (malware) can be planted on your devices, which can lead to credential or data loss, corruption of operating systems, or ransomware. Continue Reading on AppleInsider | Discuss on our Forums",
  "author": "Chip Loder",
  "published": "Thu, 10 Oct 2024 00:22:28 +0000",
  "source": "https://appleinsider.com/rss/news/",
  "categories": null,
  "byline": "Chip Loder",
  "length": 16667,
  "excerpt": "Malware is bad software you don't want to encounter, as it can harm your Mac or cause data loss. Here's how to protect against it.",
  "siteName": "AppleInsider",
  "favicon": "https://photos5.appleinsider.com/v9/images/apple-touch-icon-144.png",
  "text": "Malware is bad software you don't want to encounter, as it can harm your Mac or cause data loss. Here's how to protect against it. With security being an ever-increasing concern in the connected age, malicious attacks by bad actors continue to be a problem for many organizations and users. Malignant software (malware) can be planted on your devices, which can lead to credential or data loss, corruption of operating systems, or ransomware. As billions of digital devices proliferate worldwide and more commerce moves online, malware has become an ever-increasing threat. Software security models In the early days of software - before the internet became mainstream, most systems were open and software could be installed from anywhere. Usually it was from CD-ROM or floppy disk. With online software stores now the standard, this is a little less of an issue. This is because app storefronts check most software before it is released to ensure security. Nonetheless, bad software can and does sometimes slip through. Apple tried to solve this problem with the introduction of curated stores, such as the iOS App Store. But even there, some bad software has occasionally been released. Curated stores are more secure and reliable, but they're still not foolproof. The Mac is slightly different, because in its early days, it too could accept software from any source. Classic apps such as Virex and Norton Utilities helped \"clean\" Macs of malware. The Mac App Store today features curation, app receipt validation, and app notarization. But the Mac still allows software installation from anywhere, if certain settings are turned off. Code Signing, Developer ID, and Gatekeeper Years ago, Apple introduced an additional security measure for macOS software: Gatekeeper. Along with Developer ID, Gatekeeper by default ensures that downloaded Mac software is secure. With Gatekeeper, macOS developers register with and are issued a Developer ID by Apple, which is then used to digitally sign Mac software they create. If Gatekeeper is turned on in macOS, it ensures apps are signed by the developers who make them. It also warns on a Mac app's first-run for apps that aren't from known, registered developers. Mac users can choose in System Settings-\u003ePrivacy \u0026 Security-\u003eAllow Applications from which apps they want to allow installation for: either App Store-only apps or App Store \u0026 Known Developers. Code Signing Services and app Notarization ensure the software is valid and not hacked or malicious when users download it. Set software security in System Settings. System Integrity Protection (SIP) macOS offers one other system security feature that helps keep Mac secure: System Integrity Protection or SIP. SIP restricts which apps can be allowed to run and what code can be run on Macs. By default, only App Store apps or software from registered Apple developers can run. It also restricts system files from being tampered with or modified without authorization. It is possible to turn off SIP in the Terminal, but it's not recommended. Doing so defeats the security of macOS and may allow malicious code to run on Macs. The csrutil command-line tool can be used to inspect and change SIP parameters. To get the current status of SIP on your Mac in Terminal type: csrutil status and press Return. Most UNIX software uses the concept of privileges and privileged users. The root user, for example, has unlimited security privileges and can make changes to software at will. For security reasons, the root user is disabled by default in macOS. Other users may have other varying levels of privileges, which allow certain actions including software installation or removal. admin users have elevated privileges, and an admin password is required for many operations in macOS. By using temporary privilege escalation, macOS users can be granted additional rights for a short period of time. Well-designed software should be factored so that security-critical code runs in a separate process called a helper tool. Helper tools ensure that only small parts of code can be run with elevated privileges - thus restricting which parts of software can perform critical tasks that can endanger the system's security. An app with good factoring will put all at-risk code into a helper tool, then when permissions are needed run the helper tool after the user has been authorized. This increases security and also means compromised apps can't run all code at elevated privileges - which is a security risk. The idea is to run the helper tool and elevate privileges for the least amount of time, perform privileged operations, and then drop privileges back to their previous level when the helper tool exits. UNIX domain sockets and pipelines can also be used to securely pass information between processes. Security daemons and frameworks macOS is one of the most secure operating systems in the world, but it's not foolproof. Security in macOS is managed with a combination of background processes (daemons), and Apple code frameworks loaded into apps when they are run. These include: launchd secured (the security server) XPC Services Authorization Services.framework Security.framework System Configuration.framework Service Management.framework Endpoint Security.framework Cryptographic Services Code Signing Services Keychain Services Hardened Runtime Dynamic linking ensures frameworks are only loaded into memory when their APIs or interfaces are actually used. secured daemon architecture and frameworks. The above software components provide the following services: launchd (the Launch Daemon) is a system-wide daemon that runs in the background and manages the launching and termination of apps and other processes in macOS. secured (the Security Daemon) manages secure access, elevating privileges, running tools and certain user IDs, and other security services. XPC Services manages secure interprocess communication between software components as well as working with launchd to run helper tools securely. Authorization Services.framework manages prompting users for an admin password, caching privilege escalation, and maintaining timers which lower privileges after a given timeout. When your Mac prompts you for an admin password to install software or change a setting, it sends a message to secured to display the admin password dialog box so the user can enter a name and password. Security.framework manages user identity (authentication) and grants access to resources, secures data on disk and across network connections, and verifies the validity of code before it runs. System Configuration.framework manages system settings and ensures restricted settings can only be changed if required authorization has been provided. Service Management.framework allows apps to manage launch agents, launch daemons, and login items. Cryptographic Services provides standard cryptography APIs, manages keys, certificates, and passwords, and generates random numbers and hashes. Code Signing Services provides services to sign and verify built software to ensure it's valid and hasn't been compromised. Keychain Services manages system keys, certificates, and identities. Hardened Runtime (along with SIP) protects macOS from code injection, memory tampering, and dynamic library hijacking. Apple's Xcode IDE includes Hardened Runtime settings including allowing or disallowing Just-In-Time (JIT) code, use of unsigned memory, and dynamic linker (DYLD) environment variables. Changing environment variables before running malware is one way malicious code can be injected into running apps. All of these components work together to ensure macOS software can be as secure as possible. The security concept of Zero Trust means that all privileged software access is restricted unless a privileged user explicitly authorizes some secure action. Zero Trust implies by default that malware can't run without specific authorization. You can see which daemons are currently running on your Mac in the Activity Monitor utility, or by using the top command in Terminal. To use top type: top and press Return. This displays all running processes - including daemons, process IDs (PIDs), runtimes, CPU use, ports, and more. Courtesy @benzoix Malware on Macs Malware can be defined as malicious software that can breach or infect a computer, network, or device to disable, corrupt, or damage a device, or to steal and transmit unauthorized data across a network. The Computer Fraud and Abuse Act makes it a federal crime in the US to tamper with, disable, or gain access to a computer or network without specific authorization. It also makes transmitting or intercepting stolen information across a network a crime. Types of malware include (but aren't limited to) viruses, Trojan horses, malicious apps or frameworks, drivers, and even firmware. Network attacks are also possible by injecting malware into network code, or listening in on network communications. Ransomware is malware that steals company trade secrets or customer data, then allows bad actors to demand a payment from an organization not to use or release the stolen data. Viruses are small pieces of code that can be installed and run remotely on a user's local computer and wreak havoc silently. Viruses can corrupt or modify application code, drivers, files, databases, or system software to perform some malicious activity. This can include erasing/damaging data, or modifying software to perform some malicious act. Viruses can be silent, undetectable, and tiny - and often go unnoticed until it's too late. Because viruses can be installed almost anywhere, they're hard to stop and even harder to get rid of once they infect a computer or device. In the past, viruses have even been known to infect the firmware of devices such as storage drives or network routers, rendering them permanently damaged and unusable. A Trojan horse is generally considered to be an app which, when run harms stored data or other installed software and causes it to perform some malicious activity. One common attack vector of Trojan horses is to silently replace software frameworks or system components with a malicious impostor version, which linked apps then unwittingly run. Trojan horses make normal apps unaware that when hacked framework APIs are called the impostor will cause damage. Trojan horses often come in the form of standalone apps or installers, or frameworks and linked libraries. Device drivers, likewise can be installed to run malicious code when a specific device is used. Network malware drivers are especially notorious since they can transmit data at will over a network - which can't be retrieved or \"unseen\" once sent. macOS security frameworks. Malicious firmware infects or replaces existing firmware inside external devices, causing them to wreak havoc upon normal operation, or when specific standard commands are sent to a device. Malicious storage device firmware is probably the most common, since it can easily be installed via flash commands in the device - and then cause standard disk I/O commands to trigger data loss or corruption. Network attacks come in the form of malicious code injected into web pages or database commands, usually by adding additional code at the end of standard commands and data. Buffer overflow malware for example appends a small amount of malicious code to the end of a URL, web page, script, or network packet - which when received and run on the client computer causes damage. Buffer overflow attacks are one of the most common web-based attacks. They are hard to detect because most network code and web pages run automatically and outside of most software security models. Most web browsers now include settings for restricting what kinds of software can be downloaded and run automatically in their windows. Java applets are particularly well-known for enabling malware downloads. Other types of network attacks include impostors, man-in-the-middle, credential theft, phishing, email spoofing, and Distributed Denial of Service (DDoS) in which remote computers flood servers with so much data they stop working. Social engineering attacks are deceptive tactics in which bad actors convince victims they are legitimate in order to gain access to their protected information, or cause them to take some action which might harm them. Social engineers might also try to manipulate victims into unwittingly performing crimes, so that in the event they are caught they can blame someone else. Social engineering in particular is used in the vast and largely unknown field of industrial espionage (spying). Network attacks are some of the most common and simple incidents. What you can do Due to the well-thought-out macOS security model and UNIX privileges, the Mac is a very secure system. Still, breaches can and do happen. Due to the disabled root user and limited privileges which most Mac software runs under, it's hard for an attacker to trick macOS into running malicious code with elevated privileges. Signed and secure helper tools make these attempts even more difficult - and ensure most malicious software can't hang around long enough to do serious damage. Under the watchful eyes of secured and launchd, tricking a piece of Mac software into running at full permissions without an admin password is difficult. It's also hard to defeat secured itself since it can only run as a certain OS-controlled user with elevated privileges - and without it other secure software can't be authorized to run. Apple removes most malicious software from its app store quickly As long as SIP is enabled, software from non-authorized registered Apple developers can't be run without a user warning. You can also run various \"cleaner\" apps to scan your Mac and storage devices for malware. But be cautious - even cleaner apps have been disguised as malware in the past! Periodic virus scans and removing suspect apps from your Mac may help reduce risk. Another good policy is to simply keep the number of apps you install to a minimum, thus narrowing the attack surface. You might want to install little-used software on a single external drive - and then only plug the drive in when you need to access that software. Keeping system extensions, scripts, third-party fonts, drivers, and kernel extensions to a minimum is also a good idea - this will also reduce background task overhead. You might consider setting your web browser's security to its highest level, and turning on blocking of suspected malicious sites by default. This can help reduce the possibility that a network attack from a malicious site can harm your Mac. Some browsers have settings that block all downloads of web applets to protect against dangerous Trojan horse downloads. Also, make certain all WiFi passwords and access points on your networks are secure - and don't allow anonymous logins. Some Mac network settings allow you to require an admin password to change the settings. Be sure to restrict admin users on your Mac - only giving admin permission to users who absolutely need it, and only for the length of time required. By default, most users on your Mac shouldn't have admin access. You might also want to keep Guest users disabled. Enabling Guest users allows any remote user to connect to your Mac without a password. Also keep Remote Management, Remote Login, and Remote Application Scripting turned off in System Settings-\u003eSharing unless you absolutely need them. Gatekeeper and runtime protection If you download and run a non-App Store piece of Mac software that isn't from an authorized Developer ID, macOS will warn you and ask if you're sure you want to run it. This is accomplished by a part of macOS called Gatekeeper. If you're certain you want to run the software, you can click Allow in the Finder's alert box, which will allow the software to run. This simple security check gives you an extra chance to verify the software before it blindly runs on the first double-click. Restricting apps to only App Store apps in System Settings means you can only install and run App Store apps on your Mac. This will prevent all possible third-party apps downloaded outside the App Store from running - but you will be more restricted in your software selection as a result. For background and historical info on how daemons and agents work on the Mac, see TN2083 Daemons and Agents. Apple has taken great pains to design and build macOS to be secure - and in most cases, you won't need to worry about security on your Mac. But keep all of the above in mind as you use your Mac to ensure the chance of being hit by malware is as small as possible.",
  "image": "https://photos5.appleinsider.com/gallery/61256-126597-lede-mall-xl.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n          \u003cp\u003eMalware is bad software you don\u0026#39;t want to encounter, as it can harm your \u003ca href=\"https://appleinsider.com/inside/mac\" title=\"Mac\" data-kpt=\"1\"\u003eMac\u003c/a\u003e or cause data loss. Here\u0026#39;s how to protect against it.\n\u003c/p\u003e\u003cp\u003eWith security being an ever-increasing concern in the connected age, malicious attacks by bad actors continue to be a problem for many organizations and users.\n\u003c/p\u003e\u003cp\u003eMalignant software (malware) can be planted on your devices, which can lead to credential or data loss, corruption of operating systems, or ransomware.\n\u003c/p\u003e\u003cp\u003eAs billions of digital devices proliferate worldwide and more commerce moves online, malware has become an ever-increasing threat.\n\u003c/p\u003e\u003cp\u003e\u003ch2 data-anchor=\"software-security-models\" id=\"software-security-models\"\u003eSoftware security models\u003c/h2\u003e\n\u003c/p\u003e\u003cp\u003eIn the early days of software - before the internet became mainstream, most systems were open and software could be installed from anywhere. Usually it was from CD-ROM or floppy disk.\n\u003c/p\u003e\u003cp\u003eWith online software stores now the standard, this is a little less of an issue. This is because app storefronts check most software before it is released to ensure security.\n\u003c/p\u003e\u003cp\u003eNonetheless, bad software can and does sometimes slip through.\n\u003c/p\u003e\u003cp\u003eApple tried to solve this problem with the introduction of curated stores, such as the iOS \u003ca href=\"https://appleinsider.com/inside/app-store\" title=\"App Store\" data-kpt=\"1\"\u003eApp Store\u003c/a\u003e. But even there, some bad software has occasionally been released. \n\u003c/p\u003e\u003cp\u003eCurated stores are more secure and reliable, but they\u0026#39;re still not foolproof.\n\u003c/p\u003e\u003cp\u003eThe Mac is slightly different, because in its early days, it too could accept software from any source. Classic apps such as Virex and Norton Utilities helped \u0026#34;clean\u0026#34; Macs of malware.\n\u003c/p\u003e\u003cp\u003eThe Mac App Store today features curation, app receipt validation, and app notarization. But the Mac still allows software installation from anywhere, if certain settings are turned off.\n\u003c/p\u003e\u003cp\u003e\u003ch2 data-anchor=\"code-signing-developer-id-and-gatekeeper\" id=\"code-signing-developer-id-and-gatekeeper\"\u003eCode Signing, Developer ID, and Gatekeeper\u003c/h2\u003e\n\u003c/p\u003e\u003cp\u003eYears ago, Apple introduced an additional security measure for \u003ca href=\"https://appleinsider.com/inside/macos\" title=\"macOS\" data-kpt=\"1\"\u003emacOS\u003c/a\u003e software: \u003cem\u003eGatekeeper\u003c/em\u003e. Along with \u003ca href=\"https://developer.apple.com/developer-id/\"\u003eDeveloper ID\u003c/a\u003e, Gatekeeper by default ensures that downloaded Mac software is secure.\n\u003c/p\u003e\u003cp\u003eWith Gatekeeper, macOS developers register with and are issued a Developer ID by Apple, which is then used to digitally sign Mac software they create. \n\u003c/p\u003e\u003cp\u003eIf Gatekeeper is turned on in macOS, it ensures apps are signed by the developers who make them. It also warns on a Mac app\u0026#39;s first-run for apps that aren\u0026#39;t from known, registered developers.\n\u003c/p\u003e\u003cp\u003eMac users can choose in \u003cstrong\u003eSystem Settings-\u0026gt;Privacy \u0026amp; Security-\u0026gt;Allow Applications from\u003c/strong\u003e which apps they want to allow installation for: either App Store-only apps or App Store \u0026amp; Known Developers.\n\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://developer.apple.com/documentation/security/code-signing-services\"\u003eCode Signing Services\u003c/a\u003e and app Notarization ensure the software is valid and not hacked or malicious when users download it.\n\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://photos5.appleinsider.com/gallery/61256-126599-gate-xl.jpg\" target=\"_blank\"\u003e\u003cimg src=\"https://photos5.appleinsider.com/gallery/61256-126599-gate-xl.jpg\" alt=\"Computer settings window with Gatekeeper options highlighted.\" height=\"675\" loading=\"lazy\"/\u003e\u003c/a\u003e\n\u003c/p\u003e\u003cp\u003e\u003cspan\u003eSet software security in System Settings.\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\u003cp\u003e\u003ch2 data-anchor=\"system-integrity-protection-sip\" id=\"system-integrity-protection-sip\"\u003eSystem Integrity Protection (SIP)\u003c/h2\u003e\n\u003c/p\u003e\u003cp\u003emacOS offers one other system security feature that helps keep Mac secure: \u003cem\u003e\u003ca href=\"https://support.apple.com/en-us/102149\"\u003eSystem Integrity Protection\u003c/a\u003e\u003c/em\u003e or SIP.\n\u003c/p\u003e\u003cp\u003eSIP restricts which apps can be allowed to run and what code can be run on Macs. By default, only App Store apps or software from registered Apple developers can run.\n\u003c/p\u003e\u003cp\u003eIt also restricts system files from being tampered with or modified without authorization.\n\u003c/p\u003e\u003cp\u003eIt is possible to turn off SIP in the Terminal, but it\u0026#39;s not recommended. Doing so defeats the security of macOS and may allow malicious code to run on Macs.\n\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003ecsrutil\u003c/code\u003e command-line tool can be used to inspect and change SIP parameters.\n\u003c/p\u003e\u003cp\u003eTo get the current status of SIP on your Mac in Terminal type:\n\u003c/p\u003e\u003cp\u003e\u003ccode\u003ecsrutil status\u003c/code\u003e and press \u003cstrong\u003eReturn\u003c/strong\u003e.\n\u003c/p\u003e\u003cp\u003eMost UNIX software uses the concept of \u003cem\u003eprivileges\u003c/em\u003e and privileged users. The \u003cem\u003eroot\u003c/em\u003e user, for example, has unlimited security privileges and can make changes to software at will.\n\u003c/p\u003e\u003cp\u003eFor security reasons, the root user is disabled by default in macOS. Other users may have other varying levels of privileges, which allow certain actions including software installation or removal.\n\u003c/p\u003e\u003cp\u003e\u003cem\u003eadmin\u003c/em\u003e users have elevated privileges, and an admin password is required for many operations in macOS.\n\u003c/p\u003e\u003cp\u003eBy using temporary \u003cem\u003eprivilege escalation\u003c/em\u003e, macOS users can be granted additional rights for a short period of time.\n\u003c/p\u003e\u003cp\u003eWell-designed software should be \u003cem\u003efactored\u003c/em\u003e so that security-critical code runs in a separate process called a \u003ca href=\"https://developer.apple.com/documentation/security/constraining-a-tool\u0026#39;s-launch-environment\"\u003ehelper tool\u003c/a\u003e. Helper tools ensure that only small parts of code can be run with elevated privileges - thus restricting which parts of software can perform critical tasks that can endanger the system\u0026#39;s security.\n\u003c/p\u003e\u003cp\u003eAn app with good factoring will put all at-risk code into a helper tool, then when permissions are needed run the helper tool after the user has been authorized. This increases security and also means compromised apps can\u0026#39;t run all code at elevated privileges - which is a security risk.\n\u003c/p\u003e\u003cp\u003eThe idea is to run the helper tool and elevate privileges for the least amount of time, perform privileged operations, and then drop privileges back to their previous level when the helper tool exits.\n\u003c/p\u003e\u003cp\u003eUNIX \u003cem\u003edomain sockets\u003c/em\u003e and \u003cem\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Pipeline_(Unix)\"\u003epipelines\u003c/a\u003e\u003c/em\u003e can also be used to securely pass information between processes.\n\u003c/p\u003e\u003cp\u003e\u003ch2 data-anchor=\"security-daemons-and-frameworks\" id=\"security-daemons-and-frameworks\"\u003eSecurity daemons and frameworks\u003c/h2\u003e\n\u003c/p\u003e\u003cp\u003emacOS is one of the most secure operating systems in the world, but it\u0026#39;s not foolproof.\n\u003c/p\u003e\u003cp\u003eSecurity in macOS is managed with a combination of background processes (daemons), and Apple code frameworks loaded into apps when they are run. These include:\n\u003c/p\u003e\u003cdiv\u003e\u003col\u003e\u003cli\u003elaunchd\u003c/li\u003e\n\u003cli\u003esecured (the security server)\u003c/li\u003e\n\u003cli\u003eXPC Services\u003c/li\u003e\n\u003cli\u003eAuthorization Services.framework\u003c/li\u003e\n\u003cli\u003eSecurity.framework\u003c/li\u003e\n\u003cli\u003eSystem Configuration.framework\u003c/li\u003e\n\u003cli\u003eService Management.framework\u003c/li\u003e\n\u003cli\u003eEndpoint Security.framework\u003c/li\u003e\n\u003cli\u003eCryptographic Services\u003c/li\u003e\n\u003cli\u003eCode Signing Services\u003c/li\u003e\n\u003cli\u003eKeychain Services\u003c/li\u003e\n\u003cli\u003eHardened Runtime\u003c/li\u003e\u003c/ol\u003e\n\u003c/div\u003e\u003cp\u003e\u003cem\u003eDynamic linking\u003c/em\u003e ensures frameworks are only loaded into memory when their APIs or interfaces are actually \u003cem\u003eused\u003c/em\u003e.\n\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://photos5.appleinsider.com/gallery/61256-126600-media-2891901@2x-xl.jpg\" target=\"_blank\"\u003e\u003cimg src=\"https://photos5.appleinsider.com/gallery/61256-126600-media-2891901@2x-xl.jpg\" alt=\"Flowchart depicting macOS security.\" height=\"675\" loading=\"lazy\"/\u003e\u003c/a\u003e\n\u003c/p\u003e\u003cp\u003e\u003cspan\u003esecured daemon architecture and frameworks.\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\u003cp\u003eThe above software components provide the following services:\n\u003c/p\u003e\u003cp\u003elaunchd (the Launch Daemon)  is a system-wide daemon that runs in the background and manages the launching and termination of apps and other processes in macOS.\n\u003c/p\u003e\u003cp\u003esecured (the Security Daemon) manages secure access, elevating privileges, running tools and certain user IDs, and other security services.\n\u003c/p\u003e\u003cp\u003eXPC Services manages secure interprocess communication between software components as well as working with launchd to run helper tools securely.\n\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://developer.apple.com/documentation/security/authorization-services\"\u003eAuthorization Services.framework\u003c/a\u003e manages prompting users for an admin password, caching privilege escalation, and maintaining timers which lower privileges after a given timeout. When your Mac prompts you for an admin password to install software or change a setting, it sends a message to secured to display the admin password dialog box so the user can enter a name and password.\n\u003c/p\u003e\u003cp\u003eSecurity.framework manages user identity (authentication) and grants access to resources, secures data on disk and across network connections, and verifies the validity of code before it runs.\n\u003c/p\u003e\u003cp\u003eSystem Configuration.framework manages system settings and ensures restricted settings can only be changed if required authorization has been provided.\n\u003c/p\u003e\u003cp\u003eService Management.framework allows apps to manage launch agents, launch daemons, and login items.\n\u003c/p\u003e\u003cp\u003eCryptographic Services provides standard cryptography APIs, manages keys, certificates, and passwords, and generates random numbers and hashes.\n\u003c/p\u003e\u003cp\u003eCode Signing Services provides services to sign and verify built software to ensure it\u0026#39;s valid and hasn\u0026#39;t been compromised.\n\u003c/p\u003e\u003cp\u003eKeychain Services manages system keys, certificates, and identities.\n\u003c/p\u003e\u003cp\u003eHardened Runtime (along with SIP) protects macOS from code injection, memory tampering, and dynamic library hijacking. Apple\u0026#39;s \u003ca href=\"https://appleinsider.com/inside/xcode\" title=\"Xcode\" data-kpt=\"1\"\u003eXcode\u003c/a\u003e IDE includes Hardened Runtime settings including allowing or disallowing Just-In-Time (JIT) code, use of unsigned memory, and dynamic linker (DYLD) environment variables.\n\u003c/p\u003e\u003cp\u003eChanging environment variables before running malware is one way malicious code can be injected into running apps.\n\u003c/p\u003e\u003cp\u003eAll of these components work together to ensure macOS software can be as secure as possible.\n\u003c/p\u003e\u003cp\u003eThe security concept of \u003cem\u003eZero Trust\u003c/em\u003e means that \u003cem\u003eall\u003c/em\u003e privileged software access is restricted unless a privileged user explicitly authorizes some secure action. Zero Trust implies by default that malware can\u0026#39;t run without specific authorization.\n\u003c/p\u003e\u003cp\u003eYou can see which daemons are currently running on your Mac in the Activity Monitor utility, or by using the \u003ccode\u003etop\u003c/code\u003e command in Terminal. To use \u003ccode\u003etop\u003c/code\u003e type:\n\u003c/p\u003e\u003cp\u003e\u003ccode\u003etop\u003c/code\u003e and press \u003cstrong\u003eReturn\u003c/strong\u003e.\n\u003c/p\u003e\u003cp\u003eThis displays all running processes - including daemons, process IDs (PIDs), runtimes, CPU use, ports, and more.\n\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://photos5.appleinsider.com/gallery/61256-126602-servers-xl.jpg\" target=\"_blank\"\u003e\u003cimg src=\"https://photos5.appleinsider.com/gallery/61256-126602-servers-xl.jpg\" alt=\"Server room photo by @benzoix\" height=\"675\" loading=\"lazy\"/\u003e\u003c/a\u003e\n\u003c/p\u003e\u003cp\u003e\u003cspan\u003eCourtesy @benzoix\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\u003cp\u003e\u003ch2 data-anchor=\"malware-on-macs\" id=\"malware-on-macs\"\u003eMalware on Macs\u003c/h2\u003e\n\u003c/p\u003e\u003cp\u003eMalware can be defined as malicious software that can breach or infect a computer, network, or device to disable, corrupt, or damage a device, or to steal and transmit unauthorized data across a network.\n\u003c/p\u003e\u003cp\u003eThe \u003ca href=\"https://www.justice.gov/jm/jm-9-48000-computer-fraud\"\u003eComputer Fraud and Abuse Act\u003c/a\u003e makes it a federal crime in the US to tamper with, disable, or gain access to a computer or network without specific authorization. It also makes transmitting or intercepting stolen information across a network a crime.\n\u003c/p\u003e\u003cp\u003eTypes of malware include (but aren\u0026#39;t limited to) viruses, Trojan horses, malicious apps or frameworks, drivers, and even firmware. Network attacks are also possible by injecting malware into network code, or listening in on network communications.\n\u003c/p\u003e\u003cp\u003e\u003cem\u003eRansomware\u003c/em\u003e is malware that steals company trade secrets or customer data, then allows bad actors to demand a payment from an organization not to use or release the stolen data.\n\u003c/p\u003e\u003cp\u003eViruses are small pieces of code that can be installed and run remotely on a user\u0026#39;s local computer and wreak havoc silently. \n\u003c/p\u003e\u003cp\u003eViruses can corrupt or modify application code, drivers, files, databases, or system software to perform some malicious activity. This can include erasing/damaging data, or modifying software to perform some malicious act.\n\u003c/p\u003e\u003cp\u003eViruses can be silent, undetectable, and tiny - and often go unnoticed until it\u0026#39;s too late. Because viruses can be installed almost anywhere, they\u0026#39;re hard to stop and even harder to get rid of once they infect a computer or device.\n\u003c/p\u003e\u003cp\u003eIn the past, viruses have even been known to infect the firmware of devices such as storage drives or network routers, rendering them permanently damaged and unusable.\n\u003c/p\u003e\u003cp\u003eA \u003cem\u003eTrojan horse\u003c/em\u003e is generally considered to be an app which, when run harms stored data or other installed software and causes it to perform some malicious activity. One common attack vector of Trojan horses is to silently replace software frameworks or system components with a malicious impostor version, which linked apps then unwittingly run.\n\u003c/p\u003e\u003cp\u003eTrojan horses make normal apps unaware that when hacked framework APIs are called the impostor will cause damage. Trojan horses often come in the form of standalone apps or installers, or frameworks and linked libraries.\n\u003c/p\u003e\u003cp\u003eDevice drivers, likewise can be installed to run malicious code when a specific device is used. Network malware drivers are especially notorious since they can transmit data at will over a network - which can\u0026#39;t be retrieved or \u0026#34;unseen\u0026#34; once sent.\n\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://photos5.appleinsider.com/gallery/61256-126601-media-2891898@2x-xl.jpg\" target=\"_blank\"\u003e\u003cimg src=\"https://photos5.appleinsider.com/gallery/61256-126601-media-2891898@2x-xl.jpg\" alt=\"App security framework with four elements: authorization and authentication, secure data, code signing, and cryptography.\" height=\"675\" loading=\"lazy\"/\u003e\u003c/a\u003e\n\u003c/p\u003e\u003cp\u003e\u003cspan\u003emacOS security frameworks.\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\u003cp\u003eMalicious \u003cem\u003efirmware\u003c/em\u003e infects or replaces existing firmware inside external devices, causing them to wreak havoc upon normal operation, or when specific standard commands are sent to a device. Malicious storage device firmware is probably the most common, since it can easily be installed via flash commands in the device - and then cause standard disk I/O commands to trigger data loss or corruption.\n\u003c/p\u003e\u003cp\u003eNetwork attacks come in the form of malicious code injected into web pages or database commands, usually by adding additional code at the end of standard commands and data. \n\u003c/p\u003e\u003cp\u003eBuffer overflow malware for example appends a small amount of malicious code to the end of a URL, web page, script, or network packet - which when received and run on the client computer causes damage.\n\u003c/p\u003e\u003cp\u003eBuffer overflow attacks are one of the most common web-based attacks. They are hard to detect because most network code and web pages run automatically and outside of most software security models. \n\u003c/p\u003e\u003cp\u003eMost web browsers now include settings for restricting what kinds of software can be downloaded and run automatically in their windows.\n\u003c/p\u003e\u003cp\u003eJava applets are particularly well-known for enabling malware downloads.\n\u003c/p\u003e\u003cp\u003eOther types of network attacks include impostors, man-in-the-middle, credential theft, phishing, email spoofing, and Distributed Denial of Service (DDoS) in which remote computers flood servers with so much data they stop working.\n\u003c/p\u003e\u003cp\u003e\u003cem\u003eSocial engineering\u003c/em\u003e attacks are deceptive tactics in which bad actors convince victims they are legitimate in order to gain access to their protected information, or cause them to take some action which might harm them. Social engineers might also try to manipulate victims into unwittingly performing crimes, so that in the event they are caught they can blame someone else.\n\u003c/p\u003e\u003cp\u003eSocial engineering in particular is used in the vast and largely unknown field of \u003ca href=\"https://www.amazon.com/Quiet-Threat-Fighting-Industrial-Espionage/dp/0398079625/\"\u003eindustrial espionage\u003c/a\u003e (spying).\n\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003ca href=\"https://photos5.appleinsider.com/gallery/61256-126603-net-xl.jpg\" target=\"_blank\"\u003e\u003cimg src=\"https://photos5.appleinsider.com/gallery/61256-126603-net-xl.jpg\" alt=\"Network attacks are common.\" height=\"675\" loading=\"lazy\"/\u003e\u003c/a\u003e\n\u003c/p\u003e\u003cp\u003e\u003cspan\u003eNetwork attacks are some of the most common and simple incidents.\u003c/span\u003e\u003c/p\u003e\n\u003c/div\u003e\u003cp\u003e\u003ch2 data-anchor=\"what-you-can-do\" id=\"what-you-can-do\"\u003eWhat you can do\u003c/h2\u003e\n\u003c/p\u003e\u003cp\u003eDue to the well-thought-out macOS security model and UNIX privileges, the Mac is a very secure system. Still, breaches can and do happen.\n\u003c/p\u003e\u003cp\u003eDue to the disabled root user and limited privileges which most Mac software runs under, it\u0026#39;s hard for an attacker to trick macOS into running malicious code with elevated privileges. Signed and secure helper tools make these attempts even more difficult - and ensure most malicious software can\u0026#39;t hang around long enough to do serious damage.\n\u003c/p\u003e\u003cp\u003eUnder the watchful eyes of secured and launchd, tricking a piece of Mac software into running at full permissions without an admin password is difficult. It\u0026#39;s also hard to defeat \u003cstrong\u003esecured\u003c/strong\u003e itself since it can only run as a certain OS-controlled user with elevated privileges - and without it other secure software can\u0026#39;t be authorized to run.\n\u003c/p\u003e\u003cp\u003eApple removes most malicious software from its app store quickly As long as SIP is enabled, software from non-authorized registered Apple developers can\u0026#39;t be run without a user warning.\n\u003c/p\u003e\u003cp\u003eYou can also run various \u0026#34;cleaner\u0026#34; apps to scan your Mac and storage devices for malware. But be cautious - even cleaner apps have been disguised as malware in the past!\n\u003c/p\u003e\u003cp\u003ePeriodic virus scans and removing suspect apps from your Mac may help reduce risk. Another good policy is to simply keep the number of apps you install to a minimum, thus narrowing the attack surface.\n\u003c/p\u003e\u003cp\u003eYou might want to install little-used software on a single external drive - and then only plug the drive in when you need to access that software.\n\u003c/p\u003e\u003cp\u003eKeeping system extensions, scripts, third-party fonts, drivers, and kernel extensions to a minimum is also a good idea - this will also reduce background task overhead.\n\u003c/p\u003e\u003cp\u003eYou might consider setting your web browser\u0026#39;s security to its highest level, and turning on blocking of suspected malicious sites by default. This can help reduce the possibility that a network attack from a malicious site can harm your Mac.\n\u003c/p\u003e\u003cp\u003eSome browsers have settings that block all downloads of web applets to protect against dangerous Trojan horse downloads.\n\u003c/p\u003e\u003cp\u003eAlso, make certain all WiFi passwords and access points on your networks are secure - and don\u0026#39;t allow anonymous logins. Some Mac network settings allow you to require an admin password to change the settings.\n\u003c/p\u003e\u003cp\u003eBe sure to restrict admin users on your Mac - only giving admin permission to users who absolutely need it, and only for the length of time required. By default, most users on your Mac shouldn\u0026#39;t have admin access.\n\u003c/p\u003e\u003cp\u003eYou might also want to keep Guest users disabled. Enabling Guest users allows any remote user to connect to your Mac without a password.\n\u003c/p\u003e\u003cp\u003eAlso keep Remote Management, Remote Login, and Remote Application Scripting turned off in \u003cstrong\u003eSystem Settings-\u0026gt;Sharing\u003c/strong\u003e unless you absolutely need them.\n\u003c/p\u003e\u003cp\u003e\u003ch2 data-anchor=\"gatekeeper-and-runtime-protection\" id=\"gatekeeper-and-runtime-protection\"\u003eGatekeeper and runtime protection\u003c/h2\u003e\n\u003c/p\u003e\u003cp\u003eIf you download and run a non-App Store piece of Mac software that isn\u0026#39;t from an authorized Developer ID, macOS will warn you and ask if you\u0026#39;re sure you want to run it. This is accomplished by a part of macOS called \u003ca href=\"https://support.apple.com/guide/security/gatekeeper-and-runtime-protection-sec5599b66df/web\"\u003eGatekeeper\u003c/a\u003e.\n\u003c/p\u003e\u003cp\u003eIf you\u0026#39;re certain you want to run the software, you can click \u003cstrong\u003eAllow\u003c/strong\u003e in the Finder\u0026#39;s alert box, which will allow the software to run. This simple security check gives you an extra chance to verify the software before it blindly runs on the first double-click.\n\u003c/p\u003e\u003cp\u003eRestricting apps to only App Store apps in \u003cstrong\u003eSystem Settings\u003c/strong\u003e means you can only install and run App Store apps on your Mac. This will prevent all possible third-party apps downloaded outside the App Store from running - but you will be more restricted in your software selection as a result.\n\u003c/p\u003e\u003cp\u003eFor background and historical info on how daemons and agents work on the Mac, see \u003ca href=\"https://developer.apple.com/library/archive/technotes/tn2083/_index.html\"\u003eTN2083\n\u003c/a\u003e\u003c/p\u003e\u003cp\u003eDaemons and Agents.\n\u003c/p\u003e\u003cp\u003eApple has taken great pains to design and build macOS to be secure - and in most cases, you won\u0026#39;t need to worry about security on your Mac. But keep all of the above in mind as you use your Mac to ensure the chance of being hit by malware is as small as possible.\u003c/p\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "18 min read",
  "publishedTime": "2024-10-10T00:22:28Z",
  "modifiedTime": null
}
