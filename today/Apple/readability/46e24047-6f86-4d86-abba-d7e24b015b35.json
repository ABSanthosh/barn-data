{
  "id": "46e24047-6f86-4d86-abba-d7e24b015b35",
  "title": "Initial Notes on iPadOS 26’s Local Capture Mode",
  "link": "https://www.macstories.net/linked/initial-notes-on-ipados-26s-local-capture-mode/",
  "description": "Now this is what I call follow-up: six years after I linked to Jason Snell’s first experiments with podcasting on the iPad Pro (which later became part of a chapter of my Beyond the Tablet story from 2019), I get to link to Snell’s first impressions of iPadOS 26’s brand new local capture mode, which […]",
  "author": "Federico Viticci",
  "published": "Fri, 20 Jun 2025 23:42:51 +0000",
  "source": "https://www.macstories.net/feed",
  "categories": [
    "Linked",
    "iPad",
    "iPadOS 26",
    "podcasts"
  ],
  "byline": "",
  "length": 2643,
  "excerpt": "Now this is what I call follow-up: six years after I linked to Jason Snell’s first experiments with podcasting on the iPad Pro (which later became part of a chapter of my Beyond the Tablet story from 2019), I get to link to Snell’s first impressions of iPadOS 26’s brand new local capture mode, which",
  "siteName": "",
  "favicon": "https://www.macstories.net/app/themes/macstories4/images/apple-touch-icon-152x152-precomposed.png",
  "text": "Now this is what I call follow-up: six years after I linked to Jason Snell’s first experiments with podcasting on the iPad Pro (which later became part of a chapter of my Beyond the Tablet story from 2019), I get to link to Snell’s first impressions of iPadOS 26’s brand new local capture mode, which lets iPad users record their own audio and video during a call. First, some context: To ensure that the very best audio and video is used in the final product, we tend to use a technique called a “multi-ender.” In addition to the lower-quality call that’s going on, we all record ourselves on our local device at full quality, and upload those files when we’re done. The result is a final product that isn’t plagued by the dropouts and other quirks of the call itself. I’ve had podcasts where one of my panelists was connected to us via a plain old phone line—but they recorded themselves locally and the finished product sounded completely pristine. This is how I’ve been recording podcasts since 2013. We used to be on a call on Skype and record audio with QuickTime; now we use Zoom, Audio Hijack, and OBS for video, but the concept is the same. Here’s Snell on how the new iPadOS feature, which lives in Control Center, works: The file it saves is marked as an mp4 file, but it’s really a container featuring two separate content streams: full-quality video saved in HEVC (H.265) format, and lossless audio in the FLAC compression format. Regardless, I haven’t run into a single format conversion issue. My audio-sync automations on my Mac accept the file just fine, and Ferrite had no problem importing it, either. (The only quirk was that it captured audio at a 48KHz sample rate and I generally work at 24-bit, 44.1KHz. I have no idea if that’s because of my microphone or because of the iPad, but it doesn’t really matter since converting sample rates and dithering bit depths is easy.) I tested this today with a FaceTime call. Everything worked as advertised, and the call’s MP4 file was successfully saved in my Downloads folder in iCloud Drive (I wish there was a way to change this). I was initially confused by the fact that recording automatically begins as soon as a call starts: if you press the Local Capture button in Control Center before getting on a call, as soon as it connects, you’ll be recording. It’s kind of an odd choice to make this feature just a…Control Center toggle, but I’ll take it! My MixPre-3 II audio interface and microphone worked right away, and I think there’s a very good chance I’ll be able to record AppStories and my other shows from my iPad Pro – with no more workarounds – this summer.",
  "image": "https://56243e3f6f46fe44a301-deabeb5f3878e3553d0b065ea974f9bf.ssl.cf1.rackcdn.com/256px.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"content\"\u003e\n\n    \n\n    \u003cdiv\u003e\n                        \u003cp id=\"p1\"\u003eNow this is what I call follow-up: \u003ca href=\"https://www.macstories.net/linked/jason-snell-on-podcasting-with-only-an-ipad-pro/\" rel=\"noopener noreferrer\"\u003esix years after I linked\u003c/a\u003e to Jason Snell’s first experiments with podcasting on the iPad Pro (which later became part of a chapter of my \u003ca href=\"https://www.macstories.net/stories/beyond-the-tablet/11/#podcasting-from-ipad-pro\" rel=\"noopener noreferrer\"\u003eBeyond the Tablet story from 2019\u003c/a\u003e), I get to \u003ca href=\"https://sixcolors.com/post/2025/06/a-few-notes-on-ipados-26-audio-and-video-capture/\" rel=\"noopener noreferrer\"\u003elink to Snell’s first impressions\u003c/a\u003e of iPadOS 26’s brand new local capture mode, which lets iPad users record their own audio and video during a call.\u003c/p\u003e\n\u003cp id=\"p2\"\u003eFirst, some context:\u003c/p\u003e\n\u003cblockquote id=\"blockquote3\"\u003e\u003cp\u003e\n  To ensure that the very best audio and video is used in the final product, we tend to use a technique called a “multi-ender.” In addition to the lower-quality call that’s going on, we all record ourselves on our local device at full quality, and upload those files when we’re done. The result is a final product that isn’t plagued by the dropouts and other quirks of the call itself. I’ve had podcasts where one of my panelists was connected to us via a plain old phone line—but they recorded themselves locally and the finished product sounded completely pristine.\n\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp id=\"p4\"\u003eThis is how I’ve been recording podcasts since 2013. We used to be on a call on Skype and record audio with QuickTime; now we use Zoom, \u003ca href=\"https://rogueamoeba.com/audiohijack/\" rel=\"noopener noreferrer\"\u003eAudio Hijack\u003c/a\u003e, and OBS for video, but the concept is the same. Here’s Snell on how the new iPadOS feature, which lives in Control Center, works:\u003c/p\u003e\n\u003cblockquote id=\"blockquote5\"\u003e\u003cp\u003e\n  The file it saves is marked as an mp4 file, but it’s really a container featuring two separate content streams: full-quality video saved in HEVC (H.265) format, and lossless audio in the FLAC compression format. Regardless, I haven’t run into a single format conversion issue. My audio-sync automations on my Mac accept the file just fine, and Ferrite had no problem importing it, either. (The only quirk was that it captured audio at a 48KHz sample rate and I generally work at 24-bit, 44.1KHz. I have no idea if that’s because of my microphone or because of the iPad, but it doesn’t really matter since converting sample rates and dithering bit depths is easy.)\n\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp id=\"p6\"\u003eI tested this today with a FaceTime call. Everything worked as advertised, and the call’s MP4 file was successfully saved in my Downloads folder in iCloud Drive (I wish there was a way to change this). I was initially confused by the fact that recording automatically begins as soon as a call starts: if you press the Local Capture button in Control Center before getting on a call, as soon as it connects, you’ll be recording. It’s kind of an odd choice to make this feature just a…\u003cem\u003eControl Center toggle\u003c/em\u003e, but I’ll take it! My \u003ca href=\"https://www.sounddevices.com/product/mixpre-3-ii/\" rel=\"noopener noreferrer\"\u003eMixPre-3 II audio interface\u003c/a\u003e and \u003ca href=\"https://amzn.to/48GNGLE\" rel=\"noopener noreferrer\"\u003emicrophone\u003c/a\u003e worked right away, and I think there’s a very good chance I’ll be able to record \u003ca href=\"https://appstories.net/\" rel=\"noopener noreferrer\"\u003eAppStories\u003c/a\u003e and my other shows from my iPad Pro – with \u003ca href=\"https://www.macstories.net/stories/ipad-pro-for-everything/#ipad-pro-and-video-recording-for-macstories-podcasts\" rel=\"noopener noreferrer\"\u003eno more workarounds\u003c/a\u003e – this summer.\u003c/p\u003e\n            \u003c/div\u003e\n\n    \n        \n\n    \n    \n    \n\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-06-20T23:42:51-04:00",
  "modifiedTime": null
}
