{
  "id": "aa12d1ae-6de0-40d4-9fab-717c11b5f2bc",
  "title": "Type-constrained code generation with language models",
  "link": "https://arxiv.org/abs/2504.09246",
  "description": "Comments",
  "author": "",
  "published": "Tue, 13 May 2025 22:15:30 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "[Submitted on 12 Apr 2025 (v1), last revised 8 May 2025 (this version, v2)]",
  "length": 1713,
  "excerpt": "Large language models (LLMs) have achieved notable success in code generation. However, they still frequently produce uncompilable output because their next-token inference procedure does not model formal aspects of code. Although constrained decoding is a promising approach to alleviate this issue, it has only been applied to handle either domain-specific languages or syntactic features of general-purpose programming languages. However, LLMs frequently generate code with typing errors, which are beyond the domain of syntax and generally hard to adequately constrain. To address this challenge, we introduce a type-constrained decoding approach that leverages type systems to guide code generation. For this purpose, we develop novel prefix automata and a search over inhabitable types, forming a sound approach to enforce well-typedness on LLM-generated code. We formalize our approach on a foundational simply-typed language and extend it to TypeScript to demonstrate practicality. Our evaluation on the HumanEval and MBPP datasets shows that our approach reduces compilation errors by more than half and significantly increases functional correctness in code synthesis, translation, and repair tasks across LLMs of various sizes and model families, including state-of-the-art open-weight models with more than 30B parameters. The results demonstrate the generality and effectiveness of our approach in constraining LLM code generation with formal rules of type systems.",
  "siteName": "arXiv.org",
  "favicon": "https://arxiv.org/static/browse/0.3.4/images/icons/apple-touch-icon.png",
  "text": "View PDF Abstract:Large language models (LLMs) have achieved notable success in code generation. However, they still frequently produce uncompilable output because their next-token inference procedure does not model formal aspects of code. Although constrained decoding is a promising approach to alleviate this issue, it has only been applied to handle either domain-specific languages or syntactic features of general-purpose programming languages. However, LLMs frequently generate code with typing errors, which are beyond the domain of syntax and generally hard to adequately constrain. To address this challenge, we introduce a type-constrained decoding approach that leverages type systems to guide code generation. For this purpose, we develop novel prefix automata and a search over inhabitable types, forming a sound approach to enforce well-typedness on LLM-generated code. We formalize our approach on a foundational simply-typed language and extend it to TypeScript to demonstrate practicality. Our evaluation on the HumanEval and MBPP datasets shows that our approach reduces compilation errors by more than half and significantly increases functional correctness in code synthesis, translation, and repair tasks across LLMs of various sizes and model families, including state-of-the-art open-weight models with more than 30B parameters. The results demonstrate the generality and effectiveness of our approach in constraining LLM code generation with formal rules of type systems. Submission history From: Niels Mündler [view email] [v1] Sat, 12 Apr 2025 15:03:00 UTC (2,798 KB) [v2] Thu, 8 May 2025 09:33:40 UTC (2,667 KB)",
  "image": "/static/browse/0.3.4/images/arxiv-logo-fb.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"content-inner\"\u003e\n    \n    \n                \n    \u003cp\u003e\u003ca href=\"https://arxiv.org/pdf/2504.09246\"\u003eView PDF\u003c/a\u003e\u003c/p\u003e\u003cblockquote\u003e\n            \u003cspan\u003eAbstract:\u003c/span\u003eLarge language models (LLMs) have achieved notable success in code generation. However, they still frequently produce uncompilable output because their next-token inference procedure does not model formal aspects of code. Although constrained decoding is a promising approach to alleviate this issue, it has only been applied to handle either domain-specific languages or syntactic features of general-purpose programming languages. However, LLMs frequently generate code with typing errors, which are beyond the domain of syntax and generally hard to adequately constrain. To address this challenge, we introduce a type-constrained decoding approach that leverages type systems to guide code generation. For this purpose, we develop novel prefix automata and a search over inhabitable types, forming a sound approach to enforce well-typedness on LLM-generated code. We formalize our approach on a foundational simply-typed language and extend it to TypeScript to demonstrate practicality. Our evaluation on the HumanEval and MBPP datasets shows that our approach reduces compilation errors by more than half and significantly increases functional correctness in code synthesis, translation, and repair tasks across LLMs of various sizes and model families, including state-of-the-art open-weight models with more than 30B parameters. The results demonstrate the generality and effectiveness of our approach in constraining LLM code generation with formal rules of type systems.\n    \u003c/blockquote\u003e\n\n    \n    \n  \u003c/div\u003e\u003cdiv\u003e\n      \u003ch2\u003eSubmission history\u003c/h2\u003e\u003cp\u003e From: Niels Mündler [\u003ca href=\"https://arxiv.org/show-email/a5e3666f/2504.09246\" rel=\"nofollow\"\u003eview email\u003c/a\u003e]      \u003cbr/\u003e            \u003cstrong\u003e\u003ca href=\"https://arxiv.org/abs/2504.09246v1\" rel=\"nofollow\"\u003e[v1]\u003c/a\u003e\u003c/strong\u003e\n        Sat, 12 Apr 2025 15:03:00 UTC (2,798 KB)\u003cbr/\u003e\n    \u003cstrong\u003e[v2]\u003c/strong\u003e\n        Thu, 8 May 2025 09:33:40 UTC (2,667 KB)\u003cbr/\u003e\n\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": null,
  "modifiedTime": null
}
