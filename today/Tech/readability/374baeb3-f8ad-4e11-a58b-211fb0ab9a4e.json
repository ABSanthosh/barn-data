{
  "id": "374baeb3-f8ad-4e11-a58b-211fb0ab9a4e",
  "title": "The Future of Flatpak",
  "link": "https://lwn.net/Articles/1020571/",
  "description": "Comments",
  "author": "",
  "published": "Thu, 22 May 2025 23:51:20 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "By Joe BrockmeierMay 14, 2025 Linux Application Summit",
  "length": 16754,
  "excerpt": "At the Linux Application Summit (LAS) in April, Sebastian Wick said that, by many metrics, Flat [...]",
  "siteName": "LWN.net",
  "favicon": "https://static.lwn.net/images/favicon.png",
  "text": "Please consider subscribing to LWN Subscriptions are the lifeblood of LWN.net. If you appreciate this content and would like to see more of it, your subscription will help to ensure that LWN continues to thrive. Please visit this page to join up and keep LWN on the net. At the Linux Application Summit (LAS) in April, Sebastian Wick said that, by many metrics, Flatpak is doing great. The Flatpak application-packaging format is popular with upstream developers, and with many users. More and more applications are being published in the Flathub application store, and the format is even being adopted by Linux distributions like Fedora. However, he worried that work on the Flatpak project itself had stagnated, and that there were too few developers able to review and merge code beyond basic maintenance. I was not able to attend LAS in person or watch it live-streamed, so I watched the YouTube video of the talk. The slides are available from the talk page. Wick is a member of the GNOME Project and a Red Hat employee who works on \"all kinds of desktop plumbing\", including Flatpak and desktop portals. Flatpak basics Flatpak was originally developed by Alexander Larsson, who had been working on similar projects stretching back to 2007. The first release was as XDG-App in 2015. It was renamed to Flatpak in 2016, a nod to IKEA's \"flatpacks\" for delivering furniture. The Flatpak project provides command-line tools for managing and running Flatpak applications, tools for building Flatpak bundles, and runtimes that provide components for Flatpak applications. The project uses control groups, namespaces, bind mounts, seccomp, and Bubblewrap to provide application isolation (\"sandboxing\"). Flatpak content is primarily delivered using OSTree, though support for using Open Container Initiative (OCI) images has been available since 2018 and is used by Fedora for its Flatpak applications. The \"Under the Hood\" page from Flatpak's documentation provides a good overview of how the pieces fit together. Slowing development Wick started his talk by saying that it looks like everything is great with the Flatpak project, but if one looks deeper, \"you will notice that it's not being actively developed anymore\". There are people who maintain the code base and fix security issues, for example, but \"bigger changes are not really happening anymore\". He said that there are a bunch of merge requests for new features, but no one feels responsible for reviewing them, and that is kind of problematic. The reason for the lack of reviewers is that key people, such as Larsson, have left the project. Every now and then, Wick said, Larsson may get involved if it's necessary, but he is basically not part of the day-to-day development of the project. Wick said that it is hard to get new Flatpak contributors involved because it can take months to get feedback on major changes, and then more months to get another review. \"This is really not a great way to get someone up to speed, and it's not a great situation to be in.\" \"Maybe I'm complaining about something that is actually not that much of an issue\", he said. Flatpak works; it does its job, and \"we just use it and don't think about it much\". In that sense, the project is in a good spot. But he has still been thinking about how the project is \"living with constraints\" because contributors do not have the opportunity to go in and make bigger changes. As an example, Wick said that Red Hat has been doing work that would allow Flatpaks to be installed as part of a base installation. The vendor or administrator could specify the applications to be installed, and a program called flatpak-preinstall would take care of the rest. The feature has been implemented and is planned for inclusion in Red Hat Enterprise Linux (RHEL) 10. The work was started by Kalev Lember and Owen Taylor last June, but the original pull request was closed by Lember in February as he was leaving Red Hat and would not be working on it anymore. It was picked up by Wick in February as a new request but wasn't reviewed until early May. OSTree and OCI Wick's next topic was OCI support in Flatpak. While OSTree has been a success in some ways, and it is still being maintained, it is not undergoing active development. He noted that developers have a \"very narrow set of tools\" for working with OSTree, so building Flatpaks that use OSTree requires non-standard and bespoke tools, but there is a whole range of utilities available for working with OCI images. Even better, tools for working with OCI images \"are all developed by people other than us, which means we don't actually have to do the work if we just embrace them\". Unfortunately, there are a number of OCI-related improvements that, again, are waiting on review to be merged into Flatpak. For example, Wick mentioned that the OCI container standard has added zstd:chunked support. Instead of the original OCI image format that uses gzipped tarballs, the zstd:chunked images are compressed with zstd and have skippable frames that include additional metadata—such as a table of contents—which allows file-level deduplication. In short, zstd:chunked allows pulling only those files that have changed since the last update, rather than an entire OCI layer, when updating a container image or a Flatpak. There is a pull request from Taylor, submitted in September 2023, that would add support to Flatpak for zstd-compressed layers. It has received little attention since then and \"it's just sitting there, currently\". Narrowing permissions One of the key functions of Flatpak is to sandbox applications and limit their access to the system. Wick said that the project has added features to \"narrow down\" the sandboxes and provide more restricted permissions. As an example, Flatpak now has --device=input to allow an application to access input devices without having access to all devices. One problem with this, he said, is that a system's installation of Flatpak may not support the newer features. A user's Linux distribution may still be providing an older version of Flatpak that does not have support for --device=input, or whatever new feature that a Flatpak developer may wish to use. Wick said there needs to be a way for applications to use the new permissions by default, but fall back to the older permission models if used on a system with an older version of Flatpak. This isn't an entirely new situation, he said. \"We had this before with Wayland and X11\", where if a system is running Wayland, then Flatpak should not bind-mount an X11 socket. Now, there is a similar scenario with the xdg-desktop portal for USB access, which was added to the xdg-desktop-project in 2021. Support for that portal was merged into Flatpak in 2024 after several iterations. What is missing is the ability to specify backward-compatible permissions so that a Flatpak application can be given USB access (--device=usb) with newer versions of Flatpak but retain the --device=all permissions if necessary. Once again, there is a pull request (from Hubert Figuière) that implements this, but Wick said that \"it's also just sitting there\". Wick would also like to improve the way that Flatpak handles access to audio. Currently, Flatpak still uses PulseAudio even if a host system uses PipeWire. The problem with that is that PulseAudio bundles together access to speakers and microphones—you can have access to both, or neither, but not just one. So if an application has access to play sound, it also has access to capture audio, which Wick said, with a bit of understatement, is \"not great\". He would like to be able to use PipeWire, which can expose restricted access to speakers only. One thing that has been a bit of a pain point, Wick said, is that nested sandboxing does not work in Flatpak. For instance, an application cannot use Bubblewrap inside Flatpak. Many applications, such as web browsers, make heavy use of sandboxing. They really like to put their tabs into their own sandboxes because it turns out that if one of those tabs is running some code that manages to exploit and break out of the process there, at least it's contained and doesn't spread to the rest of the browser. What Flatpak does instead, currently, is to have a kind of side sandbox that applications can call to and spawn another Flatpak instance that can be restricted even further. \"So, in that sense, that is a solution to the problem, but it is also kind of fragile.\" There have been issues with this approach for quite a while, he said, but no one knows quite how to solve them. Ideally, Flatpak would simply support nested namespacing and nested sandboxes, but currently it does not. Flatpak uses seccomp to prevent applications in a sandbox from having direct access to user namespaces. There is an API that can be used to create a sub-sandbox, but it is more restrictive. He said that the restrictions to user namespaces are outdated: \"for a long time it wasn't really a good idea to expose user namespacing because it exposed a big kernel API to user space that could be exploited\". Wick feels that user namespaces are, nowadays, a well-tested and a much-used interface. He does not think that there is much of a good argument against user namespaces anymore. xdg-dbus-proxy Flatpak applications do not talk directly to D-Bus. Instead, flatpak-run spawns an xdg-dbus-proxy for every Flatpak instance that is \"not exactly in the same sandbox, it's just on the side, basically\". The proxy is responsible for setting up filtering according to rules that are processed when flatpak-run is used to start an application. When setting up the proxy, Flatpak starts with a deny-all state and then adds specific connections that are allowed. This is so that applications do not expose things that other applications are not supposed to use. Wick said that he would like to move filtering from xdg-dbus-proxy directly to the D-Bus message brokers and provide policy based on a cgroups path. This is not something that has been implemented already, but he said he planned to work on a prototype in busd, which is a D-Bus broker implementation in Rust. That would also allow for a more dynamic policy, which would allow applications to export services to other applications on the fly. Currently, the policy is set when a Flatpak is run, and can't be modified afterward. As a side note, that means that Flatpak applications cannot talk to one another over D-Bus. They can still communicate with other applications; for example, Wick said that applications can communicate over the host's shared network namespace, \"which means you can use HTTP or whatever, there are like thousands of side channels you could use if you wanted to\". Flatpak's network namespacing is \"kind of ugly, and I don't really have a good solution here\", Wick said, but he wanted to point out that it is something the project should take a look at. \"Like, you bind something on localhost and suddenly all applications can just poke at it\". He gave the example of AusweisApp, which is an official authentication app for German IDs that can be used to authenticate with government web sites. It exposes a service on the local host, which makes it available to all Flatpak applications on the system. This is some of the stuff that I feel like we really need to take a look at. I'm not sure if this is like directly exploitable, but at the very least it's kind of scary. Wick said that the project needs to create a network namespace for Flatpak applications, \"but we don't really have any networking experts around, which is kind of awkward, we really have to find a solution here\". Another awkward spot the project finds itself in, he said, is with NVIDIA drivers. The project has to build multiple versions of NVIDIA drivers for multiple runtimes that are supported, and that translates to a great deal of network overhead for users who have to download each of those versions—even if they don't need all of the drivers. (This complaint on the Linux Mint forum illustrates the problem nicely.) It also means that games packaged as Flatpaks need to be continually updated against new runtimes, or they will eventually stop working because their drivers stop being updated and the games will not support current GPUs. Wick's suggestion is to take a cue from Valve Software. He said that Valve uses a model similar to Flatpak to run its games, but it uses the drivers from the host system and loads all of the driver's dependencies in the sandbox for the game. Valve uses the libcapsule library to do this, which is \"kind of fragile\" and difficult to make sure that it works well. Instead of using libcapsule, he would like to statically compile drivers and share them between all Flatpak applications. This is just in the idea stage at the moment, but Wick said he would like to solve the driver problem eventually. Portals Portals are D-Bus interfaces that provide APIs for things like file access, printing, opening URLs, and more. Flatpak can grant sandboxed applications access to portals to make D-Bus calls. Wick noted that portals are not part of the Flatpak project but they are crucial to it. \"Whatever we do with portals just directly improves Flatpak, and there are a bunch of portal things we need to improve\". He gave the example of the Documents portal, which makes files outside the sandbox available to Flatpak applications. The Documents portal is great for sharing single files, but it is too fine-grained and restrictive for other applications, such as Blender, GIMP, or music applications, that may need to access an entire library of files. \"You want a more coarse-grained permission model for files at some point\". There are some possibilities, he said, such as bind mounting user-selected host locations into the sandbox. Wick had a number of ideas that he would like to see implemented for portals, such as support for autofilling passwords, Fast Identity Online (FIDO) security keys, speech synthesis, and more. He acknowledged that it's \"kind of hard to write\" code for portals right now, but there is work to make it easier by using libdex. (See Christian Hergert's blog post on libdex for a short look at this.) It might even make sense to rewrite things in Rust, he said. Flatpak-next Assume that it's ten years in the future, Wick said, and no one is working on Flatpak anymore. \"What would you do with Flatpak if you could just rewrite it? I think the vision where we should go is OCI for almost everything.\" Larsson's choices in creating Flatpak were good and sound technical decisions at the time, but they ended up being \"not the thing that everyone else has\". That is an issue because only a few people understand what Flatpak does, and the project has to do everything itself. But, he said, if the project did \"everything OCI\", it would get a lot of things for free, such as OCI registries and tooling. Then it just comes down to what flatpak-run has to do, and that would not be very much. Rethinking Flatpak with modern container tools and aligning with the wider container ecosystem, he said, would make everything easier and is worth exploring. Once again, he floated the idea of using Rust for a rewrite. Q\u0026A There was a little time for questions at the end of Wick's session. The first was about what happens to existing Flatpaks if the project moves to OCI tooling. \"Would I need to just throw away [applications] and download again, or is that too much in the future, and you haven't thought about that?\" Wick said that it would be an issue on the client side, but Flathub (for example) has all of the build instructions for its Flatpaks and could simply rebuild them. Another audience member was concerned about using container infrastructure. They said that OCI registries that store images are missing indexing and metadata that is consumed by applications like GNOME Software for Flatpaks. What would be the way forward to ensure that they could preserve the same user experience? Wick said that there is now a standard for storing non-images in OCI registries, which would allow storing \"the same things we're currently storing\" for Flatpak, but writing the code to do it and getting it merged would be the hard part. The final question was whether there was anything concrete planned about using PipeWire directly with Flatpak rather than the PulseAudio routing. Wick said that he had been talking with Wim Taymans, the creator of PipeWire, about how to add support for it within Flatpak. It is mostly about \"adding PipeWire policy to do the right thing when it knows that it is a Flatpak instance\", he said. Index entries for this article ConferenceLinux Application Summit/2025",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cblockquote\u003e\n\u003cb\u003ePlease consider subscribing to LWN\u003c/b\u003e\n\u003cp\u003e\nSubscriptions are the lifeblood of LWN.net.  If you appreciate this\ncontent and would like to see more of it, your subscription will\nhelp to ensure that LWN continues to thrive.  Please visit\n\u003ca href=\"https://lwn.net/Promo/nst-nag1/subscribe\"\u003ethis page\u003c/a\u003e to join up and keep LWN on\nthe net.\n\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003cp\u003eAt the \u003ca href=\"https://linuxappsummit.org/\"\u003eLinux Application\nSummit\u003c/a\u003e (LAS) in April, Sebastian Wick said that, by many metrics, \u003ca href=\"https://flatpak.org/\"\u003eFlatpak\u003c/a\u003e is doing great. The Flatpak\napplication-packaging format is popular with upstream developers, and\nwith many users. More and more applications are being published in the\n\u003ca href=\"https://flathub.org/\"\u003eFlathub\u003c/a\u003e application store, and the\nformat is even being adopted by Linux distributions like\nFedora. However, he worried that work on the Flatpak project itself\nhad stagnated, and that there were too few developers able to review\nand merge code beyond basic maintenance.\u003c/p\u003e\n\n\u003cp\u003eI was not able to attend LAS in person or watch it live-streamed,\nso I watched the YouTube \u003ca href=\"https://www.youtube.com/watch?v=3HkYJ7M119I\"\u003evideo\u003c/a\u003e of the\ntalk. The slides are available from the \u003ca href=\"https://conf.linuxappsummit.org/event/7/contributions/219/\"\u003etalk\npage\u003c/a\u003e. Wick is a member of the GNOME Project and a Red Hat employee\nwho works on \u0026#34;\u003cq\u003eall kinds of desktop plumbing\u003c/q\u003e\u0026#34;, including Flatpak\nand \u003ca href=\"https://flatpak.github.io/xdg-desktop-portal/\"\u003edesktop\nportals\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eFlatpak basics\u003c/h4\u003e\n\n\u003cp\u003eFlatpak was \u003ca href=\"https://github.com/flatpak/flatpak/wiki/Flatpak%27s-History\"\u003eoriginally\ndeveloped\u003c/a\u003e by Alexander Larsson, who had been working on similar\nprojects stretching back to 2007. The \u003ca href=\"https://help.gnome.org/misc/release-notes/3.18/developers.html.en#:~:text=Sandboxed%20Applications\"\u003efirst\nrelease\u003c/a\u003e was as XDG-App in 2015. It was renamed to Flatpak in 2016,\na nod to IKEA\u0026#39;s \u0026#34;\u003ca href=\"https://www.ikea.com/ph/en/this-is-ikea/about-us/the-story-of-ikea-flatpacks-puba710ccb0/\"\u003eflatpacks\u003c/a\u003e\u0026#34;\nfor delivering furniture.\u003c/p\u003e\n\n\u003cp\u003eThe Flatpak project provides \u003ca href=\"https://docs.flatpak.org/en/latest/flatpak-command-reference.html#flatpak\"\u003ecommand-line\ntools\u003c/a\u003e for managing and running Flatpak applications, tools for \u003ca href=\"https://docs.flatpak.org/en/latest/flatpak-builder-command-reference.html\"\u003ebuilding\nFlatpak bundles\u003c/a\u003e, and \u003ca href=\"https://docs.flatpak.org/en/latest/available-runtimes.html\"\u003eruntimes\u003c/a\u003e\nthat provide components for Flatpak applications. The project uses \u003ca href=\"https://lwn.net/Articles/603762/\"\u003econtrol groups\u003c/a\u003e, \u003ca href=\"https://lwn.net/Articles/531114/\"\u003enamespaces\u003c/a\u003e,\n\u003ca href=\"https://lwn.net/Articles/281157/\"\u003ebind mounts\u003c/a\u003e, \u003ca href=\"https://lwn.net/Articles/332974/\"\u003eseccomp\u003c/a\u003e, and \u003ca href=\"https://github.com/containers/bubblewrap?tab=readme-ov-file#bubblewrap\"\u003eBubblewrap\u003c/a\u003e\nto provide application isolation (\u0026#34;sandboxing\u0026#34;). Flatpak content is \nprimarily delivered using \u003ca href=\"https://ostreedev.github.io/ostree/introduction/\"\u003eOSTree\u003c/a\u003e,\nthough support for using \u003ca href=\"https://github.com/opencontainers/distribution-spec/\"\u003eOpen\nContainer Initiative (OCI) images\u003c/a\u003e has been \u003ca href=\"https://opencontainers.org/posts/blog/2018-11-07-bringing-oci-images-to-the-desktop-with-flatpak/\"\u003eavailable\u003c/a\u003e\nsince 2018 and is used by Fedora for its Flatpak applications. The \u0026#34;\u003ca href=\"https://docs.flatpak.org/en/latest/under-the-hood.html\"\u003eUnder\nthe Hood\u003c/a\u003e\u0026#34; page from Flatpak\u0026#39;s documentation provides a good\noverview of how the pieces fit together.\u003c/p\u003e\n\n\u003ch4\u003eSlowing development\u003c/h4\u003e\n\n\u003cp\u003eWick started his talk by saying that it looks like everything is\ngreat with the Flatpak project, but if one looks deeper, \u0026#34;\u003cq\u003eyou will\nnotice that it\u0026#39;s not being actively developed anymore\u003c/q\u003e\u0026#34;. There are\npeople who maintain the code base and fix security issues, for\nexample, but \u0026#34;\u003cq\u003ebigger changes are not really happening\nanymore\u003c/q\u003e\u0026#34;. He said that there are a bunch of merge requests for new\nfeatures, but no one feels responsible for reviewing them, and that is\nkind of problematic.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe reason for the lack of reviewers is that key people, such as\nLarsson, have left the project. Every now and then, Wick said, Larsson\nmay get involved if it\u0026#39;s necessary, but he is basically not part of\nthe day-to-day development of the project. Wick said that it is hard\nto get new Flatpak contributors involved because it can take months to\nget feedback on major changes, and then more months to get another\nreview. \u0026#34;\u003cq\u003eThis is really not a great way to get someone up to speed,\nand it\u0026#39;s not a great situation to be in\u003c/q\u003e.\u0026#34;\u003c/p\u003e\n\n\u003cp\u003e\u0026#34;\u003cq\u003eMaybe I\u0026#39;m complaining about something that is actually not that\nmuch of an issue\u003c/q\u003e\u0026#34;, he said. Flatpak works; it does its job, and\n\u0026#34;\u003cq\u003ewe just use it and don\u0026#39;t think about it much\u003c/q\u003e\u0026#34;. In that sense,\nthe project is in a good spot. But he has still been thinking\nabout how the project is \u0026#34;\u003cq\u003eliving with constraints\u003c/q\u003e\u0026#34; because\ncontributors do not have the opportunity to go in and make bigger\nchanges.\u003c/p\u003e\n\n\u003cp\u003eAs an example, Wick said that Red Hat has been doing work that\nwould allow Flatpaks to be installed as part of a base\ninstallation. The vendor or administrator could specify the\napplications to be installed, and a program called\n\u003ctt\u003eflatpak-preinstall\u003c/tt\u003e would take care of the rest. The feature\nhas been implemented and is planned for inclusion in Red Hat\nEnterprise Linux (RHEL) 10. The work was \u003ca href=\"https://github.com/flatpak/flatpak/pull/5832\"\u003estarted\u003c/a\u003e by\nKalev Lember and Owen Taylor last June, but the original pull request\nwas \u003ca href=\"https://github.com/flatpak/flatpak/pull/5832#issuecomment-2630695788\"\u003eclosed\u003c/a\u003e\nby Lember in February as he was leaving Red Hat and would not be\nworking on it anymore. It was picked up by Wick in February as a \u003ca href=\"https://github.com/flatpak/flatpak/pull/6116\"\u003enew request\u003c/a\u003e\nbut wasn\u0026#39;t reviewed until early May.\u003c/p\u003e\n\n\u003ch4\u003eOSTree and OCI\u003c/h4\u003e\n\n\u003cp\u003eWick\u0026#39;s next topic was OCI support in Flatpak. While OSTree has been\na success in some ways, and it is still being maintained, it is not\nundergoing active development. He noted that developers have a\n\u0026#34;\u003cq\u003every narrow set of tools\u003c/q\u003e\u0026#34; for working with OSTree, so building\nFlatpaks that use OSTree requires non-standard and bespoke tools, but\nthere is a whole range of utilities available for working with OCI\nimages. Even better, tools for working with OCI images \u0026#34;\u003cq\u003eare all\ndeveloped by people other than us, which means we don\u0026#39;t actually have\nto do the work if we just embrace them\u003c/q\u003e\u0026#34;.\u003c/p\u003e\n\n\u003cp\u003eUnfortunately, there are a number of OCI-related improvements that,\nagain, are waiting on review to be merged into Flatpak. For example,\nWick mentioned that the OCI container standard has added \u003ca href=\"https://github.com/containers/storage/blob/main/docs/containers-storage-zstd-chunked.md\"\u003e\u003ctt\u003ezstd:chunked\u003c/tt\u003e\u003c/a\u003e\nsupport. Instead of the original OCI image format that uses gzipped\ntarballs, the \u003ctt\u003ezstd:chunked\u003c/tt\u003e images are compressed with \u003ca href=\"https://datatracker.ietf.org/doc/html/rfc8478\"\u003ezstd\u003c/a\u003e and have\n\u003ca href=\"https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md#skippable-frames\"\u003eskippable\nframes\u003c/a\u003e that include additional metadata—such as a table of\ncontents—which allows file-level deduplication. In short,\nzstd:chunked allows pulling only those files that have changed since\nthe last update, rather than an entire OCI layer, when updating a\ncontainer image or a Flatpak.\u003c/p\u003e\n\n\u003cp\u003eThere is a \u003ca href=\"https://github.com/flatpak/flatpak/pull/5540\"\u003epull request\u003c/a\u003e\nfrom Taylor, submitted in September 2023, that would add support\nto Flatpak for zstd-compressed layers. It has received little\nattention since then and \u0026#34;\u003cq\u003eit\u0026#39;s just sitting there,\ncurrently\u003c/q\u003e\u0026#34;.\u003c/p\u003e\n\n\u003ch4\u003eNarrowing permissions\u003c/h4\u003e\n\n\u003cp\u003eOne of the key functions of Flatpak is to sandbox applications and\nlimit their access to the system. Wick said that the project has added\nfeatures to \u0026#34;\u003cq\u003enarrow down\u003c/q\u003e\u0026#34; the sandboxes and provide more\nrestricted permissions. As an example, Flatpak now has\n\u003ctt\u003e--device=input\u003c/tt\u003e to allow an application to access input\ndevices without having access to all devices.\u003c/p\u003e\n\n\u003cp\u003eOne problem with this, he said, is that a system\u0026#39;s installation of\nFlatpak may not support the newer features. A user\u0026#39;s Linux\ndistribution may still be providing an older version of Flatpak that\ndoes not have support for \u003ctt\u003e--device=input\u003c/tt\u003e, or whatever new\nfeature that a Flatpak developer may wish to use. Wick said there\nneeds to be a way for applications to use the new permissions by\ndefault, but fall back to the older permission models if used on a\nsystem with an older version of Flatpak.\u003c/p\u003e\n\n\u003cp\u003eThis isn\u0026#39;t an entirely new situation, he said. \u0026#34;\u003cq\u003eWe had this\nbefore with Wayland and X11\u003c/q\u003e\u0026#34;, where if a system is running\nWayland, then Flatpak should not bind-mount an X11 socket. Now, there is a\nsimilar scenario with the \u003ca href=\"https://flatpak.github.io/xdg-desktop-portal/docs/doc-org.freedesktop.portal.Usb.html\"\u003exdg-desktop portal\nfor USB access\u003c/a\u003e, which was \u003ca href=\"https://github.com/flatpak/xdg-desktop-portal/pull/559\"\u003eadded\u003c/a\u003e\nto the xdg-desktop-project in 2021. Support for that portal was \u003ca href=\"https://github.com/flatpak/flatpak/issues/4405\"\u003emerged\u003c/a\u003e into\nFlatpak in 2024 after several iterations. What is missing is the\nability to specify backward-compatible permissions so that a Flatpak\napplication can be given USB access (\u003ctt\u003e--device=usb\u003c/tt\u003e) with newer\nversions of Flatpak but retain the \u003ctt\u003e--device=all\u003c/tt\u003e permissions\nif necessary. Once again, there is a \u003ca href=\"https://github.com/flatpak/flatpak/issues/5681\"\u003epull request\u003c/a\u003e\n(from Hubert Figuière) that implements this, but Wick said that\n\u0026#34;\u003cq\u003eit\u0026#39;s also just sitting there\u003c/q\u003e\u0026#34;.\u003c/p\u003e\n\n\u003cp\u003eWick would also like to improve the way that Flatpak handles access\nto audio. Currently, Flatpak still uses \u003ca href=\"https://www.freedesktop.org/wiki/Software/PulseAudio/\"\u003ePulseAudio\u003c/a\u003e\neven if a host system uses \u003ca href=\"https://pipewire.org/\"\u003ePipeWire\u003c/a\u003e. The problem with that is\nthat PulseAudio bundles together access to speakers and\nmicrophones—you can have access to both, or neither, but not just one. So\nif an application has access to play sound, it also has access to\ncapture audio, which Wick said, with a bit of understatement, is\n\u0026#34;\u003cq\u003enot great\u003c/q\u003e\u0026#34;. He would like to be able to use PipeWire, which\ncan expose restricted access to speakers only.\u003c/p\u003e\n\n\u003cp\u003eOne thing that has been a bit of a pain point, Wick said, is that\nnested sandboxing does not work in Flatpak. For instance, an\napplication cannot use Bubblewrap inside Flatpak. Many applications,\nsuch as web browsers, make heavy use of sandboxing.\u003c/p\u003e\n\n\u003cblockquote\u003e\nThey really like to put their tabs into their own sandboxes because it\nturns out that if one of those tabs is running some code that\nmanages to exploit and break out of the process there, at\nleast it\u0026#39;s contained and doesn\u0026#39;t spread to the rest of the\nbrowser.\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhat Flatpak does instead, currently, is to have a kind of side\nsandbox that applications can call to and spawn another Flatpak\ninstance that can be restricted even further. \u0026#34;\u003cq\u003eSo, in that sense,\nthat is a solution to the problem, but it is also kind of fragile\u003c/q\u003e.\u0026#34;\nThere have been issues with this approach for quite a while, he said,\nbut no one knows quite how to solve them.\u003c/p\u003e\n\n\u003cp\u003eIdeally, Flatpak would simply support nested namespacing and nested\nsandboxes, but currently it does not. Flatpak uses seccomp to prevent\napplications in a sandbox from having direct access to user\nnamespaces. There is an API that can be used to create a sub-sandbox,\nbut it is more restrictive. He said that the restrictions to user\nnamespaces are outdated: \u0026#34;\u003cq\u003efor a long time it wasn\u0026#39;t really a good\nidea to expose user namespacing because it exposed a big kernel API to\nuser space that could be exploited\u003c/q\u003e\u0026#34;. Wick feels that user\nnamespaces are, nowadays, a well-tested and a much-used interface. He\ndoes not think that there is much of a good argument against user\nnamespaces anymore.\u003c/p\u003e\n\n\u003ch4\u003exdg-dbus-proxy\u003c/h4\u003e\n\n\u003cp\u003eFlatpak applications do not talk directly to D-Bus. Instead,\n\u003ctt\u003eflatpak-run\u003c/tt\u003e spawns an \u003ca href=\"https://man.archlinux.org/man/xdg-dbus-proxy.1.en\"\u003exdg-dbus-proxy\u003c/a\u003e\nfor every Flatpak instance that is \u0026#34;\u003cq\u003enot exactly in the same\nsandbox, it\u0026#39;s just on the side, basically\u003c/q\u003e\u0026#34;. The proxy is\nresponsible for setting up filtering according to rules that are\nprocessed when \u003ctt\u003eflatpak-run\u003c/tt\u003e is used to start an\napplication. When setting up the proxy, Flatpak starts with a\n\u003ctt\u003edeny-all\u003c/tt\u003e state and then adds specific connections that are\nallowed. This is so that applications do not expose things that other\napplications are not supposed to use.\u003c/p\u003e\n\n\u003cp\u003eWick said that he would like to move filtering from xdg-dbus-proxy\ndirectly to the D-Bus message brokers and provide policy based on a\ncgroups path. This is not something that has been implemented\nalready, but he said he planned to work on a prototype in \u003ca href=\"https://github.com/dbus2/busd?tab=readme-ov-file#busd\"\u003ebusd\u003c/a\u003e,\nwhich is a D-Bus broker implementation in Rust.\u003c/p\u003e\n\n\u003cp\u003eThat would also allow for a more dynamic policy, which would allow\napplications to export services to other applications on the\nfly. Currently, the policy is set when a Flatpak is run, and can\u0026#39;t be\nmodified afterward.\u003c/p\u003e\n\n\u003cp\u003eAs a side note, that means that Flatpak applications cannot\ntalk to one another over D-Bus. They can still communicate\nwith other applications; for example, Wick said that applications can\ncommunicate over the host\u0026#39;s shared network namespace, \u0026#34;\u003cq\u003ewhich means\nyou can use HTTP or whatever, there are like thousands of side\nchannels you could use if you wanted to\u003c/q\u003e\u0026#34;.\u003c/p\u003e\n\n\u003cp\u003eFlatpak\u0026#39;s network namespacing is \u0026#34;\u003cq\u003ekind of ugly, and I don\u0026#39;t \nreally have a good solution here\u003c/q\u003e\u0026#34;, Wick said, but he wanted to\npoint out that it is something the project should take a look\nat. \u0026#34;\u003cq\u003eLike, you bind something on localhost and suddenly all\napplications can just poke at it\u003c/q\u003e\u0026#34;. He gave the example of \u003ca href=\"https://flathub.org/apps/de.bund.ausweisapp.ausweisapp2\"\u003eAusweisApp\u003c/a\u003e,\nwhich is an official authentication app for German IDs \nthat can be used to authenticate with government web sites. It\nexposes a service on the local host, which makes it available to all\nFlatpak applications on the system.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThis is some of the stuff that I feel like we really need to take a\nlook at. I\u0026#39;m not sure if this is like directly exploitable, but at the\nvery least it\u0026#39;s kind of scary.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWick said that the project needs to create a network namespace for\nFlatpak applications, \u0026#34;\u003cq\u003ebut we don\u0026#39;t really have any networking\nexperts around, which is kind of awkward, we really have to find a\nsolution here\u003c/q\u003e\u0026#34;.\u003c/p\u003e\n\n\u003cp\u003eAnother awkward spot the project finds itself in, he said, is with\nNVIDIA drivers. The project has to build multiple versions of NVIDIA\ndrivers for multiple runtimes that are supported, and that translates\nto a great deal of network overhead for users who have to download\neach of those versions—even if they don\u0026#39;t need all of the\ndrivers. (\u003ca href=\"https://forums.linuxmint.com/viewtopic.php?t=399518\"\u003eThis\ncomplaint\u003c/a\u003e on the Linux Mint forum illustrates the problem\nnicely.) It also means that games packaged as Flatpaks need to be\ncontinually updated against new runtimes, or they will eventually stop\nworking because their drivers stop being updated and the games will\nnot support current GPUs.\u003c/p\u003e\n\n\u003cp\u003eWick\u0026#39;s suggestion is to take a cue from Valve Software. He said\nthat Valve uses a model similar to Flatpak to run its games, but it\nuses the drivers from the host system and loads all of the driver\u0026#39;s\ndependencies in the sandbox for the game. Valve uses the \u003ca href=\"https://gitlab.collabora.com/vivek/libcapsule\"\u003elibcapsule\u003c/a\u003e\nlibrary to do this, which is \u0026#34;\u003cq\u003ekind of fragile\u003c/q\u003e\u0026#34; and difficult to make\nsure that it works well. Instead of using libcapsule, he would like to\nstatically compile drivers and share them between all Flatpak\napplications. This is just in the idea stage at the moment, but\nWick said he would like to solve the driver problem eventually.\u003c/p\u003e\n\n\u003ch4\u003ePortals\u003c/h4\u003e\n\n\u003cp\u003ePortals are D-Bus interfaces that provide APIs for things like file\naccess, printing, opening URLs, and more. Flatpak can grant sandboxed\napplications access to portals to make D-Bus calls. Wick noted\nthat portals are not part of the Flatpak project but they are crucial\nto it. \u0026#34;\u003cq\u003eWhatever we do with portals just directly improves\nFlatpak, and there are a bunch of portal things we need to\nimprove\u003c/q\u003e\u0026#34;.\u003c/p\u003e\n\n\u003cp\u003eHe gave the example of the \u003ca href=\"https://flatpak.github.io/xdg-desktop-portal/docs/doc-org.freedesktop.portal.Documents.html\"\u003eDocuments\u003c/a\u003e\nportal, which makes files outside the sandbox available to Flatpak\napplications. The Documents portal is great for sharing single files,\nbut it is too fine-grained and restrictive for other applications,\nsuch as Blender, GIMP, or music applications, that may need to access\nan entire library of files. \u0026#34;\u003cq\u003eYou want a more coarse-grained\npermission model for files at some point\u003c/q\u003e\u0026#34;. There are some\npossibilities, he said, such as bind mounting user-selected host\nlocations into the sandbox.\u003c/p\u003e\n\n\u003cp\u003eWick had a number of ideas that he would like to see implemented\nfor portals, such as support for autofilling passwords, Fast Identity\nOnline (FIDO) security keys, speech synthesis, and more. He\nacknowledged that it\u0026#39;s \u0026#34;\u003cq\u003ekind of hard to write\u003c/q\u003e\u0026#34; code for portals\nright now, but there is work to make it easier by using \u003ca href=\"https://gitlab.gnome.org/GNOME/libdex\"\u003elibdex\u003c/a\u003e. (See\nChristian Hergert\u0026#39;s \u003ca href=\"https://blogs.gnome.org/chergert/2025/03/27/fiber-cancellation-in-libdex/\"\u003eblog\npost\u003c/a\u003e on libdex for a short look at this.) It might even make sense\nto rewrite things in Rust, he said.\u003c/p\u003e\n\n\u003ch4\u003eFlatpak-next\u003c/h4\u003e\n\n\u003cp\u003eAssume that it\u0026#39;s ten years in the future, Wick said, and no one is\nworking on Flatpak anymore. \u0026#34;\u003cq\u003eWhat would you do with Flatpak if you\ncould just rewrite it? I think the vision where we should go is OCI\nfor almost everything.\u003c/q\u003e\u0026#34; Larsson\u0026#39;s choices in creating Flatpak\nwere good and sound technical decisions at the time, but they\nended up being \u0026#34;\u003cq\u003enot the thing that everyone else has\u003c/q\u003e\u0026#34;. That is\nan issue because only a few people understand what Flatpak does, and\nthe project has to do everything itself.\u003c/p\u003e\n\n\u003cp\u003eBut, he said, if the project did \u0026#34;\u003cq\u003eeverything OCI\u003c/q\u003e\u0026#34;, it would\nget a lot of things for free, such as OCI registries and tooling. Then\nit just comes down to what \u003ctt\u003eflatpak-run\u003c/tt\u003e has to do, and that\nwould not be very much. Rethinking Flatpak with modern container tools\nand aligning with the wider container ecosystem, he said, would make\neverything easier and is worth exploring. Once again, he floated the\nidea of using Rust for a rewrite.\u003c/p\u003e\n\n\u003ch4\u003eQ\u0026amp;A\u003c/h4\u003e\n\n\u003cp\u003eThere was a little time for questions at the end of Wick\u0026#39;s\nsession. The first was about what happens to existing Flatpaks if the\nproject moves to OCI tooling. \u0026#34;\u003cq\u003eWould I need to just throw away\n[applications] and download again, or is that too much in the future,\nand you haven\u0026#39;t thought about that?\u003c/q\u003e\u0026#34; Wick said that it would be an\nissue on the client side, but Flathub (for example) has all of the\nbuild instructions for its Flatpaks and could simply rebuild them.\u003c/p\u003e\n\n\u003cp\u003eAnother audience member was concerned about using container\ninfrastructure. They said that OCI registries that store images are\nmissing indexing and metadata that is consumed by applications like\nGNOME Software for Flatpaks. What would be the way forward to ensure\nthat they could preserve the same user experience? Wick said that\nthere is now a standard for storing non-images in OCI registries,\nwhich would allow storing \u0026#34;\u003cq\u003ethe same things we\u0026#39;re currently\nstoring\u003c/q\u003e\u0026#34; for Flatpak, but writing the code to do it and getting it\nmerged would be the hard part.\u003c/p\u003e\n\n\u003cp\u003eThe final question was whether there was anything concrete planned\nabout using PipeWire directly with Flatpak rather than the PulseAudio\nrouting. Wick said that he had been talking with Wim Taymans, the\ncreator of PipeWire, about how to add support for it within\nFlatpak. It is mostly about \u0026#34;\u003cq\u003eadding PipeWire policy to do the right\nthing when it knows that it is a Flatpak instance\u003c/q\u003e\u0026#34;, he said.\u003c/p\u003e\n\n\u003cbr clear=\"all\"/\u003e\u003ctable\u003e\n           \u003ctbody\u003e\u003ctr\u003e\u003cth colspan=\"2\"\u003eIndex entries for this article\u003c/th\u003e\u003c/tr\u003e\n           \u003ctr\u003e\u003ctd\u003e\u003ca href=\"https://lwn.net/Archives/ConferenceIndex/\"\u003eConference\u003c/a\u003e\u003c/td\u003e\u003ctd\u003e\u003ca href=\"https://lwn.net/Archives/ConferenceIndex/#Linux_Application_Summit-2025\"\u003eLinux Application Summit/2025\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\n            \u003c/tbody\u003e\u003c/table\u003e\u003cbr clear=\"all\"/\u003e\n\u003chr/\u003e\n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "18 min read",
  "publishedTime": null,
  "modifiedTime": null
}
