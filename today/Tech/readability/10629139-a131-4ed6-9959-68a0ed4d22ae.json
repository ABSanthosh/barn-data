{
  "id": "10629139-a131-4ed6-9959-68a0ed4d22ae",
  "title": "An Update on Gccrs Development",
  "link": "https://lwn.net/Articles/991199/",
  "description": "Comments",
  "author": "",
  "published": "Fri, 11 Oct 2024 01:36:57 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "By Jonathan CorbetOctober 1, 2024 Cauldron",
  "length": 4552,
  "excerpt": "One concern that has often been expressed about the Rust language is that there is only one compiler for it. That makes it hard to say what the standard version of the language is and restricts the architectures that can be targeted by Rust code to those that the available compiler supports. Adding a Rust frontend to GCC would do much to address those concerns; at the 2024 GNU Tools Cauldron, Pierre-Emmanuel Patry gave an update on the state of that work and what its objectives are.",
  "siteName": "",
  "favicon": "https://static.lwn.net/images/favicon.png",
  "text": "One concern that has often been expressed about the Rust language is that there is only one compiler for it. That makes it hard to say what the standard version of the language is and restricts the architectures that can be targeted by Rust code to those that the available compiler supports. Adding a Rust frontend to GCC would do much to address those concerns; at the 2024 GNU Tools Cauldron, Pierre-Emmanuel Patry gave an update on the state of that work and what its objectives are. The GCC frontend goes by the name \"gccrs\"; the trademark rules around the language prevent it from being called a Rust compiler. Since the project restarted in 2019, Patry began, it has been targeting the 1.49 release of the language, which came out in 2020. It has been included in GCC since GCC 14, though that release did not include the gccrs documentation. At the 2023 GNU Tools Cauldron, Patry had said that the project had over 800 commits in its repository that needed to be upstreamed into the GCC mainline — a significant pile of work. This year, that number has reduced to 40 — and those are new work, not leftovers from the previous year. So some progress has been made. The goal had been to push changes upstream every two weeks, but that has proved to be too much work; they are still aiming to get their code upstream as quickly as they can, though they have backed off on that specific goal. Over the last year, gccrs development was helped by three Google Summer of Code (GSoC) interns. One of them (Jasmine Tang) worked on support for inline assembly code, a feature that the Rust-for-Linux project needs; most of the frontend work for that is now done. Inline assembly in Rust looks like: unsafe { asm!(\"assembly code here\", \"other info\") }; While the frontend work is in place, there had been some difficulties getting that assembly code through the later compilation stages intact. Those problems have been fixed, but there are still various details to be dealt with. $ sudo subscribe today Subscribe today and elevate your LWN privileges. You’ll have access to all of LWN’s high-quality articles as soon as they’re published, and help support LWN in the process. Act now and you can start with a free trial subscription. The second GSoC student (Muhammad Mahad) worked on a test-suite adapter, with the goal of helping gccrs pass the Rust test suite. There is an impedance mismatch to work around here; GCC uses DejaGnu for its tests, so some sort of conversion of Rust's tests is needed. The final GSoC student (Kushal Pal) worked on borrow checking in the GCC intermediate representation and getting proper error messages to users. Looking forward to the upcoming GCC 15 release, Patry said that the primary focus is on implementing features that are needed to compile kernel code with gccrs. The most important task there is getting to a point where gccrs can compile the Rust core library, which turns out to not be an easy task. The developers had thought they had implemented enough to do that, but were surprised by many problems in need of fixing. The Rust project's habit of using experimental features in the core library does not help there. Those problems are being worked through, Patry said, but even when it works, the compiler is currently quite slow. That, though, is a problem to be worried about later, once the feature and correctness work is done and the core library compiles. Closing out with longer-term goals, Patry started with, once again, compiling the core library — but this time without making any changes to the library itself. The developers would like to catch up to the 1.78 release that is currently used by Rust for Linux. That is not as big a leap as might be thought, he said; many of the 1.78 features had been experimental long before and are already implemented in gccrs. Beyond that, he said, the project will eventually address building the std library and, someday, work to catch up with the rustc compiler. The impression left by this session is that the gccrs developers are working hard to fill the second-compiler gap for Rust, but that there are far too few of them. This is an important project that really should attract some significant company support but, for the most part, that is not happening. Unless more in the industry step up to push this work forward, Rust may be fated to remain a language with a single compiler for a long time to come. Index entries for this article ConferenceGNU Tools Cauldron/2024",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003e\nOne concern that has often been expressed about the Rust language is that\nthere is only one compiler for it.  That makes it hard to say what the\nstandard version of the language is and restricts the architectures that\ncan be targeted by Rust code to those that the available compiler supports.\nAdding a Rust frontend to GCC would do much to address those concerns; at\nthe \u003ca href=\"https://gcc.gnu.org/wiki/cauldron2024\"\u003e2024 GNU Tools\nCauldron\u003c/a\u003e, Pierre-Emmanuel Patry gave an update on the state of that\nwork and what its objectives are.\n\u003c/p\u003e\u003cp\u003e\n\n\u003ca href=\"https://lwn.net/Articles/991200/\"\u003e\u003cimg src=\"https://static.lwn.net/images/conf/2024/cauldron/Pierre-EmmanuelPatry-sm.png\" alt=\"[Pierre-Emmanuel Patry]\" title=\"Pierre-Emmanuel Patry\"/\u003e\u003c/a\u003e \n\nThe \u003ca href=\"https://rust-gcc.github.io\"\u003eGCC frontend\u003c/a\u003e goes by the name\n\u0026#34;gccrs\u0026#34;; the trademark rules around the language prevent it from being\ncalled a Rust compiler.  Since the project restarted in 2019, Patry began,\nit has been targeting the 1.49 release of the language, which \u003ca href=\"https://blog.rust-lang.org/2020/12/31/Rust-1.49.0.html\"\u003ecame out\u003c/a\u003e\nin 2020.  It has been included in GCC since \u003ca href=\"https://gcc.gnu.org/gcc-14/changes.html\"\u003eGCC 14\u003c/a\u003e, though that\nrelease did not include the gccrs documentation.\n\u003c/p\u003e\u003cp\u003e\nAt the 2023 GNU Tools Cauldron, Patry had \u003ca href=\"https://lwn.net/Articles/954787/\"\u003esaid\u003c/a\u003e that the project had over\n800 commits in its repository that needed to be upstreamed into the\nGCC mainline — a significant pile of work.  This year, that number has\nreduced to 40 — and those are new work, not leftovers from the\nprevious year.  So some progress has been made.  The goal had been to push\nchanges upstream every two weeks, but that has proved to be too much work;\nthey are still aiming to get their code upstream as quickly as they can,\nthough they have backed off on that specific goal.\n\u003c/p\u003e\u003cp\u003e\nOver the last year, gccrs development was helped by three Google Summer of\nCode (GSoC) interns.  One of them (Jasmine Tang) worked on support for\ninline assembly code, a feature that the Rust-for-Linux project needs; most\nof the frontend work for that is now done.  Inline assembly in Rust looks\nlike:\n\u003c/p\u003e\u003cpre\u003e    unsafe {\n        asm!(\u0026#34;assembly code here\u0026#34;, \u0026#34;other info\u0026#34;)\n    };\n\u003c/pre\u003e\n\u003cp\u003e\nWhile the frontend work is in place, there had been some difficulties\ngetting that assembly code through the later compilation stages intact.\nThose problems have been fixed, but there are still various details to be\ndealt with.\n\u003c/p\u003e\u003cblockquote\u003e\n\u003cb\u003e\u003ctt\u003e$ sudo subscribe today\u003c/tt\u003e\u003c/b\u003e\n\u003cp\u003e\nSubscribe today and elevate your LWN privileges. You’ll have\naccess to all of LWN’s high-quality articles as soon as they’re\npublished, and help support LWN in the process.  \u003ca href=\"https://lwn.net/Promo/nst-sudo/claim\"\u003eAct now\u003c/a\u003e and you can start with a free trial subscription.\n\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\nThe second GSoC student (Muhammad Mahad) worked on a test-suite adapter,\nwith the goal of helping gccrs pass the Rust test suite.  There is an\nimpedance mismatch to work around here; GCC uses \u003ca href=\"https://www.gnu.org/software/dejagnu/\"\u003eDejaGnu\u003c/a\u003e for its tests, so\nsome sort of conversion of Rust\u0026#39;s tests is needed.  The final GSoC student\n(Kushal Pal) worked on borrow checking in the GCC intermediate\nrepresentation and getting proper error messages to users.\n\u003c/p\u003e\u003cp\u003e\nLooking forward to the upcoming \u003ca href=\"https://gcc.gnu.org/gcc-15/changes.html\"\u003eGCC 15 release\u003c/a\u003e, Patry\nsaid that \u003ca href=\"https://rust-gcc.github.io/2024/09/03/towards-gcc15.1.html\"\u003ethe\nprimary focus\u003c/a\u003e is on implementing features that are needed to compile\nkernel code with gccrs.  The most important task there is getting to a\npoint where gccrs can compile the \u003ca href=\"https://doc.rust-lang.org/core/\"\u003eRust core library\u003c/a\u003e, which turns\nout to not be an easy task.  The developers had thought they had\nimplemented enough to do that, but were surprised by many problems in need\nof fixing.  The Rust project\u0026#39;s habit of using experimental features in the\ncore library does not help there.\n\u003c/p\u003e\u003cp\u003e\nThose problems are being worked through, Patry said, but even when it\nworks, the compiler is currently quite slow.  That, though, is a problem to\nbe worried about later, once the feature and correctness work is done and\nthe core library compiles.\n\u003c/p\u003e\u003cp\u003e\nClosing out with longer-term goals, Patry started with, once again,\ncompiling the core library — but this time without making any changes to\nthe library itself.  The developers would like to catch up to the 1.78\nrelease that is currently used by Rust for Linux.  That is not as big a\nleap as might be thought, he said; many of the 1.78 features had been\nexperimental long before and are already implemented in gccrs.  Beyond\nthat, he said, the project will eventually address building the \u003ca href=\"https://doc.rust-lang.org/std/index.html\"\u003estd library\u003c/a\u003e and,\nsomeday, work to catch up with the rustc compiler.\n\u003c/p\u003e\u003cp\u003e\nThe impression left by this session is that the gccrs developers are\nworking hard to fill the second-compiler gap for Rust, but that there are\nfar too few of them.  This is an important project that really should\nattract some significant company support but, for the most part, that\nis not happening.  Unless more in the industry step up to push this work\nforward, Rust may be fated to remain a language with a single compiler for\na long time to come.\u003cbr clear=\"all\"/\u003e\u003c/p\u003e\u003ctable\u003e\n           \u003ctbody\u003e\u003ctr\u003e\u003cth colspan=\"2\"\u003eIndex entries for this article\u003c/th\u003e\u003c/tr\u003e\n           \u003ctr\u003e\u003ctd\u003e\u003ca href=\"https://lwn.net/Archives/ConferenceIndex/\"\u003eConference\u003c/a\u003e\u003c/td\u003e\u003ctd\u003e\u003ca href=\"https://lwn.net/Archives/ConferenceIndex/#GNU_Tools_Cauldron-2024\"\u003eGNU Tools Cauldron/2024\u003c/a\u003e\u003c/td\u003e\u003c/tr\u003e\n            \u003c/tbody\u003e\u003c/table\u003e\u003cbr clear=\"all\"/\u003e\n\u003chr/\u003e\n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
