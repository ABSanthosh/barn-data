{
  "id": "16055413-3a78-4d52-9f89-4823568a8543",
  "title": "Everything I built with Claude Artifacts this week",
  "link": "https://simonwillison.net/2024/Oct/21/claude-artifacts/",
  "description": "Comments",
  "author": "",
  "published": "Wed, 23 Oct 2024 20:52:13 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 10426,
  "excerpt": "I’m a huge fan of Claude’s Artifacts feature, which lets you prompt Claude to create an interactive Single Page App (using HTML, CSS and JavaScript) and then view the result …",
  "siteName": "",
  "favicon": "",
  "text": "21st October 2024 I’m a huge fan of Claude’s Artifacts feature, which lets you prompt Claude to create an interactive Single Page App (using HTML, CSS and JavaScript) and then view the result directly in the Claude interface, iterating on it further with the bot and then, if you like, copying out the resulting code. I was digging around in my Claude activity export (I built a claude-to-sqlite tool to convert it to SQLite I could explore it in Datasette) and decided to see how much I’d used artifacts in the past week. It was more than I expected! Being able to spin up a full interactive application—sometimes as an illustrative prototype, but often as something that directly solves a problem—is a remarkably useful tool. Here’s most of what I’ve used Claude Artifacts for in the past seven days. I’ve provided prompts or a full transcript for nearly all of them. URL to Markdown with Jina Reader SQLite in WASM demo Extract URLs Clipboard viewer Pyodide REPL Photo Camera Settings Simulator LLM pricing calculator YAML to JSON converter OpenAI Audio QR Code Decoder Image Converter and Page Downloader HTML Entity Escaper text-wrap-balance-nav ARES Phonetic Alphabet Converter URL to Markdown with Jina Reader I got frustrated at how hard it was to copy and paste the entire text of a web page into an LLM while using Mobile Safari. So I built a simple web UI that lets me enter a URL, calls the Jina Reader API to generate Markdown (which uses Puppeteer under the hood) and gives me that Markdown with a convenient “Copy” button. Try it out: https://tools.simonwillison.net/jina-reader (Code) I wrote more about that project here. SQLite in WASM demo A Hacker News conversation about SQLite’s WASM build lead me to the @sqlite.org/sqlite-wasm package on NPM, and I decided to knock together a quick interactive demo. Try it out here: tools.simonwillison.net/sqlite-wasm Code, Claude transcript I found myself wanting to extract all of the underlying URLs that were linked to from a chunk of text on a web page. I realized the fastest way to do that would be to spin up an artifact that could accept rich-text HTML pastes and use an HTML parser to extract those links. https://tools.simonwillison.net/extract-urls Code, Claude transcript Clipboard viewer Messing around with a tool that lets you paste in rich text reminded me that the browser clipboard API is a fascinating thing. I decided to build a quick debugging tool that would let me copy and paste different types of content (plain text, rich text, files, images etc) and see what information was available to me in the browser. https://tools.simonwillison.net/clipboard-viewer Code, Claude transcript Pyodide REPL I didn’t put a lot of effort into this one. While poking around with Claude Artifacts in the browser DevTools I spotted this CSP header: content-security-policy: default-src https://www.claudeusercontent.com; script-src 'unsafe-eval' 'unsafe-inline' https://www.claudeusercontent.com https://cdnjs.cloudflare.com https://cdn.jsdelivr.net/pyodide/; connect-src https://cdn.jsdelivr.net/pyodide/; worker-src https://www.claudeusercontent.com blob:; style-src 'unsafe-inline' https://www.claudeusercontent.com https://cdnjs.cloudflare.com https://fonts.googleapis.com; img-src blob: data: https://www.claudeusercontent.com; font-src data: https://www.claudeusercontent.com; object-src 'none'; base-uri https://www.claudeusercontent.com; form-action https://www.claudeusercontent.com; frame-ancestors https://www.claudeusercontent.com https://claude.ai https://preview.claude.ai https://claude.site https://feedback.anthropic.com; upgrade-insecure-requests; block-all-mixed-content The https://cdn.jsdelivr.net/pyodide/ in there caught my eye, because it suggested that the Anthropic development team had deliberately set it up so Pyodide—Python compiled to WebAssembly—could be loaded in an artifact. I got Claude to spin up a very quick demo to prove that this worked: https://claude.site/artifacts/a3f85567-0afc-4854-b3d3-3746dd1a37f2 I’ve not bothered to extract this one to my own tools.simonwillison.net site yet because it’s purely a proof of concept that Pyodide can load correctly in that environment. Photo Camera Settings Simulator I was out on a photo walk and got curious about whether or not JavaScript could provide a simulation of camera settings. I didn’t get very far with this one (prompting on my phone while walking along the beach)—the result was buggy and unimpressive and I quickly lost interest. It did expose me to the Fabric.js library for manipulating canvas elements though. https://claude.site/artifacts/e645c231-8c13-4374-bb7d-271c8dd73825 LLM pricing calculator This one I did finish. I built this pricing calculator as part of my experiments with Video scraping using Google Gemini, because I didn’t trust my own calculations for how inexpensive Gemini was! Here are detailed notes on how I built that. https://tools.simonwillison.net/llm-prices YAML to JSON converter I wanted to remind myself how certain aspects of YAML syntax worked, so I span up a quick YAML to JSON converter tool that shows the equivalent JSON live as you type YAML. https://claude.site/artifacts/ffeb439c-fc95-428a-9224-434f5f968d51 Claude transcript OpenAI Audio This is my most interesting artifact of the week. I was exploring OpenAI’s new Audio APIs and decided to see if I could get Claude to build we a web page that could request access to my microphone, record a snippet of audio, then base64 encoded that and send it to the OpenAI API. Here are the full details on how I built this tool. https://tools.simonwillison.net/openai-audio Claude Artifacts can’t make API requests to external hosts directly, but it can still spin up enough of a working version that it’s easy to take that, move it to different hosting and finish getting it working. I wrote more about this API pattern in Building a tool showing how Gemini Pro can return bounding boxes for objects in images. QR Code Decoder I was in a meeting earlier this week where one of the participants shared a slide with a QR code (for joining a live survey tool). I didn’t have my phone with me, so I needed a way to turn that QR code into a regular URL. https://tools.simonwillison.net/qr Knocking up this QR decoder in Claude Artifacts took just a few seconds: Build an artifact (no react) that lets me paste in a QR code and displays the decoded information, with a hyperlink if necessary [ ... ] have a file open box that also lets you drag and drop and add a onpaste handler to the page that catches pasted images as well Full conversation here. Image Converter and Page Downloader Another very quick prototype. On Hacker News someone demonstrated a neat idea for a tool that let you drop photos onto a page and it would bake them into the page as base64 URLs such that you could “save as HTML” and get a self-contained page with a gallery. I suggested they could add a feature that generated a “Download link” with the new page baked in—useful on mobile phones that don’t let you “Save as HTML”—and got Claude to knock up a quick prototype: In this case I shared the code in a Gist and then used the new-to-me https://gistpreview.github.io/?GIST_ID_GOES_HERE trick to render the result: https://gistpreview.github.io/?14a2c3ef508839f26377707dbf5dd329 gistpreview turns out to be a really quick way to turn a LLM-generated demo into a page people can view. Code, Claude transcript HTML Entity Escaper Another example of on-demand software: I needed to escape the HTML entities in a chunk of text on my phone, so I got Claude to build me a tool for that: https://claude.site/artifacts/46897436-e06e-4ccc-b8f4-3df90c47f9bc Here’s the prompt I used: Build an artifact (no react) where I can paste text into a textarea and it will return that text with all HTML entities - single and double quotes and less than greater than ampersand - correctly escaped. The output should be in a textarea accompanied by a \"Copy to clipboard\" button which changes text to \"Copied!\" for 1.5s after you click it. Make it mobile friendly Claude transcript text-wrap-balance-nav Inspired by Terence Eden I decided to do a quick experiment with the text-wrap: balance CSS property. I got Claude to build me an example nav bar with a slider and a checkbox. I wrote about that here. https://tools.simonwillison.net/text-wrap-balance-nav ARES Phonetic Alphabet Converter I was volunteering as a HAM radio communications operator for the Half Moon Bay Pumpkin Run and got nervous that I’d mess up using the phonetic alphabet—so I had Claude build me this tool: https://claude.site/artifacts/aaadab20-968a-4291-8ce9-6435f6d53f4c Claude transcript here. Amusingly it built it in Python first, then switched to JavaScript after I reminded it that I wanted “an interactive web app”. This is so useful, and so much fun! As you can see, I’m a heavy user of this feature—I just described 14 projects produced in a single week. I’ve been using artifacts since they were released on 20th June (alongside the excellent Claude 3.5 Sonnet, still my daily-driver LLM) and I’m now at a point where I fire up a new interactive artifact several times a day. I’m using artifacts for idle curiosity, rapid prototyping, library research and to spin up tools that solve immediate problems. Most of these tools took less than five minutes to build. A few of the more involved ones took longer than that, but even the OpenAI Audio one took 11:55am to 12:07pm for the first version and 12:18pm to 12:27pm for the second iteration—so 21 minutes total. Take a look at my claude-artifacts tag for even more examples, including SVG to JPG/PNG, Markdown and Math Live Renderer and Image resize and quality comparison. I also have a dashboard of every post that links to my tools.simonwillison.net site, and the underlying simonw/tools GitHub repo includes more unlisted tools, most of which link to their Claude conversation transcripts in their commit history. I’m beginning to get a little frustrated at their limitations—in particular the way artifacts are unable to make API calls, submit forms or even link out to other pages. I’ll probably end up spinning up my own tiny artifacts alternative based on everything I’ve learned about them so far. If you’re not using artifacts, I hope I’ve given you a sense of why they’re one of my current favourite LLM-based tools.",
  "image": "https://static.simonwillison.net/static/2024/claude-artifacts/sqlite-wasm.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-permalink-context=\"/2024/Oct/21/claude-artifacts/\"\u003e\n\n\u003cp\u003e21st October 2024\u003c/p\u003e\n\n\n\n\u003cp\u003eI’m a huge fan of Claude’s \u003cstrong\u003eArtifacts\u003c/strong\u003e feature, which lets you prompt \u003ca href=\"https://claude.ai/\"\u003eClaude\u003c/a\u003e to create an interactive Single Page App (using HTML, CSS and JavaScript) and then view the result directly in the Claude interface, iterating on it further with the bot and then, if you like, copying out the resulting code.\u003c/p\u003e\n\u003cp\u003eI was digging around in my \u003ca href=\"https://support.anthropic.com/en/articles/9450526-how-can-i-export-my-claude-ai-data\"\u003eClaude activity export\u003c/a\u003e (I built a \u003ca href=\"https://github.com/simonw/claude-to-sqlite\"\u003eclaude-to-sqlite\u003c/a\u003e tool to convert it to SQLite I could explore it in \u003ca href=\"https://datasette.io/\"\u003eDatasette\u003c/a\u003e) and decided to see how much I’d used artifacts \u003ca href=\"https://github.com/simonw/claude-to-sqlite/issues/2#issuecomment-2425658909\"\u003ein the past week\u003c/a\u003e. It was more than I expected!\u003c/p\u003e\n\u003cp\u003eBeing able to spin up a full interactive application—sometimes as an illustrative prototype, but often as something that directly solves a problem—is a remarkably useful tool.\u003c/p\u003e\n\u003cp\u003eHere’s most of what I’ve used Claude Artifacts for in the past seven days. I’ve provided prompts or a full transcript for nearly all of them.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#url-to-markdown-with-jina-reader\"\u003eURL to Markdown with Jina Reader\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#sqlite-in-wasm-demo\"\u003eSQLite in WASM demo\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#extract-urls\"\u003eExtract URLs\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#clipboard-viewer\"\u003eClipboard viewer\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#pyodide-repl\"\u003ePyodide REPL\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#photo-camera-settings-simulator\"\u003ePhoto Camera Settings Simulator\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#llm-pricing-calculator\"\u003eLLM pricing calculator\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#yaml-to-json-converter\"\u003eYAML to JSON converter\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#openai-audio\"\u003eOpenAI Audio\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#qr-code-decoder\"\u003eQR Code Decoder\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#image-converter-and-downloader\"\u003eImage Converter and Page Downloader\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#html-entity-escaper\"\u003eHTML Entity Escaper\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#text-wrap-balance-nav\"\u003etext-wrap-balance-nav\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"https://simonwillison.net/2024/Oct/21/claude-artifacts/#ares-phonetic-alphabet-converter\"\u003eARES Phonetic Alphabet Converter\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"url-to-markdown-with-jina-reader\"\u003eURL to Markdown with Jina Reader\u003c/h4\u003e\n\u003cp\u003eI got frustrated at how hard it was to copy and paste the entire text of a web page into an LLM while using Mobile Safari. So I built a simple web UI that lets me enter a URL, calls the \u003ca href=\"https://jina.ai/reader\"\u003eJina Reader API\u003c/a\u003e to generate Markdown (which uses Puppeteer under the hood) and gives me that Markdown with a convenient “Copy” button.\u003c/p\u003e\n\u003cp\u003eTry it out: \u003ca href=\"https://tools.simonwillison.net/jina-reader\"\u003ehttps://tools.simonwillison.net/jina-reader\u003c/a\u003e (\u003ca href=\"https://github.com/simonw/tools/blob/main/jina-reader.html\"\u003eCode\u003c/a\u003e)\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/jina-reader.jpg\" alt=\"Jina Reader - URL field, Markdown selected in a select box, Submit button. Then a box showing Markdown extracted from the page with a Copy to Clipboard button. Then a frame showing a preview of the rendered Markdown.\"/\u003e\u003c/p\u003e\n\u003cp\u003eI wrote \u003ca href=\"https://simonwillison.net/2024/Oct/14/my-jina-reader-tool/?uu\"\u003emore about that project here\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"sqlite-in-wasm-demo\"\u003eSQLite in WASM demo\u003c/h4\u003e\n\u003cp\u003eA Hacker News \u003ca href=\"https://news.ycombinator.com/item?id=41851051#41851788\"\u003econversation about SQLite’s WASM build\u003c/a\u003e lead me to the \u003ca href=\"https://www.npmjs.com/package/@sqlite.org/sqlite-wasm\"\u003e@sqlite.org/sqlite-wasm\u003c/a\u003e package on NPM, and I decided to knock together a quick interactive demo.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/sqlite-wasm.jpg\" alt=\"Pelican Sightings in Half Moon Bay - a textarea with select * from pelican sightings, an execute query button and a table displaying 5 matching rows.\"/\u003e\u003c/p\u003e\n\u003cp\u003eTry it out here: \u003ca href=\"https://tools.simonwillison.net/sqlite-wasm\"\u003etools.simonwillison.net/sqlite-wasm\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://github.com/simonw/tools/blob/main/sqlite-wasm.html\"\u003eCode\u003c/a\u003e, \u003ca href=\"https://gist.github.com/simonw/677c3794051c4dfeac94e514a8e5b697\"\u003eClaude transcript\u003c/a\u003e\u003c/p\u003e\n\n\n\u003cp\u003eI found myself wanting to extract all of the underlying URLs that were linked to from a chunk of text on a web page. I realized the fastest way to do that would be to spin up an artifact that could accept rich-text HTML pastes and use an HTML parser to extract those links.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/extract-urls.jpg\" alt=\"Extract URLs tool. Content pasted. URLs extracted. Shows a list of extracted URLs.\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tools.simonwillison.net/extract-urls\"\u003ehttps://tools.simonwillison.net/extract-urls\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/simonw/tools/blob/main/extract-urls.html\"\u003eCode\u003c/a\u003e, \u003ca href=\"https://gist.github.com/simonw/0a7d0ddeb0fdd63a844669475778ca06\"\u003eClaude transcript\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"clipboard-viewer\"\u003eClipboard viewer\u003c/h4\u003e\n\u003cp\u003eMessing around with a tool that lets you paste in rich text reminded me that the browser clipboard API is a fascinating thing. I decided to build a quick debugging tool that would let me copy and paste different types of content (plain text, rich text, files, images etc) and see what information was available to me in the browser.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/clipboard-viewer.jpg\" alt=\"Clipboard format viewer. Paste here or anywhere on the page. Shows text/html with a fragment of HTML, text/plain with some text and Clipboard Event Information showing event type paste and formats available text/html and text/plain\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tools.simonwillison.net/clipboard-viewer\"\u003ehttps://tools.simonwillison.net/clipboard-viewer\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/simonw/tools/blob/main/clipboard-viewer.html\"\u003eCode\u003c/a\u003e, \u003ca href=\"https://gist.github.com/simonw/5393dd81fcabc9f854e8bbec205e7e1e\"\u003eClaude transcript\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"pyodide-repl\"\u003ePyodide REPL\u003c/h4\u003e\n\u003cp\u003eI didn’t put a lot of effort into this one. While poking around with Claude Artifacts in the browser DevTools I spotted this CSP header:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003econtent-security-policy: default-src https://www.claudeusercontent.com; script-src \u0026#39;unsafe-eval\u0026#39; \u0026#39;unsafe-inline\u0026#39; https://www.claudeusercontent.com https://cdnjs.cloudflare.com https://cdn.jsdelivr.net/pyodide/; connect-src https://cdn.jsdelivr.net/pyodide/; worker-src https://www.claudeusercontent.com blob:; style-src \u0026#39;unsafe-inline\u0026#39; https://www.claudeusercontent.com https://cdnjs.cloudflare.com https://fonts.googleapis.com; img-src blob: data: https://www.claudeusercontent.com; font-src data: https://www.claudeusercontent.com; object-src \u0026#39;none\u0026#39;; base-uri https://www.claudeusercontent.com; form-action https://www.claudeusercontent.com; frame-ancestors https://www.claudeusercontent.com https://claude.ai https://preview.claude.ai https://claude.site https://feedback.anthropic.com; upgrade-insecure-requests; block-all-mixed-content\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ehttps://cdn.jsdelivr.net/pyodide/\u003c/code\u003e in there caught my eye, because it suggested that the Anthropic development team had deliberately set it up so \u003ca href=\"https://pyodide.org/\"\u003ePyodide\u003c/a\u003e—Python compiled to WebAssembly—could be loaded in an artifact.\u003c/p\u003e\n\u003cp\u003eI got Claude to spin up a very quick demo to prove that this worked:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/pyodide-repl.jpg\" alt=\"Pyodide Python REPL -   3 + 4 returns 7. A textarea to enter python code and a Run button.\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://claude.site/artifacts/a3f85567-0afc-4854-b3d3-3746dd1a37f2\"\u003ehttps://claude.site/artifacts/a3f85567-0afc-4854-b3d3-3746dd1a37f2\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI’ve not bothered to extract this one to my own \u003ccode\u003etools.simonwillison.net\u003c/code\u003e site yet because it’s purely a proof of concept that Pyodide can load correctly in that environment.\u003c/p\u003e\n\u003ch4 id=\"photo-camera-settings-simulator\"\u003ePhoto Camera Settings Simulator\u003c/h4\u003e\n\u003cp\u003eI was out on a photo walk and got curious about whether or not JavaScript could provide a simulation of camera settings. I didn’t get very far with this one (prompting on my phone while walking along the beach)—the result was buggy and unimpressive and I quickly lost interest. It did expose me to the \u003ca href=\"http://fabricjs.com/\"\u003eFabric.js\u003c/a\u003e library for manipulating canvas elements though.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/photo-settings.jpg\" alt=\"Photo Camera Settings Simulator. An image has been selected - but only the corner of the image displays with some buggy broken resize handles. Three sliders at the bottom show Exposure, Contrast and SAturation.\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://claude.site/artifacts/e645c231-8c13-4374-bb7d-271c8dd73825\"\u003ehttps://claude.site/artifacts/e645c231-8c13-4374-bb7d-271c8dd73825\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"llm-pricing-calculator\"\u003eLLM pricing calculator\u003c/h4\u003e\n\u003cp\u003eThis one I \u003cem\u003edid\u003c/em\u003e finish. I built this pricing calculator as part of my experiments with \u003ca href=\"https://simonwillison.net/2024/Oct/17/video-scraping/\"\u003eVideo scraping using Google Gemini\u003c/a\u003e, because I didn’t trust my own calculations for how inexpensive Gemini was! Here are \u003ca href=\"https://simonwillison.net/2024/Oct/17/video-scraping/#bonus-calculator\"\u003edetailed notes\u003c/a\u003e on how I built that.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/llm-pricing-calculator.jpg\" alt=\"Screenshot of LLM Pricing Calculator interface. Left panel: input fields for tokens and costs. Input Tokens: 11018, Output Tokens: empty, Cost per Million Input Tokens: $0.075, Cost per Million Output Tokens: $0.3. Total Cost calculated: $0.000826 or 0.0826 cents. Right panel: Presets for various models including Gemini, Claude, and GPT versions with their respective input/output costs per 1M tokens. Footer: Prices were correct as of 16th October 2024, they may have changed.\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tools.simonwillison.net/llm-prices\"\u003ehttps://tools.simonwillison.net/llm-prices\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"yaml-to-json-converter\"\u003eYAML to JSON converter\u003c/h4\u003e\n\u003cp\u003eI wanted to remind myself how certain aspects of YAML syntax worked, so I span up a quick YAML to JSON converter tool that shows the equivalent JSON live as you type YAML.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/yaml-json.jpg\" alt=\"YAML to JSON converter. In the top textarea is YAML. Below it is pretty-printed JSON output.\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://claude.site/artifacts/ffeb439c-fc95-428a-9224-434f5f968d51\"\u003ehttps://claude.site/artifacts/ffeb439c-fc95-428a-9224-434f5f968d51\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gist.github.com/simonw/d861edb70a3572cb03de6f98a0caf3bc\"\u003eClaude transcript\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"openai-audio\"\u003eOpenAI Audio\u003c/h4\u003e\n\u003cp\u003eThis is my most interesting artifact of the week. I was exploring OpenAI’s new Audio APIs and decided to see if I could get Claude to build we a web page that could request access to my microphone, record a snippet of audio, then base64 encoded that and send it to the OpenAI API.\u003c/p\u003e\n\u003cp\u003eHere are \u003ca href=\"https://simonwillison.net/2024/Oct/18/openai-audio/\"\u003ethe full details on how I built this tool\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/openai-audio-card.jpg\" alt=\"Screenshot of the OpenAI Audio tool. A start recording button is visible, and a 00:00 timer, and a playback audio element. There is a textarea for a prompt and a Submit to API button.\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tools.simonwillison.net/openai-audio\"\u003ehttps://tools.simonwillison.net/openai-audio\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eClaude Artifacts can’t make API requests to external hosts directly, but it can still spin up enough of a working version that it’s easy to take that, move it to different hosting and finish getting it working.\u003c/p\u003e\n\u003cp\u003eI wrote more about this API pattern in \u003ca href=\"https://simonwillison.net/2024/Aug/26/gemini-bounding-box-visualization/\"\u003eBuilding a tool showing how Gemini Pro can return bounding boxes for objects in images\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"qr-code-decoder\"\u003eQR Code Decoder\u003c/h4\u003e\n\u003cp\u003eI was in a meeting earlier this week where one of the participants shared a slide with a QR code (for joining a live survey tool). I didn’t have my phone with me, so I needed a way to turn that QR code into a regular URL.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/qr.gif\" alt=\"QR Code Decoder  Uses jsQR by Cosmo Wolfe  Upload, drag and drop, or paste a QR code image: Select a file or drag and drop here  I drag on a QR code and the box says:  Decoded content: https://simonwillison.net/\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://tools.simonwillison.net/qr\"\u003ehttps://tools.simonwillison.net/qr\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eKnocking up this QR decoder in Claude Artifacts took just a few seconds:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eBuild an artifact (no react) that lets me paste in a QR code and displays the decoded information, with a hyperlink if necessary\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e[ ... ]\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003ehave a file open box that also lets you drag and drop and add a onpaste handler to the page that catches pasted images as well\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://gist.github.com/simonw/c2b0c42cd1541d6ed6bfe5c17d638039\"\u003eFull conversation here\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id=\"image-converter-and-downloader\"\u003eImage Converter and Page Downloader\u003c/h4\u003e\n\u003cp\u003eAnother very quick prototype. On Hacker News someone demonstrated a neat idea for a tool that let you drop photos onto a page and it would bake them into the page as base64 URLs such that you could “save as HTML” and get a self-contained page with a gallery.\u003c/p\u003e\n\u003cp\u003eI \u003ca href=\"https://news.ycombinator.com/item?id=41876750#41880857\"\u003esuggested they could add\u003c/a\u003e a feature that generated a “Download link” with the new page baked in—useful on mobile phones that don’t let you “Save as HTML”—and got Claude to knock up a quick prototype:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/image-converter-and-downloader.jpg\" alt=\"Image converter and page downloader - I\u0026#39;ve selected an image and there is now a Download Page link below that image.\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn this case I shared the code in \u003ca href=\"https://gist.github.com/egeozcan/b27e11a7e776972d18603222fa523ed4\"\u003ea Gist\u003c/a\u003e and then used the new-to-me \u003ccode\u003ehttps://gistpreview.github.io/?GIST_ID_GOES_HERE\u003c/code\u003e trick to render the result:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gistpreview.github.io/?14a2c3ef508839f26377707dbf5dd329\"\u003ehttps://gistpreview.github.io/?14a2c3ef508839f26377707dbf5dd329\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/gistpreview/gistpreview.github.io\"\u003egistpreview\u003c/a\u003e turns out to be a really quick way to turn a LLM-generated demo into a page people can view.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gist.github.com/egeozcan/b27e11a7e776972d18603222fa523ed4\"\u003eCode\u003c/a\u003e, \u003ca href=\"https://gist.github.com/simonw/7026fe5051ba138eb15ef82f4936eaed\"\u003eClaude transcript\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"html-entity-escaper\"\u003eHTML Entity Escaper\u003c/h4\u003e\n\u003cp\u003eAnother example of on-demand software: I needed to escape the HTML entities in a chunk of text on my phone, so I got Claude to build me a tool for that:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/html-entities.jpg\" alt=\"HTML entity escaper. In the input box I have typed in text with some double quotes. The output box has those correctly escaped, and a copy to clipboard button.\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://claude.site/artifacts/46897436-e06e-4ccc-b8f4-3df90c47f9bc\"\u003ehttps://claude.site/artifacts/46897436-e06e-4ccc-b8f4-3df90c47f9bc\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eHere’s the prompt I used:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003eBuild an artifact (no react) where I can paste text into a textarea and it will return that text with all HTML entities - single and double quotes and less than greater than ampersand - correctly escaped. The output should be in a textarea accompanied by a \u0026#34;Copy to clipboard\u0026#34; button which changes text to \u0026#34;Copied!\u0026#34; for 1.5s after you click it. Make it mobile friendly\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://gist.github.com/simonw/77f91b65e29f43083f9510ae0c19a128\"\u003eClaude transcript\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"text-wrap-balance-nav\"\u003etext-wrap-balance-nav\u003c/h4\u003e\n\u003cp\u003eInspired by \u003ca href=\"https://shkspr.mobi/blog/2024/10/you-can-use-text-wrap-balance-on-icons/\"\u003eTerence Eden\u003c/a\u003e I decided to do a quick experiment with the \u003ccode\u003etext-wrap: balance\u003c/code\u003e CSS property. I got Claude to build me an example nav bar with a slider and a checkbox. I \u003ca href=\"https://simonwillison.net/2024/Oct/20/you-can-use-text-wrap-balance-on-icons/\"\u003ewrote about that here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"Animated demo. A navigation menu with 13 items - things like Home and About and Services and a products. These are wrapped on four lines with 4, 4, 4 and then 1 item. Selecting the enable text-wrap: balances checkbox changes that to 3, 4, 3, 3 - a slider also allows the number of visible items to be changed to see the effect that has\" src=\"https://static.simonwillison.net/static/2024/text-wrap-balance.gif\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tools.simonwillison.net/text-wrap-balance-nav\"\u003ehttps://tools.simonwillison.net/text-wrap-balance-nav\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"ares-phonetic-alphabet-converter\"\u003eARES Phonetic Alphabet Converter\u003c/h4\u003e\n\u003cp\u003eI was volunteering as a HAM radio communications operator for \u003ca href=\"https://hmbpumpkinfest.com/featured-exhibits/great-pumpkin-run.html\"\u003ethe Half Moon Bay Pumpkin Run\u003c/a\u003e and got nervous that I’d mess up using the phonetic alphabet—so I had Claude build me this tool:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://static.simonwillison.net/static/2024/claude-artifacts/phonetic-alphabet.jpg\" alt=\"ARES PHonetic Alphabet Converter. I have entered the text Cleo is a lobster. After clicking the Convert button I get the output Charlie Lima Echo Oscar (Space) India Sierra (Space) Alpha (Space) Lima Oscar Sierra Tango Echo Romeo\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://claude.site/artifacts/aaadab20-968a-4291-8ce9-6435f6d53f4c\"\u003ehttps://claude.site/artifacts/aaadab20-968a-4291-8ce9-6435f6d53f4c\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gist.github.com/simonw/6ad4133c93e22df4c0ce731fdd7a2a91\"\u003eClaude transcript here\u003c/a\u003e. Amusingly it built it in Python first, then switched to JavaScript after I reminded it that I wanted “an interactive web app”.\u003c/p\u003e\n\u003ch4 id=\"this-is-so-useful-and-so-much-fun-\"\u003eThis is so useful, and so much fun!\u003c/h4\u003e\n\u003cp\u003eAs you can see, I’m a \u003cem\u003eheavy\u003c/em\u003e user of this feature—I just described 14 projects produced in a single week. I’ve been using artifacts since they were released \u003ca href=\"https://simonwillison.net/2024/Jun/20/claude-35-sonnet/\"\u003eon 20th June\u003c/a\u003e (alongside the excellent Claude 3.5 Sonnet, still my daily-driver LLM) and I’m now at a point where I fire up a new interactive artifact several times a day.\u003c/p\u003e\n\u003cp\u003eI’m using artifacts for idle curiosity, rapid prototyping, library research and to spin up tools that solve immediate problems.\u003c/p\u003e\n\u003cp\u003eMost of these tools took less than five minutes to build. A few of the more involved ones took longer than that, but even the OpenAI Audio one took \u003ca href=\"https://gist.github.com/simonw/0a4b826d6d32e4640d67c6319c7ec5ce\"\u003e11:55am to 12:07pm\u003c/a\u003e for the first version and \u003ca href=\"https://gist.github.com/simonw/a04b844a5e8b01cecd28787ed375e738\"\u003e12:18pm to 12:27pm\u003c/a\u003e for the second iteration—so 21 minutes total.\u003c/p\u003e\n\u003cp\u003eTake a look at my \u003ca href=\"https://simonwillison.net/tags/claude-artifacts/\"\u003eclaude-artifacts\u003c/a\u003e tag for even more examples, including \u003ca href=\"https://simonwillison.net/2024/Oct/6/svg-to-jpg-png/\"\u003eSVG to JPG/PNG\u003c/a\u003e, \u003ca href=\"https://simonwillison.net/2024/Sep/21/markdown-and-math-live-renderer/\"\u003eMarkdown and Math Live Renderer\u003c/a\u003e and \u003ca href=\"https://simonwillison.net/2024/Jul/26/image-resize-and-quality-comparison/\"\u003eImage resize and quality comparison\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI also have a \u003ca href=\"https://simonwillison.net/2024/Oct/21/dashboard-tools/\"\u003edashboard\u003c/a\u003e of every post that links to my \u003ca href=\"https://tools.simonwillison.net/\"\u003etools.simonwillison.net\u003c/a\u003e site, and the underlying \u003ca href=\"https://github.com/simonw/tools\"\u003esimonw/tools\u003c/a\u003e GitHub repo includes more unlisted tools, most of which link to their Claude conversation transcripts in their commit history.\u003c/p\u003e\n\u003cp\u003eI’m beginning to get a little frustrated at their limitations—in particular the way artifacts are unable to make API calls, submit forms or even link out to other pages. I’ll probably end up spinning up my own tiny artifacts alternative based on everything I’ve learned about them so far.\u003c/p\u003e\n\u003cp\u003eIf you’re \u003cem\u003enot\u003c/em\u003e using artifacts, I hope I’ve given you a sense of why they’re one of my current favourite LLM-based tools.\u003c/p\u003e\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
