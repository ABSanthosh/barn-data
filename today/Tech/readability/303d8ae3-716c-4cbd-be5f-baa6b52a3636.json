{
  "id": "303d8ae3-716c-4cbd-be5f-baa6b52a3636",
  "title": "How to gain code execution on hundreds of millions of people and popular apps",
  "link": "https://kibty.town/blog/todesktop/",
  "description": "Comments",
  "author": "",
  "published": "Fri, 28 Feb 2025 21:05:35 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 4127,
  "excerpt": "how to gain code execution on millions of people and hundreds of popular apps",
  "siteName": "",
  "favicon": "",
  "text": "this started when i was looking into cursor, an ai text editor. also, i use lulu by objective-see on my laptop, so when i downloaded the cursor installer, i got this pop-up: now, what the hell is todesktop? i thought i was downloading cursor? well, looking at their website, they seem to be an electron app bundler service alongside providing a SDK for electron apps. so it appears the installer i downloaded is actually managed by todesktop, not cursor. this made me curious and i made an account on todesktop to look into it, and when i clicked the github login button, i saw my calling: firebase basic firebase recon realising the app used firestore (firebase's no-sql database that is often used in frontend), i quickly opened my devtools and began doing basic recon on the firebase. i realised that the site has sourcemaps, which made searching for all of the firestore paths used in the app even easier (its still easy without sourcemaps, usually) then i found an insecure collection, temporaryApplications, which seemed to give me an name list of some applications (edit: todesktop has clarified this collection has no sensitive data and hasnt been updated since 2022), but not much other than that, everything seemed secure on the firebase other then this. i then noticed that most of the deployment and general logic happens in the terminal, with the npm package @todesktop/cli, so i installed that and started looking into it looking into the todesktop cli the cli manages deployments, source code uploads, and much more. the website just seems to be a shell to create applications, view deployments, etc etc i was once again lucky that the cli also had sourcemaps, so i used sourcemapper to extract them into a source tree. looking in there, i found an arbitrary s3 upload vulnerability via a firebase cloud function called getSignedURL, but i didn't really have an s3 key (file path) to upload to that would do something interesting, so i kept looking. hijacking the deployment pipeline via a postinstall script i wanted to get on the machine where the application gets built and the easiest way to do this would be a postinstall script in package.json, so i did that with a simple reverse shell payload this worked. navigating around the container, i figured out where the actual code-building application lives, and found this: oh fuck, this usually means something bad. i found the code for decrypting this file, and this is what i got after decrypting it myself: fuck. this container stores secrets looking around in the container more, i found a hardcoded firebase admin key (which was full-scoped). post-exploitation i quickly realized that with the credentials i have, i could deploy an auto update to any app of my liking, having clients receive it immediately when they restart the app. i then made some code to use my credentials to deploy an update to my app, and it worked. i immediately got a update on my client and got RCE. lets talk about impact with this, i could push auto updates to all applications using todesktop, such as: clickup (https://clickup.com) cursor (https://cursor.com) linear (https://linear.app) notion calendar (https://calendar.notion.so) (please do not harass these companies or make it seem like it's their fault, it's not. it's todesktop's fault if anything) which, if i were to estimate, is probably in the range of hundreds of millions of people in tech environments, other hackers, programmers, executives, etc. making this exploit deadly if used. the fix i immediately used my contacts to get in reach with the owner of todesktop, we were chatting via signal and the fix came almost immediately. they were nice enough to compensate me for my efforts and were very nice in general. the build container now has a privileged sidecar that does all of the signing, uploading and everything else instead of the main container with user code having that logic. security incidents happen all the time, its natural. what matters is the company's response, and todesktop's response has been awesome, they were very nice to work with. check out todesktop's incident report here",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cp\u003ethis started when i was looking into \u003ca href=\"https://cursor.com\"\u003ecursor\u003c/a\u003e, an ai text editor. also, i use \u003ca href=\"https://objective-see.org/products/lulu.html\"\u003elulu by objective-see\u003c/a\u003e on my laptop, so when i downloaded the cursor installer, i got this pop-up:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://kibty.town/files/img/posts/todesktop/lulu-alert.png\" alt=\"A LuLu alert, showing that \u0026#34;Install Cursor\u0026#34; was trying to connect to \u0026#34;download.todesktop.com\u0026#34;\"/\u003e\u003c/p\u003e\n\u003cp\u003enow, what the hell is todesktop? i thought i was downloading cursor? well, looking at their website, they seem to be an electron app bundler service alongside providing a SDK for electron apps. so it appears the installer i downloaded is actually managed by todesktop, not cursor.\u003c/p\u003e\n\u003cp\u003ethis made me curious and i made an account on todesktop to look into it, and when i clicked the github login button, i saw my calling: \u003cstrong\u003efirebase\u003c/strong\u003e\u003c/p\u003e\n\u003ch2\u003ebasic firebase recon\u003c/h2\u003e\n\u003cp\u003erealising the app used firestore (firebase\u0026#39;s no-sql database that is often used in frontend), i quickly opened my devtools and began doing basic recon on the firebase.\u003c/p\u003e\n\u003cp\u003ei realised that the site has sourcemaps, which made searching for all of the firestore paths used in the app even easier (its still easy without sourcemaps, usually)\u003c/p\u003e\n\u003cp\u003ethen i found an insecure collection, \u003ccode\u003etemporaryApplications\u003c/code\u003e, which seemed to give me an name list of some applications (edit: todesktop has clarified this collection has no sensitive data and hasnt been updated since 2022), but not much other than that, everything seemed secure on the firebase other then this.\u003c/p\u003e\n\u003cp\u003ei then noticed that most of the deployment and general logic happens in the terminal, with the npm package \u003ccode\u003e@todesktop/cli\u003c/code\u003e, so i installed that and started looking into it\u003c/p\u003e\n\u003ch2\u003elooking into the todesktop cli\u003c/h2\u003e\n\u003cp\u003ethe cli manages deployments, source code uploads, and much more. the website just seems to be a shell to create applications, view deployments, etc etc\u003c/p\u003e\n\u003cp\u003ei was once again lucky that the cli also had sourcemaps, so i used \u003ca href=\"https://github.com/denandz/sourcemapper\"\u003esourcemapper\u003c/a\u003e to extract them into a source tree.\u003c/p\u003e\n\u003cp\u003elooking in there, i found an arbitrary s3 upload vulnerability via a firebase cloud function called \u003ccode\u003egetSignedURL\u003c/code\u003e, but i didn\u0026#39;t really have an s3 key (file path) to upload to that would do something interesting, so i kept looking.\u003c/p\u003e\n\u003ch2\u003ehijacking the deployment pipeline via a postinstall script\u003c/h2\u003e\n\u003cp\u003ei wanted to get on the machine where the application gets built and the easiest way to do this would be a postinstall script in \u003ccode\u003epackage.json\u003c/code\u003e, so i did that with a simple reverse shell payload\u003c/p\u003e\n\u003cp\u003ethis worked. navigating around the container, i figured out where the actual code-building application lives, and found this:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://kibty.town/files/img/posts/todesktop/config-encrypted.png\" alt=\"A screenshot showing a file called \u0026#34;config.json.encrypted\u0026#34;\"/\u003e\u003c/p\u003e\n\u003cp\u003eoh fuck, this usually means something bad. i found the code for decrypting this file, and this is what i got after decrypting it myself:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://kibty.town/files/img/posts/todesktop/config-json.png\" alt=\"A file called \u0026#34;config.json\u0026#34;, with 2 apple id, remote sign and a hsm\u0026#39;s credentials\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003efuck. this container stores secrets\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003elooking around in the container more, i found a hardcoded firebase admin key (which was full-scoped).\u003c/p\u003e\n\u003ch2\u003epost-exploitation\u003c/h2\u003e\n\u003cp\u003ei quickly realized that with the credentials i have, i could deploy an auto update to any app of my liking, having clients receive it immediately when they restart the app.\u003c/p\u003e\n\u003cp\u003ei then made some code to use my credentials to deploy an update to my app, and it worked. i immediately got a update on my client and got RCE.\u003c/p\u003e\n\u003ch2\u003elets talk about impact\u003c/h2\u003e\n\u003cp\u003ewith this, i could push auto updates to all applications using todesktop, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eclickup (https://clickup.com)\u003c/li\u003e\n\u003cli\u003ecursor (https://cursor.com)\u003c/li\u003e\n\u003cli\u003elinear (https://linear.app)\u003c/li\u003e\n\u003cli\u003enotion calendar (https://calendar.notion.so)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e(\u003cstrong\u003eplease do not harass these companies or make it seem like it\u0026#39;s their fault, it\u0026#39;s not. it\u0026#39;s todesktop\u0026#39;s fault if anything\u003c/strong\u003e)\u003c/p\u003e\n\u003cp\u003ewhich, if i were to estimate, is probably in the range of hundreds of millions of people in \u003cstrong\u003etech environments\u003c/strong\u003e, other hackers, programmers, executives, etc. making this exploit \u003cstrong\u003edeadly\u003c/strong\u003e if used.\u003c/p\u003e\n\u003ch2\u003ethe fix\u003c/h2\u003e\n\u003cp\u003ei immediately used my contacts to get in reach with the owner of todesktop, we were chatting via signal and the fix came almost immediately. they were nice enough to compensate me for my efforts and were very nice in general.\u003c/p\u003e\n\u003cp\u003ethe build container now has a privileged sidecar that does all of the signing, uploading and everything else instead of the main container with user code having that logic.\u003c/p\u003e\n\u003cp\u003esecurity incidents happen all the time, its natural. what matters is the company\u0026#39;s response, and todesktop\u0026#39;s response has been awesome, they were very nice to work with.\u003c/p\u003e\n\u003cp\u003echeck out todesktop\u0026#39;s incident report \u003ca href=\"https://www.todesktop.com/blog/posts/security-incident-at-todesktop\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
