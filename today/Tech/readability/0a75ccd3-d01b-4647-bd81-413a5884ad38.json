{
  "id": "0a75ccd3-d01b-4647-bd81-413a5884ad38",
  "title": "JavaScript Temporal is coming",
  "link": "https://developer.mozilla.org/en-US/blog/javascript-temporal-is-coming/",
  "description": "Comments",
  "author": "",
  "published": "Thu, 30 Jan 2025 11:28:31 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "Brian SmithJanuary 24, 20255 minute read",
  "length": 7770,
  "excerpt": "A new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.",
  "siteName": "MDN Web Docs",
  "favicon": "https://developer.mozilla.org/favicon-48x48.bc390275e955dacb2e65.png",
  "text": "Implementations of the new JavaScript Temporal object are starting to be shipped in experimental releases of browsers. This is big news for web developers because working with dates and times in JavaScript will be hugely simplified and modernized. Applications that rely on scheduling, internationalization, or time-sensitive data will be able to use built-ins for efficient, precise and consistent dates, times, durations, and calendars. We're a long way away from stable, cross-browser support, and there may be changes as implementations develop, but we can already take a look at Temporal as it stands now, why it's exciting, and what problems it solves. To help you get up to speed, there are over 270 pages of Temporal docs on MDN added this week, with detailed explanations and examples.What is JavaScript Temporal?To understand Temporal, we can look at JavaScript's Date object. When JavaScript was created in 1995, the Date object was copied from Java's early, flawed java.util.Date implementation. Java replaced this implementation in 1997, but JavaScript is stuck with the same API for almost 30 years, despite known problems. The major issues with JavaScript's Date object are that it only supports the user's local time and UTC, and there's no time zone support. Additionally, its parsing behavior is very unreliable, and Date itself is mutable, which can introduce hard-to-trace bugs. There are other problems like calculations across Daylight Saving Time (DST) and historical calendar changes, which are notoriously difficult to work with. All of these issues make working with dates and times in JavaScript complex and prone to bugs, which can have serious consequences for some systems. Most developers rely on dedicated libraries like Moment.js and date-fns for better handling of dates and times in their applications. Temporal is designed as a full replacement for the Date object, making date and time management reliable and predictable. Temporal adds support for time zone and calendar representations, many built-in methods for conversions, comparisons and computations, formatting, and more. The API surface has over 200 utility methods, and you can find information about all of them in the Temporal docs on MDN.Core conceptsIn Temporal, the key concepts are that it has instants (unique points in history), wall-clock times (regional time), and durations. The APIs have this overall structure to handle these concepts: Duration: Temporal.Duration the difference between two points in time Points in time: Unique points in time: As a timestamp: Temporal.Instant A date-time with a time zone: Temporal.ZonedDateTime Time-zone-unaware date/time (\"Plain\"): Full date and time: Temporal.PlainDateTime Just the date: Temporal.PlainDate Year and month: Temporal.PlainYearMonth Month and day: Temporal.PlainMonthDay Just the time: Temporal.PlainTime Now: using Temporal.now to get the current time as various class instances, or in a specific format Temporal examplesSome of the most basic usages of Temporal include getting current dates and times as an ISO string, but we can see from the example below, that we can now provide time zones with many methods, which takes care of complex calculations you may be doing yourself: // The current date in the system's time zone const dateTime = Temporal.Now.plainDateTimeISO(); console.log(dateTime); // e.g.: 2025-01-22T11:46:36.144 // The current date in the \"America/New_York\" time zone const dateTimeInNewYork = Temporal.Now.plainDateTimeISO(\"America/New_York\"); console.log(dateTimeInNewYork); // e.g.: 2025-01-22T05:47:02.555 Working with different calendars is also simplified, as it's possible to create dates in calendar systems other than Gregorian, such as Hebrew, Chinese, and Islamic, for example. The code below helps you find out when the next Chinese New Year is (which is quite soon!): // Chinese New Years are on 1/1 in the Chinese calendar const chineseNewYear = Temporal.PlainMonthDay.from({ monthCode: \"M01\", day: 1, calendar: \"chinese\", }); const currentYear = Temporal.Now.plainDateISO().withCalendar(\"chinese\").year; let nextCNY = chineseNewYear.toPlainDate({ year: currentYear }); // If nextCNY is before the current date, move forward by 1 year if (Temporal.PlainDate.compare(nextCNY, Temporal.Now.plainDateISO()) \u003c= 0) { nextCNY = nextCNY.add({ years: 1 }); } console.log( `The next Chinese New Year is on ${nextCNY.withCalendar(\"iso8601\").toLocaleString()}`, ); // The next Chinese New Year is on 1/29/2025 (at the time of writing) Working with Unix timestamps is a very common use case as many systems (APIs, databases) use the format to represent times. The following example shows how to take a Unix Epoch timestamp in milliseconds, create an instant from it, get the current time with Temporal.Now, then calculate how many hours from now until the Unix timestamp: // 1851222399924 is our timestamp const launch = Temporal.Instant.fromEpochMilliseconds(1851222399924); const now = Temporal.Now.instant(); const duration = now.until(launch, { smallestUnit: \"hour\" }); console.log(`It will be ${duration.toLocaleString(\"en-US\")} until the launch`); // \"It will be 31,600 hr until the launch\" \u003c- @js-temporal/polyfill // \"It will be PT31600H until the launch\" \u003c- Firefox Nightly Currently, toLocaleString doesn't output a locale-sensitive string in the Firefox implementation, so durations above (PT31600H) are returned as a non-locale-sensitive duration format. This may change as it's more of a design decision rather than a technical limitation as formatting the duration is possible, so the polyfill and Firefox implementations may eventually converge. There's a lot to highlight, but one pattern that I thought was interesting in the API is the compare() methods, which allow you to sort durations in an elegant and efficient way: const durations = [ Temporal.Duration.from({ hours: 1 }), Temporal.Duration.from({ hours: 2 }), Temporal.Duration.from({ hours: 1, minutes: 30 }), Temporal.Duration.from({ hours: 1, minutes: 45 }), ]; durations.sort(Temporal.Duration.compare); console.log(durations.map((d) =\u003e d.toString())); // [ 'PT1H', 'PT1H30M', 'PT1H45M', 'PT2H' ] Trying Temporal and browser supportSupport is slowly starting to be included in experimental browser releases, and Firefox appears to have the most mature implementation at this point. In Firefox, Temporal is being built into the Nightly version behind the javascript.options.experimental.temporal preference. If you want to see the full compatibility story, you can check the (quite epic) Temporal object Browser Compatibility section. Here are the main browser bugs that track Temporal implementations: Firefox: Build temporal in Nightly by default Safari: [JSC] Implement Temporal Chrome: Implement the Temporal proposal Additionally, you can visit https://tc39.es/proposal-temporal/docs/ which has @js-temporal/polyfill available. That means, you can open the developer tools on the TC39 docs page, and try some of the examples in the console in any browser without changing flags or preferences. With experimental implementations landing, now is a good time to try out Temporal and become familiar with what will be the modern approach to handling dates and times in JavaScript.Acknowledgements Thanks to Eric Meyer for his work on the topic. It's been roughly 4 years since Eric's efforts to document browser compatibility data and scaffold the documentation in his fork of mdn/content. Joshua Chen for picking up the torch from Eric and getting a pull request together for the MDN documentation. Andr√© Bargull for the work on the Firefox Temporal implementation. See alsoPrevious Post Fix your website's Largest Contentful Paint by optimizing image loading",
  "image": "https://developer.mozilla.org/en-US/blog/javascript-temporal-is-coming/featured.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cmain\u003e\u003carticle lang=\"en-US\"\u003e\u003cfigure\u003e\u003cimg alt=\"JavaScript Temporal is coming title. A JavaScript logo, a clock graphic and a globe with orbiting bodies symbolizing calendars and time.\" src=\"https://developer.mozilla.org/en-US/blog/javascript-temporal-is-coming/featured.png\" height=\"420\" width=\"800\"/\u003e\u003c/figure\u003e\u003cdiv\u003e\u003cp\u003eImplementations of the new JavaScript Temporal object are starting to be shipped in experimental releases of browsers.\nThis is big news for web developers because working with dates and times in JavaScript will be hugely simplified and modernized.\u003c/p\u003e\n\u003cp\u003eApplications that rely on scheduling, internationalization, or time-sensitive data will be able to use built-ins for efficient, precise and consistent dates, times, durations, and calendars.\nWe\u0026#39;re a long way away from stable, cross-browser support, and there may be changes as implementations develop, but we can already take a look at Temporal as it stands now, why it\u0026#39;s exciting, and what problems it solves.\u003c/p\u003e\n\u003cp\u003eTo help you get up to speed, there are over \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal\"\u003e270 pages of Temporal docs on MDN\u003c/a\u003e added this week, with detailed explanations and examples.\u003c/p\u003e\u003c/div\u003e\u003csection aria-labelledby=\"what_is_javascript_temporal\"\u003e\u003ch2 id=\"what_is_javascript_temporal\"\u003e\u003ca href=\"#what_is_javascript_temporal\"\u003eWhat is JavaScript Temporal?\u003c/a\u003e\u003c/h2\u003e\u003cdiv\u003e\u003cp\u003eTo understand Temporal, we can look at JavaScript\u0026#39;s \u003ccode\u003eDate\u003c/code\u003e object.\nWhen JavaScript was created in 1995, the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e object was copied from Java\u0026#39;s early, flawed \u003ccode\u003ejava.util.Date\u003c/code\u003e implementation.\nJava replaced this implementation in 1997, but JavaScript is stuck with the same API for almost 30 years, despite known problems.\u003c/p\u003e\n\u003cp\u003eThe major issues with JavaScript\u0026#39;s \u003ccode\u003eDate\u003c/code\u003e object are that it only supports the user\u0026#39;s local time and UTC, and there\u0026#39;s no time zone support.\nAdditionally, its parsing behavior is very unreliable, and \u003ccode\u003eDate\u003c/code\u003e itself is mutable, which can introduce hard-to-trace bugs.\nThere are other problems like calculations across Daylight Saving Time (DST) and historical calendar changes, which are notoriously difficult to work with.\u003c/p\u003e\n\u003cp\u003eAll of these issues make working with dates and times in JavaScript complex and prone to bugs, which can have serious consequences for some systems.\nMost developers rely on dedicated libraries like \u003ca href=\"https://momentjs.com/\" target=\"_blank\"\u003eMoment.js\u003c/a\u003e and \u003ca href=\"https://date-fns.org/\" target=\"_blank\"\u003edate-fns\u003c/a\u003e for better handling of dates and times in their applications.\u003c/p\u003e\n\u003cp\u003eTemporal is designed as a full replacement for the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e object, making date and time management reliable and predictable.\nTemporal adds support for time zone and calendar representations, many built-in methods for conversions, comparisons and computations, formatting, and more.\nThe API surface has over 200 utility methods, and you can find information about all of them in the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal\"\u003eTemporal docs on MDN\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/section\u003e\u003csection aria-labelledby=\"core_concepts\"\u003e\u003ch2 id=\"core_concepts\"\u003e\u003ca href=\"#core_concepts\"\u003eCore concepts\u003c/a\u003e\u003c/h2\u003e\u003cdiv\u003e\u003cp\u003eIn Temporal, the key concepts are that it has instants (unique points in history), wall-clock times (regional time), and durations.\nThe APIs have this overall structure to handle these concepts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDuration\u003c/strong\u003e: \u003ccode\u003eTemporal.Duration\u003c/code\u003e the difference between two points in time\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePoints in time\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eUnique points in time\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eAs a timestamp: \u003ccode\u003eTemporal.Instant\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eA date-time with a time zone: \u003ccode\u003eTemporal.ZonedDateTime\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTime-zone-unaware date/time (\u0026#34;Plain\u0026#34;)\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eFull date and time: \u003ccode\u003eTemporal.PlainDateTime\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eJust the date: \u003ccode\u003eTemporal.PlainDate\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003eYear and month: \u003ccode\u003eTemporal.PlainYearMonth\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eMonth and day: \u003ccode\u003eTemporal.PlainMonthDay\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eJust the time: \u003ccode\u003eTemporal.PlainTime\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNow:\u003c/strong\u003e using \u003ccode\u003eTemporal.now\u003c/code\u003e to get the current time as various class instances, or in a specific format\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003c/section\u003e\u003csection aria-labelledby=\"temporal_examples\"\u003e\u003ch2 id=\"temporal_examples\"\u003e\u003ca href=\"#temporal_examples\"\u003eTemporal examples\u003c/a\u003e\u003c/h2\u003e\u003cdiv\u003e\u003cp\u003eSome of the most basic usages of Temporal include getting current dates and times as an ISO string, but we can see from the example below, that we can now provide time zones with many methods, which takes care of complex calculations you may be doing yourself:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e// The current date in the system\u0026#39;s time zone\nconst dateTime = Temporal.Now.plainDateTimeISO();\nconsole.log(dateTime); // e.g.: 2025-01-22T11:46:36.144\n\n// The current date in the \u0026#34;America/New_York\u0026#34; time zone\nconst dateTimeInNewYork = Temporal.Now.plainDateTimeISO(\u0026#34;America/New_York\u0026#34;);\nconsole.log(dateTimeInNewYork);\n// e.g.: 2025-01-22T05:47:02.555\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWorking with different calendars is also simplified, as it\u0026#39;s possible to create dates in calendar systems other than Gregorian, such as Hebrew, Chinese, and Islamic, for example.\nThe code below helps you find out when the next Chinese New Year is (which is quite soon!):\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e// Chinese New Years are on 1/1 in the Chinese calendar\nconst chineseNewYear = Temporal.PlainMonthDay.from({\n  monthCode: \u0026#34;M01\u0026#34;,\n  day: 1,\n  calendar: \u0026#34;chinese\u0026#34;,\n});\nconst currentYear = Temporal.Now.plainDateISO().withCalendar(\u0026#34;chinese\u0026#34;).year;\nlet nextCNY = chineseNewYear.toPlainDate({ year: currentYear });\n// If nextCNY is before the current date, move forward by 1 year\nif (Temporal.PlainDate.compare(nextCNY, Temporal.Now.plainDateISO()) \u0026lt;= 0) {\n  nextCNY = nextCNY.add({ years: 1 });\n}\nconsole.log(\n  `The next Chinese New Year is on ${nextCNY.withCalendar(\u0026#34;iso8601\u0026#34;).toLocaleString()}`,\n);\n// The next Chinese New Year is on 1/29/2025 (at the time of writing)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eWorking with Unix timestamps is a very common use case as many systems (APIs, databases) use the format to represent times.\nThe following example shows how to take a Unix Epoch timestamp in milliseconds, create an instant from it, get the current time with \u003ccode\u003eTemporal.Now\u003c/code\u003e, then calculate how many hours from now until the Unix timestamp:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e// 1851222399924 is our timestamp\nconst launch = Temporal.Instant.fromEpochMilliseconds(1851222399924);\nconst now = Temporal.Now.instant();\nconst duration = now.until(launch, { smallestUnit: \u0026#34;hour\u0026#34; });\nconsole.log(`It will be ${duration.toLocaleString(\u0026#34;en-US\u0026#34;)} until the launch`);\n// \u0026#34;It will be 31,600 hr until the launch\u0026#34; \u0026lt;- @js-temporal/polyfill\n// \u0026#34;It will be PT31600H until the launch\u0026#34; \u0026lt;- Firefox Nightly\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eCurrently, \u003ccode\u003etoLocaleString\u003c/code\u003e \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1839694\" target=\"_blank\"\u003edoesn\u0026#39;t output a locale-sensitive string\u003c/a\u003e in the Firefox implementation, so durations above (\u003ccode\u003ePT31600H\u003c/code\u003e) are returned as a non-locale-sensitive \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Duration#iso_8601_duration_format\"\u003eduration format\u003c/a\u003e.\nThis may change as it\u0026#39;s more of a design decision rather than a technical limitation as \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/PlainDate/since#using_since\"\u003eformatting the duration\u003c/a\u003e is possible, so the polyfill and Firefox implementations may eventually converge.\u003c/p\u003e\n\u003cp\u003eThere\u0026#39;s a lot to highlight, but one pattern that I thought was interesting in the API is the \u003ccode\u003ecompare()\u003c/code\u003e methods, which allow you to \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal/Duration/compare#sorting_an_array_of_durations\"\u003esort durations\u003c/a\u003e in an elegant and efficient way:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003econst durations = [\n  Temporal.Duration.from({ hours: 1 }),\n  Temporal.Duration.from({ hours: 2 }),\n  Temporal.Duration.from({ hours: 1, minutes: 30 }),\n  Temporal.Duration.from({ hours: 1, minutes: 45 }),\n];\n\ndurations.sort(Temporal.Duration.compare);\nconsole.log(durations.map((d) =\u0026gt; d.toString()));\n// [ \u0026#39;PT1H\u0026#39;, \u0026#39;PT1H30M\u0026#39;, \u0026#39;PT1H45M\u0026#39;, \u0026#39;PT2H\u0026#39; ]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e\u003c/section\u003e\u003csection aria-labelledby=\"trying_temporal_and_browser_support\"\u003e\u003ch2 id=\"trying_temporal_and_browser_support\"\u003e\u003ca href=\"#trying_temporal_and_browser_support\"\u003eTrying Temporal and browser support\u003c/a\u003e\u003c/h2\u003e\u003cdiv\u003e\u003cp\u003eSupport is slowly starting to be included in experimental browser releases, and Firefox appears to have the most mature implementation at this point.\nIn Firefox, Temporal is being built into the \u003ca href=\"https://www.mozilla.org/en-US/firefox/channel/desktop/\" target=\"_blank\"\u003eNightly version\u003c/a\u003e behind the \u003ccode\u003ejavascript.options.experimental.temporal\u003c/code\u003e preference.\nIf you want to see the full compatibility story, you can check the (quite epic) \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal#browser_compatibility\"\u003eTemporal object Browser Compatibility section\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHere are the main browser bugs that track Temporal implementations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFirefox:\u003c/strong\u003e \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1912757\" target=\"_blank\"\u003eBuild temporal in Nightly by default\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSafari:\u003c/strong\u003e \u003ca href=\"https://bugs.webkit.org/show_bug.cgi?id=223166\" target=\"_blank\"\u003e[JSC] Implement Temporal\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eChrome:\u003c/strong\u003e \u003ca href=\"https://issues.chromium.org/issues/42201538\" target=\"_blank\"\u003eImplement the Temporal proposal\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditionally, you can visit \u003ca href=\"https://tc39.es/proposal-temporal/docs/\" target=\"_blank\"\u003ehttps://tc39.es/proposal-temporal/docs/\u003c/a\u003e which has \u003ccode\u003e@js-temporal/polyfill\u003c/code\u003e available.\nThat means, you can open the developer tools on the TC39 docs page, and try some of the examples in the console in any browser without changing flags or preferences.\u003c/p\u003e\n\u003cp\u003eWith experimental implementations landing, now is a good time to try out Temporal and become familiar with what will be the modern approach to handling dates and times in JavaScript.\u003c/p\u003e\u003c/div\u003e\u003c/section\u003e\u003csection aria-labelledby=\"acknowledgements\"\u003e\u003ch2 id=\"acknowledgements\"\u003e\u003ca href=\"#acknowledgements\"\u003eAcknowledgements\u003c/a\u003e\u003c/h2\u003e\u003cdiv\u003e\u003cul\u003e\n\u003cli\u003eThanks to \u003ca href=\"https://meyerweb.com/\" target=\"_blank\"\u003eEric Meyer\u003c/a\u003e for his work on the topic.\nIt\u0026#39;s been roughly 4 years since Eric\u0026#39;s efforts to document \u003ca href=\"https://github.com/mdn/browser-compat-data/pull/10643\" target=\"_blank\"\u003ebrowser compatibility data\u003c/a\u003e and scaffold the documentation \u003ca href=\"https://github.com/meyerweb/content/tree/temporal/\" target=\"_blank\"\u003ein his fork of mdn/content\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/community/spotlight/joshua-chen\"\u003eJoshua Chen\u003c/a\u003e for picking up the torch from Eric and getting a pull request together for \u003ca href=\"https://github.com/mdn/content/pull/37344\" target=\"_blank\"\u003ethe MDN documentation\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://bugzilla.mozilla.org/user_profile?user_id=339940\" target=\"_blank\"\u003eAndr√© Bargull\u003c/a\u003e for the work on the Firefox Temporal implementation.\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\u003c/section\u003e\u003csection aria-labelledby=\"see_also\"\u003e\u003ch2 id=\"see_also\"\u003e\u003ca href=\"#see_also\"\u003eSee also\u003c/a\u003e\u003c/h2\u003e\u003c/section\u003e\u003csection\u003e\u003ca href=\"https://developer.mozilla.org/en-US/blog/fix-image-lcp/\"\u003e\u003carticle\u003e\u003ch2\u003e\u003cstrong\u003ePrevious Post\u003c/strong\u003e Fix your website\u0026#39;s Largest Contentful Paint by optimizing image loading\u003c/h2\u003e\u003c/article\u003e\u003c/a\u003e\u003c/section\u003e\u003c/article\u003e\u003c/main\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
