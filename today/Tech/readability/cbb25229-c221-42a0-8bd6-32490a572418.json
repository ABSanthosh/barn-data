{
  "id": "cbb25229-c221-42a0-8bd6-32490a572418",
  "title": "This website is hosted on Bluesky",
  "link": "https://danielmangum.com/posts/this-website-is-hosted-on-bluesky/",
  "description": "Comments",
  "author": "",
  "published": "Sun, 24 Nov 2024 20:43:33 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "Daniel Mangum",
  "length": 21550,
  "excerpt": "Well, not this one. But this one is! How? Let’s take a closer look at Bluesky and the AT Protocol that underpins it. Note: I communicated with the Bluesky team prior to the publishing of this post. While the functionality described is not the intended use of the application, it is known behavior and does not constitue a vulnerability disclosure process. My main motivation for reaching out to them was because I like the folks and don’t want to make their lives harder.",
  "siteName": "",
  "favicon": "https://danielmangum.com/images/apple-touch-icon.png",
  "text": "Well, not this one. But this one is! How? Let’s take a closer look at Bluesky and the AT Protocol that underpins it. Note: I communicated with the Bluesky team prior to the publishing of this post. While the functionality described is not the intended use of the application, it is known behavior and does not constitue a vulnerability disclosure process. My main motivation for reaching out to them was because I like the folks and don’t want to make their lives harder. Being able to host a website on Bluesky really has very little to do with Bluesky itself. I happen to use Bluesky for hosting my Personal Data Server (PDS), but all of the APIs leveraged in uploading the site contents are defined at the AT Protocol level and implemented by a PDS. Bluesky offers access to my PDS via their PDS entryway, which allows for the many (have you heard that they are growing by a million users per day?) PDS instances they run to be exposed via the bsky.social domain. That being said, individual PDS instances can be accessed directly, and if you clicked the link at the top of this post to access the Bluesky hosted website, then you have already visited mine at porcini.us-east.host.bsky.network. Most social applications, and many applications in general for that matter, broadly have two primary types of content: records and blobs. Records are the core entity types that users create. They generally have some defined structure and metadata, and they may reference other records or content. Blobs are typically larger unstructured data, such as media assets, that may be uploaded by a user, but are exposed via a record referencing them. For example, on Bluesky a user may upload an image, then create a post that references it. From an end-user perspective, these two operations appear to be one action, but they are typically decoupled at the API level. This decoupling is described in detail in the AT Protocol blob specification. Blob files are uploaded and distributed separately from records. Blobs are authoritatively stored by the account’s PDS instance, but views are commonly served by CDNs associated with individual applications (“AppViews”), to reduce traffic on the PDS. CDNs may serve transformed (resized, transcoded, etc) versions of the original blob. Later on, the specification details how blob lifecylce is to be managed. Blobs must be uploaded to the PDS before a record can be created referencing that blob. Note that the server does not know the intended Lexicon when receiving an upload, so can only apply generic blob limits and restrictions at initial upload time, and then enforce Lexicon-defined limits later when the record is created. Reading this section is what initially got my wheels turning. While Bluesky has a limited set of media asset types that can be referenced by posts, posts are just one record type that is defined by the Bluesky lexicon (app.bsky.*). Records, on the other hand, are defined in the AT Protocol lexicon (com.atproto.*) and are designed to accommodate creating any type of record defined by any lexicon. Because different types of blobs may be relevant for other lexicons, the specification highlights that restrictions cannot be enforced at time of upload. Instead blobs are not made available until they are referenced, at which point the validation can be performed based on the lexicon of the record type. After a successful upload, blobs are placed in temporary storage. They are not accessible for download or distribution while in this state. Servers should “garbage collect” (delete) un-referenced temporary blobs after an appropriate time span (see implementation guidelines below). Blobs which are in temporary storage should not be included in the listBlobs output. The upload blob can now be referenced from records by including the returned blob metadata in a record. When processing record creation, the server extracts the set of all referenced blobs, and checks that they are either already referenced, or are in temporary storage. Once the record creation succeeds, the server makes the blob publicly accessible. However, applying validation does not mean that Bluesky’s restrictions will necessarily be applied. A record that references a blob could very well be of a type defined by a different lexicon, or, as we’ll see later on, part of a sub-schema enabled by an open union in the Bluesky lexicon. Let’s see how this works in practice. In order to perform data creation operations against a PDS, an access token must be acquired for authentication. The com.atproto.server.createSession XRPC method can be used to exchange user credentials for a token. In the following curl command, I used danielmangum.com as $BSKY_HANDLE and my password as $BSKY_PWD. curl -X POST 'https://bsky.social/xrpc/com.atproto.server.createSession' \\ -H 'Content-Type: application/json' \\ -d '{\"identifier\": \"'\"$BSKY_HANDLE\"'\", \"password\": \"'\"$BSKY_PWD\"'\"}' The response includes an accessJWT field, which will be used as $ACCESS_JWT in subsequent operations. As described in the blob specification, a blob must be uploaded prior to it being referenced. I wanted to verify that the blob was not present in the com.atproto.sync.listBlobs output, or accessible via the com.atproto.sync.getBlob methods immediately after upload, so I checked how many blobs were currently being returned. curl -s 'https://bsky.social/xrpc/com.atproto.sync.listBlobs?did='\"$DID\"'' \\ -H 'Authorization: Bearer '\"$ACCESS_JWT\"'' | jq -r '.cids | length' The decentralized identifier ($DID) used above can be obtained from the createSession output as well. It is the underlying identifier for an account. Every Bluesky handle resolves to a DID. The com.atproto.repo.uploadBlob method is used to upload a blob to a repository. The content of the website is a simple index.html file. \u003ch1\u003eThis Website is Hosted on Bluesky\u003c/h1\u003e \u003cp\u003e This website is just a blob uploaded to Bluesky via the API. Curious about how this works? Check out the write-up on \u003ca href=\"https://danielmangum.com/posts/this-website-is-hosted-on-bluesky/\"\u003edanielmangum.com\u003c/a\u003e. \u003c/p\u003e To upload it, I used the following command. curl -X POST 'https://bsky.social/xrpc/com.atproto.repo.uploadBlob' \\ -H 'Authorization: Bearer '\"$ACCESS_JWT\"'' \\ -H 'Content-Type: text/html' \\ --data-binary '@index.html' { \"blob\": { \"$type\": \"blob\", \"ref\": { \"$link\": \"bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\" }, \"mimeType\": \"text/html\", \"size\": 268 } } The returned $link can be used as the Content Identifier (cid) when fetching the blob via the getBlob method. However, according to the specification, because this blob has to be referenced, it shouldn’t be visible. I checked to see if I could access it with the following command. curl -L 'https://bsky.social/xrpc/com.atproto.sync.getBlob?did='\"$DID\"'\u0026cid='\"$LINK\"'' { \"error\": \"InternalServerError\", \"message\": \"Internal Server Error\" } Not the error I was expecting, but it looks like I indeed cannot access it. I was also able to determine that it had not beed added to the listBlobs output. curl -s 'https://bsky.social/xrpc/com.atproto.sync.listBlobs?did='\"$DID\"'' \\ -H 'Authorization: Bearer '\"$ACCESS_JWT\"'' | jq -r '.cids | length' Blobs can be referenced in app.bsky.feed.post records on Bluesky by including an embedded image. However, the app.bsky.embed.image schema retricts the MIME type to those prefixed with image/*. We can see this validation in action if we try to create a post with an embedded image. curl -X POST 'https://bsky.social/xrpc/com.atproto.repo.createRecord' \\ -H 'Authorization: Bearer '\"$ACCESS_JWT\"'' \\ -H 'Content-Type: application/json' \\ -d '{ \"repo\": \"danielmangum.com\", \"collection\": \"app.bsky.feed.post\", \"record\": { \"$type\": \"app.bsky.feed.post\", \"text\": \"testing123\", \"createdAt\": \"2024-11-23T05:49:35.422015Z\", \"embed\": { \"$type\": \"app.bsky.embed.images\", \"images\": [ { \"alt\": \"that is not an image that is a website!\", \"image\": { \"$type\": \"blob\", \"ref\": { \"$link\": \"bafkreidphtuvbzublyzacxukmmk2ikiur5ahme75fegokbhh26o4wfzvry\" }, \"mimeType\": \"text/html\", \"size\": 21 } } ] } } }' { \"error\": \"InvalidMimeType\", \"message\": \"Wrong type of file. It is text/html but it must match image/*.\" } For completeness, I also tried specifying the mimeType as image/jpeg and verified that the PDS also validates that the blob reference MIME type matches the blob. { \"error\": \"InvalidMimeType\", \"message\": \"Referenced Mimetype does not match stored blob. Expected: text/html, Got: image/jpeg\" } However, the blob $type is part of the AT Protocol data model and not specific to Bluesky. Because Bluesky’s PDS implementation is open source, we can see exactly how a BlobRef is defined. export class BlobRef { public original: JsonBlobRef constructor( public ref: CID, public mimeType: string, public size: number, original?: JsonBlobRef, ) { this.original = original ?? { $type: 'blob', ref, mimeType, size, } } We can also see exactly how the PDS identifies blobs in a record. export const findBlobRefs = ( val: LexValue, path: string[] = [], layer = 0, ): FoundBlobRef[] =\u003e { if (layer \u003e 32) { return [] } // walk arrays if (Array.isArray(val)) { return val.flatMap((item) =\u003e findBlobRefs(item, path, layer + 1)) } // objects if (val \u0026\u0026 typeof val === 'object') { // convert blobs, leaving the original encoding so that we don't change CIDs on re-encode if (val instanceof BlobRef) { return [ { ref: val, path, }, ] } // retain cids \u0026 bytes if (CID.asCID(val) || val instanceof Uint8Array) { return [] } return Object.entries(val).flatMap(([key, item]) =\u003e findBlobRefs(item, [...path, key], layer + 1), ) } // pass through return [] } The important thing to notice is that identifying blob references does require the presence of a lexicon schema. findBlobRefs recursively navigates a LexValue and looks for $type: blob. In order to support new lexicons over time, the PDS needs to be able to handle lexicons that it doesn’t know about. Because blobs are a fundamental component of so many applications, these new lexicons also need to be able to leverage them. To put this into action, I attempted to create a record of type com.danielmangum.hack.website, which included a reference to the uploaded HTML blob. curl -X POST 'https://bsky.social/xrpc/com.atproto.repo.createRecord' \\ -H 'Authorization: Bearer '\"$ACCESS_JWT\"'' \\ -H 'Content-Type: application/json' \\ -d '{ \"repo\": \"danielmangum.com\", \"collection\": \"com.danielmangum.hack.website\", \"record\": { \"$type\": \"com.danielmangum.hack.website\", \"website\": { \"$type\": \"blob\", \"ref\": { \"$link\": \"bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\" }, \"mimeType\": \"text/html\", \"size\": 268 } } }' { \"uri\": \"at://did:plc:j22nebhg6aek3kt2mex5ng7e/com.danielmangum.hack.website/3lbnguuzckm2u\", \"cid\": \"bafyreicjcptshc7lmgb7abxlvcb5fmqqjdj6neie23szyum7rcaowmm5qm\", \"commit\": { \"cid\": \"bafyreid6apjjy56xoyenxmg5xv356twh22n3hayecoxlf6mflpltlzpuwu\", \"rev\": \"3lbnguuzmd42u\" }, \"validationStatus\": \"unknown\" } It worked! We can see in the response that the PDS was unable to validate the record (validationStatus: unknown) because it does not know about the com.danielmangum.hack.* lexicon. Nevertheless, it will agree to persist the record. The next step was to check whether the referenced blob had been persisted. curl -s 'https://bsky.social/xrpc/com.atproto.sync.listBlobs?did='\"$DID\"'' \\ -H 'Authorization: Bearer '\"$ACCESS_JWT\"'' | jq -r '.cids | length' It looked like it had as the count had increased by 1. Fetching the blob directly would tell us for sure. Importantly, getBlob does not require passing the $ACCESS_JWT because unauthenticated parties need to be able to fetch blobs to process alongside records that reference them. curl 'https://bsky.social/xrpc/com.atproto.sync.getBlob?did='\"$DID\"'\u0026cid=bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq' { \"error\": \"Redirecting\", \"message\": \"Redirecting to new blob location\" } Adding -L to the command enables following redirects. curl -L 'https://bsky.social/xrpc/com.atproto.sync.getBlob?did='\"$DID\"'\u0026cid=bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq' \u003ch1\u003eThis Website is Hosted on Bluesky\u003c/h1\u003e \u003cp\u003e This website is just a blob uploaded to Bluesky via the API. Curious about how this works? Check out the write-up on \u003ca href=\"https://danielmangum.com/posts/this-website-is-hosted-on-bluesky/\"\u003edanielmangum.com\u003c/a\u003e. \u003c/p\u003e Examining the redirect response, we can see that we are being directed directly to my PDS. \u003c HTTP/2 302 \u003c date: Sun, 24 Nov 2024 13:58:21 GMT \u003c content-type: application/json; charset=utf-8 \u003c content-length: 68 \u003c location: https://porcini.us-east.host.bsky.network/xrpc/com.atproto.sync.getBlob?did=did:plc:j22nebhg6aek3kt2mex5ng7e\u0026cid=bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq \u003c x-powered-by: Express \u003c access-control-allow-origin: * \u003c ratelimit-limit: 3000 \u003c ratelimit-remaining: 2997 \u003c ratelimit-reset: 1732456898 \u003c ratelimit-policy: 3000;w=300 \u003c etag: W/\"44-1je7JKzDJZFd5iRtOI+IS+zlOOE\" \u003c vary: Accept-Encoding Opening the location URL in the browser presents the website as expected, And just like that, we have a website hosted on Bluesky! While this is not really the intended use of blobs on Bluesky specifically, it could be a legitimate use case in the future. Records that reference website content, code, or other binary artifacts are a possibility on the AT Protocol. That being said, if a service like Bluesky is running PDS instances on behalf of users, this effectively equates to free (albiet unreliable) arbiratry file hosting, which has implications beyond just racking up large storage and egress data fees. Returning back to the blobs specification, there is an additional section on Security Considerations. Serving arbitrary user-uploaded files from a web server raises many content security issues. For example, cross-site scripting (XSS) of scripts or SVG content form the same “origin” as other web pages. It is effectively mandatory to enable a Content Security Policy (LINK: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) for the getBlob endpoint. It is effectively not supported to dynamically serve assets directly out of blob storage (the getBlob endpoint) directly to browsers and web applications. Applications must proxy blobs, files, and assets through an independent CDN, proxy, or other web service before serving to browsers and web agents, and such services are expected to implement security precautions. Bluesky does apply recommended CSP headers to the endpoint in the handler, which guards against some of the issues described. res.setHeader('x-content-type-options', 'nosniff') res.setHeader('content-security-policy', `default-src 'none'; sandbox`) There is also a default size limit on blob of 5 MB. blobUploadLimit: env.blobUploadLimit ?? 5 * 1024 * 1024, // 5mb Images, the most common blob type on the Bluesky application, are expectedly not served directly from PDS instances, but from the Bluesky CDN. For example, the following URL points to the feed thumbnail version of an image I recently uploaded as part of a post. https://cdn.bsky.app/img/feed_thumbnail/plain/did:plc:j22nebhg6aek3kt2mex5ng7e/bafkreie5ci75iujpv34slnh3o4b7xcuxklpcguzed6qqmi4eaagn6cg4ve@jpeg A different URL provides the full size version. https://cdn.bsky.app/img/feed_fullsize/plain/did:plc:j22nebhg6aek3kt2mex5ng7e/bafkreie5ci75iujpv34slnh3o4b7xcuxklpcguzed6qqmi4eaagn6cg4ve@jpeg However, the post that references the image just includes the cid. The application itself needs to be aware of how images are served from the CDN. { \"$type\": \"app.bsky.feed.post\", \"createdAt\": \"2024-11-12T14:18:44.263Z\", \"embed\": { \"$type\": \"app.bsky.embed.images\", \"images\": [ { \"alt\": \"Title image for blog post \\\"USB On-The-Go on the ESP32-S3\\\" on danielmangum.com.\", \"aspectRatio\": { \"height\": 1080, \"width\": 1920 }, \"image\": { \"$type\": \"blob\", \"ref\": { \"$link\": \"bafkreie5ci75iujpv34slnh3o4b7xcuxklpcguzed6qqmi4eaagn6cg4ve\" }, \"mimeType\": \"image/jpeg\", \"size\": 869901 } } ] }, \"facets\": [ { \"features\": [ { \"$type\": \"app.bsky.richtext.facet#link\", \"uri\": \"https://danielmangum.com/posts/usb-otg-esp32s3/\" } ], \"index\": { \"byteEnd\": 261, \"byteStart\": 229 } } ], \"langs\": [ \"en\" ], \"text\": \"ICYMI: This weekend I wrote about USB On-The-Go on the ESP32-S3. OTG allows devices to also act as USB hosts. I dive into how the USB PHY is configured, and demonstrate connecting two ESP32-S3's, as well as a Raspberry Pi Pico.\\n\\ndanielmangum.com/posts/usb-ot...\" } The logic is present in the ImageUriBuilder, which will use a CDN if one is configured. const imgUriBuilder = new ImageUriBuilder( config.cdnUrl || `${config.publicUrl}/img`, ) So why does Bluesky provide direct unauthenticated access to the PDS getBlobs endpoint? Once again illustrating the beauty of open source, there is an issue describing the original motivation. In it, image labeling and user content export, as well as additional future use cases, are enumerated. There is also a mention of the possibility of users hotlinking content and Bluesky for free hosting, so these issues are clearly top-of-mind. The original implementation did not include the proper security headers, but they were subsequently added. Traditional social platforms can place more restrictions on blobs at time of upload because there is a limited set of valid content. The extensibility of Bluesky and the AT Protocol, which is what differentiates it from traditional networks, also necessitates more complexity. However, I, and clearly the awesome folks building Bluesky, think it’s clearly worth it. Bonus Content Link to heading I mentioned sub-schemas and open unions earlier in this post. The app.bsky.feed.post type includes a union for valid embeds. Per the AT Protocol lexicon specification, unions are open unless explicitly marked as closed. By default unions are “open”, meaning that future revisions of the schema could add more types to the list of refs (though can not remove types). This means that implementations should be permissive when validating, in case they do not have the most recent version of the Lexicon. The closed flag (boolean) can indicate that the set of types is fixed and can not be extended in the future. The embed union is not marked as closed. \"embed\": { \"type\": \"union\", \"refs\": [ \"app.bsky.embed.images\", \"app.bsky.embed.video\", \"app.bsky.embed.external\", \"app.bsky.embed.record\", \"app.bsky.embed.recordWithMedia\" ] }, Therefore, posts can be created with an embed $type that is not enumerated. For example, I could also persist the website HTML via making a post on Bluesky with a custom embed. curl -X POST 'https://bsky.social/xrpc/com.atproto.repo.createRecord' \\ -H 'Authorization: Bearer '\"$ACCESS_JWT\"'' \\ -H 'Content-Type: application/json' \\ -d '{ \"repo\": \"danielmangum.com\", \"collection\": \"app.bsky.feed.post\", \"record\": { \"$type\": \"app.bsky.feed.post\", \"text\": \"This post embeds a website.\", \"createdAt\": \"2024-11-23T05:49:35.422015Z\", \"embed\": { \"$type\": \"com.danielmangum.hack.sites\", \"sites\": [ { \"site\": { \"$type\": \"blob\", \"ref\": { \"$link\": \"bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\" }, \"mimeType\": \"text/html\", \"size\": 268 } } ] } } }' { \"uri\": \"at://did:plc:j22nebhg6aek3kt2mex5ng7e/app.bsky.feed.post/3lbpfxwnjoq23\", \"cid\": \"bafyreidnlyhcvlzl5hc3btih6ly5anjld6ss4bgocyichnm72cpnjuzsvu\", \"commit\": { \"cid\": \"bafyreibv77m3bdyywmotn7ncbbrqv6pv7irzmw27bzklt4tppgsoodarma\", \"rev\": \"3lbpfxwo57q23\" }, \"validationStatus\": \"valid\" } In the Bluesky application, the embed is silently ignored. However, the content is persisted and the reference is included in the post record, so a different application could choose to start rendering the embed. { \"$type\": \"app.bsky.feed.post\", \"createdAt\": \"2024-11-23T05:49:35.422015Z\", \"embed\": { \"$type\": \"com.danielmangum.hack.sites\", \"sites\": [ { \"site\": { \"$type\": \"blob\", \"ref\": { \"$link\": \"bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\" }, \"mimeType\": \"text/html\", \"size\": 268 } } ] }, \"text\": \"This post embeds a website.\" } In my opinion, this is one of the most interesting features of lexicons because it allows for “micro-extensions” that build on existing use cases (e.g. “microblogging”). For example, I for one would love a world in which small code snippets could be embedded in my posts and run in a WebAssembly sandbox by other users. But that’s a post for another day.",
  "image": "https://danielmangum.com/images/twitter-card.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n        \n        \u003cp\u003eWell, not this one. But \u003ca href=\"https://porcini.us-east.host.bsky.network/xrpc/com.atproto.sync.getBlob?did=did:plc:j22nebhg6aek3kt2mex5ng7e\u0026amp;cid=bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\"\u003ethis\none\u003c/a\u003e\nis! How? Let’s take a closer look at \u003ca href=\"https://bsky.app\"\u003eBluesky\u003c/a\u003e and the \u003ca href=\"https://atproto.com/\"\u003eAT\nProtocol\u003c/a\u003e that underpins it.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: I communicated with the Bluesky team prior to the publishing of this\npost. While the functionality described is not the intended use of the\napplication, it is known behavior and does not constitue a vulnerability\ndisclosure process. My main motivation for reaching out to them was because I\nlike the folks and don’t want to make their lives harder.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e\u003cimg src=\"https://danielmangum.com/static/website_on_bsky_0.png\" alt=\"website-on-bsky-0\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eBeing able to host a website on Bluesky really has very little to do with\nBluesky itself. I happen to use Bluesky for hosting my \u003ca href=\"https://atproto.com/guides/glossary#pds-personal-data-server\"\u003ePersonal Data Server\n(PDS)\u003c/a\u003e, but all of\nthe APIs leveraged in uploading the site contents are defined at the AT Protocol\nlevel and implemented by a PDS. Bluesky offers access to my PDS via their \u003ca href=\"https://docs.bsky.app/docs/advanced-guides/entryway\"\u003ePDS\nentryway\u003c/a\u003e, which allows for\nthe many (have you heard that they are \u003ca href=\"https://thehill.com/policy/technology/4999675-bluesky-ceo-1m-people-a-day-joining-in-past-week/\"\u003egrowing by a million users per\nday\u003c/a\u003e?)\nPDS instances they run to be exposed via the \u003ccode\u003ebsky.social\u003c/code\u003e domain. That being\nsaid, individual PDS instances can be accessed directly, and if you clicked the\nlink at the top of this post to access the Bluesky hosted website, then you have\nalready visited mine at \u003ccode\u003eporcini.us-east.host.bsky.network\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eMost social applications, and many applications in general for that matter,\nbroadly have two primary types of content:\n\u003ca href=\"https://atproto.com/guides/glossary#record\"\u003erecords\u003c/a\u003e and\n\u003ca href=\"https://atproto.com/guides/glossary#blob\"\u003eblobs\u003c/a\u003e. Records are the core entity\ntypes that users create. They generally have some defined structure and\nmetadata, and they may reference other records or content. Blobs are typically\nlarger unstructured data, such as media assets, that may be uploaded by a user,\nbut are exposed via a record referencing them. For example, on Bluesky a user\nmay upload an image, then create a post that references it. From an end-user\nperspective, these two operations appear to be one action, but they are\ntypically decoupled at the API level.\u003c/p\u003e\n\u003cp\u003eThis decoupling is described in detail in the AT Protocol \u003ca href=\"https://atproto.com/specs/blob\"\u003eblob\nspecification\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBlob files are uploaded and distributed separately from records. Blobs are\nauthoritatively stored by the account’s PDS instance, but views are commonly\nserved by CDNs associated with individual applications (“AppViews”), to reduce\ntraffic on the PDS. CDNs may serve transformed (resized, transcoded, etc)\nversions of the original blob.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLater on, the specification details how blob lifecylce is to be managed.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBlobs must be uploaded to the PDS before a record can be created referencing\nthat blob. Note that the server does not know the intended Lexicon when\nreceiving an upload, so can only apply generic blob limits and restrictions at\ninitial upload time, and then enforce Lexicon-defined limits later when the\nrecord is created.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eReading this section is what initially got my wheels turning. While Bluesky has\na limited set of media asset types that can be referenced by posts, posts are\njust one record type that is defined by the Bluesky\n\u003ca href=\"https://atproto.com/specs/lexicon\"\u003elexicon\u003c/a\u003e (\u003ccode\u003eapp.bsky.*\u003c/code\u003e). Records, on the\nother hand, are defined in the AT Protocol lexicon (\u003ccode\u003ecom.atproto.*\u003c/code\u003e) and are\ndesigned to accommodate creating any \u003cem\u003etype\u003c/em\u003e of record defined by any lexicon.\nBecause different types of blobs may be relevant for other lexicons, the\nspecification highlights that restrictions cannot be enforced at time of upload.\u003c/p\u003e\n\u003cp\u003eInstead blobs are not made available until they are referenced, at which point\nthe validation can be performed based on the lexicon of the record type.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAfter a successful upload, blobs are placed in temporary storage. They are not\naccessible for download or distribution while in this state. Servers should\n“garbage collect” (delete) un-referenced temporary blobs after an appropriate\ntime span (see implementation guidelines below). Blobs which are in temporary\nstorage should not be included in the \u003ccode\u003elistBlobs\u003c/code\u003e output.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe upload blob can now be referenced from records by including the returned\nblob metadata in a record. When processing record creation, the server\nextracts the set of all referenced blobs, and checks that they are either\nalready referenced, or are in temporary storage. Once the record creation\nsucceeds, the server makes the blob publicly accessible.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHowever, applying validation does not mean that Bluesky’s restrictions will\nnecessarily be applied. A record that references a blob could very well be of a\ntype defined by a different lexicon, or, as we’ll see later on, part of a\n\u003ca href=\"https://docs.bsky.app/docs/advanced-guides/custom-schemas#sub-schemas\"\u003esub-schema\u003c/a\u003e\nenabled by an open union in the Bluesky lexicon. Let’s see how this works in\npractice.\u003c/p\u003e\n\u003cp\u003eIn order to perform data creation operations against a PDS, an access token must\nbe acquired for authentication. The\n\u003ca href=\"https://docs.bsky.app/docs/api/com-atproto-server-create-session\"\u003e\u003ccode\u003ecom.atproto.server.createSession\u003c/code\u003e\u003c/a\u003e\n\u003ca href=\"https://atproto.com/guides/glossary#xrpc\"\u003eXRPC\u003c/a\u003e method can be used to exchange\nuser credentials for a token. In the following \u003ccode\u003ecurl\u003c/code\u003e command, I used\n\u003ccode\u003edanielmangum.com\u003c/code\u003e as \u003ccode\u003e$BSKY_HANDLE\u003c/code\u003e and my password as \u003ccode\u003e$BSKY_PWD\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -X POST \u0026#39;https://bsky.social/xrpc/com.atproto.server.createSession\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Content-Type: application/json\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-d \u0026#39;{\u0026#34;identifier\u0026#34;: \u0026#34;\u0026#39;\u0026#34;$BSKY_HANDLE\u0026#34;\u0026#39;\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;\u0026#39;\u0026#34;$BSKY_PWD\u0026#34;\u0026#39;\u0026#34;}\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe response includes an \u003ccode\u003eaccessJWT\u003c/code\u003e field, which will be used as \u003ccode\u003e$ACCESS_JWT\u003c/code\u003e\nin subsequent operations. As described in the blob specification, a blob must be\nuploaded prior to it being referenced. I wanted to verify that the blob was not\npresent in the\n\u003ca href=\"https://docs.bsky.app/docs/api/com-atproto-sync-list-blobs\"\u003e\u003ccode\u003ecom.atproto.sync.listBlobs\u003c/code\u003e\u003c/a\u003e\noutput, or accessible via the\n\u003ca href=\"https://docs.bsky.app/docs/api/com-atproto-sync-get-blob\"\u003e\u003ccode\u003ecom.atproto.sync.getBlob\u003c/code\u003e\u003c/a\u003e\nmethods immediately after upload, so I checked how many blobs were currently\nbeing returned.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -s \u0026#39;https://bsky.social/xrpc/com.atproto.sync.listBlobs?did=\u0026#39;\u0026#34;$DID\u0026#34;\u0026#39;\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Authorization: Bearer \u0026#39;\u0026#34;$ACCESS_JWT\u0026#34;\u0026#39;\u0026#39; | jq -r \u0026#39;.cids | length\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ca href=\"https://atproto.com/specs/did\"\u003edecentralized identifier (\u003ccode\u003e$DID\u003c/code\u003e)\u003c/a\u003e used\nabove can be obtained from the \u003ccode\u003ecreateSession\u003c/code\u003e output as well. It is the\nunderlying identifier for an account. Every Bluesky handle \u003ca href=\"https://bsky.social/about/blog/4-28-2023-domain-handle-tutorial\"\u003eresolves to a\nDID\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe\n\u003ca href=\"https://docs.bsky.app/docs/api/com-atproto-repo-upload-blob\"\u003e\u003ccode\u003ecom.atproto.repo.uploadBlob\u003c/code\u003e\u003c/a\u003e\nmethod is used to upload a blob to a repository. The content of the website is a\nsimple \u003ccode\u003eindex.html\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"html\"\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003cspan\u003eh1\u003c/span\u003e\u0026gt;This Website is Hosted on Bluesky\u0026lt;/\u003cspan\u003eh1\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003cspan\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eThis website is just a blob uploaded to Bluesky via the API. Curious about how\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ethis works? Check out the write-up on \u0026lt;\u003cspan\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003ehref\u003c/span\u003e=\u003cspan\u003e\u0026#34;https://danielmangum.com/posts/this-website-is-hosted-on-bluesky/\u0026#34;\u003c/span\u003e\u0026gt;danielmangum.com\u0026lt;/\u003cspan\u003ea\u003c/span\u003e\u0026gt;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003cspan\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTo upload it, I used the following command.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -X POST \u0026#39;https://bsky.social/xrpc/com.atproto.repo.uploadBlob\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Authorization: Bearer \u0026#39;\u0026#34;$ACCESS_JWT\u0026#34;\u0026#39;\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Content-Type: text/html\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e--data-binary \u0026#39;@index.html\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;blob\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;$type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;blob\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;ref\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e\u0026#34;$link\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;mimeType\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;text/html\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;size\u0026#34;\u003c/span\u003e: \u003cspan\u003e268\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe returned \u003ccode\u003e$link\u003c/code\u003e can be used as the \u003ca href=\"https://atproto.com/guides/glossary#cid-content-id\"\u003eContent Identifier\n(\u003ccode\u003ecid\u003c/code\u003e)\u003c/a\u003e when fetching the\nblob via the \u003ccode\u003egetBlob\u003c/code\u003e method. However, according to the specification, because\nthis blob has to be referenced, it shouldn’t be visible. I checked to see if I\ncould access it with the following command.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -L \u0026#39;https://bsky.social/xrpc/com.atproto.sync.getBlob?did=\u0026#39;\u0026#34;$DID\u0026#34;\u0026#39;\u0026amp;cid=\u0026#39;\u0026#34;$LINK\u0026#34;\u0026#39;\u0026#39; \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;InternalServerError\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;Internal Server Error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNot the error I was expecting, but it looks like I indeed cannot access it. I\nwas also able to determine that it had not beed added to the \u003ccode\u003elistBlobs\u003c/code\u003e output.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -s \u0026#39;https://bsky.social/xrpc/com.atproto.sync.listBlobs?did=\u0026#39;\u0026#34;$DID\u0026#34;\u0026#39;\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Authorization: Bearer \u0026#39;\u0026#34;$ACCESS_JWT\u0026#34;\u0026#39;\u0026#39; | jq -r \u0026#39;.cids | length\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBlobs can be referenced in \u003ca href=\"https://github.com/bluesky-social/atproto/blob/b5c6bce9703faa7a8eb7f629d34f173116cb37b8/lexicons/app/bsky/feed/post.json\"\u003e\u003ccode\u003eapp.bsky.feed.post\u003c/code\u003e\nrecords\u003c/a\u003e\non Bluesky by including an \u003ca href=\"https://docs.bsky.app/docs/advanced-guides/posts#images-embeds\"\u003eembedded\nimage\u003c/a\u003e. However,\nthe \u003ca href=\"https://github.com/bluesky-social/atproto/blob/b5c6bce9703faa7a8eb7f629d34f173116cb37b8/lexicons/app/bsky/embed/images.json#L23\"\u003e\u003ccode\u003eapp.bsky.embed.image\u003c/code\u003e\nschema\u003c/a\u003e\nretricts the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types\"\u003eMIME\ntype\u003c/a\u003e to those\nprefixed with \u003ccode\u003eimage/*\u003c/code\u003e. We can see this validation in action if we try to\ncreate a post with an embedded image.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -X POST \u0026#39;https://bsky.social/xrpc/com.atproto.repo.createRecord\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Authorization: Bearer \u0026#39;\u0026#34;$ACCESS_JWT\u0026#34;\u0026#39;\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Content-Type: application/json\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-d \u0026#39;{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;repo\u0026#34;: \u0026#34;danielmangum.com\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;collection\u0026#34;: \u0026#34;app.bsky.feed.post\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;record\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;$type\u0026#34;: \u0026#34;app.bsky.feed.post\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;text\u0026#34;: \u0026#34;testing123\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;createdAt\u0026#34;: \u0026#34;2024-11-23T05:49:35.422015Z\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;embed\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u0026#34;$type\u0026#34;: \u0026#34;app.bsky.embed.images\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u0026#34;images\u0026#34;: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u0026#34;alt\u0026#34;: \u0026#34;that is not an image that is a website!\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u0026#34;image\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u0026#34;$type\u0026#34;: \u0026#34;blob\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u0026#34;ref\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e              \u0026#34;$link\u0026#34;: \u0026#34;bafkreidphtuvbzublyzacxukmmk2ikiur5ahme75fegokbhh26o4wfzvry\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u0026#34;mimeType\u0026#34;: \u0026#34;text/html\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u0026#34;size\u0026#34;: 21\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;InvalidMimeType\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;Wrong type of file. It is text/html but it must match image/*.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eFor completeness, I also tried specifying the \u003ccode\u003emimeType\u003c/code\u003e as \u003ccode\u003eimage/jpeg\u003c/code\u003e and\nverified that the PDS also validates that the blob reference MIME type matches\nthe blob.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;error\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;InvalidMimeType\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;message\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;Referenced Mimetype does not match stored blob. Expected: text/html, Got: image/jpeg\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHowever, the \u003ca href=\"https://atproto.com/specs/data-model#blob-type\"\u003e\u003ccode\u003eblob\u003c/code\u003e \u003ccode\u003e$type\u003c/code\u003e is part of the AT Protocol data\nmodel\u003c/a\u003e and not specific to\nBluesky. Because Bluesky’s PDS implementation is open source, we can see exactly\nhow a \u003ca href=\"https://github.com/bluesky-social/atproto/blob/b5c6bce9703faa7a8eb7f629d34f173116cb37b8/packages/lexicon/src/blob-refs.ts#L26\"\u003e\u003ccode\u003eBlobRef\u003c/code\u003e is\ndefined\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"ts\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e BlobRef {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003epublic\u003c/span\u003e original: \u003cspan\u003eJsonBlobRef\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003econstructor\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003epublic\u003c/span\u003e ref: \u003cspan\u003eCID\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003epublic\u003c/span\u003e mimeType: \u003cspan\u003estring\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003epublic\u003c/span\u003e size: \u003cspan\u003enumber\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    original?: \u003cspan\u003eJsonBlobRef\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ethis\u003c/span\u003e.original = original ?? {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      $type: \u003cspan\u003e\u0026#39;blob\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      ref,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      mimeType,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      size,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe can also see exactly how the PDS \u003ca href=\"https://github.com/bluesky-social/atproto/blob/b5c6bce9703faa7a8eb7f629d34f173116cb37b8/packages/pds/src/repo/prepare.ts#L282\"\u003eidentifies blobs in a\nrecord\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"ts\"\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003econst\u003c/span\u003e findBlobRefs = (\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  val: \u003cspan\u003eLexValue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  path: \u003cspan\u003estring\u003c/span\u003e[] = [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  layer = \u003cspan\u003e0\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e): FoundBlobRef[] =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003eif\u003c/span\u003e (layer \u0026gt; \u003cspan\u003e32\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e// walk arrays\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e  \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003eArray\u003c/span\u003e.isArray(val)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e val.flatMap((item) =\u0026gt; findBlobRefs(item, path, layer + \u003cspan\u003e1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e// objects\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e  \u003cspan\u003eif\u003c/span\u003e (val \u0026amp;\u0026amp; \u003cspan\u003etypeof\u003c/span\u003e val === \u003cspan\u003e\u0026#39;object\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e// convert blobs, leaving the original encoding so that we don\u0026#39;t change CIDs on re-encode\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e    \u003cspan\u003eif\u003c/span\u003e (val \u003cspan\u003einstanceof\u003c/span\u003e BlobRef) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003ereturn\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          ref: \u003cspan\u003eval\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          path,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e// retain cids \u0026amp; bytes\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e    \u003cspan\u003eif\u003c/span\u003e (CID.asCID(val) || val \u003cspan\u003einstanceof\u003c/span\u003e Uint8Array) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003ereturn\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003eObject\u003c/span\u003e.entries(val).flatMap(([key, item]) =\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      findBlobRefs(item, [...path, key], layer + \u003cspan\u003e1\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e// pass through\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u003c/span\u003e  \u003cspan\u003ereturn\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe important thing to notice is that identifying blob references does require\nthe presence of a lexicon schema. \u003ccode\u003efindBlobRefs\u003c/code\u003e recursively navigates a\n\u003ccode\u003eLexValue\u003c/code\u003e and looks for \u003ccode\u003e$type: blob\u003c/code\u003e. In order to support new lexicons over\ntime, the PDS needs to be able to handle lexicons that it doesn’t know about.\nBecause blobs are a fundamental component of so many applications, these new\nlexicons also need to be able to leverage them. To put this into action, I\nattempted to create a record of type \u003ccode\u003ecom.danielmangum.hack.website\u003c/code\u003e, which\nincluded a reference to the uploaded HTML blob.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -X POST \u0026#39;https://bsky.social/xrpc/com.atproto.repo.createRecord\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Authorization: Bearer \u0026#39;\u0026#34;$ACCESS_JWT\u0026#34;\u0026#39;\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Content-Type: application/json\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-d \u0026#39;{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;repo\u0026#34;: \u0026#34;danielmangum.com\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;collection\u0026#34;: \u0026#34;com.danielmangum.hack.website\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;record\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;$type\u0026#34;: \u0026#34;com.danielmangum.hack.website\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;website\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u0026#34;$type\u0026#34;: \u0026#34;blob\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u0026#34;ref\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u0026#34;$link\u0026#34;: \u0026#34;bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u0026#34;mimeType\u0026#34;: \u0026#34;text/html\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u0026#34;size\u0026#34;: 268\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;uri\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;at://did:plc:j22nebhg6aek3kt2mex5ng7e/com.danielmangum.hack.website/3lbnguuzckm2u\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;cid\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;bafyreicjcptshc7lmgb7abxlvcb5fmqqjdj6neie23szyum7rcaowmm5qm\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;commit\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;cid\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;bafyreid6apjjy56xoyenxmg5xv356twh22n3hayecoxlf6mflpltlzpuwu\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;rev\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;3lbnguuzmd42u\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;validationStatus\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;unknown\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt worked! We can see in the response that the PDS was unable to validate the\nrecord (\u003ccode\u003evalidationStatus: unknown\u003c/code\u003e) because it does not know about the\n\u003ccode\u003ecom.danielmangum.hack.*\u003c/code\u003e lexicon. Nevertheless, it will agree to persist the\nrecord. The next step was to check whether the referenced blob had been\npersisted.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -s \u0026#39;https://bsky.social/xrpc/com.atproto.sync.listBlobs?did=\u0026#39;\u0026#34;$DID\u0026#34;\u0026#39;\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Authorization: Bearer \u0026#39;\u0026#34;$ACCESS_JWT\u0026#34;\u0026#39;\u0026#39; | jq -r \u0026#39;.cids | length\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt looked like it had as the count had increased by 1. Fetching the blob\ndirectly would tell us for sure. Importantly, \u003ccode\u003egetBlob\u003c/code\u003e \u003cem\u003edoes not require\npassing the \u003ccode\u003e$ACCESS_JWT\u003c/code\u003e\u003c/em\u003e because unauthenticated parties need to be able to\nfetch blobs to process alongside records that reference them.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl \u0026#39;https://bsky.social/xrpc/com.atproto.sync.getBlob?did=\u0026#39;\u0026#34;$DID\u0026#34;\u0026#39;\u0026amp;cid=bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;error\u0026#34;: \u0026#34;Redirecting\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;message\u0026#34;: \u0026#34;Redirecting to new blob location\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAdding \u003ccode\u003e-L\u003c/code\u003e to the command enables following redirects.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -L \u0026#39;https://bsky.social/xrpc/com.atproto.sync.getBlob?did=\u0026#39;\u0026#34;$DID\u0026#34;\u0026#39;\u0026amp;cid=bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"html\"\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003cspan\u003eh1\u003c/span\u003e\u0026gt;This Website is Hosted on Bluesky\u0026lt;/\u003cspan\u003eh1\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003cspan\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003eThis website is just a blob uploaded to Bluesky via the API. Curious about how\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003ethis works? Check out the write-up on \u0026lt;\u003cspan\u003ea\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003ehref\u003c/span\u003e=\u003cspan\u003e\u0026#34;https://danielmangum.com/posts/this-website-is-hosted-on-bluesky/\u0026#34;\u003c/span\u003e\u0026gt;danielmangum.com\u0026lt;/\u003cspan\u003ea\u003c/span\u003e\u0026gt;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003cspan\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eExamining the redirect response, we can see that we are being directed directly\nto my PDS.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; HTTP/2 302 \n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; date: Sun, 24 Nov 2024 13:58:21 GMT\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; content-type: application/json; charset=utf-8\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; content-length: 68\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; location: https://porcini.us-east.host.bsky.network/xrpc/com.atproto.sync.getBlob?did=did:plc:j22nebhg6aek3kt2mex5ng7e\u0026amp;cid=bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; x-powered-by: Express\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; access-control-allow-origin: *\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; ratelimit-limit: 3000\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; ratelimit-remaining: 2997\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; ratelimit-reset: 1732456898\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; ratelimit-policy: 3000;w=300\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; etag: W/\u0026#34;44-1je7JKzDJZFd5iRtOI+IS+zlOOE\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt; vary: Accept-Encoding\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOpening the \u003ca href=\"https://porcini.us-east.host.bsky.network/xrpc/com.atproto.sync.getBlob?did=did:plc:j22nebhg6aek3kt2mex5ng7e\u0026amp;cid=bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\"\u003e\u003ccode\u003elocation\u003c/code\u003e\nURL\u003c/a\u003e\nin the browser presents the website as expected, And just like that, we have a\nwebsite hosted on Bluesky! While this is not \u003cem\u003ereally\u003c/em\u003e the intended use of blobs\non Bluesky specifically, it \u003cem\u003ecould\u003c/em\u003e be a legitimate use case in the future.\nRecords that reference website content, code, or other binary artifacts are a\npossibility on the AT Protocol. That being said, if a service like Bluesky is\nrunning PDS instances on behalf of users, this \u003cstrong\u003eeffectively equates to free\n(albiet unreliable) arbiratry file hosting\u003c/strong\u003e, which has implications beyond just\nracking up large storage and egress data fees. Returning back to the blobs\nspecification, there is an additional section on \u003ca href=\"https://atproto.com/specs/blob#security-considerations\"\u003eSecurity\nConsiderations\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eServing arbitrary user-uploaded files from a web server raises many content\nsecurity issues. For example, cross-site scripting (XSS) of scripts or SVG\ncontent form the same “origin” as other web pages. It is effectively mandatory\nto enable a Content Security Policy (LINK:\n\u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\"\u003ehttps://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\u003c/a\u003e) for the \u003ccode\u003egetBlob\u003c/code\u003e\nendpoint. It is effectively not supported to dynamically serve assets directly\nout of blob storage (the \u003ccode\u003egetBlob\u003c/code\u003e endpoint) directly to browsers and web\napplications. Applications must proxy blobs, files, and assets through an\nindependent CDN, proxy, or other web service before serving to browsers and\nweb agents, and such services are expected to implement security precautions.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eBluesky does \u003ca href=\"https://github.com/bluesky-social/atproto/blob/b5c6bce9703faa7a8eb7f629d34f173116cb37b8/packages/pds/src/api/com/atproto/sync/getBlob.ts#L8\"\u003eapply recommended CSP headers to the endpoint in the\nhandler\u003c/a\u003e,\nwhich guards against some of the issues described.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"ts\"\u003e\u003cspan\u003e\u003cspan\u003e      res.setHeader(\u003cspan\u003e\u0026#39;x-content-type-options\u0026#39;\u003c/span\u003e, \u003cspan\u003e\u0026#39;nosniff\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      res.setHeader(\u003cspan\u003e\u0026#39;content-security-policy\u0026#39;\u003c/span\u003e, \u003cspan\u003e`default-src \u0026#39;none\u0026#39;; sandbox`\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThere is also a \u003ca href=\"https://github.com/bluesky-social/atproto/blob/b5c6bce9703faa7a8eb7f629d34f173116cb37b8/packages/pds/src/config/config.ts#L28\"\u003edefault size limit on blob of 5\nMB\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"ts\"\u003e\u003cspan\u003e\u003cspan\u003e    blobUploadLimit: \u003cspan\u003eenv.blobUploadLimit\u003c/span\u003e ?? \u003cspan\u003e5\u003c/span\u003e * \u003cspan\u003e1024\u003c/span\u003e * \u003cspan\u003e1024\u003c/span\u003e, \u003cspan\u003e// 5mb\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eImages, the most common blob type on the Bluesky application, are expectedly not\nserved directly from PDS instances, but from the Bluesky CDN. For example, the\nfollowing URL points to the feed thumbnail version of an image I recently\nuploaded as part of a post.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ehttps://cdn.bsky.app/img/feed_thumbnail/plain/did:plc:j22nebhg6aek3kt2mex5ng7e/bafkreie5ci75iujpv34slnh3o4b7xcuxklpcguzed6qqmi4eaagn6cg4ve@jpeg\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eA different URL provides the full size version.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ehttps://cdn.bsky.app/img/feed_fullsize/plain/did:plc:j22nebhg6aek3kt2mex5ng7e/bafkreie5ci75iujpv34slnh3o4b7xcuxklpcguzed6qqmi4eaagn6cg4ve@jpeg\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHowever, the post that references the image just includes the \u003ccode\u003ecid\u003c/code\u003e. The\napplication itself needs to be aware of how images are served from the CDN.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;$type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;app.bsky.feed.post\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;createdAt\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;2024-11-12T14:18:44.263Z\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;embed\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;$type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;app.bsky.embed.images\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;images\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e\u0026#34;alt\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;Title image for blog post \\\u0026#34;USB On-The-Go on the ESP32-S3\\\u0026#34; on danielmangum.com.\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e\u0026#34;aspectRatio\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;height\u0026#34;\u003c/span\u003e: \u003cspan\u003e1080\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;width\u0026#34;\u003c/span\u003e: \u003cspan\u003e1920\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e\u0026#34;image\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;$type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;blob\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;ref\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003e\u0026#34;$link\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;bafkreie5ci75iujpv34slnh3o4b7xcuxklpcguzed6qqmi4eaagn6cg4ve\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;mimeType\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;image/jpeg\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;size\u0026#34;\u003c/span\u003e: \u003cspan\u003e869901\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;facets\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e\u0026#34;features\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;$type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;app.bsky.richtext.facet#link\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;uri\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;https://danielmangum.com/posts/usb-otg-esp32s3/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u003cspan\u003e\u0026#34;index\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e\u0026#34;byteEnd\u0026#34;\u003c/span\u003e: \u003cspan\u003e261\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e\u0026#34;byteStart\u0026#34;\u003c/span\u003e: \u003cspan\u003e229\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;langs\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;text\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;ICYMI: This weekend I wrote about USB On-The-Go on the ESP32-S3. OTG allows devices to also act as USB hosts. I dive into how the USB PHY is configured, and demonstrate connecting two ESP32-S3\u0026#39;s, as well as a Raspberry Pi Pico.\\n\\ndanielmangum.com/posts/usb-ot...\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe logic is present in \u003ca href=\"https://github.com/bluesky-social/atproto/blob/b5c6bce9703faa7a8eb7f629d34f173116cb37b8/packages/bsky/src/image/uri.ts#L12\"\u003ethe\n\u003ccode\u003eImageUriBuilder\u003c/code\u003e\u003c/a\u003e,\nwhich \u003ca href=\"https://github.com/bluesky-social/atproto/blob/b5c6bce9703faa7a8eb7f629d34f173116cb37b8/packages/bsky/src/index.ts#L64\"\u003ewill use a CDN if one is\nconfigured\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"ts\"\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003econst\u003c/span\u003e imgUriBuilder = \u003cspan\u003enew\u003c/span\u003e ImageUriBuilder(\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      config.cdnUrl || \u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003econfig.publicUrl\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e/img`\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSo why does Bluesky provide direct unauthenticated access to the PDS \u003ccode\u003egetBlobs\u003c/code\u003e\nendpoint? Once again illustrating the beauty of open source, there is an \u003ca href=\"https://github.com/bluesky-social/atproto/issues/523\"\u003eissue\ndescribing the original\nmotivation\u003c/a\u003e. In it, image\nlabeling and user content export, as well as additional future use cases, are\nenumerated. There is also a\n\u003ca href=\"https://github.com/bluesky-social/atproto/issues/523#issuecomment-1450545120\"\u003emention\u003c/a\u003e\nof the possibility of users hotlinking content and Bluesky for free hosting, so\nthese issues are clearly top-of-mind. The \u003ca href=\"https://github.com/bluesky-social/atproto/pull/606\"\u003eoriginal\nimplementation\u003c/a\u003e did not\ninclude the proper security headers, but they were \u003ca href=\"https://github.com/bluesky-social/atproto/commit/3d1b3b367575f2b4d2856a4795b1ca94a9f16554\"\u003esubsequently\nadded\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTraditional social platforms can place more restrictions on blobs at time of\nupload because there is a limited set of valid content. The extensibility of\nBluesky and the AT Protocol, which is what differentiates it from traditional\nnetworks, also necessitates more complexity. However, I, and clearly the awesome\nfolks building Bluesky, think it’s clearly worth it.\u003c/p\u003e\n\u003ch2 id=\"bonus-content\"\u003e\n  Bonus Content\n  \u003ca href=\"#bonus-content\"\u003e\n    \n    \u003cspan\u003eLink to heading\u003c/span\u003e\n  \u003c/a\u003e\n\u003c/h2\u003e\n\u003cp\u003eI mentioned sub-schemas and open unions earlier in this post. The\n\u003ccode\u003eapp.bsky.feed.post\u003c/code\u003e type includes a union for valid embeds. Per the AT Protocol\nlexicon specification, unions are open unless explicitly marked as \u003ccode\u003eclosed\u003c/code\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBy default unions are “open”, meaning that future revisions of the schema\ncould add more types to the list of refs (though can not remove types). This\nmeans that implementations should be permissive when validating, in case they\ndo not have the most recent version of the Lexicon. The \u003ccode\u003eclosed\u003c/code\u003e flag\n(boolean) can indicate that the set of types is fixed and can not be extended\nin the future.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe embed union is not marked as closed.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;embed\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;union\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003e\u0026#34;refs\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e              \u003cspan\u003e\u0026#34;app.bsky.embed.images\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e              \u003cspan\u003e\u0026#34;app.bsky.embed.video\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e              \u003cspan\u003e\u0026#34;app.bsky.embed.external\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e              \u003cspan\u003e\u0026#34;app.bsky.embed.record\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e              \u003cspan\u003e\u0026#34;app.bsky.embed.recordWithMedia\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          }\u003cspan\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTherefore, posts can be created with an embed \u003ccode\u003e$type\u003c/code\u003e that is not enumerated.\nFor example, I could also persist the website HTML via \u003ca href=\"https://bsky.app/profile/danielmangum.com/post/3lbpfxwnjoq23\"\u003emaking a post on\nBluesky\u003c/a\u003e with a\ncustom embed.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003ecurl -X POST \u0026#39;https://bsky.social/xrpc/com.atproto.repo.createRecord\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Authorization: Bearer \u0026#39;\u0026#34;$ACCESS_JWT\u0026#34;\u0026#39;\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-H \u0026#39;Content-Type: application/json\u0026#39; \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e-d \u0026#39;{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;repo\u0026#34;: \u0026#34;danielmangum.com\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;collection\u0026#34;: \u0026#34;app.bsky.feed.post\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;record\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;$type\u0026#34;: \u0026#34;app.bsky.feed.post\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;text\u0026#34;: \u0026#34;This post embeds a website.\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;createdAt\u0026#34;: \u0026#34;2024-11-23T05:49:35.422015Z\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;embed\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u0026#34;$type\u0026#34;: \u0026#34;com.danielmangum.hack.sites\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      \u0026#34;sites\u0026#34;: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u0026#34;site\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u0026#34;$type\u0026#34;: \u0026#34;blob\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u0026#34;ref\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e              \u0026#34;$link\u0026#34;: \u0026#34;bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u0026#34;mimeType\u0026#34;: \u0026#34;text/html\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u0026#34;size\u0026#34;: 268\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"fallback\"\u003e\u003cspan\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;uri\u0026#34;: \u0026#34;at://did:plc:j22nebhg6aek3kt2mex5ng7e/app.bsky.feed.post/3lbpfxwnjoq23\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;cid\u0026#34;: \u0026#34;bafyreidnlyhcvlzl5hc3btih6ly5anjld6ss4bgocyichnm72cpnjuzsvu\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;commit\u0026#34;: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;cid\u0026#34;: \u0026#34;bafyreibv77m3bdyywmotn7ncbbrqv6pv7irzmw27bzklt4tppgsoodarma\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u0026#34;rev\u0026#34;: \u0026#34;3lbpfxwo57q23\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u0026#34;validationStatus\u0026#34;: \u0026#34;valid\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the Bluesky application, the embed is silently ignored.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cimg src=\"https://danielmangum.com/static/website_on_bsky_1.png\" alt=\"website-on-bsky-1\"/\u003e\n\u003c/p\u003e\n\u003cp\u003eHowever, the content is persisted and the reference is included in the post\nrecord, so a different application could choose to start rendering the embed.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;$type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;app.bsky.feed.post\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;createdAt\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;2024-11-23T05:49:35.422015Z\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;embed\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;$type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;com.danielmangum.hack.sites\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    \u003cspan\u003e\u0026#34;sites\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        \u003cspan\u003e\u0026#34;site\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;$type\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;blob\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;ref\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e            \u003cspan\u003e\u0026#34;$link\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;bafkreic5fmelmhqoqxfjz2siw5ey43ixwlzg5gvv2pkkz7o25ikepv4zeq\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;mimeType\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;text/html\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e          \u003cspan\u003e\u0026#34;size\u0026#34;\u003c/span\u003e: \u003cspan\u003e268\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e    ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e  \u003cspan\u003e\u0026#34;text\u0026#34;\u003c/span\u003e: \u003cspan\u003e\u0026#34;This post embeds a website.\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn my opinion, this is one of the most interesting features of lexicons because\nit allows for “micro-extensions” that build on existing use cases (e.g.\n“microblogging”). For example, I for one would love a world in which small code\nsnippets could be embedded in my posts and run in a\n\u003ca href=\"https://webassembly.org/\"\u003eWebAssembly\u003c/a\u003e sandbox by other users. But that’s a\npost for another day.\u003c/p\u003e\n\n      \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "23 min read",
  "publishedTime": "2024-11-24T01:41:34-06:00",
  "modifiedTime": "2024-11-24T01:41:34-06:00"
}
