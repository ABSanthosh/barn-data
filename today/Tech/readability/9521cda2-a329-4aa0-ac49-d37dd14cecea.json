{
  "id": "9521cda2-a329-4aa0-ac49-d37dd14cecea",
  "title": "Handling cookies is a minefield",
  "link": "https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/",
  "description": "Comments",
  "author": "",
  "published": "Thu, 21 Nov 2024 17:28:11 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "April King",
  "length": 24976,
  "excerpt": "Discrepancies in how browsers and libraries handle HTTP cookies, and the problems caused by such things.",
  "siteName": "",
  "favicon": "https://grayduck.mn/images/favicons/android-chrome-192x192.png",
  "text": "Thursday, November 21, 2024, in Standards HTTP cookies are a small piece of data set by either Javascript or HTTP servers, and which are essential for maintaining state on the otherwise stateless system known as the World Wide Web. Once set, web browsers will continue to forward them along for every properly scoped HTTP request until they expire. I had been more than content to ignore the vagaries of how cookies function until the end of time, except that one day I stumbled across this innocuous piece of Javascript: const favoriteCookies = JSON.stringify({ ginger: \"snap\", peanutButter: \"chocolate chip\", snicker: \"doodle\", }); document.cookie = `¬†cookieNames=${favoriteCookies}`¬†; This code functioned completely fine, as far as browsers were concerned. It took a piece of boring (but tasty) JSON and saved the value into a session cookie. While this was slightly unusual ‚Äî most code will serialize JSON to base64 prior to setting them as a cookie, there was nothing here that browsers had any issue with. They happily allowed the cookie to be set and sent along to the backend web server in the HTTP header: GET / HTTP/1.1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Connection: keep-alive Cookie: cookieNames={\"ginger\":\"snap\",\"peanutButter\":\"chocolate chip\",\"snicker\":\"doodle\"} Host: example.com Which was all well and good, until it got passed along to some code that used the Go standard library. The Go standard library couldn't parse the cookie, leading to cascading failures all the way up the stack. So what happened? The Specification Cookies were initially defined in RFC 2109 (1997), and subsequently updated in RFC 2965 (2000) and RFC 6265 (2011), with a draft version that is in the process of being updated (and is what this article uses). There are two sections of the RFC that pertain to cookie values: Section 4.1.1 (on how servers should send cookies) Informally, the Set-Cookie response header field contains a cookie, which begins with a name-value-pair, followed by zero or more attribute-value pairs. Servers SHOULD NOT send Set-Cookie header fields that fail to conform to the following grammar: set-cookie = set-cookie-string set-cookie-string = BWS cookie-pair *( BWS \";\" OWS cookie-av ) cookie-pair = cookie-name BWS \"=\" BWS cookie-value cookie-name = 1*cookie-octet cookie-value = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE ) cookie-octet = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E ; US-ASCII characters excluding CTLs, ; whitespace DQUOTE, comma, semicolon, ; and backslash Section 5.6 (on how browsers should accept cookies) A user agent MUST use an algorithm equivalent to the following algorithm to parse a set-cookie-string: 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F character (CTL characters excluding HTAB): Abort these steps and ignore the set-cookie-string entirely. 2. If the set-cookie-string contains a %x3B (\";\") character: The name-value-pair string consists of the characters up to, but not including, the first %x3B (\";\"), and the unparsed-attributes consist of the remainder of the set-cookie-string (including the %x3B (\";\") in question). Otherwise: 1. The name-value-pair string consists of all the characters contained in the set-cookie-string, and the unparsed-attributes is the empty string. There are three things that should immediately jump out to you: What servers SHOULD send and what browsers MUST accept are not aligned, a classic example of the tragedy of following Postel's Law. There is nothing here that limits what cookie values are acceptable for browsers to send to servers, aside from the semicolon delimiter. This might be fine if servers only received cookies they themselves had set, but cookies can also come from document.cookie and contain values outside the %x21, %x23-2B, %x2D-3A, %x3C-5B, and %x5D-7E characters as allowed by Set-Cookie. It doesn't acknowledge how standard libraries that handle Cookie headers should behave: should they act like user agents or like servers? Should they be permissive or proscriptive? Should they behave differently in different contexts? And herein lies the very crux of the resulting issue I ran into: everything behaves differently, and it's a miracle that cookies work at all. Web Browsers First, let's start with how web browsers behave. The teams behind Gecko (Firefox), Chromium, and WebKit (Safari) work together constantly, so it would be reasonable to expect them to all behave the same‚Ä¶ right? Before we dig in, remember that the RFC contradictorily says that Set-Cookie headers may contain any ASCII character besides control characters, double quotes, commas, semicolons, and backslashes, but that browsers should accept any cookie value that does not contain control characters. Firefox Firefox's code for valid cookie values looks like this: bool CookieCommons::CheckValue(const CookieStruct\u0026 aCookieData) { // reject cookie if value contains an RFC 6265 disallowed character - see // https://bugzilla.mozilla.org/show_bug.cgi?id=1191423 // NOTE: this is not the full set of characters disallowed by 6265 - notably // 0x09, 0x20, 0x22, 0x2C, and 0x5C are missing from this list. const char illegalCharacters[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x3B, 0x7F, 0x00}; const auto* start = aCookieData.value().BeginReading(); const auto* end = aCookieData.value().EndReading(); auto charFilter = [\u0026](unsigned char c) { if (StaticPrefs::network_cookie_blockUnicode() \u0026\u0026 c \u003e= 0x80) { return true; } return std::find(std::begin(illegalCharacters), std::end(illegalCharacters), c) != std::end(illegalCharacters); }; return std::find_if(start, end, charFilter) == end; } ‚Ä†accepting 0x7F was fixed in bug 1797235 (Firefox 108) Firefox accepts five characters which RFC recommends that servers not send: 0x09 (horizontal tab) 0x20 (spaces) 0x22 (double quotes) 0x2C (commas) 0x5C (backslashes) This was initially done to provide parity with Chrome in some long-ago era and lingers on in both codebases. Astute observers might note that Firefox has a network.cookie.blockUnicode setting that this code checks against, and which rejects all values above 0x80. That groundwork was laid as a result of this research and can be tracked in bug 1797231. Chromium The Chromium code for valid cookie values looks like so: bool ParsedCookie::IsValidCookieValue(const std::string\u0026 value) { // IsValidCookieValue() returns whether a string matches the following // grammar: // // cookie-value = *cookie-value-octet // cookie-value-octet = %x20-3A / %x3C-7E / %x80-FF // ; octets excluding CTLs and \";\" // // This can be used to determine whether cookie values contain any invalid // characters. // // Note that RFC6265bis section 4.1.1 suggests a stricter grammar for // parsing cookie values, but we choose to allow a wider range of characters // than what's allowed by that grammar (while still conforming to the // requirements of the parsing algorithm defined in section 5.2). // // For reference, see: // - https://crbug.com/238041 for (char i : value) { if (HttpUtil::IsControlChar(i) || i == ';') return false; } return true; } // Whether the character is a control character (CTL) as defined in RFC 5234 // Appendix B.1. static inline bool IsControlChar(char c) { return (c \u003e= 0x00 \u0026\u0026 c \u003c= 0x1F) || c == 0x7F; } Chrome is slightly more restrictive than Firefox, refusing to accept the 0x09 (horizontal tab) in its cookie values. Nevertheless (and contrary to the RFC), it is perfectly happy to receive and send spaces, double quotes, commas, backslashes, and unicode characters. Safari (WebKit) I'm not able to get access to the code for cookie storage, as it is buried inside the closed source CFNetwork. That said, we can nevertheless examine its internals by running this piece of Javascript: for (i=0; i\u003c256; i++) { let paddedIndex = i.toString().padStart(3, '0') + '_' + '0x' + i.toString(16).padStart(2, '0'); // set a cookie with name of \"cookie\" + decimal char + hex char // and a value of the character surrounded by a space and two dashes document.cookie=`¬†cookie${paddedIndex}=-- ${String.fromCharCode(i)} --`¬†; } document.cookie='cookieUnicode=üç™'; :::text cookie007_0x07 -- localhost / Session 16 B cookie008_0x08 -- localhost / Session 16 B cookie009_0x09 -- -- localhost / Session 21 B cookie010_0x0a -- localhost / Session 16 B cookie011_0x0b -- localhost / Session 16 B (snip for brevity) cookie030_0x1e -- localhost / Session 16 B cookie031_0x1f -- localhost / Session 16 B cookie032_0x20 -- -- localhost / Session 21 B cookie033_0x21 -- ! -- localhost / Session 21 B cookie034_0x22 -- \" -- localhost / Session 21 B cookie035_0x23 -- # -- localhost / Session 21 B (snip for brevity) cookie042_0x2a -- * -- localhost / Session 21 B cookie043_0x2b -- + -- localhost / Session 21 B cookie044_0x2c --,-- localhost / Session 19 B (snip for brevity) cookie044_0x5c -- \\ -- localhost / Session 19 B As Safari stops processing a cookie once it sees a disallowed character, it's easy to see that 0x09 (horizontal tab), 0x20 (space), 0x22 (double quote), and 0x5C (backslash) are okay, but 0x7F (delete), 0x80-FF (high ASCII / Unicode) characters are disallowed. Unlike Firefox and Chrome which follow the instructions in the RFC to ‚Äúabort these steps and ignore the cookie entirely‚Äù when encountering a cookie with a control character, Safari does not ignore the cookie but instead accepts the cookie value for everything up until that character. Oddly enough, this quest has uncovered a bizarre Safari bug ‚Äî setting a cookie with a value of -- , -- seems to result in it trimming the whitespace around the comma. Standard Libraries Golang Let's start with Golang's cookie code, which is where I ran into the problem in the first place. // sanitizeCookieValue produces a suitable cookie-value from v. // https://tools.ietf.org/html/rfc6265#section-4.1.1 // // We loosen this as spaces and commas are common in cookie values // but we produce a quoted cookie-value if and only if v contains // commas or spaces. // See https://golang.org/issue/7243 for the discussion. func sanitizeCookieValue(v string) string { v = sanitizeOrWarn(\"Cookie.Value\", validCookieValueByte, v) if len(v) == 0 { return v } if strings.ContainsAny(v, \" ,\") { return `\"` + v + `\"` } return v } func validCookieValueByte(b byte) bool { return 0x20 \u003c= b \u0026\u0026 b \u003c 0x7f \u0026\u0026 b != '\"' \u0026\u0026 b != ';' \u0026\u0026 b != '\\\\' } Golang falls relatively close to what the RFC's wording on how servers should behave with Set-Cookie, only differing by allowing 0x20 (space) and 0x2C (comma) due to them commonly occurring in the wild. You can already see the struggles that programming languages have to deal with ‚Äî they have to both receive values from browsers in line with Section 5, but also send cookies as per Section 4.1.1. This can have pretty serious consequences, as you can see from running this code: package main import ( \"fmt\" \"net/http\" ) func main() { rawCookies := `¬†cookie1=foo; ` + `¬†cookie2={\"ginger\":\"snap\",\"peanutButter\":\"chocolate chip\",\"snicker\":\"doodle\"}; ` + `¬†cookie3=bar` header := http.Header{} header.Add(\"Cookie\", rawCookies) request := http.Request{Header: header} fmt.Println(request.Cookies()) } Which outputs only: [cookie1=foo cookie3=bar] Invisibly dropping a cookie that all major browsers accept, without any sort of exception to the effect that this is happening. Still, dropping a cookie it didn't understand without any other side effects isn't as bad as it could be. PHP Many languages, such as PHP, don't have native functions for parsing cookies, which makes it somewhat difficult to definitively say what it allows and does not allow. That said, we can set cookies using the code below and see how PHP responds: [0x09, 0x0D, 0x10, 0x20, 0x22, 0x2C, 0x5C, 0x7F, 0xFF].forEach(i =\u003e { let paddedIndex = i.toString().padStart(3, '0') + '_' + '0x' + i.toString(16).padStart(2, '0'); document.cookie=`¬†cookie${paddedIndex}=-- ${String.fromCharCode(i)} --`¬†; }); document.cookie='cookieUnicode=üç™'; Output: cookie009_0x09: -- -- cookie009_0x10: -- -- cookie009_0x0d: -- -- cookie032_0x20: -- -- cookie034_0x22: -- \" -- cookie044_0x2c: -- , -- cookie092_0x5c: -- \\ -- cookie255_0x7f: -- -- cookie255_0xff: -- √ø -- cookieUnicode: üç™ When it comes to control characters, PHP's behavior is all over the place. 0x00-0x09 all work fine, as do things like 0x0D (carriage return), but if you use 0x10 (data link escape) or 0x7F (delete), PHP will completely error out with a 400 Bad Request error. Python import http.cookies raw_cookies = ( 'cookie1=foo; ' 'cookie2={\"ginger\":\"snap\",\"peanutButter\":\"chocolate chip\",\"snicker\":\"doodle\"}; ' 'cookie3=bar' ) c = http.cookies.SimpleCookie() c.load(raw_cookies) print(c) Output: \u003e\u003e\u003e Set-Cookie: cookie1=foo Python invisibly aborts the loading of additional cookies inside SimpleCookie.load() as soon as it encounters one it doesn't understand. This can be very dangerous when you consider that a subdomain could feasibly set a cookie on the base domain which would completely break all cookies for all domains of a given site. It's even messier it comes to control characters: import http.cookies for i in range(0, 32): raw_cookie = f\"cookie{hex(i)}={chr(i)}\" c = http.cookies.SimpleCookie() c.load(raw_cookie) for name, morsel in c.items(): print(f\"{name}: value: {repr(morsel.value)}, length: {len(morsel.value)}\") Output: \u003e\u003e\u003e cookie0x9: value: '', length: 0 \u003e\u003e\u003e cookie0xa: value: '', length: 0 \u003e\u003e\u003e cookie0xb: value: '', length: 0 \u003e\u003e\u003e cookie0xc: value: '', length: 0 \u003e\u003e\u003e cookie0xd: value: '', length: 0 Here we can see that Python invisibly drops a lot of cookies with control characters, and loads others improperly. Note that if you guard those values with something like: raw_cookie = f\"cookie{hex(i)}=aa{chr(i)}aa\" Then none of the control character cookies will load. Overall, Python is extremely inconsistent and unpredictable in its behavior when it comes to loading cookies. Ruby require \"cgi\" raw_cookie = 'ginger=snap; ' + \"cookie=chocolate \\x13 \\t \\\" , \\\\ \\x7f üç™ chip; \" + 'snicker=doodle' cookies = CGI::Cookie.parse(raw_cookie) puts cookies puts cookies[\"cookie\"].value() puts cookies[\"cookie\"].value().to_s() Output: {\"ginger\"=\u003e#\u003cCGI::Cookie: \"ginger=snap; path=\"\u003e, \"cookie\"=\u003e#\u003cCGI::Cookie: \"cookie=chocolate+%13+%09+%22+%2C+%5C+%7F+%F0%9F%8D%AA+chip; path=\"\u003e, \"snicker\"=\u003e#\u003cCGI::Cookie: \"snicker=doodle; path=\"\u003e} chocolate \" , \\  üç™ chip cookie=chocolate+%13+%09+%22+%2C+%5C+%7F+%F0%9F%8D%AA+chip; path= The Ruby library appears pretty permissive, seeming to accept every character during parsing and then percent-encoding it when being pulled from the cookie jar. This may well be the optimal behavior (if such a thing can be said to exist with cookies), but I can certainly see cases where code setting a cookie via document.cookie would not expect to see it reflected back in percent-encoded form. Rust use cookie::Cookie; fn main() { let c = Cookie::parse(\"cookie=chocolate , \\\" \\t foo \\x13 √± üç™ chip;\").unwrap(); println!(\"{:?}\", c.name_value()); } Output: (\"cookie\", \"chocolate , \\\" \\t foo \\u{13} √± üç™ chip\") Rust doesn't ship any cookie handling facilities by default, so this is looking at the popular cookie crate. As configured by default, it appears to be the most permissive of the programming languages, accepting any UTF-8 string tossed at it. The World Wide Web, aka Why This Matters The wildly differing behavior between browsers and languages certainly makes for some riveting tables, but how does all this play out in the real world? When I first discovered this in the real world, it was only through sheer luck that it wasn't a catastrophe. A manual tester was playing around with a third-party library update and had run into a strange set of errors on our testing site. Without bringing it to my attention, this update ‚Äî doing something unlikely to be caught in automated testing ‚Äî would have certainly been pushed to production. As a result, every future website visitor would have received a broken cookie and been locked out with an inscrutable error until the update was reverted and the cookies were cleared out. And that's exactly the problem with this specification ambiguity ‚Äî it's such an easy mistake to make that millions of websites and companies are only an intern away from a complete meltdown. And it doesn't only affect tiny websites on obscure frameworks, as major websites such as Facebook, Netflix, WhatsApp, and Apple are affected. You can see for yourself how easy of a mistake this is to make by pasting this simple code fragment into your browser console, substituting .grayduck.mn for the domain you're testing, e.g. .facebook.com: document.cookie=\"unicodeCookie=üç™; domain=.grayduck.mn; Path=/; SameSite=Lax\" websites hate this one weird trick Facebook facebook error page has images the cookie also breaks Instagram \u0026 Threads instagram produces this spartan 500 error no surprise that threads is much the same Netflix netflix returns a NSES-500 error and unfortunately the help page is broken too Okta every okta login page returns a 400 error WhatsApp whatsapp's descriptively named ‚Äúwhatsapp error‚Äù Amazon most parts of amazon work, but pieces of it are randomly broken Amazon Web Services the AWS login console returns a 400 error and crashes out Apple Support apple support is unable to load your devices Best Buy navigation works, but the search functionality does not eBay mostly fixed, but pieces of eBay still error out with a 400 error Home Depot home depot will be fixing it Intuit intuit was the only site to identify the cause of the error Outlook another 400 error shows how systematic the problem is How do we fix this? It's probably not much of a surprise that fixing problems in 30-year-old foundational specifications is really, really hard. And for this problem, it's unlikely that there is a good fix. Blocking these cookies on the browser side was considered and worked on by both Mozilla and Google: Mozilla: bug 1797235 aka CVE-2023-5723, and bug 1797231 Google: bug 40061459 But it turns out unilateral blocking is quite complicated because while non-ASCII cookies aren't super common overall, affecting only a bit under 0.01% of all cookies, telemetry has found they are considerably more common in countries like Argentina, Mexico, and Finland. While Mozilla did implement a preference that could be toggled quickly (network.cookie.blockUnicode), it hasn't been enabled due to behavioral compatibility issues with Chromium. Fixing it on the server-side is potentially feasible, but it affects millions of websites and most of the errors caused by this problem are buried deep in programming languages and web frameworks. It might be possible for places like Facebook and Netflix to mitigate the issue, but the average website operator is not going to have the time or ability to resolve the issue. In truth, the true fix for this issue almost certainly lies in the IETF HTTP Working Group updating the cookie specification to both align with itself and to be strict on how systems handling cookies should behave. Whether non-ASCII characters should be allowed should be identical regardless of whether server-side or on user agents. And regardless, the steps around how browsers, programming languages, and frameworks should handle cookie processing need to be explicit, in much the way that modern W3C standards such as Content Security Policy do. Aborting the processing of other cookies because one cookie is malformed is unacceptable when such behavior can lead to a wide variety of unexpected behavior. These processing steps should probably look like something like: ‚Ä¢ Start with field-value ‚Ä¢ Split on ; and ,, giving list of \"raw-cookie-pair\". Comma is NOT treated a synonym for semicolon in order to support combining headers, despite RFC7230 section 3.2.2. For each raw-cookie-pair: ‚ó¶ If the pair does not contain =, then skip to next raw-cookie-pair ‚ó¶ Remove leading and trailing whitespace ‚ó¶ Treat portion before first = as cookie-name-octets ‚ó¶ Treat portion after first = as cookie-value-octets ‚ó¶ If cookie-value-octets starts with DQUOTE, then: ‚Ä£ Remove one DQUOTE at start ‚Ä£ Remove one DQUOTE at end, if present ‚ó¶ If resulting cookie-name-octets, cookie-value-octets, or both are unacceptable to server, then skip to next raw-cookie-pair ‚ó¶ Process resulting [cookie-name-octets, cookie-value-octets] tuple in server defined manner Servers SHOULD further process cookie-name-octets and reject any tuple where the cookie-name-octets are not a token. Servers SHOULD further process and cookie-value-octets and reject any tuple where cookie-value-octets contains octets not in cookie-octet. Summary Table CTLs1 htab space dquote comma backslash delete 0x80-FF(and Unicode) RFC 6235 (Section 4.1.1) No No No No No No No No RFC 6265 (Section 5.6) No Yes Yes Yes Yes Yes No ?? Firefox No2 Yes Yes Yes Yes Yes Yes Yes Chromium No No Yes Yes Yes Yes No Yes Safari No3 Yes Yes Yes Yes4 Yes No No Golang ?? No Yes No Yes No No No Python Yes5 No No No Yes No No No Ruby (CGI) Yes Yes Yes Yes Yes Yes Yes Yes Rust Yes Yes Yes Yes Yes Yes Yes Yes not as defined as in RFC 5234, but instead as \\x00-08 and \\x0A-x1F (e.g. CTLs minus htab and delete) Mozilla stopped allowing CTLs in document.cookie as of Firefox 108 does not abort processing and ignore the cookie as the RFC requires seems to remove whitespace around commas in some conditions sometimes allows 0x0A-0D but fails to store them in the cookie value, aborts at other times Thanks I couldn't have written this article without a bunch of help along the way. I'd like to thank: Po-Ning Tseng, for helping me investigate this issue in the first place Dan Veditz at Mozilla, for his inexhaustible knowledge and endless kindness Frederik Braun, for his helpful early feedback Steven Bingler at Google, for pushing on getting this issue fixed Peter Bowen, for his thoughts on how cookie processing probably should happen Chris Palmer and David Schinazi, for their insightful proofreading Stefan B√ºhler, who stumbled across some of this stuff over a decade ago kibwen on HackerNews, for pointing out the Rust crate situation [Category: Standards] [Tags: Browser, Programming, Security]",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n      \u003ccontent\u003e\n  \u003carticle\u003e\n\n    \n\n    \u003cp\u003e\u003ctime datetime=\"2024-11-21T10:00:00-06:00\" pubdate=\"\"\u003eThursday, November 21, 2024\u003c/time\u003e, in \u003ca href=\"https://grayduck.mn/categories/#standards\"\u003eStandards\u003c/a\u003e\n    \u003c/p\u003e\n\n    \n\n\u003cp\u003eHTTP cookies are a small piece of data set by either \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\"\u003eJavascript\u003c/a\u003e or HTTP servers, and which are essential for maintaining state on the otherwise stateless system known as the World Wide Web. Once set, web browsers will continue to forward them along for every properly scoped HTTP request until they expire.\u003c/p\u003e\n\u003cp\u003eI had been more than content to ignore the vagaries of how cookies function until the end of time, except that one day I stumbled across this innocuous piece of Javascript:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efavoriteCookies\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eJSON\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estringify\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eginger\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;snap\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003epeanutButter\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;chocolate chip\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003esnicker\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;doodle\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\n\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecookie\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`¬†cookieNames=\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003efavoriteCookies\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\u003cspan\u003e¬†\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis code functioned completely fine, as far as browsers were concerned. It took a piece of boring (but tasty) JSON and saved the value into a session cookie. While this was slightly unusual ‚Äî most code will serialize JSON to base64 prior to setting them as a cookie, there was nothing here that browsers had any issue with. They happily allowed the cookie to be set and sent along to the backend web server in the HTTP header:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003eGET\u003c/span\u003e \u003cspan\u003e/\u003c/span\u003e \u003cspan\u003eHTTP\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e1.1\u003c/span\u003e\n\u003cspan\u003eAccept\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003etext/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\u003c/span\u003e\n\u003cspan\u003eAccept-Encoding\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003egzip, deflate\u003c/span\u003e\n\u003cspan\u003eAccept-Language\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003een-US,en;q=0.9\u003c/span\u003e\n\u003cspan\u003eConnection\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003ekeep-alive\u003c/span\u003e\n\u003cspan\u003eCookie\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003ecookieNames={\u0026#34;ginger\u0026#34;:\u0026#34;snap\u0026#34;,\u0026#34;peanutButter\u0026#34;:\u0026#34;chocolate chip\u0026#34;,\u0026#34;snicker\u0026#34;:\u0026#34;doodle\u0026#34;}\u003c/span\u003e\n\u003cspan\u003eHost\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e \u003cspan\u003eexample.com\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWhich was all well and good, until it got passed along to some code that used the \u003ca href=\"https://pkg.go.dev/github.com/go-http-utils/cookie\"\u003eGo standard library\u003c/a\u003e. The Go standard library couldn\u0026#39;t parse the cookie, leading to cascading failures all the way up the stack. So what happened?\u003c/p\u003e\n\u003ch2\u003eThe Specification\u003c/h2\u003e\n\u003cp\u003eCookies were initially defined in \u003ca href=\"https://www.rfc-editor.org/rfc/rfc2109\"\u003eRFC 2109\u003c/a\u003e (1997), and subsequently updated in \u003ca href=\"https://www.rfc-editor.org/rfc/rfc2965\"\u003eRFC 2965\u003c/a\u003e (2000) and \u003ca href=\"https://www.rfc-editor.org/rfc/rfc6265\"\u003eRFC 6265\u003c/a\u003e (2011), with a \u003ca href=\"https://httpwg.org/http-extensions/draft-ietf-httpbis-rfc6265bis.html\"\u003edraft version\u003c/a\u003e that is in the process of being updated (and is what this article uses).\u003c/p\u003e\n\u003cp\u003eThere are two sections of the RFC that pertain to cookie values:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eSection 4.1.1\u003c/strong\u003e \u003cem\u003e(on how servers should send cookies)\u003c/em\u003e\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003eInformally, the Set-Cookie response header field contains a cookie,\nwhich begins with a name-value-pair, followed by zero or more\nattribute-value pairs. Servers SHOULD NOT send Set-Cookie header\nfields that fail to conform to the following grammar:\n\nset-cookie        = set-cookie-string\nset-cookie-string = BWS cookie-pair *( BWS \u0026#34;;\u0026#34; OWS cookie-av )\ncookie-pair       = cookie-name BWS \u0026#34;=\u0026#34; BWS cookie-value\ncookie-name       = 1*cookie-octet\ncookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\ncookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                      ; US-ASCII characters excluding CTLs,\n                      ; whitespace DQUOTE, comma, semicolon,\n                      ; and backslash\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eSection 5.6\u003c/strong\u003e \u003cem\u003e(on how browsers should accept cookies)\u003c/em\u003e\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003eA user agent MUST use an algorithm equivalent to the following algorithm\nto parse a set-cookie-string:\n\n1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F character\n   (CTL characters excluding HTAB):\n     Abort these steps and ignore the set-cookie-string entirely.\n\n2. If the set-cookie-string contains a %x3B (\u0026#34;;\u0026#34;) character:\n   The name-value-pair string consists of the characters up to, but not\n   including, the first %x3B (\u0026#34;;\u0026#34;), and the unparsed-attributes consist\n   of the remainder of the set-cookie-string (including the %x3B (\u0026#34;;\u0026#34;)\n   in question).\n\nOtherwise:\n\n1. The name-value-pair string consists of all the characters contained in\n   the set-cookie-string, and the unparsed-attributes is the empty string.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThere are three things that should immediately jump out to you:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWhat servers \u003cstrong\u003eSHOULD\u003c/strong\u003e send and what browsers \u003cstrong\u003eMUST\u003c/strong\u003e accept are not aligned, a classic example of the \u003ca href=\"https://datatracker.ietf.org/doc/html/draft-thomson-postel-was-wrong-03\"\u003etragedy of following Postel\u0026#39;s Law\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThere is nothing here that limits what cookie values are acceptable for browsers to send to servers, aside from the semicolon delimiter. This might be fine if servers only received cookies they themselves had set, but cookies can also come from \u003ccode\u003edocument.cookie\u003c/code\u003e and contain values outside the \u003ccode\u003e%x21\u003c/code\u003e, \u003ccode\u003e%x23-2B\u003c/code\u003e, \u003ccode\u003e%x2D-3A\u003c/code\u003e, \u003ccode\u003e%x3C-5B\u003c/code\u003e, and \u003ccode\u003e%x5D-7E\u003c/code\u003e characters as allowed by \u003ccode\u003eSet-Cookie\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIt doesn\u0026#39;t acknowledge how standard libraries that handle \u003ccode\u003eCookie\u003c/code\u003e headers should behave: should they act like user agents or like servers? Should they be permissive or proscriptive? Should they behave differently in different contexts?\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAnd herein lies the very crux of the resulting issue I ran into: everything behaves differently, and it\u0026#39;s a miracle that cookies work at all.\u003c/p\u003e\n\u003ch2\u003eWeb Browsers\u003c/h2\u003e\n\u003cp\u003eFirst, let\u0026#39;s start with how web browsers behave. The teams behind Gecko (Firefox), Chromium, and WebKit (Safari) work together constantly, so it would be reasonable to expect them to all behave the same‚Ä¶ right?\u003c/p\u003e\n\u003cp\u003eBefore we dig in, remember that the RFC contradictorily says that \u003ccode\u003eSet-Cookie\u003c/code\u003e headers may contain any ASCII character besides control characters, double quotes, commas, semicolons, and backslashes, but that browsers should accept any cookie value that does not contain control characters.\u003c/p\u003e\n\u003cp\u003e\u003cbr/\u003e\n\u003cstrong\u003eFirefox\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFirefox\u0026#39;s \u003ca href=\"https://searchfox.org/mozilla-central/source/netwerk/cookie/CookieCommons.cpp\"\u003ecode for valid cookie values\u003c/a\u003e looks like this:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003ebool\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCookieCommons\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eCheckValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCookieStruct\u003c/span\u003e\u003cspan\u003e\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eaCookieData\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ereject\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecookie\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ean\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eRFC\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e6265\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edisallowed\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echaracter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esee\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehttps\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e//\u003c/span\u003e\u003cspan\u003ebugzilla\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emozilla\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eorg\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003eshow_bug\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecgi\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e1191423\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eNOTE\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eis\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enot\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethe\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efull\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eset\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echaracters\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edisallowed\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eby\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e6265\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enotably\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x09\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x20\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x22\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x2C\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eand\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x5C\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eare\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emissing\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethis\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003elist\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echar\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eillegalCharacters\u003c/span\u003e\u003cspan\u003e[]\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e0x01\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x02\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x03\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x04\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x05\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x06\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x07\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x08\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x0A\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x0B\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x0C\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e0x0D\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x0E\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x0F\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x10\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x11\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x12\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x13\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x14\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x15\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x16\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x17\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e0x18\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x19\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x1A\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x1B\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x1C\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x1D\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x1E\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x1F\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x3B\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x7F\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x00\u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\n\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eauto\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eaCookieData\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eBeginReading\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eauto\u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eend\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eaCookieData\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eEndReading\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eauto\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echarFilter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026amp;\u003c/span\u003e\u003cspan\u003e](\u003c/span\u003e\u003cspan\u003eunsigned\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echar\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eStaticPrefs\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003enetwork_cookie_blockUnicode\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026gt;=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x80\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estd\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003efind\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003estd\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003ebegin\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eillegalCharacters\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estd\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eillegalCharacters\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\n\u003cspan\u003e                     \u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e!=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estd\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eend\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eillegalCharacters\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e};\u003c/span\u003e\n\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estd\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003efind_if\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003estart\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eend\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echarFilter\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eend\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cfigure\u003e\u003cfigcaption\u003e‚Ä†accepting \u003ccode\u003e0x7F\u003c/code\u003e was fixed in \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1797235\"\u003ebug 1797235\u003c/a\u003e (Firefox 108)\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003eFirefox accepts five characters which RFC recommends that servers not send:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e0x09\u003c/code\u003e (horizontal tab)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0x20\u003c/code\u003e (spaces)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0x22\u003c/code\u003e (double quotes)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0x2C\u003c/code\u003e (commas)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0x5C\u003c/code\u003e (backslashes)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis was initially done to \u003ca href=\"https://hg.mozilla.org/mozilla-central/annotate/02b7641683b049e8ba551d04318a5d985f36e504/netwerk/cookie/CookieCommons.cpp#l210\"\u003eprovide parity with Chrome\u003c/a\u003e in some long-ago era and lingers on in both codebases.\u003c/p\u003e\n\u003cp\u003eAstute observers might note that Firefox has a \u003ccode\u003enetwork.cookie.blockUnicode\u003c/code\u003e setting that this code checks against, and which rejects all values above \u003ccode\u003e0x80\u003c/code\u003e. That groundwork was laid as a result of this research and can be tracked in \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1797231\"\u003ebug 1797231\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cbr/\u003e\n\u003cstrong\u003eChromium\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe Chromium \u003ca href=\"https://source.chromium.org/chromium/chromium/src/+/main:net/cookies/parsed_cookie.cc\"\u003ecode for valid cookie values\u003c/a\u003e looks like so:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003ebool\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eParsedCookie::IsValidCookieValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estd\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// IsValidCookieValue() returns whether a string matches the following\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// grammar:\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// cookie-value       = *cookie-value-octet\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// cookie-value-octet = %x20-3A / %x3C-7E / %x80-FF\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//                       ; octets excluding CTLs and \u0026#34;;\u0026#34;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// This can be used to determine whether cookie values contain any invalid\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// characters.\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Note that RFC6265bis section 4.1.1 suggests a stricter grammar for\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// parsing cookie values, but we choose to allow a wider range of characters\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// than what\u0026#39;s allowed by that grammar (while still conforming to the\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// requirements of the parsing algorithm defined in section 5.2).\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// For reference, see:\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e//  - https://crbug.com/238041\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echar\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eHttpUtil\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eIsControlChar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e||\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;;\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e// Whether the character is a control character (CTL) as defined in RFC 5234\u003c/span\u003e\n\u003cspan\u003e// Appendix B.1.\u003c/span\u003e\n\u003cspan\u003estatic\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einline\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ebool\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eIsControlChar\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echar\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026gt;=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x00\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x1F\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e||\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x7F\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eChrome is slightly more restrictive than Firefox, refusing to accept the \u003ccode\u003e0x09\u003c/code\u003e (horizontal tab) in its cookie values.\u003c/p\u003e\n\u003cp\u003eNevertheless (and contrary to the RFC), it is perfectly happy to receive and send spaces, double quotes, commas, backslashes, and unicode characters.\u003c/p\u003e\n\u003cp\u003e\u003cbr/\u003e\n\u003cstrong\u003eSafari (WebKit)\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI\u0026#39;m not able to get access to the code for cookie storage, as it is buried inside the closed source \u003ccode\u003eCFNetwork\u003c/code\u003e. That said, we can nevertheless examine its internals by running this piece of Javascript:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e256\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e++\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epaddedIndex\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003epadStart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;0\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;0x\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003epadStart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;0\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// set a cookie with name of \u0026#34;cookie\u0026#34; + decimal char + hex char\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// and a value of the character surrounded by a space and two dashes\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecookie\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e`¬†cookie\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003epaddedIndex\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e=-- \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromCharCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e --`\u003c/span\u003e\u003cspan\u003e¬†\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecookie\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;cookieUnicode=üç™\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e:::\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\n\u003cspan\u003ecookie007_0x07\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e           \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie008_0x08\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e           \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie009_0x09\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e21\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie010_0x0a\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e           \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie011_0x0b\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e           \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003e                   \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esnip\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ebrevity\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003ecookie030_0x1e\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e           \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie031_0x1f\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e           \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie032_0x20\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e21\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie033_0x21\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e21\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie034_0x22\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e21\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie035_0x23\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e#\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e21\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003e                   \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esnip\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ebrevity\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003ecookie042_0x2a\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e21\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie043_0x2b\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e21\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003ecookie044_0x2c\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e19\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003cspan\u003e                   \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003esnip\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efor\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ebrevity\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003ecookie044_0x5c\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e--\u003c/span\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003elocalhost\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003eSession\u003c/span\u003e\u003cspan\u003e   \u003c/span\u003e\u003cspan\u003e19\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eB\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAs Safari stops processing a cookie once it sees a disallowed character, it\u0026#39;s easy to see that \u003ccode\u003e0x09\u003c/code\u003e (horizontal tab), \u003ccode\u003e0x20\u003c/code\u003e (space), \u003ccode\u003e0x22\u003c/code\u003e (double quote), and \u003ccode\u003e0x5C\u003c/code\u003e (backslash) are okay, but \u003ccode\u003e0x7F\u003c/code\u003e (delete), \u003ccode\u003e0x80-FF\u003c/code\u003e (high ASCII / Unicode) characters are disallowed.\u003c/p\u003e\n\u003cp\u003eUnlike Firefox and Chrome which follow the instructions in the RFC to \u003cem\u003e‚Äúabort these steps and ignore the cookie entirely‚Äù\u003c/em\u003e when encountering a cookie with a control character, Safari does not ignore the cookie but instead accepts the cookie value for everything up until that character.\u003c/p\u003e\n\u003cp\u003eOddly enough, this quest has uncovered a bizarre Safari bug ‚Äî setting a cookie with a value of \u003ccode\u003e-- , --\u003c/code\u003e seems to result in it trimming the whitespace around the comma.\u003c/p\u003e\n\u003ch2\u003eStandard Libraries\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eGolang\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eLet\u0026#39;s start with \u003ca href=\"https://cs.opensource.google/go/go/+/master:src/net/http/cookie.go\"\u003eGolang\u0026#39;s cookie code\u003c/a\u003e, which is where I ran into the problem in the first place.\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003e// sanitizeCookieValue produces a suitable cookie-value from v.\u003c/span\u003e\n\u003cspan\u003e// https://tools.ietf.org/html/rfc6265#section-4.1.1\u003c/span\u003e\n\u003cspan\u003e//\u003c/span\u003e\n\u003cspan\u003e// We loosen this as spaces and commas are common in cookie values\u003c/span\u003e\n\u003cspan\u003e// but we produce a quoted cookie-value if and only if v contains\u003c/span\u003e\n\u003cspan\u003e// commas or spaces.\u003c/span\u003e\n\u003cspan\u003e// See https://golang.org/issue/7243 for the discussion.\u003c/span\u003e\n\u003cspan\u003efunc\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esanitizeCookieValue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ev\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estring\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ev\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esanitizeOrWarn\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Cookie.Value\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evalidCookieValueByte\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ev\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003elen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ev\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ev\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003estrings\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eContainsAny\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ev\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34; ,\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`\u0026#34;`\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ev\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e`\u0026#34;`\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ev\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efunc\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evalidCookieValueByte\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ebyte\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ebool\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x20\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x7f\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e!=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e!=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;;\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eb\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e!=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;\\\\\u0026#39;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eGolang falls relatively close to what the RFC\u0026#39;s wording on how servers should behave with \u003ccode\u003eSet-Cookie\u003c/code\u003e, only differing by allowing \u003ccode\u003e0x20\u003c/code\u003e (space) and \u003ccode\u003e0x2C\u003c/code\u003e (comma) due to them \u003ca href=\"https://golang.org/issue/7243\"\u003ecommonly occurring\u003c/a\u003e in the wild.\u003c/p\u003e\n\u003cp\u003eYou can already see the struggles that programming languages have to deal with ‚Äî they have to both receive values from browsers in line with Section 5, but also send cookies as per Section 4.1.1.\u003c/p\u003e\n\u003cp\u003eThis can have pretty serious consequences, as you can see from running \u003ca href=\"https://go.dev/play/p/6UX3Beem2Go\"\u003ethis code\u003c/a\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003epackage\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emain\u003c/span\u003e\n\n\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003efunc\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erawCookies\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:=\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e`¬†cookie1=foo; `\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e`¬†cookie2={\u0026#34;ginger\u0026#34;:\u0026#34;snap\u0026#34;,\u0026#34;peanutButter\u0026#34;:\u0026#34;chocolate chip\u0026#34;,\u0026#34;snicker\u0026#34;:\u0026#34;doodle\u0026#34;}; `\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e`¬†cookie3=bar`\u003c/span\u003e\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehttp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eHeader\u003c/span\u003e\u003cspan\u003e{}\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eAdd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Cookie\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erawCookies\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehttp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eRequest\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003eHeader\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003efmt\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ePrintln\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003erequest\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eCookies\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWhich outputs only:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003ecookie1\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003efoo\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecookie3\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003ebar\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eInvisibly dropping a cookie that all major browsers accept, without any sort of exception to the effect that this is happening. Still, dropping a cookie it didn\u0026#39;t understand without any other side effects isn\u0026#39;t as bad as it could be.\u003c/p\u003e\n\u003cp\u003e\u003cbr/\u003e\n\u003cstrong\u003ePHP\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMany languages, such as PHP, don\u0026#39;t have native functions for parsing cookies, which makes it somewhat difficult to definitively say what it allows and does not allow.\u003c/p\u003e\n\u003cp\u003eThat said, we can set cookies using the code below and see how PHP responds:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0x09\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x0D\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x10\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x20\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x22\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x2C\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x5C\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0x7F\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0xFF\u003c/span\u003e\u003cspan\u003e].\u003c/span\u003e\u003cspan\u003eforEach\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003epaddedIndex\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003epadStart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;0\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026#39;0x\u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e16\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003epadStart\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;0\u0026#39;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecookie\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e`¬†cookie\u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003epaddedIndex\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e=-- \u003c/span\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efromCharCode\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e --`\u003c/span\u003e\u003cspan\u003e¬†\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\n\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecookie\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;cookieUnicode=üç™\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOutput:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003ecookie009_0x09: -- --\ncookie009_0x10: -- --\ncookie009_0x0d: -- --\ncookie032_0x20: -- --\ncookie034_0x22: -- \u0026#34; --\ncookie044_0x2c: -- , --\ncookie092_0x5c: -- \\ --\ncookie255_0x7f: -- --\ncookie255_0xff: -- √ø --\ncookieUnicode: üç™\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWhen it comes to control characters, PHP\u0026#39;s behavior is all over the place. \u003ccode\u003e0x00-0x09\u003c/code\u003e all work fine, as do things like \u003ccode\u003e0x0D\u003c/code\u003e (carriage return), but if you use \u003ccode\u003e0x10\u003c/code\u003e (data link escape) or \u003ccode\u003e0x7F\u003c/code\u003e (delete), PHP will completely error out with a \u003cstrong\u003e400 Bad Request\u003c/strong\u003e error.\u003c/p\u003e\n\u003cp\u003e\u003cbr/\u003e\n\u003cstrong\u003ePython\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ehttp.cookies\u003c/span\u003e\n\n\u003cspan\u003eraw_cookies\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e\u0026#39;cookie1=foo; \u0026#39;\u003c/span\u003e\n    \u003cspan\u003e\u0026#39;cookie2={\u0026#34;ginger\u0026#34;:\u0026#34;snap\u0026#34;,\u0026#34;peanutButter\u0026#34;:\u0026#34;chocolate chip\u0026#34;,\u0026#34;snicker\u0026#34;:\u0026#34;doodle\u0026#34;}; \u0026#39;\u003c/span\u003e\n    \u003cspan\u003e\u0026#39;cookie3=bar\u0026#39;\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003ec\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ehttp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecookies\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSimpleCookie\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eload\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eraw_cookies\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOutput:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; Set-Cookie: cookie1=foo\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003ePython invisibly aborts the loading of additional cookies inside \u003ccode\u003eSimpleCookie.load()\u003c/code\u003e as soon as it encounters one it doesn\u0026#39;t understand. This can be very dangerous when you consider that a subdomain could feasibly set a cookie on the base domain which would completely break all cookies for all domains of a given site.\u003c/p\u003e\n\u003cp\u003eIt\u0026#39;s even messier it comes to control characters:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003ehttp.cookies\u003c/span\u003e\n\n\u003cspan\u003efor\u003c/span\u003e \u003cspan\u003ei\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003erange\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e32\u003c/span\u003e\u003cspan\u003e):\u003c/span\u003e\n    \u003cspan\u003eraw_cookie\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ef\u003c/span\u003e\u003cspan\u003e\u0026#34;cookie\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ehex\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\n\n    \u003cspan\u003ec\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ehttp\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecookies\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eSimpleCookie\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eload\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eraw_cookie\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n    \u003cspan\u003efor\u003c/span\u003e \u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003emorsel\u003c/span\u003e \u003cspan\u003ein\u003c/span\u003e \u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eitems\u003c/span\u003e\u003cspan\u003e():\u003c/span\u003e\n        \u003cspan\u003eprint\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ef\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e: value: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003erepr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emorsel\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e, length: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003elen\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emorsel\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOutput:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; cookie0x9: value: \u0026#39;\u0026#39;, length: 0\n\u0026gt;\u0026gt;\u0026gt; cookie0xa: value: \u0026#39;\u0026#39;, length: 0\n\u0026gt;\u0026gt;\u0026gt; cookie0xb: value: \u0026#39;\u0026#39;, length: 0\n\u0026gt;\u0026gt;\u0026gt; cookie0xc: value: \u0026#39;\u0026#39;, length: 0\n\u0026gt;\u0026gt;\u0026gt; cookie0xd: value: \u0026#39;\u0026#39;, length: 0\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eHere we can see that Python invisibly drops a lot of cookies with control characters, and loads others improperly. Note that if you guard those values with something like:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003eraw_cookie\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003ef\u003c/span\u003e\u003cspan\u003e\u0026#34;cookie\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ehex\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e=aa\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003echr\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003eaa\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThen none of the control character cookies will load. Overall, Python is extremely inconsistent and unpredictable in its behavior when it comes to loading cookies.\u003c/p\u003e\n\u003cp\u003e\u003cbr/\u003e\n\u003cstrong\u003eRuby\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;cgi\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003eraw_cookie\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;ginger=snap; \u0026#39;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\n\u003cspan\u003e\u0026#34;cookie=chocolate \u003c/span\u003e\u003cspan\u003e\\x13\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\\t\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e , \u003c/span\u003e\u003cspan\u003e\\\\\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\\x7f\u003c/span\u003e\u003cspan\u003e üç™ chip; \u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\n\u003cspan\u003e\u0026#39;snicker=doodle\u0026#39;\u003c/span\u003e\n\n\u003cspan\u003ecookies\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCGI\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003eCookie\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eparse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eraw_cookie\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003eputs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecookies\u003c/span\u003e\n\u003cspan\u003eputs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecookies\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;cookie\u0026#34;\u003c/span\u003e\u003cspan\u003e].\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003cspan\u003eputs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecookies\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;cookie\u0026#34;\u003c/span\u003e\u003cspan\u003e].\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eto_s\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOutput:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e{\u0026#34;ginger\u0026#34;=\u0026gt;#\u0026lt;CGI::Cookie: \u0026#34;ginger=snap; path=\u0026#34;\u0026gt;, \u0026#34;cookie\u0026#34;=\u0026gt;#\u0026lt;CGI::Cookie: \u0026#34;cookie=chocolate+%13+%09+%22+%2C+%5C+%7F+%F0%9F%8D%AA+chip; path=\u0026#34;\u0026gt;, \u0026#34;snicker\u0026#34;=\u0026gt;#\u0026lt;CGI::Cookie: \u0026#34;snicker=doodle; path=\u0026#34;\u0026gt;}\nchocolate    \u0026#34; , \\  üç™ chip\ncookie=chocolate+%13+%09+%22+%2C+%5C+%7F+%F0%9F%8D%AA+chip; path=\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe Ruby library appears pretty permissive, seeming to accept every character during parsing and then \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding\"\u003epercent-encoding\u003c/a\u003e it when being pulled from the cookie jar.\u003c/p\u003e\n\u003cp\u003eThis may well be the optimal behavior (if such a thing can be said to exist with cookies), but I can certainly see cases where code setting a cookie via \u003ccode\u003edocument.cookie\u003c/code\u003e would not expect to see it reflected back in percent-encoded form.\u003c/p\u003e\n\u003cp\u003e\u003cbr/\u003e\n\u003cstrong\u003eRust\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003euse\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecookie\u003c/span\u003e::\u003cspan\u003eCookie\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003efn\u003c/span\u003e \u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCookie\u003c/span\u003e::\u003cspan\u003eparse\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;cookie=chocolate , \u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\\t\u003c/span\u003e\u003cspan\u003e foo \u003c/span\u003e\u003cspan\u003e\\x13\u003c/span\u003e\u003cspan\u003e √± üç™ chip;\u0026#34;\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003eunwrap\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eprintln!\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;{:?}\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename_value\u003c/span\u003e\u003cspan\u003e());\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOutput:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e(\u0026#34;cookie\u0026#34;, \u0026#34;chocolate , \\\u0026#34; \\t foo \\u{13} √± üç™ chip\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eRust doesn\u0026#39;t ship any cookie handling facilities by default, so this is looking at the popular \u003ccode\u003ecookie\u003c/code\u003e crate. As configured by default, it appears to be the most permissive of the programming languages, accepting any UTF-8 string tossed at it.\u003c/p\u003e\n\n\u003ch2\u003eThe World Wide Web, aka Why This Matters\u003c/h2\u003e\n\u003cp\u003eThe wildly differing behavior between browsers and languages certainly makes for some \u003ca href=\"#summary-table\"\u003eriveting tables\u003c/a\u003e, but how does all this play out in the real world?\u003c/p\u003e\n\u003cp\u003eWhen I first discovered this in the real world, it was only through sheer luck that it wasn\u0026#39;t a catastrophe. A manual tester was playing around with a third-party library update and had run into a strange set of errors on our testing site. Without bringing it to my attention, this update ‚Äî doing something unlikely to be caught in automated testing ‚Äî would have certainly been pushed to production. As a result, every future website visitor would have received a broken cookie and been locked out with an inscrutable error until the update was reverted and the cookies were cleared out.\u003c/p\u003e\n\u003cp\u003eAnd that\u0026#39;s exactly the problem with this specification ambiguity ‚Äî it\u0026#39;s such an easy mistake to make that millions of websites and companies are only an intern away from a complete meltdown. And it doesn\u0026#39;t only affect tiny websites on obscure frameworks, as major websites such as Facebook, Netflix, WhatsApp, and Apple are affected.\u003c/p\u003e\n\u003cp\u003eYou can see for yourself how easy of a mistake this is to make by pasting this simple code fragment into your browser console, substituting \u003ccode\u003e.grayduck.mn\u003c/code\u003e for the domain you\u0026#39;re testing, e.g. \u003ccode\u003e.facebook.com\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecookie\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;unicodeCookie=üç™; domain=.grayduck.mn; Path=/; SameSite=Lax\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003ewebsites hate this one weird trick\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eFacebook\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/facebook.jpg\"/\u003e\u003cfigcaption\u003efacebook error page has images the cookie also breaks\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstagram \u0026amp; Threads\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/instagram.jpg\"/\u003e\u003cfigcaption\u003einstagram produces this spartan 500 error\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/threads.jpg\"/\u003e\u003cfigcaption\u003eno surprise that threads is much the same\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eNetflix\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/netflix.jpg\"/\u003e\u003cfigcaption\u003enetflix returns a NSES-500 error\u003c/figcaption\u003e\u003c/figure\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/netflix-help.jpg\"/\u003e\u003cfigcaption\u003eand unfortunately the help page is broken too\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eOkta\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/okta.jpg\"/\u003e\u003cfigcaption\u003eevery okta login page returns a 400 error\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eWhatsApp\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/whatsapp.png\"/\u003e\u003cfigcaption\u003ewhatsapp\u0026#39;s descriptively named ‚Äúwhatsapp error‚Äù\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eAmazon\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/amazon-ratings.jpg\"/\u003e\u003cfigcaption\u003emost parts of amazon work, but pieces of it are randomly broken\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eAmazon Web Services\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/aws-login.jpg\"/\u003e\u003cfigcaption\u003ethe AWS login console returns a 400 error and crashes out\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eApple Support\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/apple-support.jpg\"/\u003e\u003cfigcaption\u003eapple support is unable to load your devices\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eBest Buy\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/bestbuy.jpg\"/\u003e\u003cfigcaption\u003enavigation works, but the search functionality does not\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eeBay\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/ebay.jpg\"/\u003e\u003cfigcaption\u003emostly fixed, but pieces of eBay still error out with a 400 error\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eHome Depot\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/homedepot.jpg\"/\u003e\u003cfigcaption\u003ehome depot will be fixing it\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eIntuit\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/intuit.jpg\"/\u003e\u003cfigcaption\u003eintuit was the only site to identify the cause of the error\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eOutlook\u003c/strong\u003e\u003c/p\u003e\n\u003cfigure\u003e\u003cimg src=\"https://grayduck.mn/2024/11/21/handling-cookies-is-a-minefield/outlook.jpg\"/\u003e\u003cfigcaption\u003eanother 400 error shows how systematic the problem is\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch3\u003eHow do we fix this?\u003c/h3\u003e\n\u003cp\u003eIt\u0026#39;s probably not much of a surprise that fixing problems in 30-year-old foundational specifications is really, \u003cem\u003ereally\u003c/em\u003e hard. And for this problem, it\u0026#39;s unlikely that there is a good fix.\u003c/p\u003e\n\u003cp\u003eBlocking these cookies on the browser side was considered and worked on by both Mozilla and Google:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMozilla: \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1797235\"\u003ebug 1797235\u003c/a\u003e aka \u003ca href=\"https://nvd.nist.gov/vuln/detail/cve-2023-5723\"\u003eCVE-2023-5723\u003c/a\u003e, and \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1797231\"\u003ebug 1797231\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGoogle: \u003ca href=\"https://issues.chromium.org/issues/40061459#comment24\"\u003ebug 40061459\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBut it turns out unilateral blocking is quite complicated because while non-ASCII cookies aren\u0026#39;t super common overall, affecting only a bit under 0.01% of all cookies, telemetry has found they are \u003ca href=\"https://issues.chromium.org/issues/40061459#comment24\"\u003econsiderably more common\u003c/a\u003e in countries like Argentina, Mexico, and Finland. While Mozilla did implement a preference that could be toggled quickly (\u003ccode\u003enetwork.cookie.blockUnicode\u003c/code\u003e), it hasn\u0026#39;t been enabled due to behavioral compatibility issues with Chromium.\u003c/p\u003e\n\u003cp\u003eFixing it on the server-side is potentially feasible, but it affects millions of websites and most of the errors caused by this problem are buried deep in programming languages and web frameworks. It might be possible for places like Facebook and Netflix to mitigate the issue, but the average website operator is not going to have the time or ability to resolve the issue.\u003c/p\u003e\n\u003cp\u003eIn truth, the true fix for this issue almost certainly lies in the \u003ca href=\"https://httpwg.org/\"\u003eIETF HTTP Working Group\u003c/a\u003e updating the cookie specification to both align with itself and to be strict on how systems handling cookies should behave. Whether non-ASCII characters should be allowed should be identical regardless of whether server-side or on user agents.\u003c/p\u003e\n\u003cp\u003eAnd regardless, the steps around how browsers, programming languages, and frameworks should handle cookie processing need to be explicit, in much the way that modern W3C standards such as \u003ca href=\"https://www.w3.org/TR/CSP3/#html-integration\"\u003eContent Security Policy\u003c/a\u003e do. Aborting the processing of other cookies because one cookie is malformed is unacceptable when such behavior can lead to a wide variety of unexpected behavior.\u003c/p\u003e\n\u003cp\u003eThese processing steps should probably look like something like:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003ccode\u003e‚Ä¢ Start with field-value\n‚Ä¢ Split on ; and ,, giving list of \u0026#34;raw-cookie-pair\u0026#34;. Comma is NOT treated a synonym for semicolon in order to support combining headers, despite RFC7230 section 3.2.2.\n\nFor each raw-cookie-pair:\n  ‚ó¶ If the pair does not contain =, then skip to next raw-cookie-pair\n  ‚ó¶ Remove leading and trailing whitespace\n  ‚ó¶ Treat portion before first = as cookie-name-octets\n  ‚ó¶ Treat portion after first = as cookie-value-octets\n  ‚ó¶ If cookie-value-octets starts with DQUOTE, then:\n    ‚Ä£ Remove one DQUOTE at start\n    ‚Ä£ Remove one DQUOTE at end, if present\n  ‚ó¶ If resulting cookie-name-octets, cookie-value-octets, or both are unacceptable to server, then skip to next raw-cookie-pair\n  ‚ó¶ Process resulting [cookie-name-octets, cookie-value-octets] tuple in server defined manner\n\nServers SHOULD further process cookie-name-octets and reject any tuple where the cookie-name-octets are not a token.  Servers SHOULD further process and cookie-value-octets and reject any tuple where cookie-value-octets contains octets not in cookie-octet.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003ch3\u003eSummary Table\u003c/h3\u003e\n\u003cdiv\u003e\n    \u003ctable id=\"cookie-table-summary\"\u003e\n        \u003cthead\u003e\n            \u003ctr\u003e\n                \u003cth\u003e\u003c/th\u003e\n                \u003cth\u003eCTLs\u003csup\u003e1\u003c/sup\u003e\u003c/th\u003e\n                \u003cth\u003ehtab\u003c/th\u003e\n                \u003cth\u003espace\u003c/th\u003e\n                \u003cth\u003edquote\u003c/th\u003e\n                \u003cth\u003ecomma\u003c/th\u003e\n                \u003cth\u003ebackslash\u003c/th\u003e\n                \u003cth\u003edelete\u003c/th\u003e\n                \u003cth\u003e0x80-FF\u003cbr/\u003e(and Unicode)\u003c/th\u003e\n            \u003c/tr\u003e\n        \u003c/thead\u003e\n        \u003ctbody\u003e\n            \u003ctr\u003e\n                \u003ctd\u003e\u003ca href=\"https://httpwg.org/http-extensions/draft-ietf-httpbis-rfc6265bis.html#name-set-cookie\"\u003eRFC 6235 (Section 4.1.1)\u003c/a\u003e\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n            \u003c/tr\u003e\n                \u003ctr\u003e\u003ctd\u003e\u003ca href=\"https://httpwg.org/http-extensions/draft-ietf-httpbis-rfc6265bis.html#name-the-set-cookie-header-field\"\u003eRFC 6265 (Section 5.6)\u003c/a\u003e\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003e??\u003c/td\u003e\n            \u003c/tr\u003e\n            \u003ctr\u003e\u003ctd colspan=\"9\"\u003e\u003c/td\u003e\u003c/tr\u003e\n            \n                \u003ctr\u003e\u003ctd\u003eFirefox\u003c/td\u003e\n                \u003ctd\u003eNo\u003csup\u003e2\u003c/sup\u003e\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n            \u003c/tr\u003e\n            \n                \u003ctr\u003e\u003ctd\u003eChromium\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n            \u003c/tr\u003e\n            \n                \u003ctr\u003e\u003ctd\u003eSafari\u003c/td\u003e\n                \u003ctd\u003eNo\u003csup\u003e3\u003c/sup\u003e\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003csup\u003e4\u003c/sup\u003e\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n            \u003c/tr\u003e\n            \u003ctr\u003e\u003ctd colspan=\"9\"\u003e\u003c/td\u003e\u003c/tr\u003e\n            \n                \u003ctr\u003e\u003ctd\u003eGolang\u003c/td\u003e\n                \u003ctd\u003e??\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n            \u003c/tr\u003e\n            \n                \u003ctr\u003e\u003ctd\u003ePython\u003c/td\u003e\n                \u003ctd\u003eYes\u003csup\u003e5\u003c/sup\u003e\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n                \u003ctd\u003eNo\u003c/td\u003e\n            \u003c/tr\u003e\n            \u003ctr\u003e\n                \u003ctd\u003eRuby (CGI)\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n            \u003c/tr\u003e\n            \u003ctr\u003e\n                \u003ctd\u003eRust\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n                \u003ctd\u003eYes\u003c/td\u003e\n            \u003c/tr\u003e\n        \u003c/tbody\u003e\n    \u003c/table\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003enot as defined as in \u003ca href=\"https://www.rfc-editor.org/rfc/rfc5234\"\u003eRFC 5234\u003c/a\u003e, but instead as \u003ccode\u003e\\x00-08\u003c/code\u003e and \u003ccode\u003e\\x0A-x1F\u003c/code\u003e (e.g. CTLs minus htab and delete)\u003c/li\u003e\n\u003cli\u003eMozilla \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1797235\"\u003estopped allowing CTLs\u003c/a\u003e in \u003ccode\u003edocument.cookie\u003c/code\u003e as of Firefox 108\u003c/li\u003e\n\u003cli\u003edoes not abort processing and ignore the cookie as the RFC requires\u003c/li\u003e\n\u003cli\u003eseems to remove whitespace around commas in some conditions\u003c/li\u003e\n\u003cli\u003esometimes allows \u003ccode\u003e0x0A-0D\u003c/code\u003e but fails to store them in the cookie value, aborts at other times\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eThanks\u003c/h3\u003e\n\u003cp\u003eI couldn\u0026#39;t have written this article without a bunch of help along the way. I\u0026#39;d like to thank:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePo-Ning Tseng, for helping me investigate this issue in the first place\u003c/li\u003e\n\u003cli\u003eDan Veditz at Mozilla, for his inexhaustible knowledge and endless kindness\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://frederikbraun.de/\"\u003eFrederik Braun\u003c/a\u003e, for his helpful early feedback\u003c/li\u003e\n\u003cli\u003eSteven Bingler at Google, for pushing on getting this issue fixed\u003c/li\u003e\n\u003cli\u003ePeter Bowen, for his thoughts on how cookie processing probably should happen\u003c/li\u003e\n\u003cli\u003eChris Palmer and David Schinazi, for their insightful proofreading\u003c/li\u003e\n\u003cli\u003eStefan B√ºhler, who stumbled across some of this stuff \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=858215\"\u003eover a decade ago\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ekibwen on HackerNews, for pointing out the Rust crate situation\u003c/li\u003e\n\u003c/ul\u003e\n\n    \u003cp\u003e\n    [Category: \u003ca href=\"https://grayduck.mn/categories/#Standards\"\u003eStandards\u003c/a\u003e]\n    [Tags: \u003ca href=\"https://grayduck.mn/tags/#browser\"\u003eBrowser\u003c/a\u003e, \u003ca href=\"https://grayduck.mn/tags/#programming\"\u003eProgramming\u003c/a\u003e, \u003ca href=\"https://grayduck.mn/tags/#security\"\u003eSecurity\u003c/a\u003e]\n    \u003c/p\u003e\n\n  \u003c/article\u003e\n\n      \u003c/content\u003e\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "26 min read",
  "publishedTime": null,
  "modifiedTime": null
}
