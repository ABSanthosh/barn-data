{
  "id": "5da65158-a151-43af-8fcf-6b7185655d70",
  "title": "Using Erlang hot code updates",
  "link": "https://underjord.io/how-i-use-erlang-hot-code-updates.html",
  "description": "Comments",
  "author": "",
  "published": "Tue, 19 Nov 2024 20:29:03 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 3098,
  "excerpt": "One of the Erlang ecosystem's spiciest nerd snipes are hot code updates. Because it can do it. In ways that almost no other runtime can. I use Elixir which builds on Erlang and has the same capabilities.",
  "siteName": "Underjord",
  "favicon": "https://underjord.io/img/android-chrome-192x192.png",
  "text": "2024-11-19 Underjord is a tiny, wholesome team doing Elixir consulting and contract work. If you like the writing you should really try the code. See our services for more information. One of the Erlang ecosystem’s spiciest nerd snipes are hot code updates. Because it can do it. In ways that almost no other runtime can. I use Elixir which builds on Erlang and has the same capabilities. The standard way of doing Elixir releases via mix release does not support Erlang hot code updates. As in, it will not generate the necessary files for you. And if you do want to do it there are several blog posts you need to stitch together or you need to use the Erlang docs in great detail. Learn You Some Erlang has documented much of it of course. AppSignal also has a neat guide on hot code reloading in Elixir. Bryan Hunter and Chris Keathley are both people I listen when they speak because it tends to be interesting, challenging and something I just might not have heard before. Both have described hot code updates as something that people should learn and use. I imagine Whatsapp’s initial engineering crew would agree. They did pretty well. Of course we do use it. But mostly for trivial things. Anyone using IEx r MyModule or recompile are doing hot code updates. But reloading a module in development on you local machine doesn’t feel all that spicy. It is cool and useful but feels like an incremental compile or watcher/builder type of thing. I use it constantly with Nerves. When developing on an embedded Elixir device and needing to tune some numbers, or reworking a module, pasting into the IEx is faster than uploading new firmware and waiting for the reboot. I stop and start parts of the applications or just terminate the relevant GenServer if I need a state reset. I’ve also used it for remote devices over NervesHub’s built in web console that offers an IEx prompt. When debugging a misbehaving Real Time Clock it was pretty nice to just paste chunks of utility functions and relevant I2C-calls over to the device to get clear answers about what it was doing. I’d love to see more tooling for the full-blown delivery of hot code updates on top of Elixir’s mix release tooling. Or in the vein of the predecessor distillery. I don’t think there are any shortcuts for doing a correct hot code update. Much like database migrations they require care. And you’ll need to know how you dependencies react to hot code updates and many other interesting topics. This was just a quick one in case people are curious how Erlang’s hot code updates are actually used, day-to-day, in Elixir. If you have comments or questions you can find me on the fediverse via @lawik or email me at lars@underjord.io. Underjord is a 4 people team doing Elixir consulting and contract work. If you like the writing you should really try the code. See our services for more information. Note: Or try the videos on the YouTube channel.",
  "image": "https://underjord.io/img/preview.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"content\"\u003e\n\u003cmain\u003e\n    \u003chr/\u003e\n    \u003carticle\u003e\n        \n        \u003csmall\u003e2024-11-19\u003c/small\u003e\n        \u003cp\u003e\n            Underjord is a \u003ca href=\"https://underjord.io/team.html\"\u003etiny, wholesome team\u003c/a\u003e doing Elixir consulting and contract work. If\n            you\n            like\n            the writing you should really try the code. See our \u003ca href=\"https://underjord.io/services.html\"\u003eservices\u003c/a\u003e for more\n            information.\n        \u003c/p\u003e\n        \u003cp\u003eOne of the Erlang ecosystem’s spiciest nerd snipes are hot code updates. Because it can do it. In ways that almost no other runtime can.\u003c/p\u003e\n\u003cp\u003eI use Elixir which builds on Erlang and has the same capabilities.\u003c/p\u003e\n\u003cp\u003eThe standard way of doing Elixir releases via \u003ccode\u003emix release\u003c/code\u003e does not support Erlang hot code updates. As in, it will not generate the necessary files for you. And if you do want to do it there are several blog posts you need to stitch together or you need to use the Erlang docs in great detail. Learn You Some Erlang has \u003ca href=\"https://learnyousomeerlang.com/relups\"\u003edocumented much of it\u003c/a\u003e of course. AppSignal also has a neat guide on \u003ca href=\"https://blog.appsignal.com/2021/07/27/a-guide-to-hot-code-reloading-in-elixir.html\"\u003ehot code reloading in Elixir\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eBryan Hunter and Chris Keathley are both people I listen when they speak because it tends to be interesting, challenging and something I just might not have heard before. Both have described hot code updates as something that people should learn and use. I imagine Whatsapp’s initial engineering crew would agree. They did pretty well.\u003c/p\u003e\n\u003cp\u003eOf course we do use it. But mostly for trivial things.\u003c/p\u003e\n\u003cp\u003eAnyone using IEx \u003ccode\u003er MyModule\u003c/code\u003e or \u003ccode\u003erecompile\u003c/code\u003e are doing hot code updates. But reloading a module in development on you local machine doesn’t feel all that spicy. It is cool and useful but feels like an incremental compile or watcher/builder type of thing.\u003c/p\u003e\n\u003cp\u003eI use it constantly \u003ca href=\"https://underjord.io/unpacking-elixir-iot-embedded-nerves.html\"\u003ewith Nerves\u003c/a\u003e. When developing on an embedded Elixir device and needing to tune some numbers, or reworking a module, pasting into the IEx is faster than uploading new firmware and waiting for the reboot. I stop and start parts of the applications or just terminate the relevant GenServer if I need a state reset.\u003c/p\u003e\n\u003cp\u003eI’ve also used it for remote devices over \u003ca href=\"https://github.com/nerves-hub/nerves_hub_web\"\u003eNervesHub\u003c/a\u003e’s built in web console that offers an IEx prompt. When debugging a misbehaving Real Time Clock it was pretty nice to just paste chunks of utility functions and relevant I2C-calls over to the device to get clear answers about what it was doing.\u003c/p\u003e\n\u003cp\u003eI’d love to see more tooling for the full-blown delivery of hot code updates on top of Elixir’s \u003ccode\u003emix release\u003c/code\u003e tooling. Or in the vein of the predecessor \u003ccode\u003edistillery\u003c/code\u003e. I don’t think there are any shortcuts for doing a correct hot code update. Much like database migrations they require care. And you’ll need to know how you dependencies react to hot code updates and many other interesting topics.\u003c/p\u003e\n\u003cp\u003eThis was just a quick one in case people are curious how Erlang’s hot code updates are actually used, day-to-day, in Elixir.\u003c/p\u003e\n\u003cp\u003eIf you have comments or questions you can find me on the fediverse via \u003ca href=\"https://twitter.com/lawik\"\u003e@lawik\u003c/a\u003e or email me at \u003ca href=\"mailto:lars@underjord.io\"\u003elars@underjord.io\u003c/a\u003e.\u003c/p\u003e\n\n        \u003cp\u003e\n            Underjord is a \u003ca href=\"https://underjord.io/team.html\"\u003e4 people team\u003c/a\u003e doing Elixir consulting and contract work. If you like\n            the writing you should really try the code. See our \u003ca href=\"https://underjord.io/services.html\"\u003eservices\u003c/a\u003e for more\n            information.\n        \u003c/p\u003e\n        \u003cp\u003e\n            Note: Or try the videos on \u003ca href=\"https://youtube.com/c/underjord\"\u003ethe YouTube\n                channel\u003c/a\u003e.\n        \u003c/p\u003e\n        \n    \u003c/article\u003e\n\n    \u003chr/\u003e\n\n    \n\n    \u003chr/\u003e\n\u003c/main\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": null,
  "modifiedTime": null
}
