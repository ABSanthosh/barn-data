{
  "id": "3cfdcf2c-67c9-434b-a50f-0f52db27456b",
  "title": "The most unhinged video wall, made out of Chromebooks",
  "link": "https://varun.ch/posts/videowall/",
  "description": "Comments",
  "author": "",
  "published": "Sat, 01 Mar 2025 17:54:55 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 15518,
  "excerpt": "Web developer and cybersecurity researcher",
  "siteName": "varun.ch",
  "favicon": "",
  "text": "Saturday, March 1, 2025 #writeups This is the story of our three year long journey to turn a fleet of laptops into what can only be described as the world’s most unhinged video wall. This project was a collaboration with my friend Aksel Salmi. I was responsible for the software, and he designed the incredible hardware, see his blog to learn about the unexpectedly complex hardware needed to mount these dismantled computers[1]. About three years ago, my Design teacher (The amazing Mr. Bush) came to us with an idea - our school was about to dispose of its fleet of Chromebooks, and he was wondering if we could build anything with them. Meet the Lenovo ThinkPad 11e # The Lenovo ThinkPad 11e could very well be the world’s worst laptop. It is also the standard-issue school laptop that reinforced eight-year-old me’s interest in computers. We used this school-issued laptop through primary and the start of middle school. This is me in 5th grade using a school laptop while working on my PYP Exhibition project (a game on Scratch)[2]. Despite my emotional connection to them, today these devices are, for all intents and purposes, junk. And for that reason, my school began the process of replacing them (with marginally less junky laptops) These things don’t receive software updates from Google anymore, they struggle loading most webpages and to top it off, they’re tied to some long forgotten Enterprise Enrolment system, so they can’t even be used without a school Google account. What is a video wall? # A video wall is a large display made up of multiple screens arranged together to create a single, seamless display across all the screens. In the case of our project, we decided to try reusing the laptop screens to build a video wall. Can we drive the screens using separate hardware? # Our first idea was to harvest just the laptop display panels and somehow drive them using a powerful computer that could power the 10 screens simultaneously. We did not go this route (due to the fact that we had no idea what we were doing, and a quick estimate of the time and costs involved scared us away). Okay, before we try anything else, let’s just try synchronising a video across two devices # Since the screens were attached to perfectly functional laptops, it was quickly apparent that we’d probably be better off letting each screen be driven independently by their own laptop motherboards. At this point, there were still many questions (eg. how were we going to do that on Chromebooks), so we put aside that challenge to focus on the new issue this brings up: Can we synchronise a single video across multiple computers? Our experiments brought us to the school’s computer lab, where we experimented with VLC’s streaming abilities to get a stream synchronised across devices on a single network, but this posed two challenges: This system is not designed for videos being perfectly in sync, nor was it designed for two clients to receive different video inputs (because the whole point of the video wall is to display one loooooong video across the screens, not 10 repeat copies of the same video). We were stuck here until my ““breakthrough””. For context, the story is currently in 2022. Two years earlier, I had been locked up in my room due to the COVID lockdown, and in this time, I had loads of fun building random realtime web apps, like a chat app and multiplayer drawing game. These apps worked thanks to socket.io, a (primarily) WebSocket based library that allows for low-latency, bi-directional communication. Screenshot of a chat site I made to pass the time during the 2020 lockdown I realised that my best bet to get videos synchronised would be by using a web page that used socket.io to sync the video playback across clients. Yes, there are better approaches, but simply doing something like this worked unreasonably well, all things considered. \u003cvideo src=\"...\" id=\"video\"\u003e Your browser does not support the video tag. \u003c/video\u003e const socket = io(); // ... socket.on(\"play\", () =\u003e { const videoElement = document.getElementById(\"video\"); videoElement.play(); }); I named this ExpressJS server/client system c-sync[3]. Thanks to c-sync (and tons of tinkering), after some time we had decently synchronised videos across computer screens through a webpage (or at least it seemed like it, testing on these desktop computers) As it turns out, in reality, the Chromebooks are too slow for this to be a reliable approach to synchronising playback, and tiny discrepancies in loading times + latency + system clocks etc. lead to videos not being synchronised. Now, I’m not entirely sure why this works so well, but I came up with a ridiculous solution by accident. When videos reach the end of playback, each client emits the start event. video.onended = () =\u003e { socket.emit(\"start\"); // yes seriously, this is all I needed }; This means that the slowest computers hold back the fastest computers, and get the chance to load the videos. This also means looping can be a very slightly jittery process (with each screen receiving 10 ‘start’ events), but as long as the first couple frames of the video are identical, nobody would even notice. Sidenote: why not schedule with timestamps Modern computers have clocks you can rely on to be extremely precise. This plus regular NTP synchronisations means a reasonable person might just try to ensure the full video is cached, then just send a 'start' event to each client that schedules the client to start playback at a given timestamp. Unfortunately, these Chromebooks could not reliably keep track of time within milliseconds of each other, so this method didn't work for us. Using this method, we have nearly perfectly synchronised video playback, and can play any video on any screen (meaning we can split a wide video into 10 segments, and each computer displays its respective part, all in sync with eachother) Putting it together # A disassembled Chromebook open to a test video We reached this stage within a month or two. Believe it or not, this project still had three years of work ahead of us. The biggest issue was Chromebook software. At this point, we had a website that we could manually open on each laptop to display a fullscreen synchronised video. Ideally, we would want this to be entirely automated, so that as soon as a Chromebook receives power, it boots up automagically to the c-sync client page. Unfortunately, right now, booting the Chromebook would just take you to a Google login page (and one that was locked to our school domain to boot). Also, just to add insult to injury, when batteries are removed, the laptops don’t turn themselves on when they receive power (you have to hold down the power button) This meant that our next step would have to be to replace ChromeOS with something else. The ‘ChromeOS Firmware Recovery Script’ is a magical piece of technology that somehow supports many different Chromebook motherboards. Ours was called ‘GLIMMER’. We just had to enter the built-in ‘Recovery Mode’, enable ‘Developer Mode’ and use the ChromeOS Shell to run the script. Now we’re basically on the home stretch. All we needed to do was pick up some stable Linux distro, write a hacky startup script that loads up Chromium and simulates the keystrokes to fullscreen the video and we’re done! We ran in to two main issues: Some Chromebooks (roughly half of our working laptops) would refuse to enter developer mode due to the enterprise enrolment, and while we were able to get the other half onto a Linux distro, video playback would consistently freeze after some time (actually they would lock up entirely). It took us several months of on-and-off experimentation to figure out what to do. Essentially, the solution was to overwrite the entire default firmware with coreboot (which is also possible using MrChromebox’s script). We just needed to remove the ‘Write Protection’ screw from each laptop motherboard, and this seemed to bypass the enrolment too. Lenovo’s handy Write Protection screw diagram Doing this for 20+ computers was slow and tedious. We only really needed the WiFi, motherboard and screen in working condition, but we decided to be (mostly) gentle and keep the laptops looking like laptops so that we had a keyboard and mouse for the rest of the installation steps. By the end, we got quite efficient at removing the write protection screw After ‘corebooting’ the Chromebooks, we were also pleasantly surprised to find out that ‘Wake on AC’ was a feature of the firmware, and that video playback no longer randomly breaks. By this point we had enough non-bricked Chromebooks left over for a line of 10 screens and a handful of spares. The Final Stretch # Now we’re really on the final stretch. Aksel worked on the mounting hardware, which you can read about on his blog, while I worked on figuring out a less flaky way to ‘boot to a webpage’ than the keystroke simulation and startup script I bodged together. I previously used the aptly named ‘FullPageOS’ for a different project (which I briefly mention in my TED talk, which you should watch), but it doesn’t run on x86 hardware. I landed on using ‘Porteus Kiosk’, which is just a minimal Linux distro that opens a fullscreen Chromium browser with all the correct flags for hands-off usage (eg. allowing video playback without user interaction) This honestly worked totally fine, but left me unsatisfied for two reasons. Firstly, I didn’t like how we couldn’t customise the splash screen, so our project would be forever stamped with the Porteus logo on every startup (which would be every morning). And secondly, in search of a better issue to justify the extra work, I realised we can’t remotely do anything to the installations (eg. changing the page URL) without re-doing them, which would be definitely a problem once these get mounted on the wall. For those good reasons, I embarked on the journey of building ‘my own distro’ that we could install on the laptops. The system should start with something minimal (no desktop environment), and have an elegant script to autostart a kiosk mode Chromium instance. I first tried NixOS before quickly realising there was no way it would work with the tiny amount of storage on these Chromebooks (and it failed to install with every single attempt). Then I gave up, started with a Debian minimal install and just wrote a script that would provision a client (generate a ‘KIOSK_ID’, set its hostname to csync-client-$KIOSK_ID, connect to the school’s WiFi, create users/permissions and set up openbox to autostart a fullscreen kiosk mode Chromium). Then after attempting to repeat this on a second machine, I realised I would be wasting so much time (installing Debian is very ‘hands-on’ - you need to press lots of buttons), and I discovered ‘FAI - Fully Automatic Installation’ and the web FAI.me tool. To cut a long story short[4], after redoing everything for the millionth time, I had a single USB that I can plug in to any ‘corebooted’ Chromebook which provisions it as a c-sync client. Woohoo! I also built out a ‘controller’ for c-sync which lets us manage connected clients and assign them videos. After a successful three day stress test where the playback remained butter-smooth (and I sacrificed my ability to sleep for the greater good of testing with the backlight on), we were ready to mount these laptops on the wall. Mounting # The mounting is mostly Aksel’s thing, so I implore you to read his blog, but here are some cool photos from the process. (also aren’t our cable splices so pretty and not terrifying?? 😁❤️) An early iteration of the mounting backplate using a laser cut acrylic piece Aksel designed a pretty awesome looking backplate to mount the motherboard, which hangs on cleats on the walls. The displays are then held in place with clampy things. This is black magic to me. Everything laid out Preparing some displays and motherboards We decided to splice together power cables so that each power supply could power two computers. Send any complaints to the pager on my contact page Nearly there! One last thing… # After we painstakingly mounted everything, I realised something sort-of important. Computers generate heat. Somewhere along the way of wiping away the firmwares, the laptop fans stopped spinning, which meant things get quite hot quite quickly. I had to figure out a way to get those working again before we could comfortably leave this up 24/7 (well, actually 12/7). Embedded Controllers # You can apparently interface with the ‘ChromeOS Embedded Controller’ using a tool called ectool, which should allow you to manually set fan speeds (among other things). The online documentation for this is lacking, and there’s apparently a slightly different ectool from coreboot and from Google directly. None of this made much sense at all to me, and no built ectool binary I could find would work. At some point, I found a dead link, but thanks to the magic of the Wayback Machine, I was able to get my hands on something that wouldn’t immediately crash. By some miracle, this version of the tool actually works perfectly fine at setting fan speeds, and after some testing, I found some goldilocks values that balance noise and temperature. Aside: Making Videos for the Thing # As it turns out, making such a wide video is actually not easy. Each display has a resolution of 1366× 768, and very few pieces of software will let you edit a 13660 × 768 video. Final Cut Pro and Blender are the only programs we were able to do anything this wide in. Blender is one of the greatest pieces of software ever created (alongside c-sync) Then it’s just a matter of rendering the wide video and splitting it into 10 segments. #!/bin/bash # incase anyone ever has this insane use case again input_video=\"input.mp4\" prefix=\"v8\" width=1366 height=768 segments=10 for ((i=1; i\u003c=segments; i++)); do x_offset=$(((i - 1) * width)) output_file=\"${prefix}-${i}.mp4\" ffmpeg -i \"$input_video\" -vf \"crop=$width:$height:$x_offset:0\" -c:a copy \"$output_file\" done echo \"Splitting complete!\" In all its glory # Boot Sequence and ‘Self Calibration’ # Synced videos! # Now there’s an enclosure and cable routing! # Yes, it’s imperfect # Our video wall is imperfect. TN panel viewing angles suck, and the screens vary in colours and stuff. Yes, the synchronisation isn’t perfect, and yes, I’m sure there were better alternatives for nearly every decision we made along the way. Yet I love our video wall, despite how absurdly weird it is. It’s a perfect representation of the iterative design process and a true testament to teamwork and collaboration. We turned E-Waste into something interesting. And maybe, just maybe, the real video wall was the friends we made along the way. This project was made possible by the incredible work of so many people. Aside from my collaborator Aksel Salmi, our Design teacher Daniel Bush played a huge role in guiding us through the project. Additionally, I wanted to thank the coreboot project and Matt ‘MrChromebox’ DeVillier for putting together the firmware and tools that allowed any of this to work. I would also like to thank Thomas Lange of the FAI project for his help in building the FAI.me based automated installer that saved us so many many many hours, as well as his support over email. As silly as it sounds, this project was a backbone in my high-school experience. We hacked away at it every Monday for the past few years, and we grew up along the way too.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\n\n\n\u003cul\u003e\n\t\u003cli\u003e\u003ctime datetime=\"2025-03-01\"\u003eSaturday, March 1, 2025\u003c/time\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003ca href=\"https://varun.ch/tags/writeups/\"\u003e#writeups\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is the story of our three year long journey to turn a fleet of laptops into what can only be described as the world’s most unhinged video wall.\u003c/p\u003e\n\u003cp\u003eThis project was a collaboration with my friend \u003ca href=\"https://akselsalmi.com\"\u003eAksel Salmi\u003c/a\u003e. I was responsible for the software, and he designed the incredible hardware, see \u003ca href=\"https://akselsalmi.com/blog/videowall\"\u003ehis blog\u003c/a\u003e to learn about the unexpectedly complex hardware needed to mount these dismantled computers\u003ca href=\"#common-app-note\" id=\"common-app-ref\" aria-describedby=\"footnotes-label\" role=\"doc-noteref\"\u003e[1]\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/videowall-crop.avif 2048w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/videowall-crop.webp 2048w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/videowall-crop.jpeg\" alt=\"A cropped photo of the final video wall, 10 wall mounted laptop displays in sync\" width=\"2048\" height=\"382\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/barebones.avif 1280w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/barebones.webp 1280w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/barebones.jpeg\" alt=\"Two displays plugged into two mounted motherboards making up a part of the video wall\" width=\"1280\" height=\"720\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eAbout three years ago, my Design teacher (The amazing Mr. Bush) came to us with an idea - our school was about to dispose of its fleet of Chromebooks, and he was wondering if we could build anything with them.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/fleet.avif 766w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/fleet.webp 766w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/fleet.png\" alt=\"Tons of Chromebooks\" width=\"766\" height=\"536\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003ch2 id=\"meet-the-lenovo-thinkpad-11e\" tabindex=\"-1\"\u003eMeet the Lenovo ThinkPad 11e \u003ca href=\"#meet-the-lenovo-thinkpad-11e\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe Lenovo ThinkPad 11e could very well be the world’s worst laptop. It is also the standard-issue school laptop that reinforced eight-year-old me’s interest in computers.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/5th-grade.avif 1280w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/5th-grade.webp 1280w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/5th-grade.jpeg\" alt=\"Picture of me using a ThinkPad 11e in 5th grade\" width=\"1280\" height=\"853\"/\u003e\u003c/picture\u003e\n\u003cem\u003eWe used this school-issued laptop through primary and the start of middle school. This is me in 5th grade using a school laptop while working on my PYP Exhibition project (a game on Scratch)\u003ca href=\"#scratch-note\" id=\"scratch-ref\" aria-describedby=\"footnotes-label\" role=\"doc-noteref\"\u003e[2]\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eDespite my emotional connection to them, today these devices are, for all intents and purposes, junk. And for that reason, my school began the process of replacing them (with marginally less junky laptops)\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/thinkpad-product-image.avif 1500w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/thinkpad-product-image.webp 1500w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/thinkpad-product-image.png\" alt=\"Product photo of Lenovo ThinkPad 11e Chromebook\" width=\"1500\" height=\"1500\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003eThese things don’t receive software updates from Google anymore, they struggle loading most webpages and to top it off, they’re tied to some long forgotten Enterprise Enrolment system, so they can’t even be used without a school Google account.\u003c/p\u003e\n\u003ch2 id=\"what-is-a-video-wall\" tabindex=\"-1\"\u003eWhat is a video wall? \u003ca href=\"#what-is-a-video-wall\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eA video wall is a large display made up of multiple screens arranged together to create a single, seamless display across all the screens. In the case of our project, we decided to try reusing the laptop screens to build a video wall.\u003c/p\u003e\n\u003ch2 id=\"can-we-drive-the-screens-using-separate-hardware\" tabindex=\"-1\"\u003eCan we drive the screens using separate hardware? \u003ca href=\"#can-we-drive-the-screens-using-separate-hardware\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eOur first idea was to harvest just the laptop display panels and somehow drive them using a powerful computer that could power the 10 screens simultaneously. We did not go this route (due to the fact that we had no idea what we were doing, and a quick estimate of the time and costs involved scared us away).\u003c/p\u003e\n\u003ch2 id=\"okay-before-we-try-anything-else-let-s-just-try-synchronising-a-video-across-two-devices\" tabindex=\"-1\"\u003eOkay, before we try anything else, let’s just try synchronising a video across two devices \u003ca href=\"#okay-before-we-try-anything-else-let-s-just-try-synchronising-a-video-across-two-devices\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSince the screens were attached to perfectly functional laptops, it was quickly apparent that we’d probably be better off letting each screen be driven independently by their own laptop motherboards.\u003c/p\u003e\n\u003cp\u003eAt this point, there were still many questions (eg. how were we going to do that on \u003cem\u003eChromebooks\u003c/em\u003e), so we put aside that challenge to focus on the new issue this brings up: Can we synchronise a single video across multiple computers?\u003c/p\u003e\n\u003cp\u003eOur experiments brought us to the school’s computer lab, where we experimented with VLC’s streaming abilities to get a stream synchronised across devices on a single network, but this posed two challenges: This system is not designed for videos being \u003cem\u003eperfectly\u003c/em\u003e in sync, nor was it designed for two clients to receive different video inputs (because the whole point of the video wall is to display one loooooong video across the screens, not 10 repeat copies of the same video).\u003c/p\u003e\n\u003cp\u003eWe were stuck here until my ““breakthrough””.\u003c/p\u003e\n\u003cp\u003eFor context, the story is currently in 2022. Two years earlier, I had been locked up in my room due to the COVID lockdown, and in this time, I had loads of fun building random realtime web apps, like a chat app and multiplayer drawing game. These apps worked thanks to \u003ccode\u003esocket.io\u003c/code\u003e, a (primarily) WebSocket based library that allows for low-latency, bi-directional communication.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/chat-site.avif 1920w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/chat-site.webp 1920w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/chat-site.png\" alt=\"Screenshot of socket.io based chat site\" width=\"1920\" height=\"968\"/\u003e\u003c/picture\u003e\n\u003cem\u003eScreenshot of a chat site I made to pass the time during the 2020 lockdown\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eI realised that my best bet to get videos synchronised would be by using a web page that used \u003ccode\u003esocket.io\u003c/code\u003e to sync the video playback across clients. Yes, there are better approaches, but simply doing something like this worked unreasonably well, all things considered.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003evideo\u003c/span\u003e \u003cspan\u003esrc\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e...\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e \u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003evideo\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\t  Your browser does not support the video tag.\n\u003cspan\u003e\u003cspan\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003evideo\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u003cspan\u003econst\u003c/span\u003e socket \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eio\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e// ...\u003c/span\u003e\n\nsocket\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eon\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;play\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\t\u003cspan\u003econst\u003c/span\u003e videoElement \u003cspan\u003e=\u003c/span\u003e document\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetElementById\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;video\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\tvideoElement\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eplay\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI named this ExpressJS server/client system \u003ccode\u003ec-sync\u003c/code\u003e\u003ca href=\"#c-sync-note\" id=\"c-sync-ref\" aria-describedby=\"footnotes-label\" role=\"doc-noteref\"\u003e[3]\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThanks to c-sync (and tons of tinkering), after some time we had decently synchronised videos across computer screens through a webpage (or at least it seemed like it, testing on these desktop computers)\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/3-screen-sync.avif 1280w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/3-screen-sync.webp 1280w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/3-screen-sync.jpeg\" alt=\"\" width=\"1280\" height=\"720\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003eAs it turns out, in reality, the Chromebooks are too slow for this to be a reliable approach to synchronising playback, and tiny discrepancies in loading times + latency + system clocks etc. lead to videos not being synchronised.\u003c/p\u003e\n\u003cp\u003eNow, I’m not entirely sure \u003cem\u003ewhy\u003c/em\u003e this works so well, but I came up with a ridiculous solution by accident. When videos reach the end of playback, each client emits the start event.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003evideo\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonended\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n\tsocket\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eemit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;start\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\t\u003cspan\u003e// yes seriously, this is all I needed\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis means that the slowest computers hold back the fastest computers, and get the chance to load the videos. This also means looping can be a very slightly jittery process (with each screen receiving 10 ‘start’ events), but as long as the first couple frames of the video are identical, nobody would even notice.\u003c/p\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\nSidenote: why not schedule with timestamps\n\u003c/summary\u003e\nModern computers have clocks you can rely on to be extremely precise. This plus regular NTP synchronisations means a reasonable person might just try to ensure the full video is cached, then just send a \u0026#39;start\u0026#39; event to each client that schedules the client to start playback at a given timestamp. Unfortunately, these Chromebooks could not reliably keep track of time within milliseconds of each other, so this method didn\u0026#39;t work for us.\n\u003c/details\u003e\n\u003cp\u003eUsing this method, we have nearly perfectly synchronised video playback, and can play any video on any screen (meaning we can split a wide video into 10 segments, and each computer displays its respective part, all in sync with eachother)\u003c/p\u003e\n\u003ch2 id=\"putting-it-together\" tabindex=\"-1\"\u003ePutting it together \u003ca href=\"#putting-it-together\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/chromebook-parts.avif 1016w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/chromebook-parts.webp 1016w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/chromebook-parts.jpeg\" alt=\"Bare laptop motherboard, keyboard and screen\" width=\"1016\" height=\"1280\"/\u003e\u003c/picture\u003e\n\u003cem\u003eA disassembled Chromebook open to a test video\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWe reached this stage within a month or two. Believe it or not, this project still had three years of work ahead of us. The biggest issue was Chromebook software. At this point, we had a website that we could manually open on each laptop to display a fullscreen synchronised video.\u003c/p\u003e\n\u003cp\u003eIdeally, we would want this to be entirely automated, so that as soon as a Chromebook receives power, it boots up automagically to the c-sync client page. Unfortunately, right now, booting the Chromebook would just take you to a Google login page (and one that was locked to our school domain \u003cem\u003eto boot\u003c/em\u003e).\u003c/p\u003e\n\u003cp\u003eAlso, just to add insult to injury, when batteries are removed, the laptops don’t turn themselves on when they receive power (you have to hold down the power button)\u003c/p\u003e\n\u003cp\u003eThis meant that our next step would have to be to replace ChromeOS with something else.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"https://docs.mrchromebox.tech/docs/fwscript.html#overview\"\u003e‘ChromeOS Firmware Recovery Script’\u003c/a\u003e is a magical piece of technology that somehow supports many different Chromebook motherboards. Ours was called ‘GLIMMER’. We just had to enter the built-in ‘Recovery Mode’, enable ‘Developer Mode’ and use the ChromeOS Shell to run the script.\u003c/p\u003e\n\u003cp\u003eNow we’re basically on the home stretch. All we needed to do was pick up some stable Linux distro, write a hacky startup script that loads up Chromium and simulates the keystrokes to fullscreen the video and we’re done!\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/xfce-chromebooks.avif 1280w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/xfce-chromebooks.webp 1280w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/xfce-chromebooks.jpeg\" alt=\"\" width=\"1280\" height=\"960\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003eWe ran in to two main issues: Some Chromebooks (roughly half of our working laptops) would refuse to enter developer mode due to the enterprise enrolment, and while we were able to get the other half onto a Linux distro, video playback would consistently freeze after some time (actually they would lock up entirely).\u003c/p\u003e\n\u003cp\u003eIt took us several months of on-and-off experimentation to figure out what to do. Essentially, the solution was to overwrite the entire default firmware with \u003ccode\u003ecoreboot\u003c/code\u003e (which is also possible using MrChromebox’s script). We just needed to remove the ‘Write Protection’ screw from each laptop motherboard, and this seemed to bypass the enrolment too.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/write-protection-diagram.avif 1155w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/write-protection-diagram.webp 1155w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/write-protection-diagram.png\" alt=\"Write protection screw diagram\" width=\"1155\" height=\"833\"/\u003e\u003c/picture\u003e\n\u003cem\u003eLenovo’s handy Write Protection screw diagram\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eDoing this for 20+ computers was slow and tedious. We only really needed the WiFi, motherboard and screen in working condition, but we decided to be (mostly) gentle and keep the laptops looking like laptops so that we had a keyboard and mouse for the rest of the installation steps.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/remove-write-protection-screw-with-this-easy-trick.avif 1536w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/remove-write-protection-screw-with-this-easy-trick.webp 1536w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/remove-write-protection-screw-with-this-easy-trick.jpeg\" alt=\"Efficiently removing write protection screw by bending plastic enclsoure\" width=\"1536\" height=\"2048\"/\u003e\u003c/picture\u003e\n\u003cem\u003eBy the end, we got quite efficient at removing the write protection screw\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAfter ‘corebooting’ the Chromebooks, we were also pleasantly surprised to find out that ‘Wake on AC’ was a feature of the firmware, and that video playback no longer randomly breaks. By this point we had enough non-bricked Chromebooks left over for a line of 10 screens and a handful of spares.\u003c/p\u003e\n\u003ch2 id=\"the-final-stretch\" tabindex=\"-1\"\u003eThe Final Stretch \u003ca href=\"#the-final-stretch\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNow we’re really on the final stretch. Aksel worked on the mounting hardware, which you can \u003ca href=\"https://akselsalmi.com/blog/videowall\"\u003eread about on his blog\u003c/a\u003e, while I worked on figuring out a less flaky way to ‘boot to a webpage’ than the keystroke simulation and startup script I bodged together.\u003c/p\u003e\n\u003cp\u003eI previously used \u003ca href=\"https://github.com/guysoft/FullPageOS\"\u003ethe aptly named ‘FullPageOS’\u003c/a\u003e for a different project (which I briefly mention in \u003ca href=\"https://youtu.be/gzc1p_QlO2I?t=457\"\u003emy TED talk, which you should watch\u003c/a\u003e), but it doesn’t run on x86 hardware.\u003c/p\u003e\n\u003cp\u003eI landed on using ‘Porteus Kiosk’, which is just a minimal Linux distro that opens a fullscreen Chromium browser with all the correct flags for hands-off usage (eg. allowing video playback without user interaction)\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/porteus.avif 768w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/porteus.webp 768w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/porteus.jpeg\" alt=\"Dismantled laptop with Porteus installer\" width=\"768\" height=\"1024\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003eThis honestly worked totally fine, but left me unsatisfied for two reasons. Firstly, I didn’t like how we couldn’t customise the splash screen, so our project would be forever stamped with the Porteus logo on every startup (which would be every morning). And secondly, in search of a better issue to justify the extra work, I realised we can’t remotely do anything to the installations (eg. changing the page URL) without re-doing them, which would be definitely a problem once these get mounted on the wall.\u003c/p\u003e\n\u003cp\u003eFor those good reasons, I embarked on the journey of building ‘my own distro’ that we could install on the laptops. The system should start with something minimal (no desktop environment), and have an elegant script to autostart a kiosk mode Chromium instance.\u003c/p\u003e\n\u003cp\u003eI first tried NixOS before quickly realising there was no way it would work with the tiny amount of storage on these Chromebooks (and it failed to install with every single attempt).\u003c/p\u003e\n\u003cp\u003eThen I gave up, started with a Debian minimal install and just wrote a script that would provision a client (generate a ‘KIOSK_ID’, set its hostname to \u003ccode\u003ecsync-client-$KIOSK_ID\u003c/code\u003e, connect to the school’s WiFi, create users/permissions and set up \u003ccode\u003eopenbox\u003c/code\u003e to autostart a fullscreen kiosk mode Chromium).\u003c/p\u003e\n\u003cp\u003eThen after attempting to repeat this on a second machine, I realised I would be wasting so much time (installing Debian is very ‘hands-on’ - you need to press lots of buttons), and I discovered ‘FAI - Fully Automatic Installation’ and the web \u003ca href=\"https://fai-project.org/FAIme/\"\u003eFAI.me\u003c/a\u003e tool. To cut a long story short\u003ca href=\"#fai-note\" id=\"fai-ref\" aria-describedby=\"footnotes-label\" role=\"doc-noteref\"\u003e[4]\u003c/a\u003e, after redoing everything for the millionth time, I had a single USB that I can plug in to any ‘corebooted’ Chromebook which provisions it as a c-sync client. Woohoo!\u003c/p\u003e\n\u003cp\u003eI also built out a ‘controller’ for c-sync which lets us manage connected clients and assign them videos.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/c-sync-admin-tool.avif 1284w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/c-sync-admin-tool.webp 1284w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/c-sync-admin-tool.png\" alt=\"Screenshot of admin tool for c-sync showcasing connected clients\" width=\"1284\" height=\"2778\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/c-sync-admin-tool-2.avif 1284w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/c-sync-admin-tool-2.webp 1284w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/c-sync-admin-tool-2.png\" alt=\"Screenshot of admin tool for c-sync showcasing config options\" width=\"1284\" height=\"2778\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003eAfter a successful three day stress test where the playback remained butter-smooth (and I sacrificed my ability to sleep for the greater good of testing with the backlight on), we were ready to mount these laptops on the wall.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/stress-test-no-sleep.avif 1536w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/stress-test-no-sleep.webp 1536w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/stress-test-no-sleep.jpeg\" alt=\"Stress testing laptop video playback at night\" width=\"1536\" height=\"1417\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003ch2 id=\"mounting\" tabindex=\"-1\"\u003eMounting \u003ca href=\"#mounting\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe mounting is mostly Aksel’s thing, so \u003ca href=\"https://akselsalmi.com/blog/videowall\"\u003eI implore you to read his blog\u003c/a\u003e, but here are some cool photos from the process. (also aren’t our cable splices so pretty and not terrifying?? 😁❤️)\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/laser-cut.avif 2048w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/laser-cut.webp 2048w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/laser-cut.jpeg\" alt=\"A laser cut acrylic backplate\" width=\"2048\" height=\"1536\"/\u003e\u003c/picture\u003e\n\u003cem\u003eAn early iteration of the mounting backplate using a laser cut acrylic piece\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/artistic-mounting-hardware.avif 2048w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/artistic-mounting-hardware.webp 2048w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/artistic-mounting-hardware.jpeg\" alt=\"\" width=\"2048\" height=\"1536\"/\u003e\u003c/picture\u003e\n\u003cem\u003eAksel designed a pretty awesome looking backplate to mount the motherboard, which hangs on cleats on the walls. The displays are then held in place with clampy things. This is black magic to me.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/mounting-hardware.avif 1586w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/mounting-hardware.webp 1586w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/mounting-hardware.jpeg\" alt=\"Scattered mounting hardware\" width=\"1586\" height=\"900\"/\u003e\u003c/picture\u003e\n\u003cem\u003eEverything laid out\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/installations.avif 1280w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/installations.webp 1280w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/installations.jpeg\" alt=\"Scattered computer components in the workshop\" width=\"1280\" height=\"960\"/\u003e\u003c/picture\u003e\n\u003cem\u003ePreparing some displays and motherboards\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/splice.avif 2048w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/splice.webp 2048w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/splice.jpeg\" alt=\"Soldering cable splices\" width=\"2048\" height=\"1536\"/\u003e\u003c/picture\u003e\n\u003cem\u003eWe decided to splice together power cables so that each power supply could power two computers. Send any complaints to \u003ca href=\"https://varun.ch/contact\"\u003ethe pager on my contact page\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/drill.avif 1006w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/drill.webp 1006w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/drill.png\" alt=\"Drilling into the wall.\" width=\"1006\" height=\"651\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/cable-routing.avif 1280w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/cable-routing.webp 1280w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/cable-routing.jpeg\" alt=\"Cable routed through backplate\" width=\"1280\" height=\"960\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/on-wall.avif 2048w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/on-wall.webp 2048w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/on-wall.jpeg\" alt=\"Mounting hardware on wall\" width=\"2048\" height=\"1536\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/screen-clamps.avif 1750w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/screen-clamps.webp 1750w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/screen-clamps.jpeg\" alt=\"Clamps for screens\" width=\"1750\" height=\"1080\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/mid-mount.avif 1750w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/mid-mount.webp 1750w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/mid-mount.jpeg\" alt=\"\" width=\"1750\" height=\"1080\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/nearly-done.avif 2048w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/nearly-done.webp 2048w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/nearly-done.jpeg\" alt=\"All screens mounted\" width=\"2048\" height=\"1536\"/\u003e\u003c/picture\u003e\n\u003cem\u003eNearly there!\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"one-last-thing\" tabindex=\"-1\"\u003eOne last thing… \u003ca href=\"#one-last-thing\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAfter we painstakingly mounted everything, I realised something sort-of important. Computers generate heat. Somewhere along the way of wiping away the firmwares, the laptop fans stopped spinning, which meant things get quite hot quite quickly. I had to figure out a way to get those working again before we could comfortably leave this up 24/7 (well, actually 12/7).\u003c/p\u003e\n\u003ch3 id=\"embedded-controllers\" tabindex=\"-1\"\u003eEmbedded Controllers \u003ca href=\"#embedded-controllers\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eYou can apparently interface with the \u003ca href=\"https://chromeos.dev/en/posts/embedded-controller\"\u003e‘ChromeOS Embedded Controller’\u003c/a\u003e using a tool called \u003ccode\u003eectool\u003c/code\u003e, which should allow you to manually set fan speeds (among other things). The online documentation for this is lacking, and there’s apparently a slightly different \u003ccode\u003eectool\u003c/code\u003e from \u003ccode\u003ecoreboot\u003c/code\u003e and from Google directly. None of this made much sense at all to me, and no built \u003ccode\u003eectool\u003c/code\u003e binary I could find would work. At some point, I found a dead link, but \u003ca href=\"https://web.archive.org/web/*/https://tree123.org/files/utils/ectool\"\u003ethanks to the magic of the Wayback Machine\u003c/a\u003e, I was able to get my hands on something that wouldn’t immediately crash.\u003c/p\u003e\n\u003cp\u003eBy some miracle, this version of the tool actually works perfectly fine at setting fan speeds, and after some testing, I found some goldilocks values that balance noise and temperature.\u003c/p\u003e\n\u003ch2 id=\"aside-making-videos-for-the-thing\" tabindex=\"-1\"\u003eAside: Making Videos for the Thing \u003ca href=\"#aside-making-videos-for-the-thing\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAs it turns out, making such a wide video is actually not easy. Each display has a resolution of 1366× 768, and very few pieces of software will let you edit a 13660 × 768 video. Final Cut Pro and Blender are the only programs we were able to do anything this wide in.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/blender.avif 2032w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/blender.webp 2032w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/blender.png\" alt=\"Screenshot of Blender\" width=\"2032\" height=\"1167\"/\u003e\u003c/picture\u003e\n\u003cem\u003eBlender is one of the greatest pieces of software ever created (alongside c-sync)\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThen it’s just a matter of rendering the wide video and splitting it into 10 segments.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u003cspan\u003e#!/bin/bash\u003c/span\u003e\n\n\u003cspan\u003e# incase anyone ever has this insane use case again\u003c/span\u003e\n\n\u003cspan\u003einput_video\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;input.mp4\u0026#34;\u003c/span\u003e\n\u003cspan\u003eprefix\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;v8\u0026#34;\u003c/span\u003e\n\n\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e1366\u003c/span\u003e\n\u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e768\u003c/span\u003e\n\n\u003cspan\u003esegments\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e10\u003c/span\u003e\n\n\u003cspan\u003efor\u003c/span\u003e \u003cspan\u003e\u003cspan\u003e((\u003c/span\u003ei\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e i\u003cspan\u003e\u0026lt;=\u003c/span\u003esegments\u003cspan\u003e;\u003c/span\u003e i\u003cspan\u003e++\u003c/span\u003e\u003cspan\u003e))\u003c/span\u003e\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003edo\u003c/span\u003e\n    \u003cspan\u003ex_offset\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u003cspan\u003e$((\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003ei \u003cspan\u003e-\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e*\u003c/span\u003e width\u003cspan\u003e))\u003c/span\u003e\u003c/span\u003e\n    \u003cspan\u003eoutput_file\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003cspan\u003e${prefix}\u003c/span\u003e-\u003cspan\u003e${i}\u003c/span\u003e.mp4\u0026#34;\u003c/span\u003e\n\n    ffmpeg \u003cspan\u003e-i\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003cspan\u003e$input_video\u003c/span\u003e\u0026#34;\u003c/span\u003e \u003cspan\u003e-vf\u003c/span\u003e \u003cspan\u003e\u0026#34;crop=\u003cspan\u003e$width\u003c/span\u003e:\u003cspan\u003e$height\u003c/span\u003e:\u003cspan\u003e$x_offset\u003c/span\u003e:0\u0026#34;\u003c/span\u003e \u003cspan\u003e-c:a\u003c/span\u003e copy \u003cspan\u003e\u0026#34;\u003cspan\u003e$output_file\u003c/span\u003e\u0026#34;\u003c/span\u003e\n\u003cspan\u003edone\u003c/span\u003e\n\n\u003cspan\u003eecho\u003c/span\u003e \u003cspan\u003e\u0026#34;Splitting complete!\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"in-all-its-glory\" tabindex=\"-1\"\u003eIn all its glory \u003ca href=\"#in-all-its-glory\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003ch3 id=\"boot-sequence-and-self-calibration\" tabindex=\"-1\"\u003eBoot Sequence and ‘Self Calibration’ \u003ca href=\"#boot-sequence-and-self-calibration\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\n\n\n\u003ch3 id=\"synced-videos\" tabindex=\"-1\"\u003eSynced videos! \u003ca href=\"#synced-videos\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\n\u003ch3 id=\"now-there-s-an-enclosure-and-cable-routing\" tabindex=\"-1\"\u003eNow there’s an enclosure and cable routing! \u003ca href=\"#now-there-s-an-enclosure-and-cable-routing\"\u003e#\u003c/a\u003e\u003c/h3\u003e\n\n\u003ch2 id=\"yes-it-s-imperfect\" tabindex=\"-1\"\u003eYes, it’s imperfect \u003ca href=\"#yes-it-s-imperfect\"\u003e#\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eOur video wall is imperfect. TN panel viewing angles suck, and the screens vary in colours and stuff. Yes, the synchronisation isn’t \u003cem\u003eperfect\u003c/em\u003e, and yes, I’m sure there were better alternatives for nearly every decision we made along the way.\u003c/p\u003e\n\u003cp\u003eYet I love our video wall, despite how absurdly weird it is. It’s a perfect representation of the iterative design process and a true testament to teamwork and collaboration. We turned E-Waste into something interesting. And maybe, just maybe, the real video wall was the friends we made along the way.\u003c/p\u003e\n\u003cp\u003e\u003cpicture\u003e\u003csource type=\"image/avif\" srcset=\"https://varun.ch/posts/videowall/videowall-crop.avif 2048w\"/\u003e\u003csource type=\"image/webp\" srcset=\"https://varun.ch/posts/videowall/videowall-crop.webp 2048w\"/\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://varun.ch/posts/videowall/videowall-crop.jpeg\" alt=\"A cropped photo of the final video wall, 10 wall mounted laptop displays in sync\" width=\"2048\" height=\"382\"/\u003e\u003c/picture\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eThis project was made possible by the incredible work of so many people. Aside from my collaborator Aksel Salmi, our Design teacher Daniel Bush played a huge role in guiding us through the project.\u003c/p\u003e\n\u003cp\u003eAdditionally, I wanted to thank the \u003ca href=\"https://coreboot.org/\"\u003ecoreboot project\u003c/a\u003e and Matt ‘MrChromebox’ DeVillier for putting together \u003ca href=\"https://docs.mrchromebox.tech/\"\u003ethe firmware and tools\u003c/a\u003e that allowed any of this to work. I would also like to thank Thomas Lange of the \u003ca href=\"https://fai-project.org/\"\u003eFAI project\u003c/a\u003e for his help in building the FAI.me based automated installer that saved us so many many many hours, as well as his support over email.\u003c/p\u003e\n\u003cp\u003eAs silly as it sounds, this project was a backbone in my high-school experience. We hacked away at it every Monday for the past few years, and we grew up along the way too.\u003c/p\u003e\n\n\n\n\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": null,
  "modifiedTime": null
}
