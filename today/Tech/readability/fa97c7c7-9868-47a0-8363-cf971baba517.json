{
  "id": "fa97c7c7-9868-47a0-8363-cf971baba517",
  "title": "AAA Gaming on Asahi Linux",
  "link": "https://rosenzweig.io/blog/aaa-gaming-on-m1.html",
  "description": "Comments",
  "author": "",
  "published": "Thu, 10 Oct 2024 14:16:28 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 5149,
  "excerpt": "10 Oct 2024",
  "siteName": "",
  "favicon": "",
  "text": "10 Oct 2024Gaming on Linux on M1 is here! We’re thrilled to release our Asahi game playing toolkit, which integrates our Vulkan 1.3 drivers with x86 emulation and Windows compatibility. Plus a bonus: conformant OpenCL 3.0. Asahi Linux now ships the only conformant OpenGL®, OpenCL™, and Vulkan® drivers for this hardware. As for gaming… while today’s release is an alpha, Control runs well! Installation First, install Fedora Asahi Remix. Once installed, get the latest drivers with dnf upgrade --refresh \u0026\u0026 reboot. Then just dnf install steam and play. While all M1/M2-series systems work, most games require 16GB of memory due to emulation overhead. The stack Games are typically x86 Windows binaries rendering with DirectX, while our target is Arm Linux with Vulkan. We need to handle each difference: FEX emulates x86 on Arm. Wine translates Windows to Linux. DXVK and vkd3d-proton translate DirectX to Vulkan. There’s one curveball: page size. Operating systems allocate memory in fixed size “pages”. If an application expects smaller pages than the system uses, they will break due to insufficient alignment of allocations. That’s a problem: x86 expects 4K pages but Apple systems use 16K pages. While Linux can’t mix page sizes between processes, it can virtualize another Arm Linux kernel with a different page size. So we run games inside a tiny virtual machine using muvm, passing through devices like the GPU and game controllers. The hardware is happy because the system is 16K, the game is happy because the virtual machine is 4K, and you’re happy because you can play Fallout 4. Vulkan The final piece is an adult-level Vulkan driver, since translating DirectX requires Vulkan 1.3 with many extensions. Back in April, I wrote Honeykrisp, the only Vulkan 1.3 driver for Apple hardware. I’ve since added DXVK support. Let’s look at some new features. Tessellation Tessellation enables games like The Witcher 3 to generate geometry. The M1 has hardware tessellation, but it is too limited for DirectX, Vulkan, or OpenGL. We must instead tessellate with arcane compute shaders, as detailed in today’s talk at XDC2024. Geometry shaders Geometry shaders are an older, cruder method to generate geometry. Like tessellation, the M1 lacks geometry shader hardware so we emulate with compute. Is that fast? No, but geometry shaders are slow even on desktop GPUs. They don’t need to be fast – just fast enough for games like Ghostrunner. Enhanced robustness “Robustness” permits an application’s shaders to access buffers out-of-bounds without crashing the hardware. In OpenGL and Vulkan, out-of-bounds loads may return arbitrary elements, and out-of-bounds stores may corrupt the buffer. Our OpenGL driver exploits this definition for efficient robustness on the M1. Some games require stronger guarantees. In DirectX, out-of-bounds loads return zero, and out-of-bounds stores are ignored. DXVK therefore requires VK_EXT_robustness2, a Vulkan extension strengthening robustness. Like before, we implement robustness with compare-and-select instructions. A naïve implementation would compare a loaded index with the buffer size and select a zero result if out-of-bounds. However, our GPU loads are vector while arithmetic is scalar. Even if we disabled page faults, we would need up to four compare-and-selects per load. load R, buffer, index * 16 ulesel R[0], index, size, R[0], 0 ulesel R[1], index, size, R[1], 0 ulesel R[2], index, size, R[2], 0 ulesel R[3], index, size, R[3], 0 There’s a trick: reserve 64 gigabytes of zeroes using virtual memory voodoo. Since every 32-bit index multiplied by 16 fits in 64 gigabytes, any index into this region loads zeroes. For out-of-bounds loads, we simply replace the buffer address with the reserved address while preserving the index. Replacing a 64-bit address costs just two 32-bit compare-and-selects. ulesel buffer.lo, index, size, buffer.lo, RESERVED.lo ulesel buffer.hi, index, size, buffer.hi, RESERVED.hi load R, buffer, index * 16 Two instructions, not four. Next steps Sparse texturing is next for Honeykrisp, which will unlock more DX12 games. The alpha already runs DX12 games that don’t require sparse, like Cyberpunk 2077. While many games are playable, newer AAA titles don’t hit 60fps yet. Correctness comes first. Performance improves next. Indie games like Hollow Knight do run full speed. Beyond gaming, we’re adding general purpose x86 emulation based on this stack. For more information, see the FAQ. Today’s alpha is a taste of what’s to come. Not the final form, but enough to enjoy Portal 2 while we work towards “1.0”. Acknowledgements This work has been years in the making with major contributions from… Alyssa Rosenzweig Asahi Lina chaos_princess Davide Cavalca Dougall Johnson Ella Stanforth Faith Ekstrand Janne Grunau Karol Herbst marcan Mary Guillemard Neal Gompa Sergio López TellowKrinkle Teoh Han Hui Rob Clark Ryan Houdek … Plus hundreds of developers whose work we build upon, spanning the Linux, Mesa, Wine, and FEX projects. Today’s release is thanks to the magic of open source. We hope you enjoy the magic. Happy gaming. Back to home",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e \u003cheader\u003e\u003cp\u003e10 Oct 2024\u003c/p\u003e\u003c/header\u003e\u003cp\u003eGaming on Linux on M1 is here! We’re thrilled to release our Asahi game playing toolkit, which integrates our Vulkan 1.3 drivers with x86 emulation and Windows compatibility. Plus a bonus: conformant OpenCL 3.0.\u003c/p\u003e \u003cp\u003eAsahi Linux now ships the only conformant \u003ca href=\"https://www.khronos.org/conformance/adopters/conformant-products/opengl#submission_3470\"\u003eOpenGL®\u003c/a\u003e, \u003ca href=\"https://www.khronos.org/conformance/adopters/conformant-products/opencl#submission_433\"\u003eOpenCL™\u003c/a\u003e, and \u003ca href=\"https://www.khronos.org/conformance/adopters/conformant-products#submission_7910\"\u003eVulkan®\u003c/a\u003e drivers for this hardware. As for gaming… while today’s release is an alpha, \u003ca href=\"https://store.steampowered.com/app/870780/Control_Ultimate_Edition/\"\u003e\u003cstrong\u003eControl\u003c/strong\u003e\u003c/a\u003e runs well!\u003c/p\u003e \u003cfigure\u003e \u003ca href=\"https://rosenzweig.io/blog/Games-Asahi/Control-small.png\"\u003e\u003cimg src=\"https://rosenzweig.io/blog/Games-Asahi/Control-small.avif\" alt=\"Control\"/\u003e\u003c/a\u003e \u003c/figure\u003e \u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e \u003cp\u003eFirst, install \u003ca href=\"https://asahilinux.org/fedora/\"\u003eFedora Asahi Remix\u003c/a\u003e. Once installed, get the latest drivers with \u003ccode\u003ednf upgrade --refresh \u0026amp;\u0026amp; reboot\u003c/code\u003e. Then just \u003ccode\u003ednf install steam\u003c/code\u003e and play. While all M1/M2-series systems work, most games require 16GB of memory due to emulation overhead.\u003c/p\u003e \u003ch2 id=\"the-stack\"\u003eThe stack\u003c/h2\u003e \u003cp\u003eGames are typically x86 Windows binaries rendering with DirectX, while our target is Arm Linux with Vulkan. We need to handle each difference:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://fex-emu.com/\"\u003eFEX\u003c/a\u003e emulates x86 on Arm.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.winehq.org/\"\u003eWine\u003c/a\u003e translates Windows to Linux.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/doitsujin/dxvk\"\u003eDXVK\u003c/a\u003e and \u003ca href=\"https://github.com/HansKristian-Work/vkd3d-proton\"\u003evkd3d-proton\u003c/a\u003e translate DirectX to Vulkan.\u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThere’s one curveball: page size. Operating systems allocate memory in fixed size “pages”. If an application expects smaller pages than the system uses, they will break due to insufficient alignment of allocations. That’s a problem: x86 expects 4K pages but Apple systems use 16K pages.\u003c/p\u003e \u003cp\u003eWhile Linux can’t mix page sizes between processes, it \u003cem\u003ecan\u003c/em\u003e virtualize another Arm Linux kernel with a different page size. So we run games inside a tiny virtual machine using \u003ca href=\"https://github.com/AsahiLinux/muvm\"\u003emuvm\u003c/a\u003e, passing through devices like the GPU and game controllers. The hardware is happy because the system is 16K, the game is happy because the virtual machine is 4K, and you’re happy because you can play \u003ca href=\"https://store.steampowered.com/app/377160/Fallout_4/\"\u003e\u003cstrong\u003eFallout 4\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e \u003cfigure\u003e \u003ca href=\"https://rosenzweig.io/blog/Games-Asahi/Fallout4-small.png\"\u003e\u003cimg src=\"https://rosenzweig.io/blog/Games-Asahi/Fallout4-small.avif\" alt=\"Fallout 4\"/\u003e\u003c/a\u003e \u003c/figure\u003e \u003ch2 id=\"vulkan\"\u003eVulkan\u003c/h2\u003e \u003cp\u003eThe final piece is an adult-level Vulkan driver, since translating DirectX requires Vulkan 1.3 with many extensions. Back in April, I wrote \u003ca href=\"https://rosenzweig.io/blog/vk13-on-the-m1-in-1-month.html\"\u003eHoneykrisp\u003c/a\u003e, the only Vulkan 1.3 driver for Apple hardware. I’ve since added DXVK support. Let’s look at some new features.\u003c/p\u003e \u003ch3 id=\"tessellation\"\u003eTessellation\u003c/h3\u003e \u003cp\u003eTessellation enables games like \u003ca href=\"https://store.steampowered.com/app/292030/The_Witcher_3_Wild_Hunt/\"\u003e\u003cstrong\u003eThe Witcher 3\u003c/strong\u003e\u003c/a\u003e to generate geometry. The M1 has hardware tessellation, but it is too limited for DirectX, Vulkan, or OpenGL. We must instead tessellate with arcane compute shaders, as detailed in \u003ca href=\"https://www.youtube.com/live/pDsksRBLXPk\"\u003etoday’s talk at XDC2024\u003c/a\u003e.\u003c/p\u003e \u003cfigure\u003e \u003ca href=\"https://rosenzweig.io/blog/Games-Asahi/Witcher3-small.png\"\u003e\u003cimg src=\"https://rosenzweig.io/blog/Games-Asahi/Witcher3-small.avif\" alt=\"The Witcher 3\"/\u003e\u003c/a\u003e \u003c/figure\u003e \u003ch3 id=\"geometry-shaders\"\u003eGeometry shaders\u003c/h3\u003e \u003cp\u003eGeometry shaders are an older, cruder method to generate geometry. Like tessellation, the M1 lacks geometry shader hardware so we emulate with compute. Is that fast? No, but geometry shaders are slow \u003ca href=\"http://www.joshbarczak.com/blog/?p=667\"\u003eeven on desktop GPUs\u003c/a\u003e. They don’t need to be fast – just fast enough for games like \u003ca href=\"https://store.steampowered.com/app/1139900/Ghostrunner/\"\u003e\u003cstrong\u003eGhostrunner\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e \u003cfigure\u003e \u003ca href=\"https://rosenzweig.io/blog/Games-Asahi/Ghostrunner-small.png\"\u003e\u003cimg src=\"https://rosenzweig.io/blog/Games-Asahi/Ghostrunner-small.avif\" alt=\"Ghostrunner\"/\u003e\u003c/a\u003e \u003c/figure\u003e \u003ch3 id=\"enhanced-robustness\"\u003eEnhanced robustness\u003c/h3\u003e \u003cp\u003e“Robustness” permits an application’s shaders to access buffers out-of-bounds without crashing the hardware. In OpenGL and Vulkan, out-of-bounds loads may return arbitrary elements, and out-of-bounds stores may corrupt the buffer. Our OpenGL driver \u003ca href=\"https://rosenzweig.io/blog/conformant-gl46-on-the-m1.html\"\u003eexploits this definition\u003c/a\u003e for efficient robustness on the M1.\u003c/p\u003e \u003cp\u003eSome games require stronger guarantees. In DirectX, out-of-bounds loads return zero, and out-of-bounds stores are ignored. DXVK therefore requires \u003ca href=\"https://docs.vulkan.org/guide/latest/robustness.html#_vk_ext_robustness2\"\u003e\u003ccode\u003eVK_EXT_robustness2\u003c/code\u003e\u003c/a\u003e, a Vulkan extension strengthening robustness.\u003c/p\u003e \u003cp\u003eLike before, we implement robustness with compare-and-select instructions. A naïve implementation would \u003cem\u003ecompare\u003c/em\u003e a loaded index with the buffer size and \u003cem\u003eselect\u003c/em\u003e a zero result if out-of-bounds. However, our GPU loads are vector while arithmetic is scalar. Even if we disabled page faults, we would need up to four compare-and-selects per load.\u003c/p\u003e \u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eload\u003c/span\u003e R, buffer, index * \u003cspan\u003e16\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003eulesel\u003c/span\u003e R[\u003cspan\u003e0\u003c/span\u003e], index, size, R[\u003cspan\u003e0\u003c/span\u003e], \u003cspan\u003e0\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003eulesel\u003c/span\u003e R[\u003cspan\u003e1\u003c/span\u003e], index, size, R[\u003cspan\u003e1\u003c/span\u003e], \u003cspan\u003e0\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003eulesel\u003c/span\u003e R[\u003cspan\u003e2\u003c/span\u003e], index, size, R[\u003cspan\u003e2\u003c/span\u003e], \u003cspan\u003e0\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003eulesel\u003c/span\u003e R[\u003cspan\u003e3\u003c/span\u003e], index, size, R[\u003cspan\u003e3\u003c/span\u003e], \u003cspan\u003e0\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003cp\u003eThere’s a trick: reserve \u003cem\u003e64 gigabytes\u003c/em\u003e of zeroes using virtual memory voodoo. Since every 32-bit index multiplied by 16 fits in 64 gigabytes, any index into this region loads zeroes. For out-of-bounds loads, we simply replace the buffer address with the reserved address while preserving the index. Replacing a 64-bit address costs just two 32-bit compare-and-selects.\u003c/p\u003e \u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eulesel\u003c/span\u003e buffer.lo, index, size, buffer.lo, RESERVED.lo\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003eulesel\u003c/span\u003e buffer.hi, index, size, buffer.hi, RESERVED.hi\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003eload\u003c/span\u003e R, buffer, index * \u003cspan\u003e16\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e \u003cp\u003eTwo instructions, not four.\u003c/p\u003e \u003ch2 id=\"next-steps\"\u003eNext steps\u003c/h2\u003e \u003cp\u003eSparse texturing is next for Honeykrisp, which will unlock more DX12 games. The alpha already runs DX12 games that don’t require sparse, like \u003ca href=\"https://store.steampowered.com/app/1091500/Cyberpunk_2077/\"\u003e\u003cstrong\u003eCyberpunk 2077\u003c/strong\u003e\u003c/a\u003e.\u003c/p\u003e \u003cfigure\u003e \u003ca href=\"https://rosenzweig.io/blog/Games-Asahi/Cyberpunk2077-small.png\"\u003e\u003cimg src=\"https://rosenzweig.io/blog/Games-Asahi/Cyberpunk2077-small.avif\" alt=\"Cyberpunk 2077\"/\u003e\u003c/a\u003e \u003c/figure\u003e \u003cp\u003eWhile many games are playable, newer AAA titles don’t hit 60fps \u003cem\u003eyet\u003c/em\u003e. Correctness comes first. Performance improves next. Indie games like \u003ca href=\"https://store.steampowered.com/app/367520/Hollow_Knight/\"\u003e\u003cstrong\u003eHollow Knight\u003c/strong\u003e\u003c/a\u003e do run full speed.\u003c/p\u003e \u003cfigure\u003e \u003ca href=\"https://rosenzweig.io/blog/Games-Asahi/HollowKnight-small.png\"\u003e\u003cimg src=\"https://rosenzweig.io/blog/Games-Asahi/HollowKnight-small.avif\" alt=\"Hollow Knight\"/\u003e\u003c/a\u003e \u003c/figure\u003e \u003cp\u003eBeyond gaming, we’re adding general purpose x86 emulation based on this stack. For more information, \u003ca href=\"https://docs.fedoraproject.org/en-US/fedora-asahi-remix/x86-support/\"\u003esee the FAQ\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eToday’s alpha is a taste of what’s to come. Not the final form, but enough to enjoy \u003ca href=\"https://store.steampowered.com/app/620/Portal_2/\"\u003e\u003cstrong\u003ePortal 2\u003c/strong\u003e\u003c/a\u003e while we work towards “1.0”.\u003c/p\u003e \u003cfigure\u003e \u003ca href=\"https://rosenzweig.io/blog/Games-Asahi/Portal2-small.png\"\u003e\u003cimg src=\"https://rosenzweig.io/blog/Games-Asahi/Portal2-small.avif\" alt=\"Portal 2\"/\u003e\u003c/a\u003e \u003c/figure\u003e \u003ch2 id=\"acknowledgements\"\u003eAcknowledgements\u003c/h2\u003e \u003cp\u003eThis work has been years in the making with major contributions from…\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://rosenzweig.io\"\u003eAlyssa Rosenzweig\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://lina.yt/me\"\u003eAsahi Lina\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://social.treehouse.systems/@chaos_princess\"\u003echaos_princess\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/davide125\"\u003eDavide Cavalca\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://mastodon.social/@dougall\"\u003eDougall Johnson\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://ella.gay\"\u003eElla Stanforth\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.gfxstrand.net/faith/welcome/\"\u003eFaith Ekstrand\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://social.treehouse.systems/@janne\"\u003eJanne Grunau\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://chaos.social/@karolherbst\"\u003eKarol Herbst\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://social.treehouse.systems/@marcan\"\u003emarcan\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://mary.zone\"\u003eMary Guillemard\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://neal.gompa.dev/\"\u003eNeal Gompa\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://sinrega.org\"\u003eSergio López\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/TellowKrinkle\"\u003eTellowKrinkle\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/teohhanhui\"\u003eTeoh Han Hui\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://mastodon.gamedev.place/@robclark\"\u003eRob Clark\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/sonicadvance1\"\u003eRyan Houdek\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e… Plus hundreds of developers whose work we build upon, spanning the Linux, Mesa, Wine, and FEX projects. Today’s release is thanks to the magic of open source.\u003c/p\u003e \u003cp\u003eWe hope you enjoy the magic.\u003c/p\u003e \u003cp\u003eHappy gaming.\u003c/p\u003e \u003cp\u003e\u003ca href=\"https://rosenzweig.io/\"\u003eBack to home\u003c/a\u003e\u003c/p\u003e \u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
