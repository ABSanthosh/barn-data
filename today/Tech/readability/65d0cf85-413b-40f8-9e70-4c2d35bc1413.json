{
  "id": "65d0cf85-413b-40f8-9e70-4c2d35bc1413",
  "title": "Exposed DeepSeek database leaking sensitive information, including chat history",
  "link": "https://www.wiz.io/blog/wiz-research-uncovers-exposed-deepseek-database-leak",
  "description": "Comments",
  "author": "",
  "published": "Wed, 29 Jan 2025 21:25:36 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "Gal Nagli",
  "length": 5767,
  "excerpt": "A publicly accessible database belonging to DeepSeek allowed full control over database operations, including the ability to access internal data. The exposure includes over a million lines of log streams with highly sensitive information.",
  "siteName": "Wiz.io",
  "favicon": "https://www.wiz.io/favicon.png",
  "text": "Wiz Research has identified a publicly accessible ClickHouse database belonging to DeepSeek, which allows full control over database operations, including the ability to access internal data. The exposure includes over a million lines of log streams containing chat history, secret keys, backend details, and other highly sensitive information. The Wiz Research team immediately and responsibly disclosed the issue to DeepSeek, which promptly secured the exposure. In this blog post, we will detail our discovery and also consider the broader implications for the industry at large.   Executive Summary DeepSeek, a Chinese AI startup, has recently garnered significant media attention due to its groundbreaking AI models, particularly the DeepSeek-R1 reasoning model. This model rivals leading AI systems like OpenAI’s o1 in performance and stands out for its cost-effectiveness and efficiency. As DeepSeek made waves in the AI space, the Wiz Research team set out to assess its external security posture and identify any potential vulnerabilities. Within minutes, we found a publicly accessible ClickHouse database linked to DeepSeek, completely open and unauthenticated, exposing sensitive data. It was hosted at oauth2callback.deepseek.com:9000 and dev.deepseek.com:9000. This database contained a significant volume of chat history, backend data and sensitive information, including log streams, API Secrets, and operational details.  More critically, the exposure allowed for full database control and potential privilege escalation within the DeepSeek environment, without any authentication or defense mechanism to the outside world. Exposure Walkthrough  Our reconnaissance began with assessing DeepSeek’s publicly accessible domains. By mapping the external attack surface with straightforward reconnaissance techniques (passive and active discovery of subdomains), we identified around 30 internet-facing subdomains. Most appeared benign, hosting elements like the chatbot interface, status page, and API documentation—none of which initially suggested a high-risk exposure. However, as we expanded our search beyond standard HTTP ports (80/443), we detected two unusual, open ports (8123 \u0026 9000) associated with the following hosts: http://oauth2callback.deepseek.com:8123  http://dev.deepseek.com:8123  http://oauth2callback.deepseek.com:9000  http://dev.deepseek.com:9000 Upon further investigation, these ports led to a publicly exposed ClickHouse database, accessible without any authentication at all – immediately raising red flags.  ClickHouse is an open-source, columnar database management system designed for fast analytical queries on large datasets. It was developed by Yandex and is widely used for real-time data processing, log storage, and big data analytics, which indicates such exposure as a very valuable and sensitive discovery. By leveraging ClickHouse’s HTTP interface, we accessed the /play path, which allowed direct execution of arbitrary SQL queries via the browser. Running a simple SHOW TABLES; query returned a full list of accessible datasets. Tables output from ClickHouse Web UIAmong them, one table stood out: log_stream, which contained extensive logs with highly sensitive data. The log_stream table contained over 1 million log entries, with particularly revealing columns: timestamp – Logs dating from January 6, 2025 span_name – References to various internal DeepSeek API endpoints string.values – Plaintext logs, including Chat History, API Keys, backend details, and operational metadata _service – Indicating which DeepSeek service generated the logs _source – Exposing the origin of log requests, containing Chat History, API Keys, directory structures, and chatbot metadata logs This level of access posed a critical risk to DeepSeek’s own security and for its end-users. Not only an attacker could retrieve sensitive logs and actual plain-text chat messages, but they could also potentially exfiltrate plaintext passwords and local files along propriety information directly from the server using queries like: SELECT * FROM file('filename') depending on their ClickHouse configuration.  (Note: We did not execute intrusive queries beyond enumeration to preserve ethical research practices.)Key Takeaways   The rapid adoption of AI services without corresponding security is inherently risky. This exposure underscores the fact that the immediate security risks for AI applications stem from the infrastructure and tools supporting them. While much of the attention around AI security is focused on futuristic threats, the real dangers often come from basic risks—like accidental external exposure of databases. These risks, which are fundamental to security, should remain a top priority for security teams. As organizations rush to adopt AI tools and services from a growing number of startups and providers, it’s essential to remember that by doing so, we’re entrusting these companies with sensitive data. The rapid pace of adoption often leads to overlooking security, but protecting customer data must remain the top priority. It’s crucial that security teams work closely with AI engineers to ensure visibility into the architecture, tooling, and models being used, so we can safeguard data and prevent exposure. Conclusion  The world has never seen a piece of technology adopted at the pace of AI. Many AI companies have rapidly grown into critical infrastructure providers without the security frameworks that typically accompany such widespread adoptions. As AI becomes deeply integrated into businesses worldwide, the industry must recognize the risks of handling sensitive data and enforce security practices on par with those required for public cloud providers and major infrastructure providers.",
  "image": "https://www.datocms-assets.com/75231/1738180897-ds-2x.png?fm=webp",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWiz Research has identified a publicly accessible ClickHouse database belonging to DeepSeek, which allows full control over database operations, including the ability to access internal data. The exposure includes over a million lines of log streams containing chat history, secret keys, backend details, and other highly sensitive information. The Wiz Research team immediately and responsibly disclosed the issue to DeepSeek, which promptly secured the exposure. \u003c/p\u003e\u003cp\u003eIn this blog post, we will detail our discovery and also consider the broader implications for the industry at large.   \u003c/p\u003e\u003ch2\u003e\u003ca id=\"executive-summary-2\"\u003e\u003c/a\u003e\u003cstrong\u003eExecutive Summary\u003c/strong\u003e \u003c/h2\u003e\u003cp\u003eDeepSeek, a Chinese AI startup, has recently garnered significant media attention due to its groundbreaking AI models, particularly the DeepSeek-R1 reasoning model. This model rivals leading AI systems like OpenAI’s o1 in performance and stands out for its cost-effectiveness and efficiency. \u003c/p\u003e\u003cp\u003eAs DeepSeek made waves in the AI space, the Wiz Research team set out to assess its external security posture and identify any potential vulnerabilities. \u003c/p\u003e\u003cp\u003eWithin minutes, we found a publicly accessible ClickHouse database linked to DeepSeek, completely open and unauthenticated, exposing sensitive data. It was hosted at oauth2callback.deepseek.com:9000 and dev.deepseek.com:9000. \u003c/p\u003e\u003cp\u003eThis database contained a significant volume of chat history, backend data and sensitive information, including log streams, API Secrets, and operational details.  \u003c/p\u003e\u003cp\u003eMore critically, the exposure allowed for full database control and potential \u003ca href=\"https://www.wiz.io/academy/privilege-escalation\"\u003eprivilege escalation\u003c/a\u003e within the DeepSeek environment, without any authentication or defense mechanism to the outside world. \u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2\u003e\u003ca id=\"exposure-walkthrough-10\"\u003e\u003c/a\u003e\u003cstrong\u003eExposure Walkthrough\u003c/strong\u003e  \u003c/h2\u003e\u003cp\u003eOur reconnaissance began with assessing DeepSeek’s publicly accessible domains. By mapping the external attack surface with straightforward reconnaissance techniques (passive and active discovery of subdomains), we identified around 30 internet-facing subdomains. Most appeared benign, hosting elements like the chatbot interface, status page, and API documentation—none of which initially suggested a high-risk exposure. \u003c/p\u003e\u003cp\u003eHowever, as we expanded our search beyond standard HTTP ports (80/443), we detected two \u003cstrong\u003eunusual, open ports (8123 \u0026amp; 9000)\u003c/strong\u003e associated with the following hosts: \u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ca rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://oauth2callback.deepseek.com:8123/\"\u003e\u003cu\u003ehttp://oauth2callback.deepseek.com:8123\u003c/u\u003e\u003c/a\u003e  \u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://dev.deepseek.com:8123/\"\u003e\u003cu\u003ehttp://dev.deepseek.com:8123\u003c/u\u003e\u003c/a\u003e  \u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://oauth2callback.deepseek.com:9000/\"\u003e\u003cu\u003ehttp://oauth2callback.deepseek.com:9000\u003c/u\u003e\u003c/a\u003e  \u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca rel=\"noreferrer noopener\" target=\"_blank\" href=\"http://dev.deepseek.com:9000/\"\u003e\u003cu\u003ehttp://dev.deepseek.com:9000\u003c/u\u003e\u003c/a\u003e \u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eUpon further investigation, these ports led to a \u003cstrong\u003epublicly exposed ClickHouse database\u003c/strong\u003e, accessible without any authentication at all – immediately raising red flags.  \u003c/p\u003e\u003cp\u003eClickHouse is an open-source, columnar database management system designed for fast analytical queries on large datasets. It was developed by Yandex and is widely used for real-time data processing, log storage, and big data analytics, which indicates such exposure as a very valuable and sensitive discovery. \u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eBy leveraging ClickHouse’s HTTP interface, we accessed the /play path, which \u003cstrong\u003eallowed direct execution of arbitrary SQL queries\u003c/strong\u003e via the browser. Running a simple SHOW TABLES; query returned a full list of accessible datasets. \u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eTables output from ClickHouse Web UI\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAmong them, one table stood out: log_stream, which contained extensive logs with \u003cstrong\u003ehighly sensitive data\u003c/strong\u003e. \u003c/p\u003e\u003cp\u003eThe log_stream table contained \u003cstrong\u003eover 1 million log entries\u003c/strong\u003e, with particularly revealing columns: \u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003etimestamp – Logs dating from \u003cstrong\u003eJanuary 6, 2025\u003c/strong\u003e \u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003espan_name – References to various internal \u003cstrong\u003eDeepSeek API endpoints\u003c/strong\u003e \u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003estring.values – \u003cstrong\u003ePlaintext logs\u003c/strong\u003e, including \u003cstrong\u003eChat History\u003c/strong\u003e, \u003cstrong\u003eAPI Keys, backend details, and operational metadata\u003c/strong\u003e \u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e_service – Indicating which \u003cstrong\u003eDeepSeek service\u003c/strong\u003e generated the logs \u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e_source – Exposing the \u003cstrong\u003eorigin of log requests\u003c/strong\u003e, containing \u003cstrong\u003eChat History, API Keys, directory structures, and chatbot metadata logs\u003c/strong\u003e \u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eThis level of access posed a critical risk to DeepSeek’s own security and for its end-users. Not only an attacker could retrieve sensitive logs and actual plain-text chat messages, but they could also potentially exfiltrate plaintext passwords and local files along propriety information directly from the server using queries like: SELECT * FROM file(\u0026#39;filename\u0026#39;) depending on their ClickHouse configuration. \u003cbr/\u003e \u003cbr/\u003e\u003cem\u003e(Note: We did not execute intrusive queries beyond enumeration to preserve ethical research practices.)\u003c/em\u003e\u003c/p\u003e\u003ch2\u003e\u003ca id=\"key-takeaways-25\"\u003e\u003c/a\u003e\u003cstrong\u003eKey Takeaways  \u003c/strong\u003e \u003c/h2\u003e\u003cp\u003eThe rapid adoption of AI services without corresponding security is inherently risky. This exposure underscores the fact that the immediate \u003ca href=\"https://www.wiz.io/academy/ai-security-risks\"\u003esecurity risks for AI applications\u003c/a\u003e stem from the infrastructure and tools supporting them. \u003c/p\u003e\u003cp\u003eWhile much of the attention around AI security is focused on futuristic threats, the real dangers often come from basic risks—like accidental external exposure of databases. These risks, which are fundamental to security, should remain a top priority for security teams. \u003c/p\u003e\u003cp\u003eAs organizations rush to adopt AI tools and services from a growing number of startups and providers, it’s essential to remember that by doing so, we’re entrusting these companies with sensitive data. The rapid pace of adoption often leads to overlooking security, but protecting customer data must remain the top priority. It’s crucial that security teams work closely with AI engineers to ensure visibility into the architecture, tooling, and models being used, so we can safeguard data and prevent exposure. \u003c/p\u003e\u003ch2\u003e\u003ca id=\"conclusion-29\"\u003e\u003c/a\u003eConclusion  \u003c/h2\u003e\u003cp\u003eThe world has never seen a piece of technology adopted at the pace of AI. Many AI companies have rapidly grown into critical infrastructure providers without the security frameworks that typically accompany such widespread adoptions. As AI becomes deeply integrated into businesses worldwide, the industry must recognize the risks of handling sensitive data and enforce security practices on par with those required for public cloud providers and major infrastructure providers.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-01-29T15:47:40-05:00",
  "modifiedTime": "2025-01-29T15:47:40-05:00"
}
