{
  "id": "3a855618-7143-4533-acff-053d2b70a9c0",
  "title": "I made my VM think it has a CPU fan",
  "link": "https://wbenny.github.io/2025/06/29/i-made-my-vm-think-it-has-a-cpu-fan.html",
  "description": "Comments",
  "author": "",
  "published": "Sun, 29 Jun 2025 13:55:18 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "Petr Beneš",
  "length": 10188,
  "excerpt": "...so the malware would finally shut up and run",
  "siteName": "mindless-area",
  "favicon": "",
  "text": "Why bother? Some malware samples are known to do various checks to determine if they are running in a virtual machine. One of the common checks is to look for the presence of certain hardware components that are typically not emulated in virtualized environments. One such component is the CPU fan. One of the observed ways malware checks for the presence of a CPU fan is by looking for the Win32_Fan class in WMI: wmic path Win32_Fan get * And the reason they do this is they want to avoid running in virtual machines, because they want to complicate the analysis process for security researchers. There are plenty of ways for malware to detect if it is running in a VM. In fact, there are plenty of WMI classes that can reveal the presence of virtual hardware, such as Win32_CacheMemory, Win32_VoltageProbe, and many others. In this post, I will be focusing on the CPU fan. Just because I like the idea making a virtual machine think it has it. However, the same approach can be applied to other hardware components and WMI classes as well. How the computer knows it has a CPU fan? The computer knows it has a CPU fan by reading the SMBIOS data. How do I know that? By googling. Win32_Fan instances are provided by Windows\\System32\\wbem\\cimwin32.dll. If you disassemble it you will see that it reads SMBIOS data (specifically entries with type 27) to get fan device information. And indeed, if you disassemble cimwin32.dll, you will find exactly that: Your first impulse might be to use DLL hooking and patch the cimwin32. But that’s smol pp way of thinking. We can do better. Type 27 The SMBIOS type 27 is defined as “Cooling Device” in the System Management BIOS Reference Specification: We can dump the SMBIOS data using the dmidecode utility: root@host:/# dmidecode -t27 -u # dmidecode 3.3 Getting SMBIOS data from sysfs. SMBIOS 3.4 present. Handle 0x1B00, DMI type 27, 15 bytes Header and Data: 1B 0F 00 1B 00 1C 65 00 00 DD 00 00 E0 15 01 Strings: 43 50 55 20 46 61 6E 00 CPU Fan By default, the dmidecode utility will interpret the data and display it in a more human-readable format: root@host:/# dmidecode -t27 # dmidecode 3.3 Getting SMBIOS data from sysfs. SMBIOS 3.4 present. Handle 0x1B00, DMI type 27, 15 bytes Cooling Device Temperature Probe Handle: 0x1C00 Type: Chip Fan Status: OK OEM-specific Information: 0x0000DD00 Nominal Speed: 5600 rpm Description: CPU Fan Setting custom SMBIOS data in Xen At the time of writing, the only available resource I found on how to set custom SMBIOS data in Xen is this almost 10 years old mcnewton’s post. I recommend reading it, as it exactly describes the struggle I had when figuring this out. In short, you can set custom SMBIOS data in Xen by setting the smbios_firmware option in the domain configuration file to the path to a file containing the SMBIOS data. So, let’s create a file named smbios.bin with the following byte content: 1B 0F 00 1B 00 1C 65 00 00 DD 00 00 E0 15 01 43 50 55 20 46 61 6E 00 00 Note that the content is same as the output of dmidecode -t27 -u above, but with additional 00 byte at the end, because the SMBIOS specification requires it. In the Xen domain configuration file documentation, we can also find this: Since SMBIOS structures do not present their overall size, each entry in the file must be preceded by a 32b integer indicating the size of the following structure. Our structure is 24 bytes long, so we need to prepend the content with 18 00 00 00 (24 in little-endian): 18 00 00 00 1B 0F 00 1B 00 1C 65 00 00 DD 00 00 E0 15 01 43 50 55 20 46 61 6E 00 00 Now we can set the smbios_firmware option in the Xen domain configuration file to the path to this file: smbios_firmware = \"/path/to/smbios.bin\" Let’s save the configuration file and start our Windows domain. root@host:/# xl create /path/to/windows/domain.cfg And let’s check if the CPU fan is now present in the Windows VM: PS C:\\\u003e wmic path Win32_Fan get * No Instance(s) Available. Oh noes. Something’s wrong. The Betrayal I missed one important detail in the documentation of the smbios_firmware option: smbios_firmware=”STRING” Specifies a path to a file that contains extra SMBIOS firmware … Not all predefined structures can be overridden, only the following types: 0, 1, 2, 3, 11, 22, 39. The file can also … Frankly, I did not miss this at first. I just hoped that what I was trying to do was not “overriding” the predefined structure. Because Xen (or rather hvmloader) does not define it. So, before defining it myself, I tried to find out if there was any other poor soul who tried to do the same thing before me. And to my disappointment, there was. Right in the xen-devel patch archive. Why it was my disappointment, you may ask? Because after reading the response to the patch, I felt the frustration of the author. But that’s for another story. Anyway, the patch was rejected, but it’s small and simple, so it’s easy to apply it to the Xen source code. Type 28, too After applying the patch and recompiling Xen, I was still getting No Instance(s) Available error when trying to query the Win32_Fan class. It didn’t make sense to me, so I dumped the SMBIOS data from the VM, to check whether the type 27 was present (dmidecode is available on Windows, too!): PS C:\\\u003e .\\dmidecode -t27 # dmidecode 3.5 SMBIOS 2.4 present. Handle 0x1B00, DMI type 27, 15 bytes Cooling Device Temperature Probe Handle: 0x1C00 Type: Chip Fan Status: OK OEM-specific Information: 0x0000DD00 Nominal Speed: 5600 rpm Description: CPU Fan It was there! But why was it not showing up in WMI? I noticed this line: Temperature Probe Handle: 0x1C00 This line indicates that the cooling device (CPU fan) is associated with a temperature probe, which is another SMBIOS type (type 28). However, the temperature probe was not defined in the SMBIOS data: PS C:\\\u003e .\\dmidecode -t28 # dmidecode 3.5 SMBIOS 2.4 present. That’s it. One more table to fake. So let’s shut down the VM and dump the type 28 data from the host: root@host:/# dmidecode -t28 # dmidecode 3.3 Getting SMBIOS data from sysfs. SMBIOS 3.4 present. Handle 0x1C00, DMI type 28, 22 bytes Temperature Probe Description: CPU Thermal Probe Location: Processor Status: OK Maximum Value: 0.0 deg C Minimum Value: 0.0 deg C Resolution: 0.000 deg C Tolerance: 0.0 deg C Accuracy: 0.00% OEM-specific Information: 0x0000DC00 Nominal Value: 0.0 deg C And again, the byte representation: root@host:/# dmidecode -t28 -u # dmidecode 3.3 Getting SMBIOS data from sysfs. SMBIOS 3.4 present. Handle 0x1C00, DMI type 28, 22 bytes Header and Data: 1C 16 00 1C 01 63 00 00 00 00 00 00 00 00 00 00 00 DC 00 00 00 00 Strings: 43 50 55 20 54 68 65 72 6D 61 6C 20 50 72 6F 62 65 00 CPU Thermal Probe Therefore, this is the content we need to append to our smbios.bin file (again, mind the extra 00 byte at the end): 1C 16 00 1C 01 63 00 00 00 00 00 00 00 00 00 00 00 DC 00 00 00 00 43 50 55 20 54 68 65 72 6D 61 6C 20 50 72 6F 62 65 00 00 Oh right! We need to prepend the size of the structure, which is 41 bytes this time (0x29 in hex): 29 00 00 00 1C 16 00 1C 01 63 00 00 00 00 00 00 00 00 00 00 00 DC 00 00 00 00 43 50 55 20 54 68 65 72 6D 61 6C 20 50 72 6F 62 65 00 00 So, the final content of our smbios.bin file should look like this: 18 00 00 00 1B 0F 00 1B 00 1C 65 00 00 DD 00 00 E0 15 01 43 50 55 20 46 61 6E 00 00 29 00 00 00 1C 16 00 1C 01 63 00 00 00 00 00 00 00 00 00 00 00 DC 00 00 00 00 43 50 55 20 54 68 65 72 6D 61 6C 20 50 72 6F 62 65 00 00 Xth Time’s the Charm Let’s save the file and start our Windows domain again: root@host:/# xl create /path/to/windows/domain.cfg And let’s check if the CPU fan is now present in the Windows VM: PS C:\\\u003e wmic path Win32_Fan get Description,Status Description Status Cooling Device OK Yay! The VM now thinks it has a CPU fan! If you’re wondering why I didn’t use * in the wmic command, it’s because the Win32_Fan class has *many* properties, and I wanted to keep the output short and sweet. wmic path Win32_Fan get * would work just as well. Setting custom SMBIOS data in QEMU/KVM If you’re using QEMU/KVM instead of Xen, your life is much easier. You don’t need to patch anything. You can set custom SMBIOS data using the -smbios option: qemu-system-x86_64 ... -smbios file=/path/to/smbios.bin Or, if you’re using libvirt: \u003cqemu:commandline\u003e \u003cqemu:arg value='-smbios'/\u003e \u003cqemu:arg value='file=/path/to/smbios.bin'/\u003e \u003c/qemu:commandline\u003e However! Remember how Xen required those 32-bit integers indicating the structure sizes? QEMU does not require them, so you can just use the raw data without prepending the size: 1B 0F 00 1B 00 1C 65 00 00 DD 00 00 E0 15 01 43 50 55 20 46 61 6E 00 00 1C 16 00 1C 01 63 00 00 00 00 00 00 00 00 00 00 00 DC 00 00 00 00 43 50 55 20 54 68 65 72 6D 61 6C 20 50 72 6F 62 65 00 00 That’s it! QEMU will automatically handle rest of the important SMBIOS entries for you. However, if you’re wondering whether you could just take the host’s SMBIOS data and use it in the VM, the answer is yes. You can try that on your own: cat /sys/firmware/dmi/tables/DMI \u003e /path/to/smbios.bin References Xen domain configuration file syntax: https://xenbits.xen.org/docs/unstable/man/xl.cfg.5.html mcnewton’s notes - Setting custom SMBIOS data in Xen DomUs: https://notes.asd.me.uk/2015/12/04/setting-custom-smbios-data-in-xen-domus/ [XEN PATCH] tools/firmware/hvmloader/smbios.c: Add new SMBIOS tables (7,8,9,26,27,28): https://old-list-archives.xen.org/archives/html/xen-devel/2022-01/msg00725.html System Management BIOS Reference Specification: https://www.dmtf.org/sites/default/files/standards/documents/DSP0134_3.7.1.pdf QEMU Anti Detection patches: https://github.com/zhaodice/qemu-anti-detection",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n        \u003ch2 id=\"why-bother\"\u003eWhy bother?\u003c/h2\u003e\n\n\u003cp\u003eSome malware samples are known to do various checks to determine if they are\nrunning in a virtual machine. One of the common checks is to look for\nthe presence of certain hardware components that are typically not emulated\nin virtualized environments. One such component is the \u003cstrong\u003eCPU fan\u003c/strong\u003e.\nOne of the observed ways malware checks for the presence of a CPU fan is by\nlooking for the \u003ccode\u003eWin32_Fan\u003c/code\u003e class in WMI:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ewmic path Win32_Fan get *\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd the reason they do this is they want to avoid running\nin virtual machines, because they want to complicate the analysis process\nfor security researchers.\u003c/p\u003e\n\n\u003cp\u003eThere are plenty of ways for malware to detect if it is running in a VM.\nIn fact, there are plenty of WMI classes that can reveal the presence of\nvirtual hardware, such as \u003ccode\u003eWin32_CacheMemory\u003c/code\u003e, \u003ccode\u003eWin32_VoltageProbe\u003c/code\u003e, and\n\u003ca href=\"https://github.com/zhaodice/qemu-anti-detection?tab=readme-ov-file#flaws-this-patch-does-not-fix-in-qemus-source\"\u003emany others\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn this post, I will be focusing on the CPU fan. Just because I like the idea\nmaking a virtual machine think it has it. However, the same approach can\nbe applied to other hardware components and WMI classes as well.\u003c/p\u003e\n\n\u003ch2 id=\"how-the-computer-knows-it-has-a-cpu-fan\"\u003eHow the computer knows it has a CPU fan?\u003c/h2\u003e\n\n\u003cp\u003eThe computer knows it has a CPU fan by reading the\n\u003cabbr title=\"System Management BIOS\"\u003e\u003cstrong\u003eSMBIOS\u003c/strong\u003e\u003c/abbr\u003e data.\u003c/p\u003e\n\n\u003cp\u003eHow do I know that? \u003ca href=\"https://stackoverflow.com/a/66605083/2011432\"\u003eBy googling\u003c/a\u003e.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode\u003eWin32_Fan\u003c/code\u003e instances are provided by \u003ccode\u003eWindows\\System32\\wbem\\cimwin32.dll\u003c/code\u003e.\nIf you disassemble it you will see that it reads SMBIOS data (specifically\nentries with type 27) to get fan device information.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnd indeed, if you disassemble \u003ccode\u003ecimwin32.dll\u003c/code\u003e, you will find exactly that:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://wbenny.github.io/img/posts/5/ida_cimwin32.png\" alt=\"cimwin32.dll\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eYour first impulse might be to use DLL hooking and patch the \u003ccode\u003ecimwin32\u003c/code\u003e.\nBut that’s smol pp way of thinking. We can do better.\u003c/p\u003e\n\n\u003ch2 id=\"type-27\"\u003eType 27\u003c/h2\u003e\n\n\u003cp\u003eThe SMBIOS type 27 is defined as \u003cstrong\u003e“Cooling Device”\u003c/strong\u003e in the\n\u003ca href=\"https://www.dmtf.org/sites/default/files/standards/documents/DSP0134_3.7.1.pdf\"\u003eSystem Management BIOS Reference Specification\u003c/a\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://wbenny.github.io/img/posts/5/type27.png\" alt=\"Cooling Device (Type 27) structure\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eWe can dump the SMBIOS data using the \u003ccode\u003edmidecode\u003c/code\u003e utility:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eroot@host:/# dmidecode -t27 -u\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.4 present.\n\nHandle 0x1B00, DMI type 27, 15 bytes\n        Header and Data:\n                1B 0F 00 1B 00 1C 65 00 00 DD 00 00 E0 15 01\n        Strings:\n                43 50 55 20 46 61 6E 00\n                CPU Fan\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eBy default, the \u003ccode\u003edmidecode\u003c/code\u003e utility will interpret the data and display it in a\nmore human-readable format:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eroot@host:/# dmidecode -t27\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.4 present.\n\nHandle 0x1B00, DMI type 27, 15 bytes\nCooling Device\n        Temperature Probe Handle: 0x1C00\n        Type: Chip Fan\n        Status: OK\n        OEM-specific Information: 0x0000DD00\n        Nominal Speed: 5600 rpm\n        Description: CPU Fan\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2 id=\"setting-custom-smbios-data-in-xen\"\u003eSetting custom SMBIOS data in Xen\u003c/h2\u003e\n\n\u003cp\u003eAt the time of writing, the only available resource I found on how to set custom\nSMBIOS data in Xen is this \u003ca href=\"https://notes.asd.me.uk/2015/12/04/setting-custom-smbios-data-in-xen-domus/\"\u003ealmost 10 years old mcnewton’s post\u003c/a\u003e. I recommend\nreading it, as it exactly describes the struggle I had when figuring this out.\u003c/p\u003e\n\n\u003cp\u003eIn short, you can set custom SMBIOS data in Xen by setting the \u003ccode\u003esmbios_firmware\u003c/code\u003e\noption in the domain configuration file to the path to a file containing\nthe SMBIOS data.\u003c/p\u003e\n\n\u003cp\u003eSo, let’s create a file named \u003ccode\u003esmbios.bin\u003c/code\u003e with the following byte content:\u003c/p\u003e\n\n\u003cpre\u003e1B 0F 00 1B 00 1C 65 00 00 DD 00 00 E0 15 01 43\n50 55 20 46 61 6E 00 \u003cstrong\u003e\u003cu\u003e00\u003c/u\u003e\u003c/strong\u003e\n\u003c/pre\u003e\n\n\u003cp\u003eNote that the content is same as the output of \u003ccode\u003edmidecode -t27 -u\u003c/code\u003e above,\nbut with additional \u003ccode\u003e00\u003c/code\u003e byte at the end, because the SMBIOS specification\nrequires it.\u003c/p\u003e\n\n\u003cp\u003eIn the \u003ca href=\"https://xenbits.xen.org/docs/unstable/man/xl.cfg.5.html#smbios_firmware-STRING\"\u003eXen domain configuration file documentation\u003c/a\u003e, we can also find this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eSince SMBIOS structures do not present their overall size, each entry in the\nfile must be preceded by a 32b integer indicating the size of the following\nstructure.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOur structure is 24 bytes long, so we need to prepend the content with\n\u003ccode\u003e18 00 00 00\u003c/code\u003e (24 in little-endian):\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e\u003cu\u003e18 00 00 00\u003c/u\u003e\u003c/strong\u003e 1B 0F 00 1B 00 1C 65 00 00 DD 00 00\nE0 15 01 43 50 55 20 46 61 6E 00 00\n\u003c/pre\u003e\n\n\u003cp\u003eNow we can set the \u003ccode\u003esmbios_firmware\u003c/code\u003e option in the Xen domain configuration file\nto the path to this file:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003esmbios_firmware\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;/path/to/smbios.bin\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eLet’s save the configuration file and start our Windows domain.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eroot@host:/# xl create /path/to/windows/domain.cfg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd let’s check if the CPU fan is now present in the Windows VM:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ePS C:\\\u0026gt; wmic path Win32_Fan get *\nNo Instance(s) Available.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOh noes. Something’s wrong.\u003c/p\u003e\n\n\u003ch3 id=\"the-betrayal\"\u003eThe Betrayal\u003c/h3\u003e\n\n\u003cp\u003eI missed one important detail in the documentation of the \u003ccode\u003esmbios_firmware\u003c/code\u003e option:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003esmbios_firmware=”STRING”\u003c/strong\u003e\u003c/p\u003e\n  \u003cblockquote\u003e\n    \u003cp\u003eSpecifies a path to a file that contains extra SMBIOS firmware …\n\u003cstrong\u003eNot all predefined structures can be overridden, only the following types:\n0, 1, 2, 3, 11, 22, 39\u003c/strong\u003e. The file can also …\u003c/p\u003e\n  \u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFrankly, I did \u003cem\u003enot\u003c/em\u003e miss this at first. I just hoped that what I was trying to\ndo was not \u003cem\u003e“overriding”\u003c/em\u003e the predefined structure.\u003c/p\u003e\n\n\u003cp\u003eBecause Xen (or rather \u003ccode\u003ehvmloader\u003c/code\u003e) \u003ca href=\"https://github.com/xen-project/xen/blob/afbb876f1fe6f45ca5c3c425925d3d15101c7382/tools/firmware/hvmloader/smbios.c#L66-L98\"\u003edoes not define it\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo, before defining it myself, I tried to find out if there was any other poor\nsoul who tried to do the same thing before me. And to my disappointment, there\n\u003cstrong\u003ewas\u003c/strong\u003e. Right in the \u003cabbr title=\"[XEN PATCH] tools/firmware/hvmloader/smbios.c: Add new SMBIOS tables (7,8,9,26,27,28)\"\u003e\u003ca href=\"https://old-list-archives.xen.org/archives/html/xen-devel/2022-01/msg00725.html\"\u003exen-devel patch archive\u003c/a\u003e\u003c/abbr\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhy it was my disappointment, you may ask? Because after reading the response\nto the patch, I felt the frustration of the author. But that’s for another story.\u003c/p\u003e\n\n\u003cp\u003eAnyway, the patch was rejected, but it’s small and simple, so it’s easy\nto apply it to the Xen source code.\u003c/p\u003e\n\n\u003ch3 id=\"type-28-too\"\u003eType 28, too\u003c/h3\u003e\n\n\u003cp\u003eAfter applying the patch and recompiling Xen, I was still getting\n\u003ccode\u003eNo Instance(s) Available\u003c/code\u003e error when trying to query the \u003ccode\u003eWin32_Fan\u003c/code\u003e class.\u003c/p\u003e\n\n\u003cp\u003eIt didn’t make sense to me, so I dumped the SMBIOS data from the VM, to check\nwhether the type 27 was present (\u003ca href=\"https://github.com/crystalidea/dmidecode-win\"\u003e\u003ccode\u003edmidecode\u003c/code\u003e is available on Windows, too!\u003c/a\u003e):\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ePS C:\\\u0026gt; .\\dmidecode -t27\n# dmidecode 3.5\nSMBIOS 2.4 present.\n\nHandle 0x1B00, DMI type 27, 15 bytes\nCooling Device\n        Temperature Probe Handle: 0x1C00\n        Type: Chip Fan\n        Status: OK\n        OEM-specific Information: 0x0000DD00\n        Nominal Speed: 5600 rpm\n        Description: CPU Fan\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIt was there! But why was it not showing up in WMI? I noticed this line:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e        Temperature Probe Handle: 0x1C00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThis line indicates that the cooling device (CPU fan) is associated with a\ntemperature probe, which is another SMBIOS type (type 28). However, the\ntemperature probe was not defined in the SMBIOS data:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ePS C:\\\u0026gt; .\\dmidecode -t28\n# dmidecode 3.5\nSMBIOS 2.4 present.\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThat’s it.\u003c/p\u003e\n\n\u003cp\u003eOne more table to fake.\u003c/p\u003e\n\n\u003cp\u003eSo let’s shut down the VM and dump the type 28 data from the host:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eroot@host:/# dmidecode -t28\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.4 present.\n\nHandle 0x1C00, DMI type 28, 22 bytes\nTemperature Probe\n        Description: CPU Thermal Probe\n        Location: Processor\n        Status: OK\n        Maximum Value: 0.0 deg C\n        Minimum Value: 0.0 deg C\n        Resolution: 0.000 deg C\n        Tolerance: 0.0 deg C\n        Accuracy: 0.00%\n        OEM-specific Information: 0x0000DC00\n        Nominal Value: 0.0 deg C\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd again, the byte representation:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eroot@host:/# dmidecode -t28 -u\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.4 present.\n\nHandle 0x1C00, DMI type 28, 22 bytes\n        Header and Data:\n                1C 16 00 1C 01 63 00 00 00 00 00 00 00 00 00 00\n                00 DC 00 00 00 00\n        Strings:\n                43 50 55 20 54 68 65 72 6D 61 6C 20 50 72 6F 62\n                65 00\n                CPU Thermal Probe\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eTherefore, this is the content we need to append to our \u003ccode\u003esmbios.bin\u003c/code\u003e file\n(again, mind the extra \u003ccode\u003e00\u003c/code\u003e byte at the end):\u003c/p\u003e\n\n\u003cpre\u003e1C 16 00 1C 01 63 00 00 00 00 00 00 00 00 00 00\n00 DC 00 00 00 00 43 50 55 20 54 68 65 72 6D 61\n6C 20 50 72 6F 62 65 00 \u003cstrong\u003e\u003cu\u003e00\u003c/u\u003e\u003c/strong\u003e\n\u003c/pre\u003e\n\n\u003cp\u003eOh right! We need to prepend the size of the structure, which is 41 bytes this\ntime (0x29 in hex):\u003c/p\u003e\n\n\u003cpre\u003e\u003cstrong\u003e\u003cu\u003e29 00 00 00\u003c/u\u003e\u003c/strong\u003e 1C 16 00 1C 01 63 00 00 00 00 00 00\n00 00 00 00 00 DC 00 00 00 00 43 50 55 20 54 68\n65 72 6D 61 6C 20 50 72 6F 62 65 00 00\n\u003c/pre\u003e\n\n\u003cp\u003eSo, the final content of our \u003ccode\u003esmbios.bin\u003c/code\u003e file should look like this:\u003c/p\u003e\n\u003cpre\u003e\n\n\u003cstrong\u003e\u003cu\u003e18 00 00 00\u003c/u\u003e\u003c/strong\u003e 1B 0F 00 1B 00 1C 65 00 00 DD 00 00\nE0 15 01 43 50 55 20 46 61 6E 00 00 \u003cstrong\u003e\u003cu\u003e29 00 00 00\u003c/u\u003e\u003c/strong\u003e\n1C 16 00 1C 01 63 00 00 00 00 00 00 00 00 00 00\n00 DC 00 00 00 00 43 50 55 20 54 68 65 72 6D 61\n6C 20 50 72 6F 62 65 00 00\n\u003c/pre\u003e\n\n\u003ch3 id=\"xth-times-the-charm\"\u003eXth Time’s the Charm\u003c/h3\u003e\n\n\u003cp\u003eLet’s save the file and start our Windows domain again:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eroot@host:/# xl create /path/to/windows/domain.cfg\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd let’s check if the CPU fan is now present in the Windows VM:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003ePS C:\\\u0026gt; wmic path Win32_Fan get Description,Status\nDescription     Status\nCooling Device  OK\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eYay! The VM now thinks it has a CPU fan!\u003c/p\u003e\n\n\u003cp\u003eIf you’re wondering why I didn’t use \u003ccode\u003e*\u003c/code\u003e in the \u003ccode\u003ewmic\u003c/code\u003e command, it’s because\nthe \u003ccode\u003eWin32_Fan\u003c/code\u003e class has \u003cem\u003e*many*\u003c/em\u003e properties, and I wanted to keep the output\nshort and sweet. \u003ccode\u003ewmic path Win32_Fan get *\u003c/code\u003e would work just as well.\u003c/p\u003e\n\n\u003ch2 id=\"setting-custom-smbios-data-in-qemukvm\"\u003eSetting custom SMBIOS data in QEMU/KVM\u003c/h2\u003e\n\n\u003cp\u003eIf you’re using QEMU/KVM instead of Xen, your life is much easier. You don’t\nneed to patch anything. You can set custom SMBIOS data using the \u003ccode\u003e-smbios\u003c/code\u003e\noption:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003eqemu-system-x86_64 ... \u003cspan\u003e-smbios\u003c/span\u003e \u003cspan\u003efile\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e/path/to/smbios.bin\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eOr, if you’re using libvirt:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e  \u003cspan\u003e\u0026lt;qemu:commandline\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;qemu:arg\u003c/span\u003e \u003cspan\u003evalue=\u003c/span\u003e\u003cspan\u003e\u0026#39;-smbios\u0026#39;\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;qemu:arg\u003c/span\u003e \u003cspan\u003evalue=\u003c/span\u003e\u003cspan\u003e\u0026#39;file=/path/to/smbios.bin\u0026#39;\u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\n  \u003cspan\u003e\u0026lt;/qemu:commandline\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eHowever! Remember how Xen required those 32-bit integers indicating the\nstructure sizes? QEMU does not require them, so you can just use the raw data\nwithout prepending the size:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e1B 0F 00 1B 00 1C 65 00 00 DD 00 00 E0 15 01 43\n50 55 20 46 61 6E 00 00 1C 16 00 1C 01 63 00 00\n00 00 00 00 00 00 00 00 00 DC 00 00 00 00 43 50\n55 20 54 68 65 72 6D 61 6C 20 50 72 6F 62 65 00\n00\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThat’s it! QEMU will automatically handle rest of the important SMBIOS entries\nfor you.\u003c/p\u003e\n\n\u003cp\u003eHowever, if you’re wondering whether you could just take the host’s SMBIOS data\nand use it in the VM, the answer is \u003cstrong\u003eyes\u003c/strong\u003e. You can try that on your own:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ecat\u003c/span\u003e /sys/firmware/dmi/tables/DMI \u003cspan\u003e\u0026gt;\u003c/span\u003e /path/to/smbios.bin\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003eXen domain configuration file syntax:\u003c/strong\u003e\u003cbr/\u003e\nhttps://xenbits.xen.org/docs/unstable/man/xl.cfg.5.html\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003emcnewton’s notes - Setting custom SMBIOS data in Xen DomUs:\u003c/strong\u003e\u003cbr/\u003e\nhttps://notes.asd.me.uk/2015/12/04/setting-custom-smbios-data-in-xen-domus/\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003e[XEN PATCH] tools/firmware/hvmloader/smbios.c: Add new SMBIOS tables (7,8,9,26,27,28):\u003c/strong\u003e\u003cbr/\u003e\nhttps://old-list-archives.xen.org/archives/html/xen-devel/2022-01/msg00725.html\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003eSystem Management BIOS Reference Specification:\u003c/strong\u003e\u003cbr/\u003e\nhttps://www.dmtf.org/sites/default/files/standards/documents/DSP0134_3.7.1.pdf\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\u003cstrong\u003eQEMU Anti Detection patches:\u003c/strong\u003e\u003cbr/\u003e\nhttps://github.com/zhaodice/qemu-anti-detection\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\n      \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2025-06-29T04:00:00-04:00",
  "modifiedTime": null
}
