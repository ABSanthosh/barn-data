{
  "id": "1d984509-4cff-461c-b6d7-2da9f8271fad",
  "title": "Using Sun Ray thin clients in 2025",
  "link": "https://catstret.ch/202506/sun-ray-shenanigans/",
  "description": "Comments",
  "author": "",
  "published": "Tue, 01 Jul 2025 23:30:35 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 12184,
  "excerpt": "setting up 20 year old hardware is bound to work first try, right? ... right?",
  "siteName": "catstret.ch",
  "favicon": "",
  "text": "i’ve used thin clients at home for quite a while - both for their intended use (remotely accessing a desktop of another system); and in the sense of “modern thin clients are x86 boxes that are wildly overpowered for what they run, so they make good mini servers.” recently, i saw a bulk lot of Sun Ray thin clients pop up on Trade Me (NZ’s eBay-like auction site) - and with very little idea of how many clients were actually included in this lot, i jumped on it. after a 9 hour round-trip drive (on some of the worst roads i’ve seen!), i returned home with the back of my car completely packed with Sun Rays. time for some interesting shenanigans! sections cataloguing the haul setting up the Sun Ray Server Software getting SRSS installed on OpenIndiana getting the Sun Ray firmware in place kiosk sessions RDP browser sessions where to from here? cataloguing the haul when picking all of these up from the seller, i had guesstimated there was maybe 30 clients in total. turns out i was off by quite a bit. i ended up bringing home: 12x Sun Ray 2 12x Sun Ray 2FS 11x Sun Ray 3 4x Sun Ray 3+ 3x Sun Ray 270 - 17” (1280x1024) LCD screens with integrated Sun Ray clients 4x Incarta Uvo - 24” 1080p LCD screens with integrated clients i can’t find any info about these other than the linked page on the Wayback Machine - if you know more about these, please send me an email! about 40 smart cards, for authentication/hotdesking a small pile of Sun Type 7 USB keyboards, and some Sun-branded optical mice so that’s 46 clients all up! a few days prior to picking all this up, i rented a storage unit in a local facility, and put some garage shelving units in there - and boy howdy i’m glad i did! setting up the Sun Ray Server Software looking at the Oracle (eugh.) documentation for the Sun Ray Server Software, it appeared there were two options: run it on ancient Linux, or run it on ancient Solaris. Oracle dropped support for the Sun Rays in 2014, as part of extinguishing everything Sun Microsystems stood for after the 2010 acquisition. i didn’t really want to have a RHEL 6 box kicking around, nor did i want to deal with trying to make Solaris 10 work in a VM on my home Proxmox cluster, so i did some digging. enter illumos - well, in my case, OpenIndiana. illumos is, essentially, a fork of the pre-Oracle-acquisition OpenSolaris codebase. OpenIndiana is one of many illumos distributions (in a very similar sense to Linux distributions), and OpenIndiana is more suited for desktop use than most other illumos distributions. the OpenIndiana documentation has a section on setting up the Sun Ray Server Software on OpenIndiana, but even with that in hand there was a lot of pieces to figure out on my own! this is mostly a copy of the docs from the OpenIndiana handbook, with some adjustments to fix things i ran into. i did this on top of a text-only install - OpenIndiana Hipster 2025.04 Text Install DVD (64-bit x86) was the install media i used (from https://www.openindiana.org/downloads/). to get the desktop environment installed: # pkg install mate_install unlocking the dependencies for SRSS: # pkg change-facet facet.version-lock.gnome/gnome-session=false # pkg change-facet facet.version-lock.gnome/gnome-settings-daemon=false # pkg change-facet facet.version-lock.system/display-manager/gdm=false # pkg change-facet facet.version-lock.library/gnome/libgnomekbd=false # pkg change-facet facet.version-lock.gnome/window-manager/metacity=false # pkg change-facet facet.version-lock.library/desktop/gnome-desktop=false # pkg change-facet facet.version-lock.cde/cde-runtime=false # pkg change-facet facet.version-lock.library/motif=false # pkg change-facet facet.version-lock.library/tooltalk=false # pkg change-facet facet.version-lock.compatibility/packages/SUNWxwplt=false setting up the package source, and installing the SRSS dependencies: # pkg set-publisher --search-before=openindiana.org -g http://pkg.toc.de/sunray sunray # pkg set-publisher --non-sticky openindiana.org # pkg install sunray-essential after unpacking the Sun Ray Server Software installers (both the Solaris and Linux versions) into /root, i ran the update_dhcp_dependency script from the OI Handbook, then tried to install SRSS, which bombed out spectacularly with package manager rejections of the This version is excluded by installed incorporation consolidation/userland/userland-incorporation@... sort. so here’s the correct (read: “worked for me!”) steps: # /root/update_dhcp_dependency /root/srs_5.4.0.0-Solaris_11plus.i386/IPS.i386/ # pkg set-publisher -g /root/srs_5.4.0.0-Solaris_11plus.i386/IPS.i386/ sunray # pkg uninstall entire userland-incorporation # pkg install SUNWut-srss SUNWut-srwc SUNWuti the update_dhcp_dependency script, for posterity to make SRSS happy with isc-dhcp: # rpm2cpio /root/srs_5.4.0.0-Linux.i386/Components/10-SRSS/Content/Sun_Ray_Core_Services_4.5/Linux/Packages/SUNWuto-4.5-44.i386.rpm | bsdtar -C /root -xf - ./opt/SUNWut/lib/dhcp/ # sed 's#$UTDHCPDIR | sort#$UTDHCPDIR | gsort#g' -i.bak /root/opt/SUNWut/lib/dhcp/isc/dhcp_config_linux # cp -R /root/opt/SUNWut/lib/dhcp/isc /opt/SUNWut/lib/dhcp/ # cp /opt/SUNWut/lib/dhcp/isc/dhcp_config_linux /opt/SUNWut/lib/dhcp/isc/dhcp_config_solaris # ln -s /opt/SUNWut/lib/dhcp/isc /etc/opt/SUNWut/dhcp then apply the needed patch to /opt/SUNWut/sbin/utadm: now, get the ancient JRE in place: # cd /root/srs_5.4.0.0-Solaris_11plus.i386/Supplemental/Java_Runtime_Environment/Solaris # ./jre-6u41-solaris-i586.sh # mv ./jre1.6.0_41 /opt/ # ln -s /opt/jre1.6.0_41 /etc/opt/SUNWut/jre and, since i wanted the web administration tools to work too: # bsdtar -C /opt -xf /root/srs_5.4.0.0-Solaris_11plus.i386/Supplemental/Apache_Tomcat/apache-tomcat-5.5.36.tar.gz # ln -s /opt/apache-tomcat /opt/apache-tomcat-5.5.36 i then configured the Sun Ray server: # /opt/SUNWut/sbin/utconfig # /opt/SUNWut/sbin/utpolicy -a -z both -g -M # /opt/SUNWut/sbin/utadm -L on # /opt/SUNWut/sbin/utstart -c and… it fuckin’ worked! getting the Sun Ray firmware in place since i was using version 5.4.x of the Sun Ray Server Software, the client firmware wasn’t part of the install - from version 5.3 onwards, you had to have an Oracle support contract to get firmware updates. sigh. thankfully, getting a 5.2.x release (with the firmware included!) wasn’t hard. i grabbed a 5.2.x release for Linux, found the RPM with the firmware in it (SUNWutfw04.3-50.i386.rpm), and extracted that with rpm2cpio. the Solaris version of SRSS wants to find the firmware in a different place than the Linux version it seems - the Linux versions put it in /opt/SUNWut/lib/firmware, but on Solaris/OpenIndiana, it needs to be in /opt/SUNWutdfw/lib/firmware. easy enough. once in place, this was all it took to set up the TFTP server, and make SRSS populate the right places with the firmware: # mkdir /tftpboot # cd /tftpboot # ln -f -s . tftpboot # /opt/SUNWut/sbin/utfwadm -AaV -G force kiosk sessions i wanted to use some of the integrated-into-screens Sun Rays to replace some of the Raspberry Pis (and old iMacs) around the house showing Home Assistant dashboards. i also wanted to set up the Sun Ray server so that when i inserted a particular smart card into a client, it would bring up an RDP session to my existing “desktop” (a Fedora VM running Xrdp). these both turned out to be… interesting to get working. RDP the Sun Ray Server Software has a built-in method for connecting to Microsoft RDP servers - the Sun Ray Windows Connector, also known as uttsc. as you might have guessed, it’s broken as fuck on OpenIndiana, even putting aside the fact that the newest RDP server it knows how to handle would be in the Windows Server 2003 era. so, let’s hack something together with XFreeRDP! i wanted to be able to specify what RDP server each token would connect to. this was a fairly common use case back in the day, and some people wrote helpers to allow things like that - one of which being Daniel Cifuentes’ meta-kiosk, which i borrowed some ideas from. after much trial and error, i got something working! KIOSK_SESSION_EXEC=$KIOSK_SESSION_DIR/freerdp KIOSK_SESSION_LABEL=\"FreeRDP session\" #!/bin/sh openbox --replace \u0026 /opt/SUNWut/bin/utscreenresize -s all -l \u0026 REG_OTHER=`/opt/SUNWut/sbin/utuser -p $SUN_SUNRAY_TOKEN | grep \"Other Info\" | cut -f2 -d=` if [ \"$REG_OTHER\" = \"\" ] then zenity --error --text=\"freerdp: idk what you want me to do! $SUN_SUNRAY_TOKEN\" exit 1 fi exec xterm -e xfreerdp /cert:tofu /f -toggle-fullscreen /dynamic-resolution /gfx +gfx-thin-client /smartcard /bpp:24 $REG_OTHER after throwing those in place, install the dependencies and configure the session: # pkg install openbox freerdp # printf \"KIOSK_SESSION=freerdp\\n\" | /opt/SUNWut/sbin/utkiosk -i FreeRDP then it’s just a matter of adding the needed data to each token, and assigning the tokens to the FreeRDP session: # /opt/SUNWut/sbin/utkioskoverride -s kiosk -r OpenPlatform.47905167523905788499 -c FreeRDP upon inserting that token into a client… success! browser sessions with much the same setup as the RDP sessions, it’s pretty easy to start a kiosk-mode Firefox, pulling the URL to open from the token data: KIOSK_SESSION_EXEC=$KIOSK_SESSION_DIR/kiosk-browser KIOSK_SESSION_LABEL=\"Kiosk Browser\" #!/bin/sh openbox --replace \u0026 /opt/SUNWut/bin/utscreenresize -s all -l \u0026 # get rid of the cursor cat \u003c\u003c-EOF | xrdb -merge - Xcursor.theme: InvisibleCursor EOF # disable screen blanking xset s off xset s noblank xset -dpms REG_OTHER=`/opt/SUNWut/sbin/utuser -p $SUN_SUNRAY_TOKEN | grep \"Other Info\" | cut -f2 -d=` if [ \"$REG_OTHER\" = \"\" ] then zenity --error --text=\"kiosk-browser: No browser URL provided! $SUN_SUNRAY_TOKEN\" exit 1 fi firefox --new-instance --kiosk --private-window \"$REG_OTHER\" i needed to hide the mouse cursor, and unclutter simply does not work in Sun Ray sessions, so i went with an invisible cursor theme - https://github.com/l-theanine/invisible-cursor-theme works well. a problem, though. Firefox would show its first-run “Welcome to Firefox” popup… every time. Sun Ray kiosk sessions run as a random user named utkuXX (where XX is a number), and after the kiosk session ends the home directory of the kiosk user gets fully deleted, so the user can be recycled for other sessions. given i wanted to use this with some always-on Sun Rays, with no input devices attached… thankfully, Firefox policies allow turning that off! throwing this hunk of JSON into /etc/firefox/policies/policies.json fixed that: { \"policies\": { \"DontCheckDefaultBrowser\": true, \"SkipTermsOfUse\": true, \"Preferences\": { \"browser.startup.upgradeDialog.enabled\": { \"Value\": false, \"Status\": \"locked\" }, \"browser.startup.homepage_override.mstone\": { \"Value\": \"ignore\", \"Status\": \"locked\" } } } } and with that, i could create a token for an individual client (the tokens for this are pseudo.\u003cMAC\u003e, where the MAC is all lower-case), set that token’s “Other Info” field to the URL to show, and assign the kiosk session to that pseudo-token the same way as with smart card tokens. where to from here? this was a lot of fun to get working. i need to take a break from reading the Sun Ray Administration Guide though, so here’s my thinking for a potential part 2: i want to see how well the multi-head stuff works in SRSS - which joins multiple physical clients together into one desktop session, using the peripherals connected to the “primary” client. unfortunately the Xinerama support is weird (Xinerama and xrandr are mutually exclusive…), but if i can make it play ball it could be a neat thing to use. i want to try and find a newer firmware package too, but that might be a little bit of a lost cause, given i refuse to give Oracle a bunch of money. maybe i’ll set up another OpenIndiana VM and configure the HA failover in SRSS? for now, though… that’s all.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"page-content\"\u003e\n    \n\n\u003cp\u003ei’ve used thin clients at home for quite a while - both for their \u003cem\u003eintended\u003c/em\u003e use (remotely accessing a desktop of another system); and in the sense of “modern thin clients are x86 boxes that are wildly overpowered for what they run, so they make good mini servers.”\u003c/p\u003e\n\n\u003cp\u003erecently, i saw a bulk lot of Sun Ray thin clients pop up on Trade Me (NZ’s eBay-like auction site) - and with very little idea of how many clients were actually included in this lot, i jumped on it. after a 9 hour round-trip drive (on some of the worst roads i’ve seen!), i returned home with the back of my car completely packed with Sun Rays. time for some interesting shenanigans!\u003c/p\u003e\n\n\n\n\u003ch2 id=\"sections\"\u003esections\u003c/h2\u003e\n\n\u003cul id=\"markdown-toc\"\u003e\n  \u003cli\u003e\u003ca href=\"#cataloguing-the-haul\" id=\"markdown-toc-cataloguing-the-haul\"\u003ecataloguing the haul\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#setting-up-the-sun-ray-server-software\" id=\"markdown-toc-setting-up-the-sun-ray-server-software\"\u003esetting up the Sun Ray Server Software\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#getting-srss-installed-on-openindiana\" id=\"markdown-toc-getting-srss-installed-on-openindiana\"\u003egetting SRSS installed on OpenIndiana\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#getting-the-sun-ray-firmware-in-place\" id=\"markdown-toc-getting-the-sun-ray-firmware-in-place\"\u003egetting the Sun Ray firmware in place\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#kiosk-sessions\" id=\"markdown-toc-kiosk-sessions\"\u003ekiosk sessions\u003c/a\u003e    \u003cul\u003e\n      \u003cli\u003e\u003ca href=\"#rdp\" id=\"markdown-toc-rdp\"\u003eRDP\u003c/a\u003e\u003c/li\u003e\n      \u003cli\u003e\u003ca href=\"#browser-sessions\" id=\"markdown-toc-browser-sessions\"\u003ebrowser sessions\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"#where-to-from-here\" id=\"markdown-toc-where-to-from-here\"\u003ewhere to from here?\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"cataloguing-the-haul\"\u003ecataloguing the haul\u003c/h2\u003e\n\n\u003cp\u003ewhen picking all of these up from the seller, i had guesstimated there was maybe 30 clients in total. turns out i was off by quite a bit.\u003c/p\u003e\n\n\u003cp\u003ei ended up bringing home:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e12x \u003ca href=\"https://dogemicrosystems.ca/pub/Sun/System_Handbook/Sun_syshbk_V3.4/Systems/SunRay2/SunRay2.html\"\u003eSun Ray 2\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e12x \u003ca href=\"https://dogemicrosystems.ca/pub/Sun/System_Handbook/Sun_syshbk_V3.4/Systems/SunRay2FS/SunRay2FS.html\"\u003eSun Ray 2FS\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e11x \u003ca href=\"https://dogemicrosystems.ca/pub/Sun/System_Handbook/Sun_syshbk_V3.4/Systems/SunRay3/\"\u003eSun Ray 3\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e4x \u003ca href=\"https://dogemicrosystems.ca/pub/Sun/System_Handbook/Sun_syshbk_V3.4/Systems/SunRay3_Plus/SunRay3_Plus.html\"\u003eSun Ray 3+\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e3x \u003ca href=\"https://dogemicrosystems.ca/pub/Sun/System_Handbook/Sun_syshbk_V3.4/Systems/SunRay270/SunRay270.html\"\u003eSun Ray 270\u003c/a\u003e - 17” (1280x1024) LCD screens with integrated Sun Ray clients\u003c/li\u003e\n  \u003cli\u003e4x \u003ca href=\"https://web.archive.org/web/20170218173523/https://incarta.com.au/uvo\"\u003eIncarta Uvo\u003c/a\u003e - 24” 1080p LCD screens with integrated clients\n    \u003cul\u003e\n      \u003cli\u003ei can’t find any info about these other than the linked page on the Wayback Machine - if you know more about these, please send me an email!\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eabout 40 smart cards, for authentication/hotdesking\u003c/li\u003e\n  \u003cli\u003ea small pile of Sun Type 7 USB keyboards, and some Sun-branded optical mice\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eso that’s \u003cstrong\u003e46\u003c/strong\u003e clients all up!\u003c/p\u003e\n\n\u003cp\u003ea few days prior to picking all this up, i rented a storage unit in a local facility, and put some garage shelving units in there - and boy howdy i’m glad i did!\u003c/p\u003e\n\n\u003ch2 id=\"setting-up-the-sun-ray-server-software\"\u003esetting up the Sun Ray Server Software\u003c/h2\u003e\n\n\u003cp\u003elooking at the Oracle (eugh.) documentation for the Sun Ray Server Software, it appeared there were two options: run it on ancient Linux, or run it on ancient Solaris. Oracle dropped support for the Sun Rays in 2014, as part of extinguishing everything Sun Microsystems stood for after the 2010 acquisition. i didn’t \u003cem\u003ereally\u003c/em\u003e want to have a RHEL 6 box kicking around, nor did i want to deal with trying to make Solaris 10 work in a VM on my home Proxmox cluster, so i did some digging.\u003c/p\u003e\n\n\u003cp\u003eenter \u003cstrong\u003eillumos\u003c/strong\u003e - well, in my case, OpenIndiana. illumos is, essentially, a fork of the pre-Oracle-acquisition OpenSolaris codebase. OpenIndiana is one of many illumos \u003cem\u003edistributions\u003c/em\u003e (in a very similar sense to Linux distributions), and OpenIndiana is more suited for desktop use than most other illumos distributions. the OpenIndiana documentation has \u003ca href=\"https://docs.openindiana.org/handbook/sunray/\"\u003ea section on setting up the Sun Ray Server Software on OpenIndiana\u003c/a\u003e, but even with that in hand there was a lot of pieces to figure out on my own!\u003c/p\u003e\n\n\n\n\u003cp\u003ethis is mostly a copy of the docs from the OpenIndiana handbook, with some adjustments to fix things i ran into. i did this on top of a text-only install - \u003ccode\u003eOpenIndiana Hipster 2025.04 Text Install DVD (64-bit x86)\u003c/code\u003e was the install media i used (from \u003ca href=\"https://www.openindiana.org/downloads/\"\u003ehttps://www.openindiana.org/downloads/\u003c/a\u003e).\u003c/p\u003e\n\n\u003cp\u003eto get the desktop environment installed:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# pkg install mate_install\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eunlocking the dependencies for SRSS:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# pkg change-facet facet.version-lock.gnome/gnome-session=false\n# pkg change-facet facet.version-lock.gnome/gnome-settings-daemon=false\n# pkg change-facet facet.version-lock.system/display-manager/gdm=false\n# pkg change-facet facet.version-lock.library/gnome/libgnomekbd=false\n# pkg change-facet facet.version-lock.gnome/window-manager/metacity=false\n# pkg change-facet facet.version-lock.library/desktop/gnome-desktop=false\n# pkg change-facet facet.version-lock.cde/cde-runtime=false\n# pkg change-facet facet.version-lock.library/motif=false\n# pkg change-facet facet.version-lock.library/tooltalk=false\n# pkg change-facet facet.version-lock.compatibility/packages/SUNWxwplt=false\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003esetting up the package source, and installing the SRSS dependencies:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# pkg set-publisher --search-before=openindiana.org -g http://pkg.toc.de/sunray sunray\n# pkg set-publisher --non-sticky openindiana.org\n# pkg install sunray-essential\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eafter unpacking the Sun Ray Server Software installers (both the Solaris and Linux versions) into \u003ccode\u003e/root\u003c/code\u003e, i ran the \u003ccode\u003eupdate_dhcp_dependency\u003c/code\u003e script from the OI Handbook, then tried to install SRSS, which bombed out spectacularly with package manager rejections of the \u003ccode\u003eThis version is excluded by installed incorporation consolidation/userland/userland-incorporation@...\u003c/code\u003e sort. so here’s the correct (read: “worked for me!”) steps:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# /root/update_dhcp_dependency /root/srs_5.4.0.0-Solaris_11plus.i386/IPS.i386/\n# pkg set-publisher -g /root/srs_5.4.0.0-Solaris_11plus.i386/IPS.i386/ sunray\n# pkg uninstall entire userland-incorporation\n# pkg install SUNWut-srss SUNWut-srwc SUNWuti\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cdetails\u003e\n  \u003csummary\u003ethe \u003ccode\u003eupdate_dhcp_dependency\u003c/code\u003e script, for posterity\u003c/summary\u003e\n\n  \n\n\u003c/details\u003e\n\n\u003cp\u003eto make SRSS happy with isc-dhcp:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# rpm2cpio /root/srs_5.4.0.0-Linux.i386/Components/10-SRSS/Content/Sun_Ray_Core_Services_4.5/Linux/Packages/SUNWuto-4.5-44.i386.rpm | bsdtar -C /root -xf - ./opt/SUNWut/lib/dhcp/\n# sed \u0026#39;s#$UTDHCPDIR | sort#$UTDHCPDIR | gsort#g\u0026#39; -i.bak /root/opt/SUNWut/lib/dhcp/isc/dhcp_config_linux \n# cp -R /root/opt/SUNWut/lib/dhcp/isc /opt/SUNWut/lib/dhcp/\n# cp /opt/SUNWut/lib/dhcp/isc/dhcp_config_linux /opt/SUNWut/lib/dhcp/isc/dhcp_config_solaris\n# ln -s /opt/SUNWut/lib/dhcp/isc /etc/opt/SUNWut/dhcp\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003ethen apply the needed patch to \u003ccode\u003e/opt/SUNWut/sbin/utadm\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cp\u003enow, get the ancient JRE in place:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# cd /root/srs_5.4.0.0-Solaris_11plus.i386/Supplemental/Java_Runtime_Environment/Solaris\n# ./jre-6u41-solaris-i586.sh\n# mv ./jre1.6.0_41 /opt/\n# ln -s /opt/jre1.6.0_41 /etc/opt/SUNWut/jre\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eand, since i wanted the web administration tools to work too:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# bsdtar -C /opt -xf /root/srs_5.4.0.0-Solaris_11plus.i386/Supplemental/Apache_Tomcat/apache-tomcat-5.5.36.tar.gz\n# ln -s /opt/apache-tomcat /opt/apache-tomcat-5.5.36\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003ei then configured the Sun Ray server:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# /opt/SUNWut/sbin/utconfig\n# /opt/SUNWut/sbin/utpolicy -a -z both -g -M\n# /opt/SUNWut/sbin/utadm -L on\n# /opt/SUNWut/sbin/utstart -c\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eand…\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://archive.catstret.ch/media/sr270-mate.jpg\"\u003e\u003cimg src=\"https://archive.catstret.ch/media/sr270-mate.jpg\" alt=\"a Sun Ray 270, with a smart card inserted, showing a MATE desktop on OpenIndiana\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eit fuckin’ worked!\u003c/p\u003e\n\n\u003ch3 id=\"getting-the-sun-ray-firmware-in-place\"\u003egetting the Sun Ray firmware in place\u003c/h3\u003e\n\n\u003cp\u003esince i was using version 5.4.x of the Sun Ray Server Software, the client firmware wasn’t part of the install - from version 5.3 onwards, you had to have an Oracle support contract to get firmware updates. sigh.\u003c/p\u003e\n\n\u003cp\u003ethankfully, getting a 5.2.x release (with the firmware included!) wasn’t hard. i grabbed a 5.2.x release for Linux, found the RPM with the firmware in it (\u003ccode\u003eSUNWutfw04.3-50.i386.rpm\u003c/code\u003e), and extracted that with \u003ccode\u003erpm2cpio\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003ethe Solaris version of SRSS wants to find the firmware in a different place than the Linux version it seems - the Linux versions put it in \u003ccode\u003e/opt/SUNWut/lib/firmware\u003c/code\u003e, but on Solaris/OpenIndiana, it needs to be in \u003ccode\u003e/opt/SUNWutdfw/lib/firmware\u003c/code\u003e. easy enough.\u003c/p\u003e\n\n\u003cp\u003eonce in place, this was all it took to set up the TFTP server, and make SRSS populate the right places with the firmware:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# mkdir /tftpboot\n# cd /tftpboot\n# ln -f -s . tftpboot\n# /opt/SUNWut/sbin/utfwadm -AaV -G force\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch2 id=\"kiosk-sessions\"\u003ekiosk sessions\u003c/h2\u003e\n\n\u003cp\u003ei wanted to use some of the integrated-into-screens Sun Rays to replace some of the Raspberry Pis (and old iMacs) around the house showing Home Assistant dashboards. i also wanted to set up the Sun Ray server so that when i inserted a particular smart card into a client, it would bring up an RDP session to my existing “desktop” (a Fedora VM running Xrdp).\u003c/p\u003e\n\n\u003cp\u003ethese both turned out to be… interesting to get working.\u003c/p\u003e\n\n\u003ch3 id=\"rdp\"\u003eRDP\u003c/h3\u003e\n\n\u003cp\u003ethe Sun Ray Server Software has a built-in method for connecting to Microsoft RDP servers - the Sun Ray Windows Connector, also known as \u003ccode\u003euttsc\u003c/code\u003e.\nas you might have guessed, it’s broken as fuck on OpenIndiana, even putting aside the fact that the newest RDP server it knows how to handle would be in the Windows Server 2003 era.\u003c/p\u003e\n\n\u003cp\u003eso, let’s hack something together with XFreeRDP!\u003c/p\u003e\n\n\u003cp\u003ei wanted to be able to specify what RDP server each token would connect to. this was a fairly common use case back in the day, and some people wrote helpers to allow things like that - one of which being \u003ca href=\"https://web.archive.org/web/20131212042126/https://blogs.oracle.com/danielc/entry/meta_kiosk_how_to_run\"\u003eDaniel Cifuentes’ meta-kiosk\u003c/a\u003e, which i borrowed some ideas from.\u003c/p\u003e\n\n\u003cp\u003eafter much trial and error, i got something working!\u003c/p\u003e\n\n\u003cdiv id=\"fcb-freerdp-session\"\u003e\n  \n  \u003cfigure\u003e\n    \u003cpre\u003e\u003ccode data-lang=\"shell\"\u003e\n\u003cspan\u003eKIOSK_SESSION_EXEC\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$KIOSK_SESSION_DIR\u003c/span\u003e/freerdp\n\u003cspan\u003eKIOSK_SESSION_LABEL\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;FreeRDP session\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n  \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cdiv id=\"fcb-freerdp-script\"\u003e\n  \n  \u003cfigure\u003e\n    \u003cpre\u003e\u003ccode data-lang=\"shell\"\u003e\n\u003cspan\u003e#!/bin/sh\u003c/span\u003e\n\nopenbox \u003cspan\u003e--replace\u003c/span\u003e \u0026amp;\n/opt/SUNWut/bin/utscreenresize \u003cspan\u003e-s\u003c/span\u003e all \u003cspan\u003e-l\u003c/span\u003e \u0026amp;\n\n\u003cspan\u003eREG_OTHER\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e/opt/SUNWut/sbin/utuser \u003cspan\u003e-p\u003c/span\u003e \u003cspan\u003e$SUN_SUNRAY_TOKEN\u003c/span\u003e | \u003cspan\u003egrep\u003c/span\u003e \u003cspan\u003e\u0026#34;Other Info\u0026#34;\u003c/span\u003e | \u003cspan\u003ecut\u003c/span\u003e \u003cspan\u003e-f2\u003c/span\u003e \u003cspan\u003e-d\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$REG_OTHER\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003ethen\n        \u003c/span\u003ezenity \u003cspan\u003e--error\u003c/span\u003e \u003cspan\u003e--text\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;freerdp: idk what you want me to do! \u003c/span\u003e\u003cspan\u003e$SUN_SUNRAY_TOKEN\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\n        \u003cspan\u003eexit \u003c/span\u003e1\n\u003cspan\u003efi\n\n\u003c/span\u003e\u003cspan\u003eexec \u003c/span\u003exterm \u003cspan\u003e-e\u003c/span\u003e xfreerdp /cert:tofu /f \u003cspan\u003e-toggle-fullscreen\u003c/span\u003e /dynamic-resolution /gfx +gfx-thin-client /smartcard /bpp:24 \u003cspan\u003e$REG_OTHER\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n  \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eafter throwing those in place, install the dependencies and configure the session:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# pkg install openbox freerdp\n# printf \u0026#34;KIOSK_SESSION=freerdp\\n\u0026#34; | /opt/SUNWut/sbin/utkiosk -i FreeRDP\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003ethen it’s just a matter of adding the needed data to each token, and assigning the tokens to the FreeRDP session:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://archive.catstret.ch/media/srss-token-freerdp.png\"\u003e\u003cimg src=\"https://archive.catstret.ch/media/srss-token-freerdp.png\" alt=\"the Sun Ray Administration web UI, editing a token to use kiosk mode and specifying the FreeRDP parameters\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e# /opt/SUNWut/sbin/utkioskoverride -s kiosk -r OpenPlatform.47905167523905788499 -c FreeRDP\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eupon inserting that token into a client…\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://archive.catstret.ch/media/srss-uvo-freerdp.jpg\"\u003e\u003cimg src=\"https://archive.catstret.ch/media/srss-uvo-freerdp.jpg\" alt=\"an Incarta Uvo, showing an Xrdp login screen\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003esuccess!\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch3 id=\"browser-sessions\"\u003ebrowser sessions\u003c/h3\u003e\n\n\u003cp\u003ewith much the same setup as the RDP sessions, it’s pretty easy to start a kiosk-mode Firefox, pulling the URL to open from the token data:\u003c/p\u003e\n\n\u003cdiv id=\"fcb-kioskbrowser-session\"\u003e\n  \n  \u003cfigure\u003e\n    \u003cpre\u003e\u003ccode data-lang=\"shell\"\u003e\n\u003cspan\u003eKIOSK_SESSION_EXEC\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e$KIOSK_SESSION_DIR\u003c/span\u003e/kiosk-browser\n\u003cspan\u003eKIOSK_SESSION_LABEL\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;Kiosk Browser\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n  \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cdiv id=\"fcb-kioskbrowser-script\"\u003e\n  \n  \u003cfigure\u003e\n    \u003cpre\u003e\u003ccode data-lang=\"shell\"\u003e\n\u003cspan\u003e#!/bin/sh\u003c/span\u003e\n\nopenbox \u003cspan\u003e--replace\u003c/span\u003e \u0026amp;\n/opt/SUNWut/bin/utscreenresize \u003cspan\u003e-s\u003c/span\u003e all \u003cspan\u003e-l\u003c/span\u003e \u0026amp;\n\n\u003cspan\u003e# get rid of the cursor\u003c/span\u003e\n\u003cspan\u003ecat\u003c/span\u003e \u003cspan\u003e\u0026lt;\u0026lt;-\u003c/span\u003e\u003cspan\u003eEOF\u003c/span\u003e\u003cspan\u003e | xrdb -merge -\nXcursor.theme: InvisibleCursor\n\u003c/span\u003e\u003cspan\u003eEOF\n\n\u003c/span\u003e\u003cspan\u003e# disable screen blanking\u003c/span\u003e\nxset s off\nxset s noblank\nxset \u003cspan\u003e-dpms\u003c/span\u003e\n\n\u003cspan\u003eREG_OTHER\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e/opt/SUNWut/sbin/utuser \u003cspan\u003e-p\u003c/span\u003e \u003cspan\u003e$SUN_SUNRAY_TOKEN\u003c/span\u003e | \u003cspan\u003egrep\u003c/span\u003e \u003cspan\u003e\u0026#34;Other Info\u0026#34;\u003c/span\u003e | \u003cspan\u003ecut\u003c/span\u003e \u003cspan\u003e-f2\u003c/span\u003e \u003cspan\u003e-d\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e`\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$REG_OTHER\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003ethen\n        \u003c/span\u003ezenity \u003cspan\u003e--error\u003c/span\u003e \u003cspan\u003e--text\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;kiosk-browser: No browser URL provided! \u003c/span\u003e\u003cspan\u003e$SUN_SUNRAY_TOKEN\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\n        \u003cspan\u003eexit \u003c/span\u003e1\n\u003cspan\u003efi\n\n\u003c/span\u003efirefox \u003cspan\u003e--new-instance\u003c/span\u003e \u003cspan\u003e--kiosk\u003c/span\u003e \u003cspan\u003e--private-window\u003c/span\u003e \u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$REG_OTHER\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n  \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003ei needed to hide the mouse cursor, and \u003ccode\u003eunclutter\u003c/code\u003e simply \u003cem\u003edoes not\u003c/em\u003e work in Sun Ray sessions, so i went with an invisible cursor theme - \u003ca href=\"https://github.com/l-theanine/invisible-cursor-theme\"\u003ehttps://github.com/l-theanine/invisible-cursor-theme\u003c/a\u003e works well.\u003c/p\u003e\n\n\u003cp\u003ea problem, though. Firefox would show its first-run “Welcome to Firefox” popup… every time. Sun Ray kiosk sessions run as a random user named  \u003ccode\u003eutkuXX\u003c/code\u003e (where \u003ccode\u003eXX\u003c/code\u003e is a number), and after the kiosk session ends the home directory of the kiosk user gets fully deleted, so the user can be recycled for other sessions. given i wanted to use this with some always-on Sun Rays, with no input devices attached…\u003c/p\u003e\n\n\u003cp\u003ethankfully, Firefox policies allow turning that off! throwing this hunk of JSON into \u003ccode\u003e/etc/firefox/policies/policies.json\u003c/code\u003e fixed that:\u003c/p\u003e\n\n\u003cdiv id=\"fcb-firefoxpolicy\"\u003e\n  \n  \u003cfigure\u003e\n    \u003cpre\u003e\u003ccode data-lang=\"json\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026#34;policies\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026#34;DontCheckDefaultBrowser\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026#34;SkipTermsOfUse\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026#34;Preferences\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003e\u0026#34;browser.startup.upgradeDialog.enabled\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\n        \u003c/span\u003e\u003cspan\u003e\u0026#34;Value\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efalse\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\n        \u003c/span\u003e\u003cspan\u003e\u0026#34;Status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;locked\u0026#34;\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003e\u0026#34;browser.startup.homepage_override.mstone\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e\n        \u003c/span\u003e\u003cspan\u003e\u0026#34;Value\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;ignore\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\n        \u003c/span\u003e\u003cspan\u003e\u0026#34;Status\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;locked\u0026#34;\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n  \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eand with that, i could create a token for an individual client (the tokens for this are \u003ccode\u003epseudo.\u0026lt;MAC\u0026gt;\u003c/code\u003e, where the MAC is all lower-case), set that token’s “Other Info” field to the URL to show, and assign the kiosk session to that pseudo-token the same way as with smart card tokens.\u003c/p\u003e\n\n\u003ch2 id=\"where-to-from-here\"\u003ewhere to from here?\u003c/h2\u003e\n\n\u003cp\u003ethis was a lot of fun to get working. i need to take a break from reading the Sun Ray Administration Guide though, so here’s my thinking for a potential part 2:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ei want to see how well the multi-head stuff works in SRSS - which joins multiple physical clients together into one desktop session, using the peripherals connected to the “primary” client. unfortunately the Xinerama support is weird (Xinerama and xrandr are mutually exclusive…), but if i can make it play ball it could be a neat thing to use.\u003c/li\u003e\n  \u003cli\u003ei want to try and find a newer firmware package too, but that might be a little bit of a lost cause, given i refuse to give Oracle a bunch of money.\u003c/li\u003e\n  \u003cli\u003emaybe i’ll set up another OpenIndiana VM and configure the HA failover in SRSS?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003efor now, though… that’s all.\u003c/p\u003e\n\n\n\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
