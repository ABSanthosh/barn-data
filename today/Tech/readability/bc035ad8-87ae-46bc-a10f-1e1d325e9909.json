{
  "id": "bc035ad8-87ae-46bc-a10f-1e1d325e9909",
  "title": "Frequent reauth doesn't make you more secure",
  "link": "https://tailscale.com/blog/frequent-reath-security",
  "description": "Comments",
  "author": "",
  "published": "Thu, 12 Jun 2025 19:05:12 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "Avery Pennarun",
  "length": 7489,
  "excerpt": "Tailscale is built to make secure access seamless — but too often, security tools get in your way instead. One common offender? Frequent login prompts. They interrupt your work, frustrate users, and paradoxically, can weaken your security posture. In this post, Avery Pennarun explains why forcing users to reauthenticate constantly is outdated thinking — and how smarter, real-time approaches can deliver stronger security without the friction.",
  "siteName": "",
  "favicon": "https://tailscale.com/favicon.png",
  "text": "Tailscale is built to make secure access seamless — but too often, security tools get in your way instead. One common offender? Frequent login prompts. They interrupt your work, frustrate users, and paradoxically, can weaken your security posture. In this post, Avery Pennarun explains why forcing users to reauthenticate constantly is outdated thinking — and how smarter, real-time approaches can deliver stronger security without the friction.You're happily working away, fingers flying, deep in flow, and suddenly, boink, your session has expired. You sigh, re-enter your password (again), complete an MFA challenge (again), maybe approve an email notification (again), and finally — access restored. Until next time.This wasn't so bad when it was just passwords; we all got pretty fast at retyping our passwords. But all those MFA challenges really slow us down. And MFA fatigue attacks, a growing vector for phishing, get worse as more legitimate MFA requests arrive.We all used to believe that changing passwords often was a good idea; turns out the opposite is true. Similarly, we all used to believe that making people log in frequently was good security. If authentication is good, then surely more authentication is better, right? Like taking vitamins — one a day is good, so twenty must be great! Except, well, that’s not how anything works.Security isn’t about how often you log in. It’s about how well your access is managed in the first place, how fast we can react to policy changes on your account, and how confident we are that your key hasn't been leaked since the last auth. The good news? You can get strong security guarantees without making users miserable.What are we really checking?Authentication usually boils down to one of two things:Are you still in physical possession of the device? (For example, Windows Hello PINs, YubiKeys, or smart cards; tests which anyone physically present can likely pass.)Are you the right person? (Passwords, Face ID, Touch ID — things that supposedly nobody but you can replicate, but which don't prove you're physically near a given device.)Identity providers (IdPs) focus mostly on who you are, since their whole job is identity verification. If they require a YubiKey, they might also check device possession, but that’s not really their main gig.Integrated authentication systems like Apple’s Face ID and Touch ID, and tools like Windows Hello, are interesting because they do both at once. They're amazing as long as they are securely enrolled and their keys are held in a highly trusted, malware resistant, TPM.So why do frequent re-logins exist? Usually, it's because admins aren't confident that changes will take effect immediately. Sometimes, especially with SAML, an IdP is configured to send policy attributes to apps only during the user-interactive login process, which means they can't update without a new login. How long are we vulnerable if someone leaves the company or loses their laptop?! But it doesn't have to be that way.Frequent logins are the wrong answer1. They solve the wrong problemMost attackers aren’t lurking in your office, waiting for you to step away. They’re remote, so their attack vector is phishing – it's pretty easy for them to steal your password. As an administrator, the best policy is to assume remote attackers already have your password, and build your systems accordingly. That means the second factor (SMS, email, or preferably a Yubikey or equivalent) is the most important defense against remote attacks.But, there's also physical attacks. If someone steals your laptop, usually your screen is already locked. That means open browser sessions won’t do them much good. Random cafe thieves probably don't have your password. If they do, more logins aren't much of a defense.In fact, frequent logins give attackers, both local and remote, more chances to steal your credentials. That's deadly for security, in addition to creating annoyance for users.2. Your OS already knows if you’re thereModern operating systems already handle this problem with screen locks. If your screen locks when you step away, your OS is doing exactly what a frequent login prompt would do, except without annoying you every few hours. Consider enforcing automatic screen lock when you walk away. If your screen is locked, all those other open sessions are safe too.3. Website session expiry protects against almost nothingSome web apps log you out quickly under the assumption that you might be on a shared computer. That makes sense if you’re using an Internet café in 2006. But for most people, web session expiry is just a relic of a bygone era.A 15-minute session duration makes sense for something highly sensitive and disproportionately valuable, like your bank, where you want that little bit extra. But the \"agressively mid-range\" expiry times on most websites, like 7 days or 30 days, don’t help anyone with anything. They’re too long to stop real session hijacking before the damage is done, but so short they're constantly annoying. It’s the worst of both worlds. Security theatre.The right way to handle security1. Check for device possession when it mattersIf you really need to confirm someone is at their keyboard, you don’t want a login prompt every few hours — you want a check right before a sensitive action. That’s why Tailscale SSH’s check mode and the Tailscale Slack Accessbot exist: they verify that the user is there only when it actually matters, not just on an arbitrary timer.And yes, set that OS screen lock aggressively! Now that most OSes can unlock with just a fingerprint or face, there's no reason to leave your screen unlocked when you walk away.2. Use continuous verification, not frequent loginsSecurity should be continuous, not tied to arbitrary interactive cycles. Instead of nagging users, tools like device posture checks and SCIM-based access control can update security attributes and policies in real time, in the background, without users doing anything. That means you can have updated policies within seconds or minutes; you don't have to compromise between short reauth times (super annoying) and longer ones (less protection).For example:If your device goes offline, is marked lost, or fails a security check, access gets revoked instantly.If your role or employment status changes, your access updates automatically.This approach is smarter and more secure than making users re-enter their credentials over and over.The best security is security without frustrationFrequent logins aren’t making you safer. They’re just annoying you into worse security habits (like password reuse, clicking phishing links, and MFA fatigue). The best security happens quietly in the background, ensuring safety without getting in the way.At Tailscale, we believe in security that’s adaptive, intelligent, and actually useful — not just security theater. Instead of forcing pointless logins, we make sure authentication happens at the right moments, with as little friction as possible. If you use Tailscale to access your other apps, through tsidp or App Connector, our real-time security checks can flow through to all your other login sessions as well. Even in legacy apps that don't understand SCIM or device posture.(Want to go deeper? I wrote Factors in authentication some time ago, but the principles still stand. It offers a deeper dive into authentication models and why Tailscale does things the way it does. Because security should be smart, not frustrating.)",
  "image": "https://tailscale.com/api/og-image?id=2c6cdf4d-1171-40e1-8147-49a14b12d7c3",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\u003cspan\u003eTailscale is built to make secure access seamless — but too often, security tools get in your way instead. One common offender? Frequent login prompts. They interrupt your work, frustrate users, and paradoxically, can weaken your security posture. In this post, Avery Pennarun explains why forcing users to reauthenticate constantly is outdated thinking — and how smarter, real-time approaches can deliver stronger security without the friction.\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cp\u003eYou\u0026#39;re happily working away, fingers flying, deep in flow, and suddenly, boink, your session has expired. You sigh, re-enter your password (again), complete an MFA challenge (again), maybe approve an email notification (again), and finally — access restored. Until next time.\u003c/p\u003e\u003cp\u003eThis wasn\u0026#39;t \u003cem\u003eso\u003c/em\u003e bad when it was just passwords; we all got pretty fast at retyping our passwords. But all those MFA challenges really slow us down. And \u003ca target=\"\" rel=\"noreferrer\" href=\"https://fieldeffect.com/blog/what-is-an-mfa-fatigue-attack\"\u003eMFA fatigue attacks\u003c/a\u003e, a growing vector for phishing, get worse as more legitimate MFA requests arrive.\u003c/p\u003e\u003cp\u003eWe all used to believe that changing passwords often was a good idea; turns out \u003ca target=\"\" rel=\"noreferrer\" href=\"https://pages.nist.gov/800-63-4/sp800-63b.html\"\u003ethe opposite is true\u003c/a\u003e. Similarly, we all used to believe that making people log in frequently was good security. If authentication is good, then surely more authentication is better, right? Like taking vitamins — one a day is good, so twenty must be great! Except, well, that’s not how anything works.\u003c/p\u003e\u003cp\u003eSecurity isn’t about how often you log in. It’s about how well your access is managed in the first place, how fast we can react to policy changes on your account, and how confident we are that your key hasn\u0026#39;t been leaked since the last auth. The good news? You can get strong security guarantees without making users miserable.\u003c/p\u003e\u003ch2 id=\"what-are-we-really-checking\"\u003e\u003ca href=\"#what-are-we-really-checking\"\u003eWhat are we really checking?\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"\u003e\u003c/path\u003e\u003cline x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eAuthentication usually boils down to one of two things:\u003c/p\u003e\u003col\u003e\u003cli\u003e\u003cstrong\u003eAre you still in physical possession of the device?\u003c/strong\u003e (For example, Windows Hello PINs, YubiKeys, or smart cards; tests which anyone physically present can likely pass.)\u003c/li\u003e\u003cli\u003e\u003cstrong\u003eAre you the right person?\u003c/strong\u003e (Passwords, Face ID, Touch ID — things that supposedly nobody but you can replicate, but which don\u0026#39;t prove you\u0026#39;re physically near a given device.)\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eIdentity providers (IdPs) focus mostly on \u003cstrong\u003ewho you are\u003c/strong\u003e, since their whole job is identity verification. If they require a YubiKey, they might also check device possession, but that’s not really their main gig.\u003c/p\u003e\u003cp\u003eIntegrated authentication \u003cem\u003esystems\u003c/em\u003e like Apple’s Face ID and Touch ID, and tools like Windows Hello, are interesting because they do \u003cstrong\u003eboth\u003c/strong\u003e at once. They\u0026#39;re amazing as long as they are \u003ca target=\"\" rel=\"noreferrer\" href=\"https://apenwarr.ca/log/20190114\"\u003esecurely enrolled\u003c/a\u003e and their keys are held in a highly trusted, malware resistant, TPM.\u003c/p\u003e\u003cp\u003eSo why do frequent re-logins exist? Usually, it\u0026#39;s because admins aren\u0026#39;t confident that changes will take effect immediately. Sometimes, especially with SAML, an IdP is configured to send policy attributes to apps only during the user-interactive login process, which means they can\u0026#39;t update without a new login. How long are we vulnerable if someone leaves the company or loses their laptop?! But it doesn\u0026#39;t have to be that way.\u003c/p\u003e\u003ch2 id=\"frequent-logins-are-the-wrong-answer\"\u003e\u003ca href=\"#frequent-logins-are-the-wrong-answer\"\u003eFrequent logins are the wrong answer\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"\u003e\u003c/path\u003e\u003cline x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\u003ch3 id=\"1-they-solve-the-wrong-problem\"\u003e\u003ca href=\"#1-they-solve-the-wrong-problem\"\u003e1. They solve the wrong problem\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"\u003e\u003c/path\u003e\u003cline x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eMost attackers aren’t lurking in your office, waiting for you to step away. They’re remote, so their attack vector is phishing – it\u0026#39;s \u003ca target=\"\" rel=\"noreferrer\" href=\"https://www.sentinelone.com/blog/7-ways-hackers-steal-your-passwords/\"\u003epretty easy for them to steal your password\u003c/a\u003e. As an administrator, the best policy is to assume \u003cem\u003eremote\u003c/em\u003e attackers already have your password, and build your systems accordingly. That means the second factor (SMS, email, or preferably a Yubikey or equivalent) is the most important defense against remote attacks.\u003c/p\u003e\u003cp\u003eBut, there\u0026#39;s also physical attacks. If someone steals your laptop, usually your \u003cstrong\u003escreen is already locked\u003c/strong\u003e. That means open browser sessions won’t do them much good. Random cafe thieves probably don\u0026#39;t have your password. If they do, more logins aren\u0026#39;t much of a defense.\u003c/p\u003e\u003cp\u003eIn fact, frequent logins give attackers, both local and remote, \u003cem\u003emore chances\u003c/em\u003e to steal your credentials. That\u0026#39;s deadly for security, in addition to creating annoyance for users.\u003c/p\u003e\u003ch3 id=\"2-your-os-already-knows-if-youre-there\"\u003e\u003ca href=\"#2-your-os-already-knows-if-youre-there\"\u003e2. Your OS already knows if you’re there\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"\u003e\u003c/path\u003e\u003cline x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eModern operating systems already handle this problem with \u003cstrong\u003escreen locks\u003c/strong\u003e. If your screen locks when you step away, your OS is doing exactly what a frequent login prompt would do, except without annoying you every few hours. Consider enforcing \u003ca target=\"\" rel=\"noreferrer\" href=\"https://www.xda-developers.com/windows-dynamic-lock-how-to-set-it-up/\"\u003eautomatic screen lock when you walk away\u003c/a\u003e. If your screen is locked, all those other open sessions are safe too.\u003c/p\u003e\u003ch3 id=\"3-website-session-expiry-protects-against-almost-nothing\"\u003e\u003ca href=\"#3-website-session-expiry-protects-against-almost-nothing\"\u003e3. Website session expiry protects against almost nothing\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"\u003e\u003c/path\u003e\u003cline x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSome web apps log you out quickly under the assumption that you might be on a shared computer. That makes sense if you’re using an Internet café in 2006. But for most people, web session expiry is just a relic of a bygone era.\u003c/p\u003e\u003cp\u003eA 15-minute session duration makes sense for something highly sensitive and disproportionately valuable, like your bank, where you want that little bit extra. But the \u0026#34;agressively mid-range\u0026#34; expiry times on most websites, like 7 days or 30 days, don’t help anyone with anything. They’re too long to stop real session hijacking before the damage is done, but so short they\u0026#39;re constantly annoying. It’s the worst of both worlds. Security theatre.\u003c/p\u003e\u003ch2 id=\"the-right-way-to-handle-security\"\u003e\u003ca href=\"#the-right-way-to-handle-security\"\u003eThe right way to handle security\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"\u003e\u003c/path\u003e\u003cline x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\u003ch3 id=\"1-check-for-device-possession-when-it-matters\"\u003e\u003ca href=\"#1-check-for-device-possession-when-it-matters\"\u003e1. Check for device possession when it matters\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"\u003e\u003c/path\u003e\u003cline x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eIf you really need to confirm someone is at their keyboard, you don’t want a login prompt every few hours — you want a check \u003cstrong\u003eright before a sensitive action\u003c/strong\u003e. That’s why \u003ca target=\"\" rel=\"noreferrer\" href=\"https://tailscale.com/kb/1193/tailscale-ssh\"\u003eTailscale SSH’s check mode\u003c/a\u003e and the \u003ca target=\"\" rel=\"noreferrer\" href=\"https://tailscale.com/blog/jit-access-ga\"\u003eTailscale Slack Accessbot\u003c/a\u003e exist: they verify that the user is there \u003cstrong\u003eonly when it actually matters\u003c/strong\u003e, not just on an arbitrary timer.\u003c/p\u003e\u003cp\u003eAnd yes, set that OS screen lock aggressively! Now that most OSes can unlock with just a fingerprint or face, there\u0026#39;s no reason to leave your screen unlocked when you walk away.\u003c/p\u003e\u003ch3 id=\"2-use-continuous-verification-not-frequent-logins\"\u003e\u003ca href=\"#2-use-continuous-verification-not-frequent-logins\"\u003e2. Use continuous verification, not frequent logins\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"\u003e\u003c/path\u003e\u003cline x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSecurity should be continuous, not tied to arbitrary interactive cycles. Instead of nagging users, tools like \u003ca target=\"\" rel=\"noreferrer\" href=\"https://tailscale.com/kb/1288/device-posture\"\u003edevice posture checks\u003c/a\u003e and \u003ca target=\"\" rel=\"noreferrer\" href=\"https://tailscale.com/kb/1290/user-group-provisioning\"\u003eSCIM-based access control\u003c/a\u003e can update security attributes and policies in real time, in the background, without users doing anything. That means you can have updated policies within seconds or minutes; you don\u0026#39;t have to compromise between short reauth times (super annoying) and longer ones (less protection).\u003c/p\u003e\u003cp\u003eFor example:\u003c/p\u003e\u003cul\u003e\u003cli\u003eIf your device goes offline, is marked lost, or fails a security check, access gets revoked \u003cstrong\u003einstantly\u003c/strong\u003e.\u003c/li\u003e\u003cli\u003eIf your role or employment status changes, your access updates \u003cstrong\u003eautomatically\u003c/strong\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eThis approach is \u003cstrong\u003esmarter and more secure\u003c/strong\u003e than making users re-enter their credentials over and over.\u003c/p\u003e\u003ch2 id=\"the-best-security-is-security-without-frustration\"\u003e\u003ca href=\"#the-best-security-is-security-without-frustration\"\u003eThe best security is security without frustration\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\u003e\u003cpath d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"\u003e\u003c/path\u003e\u003cline x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eFrequent logins aren’t making you safer. They’re just annoying you into worse security habits (like password reuse, clicking phishing links, and MFA fatigue). The best security happens \u003cstrong\u003equietly in the background\u003c/strong\u003e, ensuring safety without getting in the way.\u003c/p\u003e\u003cp\u003eAt Tailscale, we believe in security that’s \u003cstrong\u003eadaptive, intelligent, and actually useful \u003c/strong\u003e— not just security theater. Instead of forcing pointless logins, we make sure authentication happens at the right moments, with as little friction as possible. If you use Tailscale to access your other apps, through \u003ca target=\"\" rel=\"noreferrer\" href=\"https://github.com/tailscale/tailscale/tree/main/cmd/tsidp\"\u003etsidp \u003c/a\u003eor \u003ca target=\"\" rel=\"noreferrer\" href=\"https://tailscale.com/kb/1342/how-app-connectors-work\"\u003eApp Connector\u003c/a\u003e, our real-time security checks can flow through to all your other login sessions as well. Even in legacy apps that don\u0026#39;t understand SCIM or device posture.\u003c/p\u003e\u003cp\u003e(Want to go deeper? I wrote \u003ca target=\"\" rel=\"noreferrer\" href=\"https://apenwarr.ca/log/20190114\"\u003eFactors in authentication\u003c/a\u003e some time ago, but the principles still stand. It offers a deeper dive into authentication models and why Tailscale does things the way it does. Because security should be \u003cstrong\u003esmart, not frustrating\u003c/strong\u003e.)\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-06-10T13:30:00Z",
  "modifiedTime": null
}
