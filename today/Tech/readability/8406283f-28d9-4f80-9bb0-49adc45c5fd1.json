{
  "id": "8406283f-28d9-4f80-9bb0-49adc45c5fd1",
  "title": "Postgres IDE in VS Code",
  "link": "https://techcommunity.microsoft.com/blog/adforpostgresql/announcing-a-new-ide-for-postgresql-in-vs-code-from-microsoft/4414648",
  "description": "Comments",
  "author": "",
  "published": "Fri, 23 May 2025 15:12:44 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "JoshMSFT",
  "length": 8627,
  "excerpt": "We are excited to announce the public preview of the brand-new PostgreSQL extension for Visual Studio Code (VS Code), designed to simplify PostgreSQL database management and development workflows. With this extension, you can now manage database objects, draft queries with intelligent assistance from context-aware IntelliSense and our ‘@pgsql’ GitHub Copilot agent—all without ever leaving your favorite code editor. Addressing Developer Challenges Many of you face hurdles in managing time effectively, with 41% of developers struggling with task-switching, according to the 2024 StackOverflow Developer Survey. Additionally, the 2024 Stripe Developer Coefficient Report reveals that developers spend up to 50% of their time debugging and troubleshooting code and databases. These inefficiencies are further compounded by the absence of integrated tools that unify database management and application development. The PostgreSQL extension for VS Code addresses these challenges head-on by integrating Postgres database tools and the @pgsql GitHub Copilot agent, providing a unified application development and database management experience. By integrating robust features such as Entra ID authentication for centralized identity management and deep Azure Database for PostgreSQL integration, this extension empowers you to focus on building innovative applications rather than wrestling with fragmented workflows. Key Features The public preview release of the PostgreSQL extension for VS Code introduces a suite of powerful new capabilities that enhance productivity and streamline development for application developers working with Postgres. Schema Visualization Schema visualization is a breeze with our ‘right-click’ context menu options. o\u0026nbsp;\u0026nbsp; Right-click on the database entry in the Object Explorer and select “Visualize Schema” \u0026nbsp; Figure 1: Right-click on the database entry in the Object Explorer and select “Visualize Schema”Single click to expand. Database aware GitHub Copilot AI assistance directly within VS Code providing PostgreSQL database context reduces the PostgreSQL learning curve and improves developer productivity​. Simplified interaction with PostgreSQL databases and development tools using natural language. Commands such as \"@pgsql\" enable you to query databases, optimize schemas, and execute SQL operations with ease. Context menus, such as “Rewrite Query”, “Explain Query”, “Analyze Query Performance” provide AI Intelligence inside the query editor window. Real-time, expert-level guidance to help keep PostgreSQL databases performant and secure and improve code quality​. PostgreSQL Copilot Context Menu Options Figure 2: Screenshot of the PostgreSQL Copilot Context Menu.Single click to expand. Using the PostgreSQL Copilot Context Menu,\u0026nbsp; Figure 3: PostgreSQL Copilot Explain Query Context Menu in action.Single click to expand. GitHub Copilot Chat Agent Mode GitHub Copilot Chat agent mode provides a database context aware intelligent assistant that can perform multi-stage tasks, moving beyond the question-and-answer chat experience. Agent mode allows the Copilot to bring in additional context from your workspace and, with permission, it can write and debug code on its own. Agent mode transforms PostgreSQL development by providing real-time, AI-driven guidance that simplifies complex tasks like app prototyping, debugging, schema optimization, and performance tuning. \u0026nbsp; In this example, we’ll ask the agent to create a new database on a specific server in my Saved Connections and enable the PostGIS extension. Figure 4: Using the @pgsql GitHub Copilot Chat in agent mode to create a new database from a natural language prompt.Single click to expand. The @pgsql agent begins by listing the server connections, connecting to the server ‘postgis’, drafts the script to modify the database and waits for permission to continue before making changes. Database modifications require explicit permission from the user. Add Database Connections with Ease Simplified connection management for local and cloud-hosted PostgreSQL instances. Support for multiple connection profiles and connection string parsing for easy setup. Direct browsing and filtering of Azure Database for PostgreSQL deployments. Integration with Entra ID for centralized security and identity management. Connect with ease to your existing Azure Database for PostgreSQL deployments with the “Browse Azure” option in the “Add New Connection” menu. Figure 5: Connecting to an Azure Database for PostgreSQL instance using the Browse Azure option with Entra ID authentication.Single click to expand. \u0026nbsp; Connect to local Docker deployments with the Parameters or Connection String option. Figure 6: Connect to PostgreSQL in a local Docker deployment.Single click to expand. Password-less authentication with Entra Id Streamlined Authentication: Eliminates the need for manual login, offering a seamless integration experience for you. Automatic Token Refresh: Ensures uninterrupted connectivity and minimizes the risk of authentication timeouts during development. Enhanced Security: Provides robust protection by leveraging Entra-ID's secure authentication protocols. Time Efficiency: Reduces overhead by automating token management, allowing you to focus on coding rather than administrative tasks. Enterprise Compatibility: Aligns with corporate security standards and simplifies access to PostgreSQL databases in enterprise environments. User Consistency: You can use your existing Entra-ID credentials, avoiding the need to manage separate accounts. Database Explorer Provides a structured view of database objects such as schemas, tables, and functions. Enables creation, modification, and deletion of database objects. Figure 7: View, manage, and query database objects within the Database Explorer.Single click to expand. Query History Session query history is available below the Object Explorer. This allows you to quickly review previously run queries for reuse.\u0026nbsp; \u0026nbsp; Figure 8: Query History context menu detail.Single click to expand. Query Editing with Context-aware IntelliSense Context-aware IntelliSense for auto-completion of SQL keywords, table names, and functions. Syntax highlighting and auto-formatting for improved query readability. Query history tracking for reusing previously executed queries. Figure 9: Query editing with database context-aware IntelliSense.Single click to expand. What Sets the PostgreSQL Extension for VS Code Apart? The PostgreSQL extension for VS Code stands out in the crowded landscape of developer database management tools due to its unparalleled functionality and intuitive design. Here’s what makes it special: Enhanced Productivity: Features like context-aware IntelliSense and SQL formatting save time and minimize errors. pgsql GitHub Copilot Chat agent: Database and workspace context awareness, enabling smarter and more contextually relevant assistance for developers – combined with the ability to perform multi-step tasks. Streamlined Onboarding: The Connection Manager ensures you can get started within minutes. Improved Security: Entra ID integration provides robust access control and centralized identity management, including the ability to browse your Azure Database for PostgreSQL instances.\u0026nbsp; Comprehensive Toolset: You can manage database objects, execute queries, and deploy instances all within VS Code. Seamless Cloud Integration: Deep integration with Azure Database for PostgreSQL simplifies cloud database management. Getting Started with the PostgreSQL extension for Visual Studio Code Installing the PostgreSQL extension for VS Code is simple: Open the Extensions view in VS Code. Search for \"PostgreSQL\" in the Extensions Marketplace. Select and install the Preview PostgreSQL extension with the blue elephant seen in the screenshot below.\u0026nbsp; Figure 10: PostgreSQL extension available in the Marketplace. Extension ID: (ms-ossdata.vscode-pgsql) Also available in the online Visual Studio Code Marketplace.\u0026nbsp; Enabling the PostgreSQL GitHub Copilot Chat You will need the GitHub Copilot and GitHub Copilot chat extensions installed in VS Code to be able to log into their GitHub Account and use \"@pgsql\" in the chat interface to interact with their PostgreSQL database. Feedback and Support We value your insights. Use the built-in feedback tool in VS Code to share your thoughts and report issues. Your feedback will help us refine the extension and ensure it meets the needs of the developer community. \u0026nbsp; Regarding the standard preview license language included in this first release - Our goal is to ensure this extension is widely available and consumable by all Postgres users equally. We’re going to update the license. Stay tuned for updates.\u0026nbsp; Get Started The PostgreSQL extension for VS Code offers significant enhancements to development efficiency and productivity. We encourage you to explore the public preview today and experience improved workflows with PostgreSQL databases. To learn more and get started, visit: https://aka.ms/pg-vscode-docs \u0026nbsp; Special thanks to Jonathon Frost, Principal PM for all of his work on the @pgsql GitHub Copilot.\u0026nbsp;",
  "siteName": "TECHCOMMUNITY.MICROSOFT.COM",
  "favicon": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/m_assets/themes/customTheme1/favicon-1730836283320.png?time=1730836286415\u0026image-dimensions=180x180",
  "text": "We are excited to announce the public preview of the brand-new PostgreSQL extension for Visual Studio Code (VS Code), designed to simplify PostgreSQL database management and development workflows. With this extension, you can now manage database objects, draft queries with intelligent assistance from context-aware IntelliSense and our ‘@pgsql’ GitHub Copilot agent—all without ever leaving your favorite code editor. Many of you face hurdles in managing time effectively, with 41% of developers struggling with task-switching, according to the 2024 StackOverflow Developer Survey. Additionally, the 2024 Stripe Developer Coefficient Report reveals that developers spend up to 50% of their time debugging and troubleshooting code and databases. These inefficiencies are further compounded by the absence of integrated tools that unify database management and application development. The PostgreSQL extension for VS Code addresses these challenges head-on by integrating Postgres database tools and the @pgsql GitHub Copilot agent, providing a unified application development and database management experience. By integrating robust features such as Entra ID authentication for centralized identity management and deep Azure Database for PostgreSQL integration, this extension empowers you to focus on building innovative applications rather than wrestling with fragmented workflows. The public preview release of the PostgreSQL extension for VS Code introduces a suite of powerful new capabilities that enhance productivity and streamline development for application developers working with Postgres. Schema visualization is a breeze with our ‘right-click’ context menu options. o   Right-click on the database entry in the Object Explorer and select “Visualize Schema” Figure 1: Right-click on the database entry in the Object Explorer and select “Visualize Schema”Single click to expand. AI assistance directly within VS Code providing PostgreSQL database context reduces the PostgreSQL learning curve and improves developer productivity​. Simplified interaction with PostgreSQL databases and development tools using natural language. Commands such as \"@pgsql\" enable you to query databases, optimize schemas, and execute SQL operations with ease. Context menus, such as “Rewrite Query”, “Explain Query”, “Analyze Query Performance” provide AI Intelligence inside the query editor window. Real-time, expert-level guidance to help keep PostgreSQL databases performant and secure and improve code quality​. Figure 2: Screenshot of the PostgreSQL Copilot Context Menu.Single click to expand.Using the PostgreSQL Copilot Context Menu,  Figure 3: PostgreSQL Copilot Explain Query Context Menu in action.Single click to expand. GitHub Copilot Chat agent mode provides a database context aware intelligent assistant that can perform multi-stage tasks, moving beyond the question-and-answer chat experience. Agent mode allows the Copilot to bring in additional context from your workspace and, with permission, it can write and debug code on its own. Agent mode transforms PostgreSQL development by providing real-time, AI-driven guidance that simplifies complex tasks like app prototyping, debugging, schema optimization, and performance tuning.   In this example, we’ll ask the agent to create a new database on a specific server in my Saved Connections and enable the PostGIS extension. Figure 4: Using the @pgsql GitHub Copilot Chat in agent mode to create a new database from a natural language prompt.Single click to expand.The @pgsql agent begins by listing the server connections, connecting to the server ‘postgis’, drafts the script to modify the database and waits for permission to continue before making changes. Database modifications require explicit permission from the user. Simplified connection management for local and cloud-hosted PostgreSQL instances. Support for multiple connection profiles and connection string parsing for easy setup. Direct browsing and filtering of Azure Database for PostgreSQL deployments. Integration with Entra ID for centralized security and identity management. Connect with ease to your existing Azure Database for PostgreSQL deployments with the “Browse Azure” option in the “Add New Connection” menu. Figure 5: Connecting to an Azure Database for PostgreSQL instance using the Browse Azure option with Entra ID authentication.Single click to expand. Connect to local Docker deployments with the Parameters or Connection String option. Figure 6: Connect to PostgreSQL in a local Docker deployment.Single click to expand. Streamlined Authentication: Eliminates the need for manual login, offering a seamless integration experience for you. Automatic Token Refresh: Ensures uninterrupted connectivity and minimizes the risk of authentication timeouts during development. Enhanced Security: Provides robust protection by leveraging Entra-ID's secure authentication protocols. Time Efficiency: Reduces overhead by automating token management, allowing you to focus on coding rather than administrative tasks. Enterprise Compatibility: Aligns with corporate security standards and simplifies access to PostgreSQL databases in enterprise environments. User Consistency: You can use your existing Entra-ID credentials, avoiding the need to manage separate accounts. Provides a structured view of database objects such as schemas, tables, and functions. Enables creation, modification, and deletion of database objects. Figure 7: View, manage, and query database objects within the Database Explorer.Single click to expand. Session query history is available below the Object Explorer. This allows you to quickly review previously run queries for reuse.  Figure 8: Query History context menu detail.Single click to expand. Context-aware IntelliSense for auto-completion of SQL keywords, table names, and functions. Syntax highlighting and auto-formatting for improved query readability. Query history tracking for reusing previously executed queries. Figure 9: Query editing with database context-aware IntelliSense.Single click to expand. The PostgreSQL extension for VS Code stands out in the crowded landscape of developer database management tools due to its unparalleled functionality and intuitive design. Here’s what makes it special: Enhanced Productivity: Features like context-aware IntelliSense and SQL formatting save time and minimize errors. pgsql GitHub Copilot Chat agent: Database and workspace context awareness, enabling smarter and more contextually relevant assistance for developers – combined with the ability to perform multi-step tasks. Streamlined Onboarding: The Connection Manager ensures you can get started within minutes. Improved Security: Entra ID integration provides robust access control and centralized identity management, including the ability to browse your Azure Database for PostgreSQL instances.  Comprehensive Toolset: You can manage database objects, execute queries, and deploy instances all within VS Code. Seamless Cloud Integration: Deep integration with Azure Database for PostgreSQL simplifies cloud database management. Installing the PostgreSQL extension for VS Code is simple: Open the Extensions view in VS Code. Search for \"PostgreSQL\" in the Extensions Marketplace. Select and install the Preview PostgreSQL extension with the blue elephant seen in the screenshot below.  Figure 10: PostgreSQL extension available in the Marketplace. Extension ID: (ms-ossdata.vscode-pgsql)Also available in the online Visual Studio Code Marketplace.  You will need the GitHub Copilot and GitHub Copilot chat extensions installed in VS Code to be able to log into their GitHub Account and use \"@pgsql\" in the chat interface to interact with their PostgreSQL database. We value your insights. Use the built-in feedback tool in VS Code to share your thoughts and report issues. Your feedback will help us refine the extension and ensure it meets the needs of the developer community. Regarding the standard preview license language included in this first release - Our goal is to ensure this extension is widely available and consumable by all Postgres users equally. We’re going to update the license. Stay tuned for updates.  The PostgreSQL extension for VS Code offers significant enhancements to development efficiency and productivity. We encourage you to explore the public preview today and experience improved workflows with PostgreSQL databases. To learn more and get started, visit: https://aka.ms/pg-vscode-docs Special thanks to Jonathon Frost, Principal PM for all of his work on the @pgsql GitHub Copilot.",
  "image": "https://techcommunity.microsoft.com/t5/s/gxcuf89792/images/bS00NDE0NjQ4LWFjOHo0aw?revision=30",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eWe are excited to announce the public preview of the brand-new PostgreSQL extension for Visual Studio Code (VS Code), designed to simplify PostgreSQL database management and development workflows. With this extension, you can now manage database objects, draft queries with intelligent assistance from context-aware IntelliSense and our ‘@pgsql’ GitHub Copilot agent—all without ever leaving your favorite code editor.\u003c/p\u003e\n\n\u003cp\u003eMany of you face hurdles in managing time effectively, with 41% of developers struggling with task-switching, according to the \u003ca href=\"https://survey.stackoverflow.co/2024/\" target=\"_blank\" rel=\"noopener nofollow noreferrer\"\u003e2024 StackOverflow Developer Survey\u003c/a\u003e. Additionally, the \u003ca href=\"https://stripe.com/files/reports/the-developer-coefficient.pdf\" target=\"_blank\" rel=\"noopener nofollow noreferrer\"\u003e2024 Stripe Developer Coefficient Report\u003c/a\u003e reveals that developers spend up to 50% of their time debugging and troubleshooting code and databases. These inefficiencies are further compounded by the absence of integrated tools that unify database management and application development.\u003c/p\u003e\n\u003cp\u003eThe PostgreSQL extension for VS Code addresses these challenges head-on by integrating Postgres database tools and the @pgsql GitHub Copilot agent, providing a unified application development and database management experience. By integrating robust features such as Entra ID authentication for centralized identity management and deep Azure Database for PostgreSQL integration, this extension empowers you to focus on building innovative applications rather than wrestling with fragmented workflows.\u003c/p\u003e\n\n\u003cp\u003eThe public preview release of the PostgreSQL extension for VS Code introduces a suite of powerful new capabilities that enhance productivity and streamline development for application developers working with Postgres.\u003c/p\u003e\n\n\u003cp\u003eSchema visualization is a breeze with our ‘right-click’ context menu options.\u003c/p\u003e\n\u003cp\u003eo   Right-click on the database entry in the Object Explorer and select “Visualize Schema”\u003c/p\u003e\n\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"hvMjHN_caption\"\u003eFigure 1: Right-click on the database entry in the Object Explorer and select “Visualize Schema”\u003cbr/\u003eSingle click to expand.\u003cbr/\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAI assistance directly within VS Code providing PostgreSQL database context reduces the PostgreSQL learning curve and improves developer productivity​.\u003c/li\u003e\n\u003cli\u003eSimplified interaction with PostgreSQL databases and development tools using natural language.\u003c/li\u003e\n\u003cli\u003eCommands such as \u0026#34;@pgsql\u0026#34; enable you to query databases, optimize schemas, and execute SQL operations with ease.\u003c/li\u003e\n\u003cli\u003eContext menus, such as “Rewrite Query”, “Explain Query”, “Analyze Query Performance” provide AI Intelligence inside the query editor window.\u003c/li\u003e\n\u003cli\u003eReal-time, expert-level guidance to help keep PostgreSQL databases performant and secure and improve code quality​.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"dAS6Yc_caption\"\u003eFigure 2: Screenshot of the PostgreSQL Copilot Context Menu.\u003cbr/\u003eSingle click to expand.\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eUsing the PostgreSQL Copilot Context Menu, \u003c/p\u003e\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"bBmUvl_caption\"\u003eFigure 3: PostgreSQL Copilot Explain Query Context Menu in action.\u003cbr/\u003eSingle click to expand.\u003cbr/\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eGitHub Copilot Chat agent mode provides a database context aware intelligent assistant that can perform multi-stage tasks, moving beyond the question-and-answer chat experience. Agent mode allows the Copilot to bring in additional context from your workspace and, with permission, it can write and debug code on its own. Agent mode transforms PostgreSQL development by providing real-time, AI-driven guidance that simplifies complex tasks like app prototyping, debugging, schema optimization, and performance tuning.  \u003c/p\u003e\n\u003cp\u003eIn this example, we’ll ask the agent to create a new database on a specific server in my Saved Connections and enable the PostGIS extension.\u003c/p\u003e\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"yaGWdg_caption\"\u003eFigure 4: Using the @pgsql GitHub Copilot Chat in agent mode to create a new database from a natural language prompt.\u003cbr/\u003eSingle click to expand.\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eThe @pgsql agent begins by listing the server connections, connecting to the server ‘postgis’, drafts the script to modify the database and waits for permission to continue before making changes. Database modifications require explicit permission from the user.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eSimplified connection management for local and cloud-hosted PostgreSQL instances.\u003c/li\u003e\n\u003cli\u003eSupport for multiple connection profiles and connection string parsing for easy setup.\u003c/li\u003e\n\u003cli\u003eDirect browsing and filtering of Azure Database for PostgreSQL deployments.\u003c/li\u003e\n\u003cli\u003eIntegration with Entra ID for centralized security and identity management.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cbr/\u003eConnect with ease to your existing Azure Database for PostgreSQL deployments with the “Browse Azure” option in the “Add New Connection” menu.\u003c/p\u003e\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"xuwFXK_caption\"\u003eFigure 5: Connecting to an Azure Database for PostgreSQL instance using the Browse Azure option with Entra ID authentication.\u003cbr/\u003eSingle click to expand.\u003cbr/\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eConnect to local Docker deployments with the Parameters or Connection String option.\u003c/p\u003e\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"I4WU4K_caption\"\u003eFigure 6: Connect to PostgreSQL in a local Docker deployment.\u003cbr/\u003eSingle click to expand.\u003cbr/\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStreamlined Authentication:\u003c/strong\u003e Eliminates the need for manual login, offering a seamless integration experience for you.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAutomatic Token Refresh:\u003c/strong\u003e Ensures uninterrupted connectivity and minimizes the risk of authentication timeouts during development.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnhanced Security:\u003c/strong\u003e Provides robust protection by leveraging Entra-ID\u0026#39;s secure authentication protocols.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTime Efficiency:\u003c/strong\u003e Reduces overhead by automating token management, allowing you to focus on coding rather than administrative tasks.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnterprise Compatibility:\u003c/strong\u003e Aligns with corporate security standards and simplifies access to PostgreSQL databases in enterprise environments.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Consistency: \u003c/strong\u003eYou can use your existing Entra-ID credentials, avoiding the need to manage separate accounts.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cul\u003e\n\u003cli\u003eProvides a structured view of database objects such as schemas, tables, and functions.\u003c/li\u003e\n\u003cli\u003eEnables creation, modification, and deletion of database objects.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"P6AkPz_caption\"\u003eFigure 7: View, manage, and query database objects within the Database Explorer.\u003cbr/\u003eSingle click to expand.\u003cbr/\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eSession query history is available below the Object Explorer. This allows you to quickly review previously run queries for reuse. \u003c/p\u003e\n\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"5SGWfP_caption\"\u003eFigure 8: Query History context menu detail.\u003cbr/\u003eSingle click to expand.\u003cbr/\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eContext-aware IntelliSense for auto-completion of SQL keywords, table names, and functions.\u003c/li\u003e\n\u003cli\u003eSyntax highlighting and auto-formatting for improved query readability.\u003c/li\u003e\n\u003cli\u003eQuery history tracking for reusing previously executed queries.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"hBMjBs_caption\"\u003eFigure 9: Query editing with database context-aware IntelliSense.\u003cbr/\u003eSingle click to expand.\u003cbr/\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003eThe PostgreSQL extension for VS Code stands out in the crowded landscape of developer database management tools due to its unparalleled functionality and intuitive design. Here’s what makes it special:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEnhanced Productivity:\u003c/strong\u003e Features like context-aware IntelliSense and SQL formatting save time and minimize errors.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003epgsql GitHub Copilot Chat agent:\u003c/strong\u003e Database and workspace context awareness, enabling smarter and more contextually relevant assistance for developers – combined with the ability to perform multi-step tasks.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStreamlined Onboarding:\u003c/strong\u003e The Connection Manager ensures you can get started within minutes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImproved Security:\u003c/strong\u003e Entra ID integration provides robust access control and centralized identity management, including the ability to browse your Azure Database for PostgreSQL instances. \u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eComprehensive Toolset:\u003c/strong\u003e You can manage database objects, execute queries, and deploy instances all within VS Code.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSeamless Cloud Integration:\u003c/strong\u003e Deep integration with Azure Database for PostgreSQL simplifies cloud database management.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eInstalling the PostgreSQL extension for VS Code is simple:\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eOpen the Extensions view in VS Code.\u003c/li\u003e\n\u003cli\u003eSearch for \u0026#34;PostgreSQL\u0026#34; in the Extensions Marketplace.\u003c/li\u003e\n\u003cli\u003eSelect and install the Preview PostgreSQL extension with the blue elephant seen in the screenshot below. \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cspan data-image-alt=\"\"\u003e\u003cspan id=\"1B8con_caption\"\u003eFigure 10: PostgreSQL extension available in the Marketplace. E\u003cspan data-teams=\"true\"\u003extension ID: (ms-ossdata.vscode-pgsql)\u003cbr/\u003e\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/p\u003e\u003cp\u003eAlso available in the online \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=ms-ossdata.vscode-pgsql\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eVisual Studio Code Marketplace. \u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eYou will need the GitHub Copilot and GitHub Copilot chat extensions installed in VS Code to be able to log into their GitHub Account and use \u0026#34;@pgsql\u0026#34; in the chat interface to interact with their PostgreSQL database.\u003c/p\u003e\n\n\u003cp\u003eWe value your insights. Use the built-in feedback tool in VS Code to share your thoughts and report issues. Your feedback will help us refine the extension and ensure it meets the needs of the developer community.\u003c/p\u003e\n\n\u003cp\u003eRegarding the standard preview license language included in this first release - \u003cspan data-teams=\"true\"\u003eOur goal is to ensure this extension is widely available and consumable by all Postgres users equally. We’re going to update the license. Stay tuned for updates. \u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003eThe PostgreSQL extension for VS Code offers significant enhancements to development efficiency and productivity. We encourage you to explore the public preview today and experience improved workflows with PostgreSQL databases.\u003c/p\u003e\n\u003cp\u003eTo learn more and get started, visit: \u003ca href=\"https://aka.ms/pg-vscode-docs\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ehttps://aka.ms/pg-vscode-docs\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eSpecial thanks to \u003ca href=\"https://www.linkedin.com/in/jjfrost\" target=\"_blank\" rel=\"noopener nofollow noreferrer\"\u003eJonathon Frost, Principal PM\u003c/a\u003e for all of his work on the @pgsql GitHub Copilot. \u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": "2025-05-23T16:01:35.747-07:00"
}
