{
  "id": "845a88ff-8dc3-4cac-9d4a-688145d96897",
  "title": "Graphene OS: a security-enhanced Android build",
  "link": "https://lwn.net/SubscriberLink/1030004/898017c7953c0946/",
  "description": "Comments",
  "author": "",
  "published": "Thu, 24 Jul 2025 21:48:53 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "By Jonathan CorbetJuly 24, 2025",
  "length": 16424,
  "excerpt": "People tend to put a lot of trust into their phones. Those devices have access to no end of se [...]",
  "siteName": "LWN.net",
  "favicon": "https://static.lwn.net/images/favicon.png",
  "text": "People tend to put a lot of trust into their phones. Those devices have access to no end of sensitive data about our lives — our movements, finances, communications, and more — so phones belonging to even relatively low-profile people can be high-value targets. Android devices run free software, at least at some levels, so it should be possible to ensure that they are working in their owners' interests. Off-the-shelf Android installations tend to fall short of that goal. The GrapheneOS Android rebuild is an attempt to improve on that situation. GrapheneOS got its start as \"CopperheadOS\"; it was reviewed here in 2016. A couple of years later, though, an ugly dispute between the two founders of that project led to its demise. One of those founders, Daniel Micay, continued the work and formed what eventually became GrapheneOS, which is, according to this history page, an independent, open-source project that \"will never again be closely tied to any particular sponsor or company\". Work on GrapheneOS is supported by a Canada-based foundation created in 2023; there appears to be almost no public information available regarding this organization, though. At its core, GrapheneOS is an effort to harden Android against a number of threats and to make Android serve the privacy interests of its users. It is based on the Android Open Source Project, but removes a lot of code and adds a long list of changes. Some of those, such as a hardened malloc() library or the use of additional control-flow-integrity features, will be mostly invisible to users (unless they break apps, of course, which has evidently been known to happen). Others are more apparent, but it is clear that a lot of effort has gone into making the security improvements as unobtrusive as possible. The staff here at LWN.net really appreciate the subscribers who make our work possible. Is there a chance we could interest you in becoming one of them? Installation Some Android rebuilds prioritize supporting a wide range of devices, often with an eye toward keeping older devices working for as long as possible. GrapheneOS is not one of those projects. The list of supported hardware is limited to Google Pixel 6 through Pixel 9 devices, with some trailing-edge support for Pixel 4 and 5 devices. Even then, though, the newer devices are strongly recommended: 8th/9th generation Pixels provide a minimum guarantee of 7 years of support from launch instead of the previous 5 year minimum guarantee. 8th/9th generation Pixels also bring support for the incredibly powerful hardware memory tagging security feature as part of moving to new ARMv9 CPU cores. GrapheneOS uses hardware memory tagging by default to protect the base OS and known compatible user installed apps against exploitation, with the option to use it for all apps and opt-out on a case-by-case basis for the few incompatible with it. My phone had been making it clear for a while that it could not be counted on in the future, but the prospect of buying a new one inspired a lot of trepidation. Each new device seems to come with more privacy-hostile \"features\" and intrusive AI \"assistants\"; finding all of the necessary \"disable\" switches is a tedious and error-prone task. That, along with the news that Google's \"Gemini\" feels increasingly entitled to a device-owner's data regardless of its configuration, inspired the purchase of a Pixel 9 device that would be used to experiment with GrapheneOS to see if it could replace stock Android for everyday use. Flashing the firmware of an expensive device is always a bit of a nervous prospect; the GrapheneOS installer is designed to minimize the amount of fingernail biting involved in the process. There are two installation methods described in the documentation — a web-based install, and one that works from the command line. Naturally, I chose the command-line version. The instructions are straightforward enough: download the installation image, connect the device, and run the supplied script. Said script ran to completion and confidently declared victory at the end, but the device still only booted into normal Android — a repeatable result, but not quite the intended one. Some investigation turned up the (undocumented) fact that the web installation method is seen as being rather more reliable than the command-line version. So I tried that, and it worked as intended; the GrapheneOS experiment had begun in earnest. First impressions Stock Android includes some nice features to make the move to a new device as easy as possible — unsurprising, given the strong incentive to get people to make that move often. Most of the data, apps, and configurations that were on the old device will be automatically moved to the new one. GrapheneOS has no such feature; a newly installed phone is a blank slate that must be reconfigured from the beginning. One should expect to spend a lot of time rediscovering all of those settings that were set just right some years ago. As can be seen from the screenshot to the right, the initial GrapheneOS screen is an austere and monochromatic experience. The system handles color just fine, but color is something for the owner to configure, it seems. A stock Android install comes with a large set of apps out of the box, many of which the user likely never wanted in the first place, and many of which often cannot be deleted. GrapheneOS does not have all of that stuff. It comes with its own versions of the web browser, camera app, PDF viewer, and app store. Notably, GrapheneOS does not include the Google Play store or any apps from there (but keep reading for Google Play). The app store offers all of 13 apps in total. The web browser is a Chromium fork called Vanadium. It enables strict site isolation on mobile devices (which Chrome evidently does not) and adds a number of code-hardening features. The documentation strongly recommends avoiding Firefox, which is described as \"more vulnerable to exploitation\". The camera app is said to be the best available in a writing style that is often encountered with GrapheneOS: GrapheneOS Camera is far better than any of the portable open source camera alternatives and even most proprietary camera apps including paid apps. On Pixels, Pixel Camera can be used as an alternative with more features The camera app strips Exif metadata by default, and location metadata must be enabled separately if it is wanted. App stores One other thing that can be installed from the GrapheneOS store is the Accrescent app store, which is an alternative repository that claims a focus on security and privacy. It provides access to a few dozen more apps, including Organic Maps, the Molly Signal fork, and IronFox, a hardened version of Firefox. With those app stores, one can enable a certain amount of basic phone functionality, but the sad fact is that many of us will need a bit more than that. One alternative, of course, is F-Droid, which can certainly be installed and used on GrapheneOS. Hard-core security-oriented people, including those in the GrapheneOS community, tend to look down on F-Droid (see this article for an example), but it is a useful source for (mostly) free-software apps. In the end, though, it will often come down to using the Google Play store; an Android device can be nearly useless for many people without the apps found there. GrapheneOS offers a sandboxed version of Google Play that turns it into an ordinary app without the special privileges that Google Play has on stock Android systems. It worked without a hitch here; the documentation says that some apps may not work properly, but I did not encounter any. It is worth noting that Android provides an \"integrity API\" that can be used to query the status of the software running on the device. Among other things, it can attest to whether the secure-boot sequence was successfully executed, or whether the device is running an official Android build. GrapheneOS implements this API and, since it uses the secure-boot machinery, can pass the first test, but it is not an official image and cannot pass the second. Some apps care about the results of these queries and may refuse to work if they get an answer they don't like. GrapheneOS will put up a notification for each use of this API, so it is easy to see which apps are using it. Most don't, but some definitely do. I saw a few apps query this API, but did not encounter any that refused to work; booting securely was good enough for them. Some others are pickier; there is a short list of apps that refuse to run under GrapheneOS available. Testing any important apps before committing to an alternative build like GrapheneOS is thus an important bit of diligence. One just has to hope that a future app update won't make a working app decide to stop cooperating; this is a definite risk factor associated with using any alternative Android build. Security features GrapheneOS includes a number of security and privacy features beyond the under-the-hood hardening. Many of them are designed to make the device work as if the owner of the device actually owns it. For example, the provisioning data included with Android, which tells the device how to work with carriers around the world, allows those carriers to specify that features like tethering are not to be made available. GrapheneOS never quite got around to implementing that part of the system. There is, instead, an option to prevent the phone from being downgraded to older, less-secure cellular protocols. Standard Android gives control over some app permissions, but does not let users deny network access to an app. GrapheneOS does provide that control, though network access is enabled by default for compatibility reasons. If network access is disabled, the app in question sees a world where that access is still available, but, somehow, the device just never finds a signal. So apps should not refuse to run just because network access is unavailable (though they may, of course, fail to run correctly). There is a \"sensors\" permission bit that controls access to any sensors that are not subject to one of the other permissions; these include the accelerometer, compass, thermometer, or any other such that may be present. This permission, too, is enabled by default but can be turned off by the owner. The storage scopes feature can put apps into a sandbox where they believe they have full access to the device's shared storage, but they can only access the files they have created themselves. There is also a contact scopes feature that allows apps to believe they have full access to the owner's contacts, while keeping most or all of that data hidden from those apps. GrapheneOS supports fingerprint unlocking, just like normal Android, with one difference: after five consecutive failures, the fingerprint feature is disabled for 30 minutes. An owner being forced to supply a finger to unlock a device can thus disable that functionality quickly by using an unrecognized finger. For those whose privacy needs are more stringent, a duress PIN can be configured; entering that PIN causes the device to immediately wipe all of its data. Needless to say, this self-destruct feature should be used with care. There is a special app that can audit the state of a GrapheneOS device and, using the hardware security features, provide an attestation that the device has not been tampered with or downgraded to an older software version. The project makes frequent releases, and installed GrapheneOS systems update aggressively. The project updated to the Android 16 release in early July, slightly less than one month after Google released that version. In the default configuration, the device will automatically reboot after 18 hours of inactivity as a way of pushing all data to (encrypted) rest; that also has the effect of making the device run the latest software version. See also this page comparing a long list of security features across several Android-based builds. Governance and community One potential caveat is that the development community behind GrapheneOS is somewhat murky. As mentioned, a foundation exists to support this system, but there is little information about how the foundation operates beyond an impressively long list of ways to donate. The public registry information shows three directors: Micay, Khalykbek Yelshibekov, and Dmytro Mukhomor, but there is no public information on how directors are chosen or how the foundation uses its funds. There is a vast set of repositories containing the project's source, but there is little information on how one might contribute or what the development community is up to. Some information can be found on the build-instructions page. The project runs a set of chat rooms and a forum, but they seem to be dominated by user-oriented conversation rather than development. Participation by the project in the forums comes from a generic \"grapheneos\" account. In a response to a private query, the project claimed to have ten active, paid developers, most of whom are full time. One gets the feeling, though, that Micay is still the driving force behind GrapheneOS; if nothing else, the project's belligerent fediverse presence bears a lot of resemblance to his previous interaction patterns. What would happen if he were to depart the project is far from clear. There is a potential risk here that is hard to quantify. Overall impressions Setting up the device with GrapheneOS required a couple of days of work, much of which was dedicated to reproducing the apps and configuration on the older device. A certain amount of time must be put into setting the privacy features appropriately and giving apps the permissions they need to work. In the end, though, the device works just as well as its predecessor, with all the needed functionality present, and a lot of unneeded functionality absent. I have committed willingly to using it, and have no intention of going back. The system is undoubtedly more secure, even if the invisible hardening changes do not actually do anything. The sandboxing is tighter, there is more control over what apps can do, and there is no AI jinni doing its best to escape its bottle. The remaining problem, of course, is that, for many people, GrapheneOS alone will not be enough, and it will be necessary to let the nose of proprietary software into the tent. The documentation says that logging into the Play Store is not required, but it insisted on a login for me, re-establishing the umbilical connection to Google that installing GrapheneOS had cut. The keyboard does not support \"swipe\" typing; users who want that will likely end up installing GBoard, which poses privacy risks of its own. The GrapheneOS messaging app works, but Google's app can filter out some spam, one might as well toss it on. There are some reasonable, privacy-respecting weather apps on F-Droid these days, but the proprietary, privacy-trashing ones have better access to weather alerts (at least in countries that still have functioning weather agencies) and red-flag warnings. Android Auto is highly useful, and it works fine in GrapheneOS, but it requires its own level of special access permissions. Then there is the whole slew of banking apps, ride-share apps, airline apps, and so on that, seemingly, are indispensable in modern life. Each of these pokes another hole into the private space that GrapheneOS has so carefully created. It is possible to live and thrive without these tools, and many of us know people who do, but the tools exist and are popular for a reason. For many, it is simply not possible to get by without using proprietary software, much of which is known to be watching our every move and acting in hostile ways. Putting GrapheneOS onto a phone, at least, forces an awareness of each hole that is being poked, and provides an incentive to minimize those holes as much as possible. When potentially malicious software has to be allowed onto a device that contains many of our closest secrets, the system will at least do its best to keep that software within its specified boundaries and unable to do anything that it is not specifically allowed to do. Installing GrapheneOS orients a device more toward the interests of its owner; that, alone, is worth the price of admission.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003e\nPeople tend to put a lot of trust into their phones.  Those devices have\naccess to no end of sensitive data about our lives — our movements,\nfinances, communications, and more — so phones belonging to even relatively\nlow-profile people can be high-value targets.  Android devices run free\nsoftware, at least at some levels, so it should be possible to ensure that\nthey are working in their owners\u0026#39; interests.  Off-the-shelf Android\ninstallations tend to fall short of that goal.  The \u003ca href=\"https://grapheneos.org/\"\u003eGrapheneOS\u003c/a\u003e Android rebuild is an attempt\nto improve on that situation.\n\u003c/p\u003e\u003cp\u003e\nGrapheneOS got its start as \u0026#34;CopperheadOS\u0026#34;; it was \u003ca href=\"https://lwn.net/Articles/675719/\"\u003ereviewed here\u003c/a\u003e in 2016.  A couple of years\nlater, though, an ugly dispute between the two founders of that project led\nto its demise.  One of those founders, Daniel Micay, continued the work and\nformed what eventually became GrapheneOS, which is, according to \u003ca href=\"https://grapheneos.org/history/\"\u003ethis history page\u003c/a\u003e, an\nindependent, open-source project that \u0026#34;\u003cq\u003ewill never again be closely tied\nto any particular sponsor or company\u003c/q\u003e\u0026#34;.  Work on GrapheneOS is supported\nby a Canada-based foundation created in 2023; there appears to be almost no\npublic information available regarding this organization, though.\n\u003c/p\u003e\u003cp\u003e\nAt its core, GrapheneOS is an effort to harden Android against a number of\nthreats and to make Android serve the privacy interests of its users.  It\nis based on the \u003ca href=\"https://source.android.com/\"\u003eAndroid Open Source\nProject\u003c/a\u003e, but removes a lot of code and adds a long list of changes.\nSome of those, such as a \u003ca href=\"https://github.com/GrapheneOS/hardened_malloc?tab=readme-ov-file#hardened-malloc\"\u003ehardened\n\u003ctt\u003emalloc()\u003c/tt\u003e library\u003c/a\u003e or the use of additional\ncontrol-flow-integrity features, will be mostly invisible to users (unless\nthey break apps, of course, which has evidently been known to happen).\nOthers are more apparent, but it is clear that a lot of effort has gone\ninto making the security improvements as unobtrusive as possible.\n\u003c/p\u003e\u003cblockquote\u003e\nThe staff here at LWN.net really appreciate the subscribers who make\nour work possible. Is there a chance we could interest you in \u003ca href=\"https://lwn.net/Promo/daroc2/claim\"\u003ebecoming one of them\u003c/a\u003e?\n\u003c/blockquote\u003e\n\u003ch4\u003eInstallation\u003c/h4\u003e\n\u003cp\u003e\nSome Android rebuilds prioritize supporting a wide range of devices, often\nwith an eye toward keeping older devices working for as long as possible.\nGrapheneOS is not one of those projects.  The \u003ca href=\"https://grapheneos.org/faq#supported-devices\"\u003elist of supported\nhardware\u003c/a\u003e is limited to Google Pixel 6 through Pixel 9\ndevices, with some trailing-edge support for Pixel 4 and 5\ndevices.  Even then, though, the newer devices are strongly recommended:\n\u003c/p\u003e\u003cblockquote\u003e\n\t8th/9th generation Pixels provide a minimum guarantee of 7 years of\n\tsupport from launch instead of the previous 5 year minimum\n\tguarantee. 8th/9th generation Pixels also bring support for the\n\tincredibly powerful hardware memory tagging security feature as\n\tpart of moving to new ARMv9 CPU cores. GrapheneOS uses hardware\n\tmemory tagging by default to protect the base OS and known\n\tcompatible user installed apps against exploitation, with the\n\toption to use it for all apps and opt-out on a case-by-case basis\n\tfor the few incompatible with it.\n\u003c/blockquote\u003e\n\u003cp\u003e\nMy phone had been making it clear for a while that it could not be counted\non in the future, but the prospect of buying a new one inspired a lot of\ntrepidation.  Each new device seems to come with more privacy-hostile\n\u0026#34;features\u0026#34; and intrusive AI \u0026#34;assistants\u0026#34;; finding all of the necessary\n\u0026#34;disable\u0026#34; switches is a tedious and error-prone task.  That, along with the\n\u003ca href=\"https://www.techradar.com/vpn/vpn-privacy-security/google-gemini-can-now-read-your-whatsapp-chats-without-you-knowing-but-you-can-stop-it\"\u003enews\u003c/a\u003e\nthat Google\u0026#39;s \u0026#34;Gemini\u0026#34; feels increasingly entitled to a device-owner\u0026#39;s data\nregardless of its configuration, inspired the purchase of a Pixel 9\ndevice that would be used to experiment with GrapheneOS to see if it could\nreplace stock Android for everyday use.\n\u003c/p\u003e\u003cp\u003e\nFlashing the firmware of an expensive device is always a bit of a nervous\nprospect; the GrapheneOS installer is designed to minimize the amount of\nfingernail biting involved in the process.  There are two installation\nmethods described in the documentation — a web-based install, and one that\nworks from the command line.  Naturally, I chose the command-line version.\n\u003ca href=\"https://grapheneos.org/install/\"\u003eThe instructions\u003c/a\u003e are\nstraightforward enough: download the installation image, connect the\ndevice, and run the supplied script.  Said script ran to completion and\nconfidently declared victory at the end, but the device still only booted\ninto normal Android — a repeatable result, but not quite the intended one.\n\u003c/p\u003e\u003cp\u003e\nSome investigation turned up the (undocumented) fact that the web\ninstallation method is seen as being rather more reliable than the\ncommand-line version.  So I tried that, and it worked as intended; the\nGrapheneOS experiment had begun in earnest.\n\u003c/p\u003e\u003ch4\u003eFirst impressions\u003c/h4\u003e\n\u003cp\u003e\n\u003ca href=\"https://lwn.net/Articles/1030202/\"\u003e\u003cimg src=\"https://static.lwn.net/images/2025/grapheneos-sm.png\" alt=\"[GrapheneOS screenshot]\" width=\"150\" height=\"335\"/\u003e\u003c/a\u003e\n\nStock Android includes some nice features to make the move to a new device\nas easy as possible — unsurprising, given the strong incentive to get\npeople to make that move often.  Most of the data, apps, and configurations\nthat were on the old device will be automatically moved to the new one.\nGrapheneOS has no such feature; a newly installed phone is a blank slate\nthat must be reconfigured from the beginning.  One should expect to spend a\nlot of time rediscovering all of those settings that were set just right some\nyears ago.\n\u003c/p\u003e\u003cp\u003e\nAs can be seen from the screenshot to the right, the initial GrapheneOS\nscreen is an austere and monochromatic experience.  The system handles\ncolor just fine, but color is something for the owner to configure, it seems.\n\u003c/p\u003e\u003cp\u003e\nA stock Android install comes with a large set of apps out of the box, many\nof which the user likely never wanted in the first place, and many of which\noften cannot be deleted.  GrapheneOS does not have all of that stuff.  It\ncomes with its own versions of the web browser, camera app, PDF viewer, and\napp store.  Notably, GrapheneOS does \u003ci\u003enot\u003c/i\u003e include the Google Play\nstore or any apps from there (but keep reading for Google Play).  The app\nstore offers all of 13 apps in total.\n\u003c/p\u003e\u003cp\u003e\nThe web browser is a Chromium fork called \u003ca href=\"https://grapheneos.org/usage#web-browsing\"\u003eVanadium\u003c/a\u003e.  It enables\nstrict site isolation on mobile devices (which Chrome evidently does not)\nand adds a number of code-hardening features.  The documentation strongly\nrecommends avoiding Firefox, which is described as \u0026#34;\u003cq\u003emore vulnerable to\nexploitation\u003c/q\u003e\u0026#34;.\n\u003c/p\u003e\u003cp\u003e\nThe \u003ca href=\"https://grapheneos.org/usage#camera\"\u003ecamera app\u003c/a\u003e is said to\nbe the best available in a writing style that is often encountered with\nGrapheneOS:\n\u003c/p\u003e\u003cblockquote\u003e\n\tGrapheneOS Camera is far better than any of the portable open\n\tsource camera alternatives and even most proprietary camera apps\n\tincluding paid apps. On Pixels, Pixel Camera can be used as an\n\talternative with more features\n\u003c/blockquote\u003e\n\u003cp\u003e\nThe camera app strips \u003ca href=\"https://en.wikipedia.org/wiki/Exif\"\u003eExif\u003c/a\u003e\nmetadata by default, and location metadata must be enabled separately if it\nis wanted.\n\u003c/p\u003e\u003ch4\u003eApp stores\u003c/h4\u003e\n\u003cp\u003e\nOne other thing that can be installed from the GrapheneOS store is the\n\u003ca href=\"https://accrescent.app/\"\u003eAccrescent\u003c/a\u003e app store,\nwhich is an alternative repository that claims a focus on security and\nprivacy.  It provides access to a few dozen more apps, including \u003ca href=\"https://organicmaps.app/\"\u003eOrganic Maps\u003c/a\u003e, the \u003ca href=\"https://molly.im/\"\u003eMolly\u003c/a\u003e Signal fork, and \u003ca href=\"https://gitlab.com/ironfox-oss/IronFox#ironfox\"\u003eIronFox\u003c/a\u003e, a hardened\nversion of \nFirefox.\n\u003c/p\u003e\u003cp\u003e\nWith those app stores, one can enable a certain amount of basic phone\nfunctionality, but the sad fact is that many of us will need a bit more\nthan that.  One alternative, of course, is \u003ca href=\"https://f-droid.org/\"\u003eF-Droid\u003c/a\u003e, which can certainly be installed\nand used on GrapheneOS.  Hard-core security-oriented people, including\nthose in the GrapheneOS community, tend to look down on F-Droid (see \u003ca href=\"https://privsec.dev/posts/android/f-droid-security-issues/\"\u003ethis\narticle\u003c/a\u003e for an example), but it is a useful source for (mostly)\nfree-software apps.\n\u003c/p\u003e\u003cp\u003e\nIn the end, though, it will often come down to using the Google Play store;\nan Android device can be nearly useless for many people without the apps\nfound there.  GrapheneOS offers \u003ca href=\"https://grapheneos.org/usage#sandboxed-google-play\"\u003ea sandboxed\nversion of Google Play\u003c/a\u003e that turns it into an ordinary app without the\nspecial privileges that Google Play has on stock Android systems.  It\nworked without a hitch here; the documentation says that some apps may not\nwork properly, but I did not encounter any.\n\u003c/p\u003e\u003cp\u003e\nIt is worth noting that Android provides \u003ca href=\"https://developer.android.com/google/play/integrity\"\u003ean \u0026#34;integrity\nAPI\u0026#34;\u003c/a\u003e that can be used to query the status of the software running on\nthe device.  Among other things, it can attest to whether the secure-boot\nsequence was successfully executed, or whether the device is running an\nofficial Android build.  GrapheneOS implements this API and, since it uses\nthe secure-boot machinery, can pass the first test, but it is not an\nofficial image and cannot pass the second.  Some apps care about the\nresults of these queries and may refuse to work if they get an answer they\ndon\u0026#39;t like.\n\u003c/p\u003e\u003cp\u003e\nGrapheneOS will put up a notification for each use of this API, so it is\neasy to see which apps are using it.  Most don\u0026#39;t, but some definitely do.\nI saw a few apps query this API, but did not encounter any that refused to\nwork; booting securely was good enough for them.  Some others are pickier;\nthere is \u003ca href=\"https://grapheneos.org/articles/attestation-compatibility-guide#apps-banning-grapheneos\"\u003ea\nshort list of apps\u003c/a\u003e that refuse to run under GrapheneOS available.\nTesting any important apps before committing to an alternative build like\nGrapheneOS is thus an important bit of diligence.  One just has to hope\nthat a future app update won\u0026#39;t make a working app decide to stop\ncooperating; this is a definite risk factor associated with using any\nalternative Android build.\n\u003c/p\u003e\u003ch4\u003eSecurity features\u003c/h4\u003e\n\u003cp\u003e\nGrapheneOS includes a number of security and privacy features beyond the\nunder-the-hood hardening.  Many of them are designed to make the device\nwork as if the owner of the device actually owns it.  For example, the\nprovisioning data included with Android, which tells the device how to work\nwith carriers around the world, allows those carriers to specify that\nfeatures like tethering are not to be made available.  GrapheneOS never\nquite got around to implementing that part of the system.  There is,\ninstead, an option to prevent the phone from being downgraded to older,\nless-secure cellular protocols.\n\u003c/p\u003e\u003cp\u003e\nStandard Android gives control over some app permissions, but does not let\nusers deny network access to an app.  GrapheneOS does provide that control,\nthough network access is enabled by default for compatibility reasons.  If\nnetwork access is disabled, the app in question sees a world where that\naccess is still available, but, somehow, the device just never finds a\nsignal.  So apps should not refuse to run just because network access is\nunavailable (though they may, of course, fail to run correctly).\n\u003c/p\u003e\u003cp\u003e\nThere is a \u0026#34;sensors\u0026#34; permission bit that controls access to any\nsensors that are not subject to one of the other permissions; these include\nthe accelerometer, compass, thermometer, or any other such that may be\npresent.  This permission, too, is enabled by default but can be turned off\nby the owner.\n\u003c/p\u003e\u003cp\u003e\nThe \u003ca href=\"https://grapheneos.org/usage#storage-scopes\"\u003estorage\nscopes\u003c/a\u003e feature can put apps into a sandbox where they believe they have\nfull access to the device\u0026#39;s shared storage, but they can only access the\nfiles they have created themselves.  There is also a \u003ca href=\"https://grapheneos.org/usage#contact-scopes\"\u003econtact scopes\u003c/a\u003e\nfeature that allows apps to believe they have full access to the owner\u0026#39;s\ncontacts, while keeping most or all of that data hidden from those apps.\n\u003c/p\u003e\u003cp\u003e\nGrapheneOS supports fingerprint unlocking, just like normal Android, with\none difference: after five consecutive failures, the fingerprint feature is\ndisabled for 30 minutes.  An owner being forced to supply a finger to\nunlock a device can thus disable that functionality quickly by using an\nunrecognized finger.  For those whose privacy needs are more stringent, a\n\u003ca href=\"https://grapheneos.org/features#duress\"\u003eduress PIN\u003c/a\u003e can be\nconfigured; entering that PIN causes the device to immediately wipe all of\nits data.  Needless to say, this self-destruct feature should be used with\ncare.\n\u003c/p\u003e\u003cp\u003e\nThere is \u003ca href=\"https://attestation.app/about\"\u003ea special app\u003c/a\u003e that can\naudit the state of a GrapheneOS device and, using the hardware security\nfeatures, provide an attestation that the device has not been tampered with\nor downgraded to an older software version.\n\u003c/p\u003e\u003cp\u003e\nThe project makes frequent \u003ca href=\"https://grapheneos.org/releases\"\u003ereleases\u003c/a\u003e, and installed\nGrapheneOS systems update aggressively.  The project updated to the\nAndroid 16 release in early July, slightly less than one month after\nGoogle released that version.  In the default configuration, the device\nwill automatically reboot after 18 hours of inactivity as a way of\npushing all data to (encrypted) rest; that also has the effect of making\nthe device run the latest software version.\n\u003c/p\u003e\u003cp\u003e\nSee also \u003ca href=\"https://eylenburg.github.io/android_comparison.htm\"\u003ethis\npage\u003c/a\u003e comparing a long list of security features across several\nAndroid-based builds.\n\n\u003c/p\u003e\u003ch4\u003eGovernance and community\u003c/h4\u003e\n\u003cp\u003e\nOne potential caveat is that the development community behind GrapheneOS is\nsomewhat murky.  As mentioned, a foundation exists to support this system,\nbut there is little information about how the foundation operates beyond \u003ca href=\"https://grapheneos.org/donate\"\u003ean impressively long list\u003c/a\u003e of ways\nto donate.  The \u003ca href=\"https://federalcorporation.ca/corporation/14857577\"\u003epublic registry\ninformation\u003c/a\u003e shows three directors: Micay, Khalykbek Yelshibekov, and\nDmytro Mukhomor, but there is no public information on how directors are\nchosen or how the foundation uses its funds.\n\u003c/p\u003e\u003cp\u003e\nThere is \u003ca href=\"https://grapheneos.org/source\"\u003ea vast set of\nrepositories\u003c/a\u003e containing the project\u0026#39;s source, but there is little\ninformation on how one might contribute or what the development community\nis up to.  Some information can be found on \u003ca href=\"https://grapheneos.org/build\"\u003ethe build-instructions page\u003c/a\u003e.  The\nproject runs \u003ca href=\"https://grapheneos.org/contact\"\u003ea set of chat rooms\nand a forum\u003c/a\u003e, but they seem to be dominated by user-oriented\nconversation rather than development.  Participation by the project in the\nforums comes from a generic \u0026#34;grapheneos\u0026#34; account.\n\u003c/p\u003e\u003cp\u003e\nIn a response to a private query, the project claimed to have ten active,\npaid developers, most of whom are full time.  One gets the feeling, though,\nthat Micay is still the driving force behind GrapheneOS; if nothing else,\nthe project\u0026#39;s belligerent \u003ca href=\"https://grapheneos.social/@GrapheneOS\"\u003efediverse presence\u003c/a\u003e bears a\nlot of resemblance to his previous interaction patterns.  What would happen\nif he were to depart the project is far from clear.  There is a potential\nrisk here that is hard to quantify.\n\u003c/p\u003e\u003ch4\u003eOverall impressions\u003c/h4\u003e\n\u003cp\u003e\nSetting up the device with GrapheneOS required a couple of days of work,\nmuch of which was dedicated to reproducing the apps and configuration on\nthe older device.  A certain amount of time must be put into setting the\nprivacy features appropriately and giving apps the permissions they need to\nwork.  In the end, though, the device works just as well as its\npredecessor, with all the needed functionality present, and a lot of\nunneeded functionality absent.  I have committed willingly to using it, and\nhave no intention of going back.\n\u003c/p\u003e\u003cp\u003e\n\nThe system is undoubtedly more secure, even if the invisible\nhardening changes do not actually do anything.  The sandboxing is tighter,\nthere is more control over what apps can do, and there is no AI jinni doing\nits best to escape its bottle.\n\u003c/p\u003e\u003cp\u003e\nThe remaining problem, of course, is that, for many people, GrapheneOS alone\nwill not be enough, and it will be necessary to let the nose of proprietary\nsoftware into the tent.  The documentation says that logging into the Play\nStore is not required, but it insisted on a login for me, re-establishing\nthe umbilical connection to Google that installing GrapheneOS had cut.  The\nkeyboard does not support \u0026#34;swipe\u0026#34; typing; users who want that will likely\nend up installing GBoard, which poses privacy risks of its own. The\nGrapheneOS messaging app works, but Google\u0026#39;s app can filter out some spam,\none might as well toss it on.  There are some reasonable,\nprivacy-respecting weather apps on F-Droid these days, but the proprietary,\nprivacy-trashing ones have better access to weather alerts (at least in\ncountries that still have functioning weather agencies) and red-flag\nwarnings.  Android Auto is highly useful, and it works fine in GrapheneOS,\nbut it requires its own level of special access permissions.\n\u003c/p\u003e\u003cp\u003e\nThen there is the whole slew of banking apps, ride-share apps, airline\napps, and so on that, seemingly, are indispensable in modern life.  Each of\nthese pokes another hole into the private space that GrapheneOS has so\ncarefully created.  It \u003ci\u003eis\u003c/i\u003e possible to live and thrive without these\ntools, and many of us know people who do, but the tools exist and are\npopular for a reason.  For many, it is simply not possible to get by\nwithout using proprietary software, much of which is known to be watching\nour every move and acting in hostile ways.\n\u003c/p\u003e\u003cp\u003e\nPutting GrapheneOS onto a phone, at least, forces an awareness of each hole\nthat is being poked, and provides an incentive to minimize those holes as\nmuch as possible.  When potentially malicious software has to be allowed\nonto a device that contains many of our closest secrets, the system will at\nleast do its best to keep that software within its specified boundaries and\nunable to do anything that it is not specifically allowed to do.\nInstalling GrapheneOS orients a device more toward the interests of its\nowner; that, alone, is worth the price of admission.\u003cbr clear=\"all\"/\u003e\u003c/p\u003e\n               \u003cbr clear=\"all\"/\u003e\n               \u003chr/\u003e\n            \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": null,
  "modifiedTime": null
}
