{
  "id": "19b2465b-a0be-4c3b-abd4-213be5602fbe",
  "title": "Hyperspace",
  "link": "https://hypercritical.co/2025/02/25/hyperspace",
  "description": "Comments",
  "author": "",
  "published": "Tue, 25 Feb 2025 15:51:54 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "by John Siracusa",
  "length": 4362,
  "excerpt": "February 25, 2025 at 10:00 AM",
  "siteName": "",
  "favicon": "https://hypercritical.co/images/tiny-mac-192.png",
  "text": "Apps About Archive Contact RSS Hypercritical February 25, 2025 at 10:00 AM My interest in file systems started when I discovered how type and creator codes1 and resource forks contributed to the fantastic user interface on my original Macintosh in 1984. In the late 1990s, when it looked like Apple might buy Be Inc. to solve its operating system problems, the Be File System was the part I was most excited about. When Apple bought NeXT instead and (eventually) created Mac OS X, I was extremely enthusiastic about the possibility of ZFS becoming the new file system for the Mac. But that didn’t happen either. Finally, at WWDC 2017, Apple announced Apple File System (APFS) for macOS (after secretly test-converting everyone’s iPhones to APFS and then reverting them back to HFS+ as part of an earlier iOS 10.x update in one of the most audacious technological gambits in history). APFS wasn’t ZFS, but it was still a huge leap over HFS+. Two of its most important features are point-in-time snapshots and copy-on-write clones. Snapshots allow for more reliable and efficient Time Machine backups. Copy-on-write clones are based on the same underlying architectural features that enable snapshots: a flexible arrangement between directory entries and their corresponding file contents. Today, most Mac users don’t even notice that using the “Duplicate” command in the Finder to make a copy of a file doesn’t actually copy the file’s contents. Instead, it makes a “clone” file that shares its data with the original file. That’s why duplicating a file in the Finder is nearly instant, no matter how large the file is. Despite knowing about clone files since the APFS introduction nearly eight years ago, I didn’t give them much thought beyond the tiny thrill of knowing that I wasn’t eating any more disk space when I duplicated a large file in the Finder. But late last year, as my Mac’s disk slowly filled, I started to muse about how I might be able to get some disk space back. If I could find files that had the same content but were not clones of each other, I could convert them into clones that all shared a single instance of the data on disk. I took an afternoon to whip up a Perl script (that called out to a command-line tool written in C and another written in Swift) to run against my disk to see how much space I might be able to save by doing this. It turned out to be a lot: dozens of gigabytes. At this point, there was no turning back. I had to make this into an app. There are plenty of Mac apps that will save disk space by finding duplicate files and then deleting the duplicates. Using APFS clones, my app could reclaim disk space without removing any files! As a digital pack rat, this appealed to me immensely. By the end of that week, I’d written a barebones Mac app to do the same thing my Perl script was doing. In the months that followed, I polished and tested the app, and christened it Hyperspace. I’m happy to announce that Hyperspace is now available in the Mac App Store. Hyperspace is a free download, and it’s free to scan to see how much space you might save. To actually reclaim any of that space, you will have to pay for the app. Like all my apps, Hyperspace is a bit difficult to explain. I’ve attempted to do so, at length, in the Hyperspace documentation. I hope it makes enough sense to enough people that it will be a useful addition to the Mac ecosystem. For my fellow developers who might be curious, this is my second Mac app that uses SwiftUI and my first that uses the SwiftUI life cycle. It’s also my second app to use Swift 6 and my first to do so since very early in its development. I found it much easier to use Swift 6 from (nearly) the start than to convert an existing, released app to Swift 6. Even so, there are still many rough edges to Swift 6, and I look forward to things being smoothed out a bit in the coming years. In a recent episode of ATP, I described the then-unnamed Hyperspace as “An Incredibly Dangerous App.” Like the process of converting from HFS+ to APFS, Hyperspace modifies files that it did not create and does not own. It is, by far, the riskiest app I’ve created. (Reclaiming disk space ain’t like dusting crops…) But I also think it might be the most useful to the largest number of people. I hope you like it. © 2010-2025 John Siracusa",
  "image": "https://hypercritical.co/2025/02/25/images/hyperspace-icon-1024-lossy.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"container\"\u003e\n\n\u003cdiv id=\"nav\"\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://hypercritical.co/apps/\"\u003eApps\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hypercritical.co/about/\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hypercritical.co/archive/\"\u003eArchive\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hypercritical.co/contact/\"\u003eContact\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hypercritical.co/feeds/main\"\u003eRSS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003ch2\u003e\u003ca href=\"https://hypercritical.co/\"\u003eHypercritical\u003cspan\u003e\u003cimg src=\"https://hypercritical.co/images/tiny-mac.gif\" width=\"16\" height=\"16\" alt=\"\"/\u003e\u003c/span\u003e\u003c/a\u003e\u003c/h2\u003e \n\n\u003chr/\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003e\u003ctime datetime=\"2025-02-25T10:00:10-05:00\"\u003eFebruary 25, 2025 at 10:00 AM\u003c/time\u003e\n\u003c/p\u003e\u003c/div\u003e\n\n\n\n\n\n\n\n\u003cp\u003eMy interest in file systems started when I discovered how \u003ca href=\"https://folklore.org/The_Grand_Unified_Model_The_Finder.html\"\u003etype and creator codes\u003c/a\u003e\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" rel=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e and \u003ca href=\"https://folklore.org/The_Grand_Unified_Model.html?sort=date\"\u003eresource forks\u003c/a\u003e contributed to the fantastic user interface on my original Macintosh in 1984. In the late 1990s, when it \u003ca href=\"https://hypercritical.co/2025/02/25/images/macworld-february-1997.jpg\"\u003elooked like\u003c/a\u003e Apple might buy \u003ca href=\"https://en.wikipedia.org/wiki/Be_Inc.\"\u003eBe Inc.\u003c/a\u003e to solve its operating system problems, the \u003ca href=\"https://en.wikipedia.org/wiki/Be_File_System\"\u003eBe File System\u003c/a\u003e was the part I was \u003ca href=\"http://nobius.org/~dbg/practical-file-system-design.pdf\"\u003emost excited\u003c/a\u003e about. When Apple bought NeXT instead and (\u003ca href=\"https://en.wikipedia.org/wiki/Rhapsody_(operating_system)\"\u003eeventually\u003c/a\u003e) created Mac OS X, I was \u003ca href=\"https://hypercritical.co/fatbits/2005/11/21/whos-minding-the-store\"\u003eextremely\u003c/a\u003e \u003ca href=\"https://hypercritical.co/fatbits/2005/12/09/zfs-data-integrity-explained\"\u003eenthusiastic\u003c/a\u003e about the \u003ca href=\"https://www.theregister.com/2007/06/07/apple_using_zfs_in_leopard/\"\u003epossibility\u003c/a\u003e of ZFS becoming the new file system for the Mac. But that \u003ca href=\"https://arstechnica.com/gadgets/2016/06/zfs-the-other-new-apple-file-system-that-almost-was-until-it-wasnt/\"\u003edidn’t happen\u003c/a\u003e either.\u003c/p\u003e\n\n\u003cp\u003eFinally, at WWDC 2017, Apple announced \u003ca href=\"https://en.wikipedia.org/wiki/Apple_File_System\"\u003eApple File System\u003c/a\u003e (APFS) for macOS (after \u003ca href=\"https://www.youtube.com/watch?v=IcyaadNy9Jk\u0026amp;t=1670s\"\u003esecretly test-converting everyone’s iPhones to APFS and then reverting them back to HFS+\u003c/a\u003e as part of an earlier iOS 10.x update in one of the most audacious technological gambits in history).\u003c/p\u003e\n\n\u003cp\u003eAPFS wasn’t ZFS, but it was still a huge leap over \u003ca href=\"https://en.wikipedia.org/wiki/HFS_Plus\"\u003eHFS+\u003c/a\u003e. Two of its most important features are \u003ca href=\"https://en.wikipedia.org/wiki/Snapshot_(computer_storage)\"\u003epoint-in-time snapshots\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Copy-on-write#In_computer_storage\"\u003ecopy-on-write\u003c/a\u003e \u003ca href=\"https://en.wikipedia.org/wiki/Apple_File_System#Clones\"\u003eclones\u003c/a\u003e. Snapshots allow for more reliable and efficient \u003ca href=\"https://en.wikipedia.org/wiki/Time_Machine_(macOS)\"\u003eTime Machine\u003c/a\u003e backups. Copy-on-write clones are based on the same underlying architectural features that enable snapshots: a flexible arrangement between directory entries and their corresponding file contents.\u003c/p\u003e\n\n\u003cp\u003eToday, most Mac users don’t even notice that using the “Duplicate” command in the Finder to make a copy of a file doesn’t actually copy the file’s contents. Instead, it makes a “clone” file that shares its data with the original file. That’s why duplicating a file in the Finder is nearly instant, no matter how large the file is.\u003c/p\u003e\n\n\u003cp\u003eDespite knowing about clone files since the APFS introduction nearly eight years ago, I didn’t give them much thought beyond the tiny thrill of knowing that I wasn’t eating any more disk space when I duplicated a large file in the Finder. But late last year, as my Mac’s disk slowly filled, I started to muse about how I might be able to get some disk space back.\u003c/p\u003e\n\n\u003cp\u003eIf I could find files that had the same content but were \u003ci\u003enot\u003c/i\u003e clones of each other, I could convert them into clones that all shared a single instance of the data on disk. I took an afternoon to whip up a Perl script (that called out to a command-line tool written in C and another written in Swift) to run against my disk to see how much space I might be able to save by doing this. It turned out to be a lot: dozens of gigabytes.\u003c/p\u003e\n\n\u003cp\u003eAt this point, there was no turning back. I had to make this into an app. There are plenty of Mac apps that will save disk space by finding duplicate files and then \u003ci\u003edeleting\u003c/i\u003e the duplicates. Using APFS clones, my app could reclaim disk space \u003ci\u003e\u003ca href=\"https://hypercritical.co/hyperspace/#without-removing\"\u003ewithout removing any files\u003c/a\u003e!\u003c/i\u003e As a digital pack rat, this appealed to me immensely.\u003c/p\u003e\n\n\u003cp\u003eBy the end of that week, I’d written a barebones Mac app to do the same thing my Perl script was doing. In the months that followed, I polished and tested the app, and christened it \u003ca href=\"https://hypercritical.co/hyperspace/\"\u003eHyperspace\u003c/a\u003e. I’m happy to announce that Hyperspace is now available in the Mac App Store.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://apps.apple.com/us/app/hyperspace-reclaim-disk-space/id6739505345?mt=12\"\u003e\u003cimg src=\"https://hypercritical.co/2025/02/25/images/hyperspace-icon-1024-lossy.png\" width=\"512\" height=\"512\" alt=\"The Hyperspace app icon, created by Iconfactory\" title=\"The Hyperspace app icon, created by Iconfactory\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://apps.apple.com/us/app/hyperspace-reclaim-disk-space/id6739505345?mt=12\"\u003e\u003cimg src=\"https://hypercritical.co/images/download-on-mac-app-store.svg\" height=\"40\" alt=\"Download Hyperspace from the Mac App Store\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHyperspace is a free download, and it’s free to scan to see how much space you might save. To actually reclaim any of that space, you will have to \u003ca href=\"https://hypercritical.co/hyperspace/#purchase\"\u003epay for the app\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eLike \u003ca href=\"https://hypercritical.co/apps/\"\u003eall my apps\u003c/a\u003e, Hyperspace is a bit difficult to explain. I’ve attempted to do so, at length, in the \u003ca href=\"https://hypercritical.co/hyperspace/\"\u003eHyperspace documentation\u003c/a\u003e. I hope it makes enough sense to enough people that it will be a useful addition to the Mac ecosystem.\u003c/p\u003e\n\n\u003cp\u003eFor my fellow developers who might be curious, this is my second Mac app that uses SwiftUI and my first that uses the \u003ca href=\"https://developer.apple.com/documentation/swiftui/migrating-to-the-swiftui-life-cycle\"\u003eSwiftUI life cycle\u003c/a\u003e. It’s also my second app to use Swift 6 and my first to do so since very early in its development. I found it \u003ci\u003emuch\u003c/i\u003e easier to use Swift 6 from (nearly) the start than to convert an existing, released app to Swift 6. Even so, there are still many rough edges to Swift 6, and I look forward to things being \u003ca href=\"https://github.com/swiftlang/swift-evolution/blob/main/visions/approachable-concurrency.md\"\u003esmoothed\u003c/a\u003e \u003ca href=\"https://hachyderm.io/@holly/114039272702099974\"\u003eout\u003c/a\u003e a bit in the coming years.\u003c/p\u003e\n\n\u003cp\u003eIn \u003ca href=\"https://atp.fm/617\"\u003ea recent episode of ATP\u003c/a\u003e, I described the then-unnamed Hyperspace as “\u003ca href=\"https://atp.fm/617\"\u003eAn Incredibly Dangerous App\u003c/a\u003e.” Like the process of converting from HFS+ to APFS, Hyperspace modifies files that it did not create and does not own. It is, by far, the riskiest app I’ve created. (Reclaiming disk space ain’t like dusting crops…) But I also think it might be the most useful to the largest number of people. I hope you like it.\u003c/p\u003e\n\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003e© 2010-2025 John Siracusa\u003c/p\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
