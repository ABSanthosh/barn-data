{
  "id": "5825310b-835b-4f53-99c3-f693188f5ba3",
  "title": "Baseline Status in a WordPress Block",
  "link": "https://css-tricks.com/baseline-status-in-a-wordpress-block/",
  "description": "The steps for how I took the Baseline Status web component and made it into a WordPress block that can be used on any page of post. Baseline Status in a WordPress Block originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Wed, 05 Feb 2025 14:58:18 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "resource",
    "web components",
    "WordPress"
  ],
  "byline": "Geoff Graham",
  "length": 14528,
  "excerpt": "The steps for how I took the Baseline Status web component and made it into a WordPress block that can be used on any page of post.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "You know about Baseline, right? And you may have heard that the Chrome team made a web component for it. Here it is! Of course, we could simply drop the HTML component into the page. But I never know where we’re going to use something like this. The Almanac, obs. But I’m sure there are times where embedded it in other pages and posts makes sense. That’s exactly what WordPress blocks are good for. We can take an already reusable component and make it repeatable when working in the WordPress editor. So that’s what I did! That component you see up there is the \u003cbaseline-status\u003e web component formatted as a WordPress block. Let’s drop another one in just for kicks. Pretty neat! I saw that Pawel Grzybek made an equivalent for Hugo. There’s an Astro equivalent, too. Because I’m fairly green with WordPress block development I thought I’d write a bit up on how it’s put together. There are still rough edges that I’d like to smooth out later, but this is a good enough point to share the basic idea. Scaffolding the project I used the @wordpress/create-block package to bootstrap and initialize the project. All that means is I cd‘d into the /wp-content/plugins directory from the command line and ran the install command to plop it all in there. npm install @wordpress/create-block The command prompts you through the setup process to name the project and all that. The baseline-status.php file is where the plugin is registered. And yes, it’s looks completely the same as it’s been for years, just not in a style.css file like it is for themes. The difference is that the create-block package does some lifting to register the widget so I don’t have to: \u003c?php /** * Plugin Name: Baseline Status * Plugin URI: https://css-tricks.com * Description: Displays current Baseline availability for web platform features. * Requires at least: 6.6 * Requires PHP: 7.2 * Version: 0.1.0 * Author: geoffgraham * License: GPL-2.0-or-later * License URI: https://www.gnu.org/licenses/gpl-2.0.html * Text Domain: baseline-status * * @package CssTricks */ if ( ! defined( 'ABSPATH' ) ) { exit; // Exit if accessed directly. } function csstricks_baseline_status_block_init() { register_block_type( __DIR__ . '/build' ); } add_action( 'init', 'csstricks_baseline_status_block_init' ); ?\u003e The real meat is in src directory. The create-block package also did some filling of the blanks in the block-json file based on the onboarding process: { \"$schema\": \"https://schemas.wp.org/trunk/block.json\", \"apiVersion\": 2, \"name\": \"css-tricks/baseline-status\", \"version\": \"0.1.0\", \"title\": \"Baseline Status\", \"category\": \"widgets\", \"icon\": \"chart-pie\", \"description\": \"Displays current Baseline availability for web platform features.\", \"example\": {}, \"supports\": { \"html\": false }, \"textdomain\": \"baseline-status\", \"editorScript\": \"file:./index.js\", \"editorStyle\": \"file:./index.css\", \"style\": \"file:./style-index.css\", \"render\": \"file:./render.php\", \"viewScript\": \"file:./view.js\" } Going off some tutorials published right here on CSS-Tricks, I knew that WordPress blocks render twice — once on the front end and once on the back end — and there’s a file for each one in the src folder: render.php: Handles the front-end view edit.js: Handles the back-end view The front-end and back-end markup Cool. I started with the \u003cbaseline-status\u003e web component’s markup: \u003cscript src=\"https://cdn.jsdelivr.net/npm/[email protected]/baseline-status.min.js\" type=\"module\"\u003e\u003c/script\u003e \u003cbaseline-status featureId=\"anchor-positioning\"\u003e\u003c/baseline-status\u003e I’d hate to inject that \u003cscript\u003e every time the block pops up, so I decided to enqueue the file conditionally based on the block being displayed on the page. This is happening in the main baseline-status.php file which I treated sorta the same way as a theme’s functions.php file. It’s just where helper functions go. // ... same code as before // Enqueue the minified script function csstricks_enqueue_block_assets() { wp_enqueue_script( 'baseline-status-widget-script', 'https://cdn.jsdelivr.net/npm/[email protected]/baseline-status.min.js', array(), '1.0.4', true ); } add_action( 'enqueue_block_assets', 'csstricks_enqueue_block_assets' ); // Adds the 'type=\"module\"' attribute to the script function csstricks_add_type_attribute($tag, $handle, $src) { if ( 'baseline-status-widget-script' === $handle ) { $tag = '\u003cscript type=\"module\" src=\"' . esc_url( $src ) . '\"\u003e\u003c/script\u003e'; } return $tag; } add_filter( 'script_loader_tag', 'csstricks_add_type_attribute', 10, 3 ); // Enqueues the scripts and styles for the back end function csstricks_enqueue_block_editor_assets() { // Enqueues the scripts wp_enqueue_script( 'baseline-status-widget-block', plugins_url( 'block.js', __FILE__ ), array( 'wp-blocks', 'wp-element', 'wp-editor' ), false, ); // Enqueues the styles wp_enqueue_style( 'baseline-status-widget-block-editor', plugins_url( 'style.css', __FILE__ ), array( 'wp-edit-blocks' ), false, ); } add_action( 'enqueue_block_editor_assets', 'csstricks_enqueue_block_editor_assets' ); The final result bakes the script directly into the plugin so that it adheres to the WordPress Plugin Directory guidelines. If that wasn’t the case, I’d probably keep the hosted script intact because I’m completely uninterested in maintaining it. Oh, and that csstricks_add_type_attribute() function is to help import the file as an ES module. There’s a wp_enqueue_script_module() action available to hook into that should handle that, but I couldn’t get it to do the trick. With that in hand, I can put the component’s markup into a template. The render.php file is where all the front-end goodness resides, so that’s where I dropped the markup: \u003cbaseline-status \u003c?php echo get_block_wrapper_attributes(); ?\u003e featureId=\"[FEATURE]\"\u003e \u003c/baseline-status\u003e That get_block_wrapper_attibutes() thing is recommended by the WordPress docs as a way to output all of a block’s information for debugging things, such as which features it ought to support. [FEATURE]is a placeholder that will eventually tell the component which web platform to render information about. We may as well work on that now. I can register attributes for the component in block.json: \"attributes\": { \"showBaselineStatus\": { \"featureID\": { \"type\": \"string\" } }, Now we can update the markup in render.php to echo the featureID when it’s been established. \u003cbaseline-status \u003c?php echo get_block_wrapper_attributes(); ?\u003e featureId=\"\u003c?php echo esc_html( $featureID ); ?\u003e\"\u003e \u003c/baseline-status\u003e There will be more edits to that markup a little later. But first, I need to put the markup in the edit.js file so that the component renders in the WordPress editor when adding it to the page. \u003cbaseline-status { ...useBlockProps() } featureId={ featureID }\u003e\u003c/baseline-status\u003e useBlockProps is the JavaScript equivalent of get_block_wrapper_attibutes() and can be good for debugging on the back end. At this point, the block is fully rendered on the page when dropped in! The problems are: It’s not passing in the feature I want to display. It’s not editable. I’ll work on the latter first. That way, I can simply plug the right variable in there once everything’s been hooked up. Block settings One of the nicer aspects of WordPress DX is that we have direct access to the same controls that WordPress uses for its own blocks. We import them and extend them where needed. I started by importing the stuff in edit.js: import { InspectorControls, useBlockProps } from '@wordpress/block-editor'; import { PanelBody, TextControl } from '@wordpress/components'; import './editor.scss'; This gives me a few handy things: InspectorControls are good for debugging. useBlockProps are what can be debugged. PanelBody is the main wrapper for the block settings. TextControl is the field I want to pass into the markup where [FEATURE] currently is. editor.scss provides styles for the controls. Before I get to the controls, there’s an Edit function needed to use as a wrapper for all the work: export default function Edit( { attributes, setAttributes } ) { // Controls } First is InspectorTools and the PanelBody: export default function Edit( { attributes, setAttributes } ) { // React components need a parent element \u003c\u003e \u003cInspectorControls\u003e \u003cPanelBody title={ __( 'Settings', 'baseline-status' ) }\u003e // Controls \u003c/PanelBody\u003e \u003c/InspectorControls\u003e \u003c/\u003e } Then it’s time for the actual text input control. I really had to lean on this introductory tutorial on block development for the following code, notably this section. export default function Edit( { attributes, setAttributes } ) { \u003c\u003e \u003cInspectorControls\u003e \u003cPanelBody title={ __( 'Settings', 'baseline-status' ) }\u003e // Controls \u003cTextControl label={ __( 'Feature', // Input label 'baseline-status' ) } value={ featureID || '' } onChange={ ( value ) =\u003e setAttributes( { featureID: value } ) } /\u003e \u003c/PanelBody\u003e \u003c/InspectorControls\u003e \u003c/\u003e } Tie it all together At this point, I have: The front-end view The back-end view Block settings with a text input All the logic for handling state Oh yeah! Can’t forget to define the featureID variable because that’s what populates in the component’s markup. Back in edit.js: const { featureID } = attributes; In short: The feature’s ID is what constitutes the block’s attributes. Now I need to register that attribute so the block recognizes it. Back in block.json in a new section: \"attributes\": { \"featureID\": { \"type\": \"string\" } }, Pretty straightforward, I think. Just a single text field that’s a string. It’s at this time that I can finally wire it up to the front-end markup in render.php: \u003cbaseline-status \u003c?php echo get_block_wrapper_attributes(); ?\u003e featureId=\"\u003c?php echo esc_html( $featureID ); ?\u003e\"\u003e \u003c/baseline-status\u003e Styling the component I struggled with this more than I care to admit. I’ve dabbled with styling the Shadow DOM but only academically, so to speak. This is the first time I’ve attempted to style a web component with Shadow DOM parts on something being used in production. If you’re new to Shadow DOM, the basic idea is that it prevents styles and scripts from “leaking” in or out of the component. This is a big selling point of web components because it’s so darn easy to drop them into any project and have them “just” work. But how do you style a third-party web component? It depends on how the developer sets things up because there are ways to allow styles to “pierce” through the Shadow DOM. Ollie Williams wrote “Styling in the Shadow DOM With CSS Shadow Parts” for us a while back and it was super helpful in pointing me in the right direction. Chris has one, too. A few other more articles I used: “Options for styling web components” (Nolan Lawson, super well done!) “Styling web components” (Chris Ferdinandi) “Styling” (webcomponents.guide) First off, I knew I could select the \u003cbaseline-status\u003e element directly without any classes, IDs, or other attributes: baseline-status { /* Styles! */ } I peeked at the script’s source code to see what I was working with. I had a few light styles I could use right away on the type selector: baseline-status { background: #000; border: solid 5px #f8a100; border-radius: 8px; color: #fff; display: block; margin-block-end: 1.5em; padding: .5em; } I noticed a CSS color variable in the source code that I could use in place of hard-coded values, so I redefined them and set them where needed: baseline-status { --color-text: #fff; --color-outline: var(--orange); border: solid 5px var(--color-outline); border-radius: 8px; color: var(--color-text); display: block; margin-block-end: var(--gap); padding: calc(var(--gap) / 4); } Now for a tricky part. The component’s markup looks close to this in the DOM when fully rendered: \u003cbaseline-status class=\"wp-block-css-tricks-baseline-status\" featureid=\"anchor-positioning\"\u003e\u003c/baseline-status\u003e \u003ch1\u003eAnchor positioning\u003c/h1\u003e \u003cdetails\u003e \u003csummary aria-label=\"Baseline: Limited availability. Supported in Chrome: yes. Supported in Edge: yes. Supported in Firefox: no. Supported in Safari: no.\"\u003e \u003cbaseline-icon aria-hidden=\"true\" support=\"limited\"\u003e\u003c/baseline-icon\u003e \u003cdiv class=\"baseline-status-title\" aria-hidden=\"true\"\u003e \u003cdiv\u003eLimited availability\u003c/div\u003e \u003cdiv class=\"baseline-status-browsers\"\u003e \u003c!-- Browser icons --\u003e \u003c/div\u003e \u003c/div\u003e \u003c/summary\u003e\u003cp\u003eThis feature is not Baseline because it does not work in some of the most widely-used browsers.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://github.com/web-platform-dx/web-features/blob/main/features/anchor-positioning.yml\"\u003eLearn more\u003c/a\u003e\u003c/p\u003e\u003c/details\u003e \u003cbaseline-status class=\"wp-block-css-tricks-baseline-status\" featureid=\"anchor-positioning\"\u003e\u003c/baseline-status\u003e I wanted to play with the idea of hiding the \u003ch1\u003e element in some contexts but thought twice about it because not displaying the title only really works for Almanac content when you’re on the page for the same feature as what’s rendered in the component. Any other context and the heading is a “need” for providing context as far as what feature we’re looking at. Maybe that can be a future enhancement where the heading can be toggled on and off. Voilà Get the plugin! This is freely available in the WordPress Plugin Directory as of today! This is my very first plugin I’ve submitted to WordPress on my own behalf, so this is really exciting for me! Future improvements This is far from fully baked but definitely gets the job done for now. In the future it’d be nice if this thing could do a few more things: Live update: The widget does not update on the back end until the page refreshes. I’d love to see the final rendering before hitting Publish on something. I got it where typing into the text input is instantly reflected on the back end. It’s just that the component doesn’t re-render to show the update. Variations: As in “large” and “small”. Heading: Toggle to hide or show, depending on where the block is used.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382311",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eYou know about \u003ca href=\"https://web.dev/baseline/\" rel=\"noopener\"\u003eBaseline\u003c/a\u003e, right? And you may have heard that \u003ca href=\"https://web.dev/blog/show-baseline-status\" rel=\"noopener\"\u003ethe Chrome team made a web component for it\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere it is!\u003c/p\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"anchor-positioning\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eOf course, we could simply drop the HTML component into the page. But I never know where we’re going to use something like this. The Almanac, obs. But I’m sure there are times where embedded it in other pages and posts makes sense.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eThat’s exactly what WordPress blocks are good for.\u003c/strong\u003e We can take an already reusable component and make it repeatable when working in the WordPress editor. So that’s what I did! That component you see up there is the \u003ca href=\"https://github.com/web-platform-dx/baseline-status/tree/main\" rel=\"noopener\"\u003e\u003ccode\u003e\u0026lt;baseline-status\u0026gt;\u003c/code\u003e web component\u003c/a\u003e formatted as a WordPress block. Let’s drop another one in just for kicks.\u003c/p\u003e\n\n\n\n\u003cbaseline-status featureid=\"view-transitions\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003ePretty neat! I saw that \u003ca href=\"https://pawelgrzybek.com/baseline-status-of-a-web-platform-feature-on-a-hugo-website/\" rel=\"noopener\"\u003ePawel Grzybek made an equivalent for Hugo\u003c/a\u003e. There’s an \u003ca href=\"https://astro-embed.netlify.app/components/baseline-status/\" rel=\"noopener\"\u003eAstro equivalent\u003c/a\u003e, too. Because I’m fairly green with WordPress block development I thought I’d write a bit up on how it’s put together. There are still rough edges that I’d like to smooth out later, but this is a good enough point to share the basic idea.\u003c/p\u003e\n\n\n\u003ch3 id=\"scaffolding-the-project\"\u003eScaffolding the project\u003c/h3\u003e\n\n\n\u003cp\u003eI used the \u003ccode\u003e@wordpress/create-block\u003c/code\u003e package to bootstrap and initialize the project. All that means is I \u003ccode\u003ecd\u003c/code\u003e‘d into the \u003ccode\u003e/wp-content/plugins\u003c/code\u003e directory from the command line and ran the install command to plop it all in there.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Terminal\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003enpm install @wordpress/create-block\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1560\" height=\"960\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.16.00%E2%80%AFPM.png?resize=1560%2C960\u0026amp;ssl=1\" alt=\"Mac Finder window with the WordPress plugins directory open and showing the baseline-status plugin folder.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.16.00%E2%80%AFPM.png?w=1560\u0026amp;ssl=1 1560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.16.00%E2%80%AFPM.png?resize=300%2C185\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.16.00%E2%80%AFPM.png?resize=1024%2C630\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.16.00%E2%80%AFPM.png?resize=768%2C473\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.16.00%E2%80%AFPM.png?resize=1536%2C945\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eThe command prompts you through the setup process to name the project and all that.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003ebaseline-status.php\u003c/code\u003e file is where the plugin is registered. And yes, it’s looks completely the same as it’s been for years, just not in a \u003ccode\u003estyle.css\u003c/code\u003e file like it is for themes. The difference is that the \u003ccode\u003ecreate-block\u003c/code\u003e package does some lifting to register the widget so I don’t have to:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;?php\n/**\n * Plugin Name:       Baseline Status\n * Plugin URI:        https://css-tricks.com\n * Description:       Displays current Baseline availability for web platform features.\n * Requires at least: 6.6\n * Requires PHP:      7.2\n * Version:           0.1.0\n * Author:            geoffgraham\n * License:           GPL-2.0-or-later\n * License URI:       https://www.gnu.org/licenses/gpl-2.0.html\n * Text Domain:       baseline-status\n *\n * @package CssTricks\n */\n\nif ( ! defined( \u0026#39;ABSPATH\u0026#39; ) ) {\n  exit; // Exit if accessed directly.\n}\n\nfunction csstricks_baseline_status_block_init() {\n  register_block_type( __DIR__ . \u0026#39;/build\u0026#39; );\n}\nadd_action( \u0026#39;init\u0026#39;, \u0026#39;csstricks_baseline_status_block_init\u0026#39; );\n\n?\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe real meat is in \u003ccode\u003esrc\u003c/code\u003e directory.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1578\" height=\"1042\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.24.53%E2%80%AFPM.png?resize=1578%2C1042\u0026amp;ssl=1\" alt=\"Mac Finder window with the WordPress project\u0026#39;s src folder open with seven files, two are highlighted in orange: edit.js and render.php.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.24.53%E2%80%AFPM.png?w=1578\u0026amp;ssl=1 1578w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.24.53%E2%80%AFPM.png?resize=300%2C198\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.24.53%E2%80%AFPM.png?resize=1024%2C676\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.24.53%E2%80%AFPM.png?resize=768%2C507\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/Screenshot-2024-11-05-at-3.24.53%E2%80%AFPM.png?resize=1536%2C1014\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003ecreate-block\u003c/code\u003e package also did some filling of the blanks in the \u003ccode\u003eblock-json\u003c/code\u003e file based on the onboarding process:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e{\n  \u0026#34;$schema\u0026#34;: \u0026#34;https://schemas.wp.org/trunk/block.json\u0026#34;,\n  \u0026#34;apiVersion\u0026#34;: 2,\n  \u0026#34;name\u0026#34;: \u0026#34;css-tricks/baseline-status\u0026#34;,\n  \u0026#34;version\u0026#34;: \u0026#34;0.1.0\u0026#34;,\n  \u0026#34;title\u0026#34;: \u0026#34;Baseline Status\u0026#34;,\n  \u0026#34;category\u0026#34;: \u0026#34;widgets\u0026#34;,\n  \u0026#34;icon\u0026#34;: \u0026#34;chart-pie\u0026#34;,\n  \u0026#34;description\u0026#34;: \u0026#34;Displays current Baseline availability for web platform features.\u0026#34;,\n  \u0026#34;example\u0026#34;: {},\n  \u0026#34;supports\u0026#34;: {\n    \u0026#34;html\u0026#34;: false\n  },\n  \u0026#34;textdomain\u0026#34;: \u0026#34;baseline-status\u0026#34;,\n  \u0026#34;editorScript\u0026#34;: \u0026#34;file:./index.js\u0026#34;,\n  \u0026#34;editorStyle\u0026#34;: \u0026#34;file:./index.css\u0026#34;,\n  \u0026#34;style\u0026#34;: \u0026#34;file:./style-index.css\u0026#34;,\n  \u0026#34;render\u0026#34;: \u0026#34;file:./render.php\u0026#34;,\n  \u0026#34;viewScript\u0026#34;: \u0026#34;file:./view.js\u0026#34;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eGoing off some tutorials published right here on CSS-Tricks, I knew that WordPress blocks render twice — once on the front end and once on the back end — and there’s a file for each one in the \u003ccode\u003esrc\u003c/code\u003e folder:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erender.php\u003c/code\u003e:\u003c/strong\u003e Handles the front-end view\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eedit.js\u003c/code\u003e:\u003c/strong\u003e Handles the back-end view\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"the-frontend-and-backend-markup\"\u003eThe front-end and back-end markup\u003c/h3\u003e\n\n\n\u003cp\u003eCool. I started with the \u003ccode\u003e\u0026lt;baseline-status\u0026gt;\u003c/code\u003e web component’s \u003ca href=\"https://github.com/web-platform-dx/baseline-status/tree/main?tab=readme-ov-file#usage\" rel=\"noopener\"\u003emarkup\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/\u003ca href=\"https://css-tricks.com/cdn-cgi/l/email-protection\" data-cfemail=\"5537342630393c3b307826213421202615647b657b6d\"\u003e[email protected]\u003c/a\u003e/baseline-status.min.js\u0026#34; type=\u0026#34;module\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;baseline-status featureId=\u0026#34;anchor-positioning\u0026#34;\u0026gt;\u0026lt;/baseline-status\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI’d hate to inject that \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e every time the block pops up, so I decided to enqueue the file conditionally based on the block being displayed on the page. This is happening in the main \u003ccode\u003ebaseline-status.php\u003c/code\u003e file which I treated sorta the same way as a theme’s \u003ccode\u003efunctions.php\u003c/code\u003e file. It’s just where helper functions go.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e// ... same code as before\n\n// Enqueue the minified script\nfunction csstricks_enqueue_block_assets() {\n  wp_enqueue_script(\n    \u0026#39;baseline-status-widget-script\u0026#39;,\n    \u0026#39;https://cdn.jsdelivr.net/npm/\u003ca href=\"https://css-tricks.com/cdn-cgi/l/email-protection\" data-cfemail=\"f3919280969f9a9d96de808792878680b3c2ddc3ddc7\"\u003e[email protected]\u003c/a\u003e/baseline-status.min.js\u0026#39;,\n    array(),\n    \u0026#39;1.0.4\u0026#39;,\n    true\n  );\n}\nadd_action( \u0026#39;enqueue_block_assets\u0026#39;, \u0026#39;csstricks_enqueue_block_assets\u0026#39; );\n\n// Adds the \u0026#39;type=\u0026#34;module\u0026#34;\u0026#39; attribute to the script\nfunction csstricks_add_type_attribute($tag, $handle, $src) {\n  if ( \u0026#39;baseline-status-widget-script\u0026#39; === $handle ) {\n    $tag = \u0026#39;\u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;\u0026#39; . esc_url( $src ) . \u0026#39;\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\u0026#39;;\n  }\n  return $tag;\n}\nadd_filter( \u0026#39;script_loader_tag\u0026#39;, \u0026#39;csstricks_add_type_attribute\u0026#39;, 10, 3 );\n\n// Enqueues the scripts and styles for the back end\nfunction csstricks_enqueue_block_editor_assets() {\n  // Enqueues the scripts\n  wp_enqueue_script(\n    \u0026#39;baseline-status-widget-block\u0026#39;,\n    plugins_url( \u0026#39;block.js\u0026#39;, __FILE__ ),\n    array( \u0026#39;wp-blocks\u0026#39;, \u0026#39;wp-element\u0026#39;, \u0026#39;wp-editor\u0026#39; ),\n    false,\n  );\n\n  // Enqueues the styles\n  wp_enqueue_style(\n    \u0026#39;baseline-status-widget-block-editor\u0026#39;,\n    plugins_url( \u0026#39;style.css\u0026#39;, __FILE__ ),\n    array( \u0026#39;wp-edit-blocks\u0026#39; ),\n    false,\n  );\n}\nadd_action( \u0026#39;enqueue_block_editor_assets\u0026#39;, \u0026#39;csstricks_enqueue_block_editor_assets\u0026#39; );\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe final result bakes the script directly into the plugin so that it adheres to the \u003ca href=\"https://developer.wordpress.org/plugins/wordpress-org/detailed-plugin-guidelines/#8-plugins-may-not-send-executable-code-via-third-party-systems\" rel=\"noopener\"\u003eWordPress Plugin Directory guidelines\u003c/a\u003e. If that wasn’t the case, I’d probably keep the hosted script intact because I’m completely uninterested in maintaining it. Oh, and that \u003ccode\u003ecsstricks_add_type_attribute()\u003c/code\u003e function is to help import the file as an ES module. There’s a \u003ccode\u003e\u003ca href=\"https://developer.wordpress.org/reference/functions/wp_enqueue_script_module/\" rel=\"noopener\"\u003ewp_enqueue_script_module()\u003c/a\u003e\u003c/code\u003e action available to hook into that should handle that, but I couldn’t get it to do the trick.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith that in hand, I can put the component’s markup into a template. The \u003ccode\u003erender.php\u003c/code\u003e file is where all the front-end goodness resides, so that’s where I dropped the markup:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;baseline-status\n  \u0026lt;?php echo get_block_wrapper_attributes(); ?\u0026gt; \n  featureId=\u0026#34;[FEATURE]\u0026#34;\u0026gt;\n\u0026lt;/baseline-status\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat \u003ccode\u003e\u003ca href=\"https://developer.wordpress.org/reference/functions/get_block_wrapper_attributes/\" rel=\"noopener\"\u003eget_block_wrapper_attibutes()\u003c/a\u003e\u003c/code\u003e thing is recommended by the WordPress docs as a way to output all of a block’s information for debugging things, such as which features it ought to support.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003e[FEATURE]\u003c/code\u003eis a placeholder that will eventually tell the component which web platform to render information about. We may as well work on that now. I can register attributes for the component in \u003ccode\u003eblock.json\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026#34;attributes\u0026#34;: { \u0026#34;showBaselineStatus\u0026#34;: {\n  \u0026#34;featureID\u0026#34;: {\n  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;\n  }\n},\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow we can update the markup in \u003ccode\u003erender.php\u003c/code\u003e to echo the \u003ccode\u003efeatureID\u003c/code\u003e when it’s been established.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;baseline-status\n  \u0026lt;?php echo get_block_wrapper_attributes(); ?\u0026gt; \n  featureId=\u0026#34;\u0026lt;?php echo esc_html( $featureID ); ?\u0026gt;\u0026#34;\u0026gt;\n\u0026lt;/baseline-status\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThere will be more edits to that markup a little later. But first, I need to put the markup in the \u003ccode\u003eedit.js\u003c/code\u003e file so that the component renders in the WordPress editor when adding it to the page.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;baseline-status { ...useBlockProps() } featureId={ featureID }\u0026gt;\u0026lt;/baseline-status\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003euseBlockProps\u003c/code\u003e is the JavaScript equivalent of \u003ccode\u003eget_block_wrapper_attibutes()\u003c/code\u003e and can be good for debugging on the back end.\u003c/p\u003e\n\n\n\n\u003cp\u003eAt this point, the block is fully rendered on the page when dropped in! The problems are:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eIt’s not passing in the feature I want to display.\u003c/li\u003e\n\n\n\n\u003cli\u003eIt’s not editable.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eI’ll work on the latter first. That way, I can simply plug the right variable in there once everything’s been hooked up.\u003c/p\u003e\n\n\n\u003ch3 id=\"block-settings\"\u003eBlock settings\u003c/h3\u003e\n\n\n\u003cp\u003eOne of the nicer aspects of WordPress \u003ca href=\"https://css-tricks.com/what-is-developer-experience-dx/\"\u003eDX\u003c/a\u003e is that we have direct access to the same controls that WordPress uses for its own blocks. We import them and extend them where needed.\u003c/p\u003e\n\n\n\n\u003cp\u003eI started by importing the stuff in \u003ccode\u003eedit.js\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eimport { InspectorControls, useBlockProps } from \u0026#39;@wordpress/block-editor\u0026#39;;\nimport { PanelBody, TextControl } from \u0026#39;@wordpress/components\u0026#39;;\nimport \u0026#39;./editor.scss\u0026#39;;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis gives me a few handy things:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eInspectorControls\u003c/code\u003e are good for debugging.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003euseBlockProps\u003c/code\u003e are what can be debugged.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ePanelBody\u003c/code\u003e is the main wrapper for the block settings.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eTextControl\u003c/code\u003e is the field I want to pass into the markup where \u003ccode\u003e[FEATURE]\u003c/code\u003e currently is.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eeditor.scss\u003c/code\u003e provides styles for the controls.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eBefore I get to the controls, there’s an \u003ccode\u003eEdit\u003c/code\u003e function needed to use as a wrapper for all the work:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eexport default function Edit( { attributes, setAttributes } ) {\n  // Controls\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFirst is \u003ccode\u003eInspectorTools\u003c/code\u003e and the \u003ccode\u003ePanelBody\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eexport default function Edit( { attributes, setAttributes } ) {\n  // React components need a parent element\n  \u0026lt;\u0026gt;\n    \u0026lt;InspectorControls\u0026gt;\n      \u0026lt;PanelBody title={ __( \u0026#39;Settings\u0026#39;, \u0026#39;baseline-status\u0026#39; ) }\u0026gt;\n      // Controls\n      \u0026lt;/PanelBody\u0026gt;\n    \u0026lt;/InspectorControls\u0026gt;\n  \u0026lt;/\u0026gt;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen it’s time for the actual text input control. I really had to lean on \u003ca href=\"https://developer.wordpress.org/block-editor/getting-started/tutorial\" rel=\"noopener\"\u003ethis introductory tutorial on block development\u003c/a\u003e for the following code, notably \u003ca href=\"https://developer.wordpress.org/block-editor/getting-started/tutorial/#updating-edit-js-2\" rel=\"noopener\"\u003ethis section\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eexport default function Edit( { attributes, setAttributes } ) {\n  \u0026lt;\u0026gt;\n    \u0026lt;InspectorControls\u0026gt;\n      \u0026lt;PanelBody title={ __( \u0026#39;Settings\u0026#39;, \u0026#39;baseline-status\u0026#39; ) }\u0026gt;\n        // Controls\n        \u0026lt;TextControl\n          label={ __(\n            \u0026#39;Feature\u0026#39;, // Input label\n            \u0026#39;baseline-status\u0026#39;\n          ) }\n          value={ featureID || \u0026#39;\u0026#39; }\n          onChange={ ( value ) =\u0026gt;\n            setAttributes( { featureID: value } )\n          }\n        /\u0026gt;\n     \u0026lt;/PanelBody\u0026gt;\n    \u0026lt;/InspectorControls\u0026gt;\n  \u0026lt;/\u0026gt;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"tie-it-all-together\"\u003eTie it all together\u003c/h3\u003e\n\n\n\u003cp\u003eAt this point, I have:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe front-end view\u003c/li\u003e\n\n\n\n\u003cli\u003eThe back-end view\u003c/li\u003e\n\n\n\n\u003cli\u003eBlock settings with a text input\u003c/li\u003e\n\n\n\n\u003cli\u003eAll the logic for handling state\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eOh yeah! Can’t forget to define the \u003ccode\u003efeatureID\u003c/code\u003e variable because that’s what populates in the component’s markup. Back in \u003ccode\u003eedit.js\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst { featureID } = attributes;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn short: The feature’s ID is what constitutes the block’s attributes. Now I need to register that attribute so the block recognizes it. Back in \u003ccode\u003eblock.json\u003c/code\u003e in a new section:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026#34;attributes\u0026#34;: {\n  \u0026#34;featureID\u0026#34;: {\n    \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;\n  }\n},\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003ePretty straightforward, I think. Just a single text field that’s a string. It’s at this time that I can \u003cem\u003efinally\u003c/em\u003e wire it up to the front-end markup in \u003ccode\u003erender.php\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;baseline-status\n  \u0026lt;?php echo get_block_wrapper_attributes(); ?\u0026gt;\n  featureId=\u0026#34;\u0026lt;?php echo esc_html( $featureID ); ?\u0026gt;\u0026#34;\u0026gt;\n\u0026lt;/baseline-status\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"styling-the-component\"\u003eStyling the component\u003c/h3\u003e\n\n\n\u003cp\u003eI struggled with this more than I care to admit. I’ve dabbled with styling the Shadow DOM but only academically, so to speak. This is the first time I’ve attempted to style a web component with Shadow DOM parts on something being used in production.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you’re new to Shadow DOM, the basic idea is that it prevents styles and scripts from “leaking” in or out of the component. This is a big selling point of web components because it’s so darn easy to drop them into any project and have them “just” work.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut how do you style a third-party web component? It depends on how the developer sets things up because there are ways to allow styles to “pierce” through the Shadow DOM. \u003ca href=\"https://css-tricks.com/author/olliew/\"\u003eOllie Williams\u003c/a\u003e wrote \u003ca href=\"https://css-tricks.com/styling-in-the-shadow-dom-with-css-shadow-parts/\"\u003e“Styling in the Shadow DOM With CSS Shadow Parts”\u003c/a\u003e for us a while back and it was super helpful in pointing me in the right direction. \u003ca href=\"https://css-tricks.com/styling-a-web-component/\"\u003eChris has one, too.\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eA few other more articles I used:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://nolanlawson.com/2021/01/03/options-for-styling-web-components/\" rel=\"noopener\"\u003e“Options for styling web components”\u003c/a\u003e (Nolan Lawson, \u003cem\u003esuper well done!\u003c/em\u003e)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://gomakethings.com/styling-web-components/\" rel=\"noopener\"\u003e“Styling web components”\u003c/a\u003e (Chris Ferdinandi)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://webcomponents.guide/learn/components/styling/\" rel=\"noopener\"\u003e“Styling”\u003c/a\u003e  (webcomponents.guide)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eFirst off, I knew I could select the \u003ccode\u003e\u0026lt;baseline-status\u0026gt;\u003c/code\u003e element directly without any classes, IDs, or other attributes:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebaseline-status {\n  /* Styles! */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI peeked at the script’s \u003ca href=\"https://github.com/web-platform-dx/baseline-status/blob/main/baseline-status.js\" rel=\"noopener\"\u003esource code\u003c/a\u003e to see what I was working with. I had a few light styles I could use right away on the type selector:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebaseline-status {\n  background: #000;\n  border: solid 5px #f8a100;\n  border-radius: 8px;\n  color: #fff;\n  display: block;\n  margin-block-end: 1.5em;\n  padding: .5em;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI noticed a CSS color variable in the source code that I could use in place of hard-coded values, so I redefined them and set them where needed:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebaseline-status {\n  --color-text: #fff;\n  --color-outline: var(--orange);\n\n  border: solid 5px var(--color-outline);\n  border-radius: 8px;\n  color: var(--color-text);\n  display: block;\n  margin-block-end: var(--gap);\n  padding: calc(var(--gap) / 4);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow for a tricky part. The component’s markup looks close to this in the DOM when fully rendered:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;baseline-status class=\u0026#34;wp-block-css-tricks-baseline-status\u0026#34; featureid=\u0026#34;anchor-positioning\u0026#34;\u0026gt;\u0026lt;/baseline-status\u0026gt;\n\u0026lt;h1\u0026gt;Anchor positioning\u0026lt;/h1\u0026gt;\n\u0026lt;details\u0026gt;\n  \u0026lt;summary aria-label=\u0026#34;Baseline: Limited availability. Supported in Chrome: yes. Supported in Edge: yes. Supported in Firefox: no. Supported in Safari: no.\u0026#34;\u0026gt;\n    \u0026lt;baseline-icon aria-hidden=\u0026#34;true\u0026#34; support=\u0026#34;limited\u0026#34;\u0026gt;\u0026lt;/baseline-icon\u0026gt;\n    \u0026lt;div class=\u0026#34;baseline-status-title\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\n      \u0026lt;div\u0026gt;Limited availability\u0026lt;/div\u0026gt;\n        \u0026lt;div class=\u0026#34;baseline-status-browsers\u0026#34;\u0026gt;\n        \u0026lt;!-- Browser icons --\u0026gt;\n        \u0026lt;/div\u0026gt;\n    \u0026lt;/div\u0026gt;\n  \u0026lt;/summary\u0026gt;\u0026lt;p\u0026gt;This feature is not Baseline because it does not work in some of the most widely-used browsers.\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://github.com/web-platform-dx/web-features/blob/main/features/anchor-positioning.yml\u0026#34;\u0026gt;Learn more\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;\u0026lt;/details\u0026gt;\n\u0026lt;baseline-status class=\u0026#34;wp-block-css-tricks-baseline-status\u0026#34; featureid=\u0026#34;anchor-positioning\u0026#34;\u0026gt;\u0026lt;/baseline-status\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI wanted to play with the idea of hiding the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e element in some contexts but thought twice about it because \u003cem\u003enot\u003c/em\u003e displaying the title only really works for Almanac content when you’re on the page for the same feature as what’s rendered in the component. Any other context and the heading is a “need” for providing context as far as what feature we’re looking at. Maybe that can be a future enhancement where the heading can be toggled on and off.\u003c/p\u003e\n\n\n\u003ch2 id=\"voila\"\u003eVoilà\u003c/h2\u003e\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/Screen-Recording-2024-11-05-at-2.56.06 PM.mp4\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\u003ch2 id=\"get-the-plugin\"\u003eGet the plugin!\u003c/h2\u003e\n\n\n\u003cp\u003eThis is freely available in the WordPress Plugin Directory as of today! This is my very first plugin I’ve submitted to WordPress on my own behalf, so this is really exciting for me!\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"future-improvements\"\u003eFuture improvements\u003c/h3\u003e\n\n\n\u003cp\u003eThis is far from fully baked but definitely gets the job done for now. In the future it’d be nice if this thing could do a few more things:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eLive update:\u003c/strong\u003e The widget does not update on the back end until the page refreshes. I’d love to see the final rendering before hitting Publish on something. I got it where typing into the text input is instantly reflected on the back end. It’s just that the component doesn’t re-render to show the update.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eVariations:\u003c/strong\u003e As in “large” and “small”. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eHeading:\u003c/strong\u003e Toggle to hide or show, depending on where the block is used.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2025-02-05T07:58:18-07:00",
  "modifiedTime": "2025-02-05T07:58:20-07:00"
}
