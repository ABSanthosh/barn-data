{
  "id": "870260ac-5139-4a6a-b079-90937b3cb273",
  "title": "Revisiting Image Maps",
  "link": "https://css-tricks.com/revisiting-image-maps/",
  "description": "Let’s run through a quick refresher. Image maps date all the way back to HTML 3.2, where, first, server-side maps and then client-side maps defined clickable regions over an image using map and area elements. Revisiting Image Maps originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Andy Clarke",
  "published": "Wed, 30 Apr 2025 12:12:45 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "images"
  ],
  "byline": "Andy Clarke",
  "length": 10504,
  "excerpt": "Let’s run through a quick refresher. Image maps date all the way back to HTML 3.2, where, first, server-side maps and then client-side maps defined clickable regions over an image using map and area elements.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "I mentioned last time that I’ve been working on a new website for Emmy-award-winning game composer Mike Worth. He hired me to create a highly graphical design that showcases his work. Mike loves ’90s animation, particularly Disney’s Duck Tales and other animated series. He challenged me to find a way to incorporate their retro ’90s style into his design without making it a pastiche. But that wasn’t my only challenge. I also needed to achieve that ’90s feel by using up-to-the-minute code to maintain accessibility, performance, responsiveness, and semantics. Designing for Mike was like a trip back to when mainstream website design seemed more spontaneous and less governed by conventions and best practices. Some people describe these designs as “whimsical”: adjective spontaneously fanciful or playful given to whims; capricious quaint, unusual, or fantastic — Collins English Dictionary But I’m not so sure that’s entirely accurate. “Playful?” Definitely. “Fanciful?” Possibly. But “fantastic?” That depends. “Whimsy” sounds superfluous, so I call it “expressive” instead. Studying design from way back, I remembered how websites often included graphics that combined branding, content, and navigation. Pretty much every reference to web design in the ’90s — when I designed my first website — talks about Warner Brothers’ Space Jam from 1996. Warner Brothers’ Space Jam (1996) So, I’m not going to do that. Brands like Nintendo used their home pages to direct people to their content while making branded visual statements. Cheestrings combined graphics with navigation, making me wonder why we don’t see designs like this today. Goosebumps typified this approach, combining cartoon illustrations with brightly colored shapes into a functional and visually rich banner, proving that being useful doesn’t mean being boring. Left to right: Nintendo, Cheestrings, Goosebumps. In the ’90s, when I developed graphics for websites like these, I either sliced them up and put their parts in tables or used mostly forgotten image maps. A brief overview of properties and values Let’s run through a quick refresher. Image maps date all the way back to HTML 3.2, where, first, server-side maps and then client-side maps defined clickable regions over an image using map and area elements. They were popular for graphics, maps, and navigation, but their use declined with the rise of CSS, SVG, and JavaScript. \u003cmap\u003e adds clickable areas to a bitmap or vector image. \u003cmap name=\"projects\"\u003e ... \u003c/map\u003e That \u003cmap\u003e is linked to an image using the usemap attribute: \u003cimg usemap=\"#projects\" ...\u003e Those elements can have separate href and alt attributes and can be enhanced with ARIA to improve accessibility: \u003cmap name=\"projects\"\u003e \u003carea href=\"\" alt=\"\" … /\u003e ... \u003c/map\u003e The shape attribute specifies an area’s shape. It can be a primitive circle or rect or a polygon defined by a set of absolute x and y coordinates: \u003carea shape=\"circle\" coords=\"...\" ... /\u003e \u003carea shape=\"rect\" coords=\"...\" ... /\u003e \u003carea shape=\"poly\" coords=\"...\" ... /\u003e Despite their age, image maps still offer plenty of benefits. They’re lightweight and need (almost) no JavaScript. More on that in just a minute. They’re accessible and semantic when used with alt, ARIA, and title attributes. Despite being from a different era, even modern mobile browsers support image maps. Design by Andy Clarke, Stuff \u0026 Nonsense. Mike Worth’s website will launch in April 2025, but you can see examples from this article on CodePen. My design for Mike Worth includes several graphic navigation elements, which made me wonder if image maps might still be an appropriate solution. Image maps in action Mike wants his website to showcase his past work and the projects he’d like to do. To make this aspect of his design discoverable and fun, I created a map for people to explore by pressing on areas of the map to open modals. This map contains numbered circles, and pressing one pops up its modal. My first thought was to embed anchors into the external map SVG: \u003cimg src=\"projects.svg\" alt=\"Projects\"\u003e \u003csvg ...\u003e ... \u003ca href=\"...\"\u003e \u003ccircle cx=\"35\" cy=\"35\" r=\"35\" fill=\"#941B2F\"/\u003e \u003cpath fill=\"#FFF\" d=\"...\"/\u003e \u003c/a\u003e \u003c/svg\u003e This approach is problematic. Those anchors are only active when SVG is inline and don’t work with an \u003cimg\u003e element. But image maps work perfectly, even though specifying their coordinates can be laborious. Fortunately, plenty of tools are available, which make defining coordinates less tedious. Upload an image, choose shape types, draw the shapes, and copy the markup: \u003cimg src=\"projects.svg\" usemap=\"#projects-map.svg\"\u003e \u003cmap name=\"projects-map.svg\"\u003e \u003carea href=\"\" alt=\"\" coords=\"...\" shape=\"circle\"\u003e \u003carea href=\"\" alt=\"\" coords=\"...\" shape=\"circle\"\u003e ... \u003c/map\u003e Image maps work well when images are fixed sizes, but flexible images present a problem because map coordinates are absolute, not relative to an image’s dimensions. Making image maps responsive needs a little JavaScript to recalculate those coordinates when the image changes size: function resizeMap() { const image = document.getElementById(\"projects\"); const map = document.querySelector(\"map[name='projects-map']\"); if (!image || !map || !image.naturalWidth) return; const scale = image.clientWidth / image.naturalWidth; map.querySelectorAll(\"area\").forEach(area =\u003e { if (!area.dataset.originalCoords) { area.dataset.originalCoords = area.getAttribute(\"coords\"); } const scaledCoords = area.dataset.originalCoords .split(\",\") .map(coord =\u003e Math.round(coord * scale)) .join(\",\"); area.setAttribute(\"coords\", scaledCoords); }); } [\"load\", \"resize\"].forEach(event =\u003e window.addEventListener(event, resizeMap) ); I still wasn’t happy with this implementation as I wanted someone to be able to press on much larger map areas, not just the numbered circles. Every \u003cpath\u003e has coordinates which define how it’s drawn, and they’re relative to the SVG viewBox: \u003csvg width=\"1024\" height=\"1024\"\u003e \u003cpath fill=\"#BFBFBF\" d=\"…\"/\u003e \u003c/svg\u003e On the other hand, a map’s \u003carea\u003e coordinates are absolute to the top-left of an image, so \u003cpath\u003e values need to be converted. Fortunately, Raphael Monnerat has written PathToPoints, a tool which does precisely that. Upload an SVG, choose the point frequency, copy the coordinates for each path, and add them to a map area’s coords: \u003cmap\u003e \u003carea href=\"\" shape=\"poly\" coords=\"...\"\u003e \u003carea href=\"\" shape=\"poly\" coords=\"...\"\u003e \u003carea href=\"\" shape=\"poly\" coords=\"...\"\u003e ... \u003c/map\u003e More issues with image maps Image maps are hard-coded and time-consuming to create without tools. Even with tools for generating image maps, converting paths to points, and then recalculating them using JavaScript, they could be challenging to maintain at scale. \u003carea\u003e elements aren’t visible, and except for a change in the cursor, they provide no visual feedback when someone hovers over or presses a link. Plus, there’s no easy way to add animations or interaction effects. But the deal-breaker for me was that an image map’s pixel-based values are unresponsive by default. So, what might be an alternative solution for implementing my map using CSS, HTML, and SVG? Anchors positioned absolutely over my map wouldn’t solve the pixel-based positioning problem or give me the irregular-shaped clickable areas I wanted. Anchors within an external SVG wouldn’t work either. But the solution was staring me in the face. I realized I needed to: Create a new SVG path for each clickable area. Make those paths invisible. Wrap each path inside an anchor. Place the anchors below other elements at the end of my SVG source. Replace that external file with inline SVG. I created a set of six much larger paths which define the clickable areas, each with its own fill to match its numbered circle. I placed each anchor at the end of my SVG source: \u003csvg … viewBox=\"0 0 1024 1024\"\u003e \u003c!-- Visible content --\u003e \u003cg\u003e...\u003c/g\u003e \u003c!-- Clickable areas --\u003e` \u003cg id=\"links\"\u003e` \u003ca href=\"...\"\u003e\u003cpath fill=\"#B48F4C\" d=\"...\"/\u003e\u003c/a\u003e` \u003ca href=\"...\"\u003e\u003cpath fill=\"#6FA676\" d=\"...\"/\u003e\u003c/a\u003e` \u003ca href=\"...\"\u003e\u003cpath fill=\"#30201D\" d=\"...\"/\u003e\u003c/a\u003e` ... \u003c/g\u003e \u003c/svg\u003e Then, I reduced those anchors’ opacity to 0 and added a short transition to their full-opacity hover state: #links a { opacity: 0; transition: all .25s ease-in-out; } #links a:hover { opacity: 1; } While using an image map’s \u003carea\u003e sadly provides no visual feedback, embedded anchors and their content can respond to someone’s action, hint at what’s to come, and add detail and depth to a design. I might add gloss to those numbered circles to be consistent with the branding I’ve designed for Mike. Or, I could include images, titles, or other content to preview the pop-up modals: \u003cg id=\"links\"\u003e \u003ca href=\"…\"\u003e \u003cpath fill=\"#B48F4C\" d=\"...\"/\u003e \u003cimage href=\"...\" ... /\u003e \u003c/a\u003e \u003c/g\u003e Try it for yourself: Expressive design, modern techniques Designing Mike Worth’s website gave me a chance to blend expressive design with modern development techniques, and revisiting image maps reminded me just how important a tool image maps were during the period Mike loves so much. Ultimately, image maps weren’t the right tool for Mike’s website. But exploring them helped me understand what I really needed: a way to recapture the expressiveness and personality of ’90s website design using modern techniques that are accessible, lightweight, responsive, and semantic. That’s what design’s about: choosing the right tool for a job, even if that sometimes means looking back to move forward. Biography: Andy Clarke Often referred to as one of the pioneers of web design, Andy Clarke has been instrumental in pushing the boundaries of web design and is known for his creative and visually stunning designs. His work has inspired countless designers to explore the full potential of product and website design. Andy’s written several industry-leading books, including Transcending CSS, Hardboiled Web Design, and Art Direction for the Web. He’s also worked with businesses of all sizes and industries to achieve their goals through design. Visit Andy’s studio, Stuff \u0026 Nonsense, and check out his Contract Killer, the popular web design contract template trusted by thousands of web designers and developers.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/image-maps-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI mentioned \u003ca href=\"https://css-tricks.com/revisiting-css-border-image/\"\u003elast time\u003c/a\u003e that I’ve been working on a new website for Emmy-award-winning game composer Mike Worth. He hired me to create a highly graphical design that showcases his work.\u003c/p\u003e\n\n\n\n\u003cp\u003eMike loves ’90s animation, particularly Disney’s \u003cem\u003eDuck Tales\u003c/em\u003e and other animated series. He challenged me to find a way to incorporate their retro ’90s style into his design without making it a pastiche. But that wasn’t my only challenge. I also needed to achieve that ’90s feel by using up-to-the-minute code to maintain accessibility, performance, responsiveness, and semantics.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/paper-attachments.dropboxusercontent.com/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744060949809_2025-03-1.webp?ssl=1\" alt=\"Design by Andy Clarke, Stuff \u0026amp; Nonsense. Mike Worth’s website will launch in April 2025, but you can see examples from this article on CodePen.\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eDesigning for Mike was like a trip back to when mainstream website design seemed more spontaneous and less governed by conventions and best practices. Some people describe these designs as “whimsical”:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eadjective\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003espontaneously fanciful or playful\u003c/li\u003e\n\n\n\n\u003cli\u003egiven to whims; capricious\u003c/li\u003e\n\n\n\n\u003cli\u003equaint, unusual, or fantastic\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003e— \u003cem\u003eCollins English Dictionary\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eBut I’m not so sure that’s entirely accurate. “Playful?” Definitely. “Fanciful?” Possibly. But “fantastic?” That depends. “Whimsy” sounds superfluous, so I call it “expressive” instead.\u003c/p\u003e\n\n\n\n\u003cp\u003eStudying design from way back, I remembered how websites often included graphics that combined branding, content, and navigation. Pretty much every reference to web design in the ’90s — when I designed my first website — talks about Warner Brothers’ \u003cem\u003eSpace Jam\u003c/em\u003e from 1996.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"830\" height=\"699\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061132300_2025-04-2.webp?resize=830%2C699\u0026amp;ssl=1\" alt=\"Space Jam website homepage. The movie logo is in the center of a series of planets that are navigation for other areas of the website against a dark starry background.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061132300_2025-04-2.webp?w=830\u0026amp;ssl=1 830w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061132300_2025-04-2.webp?resize=300%2C253\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061132300_2025-04-2.webp?resize=768%2C647\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eWarner Brothers’ \u003cem\u003eSpace Jam\u003c/em\u003e (1996)\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSo, I’m not going to do that.\u003c/p\u003e\n\n\n\n\u003cp\u003eBrands like Nintendo used their home pages to direct people to their content while making branded visual statements. Cheestrings combined graphics with navigation, making me wonder why we don’t see designs like this today. \u003cem\u003eGoosebumps\u003c/em\u003e typified this approach, combining cartoon illustrations with brightly colored shapes into a functional and visually rich banner, proving that being useful doesn’t mean being boring.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1024\" height=\"278\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061205723_2025-04-3.webp?resize=1024%2C278\u0026amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061205723_2025-04-3.webp?resize=1024%2C278\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061205723_2025-04-3.webp?resize=300%2C81\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061205723_2025-04-3.webp?resize=768%2C208\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061205723_2025-04-3.webp?resize=1536%2C416\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061205723_2025-04-3.webp?resize=2048%2C555\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eLeft to right: Nintendo, Cheestrings, \u003cem\u003eGoosebumps\u003c/em\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn the ’90s, when I developed graphics for websites like these, I either sliced them up and put their parts in tables or used mostly forgotten image maps.\u003c/p\u003e\n\n\n\u003ch3 id=\"a-brief-overview-of-properties-and-values\"\u003eA brief overview of properties and values\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s run through a quick refresher. Image maps date all the way back to HTML 3.2, where, first, server-side maps and then client-side maps defined clickable regions over an image using \u003ccode\u003emap\u003c/code\u003e and \u003ccode\u003earea\u003c/code\u003e elements. They were popular for graphics, maps, and navigation, but their use declined with the rise of CSS, SVG, and JavaScript.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;map\u0026gt;\u003c/code\u003e adds clickable areas to a bitmap or vector image.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;map name=\u0026#34;projects\u0026#34;\u0026gt;\n  ...\n\u0026lt;/map\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat \u003ccode\u003e\u0026lt;map\u0026gt;\u003c/code\u003e is linked to an image using the \u003ccode\u003eusemap\u003c/code\u003e attribute:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;img usemap=\u0026#34;#projects\u0026#34; ...\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThose elements can have separate \u003ccode\u003ehref\u003c/code\u003e and \u003ccode\u003ealt\u003c/code\u003e attributes and can be enhanced with ARIA to improve accessibility:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;map name=\u0026#34;projects\u0026#34;\u0026gt;\n  \u0026lt;area href=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34; … /\u0026gt;\n  ...\n\u0026lt;/map\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eshape\u003c/code\u003e attribute specifies an area’s shape. It can be a primitive \u003ccode\u003ecircle\u003c/code\u003e or \u003ccode\u003erect\u003c/code\u003e or a polygon defined by a set of absolute \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e coordinates:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;area shape=\u0026#34;circle\u0026#34; coords=\u0026#34;...\u0026#34; ... /\u0026gt;\n\u0026lt;area shape=\u0026#34;rect\u0026#34; coords=\u0026#34;...\u0026#34; ... /\u0026gt;\n\u0026lt;area shape=\u0026#34;poly\u0026#34; coords=\u0026#34;...\u0026#34; ... /\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eDespite their age, image maps still offer plenty of benefits. They’re lightweight and need (almost) no JavaScript. More on that in just a minute. They’re accessible and semantic when used with \u003ccode\u003ealt\u003c/code\u003e, ARIA, and \u003ccode\u003etitle\u003c/code\u003e attributes. Despite being from a different era, even modern mobile browsers support image maps.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061341859_2025-04-4.webp?resize=1920%2C1080\u0026amp;ssl=1\" alt=\"A large illustrated map of a cartoon island.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061341859_2025-04-4.webp?w=1920\u0026amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061341859_2025-04-4.webp?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061341859_2025-04-4.webp?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061341859_2025-04-4.webp?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061341859_2025-04-4.webp?resize=1536%2C864\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eDesign by Andy Clarke, Stuff \u0026amp; Nonsense. Mike Worth’s website will launch in April 2025, but you can see examples from this article on CodePen.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eMy design for Mike Worth includes several graphic navigation elements, which made me wonder if image maps might still be an appropriate solution.\u003c/p\u003e\n\n\n\u003ch3 id=\"image-maps-in-action\"\u003eImage maps in action\u003c/h3\u003e\n\n\n\u003cp\u003eMike wants his website to showcase his past work and the projects he’d like to do. To make this aspect of his design discoverable and fun, I created a map for people to explore by pressing on areas of the map to open modals. This map contains numbered circles, and pressing one pops up its modal.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" src=\"https://i0.wp.com/paper-attachments.dropboxusercontent.com/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744061438883_2025-04-5.webp?ssl=1\" alt=\"A large illustrated cartoon map of an island. 6 annotations are on the map and a tooltip is exposed showing detail of one of the annotations.\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eMy first thought was to embed anchors into the external map SVG:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;img src=\u0026#34;projects.svg\u0026#34; alt=\u0026#34;Projects\u0026#34;\u0026gt;\n\n\u0026lt;svg ...\u0026gt;\n  ...\n  \u0026lt;a href=\u0026#34;...\u0026#34;\u0026gt;\n    \u0026lt;circle cx=\u0026#34;35\u0026#34; cy=\u0026#34;35\u0026#34; r=\u0026#34;35\u0026#34; fill=\u0026#34;#941B2F\u0026#34;/\u0026gt;\n    \u0026lt;path fill=\u0026#34;#FFF\u0026#34; d=\u0026#34;...\u0026#34;/\u0026gt;\n  \u0026lt;/a\u0026gt;\n\u0026lt;/svg\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis approach is problematic. Those anchors are only active when SVG is inline and don’t work with an \u003ccode\u003e\u0026lt;img\u0026gt;\u003c/code\u003e element. But image maps work perfectly, even though specifying their coordinates can be laborious. Fortunately, \u003ca href=\"https://www.image-map.net\" rel=\"noopener\"\u003eplenty of tools\u003c/a\u003e are available, which make defining coordinates less tedious. Upload an image, choose shape types, draw the shapes, and copy the markup:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;img src=\u0026#34;projects.svg\u0026#34; usemap=\u0026#34;#projects-map.svg\u0026#34;\u0026gt;\n\n\u0026lt;map name=\u0026#34;projects-map.svg\u0026#34;\u0026gt;\n  \u0026lt;area href=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34; coords=\u0026#34;...\u0026#34; shape=\u0026#34;circle\u0026#34;\u0026gt;\n  \u0026lt;area href=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34; coords=\u0026#34;...\u0026#34; shape=\u0026#34;circle\u0026#34;\u0026gt;\n  ...\n\u0026lt;/map\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eImage maps work well when images are fixed sizes, but flexible images present a problem because map coordinates are absolute, not relative to an image’s dimensions. Making image maps responsive needs a little JavaScript to recalculate those coordinates when the image changes size:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction resizeMap() {\n  const image = document.getElementById(\u0026#34;projects\u0026#34;);\n  const map = document.querySelector(\u0026#34;map[name=\u0026#39;projects-map\u0026#39;]\u0026#34;);\n  \n  if (!image || !map || !image.naturalWidth) return;\n  \n  const scale = image.clientWidth / image.naturalWidth;\n  map.querySelectorAll(\u0026#34;area\u0026#34;).forEach(area =\u0026gt; {\n  \n    if (!area.dataset.originalCoords) {\n      area.dataset.originalCoords = area.getAttribute(\u0026#34;coords\u0026#34;);\n    }\n\n    const scaledCoords = area.dataset.originalCoords\n    \n    .split(\u0026#34;,\u0026#34;)\n    .map(coord =\u0026gt; Math.round(coord * scale))\n    .join(\u0026#34;,\u0026#34;);\n    area.setAttribute(\u0026#34;coords\u0026#34;, scaledCoords);\n  });\n}\n\n[\u0026#34;load\u0026#34;, \u0026#34;resize\u0026#34;].forEach(event =\u0026gt;\n  window.addEventListener(event, resizeMap)\n);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI still wasn’t happy with this implementation as I wanted someone to be able to press on much larger map areas, not just the numbered circles.\u003c/p\u003e\n\n\n\n\u003cp\u003eEvery \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e has coordinates which define how it’s drawn, and they’re relative to the SVG viewBox:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;svg width=\u0026#34;1024\u0026#34; height=\u0026#34;1024\u0026#34;\u0026gt;\n  \u0026lt;path fill=\u0026#34;#BFBFBF\u0026#34; d=\u0026#34;…\u0026#34;/\u0026gt;\n\u0026lt;/svg\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOn the other hand, a map’s \u003ccode\u003e\u0026lt;area\u0026gt;\u003c/code\u003e coordinates are absolute to the top-left of an image, so \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e values need to be converted. Fortunately, \u003ca href=\"https://elmonnerat.com\" rel=\"noopener\"\u003eRaphael Monnerat\u003c/a\u003e has written \u003ca href=\"https://shinao.github.io/PathToPoints/\" rel=\"noopener\"\u003ePathToPoints\u003c/a\u003e, a tool which does precisely that. Upload an SVG, choose the point frequency, copy the coordinates for each path, and add them to a map area’s \u003ccode\u003ecoords:\u003c/code\u003e\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;map\u0026gt;\n  \u0026lt;area href=\u0026#34;\u0026#34; shape=\u0026#34;poly\u0026#34; coords=\u0026#34;...\u0026#34;\u0026gt;\n  \u0026lt;area href=\u0026#34;\u0026#34; shape=\u0026#34;poly\u0026#34; coords=\u0026#34;...\u0026#34;\u0026gt;\n  \u0026lt;area href=\u0026#34;\u0026#34; shape=\u0026#34;poly\u0026#34; coords=\u0026#34;...\u0026#34;\u0026gt;\n  ...\n\u0026lt;/map\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"more-issues-with-image-maps\"\u003eMore issues with image maps\u003c/h3\u003e\n\n\n\u003cp\u003eImage maps are hard-coded and time-consuming to create without tools. Even with tools for generating image maps, converting paths to points, and then recalculating them using JavaScript, they could be challenging to maintain at scale.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;area\u0026gt;\u003c/code\u003e elements aren’t visible, and except for a change in the cursor, they provide no visual feedback when someone hovers over or presses a link. Plus, there’s no easy way to add animations or interaction effects.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut the deal-breaker for me was that an image map’s pixel-based values are unresponsive by default. So, what might be an alternative solution for implementing my map using CSS, HTML, and SVG?\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062888968_2025-04-6.webp?resize=1920%2C1080\u0026amp;ssl=1\" alt=\"A large illustrated map of a cartoon island cut out against a transparent background.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062888968_2025-04-6.webp?w=1920\u0026amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062888968_2025-04-6.webp?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062888968_2025-04-6.webp?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062888968_2025-04-6.webp?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062888968_2025-04-6.webp?resize=1536%2C864\u0026amp;ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnchors positioned absolutely over my map wouldn’t solve the pixel-based positioning problem or give me the irregular-shaped clickable areas I wanted. Anchors within an external SVG wouldn’t work either.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut the solution was staring me in the face. I realized I needed to:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eCreate a new SVG path for each clickable area.\u003c/li\u003e\n\n\n\n\u003cli\u003eMake those paths invisible.\u003c/li\u003e\n\n\n\n\u003cli\u003eWrap each path inside an anchor.\u003c/li\u003e\n\n\n\n\u003cli\u003ePlace the anchors below other elements at the end of my SVG source.\u003c/li\u003e\n\n\n\n\u003cli\u003eReplace that external file with inline SVG.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062914229_2025-04-7.webp?resize=1920%2C1080\u0026amp;ssl=1\" alt=\"The same illustrated map of an island but the six regions are represented by solid colors.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062914229_2025-04-7.webp?w=1920\u0026amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062914229_2025-04-7.webp?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062914229_2025-04-7.webp?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062914229_2025-04-7.webp?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744062914229_2025-04-7.webp?resize=1536%2C864\u0026amp;ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eI created a set of six much larger paths which define the clickable areas, each with its own \u003ccode\u003efill\u003c/code\u003e to match its numbered circle. I placed each anchor at the end of my SVG source:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;svg … viewBox=\u0026#34;0 0 1024 1024\u0026#34;\u0026gt;\n\n  \u0026lt;!-- Visible content --\u0026gt;\n  \u0026lt;g\u0026gt;...\u0026lt;/g\u0026gt;\n\n  \u0026lt;!-- Clickable areas --\u0026gt;`\n  \u0026lt;g id=\u0026#34;links\u0026#34;\u0026gt;`\n    \u0026lt;a href=\u0026#34;...\u0026#34;\u0026gt;\u0026lt;path fill=\u0026#34;#B48F4C\u0026#34; d=\u0026#34;...\u0026#34;/\u0026gt;\u0026lt;/a\u0026gt;`\n    \u0026lt;a href=\u0026#34;...\u0026#34;\u0026gt;\u0026lt;path fill=\u0026#34;#6FA676\u0026#34; d=\u0026#34;...\u0026#34;/\u0026gt;\u0026lt;/a\u0026gt;`\n    \u0026lt;a href=\u0026#34;...\u0026#34;\u0026gt;\u0026lt;path fill=\u0026#34;#30201D\u0026#34; d=\u0026#34;...\u0026#34;/\u0026gt;\u0026lt;/a\u0026gt;`\n    ...\n  \u0026lt;/g\u0026gt;\n\u0026lt;/svg\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen, I reduced those anchors’ \u003ccode\u003eopacity\u003c/code\u003e to \u003ccode\u003e0\u003c/code\u003e and added a short \u003ccode\u003etransition\u003c/code\u003e to their full-opacity hover state:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#links a {\n  opacity: 0;\n  transition: all .25s ease-in-out;\n}\n\n#links a:hover {\n  opacity: 1;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhile using an image map’s \u003ccode\u003e\u0026lt;area\u0026gt;\u003c/code\u003e sadly provides no visual feedback, embedded anchors and their content can respond to someone’s action, hint at what’s to come, and add detail and depth to a design.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"393\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744064725324_2025-04-8.webp?resize=1024%2C393\u0026amp;ssl=1\" alt=\"The illustrated regions of the cartoon map in three states, from left to right: annotated, with visual markers, and with both visual markers and labels.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744064725324_2025-04-8-scaled.webp?resize=1024%2C393\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744064725324_2025-04-8-scaled.webp?resize=300%2C115\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744064725324_2025-04-8-scaled.webp?resize=768%2C295\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744064725324_2025-04-8-scaled.webp?resize=1536%2C589\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/s_8B3545BE9665BEC98D5B2520E77AADDF993F71F890567CC0B56EDF31507C0EBC_1744064725324_2025-04-8-scaled.webp?resize=2048%2C785\u0026amp;ssl=1 2048w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eI might add gloss to those numbered circles to be consistent with the branding I’ve designed for Mike. Or, I could include images, titles, or other content to preview the pop-up modals:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;g id=\u0026#34;links\u0026#34;\u0026gt;\n  \u0026lt;a href=\u0026#34;…\u0026#34;\u0026gt;\n    \u0026lt;path fill=\u0026#34;#B48F4C\u0026#34; d=\u0026#34;...\u0026#34;/\u0026gt;\n    \u0026lt;image href=\u0026#34;...\u0026#34; ... /\u0026gt;\n  \u0026lt;/a\u0026gt;\n\u0026lt;/g\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTry it for yourself:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"expressive-design-modern-techniques\"\u003eExpressive design, modern techniques\u003c/h3\u003e\n\n\n\u003cp\u003eDesigning Mike Worth’s website gave me a chance to blend expressive design with modern development techniques, and revisiting image maps reminded me just how important a tool image maps were during the period Mike loves so much.\u003c/p\u003e\n\n\n\n\u003cp\u003eUltimately, image maps weren’t the right tool for Mike’s website. But exploring them helped me understand what I really needed: a way to recapture the expressiveness and personality of ’90s website design using modern techniques that are accessible, lightweight, responsive, and semantic. That’s what design’s about: choosing the right tool for a job, even if that sometimes means looking back to move forward.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\u003ch4 id=\"biography-andy-clarke\"\u003eBiography: Andy Clarke\u003c/h4\u003e\n\n\n\u003cp\u003eOften referred to as one of the pioneers of web design, \u003ca href=\"https://stuffandnonsense.co.uk/\" rel=\"noopener\"\u003eAndy Clarke\u003c/a\u003e has been instrumental in pushing the boundaries of web design and is known for his creative and visually stunning designs. His work has inspired countless designers to explore the full potential of product and website design.\u003c/p\u003e\n\n\n\n\u003cp\u003eAndy’s written several industry-leading books, including \u003cem\u003eTranscending CSS\u003c/em\u003e, \u003cem\u003eHardboiled Web Design\u003c/em\u003e, and \u003cem\u003eArt Direction for the Web\u003c/em\u003e. He’s also worked with businesses of all sizes and industries to achieve their goals through design.\u003c/p\u003e\n\n\n\n\u003cp\u003eVisit Andy’s studio, \u003ca href=\"https://stuffandnonsense.co.uk/\" rel=\"noopener\"\u003eStuff \u0026amp; Nonsense\u003c/a\u003e, and check out his \u003ca href=\"https://stuffandnonsense.co.uk/projects/contract-killer\" rel=\"noopener\"\u003eContract Killer\u003c/a\u003e, the popular web design contract template trusted by thousands of web designers and developers.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2025-04-30T06:12:45-06:00",
  "modifiedTime": "2025-04-30T06:12:47-06:00"
}
