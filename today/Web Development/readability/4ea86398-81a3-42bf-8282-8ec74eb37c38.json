{
  "id": "4ea86398-81a3-42bf-8282-8ec74eb37c38",
  "title": "Scroll-Driven Sticky Heading",
  "link": "https://css-tricks.com/scroll-driven-sticky-heading/",
  "description": "I was playing around with scroll-driven animations, just searching for all sorts of random things you could do. That’s when I came up with the idea to animate main headings and, using scroll-driven animations, change the headings based on the user’s scroll position. Scroll-Driven Sticky Heading originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Amit Sheen",
  "published": "Fri, 11 Jul 2025 17:11:00 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "position",
    "Scroll Driven Animation"
  ],
  "byline": "Amit Sheen",
  "length": 14409,
  "excerpt": "I was playing around with scroll-driven animations, just searching for all sorts of random things you could do. That’s when I came up with the idea to animate main headings and, using scroll-driven animations, change the headings based on the user’s scroll position.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Scroll-driven animations are great! They’re a powerful tool that lets developers tie the movement and transformation of elements directly to the user’s scroll position. This technique opens up new ways to create interactive experiences, cuing images to appear, text to glide across the stage, and backgrounds to subtly shift. Used thoughtfully, scroll-driven animations (SDA) can make your website feel more dynamic, engaging, and responsive. A few weeks back, I was playing around with scroll-driven animations, just searching for all sorts of random things you could do with it. That’s when I came up with the idea to animate the text of the main heading (h1) and, using SDA, change the heading itself based on the user’s scroll position on the page. In this article, we’re going to break down that idea and rebuild it step by step. This is the general direction we’ll be heading in, which looks better in full screen and viewed in a Chromium browser: It’s important to note that the effect in this example only works in browsers that support scroll-driven animations. Where SDA isn’t supported, there’s a proper fallback to static headings. From an accessibility perspective, if the browser has reduced motion enabled or if the page is being accessed with assistive technology, the effect is disabled and the user gets all the content in a fully semantic and accessible way. Just a quick note: this approach does rely on a few “magic numbers” for the keyframes, which we’ll talk about later on. While they’re surprisingly responsive, this method is really best suited for static content, and it’s not ideal for highly dynamic websites. Closer Look at the Animation Before we dive into scroll-driven animations, let’s take a minute to look at the text animation itself, and how it actually works. This is based on an idea I had a few years back when I wanted to create a typewriter effect. At the time, most of the methods I found involved animating the element’s width, required using a monospace font, or a solid color background. None of which really worked for me. So I looked for a way to animate the content itself, and the solution was, as it often is, in pseudo-elements. Pseudo-elements have a content property, and you can (kind of) animate that text. It’s not exactly animation, but you can change the content dynamically. The cool part is that the only thing that changes is the text itself, no other tricks required. Start With a Solid Foundation Now that you know the trick behind the text animation, let’s see how to combine it with a scroll-driven animation, and make sure we have a solid, accessible fallback as well. We’ll start with some basic semantic markup. I’ll wrap everything in a main element, with individual sections inside. Each section gets its own heading and content, like text and images. For this example, I’ve set up four sections, each with a bit of text and some images, all about Primary Colors. \u003cmain\u003e \u003csection\u003e \u003ch1\u003ePrimary Colors\u003c/h1\u003e \u003cp\u003eThe three primary colors (red, blue, and yellow) form the basis of all other colors on the color wheel. Mixing them in different combinations produces a wide array of hues.\u003c/p\u003e \u003cimg src=\"./colors.jpg\" alt=\"...image description\"\u003e \u003c/section\u003e \u003csection\u003e \u003ch2\u003eRed Power\u003c/h2\u003e \u003cp\u003eRed is a bold and vibrant color, symbolizing energy, passion, and warmth. It easily attracts attention and is often linked with strong emotions.\u003c/p\u003e \u003cimg src=\"./red.jpg\" alt=\"...image description\"\u003e \u003c/section\u003e \u003csection\u003e \u003ch2\u003eBlue Calm\u003c/h2\u003e \u003cp\u003eBlue is a calm and cool color, representing tranquility, stability, and trust. It evokes images of the sky and sea, creating a peaceful mood.\u003c/p\u003e \u003cimg src=\"./blue.jpg\" alt=\"...image description\"\u003e \u003c/section\u003e \u003csection\u003e \u003ch2\u003eYellow Joy\u003c/h2\u003e \u003cp\u003eYellow is a bright and cheerful color, standing for light, optimism, and creativity. It is highly visible and brings a sense of happiness and hope.\u003c/p\u003e \u003cimg src=\"./yellow.jpg\" alt=\"...image description\"\u003e \u003c/section\u003e \u003c/main\u003e As for the styling, I’m not doing anything special at this stage, just the basics. I changed the font and adjusted the text and heading sizes, set up the display for the main and the sections, and fixed the image sizes with object-fit. So, at this point, we have a simple site with static, semantic, and accessible content, which is great. Now the goal is to make sure it stays that way as we start adding our effect. The Second First Heading We’ll start by adding another h1 element at the top of the main. This new element will serve as the placeholder for our animated text, updating according to the user’s scroll position. And yes, I know there’s already an h1 in the first section; that’s fine and we’ll address it in a moment so that only one is accessible at a time. \u003ch1 class=\"scrollDrivenHeading\" aria-hidden=\"true\"\u003ePrimary Colors\u003c/h1\u003e Notice that I’ve added aria-hidden=\"true\" to this heading, so it won’t be picked up by screen readers. Now I can add a class specifically for screen readers, .srOnly, to all the other headings. This way, anyone viewing the content “normally” will see only the animated heading, while assistive technology users will get the regular, static semantic headings. Note: The style for the .srOnly class is based on “Inclusively Hidden” by Scott O’Hara. Handling Support As much as accessibility matters, there’s another concern we need to keep in mind: support. CSS Scroll-Driven Animations are fantastic, but they’re still not fully supported everywhere. That’s why it’s important to provide the static version for browsers that don’t support SDA. The first step is to hide the animated heading we just added using display: none. Then, we’ll add a new @supports block to check for SDA support. Inside that block, where SDA is supported, we can change back the display for the heading. The .srOnly class should also move into the @supports block, since we only want it to apply when the effect is active, not when it’s not supported. This way, just like with assistive technology, anyone visiting the page in a browser without SDA support will still get the static content. .scrollDrivenHeading { display: none; } @supports (animation-timeline: scroll()) { .scrollDrivenHeading { display: block; } /* Screen Readers Only */ .srOnly { clip: rect(0 0 0 0); clip-path: inset(50%); height: 1px; overflow: hidden; position: absolute; white-space: nowrap; width: 1px; } } Get Sticky The next thing we need to do is handle the stickiness of the heading. To make sure the heading always stays on screen, we’ll set its position to sticky with top: 0 so it sticks to the top of the viewport. While we’re at it, let’s add some basic styling, including a background so the text doesn’t blend with whatever’s behind the heading, a bit of padding for spacing, and white-space: nowrap to keep the heading on a single line. /* inside the @supports block */ .scrollDrivenHeading { display: block; position: sticky; top: 0; background-image: linear-gradient(0deg, transparent, black 1em); padding: 0.5em 0.25em; white-space: nowrap; } Now everything’s set up: in normal conditions, we’ll see a single sticky heading at the top of the page. And if someone uses assistive technology or a browser that doesn’t support SDA, they’ll still get the regular static content. Now we’re ready to start animating the text. Almost… The Magic Numbers To build the text animation, we need to know exactly where the text should change. With SDA, scrolling basically becomes our timeline, and we have to determine the exact points on that timeline to trigger the animation. To make this easier, and to help you pinpoint those positions, I’ve prepared the following script: @property --scroll-position { syntax: \"\u003cnumber\u003e\"; inherits: false; initial-value: 0; } body::after { counter-reset: sp var(--scroll-position); content: counter(sp) \"%\"; position: fixed; top: 0; left: 0; padding: 1em; background-color: maroon; animation: scrollPosition steps(100); animation-timeline: scroll(); } @keyframes scrollPosition { 0% { --scroll-position: 0; } 100% { --scroll-position: 100; } } I don’t want to get too deep into this code, but the idea is to take the same scroll timeline we’ll use next to animate the text, and use it to animate a custom property (--scroll-position) from 0 to 100 based on the scroll progress, and display that value in the content. If we’ll add this at the start of our code, we’ll see a small red square in the top-left corner of the screen, showing the current scroll position as a percentage (to match the keyframes). This way, you can scroll to any section you want and easily mark the percentage where each heading should begin. With this method and a bit of trial and error, I found that I want the headings to change at 30%, 60%, and 90%. So, how do we actually do it? Let’s start animating. Animating Text First, we’ll clear out the content inside the .scrollDrivenHeading element so it’s empty and ready for dynamic content. In the CSS, I’ll add a pseudo-element to the heading, which we’ll use to animate the text. We’ll give it empty content, set up the animation-name, and of course, assign the animation-timeline to scroll(). And since I’m animating the content property, which is a discrete type, it doesn’t transition smoothly between values. It just jumps from one to the next. By setting the animation-timing-function property to step-end, I make sure each change happens exactly at the keyframe I define, so the text switches precisely where I want it to, instead of somewhere in between. .scrollDrivenHeading { /* style */ \u0026::after { content: ''; animation-name: headingContent; animation-timing-function: step-end; animation-timeline: scroll(); } } As for the keyframes, this part is pretty straightforward (for now). We’ll set the first frame (0%) to the first heading, and assign the other headings to the percentages we found earlier. @keyframes headingContent { 0% { content: 'Primary Colors'} 30% { content: 'Red Power'} 60% { content: 'Blue Calm'} 90%, 100% { content: 'Yellow Joy'} } So, now we’ve got a site with a sticky heading that updates as you scroll. But wait, right now it just switches instantly. Where’s the animation?! Here’s where it gets interesting. Since we’re not using JavaScript or any string manipulation, we have to write the keyframes ourselves. The best approach is to start from the target heading you want to reach, and build backwards. So, if you want to animate between the first and second heading, it would look like this: @keyframes headingContent { 0% { content: 'Primary Colors'} 9% { content: 'Primary Color'} 10% { content: 'Primary Colo'} 11% { content: 'Primary Col'} 12% { content: 'Primary Co'} 13% { content: 'Primary C'} 14% { content: 'Primary '} 15% { content: 'Primary'} 16% { content: 'Primar'} 17% { content: 'Prima'} 18% { content: 'Prim'} 19% { content: 'Pri'} 20% { content: 'Pr'} 21% { content: 'P'} 22% { content: 'R'} 23% { content: 'Re'} 24% { content: 'Red'} 25% { content: 'Red '} 26% { content: 'Red P'} 27% { content: 'Red Po'} 28%{ content: 'Red Pow'} 29% { content: 'Red Powe'} 30% { content: 'Red Power'} 60% { content: 'Blue Calm'} 90%, 100% { content: 'Yellow Joy'} } I simply went back by 1% each time, removing or adding a letter as needed. Note that in other cases, you might want to use a different step size, and not always 1%. For example, on longer headings with more words, you’ll probably want smaller steps. If we repeat this process for all the other headings, we’ll end up with a fully animated heading. User Preferences We talked before about accessibility and making sure the content works well with assistive technology, but there’s one more thing you should keep in mind: prefers-reduced-motion. Even though this isn’t a strict WCAG requirement for this kind of animation, it can make a big difference for people with vestibular sensitivities, so it’s a good idea to offer a way to show the content without animations. If you want to provide a non-animated alternative, all you need to do is wrap your @supports block with a prefers-reduced-motion query: @media screen and (prefers-reduced-motion: no-preference) { @supports (animation-timeline: scroll()) { /* style */ } } Leveling Up Let’s talk about variations. In the previous example, we animated the entire heading text, but we don’t have to do that. You can animate just the part you want, and use additional animations to enhance the effect and make things more interesting. For example, here I kept the text “Primary Color” fixed, and added a span after it that handles the animated text. \u003ch1 class=\"scrollDrivenHeading\" aria-hidden=\"true\"\u003e Primary Color\u003cspan\u003e\u003c/span\u003e \u003c/h1\u003e And since I now have a separate span, I can also animate its color to match each value. In the next example, I kept the text animation on the span, but instead of changing the text color, I added another scroll-driven animation on the heading itself to change its background color. This way, you can add as many animations as you want and change whatever you like. Your Turn! CSS Scroll-Driven Animations are more than just a cool trick; they’re a game-changer that opens the door to a whole new world of web design. With just a bit of creativity, you can turn even the most ordinary pages into something interactive, memorable, and truly engaging. The possibilities really are endless, from subtle effects that enhance the user experience, to wild, animated transitions that make your site stand out. So, what would you build with scroll-driven animations? What would you create with this new superpower? Try it out, experiment, and if you come up with something cool, have some ideas, wild experiments, or even weird failures, I’d love to hear about them. I’m always excited to see what others come up with, so feel free to share your work, questions, or feedback below. Special thanks to Cristian Díaz for reviewing the examples, making sure everything is accessible, and contributing valuable advice and improvements.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/07/scroll-driven-typewriter.webp",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eScroll-driven animations are great! They’re a powerful tool that lets developers tie the movement and transformation of elements directly to the user’s scroll position. This technique opens up new ways to create interactive experiences, cuing images to appear, text to glide across the stage, and backgrounds to subtly shift. Used thoughtfully, scroll-driven animations (SDA) can make your website feel more dynamic, engaging, and responsive.\u003c/p\u003e\n\n\n\n\u003cp\u003eA few weeks back, I was playing around with scroll-driven animations, just searching for all sorts of random things you could do with it. That’s when I came up with the idea to animate the text of the main heading (\u003ccode\u003eh1\u003c/code\u003e) and, using SDA, change the heading itself based on the user’s scroll position on the page. In this article, we’re going to break down that idea and rebuild it step by step. This is the general direction we’ll be heading in, which looks better \u003ca href=\"https://codepen.io/amit_sheen/full/jEPRPXG/8f961cc6db1cac0c976bec7bd4bdd57f\" rel=\"noopener\"\u003ein full screen\u003c/a\u003e and viewed in a Chromium browser:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIt’s important to note that the effect in this example only works in browsers that support scroll-driven animations. Where SDA isn’t supported, there’s a proper fallback to static headings. From an accessibility perspective, if the browser has reduced motion enabled or if the page is being accessed with assistive technology, the effect is disabled and the user gets all the content in a fully semantic and accessible way.\u003c/p\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"scroll-driven-animations\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eJust a quick note:\u003c/strong\u003e this approach does rely on a few \u003ca href=\"https://css-tricks.com/magic-numbers-in-css/\"\u003e“magic numbers”\u003c/a\u003e for the keyframes, which we’ll talk about later on. While they’re surprisingly responsive, this method is really best suited for static content, and it’s not ideal for highly dynamic websites.\u003c/p\u003e\n\n\n\u003ch3 id=\"closer-look-at-the-animation\"\u003eCloser Look at the Animation\u003c/h3\u003e\n\n\n\u003cp\u003eBefore we dive into scroll-driven animations, let’s take a minute to look at the text animation itself, and how it actually works. This is based on an idea I had a few years back when I wanted to create a typewriter effect. At the time, most of the methods I found involved animating the element’s width, required using a monospace font, or a solid color background. None of which really worked for me. So I looked for a way to animate the content itself, and the solution was, as it often is, in pseudo-elements.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003ePseudo-elements have a \u003ca href=\"https://css-tricks.com/almanac/properties/c/content/\"\u003e\u003ccode\u003econtent\u003c/code\u003e\u003c/a\u003e property, and you can (kind of) animate that text. It’s not exactly animation, but you can change the content dynamically. The cool part is that the only thing that changes is the text itself, no other tricks required.\u003c/p\u003e\n\n\n\u003ch3 id=\"start-with-a-solid-foundation\"\u003eStart With a Solid Foundation\u003c/h3\u003e\n\n\n\u003cp\u003eNow that you know the trick behind the text animation, let’s see how to combine it with a scroll-driven animation, and make sure we have a solid, accessible fallback as well.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe’ll start with some basic semantic markup. I’ll wrap everything in a \u003ccode\u003emain\u003c/code\u003e element, with individual sections inside. Each \u003ccode\u003esection\u003c/code\u003e gets its own heading and content, like text and images. For this example, I’ve set up four sections, each with a bit of text and some images, all about Primary Colors.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;main\u0026gt;\n  \u0026lt;section\u0026gt;\n    \u0026lt;h1\u0026gt;Primary Colors\u0026lt;/h1\u0026gt;\n    \u0026lt;p\u0026gt;The three primary colors (red, blue, and yellow) form the basis of all other colors on the color wheel. Mixing them in different combinations produces a wide array of hues.\u0026lt;/p\u0026gt;\n    \u0026lt;img src=\u0026#34;./colors.jpg\u0026#34; alt=\u0026#34;...image description\u0026#34;\u0026gt;\n  \u0026lt;/section\u0026gt;\n  \n  \u0026lt;section\u0026gt;\n    \u0026lt;h2\u0026gt;Red Power\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;Red is a bold and vibrant color, symbolizing energy, passion, and warmth. It easily attracts attention and is often linked with strong emotions.\u0026lt;/p\u0026gt;\n    \u0026lt;img src=\u0026#34;./red.jpg\u0026#34; alt=\u0026#34;...image description\u0026#34;\u0026gt;\n  \u0026lt;/section\u0026gt;\n  \n  \u0026lt;section\u0026gt;\n    \u0026lt;h2\u0026gt;Blue Calm\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;Blue is a calm and cool color, representing tranquility, stability, and trust. It evokes images of the sky and sea, creating a peaceful mood.\u0026lt;/p\u0026gt;\n    \u0026lt;img src=\u0026#34;./blue.jpg\u0026#34; alt=\u0026#34;...image description\u0026#34;\u0026gt;\n  \u0026lt;/section\u0026gt;\n  \n  \u0026lt;section\u0026gt;\n    \u0026lt;h2\u0026gt;Yellow Joy\u0026lt;/h2\u0026gt;\n    \u0026lt;p\u0026gt;Yellow is a bright and cheerful color, standing for light, optimism, and creativity. It is highly visible and brings a sense of happiness and hope.\u0026lt;/p\u0026gt;\n    \u0026lt;img src=\u0026#34;./yellow.jpg\u0026#34; alt=\u0026#34;...image description\u0026#34;\u0026gt;\n  \u0026lt;/section\u0026gt;\n\u0026lt;/main\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAs for the styling, I’m not doing anything special at this stage, just the basics. I changed the font and adjusted the text and heading sizes, set up the \u003ccode\u003edisplay\u003c/code\u003e for the \u003ccode\u003emain\u003c/code\u003e and the \u003ccode\u003esection\u003c/code\u003es, and fixed the image sizes with \u003ca href=\"https://css-tricks.com/almanac/properties/o/object-fit/\"\u003e\u003ccode\u003eobject-fit\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eSo, at this point, we have a simple site with static, semantic, and accessible content, which is great. Now the goal is to make sure it stays that way as we start adding our effect.\u003c/p\u003e\n\n\n\u003ch3 id=\"the-second-first-heading\"\u003eThe Second First Heading\u003c/h3\u003e\n\n\n\u003cp\u003eWe’ll start by adding another \u003ccode\u003eh1\u003c/code\u003e element at the top of the \u003ccode\u003emain\u003c/code\u003e. This new element will serve as the placeholder for our animated text, updating according to the user’s scroll position. And yes, I know there’s already an \u003ccode\u003eh1\u003c/code\u003e in the first \u003ccode\u003esection\u003c/code\u003e; that’s fine and we’ll address it in a moment so that only one is accessible at a time.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;h1 class=\u0026#34;scrollDrivenHeading\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;Primary Colors\u0026lt;/h1\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNotice that I’ve added \u003ccode\u003earia-hidden=\u0026#34;true\u0026#34;\u003c/code\u003e to this heading, so it won’t be picked up by screen readers. Now I can add a class specifically for screen readers, \u003ccode\u003e.srOnly\u003c/code\u003e, to all the other headings. This way, anyone viewing the content “normally” will see only the animated heading, while assistive technology users will get the regular, static semantic headings.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e The style for the \u003ccode\u003e.srOnly\u003c/code\u003e class is based on \u003ca href=\"https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html\" rel=\"noopener\"\u003e“Inclusively Hidden”\u003c/a\u003e by Scott O’Hara.\u003c/p\u003e\n\n\n\u003ch3 id=\"handling-support\"\u003eHandling Support\u003c/h3\u003e\n\n\n\u003cp\u003eAs much as accessibility matters, there’s another concern we need to keep in mind: support. CSS Scroll-Driven Animations are fantastic, but they’re still not fully supported everywhere. That’s why it’s important to provide the static version for browsers that don’t support SDA.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe first step is to hide the animated heading we just added using \u003ccode\u003edisplay: none\u003c/code\u003e. Then, we’ll add a new \u003ccode\u003e@supports\u003c/code\u003e block to check for SDA support. Inside that block, where SDA is supported, we can change back the display for the heading.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003e.srOnly\u003c/code\u003e class should also move into the \u003ca href=\"https://css-tricks.com/almanac/rules/s/supports/\"\u003e\u003ccode\u003e@supports\u003c/code\u003e\u003c/a\u003e block, since we only want it to apply when the effect is active, not when it’s not supported. This way, just like with assistive technology, anyone visiting the page in a browser without SDA support will still get the static content.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.scrollDrivenHeading {\n  display: none;\n}\n\n@supports (animation-timeline: scroll()) {\n  .scrollDrivenHeading {\n    display: block;\n  }\n  \n  /* Screen Readers Only */\n  .srOnly {\n    clip: rect(0 0 0 0); \n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap; \n    width: 1px;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"get-sticky\"\u003eGet Sticky\u003c/h3\u003e\n\n\n\u003cp\u003eThe next thing we need to do is handle the stickiness of the heading. To make sure the heading always stays on screen, we’ll set its \u003ccode\u003eposition\u003c/code\u003e to \u003ccode\u003esticky\u003c/code\u003e with \u003ccode\u003etop: 0\u003c/code\u003e so it sticks to the top of the viewport.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhile we’re at it, let’s add some basic styling, including a background so the text doesn’t blend with whatever’s behind the heading, a bit of \u003ccode\u003epadding\u003c/code\u003e for spacing, and \u003ccode\u003ewhite-space: nowrap\u003c/code\u003e to keep the heading on a single line.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* inside the @supports block */\n.scrollDrivenHeading {\n  display: block;\n  position: sticky;\n  top: 0;\n  background-image: linear-gradient(0deg, transparent, black 1em);\n  padding: 0.5em 0.25em;\n  white-space: nowrap;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow everything’s set up: in normal conditions, we’ll see a single sticky heading at the top of the page. And if someone uses assistive technology or a browser that doesn’t support SDA, they’ll still get the regular static content.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eNow we’re ready to start animating the text. \u003cem\u003eAlmost…\u003c/em\u003e\u003c/p\u003e\n\n\n\u003ch2 id=\"the-magic-numbers\"\u003eThe Magic Numbers\u003c/h2\u003e\n\n\n\u003cp\u003eTo build the text animation, we need to know exactly where the text should change. With SDA, scrolling basically becomes our timeline, and we have to determine the exact points on that timeline to trigger the animation.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo make this easier, and to help you pinpoint those positions, I’ve prepared the following script:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@property --scroll-position {\n  syntax: \u0026#34;\u0026lt;number\u0026gt;\u0026#34;;\n  inherits: false;\n  initial-value: 0;\n}\n\nbody::after {\n  counter-reset: sp var(--scroll-position);\n  content: counter(sp) \u0026#34;%\u0026#34;;\n  position: fixed;\n  top: 0;\n  left: 0;\n  padding: 1em;\n  background-color: maroon;\n  animation: scrollPosition steps(100);\n  animation-timeline: scroll();\n}\n\n@keyframes scrollPosition {\n  0% { --scroll-position: 0; }\n  100% { --scroll-position: 100; }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI don’t want to get too deep into this code, but the idea is to take the same scroll timeline we’ll use next to animate the text, and use it to animate a custom property (\u003ccode\u003e--scroll-position\u003c/code\u003e) from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e100\u003c/code\u003e based on the scroll progress, and display that value in the content.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf we’ll add this at the start of our code, we’ll see a small red square in the top-left corner of the screen, showing the current scroll position as a percentage (to match the keyframes). This way, you can scroll to any section you want and easily mark the percentage where each heading should begin.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWith this method and a bit of trial and error, I found that I want the headings to change at 30%, 60%, and 90%. So, how do we actually do it? Let’s start animating.\u003c/p\u003e\n\n\n\u003ch3 id=\"animating-text\"\u003eAnimating Text\u003c/h3\u003e\n\n\n\u003cp\u003eFirst, we’ll clear out the content inside the \u003ccode\u003e.scrollDrivenHeading\u003c/code\u003e element so it’s empty and ready for dynamic content. In the CSS, I’ll add a pseudo-element to the heading, which we’ll use to animate the text. We’ll give it empty \u003ccode\u003econtent\u003c/code\u003e, set up the \u003ccode\u003eanimation-name\u003c/code\u003e, and of course, assign the \u003ca href=\"https://css-tricks.com/almanac/properties/a/animation-timeline/\"\u003e\u003ccode\u003eanimation-timeline\u003c/code\u003e\u003c/a\u003e to \u003ccode\u003escroll()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd since I’m animating the \u003ccode\u003econtent\u003c/code\u003e property, which is a discrete type, it doesn’t transition smoothly between values. It just jumps from one to the next. By setting the \u003ccode\u003eanimation-timing-function\u003c/code\u003e property to \u003ccode\u003estep-end\u003c/code\u003e, I make sure each change happens exactly at the keyframe I define, so the text switches precisely where I want it to, instead of somewhere in between.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.scrollDrivenHeading {\n  /* style */\n\n  \u0026amp;::after {\n    content: \u0026#39;\u0026#39;;\n    animation-name: headingContent;\n    animation-timing-function: step-end;\n    animation-timeline: scroll();\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAs for the keyframes, this part is pretty straightforward (for now). We’ll set the first frame (\u003ccode\u003e0%\u003c/code\u003e) to the first heading, and assign the other headings to the percentages we found earlier.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@keyframes headingContent {\n  0% { content: \u0026#39;Primary Colors\u0026#39;}\n  30% { content: \u0026#39;Red Power\u0026#39;}\n  60% { content: \u0026#39;Blue Calm\u0026#39;}\n  90%, 100% { content: \u0026#39;Yellow Joy\u0026#39;}\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSo, now we’ve got a site with a sticky heading that updates as you scroll.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eBut wait, right now it just switches instantly. Where’s the animation?! Here’s where it gets interesting. Since we’re not using JavaScript or any string manipulation, we have to write the keyframes ourselves. The best approach is to start from the target heading you want to reach, and build backwards. So, if you want to animate between the first and second heading, it would look like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@keyframes headingContent {\n  0% { content: \u0026#39;Primary Colors\u0026#39;}\n  \n  9% { content: \u0026#39;Primary Color\u0026#39;}\n  10% { content: \u0026#39;Primary Colo\u0026#39;}\n  11% { content: \u0026#39;Primary Col\u0026#39;}\n  12% { content: \u0026#39;Primary Co\u0026#39;}\n  13% { content: \u0026#39;Primary C\u0026#39;}\n  14% { content: \u0026#39;Primary \u0026#39;}\n  15% { content: \u0026#39;Primary\u0026#39;}\n  16% { content: \u0026#39;Primar\u0026#39;}\n  17% { content: \u0026#39;Prima\u0026#39;}\n  18% { content: \u0026#39;Prim\u0026#39;}\n  19% { content: \u0026#39;Pri\u0026#39;}\n  20% { content: \u0026#39;Pr\u0026#39;}\n  21% { content: \u0026#39;P\u0026#39;}\n  \n  22% { content: \u0026#39;R\u0026#39;}\n  23% { content: \u0026#39;Re\u0026#39;}\n  24% { content: \u0026#39;Red\u0026#39;}\n  25% { content: \u0026#39;Red \u0026#39;}\n  26% { content: \u0026#39;Red P\u0026#39;}\n  27% { content: \u0026#39;Red Po\u0026#39;}\n  28%{ content: \u0026#39;Red Pow\u0026#39;}\n  29% { content: \u0026#39;Red Powe\u0026#39;}\n  \n  30% { content: \u0026#39;Red Power\u0026#39;}\n  60% { content: \u0026#39;Blue Calm\u0026#39;}\n  90%, 100% { content: \u0026#39;Yellow Joy\u0026#39;}\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI simply went back by 1% each time, removing or adding a letter as needed. Note that in other cases, you might want to use a different step size, and not always 1%. For example, on longer headings with more words, you’ll probably want smaller steps.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf we repeat this process for all the other headings, we’ll end up with a fully animated heading.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"user-preferences\"\u003eUser Preferences\u003c/h3\u003e\n\n\n\u003cp\u003eWe talked before about accessibility and making sure the content works well with assistive technology, but there’s one more thing you should keep in mind: \u003ca href=\"https://css-tricks.com/almanac/rules/m/media/prefers-reduced-motion/\"\u003e\u003ccode\u003eprefers-reduced-motion\u003c/code\u003e\u003c/a\u003e. Even though this isn’t a strict WCAG requirement for this kind of animation, it can make a big difference for people with vestibular sensitivities, so it’s a good idea to offer a way to show the content without animations.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you want to provide a non-animated alternative, all you need to do is wrap your \u003ccode\u003e@supports\u003c/code\u003e block with a \u003ccode\u003eprefers-reduced-motion\u003c/code\u003e query:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@media screen and (prefers-reduced-motion: no-preference) {\n  @supports (animation-timeline: scroll()) {\n    /* style */\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"leveling-up\"\u003eLeveling Up\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s talk about variations. In the previous example, we animated the entire heading text, but we don’t have to do that. You can animate just the part you want, and use additional animations to enhance the effect and make things more interesting. For example, here I kept the text “Primary Color” fixed, and added a \u003ccode\u003espan\u003c/code\u003e after it that handles the animated text.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;h1 class=\u0026#34;scrollDrivenHeading\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\n  Primary Color\u0026lt;span\u0026gt;\u0026lt;/span\u0026gt;\n\u0026lt;/h1\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd since I now have a separate \u003ccode\u003espan\u003c/code\u003e, I can also animate its color to match each value.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIn the next example, I kept the text animation on the \u003ccode\u003espan\u003c/code\u003e, but instead of changing the text color, I added another scroll-driven animation on the heading itself to change its background color. This way, you can add as many animations as you want and change whatever you like.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch2 id=\"your-turn-\"\u003eYour Turn!\u003c/h2\u003e\n\n\n\u003cp\u003eCSS Scroll-Driven Animations are more than just a cool trick; they’re a game-changer that opens the door to a whole new world of web design. With just a bit of creativity, you can turn even the most ordinary pages into something interactive, memorable, and truly engaging. The possibilities really are endless, from subtle effects that enhance the user experience, to wild, animated transitions that make your site stand out.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, what would you build with scroll-driven animations? What would you create with this new superpower? Try it out, experiment, and if you come up with something cool, have some ideas, wild experiments, or even weird failures, I’d love to hear about them. I’m always excited to see what others come up with, so feel free to share your work, questions, or feedback below.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eSpecial thanks to \u003ca href=\"https://bsky.app/profile/itscrisdiaz.com\" rel=\"noopener\"\u003eCristian Díaz\u003c/a\u003e for reviewing the examples, making sure everything is accessible, and contributing valuable advice and improvements.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2025-07-11T11:11:00-06:00",
  "modifiedTime": "2025-07-11T11:12:29-06:00"
}
