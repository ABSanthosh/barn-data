{
  "id": "3884c0a5-6ca2-4749-939d-325565f1ac9c",
  "title": "A First Look at the Interest Invoker API (for Hover-Triggered Popovers)",
  "link": "https://css-tricks.com/a-first-look-at-the-interest-invoker-api-for-hover-triggered-popovers/",
  "description": "Chrome 139 is experimenting with Open UI’s proposed Interest Invoker API, which would be used to create tooltips, hover menus, hover cards, quick actions, and other types of UIs for showing more information with hover interactions. A First Look at the Interest Invoker API (for Hover-Triggered Popovers) originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Daniel Schwarz",
  "published": "Wed, 23 Jul 2025 12:36:48 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "Interest Invoker API",
    "popover"
  ],
  "byline": "Daniel Schwarz",
  "length": 10572,
  "excerpt": "Chrome 139 is experimenting with Open UI’s proposed Interest Invoker API, which would be used to create tooltips, hover menus, hover cards, quick actions, and other types of UIs for showing more information with hover interactions.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Chrome 139 is experimenting with Open UI’s proposed Interest Invoker API, which would be used to create tooltips, hover menus, hover cards, quick actions, and other types of UIs for showing more information with hover interactions. The Interest Invoker API makes these components declarative and hover-triggered, meaning that you create them with HTML, and then the web browser handles the mouseenter and mouseleave events for you, sans JavaScript. You’d use it like this: \u003ca interestfor=\"target-id\"\u003eInterest trigger\u003c/a\u003e \u003cdiv id=\"target-id\" popover\u003eInterest target\u003c/div\u003e It’s not stated anywhere that they must be declared as popovers, but they do bake the right accessibility hints in. I want to spend a little time looking at the pieces of this feature, how they‘re used as currently proposed, and offer a few thoughts based on my experience playing with them. Ready to dive in? The interest trigger The trigger is what the user will hover (or long-press on touchscreen devices) to reveal the interest target. I’d call it an “invoker,” but to avoid confusing it with the Invoker Commands API (which is kind of similar), I’ll stick with “trigger” or “interest trigger” for now. The interest trigger can be: a link (\u003ca\u003e), a button (\u003cbutton\u003e), or an image map area (\u003carea\u003e). And it should have the interestfor attribute whose value should reference the id of the interest target. Here are examples for each supported element: \u003c!-- Link --\u003e \u003ca interestfor=\"link\"\u003eInterest trigger\u003c/a\u003e \u003cdiv id=\"link\" popover\u003eInterest target\u003c/div\u003e \u003c!-- Button --\u003e \u003cbutton interestfor=\"button\"\u003eInterest trigger\u003c/button\u003e \u003cdiv id=\"button\" popover\u003eInterest target\u003c/div\u003e \u003c!-- Image map --\u003e \u003cimg src=\"\" alt=\"\" usemap=\"#map\"\u003e \u003cmap name=\"map\"\u003e \u003carea interestfor=\"area\" shape=\"\" coords=\"\" alt=\"\"\u003e \u003c/map\u003e \u003cdiv id=\"area\" popover\u003eInterest target\u003c/div\u003e If the interest target is a popover (like it is in the examples above), then the interestfor attribute replaces the popovertarget attribute that’s normally required for declarative popovers. So, instead of this: \u003c!-- Button --\u003e \u003cbutton popovertarget=\"button\"\u003eInterest trigger\u003c/button\u003e \u003cdiv id=\"button\" popover\u003eInterest target\u003c/div\u003e …we’re looking at this: \u003c!-- Button --\u003e \u003cbutton interestfor=\"button\"\u003eInterest trigger\u003c/button\u003e \u003cdiv id=\"button\" popover\u003eInterest target\u003c/div\u003e The interest target The interest target is what’s revealed when the user hovers (or long-presses) the interest trigger. Again, this should be a popover, and it’s important to use the right type of popover because they have different functional and accessibility behaviors. popover attributes that are valueless, empty, or use the auto keyword can be dismissed lightly, i.e., using the esc key, or by clicking outside of the popover. When opened, these popovers close all hint and other auto popovers (at least, the ones that aren’t nested). \u003cdiv id=\"target-id\" popover\u003eInterest target\u003c/div\u003e \u003c!-- Equivalent to --\u003e \u003cdiv id=\"target-id\" popover=\"\"\u003eInterest target\u003c/div\u003e \u003c!-- Equivalent to --\u003e \u003cdiv id=\"target-id\" popover=\"auto\"\u003eInterest target\u003c/div\u003e hint popovers (the newest type of popovers) can also be dismissed lightly, but only close other hint popovers when opened: \u003cdiv id=\"target-id\" popover=\"hint\"\u003eInterest target\u003c/div\u003e manual popovers do their own thing. They can’t be dismissed lightly, don’t tell other popovers what to do, and we can have more than one of them open at a time. They’re suuuper chill. \u003cdiv id=\"target-id\" popover=\"manual\"\u003eInterest target\u003c/div\u003e However, Open UI’s explainer and Chrome’s current implementation suggest that interest targets disappear on mouseleave regardless of the type of popover we’re working with. But redefining popover behavior in this context (or any context) feels wrong to me. If the interest target’s popover attribute is set to manual, for example, shouldn’t it persist after mouseleave? Open UI discusses browsers baking the accessibility in depending on the popover type, which justifies interest invokers building off of popovers, but I think accessibility should depend on the content (unless overwritten using ARIA attributes) rather than the popover type. In short, it seems like interest invokers are designed to be used with popovers but for all the wrong reasons (in my opinion anyway). That said, it’s early days still. Interest invokers are very experimental and it’s certainly possible that I’m overlooking something. They’re otherwise straightforward, which is on-brand for Open UI (look at the Customizable Select, after all). They take commonly-used JavaScript-powered components (such as exclusive accordions, invoker commands, and yes, popovers) and make them possible with declarative HTML. That said, there are some JavaScript events that we can use, too. Let’s take a look at those. Interest invoker JavaScript events While I imagine that you’d only need to listen for the interest and loseinterestevents for certain edge cases, JavaScript events for these new declarative HTML features are fairly standard, and they’re there should you need them: interestTrigger.addEventListener(\"interest\", () =\u003e { /* User showed interest */ }); interestTrigger.addEventListener(\"loseinterest\", () =\u003e { /* User lost interest */ }); But what does “interest” mean, exactly? That’s worth digging into next. Interest delay (and the CSS of it all) You’ve probably noticed that when you show or lose interest, there’s a short delay in the popover showing or hiding itself. This is extremely annoying at first, but when you actually start to build with interest invokers, you realize how necessary it is. Here’s the demo again, so you can try it out (in Chrome 139 or Canary for now): One problem is that if you accidentally mouseleave the interest trigger and the target (which can be very easy to do when the target is too small), then it all disappears. This is even more annoying, but luckily the hide delay allows you some recovery time. Similarly, the show delay offers keyboard and screen reader users the opportunity to skip the interest target, while also preventing it from being triggered accidentally with a mouse pointer. Having said that, if the interest target is unobtrusive, then removing the show delay shouldn’t cause any harm. You could also remove the hide delay for keyboard and screen reader users, who aren’t likely to “lose interest” accidentally. We can do this by setting two new CSS properties, interest-show-delay and interest-hide-delay, to 0. The default is 0.5s and is set on the interest trigger (but not the interest target): /* If unobtrusive */ .unobtrusive[interestfor] { interest-show-delay: 0; } /* If keyboard-focused on a trigger */ [interestfor]:focus-visible { interest-hide-delay: 0; } /* If keyboard-focused within a target of interest, or target of partial interest (these are always keyboard-triggered), the interest trigger that currently has interest or partial interest has the hide delay removed */ body:has(:target-of-interest :focus-visible, :target-of-partial-interest) [interestfor]:where(:has-interest, :has-partial-interest) { interest-hide-delay: 0; } Note: Interest delays are currently buggy, especially with unitless values. Sometimes they work, sometimes they don’t. About those pseudo-selectors, though… Basically, when navigating to an interest trigger using a keyboard or screen reader whose target contains more focusable elements, this is referred to as showing “partial” interest. (I would’ve gone with “potential interest” personally, but I digress.) When this happens, the interest target’s focusable elements actually aren’t focusable (making it easy to skip them, if needed) unless the user hits the option+up/alt+up keyboard shortcut or equivalent screen reader hotkey. There’s even a message that we can customize by targeting :target-of-partial-interest::after: :target-of-partial-interest::after { content: \"Press ⌥↑ to activate.\"; } While you probably shouldn’t change the message content (since it displays the correct keyboard shortcut for the user’s device by default), we can style it by selecting this way. The user agent also throws this in: :target-of-partial-interest { interactivity: not-keyboard-focusable; } The not-keyboard-focusable value is new, and prevents the keyboard focus (like tabindex=\"-1\" but for CSS, which is super interesting in its own right). A full breakdown because, frankly, that was a lot: :has-interest: Triggers with “mouse interest” :has-partial-interest: Triggers with “keyboard interest” :target-of-interest: Targets with mouse interest :target-of-partial-interest: Targets with keyboard interest :target-of-partial-interest::after: The message displayed when targets have keyboard interest interest-show-delay: The \u003ctime\u003e before which the interest target appears interest-hide-delay: The \u003ctime\u003e before which the interest target disappears interest-delay: Shorthand for interest-show-delay and interest-hide-delay It works with anchors, too Nothing really new here as far as what we’ve already discussed, but I find it cool that we can use anchor elements declaratively just like interest invokers: Conclusion On the surface, interest invokers are simply hover-triggered popovers, but touchscreen devices have never handled hovering well. In addition, hovering is susceptible to human-error, and we certainly don’t want to force keyboards and screen readers to tab into a minefield of focusables. There’s a lot to consider, and Open UI have done a wonderful job of ensuring that user agents do the lion’s share of it. But there’s still more to consider. For example, how exactly would we open interest targets on touchscreen devices? Long-press + “View more info” from the context menu seems to be the best approach at the moment, but that’s a tough one! And, as we’ve discussed, there’s a lot for us to consider, too, such as those delay timings and how interest invokers should be styled. What should interest triggers and targets look like when they have interest? What about the hotkey instruction? We’re talking about some new concepts here, that might require new UX conventions. Honorable mention: We’re also getting interactivity: not-keyboard-focusable out of this, which could help us to build keyboard-friendlier components with CSS. There’s a lot to love here, and I just know that people are going to create incredible tooltips and hover cards and more with this.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/03/long-hover-icon-tooltip-cursor.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eChrome 139 is experimenting with Open UI’s proposed \u003ca href=\"https://open-ui.org/components/interest-invokers.explainer/\" rel=\"noopener\"\u003eInterest Invoker API\u003c/a\u003e, which would be used to create tooltips, hover menus, hover cards, quick actions, and other types of UIs for showing more information with hover interactions. The Interest Invoker API makes these components declarative and hover-triggered, meaning that you create them with HTML, and then the web browser handles the \u003ccode\u003emouseenter\u003c/code\u003e and \u003ccode\u003emouseleave\u003c/code\u003e events for you, sans JavaScript.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou’d use it like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;a interestfor=\u0026#34;target-id\u0026#34;\u0026gt;Interest trigger\u0026lt;/a\u0026gt;\n\u0026lt;div id=\u0026#34;target-id\u0026#34; popover\u0026gt;Interest target\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIt’s not stated anywhere that they must be declared as popovers, but they \u003cem\u003edo\u003c/em\u003e bake the right accessibility hints in.\u003c/p\u003e\n\n\n\n\u003cp\u003eI want to spend a little time looking at the pieces of this feature, how they‘re used as currently proposed, and offer a few thoughts based on my experience playing with them.\u003c/p\u003e\n\n\n\n\u003cp\u003eReady to dive in?\u003c/p\u003e\n\n\n\u003ch3 id=\"the-interest-trigger\"\u003eThe interest trigger\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003cem\u003etrigger\u003c/em\u003e is what the user will hover (\u003ca href=\"https://open-ui.org/components/interest-invokers.explainer/#touchscreen\" rel=\"noopener\"\u003eor long-press on touchscreen devices\u003c/a\u003e) to reveal the interest target. I’d call it an “invoker,” but to avoid confusing it with the \u003ca href=\"https://css-tricks.com/invoker-commands-additional-ways-to-work-with-dialog-popover-and-more/\"\u003eInvoker Commands API\u003c/a\u003e (which is kind of similar), I’ll stick with “trigger” or “interest trigger” for now.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe interest trigger can be:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ea link (\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e),\u003c/li\u003e\n\n\n\n\u003cli\u003ea button (\u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e), or\u003c/li\u003e\n\n\n\n\u003cli\u003ean image map area (\u003ccode\u003e\u0026lt;area\u0026gt;\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAnd it should have the \u003ccode\u003einterestfor\u003c/code\u003e attribute whose value should reference the \u003ccode\u003eid\u003c/code\u003e of the interest target. Here are examples for each supported element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Link --\u0026gt;\n\u0026lt;a interestfor=\u0026#34;link\u0026#34;\u0026gt;Interest trigger\u0026lt;/a\u0026gt;\n\u0026lt;div id=\u0026#34;link\u0026#34; popover\u0026gt;Interest target\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- Button --\u0026gt;\n\u0026lt;button interestfor=\u0026#34;button\u0026#34;\u0026gt;Interest trigger\u0026lt;/button\u0026gt;\n\u0026lt;div id=\u0026#34;button\u0026#34; popover\u0026gt;Interest target\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- Image map --\u0026gt;\n\u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34; usemap=\u0026#34;#map\u0026#34;\u0026gt;\n\u0026lt;map name=\u0026#34;map\u0026#34;\u0026gt;\n  \u0026lt;area interestfor=\u0026#34;area\u0026#34; shape=\u0026#34;\u0026#34; coords=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\n\u0026lt;/map\u0026gt;\n\u0026lt;div id=\u0026#34;area\u0026#34; popover\u0026gt;Interest target\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIf the interest target is a \u003ccode\u003epopover\u003c/code\u003e (like it is in the examples above), then the \u003ccode\u003einterestfor\u003c/code\u003e attribute replaces the \u003ccode\u003epopovertarget\u003c/code\u003e attribute that’s normally required for declarative popovers. So, instead of this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"2\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Button --\u0026gt;\n\u0026lt;button popovertarget=\u0026#34;button\u0026#34;\u0026gt;Interest trigger\u0026lt;/button\u0026gt;\n\u0026lt;div id=\u0026#34;button\u0026#34; popover\u0026gt;Interest target\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…we’re looking at this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"2\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Button --\u0026gt;\n\u0026lt;button interestfor=\u0026#34;button\u0026#34;\u0026gt;Interest trigger\u0026lt;/button\u0026gt;\n\u0026lt;div id=\u0026#34;button\u0026#34; popover\u0026gt;Interest target\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"the-interest-target\"\u003eThe interest target\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003cdfn\u003einterest target\u003c/dfn\u003e is what’s revealed when the user hovers (or long-presses) the interest trigger. Again, this should be a \u003ccode\u003epopover\u003c/code\u003e, and it’s important to use the right type of popover because \u003ca href=\"https://css-tricks.com/clarifying-the-relationship-between-popovers-and-dialogs/\"\u003ethey have different functional and accessibility behaviors\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003epopover\u003c/code\u003e attributes that are valueless, empty, or use the \u003ccode\u003eauto\u003c/code\u003e keyword can be dismissed lightly, i.e., using the \u003ccode\u003eesc\u003c/code\u003e key, or by clicking outside of the popover. When opened, these popovers close all \u003ccode\u003ehint\u003c/code\u003e and other \u003ccode\u003eauto\u003c/code\u003e popovers (at least, the ones that aren’t nested).\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div id=\u0026#34;target-id\u0026#34; popover\u0026gt;Interest target\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- Equivalent to --\u0026gt;\n\u0026lt;div id=\u0026#34;target-id\u0026#34; popover=\u0026#34;\u0026#34;\u0026gt;Interest target\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- Equivalent to --\u0026gt;\n\u0026lt;div id=\u0026#34;target-id\u0026#34; popover=\u0026#34;auto\u0026#34;\u0026gt;Interest target\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003ehint\u003c/code\u003e popovers (the newest type of popovers) can also be dismissed lightly, but only close other \u003ccode\u003ehint\u003c/code\u003e popovers when opened:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div id=\u0026#34;target-id\u0026#34; popover=\u0026#34;hint\u0026#34;\u0026gt;Interest target\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003emanual\u003c/code\u003e popovers do their own thing. They can’t be dismissed lightly, don’t tell other popovers what to do, and we can have more than one of them open at a time. They’re \u003cem\u003esuuuper\u003c/em\u003e chill.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div id=\u0026#34;target-id\u0026#34; popover=\u0026#34;manual\u0026#34;\u0026gt;Interest target\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHowever, Open UI’s explainer and Chrome’s current implementation suggest that interest targets disappear on \u003ccode\u003emouseleave\u003c/code\u003e regardless of the type of popover we’re working with. But redefining popover behavior in this context (or any context) feels wrong to me. If the interest target’s \u003ccode\u003epopover\u003c/code\u003e attribute is set to \u003ccode\u003emanual\u003c/code\u003e, for example, shouldn’t it persist after \u003ccode\u003emouseleave\u003c/code\u003e?\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://open-ui.org/components/interest-invokers.explainer/#accessibility\" rel=\"noopener\"\u003eOpen UI discusses browsers baking the accessibility in\u003c/a\u003e depending on the popover type, which justifies interest invokers building off of popovers, but I think accessibility should depend on the content (unless overwritten using ARIA attributes) rather than the popover type.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn short, it seems like interest invokers are designed to be used with popovers but for all the wrong reasons (in my opinion anyway). That said, it’s early days still. Interest invokers are very experimental and it’s certainly possible that I’m overlooking something.\u003c/p\u003e\n\n\n\n\u003cp\u003eThey’re otherwise straightforward, which is on-brand for Open UI (look at the \u003ca href=\"https://open-ui.org/components/customizableselect/\" rel=\"noopener\"\u003eCustomizable Select\u003c/a\u003e, after all). They take commonly-used JavaScript-powered components (such as \u003ca href=\"https://open-ui.org/components/accordion.explainer/\" rel=\"noopener\"\u003eexclusive accordions\u003c/a\u003e, \u003ca href=\"https://open-ui.org/components/invokers.explainer/\" rel=\"noopener\"\u003einvoker commands\u003c/a\u003e, and yes, \u003ca href=\"https://open-ui.org/components/popover.research.explainer/\" rel=\"noopener\"\u003epopovers\u003c/a\u003e) and make them possible with declarative HTML.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat said, there are some JavaScript events that we can use, too. Let’s take a look at those.\u003c/p\u003e\n\n\n\u003ch3 id=\"interest-invoker-javascript-events\"\u003eInterest invoker JavaScript events\u003c/h3\u003e\n\n\n\u003cp\u003eWhile I imagine that you’d only need to listen for the \u003ccode\u003einterest\u003c/code\u003e and \u003ccode\u003eloseinterestevents\u003c/code\u003e for certain edge cases, JavaScript events for these new declarative HTML features are fairly standard, and they’re there should you need them:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einterestTrigger.addEventListener(\u0026#34;interest\u0026#34;, () =\u0026gt; {\n  /* User showed interest */\n});\n\ninterestTrigger.addEventListener(\u0026#34;loseinterest\u0026#34;, () =\u0026gt; {\n  /* User lost interest */\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBut what does “interest” mean, exactly? That’s worth digging into next.\u003c/p\u003e\n\n\n\u003ch3 id=\"interest-delay-and-the-css-of-it-all\"\u003eInterest delay (and the CSS of it all)\u003c/h3\u003e\n\n\n\u003cp\u003eYou’ve probably noticed that when you show or lose interest, there’s a short delay in the popover showing or hiding itself. This is extremely annoying at first, but when you actually start to build with interest invokers, you realize how necessary it is.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s the demo again, so you can try it out (in Chrome 139 or Canary for now):\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eOne problem is that if you accidentally \u003ccode\u003emouseleave\u003c/code\u003e the interest trigger and the target (which can be very easy to do when the target is too small), then it all disappears. This is even \u003cem\u003emore\u003c/em\u003e annoying, but luckily the hide delay allows you some recovery time. Similarly, the show delay offers keyboard and screen reader users the opportunity to skip the interest target, while also preventing it from being triggered accidentally with a mouse pointer.\u003c/p\u003e\n\n\n\n\u003cp\u003eHaving said that, if the interest target is unobtrusive, then removing the show delay shouldn’t cause any harm. You could also remove the hide delay for keyboard and screen reader users, who aren’t likely to “lose interest” accidentally. We can do this by setting two new CSS properties, \u003ccode\u003einterest-show-delay\u003c/code\u003e and \u003ccode\u003einterest-hide-delay\u003c/code\u003e, to \u003ccode\u003e0\u003c/code\u003e. The default is \u003ccode\u003e0.5s\u003c/code\u003e and is set on the interest trigger (but not the interest target):\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* If unobtrusive */\n.unobtrusive[interestfor] {\n  interest-show-delay: 0;\n}\n\n/* If keyboard-focused on a trigger */\n[interestfor]:focus-visible {\n  interest-hide-delay: 0;\n}\n\n/*\n  If keyboard-focused within a target of interest,\n  or target of partial interest (these are always keyboard-triggered),\n  the interest trigger that currently has interest\n  or partial interest has the hide delay removed\n*/\nbody:has(:target-of-interest :focus-visible, :target-of-partial-interest) [interestfor]:where(:has-interest, :has-partial-interest) {\n  interest-hide-delay: 0;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Interest delays are currently buggy, especially with unitless values. Sometimes they work, sometimes they don’t.\u003c/p\u003e\n\n\n\n\u003cp\u003eAbout those pseudo-selectors, though…\u003c/p\u003e\n\n\n\n\u003cp\u003eBasically, when navigating to an interest trigger using a keyboard or screen reader whose target contains more focusable elements, this is referred to as showing “partial” interest. (I would’ve gone with “potential interest” personally, but I digress.) When this happens, the interest target’s focusable elements actually aren’t focusable (making it easy to skip them, if needed) unless the user hits the \u003ckbd\u003eoption\u003c/kbd\u003e+\u003ckbd\u003eup\u003c/kbd\u003e/\u003ckbd\u003ealt\u003c/kbd\u003e+\u003ckbd\u003eup\u003c/kbd\u003e keyboard shortcut or equivalent screen reader hotkey.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere’s even a message that we can customize by targeting \u003ccode\u003e:target-of-partial-interest::after\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:target-of-partial-interest::after { \n  content: \u0026#34;Press ⌥↑ to activate.\u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWhile you probably shouldn’t change the message content (since it displays the correct keyboard shortcut for the user’s device by default), we can style it by selecting this way.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe user agent also throws \u003cem\u003ethis\u003c/em\u003e in:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:target-of-partial-interest {\n  interactivity: not-keyboard-focusable;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003enot-keyboard-focusable\u003c/code\u003e value is new, and prevents the keyboard focus (like \u003ccode\u003etabindex=\u0026#34;-1\u0026#34;\u003c/code\u003e but for CSS, which is super interesting in its own right).\u003c/p\u003e\n\n\n\n\u003cp\u003eA full breakdown because, frankly, that was \u003cem\u003ea lot\u003c/em\u003e:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e:has-interest\u003c/code\u003e:\u003c/strong\u003e Triggers with “mouse interest”\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e:has-partial-interest\u003c/code\u003e:\u003c/strong\u003e Triggers with “keyboard interest”\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e:target-of-interest\u003c/code\u003e:\u003c/strong\u003e Targets with mouse interest\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e:target-of-partial-interest\u003c/code\u003e:\u003c/strong\u003e Targets with keyboard interest\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e:target-of-partial-interest::after\u003c/code\u003e:\u003c/strong\u003e The message displayed when targets have keyboard interest\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003einterest-show-delay\u003c/code\u003e:\u003c/strong\u003e The \u003ccode\u003e\u0026lt;time\u0026gt;\u003c/code\u003e before which the interest target appears\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003einterest-hide-delay\u003c/code\u003e:\u003c/strong\u003e The \u003ccode\u003e\u0026lt;time\u0026gt;\u003c/code\u003e before which the interest target disappears\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003einterest-delay\u003c/code\u003e:\u003c/strong\u003e Shorthand for \u003ccode\u003einterest-show-delay\u003c/code\u003e and \u003ccode\u003einterest-hide-delay\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"it-works-with-anchors-too\"\u003eIt works with anchors, too\u003c/h3\u003e\n\n\n\u003cp\u003eNothing really new here as far as what we’ve already discussed, but I find it cool that we can use \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eanchor elements\u003c/a\u003e declaratively just like interest invokers:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"conclusion\"\u003eConclusion\u003c/h3\u003e\n\n\n\u003cp\u003eOn the surface, interest invokers are simply hover-triggered popovers, but touchscreen devices have never handled hovering well. In addition, hovering is susceptible to human-error, and we certainly don’t want to force keyboards and screen readers to tab into a minefield of focusables. There’s a lot to consider, and Open UI have done a wonderful job of ensuring that user agents do the lion’s share of it.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut there’s still more to consider. For example, \u003ca href=\"https://open-ui.org/components/interest-invokers.explainer/#touchscreen\" rel=\"noopener\"\u003ehow exactly would we open interest targets on touchscreen devices?\u003c/a\u003e Long-press + “View more info” from the context menu seems to be the best approach at the moment, but that’s a tough one!\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd, as we’ve discussed, there’s a lot for us to consider, too, such as those delay timings and how interest invokers should be styled. What should interest triggers and targets look like when they have interest? What about the hotkey instruction? We’re talking about some new concepts here, that might require new UX conventions.\u003c/p\u003e\n\n\n\n\u003cp\u003eHonorable mention: We’re also getting \u003ccode\u003einteractivity: not-keyboard-focusable\u003c/code\u003e out of this, which could help us to build keyboard-friendlier components with CSS.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere’s a lot to love here, and I just know that people are going to create incredible tooltips and hover cards and more with this.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2025-07-23T06:36:48-06:00",
  "modifiedTime": "2025-07-23T06:36:51-06:00"
}
