{
  "id": "ffd0a7cd-8e45-4bf8-8e43-419b8df74c6e",
  "title": "A CSS-Only Star Rating Component and More! (Part 1)",
  "link": "https://css-tricks.com/a-css-only-star-rating-component-and-more-part-1/",
  "description": "In this article, you'll learn how to make a full-on star rating component out of nothing but a single input element and vanilla CSS. A CSS-Only Star Rating Component and More! (Part 1) originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Temani Afif",
  "published": "Fri, 28 Feb 2025 14:03:32 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "attributes",
    "borders",
    "forms"
  ],
  "byline": "Temani Afif",
  "length": 14525,
  "excerpt": "In this article, you'll learn how to make a full-on star rating component out of nothing but a single input element and vanilla CSS.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Creating a star rating component is a classic exercise in web development. It has been done and re-done many times using different techniques. We usually need a small amount of JavaScript to pull it together, but what about a CSS-only implementation? Yes, it is possible! Here is a demo of a CSS-only star rating component. You can click to update the rating. Cool, right? In addition to being CSS-only, the HTML code is nothing but a single element: \u003cinput type=\"range\" min=\"1\" max=\"5\"\u003e An input range element is the perfect candidate here since it allows a user to select a numeric value between two boundaries (the min and max). Our goal is to style that native element and transform it into a star rating component without additional markup or any script! We will also create more components at the end, so follow along. Note: This article will only focus on the CSS part. While I try my best to consider UI, UX, and accessibility aspects, my component is not perfect. It may have some drawbacks (bugs, accessibility issues, etc), so please use it with caution. The \u003cinput\u003e element You probably know it but styling native elements such as inputs is a bit tricky due to all the default browser styles and also the different internal structures. If, for example, you inspect the code of an input range you will see a different HTML between Chrome (or Safari, or Edge) and Firefox. Luckily, we have some common parts that I will rely on. I will target two different elements: the main element (the input itself) and the thumb element (the one you slide with your mouse to update the value). Our CSS will mainly look like this: input[type=\"range\"] { /* styling the main element */ } input[type=\"range\" i]::-webkit-slider-thumb { /* styling the thumb for Chrome, Safari and Edge */ } input[type=\"range\"]::-moz-range-thumb { /* styling the thumb for Firefox */ } The only drawback is that we need to repeat the styles of the thumb element twice. Don’t try to do the following: input[type=\"range\" i]::-webkit-slider-thumb, input[type=\"range\"]::-moz-range-thumb { /* styling the thumb */ } This doesn’t work because the whole selector is invalid. Chrome \u0026 Co. don’t understand the ::-moz-* part and Firefox doesn’t understand the ::-webkit-* part. For the sake of simplicity, I will use the following selector for this article: input[type=\"range\"]::thumb { /* styling the thumb */ } But the demo contains the real selectors with the duplicated styles. Enough introduction, let’s start coding! Styling the main element (the star shape) We start by defining the size: input[type=\"range\"] { --s: 100px; /* control the size*/ height: var(--s); aspect-ratio: 5; appearance: none; /* remove the default browser styles */ } If we consider that each star is placed within a square area, then for a 5-star rating we need a width equal to five times the height, hence the use of aspect-ratio: 5. That 5 value is also the value defined as the max attribute for the input element. \u003cinput type=\"range\" min=\"1\" max=\"5\"\u003e So, we can rely on the newly enhanced attr() function (Chrome-only at the moment) to read that value instead of manually defining it! input[type=\"range\"] { --s: 100px; /* control the size*/ height: var(--s); aspect-ratio: attr(max type(\u003cnumber\u003e)); appearance: none; /* remove the default browser styles */ } Now you can control the number of stars by simply adjusting the max attribute. This is great because the max attribute is also used by the browser internally, so updating that value will control our implementation as well as the browser’s behavior. This enhanced version of attr() is only available in Chrome for now so all my demos will contain a fallback to help with unsupported browsers. The next step is to use a CSS mask to create the stars. We need the shape to repeat five times (or more depending on the max value) so the mask size should be equal to var(--s) var(--s) or var(--s) 100% or simply var(--s) since by default the height will be equal to 100%. input[type=\"range\"] { --s: 100px; /* control the size*/ height: var(--s); aspect-ratio: attr(max type(\u003cnumber\u003e)); appearance: none; /* remove the default browser styles */ mask-image: /* ... */; mask-size: var(--s); } What about the mask-image property you might ask? I think it’s no surprise that I tell you it will require a few gradients, but it could also be SVG instead. This article is about creating a star-rating component but I would like to keep the star part kind of generic so you can easily replace it with any shape you want. That’s why I say “and more” in the title of this post. We will see later how using the same code structure we can get a variety of different variations. Here is a demo showing two different implementations for the star. One is using gradients and the other is using an SVG. In this case, the SVG implementation looks cleaner and the code is also shorter but keep both approaches in your back pocket because a gradient implementation can do a better job in some situations. Styling the thumb (the selected value) Let’s now focus on the thumb element. Take the last demo then click the stars and notice the position of the thumb. The good thing is that the thumb is always within the area of a given star for all the values (from min to max), but the position is different for each star. It would be good if the position is always the same, regardless of the value. Ideally, the thumb should always be at the center of the stars for consistency. Here is a figure to illustrate the position and how to update it. The lines are the position of the thumb for each value. On the left, we have the default positions where the thumb goes from the left edge to the right edge of the main element. On the right, if we restrict the position of the thumb to a smaller area by adding some spaces on the sides, we get much better alignment. That space is equal to half the size of one star, or var(--s)/2. We can use padding for this: input[type=\"range\"] { --s: 100px; /* control the size */ height: var(--s); aspect-ratio: attr(max type(\u003cnumber\u003e)); padding-inline: calc(var(--s) / 2); box-sizing: border-box; appearance: none; /* remove the default browser styles */ mask-image: ...; mask-size: var(--s); } It’s better but not perfect because I am not accounting for the thumb size, which means we don’t have true centering. It’s not an issue because I will make the size of the thumb very small with a width equal to 1px. input[type=\"range\"]::thumb { width: 1px; height: var(--s); appearance: none; /* remove the default browser styles */ } The thumb is now a thin line placed at the center of the stars. I am using a red color to highlight the position but in reality, I don’t need any color because it will be transparent. You may think we are still far from the final result but we are almost done! One property is missing to complete the puzzle: border-image. The border-image property allows us to draw decorations outside an element thanks to its outset feature. For this reason, I made the thumb small and transparent. The coloration will be done using border-image. I will use a gradient with two solid colors as the source: linear-gradient(90deg, gold 50%, grey 0); And we write the following: border-image: linear-gradient(90deg, gold 50%, grey 0) fill 0 // 0 100px; The above means that we extend the area of the border-image from each side of the element by 100px and the gradient will fill that area. In other words, each color of the gradient will cover half of that area, which is 100px. Do you see the logic? We created a kind of overflowing coloration on each side of the thumb — a coloration that will logically follow the thumb so each time you click a star it slides into place! Now instead of 100px let’s use a very big value: We are getting close! The coloration is filling all the stars but we don’t want it to be in the middle but rather across the entire selected star. For this, we update the gradient a bit and instead of using 50%, we use 50% + var(--s)/2. We add an offset equal to half the width of a star which means the first color will take more space and our star rating component is perfect! We can still optimize the code a little where instead of defining a height for the thumb, we keep it 0 and we consider the vertical outset of border-image to spread the coloration. input[type=\"range\"]::thumb{ width: 1px; border-image: linear-gradient(90deg, gold calc(50% + var(--s) / 2), grey 0) fill 0 // var(--s) 500px; appearance: none; } We can also write the gradient differently using a conic gradient instead: input[type=\"range\"]::thumb{ width: 1px; border-image: conic-gradient(at calc(50% + var(--s) / 2), grey 50%, gold 0) fill 0 // var(--s) 500px; appearance: none; } I know that the syntax of border-image is not easy to grasp and I went a bit fast with the explanation. But I have a very detailed article over at Smashing Magazine where I dissect that property with a lot of examples that I invite you to read for a deeper dive into how the property works. The full code of our component is this: \u003cinput type=\"range\" min=\"1\" max=\"5\"\u003e input[type=\"range\"] { --s: 100px; /* control the size*/ height: var(--s); aspect-ratio: attr(max type(\u003cnumber\u003e)); padding-inline: calc(var(--s) / 2); box-sizing: border-box; appearance: none; mask-image: /* ... */; /* either an SVG or gradients */ mask-size: var(--s); } input[type=\"range\"]::thumb { width: 1px; border-image: conic-gradient(at calc(50% + var(--s) / 2), grey 50%, gold 0) fill 0//var(--s) 500px; appearance: none; } That’s all! A few lines of CSS code and we have a nice rating star component! Half-Star Rating What about having a granularity of half a star as a rating? It’s something common and we can do it with the previous code by making a few adjustments. First, we update the input element to increment in half steps instead of full steps: \u003cinput type=\"range\" min=\".5\" step=\".5\" max=\"5\"\u003e By default, the step is equal to 1 but we can update it to .5 (or any value) then we update the min value to .5 as well. On the CSS side, we change the padding from var(--s)/2 to var(--s)/4, and we do the same for the offset inside the gradient. input[type=\"range\"] { --s: 100px; /* control the size*/ height: var(--s); aspect-ratio: attr(max type(\u003cnumber\u003e)); padding-inline: calc(var(--s) / 4); box-sizing: border-box; appearance: none; mask-image: ...; /* either SVG or gradients */ mask-size: var(--s); } input[type=\"range\"]::thumb{ width: 1px; border-image: conic-gradient(at calc(50% + var(--s) / 4),grey 50%, gold 0) fill 0 // var(--s) 500px; appearance: none; } The difference between the two implementations is a factor of one-half which is also the step value. That means we can use attr() and create a generic code that works for both cases. input[type=\"range\"] { --s: 100px; /* control the size*/ --_s: calc(attr(step type(\u003cnumber\u003e),1) * var(--s) / 2); height: var(--s); aspect-ratio: attr(max type(\u003cnumber\u003e)); padding-inline: var(--_s); box-sizing: border-box; appearance: none; mask-image: ...; /* either an SVG or gradients */ mask-size: var(--s); } input[type=\"range\"]::thumb{ width: 1px; border-image: conic-gradient(at calc(50% + var(--_s)),gold 50%,grey 0) fill 0//var(--s) 500px; appearance: none; } Here is a demo where modifying the step is all that you need to do to control the granularity. Don’t forget that you can also control the number of stars using the max attribute. Using the keyboard to adjust the rating As you may know, we can adjust the value of an input range slider using a keyboard, so we can control the rating using the keyboard as well. That’s a good thing but there is a caveat. Due to the use of the mask property, we no longer have the default outline that indicates keyboard focus which is an accessibility concern for those who rely on keyboard input. For a better user experience and to make the component more accessible, it’s good to display an outline on focus. The easiest solution is to add an extra wrapper: \u003cspan\u003e \u003cinput type=\"range\" min=\"1\" max=\"5\"\u003e \u003c/span\u003e That will have an outline when the input inside has focus: span:has(:focus-visible) { outline: 2px solid; } Try to use your keyboard in the below example to adjust both ratings: Another idea is to consider a more complex mask configuration that keeps a small area around the element visible to show the outline: mask: /* ... */ 0/var(--s), conic-gradient(from 90deg at 2px 2px,#0000 25%,#000 0) 0 0/calc(100% - 2px) calc(100% - 2px); I prefer using this last method because it maintains the single-element implementation but maybe your HTML structure allows you to add focus on an upper element and you can keep the mask configuration simple. It totally depends! More examples! As I said earlier, what we are making is more than a star rating component. You can easily update the mask value to use any shape you want. Here is an example where I am using an SVG of a heart instead of a star. Why not butterflies? This time I am using a PNG image as a mask. If you are not comfortable using SVG or gradients you can use a transparent image instead. As long as you have an SVG, a PNG, or gradients, there is no limit on what you can do with this as far as shapes go. We can go even further into the customization and create a volume control component like below: I am not repeating a specific shape in that last example, but am using a complex mask configuration to create a signal shape. Conclusion We started with a star rating component and ended with a bunch of cool examples. The title could have been “How to style an input range element” because this is what we did. We upgraded a native component without any script or extra markup, and with only a few lines of CSS. What about you? Can you think about another fancy component using the same code structure? Share your example in the comment section! Article series A CSS-Only Star Rating Component and More! (Part 1) A CSS-Only Star Rating Component and More! (Part 2) — Coming March 7!",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/07/star-pattern.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eCreating a star rating component is a classic exercise in web development. It has been \u003ca href=\"https://css-tricks.com/star-ratings/\"\u003edone\u003c/a\u003e and \u003ca href=\"https://css-tricks.com/five-methods-for-five-star-ratings/\"\u003ere-done\u003c/a\u003e many times using different techniques. We usually need a small amount of JavaScript to pull it together, but what about a CSS-only implementation? Yes, it is possible!\u003c/p\u003e\n\n\n\n\u003cp\u003eHere is a demo of \u003ca href=\"https://css-tip.com/star-rating/\" rel=\"noopener\"\u003ea CSS-only star rating component\u003c/a\u003e. You can click to update the rating.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eCool, right? In addition to being CSS-only, the HTML code is nothing but a single element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;1\u0026#34; max=\u0026#34;5\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAn input range element is the perfect candidate here since it allows a user to select a numeric value between two boundaries (the \u003ccode\u003emin\u003c/code\u003e and \u003ccode\u003emax\u003c/code\u003e). Our goal is to style that native element and transform it into a star rating component without additional markup or any script! We will also create more components at the end, so follow along.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e This article will only focus on the CSS part. While I try my best to consider UI, UX, and accessibility aspects, my component is not perfect. It may have some drawbacks (bugs, accessibility issues, etc), so please use it with caution.\u003c/p\u003e\n\n\n\u003ch3 id=\"the-input-element\"\u003eThe \u003ccode\u003e\u0026lt;input\u0026gt;\u003c/code\u003e element\u003c/h3\u003e\n\n\n\u003cp\u003eYou probably know it but styling native elements such as inputs is a bit tricky due to all the default browser styles and also the different internal structures. If, for example, you inspect the code of an input range you will see a different HTML between Chrome (or Safari, or Edge) and Firefox.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"758\" height=\"349\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/s_6EC2E918F9FF544DE42522C8E1E743BEA7AF9A2CDD6E60C3751AA633089197F0_1739696982022_image.png?resize=758%2C349\u0026amp;ssl=1\" alt=\"DevTools inspecting an input element, showing the shadow root element parts.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/s_6EC2E918F9FF544DE42522C8E1E743BEA7AF9A2CDD6E60C3751AA633089197F0_1739696982022_image.png?w=758\u0026amp;ssl=1 758w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/s_6EC2E918F9FF544DE42522C8E1E743BEA7AF9A2CDD6E60C3751AA633089197F0_1739696982022_image.png?resize=300%2C138\u0026amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eLuckily, we have some common parts that I will rely on. I will target two different elements: the \u003cstrong\u003emain element\u003c/strong\u003e (the input itself) and the \u003cstrong\u003ethumb element\u003c/strong\u003e (the one you slide with your mouse to update the value).\u003c/p\u003e\n\n\n\n\u003cp\u003eOur CSS will mainly look like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;] {\n  /* styling the main element */\n}\n\ninput[type=\u0026#34;range\u0026#34; i]::-webkit-slider-thumb {\n  /* styling the thumb for Chrome, Safari and Edge */\n}\n\ninput[type=\u0026#34;range\u0026#34;]::-moz-range-thumb {\n  /* styling the thumb for Firefox */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe only drawback is that we need to repeat the styles of the thumb element twice. Don’t try to do the following:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34; i]::-webkit-slider-thumb,\ninput[type=\u0026#34;range\u0026#34;]::-moz-range-thumb {\n  /* styling the thumb */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis doesn’t work because the whole selector is invalid. Chrome \u0026amp; Co. don’t understand the \u003ccode\u003e::-moz-*\u003c/code\u003e part and Firefox doesn’t understand the \u003ccode\u003e::-webkit-*\u003c/code\u003e part. For the sake of simplicity, I will use the following selector for this article:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;]::thumb {\n  /* styling the thumb */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBut the demo contains the real selectors with the duplicated styles. Enough introduction, let’s start coding!\u003c/p\u003e\n\n\n\u003ch3 id=\"styling-the-main-element-the-star-shape-\"\u003eStyling the main element (the star shape)\u003c/h3\u003e\n\n\n\u003cp\u003eWe start by defining the size:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;] {\n  --s: 100px; /* control the size*/\n  \n  height: var(--s);\n  aspect-ratio: 5;\n  \n  appearance: none; /* remove the default browser styles */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIf we consider that each star is placed within a square area, then for a 5-star rating we need a width equal to five times the height, hence the use of \u003ccode\u003easpect-ratio: 5\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThat \u003ccode\u003e5\u003c/code\u003e value is also the value defined as the \u003ccode\u003emax\u003c/code\u003e attribute for the input element.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;1\u0026#34; max=\u0026#34;5\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSo, we can rely on \u003ca href=\"https://developer.chrome.com/blog/advanced-attr\" rel=\"noopener\"\u003ethe newly enhanced \u003ccode\u003eattr()\u003c/code\u003e function\u003c/a\u003e (Chrome-only at the moment) to read that value instead of manually defining it!\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"5\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;] {\n  --s: 100px; /* control the size*/\n  \n  height: var(--s);\n  aspect-ratio: attr(max type(\u0026lt;number\u0026gt;));\n  \n  appearance: none; /* remove the default browser styles */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow you can control the number of stars by simply adjusting the \u003ccode\u003emax\u003c/code\u003e attribute. This is great because the \u003ccode\u003emax\u003c/code\u003e attribute is also used by the browser internally, so updating that value will control our implementation as well as the browser’s behavior.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis enhanced version of \u003ccode\u003eattr()\u003c/code\u003e is \u003ca href=\"https://www.bram.us/2025/01/20/css-attr-gets-an-upgrade/\" rel=\"noopener\"\u003eonly available in Chrome for now\u003c/a\u003e so all my demos will contain a fallback to help with unsupported browsers.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe next step is to use a CSS \u003ccode\u003emask\u003c/code\u003e to create the stars. We need the shape to repeat five times (or more depending on the \u003ccode\u003emax\u003c/code\u003e value) so the mask size should be equal to \u003ccode\u003evar(--s) var(--s)\u003c/code\u003e or \u003ccode\u003evar(--s) 100%\u003c/code\u003e or simply \u003ccode\u003evar(--s)\u003c/code\u003e since by default the height will be equal to \u003ccode\u003e100%\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"9,10\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;] {  \n  --s: 100px; /* control the size*/\n  \n  height: var(--s);\n  aspect-ratio: attr(max type(\u0026lt;number\u0026gt;));\n  \n  appearance: none; /* remove the default browser styles */\n\n  mask-image: /* ... */;\n  mask-size: var(--s);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhat about the \u003ca href=\"https://css-tricks.com/almanac/properties/m/mask-image/\"\u003e\u003ccode\u003emask-image\u003c/code\u003e\u003c/a\u003e property you might ask? I think it’s no surprise that I tell you it will require a few gradients, but it could also be SVG instead. This article is about creating a star-rating component but I would like to keep the star part kind of generic so you can easily replace it with any shape you want. That’s why I say “and more” in the title of this post. We will see later how using the same code structure we can get a variety of different variations.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere is a demo showing two different implementations for the star. One is using gradients and the other is using an SVG.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIn this case, the SVG implementation looks cleaner and the code is also shorter but keep both approaches in your back pocket because a gradient implementation can do a better job in some situations.\u003c/p\u003e\n\n\n\u003ch3 id=\"styling-the-thumb-the-selected-value-\"\u003eStyling the thumb (the selected value)\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s now focus on the thumb element. Take the last demo then click the stars and notice the position of the thumb.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe good thing is that the thumb is always within the area of a given star for all the values (from \u003ccode\u003emin\u003c/code\u003e to \u003ccode\u003emax\u003c/code\u003e), but the position is different for each star. It would be good if the position is always the same, regardless of the value. Ideally, the thumb should always be at the center of the stars for consistency.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere is a figure to illustrate the position and how to update it.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1130\" height=\"382\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/s_6EC2E918F9FF544DE42522C8E1E743BEA7AF9A2CDD6E60C3751AA633089197F0_1739704873835_image.png?resize=1130%2C382\u0026amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/s_6EC2E918F9FF544DE42522C8E1E743BEA7AF9A2CDD6E60C3751AA633089197F0_1739704873835_image.png?w=1130\u0026amp;ssl=1 1130w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/s_6EC2E918F9FF544DE42522C8E1E743BEA7AF9A2CDD6E60C3751AA633089197F0_1739704873835_image.png?resize=300%2C101\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/s_6EC2E918F9FF544DE42522C8E1E743BEA7AF9A2CDD6E60C3751AA633089197F0_1739704873835_image.png?resize=1024%2C346\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/s_6EC2E918F9FF544DE42522C8E1E743BEA7AF9A2CDD6E60C3751AA633089197F0_1739704873835_image.png?resize=768%2C260\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe lines are the position of the thumb for each value. On the left, we have the default positions where the thumb goes from the left edge to the right edge of the main element. On the right, if we restrict the position of the thumb to a smaller area by adding some spaces on the sides, we get much better alignment. That space is equal to half the size of one star, or \u003ccode\u003evar(--s)/2\u003c/code\u003e. We can use padding for this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"6,7\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;] {  \n  --s: 100px; /* control the size */\n  \n  height: var(--s);\n  aspect-ratio: attr(max type(\u0026lt;number\u0026gt;));\n  padding-inline: calc(var(--s) / 2);\n  box-sizing: border-box;\n  \n  appearance: none; /* remove the default browser styles */\n\n  mask-image: ...;\n  mask-size: var(--s);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIt’s better but not perfect because I am not accounting for the thumb size, which means we don’t have true centering. It’s not an issue because I will make the size of the thumb very small with a width equal to \u003ccode\u003e1px\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;]::thumb {\n  width: 1px;\n  height: var(--s);  \n\n  appearance: none; /* remove the default browser styles */ \n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe thumb is now a thin line placed at the center of the stars. I am using a red color to highlight the position but in reality, I don’t need any color because it will be transparent.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou may think we are still far from the final result but we are almost done! One property is missing to complete the puzzle: \u003ca href=\"https://css-tricks.com/almanac/properties/b/border-image/\"\u003e\u003ccode\u003eborder-image\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eborder-image\u003c/code\u003e property allows us to draw decorations outside an element thanks to its outset feature. For this reason, I made the thumb small and transparent. The coloration will be done using \u003ccode\u003eborder-image\u003c/code\u003e. I will use a gradient with two solid colors as the source:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003elinear-gradient(90deg, gold 50%, grey 0);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd we write the following:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image: linear-gradient(90deg, gold 50%, grey 0) fill 0 // 0 100px;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe above means that we extend the area of the \u003ccode\u003eborder-image\u003c/code\u003e from each side of the element by \u003ccode\u003e100px\u003c/code\u003e and the gradient will fill that area. In other words, each color of the gradient will cover half of that area, which is \u003ccode\u003e100px\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eDo you see the logic? We created a kind of overflowing coloration on each side of the thumb — a coloration that will logically follow the thumb so each time you click a star it slides into place!\u003c/p\u003e\n\n\n\n\u003cp\u003eNow instead of \u003ccode\u003e100px\u003c/code\u003e let’s use a very big value:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWe are getting close! The coloration is filling all the stars but we don’t want it to be in the middle but rather across the entire selected star. For this, we update the gradient a bit and instead of using \u003ccode\u003e50%\u003c/code\u003e, we use \u003ccode\u003e50% + var(--s)/2\u003c/code\u003e. We add an offset equal to half the width of a star which means the first color will take more space and our star rating component is perfect!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWe can still optimize the code a little where instead of defining a height for the thumb, we keep it \u003ccode\u003e0\u003c/code\u003e and we consider the vertical outset of \u003ccode\u003eborder-image\u003c/code\u003e to spread the coloration.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;]::thumb{\n  width: 1px;\n  border-image: \n    linear-gradient(90deg, gold calc(50% + var(--s) / 2), grey 0)\n    fill 0 // var(--s) 500px;\n  appearance: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can also write the gradient differently using a conic gradient instead:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;]::thumb{\n  width: 1px;\n  border-image: \n    conic-gradient(at calc(50% + var(--s) / 2), grey 50%, gold 0)\n    fill 0 // var(--s) 500px;\n  appearance: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI know that the syntax of \u003ccode\u003eborder-image\u003c/code\u003e is not easy to grasp and I went a bit fast with the explanation. \u003ca href=\"https://www.smashingmagazine.com/2024/01/css-border-image-property/\" rel=\"noopener\"\u003eBut I have a very detailed article over at Smashing Magazine\u003c/a\u003e where I dissect that property with a lot of examples that I invite you to read for a deeper dive into how the property works.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe full code of our component is this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;1\u0026#34; max=\u0026#34;5\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;] {  \n  --s: 100px; /* control the size*/\n  \n  height: var(--s);\n  aspect-ratio: attr(max type(\u0026lt;number\u0026gt;));\n  padding-inline: calc(var(--s) / 2); \n  box-sizing: border-box; \n  appearance: none; \n  mask-image: /* ... */; /* either an SVG or gradients */\n  mask-size: var(--s);\n}\n\ninput[type=\u0026#34;range\u0026#34;]::thumb {\n  width: 1px;\n  border-image: \n    conic-gradient(at calc(50% + var(--s) / 2), grey 50%, gold 0)\n    fill 0//var(--s) 500px;\n  appearance: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat’s all! A few lines of CSS code and we have a nice rating star component!\u003c/p\u003e\n\n\n\u003ch3 id=\"half-star-rating\"\u003eHalf-Star Rating\u003c/h3\u003e\n\n\n\u003cp\u003eWhat about having a granularity of half a star as a rating? It’s something common and we can do it with the previous code by making a few adjustments.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, we update the input element to increment in half \u003ccode\u003estep\u003c/code\u003es instead of full steps:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;.5\u0026#34; step=\u0026#34;.5\u0026#34; max=\u0026#34;5\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBy default, the step is equal to \u003ccode\u003e1\u003c/code\u003e but we can update it to \u003ccode\u003e.5\u003c/code\u003e (or any value) then we update the \u003ccode\u003emin\u003c/code\u003e value to \u003ccode\u003e.5\u003c/code\u003e as well. On the CSS side, we change the padding from \u003ccode\u003evar(--s)/2\u003c/code\u003e to \u003ccode\u003evar(--s)/4\u003c/code\u003e, and we do the same for the offset inside the gradient.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"6,16\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;] {  \n  --s: 100px; /* control the size*/\n  \n  height: var(--s);\n  aspect-ratio: attr(max type(\u0026lt;number\u0026gt;));\n  padding-inline: calc(var(--s) / 4); \n  box-sizing: border-box; \n  appearance: none; \n  mask-image: ...; /* either SVG or gradients */\n  mask-size: var(--s);\n}\n\ninput[type=\u0026#34;range\u0026#34;]::thumb{\n  width: 1px;\n  border-image: \n    conic-gradient(at calc(50% + var(--s) / 4),grey 50%, gold 0)\n    fill 0 // var(--s) 500px;\n  appearance: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe difference between the two implementations is a factor of one-half which is also the \u003ccode\u003estep\u003c/code\u003e value. That means we can use \u003ccode\u003eattr()\u003c/code\u003e and create a generic code that works for both cases.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"4\"\u003e\u003ccode markup=\"tt\"\u003einput[type=\u0026#34;range\u0026#34;] {  \n  --s: 100px; /* control the size*/\n  \n  --_s: calc(attr(step type(\u0026lt;number\u0026gt;),1) * var(--s) / 2);\n  height: var(--s);\n  aspect-ratio: attr(max type(\u0026lt;number\u0026gt;));\n  padding-inline: var(--_s);\n  box-sizing: border-box; \n  appearance: none; \n  mask-image: ...; /* either an SVG or gradients */\n  mask-size: var(--s);\n}\n\ninput[type=\u0026#34;range\u0026#34;]::thumb{\n  width: 1px;\n  border-image: \n    conic-gradient(at calc(50% + var(--_s)),gold 50%,grey 0)\n    fill 0//var(--s) 500px;\n  appearance: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHere is a demo where modifying the step is all that you need to do to control the granularity. Don’t forget that you can also control the number of stars using the \u003ccode\u003emax\u003c/code\u003e attribute.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"using-the-keyboard-to-adjust-the-rating\"\u003eUsing the keyboard to adjust the rating\u003c/h3\u003e\n\n\n\u003cp\u003eAs you may know, we can adjust the value of an input range slider using a keyboard, so we can control the rating using the keyboard as well. That’s a good thing but there is a caveat. Due to the use of the \u003ccode\u003emask\u003c/code\u003e property, we no longer have the default outline that indicates keyboard focus which is an accessibility concern for those who rely on keyboard input.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor a better user experience and to make the component more accessible, it’s good to display an outline on focus. The easiest solution is to add an extra wrapper:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;span\u0026gt;\n  \u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;1\u0026#34; max=\u0026#34;5\u0026#34;\u0026gt;\n\u0026lt;/span\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat will have an outline when the input inside has focus:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003espan:has(:focus-visible) {\n  outline: 2px solid;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTry to use your keyboard in the below example to adjust both ratings:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAnother idea is to consider a more complex \u003ccode\u003emask\u003c/code\u003e configuration that keeps a small area around the element visible to show the outline:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003emask: \n  /* ... */ 0/var(--s),\n  conic-gradient(from 90deg at 2px 2px,#0000 25%,#000 0) \n   0 0/calc(100% - 2px) calc(100% - 2px);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI prefer using this last method because it maintains the single-element implementation but maybe your HTML structure allows you to add focus on an upper element and you can keep the mask configuration simple. It totally depends!\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"more-examples-\"\u003eMore examples!\u003c/h3\u003e\n\n\n\u003cp\u003eAs I said earlier, what we are making is more than a star rating component. You can easily update the mask value to use any shape you want.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere is an example where I am using an SVG of a heart instead of a star.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWhy not butterflies?\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis time I am using a PNG image as a mask. If you are not comfortable using SVG or gradients you can use a transparent image instead. As long as you have an SVG, a PNG, or gradients, there is no limit on what you can do with this as far as shapes go.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can go even further into the customization and create a \u003ca href=\"https://css-tip.com/volume-control/\" rel=\"noopener\"\u003evolume control component\u003c/a\u003e like below:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eI am not repeating a specific shape in that last example, but am using a complex \u003ccode\u003emask\u003c/code\u003e configuration to create \u003ca href=\"https://css-shape.com/signal/\" rel=\"noopener\"\u003ea signal shape\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"conclusion\"\u003eConclusion\u003c/h3\u003e\n\n\n\u003cp\u003eWe started with a star rating component and ended with a bunch of cool examples. The title could have been “How to style an input range element” because this is what we did. We upgraded a native component without any script or extra markup, and with only a few lines of CSS.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhat about you? Can you think about another fancy component using the same code structure? Share your example in the comment section!\u003c/p\u003e\n\n\n\u003ch4 id=\"article-series\"\u003eArticle series\u003c/h4\u003e\n\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/a-css-only-star-rating-component-and-more-part-1/\"\u003eA CSS-Only Star Rating Component and More! (Part 1)\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eA CSS-Only Star Rating Component and More! (Part 2) — \u003cem\u003eComing March 7!\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2025-02-28T07:03:32-07:00",
  "modifiedTime": "2025-02-28T13:18:49-07:00"
}
