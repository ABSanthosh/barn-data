{
  "id": "39e1ca81-cd1f-478f-aa99-17c8afdffab6",
  "title": "CSSWG Minutes Telecon (2024-12-04): Just Use Grid vs. Display: Masonry",
  "link": "https://css-tricks.com/csswg-minutes-telecon-2024-12-04-just-use-grid-vs-display-masonry/",
  "description": "The CSSWG met to try and finally squash a debate that has been going on for five years: whether Masonry should be a part of Grid or a separate system. We've got coverage of both presentations for ya. CSSWG Minutes Telecon (2024-12-04): Just Use Grid vs. Display: Masonry originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Juan Diego Rodríguez",
  "published": "Tue, 10 Dec 2024 16:27:32 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "csswg",
    "grid",
    "masonry",
    "news"
  ],
  "byline": "Juan Diego Rodríguez",
  "length": 11434,
  "excerpt": "The CSSWG met to try and finally squash a debate that has been going on for five years: whether Masonry should be a part of Grid or a separate system. We've got coverage of both presentations for ya.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "The CSS Working Group (CSSWG) meets weekly (or close to it) to discuss and quickly resolve issues from their GitHub that would otherwise be lost in the back-and-forth of forum conversation. While each meeting brings interesting conversation, this past Wednesday (December 4th) was special. The CSSWG met to try and finally squash a debate that has been going on for five years: whether Masonry should be a part of Grid or a separate system. I’ll try to summarize the current state of the debate, but if you are looking for the long version, I recommend reading CSS Masonry \u0026 CSS Grid by Geoff and Choosing a Masonry Syntax in CSS by Miriam Suzanne. In 2017, it was frequently asked whether Grid could handle masonry layouts; layouts where the columns (or the rows) could hold unevenly sized items without gaps in between. While this is just one of several possibilities with masonry, you can think about the layout popularized by Pinterest: In 2020, Firefox released a prototype in which masonry was integrated into the CSS Grid layout module. The main voice against it was Rachel Andrew, arguing that it should be its own, separate thing. Since then, the debate has escalated with two proposals from Apple and Google, arguing for and against a grid-integrated syntax, respectively. There were some technical worries against a grid-masonry implementation that were since resolved. What you have to know is this: right now, it’s a matter of syntax. To be specific, which syntax is a. is easier to learn for authors and b. how might this decision impact possible future developments in one or both models (or CSS in general). In the middle, the W3C Technical Architecture Group (TAG) was asked for input on the issue which has prompted an effort to unify the two proposals. Both sides have brought strong arguments to the table over a series of posts, and in the following meeting, they were asked to lay those arguments once again in a presentation, with the hope of reaching a consensus. Remember that you can subscribe and read the full minutes on W3C.org The Battle of PowerPoints Alison Maher representing Google and an advocate of implementing Masonry as a new display value, opened the meeting with a presentation. The main points were: Several properties behave differently between masonry and grid. Better defaults when setting display: masonry, something that Rachel Andrew recently argued for. There was an argument against display: masonry since fallbacks would be more lengthy to implement, whereas in a grid-integrated the fallback to grid is already there. Alison Maher refutes this since “needing one is a temporary problem, so [we] should focus on the future,” and that “authors should make explicit fallback, to avoid surprises.” “Positioning in masonry is simpler than grid, it’s only placed in 1 axis instead of 2.” Shorthands are also better: “Grid shorthand is complicated, hard to use. Masonry shorthand is easier because don’t need to remember the order.” “Placement works differently in grid vs masonry” and “alignment is also very different” There will be “other changes for submasonry/subgrid that will lead to divergences.” “Integrating masonry into grid will lead to spec bloat, will be harder to teach, and lead to developer confusion.” alisonmaher: “Conclusion: masonry should be a separate display type” Jen Simmons, representing the WebKit team and advocate of the “Just Use Grid” approach followed with another presentation. On this side, the main points were: Author learning could be skewed since “a new layout type creates a separate tool with separate syntax that’s similar but not the same as what exists […]. They’re familiar but not quite the same” The Chrome proposal would add around 10 new properties. “We don’t believe there’s a compelling argument to add so many new properties to CSS.” “Chromium argues that their new syntax is more understandable. We disagree, just use grid-auto-flow“ “When you layout rows in grid, template syntax is a bit different — you stack the template names to physically diagram the names for the rows. Just Use Grid re-uses this syntax exactly; but new masonry layout uses the column syntax for rows” “Other difference is the auto-flow — grid’s indicates the primary fill direction, Chrome believes this doesn’t make sense and changed it to match the orientation of lines” “Chrome argues that new display type allows better defaults — but the defaults propose aren’t good […] it doesn’t quite work as easily as claimed [see article] requires deep understanding of autosizing” “Easier to switch, e.g. at breakpoints or progressive enhancement” “Follows CSS design principles to re-use what already exists” The TAG review After two presentations with compelling arguments, Lea Verou (also a member of the TAG) followed with their input. lea: We did a TAG review on this. My opinion is fully reflected there. I think the arguments WebKit team makes are compelling. We thought not only should masonry be part of grid, but should go further. A lot of arguments for integrating is that “grid is too hard”. In that case we should make grid things easier. Complex things are possible, but simple things are not so easy. Big part of Google’s argument is defaults, but we could just have smarter defaults — there is precedent for this in CSS if we decided that would help ergonomics We agree that switching between grid vs. masonry is common. Grid might be a slightly better fallback than nothing, but minor argument because people can use @supports. Introducing all these new properties increasing the API surfaces that authors need to learn. Less they can port over. Even if we say we will be disciplined, experience shows that we won’t. Even if not intentional, accidental. DRY – don’t have multiple sources of truth One of arguments against masonry in grid is that grids are 2D, but actually in graphic design grids were often 1D. I agree that most masonry use cases need simpler grids than general grid use cases, but that means we should make those grids easier to define for both grid and masonry. The more we looked into this, we realize there are 3 different layout modes that give you 2D arrangement of children. We recommended not just make masonry part of grid, but find ways of integrating what we already have better could we come up with a shorthand that sets grid-auto-flow and flex-direction, and promote that for layout direction in general? Then authors only need to learn one control for it. The debate All was laid out onto the table, it was only left what other members had to say. oriol: Problem with Jen Simmons’s reasoning. She said the proposed masonry-direction property would be new syntax that doesn’t match grid-auto-flow property, but this property matches flex-direction property so instead of trying to be close to grid, tries to be close to flexbox. Closer to grid is a choice, could be consistent with different things. astearns: One question I asked is, has anyone changed their mind on which proposal they support? I personally have. I thought that separate display property made a lot more sense, in terms of designing the feature and I was very daunted by the idea that we’d have to consider both grid and masonry for any new development in either seemed sticky to me but the TAG argument convinced me that we should do the work of integrating these things. TabAtkins: Thanks for setting that up for me, because I’m going to refute the TAG argument! I think they’re wrong in this case. You can draw a lot of surface-level connections between Grid and Masonry, and Flexbox, and other hypothetical layouts but when you actually look at details of how they work, behaviors each one is capable of, they’re pretty distinct if you try to combine together, it would be an unholy mess of conflicting constraints — e.g. flexing in items of masonry or grid or you’d have a weird mish-mash of, “the 2D layout. But if you call it a flex you get access to these properties, call it grid, access to these other properties concrete example, “pillar” example mentioned in webKit blog post, that wasn’t compatible with the base concepts in masonry and flex because it wants a shared block formatting context grid etc have different formatting contexts, can’t use floats. lea: actually, the TAG argument was that layout seems to actually be a continuum, and syntax should accommodate that rather than forcing one of two extremes (current flex vs current grid). The debate kept back and forth until there was an attempt to set a general north star to follow. jyasskin: Wanted to emphasize a couple aspects of TAG review. It seems really nice to keep the property from Chrome proposal that you don’t have to learn both, can just learn to do masonry without learning all of Grid even if that’s in a unified system perhaps still define masonry shorthand, and have it set grid properties jensimmons: To create a simple masonry-style layout in Grid, you just need 3 lines of code (4 with a gap). It’s quite simple. jyasskin: Most consensus part of TAG feedback was to share properties whenever possible. Not necessary to share the same ‘display’ values; could define different ‘display’ values but share the properties. One thing we didn’t like about unified proposal was grid-auto-flow in the unified proposal, where some values were ignored. Yeah, this is the usability point I’m pounding on Another Split Decision Despite all, it looked like nobody was giving away, and the debate seemed stuck once again: astearns: I’m not hearing a way forward yet. At some point, one of the camps is going to have to concede in order to move this forward. lea: What if we do a straw poll. Not to decide, but to figure out how far are we from consensus? The votes were cast and the results were… split. florian: though we could still not reach consensus, I want to thank both sides for presenting clear arguments, densely packed, well delivered. I will go back to the presentations, and revisit some points, it really was informative to present the way it was. That’s all folks, a split decision! There isn’t a preference for either of the two proposals and implementing something with such mixed opinions is something nobody would approve. After a little over five years of debate, I think this meeting is yet another good sign that a new proposal addressing the concerns of both sides should be considered, but that’s just a personal opinion. To me, masonry (or whatever name it may be) is an important step in CSS layout that may shape future layouts, it shouldn’t be rushed so until then, I am more than happy to wait for a proposal that satisfies both sides. Further Reading Help us choose the final syntax for Masonry in CSS (Jen Simmons and Elika Etemad, with Brandon Stewart) Feedback needed: How should we define CSS masonry? (Rachel Andrew, Ian Kilpatrick and Tab Atkins-Bittner) Weighing in on CSS Masonry (Keith J. Grant) Masonry and good defaults (Rachel Andrew) Should masonry be part of CSS grid? (Ahmad Shadeed) Relevant Issues Pinterest/Masonry style layout support #945 Designer/developer feedback on masonry layout #10233 Alternative masonry path forward #9041 CSS Masonry Layout #1003 Masonry Syntax Debate #11243",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382974",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eThe CSS Working Group (CSSWG) meets weekly (or close to it) to discuss and quickly resolve issues from their \u003ca href=\"https://github.com/w3c/csswg-drafts/\" rel=\"noopener\"\u003eGitHub\u003c/a\u003e that would otherwise be lost in the back-and-forth of forum conversation. While each meeting brings interesting conversation, this past Wednesday (December 4th) was special. The CSSWG met to try and finally squash a debate that has been going on for five years: \u003cstrong\u003ewhether Masonry should be a part of Grid or a separate system.\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eI’ll try to summarize the current state of the debate, but if you are looking for the long version, I recommend reading \u003ca href=\"https://css-tricks.com/css-masonry-css-grid/\"\u003eCSS Masonry \u0026amp; CSS Grid\u003c/a\u003e by Geoff and \u003ca href=\"https://www.oddbird.net/2024/10/01/grid-masonry-nuance/\" rel=\"noopener\"\u003eChoosing a Masonry Syntax in CSS\u003c/a\u003e by Miriam Suzanne.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn 2017, it was \u003cspan\u003efrequently asked \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/945\" target=\"_blank\" rel=\"noopener noreferrer\"\u003ewhether Grid could handle masonry layouts\u003c/a\u003e; layouts where the columns (or \u003c/span\u003ethe rows) could hold unevenly sized items without gaps in between. While this is just one of several possibilities with masonry, you can think about the layout popularized by Pinterest:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"757\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57%E2%80%AFAM.png?resize=1024%2C757\u0026amp;ssl=1\" alt=\"Pinterest showing a masonry layout\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57%E2%80%AFAM.png?resize=1024%2C757\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57%E2%80%AFAM.png?resize=300%2C222\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57%E2%80%AFAM.png?resize=768%2C568\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57%E2%80%AFAM.png?resize=1536%2C1135\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57%E2%80%AFAM.png?resize=2048%2C1513\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn 2020, Firefox released a prototype in which masonry was integrated into the CSS Grid layout module. The main voice against it was \u003ca href=\"https://rachelandrew.co.uk/archives/2020/05/05/does-masonry-belong-in-the-css-grid-specification/\" rel=\"noopener\"\u003eRachel Andrew\u003c/a\u003e, arguing that it should be its own, separate thing. Since then, the debate has escalated with two proposals from Apple and Google, arguing for and against a grid-integrated syntax, respectively.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere were some technical worries against a grid-masonry implementation that were since resolved. What you have to know is this: \u003cstrong\u003eright now, it’s a matter of syntax\u003c/strong\u003e. To be specific, which syntax is\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003ea. is easier to learn for authors and\u003c/p\u003e\n\n\n\n\u003cp\u003eb. how might this decision impact possible future developments in one or both models (or CSS in general).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eIn the middle, the W3C Technical Architecture Group (TAG) was \u003ca href=\"https://github.com/w3ctag/design-reviews/issues/1003#issuecomment-2489688718\" rel=\"noopener\"\u003easked for input on the issue\u003c/a\u003e which has prompted an effort to unify the two proposals. Both sides have brought strong arguments to the table over a series of posts, and in the following meeting, they were asked to lay those arguments once again in a presentation, with the hope of reaching a consensus.\u003c/p\u003e\n\n\n\n\u003cp\u003eRemember that you can subscribe and read the full minutes on \u003ca href=\"https://lists.w3.org/Archives/Public/www-style/2024Dec/0003.html\" rel=\"noopener\"\u003eW3C.org\u003c/a\u003e\u003c/p\u003e\n\n\n\u003ch3 id=\"the-battle-of-powerpoints\"\u003eThe Battle of PowerPoints\u003c/h3\u003e\n\n\n\u003cp\u003eAlison Maher representing Google and an advocate of implementing Masonry as a new display value, opened the meeting with \u003ca href=\"https://lists.w3.org/Archives/Public/www-archive/2024Dec/att-0003/display_masonry.pdf\" rel=\"noopener\"\u003ea presentation\u003c/a\u003e. The main points were:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eSeveral properties behave differently between masonry and grid.\u003c/li\u003e\n\n\n\n\u003cli\u003eBetter defaults when setting \u003ccode\u003edisplay: masonry\u003c/code\u003e, something that \u003ca href=\"https://rachelandrew.co.uk/archives/2024/09/21/masonry-and-good-defaults/\" rel=\"noopener\"\u003eRachel Andrew recently argued for\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eThere was an argument against \u003ccode\u003edisplay: masonry\u003c/code\u003e since fallbacks would be more lengthy to implement, whereas in a grid-integrated the fallback to grid is already there. Alison Maher refutes this since “needing one is a temporary problem, so [we] should focus on the future,” and that “authors should make explicit fallback, to avoid surprises.”\u003c/li\u003e\n\n\n\n\u003cli\u003e“Positioning in masonry is simpler than grid, it’s only placed in 1 axis instead of 2.”\u003c/li\u003e\n\n\n\n\u003cli\u003eShorthands are also better: “Grid shorthand is complicated, hard to use. Masonry shorthand is easier because don’t need to remember the order.”\u003c/li\u003e\n\n\n\n\u003cli\u003e“Placement works differently in grid vs masonry” and “alignment is also very different”\u003c/li\u003e\n\n\n\n\u003cli\u003eThere will be “other changes for submasonry/subgrid that will lead to divergences.”\u003c/li\u003e\n\n\n\n\u003cli\u003e“Integrating masonry into grid will lead to spec bloat, will be harder to teach, and lead to developer confusion.”\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ealisonmaher\u003c/strong\u003e: “Conclusion: masonry should be a separate display type”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eJen Simmons, representing the WebKit team and advocate of the “Just Use Grid” approach followed with \u003ca href=\"https://lists.w3.org/Archives/Public/www-archive/2024Dec/att-0002/Masonry_presentation_to_CSSWG_____Dec_4_2024.pdf\" rel=\"noopener\"\u003eanother presentation\u003c/a\u003e. On this side, the main points were:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eAuthor learning could be skewed since “a new layout type creates a separate tool with separate syntax that’s similar but not the same as what exists […]. They’re familiar but not quite the same”\u003c/li\u003e\n\n\n\n\u003cli\u003eThe Chrome proposal would add around 10 new properties. “We don’t believe there’s a compelling argument to add so many new properties to CSS.”\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"780\" height=\"696\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/table-of-properties-masonry-1.png?resize=780%2C696\u0026amp;ssl=1\" alt=\"Table of properties that display: masonry would add. (around 10 new properties) \" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/table-of-properties-masonry-1.png?w=780\u0026amp;ssl=1 780w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/table-of-properties-masonry-1.png?resize=300%2C268\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/table-of-properties-masonry-1.png?resize=768%2C685\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"3\"\u003e\n\u003cli\u003e“Chromium argues that their new syntax is more understandable. We disagree, just use \u003ccode\u003egrid-auto-flow\u003c/code\u003e“\u003c/li\u003e\n\n\n\n\u003cli\u003e“When you layout rows in grid, template syntax is a bit different — you stack the template names to physically diagram the names for the rows. Just Use Grid re-uses this syntax exactly; but new masonry layout uses the column syntax for rows”\u003c/li\u003e\n\n\n\n\u003cli\u003e“Other difference is the auto-flow — grid’s indicates the primary fill direction, Chrome believes this doesn’t make sense and changed it to match the orientation of lines”\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"836\" height=\"470\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/grid-vs-masonry-templates-2.png?resize=836%2C470\u0026amp;ssl=1\" alt=\"Difference in template syntax between Just use Grid vs display: masonry\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/grid-vs-masonry-templates-2.png?w=836\u0026amp;ssl=1 836w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/grid-vs-masonry-templates-2.png?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/grid-vs-masonry-templates-2.png?resize=768%2C432\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003col start=\"6\"\u003e\n\u003cli\u003e“Chrome argues that new display type allows better defaults — but the defaults propose aren’t good […] it doesn’t quite work as easily as claimed [see article] requires deep understanding of autosizing”\u003c/li\u003e\n\n\n\n\u003cli\u003e“Easier to switch, e.g. at breakpoints or progressive enhancement”\u003c/li\u003e\n\n\n\n\u003cli\u003e“Follows CSS design principles to re-use what already exists”\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\u003ch3 id=\"the-tag-review\"\u003eThe TAG review\u003c/h3\u003e\n\n\n\u003cp\u003eAfter two presentations with compelling arguments, Lea Verou (also a member of the TAG) followed with \u003ca href=\"https://github.com/w3ctag/design-reviews/issues/1003#issuecomment-2489688718\" rel=\"noopener\"\u003etheir input\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003elea\u003c/strong\u003e: We did a TAG review on this. My opinion is fully reflected there. I think the arguments WebKit team makes are compelling. We thought not only should masonry be part of grid, but should go further. A lot of arguments for integrating is that “grid is too hard”. In that case we should make grid things easier. Complex things are possible, but simple things are not so easy.\u003c/p\u003e\n\n\n\n\u003cp\u003eBig part of Google’s argument is defaults, but we could just have smarter defaults — there is precedent for this in CSS if we decided that would help ergonomics We agree that switching between grid vs. masonry is common. Grid might be a slightly better fallback than nothing, but minor argument because people can use \u003ccode\u003e@supports\u003c/code\u003e. Introducing all these new properties increasing the API surfaces that authors need to learn. Less they can port over. Even if we say we will be disciplined, experience shows that we won’t. Even if not intentional, accidental. DRY – don’t have multiple sources of truth\u003c/p\u003e\n\n\n\n\u003cp\u003eOne of arguments against masonry in grid is that grids are 2D, but actually in graphic design grids were often 1D. I agree that most masonry use cases need simpler grids than general grid use cases, but that means we should make those grids easier to define for both grid and masonry. The more we looked into this, we realize there are 3 different layout modes that give you 2D arrangement of children. We recommended not just make masonry part of grid, but find ways of integrating what we already have better could we come up with a shorthand that sets \u003ccode\u003egrid-auto-flow\u003c/code\u003e and \u003ccode\u003eflex-direction\u003c/code\u003e, and promote that for layout direction in general? Then authors only need to learn one control for it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\u003ch3 id=\"the-debate\"\u003eThe debate\u003c/h3\u003e\n\n\n\u003cp\u003eAll was laid out onto the table, it was only left what other members had to say.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eoriol\u003c/strong\u003e: Problem with Jen Simmons’s reasoning. She said the proposed masonry-direction property would be new syntax that doesn’t match \u003ccode\u003egrid-auto-flow\u003c/code\u003e property, but this property matches \u003ccode\u003eflex-direction\u003c/code\u003e property so instead of trying to be close to grid, tries to be close to flexbox. Closer to grid is a choice, could be consistent with different things.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eastearns\u003c/strong\u003e: One question I asked is, has anyone changed their mind on which proposal they support? I personally have. I thought that separate display property made a lot more sense, in terms of designing the feature and I was very daunted by the idea that we’d have to consider both grid and masonry for any new development in either seemed sticky to me but the TAG argument convinced me that we should do the work of integrating these things.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eTabAtkins\u003c/strong\u003e: Thanks for setting that up for me, because I’m going to refute the TAG argument! I think they’re wrong in this case. You can draw a lot of surface-level connections between Grid and Masonry, and Flexbox, and other hypothetical layouts but when you actually look at details of how they work, behaviors each one is capable of, they’re pretty distinct if you try to combine together, it would be an unholy mess of conflicting constraints — e.g. flexing in items of masonry or grid or you’d have a weird mish-mash of, “the 2D layout.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut if you call it a flex you get access to these properties, call it grid, access to these other properties concrete example, “pillar” example mentioned in \u003ca href=\"https://webkit.org/blog/16026/css-masonry-syntax/\" rel=\"noopener\"\u003ewebKit blog post\u003c/a\u003e, that wasn’t compatible with the base concepts in masonry and flex because it wants a shared block formatting context grid etc have different formatting contexts, can’t use floats.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003elea\u003c/strong\u003e: actually, the TAG argument was that layout seems to actually be a continuum, and syntax should accommodate that rather than forcing one of two extremes (current flex vs current grid).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThe debate kept back and forth until there was an attempt to set a general north star to follow.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ejyasskin\u003c/strong\u003e: Wanted to emphasize a couple aspects of TAG review. It seems really nice to keep the property from Chrome proposal that you don’t have to learn both, can just learn to do masonry without learning all of Grid even if that’s in a unified system perhaps still define masonry shorthand, and have it set grid properties\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ejensimmons\u003c/strong\u003e: To create a simple masonry-style layout in Grid, you just need 3 lines of code (4 with a gap). It’s quite simple.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ejyasskin\u003c/strong\u003e: Most consensus part of TAG feedback was to share properties whenever possible. Not necessary to share the same ‘display’ values; could define different ‘display’ values but share the properties. One thing we didn’t like about unified proposal was \u003ccode\u003egrid-auto-flow\u003c/code\u003e in the unified proposal, where some values were ignored. Yeah, this is the usability point I’m pounding on\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\u003ch3 id=\"another-split-decision\"\u003eAnother Split Decision\u003c/h3\u003e\n\n\n\u003cp\u003eDespite all, it looked like nobody was giving away, and the debate seemed stuck once again:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eastearns\u003c/strong\u003e: I’m not hearing a way forward yet. At some point, one of the camps is going to have to concede in order to move this forward. \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003elea\u003c/strong\u003e: What if we do a straw poll. Not to decide, but to figure out how far are we from consensus?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThe votes were cast and the results were… split.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"554\" height=\"371\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/straw-poll.png?resize=554%2C371\u0026amp;ssl=1\" alt=\"Straw Poll for Just Use Grid, showing a split result. 12 NOs, 13 YES and 5 ABSTAIN\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/straw-poll.png?w=554\u0026amp;ssl=1 554w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/12/straw-poll.png?resize=300%2C201\u0026amp;ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eflorian\u003c/strong\u003e: though we could still not reach consensus, I want to thank both sides for presenting clear arguments, densely packed, well delivered. I will go back to the presentations, and revisit some points, it really was informative to present the way it was.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eThat’s all folks, a split decision!\u003c/strong\u003e There isn’t a preference for either of the two proposals and implementing something with such mixed opinions is something nobody would approve. After a little over five years of debate, I think this meeting is yet another good sign that a new proposal addressing the concerns of both sides should be considered, but that’s just a personal opinion. To me, masonry (or whatever name it may be) is an important step in CSS layout that may shape future layouts, it shouldn’t be rushed so until then, I am more than happy to wait for a proposal that satisfies both sides.\u003c/p\u003e\n\n\n\u003ch3 id=\"further-reading\"\u003eFurther Reading\u003c/h3\u003e\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://webkit.org/blog/16026/css-masonry-syntax/\" rel=\"noopener\"\u003eHelp us choose the final syntax for Masonry in CSS\u003c/a\u003e (Jen Simmons and Elika Etemad, with Brandon Stewart)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/masonry-syntax\" rel=\"noopener\"\u003eFeedback needed: How should we define CSS masonry?\u003c/a\u003e (Rachel Andrew, Ian Kilpatrick and Tab Atkins-Bittner)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://keithjgrant.com/posts/2024/05/weighing-in-on-css-masonry/\" rel=\"noopener\"\u003eWeighing in on CSS Masonry\u003c/a\u003e (Keith J. Grant)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://rachelandrew.co.uk/archives/2024/09/21/masonry-and-good-defaults/\" rel=\"noopener\"\u003eMasonry and good defaults\u003c/a\u003e (Rachel Andrew)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://ishadeed.com/article/css-grid-masonry/\" rel=\"noopener\"\u003eShould masonry be part of CSS grid?\u003c/a\u003e (Ahmad Shadeed)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"relevant-issues\"\u003eRelevant Issues\u003c/h3\u003e\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/w3c/csswg-drafts/issues/945\" rel=\"noopener\"\u003ePinterest/Masonry style layout support #945\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/w3c/csswg-drafts/issues/10233\" rel=\"noopener\"\u003eDesigner/developer feedback on masonry layout #10233\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041\" rel=\"noopener\"\u003eAlternative masonry path forward #9041\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/w3ctag/design-reviews/issues/1003\" rel=\"noopener\"\u003eCSS Masonry Layout #1003\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.com/w3c/csswg-drafts/issues/11243\" rel=\"noopener\"\u003eMasonry Syntax Debate #11243\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2024-12-10T09:27:32-07:00",
  "modifiedTime": "2024-12-10T17:35:44-07:00"
}
