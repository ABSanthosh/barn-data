{
  "id": "3a5bc2da-e760-4e08-90a6-ba9abbb28063",
  "title": "Modern Scroll Shadows Using Scroll-Driven Animations",
  "link": "https://css-tricks.com/modern-scroll-shadows-using-scroll-driven-animations/",
  "description": "Using scroll shadows, especially for mobile devices, is a subtle bit of UX that Chris has covered before. Geoff covered a newer approach that uses the animation-timeline property. Here’s yet another way. Modern Scroll Shadows Using Scroll-Driven Animations originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Kevin Hamer",
  "published": "Mon, 05 May 2025 13:01:43 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "Scroll Driven Animation"
  ],
  "byline": "Kevin Hamer",
  "length": 3372,
  "excerpt": "Using scroll shadows, especially for mobile devices, is a subtle bit of UX that Chris has covered before. Geoff covered a newer approach that uses the animation-timeline property. Here’s yet another way.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Using scroll shadows, especially for mobile devices, is a subtle bit of UX that Chris has covered before (indeed, it’s one of his all-time favorite CSS tricks), by layering background gradients with different attachments, we can get shadows that are covered up when you’ve scrolled to the limits of the element. Geoff covered a newer approach that uses the animation-timeline property. Using animation-timeline, we can tie CSS animation to the scroll position. His example uses pseudo-elements to render the scroll shadows, and animation-range to animate the opacity of the pseudo-elements based on scroll. Here’s yet another way. Instead of using shadows, let’s use a CSS mask to fade out the edges of the scrollable element. This is a slightly different visual metaphor that works great for horizontally scrollable elements — places where your scrollable element doesn’t have a distinct border of its own. This approach still uses animation-timeline, but we’ll use custom properties instead of pseudo-elements. Since we’re fading, the effect also works regardless of whether we’re on a dark or light background. First, we’ll define our scrollable element with a mask that fades out the start and end of the container. For this example, let’s consider the infamous table that can’t be responsive and has to be horizontally scrollable on mobile. Let’s add the mask. We can use the shorthand and find the mask as a linear gradient that fades out on either end. A mask lets the table fade into the background instead of overlaying a shadow, but you could use the same technique for shadows. .scrollable { mask: linear-gradient(to right, #0000, #ffff 3rem calc(100% - 3rem), #0000); } Defining the custom properties and animation Next, we need to define our custom properties and the animation. We’ll define two separate properties, --left-fade and --right-fade, using @property. Using @property is necessary here to specify the syntax of the properties so that browsers can animate the property’s values. @property --left-fade { syntax: \"\u003clength\u003e\"; inherits: false; initial-value: 0; } @property --right-fade { syntax: \"\u003clength\u003e\"; inherits: false; initial-value: 0; } @keyframes scrollfade { 0% { --left-fade: 0; } 10%, 100% { --left-fade: 3rem; } 0%, 90% { --right-fade: 3rem; } 100% { --right-fade: 0; } } Instead of using multiple animations or animation-range, we can define a single animation where --left-fade animates from 0 to 3rem between 0-10%, and --right-fade animates from 3rem to 0 between 90-100%. Now we update our mask to use our custom properties and tie the scroll-timeline of our element to its own animation-timeline. Putting it all together Putting it all together, we have the effect we’re after: We’re still waiting for some browsers (Safari) to support animation-timeline, but this gracefully degrades to simply not fading the element at all. Wrapping up I like this implementation because it combines two newer bits of CSS — animating custom properties and animation-timeline — to achieve a practical effect that’s more than just decoration. The technique can even be used with scroll-snap-based carousels or cards: It works regardless of content or background and doesn’t require JavaScript. It exemplifies just how far CSS has come lately.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/scroll-shadows-table.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \u003cmain id=\"post-385733\"\u003e\n\n    \u003carticle\u003e\n\n      \n        \n        \u003cdiv\u003e\n\n          \n          \n\u003cp\u003eUsing scroll shadows, especially for mobile devices, is a subtle bit of UX that Chris has covered before (indeed, it’s \u003ca href=\"https://css-tricks.com/books/greatest-css-tricks/scroll-shadows/\"\u003eone of his all-time favorite CSS tricks\u003c/a\u003e), by layering background gradients with different attachments, we can get shadows that are covered up when you’ve scrolled to the limits of the element.\u003c/p\u003e\n\n\n\n\u003cp\u003eGeoff covered a \u003ca href=\"https://css-tricks.com/unleash-the-power-of-scroll-driven-animations/#aa-add-scroll-shadows-to-a-scroll-container\"\u003enewer approach\u003c/a\u003e that uses the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/a/animation-timeline/\"\u003eanimation-timeline\u003c/a\u003e\u003c/code\u003e property. Using \u003ccode\u003eanimation-timeline\u003c/code\u003e, we can tie CSS animation to the scroll position. His example uses pseudo-elements to render the scroll shadows, and animation-range to animate the opacity of the pseudo-elements based on scroll.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s yet another way. Instead of using shadows, let’s use a CSS \u003ccode\u003emask\u003c/code\u003e to fade out the edges of the scrollable element. This is a slightly different visual metaphor that works great for horizontally scrollable elements — places where your scrollable element doesn’t have a distinct border of its own. This approach still uses \u003ccode\u003eanimation-timeline\u003c/code\u003e, but we’ll use custom properties instead of pseudo-elements. Since we’re fading, the effect also works regardless of whether we’re on a dark or light background.\u003c/p\u003e\n\n\n\n\n\n\n\u003cp\u003eFirst, we’ll define our scrollable element with a mask that fades out the start and end of the container. For this example, let’s consider the infamous table that can’t be responsive and has to be horizontally scrollable on mobile.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s add the mask. We can use the shorthand and find the mask as a linear gradient that fades out on either end. A mask lets the table fade into the background instead of overlaying a shadow, but you could use the same technique for shadows.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.scrollable {\n  mask: linear-gradient(to right, #0000, #ffff 3rem calc(100% - 3rem), #0000);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch2 id=\"defining-the-custom-properties-and-animation\"\u003eDefining the custom properties and animation\u003c/h2\u003e\n\n\n\u003cp\u003eNext, we need to define our custom properties and the animation. We’ll define two separate properties, \u003ccode\u003e--left-fade\u003c/code\u003e and \u003ccode\u003e--right-fade\u003c/code\u003e, using \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/rules/p/property/\"\u003e@property\u003c/a\u003e\u003c/code\u003e. Using \u003ccode\u003e@property\u003c/code\u003e is necessary here to specify the \u003cem\u003esyntax\u003c/em\u003e of the properties so that browsers can animate the property’s values.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@property --left-fade {\n  syntax: \u0026#34;\u0026lt;length\u0026gt;\u0026#34;;\n  inherits: false;\n  initial-value: 0;\n}\n\n@property --right-fade {\n  syntax: \u0026#34;\u0026lt;length\u0026gt;\u0026#34;;\n  inherits: false;\n  initial-value: 0;\n}\n\n@keyframes scrollfade {\n  0% {\n    --left-fade: 0;\n  }\n  10%, 100% {\n    --left-fade: 3rem;\n  }\n  0%, 90% {\n    --right-fade: 3rem;\n  }\n  100% {\n    --right-fade: 0;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eInstead of using multiple animations or \u003ccode\u003eanimation-range\u003c/code\u003e, we can define a single animation where \u003ccode\u003e--left-fade\u003c/code\u003e animates from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e3rem\u003c/code\u003e between 0-10%, and \u003ccode\u003e--right-fade\u003c/code\u003e animates from \u003ccode\u003e3rem\u003c/code\u003e to \u003ccode\u003e0\u003c/code\u003e between 90-100%. Now we update our mask to use our custom properties and tie the \u003ccode\u003escroll-timeline\u003c/code\u003e of our element to its own \u003ccode\u003eanimation-timeline\u003c/code\u003e.\u003c/p\u003e\n\n\n\u003ch2 id=\"putting-it-all-together\"\u003ePutting it all together\u003c/h2\u003e\n\n\n\u003cp\u003ePutting it all together, we have the effect we’re after:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWe’re still waiting for some browsers (Safari) to support \u003ccode\u003eanimation-timeline\u003c/code\u003e, but this gracefully degrades to simply not fading the element at all.\u003c/p\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"scroll-driven-animations\"\u003e\u003c/baseline-status\u003e\n\n\n\u003ch2 id=\"wrapping-up\"\u003eWrapping up\u003c/h2\u003e\n\n\n\u003cp\u003eI like this implementation because it combines two newer bits of CSS — animating custom properties and \u003ccode\u003eanimation-timeline\u003c/code\u003e — to achieve a practical effect that’s more than just decoration. The technique can even be used with scroll-snap-based carousels or cards:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIt works regardless of content or background and doesn’t require JavaScript. It exemplifies just how far CSS has come lately.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\n\n    \u003c/article\u003e\n\n  \u003c/main\u003e\n\n        \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-05-05T07:01:43-06:00",
  "modifiedTime": "2025-05-05T07:01:45-06:00"
}
