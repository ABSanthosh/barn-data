{
  "id": "4dcf1145-ac3b-416b-b24d-933c2a0c3fc8",
  "title": "Feedback needed: How should we define CSS masonry?",
  "link": "https://developer.chrome.com/blog/masonry-syntax?hl=en",
  "description": "A comparison of the two proposed masonry specifications.",
  "author": "",
  "published": "Thu, 19 Sep 2024 07:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "GitHub",
  "length": 14662,
  "excerpt": "A comparison of the two proposed masonry specifications.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v030bcccda96ffbfc45363010bea8ba52e77f80d8de5da28f6cb7329ed55ead3b/chrome/images/favicon.png",
  "text": "Published: September 19, 2024 The CSS Working Group has combined the two CSS masonry proposals into one draft specification. The group hopes that this will make it easier to compare the two, and make a final decision. The Chrome team still believes that a separate masonry syntax would be the best way to proceed. While the biggest performance issue mentioned in our previous post is resolved, there are still concerns around syntax, initial values, and how easy a version combined with grid would be to learn. To test our assumptions however, we've worked through some examples to show how masonry would work with each version. Take a look at the examples in this post and give us your feedback, so we can make a decision and proceed with this feature. This post doesn't cover all possible use cases, however it's clear that separating masonry from grid layout won't result in the feature lacking functionality. In fact, the opposite may be true. As you'll see in this post, the display: masonry version creates new opportunities and a simpler syntax. In addition, many developers have raised concerns about the potential of re-ordering items with masonry causing accessibility issues. This is also being addressed for both versions of the syntax, through the proposed reading-flow property. A basic masonry layout This is the layout most people imagine when thinking about masonry. Items display in rows, and after the first row is placed, subsequent items move into space left by shorter items. In this layout columns are defined, then items are filled in by masonry rather than strict rows. With display: masonry To create a masonry layout use the value of masonry for the display property. This creates a masonry layout with column tracks that you define (or are defined by the content) and masonry in the other axis. The first item is displayed at block and inline start (therefore top left in English), and items are laid out in the inline direction. To define tracks use masonry-template-tracks with track listing values as used in CSS grid layout. .masonry { display: masonry; masonry-template-tracks: repeat(3, 1fr); gap: 10px; } With display: grid To create a masonry layout, first create a grid layout using the value of grid for the display property. Define columns with the grid-template-columns property, then give grid-template-rows a value of masonry. This will create a layout as you'd expect with auto-placed grid items, however the items in each row use a masonry layout and will rearrange to take up space left by smaller items in the preceding row. .masonry { display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: masonry; gap: 10px; } Points to consider between the two options A notable difference between these methods is that with the display: masonry version, you get a masonry layout even if you don't specify any tracks with masonry-template-tracks. Therefore display: masonry might be all you need. This is because the initial value of masonry-template-tracks is repeat(auto-areas, auto). The layout creates as many auto-sized tracks as will fit the container. Reversed flow with masonry The specification includes ways to change the direction of the masonry flow. For example, you can change the flow to display from the block-end up. In this layout columns are defined, then items are filled in by masonry starting at the block end. With display: masonry Create a masonry layout with display: masonry, then use masonry-direction with a value of column-reverse. .masonry { display: masonry; masonry-template-tracks: repeat(3, 1fr); masonry-direction: column-reverse; } With display: grid Create a masonry layout with display: grid and grid-template-rows: masonry. Then use the grid-auto-flow property with a new value of row-reverse to cause the items to layout from the block end of the grid container. .masonry { display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: masonry; grid-auto-flow: row-reverse; } Points to consider between the two options The display: masonry version feels very similar to how flexbox works. Change the direction that columns flow using the masonry-direction property with a value of column-reverse. The CSS grid version uses grid-auto-flow. As currently defined grid-auto-flow: row-reverse and grid-auto-flow: column-reverse would give the same effect. This could be confusing, as you might expect them to do something different. Masonry for rows You could also change direction to define rows. In this layout rows are defined, then items are filled in by masonry rather than strict columns. With display: masonry Create a masonry layout with display: masonry, then set the value of masonry-direction to row. Unless you want your rows to have a specific block size, you don't need to specify any track sizing as the default is auto, therefore the tracks will size to the content they contain. .masonry { display: masonry; masonry-direction: row; } With display: grid .masonry { display: grid; grid-template-columns: masonry; grid-template-rows: repeat(3, 1fr); } Points to consider between the two options As with reversed flow, changing the display: masonry version from columns to rows, means changing the value of masonry-direction. With the grid version, you will need to switch the values of the grid-template-columns and grid-template-rows properties. Or, if using the shorthand, change the order of the syntax. With both of these examples of switching flow, the display: masonry version feels more intuitive. There's a single property controlling flow masonry-direction, it takes one of the following values: row column row-reverse column-reverse You then add any sizing information needed to masonry-template-tracks, assuming the default auto value is not what you need. With grid, to do the reverse direction you need to use the grid-auto-flow property, and to do the row masonry switch the value of the grid-template-* properties. It's also not possible in current grid syntax to leave the value for the grid axis undefined. You always need to specify grid-template-* properties on the axis that doesn't have a value of masonry. Position items In both versions you can explicitly position items using the line-based placement you will be familiar with from grid layout. In both versions you can only position items in the grid axis, this is the axis with the predefined tracks, you can't position items on the axis that is doing the masonry layout. With display: masonry The following CSS defines a masonry layout with four columns. The grid axis is therefore columns. The item with a class of a is placed from the first column line to the third column line, spanning two tracks with the new masonry-track-* properties. This can also be defined as a shorthand of masonry-track: 1 / 3;. .masonry { display: masonry; masonry-template-tracks: repeat(4, 1fr); } .a { masonry-track-start: 1; masonry-track-end: 3; } With display: grid The following CSS defines a masonry layout with four columns. The grid axis is therefore columns. The item with a class of a is placed from the first column line to the third column line, spanning two tracks with the grid-column-* properties. This can also be defined as a shorthand of grid-column: 1 / 3;. If the grid axis is columns then the grid-row-* properties will be ignored, and if the grid axis is rows, the grid-columns-* properties will be ignored. .masonry { display: grid; grid-template-columns: repeat(4, 1fr); grid-template-rows: masonry; } .a { grid-column-start: 1; grid-column-end: 3; } You can use named lines with both syntaxes. The following examples show a grid with two column lines named a. With display: masonry The named lines are defined in the track listing value of masonry-template-tracks. The item can be placed after any line named a. .masonry { display: masonry; masonry-template-tracks: 100px [a] auto [a] auto 100px; } .item { masonry-track: a; } With display: grid The named lines are defined in the track listing value of grid-template-columns. The item is placed after the first line named a. If the grid-row property is defined it will be ignored. .masonry { display: grid; grid-template-columns: 100px [a] auto [a] auto 100px; grid-template-rows: masonry; } .item { grid-column: a; grid-row: a; /* ignored */ } You can also use named areas in both syntaxes. The following examples show a grid with three tracks named \"a\", \"b\", and \"c\". With display: masonry The tracks are named as the value of masonry-template-areas. Because no track sizes are defined, all three default to auto size. The item is placed in the \"a\" track. .masonry { display: masonry; masonry-template-areas: \"a b c\"; } .item { masonry-track: a; } This works the same whether you are defining rows or columns; the only difference would be the masonry-direction property. With display: grid For columns, the syntax is essentially identical. Similarly, because no track sizes are defined, all three default to auto size, but you do still need to explicitly say that the other axis is masonry: .masonry { display: grid; grid-template-areas: \"a b c\"; grid-template-rows: masonry; } .item { grid-column: a; } For rows, however, the value has to be written differently, because grid-template-areas is actually defining a two-dimensional area, and each row is written as a separate string: .masonry { display: grid; grid-template-areas: \"a\" \"b\" \"c\"; /* Note the difference, each row is quoted. */ grid-template-columns: masonry; } .item { grid-row: a; } Points to consider between the two options With any positioning, the display: masonry syntax works better when it comes to switching direction. As the masonry-track-* property works in whichever direction is the grid axis, all you need to do to change direction is change the value of masonry-direction. With the grid version, at the least you'll need redundant properties to enable the switching. However, see the previous examples for other ways in which changing direction is more complicated with the grid version. Shorthands In this post the longhands have been used to make it clearer which properties are in use, however both the display: masonry and display: grid versions can be defined using shorthands. With display: masonry The display: masonry shorthand uses the masonry keyword. To create the basic masonry layout use the following CSS: .masonry { display: masonry; masonry: repeat(3, 1fr); } To create a simple row-based masonry layout: .masonry { display: masonry; masonry: row; } To define tracks and a row-based layout with the shorthand: .masonry { display: masonry; masonry: repeat(3, 1fr) row; } With display: grid To create the basic masonry layout using the grid shorthand. .masonry { display: grid; grid: masonry / repeat(3, 1fr); } To create a simple row-based masonry layout: .masonry { display: grid; grid: repeat(3, auto) / masonry; } In more complex examples, because the overall display:masonry syntax is simpler, more properties can be packed together into the shorthand without it becoming overly complex. For example, imagine creating three columns, named \"a\", \"b\", and \"c\", filled from the bottom up. With display:masonry In display: masonry, all three of these can be set together in the shorthand: .masonry { display: masonry; masonry: column-reverse \"a b c\"; } Because they're auto-sized, you don't need to specify the sizes, but if you wanted a specific size instead, that could be added. For example: masonry: column-reverse 50px 100px 200px \"a b c\";. Also, each component can be freely reordered; there is no specific order you need to remember. And if you wanted to do rows instead, all you need to do is swap column-reverse with row or row-reverse; the rest of the syntax stays the same. With display: grid In display: grid, these three aspects have to be set separately: .masonry { display: grid; grid-template-rows: masonry; grid-template-areas: \"a b c\"; grid-auto-flow: wrap-reverse; } Like the masonry example, this makes all the columns auto size, but if you wanted to supply explicit sizes, you can do so: .masonry { display: grid; grid: masonry / 50px 100px 200px; grid-template-areas: \"a b c\"; grid-auto-flow: wrap-reverse; } Or if you wanted to use 'grid' to set sizes and area names all together: .masonry { display: grid; grid: \"a b c\" masonry / 50px 100px 200px; grid-auto-flow: wrap-reverse; } In both of these examples, the order is strictly required, and different if you wanted rows instead. For example, changing to rows looks like: .masonry { display: grid; grid: 50px 100px 200px / masonry; grid-template-areas: \"a\" \"b\" \"c\"; } Or, to put them all into one shorthand: .masonry { display: grid; grid: \"a\" 50px \"b\" 100px \"c\" 200px / masonry; } Points to consider between the two options The display: masonry shorthand is likely to be widely used, given that it's a relatively straightforward shorthand. In many cases, for a \"standard\" masonry layout, you'll just set the track definitions; all other values can assume the default. The display: grid version uses the existing grid shorthand, which is a fairly complex shorthand, and is in our experience less frequently used by developers. As shown in the preceding examples, even when used for simple masonry layouts it requires care when setting the order of values. Other considerations This post looks at some common use cases today, however we don't know what the future might hold for grid or masonry. A big argument for using the separate display: masonry syntax is it allows the two to diverge in future. In particular with initial values—such as those for masonry-template-tracks—it might be useful to do something different in masonry than grid does. We can't change the grid defaults if we go with the display: grid version, this could limit things we might want to do in the future. In these examples, you can see places where the browser has to ignore properties that are valid in grid if using masonry. For example grid-template-areas, where most of the values get through away as it defines a two dimensional grid layout, in masonry we are only fully defining one direction. Provide your feedback Take a look at these examples, and also the draft specification which lays each version out alongside the other. Let us know what you think by commenting on Issue 9041 or, if you prefer to write a post on your own blog or on social media, be sure to let us know on X or LinkedIn.",
  "image": "https://developer.chrome.com/static/blog/masonry-syntax/image/thumb.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\n\n\u003cp\u003ePublished: September 19, 2024\u003c/p\u003e\n\n\u003cp\u003eThe CSS Working Group has combined the two CSS masonry proposals into\n\u003ca href=\"https://drafts.csswg.org/css-grid-3/\"\u003eone draft specification\u003c/a\u003e.\nThe group hopes that this\nwill make it easier to compare the two, and make a final decision. The Chrome\nteam still believes that a separate masonry syntax would be the best way\nto proceed. While the biggest performance issue mentioned in \u003ca href=\"https://developer.chrome.com/blog/masonry\"\u003eour previous\npost\u003c/a\u003e is resolved, there are still concerns around syntax,\ninitial values, and how easy a version combined with grid would be to learn.\u003c/p\u003e\n\n\u003cp\u003eTo test our assumptions however, we\u0026#39;ve worked through some examples to show how\nmasonry would work with each version. Take a look at the examples in this post\nand give us your feedback, so we can make a decision and proceed with this\nfeature.\u003c/p\u003e\n\n\u003cp\u003eThis post doesn\u0026#39;t cover all possible use cases, however it\u0026#39;s clear that\nseparating masonry from grid layout won\u0026#39;t result in the feature lacking\nfunctionality. In fact, the opposite may be true. As you\u0026#39;ll see in this post,\nthe \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e version creates new opportunities and a simpler syntax.\nIn addition, many developers have raised concerns about the potential of\nre-ordering items with masonry causing accessibility issues. This is also being\naddressed for both versions of the syntax, through the proposed \u003ccode translate=\"no\" dir=\"ltr\"\u003ereading-flow\u003c/code\u003e\nproperty.\u003c/p\u003e\n\n\u003ch2 id=\"a_basic_masonry_layout\" data-text=\"A basic masonry layout\" tabindex=\"-1\"\u003eA basic masonry layout\u003c/h2\u003e\n\n\u003cp\u003eThis is the layout most people imagine when thinking about masonry. Items\ndisplay in rows, and after the first row is placed, subsequent items move into\nspace left by shorter items.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/masonry-syntax/image/image1.png\" alt=\"A layout with columns, the items filling columns do so with no gaps.\" srcset=\"https://developer.chrome.com/static/blog/masonry-syntax/image/image1_36.png 36w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_48.png 48w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_72.png 72w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_96.png 96w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_480.png 480w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_720.png 720w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_856.png 856w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_960.png 960w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_1440.png 1440w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_1920.png 1920w,https://developer.chrome.com/static/blog/masonry-syntax/image/image1_2880.png 2880w\" sizes=\"(max-width: 840px) 100vw, 856px\"/\u003e\n  \u003cfigcaption\u003eIn this layout columns are defined, then items are filled in by masonry rather than strict rows.\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id=\"with_display_masonry\" data-text=\"With display: masonry\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eTo create a masonry layout use the value of \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry\u003c/code\u003e for the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay\u003c/code\u003e\nproperty. This creates a masonry layout with column tracks that you define (or\nare defined by the content) and masonry in the other axis. The first item is\ndisplayed at block and inline start (therefore top left in English), and items\nare laid out in the inline direction.\u003c/p\u003e\n\n\u003cp\u003eTo define tracks use \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-template-tracks\u003c/code\u003e with track listing values as used\nin CSS grid layout.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry-template-tracks: repeat(3, 1fr);\n  gap: 10px;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"with_display_grid\" data-text=\"With display: grid\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eTo create a masonry layout, first create a grid layout using the value of \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid\u003c/code\u003e\nfor the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay\u003c/code\u003e property. Define columns with the \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-columns\u003c/code\u003e\nproperty, then give \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-rows\u003c/code\u003e a value of \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis will create a layout as you\u0026#39;d expect with auto-placed grid items, however\nthe items in each row use a masonry layout and will rearrange to take up space\nleft by smaller items in the preceding row.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: masonry;\n  gap: 10px;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"points_to_consider_between_the_two_options\" data-text=\"Points to consider between the two options\" tabindex=\"-1\"\u003ePoints to consider between the two options\u003c/h3\u003e\n\n\u003cp\u003eA notable difference between these methods is that with the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e\nversion, you get a masonry layout even if you don\u0026#39;t specify any tracks with\n\u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-template-tracks\u003c/code\u003e. Therefore \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e might be all you need.\nThis is because the initial value of \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-template-tracks\u003c/code\u003e is\n\u003ccode translate=\"no\" dir=\"ltr\"\u003erepeat(auto-areas, auto)\u003c/code\u003e. The layout creates as many auto-sized tracks as will\nfit the container.\u003c/p\u003e\n\n\u003ch2 id=\"reversed_flow_with_masonry\" data-text=\"Reversed flow with masonry\" tabindex=\"-1\"\u003eReversed flow with masonry\u003c/h2\u003e\n\n\u003cp\u003eThe specification includes ways to change the direction of the masonry flow. For\nexample, you can change the flow to display from the block-end up.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/masonry-syntax/image/image3.png\" alt=\"A layout with columns, the items filling columns do so from the bottom of the layout.\" srcset=\"https://developer.chrome.com/static/blog/masonry-syntax/image/image3_36.png 36w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_48.png 48w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_72.png 72w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_96.png 96w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_480.png 480w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_720.png 720w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_856.png 856w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_960.png 960w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_1440.png 1440w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_1920.png 1920w,https://developer.chrome.com/static/blog/masonry-syntax/image/image3_2880.png 2880w\" sizes=\"(max-width: 840px) 100vw, 856px\"/\u003e\n  \u003cfigcaption\u003eIn this layout columns are defined, then items are filled in by masonry starting at the block end.\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id=\"with_display_masonry_2\" data-text=\"With display: masonry\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eCreate a masonry layout with \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e, then use \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-direction\u003c/code\u003e\nwith a value of \u003ccode translate=\"no\" dir=\"ltr\"\u003ecolumn-reverse\u003c/code\u003e.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry-template-tracks: repeat(3, 1fr);\n  masonry-direction: column-reverse;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"with_display_grid_2\" data-text=\"With display: grid\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eCreate a masonry layout with \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-rows: masonry\u003c/code\u003e.\nThen use the \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-auto-flow\u003c/code\u003e property with a new value of \u003ccode translate=\"no\" dir=\"ltr\"\u003erow-reverse\u003c/code\u003e to\ncause the items to layout from the block end of the grid container.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: masonry;\n  grid-auto-flow: row-reverse;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"points_to_consider_between_the_two_options_2\" data-text=\"Points to consider between the two options\" tabindex=\"-1\"\u003ePoints to consider between the two options\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e version feels very similar to how flexbox works. Change\nthe direction that columns flow using the \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-direction\u003c/code\u003e property with a\nvalue of \u003ccode translate=\"no\" dir=\"ltr\"\u003ecolumn-reverse\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe CSS grid version uses \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-auto-flow\u003c/code\u003e. As currently defined\n\u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-auto-flow: row-reverse\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-auto-flow: column-reverse\u003c/code\u003e would give\nthe same effect. This could be confusing, as you might expect them to do\nsomething different.\u003c/p\u003e\n\n\u003ch2 id=\"masonry_for_rows\" data-text=\"Masonry for rows\" tabindex=\"-1\"\u003eMasonry for rows\u003c/h2\u003e\n\n\u003cp\u003eYou could also change direction to define rows.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/masonry-syntax/image/image2.png\" alt=\"A layout with rows, the items filling rows do so with no gaps.\" srcset=\"https://developer.chrome.com/static/blog/masonry-syntax/image/image2_36.png 36w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_48.png 48w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_72.png 72w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_96.png 96w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_480.png 480w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_720.png 720w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_856.png 856w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_960.png 960w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_1440.png 1440w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_1920.png 1920w,https://developer.chrome.com/static/blog/masonry-syntax/image/image2_2880.png 2880w\" sizes=\"(max-width: 840px) 100vw, 856px\"/\u003e\n  \u003cfigcaption\u003eIn this layout rows are defined, then items are filled in by masonry rather than strict columns.\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id=\"with_display_masonry_3\" data-text=\"With display: masonry\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eCreate a masonry layout with \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e, then set the value of\n\u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-direction\u003c/code\u003e to \u003ccode translate=\"no\" dir=\"ltr\"\u003erow\u003c/code\u003e. Unless you want your rows to have a specific block\nsize, you don\u0026#39;t need to specify any track sizing as the default is \u003ccode translate=\"no\" dir=\"ltr\"\u003eauto\u003c/code\u003e,\ntherefore the tracks will size to the content they contain.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry-direction: row;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"with_display_grid_3\" data-text=\"With display: grid\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e\u003c/h3\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid-template-columns: masonry;\n  grid-template-rows: repeat(3, 1fr);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"points_to_consider_between_the_two_options_3\" data-text=\"Points to consider between the two options\" tabindex=\"-1\"\u003ePoints to consider between the two options\u003c/h3\u003e\n\n\u003cp\u003eAs with reversed flow, changing the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e version from columns to\nrows, means changing the value of \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-direction\u003c/code\u003e. With the grid version,\nyou will need to switch the values of the \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-columns\u003c/code\u003e and\n\u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-rows\u003c/code\u003e properties. Or, if using the shorthand, change the order of\nthe syntax.\u003c/p\u003e\n\n\u003cp\u003eWith both of these examples of switching flow, the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e version\nfeels more intuitive. There\u0026#39;s a single property controlling flow\n\u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-direction\u003c/code\u003e, it takes one of the following values:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003erow\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003ecolumn\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003erow-reverse\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003ecolumn-reverse\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou then add any sizing information needed to \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-template-tracks\u003c/code\u003e,\nassuming the default auto value is not what you need.\u003c/p\u003e\n\n\u003cp\u003eWith grid, to do the reverse direction you need to use the \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-auto-flow\u003c/code\u003e\nproperty, and to do the row masonry switch the value of the \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-*\u003c/code\u003e\nproperties. It\u0026#39;s also not possible in current grid syntax to leave the value for\nthe grid axis undefined. You always need to specify \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-*\u003c/code\u003e properties\non the axis that doesn\u0026#39;t have a value of \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"position_items\" data-text=\"Position items\" tabindex=\"-1\"\u003ePosition items\u003c/h2\u003e\n\n\u003cp\u003eIn both versions you can explicitly position items using the line-based\nplacement you will be familiar with from grid layout. In both versions you can\nonly position items in the \u003cem\u003egrid axis\u003c/em\u003e, this is the axis with the predefined\ntracks, you can\u0026#39;t position items on the axis that is doing the masonry layout.\u003c/p\u003e\n\n\u003ch3 id=\"with_display_masonry_4\" data-text=\"With display: masonry\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe following CSS defines a masonry layout with four columns. The grid axis is\ntherefore columns. The item with a class of \u003ccode translate=\"no\" dir=\"ltr\"\u003ea\u003c/code\u003e is placed from the first column\nline to the third column line, spanning two tracks with the new\n\u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-track-*\u003c/code\u003e properties. This can also be defined as a shorthand of\n\u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-track: 1 / 3;\u003c/code\u003e.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry-template-tracks: repeat(4, 1fr);\n}\n\n.a {\n  masonry-track-start: 1;\n  masonry-track-end: 3;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"with_display_grid_4\" data-text=\"With display: grid\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe following CSS defines a masonry layout with four columns. The grid axis is\ntherefore columns. The item with a class of \u003ccode translate=\"no\" dir=\"ltr\"\u003ea\u003c/code\u003e is placed from the first column\nline to the third column line, spanning two tracks with the \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-column-*\u003c/code\u003e\nproperties. This can also be defined as a shorthand of \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-column: 1 / 3;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf the grid axis is columns then the \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-row-*\u003c/code\u003e properties will be ignored,\nand if the grid axis is rows, the \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-columns-*\u003c/code\u003e properties will be ignored.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: masonry;\n}\n\n.a {\n  grid-column-start: 1;\n  grid-column-end: 3;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can use named lines with both syntaxes. The following examples show a grid\nwith two column lines named \u003ccode translate=\"no\" dir=\"ltr\"\u003ea\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"with_display_masonry_5\" data-text=\"With display: masonry\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe named lines are defined in the track listing value of\n\u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-template-tracks\u003c/code\u003e. The item can be placed after any line named \u003ccode translate=\"no\" dir=\"ltr\"\u003ea\u003c/code\u003e.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry-template-tracks: 100px [a] auto [a] auto 100px;\n}\n\n.item {\n  masonry-track: a;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"with_display_grid_5\" data-text=\"With display: grid\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe named lines are defined in the track listing value of\n\u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-columns\u003c/code\u003e. The item is placed after the first line named \u003ccode translate=\"no\" dir=\"ltr\"\u003ea\u003c/code\u003e. If\nthe \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-row\u003c/code\u003e property is defined it will be ignored.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid-template-columns: 100px [a] auto [a] auto 100px;\n  grid-template-rows: masonry;\n}\n\n.item {\n  grid-column: a;\n  grid-row: a; /* ignored */\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can also use named areas in both syntaxes. The following examples show a\ngrid with three tracks named \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, and \u0026#34;c\u0026#34;.\u003c/p\u003e\n\n\u003ch3 id=\"with_display_masonry_6\" data-text=\"With display: masonry\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe tracks are named as the value of \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-template-areas\u003c/code\u003e. Because no track\nsizes are defined, all three default to \u003ccode translate=\"no\" dir=\"ltr\"\u003eauto\u003c/code\u003e size. The item is placed in the\n\u0026#34;a\u0026#34; track.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry-template-areas: \u0026#34;a b c\u0026#34;;\n}\n\n.item {\n  masonry-track: a;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis works the same whether you are defining rows or columns; the only\ndifference would be the \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-direction\u003c/code\u003e property.\u003c/p\u003e\n\n\u003ch3 id=\"with_display_grid_6\" data-text=\"With display: grid\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFor \u003cem\u003ecolumns\u003c/em\u003e, the syntax is essentially identical. Similarly, because no track\nsizes are defined, all three default to \u003ccode translate=\"no\" dir=\"ltr\"\u003eauto\u003c/code\u003e size, but you do still need to\nexplicitly say that the other axis is masonry:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid-template-areas: \u0026#34;a b c\u0026#34;;\n  grid-template-rows: masonry;\n}\n\n.item {\n  grid-column: a;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor \u003cem\u003erows\u003c/em\u003e, however, the value has to be written differently, because\n\u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-areas\u003c/code\u003e is actually defining a two-dimensional area, and each row\nis written as a separate string:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid-template-areas: \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;; /* Note the difference, each row is quoted. */\n  grid-template-columns: masonry;\n}\n\n.item {\n  grid-row: a;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"points_to_consider_between_the_two_options_4\" data-text=\"Points to consider between the two options\" tabindex=\"-1\"\u003ePoints to consider between the two options\u003c/h3\u003e\n\n\u003cp\u003eWith any positioning, the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e syntax works better when it comes\nto switching direction. As the \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-track-*\u003c/code\u003e property works in whichever\ndirection is the grid axis, all you need to do to change direction is change the\nvalue of \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-direction\u003c/code\u003e. With the grid version, at the least you\u0026#39;ll need\nredundant properties to enable the switching. However, see the previous examples\nfor other ways in which changing direction is more complicated with the grid\nversion.\u003c/p\u003e\n\n\u003ch2 id=\"shorthands\" data-text=\"Shorthands\" tabindex=\"-1\"\u003eShorthands\u003c/h2\u003e\n\n\u003cp\u003eIn this post the longhands have been used to make it clearer which properties\nare in use, however both the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e versions can\nbe defined using shorthands.\u003c/p\u003e\n\n\u003ch3 id=\"with_display_masonry_7\" data-text=\"With display: masonry\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e shorthand uses the \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry\u003c/code\u003e keyword. To create the basic\nmasonry layout use the following CSS:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry: repeat(3, 1fr);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo create a simple row-based masonry layout:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry: row;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo define tracks and a row-based layout with the shorthand:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry: repeat(3, 1fr) row;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"with_display_grid_7\" data-text=\"With display: grid\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eTo create the basic masonry layout using the \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid\u003c/code\u003e shorthand.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid: masonry / repeat(3, 1fr);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo create a simple row-based masonry layout:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid: repeat(3, auto) / masonry;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn more complex examples, because the overall \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay:masonry\u003c/code\u003e syntax is\nsimpler, more properties can be packed together into the shorthand without it\nbecoming overly complex.\u003c/p\u003e\n\n\u003cp\u003eFor example, imagine creating three columns, named \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, and \u0026#34;c\u0026#34;, filled\nfrom the bottom up.\u003c/p\u003e\n\n\u003ch3 id=\"with_displaymasonry\" data-text=\"With display:masonry\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay:masonry\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e, all three of these can be set together in the shorthand:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: masonry;\n  masonry: column-reverse \u0026#34;a b c\u0026#34;;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBecause they\u0026#39;re auto-sized, you don\u0026#39;t need to specify the sizes, but if you\nwanted a specific size instead, that could be added. For example:\n\u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry: column-reverse 50px 100px 200px \u0026#34;a b c\u0026#34;;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlso, each component can be freely reordered; there is no specific order you\nneed to remember. And if you wanted to do rows instead, all you need to do is\nswap \u003ccode translate=\"no\" dir=\"ltr\"\u003ecolumn-reverse\u003c/code\u003e with \u003ccode translate=\"no\" dir=\"ltr\"\u003erow\u003c/code\u003e or \u003ccode translate=\"no\" dir=\"ltr\"\u003erow-reverse\u003c/code\u003e; the rest of the syntax stays\nthe same.\u003c/p\u003e\n\n\u003ch3 id=\"with_display_grid_8\" data-text=\"With display: grid\" tabindex=\"-1\"\u003eWith \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e, these three aspects have to be set separately:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid-template-rows: masonry;\n  grid-template-areas: \u0026#34;a b c\u0026#34;;\n  grid-auto-flow: wrap-reverse;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLike the masonry example, this makes all the columns \u003ccode translate=\"no\" dir=\"ltr\"\u003eauto\u003c/code\u003e size, but if you\nwanted to supply explicit sizes, you can do so:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid: masonry / 50px 100px 200px;\n  grid-template-areas: \u0026#34;a b c\u0026#34;;\n  grid-auto-flow: wrap-reverse;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr if you wanted to use \u0026#39;grid\u0026#39; to set sizes and area names all together:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid: \u0026#34;a b c\u0026#34; masonry / 50px 100px 200px;\n  grid-auto-flow: wrap-reverse;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn both of these examples, the order is strictly required, and different if you\nwanted rows instead. For example, changing to rows looks like:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid: 50px 100px 200px / masonry;\n  grid-template-areas: \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34;;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr, to put them all into one shorthand:\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e.masonry {\n  display: grid;\n  grid: \u0026#34;a\u0026#34; 50px \u0026#34;b\u0026#34; 100px \u0026#34;c\u0026#34;  200px / masonry;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"points_to_consider_between_the_two_options_5\" data-text=\"Points to consider between the two options\" tabindex=\"-1\"\u003ePoints to consider between the two options\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e shorthand is likely to be widely used, given that it\u0026#39;s a\nrelatively straightforward shorthand. In many cases, for a \u0026#34;standard\u0026#34; masonry\nlayout, you\u0026#39;ll just set the track definitions; all other values can assume the\ndefault.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e version uses the existing\n\u003ca href=\"https://developer.mozilla.org/docs/Web/CSS/grid\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003egrid\u003c/code\u003e\u003c/a\u003e shorthand, which is a\nfairly complex shorthand, and is in our experience less frequently used by\ndevelopers. As shown in the preceding examples, even when used for simple\nmasonry layouts it requires care when setting the order of values.\u003c/p\u003e\n\n\u003ch2 id=\"other_considerations\" data-text=\"Other considerations\" tabindex=\"-1\"\u003eOther considerations\u003c/h2\u003e\n\n\u003cp\u003eThis post looks at some common use cases today, however we don\u0026#39;t know what the\nfuture might hold for grid or masonry. A big argument for using the separate\n\u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: masonry\u003c/code\u003e syntax is it allows the two to diverge in future. In\nparticular with initial values—such as those for \u003ccode translate=\"no\" dir=\"ltr\"\u003emasonry-template-tracks\u003c/code\u003e—it\nmight be useful to do something different in masonry than grid does. We can\u0026#39;t\nchange the grid defaults if we go with the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: grid\u003c/code\u003e version, this could\nlimit things we might want to do in the future.\u003c/p\u003e\n\n\u003cp\u003eIn these examples, you can see places where the browser has to ignore\nproperties that are valid in grid if using masonry.\nFor example \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid-template-areas\u003c/code\u003e, where most of the values get\nthrough away as it defines a two dimensional grid layout, in masonry we are only\nfully defining one direction.\u003c/p\u003e\n\n\u003ch2 id=\"provide_your_feedback\" data-text=\"Provide your feedback\" tabindex=\"-1\"\u003eProvide your feedback\u003c/h2\u003e\n\n\u003cp\u003eTake a look at these examples, and also the draft specification which lays each\nversion out alongside the other. Let us know what you think by commenting on\n\u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041\"\u003eIssue 9041\u003c/a\u003e or, if you prefer\nto write a post on your own blog or on social media, be sure to let us know on\n\u003ca href=\"https://x.com/ChromiumDev\"\u003eX\u003c/a\u003e or\n\u003ca href=\"https://www.linkedin.com/showcase/chrome-for-developers\"\u003eLinkedIn\u003c/a\u003e.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": null,
  "modifiedTime": null
}
