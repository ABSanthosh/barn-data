{
  "id": "9c10523d-72ff-45b6-bcdf-5e0ceb9233ff",
  "title": "Faster Vue.js Execution in Firefox",
  "link": "https://hacks.mozilla.org/2023/09/faster-vue-js-execution-in-firefox/",
  "description": "Firefox performance on Vue.js has improved significantly throughout the year. Most recently, we sped up reactivity with Proxy optimizations. This change landed in Firefox 118, so it’s currently on Beta and will ride along to Release by the end of September. The post Faster Vue.js Execution in Firefox appeared first on Mozilla Hacks - the Web developer blog.",
  "author": "Brian Grinstead",
  "published": "Tue, 05 Sep 2023 16:39:32 +0000",
  "source": "https://hacks.mozilla.org/feed/",
  "categories": [
    "Featured Article",
    "Firefox",
    "JavaScript",
    "Performance",
    "firefox",
    "js",
    "speedometer",
    "vue"
  ],
  "byline": "By Brian Grinstead",
  "length": 2153,
  "excerpt": "Firefox performance on Vue.js has improved significantly throughout the year. Most recently, we sped up reactivity with Proxy optimizations.",
  "siteName": "Mozilla Hacks – the Web developer blog",
  "favicon": "",
  "text": "Speedometer 3 is a cross-industry effort to build a modern browser benchmark rooted in real-world user experiences. Its goal is to focus browser engineering effort towards making the Web more smooth for actual users on actual pages. This is hard to do and most browser benchmarks don’t do it well, but we see it as a unique opportunity to improve responsiveness broadly across the Web. This requires a deliberate analysis of the ecosystem — starting with real user experiences and identifying the essential technical elements underlying them. We built several new tests from scratch, and also updated some existing tests from Speedometer 2 to use more modern versions of widely-used JavaScript frameworks. When the Vue.js test was updated from Vue 2 to Vue 3, we noticed some performance issues in Firefox. The root of the problem was Proxy object usage that was introduced in Vue 3. Proxies are hard to optimize because they’re generic by design and can behave in all sorts of surprising ways (e.g., modifying trap functions after initialization, or wrapping a Proxy with another Proxy). They also weren’t used much on the performance-critical path when they were introduced, so we focused primarily on correctness in the original implementation. Speedometer 3 developed evidence that some Proxies today are well-behaved, critical-path, and widely-used. So we optimized these to execute completely in the JIT — specializing for the shapes of the Proxies encountered at the call-site and avoiding redundant work. This makes reactivity in Vue.js significantly faster, and we also anticipate improvements on other workloads. This change landed in Firefox 118, so it’s currently on Beta and will ride along to Release by the end of September. Over the course of the year Firefox has improved by around 40% on the Vue.js benchmark from work like this. More importantly, and as we hoped, we’re observing real user metric improvements across all page loads in Firefox as we optimize Speedometer 3. We’ll share more details about this in a subsequent post. More articles by Brian Grinstead…",
  "image": "https://hacks.mozilla.org/wp-content/themes/Hax/img/hacks-meta-image.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"content-main\"\u003e\n  \u003carticle role=\"article\"\u003e\n    \u003cp\u003e\u003ca href=\"https://twitter.com/mozhacks/status/1603435347190419456\"\u003eSpeedometer 3\u003c/a\u003e is a cross-industry effort to build a modern browser benchmark rooted in real-world user experiences. Its goal is to focus browser engineering effort towards making the Web more smooth for actual users on actual pages. This is hard to do and most browser benchmarks don’t do it well, but we see it as a unique opportunity to improve responsiveness broadly across the Web.\u003c/p\u003e\n\u003cp\u003eThis requires a deliberate analysis of the ecosystem — starting with real user experiences and identifying the essential technical elements underlying them. We built several new tests from scratch, and also updated some existing tests from Speedometer 2 to use more modern versions of widely-used JavaScript frameworks.\u003c/p\u003e\n\u003cp\u003eWhen the Vue.js test was updated from Vue 2 to Vue 3, we \u003ca href=\"https://github.com/WebKit/Speedometer/pull/114#issuecomment-1479368671\"\u003enoticed\u003c/a\u003e some performance issues in Firefox. The root of the problem was \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\"\u003eProxy\u003c/a\u003e object usage that \u003ca href=\"https://vuejs.org/guide/extras/reactivity-in-depth.html#how-reactivity-works-in-vue\"\u003ewas introduced in Vue 3\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eProxies are hard to optimize because they’re generic by design and can behave in all sorts of surprising ways (e.g., modifying trap functions after initialization, or wrapping a Proxy with another Proxy). They also weren’t used much on the performance-critical path when they were introduced, so we focused primarily on correctness in the original implementation.\u003c/p\u003e\n\u003cp\u003eSpeedometer 3 developed evidence that some Proxies today are well-behaved, critical-path, and widely-used. So we \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1824051\"\u003eoptimized these\u003c/a\u003e to execute completely in the JIT — specializing for the shapes of the Proxies encountered at the call-site and avoiding redundant work. This makes reactivity in Vue.js significantly faster, and we also anticipate improvements on other workloads.\u003c/p\u003e\n\u003cp\u003eThis change landed in Firefox 118, so it’s currently on Beta and will ride along to Release by the end of September.\u003c/p\u003e\n\u003cp\u003eOver the course of the year Firefox has improved \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1824051#c25\"\u003eby around 40%\u003c/a\u003e on the Vue.js benchmark from work like this. More importantly, and as we hoped, we’re observing real user metric improvements across all page loads in Firefox as we optimize Speedometer 3. We’ll share more details about this in a subsequent post.\u003c/p\u003e\n    \u003csection\u003e\n                                \n                                \u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/author/bgrinsteadmozilla-com/\"\u003eMore articles by Brian Grinstead…\u003c/a\u003e\u003c/p\u003e\n                  \u003c/section\u003e\n  \u003c/article\u003e\n  \n  \n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
