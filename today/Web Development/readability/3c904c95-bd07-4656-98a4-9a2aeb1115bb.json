{
  "id": "3c904c95-bd07-4656-98a4-9a2aeb1115bb",
  "title": "Chrome 130 beta",
  "link": "https://developer.chrome.com/blog/chrome-130-beta?hl=en",
  "description": "Test your site with the features and changes in the latest Chrome beta.",
  "author": "",
  "published": "Wed, 18 Sep 2024 07:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 11050,
  "excerpt": "Test your site with the features and changes in the latest Chrome beta.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v030bcccda96ffbfc45363010bea8ba52e77f80d8de5da28f6cb7329ed55ead3b/chrome/images/favicon.png",
  "text": "Published: September 18, 2024 Unless otherwise noted, the following changes apply to the newest Chrome beta channel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more about the features listed here through the provided links or from the list on ChromeStatus.com. Chrome 130 is beta as of September 18, 2024. You can download the latest on Google.com for desktop or on Google Play Store on Android. CSS This release adds four new CSS features. CSS Container Queries flat tree lookup The specification for container queries changed to look up flat tree ancestors. This change is only relevant for shadow DOM where an element will now be able to see non-named containers inside shadow trees into which the element or one of its ancestors are slotted, even if the CSS rule does not use ::part() or ::slotted(). CSS Nesting: The nested declarations rule Keeps bare declarations following a nested rule in their place, by wrapping those declarations in CSSNestedDeclarations rules during parsing. Full and unprefixed box-decoration-break support Adds support for box-decoration-break: clone both for inline fragmentation (line layout) and block fragmentation (pagination for printing and multicol). Previously in Chrome, only box-decoration-break:slice (the initial value) was supported for block fragmentation, whereas for inline fragmentation,box-decoration-break:clone was also supported, but only when using the prefixed -webkit-box-decoration-break property. Allow more pseudo-elements and pseudo-classes after ::part() CSS selectors that use the ::part() pseudo-element are allowed to have other CSS pseudo-elements (except ::part()) and many types of other CSS pseudo-classes after them. Combinators are still not allowed after ::part(), and pseudo-classes that depend on tree structure are not allowed. Previously Chrome only allowed a limited set of pseudo-classes and pseudo-elements after ::part(). This change allows all of the pseudo-classes and pseudo-elements that should be allowed. It means selectors such as ::part(part-name):enabled and ::part(part-name)::marker are now allowed. Web APIs Attribution Reporting API feature (Attribution Scopes) This change is based on ad tech feedback and the need for more fine grained filtering controls before the attribution process takes place. It lets API callers specify a field called \"attribution scopes\" which will be used for filtering before starting the regular attribution flow. This allows API callers more fine grained control over the attribution granularity and the ability to receive proper attribution reports when there are multiple different advertisers or campaigns that all convert on the same destination site. Attribution Reporting API feature (debug key privacy improvement) This change helps to mitigate a potential privacy gap with debug keys. Currently the API allows a source debug key or a trigger debug key to be specified if third-party cookies are available and can be set by API callers. If either a source or trigger debug key is specified then it will be included in the attribution report. This may lead to a privacy leak if third-party cookies are only allowed on either the publisher or the advertiser site but not both. This change mitigates this issue by enforcing that source debug keys and trigger debug keys are only included in the attribution report if they're present on both the source and trigger, which would mean that third-party cookies were available on both the publisher and advertiser site. This change will apply to both event-level reports and aggregatable reports. Compression dictionary transport with shared Brotli and shared Zstandard This feature adds support for using designated previous responses, as an external dictionary for content encoding compressing responses with Brotli or Zstandard. Enterprises might experience potential compatibility issues with enterprise network infrastructure that intercepts HTTPS traffic and is sensitive to unknown content encodings. The enterprise policy CompressionDictionaryTransportEnabled is available to turn off the compression dictionary transport feature. Concurrent smooth scrollIntoView() The scrollIntoView() method with behavior: \"smooth\" lets developers create scroll containers that scroll to their descendants with a gentle scroll animation. This feature fixes Chrome's implementation of the API so that ongoing scrollIntoView animations are not canceled by unrelated scrolls on other scroll containers. The feature also fixes cases where Chrome fails to scroll to a page's fragment anchor because of a competing scrollIntoView that is invoked when the page loads. Document picture-in-picture: add option to ignore window bounds cache This adds a new parameter (preferInitialWindowPlacement) to the document picture-in-picture API that, when set to true, hints to the user agent that it shouldn't try to reuse the position or size of the previous document picture-in-picture from this site when opening this one. Often, a document picture-in-picture window will close and re-open multiple times for the same site, such as moving a video conference to and from PiP. The user agent is free to re-open the PiP window at its most recent size and location, so that it stays where the user last moved it and provides continuity between the PiP windows. However, if the new window is semantically unrelated to the previous window, such as if it is a new video call, then the developer can use this parameter to provide a hint to the user agent that this window might be better opened in its default position and size instead. Learn about how to open the window in its default position and size. Improved error reporting in IndexedDB for large value read failures Change to reporting for certain error cases that were previously reported with a DOMException and the message \"Failed to read large IndexedDB value\". Chrome will now raise a DOMException with the name \"NotFoundError\" when the file containing the data being read by an IDBRequest is missing from the disk so that sites can take the appropriate corrective action when an unrecoverable failure occurs. Corrective actions could include deleting the entry from the DB, notifying the user, or re-fetching the data from servers. Keyboard focusable scroll containers This feature makes scrollers without focusable children keyboard-focusable by default. This is an important improvement to help make scrollers and contents within scrollers more accessible to all users. You can read more about its benefits in Keyboard focusable scrollers. Keyboard focusable scrollers will be enabled by default starting in Chrome 130. If websites need time to adjust to this new feature, there are a few options: The Keyboard focusable scrollers opt out deprecation trial can be used to opt back out of the feature for a limited time on a given site. This can be used through Chrome 132, ending March 18, 2025. The KeyboardFocusableScrollersEnabled enterprise policy available from Chrome 127 can be used for the same purpose. Protected Audience Bidding and Auction Services The Protected Audience API (formerly known as FLEDGE) is a Privacy Sandbox proposal to serve remarketing and custom audience use cases, designed so third parties cannot track user browsing behavior across sites. This feature, Protected Audience Bidding and Auction Services, outlines a way to allow Protected Audience computation to take place on cloud servers in a trusted execution environment, rather than running locally on a user's device. Moving computations to cloud servers can help optimize the Protected Audience auction, to free up computational cycles and network bandwidth for a device. Support non-special scheme URLs Previously, Chrome's URL parser didn't support non-special URLs. The parser parses non-special URLs as if they had an \"opaque path\", which is not aligned with the URL Standard. Now, Chromium's URL parser parses non-special URLs correctly, following the URL Standard. See bit.ly/url-non-special for more details. WebAssembly JavaScript String Builtins This feature exposes common JavaScript string operations for import into WebAssembly. This lets you create and manipulate JavaScript strings from WebAssembly without support within WebAssembly. This still allows for a similar performance as supported string references. WebGPU: Dual source blending Adds the optional GPU feature \"dual-source-blending\" that enables combining two fragment shader outputs into a single framebuffer. This technique is particularly useful for applications that require complex blending operations, such as those based on Porter-Duff blend modes. By reducing the need for frequent pipeline state object changes, dual source blending can enhance performance and flexibility. Web Serial: connected attribute and RFCOMM connection events This feature adds a boolean SerialPort.connected attribute. The attribute returns true if the serial port is logically connected. For wired serial ports, a port is logically connected if the port is physically attached to the system. For wireless serial ports, a port is logically connected if the device hosting the port has any open connections to the host. Previously, only wired serial ports dispatched connect and disconnect events. With this feature, Bluetooth RFCOMM serial ports will dispatch these events when the port becomes logically connected or disconnected. This feature is intended to allow applications to detect when a Bluetooth RFCOMM serial port is available without opening the port. Learn more in Bluetooth RFCOMM updates in Web Serial. Origin trials in progress In Chrome 130 you can opt into the following new origin trials. Language Detector API A JavaScript API for detecting the language of text, with confidence levels. WebAuthn attestationFormats Support the attestationFormats field from WebAuthn level 3. WebAuthn Level 3 supports a site expressing an ordered preference for credential attestation formats in the new attestationFormats field. This feature enables support for this on Android, where multiple formats can be supported by passkey providers. Register for the WebAuthn attestationFormats trial. Deprecations and removals This version of Chrome introduces the following deprecations and removals. Visit ChromeStatus.com for lists of planned deprecations, current deprecations and previous removals. This release of Chrome removes one feature. Remove expectedImprovement in DelegatedInkTrailPresenter The expectedImprovement attribute tells web developers how much improvement the DelegatedInkTrails API will provide to their current ink latency. However, this attribute is not worth the increase to fingerprinting entropy. This release of Chrome deprecates one feature. Deprecate non-standard GPUAdapter requestAdapterInfo() method The requestAdapterInfo() asynchronous method in WebGPU is redundant because developers can already get GPUAdapterInfo synchronously using the GPUAdapter info attribute.",
  "image": "https://developer.chrome.com/static/blog/chrome-130-beta/image/thumbnail.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Rachel Andrew\" src=\"https://web.dev/images/authors/rachelandrew.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003ePublished: September 18, 2024\u003c/p\u003e\n\n\u003cp\u003eUnless otherwise noted, the following changes apply to the newest Chrome beta\nchannel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more\nabout the features listed here through the provided links or from the list on\nChromeStatus.com. Chrome 130 is beta as of September 18, 2024. You can download\nthe latest on \u003ca href=\"https://www.google.com/chrome/beta/\"\u003eGoogle.com\u003c/a\u003e for desktop or\non Google Play Store on Android.\u003c/p\u003e\n\n\u003ch2 id=\"css\" data-text=\"CSS\" tabindex=\"-1\"\u003eCSS\u003c/h2\u003e\n\n\u003cp\u003eThis release adds four new CSS features.\u003c/p\u003e\n\n\u003ch3 id=\"css_container_queries_flat_tree_lookup\" data-text=\"CSS Container Queries flat tree lookup\" tabindex=\"-1\"\u003eCSS Container Queries flat tree lookup\u003c/h3\u003e\n\n\u003cp\u003eThe specification for container queries changed to look up flat tree ancestors.\nThis change is only relevant for shadow DOM where an element will now be able to\nsee non-named containers inside shadow trees into which the element or one of\nits ancestors are slotted, even if the CSS rule does not use \u003ccode translate=\"no\" dir=\"ltr\"\u003e::part()\u003c/code\u003e or\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e::slotted()\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"css_nesting_the_nested_declarations_rule\" data-text=\"CSS Nesting: The nested declarations rule\" tabindex=\"-1\"\u003eCSS Nesting: The nested declarations rule\u003c/h3\u003e\n\n\u003cp\u003eKeeps bare declarations following a nested rule in their place, by wrapping\nthose declarations in \u003ccode translate=\"no\" dir=\"ltr\"\u003eCSSNestedDeclarations\u003c/code\u003e rules during parsing.\u003c/p\u003e\n\n\u003ch3 id=\"full_and_unprefixed_box-decoration-break_support\" data-text=\"Full and unprefixed box-decoration-break support\" tabindex=\"-1\"\u003eFull and unprefixed box-decoration-break support\u003c/h3\u003e\n\n\u003cp\u003eAdds support for \u003ccode translate=\"no\" dir=\"ltr\"\u003ebox-decoration-break: clone\u003c/code\u003e both for inline fragmentation\n(line layout) and block fragmentation (pagination for printing and multicol).\u003c/p\u003e\n\n\u003cp\u003ePreviously in Chrome, only \u003ccode translate=\"no\" dir=\"ltr\"\u003ebox-decoration-break:slice\u003c/code\u003e (the initial value) was\nsupported for block fragmentation, whereas for inline\nfragmentation,\u003ccode translate=\"no\" dir=\"ltr\"\u003ebox-decoration-break:clone\u003c/code\u003e was also supported, but only when\nusing the prefixed \u003ccode translate=\"no\" dir=\"ltr\"\u003e-webkit-box-decoration-break\u003c/code\u003e property.\u003c/p\u003e\n\n\u003ch3 id=\"allow_more_pseudo-elements_and_pseudo-classes_after_part\" data-text=\"Allow more pseudo-elements and pseudo-classes after ::part()\" tabindex=\"-1\"\u003eAllow more pseudo-elements and pseudo-classes after \u003ccode translate=\"no\" dir=\"ltr\"\u003e::part()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eCSS selectors that use the \u003ccode translate=\"no\" dir=\"ltr\"\u003e::part()\u003c/code\u003e pseudo-element are allowed to have other\nCSS pseudo-elements (except \u003ccode translate=\"no\" dir=\"ltr\"\u003e::part()\u003c/code\u003e) and many types of other CSS\npseudo-classes after them. Combinators are still not allowed after \u003ccode translate=\"no\" dir=\"ltr\"\u003e::part()\u003c/code\u003e,\nand pseudo-classes that depend on tree structure are not allowed.\u003c/p\u003e\n\n\u003cp\u003ePreviously Chrome only allowed a limited set of pseudo-classes and\npseudo-elements after \u003ccode translate=\"no\" dir=\"ltr\"\u003e::part()\u003c/code\u003e. This change allows all of the pseudo-classes\nand pseudo-elements that should be allowed. It means selectors such as\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e::part(part-name):enabled\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e::part(part-name)::marker\u003c/code\u003e are now allowed.\u003c/p\u003e\n\n\u003ch2 id=\"web_apis\" data-text=\"Web APIs\" tabindex=\"-1\"\u003eWeb APIs\u003c/h2\u003e\n\n\u003ch3 id=\"attribution_reporting_api_feature_attribution_scopes\" data-text=\"Attribution Reporting API feature (Attribution Scopes)\" tabindex=\"-1\"\u003eAttribution Reporting API feature (Attribution Scopes)\u003c/h3\u003e\n\n\u003cp\u003eThis change is based on ad tech feedback and the need for more fine grained\nfiltering controls before the attribution process takes place. It lets API\ncallers specify a field called \u0026#34;attribution scopes\u0026#34; which will be used for\nfiltering before starting the regular attribution flow. This allows API callers\nmore fine grained control over the attribution granularity and the ability to\nreceive proper attribution reports when there are multiple different advertisers\nor campaigns that all convert on the same destination site.\u003c/p\u003e\n\n\u003ch3 id=\"attribution_reporting_api_feature_debug_key_privacy_improvement\" data-text=\"Attribution Reporting API feature (debug key privacy improvement)\" tabindex=\"-1\"\u003eAttribution Reporting API feature (debug key privacy improvement)\u003c/h3\u003e\n\n\u003cp\u003eThis change helps to mitigate a potential privacy gap with debug keys.\u003c/p\u003e\n\n\u003cp\u003eCurrently the API allows a source debug key or a trigger debug key to be\nspecified if third-party cookies are available and can be set by API callers. If\neither a source or trigger debug key is specified then it will be included in\nthe attribution report. This may lead to a privacy leak if third-party cookies\nare only allowed on either the publisher or the advertiser site but not both.\u003c/p\u003e\n\n\u003cp\u003eThis change mitigates this issue by enforcing that source debug keys and trigger\ndebug keys are only included in the attribution report if they\u0026#39;re present on\nboth the source and trigger, which would mean that third-party cookies were\navailable on both the publisher and advertiser site. This change will apply to\nboth event-level reports and aggregatable reports.\u003c/p\u003e\n\n\u003ch3 id=\"compression_dictionary_transport_with_shared_brotli_and_shared_zstandard\" data-text=\"Compression dictionary transport with shared Brotli and shared Zstandard\" tabindex=\"-1\"\u003eCompression dictionary transport with shared Brotli and shared Zstandard\u003c/h3\u003e\n\n\u003cp\u003eThis feature adds support for using designated previous responses, as an\nexternal dictionary for content encoding compressing responses with Brotli or\nZstandard.\u003c/p\u003e\n\n\u003cp\u003eEnterprises might experience potential compatibility issues with enterprise\nnetwork infrastructure that intercepts HTTPS traffic and is sensitive to unknown\ncontent encodings. The enterprise policy \u003ccode translate=\"no\" dir=\"ltr\"\u003eCompressionDictionaryTransportEnabled\u003c/code\u003e\nis available to turn off the compression dictionary transport feature.\u003c/p\u003e\n\n\u003ch3 id=\"concurrent_smooth_scrollintoview\" data-text=\"Concurrent smooth scrollIntoView()\" tabindex=\"-1\"\u003eConcurrent smooth \u003ccode translate=\"no\" dir=\"ltr\"\u003escrollIntoView()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe\n\u003ca href=\"https://developer.mozilla.org/docs/Web/API/Element/scrollIntoView\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003escrollIntoView()\u003c/code\u003e\u003c/a\u003e\nmethod with \u003ccode translate=\"no\" dir=\"ltr\"\u003ebehavior: \u0026#34;smooth\u0026#34;\u003c/code\u003e lets developers create scroll containers that\nscroll to their descendants with a gentle scroll animation. This feature fixes\nChrome\u0026#39;s implementation of the API so that ongoing \u003ccode translate=\"no\" dir=\"ltr\"\u003escrollIntoView\u003c/code\u003e animations\nare not canceled by unrelated scrolls on other scroll containers.\u003c/p\u003e\n\n\u003cp\u003eThe feature also fixes cases where Chrome fails to scroll to a page\u0026#39;s fragment\nanchor because of a competing \u003ccode translate=\"no\" dir=\"ltr\"\u003escrollIntoView\u003c/code\u003e that is invoked when the page\nloads.\u003c/p\u003e\n\n\u003ch3 id=\"document_picture-in-picture_add_option_to_ignore_window_bounds_cache\" data-text=\"Document picture-in-picture: add option to ignore window bounds cache\" tabindex=\"-1\"\u003eDocument picture-in-picture: add option to ignore window bounds cache\u003c/h3\u003e\n\n\u003cp\u003eThis adds a new parameter (\u003ccode translate=\"no\" dir=\"ltr\"\u003epreferInitialWindowPlacement\u003c/code\u003e) to the document\npicture-in-picture API that, when set to true, hints to the user agent that it\nshouldn\u0026#39;t try to reuse the position or size of the previous document\npicture-in-picture from this site when opening this one.\u003c/p\u003e\n\n\u003cp\u003eOften, a document picture-in-picture window will close and re-open multiple\ntimes for the same site, such as moving a video conference to and from PiP. The\nuser agent is free to re-open the PiP window at its most recent size and\nlocation, so that it stays where the user last moved it and provides continuity\nbetween the PiP windows. However, if the new window is semantically unrelated to\nthe previous window, such as if it is a new video call, then the developer can\nuse this parameter to provide a hint to the user agent that this window might be\nbetter opened in its default position and size instead.\u003c/p\u003e\n\n\u003cp\u003eLearn about how to\n\u003ca href=\"https://developer.chrome.com/docs/web-platform/document-picture-in-picture#open_the_picture-in-picture_window_in_its_default_position_and_size\"\u003eopen the window in its default position and size\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"improved_error_reporting_in_indexeddb_for_large_value_read_failures\" data-text=\"Improved error reporting in IndexedDB for large value read failures\" tabindex=\"-1\"\u003eImproved error reporting in IndexedDB for large value read failures\u003c/h3\u003e\n\n\u003cp\u003eChange to reporting for certain error cases that were previously reported with a\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eDOMException\u003c/code\u003e and the message \u0026#34;Failed to read large IndexedDB value\u0026#34;.\u003c/p\u003e\n\n\u003cp\u003eChrome will now raise a \u003ccode translate=\"no\" dir=\"ltr\"\u003eDOMException\u003c/code\u003e with the name \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;NotFoundError\u0026#34;\u003c/code\u003e when the\nfile containing the data being read by an IDBRequest is missing from the disk so\nthat sites can take the appropriate corrective action when an unrecoverable\nfailure occurs. Corrective actions could include deleting the entry from the DB,\nnotifying the user, or re-fetching the data from servers.\u003c/p\u003e\n\n\u003ch3 id=\"keyboard_focusable_scroll_containers\" data-text=\"Keyboard focusable scroll containers\" tabindex=\"-1\"\u003eKeyboard focusable scroll containers\u003c/h3\u003e\n\n\u003cp\u003eThis feature makes scrollers without focusable children keyboard-focusable by\ndefault.\u003c/p\u003e\n\n\u003cp\u003eThis is an important improvement to help make scrollers and contents within\nscrollers more accessible to all users. You can read more about its benefits in\n\u003ca href=\"https://developer.chrome.com/blog/keyboard-focusable-scrollers\"\u003eKeyboard focusable scrollers\u003c/a\u003e. Keyboard\nfocusable scrollers will be enabled by default starting in Chrome 130. If\nwebsites need time to adjust to this new feature, there are a few options:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eThe \u003ca href=\"https://developer.chrome.com/origintrials#/view_trial/2455024746870341633\" target=\"_blank\"\u003e\nKeyboard focusable scrollers opt out deprecation trial\u003c/a\u003e\ncan be used to opt back out of the feature for a limited time on a given\nsite. This can be used through Chrome 132, ending March 18, 2025.\u003c/li\u003e\n\u003cli\u003eThe \u003ca href=\"https://chromeenterprise.google/policies/#KeyboardFocusableScrollersEnabled\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eKeyboardFocusableScrollersEnabled enterprise policy\u003c/code\u003e\u003c/a\u003e\navailable from Chrome 127 can be used for the same purpose.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"protected_audience_bidding_and_auction_services\" data-text=\"Protected Audience Bidding and Auction Services\" tabindex=\"-1\"\u003eProtected Audience Bidding and Auction Services\u003c/h3\u003e\n\n\u003cp\u003eThe Protected Audience API (formerly known as FLEDGE) is a Privacy Sandbox\nproposal to serve remarketing and custom audience use cases, designed so third\nparties cannot track user browsing behavior across sites.\u003c/p\u003e\n\n\u003cp\u003eThis feature, Protected Audience Bidding and Auction Services, outlines a way to\nallow Protected Audience computation to take place on cloud servers in a trusted\nexecution environment, rather than running locally on a user\u0026#39;s device. Moving\ncomputations to cloud servers can help optimize the Protected Audience auction,\nto free up computational cycles and network bandwidth for a device.\u003c/p\u003e\n\n\u003ch3 id=\"support_non-special_scheme_urls\" data-text=\"Support non-special scheme URLs\" tabindex=\"-1\"\u003eSupport non-special scheme URLs\u003c/h3\u003e\n\n\u003cp\u003ePreviously, Chrome\u0026#39;s URL parser didn\u0026#39;t support non-special URLs. The parser\nparses non-special URLs as if they had an \u0026#34;opaque path\u0026#34;, which is not aligned\nwith the URL Standard. Now, Chromium\u0026#39;s URL parser parses non-special URLs\ncorrectly, following the URL Standard.\u003c/p\u003e\n\n\u003cp\u003eSee \u003ca href=\"http://bit.ly/url-non-special\"\u003ebit.ly/url-non-special\u003c/a\u003e for more details.\u003c/p\u003e\n\n\u003ch3 id=\"webassembly_javascript_string_builtins\" data-text=\"WebAssembly JavaScript String Builtins\" tabindex=\"-1\"\u003eWebAssembly JavaScript String Builtins\u003c/h3\u003e\n\n\u003cp\u003eThis feature exposes common JavaScript string operations for import into\nWebAssembly. This lets you create and manipulate JavaScript strings from\nWebAssembly without support within WebAssembly. This still allows for a\nsimilar performance as supported string references.\u003c/p\u003e\n\n\u003ch3 id=\"webgpu_dual_source_blending\" data-text=\"WebGPU: Dual source blending\" tabindex=\"-1\"\u003eWebGPU: Dual source blending\u003c/h3\u003e\n\n\u003cp\u003eAdds the optional GPU feature \u0026#34;dual-source-blending\u0026#34; that enables combining two\nfragment shader outputs into a single framebuffer. This technique is\nparticularly useful for applications that require complex blending operations,\nsuch as those based on Porter-Duff blend modes. By reducing the need for\nfrequent pipeline state object changes, dual source blending can enhance\nperformance and flexibility.\u003c/p\u003e\n\n\u003ch3 id=\"web_serial_connected_attribute_and_rfcomm_connection_events\" data-text=\"Web Serial: connected attribute and RFCOMM connection events\" tabindex=\"-1\"\u003eWeb Serial: \u003ccode translate=\"no\" dir=\"ltr\"\u003econnected\u003c/code\u003e attribute and RFCOMM connection events\u003c/h3\u003e\n\n\u003cp\u003eThis feature adds a boolean \u003ccode translate=\"no\" dir=\"ltr\"\u003eSerialPort.connected\u003c/code\u003e attribute. The attribute\nreturns \u003ccode translate=\"no\" dir=\"ltr\"\u003etrue\u003c/code\u003e if the serial port is logically connected. For wired serial\nports, a port is logically connected if the port is physically attached to the\nsystem. For wireless serial ports, a port is logically connected if the device\nhosting the port has any open connections to the host.\u003c/p\u003e\n\n\u003cp\u003ePreviously, only wired serial ports dispatched connect and disconnect events.\nWith this feature, Bluetooth RFCOMM serial ports will dispatch these events when\nthe port becomes logically connected or disconnected.\u003c/p\u003e\n\n\u003cp\u003eThis feature is intended to allow applications to detect when a Bluetooth RFCOMM\nserial port is available without opening the port.\u003c/p\u003e\n\n\u003cp\u003eLearn more in\n\u003ca href=\"https://developer.chrome.com/blog/bluetooth-rfcomm-updates-web-serial\"\u003eBluetooth RFCOMM updates in Web Serial\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"origin_trials_in_progress\" data-text=\"Origin trials in progress\" tabindex=\"-1\"\u003eOrigin trials in progress\u003c/h2\u003e\n\n\u003cp\u003eIn Chrome 130 you can opt into the following new \u003ca href=\"https://developer.chrome.com/docs/web-platform/origin-trials\"\u003eorigin trials\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"language_detector_api\" data-text=\"Language Detector API\" tabindex=\"-1\"\u003eLanguage Detector API\u003c/h3\u003e\n\n\u003cp\u003eA JavaScript API for \u003ca href=\"https://developer.chrome.com/blog/august2024-language-detection\"\u003edetecting the language of text\u003c/a\u003e,\nwith confidence levels.\u003c/p\u003e\n\n\u003ch3 id=\"webauthn_attestationformats\" data-text=\"WebAuthn attestationFormats\" tabindex=\"-1\"\u003eWebAuthn attestationFormats\u003c/h3\u003e\n\n\u003cp\u003eSupport the \u003ccode translate=\"no\" dir=\"ltr\"\u003eattestationFormats\u003c/code\u003e field from WebAuthn level 3.\u003c/p\u003e\n\n\u003cp\u003eWebAuthn Level 3 supports a site expressing an ordered preference for credential\nattestation formats in the new \u003ccode translate=\"no\" dir=\"ltr\"\u003eattestationFormats\u003c/code\u003e field. This feature enables\nsupport for this on Android, where multiple formats can be supported by passkey\nproviders.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://developer.chrome.com/origintrials#/view_trial/1428204031829868545\" target=\"_blank\"\u003eRegister for the WebAuthn attestationFormats trial.\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"deprecations_and_removals\" data-text=\"Deprecations and removals\" tabindex=\"-1\"\u003eDeprecations and removals\u003c/h2\u003e\n\n\u003cp\u003eThis version of Chrome introduces the following deprecations and removals.\nVisit\n\u003ca href=\"https://chromestatus.com\"\u003eChromeStatus.com\u003c/a\u003e\nfor lists of planned deprecations, current deprecations\nand previous removals.\u003c/p\u003e\n\n\u003cp\u003eThis release of Chrome removes one feature.\u003c/p\u003e\n\n\u003ch3 id=\"remove_expectedimprovement_in_delegatedinktrailpresenter\" data-text=\"Remove expectedImprovement in DelegatedInkTrailPresenter\" tabindex=\"-1\"\u003eRemove \u003ccode translate=\"no\" dir=\"ltr\"\u003eexpectedImprovement\u003c/code\u003e in \u003ccode translate=\"no\" dir=\"ltr\"\u003eDelegatedInkTrailPresenter\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eexpectedImprovement\u003c/code\u003e attribute tells web developers how much improvement the\nDelegatedInkTrails API will provide to their current ink latency. However, this\nattribute is not worth the increase to fingerprinting entropy.\u003c/p\u003e\n\n\u003cp\u003eThis release of Chrome deprecates one feature.\u003c/p\u003e\n\n\u003ch3 id=\"deprecate_non-standard_gpuadapter_requestadapterinfo_method\" data-text=\"Deprecate non-standard GPUAdapter requestAdapterInfo() method\" tabindex=\"-1\"\u003eDeprecate non-standard GPUAdapter \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestAdapterInfo()\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestAdapterInfo()\u003c/code\u003e asynchronous method in WebGPU is redundant because\ndevelopers can already get \u003ccode translate=\"no\" dir=\"ltr\"\u003eGPUAdapterInfo\u003c/code\u003e synchronously using the \u003ccode translate=\"no\" dir=\"ltr\"\u003eGPUAdapter\u003c/code\u003e\n\u003ccode translate=\"no\" dir=\"ltr\"\u003einfo\u003c/code\u003e attribute.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
