{
  "id": "9da90149-22d2-48a4-b790-d858297ddcb5",
  "title": "Toe Dipping Into View Transitions",
  "link": "https://css-tricks.com/toe-dipping-into-view-transitions/",
  "description": "The View Transitions API is more a set of features than it is about any one particular thing. And it gets complex fast. But in this post, we’ll cover a couple ways to dip your toes into the waters without having to dive in head-first. Toe Dipping Into View Transitions originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Fri, 21 Feb 2025 14:34:58 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "view transitions"
  ],
  "byline": "Geoff Graham",
  "length": 5116,
  "excerpt": "The View Transitions API is more a set of features than it is about any one particular thing. And it gets complex fast. But in this post, we’ll cover a couple ways to dip your toes into the waters without having to dive in head-first.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "I’ll be honest and say that the View Transition API intimidates me more than a smidge. There are plenty of tutorials with the most impressive demos showing how we can animate the transition between two pages, and they usually start with the simplest of all examples. @view-transition { navigation: auto; } That’s usually where the simplicity ends and the tutorials venture deep into JavaScript territory. There’s nothing wrong with that, of course, except that it’s a mental leap for someone like me who learns by building up rather than leaping through. So, I was darned inspired when I saw Uncle Dave and Jim Neilsen trading tips on a super practical transition: post titles. You can see how it works on Jim’s site: This is the perfect sort of toe-dipping experiment I like for trying new things. And it starts with the same little @view-transition snippet which is used to opt both pages into the View Transitions API: the page we’re on and the page we’re navigating to. From here on out, we can think of those as the “new” page and the “old” page, respectively. I was able to get the same effect going on my personal blog: Perfect little exercise for a blog, right? It starts by setting the view-transition-name on the elements we want to participate in the transition which, in this case, is the post title on the “old” page and the post title on the “new” page. So, if this is our markup: \u003ch1 class=\"post-title\"\u003eNotes\u003c/h1\u003e \u003ca class=\"post-link\" href=\"/link-to-post\"\u003e\u003c/a\u003e …we can give them the same view-transition-name in CSS: .post-title { view-transition-name: post-title; } .post-link { view-transition-name: post-title; } Dave is quick to point out that we can make sure we respect users who prefer reduced motion and only apply this if their system preferences allow for motion: @media not (prefers-reduced-motion: reduce) { .post-title { view-transition-name: post-title; } .post-link { view-transition-name: post-title; } } If those were the only two elements on the page, then this would work fine. But what we have is a list of post links and all of them have to have their own unique view-transition-name. This is where Jim got a little stuck in his work because how in the heck do you accomplish that when new blog posts are published all the time? Do you have to edit your CSS and come up with a new transition name each and every time you want to post new content? Nah, there’s got to be a better way. And there is. Or, at least there will be. It’s just not standard yet. Bramus, in fact, wrote about it very recently when discussing Chrome’s work on the attr() function which will be able to generate a series of unique identifiers in a single declaration. Check out this CSS from the future: \u003cstyle\u003e .card[id] { view-transition-name: attr(id type(\u003ccustom-ident\u003e), none); /* card-1, card-2, card-3, … */ view-transition-class: card; } \u003c/style\u003e \u003cdiv class=\"cards\"\u003e \u003cdiv class=\"card\" id=\"card-1\"\u003e\u003c/div\u003e \u003cdiv class=\"card\" id=\"card-2\"\u003e\u003c/div\u003e \u003cdiv class=\"card\" id=\"card-3\"\u003e\u003c/div\u003e \u003cdiv class=\"card\" id=\"card-4\"\u003e\u003c/div\u003e \u003c/div\u003e Daaaaa-aaaang that is going to be handy! I want it now, darn it! Gotta have to wait not only for Chrome to develop it, but for other browsers to adopt and implement it as well, so who knows when we’ll actually get it. For now, the best bet is to use a little programmatic logic directly in the template. My site runs on WordPress, so I’ve got access to PHP and can generate an inline style that sets the view-transition-name on both elements. The post title is in the template for my individual blog posts. That’s the single.php file in WordPress parlance. \u003c?php the_title( '\u003ch1 class=\"post-single__title\" style=\"view-transition-name: post-' . get_the_id() . '\"\u003e', '\u003c/h1\u003e' ); ?\u003e The post links are in the template for post archives. That’s typically archive.php in WordPress: \u003c?php the_title( '\u003ch2 class=\"post-link\u003e\u003ca href=\"' . esc_url( get_permalink() ) .'\" rel=\"bookmark\" style=\"view-transition-name: post-' . get_the_id() . '\"\u003e', '\u003c/a\u003e\u003c/h2\u003e' ); ?\u003e See what’s happening there? The view-transition-name property is set on both transition elements directly inline, using PHP to generate the name based on the post’s assigned ID in WordPress. Another way to do it is to drop a \u003cstyle\u003e tag in the template and plop the logic in there. Both are equally icky compared to what attr() will be able to do in the future, so pick your poison. The important thing is that now both elements share the same view-transition-name and that we also have already opted into @view-transition. With those two ingredients in place, the transition works! We don’t even need to define @keyframes (but you totally could) because the default transition does all the heavy lifting. In the same toe-dipping spirit, I caught the latest issue of Modern Web Weekly and love this little sprinkle of view transition on radio inputs: Notice the JavaScript that is needed to prevent the radio’s default clicking behavior in order to allow the transition to run before the input is checked.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/12/css-tricks-logo-gradient-outline.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI’ll be honest and say that the View Transition API intimidates me more than a smidge. There are plenty of tutorials with the most impressive demos showing how we can animate the transition between two pages, and they usually start with the \u003ca href=\"https://css-tricks.com/snippets/css/basic-view-transition/\"\u003esimplest of all examples\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@view-transition {\n  navigation: auto;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat’s usually where the simplicity ends and the tutorials venture deep into JavaScript territory. There’s nothing wrong with that, of course, except that it’s a mental leap for someone like me who learns by building up rather than leaping through. So, I was darned inspired when I saw \u003ca href=\"https://daverupert.com/2023/05/getting-started-view-transitions/\" rel=\"noopener\"\u003eUncle Dave\u003c/a\u003e and \u003ca href=\"https://blog.jim-nielsen.com/2025/view-transition-name-gotchas/\" rel=\"noopener\"\u003eJim Neilsen\u003c/a\u003e trading tips on a super practical transition: post titles.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can see how it works on Jim’s site:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2025/02/Screen-Recording-2025-02-14-at-2.22.14 PM.mov\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis is the perfect sort of toe-dipping experiment I like for trying new things. And it starts with the same little \u003ccode\u003e@view-transition\u003c/code\u003e snippet which is used to opt both pages into the View Transitions API: the page we’re on and the page we’re navigating to. From here on out, we can think of those as the “new” page and the “old” page, respectively.\u003c/p\u003e\n\n\n\n\u003cp\u003eI was able to get the same effect going on my personal blog:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2025/02/Screen-Recording-2025-02-14-at-2.31.25 PM.mov\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003ePerfect little exercise for a blog, right? It starts by setting the \u003ccode\u003eview-transition-name\u003c/code\u003e on the elements we want to participate in the transition which, in this case, is the post title on the “old” page and the post title on the “new” page.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"2460\" height=\"1570\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-14-at-2.34.28%E2%80%AFPM.png?resize=2460%2C1570\u0026amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-14-at-2.34.28%E2%80%AFPM.png?w=2460\u0026amp;ssl=1 2460w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-14-at-2.34.28%E2%80%AFPM.png?resize=300%2C191\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-14-at-2.34.28%E2%80%AFPM.png?resize=1024%2C654\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-14-at-2.34.28%E2%80%AFPM.png?resize=768%2C490\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-14-at-2.34.28%E2%80%AFPM.png?resize=1536%2C980\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-14-at-2.34.28%E2%80%AFPM.png?resize=2048%2C1307\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSo, if this is our markup:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;h1 class=\u0026#34;post-title\u0026#34;\u0026gt;Notes\u0026lt;/h1\u0026gt;\n\u0026lt;a class=\u0026#34;post-link\u0026#34; href=\u0026#34;/link-to-post\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…we can give them the same \u003ccode\u003eview-transition-name\u003c/code\u003e in CSS:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.post-title { view-transition-name: post-title; }\n.post-link { view-transition-name: post-title; }\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eDave is quick to point out that we can make sure we respect users who prefer reduced motion and only apply this if their system preferences allow for motion:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@media not (prefers-reduced-motion: reduce) {\n  .post-title { view-transition-name: post-title; }\n  .post-link { view-transition-name: post-title; }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIf those were the only two elements on the page, then this would work fine. But what we have is a list of post links and all of them have to have their own unique \u003ccode\u003eview-transition-name\u003c/code\u003e. This is where Jim got a little stuck in his work because how in the heck do you accomplish that when new blog posts are published all the time? Do you have to edit your CSS and come up with a new transition name each and every time you want to post new content? Nah, there’s got to be a better way.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd there is. Or, at least there will be. It’s just not standard yet. Bramus, in fact, wrote about it very recently when \u003ca href=\"https://www.bram.us/2025/01/20/css-attr-gets-an-upgrade/\" rel=\"noopener\"\u003ediscussing Chrome’s work on the \u003ccode\u003eattr()\u003c/code\u003e function\u003c/a\u003e which will be able to generate a series of unique identifiers in a single declaration. Check out this CSS from the future:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;style\u0026gt;\n  .card[id] {\n    view-transition-name: attr(id type(\u0026lt;custom-ident\u0026gt;), none); /* card-1, card-2, card-3, … */\n    view-transition-class: card;\n  }\n\u0026lt;/style\u0026gt;\n\n\u0026lt;div class=\u0026#34;cards\u0026#34;\u0026gt;\n  \u0026lt;div class=\u0026#34;card\u0026#34; id=\u0026#34;card-1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;card\u0026#34; id=\u0026#34;card-2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;card\u0026#34; id=\u0026#34;card-3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n  \u0026lt;div class=\u0026#34;card\u0026#34; id=\u0026#34;card-4\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eDaaaaa-aaaang that is going to be handy! I want it \u003cem\u003enow\u003c/em\u003e, darn it! Gotta have to wait not only for Chrome to develop it, but for other browsers to adopt and implement it as well, so who knows when we’ll actually get it. For now, the best bet is to use a little programmatic logic directly in the template. My site runs on WordPress, so I’ve got access to PHP and can generate an inline style that sets the \u003ccode\u003eview-transition-name\u003c/code\u003e on both elements.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe post title is in the template for my individual blog posts. That’s the \u003ccode\u003esingle.php\u003c/code\u003e file in WordPress parlance.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;?php the_title( \n  \u0026#39;\u0026lt;h1 class=\u0026#34;post-single__title\u0026#34; style=\u0026#34;view-transition-name: post-\u0026#39; . get_the_id() . \u0026#39;\u0026#34;\u0026gt;\u0026#39;, \u0026#39;\u0026lt;/h1\u0026gt;\u0026#39;\n); ?\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe post links are in the template for post archives. That’s typically \u003ccode\u003earchive.php\u003c/code\u003e in WordPress:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;?php the_title(\n  \u0026#39;\u0026lt;h2 class=\u0026#34;post-link\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39; . esc_url( get_permalink() ) .\u0026#39;\u0026#34; rel=\u0026#34;bookmark\u0026#34; style=\u0026#34;view-transition-name: post-\u0026#39; . get_the_id() . \u0026#39;\u0026#34;\u0026gt;\u0026#39;, \u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\u0026#39; \n); ?\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSee what’s happening there? The \u003ccode\u003eview-transition-name\u003c/code\u003e property is set on both transition elements directly inline, using PHP to generate the name based on the post’s assigned ID in WordPress. Another way to do it is to drop a \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tag in the template and plop the logic in there. Both are equally icky compared to what \u003ccode\u003eattr()\u003c/code\u003e will be able to do in the future, so pick your poison.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe important thing is that now both elements share the same \u003ccode\u003eview-transition-name\u003c/code\u003e and that we also have already opted into \u003ccode\u003e@view-transition\u003c/code\u003e. With those two ingredients in place, the transition works! We don’t even need to define \u003ccode\u003e@keyframes\u003c/code\u003e (but you totally could) because the default transition does all the heavy lifting. \u003c/p\u003e\n\n\n\n\u003cp\u003eIn the same toe-dipping spirit, I caught the latest issue of \u003ca href=\"https://modern-web-weekly.ghost.io\" rel=\"noopener\"\u003eModern Web Weekly\u003c/a\u003e and love this little sprinkle of view transition on radio inputs:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eNotice the JavaScript that is needed to prevent the radio’s default clicking behavior in order to allow the transition to run before the input is checked.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-02-21T07:34:58-07:00",
  "modifiedTime": "2025-02-21T08:57:47-07:00"
}
