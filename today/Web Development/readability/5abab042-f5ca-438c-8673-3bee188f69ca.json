{
  "id": "5abab042-f5ca-438c-8673-3bee188f69ca",
  "title": "What's New in WebGPU (Chrome 133)",
  "link": "https://developer.chrome.com/blog/new-in-webgpu-133?hl=en",
  "description": "Additional unorm8x4-bgra and 1-component vertex formats, allow unknown limits to be requested with undefined value, WGSL alignment rules changes, WGSL performance gains with discard, and much more.",
  "author": "",
  "published": "Wed, 29 Jan 2025 08:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "GitHub",
  "length": 12390,
  "excerpt": "Additional unorm8x4-bgra and 1-component vertex formats, allow unknown limits to be requested with undefined value, WGSL alignment rules changes, WGSL performance gains with discard, and much more.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v0f39da1ecc369fa6a1c816bfa5d8f549228499e733c9bd8becc473543aa6caa2/chrome/images/favicon.png",
  "text": "Stay organized with collections Save and categorize content based on your preferences. Published: January 29, 2025 Additional unorm8x4-bgra and 1-component vertex formats The \"unorm8x4-bgra\" vertex format and the following 1-component vertex formats have been added: \"uint8\", \"sint8\", \"unorm8\", \"snorm8\", \"uint16\", \"sint16\", \"unorm16\", \"snorm16\", and \"float16\". The \"unorm8x4-bgra\" vertex format makes it slightly more convenient to load BGRA-encoded vertex colors while keeping the same shader. Additionally, the 1-component vertex format lets you request only the data that is necessary when previously at least twice as much was required for 8 and 16-bit data types. See the chromestatus entry and issue 376924407. Allow unknown limits to be requested with undefined value To make the WebGPU API less brittle as it evolves, you can now request unknown limits with undefined value when requesting a GPU device. This is useful in the following application code for example where adapter.limits.someLimit can be undefined if someLimit doesn't exist anymore. See spec PR 4781. const adapter = await navigator.gpu.requestAdapter(); const device = await adapter.requestDevice({ requiredLimits: { someLimit: adapter.limits.someLimit }, // someLimit can be undefined }); WGSL alignment rules changes It is no longer possible to provide a too-small alignment value for a struct member as it is now required that @align(n) divides RequiredAlignOf for all structs. This breaking change simplifies usage of the WGSL language and makes it more compatible with Firefox and Safari. You can find sample code showing differences between Tint, Naga, and WebKit compilers in the spec PR. WGSL performance gains with discard Due to a significant performance drop observed when rendering a complex screen-space reflections (SSR) effect, the implementation of the discard statement uses the platform-provided semantics for demoting to a helper invocation when available. This improves the performance of shaders that use discard. See issue 372714384. Use VideoFrame displaySize for external textures The displayWidth and displayHeight dimensions should be used as the apparent size of the GPUExternalTexture when importing a VideoFrame according to the WebGPU spec. However the visible size was incorrectly used causing issues when trying to use textureLoad() on a GPUExternalTexture. This is now fixed. See issue 377574981. Handle images with non-default orientations using copyExternalImageToTexture The copyExternalImageToTexture() GPUQueue method is used to copy the contents of an image or canvas into a texture. It now properly handles images with non-default orientations. This was not the case before when the source was an ImageBitmap with imageOrientation \"from-image\" or an image with a non-default orientation. See issue 384858956. Improving developer experience It can be surprising when adapter.limits shows high values, but you don't realize you need to explicitly request a higher limit when requesting a GPU device. Failing to do so can result in unexpectedly hitting limits later on. To help you, the error messages have been expanded with hints that tell you to explicitly request a higher limit when no limit was specified in requiredLimits when calling requestDevice(). See issue 42240683. The following example shows you an improved error message logged in the DevTools console when creating a GPU buffer with a size exceeding the default max buffer size device limit. const adapter = await navigator.gpu.requestAdapter(); const device = await adapter.requestDevice(); // Create a GPU buffer with a size exceeding the default max buffer size device limit. const size = device.limits.maxBufferSize + 1; const buffer = device.createBuffer({ size, usage: GPUBufferUsage.MAP_READ }); device.queue.submit([]); ⚠️ Buffer size (268435457) exceeds the max buffer size limit (268435456). This adapter supports a higher maxBufferSize of 4294967296, which can be specified in requiredLimits when calling requestDevice(). Limits differ by hardware, so always check the adapter limits prior to requesting a higher limit. - While calling [Device].CreateBuffer([BufferDescriptor]). Enable compatibility mode with featureLevel Requesting a GPU adapter in the experimental compatibility mode is now possible by setting the standardized featureLevel option to \"compatibility\". The \"core\" (default) and \"compatibility\" strings are the only values allowed. See the following example and spec PR 4897. // Request a GPU adapter in compatibility mode const adapter = await navigator.gpu.requestAdapter({ featureLevel: \"compatibility\" }); if (adapter?.featureLevel === \"compatibility\") { // Any devices created from this adapter will support only compatibility mode. } The featureLevel option replaces the non-standardized compatibilityMode option while the non-standardized featureLevel attribute replaces the isCompatibilityMode attribute. As it's still experimental, you need to run Chrome with the \"Unsafe WebGPU Support\" flag at chrome://flags/#enable-unsafe-webgpu for now. Check out webgpureport.org to play with it. Experimental subgroup features cleanup The deprecated \"chromium-experimental-subgroups\" and \"chromium-experimental-subgroup-uniform-control-flow\" experimental subgroup features are removed. See issue 377868468. The \"subgroups\" experimental feature is all you need now when experimenting with subgroups. The \"subgroups-f16\" experimental feature is deprecated and will soon be removed. You can use f16 values with subgroups when your application requests both \"shader-f16\" and \"subgroups\" features. See issue 380244620. Deprecate maxInterStageShaderComponents limit The maxInterStageShaderComponents limit is deprecated due to a combination of factors: Redundancy with maxInterStageShaderVariables: This limit already serves a similar purpose, controlling the amount of data passed between shader stages. Minor discrepancies: While there are slight differences in how the two limits are calculated, these differences are minor and can be effectively managed within the maxInterStageShaderVariables limit. Simplification: Removing maxInterStageShaderComponents streamlines the shader interface and reduces complexity for developers. Instead of managing two separate limits with subtle differences, they can focus on the more appropriately named and comprehensive maxInterStageShaderVariables. The goal is to fully remove it in Chrome 135. See intent to deprecate and issue 364338810. Dawn updates The wgpu::Device::GetAdapterInfo(adapterInfo) lets you get adapter info directly from a wgpu::Device. See issue 376600838. The WGPUProgrammableStageDescriptor struct has been renamed to WGPUComputeState to make compute state consistent with vertex and fragment states. See issue 379059434. The wgpu::VertexStepMode::VertexBufferNotUsed enum value has been removed. A vertex buffer layout that is not used can now be expressed with {.stepMode=wgpu::VertexStepMode::Undefined, .attributeCount=0}. See issue 383147017. This covers only some of the key highlights. Check out the exhaustive list of commits. What's New in WebGPU A list of everything that has been covered in the What's New in WebGPU series. Chrome 133 Additional unorm8x4-bgra and 1-component vertex formats Allow unknown limits to be requested with undefined value WGSL alignment rules changes WGSL performance gains with discard Use VideoFrame displaySize for external textures Handle images with non-default orientations using copyExternalImageToTexture Improving developer experience Enable compatibility mode with featureLevel Experimental subgroup features cleanup Deprecate maxInterStageShaderComponents limit Dawn updates Chrome 132 Texture view usage 32-bit float textures blending GPUDevice adapterInfo attribute Configuring canvas context with invalid format throw JavaScript error Filtering sampler restrictions on textures Extended subgroups experimentation Improving developer experience Experimental support for 16-bit normalized texture formats Dawn updates Chrome 131 Clip distances in WGSL GPUCanvasContext getConfiguration() Point and line primitives must not have depth bias Inclusive scan built-in functions for subgroups Experimental support for multi-draw indirect Shader module compilation option strict math Remove GPUAdapter requestAdapterInfo() Dawn updates Chrome 130 Dual source blending Shader compilation time improvements on Metal Deprecation of GPUAdapter requestAdapterInfo() Dawn updates Chrome 129 HDR support with canvas tone mapping mode Expanded subgroups support Dawn updates Chrome 128 Experimenting with subgroups Deprecate setting depth bias for lines and points Hide uncaptured error DevTools warning if preventDefault WGSL interpolate sampling first and either Dawn updates Chrome 127 Experimental support for OpenGL ES on Android GPUAdapter info attribute WebAssembly interop improvements Improved command encoder errors Dawn updates Chrome 126 Increase maxTextureArrayLayers limit Buffer upload optimization for Vulkan backend Shader compilation time improvements Submitted command buffers must be unique Dawn updates Chrome 125 Subgroups (feature in development) Render to slice of 3D texture Dawn updates Chrome 124 Read-only and read-write storage textures Service workers and shared workers support New adapter information attributes Bug fixes Dawn updates Chrome 123 DP4a built-in functions support in WGSL Unrestricted pointer parameters in WGSL Syntax sugar for dereferencing composites in WGSL Separate read-only state for stencil and depth aspects Dawn updates Chrome 122 Expand reach with compatibility mode (feature in development) Increase maxVertexAttributes limit Dawn updates Chrome 121 Support WebGPU on Android Use DXC instead of FXC for shader compilation on Windows Timestamp queries in compute and render passes Default entry points to shader modules Support display-p3 as GPUExternalTexture color space Memory heaps info Dawn updates Chrome 120 Support for 16-bit floating-point values in WGSL Push the limits Changes to depth-stencil state Adapter information updates Timestamp queries quantization Spring-cleaning features Chrome 119 Filterable 32-bit float textures unorm10-10-10-2 vertex format rgb10a2uint texture format Dawn updates Chrome 118 HTMLImageElement and ImageData support in copyExternalImageToTexture() Experimental support for read-write and read-only storage texture Dawn updates Chrome 117 Unset vertex buffer Unset bind group Silence errors from async pipeline creation when device is lost SPIR-V shader module creation updates Improving developer experience Caching pipelines with automatically generated layout Dawn updates Chrome 116 WebCodecs integration Lost device returned by GPUAdapter requestDevice() Keep video playback smooth if importExternalTexture() is called Spec conformance Improving developer experience Dawn updates Chrome 115 Supported WGSL language extensions Experimental support for Direct3D 11 Get discrete GPU by default on AC power Improving developer experience Dawn updates Chrome 114 Optimize JavaScript getCurrentTexture() on unconfigured canvas throws InvalidStateError WGSL updates Dawn updates Chrome 113 Use WebCodecs VideoFrame source in importExternalTexture() Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-01-29 UTC. [[[\"Easy to understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved my problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing the information I need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / too many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out of date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2025-01-29 UTC.\"],[],[]]",
  "image": "https://developer.chrome.com/static/blog/new-in-webgpu-133/image/new-in-webgpu-133.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv role=\"main\" id=\"main-content\" has-sidebar=\"\"\u003e\n          \n          \n          \n          \u003cdevsite-content\u003e\n            \n              \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003carticle\u003e\n  \n  \n  \n  \n  \n\n  \n  \n    \n  \u003cdevsite-feature-tooltip ack-key=\"AckCollectionsBookmarkTooltipDismiss\" analytics-category=\"Site-Wide Custom Events\" analytics-action-show=\"Callout Profile displayed\" analytics-action-close=\"Callout Profile dismissed\" analytics-label=\"Create Collection Callout\" dismiss-button=\"true\" id=\"devsite-collections-dropdown\" dismiss-button-text=\"Dismiss\" close-button-text=\"Got it\"\u003e\n\n    \n    \u003cdevsite-bookmark\u003e\u003c/devsite-bookmark\u003e\n\n    \u003cspan slot=\"popout-heading\"\u003e\n      \n      Stay organized with collections\n    \u003c/span\u003e\n    \u003cspan slot=\"popout-contents\"\u003e\n      \n      Save and categorize content based on your preferences.\n    \u003c/span\u003e\n  \u003c/devsite-feature-tooltip\u003e\n  \n  \n\n  \u003cdevsite-toc depth=\"2\" devsite-toc-embedded=\"\"\u003e\n  \u003c/devsite-toc\u003e\n  \n    \n  \n\n  \n\n\n\n\n\n\n\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"François Beaufort\" src=\"https://web.dev/images/authors/beaufortfrancois.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003e\n  Published: January 29, 2025\n\u003c/p\u003e\n\n\n\u003ch2 id=\"additional_unorm8x4-bgra_and_1-component_vertex_formats\" data-text=\"Additional unorm8x4-bgra and 1-component vertex formats\" tabindex=\"-1\"\u003eAdditional unorm8x4-bgra and 1-component vertex formats\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;unorm8x4-bgra\u0026#34;\u003c/code\u003e vertex format and the following 1-component vertex formats have been added: \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;uint8\u0026#34;\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;sint8\u0026#34;\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;unorm8\u0026#34;\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;snorm8\u0026#34;\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;uint16\u0026#34;\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;sint16\u0026#34;\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;unorm16\u0026#34;\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;snorm16\u0026#34;\u003c/code\u003e, and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;float16\u0026#34;\u003c/code\u003e.\nThe \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;unorm8x4-bgra\u0026#34;\u003c/code\u003e vertex format makes it slightly more convenient to load BGRA-encoded vertex colors while keeping the same shader. Additionally, the 1-component vertex format lets you request only the data that is necessary when previously at least twice as much was required for 8 and 16-bit data types. See the \u003ca href=\"https://chromestatus.com/feature/4609840973086720\"\u003echromestatus entry\u003c/a\u003e and \u003ca href=\"https://issues.chromium.org/issues/376924407\"\u003eissue 376924407\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"allow_unknown_limits_to_be_requested_with_undefined_value\" data-text=\"Allow unknown limits to be requested with undefined value\" tabindex=\"-1\"\u003eAllow unknown limits to be requested with undefined value\u003c/h2\u003e\n\n\u003cp\u003eTo make the WebGPU API less brittle as it evolves, you can now request unknown limits with \u003ccode translate=\"no\" dir=\"ltr\"\u003eundefined\u003c/code\u003e value when requesting a GPU device. This is useful in the following application code for example where \u003ccode translate=\"no\" dir=\"ltr\"\u003eadapter.limits.someLimit\u003c/code\u003e can be \u003ccode translate=\"no\" dir=\"ltr\"\u003eundefined\u003c/code\u003e if \u003ccode translate=\"no\" dir=\"ltr\"\u003esomeLimit\u003c/code\u003e doesn\u0026#39;t exist anymore. See \u003ca href=\"https://github.com/gpuweb/gpuweb/pull/4781\"\u003espec PR 4781\u003c/a\u003e.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enavigator\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egpu\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestAdapter\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestDevice\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003erequiredLimits\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esomeLimit\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elimits\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esomeLimit\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e// someLimit can be undefined\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch2 id=\"wgsl_alignment_rules_changes\" data-text=\"WGSL alignment rules changes\" tabindex=\"-1\"\u003eWGSL alignment rules changes\u003c/h2\u003e\n\n\u003cp\u003eIt is no longer possible to provide a too-small alignment value for a struct member as it is now required that \u003ccode translate=\"no\" dir=\"ltr\"\u003e@align(n)\u003c/code\u003e divides \u003ca href=\"https://gpuweb.github.io/gpuweb/wgsl/#requiredalignof\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eRequiredAlignOf\u003c/code\u003e\u003c/a\u003e for all structs. This breaking change simplifies usage of the WGSL language and makes it more compatible with Firefox and Safari. You can find sample code showing differences between Tint, Naga, and WebKit compilers in the \u003ca href=\"https://github.com/gpuweb/gpuweb/pull/4978\"\u003espec PR\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"wgsl_performance_gains_with_discard\" data-text=\"WGSL performance gains with discard\" tabindex=\"-1\"\u003eWGSL performance gains with discard\u003c/h2\u003e\n\n\u003cp\u003eDue to a significant performance drop observed when rendering a complex screen-space reflections (SSR) effect, the implementation of the \u003ca href=\"https://gpuweb.github.io/gpuweb/wgsl/#discard-statement\"\u003ediscard statement\u003c/a\u003e uses the platform-provided semantics for demoting to a helper invocation when available. This improves the performance of shaders that use discard. See \u003ca href=\"https://issues.chromium.org/372714384\"\u003eissue 372714384\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"use_videoframe_displaysize_for_external_textures\" data-text=\"Use VideoFrame displaySize for external textures\" tabindex=\"-1\"\u003eUse VideoFrame displaySize for external textures\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplayWidth\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplayHeight\u003c/code\u003e dimensions should be used as the apparent size of the GPUExternalTexture when importing a VideoFrame according to the WebGPU spec. However the visible size was incorrectly used causing issues when trying to use \u003ccode translate=\"no\" dir=\"ltr\"\u003etextureLoad()\u003c/code\u003e on a GPUExternalTexture. This is now fixed. See \u003ca href=\"https://issues.chromium.org/issues/377574981\"\u003eissue 377574981\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"handle_images_with_non-default_orientations_using_copyexternalimagetotexture\" data-text=\"Handle images with non-default orientations using copyExternalImageToTexture\" tabindex=\"-1\"\u003eHandle images with non-default orientations using copyExternalImageToTexture\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003ecopyExternalImageToTexture()\u003c/code\u003e GPUQueue method is used to copy the contents of an image or canvas into a texture. It now properly handles images with non-default orientations. This was not the case before when the source was an ImageBitmap with \u003ccode translate=\"no\" dir=\"ltr\"\u003eimageOrientation\u003c/code\u003e \u003ca href=\"https://developer.mozilla.org/docs/Web/API/Window/createImageBitmap#from-image\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;from-image\u0026#34;\u003c/code\u003e\u003c/a\u003e or an image with a non-default orientation. See \u003ca href=\"https://issues.chromium.org/issues/384858956\"\u003eissue 384858956\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"improving_developer_experience\" data-text=\"Improving developer experience\" tabindex=\"-1\"\u003eImproving developer experience\u003c/h2\u003e\n\n\u003cp\u003eIt can be surprising when \u003ccode translate=\"no\" dir=\"ltr\"\u003eadapter.limits\u003c/code\u003e shows high values, but you don\u0026#39;t realize you need to explicitly request a higher limit when requesting a GPU device. Failing to do so can result in unexpectedly hitting limits later on.\u003c/p\u003e\n\n\u003cp\u003eTo help you, the error messages have been expanded with hints that tell you to explicitly request a higher limit when no limit was specified in \u003ccode translate=\"no\" dir=\"ltr\"\u003erequiredLimits\u003c/code\u003e when calling \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestDevice()\u003c/code\u003e. See \u003ca href=\"https://issues.chromium.org/issues/42240683\"\u003eissue 42240683\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe following example shows you an improved error message logged in the DevTools console when creating a GPU buffer with a size exceeding the default max buffer size device limit.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enavigator\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egpu\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestAdapter\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestDevice\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\n\n\u003cspan\u003e// Create a GPU buffer with a size exceeding the default max buffer size device limit.\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elimits\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emaxBufferSize\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ebuffer\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ecreateBuffer\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eusage\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eGPUBufferUsage\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eMAP_READ\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\n\n\u003cspan\u003edevice\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equeue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esubmit\u003c/span\u003e\u003cspan\u003e([]);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"Text output\"\u003e\u003cspan\u003e⚠️ Buffer size (268435457) exceeds the max buffer size limit (268435456). This adapter supports a higher maxBufferSize of 4294967296, which can be specified in requiredLimits when calling requestDevice(). Limits differ by hardware, so always check the adapter limits prior to requesting a higher limit.\u003c/span\u003e\n\u003cspan\u003e- While calling [Device].CreateBuffer([BufferDescriptor]).\u003c/span\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\n\u003ch2 id=\"enable_compatibility_mode_with_featurelevel\" data-text=\"Enable compatibility mode with featureLevel\" tabindex=\"-1\"\u003eEnable compatibility mode with featureLevel\u003c/h2\u003e\n\n\u003cp\u003eRequesting a GPU adapter in the \u003ca href=\"https://github.com/gpuweb/gpuweb/blob/main/proposals/compatibility-mode.md#webgpu-spec-changes\"\u003eexperimental compatibility mode\u003c/a\u003e is now possible by setting the standardized \u003ca href=\"https://gpuweb.github.io/gpuweb/#dom-gpurequestadapteroptions-featurelevel\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003efeatureLevel\u003c/code\u003e\u003c/a\u003e option to \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;compatibility\u0026#34;\u003c/code\u003e. The \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;core\u0026#34;\u003c/code\u003e (default) and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;compatibility\u0026#34;\u003c/code\u003e strings are the only values allowed. See the following example and \u003ca href=\"https://github.com/gpuweb/gpuweb/pull/4897\"\u003espec PR 4897\u003c/a\u003e.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003e// Request a GPU adapter in compatibility mode\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enavigator\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egpu\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erequestAdapter\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efeatureLevel\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;compatibility\u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\n\n\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eadapter\u003c/span\u003e\u003cspan\u003e?\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efeatureLevel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;compatibility\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// Any devices created from this adapter will support only compatibility mode.\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003efeatureLevel\u003c/code\u003e option replaces the non-standardized \u003ccode translate=\"no\" dir=\"ltr\"\u003ecompatibilityMode\u003c/code\u003e option while the non-standardized \u003ccode translate=\"no\" dir=\"ltr\"\u003efeatureLevel\u003c/code\u003e attribute replaces the \u003ccode translate=\"no\" dir=\"ltr\"\u003eisCompatibilityMode\u003c/code\u003e attribute.\u003c/p\u003e\n\n\u003cp\u003eAs it\u0026#39;s still experimental, you need to run Chrome with the \u0026#34;Unsafe WebGPU Support\u0026#34; flag at \u003ccode translate=\"no\" dir=\"ltr\"\u003echrome://flags/#enable-unsafe-webgpu\u003c/code\u003e for now. Check out \u003ca href=\"https://webgpureport.org\"\u003ewebgpureport.org\u003c/a\u003e to play with it.\u003c/p\u003e\n\n\u003ch2 id=\"experimental_subgroup_features_cleanup\" data-text=\"Experimental subgroup features cleanup\" tabindex=\"-1\"\u003eExperimental subgroup features cleanup\u003c/h2\u003e\n\n\u003cp\u003eThe deprecated \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;chromium-experimental-subgroups\u0026#34;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;chromium-experimental-subgroup-uniform-control-flow\u0026#34;\u003c/code\u003e experimental subgroup features are removed. See \u003ca href=\"https://issues.chromium.org/issues/377868468\"\u003eissue 377868468\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;subgroups\u0026#34;\u003c/code\u003e experimental feature is all you need now when \u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#experimenting_with_subgroups\"\u003eexperimenting with subgroups\u003c/a\u003e. The \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;subgroups-f16\u0026#34;\u003c/code\u003e experimental feature is deprecated and will soon be removed. You can use f16 values with subgroups when your application requests both \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;shader-f16\u0026#34;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;subgroups\u0026#34;\u003c/code\u003e features. See \u003ca href=\"https://issues.chromium.org/issues/380244620\"\u003eissue 380244620\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"deprecate_maxinterstageshadercomponents_limit\" data-text=\"Deprecate maxInterStageShaderComponents limit\" tabindex=\"-1\"\u003eDeprecate maxInterStageShaderComponents limit\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003emaxInterStageShaderComponents\u003c/code\u003e limit is deprecated due to a combination of factors:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eRedundancy with \u003ccode translate=\"no\" dir=\"ltr\"\u003emaxInterStageShaderVariables\u003c/code\u003e: This limit already serves a similar purpose, controlling the amount of data passed between shader stages.\u003c/li\u003e\n\u003cli\u003eMinor discrepancies: While there are slight differences in how the two limits are calculated, these differences are minor and can be effectively managed within the \u003ccode translate=\"no\" dir=\"ltr\"\u003emaxInterStageShaderVariables\u003c/code\u003e limit.\u003c/li\u003e\n\u003cli\u003eSimplification: Removing \u003ccode translate=\"no\" dir=\"ltr\"\u003emaxInterStageShaderComponents\u003c/code\u003e streamlines the shader interface and reduces complexity for developers. Instead of managing two separate limits with subtle differences, they can focus on the more appropriately named and comprehensive \u003ccode translate=\"no\" dir=\"ltr\"\u003emaxInterStageShaderVariables\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe goal is to fully remove it in Chrome 135. See \u003ca href=\"https://groups.google.com/a/chromium.org/g/blink-dev/c/i5oJu9lZPAk\"\u003eintent to deprecate\u003c/a\u003e and \u003ca href=\"https://issues.chromium.org/issues/364338810\"\u003eissue 364338810\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"dawn_updates\" data-text=\"Dawn updates\" tabindex=\"-1\"\u003eDawn updates\u003c/h2\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003ewgpu::Device::GetAdapterInfo(adapterInfo)\u003c/code\u003e lets you get adapter info directly from a \u003ccode translate=\"no\" dir=\"ltr\"\u003ewgpu::Device\u003c/code\u003e. See \u003ca href=\"https://issues.chromium.org/issues/376600838\"\u003eissue 376600838\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eWGPUProgrammableStageDescriptor\u003c/code\u003e struct has been renamed to \u003ccode translate=\"no\" dir=\"ltr\"\u003eWGPUComputeState\u003c/code\u003e to make compute state consistent with vertex and fragment states. See \u003ca href=\"https://issues.chromium.org/issues/379059434\"\u003eissue 379059434\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003ewgpu::VertexStepMode::VertexBufferNotUsed\u003c/code\u003e enum value has been removed. A vertex buffer layout that is not used can now be expressed with \u003ccode translate=\"no\" dir=\"ltr\"\u003e{.stepMode=wgpu::VertexStepMode::Undefined, .attributeCount=0}\u003c/code\u003e. See \u003ca href=\"https://issues.chromium.org/issues/383147017\"\u003eissue 383147017\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis covers only some of the key highlights. Check out the exhaustive \u003ca href=\"https://dawn.googlesource.com/dawn/+log/chromium/6834..chromium/6943?n=1000\"\u003elist of commits\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"whats-new\" data-text=\"What\u0026#39;s New in WebGPU\" tabindex=\"-1\"\u003eWhat\u0026#39;s New in WebGPU\u003c/h2\u003e\n\n\u003cp\u003eA list of everything that has been covered in the \u003ca href=\"https://developer.chrome.com/docs/web-platform/webgpu/news\"\u003eWhat\u0026#39;s New in WebGPU\u003c/a\u003e series.\u003c/p\u003e\n\n\u003ch3 id=\"chrome133\" data-text=\"Chrome 133\" tabindex=\"-1\"\u003eChrome 133\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#additional_unorm8x4-bgra_and_1-component_vertex_formats\"\u003eAdditional unorm8x4-bgra and 1-component vertex formats\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#allow_unknown_limits_to_be_requested_with_undefined_value\"\u003eAllow unknown limits to be requested with undefined value\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#wgsl_alignment_rules_changes\"\u003eWGSL alignment rules changes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#wgsl_performance_gains_with_discard\"\u003eWGSL performance gains with discard\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#use_videoframe_displaysize_for_external_textures\"\u003eUse VideoFrame displaySize for external textures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#handle_images_with_non-default_orientations_using_copyexternalimagetotexture\"\u003eHandle images with non-default orientations using copyExternalImageToTexture\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#improving_developer_experience\"\u003eImproving developer experience\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#enable_compatibility_mode_with_featurelevel\"\u003eEnable compatibility mode with featureLevel\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#experimental_subgroup_features_cleanup\"\u003eExperimental subgroup features cleanup\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#deprecate_maxinterstageshadercomponents_limit\"\u003eDeprecate maxInterStageShaderComponents limit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-133#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome132\" data-text=\"Chrome 132\" tabindex=\"-1\"\u003eChrome 132\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-132#texture_view_usage\"\u003eTexture view usage\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-132#32-bit_float_textures_blending\"\u003e32-bit float textures blending\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-132#gpudevice_adapterinfo_attribute\"\u003eGPUDevice adapterInfo attribute\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-132#configuring_canvas_context_with_invalid_format_throw_javascript_error\"\u003eConfiguring canvas context with invalid format throw JavaScript error\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-132#filtering_sampler_restrictions_on_textures\"\u003eFiltering sampler restrictions on textures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-132#extended_subgroups_experimentation\"\u003eExtended subgroups experimentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-132#improving_developer_experience\"\u003eImproving developer experience\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-132#experimental_support_for_16-bit_normalized_texture_formats\"\u003eExperimental support for 16-bit normalized texture formats\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-132#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome131\" data-text=\"Chrome 131\" tabindex=\"-1\"\u003eChrome 131\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#clip_distances_in_wgsl\"\u003eClip distances in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#gpucanvascontext_getconfiguration\"\u003eGPUCanvasContext getConfiguration()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#point_and_line_primitives_must_not_have_depth_bias\"\u003ePoint and line primitives must not have depth bias\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#inclusive_scan_built-in_functions_for_subgroups\"\u003eInclusive scan built-in functions for subgroups\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#experimental_support_for_multi-draw_indirect\"\u003eExperimental support for multi-draw indirect\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#shader_module_compilation_option_strict_math\"\u003eShader module compilation option strict math\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#remove_gpuadapter_requestadapterinfo\"\u003eRemove GPUAdapter requestAdapterInfo()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-131#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome130\" data-text=\"Chrome 130\" tabindex=\"-1\"\u003eChrome 130\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-130#dual_source_blending\"\u003eDual source blending\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-130#shader_compilation_time_improvements_on_metal\"\u003eShader compilation time improvements on Metal\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-130#deprecation_of_gpuadapter_requestadapterinfo\"\u003eDeprecation of GPUAdapter requestAdapterInfo()\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-130#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome129\" data-text=\"Chrome 129\" tabindex=\"-1\"\u003eChrome 129\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-129#hdr_support_with_canvas_tone_mapping_mode\"\u003eHDR support with canvas tone mapping mode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-129#expanded_subgroups_support\"\u003eExpanded subgroups support\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-129#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome128\" data-text=\"Chrome 128\" tabindex=\"-1\"\u003eChrome 128\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#experimenting_with_subgroups\"\u003eExperimenting with subgroups\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#deprecate_setting_depth_bias_for_lines_and_points\"\u003eDeprecate setting depth bias for lines and points\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#hide_uncaptured_error_devtools_warning_if_preventdefault\"\u003eHide uncaptured error DevTools warning if preventDefault\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#wgsl_interpolate_sampling_first_and_either\"\u003eWGSL interpolate sampling first and either\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-128#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome127\" data-text=\"Chrome 127\" tabindex=\"-1\"\u003eChrome 127\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#experimental_support_for_opengl_es_on_android\"\u003eExperimental support for OpenGL ES on Android\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#gpuadapter_info_attribute\"\u003eGPUAdapter info attribute\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#webassembly_interop_improvements\"\u003eWebAssembly interop improvements\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#improved_command_encoder_errors\"\u003eImproved command encoder errors\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-127#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome126\" data-text=\"Chrome 126\" tabindex=\"-1\"\u003eChrome 126\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#increase_maxtexturearraylayers_limit\"\u003eIncrease maxTextureArrayLayers limit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#buffer_upload_optimization_for_vulkan_backend\"\u003eBuffer upload optimization for Vulkan backend\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#shader_compilation_time_improvements\"\u003eShader compilation time improvements\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#submitted_command_buffers_must_be_unique\"\u003eSubmitted command buffers must be unique\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-126#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome125\" data-text=\"Chrome 125\" tabindex=\"-1\"\u003eChrome 125\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-125#subgroups_feature_in_development\"\u003eSubgroups (feature in development)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-125#render_to_slice_of_3d_texture\"\u003eRender to slice of 3D texture\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-125#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome124\" data-text=\"Chrome 124\" tabindex=\"-1\"\u003eChrome 124\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#read-only_and_read-write_storage_textures\"\u003eRead-only and read-write storage textures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#service_workers_and_shared_workers_support\"\u003eService workers and shared workers support\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#new_adapter_information_attributes\"\u003eNew adapter information attributes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#bug_fixes\"\u003eBug fixes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-124#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome123\" data-text=\"Chrome 123\" tabindex=\"-1\"\u003eChrome 123\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#dp4a_built-in_functions_support_in_wgsl\"\u003eDP4a built-in functions support in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#unrestricted_pointer_parameters_in_wgsl\"\u003eUnrestricted pointer parameters in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#syntax_sugar_for_dereferencing_composites_in_wgsl\"\u003eSyntax sugar for dereferencing composites in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#separate_read-only_state_for_stencil_and_depth_aspects\"\u003eSeparate read-only state for stencil and depth aspects\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-123#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome122\" data-text=\"Chrome 122\" tabindex=\"-1\"\u003eChrome 122\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-122#expand_reach_with_compatibility_mode_feature_in_development\"\u003eExpand reach with compatibility mode (feature in development)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-122#increase_maxvertexattributes_limit\"\u003eIncrease maxVertexAttributes limit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-122#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome121\" data-text=\"Chrome 121\" tabindex=\"-1\"\u003eChrome 121\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#support-webgpu-on-android\"\u003eSupport WebGPU on Android\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#use_dxc_instead_of_fxc_for_shader_compilation_on_windows\"\u003eUse DXC instead of FXC for shader compilation on Windows\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#timestamp_queries_in_compute_and_render_passes\"\u003eTimestamp queries in compute and render passes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#default_entry_points_to_shader_modules\"\u003eDefault entry points to shader modules\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#support_display-p3_as_gpuexternaltexture_color_space\"\u003eSupport display-p3 as GPUExternalTexture color space\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#memory_heaps_info\"\u003eMemory heaps info\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-121#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome120\" data-text=\"Chrome 120\" tabindex=\"-1\"\u003eChrome 120\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#support_for_16-bit_floating-point_values_in_wgsl\"\u003eSupport for 16-bit floating-point values in WGSL\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#push_the_limits\"\u003ePush the limits\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#changes_to_depth-stencil_state\"\u003eChanges to depth-stencil state\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#adapter_information_updates\"\u003eAdapter information updates\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#timestamp_queries_quantization\"\u003eTimestamp queries quantization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-120#spring-cleaning_features\"\u003eSpring-cleaning features\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome119\" data-text=\"Chrome 119\" tabindex=\"-1\"\u003eChrome 119\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-119#filterable_32-bit_float_textures\"\u003eFilterable 32-bit float textures\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-119#unorm10-10-10-2_vertex_format\"\u003eunorm10-10-10-2 vertex format\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-119#rgb10a2uint_texture_format\"\u003ergb10a2uint texture format\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-119#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome118\" data-text=\"Chrome 118\" tabindex=\"-1\"\u003eChrome 118\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-118#htmlimageelement_and_imagedata_support_in_copyexternalimagetotexture\"\u003eHTMLImageElement and ImageData support in \u003ccode translate=\"no\" dir=\"ltr\"\u003ecopyExternalImageToTexture()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-118#experimental_support_for_read-write_and_read-only_storage_texture\"\u003eExperimental support for read-write and read-only storage texture\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-118#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome117\" data-text=\"Chrome 117\" tabindex=\"-1\"\u003eChrome 117\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#unset_vertex_buffer\"\u003eUnset vertex buffer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#unset_bind_group\"\u003eUnset bind group\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#silence_errors_from_async_pipeline_creation_when_device_is_lost\"\u003eSilence errors from async pipeline creation when device is lost\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#spir-v_shader_module_creation_updates\"\u003eSPIR-V shader module creation updates\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#improving_developer_experience\"\u003eImproving developer experience\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#caching_pipelines_with_automatically_generated_layout\"\u003eCaching pipelines with automatically generated layout\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-117#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome116\" data-text=\"Chrome 116\" tabindex=\"-1\"\u003eChrome 116\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#webcodecs_integration\"\u003eWebCodecs integration\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#lost_device_returned_by_gpuadapter_requestdevice\"\u003eLost device returned by GPUAdapter \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestDevice()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#keep_video_playback_smooth_if_importexternaltexture_is_called\"\u003eKeep video playback smooth if \u003ccode translate=\"no\" dir=\"ltr\"\u003eimportExternalTexture()\u003c/code\u003e is called\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#spec_conformance\"\u003eSpec conformance\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#improving_developer_experience\"\u003eImproving developer experience\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-116#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome115\" data-text=\"Chrome 115\" tabindex=\"-1\"\u003eChrome 115\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#supported_wgsl_language_extensions\"\u003eSupported WGSL language extensions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#experimental_support_for_direct3d_11\"\u003eExperimental support for Direct3D 11\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#get_discrete_gpu_by_default_on_ac_power\"\u003eGet discrete GPU by default on AC power\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#improving_developer_experience\"\u003eImproving developer experience\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-115#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome114\" data-text=\"Chrome 114\" tabindex=\"-1\"\u003eChrome 114\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-114#optimize_javascript\"\u003eOptimize JavaScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-114#getcurrenttexture_on_unconfigured_canvas_throws_invalidstateerror\"\u003egetCurrentTexture() on unconfigured canvas throws InvalidStateError\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-114#wgsl_updates\"\u003eWGSL updates\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-114#dawn_updates\"\u003eDawn updates\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"chrome113\" data-text=\"Chrome 113\" tabindex=\"-1\"\u003eChrome 113\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/blog/new-in-webgpu-113#use_webcodecs_videoframe_source_in_importexternaltexture\"\u003eUse WebCodecs VideoFrame source in \u003ccode translate=\"no\" dir=\"ltr\"\u003eimportExternalTexture()\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n  \n\n  \n\u003c/div\u003e\n\n  \n\n  \n    \n    \n      \n    \u003cdevsite-thumb-rating position=\"footer\"\u003e\n    \u003c/devsite-thumb-rating\u003e\n  \n       \n    \n    \n  \n\n  \n  \n\u003c/article\u003e\n\n\n\u003cdevsite-content-footer\u003e\n  \u003cp\u003eExcept as otherwise noted, the content of this page is licensed under the \u003ca href=\"https://creativecommons.org/licenses/by/4.0/\"\u003eCreative Commons Attribution 4.0 License\u003c/a\u003e, and code samples are licensed under the \u003ca href=\"https://www.apache.org/licenses/LICENSE-2.0\"\u003eApache 2.0 License\u003c/a\u003e. For details, see the \u003ca href=\"https://developers.google.com/site-policies\"\u003eGoogle Developers Site Policies\u003c/a\u003e. Java is a registered trademark of Oracle and/or its affiliates.\u003c/p\u003e\n  \u003cp\u003eLast updated 2025-01-29 UTC.\u003c/p\u003e\n\u003c/devsite-content-footer\u003e\n\n\n\u003cdevsite-notification\u003e\n\u003c/devsite-notification\u003e\n\n\n  \n\u003cp\u003e\n  \n  \n    \u003ctemplate\u003e\n      [[[\u0026#34;Easy to understand\u0026#34;,\u0026#34;easyToUnderstand\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Solved my problem\u0026#34;,\u0026#34;solvedMyProblem\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherUp\u0026#34;,\u0026#34;thumb-up\u0026#34;]],[[\u0026#34;Missing the information I need\u0026#34;,\u0026#34;missingTheInformationINeed\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Too complicated / too many steps\u0026#34;,\u0026#34;tooComplicatedTooManySteps\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Out of date\u0026#34;,\u0026#34;outOfDate\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Samples / code issue\u0026#34;,\u0026#34;samplesCodeIssue\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherDown\u0026#34;,\u0026#34;thumb-down\u0026#34;]],[\u0026#34;Last updated 2025-01-29 UTC.\u0026#34;],[],[]]\n    \u003c/template\u003e\n  \n\u003c/p\u003e\n            \n          \u003c/devsite-content\u003e\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
