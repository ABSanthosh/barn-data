{
  "id": "8e249660-0a02-4b23-9f7b-02a355cf9daf",
  "title": "CSS Masonry \u0026 CSS Grid",
  "link": "https://css-tricks.com/css-masonry-css-grid/",
  "description": "An approach for creating masonry layouts in vanilla CSS is one of those “holy grail” aspirations. I actually tend to plop masonry and the classic “Holy Grail” layout in the same general era of web design. They’re different types of … CSS Masonry \u0026 CSS Grid originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Mon, 30 Sep 2024 13:56:11 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Notes",
    "layout"
  ],
  "byline": "Geoff Graham",
  "length": 11457,
  "excerpt": "An approach for creating masonry layouts in vanilla CSS is one of those \"holy grail\" aspirations. I actually tend to plop masonry and the classic \"Holy Grail\"",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! An approach for creating masonry layouts in vanilla CSS is one of those “holy grail” aspirations. I actually tend to plop masonry and the classic “Holy Grail” layout in the same general era of web design. They’re different types of layouts, of course, but the Holy Grail was a done deal when we got CSS Grid. That leaves masonry as perhaps the last standing layout from the CSS 3 era that is left without a baked-in solution. I might argue that masonry is no longer en vogue so to speak, but there clearly are use cases for packing items with varying sizes into columns based on available space. And masonry is still very much in the wild. Steam is picking up on a formal solution. We even have a CSSWG draft specification for it. But notice how the draft breaks things out. Grid-integrated syntax? Grid-independent syntax? We’ve done gone and multiplied CSS! That’s the context for this batch of notes. There are two competing proposals for CSS masonry at the time of writing and many opinions are flying around advocating one or the other. I have personal thoughts on it, but that’s not important. I’ll be happy with whatever the consensus happens to be. Both proposals have merits and come with potential challenges — it’s a matter of what you prioritize which, in this case, I believe is a choice between leveraging existing CSS layout features and the ergonomics of a fresh new approach. But let’s get to some notes from discussions that are already happening to help get a clearer picture of things! What is masonry layout? Think of it like erecting a wall of stones or bricks. The sizes of the bricks and stones don’t matter — the column (or less commonly a row) is the boss of sizing things. Pack as many stones or bricks in the nearest column and then those adapt to the column’s width. Or more concisely, we’re laying out unevenly sized items in a column such that there aren’t uneven gaps between them. Examples, please? Here’s perhaps the most widely seen example in a CodePen, courtesy of Dave DeSandro, using his Masonry.js tool: I use this example because, if I remember correctly, Masonry.js was what stoked the masonry trend in, like 2010 or something. Dave implemented it on Beyoncé’s website which certainly gave masonry a highly visible profile. Sometimes you might hear masonry called a “Pinterest-style” layout because, well, that’s been the site’s signature design — perhaps even its brand — since day one. Here’s a faux example Jhey put together using flexbox: Chris also rounded up a bunch of other workarounds in 2019 that get us somewhat there, under ideal conditions. But none of these are based on standardized approaches or features. I mean, columns and flexbox are specced but weren’t designed with masonry in mind. But with masonry having a long track record of being used, it most certainly deserves a place in the CSS specs. There are two competing proposals This isn’t exactly news. In fact, we can get earlier whiffs of this looking back to 2020. Rachel Andrew introduced the concept of making masonry a sub-feature of grid in a Smashing Magazine article. Let’s fast-forward to 2022. We had an editor’s draft for CSS Masonry baked into the CSS Grid Layout Module 3 specification. Jenn Simmons motioned for the CSSWG to move it forward to be a first public working draft. Five days later, Chromium engineer Ian Kilpatrick raised two concerns about moving things forward as part of the CSS Grid Layout module, the first being related to sizing column tracks and grid’s layout algorithm: Grid works by placing everything in the grid ahead of time, then sizing the rows/columns to fit the items. Masonry fundamentally doesn’t work this way as you need to size the rows/columns ahead of time – then place items within those rows/columns. As a result the way the current specification re-uses the grid sizing logic leads to poor results when intrinsically sizing tracks, and if the grid is intrinsically-sized itself (e.g. if its within a grid/flex/table, etc). Good point! Grid places grid items in advance ahead of sizing them to fit into the available space. Again, it’s the column’s size that bosses things around in masonry. It logically follows that we would need to declare masonry and configure the column track sizes in advance to place things according to space. The other concern concerns accessibility as far as visual and reading order. That stopped Jenn’s motion for first public working draft status dead in its tracks in early 2023. If we fast-forward to July of this year, we get Ian’s points for an alternative path forward for masonry. That garnered support from all sorts of CSS heavyweights, including Rachel Andrew who authored the CSS Grid specification. And, just a mere three weeks ago from today, fantasai shared a draft for an alternate proposal put together with Tab Atkins. This proposal, you’ll see, is specific to masonry as its own module. And thus we have two competing proposals to solve masonry in CSS. The case for merging masonry and grid Rounding up comments from GitHub tickets and blog posts… Flexbox is really designed for putting things into a line and distributing spare space. So that initial behaviour of putting all your things in a row is a great starting point for whatever you might want to do. It may be all you need to do. It’s not difficult as a teacher to then unpack how to add space inside or outside items, align them, or make it a column rather than a row. Step by step, from the defaults. I want to be able to take the same approach with display: masonry. […] We can’t do that as easily with grid, because of the pre-existing initial values. The good defaults for grid don’t work as well for masonry. Currently you’d need to: Add display: grid, to get a single column grid layout. Add grid-template-columns: \u003ctrack-listing\u003e, and at the moment there’s no way to auto-fill auto sized tracks so you’ll need to decide on how many. Using grid-template-columns: repeat(3, auto), for example. Add grid-template-rows: masonry. Want to define rows instead? Switch the masonry value to apply to  grid-template-columns and now define your rows. Once again, you have to explicitly define rows. Rachel Andrew, “Masonry and good defaults” For what it’s worth, Rachel has been waving this flag since at least 2020. The ergonomics of display: masonry with default configurations that solve baseline functionality are clear and compelling. The default behavior oughta match the feature’s purpose and grid just ain’t a great set of default configurations to jump into a masonry layout. Rachel’s point is that teaching and learning grid to get to understand masonry behavior unnecessarily lumps two different formatting contexts into one, which is a certain path to confusion. I find it tough to refute this, as I also come at this from a teaching perspective. Seen this way, we might say that merging features is another lost entry point into front-end development. In recent years, the two primary methods we’ve used to pull off masonry layouts are: Flexbox for consistent row sizes. We adjust the flex-basis based on the item’s expected percentage of the total row width. Grid for consistent column sizes. We set the row span based on the expected aspect ratio of the content, either server-side for imagery or client-side for dynamic content. What I’ve personally observed is: Neither feels more intuitive than the other as a starting point for masonry. So it feels a little itchy to single out Grid as a foundation. While there is friction when teaching folks when to use a Flexbox versus a Grid, it’s a much bigger leap for contributors to wrap their heads around properties that significantly change behavior (such as flex-wrap or grid-auto-flow: dense). Tyler Sticka, commenting on GitHub Issue #9041 It’s true! If I had to single out either flexbox or grid as the starting poit for masonry (and I doubt I would either way), I might lean flexbox purely for the default behavior of aligning flexible items in a column. The syntax and semantics of the CSS that will drive masonry layout is a concern that is separate from the actual layout mechanics itself, which internally in implementation by user agents can still re-use parts of the existing mechanics for grids, including subgrids. For cases where masonry is nested inside grid, or grid inside masonry, the relationship between the two can be made explicit. @jgotten, commenting on GitHub Issue #9041 Rachel again, this time speaking on behalf of the Chrome team: There are two related reasons why we feel that masonry is better defined outside of grid layout—the potential of layout performance issues, and the fact that both masonry and grid have features that make sense in one layout method but not the other. The case for keeping masonry separate from grid One of the key benefits of integrating masonry into the grid layout (as in CASE 2) is the ability to leverage existing grid features, such as subgrids. Subgrids allow for cohesive designs among child elements within a grid, something highly desirable in many masonry layouts as well. Additionally, I believe that future enhancements to the grid layout will also be beneficial for masonry, making their integration even more valuable. By treating masonry as an extension of the grid layout, developers would be able to start using it immediately, without needing to learn a completely new system. Kokomi, commenting on GitHub Issue #9041 It really would be a shame if keeping masonry separate from grid prevents masonry from being as powerful as it could be with access to grid’s feature set: I think the arguments for a separate display: masonry focus too much on the potential simplicity at the expense of functionality. Excluding Grid’s powerful features would hinder developers who want or need more than basic layouts. Plus, introducing another display type could lead to confusion and fragmentation in the layout ecosystem. Angel Ponce, commenting on GitHub Issue #9041 Rachel counters that, though. I want express my strong support for adding masonry to display:grid. The fact that it gracefully degrades to a traditional grid is a huge benefit IMO. But also, masonry layout is already possible (with some constraints) in Grid layout today! Naman Goel, Angel Ponce, commenting on GitHub Issue #9041 Chris mildly voiced interest in merging the two in 2020 before the debate got larger and more heated. Not exactly a ringing endorsement, but rather an acknowledgment that it could make sense: I like the grid-template-rows: masonry; syntax because I think it clearly communicates: “You aren’t setting these rows. In fact, there aren’t even really rows at all anymore, we’ll take care of that.” Which I guess means there are no rows to inherit in subgrid, which also makes sense. Where we at? Collecting feedback. Rachel, Ian, and Tab published a joint call for folks like you and me to add our thoughts to the bag. That was eight days ago as of this writing. Not only is it a call to action, but it’s also an excellent overview of the two competing ideas and considerations for each one. You’ll want to add your feedback to GitHub Issue #9041.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/381216",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eAn approach for creating masonry layouts in vanilla CSS is one of those “holy grail” aspirations. I actually tend to plop masonry and the classic “Holy Grail” layout in the same general era of web design. They’re different types of layouts, of course, but \u003ca href=\"https://css-tricks.com/snippets/css/css-grid-starter-layouts/\"\u003ethe Holy Grail was a done deal when we got CSS Grid\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat leaves masonry as perhaps the last standing layout from the CSS 3 era that is left without a baked-in solution. I might argue that masonry is no longer \u003cem\u003een vogue\u003c/em\u003e so to speak, but there clearly are use cases for packing items with varying sizes into columns based on available space. And masonry is still very much in the wild.\u003c/p\u003e\n\n\n\n\u003cp\u003eSteam is picking up on a formal solution. We even have a \u003ca href=\"https://drafts.csswg.org/css-grid-3/#masonry-model\" rel=\"noopener\"\u003eCSSWG draft specification\u003c/a\u003e for it. But notice how the draft breaks things out.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"2052\" height=\"858\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.17.44 AM.png?resize=2052%2C858\u0026amp;ssl=1\" alt=\"Table screenshot from the CSS specification with information on two competing syntaxes for CSS masonry.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.17.44 AM.png?w=2052\u0026amp;ssl=1 2052w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.17.44 AM.png?resize=300%2C125\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.17.44 AM.png?resize=1024%2C428\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.17.44 AM.png?resize=768%2C321\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.17.44 AM.png?resize=1536%2C642\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.17.44 AM.png?resize=2048%2C856\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eGrid-integrated syntax? Grid-independent syntax?\u003c/em\u003e We’ve done gone and multiplied CSS!\u003c/p\u003e\n\n\n\n\u003cp\u003eThat’s the context for this batch of notes. There are two competing proposals for CSS masonry at the time of writing and many opinions are flying around advocating one or the other. I have personal thoughts on it, but that’s not important. I’ll be happy with whatever the consensus happens to be. Both proposals have merits and come with potential challenges — it’s a matter of what you prioritize which, in this case, I believe is a choice between leveraging existing CSS layout features and the ergonomics of a fresh new approach.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut let’s get to some notes from discussions that are already happening to help get a clearer picture of things!\u003c/p\u003e\n\n\n\u003ch3 id=\"what-is-masonry-layout\"\u003eWhat is masonry layout?\u003c/h3\u003e\n\n\n\u003cp\u003eThink of it like erecting a wall of stones or bricks.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1024\" height=\"711\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg?resize=1024%2C711\u0026amp;ssl=1\" alt=\"Closeup of a slate gray stone wall.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg?resize=1024%2C711\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg?resize=300%2C208\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg?resize=768%2C533\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg?resize=1536%2C1067\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg?resize=1000%2C694\u0026amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/11/masonry.jpg?w=1800\u0026amp;ssl=1 1800w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe sizes of the bricks and stones don’t matter — the column (or less commonly a row) is the boss of sizing things. Pack as many stones or bricks in the nearest column and then those adapt to the column’s width. Or more concisely, we’re laying out unevenly sized items in a column such that there aren’t uneven gaps between them.\u003c/p\u003e\n\n\n\u003ch3 id=\"examples-please\"\u003eExamples, please?\u003c/h3\u003e\n\n\n\u003cp\u003eHere’s perhaps the most widely seen example in a CodePen, courtesy of \u003ca href=\"https://codepen.io/desandro\" rel=\"noopener\"\u003eDave DeSandro\u003c/a\u003e, using his \u003ca href=\"https://masonry.desandro.com\" rel=\"noopener\"\u003eMasonry.js\u003c/a\u003e tool:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eI use this example because, if I remember correctly, Masonry.js was what stoked the masonry trend in, like 2010 or something. Dave implemented it on Beyoncé’s website which certainly gave masonry a highly visible profile. Sometimes you might hear masonry called a “Pinterest-style” layout because, well, \u003ca href=\"https://www.pinterest.com/ideas/quotes/948192800438/\" rel=\"noopener\"\u003ethat’s been the site’s signature design\u003c/a\u003e — perhaps even its brand — since day one.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"757\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57 AM.png?resize=1024%2C757\u0026amp;ssl=1\" alt=\"Pinterest webpage with a masonry layout of inspirational quotes.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57 AM.png?resize=1024%2C757\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57 AM.png?resize=300%2C222\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57 AM.png?resize=768%2C568\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57 AM.png?resize=1536%2C1135\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-25-at-9.42.57 AM.png?resize=2048%2C1513\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHere’s a faux example \u003ca href=\"https://codepen.io/jh3y\" rel=\"noopener\"\u003eJhey\u003c/a\u003e put together using flexbox:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eChris also rounded up a \u003ca href=\"https://css-tricks.com/piecing-together-approaches-for-a-css-masonry-layout/\"\u003ebunch of other workarounds\u003c/a\u003e in 2019 that get us somewhat there, under ideal conditions. But none of these are based on standardized approaches or features. I mean, columns and flexbox are specced but weren’t designed with masonry in mind. But with masonry having a long track record of being used, it most certainly deserves a place in the CSS specs.\u003c/p\u003e\n\n\n\u003ch3 id=\"there-are-two-competing-proposals\"\u003eThere are \u003cem\u003etwo\u003c/em\u003e competing proposals\u003c/h3\u003e\n\n\n\u003cp\u003eThis isn’t exactly news. In fact, we can get \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/4650\" rel=\"noopener\"\u003eearlier whiffs of this\u003c/a\u003e looking back to 2020. Rachel Andrew introduced the concept of making masonry a sub-feature of grid \u003ca href=\"https://www.smashingmagazine.com/native-css-masonry-layout-css-grid/\" rel=\"noopener\"\u003ein a Smashing Magazine article\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s fast-forward to 2022. We had an \u003ca href=\"https://drafts.csswg.org/css-grid-3/\" rel=\"noopener\"\u003eeditor’s draft for CSS Masonry\u003c/a\u003e baked into the CSS Grid Layout Module 3 specification. Jenn Simmons \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/8195\" rel=\"noopener\"\u003emotioned\u003c/a\u003e for the CSSWG to move it forward to be a first public working draft. Five days later, Chromium engineer \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/8195#issuecomment-1347260607\" rel=\"noopener\"\u003eIan Kilpatrick raised two concerns\u003c/a\u003e about moving things forward as part of the CSS Grid Layout module, the first being related to sizing column tracks and grid’s layout algorithm:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eGrid works by placing everything in the grid ahead of time, then sizing the rows/columns to fit the items. Masonry fundamentally doesn’t work this way as you need to size the rows/columns ahead of time – then place items within those rows/columns.\u003c/p\u003e\n\n\n\n\u003cp\u003eAs a result the way the current specification re-uses the grid sizing logic leads to poor results when intrinsically sizing tracks, and if the grid is intrinsically-sized itself (e.g. if its within a grid/flex/table, etc).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eGood point! Grid places grid items in advance ahead of sizing them to fit into the available space. Again, it’s the column’s size that bosses things around in masonry. It logically follows that we would need to declare masonry and configure the column track sizes in advance to place things according to space. The other concern concerns accessibility as far as visual and reading order.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat stopped Jenn’s motion for first public working draft status dead in its tracks in early 2023. If we fast-forward to July of this year, we get \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041\" rel=\"noopener\"\u003eIan’s points for an alternative path forward for masonry\u003c/a\u003e. That garnered support from all sorts of CSS heavyweights, \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041#issuecomment-1640961943\" rel=\"noopener\"\u003eincluding Rachel Andrew\u003c/a\u003e who authored the CSS Grid specification.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd, just a mere three weeks ago from today, \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/8195#issuecomment-2334922597\" rel=\"noopener\"\u003efantasai shared a draft\u003c/a\u003e for an alternate proposal put together with Tab Atkins. \u003ca href=\"https://tabatkins.github.io/specs/css-masonry/\" rel=\"noopener\"\u003eThis proposal\u003c/a\u003e, you’ll see, is specific to masonry as its own module.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd thus we have two competing proposals to solve masonry in CSS.\u003c/p\u003e\n\n\n\u003ch3 id=\"the-case-for-merging-masonry-and-grid\"\u003eThe case for merging masonry and grid\u003c/h3\u003e\n\n\n\u003cp\u003eRounding up comments from GitHub tickets and blog posts…\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eFlexbox is really designed for putting things into a line and distributing spare space. So that initial behaviour of putting all your things in a row is a great starting point for whatever you might want to do. It may be \u003cem\u003eall\u003c/em\u003e you need to do. It’s not difficult as a teacher to then unpack how to add space inside or outside items, align them, or make it a column rather than a row. Step by step, from the defaults.\u003c/p\u003e\n\n\n\n\u003cp\u003eI want to be able to take the same approach with \u003ccode\u003edisplay: masonry\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e[…]\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can’t do that as easily with grid, because of the pre-existing initial values. The good defaults for grid don’t work as well for masonry. Currently you’d need to:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eAdd \u003ccode\u003edisplay: grid\u003c/code\u003e, to get a single column grid layout.\u003c/li\u003e\n\n\n\n\u003cli\u003eAdd \u003ccode\u003egrid-template-columns: \u0026lt;track-listing\u0026gt;\u003c/code\u003e, and at the moment there’s no way to auto-fill \u003ccode\u003eauto\u003c/code\u003e sized tracks so you’ll need to decide on how many. Using \u003ccode\u003egrid-template-columns: repeat(3, auto)\u003c/code\u003e, for example.\u003c/li\u003e\n\n\n\n\u003cli\u003eAdd \u003ccode\u003egrid-template-rows: masonry\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eWant to define rows instead? Switch the \u003ccode\u003emasonry\u003c/code\u003e value to apply to  \u003ccode\u003egrid-template-columns\u003c/code\u003e and now define your rows. Once again, you have to explicitly define rows.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ccite\u003eRachel Andrew, \u003ca href=\"https://rachelandrew.co.uk/archives/2024/09/21/masonry-and-good-defaults/\" rel=\"noopener\"\u003e\u003c/a\u003e\u003ca href=\"https://rachelandrew.co.uk/archives/2024/09/21/masonry-and-good-defaults/\" rel=\"noopener\"\u003e“\u003c/a\u003eMasonry and good defaults”\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eFor what it’s worth, Rachel has been waving this flag \u003ca href=\"https://rachelandrew.co.uk/archives/2020/05/05/does-masonry-belong-in-the-css-grid-specification/\" rel=\"noopener\"\u003esince at least 2020\u003c/a\u003e. The ergonomics of \u003ccode\u003edisplay: masonry\u003c/code\u003e with default configurations that solve baseline functionality are clear and compelling. The default behavior oughta match the feature’s purpose and grid just ain’t a great set of default configurations to jump into a masonry layout. Rachel’s point is that teaching and learning grid to get to understand masonry behavior unnecessarily lumps two different formatting contexts into one, which is a certain path to confusion. I find it tough to refute this, as I also come at this from a teaching perspective. Seen this way, we might say that merging features is \u003ca href=\"https://rachelandrew.co.uk/archives/2019/01/30/html-css-and-our-vanishing-industry-entry-points/\" rel=\"noopener\"\u003eanother lost entry point into front-end development\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eIn recent years, the two primary methods we’ve used to pull off masonry layouts are:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eFlexbox for consistent row sizes. We adjust the \u003ccode\u003eflex-basis\u003c/code\u003e based on the item’s expected percentage of the total row width.\u003c/li\u003e\n\n\n\n\u003cli\u003eGrid for consistent column sizes. We set the row span based on the expected aspect ratio of the content, either server-side for imagery or client-side for dynamic content.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWhat I’ve personally observed is:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eNeither feels more intuitive than the other as a starting point for masonry. So it feels a little itchy to single out Grid as a foundation.\u003c/li\u003e\n\n\n\n\u003cli\u003eWhile there is friction when teaching folks when to use a Flexbox versus a Grid, it’s a much bigger leap for contributors to wrap their heads around properties that significantly change behavior (such as \u003ccode\u003eflex-wrap\u003c/code\u003e or \u003ccode\u003egrid-auto-flow: dense\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ccite\u003eTyler Sticka, \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041#issuecomment-2361455973\" rel=\"noopener\"\u003ecommenting\u003c/a\u003e on GitHub Issue #9041\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eIt’s true! If I had to single out either flexbox \u003cem\u003eor\u003c/em\u003e grid as the starting poit for masonry (and I doubt I would either way), I might lean flexbox purely for the default behavior of aligning flexible items in a column.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThe syntax and semantics of the CSS that will drive masonry layout is a concern that is separate from the actual layout mechanics itself, which internally in implementation by user agents can still re-use parts of the existing mechanics for grids, including subgrids. For cases where masonry is nested inside grid, or grid inside masonry, the relationship between the two can be made explicit.\u003c/p\u003e\n\u003ccite\u003e@jgotten, \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041#issuecomment-2363560261\" rel=\"noopener\"\u003ecommenting\u003c/a\u003e on GitHub Issue #9041\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eRachel again, this time \u003ca href=\"https://developer.chrome.com/blog/masonry\" rel=\"noopener\"\u003espeaking on behalf of the Chrome team\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThere are two related reasons why we feel that masonry is better defined outside of grid layout—the potential of layout performance issues, and the fact that both masonry and grid have features that make sense in one layout method but not the other.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\u003ch3 id=\"the-case-for-keeping-masonry-separate-from-grid\"\u003eThe case for keeping masonry separate from grid\u003c/h3\u003e\n\n\n\u003cblockquote\u003e\n\u003cp\u003eOne of the key benefits of integrating masonry into the grid layout (as in \u003cstrong\u003eCASE 2\u003c/strong\u003e) is the ability to leverage existing grid features, such as subgrids. Subgrids allow for cohesive designs among child elements within a grid, something highly desirable in many masonry layouts as well. Additionally, I believe that future enhancements to the grid layout will also be beneficial for masonry, making their integration even more valuable. By treating masonry as an extension of the grid layout, developers would be able to start using it immediately, without needing to learn a completely new system.\u003c/p\u003e\n\u003ccite\u003eKokomi, \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041#issuecomment-2363166435\" rel=\"noopener\"\u003ecommenting\u003c/a\u003e on GitHub Issue #9041\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eIt really would be a shame if keeping masonry separate from grid prevents masonry from being as powerful as it could be with access to grid’s feature set:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eI think the arguments for a separate \u003ccode\u003edisplay: masonry\u003c/code\u003e focus too much on the potential simplicity at the expense of functionality. Excluding Grid’s powerful features would hinder developers who want or need more than basic layouts. Plus, introducing another display type could lead to confusion and fragmentation in the layout ecosystem.\u003c/p\u003e\n\u003ccite\u003eAngel Ponce, \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041#issuecomment-2364142759\" rel=\"noopener\"\u003ecommenting\u003c/a\u003e on GitHub Issue #9041\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eRachel \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041#issuecomment-2364626543\" rel=\"noopener\"\u003ecounters that\u003c/a\u003e, though.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eI want express my strong support for adding masonry to display:grid. The fact that it gracefully degrades to a traditional grid is a huge benefit IMO. But also, masonry layout is already possible (with some constraints) in Grid layout today!\u003c/p\u003e\n\u003ccite\u003eNaman Goel, Angel Ponce, \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041#issuecomment-2365002075\" rel=\"noopener\"\u003ecommenting\u003c/a\u003e on GitHub Issue #9041\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eChris mildly \u003ca href=\"https://css-tricks.com/native-css-masonry-layout-in-css-grid/\"\u003evoiced interest in merging the two\u003c/a\u003e in 2020 before the debate got larger and more heated. Not exactly a ringing endorsement, but rather an acknowledgment that it could make sense:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eI like the \u003ccode\u003egrid-template-rows: masonry;\u003c/code\u003e syntax because I think it clearly communicates: \u003cem\u003e“You aren’t setting these rows. In fact, there aren’t even really rows at all anymore, we’ll take care of that.”\u003c/em\u003e Which I guess means there are no rows to inherit in subgrid, which also makes sense.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\u003ch3 id=\"where-we-at\"\u003eWhere we at?\u003c/h3\u003e\n\n\n\u003cp\u003eCollecting feedback. Rachel, Ian, and Tab \u003ca href=\"https://developer.chrome.com/blog/masonry-syntax\" rel=\"noopener\"\u003epublished a joint call\u003c/a\u003e for folks like you and me to add our thoughts to the bag. That was eight days ago as of this writing. Not only is it a call to action, but it’s also an excellent overview of the two competing ideas and considerations for each one. You’ll want to add your feedback to \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/9041\" rel=\"noopener\"\u003eGitHub Issue #9041\u003c/a\u003e.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2024-09-30T07:56:11-06:00",
  "modifiedTime": "2024-09-30T07:56:14-06:00"
}
