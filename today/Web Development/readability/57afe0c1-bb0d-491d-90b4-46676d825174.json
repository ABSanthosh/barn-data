{
  "id": "57afe0c1-bb0d-491d-90b4-46676d825174",
  "title": "Powering Search With Astro Actions and Fuse.js",
  "link": "https://css-tricks.com/powering-search-with-astro-actions-and-fuse-js/",
  "description": "With Astro, we can generate most of our site during our build, but have a small bit of server-side code that can handle search functionality using something like Fuse.js. In this demo, we‚Äôll use Fuse to search through a set of personal ‚Äúbookmarks‚Äù that are generated at build time, but return back proper results from a server call. Powering Search With Astro Actions and Fuse.js originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Bryan Robinson",
  "published": "Tue, 11 Mar 2025 15:26:10 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "astro",
    "static site generators"
  ],
  "byline": "Bryan Robinson",
  "length": 25355,
  "excerpt": "With Astro, we can generate most of our site during our build, but have a small bit of server-side code that can handle search functionality using something like Fuse.js. In this demo, we‚Äôll use Fuse to search through a set of personal ‚Äúbookmarks‚Äù that are generated at build time, but return back proper results from a server call.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Static sites are wonderful. I‚Äôm a big fan. They also have their issues. Namely, static sites either are purely static or the frameworks that generate them completely lose out on true static generation when you just dip your toes in the direction of server routes. Astro has been watching the front-end ecosystem and is trying to keep one foot firmly embedded in pure static generation, and the other in a powerful set of server-side functionality. With Astro Actions, Astro brings a lot of the power of the server to a site that is almost entirely static. A good example of this sort of functionality is dealing with search. If you have a content-based site that can be purely generated, adding search is either going to be something handled entirely on the front end, via a software-as-a-service solution, or, in other frameworks, converting your entire site to a server-side application. With Astro, we can generate most of our site during our build, but have a small bit of server-side code that can handle our search functionality using something like Fuse.js. In this demo, we‚Äôll use Fuse to search through a set of personal ‚Äúbookmarks‚Äù that are generated at build time, but return proper results from a server call. Starting the project To get started, we‚Äôll just set up a very basic Astro project. In your terminal, run the following command: npm create astro@latest Astro‚Äôs adorable mascot Houston is going to ask you a few questions in your terminal. Here are the basic responses, you‚Äôll need: Where should we create your new project? Wherever you‚Äôd like, but I‚Äôll be calling my directory¬†./astro-search How would you like to start your new project? Choose the basic minimalist starter. Install dependencies? Yes, please! Initialize a new git repository? I‚Äôd recommend it, personally! This will create a directory in the location specified and install everything you need to start an Astro project. Open the directory in your code editor of choice and run¬†npm run dev¬†in your terminal in the directory. When you run your project, you‚Äôll see the default Astro project homepage. We‚Äôre ready to get our project rolling! Basic setup To get started, let‚Äôs remove the default content from the homepage. Open the ¬†/src/pages/index.astro¬†file. This is a fairly barebones homepage, but we want it to be even more basic. Remove the¬†\u003cWelcome /\u003e¬†component, and we‚Äôll have a nice blank page. For styling, let‚Äôs add Tailwind and some very basic markup to the homepage to contain our site. npx astro add tailwind The¬†astro add¬†command will install Tailwind and attempt to set up all the boilerplate code for you (handy!). The CLI will ask you if you want it to add the various components, I recommend letting it, but if anything fails, you can copy the code needed from each of the steps in the process. As the last step for getting to work with Tailwind, the CLI will tell you to import the styles into a shared layout. Follow those instructions, and we can get to work. Let‚Äôs add some very basic markup to our new homepage. --- // ./src/pages/index.astro import Layout from '../layouts/Layout.astro'; --- \u003cLayout\u003e \u003cdiv class=\"max-w-3xl mx-auto my-10\"\u003e \u003ch1 class=\"text-3xl text-center\"\u003eMy latest bookmarks\u003c/h1\u003e \u003cp class=\"text-xl text-center mb-5\"\u003eThis is only 10 of A LARGE NUMBER THAT WE'LL CHANGE LATER\u003c/p\u003e \u003c/div\u003e \u003c/Layout\u003e Your site should now look like this. Not exactly winning any awards yet! That‚Äôs alright. Let‚Äôs get our bookmarks loaded in. Adding bookmark data with Astro Content Layer Since not everyone runs their own application for bookmarking interesting items, you can borrow my data. Here‚Äôs a small subset of my bookmarks, or you can go get 110 items from this¬†link on GitHub. Add this data as a file in your project. I like to group data in a¬†data¬†directory, so my file lives in¬†/src/data/bookmarks.json. Open code [ { \"pageTitle\": \"Our Favorite Sandwich Bread | King Arthur Baking\", \"url\": \"\u003chttps://www.kingarthurbaking.com/recipes/our-favorite-sandwich-bread-recipe\u003e\", \"description\": \"Classic American sandwich loaf, perfect for French toast and sandwiches.\", \"id\": \"007y8pmEOvhwldfT3wx1MW\" }, { \"pageTitle\": \"Chris Coyier's discussion of Automatic Social Share Images | CSS-Tricks \", \"url\": \"\u003chttps://css-tricks.com/automatic-social-share-images/\u003e\", \"description\": \"It's a pretty low-effort thing to get a big fancy link preview on social media. Toss a handful of specific \u003cmeta\u003e tags on a URL and you get a big image-title-description thing \", \"id\": \"04CXDvGQo19m0oXERL6bhF\" }, { \"pageTitle\": \"Automatic Social Share Images | ryanfiller.com\", \"url\": \"\u003chttps://www.ryanfiller.com/blog/automatic-social-share-images/\u003e\", \"description\": \"Setting up automatic social share images with Puppeteer and Netlify Functions. \", \"id\": \"04CXDvGQo19m0oXERLoC10\" }, { \"pageTitle\": \"Emma Wedekind: Foundations of Design Systems / React Boston 2019 - YouTube\", \"url\": \"\u003chttps://m.youtube.com/watch?v=pXb2jA43A6k\u003e\", \"description\": \"Emma Wedekind: Foundations of Design Systems / React Boston 2019 Presented by: Emma Wedekind ‚Äì LogMeIn Design systems are in the world around us, from street...\", \"id\": \"0d56d03e-aba4-4ebd-9db8-644bcc185e33\" }, { \"pageTitle\": \"Editorial Design Patterns With CSS Grid And Named Columns ‚Äî Smashing Magazine\", \"url\": \"\u003chttps://www.smashingmagazine.com/2019/10/editorial-design-patterns-css-grid-subgrid-naming/\u003e\", \"description\": \"By naming lines when setting up our CSS Grid layouts, we can tap into some interesting and useful features of Grid ‚Äî features that become even more powerful when we introduce subgrids.\", \"id\": \"13ac1043-1b7d-4a5b-a3d8-b6f5ec34cf1c\" }, { \"pageTitle\": \"Netlify pro tip: Using Split Testing to power private beta releases - DEV Community üë©‚Äçüíªüë®‚Äçüíª\", \"url\": \"\u003chttps://dev.to/philhawksworth/netlify-pro-tip-using-split-testing-to-power-private-beta-releases-a7l\u003e\", \"description\": \"Giving users ways to opt in and out of your private betas. Video and tutorial.\", \"id\": \"1fbabbf9-2952-47f2-9005-25af90b0229e\" }, { \"pageTitle\": \"Netlify Public Folder, Part I: What? Recreating the Dropbox Public Folder With Netlify | Jim Nielsen‚Äôs Weblog\", \"url\": \"\u003chttps://blog.jim-nielsen.com/2019/netlify-public-folder-part-i-what/\u003e\", \"id\": \"2607e651-7b64-4695-8af9-3b9b88d402d5\" }, { \"pageTitle\": \"Why Is CSS So Weird? - YouTube\", \"url\": \"\u003chttps://m.youtube.com/watch?v=aHUtMbJw8iA\u0026feature=youtu.be\u003e\", \"description\": \"Love it or hate it, CSS is weird! It doesn't work like most programming languages, and it doesn't work like a design tool either. But CSS is also solving a v...\", \"id\": \"2e29aa3b-45b8-4ce4-85b7-fd8bc50daccd\" }, { \"pageTitle\": \"Internet world despairs as non-profit .org sold for $$$$ to private equity firm, price caps axed ‚Ä¢ The Register\", \"url\": \"\u003chttps://www.theregister.co.uk/2019/11/20/org_registry_sale_shambles/\u003e\", \"id\": \"33406b33-c453-44d3-8b18-2d2ae83ee73f\" }, { \"pageTitle\": \"Netlify Identity for paid subscriptions - Access Control / Identity - Netlify Community\", \"url\": \"\u003chttps://community.netlify.com/t/netlify-identity-for-paid-subscriptions/1947/2\u003e\", \"description\": \"I want to limit certain functionality on my website to paying users. Now I‚Äôm using a payment provider (Mollie) similar to Stripe. My idea was to use the webhook fired by this service to call a Netlify function and give‚Ä¶\", \"id\": \"34d6341c-18eb-4744-88e1-cfbf6c1cfa6c\" }, { \"pageTitle\": \"SmashingConf Freiburg 2019: Videos And Photos ‚Äî Smashing Magazine\", \"url\": \"\u003chttps://www.smashingmagazine.com/2019/10/smashingconf-freiburg-2019/\u003e\", \"description\": \"We had a lovely time at SmashingConf Freiburg. This post wraps up the event and also shares the video of all of the Freiburg presentations.\", \"id\": \"354cbb34-b24a-47f1-8973-8553ed1d809d\" }, { \"pageTitle\": \"Adding Google Calendar to your JAMStack\", \"url\": \"\u003chttps://www.raymondcamden.com/2019/11/18/adding-google-calendar-to-your-jamstack\u003e\", \"description\": \"A look at using Google APIs to add events to your static site.\", \"id\": \"361b20c4-75ce-46b3-b6d9-38139e03f2ca\" }, { \"pageTitle\": \"How to Contribute to an Open Source Project | CSS-Tricks\", \"url\": \"\u003chttps://css-tricks.com/how-to-contribute-to-an-open-source-project/\u003e\", \"description\": \"The following is going to get slightly opinionated and aims to guide someone on their journey into open source. As a prerequisite, you should have basic\", \"id\": \"37300606-af08-4d9a-b5e3-12f64ebbb505\" }, { \"pageTitle\": \"Functions | Netlify\", \"url\": \"\u003chttps://www.netlify.com/docs/functions/\u003e\", \"description\": \"Netlify builds, deploys, and hosts your front end. Learn how to get started, see examples, and view documentation for the modern web platform.\", \"id\": \"3bf9e31b-5288-4b3b-89f2-97034603dbf6\" }, { \"pageTitle\": \"Serverless Can Help You To Focus - By Simona Cotin\", \"url\": \"\u003chttps://hackernoon.com/serverless-can-do-that-7nw32mk\u003e\", \"id\": \"43b1ee63-c2f8-4e14-8700-1e21c2e0a8b1\" }, { \"pageTitle\": \"Nuxt, Next, Nest?! My Head Hurts. - DEV Community üë©‚Äçüíªüë®‚Äçüíª\", \"url\": \"\u003chttps://dev.to/laurieontech/nuxt-next-nest-my-head-hurts-5h98\u003e\", \"description\": \"I clearly know what all of these things are. Their names are not at all similar. But let's review, just to make sure we know...\", \"id\": \"456b7d6d-7efa-408a-9eca-0325d996b69c\" }, { \"pageTitle\": \"Consuming a headless CMS GraphQL API with Eleventy - Webstoemp\", \"url\": \"\u003chttps://www.webstoemp.com/blog/headless-cms-graphql-api-eleventy/\u003e\", \"description\": \"With Eleventy, consuming data coming from a GraphQL API to generate static pages is as easy as using Markdown files.\", \"id\": \"4606b168-21a6-49df-8536-a2a00750d659\" }, ] Now that the data is in the project, we need for Astro to incorporate the data into its build process. To do this, we can use Astro‚Äôs new(ish)¬†Content Layer API. The Content Layer API adds a content configuration file to your¬†src¬†directory that allows you to run and collect any number of content pieces from data in your project or external APIs. Create the file¬†¬†/src/content.config.ts¬†(the name of this file matters, as this is what Astro is looking for in your project). import { defineCollection, z } from \"astro:content\"; import { file } from 'astro/loaders'; const bookmarks = defineCollection({ schema: z.object({ pageTitle: z.string(), url: z.string(), description: z.string().optional() }), loader: file(\"src/data/bookmarks.json\"), }); export const collections = { bookmarks }; In this file, we import a few helpers from Astro. We can use¬†defineCollection¬†to create the collection,¬†z¬†as Zod, to help define our types, and¬†file¬†is a specific content loader meant to read data files. The¬†defineCollection¬†method takes an object as its argument with a required loader and optional schema. The schema will help make our content type-safe and make sure our data is always what we expect it to be. In this case, we‚Äôll define the three data properties each of our bookmarks has. It‚Äôs important to define all your data in your schema, otherwise it won‚Äôt be available to your templates. We provide the¬†loader¬†property with a content loader. In this case, we‚Äôll use the¬†file¬†loader that Astro provides and give it the path to our JSON. Finally, we need to export the¬†collections¬†variable as an object containing all the collections that we‚Äôve defined (just¬†bookmarks¬†in our project). You‚Äôll want to restart the local server by re-running¬†npm run dev¬†in your terminal to pick up the new data. Using the new bookmarks content collection Now that we have data, we can use it in our homepage to show the most recent bookmarks that have been added. To get the data, we need to access the content collection with the¬†getCollection¬†method from¬†astro:content. Add the following code to the frontmatter for¬†./src/pages/index.astro¬†. --- import Layout from '../layouts/Layout.astro'; import { getCollection } from 'astro:content'; const bookmarks = await getCollection('bookmarks'); --- This code imports the¬†getCollection¬†method and uses it to create a new variable that contains the data in our¬†bookmarkscollection. The¬†bookmarks¬†variable is an array of data, as defined by the collection, which we can use to loop through in our template. --- import Layout from '../layouts/Layout.astro'; import { getCollection } from 'astro:content'; const bookmarks = await getCollection('bookmarks'); --- \u003cLayout\u003e \u003cdiv class=\"max-w-3xl mx-auto my-10\"\u003e \u003ch1 class=\"text-3xl text-center\"\u003eMy latest bookmarks\u003c/h1\u003e \u003cp class=\"text-xl text-center mb-5\"\u003e This is only 10 of {bookmarks.length} \u003c/p\u003e \u003ch2 class=\"text-2xl mb-3\"\u003eLatest bookmarks\u003c/h2\u003e \u003cul class=\"grid gap-4\"\u003e { bookmarks.slice(0, 10).map((item) =\u003e ( \u003cli\u003e \u003ca href={item.data?.url} class=\"block p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700\"\u003e \u003ch3 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\"\u003e {item.data?.pageTitle} \u003c/h3\u003e \u003cp class=\"font-normal text-gray-700 dark:text-gray-400\"\u003e {item.data?.description} \u003c/p\u003e \u003c/a\u003e \u003c/li\u003e )) } \u003c/ul\u003e \u003c/div\u003e \u003c/Layout\u003e This should pull the most recent 10 items from the array and display them on the homepage with some Tailwind styles. The main thing to note here is that the data structure has changed a little. The actual data for each item in our array actually resides in the¬†data¬†property of the item. This allows Astro to put additional data on the object without colliding with any details we provide in our database. Your project should now look something like this. Now that we have data and display, let‚Äôs get to work on our search functionality. Building search with actions and vanilla JavaScript To start, we‚Äôll want to scaffold out a new Astro component. In our example, we‚Äôre going to use vanilla JavaScript, but if you‚Äôre familiar with React or other frameworks that Astro supports, you can opt for client Islands to build out your search. The Astro actions will work the same. Setting up the component We need to make a new component to house a bit of JavaScript and the HTML for the search field and results. Create the component in a ./src/components/Search.astro¬†file. \u003cform id=\"searchForm\" class=\"flex mb-6 items-center max-w-sm mx-auto\"\u003e \u003clabel for=\"simple-search\" class=\"sr-only\"\u003eSearch\u003c/label\u003e \u003cdiv class=\"relative w-full\"\u003e \u003cinput type=\"text\" id=\"search\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\" placeholder=\"Search Bookmarks\" required /\u003e \u003c/div\u003e \u003cbutton type=\"submit\" class=\"p-2.5 ms-2 text-sm font-medium text-white bg-blue-700 rounded-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\"\u003e \u003csvg class=\"w-4 h-4\" aria-hidden=\"true\" xmlns=\"\u003chttp://www.w3.org/2000/svg\u003e\" fill=\"none\" viewBox=\"0 0 20 20\"\u003e \u003cpath stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z\"\u003e\u003c/path\u003e \u003c/svg\u003e \u003cspan class=\"sr-only\"\u003eSearch\u003c/span\u003e \u003c/button\u003e \u003c/form\u003e \u003cdiv class=\"grid gap-4 mb-10 hidden\" id=\"results\"\u003e \u003ch2 class=\"text-xl font-bold mb-2\"\u003eSearch Results\u003c/h2\u003e \u003c/div\u003e \u003cscript\u003e const form = document.getElementById(\"searchForm\"); const search = document.getElementById(\"search\"); const results = document.getElementById(\"results\"); form?.addEventListener(\"submit\", async (e) =\u003e { e.preventDefault(); console.log(\"SEARCH WILL HAPPEN\"); }); \u003c/script\u003e The basic HTML is setting up a search form, input, and results area with IDs that we‚Äôll use in JavaScript. The basic JavaScript finds those elements, and for the form, adds an event listener that fires when the form is submitted. The event listener is where a lot of our magic is going to happen, but for now, a console log will do to make sure everything is set up properly. Setting up an Astro Action for search In order for Actions to work, we need our project to allow for Astro to work in server or hybrid mode. These modes allow for all or some pages to be rendered in serverless functions instead of pre-generated as HTML during the build. In this project, this will be used for the Action and nothing else, so we‚Äôll opt for hybrid mode. To be able to run Astro in this way, we need to add a server integration. Astro has integrations for most of the major cloud providers, as well as a basic Node implementation. I typically host on Netlify, so we‚Äôll install their integration. Much like with Tailwind, we‚Äôll use the CLI to add the package and it will build out the boilerplate we need. npx astro add netlify Once this is added, Astro is running in Hybrid mode. Most of our site is pre-generated with HTML, but when the Action gets used, it will run as a serverless function. Setting up a very basic search Action Next, we need an Astro Action to handle our search functionality. To create the action, we need to create a new file at¬†./src/actions/index.js. All our Actions live in this file. You can write the code for each one in separate files and import them into this file, but in this example, we only have one Action, and that feels like premature optimization. In this file, we‚Äôll set up our search Action. Much like setting up our content collections, we‚Äôll use a method called¬†defineAction¬†and give it a schema and in this case a handler. The schema will validate the data it‚Äôs getting from our JavaScript is typed correctly, and the handler will define what happens when the Action runs. import { defineAction } from \"astro:actions\"; import { z } from \"astro:schema\"; import { getCollection } from \"astro:content\"; export const server = { search: defineAction({ schema: z.object({ query: z.string(), }), handler: async (query) =\u003e { const bookmarks = await getCollection(\"bookmarks\"); const results = await bookmarks.filter((bookmark) =\u003e { return bookmark.data.pageTitle.includes(query); }); return results; }, }), }; For our Action, we‚Äôll name it¬†search¬†and expect a schema of an object with a single property named¬†query¬†which is a string. The handler function will get all of our bookmarks from the content collection and use a native JavaScript .filter() method to check if the query is included in any bookmark titles. This basic functionality is ready to test with our front-end. Using the Astro Action in the search form event When the user submits the form, we need to send the query to our new Action. Instead of figuring out where to send our fetch request, Astro gives us access to all of our server Actions with the¬†actions¬†object in¬†astro:actions. This means that any Action we create is accessible from our client-side JavaScript. In our Search component, we can now import our Action directly into the JavaScript and then use the search action when the user submits the form. \u003cscript\u003e import { actions } from \"astro:actions\"; const form = document.getElementById(\"searchForm\"); const search = document.getElementById(\"search\"); const results = document.getElementById(\"results\"); form?.addEventListener(\"submit\", async (e) =\u003e { e.preventDefault(); results.innerHTML = \"\"; const query = search.value; const { data, error } = await actions.search(query); if (error) { results.innerHTML = `\u003cp\u003e${error.message}\u003c/p\u003e`; return; } // create a div for each search result data.forEach(( item ) =\u003e { const div = document.createElement(\"div\"); div.innerHTML = ` \u003ca href=\"${item.data?.url}\" class=\"block p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700\"\u003e \u003ch3 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\"\u003e ${item.data?.pageTitle} \u003c/h3\u003e \u003cp class=\"font-normal text-gray-700 dark:text-gray-400\"\u003e ${item.data?.description} \u003c/p\u003e \u003c/a\u003e`; // append the div to the results container results.appendChild(div); }); // show the results container results.classList.remove(\"hidden\"); }); \u003c/script\u003e When results are returned, we can now get search results! Though, they‚Äôre highly problematic. This is just a simple JavaScript filter, after all. You can search for ‚ÄúFavorite‚Äù and get my favorite bread recipe, but if you search for ‚Äúfavorite‚Äù (no caps), you‚Äôll get an error‚Ä¶ Not ideal. That‚Äôs why we should use a package like Fuse.js. Adding Fuse.js for fuzzy search Fuse.js is a JavaScript package that has utilities to make ‚Äúfuzzy‚Äù search much easier for developers. Fuse will accept a string and based on a number of criteria (and a number of sets of data) provide responses that closely match even when the match isn‚Äôt perfect. Depending on the settings, Fuse can match ‚ÄúFavorite‚Äù, ‚Äúfavorite‚Äù, and even misspellings like ‚Äúfavrite‚Äù all to the right results. Is Fuse as powerful as something like Algolia or ElasticSearch? No. Is it free and pretty darned good? Absolutely! To get Fuse moving, we need to install it into our project. npm install fuse.js From there, we can use it in our Action by importing it in the file and creating a new instance of Fuse based on our bookmarks collection. import { defineAction } from \"astro:actions\"; import { z } from \"astro:schema\"; import { getCollection } from \"astro:content\"; import Fuse from \"fuse.js\"; export const server = { search: defineAction({ schema: z.object({ query: z.string(), }), handler: async (query) =\u003e { const bookmarks = await getCollection(\"bookmarks\"); const fuse = new Fuse(bookmarks, { threshold: 0.3, keys: [ { name: \"data.pageTitle\", weight: 1.0 }, { name: \"data.description\", weight: 0.7 }, { name: \"data.url\", weight: 0.3 }, ], }); const results = await fuse.search(query); return results; }, }), }; In this case, we create the Fuse instance with a few options. We give it a threshold value between 0 and 1 to decide how ‚Äúfuzzy‚Äù to make the search. Fuzziness is definitely something that depends on use case and the dataset. In our dataset, I‚Äôve found¬†0.3¬†to be a great threshold. The¬†keys¬†array allows you to specify which data should be searched. In this case, I want all the data to be searched, but I want to allow for different weighting for each item. The title should be most important, followed by the description, and the URL should be last. This way, I can search for keywords in all these areas. Once there‚Äôs a new Fuse instance, we run¬†fuse.search(query)¬†to have Fuse check the data, and return an array of results. When we run this with our front-end, we find we have one more issue to tackle. The structure of the data returned is not quite what it was with our simple JavaScript. Each result now has a¬†refIndex¬†and an¬†item. All our data lives on the item, so we need to destructure the item off of each returned result. To do that, adjust the front-end¬†forEach. // create a div for each search result data.forEach(({ item }) =\u003e { const div = document.createElement(\"div\"); div.innerHTML = ` \u003ca href=\"${item.data?.url}\" class=\"block p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700\"\u003e \u003ch3 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\"\u003e ${item.data?.pageTitle} \u003c/h3\u003e \u003cp class=\"font-normal text-gray-700 dark:text-gray-400\"\u003e ${item.data?.description} \u003c/p\u003e \u003c/a\u003e`; // append the div to the results container results.appendChild(div); }); Now, we have a fully working search for our bookmarks. Next steps This just scratches the surface of what you can do with Astro Actions. For instance, we should probably add additional error handling based on the error we get back. You can also experiment with handling this at the page-level and letting there be a Search page where the Action is used as a form action and handles it all as a server request instead of with front-end JavaScript code. You could also refactor the JavaScript from the admittedly low-tech vanilla JS to something a bit more robust with React, Svelte, or Vue. One thing is for sure, Astro keeps looking at the front-end landscape and learning from the mistakes and best practices of all the other frameworks. Actions, Content Layer, and more are just the beginning for a truly compelling front-end framework.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/astro-search.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eStatic sites are wonderful. I‚Äôm a big fan.\u003c/p\u003e\n\n\n\n\u003cp\u003eThey also have their issues. Namely, static sites either are purely static or the frameworks that generate them completely lose out on true static generation when you just dip your toes in the direction of server routes.\u003c/p\u003e\n\n\n\n\u003cp\u003eAstro has been watching the front-end ecosystem and is trying to keep one foot firmly embedded in pure static generation, and the other in a powerful set of server-side functionality.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith Astro Actions, Astro brings a lot of the power of the server to a site that is almost entirely static. A good example of this sort of functionality is dealing with search. If you have a content-based site that can be purely generated, adding search is either going to be something handled entirely on the front end, via a software-as-a-service solution, or, in other frameworks, converting your entire site to a server-side application.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith Astro, we can generate most of our site during our build, but have a small bit of server-side code that can handle our search functionality using something like Fuse.js.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this demo, we‚Äôll use Fuse to search through a set of personal ‚Äúbookmarks‚Äù that are generated at build time, but return proper results from a server call.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"starting-the-project\"\u003eStarting the project\u003c/h3\u003e\n\n\n\u003cp\u003eTo get started, we‚Äôll just set up a very basic Astro project. In your terminal, run the following command:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Terminal\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003enpm create astro@latest\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAstro‚Äôs adorable mascot Houston is going to ask you a few questions in your terminal. Here are the basic responses, you‚Äôll need:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eWhere should we create your new project? Wherever you‚Äôd like, but I‚Äôll be calling my directory¬†\u003ccode\u003e./astro-search\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eHow would you like to start your new project? Choose the basic minimalist starter.\u003c/li\u003e\n\n\n\n\u003cli\u003eInstall dependencies? Yes, please!\u003c/li\u003e\n\n\n\n\u003cli\u003eInitialize a new git repository? I‚Äôd recommend it, personally!\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis will create a directory in the location specified and install everything you need to start an Astro project. Open the directory in your code editor of choice and run¬†\u003ccode\u003enpm run dev\u003c/code\u003e¬†in your terminal in the directory.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen you run your project, you‚Äôll see the default Astro project homepage.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"2796\" height=\"1060\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-1.png?resize=2796%2C1060\u0026amp;ssl=1\" alt=\"Default Astro homepage.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-1.png?w=2796\u0026amp;ssl=1 2796w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-1.png?resize=300%2C114\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-1.png?resize=1024%2C388\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-1.png?resize=768%2C291\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-1.png?resize=1536%2C582\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-1.png?resize=2048%2C776\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe‚Äôre ready to get our project rolling!\u003c/p\u003e\n\n\n\u003ch3 id=\"basic-setup\"\u003eBasic setup\u003c/h3\u003e\n\n\n\u003cp\u003eTo get started, let‚Äôs remove the default content from the homepage. Open the ¬†\u003ccode\u003e/src/pages/index.astro\u003c/code\u003e¬†file.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis is a fairly barebones homepage, but we want it to be even more basic. Remove the¬†\u003ccode\u003e\u0026lt;Welcome /\u0026gt;\u003c/code\u003e¬†component, and we‚Äôll have a nice blank page.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor styling, let‚Äôs add Tailwind and some very basic markup to the homepage to contain our site.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Terminal\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003enpx astro add tailwind\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe¬†\u003ccode\u003eastro add\u003c/code\u003e¬†command will install Tailwind and attempt to set up all the boilerplate code for you (handy!). The CLI will ask you if you want it to add the various components, I recommend letting it, but if anything fails, you can copy the code needed from each of the steps in the process. As the last step for getting to work with Tailwind, the CLI will tell you to import the styles into a shared layout. Follow those instructions, and we can get to work.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet‚Äôs add some very basic markup to our new homepage.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e---\n// ./src/pages/index.astro\nimport Layout from \u0026#39;../layouts/Layout.astro\u0026#39;;\n---\n\n\u0026lt;Layout\u0026gt;\n  \u0026lt;div class=\u0026#34;max-w-3xl mx-auto my-10\u0026#34;\u0026gt;\n    \u0026lt;h1 class=\u0026#34;text-3xl text-center\u0026#34;\u0026gt;My latest bookmarks\u0026lt;/h1\u0026gt;\n    \u0026lt;p class=\u0026#34;text-xl text-center mb-5\u0026#34;\u0026gt;This is only 10 of A LARGE NUMBER THAT WE\u0026#39;LL CHANGE LATER\u0026lt;/p\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/Layout\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYour site should now look like this.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1874\" height=\"732\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-2.png?resize=1874%2C732\u0026amp;ssl=1\" alt=\"A basic webpage with a heading that reads \u0026#39;My latest bookmarks\u0026#39;.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-2.png?w=1874\u0026amp;ssl=1 1874w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-2.png?resize=300%2C117\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-2.png?resize=1024%2C400\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-2.png?resize=768%2C300\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-2.png?resize=1536%2C600\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNot exactly winning any awards yet! That‚Äôs alright. Let‚Äôs get our bookmarks loaded in.\u003c/p\u003e\n\n\n\u003ch4 id=\"adding-bookmark-data-with-astro-content-layer\"\u003eAdding bookmark data with Astro Content Layer\u003c/h4\u003e\n\n\n\u003cp\u003eSince not everyone runs their own application for bookmarking interesting items, you can borrow my data. Here‚Äôs a small subset of my bookmarks, or you can go get 110 items from this¬†\u003ca href=\"https://github.com/brob/astro-search/blob/main/src/utils/bookmarks.json\" rel=\"noopener\"\u003elink on GitHub\u003c/a\u003e. Add this data as a file in your project. I like to group data in a¬†\u003ccode\u003edata\u003c/code\u003e¬†directory, so my file lives in¬†\u003ccode\u003e/src/data/bookmarks.json\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open code      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"JSON\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e[\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Our Favorite Sandwich Bread | King Arthur Baking\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://www.kingarthurbaking.com/recipes/our-favorite-sandwich-bread-recipe\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;Classic American sandwich loaf, perfect for French toast and sandwiches.\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;007y8pmEOvhwldfT3wx1MW\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Chris Coyier\u0026#39;s discussion of Automatic Social Share Images | CSS-Tricks  \u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://css-tricks.com/automatic-social-share-images/\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;It\u0026#39;s a pretty low-effort thing to get a big fancy link preview on social media. Toss a handful of specific \u0026lt;meta\u0026gt; tags on a URL and you get a big image-title-description thing \u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;04CXDvGQo19m0oXERL6bhF\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Automatic Social Share Images | ryanfiller.com\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://www.ryanfiller.com/blog/automatic-social-share-images/\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;Setting up automatic social share images with Puppeteer and Netlify Functions. \u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;04CXDvGQo19m0oXERLoC10\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Emma Wedekind: Foundations of Design Systems / React Boston 2019 - YouTube\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://m.youtube.com/watch?v=pXb2jA43A6k\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;Emma Wedekind: Foundations of Design Systems / React Boston 2019 Presented by: Emma Wedekind ‚Äì LogMeIn Design systems are in the world around us, from street...\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;0d56d03e-aba4-4ebd-9db8-644bcc185e33\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Editorial Design Patterns With CSS Grid And Named Columns ‚Äî Smashing Magazine\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://www.smashingmagazine.com/2019/10/editorial-design-patterns-css-grid-subgrid-naming/\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;By naming lines when setting up our CSS Grid layouts, we can tap into some interesting and useful features of Grid ‚Äî features that become even more powerful when we introduce subgrids.\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;13ac1043-1b7d-4a5b-a3d8-b6f5ec34cf1c\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Netlify pro tip: Using Split Testing to power private beta releases - DEV Community üë©‚Äçüíªüë®‚Äçüíª\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://dev.to/philhawksworth/netlify-pro-tip-using-split-testing-to-power-private-beta-releases-a7l\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;Giving users ways to opt in and out of your private betas. Video and tutorial.\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;1fbabbf9-2952-47f2-9005-25af90b0229e\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Netlify Public Folder, Part I: What? Recreating the Dropbox Public Folder With Netlify | Jim Nielsen‚Äôs Weblog\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://blog.jim-nielsen.com/2019/netlify-public-folder-part-i-what/\u0026gt;\u0026#34;,\n\n    \u0026#34;id\u0026#34;: \u0026#34;2607e651-7b64-4695-8af9-3b9b88d402d5\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Why Is CSS So Weird? - YouTube\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://m.youtube.com/watch?v=aHUtMbJw8iA\u0026amp;feature=youtu.be\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;Love it or hate it, CSS is weird! It doesn\u0026#39;t work like most programming languages, and it doesn\u0026#39;t work like a design tool either. But CSS is also solving a v...\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;2e29aa3b-45b8-4ce4-85b7-fd8bc50daccd\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Internet world despairs as non-profit .org sold for $$$$ to private equity firm, price caps axed ‚Ä¢ The Register\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://www.theregister.co.uk/2019/11/20/org_registry_sale_shambles/\u0026gt;\u0026#34;,\n\n    \u0026#34;id\u0026#34;: \u0026#34;33406b33-c453-44d3-8b18-2d2ae83ee73f\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Netlify Identity for paid subscriptions - Access Control / Identity - Netlify Community\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://community.netlify.com/t/netlify-identity-for-paid-subscriptions/1947/2\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;I want to limit certain functionality on my website to paying users. Now I‚Äôm using a payment provider (Mollie) similar to Stripe. My idea was to use the webhook fired by this service to call a Netlify function and give‚Ä¶\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;34d6341c-18eb-4744-88e1-cfbf6c1cfa6c\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;SmashingConf Freiburg 2019: Videos And Photos ‚Äî Smashing Magazine\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://www.smashingmagazine.com/2019/10/smashingconf-freiburg-2019/\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;We had a lovely time at SmashingConf Freiburg. This post wraps up the event and also shares the video of all of the Freiburg presentations.\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;354cbb34-b24a-47f1-8973-8553ed1d809d\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Adding Google Calendar to your JAMStack\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://www.raymondcamden.com/2019/11/18/adding-google-calendar-to-your-jamstack\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;A look at using Google APIs to add events to your static site.\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;361b20c4-75ce-46b3-b6d9-38139e03f2ca\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;How to Contribute to an Open Source Project | CSS-Tricks\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://css-tricks.com/how-to-contribute-to-an-open-source-project/\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;The following is going to get slightly opinionated and aims to guide someone on their journey into open source. As a prerequisite, you should have basic\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;37300606-af08-4d9a-b5e3-12f64ebbb505\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Functions | Netlify\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://www.netlify.com/docs/functions/\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;Netlify builds, deploys, and hosts your front end. Learn how to get started, see examples, and view documentation for the modern web platform.\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;3bf9e31b-5288-4b3b-89f2-97034603dbf6\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Serverless Can Help You To Focus - By Simona Cotin\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://hackernoon.com/serverless-can-do-that-7nw32mk\u0026gt;\u0026#34;,\n\n    \u0026#34;id\u0026#34;: \u0026#34;43b1ee63-c2f8-4e14-8700-1e21c2e0a8b1\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Nuxt, Next, Nest?! My Head Hurts. - DEV Community üë©‚Äçüíªüë®‚Äçüíª\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://dev.to/laurieontech/nuxt-next-nest-my-head-hurts-5h98\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;I clearly know what all of these things are. Their names are not at all similar. But let\u0026#39;s review, just to make sure we know...\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;456b7d6d-7efa-408a-9eca-0325d996b69c\u0026#34;\n  },\n  {\n    \u0026#34;pageTitle\u0026#34;: \u0026#34;Consuming a headless CMS GraphQL API with Eleventy - Webstoemp\u0026#34;,\n    \u0026#34;url\u0026#34;: \u0026#34;\u0026lt;https://www.webstoemp.com/blog/headless-cms-graphql-api-eleventy/\u0026gt;\u0026#34;,\n    \u0026#34;description\u0026#34;: \u0026#34;With Eleventy, consuming data coming from a GraphQL API to generate static pages is as easy as using Markdown files.\u0026#34;,\n    \u0026#34;id\u0026#34;: \u0026#34;4606b168-21a6-49df-8536-a2a00750d659\u0026#34;\n  },\n]\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eNow that the data is in the project, we need for Astro to incorporate the data into its build process. To do this, we can use Astro‚Äôs new(ish)¬†\u003ca href=\"https://astro.build/blog/content-layer-deep-dive/\" rel=\"noopener\"\u003eContent Layer API\u003c/a\u003e. The Content Layer API adds a content configuration file to your¬†\u003ccode\u003esrc\u003c/code\u003e¬†directory that allows you to run and collect any number of content pieces from data in your project or external APIs. Create the file¬†¬†\u003ccode\u003e/src/content.config.ts\u003c/code\u003e¬†(the name of this file matters, as this is what Astro is looking for in your project).\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eimport { defineCollection, z } from \u0026#34;astro:content\u0026#34;;\nimport { file } from \u0026#39;astro/loaders\u0026#39;;\n\nconst bookmarks = defineCollection({\n  schema: z.object({\n    pageTitle: z.string(),\n    url: z.string(),\n    description: z.string().optional()\n  }),\n  loader: file(\u0026#34;src/data/bookmarks.json\u0026#34;),\n});\n\nexport const collections = { bookmarks };\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn this file, we import a few helpers from Astro. We can use¬†\u003ccode\u003edefineCollection\u003c/code\u003e¬†to create the collection,¬†\u003ccode\u003ez\u003c/code\u003e¬†as Zod, to help define our types, and¬†\u003ccode\u003efile\u003c/code\u003e¬†is a specific content loader meant to read data files.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe¬†\u003ccode\u003edefineCollection\u003c/code\u003e¬†method takes an object as its argument with a required loader and optional schema. The schema will help make our content type-safe and make sure our data is always what we expect it to be. In this case, we‚Äôll define the three data properties each of our bookmarks has. It‚Äôs important to define all your data in your schema, otherwise it won‚Äôt be available to your templates.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe provide the¬†\u003ccode\u003eloader\u003c/code\u003e¬†property with a content loader. In this case, we‚Äôll use the¬†\u003ccode\u003efile\u003c/code\u003e¬†loader that Astro provides and give it the path to our JSON.\u003c/p\u003e\n\n\n\n\u003cp\u003eFinally, we need to export the¬†\u003ccode\u003ecollections\u003c/code\u003e¬†variable as an object containing all the collections that we‚Äôve defined (just¬†\u003ccode\u003ebookmarks\u003c/code\u003e¬†in our project). You‚Äôll want to restart the local server by re-running¬†\u003ccode\u003enpm run dev\u003c/code\u003e¬†in your terminal to pick up the new data.\u003c/p\u003e\n\n\n\u003ch4 id=\"using-the-new-bookmarks-content-collection\"\u003eUsing the new bookmarks content collection\u003c/h4\u003e\n\n\n\u003cp\u003eNow that we have data, we can use it in our homepage to show the most recent bookmarks that have been added. To get the data, we need to access the content collection with the¬†\u003ccode\u003egetCollection\u003c/code\u003e¬†method from¬†\u003ccode\u003eastro:content\u003c/code\u003e. Add the following code to the frontmatter for¬†\u003ccode\u003e./src/pages/index.astro\u003c/code\u003e¬†.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e---\nimport Layout from \u0026#39;../layouts/Layout.astro\u0026#39;;\nimport { getCollection } from \u0026#39;astro:content\u0026#39;;\n\nconst bookmarks = await getCollection(\u0026#39;bookmarks\u0026#39;);\n---\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis code imports the¬†\u003ccode\u003egetCollection\u003c/code\u003e¬†method and uses it to create a new variable that contains the data in our¬†\u003ccode\u003ebookmarks\u003c/code\u003ecollection. The¬†\u003ccode\u003ebookmarks\u003c/code\u003e¬†variable is an array of data, as defined by the collection, which we can use to loop through in our template.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e---\nimport Layout from \u0026#39;../layouts/Layout.astro\u0026#39;;\nimport { getCollection } from \u0026#39;astro:content\u0026#39;;\n\nconst bookmarks = await getCollection(\u0026#39;bookmarks\u0026#39;);\n---\n\n\u0026lt;Layout\u0026gt;\n  \u0026lt;div class=\u0026#34;max-w-3xl mx-auto my-10\u0026#34;\u0026gt;\n    \u0026lt;h1 class=\u0026#34;text-3xl text-center\u0026#34;\u0026gt;My latest bookmarks\u0026lt;/h1\u0026gt;\n    \u0026lt;p class=\u0026#34;text-xl text-center mb-5\u0026#34;\u0026gt;\n      This is only 10 of {bookmarks.length}\n    \u0026lt;/p\u0026gt;\n\n    \u0026lt;h2 class=\u0026#34;text-2xl mb-3\u0026#34;\u0026gt;Latest bookmarks\u0026lt;/h2\u0026gt;\n    \u0026lt;ul class=\u0026#34;grid gap-4\u0026#34;\u0026gt;\n    {\n      bookmarks.slice(0, 10).map((item) =\u0026gt; (\n      \u0026lt;li\u0026gt;\n        \u0026lt;a\n          href={item.data?.url}\n          class=\u0026#34;block p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700\u0026#34;\u0026gt;\n          \u0026lt;h3 class=\u0026#34;mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\u0026#34;\u0026gt;\n            {item.data?.pageTitle}\n          \u0026lt;/h3\u0026gt;\n          \u0026lt;p class=\u0026#34;font-normal text-gray-700 dark:text-gray-400\u0026#34;\u0026gt;\n            {item.data?.description}\n          \u0026lt;/p\u0026gt;\n        \u0026lt;/a\u0026gt;\n      \u0026lt;/li\u0026gt;\n      ))\n    }\n    \u0026lt;/ul\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/Layout\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis should pull the most recent 10 items from the array and display them on the homepage with some Tailwind styles. The main thing to note here is that the data structure has changed a little. The actual data for each item in our array actually resides in the¬†\u003ccode\u003edata\u003c/code\u003e¬†property of the item. This allows Astro to put additional data on the object without colliding with any details we provide in our database. Your project should now look something like this.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"2010\" height=\"1554\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-3.png?resize=2010%2C1554\u0026amp;ssl=1\" alt=\"Displaying the JSON data as bookmarks on the page below the main heading.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-3.png?w=2010\u0026amp;ssl=1 2010w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-3.png?resize=300%2C232\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-3.png?resize=1024%2C792\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-3.png?resize=768%2C594\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-3.png?resize=1536%2C1188\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow that we have data and display, let‚Äôs get to work on our search functionality.\u003c/p\u003e\n\n\n\u003ch3 id=\"building-search-with-actions-and-vanilla-javascript\"\u003eBuilding search with actions and vanilla JavaScript\u003c/h3\u003e\n\n\n\u003cp\u003eTo start, we‚Äôll want to scaffold out a new Astro component. In our example, we‚Äôre going to use vanilla JavaScript, but if you‚Äôre familiar with React or other frameworks that Astro supports, you can opt for client Islands to build out your search. The Astro actions will work the same.\u003c/p\u003e\n\n\n\u003ch4 id=\"setting-up-the-component\"\u003eSetting up the component\u003c/h4\u003e\n\n\n\u003cp\u003eWe need to make a new component to house a bit of JavaScript and the HTML for the search field and results. Create the component in a \u003ccode\u003e./src/components/Search.astro\u003c/code\u003e¬†file.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;form id=\u0026#34;searchForm\u0026#34; class=\u0026#34;flex mb-6 items-center max-w-sm mx-auto\u0026#34;\u0026gt;\n  \u0026lt;label for=\u0026#34;simple-search\u0026#34; class=\u0026#34;sr-only\u0026#34;\u0026gt;Search\u0026lt;/label\u0026gt;\n  \u0026lt;div class=\u0026#34;relative w-full\u0026#34;\u0026gt;\n    \u0026lt;input\n      type=\u0026#34;text\u0026#34;\n      id=\u0026#34;search\u0026#34;\n      class=\u0026#34;bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\u0026#34;\n      placeholder=\u0026#34;Search Bookmarks\u0026#34;\n      required\n    /\u0026gt;\n  \u0026lt;/div\u0026gt;\n  \u0026lt;button\n    type=\u0026#34;submit\u0026#34;\n    class=\u0026#34;p-2.5 ms-2 text-sm font-medium text-white bg-blue-700 rounded-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\u0026#34;\u0026gt;\n    \u0026lt;svg\n      class=\u0026#34;w-4 h-4\u0026#34;\n      aria-hidden=\u0026#34;true\u0026#34;\n      xmlns=\u0026#34;\u0026lt;http://www.w3.org/2000/svg\u0026gt;\u0026#34;\n      fill=\u0026#34;none\u0026#34;\n      viewBox=\u0026#34;0 0 20 20\u0026#34;\u0026gt;\n      \u0026lt;path\n        stroke=\u0026#34;currentColor\u0026#34;\n        stroke-linecap=\u0026#34;round\u0026#34;\n        stroke-linejoin=\u0026#34;round\u0026#34;\n        stroke-width=\u0026#34;2\u0026#34;\n        d=\u0026#34;m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\n    \u0026lt;/svg\u0026gt;\n    \u0026lt;span class=\u0026#34;sr-only\u0026#34;\u0026gt;Search\u0026lt;/span\u0026gt;\n  \u0026lt;/button\u0026gt;\n\u0026lt;/form\u0026gt;\n\n\u0026lt;div class=\u0026#34;grid gap-4 mb-10 hidden\u0026#34; id=\u0026#34;results\u0026#34;\u0026gt;\n  \u0026lt;h2 class=\u0026#34;text-xl font-bold mb-2\u0026#34;\u0026gt;Search Results\u0026lt;/h2\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;script\u0026gt;\n  const form = document.getElementById(\u0026#34;searchForm\u0026#34;);\n  const search = document.getElementById(\u0026#34;search\u0026#34;);\n  const results = document.getElementById(\u0026#34;results\u0026#34;);\n\n  form?.addEventListener(\u0026#34;submit\u0026#34;, async (e) =\u0026gt; {\n    e.preventDefault();\n    console.log(\u0026#34;SEARCH WILL HAPPEN\u0026#34;);\n  });\n\u0026lt;/script\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe basic HTML is setting up a search form, input, and results area with IDs that we‚Äôll use in JavaScript. The basic JavaScript finds those elements, and for the form, adds an event listener that fires when the form is submitted. The event listener is where a lot of our magic is going to happen, but for now, a console log will do to make sure everything is set up properly.\u003c/p\u003e\n\n\n\u003ch4 id=\"setting-up-an-astro-action-for-search\"\u003eSetting up an Astro Action for search\u003c/h4\u003e\n\n\n\u003cp\u003eIn order for Actions to work, we need our project to allow for Astro to work in server or hybrid mode. These modes allow for all or some pages to be rendered in serverless functions instead of pre-generated as HTML during the build. In this project, this will be used for the Action and nothing else, so we‚Äôll opt for hybrid mode.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo be able to run Astro in this way, we need to add a server integration. Astro has integrations for most of the major cloud providers, as well as a basic Node implementation. I typically host on Netlify, so we‚Äôll install their integration. Much like with Tailwind, we‚Äôll use the CLI to add the package and it will build out the boilerplate we need.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Terminal\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003enpx astro add netlify\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOnce this is added, Astro is running in Hybrid mode. Most of our site is pre-generated with HTML, but when the Action gets used, it will run as a serverless function.\u003c/p\u003e\n\n\n\u003ch4 id=\"setting-up-a-very-basic-search-action\"\u003eSetting up a very basic search Action\u003c/h4\u003e\n\n\n\u003cp\u003eNext, we need an Astro Action to handle our search functionality. To create the action, we need to create a new file at¬†\u003ccode\u003e./src/actions/index.js\u003c/code\u003e. All our Actions live in this file. You can write the code for each one in separate files and import them into this file, but in this example, we only have one Action, and that feels like premature optimization.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this file, we‚Äôll set up our search Action. Much like setting up our content collections, we‚Äôll use a method called¬†\u003ccode\u003edefineAction\u003c/code\u003e¬†and give it a schema and in this case a handler. The schema will validate the data it‚Äôs getting from our JavaScript is typed correctly, and the handler will define what happens when the Action runs.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eimport { defineAction } from \u0026#34;astro:actions\u0026#34;;\nimport { z } from \u0026#34;astro:schema\u0026#34;;\nimport { getCollection } from \u0026#34;astro:content\u0026#34;;\n\nexport const server = {\n  search: defineAction({\n    schema: z.object({\n      query: z.string(),\n    }),\n    handler: async (query) =\u0026gt; {\n      const bookmarks = await getCollection(\u0026#34;bookmarks\u0026#34;);\n      const results = await bookmarks.filter((bookmark) =\u0026gt; {\n        return bookmark.data.pageTitle.includes(query);\n      });\n      return results;\n    },\n  }),\n};\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFor our Action, we‚Äôll name it¬†\u003ccode\u003esearch\u003c/code\u003e¬†and expect a schema of an object with a single property named¬†\u003ccode\u003equery\u003c/code\u003e¬†which is a string. The handler function will get all of our bookmarks from the content collection and use a native JavaScript \u003ccode\u003e.filter()\u003c/code\u003e method to check if the query is included in any bookmark titles. This basic functionality is ready to test with our front-end.\u003c/p\u003e\n\n\n\u003ch4 id=\"using-the-astro-action-in-the-search-form-event\"\u003eUsing the Astro Action in the search form event\u003c/h4\u003e\n\n\n\u003cp\u003eWhen the user submits the form, we need to send the query to our new Action. Instead of figuring out where to send our fetch request, Astro gives us access to all of our server Actions with the¬†\u003ccode\u003eactions\u003c/code\u003e¬†object in¬†\u003ccode\u003eastro:actions\u003c/code\u003e. This means that any Action we create is accessible from our client-side JavaScript.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn our Search component, we can now import our Action directly into the JavaScript and then use the search action when the user submits the form.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;script\u0026gt;\nimport { actions } from \u0026#34;astro:actions\u0026#34;;\n\nconst form = document.getElementById(\u0026#34;searchForm\u0026#34;);\nconst search = document.getElementById(\u0026#34;search\u0026#34;);\nconst results = document.getElementById(\u0026#34;results\u0026#34;);\n\nform?.addEventListener(\u0026#34;submit\u0026#34;, async (e) =\u0026gt; {\n  e.preventDefault();\n  results.innerHTML = \u0026#34;\u0026#34;;\n\n  const query = search.value;\n  const { data, error } = await actions.search(query);\n  if (error) {\n    results.innerHTML = `\u0026lt;p\u0026gt;${error.message}\u0026lt;/p\u0026gt;`;\n    return;\n  }\n  // create a div for each search result\n  data.forEach(( item ) =\u0026gt; {\n    const div = document.createElement(\u0026#34;div\u0026#34;);\n    div.innerHTML = `\n      \u0026lt;a href=\u0026#34;${item.data?.url}\u0026#34; class=\u0026#34;block p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700\u0026#34;\u0026gt;\n      \u0026lt;h3 class=\u0026#34;mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\u0026#34;\u0026gt;\n        ${item.data?.pageTitle}\n      \u0026lt;/h3\u0026gt;\n      \u0026lt;p class=\u0026#34;font-normal text-gray-700 dark:text-gray-400\u0026#34;\u0026gt;\n        ${item.data?.description}\n        \u0026lt;/p\u0026gt;\n      \u0026lt;/a\u0026gt;`;\n    // append the div to the results container\n    results.appendChild(div);\n  });\n  // show the results container\n  results.classList.remove(\u0026#34;hidden\u0026#34;);\n});\n\u0026lt;/script\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen results are returned, we can now get search results!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1816\" height=\"1388\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-4.png?resize=1816%2C1388\u0026amp;ssl=1\" alt=\"Search field with the word \u0026#39;Favorite\u0026#39; types in it and a search result below it. Latest bookmarks are displayed below the search result.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-4.png?w=1816\u0026amp;ssl=1 1816w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-4.png?resize=300%2C229\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-4.png?resize=1024%2C783\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-4.png?resize=768%2C587\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-4.png?resize=1536%2C1174\u0026amp;ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThough, they‚Äôre highly problematic. This is just a simple JavaScript filter, after all. You can search for ‚ÄúFavorite‚Äù and get my favorite bread recipe, but if you search for ‚Äúfavorite‚Äù (no caps), you‚Äôll get an error‚Ä¶ Not ideal.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat‚Äôs why we should use a package like Fuse.js.\u003c/p\u003e\n\n\n\u003ch4 id=\"adding-fusejs-for-fuzzy-search\"\u003eAdding Fuse.js for fuzzy search\u003c/h4\u003e\n\n\n\u003cp\u003eFuse.js is a JavaScript package that has utilities to make ‚Äúfuzzy‚Äù search much easier for developers. Fuse will accept a string and based on a number of criteria (and a number of sets of data) provide responses that closely match even when the match isn‚Äôt perfect. Depending on the settings, Fuse can match ‚ÄúFavorite‚Äù, ‚Äúfavorite‚Äù, and even misspellings like ‚Äúfavrite‚Äù all to the right results.\u003c/p\u003e\n\n\n\n\u003cp\u003eIs Fuse as powerful as something like Algolia or ElasticSearch? No. Is it free and pretty darned good? Absolutely! To get Fuse moving, we need to install it into our project.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Terminal\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003enpm install fuse.js\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFrom there, we can use it in our Action by importing it in the file and creating a new instance of Fuse based on our bookmarks collection.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eimport { defineAction } from \u0026#34;astro:actions\u0026#34;;\nimport { z } from \u0026#34;astro:schema\u0026#34;;\nimport { getCollection } from \u0026#34;astro:content\u0026#34;;\nimport Fuse from \u0026#34;fuse.js\u0026#34;;\n\nexport const server = {\n  search: defineAction({\n    schema: z.object({\n      query: z.string(),\n    }),\n    handler: async (query) =\u0026gt; {\n      const bookmarks = await getCollection(\u0026#34;bookmarks\u0026#34;);\n      const fuse = new Fuse(bookmarks, {\n        threshold: 0.3,\n        keys: [\n          { name: \u0026#34;data.pageTitle\u0026#34;, weight: 1.0 },\n          { name: \u0026#34;data.description\u0026#34;, weight: 0.7 },\n          { name: \u0026#34;data.url\u0026#34;, weight: 0.3 },\n        ],\n      });\n\n      const results = await fuse.search(query);\n      return results;\n    },\n  }),\n};\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn this case, we create the Fuse instance with a few options. We give it a threshold value between 0 and 1 to decide how ‚Äúfuzzy‚Äù to make the search. Fuzziness is definitely something that depends on use case and the dataset. In our dataset, I‚Äôve found¬†\u003ccode\u003e0.3\u003c/code\u003e¬†to be a great threshold.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe¬†\u003ccode\u003ekeys\u003c/code\u003e¬†array allows you to specify which data should be searched. In this case, I want all the data to be searched, but I want to allow for different weighting for each item. The title should be most important, followed by the description, and the URL should be last. This way, I can search for keywords in all these areas.\u003c/p\u003e\n\n\n\n\u003cp\u003eOnce there‚Äôs a new Fuse instance, we run¬†\u003ccode\u003efuse.search(query)\u003c/code\u003e¬†to have Fuse check the data, and return an array of results.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhen we run this with our front-end, we find we have one more issue to tackle.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1832\" height=\"898\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-5.png?resize=1832%2C898\u0026amp;ssl=1\" alt=\"Search form with the word \u0026#39;test\u0026#39; types in it. Two undefined search results are displayed below it containing no information.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-5.png?w=1832\u0026amp;ssl=1 1832w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-5.png?resize=300%2C147\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-5.png?resize=1024%2C502\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-5.png?resize=768%2C376\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-5.png?resize=1536%2C753\u0026amp;ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe structure of the data returned is not quite what it was with our simple JavaScript. Each result now has a¬†\u003ccode\u003erefIndex\u003c/code\u003e¬†and an¬†\u003ccode\u003eitem\u003c/code\u003e. All our data lives on the item, so we need to destructure the item off of each returned result.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo do that, adjust the front-end¬†\u003ccode\u003eforEach\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e// create a div for each search result\ndata.forEach(({ item }) =\u0026gt; {\n  const div = document.createElement(\u0026#34;div\u0026#34;);\n  div.innerHTML = `\n    \u0026lt;a href=\u0026#34;${item.data?.url}\u0026#34; class=\u0026#34;block p-6 bg-white border border-gray-200 rounded-lg shadow-sm hover:bg-gray-100 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-700\u0026#34;\u0026gt;\n      \u0026lt;h3 class=\u0026#34;mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white\u0026#34;\u0026gt;\n        ${item.data?.pageTitle}\n      \u0026lt;/h3\u0026gt;\n      \u0026lt;p class=\u0026#34;font-normal text-gray-700 dark:text-gray-400\u0026#34;\u0026gt;\n        ${item.data?.description}\n      \u0026lt;/p\u0026gt;\n    \u0026lt;/a\u0026gt;`;\n  // append the div to the results container\n  results.appendChild(div);\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow, we have a fully working search for our bookmarks.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1658\" height=\"1600\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-6.png?resize=1658%2C1600\u0026amp;ssl=1\" alt=\"Search field with the word \u0026#39;css\u0026#39; types in it. Related search results are displayed below it.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-6.png?w=1658\u0026amp;ssl=1 1658w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-6.png?resize=300%2C290\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-6.png?resize=1024%2C988\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-6.png?resize=768%2C741\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image-6.png?resize=1536%2C1482\u0026amp;ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3 id=\"next-steps\"\u003eNext steps\u003c/h3\u003e\n\n\n\u003cp\u003eThis just scratches the surface of what you can do with Astro Actions. For instance, we should probably add additional error handling based on the error we get back. You can also experiment with handling this at the page-level and letting there be a Search page where the Action is used as a form action and handles it all as a server request instead of with front-end JavaScript code. You could also refactor the JavaScript from the admittedly low-tech vanilla JS to something a bit more robust with React, Svelte, or Vue.\u003c/p\u003e\n\n\n\n\u003cp\u003eOne thing is for sure, Astro keeps looking at the front-end landscape and learning from the mistakes and best practices of all the other frameworks. Actions, Content Layer, and more are just the beginning for a truly compelling front-end framework.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "27 min read",
  "publishedTime": "2025-03-11T09:26:10-06:00",
  "modifiedTime": "2025-03-11T09:26:13-06:00"
}
