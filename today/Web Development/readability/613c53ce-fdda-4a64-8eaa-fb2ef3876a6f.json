{
  "id": "613c53ce-fdda-4a64-8eaa-fb2ef3876a6f",
  "title": "Prepare your extension as we begin testing a new extensions menu",
  "link": "https://developer.chrome.com/blog/new-extensions-menu-testing?hl=en",
  "description": "How to prepare your extension for the new extensions menu.",
  "author": "",
  "published": "Tue, 19 Nov 2024 08:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 6271,
  "excerpt": "How to prepare your extension for the new extensions menu.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v870e399c64f7c43c99a3043db4b3a74327bb93d0914e84a0c3dba90bbfd67625/chrome/images/favicon.png",
  "text": "Stay organized with collections Save and categorize content based on your preferences. Published: November 19, 2024 At Google I/O 2024, we shared some early designs for upcoming changes to the extensions menu, which give users more control over the sites extensions can access. We're going to start testing these changes soon, beginning with a small percentage of users in Canary and with the hope to roll them out more widely in the future. When talking to developers about this change in the past, we often heard concerns about the impact of changing the way extensions are able to request host permissions at install time. The new menu does not impact any default behavior. Extensions will continue to be granted access to all requested hosts at install time. The goal of these changes is to make it easier for users to discover controls that are already available. This post gives an overview of what to expect and how you can prepare your extensions with a new API to handle cases where access to a page has been withheld by the user. What's changing? To give users more control, we will introduce a new extensions menu. Extensions will continue to be granted access to all requested hosts at install time, but users will now have an easier way to control access per extension. Work in progress design for the new extensions menu The new menu (pictured with the current design which may change) more clearly shows which extensions can run on a page, and gives users the ability to change access if chosen. A user can also prevent all extensions from running on a specific site. As mentioned, none of the available settings or defaults are changingâ€“we are focused on making what we already have easier for users to discover. Add a site access request We have designed a new API to complement these changes, with significant input from other browsers and developers in the WebExtensions Community Group. If a user has withheld access to a page, extensions can now request access using the new permissions.addSiteAccessRequest API. When an extension does this, the user will see an \"Allow\" message alongside the extension puzzle piece in the toolbar. Here's one design we are exploring: A site access request on example.com When a user clicks \"Allow\" within the extensions menu, the extension is granted persistent access to the host. The user can withhold it again in the future by accessing the extensions menu or on the chrome://extensions page. Clicking \"Allow 1?\" within the toolbar provides a faster way to grant immediate access. Extensions can call permissions.addSiteAccessRequest with a tabId to show a permission request for that tab. You can use feature detection to safely begin using it in your extension today. The API won't do anything for users without the new menu, but adopting it will benefit users with the new menu as it is gradually rolled out. chrome.tabs.onUpdated.addListener(async (tabId, changes) =\u003e { if (typeof changes.url !== 'string') return; const url = new URL(changes.url); // If we are on the /checkout page of example.com. if (url.origin === 'https://example.com' \u0026\u0026 url.pathname === '/checkout') { const hasPermission = await chrome.permissions.contains({ origins: ['https://example.com/*'] }); // We already have host permissions. if (hasPermission) { return; } // Add a site access request if the API is available. if (chrome.permissions.addSiteAccessRequest) { chrome.permissions.addSiteAccessRequest({ tabId }); } } }); In this example, we only add a request if the user is on the /checkout page. You can see the full code in our chrome-extensions-samples repository. Extensions should be mindful about when to ask users for access. Users are more likely to ignore noisy requests and Chrome might throttle excessive requests. A user can also choose to turn off the ability for an extension to show requests. As a result, you should only request access in specific situations, when you have high confidence the user will want to engage with your extension. Requests are bound to a specific tab and are automatically cleared when a user navigates to a different origin. A corresponding removeSiteAccessRequest method is available to clear a request explicitly (such as if a request is bound to a particular path). Since this API is linked with the new extensions menu, calls will be ignored if the new menu is not enabled. However, we encourage you to try the API today, and consider adopting it in your extension. You'll provide a great user experience as the new menu changes gradually show for more users. To learn more about working with optional permissions, check out the permissions documentation. Try it out The API is enabled by default in Chrome 133.0.6838.0 and higher (currently in Chrome Canary). To enable the new menu, at chrome://flags, enable the \"Extensions Menu Access Control\" flag. As a reminder, this is still work in progress and may continue to evolve and change. We recommend testing in Chrome Canary to see the most up to date experience. You can leave feedback on the new design in the chromium-extensions mailing list which we'll be keeping in mind as we continue work on the new menu. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-11-19 UTC. [[[\"Easy to understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved my problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing the information I need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / too many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out of date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2024-11-19 UTC.\"],[],[]]",
  "image": "https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/hero.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv role=\"main\" has-sidebar=\"\"\u003e\n          \n          \n          \n          \n          \u003cdevsite-content\u003e\n            \n              \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003carticle\u003e\n  \n  \n  \n  \n  \n\n  \n  \n    \n  \u003cdevsite-feature-tooltip ack-key=\"AckCollectionsBookmarkTooltipDismiss\" analytics-category=\"Site-Wide Custom Events\" analytics-action-show=\"Callout Profile displayed\" analytics-action-close=\"Callout Profile dismissed\" analytics-label=\"Create Collection Callout\" dismiss-button=\"true\" id=\"devsite-collections-dropdown\" dismiss-button-text=\"Dismiss\" close-button-text=\"Got it\"\u003e\n\n    \n    \u003cdevsite-bookmark\u003e\u003c/devsite-bookmark\u003e\n\n    \u003cspan slot=\"popout-heading\"\u003e\n      \n      Stay organized with collections\n    \u003c/span\u003e\n    \u003cspan slot=\"popout-contents\"\u003e\n      \n      Save and categorize content based on your preferences.\n    \u003c/span\u003e\n  \u003c/devsite-feature-tooltip\u003e\n  \n  \n\n  \u003cdevsite-toc depth=\"2\" devsite-toc-embedded=\"\"\u003e\n  \u003c/devsite-toc\u003e\n  \n    \n  \n\n  \n\n\n\n\n\n\n\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Oliver Dunk\" src=\"https://web.dev/images/authors/oliverdunk.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003e\n  Published: November 19, 2024\n\u003c/p\u003e\n\n\n\u003cp\u003eAt Google I/O 2024, we shared some early designs for upcoming changes to the extensions menu, which give users more control over the sites extensions can access. We\u0026#39;re going to start testing these changes soon, beginning with a small percentage of users in Canary and with the hope to roll them out more widely in the future.\u003c/p\u003e\n\n\u003cp\u003eWhen talking to developers about this change in the past, we often heard concerns about the impact of changing the way extensions are able to request host permissions at install time. The new menu does not impact any default behavior. Extensions will continue to be granted access to all requested hosts at install time. The goal of these changes is to make it easier for users to discover controls that are already available.\u003c/p\u003e\n\n\u003cp\u003eThis post gives an overview of what to expect and how you can prepare your extensions with a new API to handle cases where access to a page has been withheld by the user.\u003c/p\u003e\n\n\u003ch2 id=\"whats_changing\" data-text=\"What\u0026#39;s changing?\" tabindex=\"-1\"\u003eWhat\u0026#39;s changing?\u003c/h2\u003e\n\n\u003cp\u003eTo give users more control, we will introduce a new extensions menu. Extensions will continue to be granted access to all requested hosts at install time, but users will now have an easier way to control access per extension.\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu.png\" alt=\"Work in progress design for the new extensions menu\" srcset=\"https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_36.png 36w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_48.png 48w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_72.png 72w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_96.png 96w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_480.png 480w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_720.png 720w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_856.png 856w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_960.png 960w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_1440.png 1440w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_1920.png 1920w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/menu_2880.png 2880w\" sizes=\"(max-width: 840px) 100vw, 856px\"/\u003e\n  \u003cfigcaption\u003eWork in progress design for the new extensions menu\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eThe new menu (pictured with the current design which may change) more clearly shows which extensions can run on a page, and gives users the ability to change access if chosen. A user can also prevent all extensions from running on a specific site. As mentioned, none of the available settings or defaults are changingâ€“we are focused on making what we already have easier for users to discover.\u003c/p\u003e\n\n\u003ch2 id=\"add_a_site_access_request\" data-text=\"Add a site access request\" tabindex=\"-1\"\u003eAdd a site access request\u003c/h2\u003e\n\n\u003cp\u003eWe have designed a new API to complement these changes, with significant input from other browsers and developers in the \u003ca href=\"https://github.com/w3c/webextensions\"\u003eWebExtensions Community Group\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf a user has withheld access to a page, extensions can now request access using the new \u003ca href=\"https://developer.chrome.com/docs/extensions/reference/api/permissions#method-addSiteAccessRequest\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003epermissions.addSiteAccessRequest\u003c/code\u003e\u003c/a\u003e API. When an extension does this, the user will see an \u0026#34;Allow\u0026#34; message alongside the extension puzzle piece in the toolbar. Here\u0026#39;s one design we are exploring:\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003cimg src=\"https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request.png\" alt=\"A site access request on example.com\" srcset=\"https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_36.png 36w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_48.png 48w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_72.png 72w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_96.png 96w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_480.png 480w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_720.png 720w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_856.png 856w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_960.png 960w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_1440.png 1440w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_1920.png 1920w,https://developer.chrome.com/static/blog/new-extensions-menu-testing/image/request_2880.png 2880w\" sizes=\"(max-width: 840px) 100vw, 856px\"/\u003e\n  \u003cfigcaption\u003eA site access request on example.com\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eWhen a user clicks \u0026#34;Allow\u0026#34; within the extensions menu, the extension is granted persistent access to the host. The user can withhold it again in the future by accessing the extensions menu or on the chrome://extensions page. Clicking \u0026#34;Allow 1?\u0026#34; within the toolbar provides a faster way to grant immediate access.\u003c/p\u003e\n\n\u003cp\u003eExtensions can call \u003ccode translate=\"no\" dir=\"ltr\"\u003epermissions.addSiteAccessRequest\u003c/code\u003e with a \u003ccode translate=\"no\" dir=\"ltr\"\u003etabId\u003c/code\u003e to show a permission request for that tab. You can use feature detection to safely begin using it in your extension today. The API won\u0026#39;t do anything for users without the new menu, but adopting it will benefit users with the new menu as it is gradually rolled out.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003echrome\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etabs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eonUpdated\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddListener\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etabId\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echanges\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u0026gt;\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003etypeof\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echanges\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e!==\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;string\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eURL\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echanges\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e// If we are on the /checkout page of example.com.\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eorigin\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;https://example.com\u0026#39;\u003c/span\u003e\u003cspan\u003e \u0026amp;\u0026amp; \u003c/span\u003e\u003cspan\u003eurl\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epathname\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e===\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#39;/checkout\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehasPermission\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eawait\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echrome\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epermissions\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtains\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003eorigins\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;https://example.com/*\u0026#39;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// We already have host permissions.\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ehasPermission\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e// Add a site access request if the API is available.\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003echrome\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epermissions\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddSiteAccessRequest\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003echrome\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epermissions\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddSiteAccessRequest\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etabId\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eIn this example, we only add a request if the user is on the \u003ccode translate=\"no\" dir=\"ltr\"\u003e/checkout\u003c/code\u003e page. You can see the \u003ca href=\"https://github.com/GoogleChrome/chrome-extensions-samples/tree/main/functional-samples/cookbook.permissions-addsiteaccessrequest\"\u003efull code\u003c/a\u003e in our chrome-extensions-samples repository.\u003c/p\u003e\n\n\u003cp\u003eExtensions should be mindful about when to ask users for access. Users are more likely to ignore noisy requests and Chrome might throttle excessive requests. A user can also choose to turn off the ability for an extension to show requests. As a result, you should only request access in specific situations, when you have high confidence the user will want to engage with your extension.\u003c/p\u003e\n\n\u003cp\u003eRequests are bound to a specific tab and are automatically cleared when a user navigates to a different origin. A corresponding \u003ca href=\"https://developer.chrome.com/docs/extensions/reference/api/permissions#method-removeSiteAccessRequest\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eremoveSiteAccessRequest\u003c/code\u003e\u003c/a\u003e method is available to clear a request explicitly (such as if a request is bound to a particular path).\u003c/p\u003e\n\n\u003cp\u003eSince this API is linked with the new extensions menu, calls will be ignored if the new menu is not enabled. However, we encourage you to try the API today, and consider adopting it in your extension. You\u0026#39;ll provide a great user experience as the new menu changes gradually show for more users.\u003c/p\u003e\n\n\u003cp\u003eTo learn more about working with optional permissions, check out the permissions \u003ca href=\"https://developer.chrome.com/docs/extensions/reference/api/permissions#implement_optional_permissions\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"try_it_out\" data-text=\"Try it out\" tabindex=\"-1\"\u003eTry it out\u003c/h2\u003e\n\n\u003cp\u003eThe API is enabled by default in Chrome 133.0.6838.0 and higher (currently in Chrome Canary). To enable the new menu, at chrome://flags, enable the \u0026#34;Extensions Menu Access Control\u0026#34; flag.\u003c/p\u003e\n\n\u003cp\u003eAs a reminder, this is still work in progress and may continue to evolve and change. We recommend testing in Chrome Canary to see the most up to date experience.\u003c/p\u003e\n\n\u003cp\u003eYou can leave feedback on the new design in the \u003ca href=\"https://groups.google.com/a/chromium.org/g/chromium-extensions\"\u003echromium-extensions\u003c/a\u003e mailing list which we\u0026#39;ll be keeping in mind as we continue work on the new menu.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\n\n  \n\n  \n    \n    \n      \n    \u003cdevsite-thumb-rating position=\"footer\"\u003e\n    \u003c/devsite-thumb-rating\u003e\n  \n       \n    \n    \n  \n\n  \n  \n\u003c/article\u003e\n\n\n\u003cdevsite-content-footer\u003e\n  \u003cp\u003eExcept as otherwise noted, the content of this page is licensed under the \u003ca href=\"https://creativecommons.org/licenses/by/4.0/\"\u003eCreative Commons Attribution 4.0 License\u003c/a\u003e, and code samples are licensed under the \u003ca href=\"https://www.apache.org/licenses/LICENSE-2.0\"\u003eApache 2.0 License\u003c/a\u003e. For details, see the \u003ca href=\"https://developers.google.com/site-policies\"\u003eGoogle Developers Site Policies\u003c/a\u003e. Java is a registered trademark of Oracle and/or its affiliates.\u003c/p\u003e\n  \u003cp\u003eLast updated 2024-11-19 UTC.\u003c/p\u003e\n\u003c/devsite-content-footer\u003e\n\n\n\u003cdevsite-notification\u003e\n\u003c/devsite-notification\u003e\n\n\n  \n\u003cp\u003e\n  \n  \n    \u003ctemplate\u003e\n      [[[\u0026#34;Easy to understand\u0026#34;,\u0026#34;easyToUnderstand\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Solved my problem\u0026#34;,\u0026#34;solvedMyProblem\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherUp\u0026#34;,\u0026#34;thumb-up\u0026#34;]],[[\u0026#34;Missing the information I need\u0026#34;,\u0026#34;missingTheInformationINeed\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Too complicated / too many steps\u0026#34;,\u0026#34;tooComplicatedTooManySteps\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Out of date\u0026#34;,\u0026#34;outOfDate\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Samples / code issue\u0026#34;,\u0026#34;samplesCodeIssue\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherDown\u0026#34;,\u0026#34;thumb-down\u0026#34;]],[\u0026#34;Last updated 2024-11-19 UTC.\u0026#34;],[],[]]\n    \u003c/template\u003e\n  \n\u003c/p\u003e\n            \n          \u003c/devsite-content\u003e\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
