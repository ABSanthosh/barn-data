{
  "id": "7c23f9e6-131d-429d-bddf-e928e76398b3",
  "title": "Solving Background Overflow With Inherited Border Radii",
  "link": "https://css-tricks.com/preventing-child-background-overflow-with-inherited-border-radii/",
  "description": "One of the interesting (but annoying) things about CSS is the background of children’s elements can bleed out of the border radius of the parent element. Here’s an example of a card with an inner element. If the inner element … Solving Background Overflow With Inherited Border Radii originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Zell Liew",
  "published": "Thu, 17 Oct 2024 15:24:02 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "background",
    "border-radius",
    "overflow"
  ],
  "byline": "Zell Liew",
  "length": 2740,
  "excerpt": "One of the interesting (but annoying) things about CSS is the background of children's elements can bleed out of the border radius of the parent element.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! One of the interesting (but annoying) things about CSS is the background of children’s elements can bleed out of the border radius of the parent element. Here’s an example of a card with an inner element. If the inner element is given a background, it can bleed out of the card’s border. The easiest way to resolve this problem is to add overflow: hidden to the card element. I’m sure that’s the go-to solution most of us reach for when this happens. But doing this creates a new problem — content outside the card element gets clipped off — so you can’t use negative margins or position: absolute to shift the children’s content out of the card. There is a slightly more tedious — but more effective — way to prevent a child’s background from bleeding out of the parent’s border-radius. And that is to add the same border-radius to the child element. The easiest way to do this is allowing the child to inherit the parent’s border-radius: .child { border-radius: inherit; } If the border-radius shorthand is too much, you can still inherit the radius for each of the four corners on a case-by-case basis: .child { border-top-left-radius: inherit; border-top-right-radius: inherit; border-bottom-left-radius: inherit; border-bottom-right-radius: inherit; } Or, for those of you who’re willing to use logical properties, here’s the equivalent. (For an easier way to understand logical properties, replace top and left with start, and bottom and right with end.) .child { border-start-start-radius: inherit; border-top-end-radius: inherit; border-end-start-radius: inherit; border-end-end-radius: inherit; } Can’t we just apply a background on the card? If you have a background directly on the .card that contains the border-radius, you will achieve the same effect. So, why not? Well, sometimes you can’t do that. One situation is when you have a .card that’s split into two, and only one part is colored in. So, why should we do this? Peace of mind is probably the best reason. At the very least, you know you won’t be creating problems down the road with the radius manipulation solution. This pattern is going to be especially helpful when CSS Anchor Positioning gains full support. I expect that would become the norm popover positioning soon in about 1-2 years. That said, for popovers, I personally prefer to move the popover content out of the document flow and into the \u003cbody\u003e element as a direct descendant. By doing this, I prevent overflow: hidden from cutting off any of my popovers when I use anchor positioning.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/381763",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eOne of the interesting (but annoying) things about CSS is the background of children’s elements can bleed out of the border radius of the parent element. Here’s an example of a card with an inner element. If the inner element is given a background, it can bleed out of the card’s border.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe easiest way to resolve this problem is to add \u003ccode\u003eoverflow: hidden\u003c/code\u003e to the card element. I’m sure that’s the go-to solution most of us reach for when this happens.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut doing this creates a new problem — content outside the card element gets clipped off — so you can’t use negative margins or \u003ccode\u003eposition: absolute\u003c/code\u003e to shift the children’s content out of the card.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThere is a slightly more tedious — but more effective — way to prevent a child’s background from bleeding out of the parent’s \u003ccode\u003eborder-radius\u003c/code\u003e. And that is to add the same \u003ccode\u003eborder-radius\u003c/code\u003e to the child element.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe easiest way to do this is allowing the child to \u003ccode\u003einherit\u003c/code\u003e the parent’s \u003ccode\u003eborder-radius\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.child {\n  border-radius: inherit;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIf the \u003ccode\u003eborder-radius\u003c/code\u003e shorthand is too much, you can still inherit the radius for each of the four corners on a case-by-case basis:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.child {\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n  border-bottom-right-radius: inherit;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOr, for those of you who’re willing to use logical properties, here’s the equivalent. (For an easier way to understand logical properties, replace top and \u003ccode\u003eleft\u003c/code\u003e with \u003ccode\u003estart\u003c/code\u003e, and \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e with \u003ccode\u003eend\u003c/code\u003e.)\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.child {\n  border-start-start-radius: inherit;\n  border-top-end-radius: inherit;\n  border-end-start-radius: inherit;\n  border-end-end-radius: inherit;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"why-not-just-apply-background-on-the-card-\"\u003eCan’t we just apply a background on the card?\u003c/h3\u003e\n\n\n\u003cp\u003eIf you have a \u003ccode\u003ebackground\u003c/code\u003e directly on the \u003ccode\u003e.card\u003c/code\u003e that contains the \u003ccode\u003eborder-radius\u003c/code\u003e, you will achieve the same effect. So, why not?\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWell, sometimes you can’t do that. One situation is when you have a \u003ccode\u003e.card\u003c/code\u003e that’s split into two, and only one part is colored in.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"reasons-for-using-radius-manipulation-over-overflow-hidden\"\u003eSo, why should we do this?\u003c/h3\u003e\n\n\n\u003cp\u003ePeace of mind is probably the best reason. At the very least, you know you won’t be creating problems down the road with the radius manipulation solution. \u003c/p\u003e\n\n\n\n\u003cp\u003eThis pattern is going to be especially helpful when \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCSS Anchor Positioning\u003c/a\u003e gains full support. I expect that would become the norm popover positioning soon in about 1-2 years.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat said, for popovers, I personally prefer to move the popover content out of the document flow and into the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element as a direct descendant. By doing this, I prevent \u003ccode\u003eoverflow: hidden\u003c/code\u003e from cutting off any of my popovers when I use anchor positioning.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-10-17T09:24:02-06:00",
  "modifiedTime": "2024-10-17T09:26:56-06:00"
}
