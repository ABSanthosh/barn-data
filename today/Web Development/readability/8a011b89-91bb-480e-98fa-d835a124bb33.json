{
  "id": "8a011b89-91bb-480e-98fa-d835a124bb33",
  "title": "Revisiting CSS border-image",
  "link": "https://css-tricks.com/revisiting-css-border-image/",
  "description": "I’ve used border-image regularly. Yet, it remains one of the most underused CSS tools, and I can’t, for the life of me, figure out why. Is it possible that people steer clear of border-image because its syntax is awkward and unintuitive? Perhaps it’s because most explanations don’t solve the type of creative implementation problems that most people need to solve. Most likely, it’s both. Revisiting CSS border-image originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Andy Clarke",
  "published": "Fri, 21 Mar 2025 13:24:11 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "border"
  ],
  "byline": "Andy Clarke",
  "length": 14355,
  "excerpt": "I’ve used border-image regularly. Yet, it remains one of the most underused CSS tools, and I can’t, for the life of me, figure out why. Is it possible that people steer clear of border-image because its syntax is awkward and unintuitive? Perhaps it’s because most explanations don’t solve the type of creative implementation problems that most people need to solve. Most likely, it’s both.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "In my last article on “Revisiting CSS Multi-Column Layout”, I mentioned that almost twenty years have flown by since I wrote my first book, Transcending CSS. In it, I explained how and why to use what were, at the time, an emerging CSS property. Ten years later, I wrote the Hardboiled Web Design Fifth Anniversary Edition, covering similar ground and introducing the new CSS border-image property. Hint: I published an updated version, Transcending CSS Revisited which is free to read online. Hardboiled Web Design is available from my bookshop. I was very excited about the possibilities this new property would offer. After all, we could now add images to the borders of any element, even table cells and rows (unless their borders had been set to collapse). Since then, I’ve used border-image regularly. Yet, it remains one of the most underused CSS tools, and I can’t, for the life of me, figure out why. Is it possible that people steer clear of border-image because its syntax is awkward and unintuitive? Perhaps it’s because most explanations don’t solve the type of creative implementation problems that most people need to solve. Most likely, it’s both. I’ve recently been working on a new website for Emmy-award-winning game composer Mike Worth. He hired me to create a highly graphical design that showcases his work, and I used border-image throughout. Design by Andy Clarke, Stuff \u0026 Nonsense. Mike Worth’s website will launch in April 2025, but you can see examples from this article on CodePen. A brief overview of properties and values First, here’s a short refresher. Most border-image explanations begin with this highly illuminating code snippet: border-image: \\[source\\] [slice]/\\[width]/[outset\\] [repeat] This is shorthand for a set of border-image properties, but it’s best to deal with properties individually to grasp the concept more easily. A border-image’s source I’ll start with the source of the bitmap or vector format image or CSS gradient to be inserted into the border space: border-image-source: url('/img/scroll.png'); When I insert SVG images into a border, I have several choices as to how. I could use an external SVG file: border-image-source: url('/img/scroll.svg'); Or I might convert my SVG to data URI using a tool like Base64.Guru although, as both SVG and HTML are XML-based, this isn’t recommended: border-image-source: url('data:image/svg+xml;base64,…'); Instead, I can add the SVG code directly into the source URL value and save one unnecessary HTTP request: border-image-source: url('data:image/svg+xml;utf8,…'); Finally, I could insert an entirely CSS-generated conical, linear, or radial gradient into my border: border-image-source: conical-gradient(…); Tip: It’s useful to remember that a browser renders a border-image above an element’s background and box-shadow but below its content. More on that a little later. Slicing up a border-image Now that I’ve specified the source of a border image, I can apply it to a border by slicing it up and using the parts in different positions around an element. This can be the most baffling aspect for people new to border-image. Most border-image explanations show an example where the pieces will simply be equally-sized, like this: However, a border-image can be developed from any shape, no matter how complex or irregular. Instead of simply inserting an image into a border and watching it repeat around an element, invisible cut-lines slice up a border-image into nine parts. These lines are similar to the slice guides found in graphics applications. The pieces are, in turn, inserted into the nine regions of an element’s border. The border-image-slice property defines the size of each slice by specifying the distance from each edge of the image. I could use the same distance from every edge: border-image-slice: 65 I can combine top/bottom and left/right values: border-image-slice: 115 65; Or, I can specify distance values for all four cut-lines, running clockwise: top, right, bottom, left: border-image-slice: 65 65 115 125; The top-left of an image will be used on the top-left corner of an element’s border. The bottom-right will be used on the bottom-right, and so on. I don’t need to add units to border-image-slice values when using a bitmap image as the browser correctly assumes bitmaps use pixels. The SVG viewBox makes using them a little different, so I also prefer to specify their height and width: \u003csvg height=\"600px\" width=\"600px\"\u003e…\u003c/svg\u003e Don’t forget to set the widths of these borders, as without them, there will be nowhere for a border’s image to display: border-image-width: 65px 65px 115px 125px; Filling in the center So far, I’ve used all four corners and sides of my image, but what about the center? By default, the browser will ignore the center of an image after it’s been sliced. But I can put it to use by adding the fill keyword to my border-image-slice value: border-image-slice: 65px 65px 115px 125px fill; Setting up repeats With the corners of my border images in place, I can turn my attention to the edges between them. As you might imagine, the slice at the top of an image will be placed on the top edge. The same is true of the right, bottom, and left edges. In a flexible design, we never know how wide or tall these edges will be, so I can fine-tune how images will repeat or stretch when they fill an edge. Stretch: When a sliced image is flat or smooth, it can stretch to fill any height or width. Even a tiny 65px slice can stretch to hundreds or thousands of pixels without degrading. border-image-repeat: stretch; Repeat: If an image has texture, stretching it isn’t an option, so it can repeat to fill any height or width. border-image-repeat: repeat; Round: If an image has a pattern or shape that can’t be stretched and I need to match the edges of the repeat, I can specify that the repeat be round. A browser will resize the image so that only whole pieces display inside an edge. border-image-repeat: round; Space: Similar to round, when using the space property, only whole pieces will display inside an edge. But instead of resizing the image, a browser will add spaces into the repeat. border-image-repeat: space; When I need to specify a separate stretch, repeat, round, or space value for each edge, I can use multiple keywords: border-image-repeat: stretch round; Outsetting a border-image There can be times when I need an image to extend beyond an element’s border-box. Using the border-image-outset property, I can do just that. The simplest syntax extends the border image evenly on all sides by 10px: border-image-outset: 10px; Of course, there being four borders on every element, I could also specify each outset individually: border-image-outset: 20px 10px; /* or */ border-image-outset: 20px 10px 0; border-image in action Mike Worth is a video game composer who’s won an Emmy for his work. He loves ’90s animation — especially Disney’s Duck Tales — and he asked me to create custom artwork and develop a bold, retro-style design. My challenge when developing for Mike was implementing my highly graphical design without compromising performance, especially on mobile devices. While it’s normal in CSS to accomplish the same goal in several ways, here, border-image often proved to be the most efficient. Decorative buttons The easiest and most obvious place to start was creating buttons reminiscent of stone tablets with chipped and uneven edges. I created an SVG of the tablet shape and added it to my buttons using border-image: button { border-image-repeat: stretch; border-image-slice: 10 10 10 10 fill; border-image-source: url('data:image/svg+xml;utf8,…'); border-image-width: 20px; } I set the border-image-repeat on all edges to stretch and the center slice to fill so these stone tablet-style buttons expand along with their content to any height or width. Article scroll I want every aspect of Mike’s website design to express his brand. That means continuing the ’90s cartoon theme in his long-form content by turning it into a paper scroll. The markup is straightforward with just a single article element: \u003carticle\u003e \u003c!-- ... --\u003e \u003c/article\u003e But, I struggled to decide how to implement the paper effect. My first thought was to divide my scroll into three separate SVG files (top, middle, and bottom) and use pseudo-elements to add the rolled up top and bottom parts of the scroll. I started by applying a vertically repeating graphic to the middle of my article: article { padding: 10rem 8rem; box-sizing: border-box; /* Scroll middle */ background-image: url('data:image/svg+xml;utf8,…'); background-position: center; background-repeat: repeat-y; background-size: contain; } Then, I added two pseudo-elements, each containing its own SVG content: article:before { display: block; position: relative; top: -30px; /* Scroll top */ content: url('data:image/svg+xml;utf8,…'); } article:after { display: block; position: relative; top: 50px; /* Scroll bottom */ content: url('data:image/svg+xml;utf8,…'); } While this implementation worked as expected, using two pseudo-elements and three separate SVG files felt clumsy. However, using border-image, one SVG, and no pseudo-elements feels more elegant and significantly reduces the amount of code needed to implement the effect. I started by creating an SVG of the complete tablet shape: And I worked out the position of the four cut-lines: Then, I inserted this single SVG into my article’s border by first selecting the source, slicing the image, and setting the top and bottom edges to stretch and the left and right edges to round: article { border-image-slice: 150 95 150 95 fill; border-image-width: 150px 95px 150px 95px; border-image-repeat: stretch round; border-image-source: url('data:image/svg+xml;utf8,…'); } The result is a flexible paper scroll effect which adapts to both the viewport width and any amount or type of content. Home page overlay My final challenge was implementing the action-packed graphic I’d designed for Mike Worth’s home page. This contains a foreground SVG featuring Mike’s orangutan mascot and a zooming background graphic: \u003csection\u003e \u003c!-- content --\u003e \u003cdiv\u003e...\u003c/div\u003e \u003c!-- ape --\u003e \u003cdiv\u003e \u003csvg\u003e…\u003c/svg\u003e \u003c/div\u003e \u003c/section\u003e I defined the section as a positioning context for its children: section { position: relative; } Then, I absolutely positioned a pseudo-element and added the zooming graphic to its background: section:before { content: \"\"; position: absolute; z-index: -1; background-image: url('data:image/svg+xml;utf8,…'); background-position: center center; background-repeat: no-repeat; background-size: 100%; } I wanted this graphic to spin and add subtle movement to the panel, so I applied a simple CSS animation to the pseudo-element: @keyframes spin-bg { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } section:before { animation: spin-bg 240s linear infinite; } Next, I added a CSS mask to fade the edges of the zooming graphic into the background. The CSS mask-image property specifies a mask layer image, which can be a PNG image, an SVG image or mask, or a CSS gradient: section:before { mask-image: radial-gradient(circle, rgb(0 0 0) 0%, rgb(0 0 0 / 0) 60%); mask-repeat: no-repeat; } At this point, you might wonder where a border image could be used in this design. To add more interactivity to the graphic, I wanted to reduce its opacity and change its color — by adding a colored gradient overlay — when someone interacts with it. One of the simplest, but rarely-used, methods for applying an overlay to an element is using border-image. First, I added a default opacity and added a brief transition: section:before { opacity: 1; transition: opacity .25s ease-in-out; } Then, on hover, I reduced the opacity to .5 and added a border-image: section:hover::before { opacity: .5; border-image: fill 0 linear-gradient(rgba(0,0,255,.25),rgba(255,0,0,1)); } You may ponder why I’ve not used the other border-image values I explained earlier, so I’ll dissect that declaration. First is the border-image-slice value, where zero pixels ensures that the eight corners and edges stay empty. The fill keyword ensures the middle section is filled with the linear gradient. Second, the border-image-source is a CSS linear gradient that blends blue into red. A browser renders this border-image above the background but behind the content. Conclusion: You should take a fresh look at border-image The border-image property is a powerful, yet often overlooked, CSS tool that offers incredible flexibility. By slicing, repeating, and outsetting images, you can create intricate borders, decorative elements, and even dynamic overlays with minimal code. In my work for Mike Worth’s website, border-image proved invaluable, improving performance while maintaining a highly graphical aesthetic. Whether used for buttons, interactive overlays, or larger graphic elements, border-image can create visually striking designs without relying on extra markup or multiple assets. If you’ve yet to experiment with border-image, now’s the time to revisit its potential and add it to your design toolkit. Hint: Mike Worth’s website will launch in April 2025, but you can see examples from this article on CodePen. About Andy Clarke Often referred to as one of the pioneers of web design, Andy Clarke has been instrumental in pushing the boundaries of web design and is known for his creative and visually stunning designs. His work has inspired countless designers to explore the full potential of product and website design. Andy’s written several industry-leading books, including Transcending CSS, Hardboiled Web Design, and Art Direction for the Web. He’s also worked with businesses of all sizes and industries to achieve their goals through design. Visit Andy’s studio, Stuff \u0026 Nonsense, and check out his Contract Killer, the popular web design contract template trusted by thousands of web designers and developers.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/border-image-menu.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eIn my last article on \u003ca href=\"https://css-tricks.com/revisiting-css-multi-column-layout/\"\u003e“Revisiting CSS Multi-Column Layout”\u003c/a\u003e, I mentioned that almost twenty years have flown by since I wrote my first book, \u003cem\u003eTranscending CSS\u003c/em\u003e. In it, I explained how and why to use what were, at the time, an emerging CSS property.\u003c/p\u003e\n\n\n\n\u003cp\u003eTen years later, I wrote the \u003ca href=\"https://stuffandnonsense.co.uk/hardboiled-web-design\" rel=\"noopener\"\u003e\u003cem\u003eHardboiled Web Design Fifth Anniversary Edition\u003c/em\u003e\u003c/a\u003e, covering similar ground and introducing the new CSS \u003ccode\u003eborder-image\u003c/code\u003e property.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHint\u003c/strong\u003e: I published an updated version, \u003cem\u003e\u003ca href=\"https://stuffandnonsense.co.uk/transcending-css-revisited/index.html\" rel=\"noopener\"\u003eTranscending CSS Revisited\u003c/a\u003e \u003c/em\u003ewhich is free to read online. Hardboiled Web Design is available from \u003ca href=\"https://stuffandnonsense.co.uk/books\" rel=\"noopener\"\u003emy bookshop\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eI was very excited about the possibilities this new property would offer. After all, we could now add images to the borders of any element, even table cells and rows (unless their borders had been set to collapse).\u003c/p\u003e\n\n\n\n\u003cp\u003eSince then, I’ve used \u003ccode\u003eborder-image\u003c/code\u003e regularly. Yet, it remains one of the most underused CSS tools, and I can’t, for the life of me, figure out why. Is it possible that people steer clear of \u003ccode\u003eborder-image\u003c/code\u003e because its syntax is awkward and unintuitive? Perhaps it’s because most explanations don’t solve the type of creative implementation problems that most people need to solve. Most likely, it’s both.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’ve recently been working on a new website for Emmy-award-winning game composer Mike Worth. He hired me to create a highly graphical design that showcases his work, and I used \u003ccode\u003eborder-image\u003c/code\u003e throughout.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"2560\" height=\"1758\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264165055_2025-03-1-scaled.webp?resize=2560%2C1758\u0026amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264165055_2025-03-1-scaled.webp?w=2560\u0026amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264165055_2025-03-1-scaled.webp?resize=300%2C206\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264165055_2025-03-1-scaled.webp?resize=1024%2C703\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264165055_2025-03-1-scaled.webp?resize=768%2C527\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264165055_2025-03-1-scaled.webp?resize=1536%2C1055\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264165055_2025-03-1-scaled.webp?resize=2048%2C1407\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eDesign by \u003ca href=\"https://stuffandnonsense.co.uk\" rel=\"noopener\"\u003eAndy Clarke, Stuff \u0026amp; Nonsense\u003c/a\u003e. Mike Worth’s website will launch in April 2025, but you can \u003ca href=\"https://codepen.io/collection/QbWmYL\" rel=\"noopener\"\u003esee examples from this article on CodePen\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\u003ch3 id=\"a-brief-overview-of-properties-and-values\"\u003eA brief overview of properties and values\u003c/h3\u003e\n\n\n\u003cp\u003eFirst, here’s a short refresher. Most \u003ccode\u003eborder-image\u003c/code\u003e explanations begin with this highly illuminating code snippet:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image: \\[source\\] [slice]/\\[width]/[outset\\] [repeat]\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is shorthand for a set of \u003ccode\u003eborder-image\u003c/code\u003e properties, but it’s best to deal with properties individually to grasp the concept more easily.\u003c/p\u003e\n\n\n\u003ch3 id=\"a-border-image-s-source\"\u003eA \u003ccode\u003eborder-image\u003c/code\u003e’s source\u003c/h3\u003e\n\n\n\u003cp\u003eI’ll start with the source of the bitmap or vector format image or CSS gradient to be inserted into the border space:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-source: url(\u0026#39;/img/scroll.png\u0026#39;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen I insert SVG images into a border, I have several choices as to how. I could use an external SVG file:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-source: url(\u0026#39;/img/scroll.svg\u0026#39;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOr I might convert my SVG to data URI using a tool like \u003ca href=\"https://base64.guru/converter/encode/image/svg\" rel=\"noopener\"\u003eBase64.Guru\u003c/a\u003e although, as both SVG and HTML are XML-based, \u003ca href=\"https://css-tricks.com/probably-dont-base64-svg/\"\u003ethis isn’t recommended\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-source: url(\u0026#39;data:image/svg+xml;base64,…\u0026#39;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eInstead, I can add the SVG code directly into the source URL value and save one unnecessary HTTP request:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-source: url(\u0026#39;data:image/svg+xml;utf8,…\u0026#39;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFinally, I could insert an entirely CSS-generated conical, linear, or radial gradient into my border:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-source: conical-gradient(…);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eTip:\u003c/strong\u003e It’s useful to remember that a browser renders a \u003ccode\u003eborder-image\u003c/code\u003e above an element’s background and \u003ccode\u003ebox-shadow\u003c/code\u003e but below its content. More on that a little later.\u003c/p\u003e\n\n\n\u003ch3 id=\"slicing-up-a-border-image-\"\u003eSlicing up a \u003ccode\u003eborder-image\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eNow that I’ve specified the source of a border image, I can apply it to a border by slicing it up and using the parts in different positions around an element. This can be the most baffling aspect for people new to \u003ccode\u003eborder-image\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eMost \u003ccode\u003eborder-image\u003c/code\u003e explanations show an example where the pieces will simply be equally-sized, like this:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1024\" height=\"293\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264637220_2025-03-2.webp?resize=1024%2C293\u0026amp;ssl=1\" alt=\"Showing nine star shapes in the same images displayed as a three-by-three grid.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264637220_2025-03-2-scaled.webp?resize=1024%2C293\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264637220_2025-03-2-scaled.webp?resize=300%2C86\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264637220_2025-03-2-scaled.webp?resize=768%2C219\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264637220_2025-03-2-scaled.webp?resize=1536%2C439\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264637220_2025-03-2-scaled.webp?resize=2048%2C585\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHowever, a \u003ccode\u003eborder-image\u003c/code\u003e can be developed from any shape, no matter how complex or irregular.\u003c/p\u003e\n\n\n\n\u003cp\u003eInstead of simply inserting an image into a border and watching it repeat around an element, invisible cut-lines slice up a \u003ccode\u003eborder-image\u003c/code\u003e into nine parts. These lines are similar to the slice guides found in graphics applications. The pieces are, in turn, inserted into the nine regions of an element’s border.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"2560\" height=\"768\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264662803_2025-03-3-scaled.webp?resize=2560%2C768\u0026amp;ssl=1\" alt=\"Dissecting the top, right, bottom, and left slices of a border image.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264662803_2025-03-3-scaled.webp?w=2560\u0026amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264662803_2025-03-3-scaled.webp?resize=300%2C90\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264662803_2025-03-3-scaled.webp?resize=1024%2C307\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264662803_2025-03-3-scaled.webp?resize=768%2C230\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264662803_2025-03-3-scaled.webp?resize=1536%2C461\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264662803_2025-03-3-scaled.webp?resize=2048%2C614\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eborder-image-slice\u003c/code\u003e property defines the size of each slice by specifying the distance from each edge of the image. I could use the same distance from every edge:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-slice: 65\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI can combine top/bottom and left/right values:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-slice: 115 65;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOr, I can specify distance values for all four cut-lines, running clockwise: top, right, bottom, left:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-slice: 65 65 115 125;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe top-left of an image will be used on the top-left corner of an element’s border. The bottom-right will be used on the bottom-right, and so on.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"2560\" height=\"1273\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264758550_2025-03-4-scaled.webp?resize=2560%2C1273\u0026amp;ssl=1\" alt=\"Diagram of the nine border image slices.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264758550_2025-03-4-scaled.webp?w=2560\u0026amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264758550_2025-03-4-scaled.webp?resize=300%2C149\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264758550_2025-03-4-scaled.webp?resize=1024%2C509\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264758550_2025-03-4-scaled.webp?resize=768%2C382\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264758550_2025-03-4-scaled.webp?resize=1536%2C764\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264758550_2025-03-4-scaled.webp?resize=2048%2C1018\u0026amp;ssl=1 2048w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eI don’t need to add units to \u003ccode\u003eborder-image-slice\u003c/code\u003e values when using a bitmap image as the browser correctly assumes bitmaps use pixels. The SVG \u003ccode\u003eviewBox\u003c/code\u003e makes using them a little different, so I also prefer to specify their \u003ccode\u003eheight\u003c/code\u003e and \u003ccode\u003ewidth\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"SVG\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;svg height=\u0026#34;600px\u0026#34; width=\u0026#34;600px\u0026#34;\u0026gt;…\u0026lt;/svg\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eDon’t forget to set the widths of these borders, as without them, there will be nowhere for a border’s image to display:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-width: 65px 65px 115px 125px;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"filling-in-the-center\"\u003eFilling in the center\u003c/h3\u003e\n\n\n\u003cp\u003eSo far, I’ve used all four corners and sides of my image, but what about the center? By default, the browser will ignore the center of an image after it’s been sliced. But I can put it to use by adding the \u003ccode\u003efill\u003c/code\u003e keyword to my \u003ccode\u003eborder-image-slice\u003c/code\u003e value:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-slice: 65px 65px 115px 125px fill;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch2 id=\"setting-up-repeats\"\u003eSetting up repeats\u003c/h2\u003e\n\n\n\u003cp\u003eWith the corners of my border images in place, I can turn my attention to the edges between them. As you might imagine, the slice at the top of an image will be placed on the top edge. The same is true of the right, bottom, and left edges. In a flexible design, we never know how wide or tall these edges will be, so I can fine-tune how images will repeat or stretch when they fill an edge.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"2560\" height=\"869\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264943610_2025-03-5-scaled.webp?resize=2560%2C869\u0026amp;ssl=1\" alt=\"Showing the same image four times, once per type of repeat, including stretch, repeat, round, and space.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264943610_2025-03-5-scaled.webp?w=2560\u0026amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264943610_2025-03-5-scaled.webp?resize=300%2C102\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264943610_2025-03-5-scaled.webp?resize=1024%2C347\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264943610_2025-03-5-scaled.webp?resize=768%2C261\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264943610_2025-03-5-scaled.webp?resize=1536%2C521\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741264943610_2025-03-5-scaled.webp?resize=2048%2C695\u0026amp;ssl=1 2048w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eStretch\u003c/strong\u003e: When a sliced image is flat or smooth, it can stretch to fill any height or width. Even a tiny \u003ccode\u003e65px\u003c/code\u003e slice can stretch to hundreds or thousands of pixels without degrading.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-repeat: stretch;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRepeat\u003c/strong\u003e: If an image has texture, stretching it isn’t an option, so it can repeat to fill any height or width.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-repeat: repeat;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eRound\u003c/strong\u003e: If an image has a pattern or shape that can’t be stretched and I need to match the edges of the repeat, I can specify that the repeat be \u003ccode\u003eround\u003c/code\u003e. A browser will resize the image so that only whole pieces display inside an edge.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-repeat: round;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSpace\u003c/strong\u003e: Similar to \u003ccode\u003eround\u003c/code\u003e, when using the space property, only whole pieces will display inside an edge. But instead of resizing the image, a browser will add spaces into the repeat.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-repeat: space;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhen I need to specify a separate \u003ccode\u003estretch\u003c/code\u003e, \u003ccode\u003erepeat\u003c/code\u003e, \u003ccode\u003eround\u003c/code\u003e, or \u003ccode\u003espace\u003c/code\u003e value for each edge, I can use multiple keywords:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-repeat: stretch round;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"outsetting-a-border-image-\"\u003eOutsetting a \u003ccode\u003eborder-image\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThere can be times when I need an image to extend beyond an element’s \u003ccode\u003eborder-box\u003c/code\u003e. Using the \u003ccode\u003eborder-image-outset\u003c/code\u003e property, I can do just that. The simplest syntax extends the border image evenly on all sides by \u003ccode\u003e10px\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-outset: 10px;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOf course, there being four borders on every element, I could also specify each outset individually:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eborder-image-outset: 20px 10px; \n/* or */\nborder-image-outset: 20px 10px 0;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"-border-image-in-action\"\u003e\u003ccode\u003eborder-image\u003c/code\u003e in action\u003c/h3\u003e\n\n\n\u003cp\u003eMike Worth is a video game composer who’s won an Emmy for his work. He loves ’90s animation — especially Disney’s \u003cem\u003eDuck Tales\u003c/em\u003e — and he asked me to create custom artwork and develop a bold, retro-style design.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"2560\" height=\"1758\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265156777_2025-03-6-scaled.webp?resize=2560%2C1758\u0026amp;ssl=1\" alt=\"Four examples of page layouts, including the main menu, a default page, message received confirmation, and a 404 page, all featuring bold cartoon illustrations reminiscent of nineties Disney cartoons.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265156777_2025-03-6-scaled.webp?w=2560\u0026amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265156777_2025-03-6-scaled.webp?resize=300%2C206\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265156777_2025-03-6-scaled.webp?resize=1024%2C703\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265156777_2025-03-6-scaled.webp?resize=768%2C527\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265156777_2025-03-6-scaled.webp?resize=1536%2C1055\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265156777_2025-03-6-scaled.webp?resize=2048%2C1407\u0026amp;ssl=1 2048w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eMy challenge when developing for Mike was implementing my highly graphical design without compromising performance, especially on mobile devices. While it’s normal in CSS to accomplish the same goal in several ways, here, \u003ccode\u003eborder-image\u003c/code\u003e often proved to be the most efficient.\u003c/p\u003e\n\n\n\u003ch3 id=\"decorative-buttons\"\u003eDecorative buttons\u003c/h3\u003e\n\n\n\u003cp\u003eThe easiest and most obvious place to start was creating buttons reminiscent of stone tablets with chipped and uneven edges.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"2560\" height=\"549\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265262847_2025-03-7-scaled.webp?resize=2560%2C549\u0026amp;ssl=1\" alt=\"Illustration of chipped and zagged edges spliced up for border-image.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265262847_2025-03-7-scaled.webp?w=2560\u0026amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265262847_2025-03-7-scaled.webp?resize=300%2C64\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265262847_2025-03-7-scaled.webp?resize=1024%2C219\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265262847_2025-03-7-scaled.webp?resize=768%2C165\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265262847_2025-03-7-scaled.webp?resize=1536%2C329\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741265262847_2025-03-7-scaled.webp?resize=2048%2C439\u0026amp;ssl=1 2048w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eI created an SVG of the tablet shape and added it to my buttons using \u003ccode\u003eborder-image\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebutton {\n  border-image-repeat: stretch;\n  border-image-slice: 10 10 10 10 fill;\n  border-image-source: url(\u0026#39;data:image/svg+xml;utf8,…\u0026#39;);\n  border-image-width: 20px;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI set the \u003ccode\u003eborder-image-repeat\u003c/code\u003e on all edges to \u003ccode\u003estretch\u003c/code\u003e and the center slice to \u003ccode\u003efill\u003c/code\u003e so these stone tablet-style buttons expand along with their content to any height or width.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"article-scroll\"\u003eArticle scroll\u003c/h3\u003e\n\n\n\u003cp\u003eI want every aspect of Mike’s website design to express his brand. That means continuing the ’90s cartoon theme in his long-form content by turning it into a paper scroll.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1600\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270707387_2025-03-8.webp?resize=1600%2C1080\u0026amp;ssl=1\" alt=\"Page layout of a paper scroll with jagged edges on the sides and rolled paper on the top and bottom.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270707387_2025-03-8.webp?w=1600\u0026amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270707387_2025-03-8.webp?resize=300%2C203\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270707387_2025-03-8.webp?resize=1024%2C691\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270707387_2025-03-8.webp?resize=768%2C518\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270707387_2025-03-8.webp?resize=1536%2C1037\u0026amp;ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe markup is straightforward with just a single \u003ccode\u003earticle\u003c/code\u003e element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;article\u0026gt;\n  \u0026lt;!-- ... --\u0026gt;\n\u0026lt;/article\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBut, I struggled to decide how to implement the paper effect. My first thought was to divide my scroll into three separate SVG files (top, middle, and bottom) and use pseudo-elements to add the rolled up top and bottom parts of the scroll. I started by applying a vertically repeating graphic to the middle of my article:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003earticle {\n  padding: 10rem 8rem;\n  box-sizing: border-box;\n  /* Scroll middle */\n  background-image: url(\u0026#39;data:image/svg+xml;utf8,…\u0026#39;);\n  background-position: center;\n  background-repeat: repeat-y;\n  background-size: contain;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen, I added two pseudo-elements, each containing its own SVG content:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003earticle:before {\n  display: block;\n  position: relative;\n  top: -30px;\n  /* Scroll top */\n  content: url(\u0026#39;data:image/svg+xml;utf8,…\u0026#39;);\n}\n\narticle:after {\n  display: block;\n  position: relative;\n  top: 50px;\n  /* Scroll bottom */\n  content: url(\u0026#39;data:image/svg+xml;utf8,…\u0026#39;);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhile this implementation worked as expected, using two pseudo-elements and three separate SVG files felt clumsy. However, using \u003ccode\u003eborder-image\u003c/code\u003e, one SVG, and no pseudo-elements feels more elegant and significantly reduces the amount of code needed to implement the effect.\u003c/p\u003e\n\n\n\n\u003cp\u003eI started by creating an SVG of the complete tablet shape:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"2560\" height=\"1099\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270415707_2025-03-9-scaled.webp?resize=2560%2C1099\u0026amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270415707_2025-03-9-scaled.webp?w=2560\u0026amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270415707_2025-03-9-scaled.webp?resize=300%2C129\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270415707_2025-03-9-scaled.webp?resize=1024%2C440\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270415707_2025-03-9-scaled.webp?resize=768%2C330\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270415707_2025-03-9-scaled.webp?resize=1536%2C659\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270415707_2025-03-9-scaled.webp?resize=2048%2C879\u0026amp;ssl=1 2048w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnd I worked out the position of the four cut-lines:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"2560\" height=\"1371\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270432341_2025-03-10-scaled.webp?resize=2560%2C1371\u0026amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270432341_2025-03-10-scaled.webp?w=2560\u0026amp;ssl=1 2560w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270432341_2025-03-10-scaled.webp?resize=300%2C161\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270432341_2025-03-10-scaled.webp?resize=1024%2C549\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270432341_2025-03-10-scaled.webp?resize=768%2C411\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270432341_2025-03-10-scaled.webp?resize=1536%2C823\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270432341_2025-03-10-scaled.webp?resize=2048%2C1097\u0026amp;ssl=1 2048w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThen, I inserted this single SVG into my article’s border by first selecting the source, slicing the image, and setting the top and bottom edges to \u003ccode\u003estretch\u003c/code\u003e and the left and right edges to \u003ccode\u003eround\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003earticle {\n  border-image-slice: 150 95 150 95 fill;\n  border-image-width: 150px 95px 150px 95px;\n  border-image-repeat: stretch round;\n  border-image-source: url(\u0026#39;data:image/svg+xml;utf8,…\u0026#39;);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe result is a flexible paper scroll effect which adapts to both the viewport width and any amount or type of content.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"home-page-overlay\"\u003eHome page overlay\u003c/h3\u003e\n\n\n\u003cp\u003eMy final challenge was implementing the action-packed graphic I’d designed for Mike Worth’s home page. This contains a foreground SVG featuring Mike’s orangutan mascot and a zooming background graphic:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1600\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270949769_2025-03-11.webp?resize=1600%2C1080\u0026amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270949769_2025-03-11.webp?w=1600\u0026amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270949769_2025-03-11.webp?resize=300%2C203\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270949769_2025-03-11.webp?resize=1024%2C691\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270949769_2025-03-11.webp?resize=768%2C518\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/s_377CE240D976C6DDFB6EFE1CAF71CAFBFAB7A0478263FF31ED4E15630F1E0AE6_1741270949769_2025-03-11.webp?resize=1536%2C1037\u0026amp;ssl=1 1536w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;section\u0026gt;\n  \u0026lt;!-- content --\u0026gt;\n  \u0026lt;div\u0026gt;...\u0026lt;/div\u0026gt;\n\n  \u0026lt;!-- ape --\u0026gt;\n  \u0026lt;div\u0026gt;\n    \u0026lt;svg\u0026gt;…\u0026lt;/svg\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/section\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI defined the \u003ccode\u003esection\u003c/code\u003e as a positioning context for its children:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esection {\n  position: relative;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen, I absolutely positioned a pseudo-element and added the zooming graphic to its background:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esection:before {\n  content: \u0026#34;\u0026#34;;\n  position: absolute;\n  z-index: -1;\n  background-image: url(\u0026#39;data:image/svg+xml;utf8,…\u0026#39;);\n  background-position: center center;\n  background-repeat: no-repeat;\n  background-size: 100%;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI wanted this graphic to spin and add subtle movement to the panel, so I applied a simple CSS animation to the pseudo-element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@keyframes spin-bg {\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n}\n\nsection:before {\n  animation: spin-bg 240s linear infinite;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNext, I added a CSS mask to fade the edges of the zooming graphic into the background. The CSS \u003ccode\u003emask-image\u003c/code\u003e property specifies a mask layer image, which can be a PNG image, an SVG image or mask, or a CSS gradient:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esection:before {\n  mask-image: radial-gradient(circle, rgb(0 0 0) 0%, rgb(0 0 0 / 0) 60%);\n  mask-repeat: no-repeat;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAt this point, you might wonder where a border image could be used in this design. To add more interactivity to the graphic, I wanted to reduce its \u003ccode\u003eopacity\u003c/code\u003e and change its color — by adding a colored gradient overlay — when someone interacts with it. One of the simplest, but rarely-used, methods for applying an overlay to an element is using \u003ccode\u003eborder-image\u003c/code\u003e. First, I added a default \u003ccode\u003eopacity\u003c/code\u003e and added a brief \u003ccode\u003etransition\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esection:before {\n  opacity: 1;\n  transition: opacity .25s ease-in-out;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen, on hover, I reduced the \u003ccode\u003eopacity\u003c/code\u003e to \u003ccode\u003e.5\u003c/code\u003e and added a \u003ccode\u003eborder-image\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esection:hover::before {\n  opacity: .5;\n  border-image: fill 0 linear-gradient(rgba(0,0,255,.25),rgba(255,0,0,1));\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou may ponder why I’ve not used the other \u003ccode\u003eborder-image\u003c/code\u003e values I explained earlier, so I’ll dissect that declaration. First is the \u003ccode\u003eborder-image-slice\u003c/code\u003e value, where zero pixels ensures that the eight corners and edges stay empty. The \u003ccode\u003efill\u003c/code\u003e keyword ensures the middle section is filled with the linear gradient. Second, the \u003ccode\u003eborder-image-source\u003c/code\u003e is a CSS linear gradient that blends blue into red. A browser renders this \u003ccode\u003eborder-image\u003c/code\u003e above the background but behind the content.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"conclusion-you-should-take-a-fresh-look-at-border-image-\"\u003eConclusion: You should take a fresh look at \u003ccode\u003eborder-image\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ccode\u003eborder-image\u003c/code\u003e property is a powerful, yet often overlooked, CSS tool that offers incredible flexibility. By slicing, repeating, and outsetting images, you can create intricate borders, decorative elements, and even dynamic overlays with minimal code.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn my work for Mike Worth’s website, \u003ccode\u003eborder-image\u003c/code\u003e proved invaluable, improving performance while maintaining a highly graphical aesthetic. Whether used for buttons, interactive overlays, or larger graphic elements, \u003ccode\u003eborder-image\u003c/code\u003e can create visually striking designs without relying on extra markup or multiple assets.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you’ve yet to experiment with \u003ccode\u003eborder-image\u003c/code\u003e, now’s the time to revisit its potential and add it to your design toolkit.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eHint\u003c/strong\u003e: Mike Worth’s website will launch in April 2025, but you can see \u003ca href=\"https://codepen.io/collection/QbWmYL\" rel=\"noopener\"\u003eexamples from this article on CodePen\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003ch4 id=\"about-andy-clarke\"\u003eAbout Andy Clarke\u003c/h4\u003e\n\n\n\u003cp\u003eOften referred to as one of the pioneers of web design, \u003ca href=\"https://stuffandnonsense.co.uk/\" rel=\"noopener\"\u003eAndy Clarke\u003c/a\u003e has been instrumental in pushing the boundaries of web design and is known for his creative and visually stunning designs. His work has inspired countless designers to explore the full potential of product and website design.\u003c/p\u003e\n\n\n\n\u003cp\u003eAndy’s written several industry-leading books, including \u003cem\u003eTranscending CSS\u003c/em\u003e, \u003cem\u003eHardboiled Web Design\u003c/em\u003e, and \u003cem\u003eArt Direction for the Web\u003c/em\u003e. He’s also worked with businesses of all sizes and industries to achieve their goals through design.\u003c/p\u003e\n\n\n\n\u003cp\u003eVisit Andy’s studio, \u003ca href=\"https://stuffandnonsense.co.uk/\" rel=\"noopener\"\u003eStuff \u0026amp; Nonsense\u003c/a\u003e, and check out his \u003ca href=\"https://stuffandnonsense.co.uk/projects/contract-killer\" rel=\"noopener\"\u003eContract Killer\u003c/a\u003e, the popular web design contract template trusted by thousands of web designers and developers.\u003c/p\u003e\n\n\n\n\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-03-21T07:24:11-06:00",
  "modifiedTime": "2025-03-21T07:24:24-06:00"
}
