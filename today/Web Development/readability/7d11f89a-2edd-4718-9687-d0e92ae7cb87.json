{
  "id": "7d11f89a-2edd-4718-9687-d0e92ae7cb87",
  "title": "How to Discover a CSS Trick",
  "link": "https://css-tricks.com/how-to-discover-a-css-trick/",
  "description": "Do we invent or discover CSS tricks? Lee Meyer discusses how creative limitations, recursive thinking, and unexpected combinations lead to his most interesting ideas. How to Discover a CSS Trick originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Lee Meyer",
  "published": "Fri, 25 Jul 2025 13:48:36 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "inspiration"
  ],
  "byline": "Lee Meyer",
  "length": 11883,
  "excerpt": "Do we invent or discover CSS tricks? Lee Meyer discusses how creative limitations, recursive thinking, and unexpected combinations lead to his most interesting ideas.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Do we invent or discover CSS tricks? Michelangelo described his sculpting process as chiseling away superfluous material to reveal the sculpture hidden inside the marble, and Stephen King says his ideas are pre-existing things he locates and uncovers “like fossils in the ground.” Paragraph one is early for me to get pretentious enough to liken myself to those iconic creative forces, but my work on CSS-Tricks feels like “discovering,” not “inventing,” secret synergies between CSS features, which have been eyeing each other from disparate sections of the MDN web docs and patiently waiting for someone to let them dance together in front of the world. Matchmaking for CSS features A strategy for finding unexpected alliances between CSS features to achieve the impossible is recursive thinking, which I bring to the CSS world from my engineering background. When you build recursive logic, you need to find an escape hatch to avoid infinite recursion, and this inception-style mindset helps me identify pairings of CSS features that seem at odds with each other yet work together surprisingly well. Take these examples from my CSS experiments: What if view-timeline took control of the thing that triggers view-timeline? This led to a pairing between view-timeline and position: fixed. These two features are like a bickering yet symbiotic “odd couple” at the heart of my web-slinger.css library for scroll-triggered animations in pure CSS. What if keyframe animations could trigger other keyframe animations? This idea led to a throuple comprised of keyframe animations, style queries, and animation-play-state, which together can simulate collision detection in CSS. What if scroll-state:(scrollable: value) could control which directions are scrollable? That question led to a scrollytelling version of a “Choose Your Own Adventure,” which — wait, I haven’t published that one yet, but when I do, try to look surprised. Accepting there is nothing new under the sun Indeed, Mark Twain thought new ideas don’t exist — he described them as illusions we create by combining ideas that have always existed, turning and overlaying them in a “mental kaleidoscope” to “make new and curious combinations.” It doesn’t mean creating is easy. No more than a safe can be cracked just by knowing the possible digits. This brings back memories of playing Space Quest III as a kid because after you quit the game, it would output smart-aleck command-line messages, one of which was: “Remember, we did it all with ones and zeros.” Perhaps the point of the mock inspirational tone is that we likely will not be able to sculpt like Michelangelo or make a bestselling game, even if we were given the same materials and tools (is this an inspirational piece or what?). However, understanding the limits of what creators do is the foundation for cracking the combination of creativity to open the door to somewhere we haven’t been. And one truth that helps with achieving magic with CSS is that its constraints help breed creativity. Embracing limitations Being asked “Why would you do that in CSS when you could just use JavaScript?” is like if you asked me: “Why would you write a poem when it’s easier to write prose?” Samuel Coleridge defined prose as “words in their best order,” but poetry as “the best words in the best order.” If you think about it, the difference between prose and poetry is that the latter is based on increased constraints, which force us to find unexpected connections between ideas. Similarly, the artist Phil Hansen learned that embracing limitation could drive creativity after he suffered permanent nerve damage in his hand, causing it to jitter, which prevented him from drawing the way he had in the past. His early experiments using this new mindset included limiting himself to creating a work using only 80 cents’ worth of supplies. This dovetails with the quote from Antoine de Saint-Exupéry often cited in web design, which says that perfection is achieved when there is nothing left to take away. Embracing nothingness The interesting thing about web design is how much it blends art and science. In both art and science, we challenge assumptions about whether commonsense relationships of cause and effect truly exist. Contrary to the saying in vernacular that “you can’t prove a negative,” we can. It’s not necessarily harder than proving a positive. So, in keeping with the discussion above of embracing limitations and removing the superfluous until a creation reveals itself, many of my article ideas prove a negative by challenging the assumption that one thing is necessary to produce another. Maybe we don’t need JavaScript to produce a Sudoku solver, a Tinder-style swiper, or a classic scroll-driven animation demo. Maybe we don’t need checkbox hacks to make CSS games. Maybe we don’t need to hack CSS at all to recreate similar effects to what’s possible in browsers that support the CSS if() function. Maybe I can impart web dev wisdom on CSS-Tricks without including CSS at all, by sharing the “source code” of my thought process to help make you a better developer and a better person. Going to extremes Sometimes we can make a well-worn idea new again by taking it to the extreme. Seth Godin coined the term “edgecraft” to describe a technique for generating ideas by pushing a competitive advantage as far to the edge as the market dares us to go. Similarly, sometimes you can take an old CSS feature that people have seen before, but push it further than anyone else to create something unique. For example: CSS-Tricks covered checkbox hacks and radio button hacks back in 2011. But in 2021, I decided to see if I could use hundreds of radio button hacks using HTML generated with Pug to create a working Sudoku app. At one point, I found out that Chrome dev tools can display an infinite spinner of death when you throw too much generated CSS at it, which meant I had to limit myself to a 4×4 Sudoku, but that taught me more about what CSS can do and what it can’t. The :target selector has existed since the 2000s. But in 2024, I took it to the extreme by using HAML to render the thousands of possible states of Tic Tac Toe to create a game with a computer opponent in pure CSS. At one point, CodePen refused to output as much HTML as I had asked it to, but it’s a fun way for newcomers to learn an important CSS feature; more engaging in my opinion than a table of contents demo. Creating CSS outsider art Chris Coyier has written about his distaste for the gatekeeping agenda hidden behind the question of whether CSS is a programming language. If CSS isn’t deemed as “real” programming, that can be used as an excuse to hold CSS experts in less esteem than people who code in imperative languages, which leads to unfair pay and toxic workplace dynamics. But maybe the other side always seems greener due to the envy radiating from the people on that side, because as a full-stack engineer who completed a computer science degree, I always felt left out of the front-end conversations. It didn’t feel right to put “full stack developer” on my résumé when the creation of everything users can see in a web app seemed mysterious to me. And maybe it wasn’t just psychosomatic that CSS made my head hurt compared to other types of coding because research indicates if you do fMRIs on people who are engaged in design tasks, you see that design cognition appears to involve a unique cognitive profile compared to conventional problem-solving, reflected in the areas of the brain that light up on the fMRIs. Studies show that the brain’s structure changes as people get better at different types of jobs. The brain’s structural plasticity is reminiscent of the way different muscles grow more pronounced with different types of exercise, but achieving what some of my colleagues could with CSS when my brain had been trained for decades on imperative logic felt about as approachable as lifting a car over my head. The intimidation I felt from CSS started to change when I learned about the checkbox hack because I could relate to hiding and showing divs based on checkboxes, which was routine in my work in the back of the front-end. My designer workmate challenged me to make a game in one night using just CSS. I came up with a pure text adventure game made out of radio button hacks. Since creative and curious people are more sensitive to novel stimuli, the design experts on my team were enthralled by my primitive demo, not because it was cutting-edge gameplay but because it was something they had never seen before. My engineering background was now an asset rather than a hindrance in the unique outsider perspective I could bring to the world of CSS. I was hooked. The hack I found to rewire my brain to become more CSS-friendly was to find analogies in CSS to the type of problem-solving I was more familiar with from imperative programming: CSS custom properties are like reactive variables in Vue. The :target selector in CSS is like client-side routing in a single-page application. The min() and max() functions in CSS can be used to simulate some of the logical operations we take for granted in imperative programming. So if you are still learning web development and CSS (ultimately, we are all still learning), instead of feeling imposter syndrome, consider that the very thing that makes you feel like an outsider could be what enables you to bring something unique to your usage of CSS. Finding the purpose Excited as I was when my CSS hacking ended up providing the opportunity to publish my experiments on CSS-Tricks, the first comment on the first hack I published on CSS-Tricks was a generic, defeatist “Why would you do that?” criticism. The other comments popped up and turned out to be more supportive, and I said in a previous article that I’ve made my peace with the fact that not everybody will like my articles. However, this is the second article in which I’ve brought up the critical comment from back in 2021. Hmm… Surely it wasn’t the reason I didn’t write another CSS-Tricks article for years. And it’s probably a coincidence that when I returned to CSS-Tricks last year, my first new article was a CSS hack that lends itself to accessibility after the person who left the negative comment about my first article seemed to have a bee in their bonnet about checkbox hacks breaking accessibility, even in fun CSS games not intended for production. Then again, limiting myself to CSS hacking that enables accessibility became a source of inspiration. We can all do with a reminder to at all times empathize with users who require screen readers, even when we are doing wacky experimental stuff, because we need to embrace the limitations not just of CSS but of our audience. I suppose the reason the negative comment continues to rankle with me is that I agree that clarifying the relevance and purpose of a CSS trick is important. And yet, if I’m right in saying a CSS trick is more like something we discover than something we make, then it’s like finding a beautiful feather when we go for a walk. At first, we pick it up just because we can, but if I bring you with me on the journey that led to the discovery, then you can help me decide whether the significance is that the feather we discovered makes a great quill or reveals that a rare species of bird lives in this region. It’s a journey versus destination thing to share the failures that led to compromises and the limitations I came up against when pushing the boundaries of CSS. When I bring you along on the route to the curious item I found, rather than just showing you that item, then after we part ways, you might retrace the steps and try a different fork in the path we followed, which could lead you to discover your own CSS trick.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/01/Untitled_Artwork-scaled.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eDo we invent or discover CSS tricks? Michelangelo described his sculpting process as chiseling away superfluous material \u003ca href=\"https://www.goodreads.com/quotes/1191114-the-sculpture-is-already-complete-within-the-marble-block-before\" rel=\"noopener\"\u003eto reveal the sculpture hidden inside the marble\u003c/a\u003e, and Stephen King \u003ca href=\"https://www.goodreads.com/quotes/7348210-stories-are-found-things-like-fossils-in-the-ground-stories\" rel=\"noopener\"\u003esays his ideas\u003c/a\u003e are pre-existing things he locates and uncovers “like fossils in the ground.” Paragraph one is early for me to get pretentious enough to liken myself to those iconic creative forces, but my work on CSS-Tricks feels like “discovering,” not “inventing,” secret synergies between CSS features, which have been eyeing each other from disparate sections of the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\" rel=\"noopener\"\u003eMDN web docs\u003c/a\u003e and patiently waiting for someone to let them dance together in front of the world.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"matchmaking-for-css-features\"\u003eMatchmaking for CSS features\u003c/h3\u003e\n\n\n\u003cp\u003eA strategy for finding unexpected alliances between CSS features to achieve the impossible is \u003ca href=\"https://publish.obsidian.md/followtheidea/Content/John/Recursive+Thinking+-+explored\" rel=\"noopener\"\u003erecursive thinking\u003c/a\u003e, which I bring to the CSS world from my engineering background. When you build recursive logic, you need to find an escape hatch to avoid infinite recursion, and this inception-style mindset helps me identify pairings of CSS features that seem at odds with each other yet work together surprisingly well. Take these examples from my CSS experiments:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eWhat if \u003ca href=\"https://css-tricks.com/almanac/functions/v/view/\"\u003e\u003ccode\u003eview-timeline\u003c/code\u003e\u003c/a\u003e took control of the thing that triggers \u003ccode\u003eview-timeline\u003c/code\u003e?\u003c/strong\u003e This led to a pairing between \u003ccode\u003eview-timeline\u003c/code\u003e and \u003ca href=\"https://www.codecademy.com/resources/docs/css/position/fixed\" rel=\"noopener\"\u003e\u003ccode\u003eposition: fixed\u003c/code\u003e\u003c/a\u003e. These two features are like a bickering yet symbiotic “odd couple” at the heart of my \u003ca href=\"https://css-tricks.com/web-slinger-css-like-wow-js-but-with-css-y-scroll-animations/\"\u003eweb-slinger.css\u003c/a\u003e library for scroll-triggered animations in pure CSS.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eWhat if \u003ca href=\"https://css-tricks.com/almanac/properties/a/animation/\"\u003ekeyframe animations\u003c/a\u003e could trigger other keyframe animations?\u003c/strong\u003e This idea led to a \u003ca href=\"https://jbsolicitors.com.au/throuple/\" rel=\"noopener\"\u003ethrouple\u003c/a\u003e comprised of keyframe animations, \u003ca href=\"https://developer.chrome.com/docs/css-ui/style-queries\" rel=\"noopener\"\u003estyle queries\u003c/a\u003e, and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state\" rel=\"noopener\"\u003e\u003ccode\u003eanimation-play-state\u003c/code\u003e\u003c/a\u003e, which together can simulate \u003ca href=\"https://css-tricks.com/worlds-collide-keyframe-collision-detection-using-style-queries/\"\u003ecollision detection in CSS\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eWhat if \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_conditional_rules/Container_scroll-state_queries#using_scrollable_queries\" rel=\"noopener\"\u003e\u003ccode\u003escroll-state:(scrollable: value\u003c/code\u003e)\u003c/a\u003e could control which directions are scrollable?\u003c/strong\u003e That question led to a \u003ca href=\"https://dl.acm.org/doi/fullHtml/10.1145/3605655.3605683\" rel=\"noopener\"\u003escrollytelling\u003c/a\u003e version of a “\u003ca href=\"https://www.cyoa.com/\" rel=\"noopener\"\u003eChoose Your Own Adventure\u003c/a\u003e,” which — wait, I haven’t published that one yet, but when I do, try to look surprised.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"accepting-there-is-nothing-new-under-the-sun\"\u003eAccepting there is nothing new under the sun\u003c/h3\u003e\n\n\n\u003cp\u003eIndeed, Mark Twain thought \u003ca href=\"https://www.goodreads.com/quotes/843880-there-is-no-such-thing-as-a-new-idea-it\" rel=\"noopener\"\u003enew ideas don’t exist\u003c/a\u003e — he described them as illusions we create by combining ideas that have always existed, turning and overlaying them in a “mental kaleidoscope” to “make new and curious combinations.” It doesn’t mean creating is easy. No more than a safe can be cracked just by knowing the possible digits.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis brings back memories of playing \u003ca href=\"https://en.wikipedia.org/wiki/Space_Quest_III\" rel=\"noopener\"\u003eSpace Quest III\u003c/a\u003e as a kid because after you quit the game, it would output smart-aleck command-line messages, one of which was: “Remember, we did it all with ones and zeros.” Perhaps the point of the mock inspirational tone is that we likely will not be able to sculpt like Michelangelo or make a bestselling game, even if we were given the same materials and tools (is this an inspirational piece or what?). However, understanding the limits of what creators do is the foundation for cracking the combination of creativity to open the door to somewhere we haven’t been. And one truth that helps with achieving magic with CSS is that its constraints help breed creativity.\u003c/p\u003e\n\n\n\u003ch3 id=\"embracing-limitations\"\u003eEmbracing limitations\u003c/h3\u003e\n\n\n\u003cp\u003eBeing asked “Why would you do that in CSS when you could just use JavaScript?” is like if you asked me: “Why would you write a poem when it’s easier to write prose?” Samuel Coleridge \u003ca href=\"https://www.goodreads.com/quotes/537027-prose-words-in-their-best-order-poetry-the-best-words\" rel=\"noopener\"\u003edefined\u003c/a\u003e prose as “words in their best order,” but poetry as “the best words in the best order.” If you think about it, the difference between prose and poetry is that the latter is based on increased constraints, which force us to find unexpected connections between ideas.\u003c/p\u003e\n\n\n\n\u003cp\u003eSimilarly, the artist \u003ca href=\"https://www.philinthecircle.com/\" rel=\"noopener\"\u003ePhil Hansen\u003c/a\u003e learned that \u003ca href=\"https://youtu.be/YrZTho_o_is?feature=shared\" rel=\"noopener\"\u003eembracing limitation\u003c/a\u003e could drive creativity after he suffered permanent nerve damage in his hand, causing it to jitter, which prevented him from drawing the way he had in the past. His early experiments using this new mindset included limiting himself to creating \u003ca href=\"https://www.facebook.com/Starbucks/photos/amazing-artwork-from-phil-hansen-were-honored-to-be-part-of-it-httpsbuxcozgys4v/10151485693453057/?_rdr\" rel=\"noopener\"\u003ea work using only 80 cents’ worth of supplies\u003c/a\u003e. This dovetails with \u003ca href=\"https://www.goodreads.com/quotes/19905-perfection-is-achieved-not-when-there-is-nothing-more-to\" rel=\"noopener\"\u003ethe quote\u003c/a\u003e from Antoine de Saint-Exupéry often \u003ca href=\"https://uxmag.com/articles/when-theres-nothing-left-to-take-away\" rel=\"noopener\"\u003ecited in web design\u003c/a\u003e, which says that perfection is achieved when there is nothing left to take away.\u003c/p\u003e\n\n\n\u003ch3 id=\"embracing-nothingness\"\u003eEmbracing nothingness\u003c/h3\u003e\n\n\n\u003cp\u003eThe interesting thing about web design is how much it blends art and science. In both art and science, we challenge assumptions about whether commonsense relationships of cause and effect truly exist. Contrary to the saying in vernacular that “you can’t prove a negative,” \u003ca href=\"https://en.wikipedia.org/wiki/Null_hypothesis\" rel=\"noopener\"\u003ewe can\u003c/a\u003e. It’s not necessarily harder than proving a positive. So, in keeping with the discussion above of embracing limitations and removing the superfluous until a creation reveals itself, many of my article ideas prove a negative by challenging the assumption that one thing is necessary to produce another.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eMaybe we don’t need JavaScript to produce a \u003ca href=\"https://css-tricks.com/generating-and-solving-sudokus-in-css/\"\u003eSudoku solver\u003c/a\u003e, a \u003ca href=\"https://css-tricks.com/web-slinger-css-across-the-swiper-verse/\"\u003eTinder-style swiper\u003c/a\u003e, or a \u003ca href=\"https://css-tricks.com/slide-through-unlimited-dimensions-with-css-scroll-timelines/\"\u003eclassic scroll-driven animation demo\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eMaybe we don’t need checkbox hacks to make \u003ca href=\"https://css-tricks.com/time-travelling-css-with-target/\"\u003eCSS games\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eMaybe we don’t need to hack CSS at all to \u003ca href=\"https://css-tricks.com/the-what-if-machine-bringing-the-iffy-future-of-css-into-the-present/\"\u003erecreate similar effects\u003c/a\u003e to what’s possible in browsers that support the \u003ca href=\"https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/\"\u003eCSS \u003ccode\u003eif()\u003c/code\u003e function\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eMaybe I can impart web dev wisdom on CSS-Tricks without including CSS at all, by sharing the “source code” of my thought process to help make you \u003ca href=\"https://css-tricks.com/applying-the-web-dev-mindset-to-dealing-with-life-challenges/\"\u003ea better developer and a better person\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"going-to-extremes\"\u003eGoing to extremes\u003c/h3\u003e\n\n\n\u003cp\u003eSometimes we can make a well-worn idea new again by taking it to the extreme. Seth Godin coined the term “\u003ca href=\"https://seths.blog/2013/09/edgecraft-instead-of-brainstorming/\" rel=\"noopener\"\u003eedgecraft\u003c/a\u003e” \u003ca href=\"https://seths.blog/2013/09/edgecraft-instead-of-brainstorming/\" rel=\"noopener\"\u003e\u003c/a\u003eto describe a technique for generating ideas by pushing a competitive advantage as far to the edge as the market dares us to go. Similarly, sometimes you can take an old CSS feature that people have seen before, but push it further than anyone else to create something unique. For example:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCSS-Tricks covered \u003ca href=\"https://css-tricks.com/the-checkbox-hack/\"\u003echeckbox hacks and radio button hacks\u003c/a\u003e back in 2011.\u003c/strong\u003e But in 2021, I decided to see if I could use hundreds of radio button hacks using HTML generated with \u003ca href=\"https://www.sitepoint.com/a-beginners-guide-to-pug/\" rel=\"noopener\"\u003ePug\u003c/a\u003e to create a working Sudoku app. At one point, I found out that Chrome dev tools can display an infinite spinner of death when you throw too much generated CSS at it, which meant I had to limit myself to a 4×4 Sudoku, but that taught me more about what CSS can do and what it can’t.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eThe \u003ccode\u003e:target\u003c/code\u003e selector has existed since the 2000s.\u003c/strong\u003e But in 2024, I took it to the extreme by using \u003ca href=\"https://haml.info/\" rel=\"noopener\"\u003eHAML\u003c/a\u003e to render the thousands of possible states of Tic Tac Toe to create a game with a computer opponent in pure CSS. At one point, CodePen refused to output as much HTML as I had asked it to, but it’s a fun way for newcomers to learn an important CSS feature; more engaging in my opinion than a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:target\" rel=\"noopener\"\u003etable of contents\u003c/a\u003e demo.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"creating-css-outsider-art\"\u003eCreating CSS outsider art\u003c/h3\u003e\n\n\n\u003cp\u003eChris Coyier \u003ca href=\"https://css-tricks.com/is-css-a-programming-language/\"\u003ehas written\u003c/a\u003e about his distaste for the gatekeeping agenda hidden behind the question of whether CSS is a programming language. If CSS isn’t deemed as “real” programming, that can be used as an excuse to hold CSS experts in less esteem than people who code in imperative languages, which leads to unfair pay and toxic workplace dynamics.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut maybe the other side always seems greener due to the envy radiating from the people on that side, because as a full-stack engineer who completed a computer science degree, I always felt left out of the front-end conversations. It didn’t feel right to put “full stack developer” on my résumé when the creation of everything users can see in a web app seemed mysterious to me.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnd maybe it wasn’t just psychosomatic that CSS made my head hurt compared to other types of coding because \u003ca href=\"https://samgilbert.net/pubs/Alexiou2009DesignStudies.pdf\" rel=\"noopener\"\u003eresearch\u003c/a\u003e indicates if you do fMRIs on people who are engaged in design tasks, you see that design cognition appears to involve a unique cognitive profile compared to conventional problem-solving, reflected in the areas of the brain that light up on the fMRIs. Studies show that the \u003ca href=\"https://www.pnas.org/doi/pdf/10.1073/pnas.070039597\" rel=\"noopener\"\u003ebrain’s structure changes\u003c/a\u003e as people \u003ca href=\"https://www.jneurosci.org/content/23/27/9240\" rel=\"noopener\"\u003eget better\u003c/a\u003e at \u003ca href=\"https://www.frontiersin.org/journals/sports-and-active-living/articles/10.3389/fspor.2024.1393988/full\" rel=\"noopener\"\u003edifferent types of jobs\u003c/a\u003e. The brain’s \u003ca href=\"https://www.frontiersin.org/journals/neuroscience/articles/10.3389/fnins.2020.00075/full\" rel=\"noopener\"\u003estructural plasticity\u003c/a\u003e is reminiscent of the way different muscles grow more pronounced with different types of exercise, but achieving what some of my colleagues could with CSS when my brain had been trained for decades on imperative logic felt about as approachable as lifting a car over my head.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe intimidation I felt from CSS started to change when I learned about the checkbox hack because I could relate to hiding and showing divs based on checkboxes, which was routine in my work in the \u003ca href=\"https://css-tricks.com/front-of-the-front-back-of-the-front/\"\u003eback of the front-end\u003c/a\u003e. My designer workmate challenged me to make a game in one night using just CSS. I came up with a pure text adventure game made out of radio button hacks. Since creative and curious people are \u003ca href=\"https://www.cambridge.org/core/journals/behavioral-and-brain-sciences/article/shared-noveltyseeking-basis-for-creativity-and-curiosity/F812089A4E78C25A4A01C86EB2C873A1\" rel=\"noopener\"\u003emore sensitive to novel stimuli\u003c/a\u003e, the design experts on my team were enthralled by my primitive demo, not because it was cutting-edge gameplay but because it was something they had never seen before. My engineering background was now an asset rather than a hindrance in the unique outsider perspective I could bring to the world of CSS. I was hooked.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe hack I found to rewire my brain to become more CSS-friendly was to find analogies in CSS to the type of problem-solving I was more familiar with from imperative programming:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\"\u003eCSS custom properties\u003c/a\u003e are like \u003ca href=\"https://vuejs.org/guide/essentials/reactivity-fundamentals.html\" rel=\"noopener\"\u003ereactive variables in Vue\u003c/a\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe \u003ccode\u003e:target\u003c/code\u003e selector in CSS is like \u003ca href=\"https://info340.github.io/client-side-routing.html\" rel=\"noopener\"\u003eclient-side routing\u003c/a\u003e in a single-page application.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe \u003ccode\u003emin()\u003c/code\u003e and \u003ccode\u003emax()\u003c/code\u003e \u003ca href=\"https://web.dev/articles/min-max-clamp\" rel=\"noopener\"\u003efunctions\u003c/a\u003e in CSS can be used to simulate some of the \u003ca href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators\" rel=\"noopener\"\u003elogical operations\u003c/a\u003e we take for granted in imperative programming.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eSo if you are still learning web development and CSS (ultimately, we are all still learning), instead of feeling imposter syndrome, consider that the very thing that makes you feel like an outsider could be what enables you to bring something unique to your usage of CSS.\u003c/p\u003e\n\n\n\u003ch3 id=\"finding-the-purpose\"\u003eFinding the purpose\u003c/h3\u003e\n\n\n\u003cp\u003eExcited as I was when my CSS hacking ended up providing the opportunity to publish my experiments on CSS-Tricks, the \u003ca href=\"https://css-tricks.com/generating-and-solving-sudokus-in-css/#comment-1771282\"\u003efirst comment\u003c/a\u003e on the first hack I published on CSS-Tricks was a generic, defeatist “Why would you do that?” criticism. The other comments popped up and turned out to be more supportive, and I \u003ca href=\"https://css-tricks.com/applying-the-web-dev-mindset-to-dealing-with-life-challenges/\"\u003esaid in a previous article\u003c/a\u003e that I’ve made my peace with the fact that not everybody will like my articles. However, this is the second article in which I’ve brought up the critical comment from back in 2021. Hmm…\u003c/p\u003e\n\n\n\n\u003cp\u003eSurely it wasn’t the reason I didn’t write another CSS-Tricks article for years. And it’s probably a coincidence that when I returned to CSS-Tricks last year, my \u003ca href=\"https://css-tricks.com/time-travelling-css-with-target/\"\u003efirst new article\u003c/a\u003e was a CSS hack that lends itself to accessibility after the person who left the negative comment about my first article seemed to have a bee in their bonnet about \u003ca href=\"https://css-tricks.com/whack-a-mole-the-css-edition/#comment-1767099\"\u003echeckbox hacks breaking accessibility\u003c/a\u003e, even in fun CSS games not intended for production. Then again, limiting myself to CSS hacking that enables accessibility became a source of inspiration. We can all do with a reminder to at all times empathize with users who require screen readers, even when we are doing wacky experimental stuff, because we need to embrace the limitations not just of CSS but of our audience.\u003c/p\u003e\n\n\n\n\u003cp\u003eI suppose the reason the negative comment continues to rankle with me is that I agree that clarifying the relevance and purpose of a CSS trick is important. And yet, if I’m right in saying a CSS trick is more like something we discover than something we make, then it’s like finding a beautiful feather when we go for a walk. At first, we pick it up just because we can, but if I bring you with me on the journey that led to the discovery, then you can help me decide whether the significance is that the feather we discovered makes a great quill or reveals that a rare species of bird lives in this region.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt’s a \u003ca href=\"https://youtu.be/3G8Utd1OhQ4?feature=shared\" rel=\"noopener\"\u003ejourney versus destination\u003c/a\u003e thing to share the failures that led to compromises and the limitations I came up against when pushing the boundaries of CSS. When I bring you along on the route to the curious item I found, rather than just showing you that item, then after we part ways, you might retrace the steps and try a different fork in the path we followed, which could lead you to discover your own CSS trick.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2025-07-25T07:48:36-06:00",
  "modifiedTime": "2025-07-25T07:48:39-06:00"
}
