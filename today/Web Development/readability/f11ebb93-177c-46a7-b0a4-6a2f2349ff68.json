{
  "id": "f11ebb93-177c-46a7-b0a4-6a2f2349ff68",
  "title": "Functions in CSS?!",
  "link": "https://css-tricks.com/functions-in-css/",
  "description": "Arguments?! Return values?! What's crazier, you can use functions right now in Chrome Canary! So, after reading and playing around, here are my key insights on what you need to know about CSS Functions. Functions in CSS?! originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Juan Diego Rodríguez",
  "published": "Mon, 03 Mar 2025 13:34:22 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Notes",
    "functions"
  ],
  "byline": "Juan Diego Rodríguez",
  "length": 9953,
  "excerpt": "Arguments?! Return values?! What's crazier, you can use functions right now in Chrome Canary! So, after reading and playing around, here are my key insights on what you need to know about CSS Functions.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "A much-needed disclaimer: You (kinda) can use functions now! I know, it isn’t the most pleasant feeling to finish reading about a new feature just for the author to say “And we’ll hopefully see it in a couple of years”. Luckily, right now you can use an (incomplete) version of CSS functions in Chrome Canary behind an experimental flag, although who knows when we’ll get to use them in a production environment. Arguments, defaults, and returns! I was drinking coffee when I read the news on Chrome prototyping functions in CSS and… I didn’t spit it or anything. I was excited, but thought “functions” in CSS would be just like mixins in Sass — you know, patterns for establishing reusable patterns. That’s cool but is really more or less syntactic sugar for writing less CSS. But I looked at the example snippet a little more closely and that’s when the coffee nearly came shooting out my mouth. From Bramus in Bluesky Arguments?! Return values?! That’s worth spitting my coffee out for! I had to learn more about them, and luckily, the spec is clearly written, which you can find right here. What’s crazier, you can use functions right now in Chrome Canary! So, after reading and playing around, here are my key insights on what you need to know about CSS Functions. What exactly is a function in CSS? I like this definition from the spec: Custom functions allow authors the same power as custom properties, but parameterized They are used in the same places you would use a custom property, but functions return different things depending on the argument we pass. The syntax for the most basic function is the @function at-rule, followed by the name of the function as a \u003cdashed-ident\u003e + () @function --dashed-border() { /* ... */ } A function without arguments is like a custom property, so meh… To make them functional we can pass arguments inside the parenthesis, also as \u003cdashed-ident\u003es @function --dashed-border(--color) { /* ... */ } We can use the result descriptor to return something based on our argument: @function --dashed-border(--color) { result: 2px dashed var(--color); } div { border: --dashed-border(blue); /* 2px dashed blue */ } We can even use defaults! Just write a colon (:) followed by the default value for that argument. @function --dashed-border(--color: red) { result: 2px dashed var(--color); } div { border: --dashed-border(); /* 2px dashed red */ } This reminds me of Adam Argyle’s experiment on a functional CSS concept. Functions can have type-checking Functions can have type-checking for arguments and return values, which will be useful whenever we want to interpolate a value just like we do with variables created with @property, and once we have inline conditionals, to make different calculations depending on the argument type. To add argument types, we pass a syntax component. That is the type enclosed in angle brackets, where color is \u003ccolor\u003e and length is \u003clength\u003e, just to name a couple. There are also syntax multipliers like plus (+) to accept a space-separated list of that type. @function --custom-spacing(--a \u003clength\u003e) { /* ... */ } /* e.g. 10px */ @function --custom-background(--b \u003ccolor\u003e) { /* ... */ } /* e.g. hsl(50%, 30% 50%) */ @function --custom-margin(--c \u003clength\u003e+) { /* ... */ } /* e.g. 10px 2rem 20px */ If instead, we want to define the type of the return value, we can write the returns keyword followed by the syntax component: @function --progression(--current, --total) returns \u003cpercentage\u003e { result: calc(var(--current) / var(--total) * 100%); } Just a little exception for types: if we want to accept more than one type using the syntax combinator (|), we’ll have to enclose the types in a type() wrapper function: @function --wideness(--d type(\u003cnumber\u003e | \u003cpercentage\u003e)) { /* ... */ } Functions can have list arguments While it doesn’t currently seem to work in Canary, we’ll be able in the future to take lists as arguments by enclosing them inside curly braces. So, this example from the spec passes a list of values like {1px, 7px, 2px} and gets its maximum to perform a sum. @function --max-plus-x(--list, --x) { result: calc(max(var(--list)) + var(--x)); } div { width: --max-plus-x({ 1px, 7px, 2px }, 3px); /* 10px */ } I wonder then, will it be possible to select a specific element from a list? And also define how long should the list should be? Say we want to only accept lists that contain four elements, then select each individually to perform some calculation and return it. Many questions here! Early returns aren’t possible That’s correct, early returns aren’t possible. This isn’t something defined in the spec that hasn’t been prototyped, but something that simply won’t be allowed. So, if we have two returns, one enclosed early behind a @media or @supports at-rule and one outside at the end, the last result will always be returned: @function --suitable-font-size() { @media (width \u003e 1000px) { result: 20px; } result: 16px; /* This always returns 16px */ } We have to change the order of the returns, leaving the conditional result for last. This doesn’t make a lot of sense in other programming languages, where the function ends after returning something, but there is a reason the C in CSS stands for Cascade: this order allows the conditional result to override the last result which is very CSS-y is nature: @function --suitable-font-size() { result: 16px; @media (width \u003e 1000px) { result: 20px; } } Imagining the possibilities Here I wanted everyone to chip in and write about the new things we could make using functions. So the team here at CSS-Tricks put our heads together and thought about some use cases for functions. Some are little helper functions we’ll sprinkle a lot throughout our CSS, while others open new possibilities. Remember, all of these examples should be viewed in Chrome Canary until support expands to other browsers. Here’s a basic helper function from Geoff that sets fluid type: @function --fluid-type(--font-min, --font-max) { result: clamp(var(--font-min), 4vw + 1rem, var(--font-max)); } h2 { font-size: --fluid-type(24px, 36px); } This one is from Ryan, who is setting the width with an intrinsic container function — notice the default arguments. @function --intrinsic-container(--inline-margin: 1rem, --max-width: 60ch) { result: min(100% - var(--inline-margin), var(--max-width)); } And check out this second helper function from Ryan to create grid layouts: @function --layout-sidebar(--sidebar-width: 10ch) { result: 1fr; @media (width \u003e 640px) { result: fit-content(var(--sidebar-width)) minmax(min(50vw, 30ch), 1fr); } } This is one of those snippets I’m always grabbing from Steph Eckles’ smolcss site, and having a function would be so much easier. Actually, most of the snippets on Steph’s site would be awesome functions. This one is from moi. When I made that demo using tan(atan2()) to create viewport transitions, I used a helper property called --wideness to get the screen width as a decimal between 0 to 1. At that moment, I wished for a function form of --wideness. As I described it back then: You pass a lower and upper bound as pixels, and it will return a 0 to 1 value depending on how wide the screen is. So for example, if the screen is 800px, wideness(400px, 1200px) would return 0.5 since it’s the middle point I thought I would never see it, but now I can make it myself! Using that wideness function, I can move an element through its offset-path as the screen goes from 400px to 800px: .marker { offset-path: path(\"M 5 5 m -4, 0 a 4,4 0 1,0 8,0 a 4,4 0 1,0 -8,0\"); /* Circular Orbit */ offset-distance: calc(--wideness(400, 800) * 100%); /* moves the element when the screen goes from 400px to 800px */ } What’s missing? According to Chrome’s issue on CSS Functions, we are in a super early stage since we cannot: …use local variables. Although I tried them and they seem to work. …use recursive functions (they crash!), …list arguments, …update a function and let the appropriate styles change, …use @function in cascade layers, or in the CSS Object Model (CSSOM), …use “the Iverson bracket functions … so any @media queries or similar will need to be made using helper custom properties (on :root or similar).” After reading what on earth an Iverson bracket is, I understood that we currently can’t have a return value behind a @media or @support rule. For example, this snippet from the spec shouldn’t work: @function --suitable-font-size() { result: 16px; @media (width \u003e 1000px) { result: 20px; } } Although, upon testing, it seems like it’s supported now. Still, we can use a provisional custom property and return it at the end if it isn’t working for you: @function --suitable-font-size() { --size: 16px; @media (width \u003e 600px) { --size: 20px; } result: var(--size); } What about mixins? Soon, they’ll be here. According to the spec: At this time, this specification only defines custom functions, which operate at the level of CSS values. It is expected that it will define “mixins” later, which are functions that operate at the style rule level. In conclusion… I say it with confidence: functions will bring an enormous change to CSS, not in the sense that we’ll write it any differently — we won’t use functions to center a \u003cdiv\u003e, but they will simplify hack-ish CSS and open a lot of new possibilities. There’ll be a time when our cyborg children ask us from their education pods, “Is it true you guys didn’t have functions in CSS?” And we’ll answer “No, Zeta-5 ∀umina™, we didn’t” while shedding a tear. And that will blow their ZetaPentium© Gen 31 Brain chips. That is if CSS lasts long enough, but in the meantime, I am happy to change my site’s font with a function.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/07/css-functions-mixins.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003e\u003cem\u003eA much-needed disclaimer:\u003c/em\u003e \u003cstrong\u003eYou (kinda) can use functions now!\u003c/strong\u003e I know, it isn’t the most pleasant feeling to finish reading about a new feature just for the author to say “And we’ll hopefully see it in a couple of years”. Luckily, right now you can use an (\u003ca href=\"#aa-whats-missing\" data-type=\"internal\" data-id=\"#aa-whats-missing\"\u003eincomplete\u003c/a\u003e) version of CSS functions in Chrome Canary behind an experimental flag, although who knows when we’ll get to use them in a production environment.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"arguments-defaults-and-returns\"\u003eArguments, defaults, and returns!\u003c/h3\u003e\n\n\n\u003cp\u003eI was drinking coffee when I read the news on Chrome prototyping functions in CSS and… I didn’t spit it or anything. I was excited, but thought “functions” in CSS would be just like \u003ca href=\"https://sass-lang.com/documentation/at-rules/mixin/\" rel=\"noopener\"\u003emixins in Sass\u003c/a\u003e — you know, patterns for establishing reusable patterns. That’s cool but is really more or less syntactic sugar for writing less CSS.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut I looked at the example snippet a little more closely and that’s when the coffee nearly came shooting out my mouth.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1000\" height=\"650\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image.png?resize=1000%2C650\u0026amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image.png?w=1000\u0026amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image.png?resize=300%2C195\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/image.png?resize=768%2C499\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFrom \u003ca href=\"https://bsky.app/profile/bram.us/post/3lhphp644rc2a\" rel=\"noopener\"\u003eBramus in Bluesky\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eArguments?! Return values?! That’s worth spitting my coffee out for! I had to learn more about them, and luckily, the spec is clearly written, which\u003ca href=\"https://drafts.csswg.org/css-mixins-1/\" rel=\"noopener\"\u003e you can find right here\u003c/a\u003e. What’s crazier, you can use functions right now in Chrome Canary! So, after reading and playing around, here are my key insights on what you need to know about CSS Functions.\u003c/p\u003e\n\n\n\u003ch3 id=\"what-exactly-is-a-function-in-css\"\u003eWhat exactly is a function in CSS?\u003c/h3\u003e\n\n\n\u003cp\u003eI like this definition from the spec:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eCustom functions allow authors the same power as custom properties, but parameterized\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThey are used in the same places you would use a custom property, but functions return different things depending on the argument we pass. The syntax for the most basic function is the \u003ccode\u003e@function\u003c/code\u003e at-rule, followed by the name of the function as a \u003ccode\u003e\u0026lt;dashed-ident\u0026gt;\u003c/code\u003e + \u003ccode\u003e()\u003c/code\u003e\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --dashed-border() {\n /* ... */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eA function without arguments is like a custom property, so meh… To make them \u003cem\u003efunctional \u003c/em\u003ewe can pass arguments inside the parenthesis, also as \u003ccode\u003e\u0026lt;dashed-ident\u0026gt;\u003c/code\u003es\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --dashed-border(--color) {\n /* ... */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can use the \u003ccode\u003eresult\u003c/code\u003e descriptor to return something based on our argument:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --dashed-border(--color) {\n   result: 2px dashed var(--color);\n}\n\ndiv {\n   border: --dashed-border(blue); /* 2px dashed blue */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eWe can even use defaults! Just write a colon (\u003ccode\u003e:\u003c/code\u003e) followed by the default value for that argument.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --dashed-border(--color: red) {\n   result: 2px dashed var(--color);\n}\n\ndiv {\n  border: --dashed-border(); /* 2px dashed red */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis reminds me of Adam Argyle’s experiment on \u003ca href=\"https://nerdy.dev/functional-css-concept\" rel=\"noopener\"\u003ea functional CSS concept\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\u003ch3 id=\"functions-can-have-typechecking\"\u003eFunctions can have type-checking\u003c/h3\u003e\n\n\n\u003cp\u003eFunctions can have type-checking for arguments and return values, which will be useful whenever we want to interpolate a value just like we do with variables created with \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/rules/p/property/\"\u003e@property\u003c/a\u003e\u003c/code\u003e, and once we have \u003ca href=\"https://css-tricks.com/if-css-gets-inline-conditionals/\"\u003einline conditionals\u003c/a\u003e, to make different calculations depending on the argument type.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo add argument types, we pass a \u003ca href=\"https://drafts.csswg.org/css-values-5/#typedef-syntax-component\" rel=\"noopener\"\u003esyntax component\u003c/a\u003e. That is the type enclosed in angle brackets, where color is \u003ccode\u003e\u0026lt;color\u0026gt;\u003c/code\u003e and length is \u003ccode\u003e\u0026lt;length\u0026gt;\u003c/code\u003e, just to name a couple. There are also syntax multipliers like plus (\u003ccode\u003e+\u003c/code\u003e) to accept a space-separated list of that type.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --custom-spacing(--a \u0026lt;length\u0026gt;) { /* ... */ } /* e.g. 10px */\n@function --custom-background(--b \u0026lt;color\u0026gt;) { /* ... */ } /* e.g. hsl(50%, 30% 50%) */\n@function --custom-margin(--c \u0026lt;length\u0026gt;+) { /* ... */ } /* e.g. 10px 2rem 20px */\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIf instead, we want to define the type of the return value, we can write the \u003ccode\u003ereturns\u003c/code\u003e keyword followed by the syntax component:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --progression(--current, --total) returns \u0026lt;percentage\u0026gt; {\n  result: calc(var(--current) / var(--total) * 100%);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eJust a little exception for types: if we want to accept more than one type using the syntax combinator (|), we’ll have to enclose the types in a \u003ccode\u003etype()\u003c/code\u003e wrapper function:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --wideness(--d type(\u0026lt;number\u0026gt; | \u0026lt;percentage\u0026gt;)) { /* ... */ }\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"functions-can-have-list-arguments\"\u003eFunctions can have list arguments\u003c/h3\u003e\n\n\n\u003cp\u003eWhile it \u003ca href=\"#aa-whats-missing\"\u003edoesn’t currently seem to work in Canary\u003c/a\u003e, we’ll be able in the future to take lists as arguments by enclosing them inside curly braces. So, this example from the spec passes a list of values like \u003ccode\u003e{1px, 7px, 2px}\u003c/code\u003e and gets its maximum to perform a sum.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --max-plus-x(--list, --x) {\n  result: calc(max(var(--list)) + var(--x));\n}\n\ndiv {\n  width: --max-plus-x({ 1px, 7px, 2px }, 3px); /* 10px */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI wonder then, will it be possible to select a specific element from a list? And also define how long should the list should be? Say we want to only accept lists that contain four elements, then select each individually to perform some calculation and return it. Many questions here!\u003c/p\u003e\n\n\n\u003ch3 id=\"early-returns-arent-possible\"\u003eEarly returns aren’t possible\u003c/h3\u003e\n\n\n\u003cp\u003eThat’s correct, early returns aren’t possible. This isn’t something defined in the spec that hasn’t been prototyped, but something that simply won’t be allowed. So, if we have two returns, one enclosed early behind a \u003ccode\u003e@media\u003c/code\u003e or \u003ccode\u003e@supports\u003c/code\u003e at-rule and one outside at the end, the last result will always be returned:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"SCSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --suitable-font-size() {\n  @media (width \u0026gt; 1000px) {\n    result: 20px;\n  }\n  result: 16px; /* This always returns 16px */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe have to change the order of the returns, leaving the conditional \u003ccode\u003eresult\u003c/code\u003e for last. This doesn’t make a lot of sense in other programming languages, where the function ends after returning something, but there is a reason the C in CSS stands for Cascade: this order allows the conditional result to override the last result which is very CSS-y is nature:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --suitable-font-size() {\n  result: 16px;\n\n  @media (width \u0026gt; 1000px) {\n    result: 20px;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"imagining-the-possibilities\"\u003eImagining the possibilities\u003c/h3\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eHere I wanted everyone to chip in and write about the new things we could make using functions\u003c/strong\u003e. So the team here at CSS-Tricks put our heads together and thought about some use cases for functions. Some are little helper functions we’ll sprinkle a lot throughout our CSS, while others open new possibilities. Remember, all of these examples should be viewed in Chrome Canary until support expands to other browsers.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s a basic helper function from Geoff that sets fluid type:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --fluid-type(--font-min, --font-max) {\n  result: clamp(var(--font-min), 4vw + 1rem, var(--font-max));\n}\n\nh2 {\n  font-size: --fluid-type(24px, 36px);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis one is from Ryan, who is setting the width with an intrinsic container function — notice the default arguments.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --intrinsic-container(--inline-margin: 1rem, --max-width: 60ch) {\n  result: min(100% - var(--inline-margin), var(--max-width));\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eAnd check out this second helper function from Ryan to create grid layouts:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --layout-sidebar(--sidebar-width: 10ch) {\n  result: 1fr;\n\n  @media (width \u0026gt; 640px) {\n    result: fit-content(var(--sidebar-width)) minmax(min(50vw, 30ch), 1fr);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is one of those snippets I’m always grabbing from Steph Eckles’ \u003ca href=\"https://smolcss.dev/\" rel=\"noopener\"\u003esmolcss site\u003c/a\u003e, and having a function would be so much easier. Actually, \u003cem\u003emost\u003c/em\u003e of the snippets on Steph’s site would be awesome functions.\u003c/p\u003e\n\n\n\n\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThis one is from \u003cem\u003emoi\u003c/em\u003e. When I made that demo using \u003ca href=\"https://css-tricks.com/typecasting-and-viewport-transitions-in-css-with-tanatan2/\"\u003e\u003ccode\u003etan(atan2())\u003c/code\u003e to create viewport transitions\u003c/a\u003e, I used a helper property called \u003ccode\u003e--wideness\u003c/code\u003e to get the screen width as a decimal between \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e1\u003c/code\u003e. At that moment, I wished for a function form of \u003ccode\u003e--wideness\u003c/code\u003e. As I described it back then:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eYou pass a lower and upper bound as pixels, and it will return a \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e1\u003c/code\u003e value depending on how wide the screen is. So for example, if the screen is \u003ccode\u003e800px\u003c/code\u003e, \u003ccode\u003ewideness(400px, 1200px)\u003c/code\u003e would return \u003ccode\u003e0.5\u003c/code\u003e since it’s the middle point\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eI thought I would never see it, but now I can make it myself! Using that wideness function, I can move an element through its \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/o/offset-path/\"\u003eoffset-path\u003c/a\u003e\u003c/code\u003e as the screen goes from \u003ccode\u003e400px\u003c/code\u003e to \u003ccode\u003e800px\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.marker {\n  offset-path: path(\u0026#34;M 5 5 m -4, 0 a 4,4 0 1,0 8,0 a 4,4 0 1,0 -8,0\u0026#34;); /* Circular Orbit */\n  offset-distance: calc(--wideness(400, 800) * 100%); /* moves the element when the screen goes from 400px to 800px */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003ch3 id=\"whats-missing\"\u003eWhat’s missing?\u003c/h3\u003e\n\n\n\u003cp\u003eAccording to \u003ca href=\"https://issues.chromium.org/issues/325504770\" rel=\"noopener\"\u003eChrome’s issue on CSS Functions\u003c/a\u003e, we are in a super early stage since we \u003cem\u003ecannot\u003c/em\u003e:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e…use local variables. Although I tried them and they seem to work.\u003c/li\u003e\n\n\n\n\u003cli\u003e…use recursive functions (they crash!),\u003c/li\u003e\n\n\n\n\u003cli\u003e…list arguments,\u003c/li\u003e\n\n\n\n\u003cli\u003e…update a function and let the appropriate styles change,\u003c/li\u003e\n\n\n\n\u003cli\u003e…use \u003ccode\u003e@function\u003c/code\u003e in cascade layers, or in the CSS Object Model (CSSOM),\u003c/li\u003e\n\n\n\n\u003cli\u003e…use “the Iverson bracket functions … so any \u003ccode\u003e@media\u003c/code\u003e queries or similar will need to be made using helper custom properties (on \u003ccode\u003e:root\u003c/code\u003e or similar).”\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAfter reading what on earth an \u003ca href=\"https://en.wikipedia.org/wiki/Iverson_bracket\" rel=\"noopener\"\u003eIverson bracket\u003c/a\u003e is, I understood that we currently can’t have a return value behind a \u003ccode\u003e@media\u003c/code\u003e or \u003ccode\u003e@support\u003c/code\u003e rule. For example, this snippet from the spec shouldn’t work:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --suitable-font-size() {\n  result: 16px;\n\n  @media (width \u0026gt; 1000px) {\n    result: 20px;\n  }\n} \u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAlthough, upon testing, it seems like it’s supported now. Still, we can use a provisional custom property and return it at the end if it isn’t working for you:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@function --suitable-font-size() {\n  --size: 16px;\n\n  @media (width \u0026gt; 600px) {\n    --size: 20px;\n  }\n\n  result: var(--size);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWhat about mixins? Soon, they’ll be here. According to the spec:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eAt this time, this specification only defines custom functions, which operate at the level of CSS values. It is expected that it will define “mixins” later, which are functions that operate at the style rule level.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\u003ch3 id=\"in-conclusion\"\u003eIn conclusion…\u003c/h3\u003e\n\n\n\u003cp\u003eI say it with confidence: \u003cstrong\u003efunctions will bring an enormous change to CSS\u003c/strong\u003e, not in the sense that we’ll write it any differently — we won’t use functions to center a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, but they will simplify hack-ish CSS and open \u003cstrong\u003ea lot\u003c/strong\u003e of new possibilities. There’ll be a time when our cyborg children ask us from their education pods, “Is it true you guys didn’t have functions in CSS?” And we’ll answer “No, Zeta-5 ∀umina™, we didn’t” while shedding a tear. And that will blow their ZetaPentium© Gen 31 Brain chips. That is if CSS lasts long enough, but in the meantime, I am happy to change my site’s font with a function.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2025-03-03T06:34:22-07:00",
  "modifiedTime": "2025-03-03T06:50:04-07:00"
}
