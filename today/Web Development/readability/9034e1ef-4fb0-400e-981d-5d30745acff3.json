{
  "id": "9034e1ef-4fb0-400e-981d-5d30745acff3",
  "title": "Chrome 138 beta",
  "link": "https://developer.chrome.com/blog/chrome-138-beta?hl=en",
  "description": "Discover what's coming to Chrome with the latest beta.",
  "author": "",
  "published": "Wed, 28 May 2025 07:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 11205,
  "excerpt": "Discover what's coming to Chrome with the latest beta.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/vce7dc8716edeb3714adfe4dd15b25490031be374149e3613a8b7fb0be9fc4a25/chrome/images/favicon.png",
  "text": "Published: May 28, 2025 Unless otherwise noted, the following changes apply to the newest Chrome beta channel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more about the features listed here through the provided links or from the list on ChromeStatus.com. Chrome 138 is beta as of 28 May, 2025. You can download the latest on Google.com for desktop or on Google Play Store on Android. CSS and UI This release adds six new CSS and UI features. CSS stretch sizing keyword A keyword for CSS sizing properties (for example, width, and height) that allows elements to grow to exactly fill their containing block's available space. It is similar to 100%, except the resulting size is applied to the element's margin box instead of the box indicated by box-sizing. Using this keyword allows the element to keep its margins while still being as large as possible. The sign-related functions abs() and sign() compute various functions related to the sign of their argument. CSS env variable for OS-level font scale Exposes a user's preferred font scale to CSS. Currently, it is not practical for a page to detect if the user has changed their preferred font size with the Operating System's preferences. This CSS environment variable will reflect the scale chosen by the user. CSS sibling-index() and sibling-count() The sibling-index() and sibling-count() functions can be used as integers in CSS property values to style an element based on its position among its siblings, or the total number of siblings respectively. These functions can be used directly as integer values, but more interestingly inside calc() expressions. li { animation-delay: calc(0.1s * sibling-index()); } Interpolation progress functional notation: CSS progress() function The progress() functional notation is a math function that returns a \u003cnumber\u003e value representing the position of one calculation (the progress value) between two other calculations (the progress start value and progress end value). Viewport Segments Enumeration API The Viewport Segments API allows developers to adapt their web layout to target foldable devices. Viewport segments define the position and dimensions of a logically separate region of the viewport. Viewport segments are created when the viewport is split by one or more hardware features (such as a fold or a hinge between separate displays) that act as a divider; segments are the regions of the viewport that can be treated as logically distinct by the developer. Web APIs Introduces rotation: int and flip: bool values to various video related interfaces in WebCodecs so that developers can work with frame sources that have orientation (for example, Android cameras, and certain media). The VideoFrame interface grows the ability to create VideoFrames with arbitrary rotation and flip as well as accessors for this information on the VideoFrame object. The VideoDecoderConfig object gains rotation and flip fields that are emitted on decoded VideoFrame objects automatically. The VideoEncoder class gains mechanisms for passing rotation and flip information from encode() to the VideoDecoderConfig emitted as part of EncodedVideoChunkMetadata. If encode() is called with frames with different orientationnonfatalatal exception will be thrown. The configure() method can be used to reset the allowed orientation. Crash Reporting API: is_top_level and visibility_state This feature adds is_top_level and visibility_state string fields to the crash reporting API body that gets sent to the default reporting endpoint for crash reports. Escape \u003c and \u003e in attributes on serialization Escape \u003c and \u003e in values of attributes on serialization. This mitigates the risk of mutation XSS attacks, which occur when the value of an attribute is interpreted as a start tag token after being serialized and re-parsed. Integrity Policy for scripts Subresource-Integrity (SRI) enables developers to make sure the assets they intend to load are indeed the assets they are loading. But there's no current way for developers to be sure that all of their scripts are validated using SRI. The Integrity-Policy header gives developers the ability to assert that every resource of a given type needs to be integrity-checked. If a resource of that type is attempted to be loaded without integrity metadata, that attempt will fail and trigger a violation report. Predictable reported storage quota Report a predictable storage quota from StorageManager's Estimate API for sites that don't have unlimited storage permissions. It is possible to detect a user's browsing mode using the reported storage quota because the storage space made available is significantly smaller in incognito mode than in regular mode. This is a mitigation that prevents detection of a user's browsing mode using the storage API by reporting an artificial quota, equal to usage + min(10 GiB, disk rounded up to the nearest 1 GiB), in all browsing modes for sites with limited storage permissions. Sites with unlimited storage permissions will be unaffected. Enforced quota will also be unaffected. pushsubscriptionchange event upon resubscription Fire the pushsubscriptionchange event in service workers when an origin for which a push subscription existed in the past, but which was revoked because of a permission change (from granted to deny/default), is re-granted notification permission. The event will be fired with an empty oldSubscription and newSubscription. Speculation rules: Add prefetchCache and prerenderCache to Clear-Site-Data header Two new values for the Clear-Site-Data header to help developers target clearing the prerender and prefetch cache: prefetchCache and prerenderCache. These can be sent on any requests and don't need to be made on the document request (for example, they can be returned on add-to-basket, or login and logout API call responses to clear speculations on state change). Speculation rules: target_hint field This extends speculation rules syntax to allow developers to specify the target_hint field. This field provides a hint to indicate a target navigable where a prerendered page will eventually be activated. When _blank is specified as a hint, a prerendered page can be activated for a navigable opened by window.open(). The field is not supported for prefetching. Strict Same Origin Policy for Storage Access API Adjusts the Storage Access API semantics to strictly follow the Same Origin Policy, with regard to security. That is, using document.requestStorageAccess() in a frame only attaches cookies to requests to the iframe's origin (not site) by default. Summarizer API A JavaScript API for producing summaries of input text, backed by an AI language model. Browsers and operating systems are increasingly expected to gain access to a language model. By exposing this built-in model, we avoid every website needing to download their own multi-gigabyte language model, or send input text to third-party APIs. The summarizer API in particular exposes a high-level API for interfacing with a language model in order to summarize inputs for a variety of use cases in a way that does not depend on the specific language model in question. An enterprise policy (GenAILocalFoundationalModelSettings) is available to disable the underlying model downloading which would render this API unavailable. Learn more in Generate concise summaries with built-in AI. Language Detector API A JavaScript API to detect what language is used in certain text, with levels of confidence. This is an important supplement to translation is language detection and can be used in combination with the Translator API. For example, take user input in an unknown language, determine its language, then translate it to a specific target language. While Browsers often already have language detection capabilities, this offers the same power to web developers with a JavaScript API, supplementing the translation API. An enterprise policy (GenAILocalFoundationalModelSettings) is available to disable the underlying model from downloading, which would make this API unavailable. Learn more in Detect which language is used with built-in AI. Translator API A JavaScript API to provide language translation capabilities to web pages. While browsers are increasingly offering language translation to their users, such translation capabilities can also be useful to web developers. This is especially the case when browser's built-in translation abilities cannot help, such as with live and interactive services. An enterprise policy (GenAILocalFoundationalModelSettings) is available to disable the underlying model downloading which would render this API unavailable. Learn more in Translation with built-in AI. Web app scope extensions Adds a \"scope_extensions\" web app manifest field that lets web apps extend their scope to other origins. This lets sites that control multiple subdomains and top level domains be presented as a single web app. Requires listed origins to confirm association with the web app using a .well-known/web-app-origin-association configuration file. Web serial over Bluetooth on Android This feature allows web pages and web apps to connect to serial ports over Bluetooth on Android devices. Chrome on Android now supports Web Serial API over Bluetooth RFCOMM. Existing enterprise policies (DefaultSerialGuardSetting, SerialAllowAllPortsForUrls, SerialAllowUsbDevicesForUrls, SerialAskForUrls, and SerialBlockedForUrls) on other platforms are enabled in future_on states for Android. All policies except SerialAllowUsbDevicesForUrls will be enabled after the feature is enabled. SerialAllowUsbDevicesForUrls will be enabled in a future launch after Android provides system level support of wired serial ports. Deprecations and removals This version of Chrome introduces the following deprecations and removals. Visit ChromeStatus.com for lists of planned deprecations, current deprecations and previous removals. This release of Chrome deprecates two features. Deprecate asynchronous range removal for Media Source Extensions The Media Source standard long ago changed to disallow ambiguously defined behavior involving asynchronous range removals: SourceBuffer.abort() no longer aborts SourceBuffer.remove() operations. Setting MediaSource.duration can no longer truncate currently buffered media. Exceptions will now be thrown in both of these cases. Remove SwiftShader fallback Allowing automatic fallback to WebGL backed by the software renderer SwiftShader is deprecated and WebGL context creation will fail instead of falling back to SwiftShader. This was done for two primary reasons: SwiftShader is a high security risk due to JIT-ed code running in Chromium's GPU process. Users have a poor experience when falling back from a high-performance GPU-backed WebGL to a CPU-backed implementation. Users have no control over this behavior and it is difficult to describe in bug reports. During the deprecation period, a warning will appear in the Chrome DevTools console when a WebGL context is created and backed with SwiftShader. Passing --enable-unsafe-swiftshader will remove this warning message.",
  "image": "https://developer.chrome.com/static/blog/chrome-138-beta/image/thumbnail.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Rachel Andrew\" src=\"https://web.dev/images/authors/rachelandrew.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003e\n  Published: May 28, 2025\n\u003c/p\u003e\n\n\n\u003cp\u003eUnless otherwise noted, the following changes apply to the newest Chrome beta\nchannel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more\nabout the features listed here through the provided links or from the list on\n\u003ca href=\"https://chromestatus.com\"\u003eChromeStatus.com\u003c/a\u003e.\nChrome 138 is beta as of 28 May, 2025.\nYou can download the\nlatest on \u003ca href=\"https://www.google.com/chrome/beta/\"\u003eGoogle.com\u003c/a\u003e for desktop or on\nGoogle Play Store on Android.\u003c/p\u003e\n\n\u003ch2 id=\"css_and_ui\" data-text=\"CSS and UI\" tabindex=\"-1\"\u003eCSS and UI\u003c/h2\u003e\n\n\u003cp\u003eThis release adds six new CSS and UI features.\u003c/p\u003e\n\n\u003ch3 id=\"css_stretch_sizing_keyword\" data-text=\"CSS stretch sizing keyword\" tabindex=\"-1\"\u003eCSS \u003ccode translate=\"no\" dir=\"ltr\"\u003estretch\u003c/code\u003e sizing keyword\u003c/h3\u003e\n\n\u003cp\u003eA keyword for CSS sizing properties (for example, \u003ccode translate=\"no\" dir=\"ltr\"\u003ewidth\u003c/code\u003e, and \u003ccode translate=\"no\" dir=\"ltr\"\u003eheight\u003c/code\u003e) that\nallows elements to grow to exactly fill their containing block\u0026#39;s available\nspace. It is similar to \u003ccode translate=\"no\" dir=\"ltr\"\u003e100%\u003c/code\u003e, except the resulting size is applied to the\nelement\u0026#39;s margin box instead of the box indicated by \u003ccode translate=\"no\" dir=\"ltr\"\u003ebox-sizing\u003c/code\u003e. Using this\nkeyword allows the element to keep its margins while still being as large as\npossible.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe sign-related functions \u003ccode translate=\"no\" dir=\"ltr\"\u003eabs()\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003esign()\u003c/code\u003e compute various functions\nrelated to the sign of their argument.\u003c/p\u003e\n\n\u003ch3 id=\"css_env_variable_for_os-level_font_scale\" data-text=\"CSS env variable for OS-level font scale\" tabindex=\"-1\"\u003eCSS env variable for OS-level font scale\u003c/h3\u003e\n\n\u003cp\u003eExposes a user\u0026#39;s preferred font scale to CSS. Currently, it is not practical for\na page to detect if the user has changed their preferred font size with the\nOperating System\u0026#39;s preferences. This CSS environment variable will reflect the\nscale chosen by the user.\u003c/p\u003e\n\n\u003ch3 id=\"css_sibling-index_and_sibling-count\" data-text=\"CSS sibling-index() and sibling-count()\" tabindex=\"-1\"\u003eCSS \u003ccode translate=\"no\" dir=\"ltr\"\u003esibling-index()\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003esibling-count()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003esibling-index()\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003esibling-count()\u003c/code\u003e functions can be used as integers in\nCSS property values to style an element based on its position among its\nsiblings, or the total number of siblings respectively. These functions can be\nused directly as integer values, but more interestingly inside \u003ccode translate=\"no\" dir=\"ltr\"\u003ecalc()\u003c/code\u003e\nexpressions.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eanimation-delay\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecalc\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0.1\u003c/span\u003e\u003cspan\u003es\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e*\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esibling-index\u003c/span\u003e\u003cspan\u003e());\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch3 id=\"interpolation_progress_functional_notation_css_progress_function\" data-text=\"Interpolation progress functional notation: CSS progress() function\" tabindex=\"-1\"\u003eInterpolation progress functional notation: CSS \u003ccode translate=\"no\" dir=\"ltr\"\u003eprogress()\u003c/code\u003e function\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eprogress()\u003c/code\u003e functional notation is a math function that returns a\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;number\u0026gt;\u003c/code\u003e value representing the position of one calculation (the progress\nvalue) between two other calculations (the progress start value and progress end\nvalue).\u003c/p\u003e\n\n\u003ch3 id=\"viewport_segments_enumeration_api\" data-text=\"Viewport Segments Enumeration API\" tabindex=\"-1\"\u003eViewport Segments Enumeration API\u003c/h3\u003e\n\n\u003cp\u003eThe Viewport Segments API allows developers to adapt their web layout to target\nfoldable devices. Viewport segments define the position and dimensions of a\nlogically separate region of the viewport. Viewport segments are created when\nthe viewport is split by one or more hardware features (such as a fold or a\nhinge between separate displays) that act as a divider; segments are the regions\nof the viewport that can be treated as logically distinct by the developer.\u003c/p\u003e\n\n\u003ch2 id=\"web_apis\" data-text=\"Web APIs\" tabindex=\"-1\"\u003eWeb APIs\u003c/h2\u003e\n\n\n\n\u003cp\u003eIntroduces \u003ccode translate=\"no\" dir=\"ltr\"\u003erotation: int\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eflip: bool\u003c/code\u003e values to various video related\ninterfaces in WebCodecs so that developers can work with frame sources that have\norientation (for example, Android cameras, and certain media). The \u003ccode translate=\"no\" dir=\"ltr\"\u003eVideoFrame\u003c/code\u003e\ninterface grows the ability to create VideoFrames with arbitrary rotation and\nflip as well as accessors for this information on the \u003ccode translate=\"no\" dir=\"ltr\"\u003eVideoFrame\u003c/code\u003e object. The\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eVideoDecoderConfig\u003c/code\u003e object gains \u003ccode translate=\"no\" dir=\"ltr\"\u003erotation\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eflip\u003c/code\u003e fields that are emitted\non decoded VideoFrame objects automatically. The \u003ccode translate=\"no\" dir=\"ltr\"\u003eVideoEncoder\u003c/code\u003e class gains\nmechanisms for passing rotation and flip information from \u003ccode translate=\"no\" dir=\"ltr\"\u003eencode()\u003c/code\u003e to the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eVideoDecoderConfig\u003c/code\u003e emitted as part of \u003ccode translate=\"no\" dir=\"ltr\"\u003eEncodedVideoChunkMetadata\u003c/code\u003e. If\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eencode()\u003c/code\u003e is called with frames with different orientationnonfatalatal\nexception will be thrown. The \u003ccode translate=\"no\" dir=\"ltr\"\u003econfigure()\u003c/code\u003e method can be used to reset the\nallowed orientation.\u003c/p\u003e\n\n\u003ch3 id=\"crash_reporting_api_is_top_level_and_visibility_state\" data-text=\"Crash Reporting API: is_top_level and visibility_state\" tabindex=\"-1\"\u003eCrash Reporting API: \u003ccode translate=\"no\" dir=\"ltr\"\u003eis_top_level\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003evisibility_state\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThis feature adds \u003ccode translate=\"no\" dir=\"ltr\"\u003eis_top_level\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003evisibility_state\u003c/code\u003e string fields to the\ncrash reporting API body that gets sent to the default reporting endpoint for\ncrash reports.\u003c/p\u003e\n\n\u003ch3 id=\"escape_and_in_attributes_on_serialization\" data-text=\"Escape \u0026lt; and \u0026gt; in attributes on serialization\" tabindex=\"-1\"\u003eEscape \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026gt;\u003c/code\u003e in attributes on serialization\u003c/h3\u003e\n\n\u003cp\u003eEscape \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026gt;\u003c/code\u003e in values of attributes on serialization. This mitigates the\nrisk of mutation XSS attacks, which occur when the value of an attribute is\ninterpreted as a start tag token after being serialized and re-parsed.\u003c/p\u003e\n\n\u003ch3 id=\"integrity_policy_for_scripts\" data-text=\"Integrity Policy for scripts\" tabindex=\"-1\"\u003eIntegrity Policy for scripts\u003c/h3\u003e\n\n\u003cp\u003eSubresource-Integrity (SRI) enables developers to make sure the assets they\nintend to load are indeed the assets they are loading. But there\u0026#39;s no current\nway for developers to be sure that all of their scripts are validated using SRI.\nThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eIntegrity-Policy\u003c/code\u003e header gives developers the ability to assert that every\nresource of a given type needs to be integrity-checked. If a resource of that\ntype is attempted to be loaded without integrity metadata, that attempt will\nfail and trigger a violation report.\u003c/p\u003e\n\n\u003ch3 id=\"predictable_reported_storage_quota\" data-text=\"Predictable reported storage quota\" tabindex=\"-1\"\u003ePredictable reported storage quota\u003c/h3\u003e\n\n\u003cp\u003eReport a predictable storage quota from StorageManager\u0026#39;s Estimate API for sites\nthat don\u0026#39;t have unlimited storage permissions. It is possible to detect a\nuser\u0026#39;s browsing mode using the reported storage quota because the storage space\nmade available is significantly smaller in incognito mode than in regular mode.\u003c/p\u003e\n\n\u003cp\u003eThis is a mitigation that prevents detection of a user\u0026#39;s browsing mode using the\nstorage API by reporting an artificial quota, equal to usage + min(10 GiB, disk\nrounded up to the nearest 1 GiB), in all browsing modes for sites with limited\nstorage permissions. Sites with unlimited storage permissions will be\nunaffected. Enforced quota will also be unaffected.\u003c/p\u003e\n\n\u003ch3 id=\"pushsubscriptionchange_event_upon_resubscription\" data-text=\"pushsubscriptionchange event upon resubscription\" tabindex=\"-1\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003epushsubscriptionchange\u003c/code\u003e event upon resubscription\u003c/h3\u003e\n\n\u003cp\u003eFire the \u003ccode translate=\"no\" dir=\"ltr\"\u003epushsubscriptionchange\u003c/code\u003e event in service workers when an origin for\nwhich a push subscription existed in the past, but which was revoked because of\na permission change (from granted to deny/default), is re-granted notification\npermission. The event will be fired with an empty \u003ccode translate=\"no\" dir=\"ltr\"\u003eoldSubscription\u003c/code\u003e and\n\u003ccode translate=\"no\" dir=\"ltr\"\u003enewSubscription\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"speculation_rules_add_prefetchcache_and_prerendercache_to_clear-site-data_header\" data-text=\"Speculation rules: Add prefetchCache and prerenderCache to Clear-Site-Data header\" tabindex=\"-1\"\u003eSpeculation rules: Add \u003ccode translate=\"no\" dir=\"ltr\"\u003eprefetchCache\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eprerenderCache\u003c/code\u003e to \u003ccode translate=\"no\" dir=\"ltr\"\u003eClear-Site-Data\u003c/code\u003e header\u003c/h3\u003e\n\n\u003cp\u003eTwo new values for the \u003ccode translate=\"no\" dir=\"ltr\"\u003eClear-Site-Data\u003c/code\u003e header to help developers target\nclearing the prerender and prefetch cache: \u003ccode translate=\"no\" dir=\"ltr\"\u003eprefetchCache\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003eprerenderCache\u003c/code\u003e.\nThese can be sent on any requests and don\u0026#39;t need to be made on the document\nrequest (for example, they can be returned on add-to-basket, or login and logout API\ncall responses to clear speculations on state change).\u003c/p\u003e\n\n\u003ch3 id=\"speculation_rules_target_hint_field\" data-text=\"Speculation rules: target_hint field\" tabindex=\"-1\"\u003eSpeculation rules: \u003ccode translate=\"no\" dir=\"ltr\"\u003etarget_hint\u003c/code\u003e field\u003c/h3\u003e\n\n\u003cp\u003eThis extends speculation rules syntax to allow developers to specify the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003etarget_hint\u003c/code\u003e field. This field provides a hint to indicate a target navigable\nwhere a prerendered page will eventually be activated. When \u003ccode translate=\"no\" dir=\"ltr\"\u003e_blank\u003c/code\u003e is\nspecified as a hint, a prerendered page can be activated for a navigable opened\nby \u003ccode translate=\"no\" dir=\"ltr\"\u003ewindow.open()\u003c/code\u003e. The field is not supported for prefetching.\u003c/p\u003e\n\n\u003ch3 id=\"strict_same_origin_policy_for_storage_access_api\" data-text=\"Strict Same Origin Policy for Storage Access API\" tabindex=\"-1\"\u003eStrict Same Origin Policy for Storage Access API\u003c/h3\u003e\n\n\u003cp\u003eAdjusts the Storage Access API semantics to strictly follow the Same Origin\nPolicy, with regard to security. That is, using\n\u003ccode translate=\"no\" dir=\"ltr\"\u003edocument.requestStorageAccess()\u003c/code\u003e in a frame only attaches cookies to requests\nto the iframe\u0026#39;s origin (not site) by default.\u003c/p\u003e\n\n\u003ch3 id=\"summarizer_api\" data-text=\"Summarizer API\" tabindex=\"-1\"\u003eSummarizer API\u003c/h3\u003e\n\n\u003cp\u003eA JavaScript API for producing summaries of input text, backed by an AI language\nmodel. Browsers and operating systems are increasingly expected to gain access\nto a language model. By exposing this built-in model, we avoid every website\nneeding to download their own multi-gigabyte language model, or send input text\nto third-party APIs. The summarizer API in particular exposes a high-level API\nfor interfacing with a language model in order to summarize inputs for a variety\nof use cases in a way that does not depend on the specific language model in\nquestion. An enterprise policy (\u003ccode translate=\"no\" dir=\"ltr\"\u003eGenAILocalFoundationalModelSettings\u003c/code\u003e) is\navailable to disable the underlying model downloading which would render this\nAPI unavailable.\u003c/p\u003e\n\n\u003cp\u003eLearn more in\n\u003ca href=\"https://developer.chrome.com/docs/ai/summarizer-api\"\u003eGenerate concise summaries with built-in AI\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"language_detector_api\" data-text=\"Language Detector API\" tabindex=\"-1\"\u003eLanguage Detector API\u003c/h3\u003e\n\n\u003cp\u003eA JavaScript API to detect what language is used in certain text, with levels of\nconfidence. This is an important supplement to translation is language detection\nand can be used in combination with the \u003ca href=\"#translator_api\"\u003eTranslator API\u003c/a\u003e. For\nexample, take user input in an unknown language, determine its language, then\ntranslate it to a specific target language. While Browsers often already have\nlanguage detection capabilities, this offers the same power to web developers\nwith a JavaScript API, supplementing the translation API.\u003c/p\u003e\n\n\u003cp\u003eAn enterprise policy (\u003ccode translate=\"no\" dir=\"ltr\"\u003eGenAILocalFoundationalModelSettings\u003c/code\u003e) is available to\ndisable the underlying model from downloading, which would make this API\nunavailable.\u003c/p\u003e\n\n\u003cp\u003eLearn more in\n\u003ca href=\"https://developer.chrome.com/docs/ai/language-detection\"\u003eDetect which language is used with built-in AI\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"translator_api\" data-text=\"Translator API\" tabindex=\"-1\"\u003eTranslator API\u003c/h3\u003e\n\n\u003cp\u003eA JavaScript API to provide language translation capabilities to web pages.\nWhile browsers are increasingly offering language translation to their users,\nsuch translation capabilities can also be useful to web developers. This is\nespecially the case when browser\u0026#39;s built-in translation abilities cannot help,\nsuch as with live and interactive services. An enterprise policy\n(\u003ccode translate=\"no\" dir=\"ltr\"\u003eGenAILocalFoundationalModelSettings\u003c/code\u003e) is available to disable the underlying\nmodel downloading which would render this API unavailable.\u003c/p\u003e\n\n\u003cp\u003eLearn more in \u003ca href=\"https://developer.chrome.com/docs/ai/translator-api\"\u003eTranslation with built-in AI\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"web_app_scope_extensions\" data-text=\"Web app scope extensions\" tabindex=\"-1\"\u003eWeb app scope extensions\u003c/h3\u003e\n\n\u003cp\u003eAdds a \u003ca href=\"https://developer.chrome.com/docs/capabilities/scope-extensions\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;scope_extensions\u0026#34;\u003c/code\u003e\u003c/a\u003e web app\nmanifest field that lets web apps extend their scope to other origins. This lets\nsites that control multiple subdomains and top level domains be presented as a\nsingle web app. Requires listed origins to confirm association with the web app\nusing a \u003ccode translate=\"no\" dir=\"ltr\"\u003e.well-known/web-app-origin-association\u003c/code\u003e configuration file.\u003c/p\u003e\n\n\u003ch3 id=\"web_serial_over_bluetooth_on_android\" data-text=\"Web serial over Bluetooth on Android\" tabindex=\"-1\"\u003eWeb serial over Bluetooth on Android\u003c/h3\u003e\n\n\u003cp\u003eThis feature allows web pages and web apps to \u003ca href=\"https://developer.chrome.com/blog/serial-over-bluetooth\"\u003econnect to serial ports over\nBluetooth on Android\u003c/a\u003e devices. Chrome on Android\nnow supports Web Serial API over Bluetooth RFCOMM. Existing enterprise policies\n(\u003ccode translate=\"no\" dir=\"ltr\"\u003eDefaultSerialGuardSetting\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eSerialAllowAllPortsForUrls\u003c/code\u003e,\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eSerialAllowUsbDevicesForUrls\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eSerialAskForUrls\u003c/code\u003e, and \u003ccode translate=\"no\" dir=\"ltr\"\u003eSerialBlockedForUrls\u003c/code\u003e)\non other platforms are enabled in future_on states for Android. All policies\nexcept \u003ccode translate=\"no\" dir=\"ltr\"\u003eSerialAllowUsbDevicesForUrls\u003c/code\u003e will be enabled after the feature is\nenabled. \u003ccode translate=\"no\" dir=\"ltr\"\u003eSerialAllowUsbDevicesForUrls\u003c/code\u003e will be enabled in a future launch after\nAndroid provides system level support of wired serial ports.\u003c/p\u003e\n\n\u003ch2 id=\"deprecations_and_removals\" data-text=\"Deprecations and removals\" tabindex=\"-1\"\u003eDeprecations and removals\u003c/h2\u003e\n\n\u003cp\u003eThis version of Chrome introduces the following deprecations and removals.\nVisit ChromeStatus.com for lists of planned deprecations, current deprecations\nand previous removals.\u003c/p\u003e\n\n\u003cp\u003eThis release of Chrome deprecates two features.\u003c/p\u003e\n\n\u003ch3 id=\"deprecate_asynchronous_range_removal_for_media_source_extensions\" data-text=\"Deprecate asynchronous range removal for Media Source Extensions\" tabindex=\"-1\"\u003eDeprecate asynchronous range removal for Media Source Extensions\u003c/h3\u003e\n\n\u003cp\u003eThe Media Source standard long ago changed to disallow ambiguously defined\nbehavior involving asynchronous range removals:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eSourceBuffer.abort()\u003c/code\u003e no longer aborts \u003ccode translate=\"no\" dir=\"ltr\"\u003eSourceBuffer.remove()\u003c/code\u003e operations.\u003c/li\u003e\n\u003cli\u003eSetting \u003ccode translate=\"no\" dir=\"ltr\"\u003eMediaSource.duration\u003c/code\u003e can no longer truncate currently buffered\nmedia.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eExceptions will now be thrown in both of these cases.\u003c/p\u003e\n\n\u003ch3 id=\"remove_swiftshader_fallback\" data-text=\"Remove SwiftShader fallback\" tabindex=\"-1\"\u003eRemove SwiftShader fallback\u003c/h3\u003e\n\n\u003cp\u003eAllowing automatic fallback to WebGL backed by the software renderer SwiftShader\nis deprecated and WebGL context creation will fail instead of falling back to\nSwiftShader. This was done for two primary reasons:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eSwiftShader is a high security risk due to JIT-ed code running in Chromium\u0026#39;s\nGPU process.\u003c/li\u003e\n\u003cli\u003eUsers have a poor experience when falling back from a high-performance\nGPU-backed WebGL to a CPU-backed implementation. Users have no control over\nthis behavior and it is difficult to describe in bug reports.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eDuring the deprecation period, a warning will appear in the Chrome DevTools\nconsole when a WebGL context is created and backed with SwiftShader. Passing\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e--enable-unsafe-swiftshader\u003c/code\u003e will remove this warning message.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
