{
  "id": "07719363-598b-4428-aa2d-7350266f3ee1",
  "title": "Mastering theme.json: You might not need CSS",
  "link": "https://css-tricks.com/mastering-theme-json-you-might-not-need-css/",
  "description": "I totally get the goal here: make CSS more modular and scalable in WordPress. Put all your global WordPress theme styles in a single file, including variations. JSON offers a nicely structured syntax that’s easily consumable by JavaScript, thereby allowing … Mastering theme.json: You might not need CSS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Fri, 18 Oct 2024 11:36:04 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Links",
    "WordPress"
  ],
  "byline": "Geoff Graham",
  "length": 2003,
  "excerpt": "I totally get the goal here: make CSS more modular and scalable in WordPress. Put all your global WordPress theme styles in a single file, including",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! I totally get the goal here: make CSS more modular and scalable in WordPress. Put all your global WordPress theme styles in a single file, including variations. JSON offers a nicely structured syntax that’s easily consumable by JavaScript, thereby allowing the sweet affordance of loading exactly what we want when we want it. The problem, to me, is that writing “CSS” in a theme.json file is a complete mental model switcher-oo. Rather than selectors, we have a whole set of objects we have to know about just to select something. We have JSON properties that look and feel like CSS properties, only they have to be camelCased being JavaScript and all. And we’re configuring features in the middle of the styles, meaning we’ve lost a clear separation of concerns. I’m playing devil’s advocate, of course. There’s a lot of upside to abstracting CSS with JSON for the very niche purpose of theming CMS templates and components. But after a decade of “CSS-in-JS is the Way™” I’m less inclined to buy into it. CSS is the bee’s knees just the way it is and I’m OK relying on it solely, whether it’s in the required style.css file or some other plain ol’ CSS file I generate. But that also means I’m losing out on the WordPress features that require you to write styles in a theme.json file, like style variations that can be toggled directly in the WordPress admin. Regardless of all that, I’m linking this up because Justin does bang-up work (no surprise, really) explaining and illustrating the ways of CSS-in-WordPress. We have a complete guide that Ganesh rocked a couple of years ago. You might check that to get familiar with some terminology, jump into a nerdy deep dive on how WordPress generates classes from JSON, or just use the reference tables as a cheat sheet. Direct Link →",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/381882",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI totally get the goal here: make CSS more modular and scalable in WordPress. Put all your global WordPress theme styles in a single file, including variations. JSON offers a nicely structured syntax that’s easily consumable by JavaScript, thereby allowing the sweet affordance of loading exactly \u003cem\u003ewhat\u003c/em\u003e we want \u003cem\u003ewhen\u003c/em\u003e we want it.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe problem, to me, is that writing “CSS” in a \u003ccode\u003etheme.json\u003c/code\u003e file is a complete mental model switcher-oo. Rather than selectors, we have a whole set of objects we have to know about just to select something. We have JSON properties that look and feel like CSS properties, only they have to be \u003ccode\u003ecamelCased\u003c/code\u003e being JavaScript and all. And we’re configuring features in the middle of the styles, meaning we’ve lost a clear separation of concerns.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’m playing devil’s advocate, of course. There’s a lot of upside to abstracting CSS with JSON for the very niche purpose of theming CMS templates and components. But after a decade of “CSS-in-JS is the Way\u003csup\u003e™\u003c/sup\u003e” I’m less inclined to buy into it. CSS is the bee’s knees just the way it is and I’m OK relying on it solely, whether it’s in the required \u003ccode\u003estyle.css\u003c/code\u003e file or some other plain ol’ CSS file I generate. But that also means I’m losing out on the WordPress features that require you to write styles in a \u003ccode\u003etheme.json\u003c/code\u003e file, like \u003ca href=\"https://developer.wordpress.org/themes/global-settings-and-styles/style-variations/\" rel=\"noopener\"\u003estyle variations\u003c/a\u003e that can be toggled directly in the WordPress admin.\u003c/p\u003e\n\n\n\n\u003cp\u003eRegardless of all that, I’m linking this up because Justin does bang-up work (no surprise, really) explaining and illustrating the ways of CSS-in-WordPress. \u003ca href=\"https://css-tricks.com/wordpress-block-theme-guide/\"\u003eWe have a complete guide\u003c/a\u003e that Ganesh rocked a couple of years ago. You might check that to get \u003ca href=\"https://css-tricks.com/glossary-of-terms-for-theme-json/\"\u003efamiliar with some terminology\u003c/a\u003e, jump into a nerdy deep dive on \u003ca href=\"https://css-tricks.com/how-the-style-engine-generates-classes/\"\u003ehow WordPress generates classes from JSON\u003c/a\u003e, or just \u003ca href=\"https://css-tricks.com/wordpress-global-styles-reference-tables/\"\u003euse the reference tables\u003c/a\u003e as a cheat sheet.\u003c/p\u003e\n\n                      \u003cp\u003e     \n                              \u003ca href=\"https://developer.wordpress.org/news/2024/10/17/mastering-theme-json-you-might-not-need-css/\"\u003e\n                  Direct Link →\n                \u003c/a\u003e\n              \n                          \u003c/p\u003e\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-10-18T05:36:04-06:00",
  "modifiedTime": "2024-10-18T07:36:19-06:00"
}
