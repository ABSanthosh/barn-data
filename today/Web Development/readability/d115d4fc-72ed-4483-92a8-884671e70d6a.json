{
  "id": "d115d4fc-72ed-4483-92a8-884671e70d6a",
  "title": "Orbital Mechanics (or How I Optimized a CSS Keyframes Animation)",
  "link": "https://css-tricks.com/orbital-mechanics-or-how-i-optimized-a-css-keyframes-animation/",
  "description": "What does it look like to refactor your own code? John Rhea picks apart an old CSS animation he wrote and walks through the thought process of optimizing it. Orbital Mechanics (or How I Optimized a CSS Keyframes Animation) originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "John Rhea",
  "published": "Thu, 08 May 2025 12:33:29 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "animation"
  ],
  "byline": "John Rhea",
  "length": 11453,
  "excerpt": "What does it look like to refactor your own code? John Rhea picks apart an old CSS animation he wrote and walks through the thought process of optimizing it.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "I recently updated my portfolio at johnrhea.com. (If you’re looking to add a CSS or front-end engineer with storytelling and animation skills to your team, I’m your guy.) I liked the look of a series of planets I’d created for another personal project and decided to reuse them on my new site. Part of that was also reusing an animation I’d built circa 2019, where a moon orbited around the planet. Initially, I just plopped the animations into the new site, only changing the units (em units to viewport units using some complicated math that I was very, very proud of) so that they would scale properly because I’m… efficient with my time. However, on mobile, the planet would move up a few pixels and down a few pixels as the moons orbited around it. I suspected the plopped-in animation was the culprit (it wasn’t, but at least I got some optimized animation and an article out of the deal). Here’s the original animation: My initial animation for the moon ran for 60 seconds. I’m folding it inside a disclosure widget because, at 141 lines, it’s stupid long (and, as we’ll see, emphasis on the stupid). Here it is in all its “glory”: Open code #moon1 { animation: moon-one 60s infinite; } @keyframes moon-one { 0% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } 5% { transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5); z-index: 2; animation-timing-function: ease-out; } 9.9% { z-index: 2; } 10% { transform: translate(-5.01043478vw, 6.511304348vw) scale(1); z-index: -1; animation-timing-function: ease-in; } 15% { transform: translate(1.003478261vw, 2.50608696vw) scale(0.25); z-index: -1; animation-timing-function: ease-out; } 19.9% { z-index: -1; } 20% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } 25% { transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5); z-index: 2; animation-timing-function: ease-out; } 29.9% { z-index: 2; } 30% { transform: translate(-5.01043478vw, 6.511304348vw) scale(1); z-index: -1; animation-timing-function: ease-in; } 35% { transform: translate(1.003478261vw, 2.50608696vw) scale(0.25); z-index: -1; animation-timing-function: ease-out; } 39.9% { z-index: -1; } 40% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } 45% { transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5); z-index: 2; animation-timing-function: ease-out; } 49.9% { z-index: 2; } 50% { transform: translate(-5.01043478vw, 6.511304348vw) scale(1); z-index: -1; animation-timing-function: ease-in; } 55% { transform: translate(1.003478261vw, 2.50608696vw) scale(0.25); z-index: -1; animation-timing-function: ease-out; } 59.9% { z-index: -1; } 60% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } 65% { transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5); z-index: 2; animation-timing-function: ease-out; } 69.9% { z-index: 2; } 70% { transform: translate(-5.01043478vw, 6.511304348vw) scale(1); z-index: -1; animation-timing-function: ease-in; } 75% { transform: translate(1.003478261vw, 2.50608696vw) scale(0.25); z-index: -1; animation-timing-function: ease-out; } 79.9% { z-index: -1; } 80% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } 85% { transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5); z-index: 2; animation-timing-function: ease-out; } 89.9% { z-index: 2; } 90% { transform: translate(-5.01043478vw, 6.511304348vw) scale(1); z-index: -1; animation-timing-function: ease-in; } 95% { transform: translate(1.003478261vw, 2.50608696vw) scale(0.25); z-index: -1; animation-timing-function: ease-out; } 99.9% { z-index: -1; } 100% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } } If you look at the keyframes in that code, you’ll notice that the 0% to 20% keyframes are exactly the same as 20% to 40% and so on up through 100%. Why I decided to repeat the keyframes five times infinitely instead of just repeating one set infinitely is a decision lost to antiquity, like six years ago in web time. We can also drop the duration to 12 seconds (one-fifth of sixty) if we were doing our due diligence. I could thus delete everything from 20% on, instantly dropping the code down to 36 lines. And yes, I realize gains like this are unlikely to be possible on most sites, but this is the first step for optimizing things. #moon1 { animation: moon-one 12s infinite; } @keyframes moon-one { 0% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } 5% { transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5); z-index: 2; animation-timing-function: ease-out; } 9.9% { z-index: 2; } 10% { transform: translate(-5.01043478vw, 6.511304348vw) scale(1); z-index: -1; animation-timing-function: ease-in; } 15% { transform: translate(1.003478261vw, 2.50608696vw) scale(0.25); z-index: -1; animation-timing-function: ease-out; } 19.9% { z-index: -1; } 20% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } } Now that we’ve gotten rid of 80% of the overwhelming bits, we can see that there are five main keyframes and two additional ones that set the z-index close to the middle and end of the animation (these prevent the moon from dropping behind the planet or popping out from behind the planet too early). We can change these five points from 0%, 5%, 10%, 15%, and 20% to 0%, 25%, 50%, 75%, and 100% (and since the 0% and the former 20% are the same, we can remove that one, too). Also, since the 10% keyframe above is switching to 50%, the 9.9% keyframe can move to 49.9%, and the 19.9% keyframe can switch to 99.9%, giving us this: #moon1 { animation: moon-one 12s infinite; } @keyframes moon-one { 0%, 100% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } 25% { transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5); z-index: 2; animation-timing-function: ease-out; } 49.9% { z-index: 2; } 50% { transform: translate(-5.01043478vw, 6.511304348vw) scale(1); z-index: -1; animation-timing-function: ease-in; } 75% { transform: translate(1.003478261vw, 2.50608696vw) scale(0.25); z-index: -1; animation-timing-function: ease-out; } 99.9% { z-index: -1; } } Though I was very proud of myself for my math wrangling, numbers like -3.51217391vw are really, really unnecessary. If a screen was one thousand pixels wide, -3.51217391vw would be 35.1217391 pixels. No one ever needs to go down to the precision of a ten-millionth of a pixel. So, let’s round everything to the tenth place (and if it’s a 0, we’ll just drop it). We can also skip z-index in the 75% and 25% keyframes since it doesn’t change. Here’s where that gets us in the code: #moon1 { animation: moon-one 12s infinite; } @keyframes moon-one { 0%, 100% { transform: translate(0, 0) scale(1); z-index: 2; animation-timing-function: ease-in; } 25% { transform: translate(-3.5vw, 3.5vw) scale(1.5); z-index: 2; animation-timing-function: ease-out; } 49.9% { z-index: 2; } 50% { transform: translate(-5vw, 6.5vw) scale(1); z-index: -1; animation-timing-function: ease-in; } 75% { transform: translate(1vw, 2.5vw) scale(0.25); z-index: -1; animation-timing-function: ease-out; } 99.9% { z-index: -1; } } After all our changes, the animation still looks pretty close to what it was before, only way less code: One of the things I don’t like about this animation is that the moon kind of turns at its zenith when it crosses the planet. It would be much better if it traveled in a straight line from the upper right to the lower left. However, we also need it to get a little larger, as if the moon is coming closer to us in its orbit. Because both translation and scaling were done in the transform property, I can’t translate and scale the moon independently. If we skip either one in the transform property, it resets the one we skipped, so I’m forced to guess where the mid-point should be so that I can set the scale I need. One way I’ve solved this in the past is to add a wrapping element, then apply scale to one element and translate to the other. However, now that we have individual scale and translate properties, a better way is to separate them from the transform property and use them as separate properties. Separating out the translation and scaling shouldn’t change anything, unless the original order they were declared on the transform property was different than the order of the singular properties. #moon1 { animation: moon-one 12s infinite; } @keyframes moon-one { 0%, 100% { translate: 0 0; scale: 1; z-index: 2; animation-timing-function: ease-in; } 25% { translate: -3.5vw 3.5vw; z-index: 2; animation-timing-function: ease-out; } 49.9% { z-index: 2; } 50% { translate: -5vw 6.5vw; scale: 1; z-index: -1; animation-timing-function: ease-in; } 75% { translate: 1vw 2.5vw; scale: 0.25; animation-timing-function: ease-out; } 99.9% { z-index: -1; } } Now that we can separate the scale and translate properties and use them independently, we can drop the translate property in the 25% and 75% keyframes because we don’t want them placed precisely in that keyframe. We want the browser’s interpolation to take care of that for us so that it translates smoothly while scaling. #moon1 { animation: moon-one 12s infinite; } @keyframes moon-one { 0%, 100% { translate: 0 0; scale: 1; z-index: 2; animation-timing-function: ease-in; } 25% { scale: 1.5; animation-timing-function: ease-out; } 49.9% { z-index: 2; } 50% { translate: -5vw 6.5vw; scale: 1; z-index: -1; animation-timing-function: ease-in; } 75% { scale: 0.25; animation-timing-function: ease-out; } 99.9% { z-index: -1; } } Lastly, those different timing functions don’t make a lot of sense anymore because we’ve got the browser working for us, and if we use an ease-in-out timing function on everything, then it should do exactly what we want. #moon1 { animation: moon-one 12s infinite ease-in-out; } @keyframes moon-one { 0%, 100% { translate: 0 0; scale: 1; z-index: 2; } 25% { scale: 1.5; } 49.9% { z-index: 2; } 50% { translate: -5vw 6.5vw; scale: 1; z-index: -1; } 75% { scale: 0.25; } 99.9% { z-index: -1; } } And there you go: 141 lines down to 28, and I think the animation looks even better than before. It will certainly be easier to maintain, that’s for sure. But what do you think? Was there an optimization step I missed? Let me know in the comments.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/space-planet-stars.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI recently updated my portfolio at \u003ca href=\"https://johnrhea.com\" rel=\"noopener\"\u003ejohnrhea.com\u003c/a\u003e. (If you’re looking to add a CSS or front-end engineer with storytelling and animation skills to your team, I’m your guy.) I liked the look of a series of planets I’d created for another personal project and decided to reuse them on my new site. Part of that was also reusing an animation I’d built circa 2019, where a moon orbited around the planet.\u003c/p\u003e\n\n\n\n\u003cp\u003eInitially, I just plopped the animations into the new site, only changing the units (\u003ccode\u003eem\u003c/code\u003e units to viewport units using some complicated math that I was very, very proud of) so that they would scale properly because I’m… \u003cem\u003eefficient\u003c/em\u003e with my time. However, on mobile, the planet would move up a few pixels and down a few pixels as the moons orbited around it. I suspected the plopped-in animation was the culprit (it wasn’t, but at least I got some optimized animation and an article out of the deal).\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s the original animation:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eMy initial animation for the moon ran for 60 seconds. I’m folding it inside a disclosure widget because, at 141 lines, it’s stupid long (and, as we’ll see, emphasis on the \u003cem\u003estupid\u003c/em\u003e). Here it is in all its “glory”:\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open code      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#moon1 {\n  animation: moon-one 60s infinite;\n}\n\n@keyframes moon-one {\n  0% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  5% {\n    transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5);\n    z-index: 2;\n    animation-timing-function: ease-out;\n  }\n  9.9% {\n    z-index: 2;\n  }\n  10% {\n    transform: translate(-5.01043478vw, 6.511304348vw) scale(1);\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  15% {\n    transform: translate(1.003478261vw, 2.50608696vw) scale(0.25);\n    z-index: -1;\n    animation-timing-function: ease-out;\n  }\n  19.9% {\n    z-index: -1;\n  }\n  20% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  25% {\n    transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5);\n    z-index: 2;\n    animation-timing-function: ease-out;\n  }\n  29.9% {\n    z-index: 2;\n  }\n  30% {\n    transform: translate(-5.01043478vw, 6.511304348vw) scale(1);\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  35% {\n    transform: translate(1.003478261vw, 2.50608696vw) scale(0.25);\n    z-index: -1;\n    animation-timing-function: ease-out;\n  }\n  39.9% {\n    z-index: -1;\n  }\n  40% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  45% {\n    transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5);\n    z-index: 2;\n    animation-timing-function: ease-out;\n  }\n  49.9% {\n    z-index: 2;\n  }\n  50% {\n    transform: translate(-5.01043478vw, 6.511304348vw) scale(1);\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  55% {\n    transform: translate(1.003478261vw, 2.50608696vw) scale(0.25);\n    z-index: -1;\n    animation-timing-function: ease-out;\n  }\n  59.9% {\n    z-index: -1;\n  }\n  60% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  65% {\n    transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5);\n    z-index: 2;\n    animation-timing-function: ease-out;\n  }\n  69.9% {\n    z-index: 2;\n  }\n  70% {\n    transform: translate(-5.01043478vw, 6.511304348vw) scale(1);\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  75% {\n    transform: translate(1.003478261vw, 2.50608696vw) scale(0.25);\n    z-index: -1;\n    animation-timing-function: ease-out;\n  }\n  79.9% {\n    z-index: -1;\n  }\n  80% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  85% {\n    transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5);\n    z-index: 2;\n    animation-timing-function: ease-out;\n  }\n  89.9% {\n    z-index: 2;\n  }\n  90% {\n    transform: translate(-5.01043478vw, 6.511304348vw) scale(1);\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  95% {\n    transform: translate(1.003478261vw, 2.50608696vw) scale(0.25);\n    z-index: -1;\n    animation-timing-function: ease-out;\n  }\n  99.9% {\n    z-index: -1;\n  }\n  100% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eIf you look at the keyframes in that code, you’ll notice that the \u003ccode\u003e0%\u003c/code\u003e to \u003ccode\u003e20%\u003c/code\u003e keyframes are exactly the same as \u003ccode\u003e20%\u003c/code\u003e to \u003ccode\u003e40%\u003c/code\u003e and so on up through \u003ccode\u003e100%\u003c/code\u003e. Why I decided to repeat the keyframes five times infinitely instead of just repeating one set infinitely is a decision lost to antiquity, like six years ago in web time. We can also drop the duration to 12 seconds (one-fifth of sixty) if we were doing our due diligence.\u003c/p\u003e\n\n\n\n\u003cp\u003eI could thus delete everything from \u003ccode\u003e20%\u003c/code\u003e on, instantly dropping the code down to 36 lines. And yes, I realize gains like this are unlikely to be possible on most sites, but this is the first step for optimizing things.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#moon1 {\n  animation: moon-one 12s infinite;\n}\n\n@keyframes moon-one {\n  0% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  5% {\n    transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5);\n    z-index: 2;\n    animation-timing-function: ease-out;\n  }\n  9.9% {\n    z-index: 2;\n  }\n  10% {\n    transform: translate(-5.01043478vw, 6.511304348vw) scale(1);\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  15% {\n    transform: translate(1.003478261vw, 2.50608696vw) scale(0.25);\n    z-index: -1;\n    animation-timing-function: ease-out;\n  }\n  19.9% {\n    z-index: -1;\n  }\n  20% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow that we’ve gotten rid of 80% of the overwhelming bits, we can see that there are five main keyframes and two additional ones that set the \u003ccode\u003ez-index\u003c/code\u003e close to the middle and end of the animation (these prevent the moon from dropping behind the planet or popping out from behind the planet too early). We can change these five points from \u003ccode\u003e0%\u003c/code\u003e, \u003ccode\u003e5%\u003c/code\u003e, \u003ccode\u003e10%\u003c/code\u003e, \u003ccode\u003e15%\u003c/code\u003e, and \u003ccode\u003e20%\u003c/code\u003e to \u003ccode\u003e0%\u003c/code\u003e, \u003ccode\u003e25%\u003c/code\u003e, \u003ccode\u003e50%\u003c/code\u003e, \u003ccode\u003e75%\u003c/code\u003e, and \u003ccode\u003e100%\u003c/code\u003e (and since the \u003ccode\u003e0%\u003c/code\u003e and the former \u003ccode\u003e20%\u003c/code\u003e are the same, we can remove that one, too). Also, since the \u003ccode\u003e10%\u003c/code\u003e keyframe above is switching to \u003ccode\u003e50%\u003c/code\u003e, the \u003ccode\u003e9.9%\u003c/code\u003e keyframe can move to \u003ccode\u003e49.9%\u003c/code\u003e, and the \u003ccode\u003e19.9%\u003c/code\u003e keyframe can switch to \u003ccode\u003e99.9%\u003c/code\u003e, giving us this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#moon1 {\n  animation: moon-one 12s infinite;\n}\n\n@keyframes moon-one {\n  0%, 100% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  25% {\n    transform: translate(-3.51217391vw, 3.50608696vw) scale(1.5);\n    z-index: 2;\n    animation-timing-function: ease-out;\n  }\n  49.9% {\n    z-index: 2;\n  }\n  50% {\n    transform: translate(-5.01043478vw, 6.511304348vw) scale(1);\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  75% {\n    transform: translate(1.003478261vw, 2.50608696vw) scale(0.25);\n    z-index: -1;\n    animation-timing-function: ease-out;\n  }\n  99.9% {\n    z-index: -1;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThough I was very proud of myself for my math wrangling, numbers like \u003ccode\u003e-3.51217391vw\u003c/code\u003e are really, really unnecessary. If a screen was one thousand pixels wide, \u003ccode\u003e-3.51217391vw\u003c/code\u003e would be \u003ccode\u003e35.1217391\u003c/code\u003e pixels. No one ever needs to go down to the precision of a ten-millionth of a pixel. So, let’s round everything to the tenth place (and if it’s a \u003ccode\u003e0\u003c/code\u003e, we’ll just drop it). We can also skip \u003ccode\u003ez-index\u003c/code\u003e in the \u003ccode\u003e75%\u003c/code\u003e and \u003ccode\u003e25%\u003c/code\u003e keyframes since it doesn’t change.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s where that gets us in the code:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#moon1 {\n  animation: moon-one 12s infinite;\n}\n\n@keyframes moon-one {\n  0%, 100% {\n    transform: translate(0, 0) scale(1);\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  25% {\n    transform: translate(-3.5vw, 3.5vw) scale(1.5);\n    z-index: 2;\n    animation-timing-function: ease-out;\n  }\n  49.9% {\n    z-index: 2;\n  }\n  50% {\n    transform: translate(-5vw, 6.5vw) scale(1);\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  75% {\n    transform: translate(1vw, 2.5vw) scale(0.25);\n    z-index: -1;\n    animation-timing-function: ease-out;\n  }\n  99.9% {\n    z-index: -1;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAfter all our changes, the animation still looks pretty close to what it was before, only way less code:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eOne of the things I don’t like about this animation is that the moon kind of turns at its zenith when it crosses the planet. It would be much better if it traveled in a straight line from the upper right to the lower left. However, we also need it to get a little larger, as if the moon is coming closer to us in its orbit. Because both translation and scaling were done in the \u003ccode\u003etransform\u003c/code\u003e property, I can’t translate and scale the moon independently.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf we skip either one in the \u003ccode\u003etransform\u003c/code\u003e property, it resets the one we skipped, so I’m forced to guess where the mid-point should be so that I can set the scale I need. One way I’ve solved this in the past is to add a wrapping element, then apply \u003ccode\u003escale\u003c/code\u003e to one element and \u003ccode\u003etranslate\u003c/code\u003e to the other. However, now that we have individual \u003ccode\u003escale\u003c/code\u003e and \u003ccode\u003etranslate\u003c/code\u003e properties, a better way is to separate them from the \u003ccode\u003etransform\u003c/code\u003e property and use them as separate properties. Separating out the translation and scaling shouldn’t change anything, unless the original order they were declared on the \u003ccode\u003etransform\u003c/code\u003e property was different than the order of the singular properties.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#moon1 {\n  animation: moon-one 12s infinite;\n}\n\n@keyframes moon-one {\n  0%, 100% {\n    translate: 0 0;\n    scale: 1;\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  25% {\n    translate: -3.5vw 3.5vw;\n    z-index: 2;\n    animation-timing-function: ease-out;\n  }\n  49.9% {\n    z-index: 2;\n  }\n  50% {\n    translate: -5vw 6.5vw;\n    scale: 1;\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  75% {\n    translate: 1vw 2.5vw;\n    scale: 0.25;\n    animation-timing-function: ease-out;\n  }\n  99.9% {\n    z-index: -1;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow that we can separate the \u003ccode\u003escale\u003c/code\u003e and \u003ccode\u003etranslate\u003c/code\u003e properties and use them independently, we can drop the \u003ccode\u003etranslate\u003c/code\u003e property in the \u003ccode\u003e25%\u003c/code\u003e and \u003ccode\u003e75%\u003c/code\u003e keyframes because we don’t want them placed precisely in that keyframe. We want the browser’s interpolation to take care of that for us so that it translates smoothly while scaling.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#moon1 {\n  animation: moon-one 12s infinite;\n}\n\n@keyframes moon-one {\n  0%, 100% {\n    translate: 0 0;\n    scale: 1;\n    z-index: 2;\n    animation-timing-function: ease-in;\n  }\n  25% {\n    scale: 1.5;\n    animation-timing-function: ease-out;\n  }\n  49.9% {\n    z-index: 2;\n  }\n  50% {\n    translate: -5vw 6.5vw;\n    scale: 1;\n    z-index: -1;\n    animation-timing-function: ease-in;\n  }\n  75% {\n    scale: 0.25;\n    animation-timing-function: ease-out;\n  }\n  99.9% {\n    z-index: -1;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eLastly, those different timing functions don’t make a lot of sense anymore because we’ve got the browser working for us, and if we use an \u003ccode\u003eease-in-out\u003c/code\u003e timing function on everything, then it should do exactly what we want.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#moon1 {\n  animation: moon-one 12s infinite ease-in-out;\n}\n\n@keyframes moon-one {\n  0%, 100% {\n    translate: 0 0;\n    scale: 1;\n    z-index: 2;\n  }\n  25% {\n    scale: 1.5;\n  }\n  49.9% {\n    z-index: 2;\n  }\n  50% {\n    translate: -5vw 6.5vw;\n    scale: 1;\n    z-index: -1;\n  }\n  75% {\n    scale: 0.25;\n  }\n  99.9% {\n    z-index: -1;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAnd there you go: 141 lines down to 28, and I think the animation looks even better than before. It will certainly be easier to maintain, that’s for sure.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut what do you think? Was there an optimization step I missed? Let me know in the comments.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2025-05-08T06:33:29-06:00",
  "modifiedTime": "2025-05-08T06:33:32-06:00"
}
