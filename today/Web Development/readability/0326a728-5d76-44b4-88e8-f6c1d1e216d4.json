{
  "id": "0326a728-5d76-44b4-88e8-f6c1d1e216d4",
  "title": "Why is Nobody Using the hwb() Color Function?",
  "link": "https://css-tricks.com/why-is-nobody-using-the-hwb-color-function/",
  "description": "Okay, nobody is an exaggeration, but have you seen the stats for hwb()? They show a steep decline, and after working a lot on color in the CSS-Tricks almanac, I’ve just been wondering why that is. Why is Nobody Using the hwb() Color Function? originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Sunkanmi Fafowora",
  "published": "Wed, 07 May 2025 12:25:19 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "color"
  ],
  "byline": "Sunkanmi Fafowora",
  "length": 4139,
  "excerpt": "Okay, nobody is an exaggeration, but have you seen the stats for hwb()? They show a steep decline, and after working a lot on color in the CSS-Tricks almanac, I’ve just been wondering why that is.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Okay, nobody is an exaggeration, but have you seen the stats for hwb()? They show a steep decline, and after working a lot on color in the CSS-Tricks almanac, I’ve just been wondering why that is. hwb() is a color function in the sRGB color space, which is the same color space used by rgb(), hsl() and the older hexadecimal color format (e.g. #f8a100). hwb() is supposed to be more intuitive and easier to work with than hsl(). I kinda get why it’s considered “easier” since you specify how much black or white you want to add to a given color. But, how is hwb() more intuitive than hsl()? hwb() accepts three values, and similar to hsl(), the first value specifies the color’s hue (between 0deg–360deg), while the second and third values add whiteness (0 – 100) and blackness (0 – 100) to the mix, respectively. According to Google, the term “intuitive” means “what one feels to be true even without conscious reasoning; instinctive.” As such, it does truly seem that hwb() is more intuitive than hsl(), but it’s only a slight notable difference that makes that true. Let’s consider an example with a color. We’ll declare light orange in both hsl() and hwb(): /* light orange in hsl */ .element-1 { color: hsl(30deg 100% 75%); } /* light orange in hwb() */ .element-2 { color: hwb(30deg 50% 0%); } These two functions produce the exact same color, but while hwb() handles ligthness with two arguments, hsl() does it with just one, leaving one argument for the saturation. By comparison, hwb() provides no clear intuitive way to set just the saturation. I’d argue that makes the hwb() function less intuitive than hsl(). I think another reason that hsl() is generally more intuitive than hwb() is that HSL as a color model was created in the 1970s while HWB as a color model was created in 1996. We’ve had much more time to get acquainted with hsl() than we have hwb(). hsl() was implemented by browsers as far back as 2008, Safari being the first and other browsers following suit. Meanwhile, hwb() gained support as recently as 2021! That’s more than a 10-year gap between functions when it comes to using them and being familiar with them. There’s also the fact that other color functions that are used to represent colors in other color spaces — such as lab(), lch(), oklab(), and oklch() — offer more advantages, such as access to more colors in the color gamut and perceptual uniformity. So, maybe being intuitive is coming at the expense of having a more robust feature set, which could explain why you might go with a less intuitive function that doesn’t use sRGB. Look, I can get around the idea of controlling how white or black you want a color to look based on personal preferences, and for designers, it’s maybe easier to mix colors that way. But I honestly would not opt for this as my go-to color function in the sRGB color space because hsl() does something similar using the same hue, but with saturation and lightness as the parameters which is far more intuitive than what hwb() offers. I see our web friend, Stefan Judis, preferring hsl() over hwb() in his article on hwb(). Lea Verou even brought up the idea of removing hwb() from the spec in 2022, but a decision was made to leave it as it was since browsers were already implementing the function. And although,I was initially pained by the idea of keeping hwb() around, I also quite understand the feeling of working on something, and then seeing it thrown in the bin. Once we’ve introduced something, it’s always tough to walk it back, especially when it comes to maintaining backwards compatibility, which is a core tenet of the web. I would like to say something though: lab(), lch(), oklab(), oklch() are already here and are better color functions than hwb(). I, for one, would encourage using them over hwb() because they support so many more colors that are simply missing from the hsl() and hwb() functions. I’ve been exploring colors for quite some time now, so any input would be extremely helpful. What color functions are you using in your everyday website or web application, and why? More on color",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/10/stripe-accessible-colors.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eOkay, \u003cem\u003enobody\u003c/em\u003e is an exaggeration, but have you seen the stats for \u003ccode\u003ehwb()\u003c/code\u003e? They show a steep decline, and after working \u003cem\u003ea lot\u003c/em\u003e on color in the \u003ca href=\"https://css-tricks.com/almanac/\"\u003eCSS-Tricks almanac\u003c/a\u003e, I’ve just been wondering why that is.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1960\" height=\"1196\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Screenshot-2025-05-05-at-10.43.24%E2%80%AFAM.png?resize=1960%2C1196\u0026amp;ssl=1\" alt=\"Chrome Platform Status for hwb(), showing a steep decline in usage from 0.4 percent of all page loads in 2024 to less than .2 perfect in 2025.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Screenshot-2025-05-05-at-10.43.24%E2%80%AFAM.png?w=1960\u0026amp;ssl=1 1960w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Screenshot-2025-05-05-at-10.43.24%E2%80%AFAM.png?resize=300%2C183\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Screenshot-2025-05-05-at-10.43.24%E2%80%AFAM.png?resize=1024%2C625\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Screenshot-2025-05-05-at-10.43.24%E2%80%AFAM.png?resize=768%2C469\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/Screenshot-2025-05-05-at-10.43.24%E2%80%AFAM.png?resize=1536%2C937\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003ehwb()\u003c/code\u003e is a color function in the sRGB color space, which is the same color space used by \u003ca href=\"https://css-tricks.com/almanac/functions/r/rgb\"\u003e\u003ccode\u003ergb()\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://css-tricks.com/almanac/functions/h/hsl/\"\u003e\u003ccode\u003ehsl()\u003c/code\u003e\u003c/a\u003e and the older hexadecimal color format (e.g. \u003ccode\u003e#f8a100\u003c/code\u003e). \u003ccode\u003ehwb()\u003c/code\u003e is supposed to be more intuitive and easier to work with than \u003ccode\u003ehsl()\u003c/code\u003e. I kinda get why it’s considered “easier” since you specify how much black or white you want to add to a given color. But, how is \u003ccode\u003ehwb()\u003c/code\u003e more \u003cem\u003eintuitive\u003c/em\u003e than \u003ccode\u003ehsl()\u003c/code\u003e?\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003ehwb()\u003c/code\u003e accepts three values, and similar to \u003ccode\u003ehsl()\u003c/code\u003e, the first value specifies the color’s hue (between \u003ccode\u003e0deg\u003c/code\u003e–\u003ccode\u003e360deg\u003c/code\u003e), while the second and third values add whiteness (\u003ccode\u003e0\u003c/code\u003e – \u003ccode\u003e100\u003c/code\u003e) and blackness (\u003ccode\u003e0\u003c/code\u003e – \u003ccode\u003e100\u003c/code\u003e) to the mix, respectively.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eAccording to Google, the term “intuitive” means “\u003cem\u003ewhat one feels to be true even without conscious reasoning; instinctive\u003c/em\u003e.” As such, it does truly seem that \u003ccode\u003ehwb()\u003c/code\u003e is more intuitive than \u003ccode\u003ehsl()\u003c/code\u003e, but it’s only a slight notable difference that makes that true.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s consider an example with a color. We’ll declare \u003cem\u003elight orange\u003c/em\u003e in both \u003ccode\u003ehsl()\u003c/code\u003e and \u003ccode\u003ehwb()\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* light orange in hsl */\n.element-1 {\n  color: hsl(30deg 100% 75%);\n}\n\n/* light orange in hwb() */\n.element-2 {\n  color: hwb(30deg 50% 0%);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThese two functions produce the exact same color, but while \u003ccode\u003ehwb()\u003c/code\u003e handles ligthness with two arguments, \u003ccode\u003ehsl()\u003c/code\u003e does it with just one, leaving one argument for the saturation. By comparison, \u003ccode\u003ehwb()\u003c/code\u003e provides no clear intuitive way to set just the saturation. I’d argue that makes the \u003ccode\u003ehwb()\u003c/code\u003e function less intuitive than \u003ccode\u003ehsl()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eI think another reason that \u003ccode\u003ehsl()\u003c/code\u003e is generally more intuitive than \u003ccode\u003ehwb()\u003c/code\u003e is that \u003ca href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\" rel=\"noopener\"\u003eHSL as a color model was created in the 1970s\u003c/a\u003e while \u003ca href=\"https://en.wikipedia.org/wiki/HWB_color_model#:~:text=It%20was%20developed%20by%20HSV%E2%80%99s%20creator%20Alvy%20Ray%20Smith%20in%201996\" rel=\"noopener\"\u003eHWB as a color model was created in 1996\u003c/a\u003e. We’ve had much more time to get acquainted with \u003ccode\u003ehsl()\u003c/code\u003e than we have \u003ccode\u003ehwb()\u003c/code\u003e. \u003ccode\u003ehsl()\u003c/code\u003e was implemented by browsers \u003ca href=\"https://caniuse.com/?search=hsl\" rel=\"noopener\"\u003eas far back as 2008\u003c/a\u003e, Safari being the first and other browsers following suit. Meanwhile, \u003ccode\u003ehwb()\u003c/code\u003e \u003ca href=\"https://caniuse.com/?search=hwb\" rel=\"noopener\"\u003egained support as recently\u003c/a\u003e \u003ca href=\"https://caniuse.com/?search=hwb\" rel=\"noopener\"\u003eas 2021\u003c/a\u003e! That’s more than a 10-year gap between functions when it comes to using them and being familiar with them.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere’s also the fact that other color functions that are used to represent colors in other color spaces — such as \u003ca href=\"https://css-tricks.com/almanac/functions/l/lab/\"\u003e\u003ccode\u003elab()\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://css-tricks.com/almanac/functions/l/lch/\"\u003e\u003ccode\u003elch()\u003c/code\u003e\u003c/a\u003e, \u003ca href=\"https://css-tricks.com/almanac/functions/o/oklab/\"\u003e\u003ccode\u003eoklab()\u003c/code\u003e\u003c/a\u003e, and \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/o/oklch/\"\u003eoklch()\u003c/a\u003e\u003c/code\u003e — offer more advantages, such as access to more colors in the color gamut and perceptual uniformity. So, maybe being \u003cem\u003eintuitive\u003c/em\u003e is coming at the expense of having a more robust feature set, which could explain why you might go with a less intuitive function that doesn’t use sRGB.\u003c/p\u003e\n\n\n\n\u003cp\u003eLook, I can get around the idea of controlling how white or black you want a color to look based on personal preferences, and for designers, it’s maybe easier to mix colors that way. But I \u003cem\u003ehonestly\u003c/em\u003e would not opt for this as my go-to color function in the sRGB color space because \u003ccode\u003ehsl()\u003c/code\u003e does something similar using the same hue, but with saturation and lightness as the parameters which is far more intuitive than what \u003ccode\u003ehwb()\u003c/code\u003e offers.\u003c/p\u003e\n\n\n\n\u003cp\u003eI see our web friend, Stefan Judis, preferring \u003ccode\u003ehsl()\u003c/code\u003e over \u003ccode\u003ehwb()\u003c/code\u003e\u003ca href=\"https://www.stefanjudis.com/blog/hwb-a-color-notation-for-humans/\" rel=\"noopener\"\u003e in his article on \u003ccode\u003ehwb()\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/w3c/csswg-drafts/issues/6940#issue-1099121498\" rel=\"noopener\"\u003eLea Verou even brought up the idea of removing \u003ccode\u003ehwb()\u003c/code\u003e\u003c/a\u003e from the spec in 2022, but \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/6940#issuecomment-1028283127\" rel=\"noopener\"\u003ea decision was made to leave it as it was\u003c/a\u003e since browsers were already implementing the function. And although,I was initially pained by the idea of keeping \u003ccode\u003ehwb()\u003c/code\u003e around, I also quite understand the feeling of working on something, and then seeing it thrown in the bin. Once we’ve introduced something, it’s always tough to walk it back, especially when it comes to maintaining backwards compatibility, which is a core tenet of the web.\u003c/p\u003e\n\n\n\n\u003cp\u003eI would like to say something though: \u003ccode\u003elab()\u003c/code\u003e, \u003ccode\u003elch()\u003c/code\u003e, \u003ccode\u003eoklab()\u003c/code\u003e, \u003ccode\u003eoklch()\u003c/code\u003e are already here and are better color functions than \u003ccode\u003ehwb()\u003c/code\u003e. I, for one, would encourage using them over \u003ccode\u003ehwb()\u003c/code\u003e because \u003ca href=\"https://www.smashingmagazine.com/2023/08/oklch-color-spaces-gamuts-css/\" rel=\"noopener\"\u003ethey support \u003cem\u003eso many more\u003c/em\u003e colors\u003c/a\u003e that are simply missing from the \u003ccode\u003ehsl()\u003c/code\u003e and \u003ccode\u003ehwb()\u003c/code\u003e functions.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’ve been exploring colors for quite some time now, so any input would be extremely helpful. What color functions are you using in your everyday website or web application, and why?\u003c/p\u003e\n\n\n\u003ch3 id=\"more-on-color\"\u003eMore on color\u003c/h3\u003e\n\n\n    \t\t\n    \n  \n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-05-07T06:25:19-06:00",
  "modifiedTime": "2025-05-08T14:56:01-06:00"
}
