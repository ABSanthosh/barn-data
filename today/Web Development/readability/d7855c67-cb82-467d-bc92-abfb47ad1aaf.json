{
  "id": "d7855c67-cb82-467d-bc92-abfb47ad1aaf",
  "title": "A Reader’s Question on Nested Lists",
  "link": "https://css-tricks.com/a-readers-question-on-nested-lists/",
  "description": "Answering a reader's question about how to create a complex numbering system with CSS list counters. A Reader’s Question on Nested Lists originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Juan Diego Rodríguez",
  "published": "Mon, 19 May 2025 12:32:22 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "lists"
  ],
  "byline": "Juan Diego Rodríguez",
  "length": 7744,
  "excerpt": "Answering a reader's question about how to create a complex numbering system with CSS list counters.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "A couple of days back, among the tens of crypto-scams that flood our contact inbox, we found an interesting question on nested lists from one of our readers. I have a problem (related to list-numbering) that seems commonplace, but I can’t seem to solve it or find any solution for. If any of your geniuses can answer this, I’m sure there are going to be a lot of people interested. Styling lists? Enough to catch my attention. After all, I just completed an entire guide about CSS counters. The message continues: Here’s the problem. It’s a routine numbering sequence, of different levels, found in (for example) [government], legislation, and in my case, condominium bylaws. I have five levels represented by the first number at each level of 1., (1), (a) (lower-alpha), (i) (lower-roman), (A) (upper-alpha). Of course, I have 5 levels here, but if you could demonstrate a solution for 3 levels. Fair enough! So, what we are looking to achieve is a nested list, where each sublist marker/counter is of a different kind. The example linked in the message is the following: 8 The strata corporation must repair and maintain all of the following: (a) common assets of the strata corporation; (b) common property that has not been designated as limited common property; (c) limited common property, but the duty to repair and maintain it is restricted to (i) repair and maintenance that in the ordinary course of events occurs less often than once a year, and (ii) the following, no matter how often the repair or maintenance ordinarily occurs: (A) the structure of a building; (B) the exterior of a building; (C) chimneys, stairs, balconies and other things attached to the exterior of a building; (D) doors, windows and skylights on the exterior of a building or that front on the common property; While simple at first glance, it still has some nuance, so let’s try to come up with the most maintainable solution here. The ugly way My first approach to this problem was no approach at all; I just opened CodePen, wrote up the HTML, and tried to get my CSS to work towards the final result. After translating the Markdown into ol and li elements, and with no special styling on each list, the base list would look like the following: Once there, my first instinct was to select each ol element and then change its list-style-type to the desired one. To target each level, I selected each ol depending on its number of ol ancestors, then let the specificity handle the rest: ol { list-style-type: decimal; /* Unnecessary; just for demo */ } ol ol { list-style-type: lower-alpha; } ol ol ol { list-style-type: lower-roman; } ol ol ol ol { list-style-type: upper-alpha; } And as you can see, this works… But we can agree it’s an ugly way to go about it. Nesting to the rescue Luckily, CSS nesting has been baseline for a couple of years now, so we could save ourselves a lot of ol selectors by just nesting each element inside the next one. ol { list-style-type: decimal; ol { list-style-type: lower-alpha; ol { list-style-type: lower-roman; ol { list-style-type: upper-alpha; } } } } While too much nesting is usually frowned upon, I think that, for this case in particular, it makes the CSS clearer on what it intends to do — especially since the CSS structure matches the HTML itself, and it also keeps all the list styles in one place. All to the same result: It’s legal I don’t know anything about legal documents, nor do I intend to learn about them. However, I do know the law, and by extension, lawyers are finicky about how they are formatted because of legal technicalities and whatnot. The point is that for a legal document, those parentheses surrounding each list marker — like (A) or (ii) — are more than mere decoration and have to be included in our lists, which our current solution doesn’t. A couple of years back, we would have needed to set a counter for each list and then include the parentheses along the counter() output; repetitive and ugly. Nowadays, we can use the @counter-style at rule, which as its name implies, allows us to create custom counter styles that can be used (among other places) in the list-style-type property. In case you’re unfamiliar with the @counter-style syntax, what we need to know is that it can be used to extend predefined counter styles (like decimal or upper-alpha), and attach to them a different suffix or prefix. For example, the following counter style extends the common decimal style and adds a dash (-) as a prefix and a colon (:) as a suffix. @counter-style my-counter-style { system: extends decimal; prefix: \"- \"; suffix: \": \"; } ol { list-style-type: my-counter-style; } In our case, we’ll need four counter styles: A decimal marker, without the ending dot. The initial submission doesn’t make it clear if it’s with or without the dot, but let’s assume it’s without. A lower alpha marker, enclosed in parentheses. A lower Roman marker, also enclosed in parentheses. An upper alpha marker, enclosed in parentheses as well. All these would translate to the following @counter-style rules: @counter-style trimmed-decimal { system: extends decimal; suffix: \" \"; } @counter-style enclosed-lower-alpha { system: extends lower-alpha; prefix: \"(\"; suffix: \") \"; } @counter-style enclosed-lower-roman { system: extends lower-roman; prefix: \"(\"; suffix: \") \"; } @counter-style enclosed-upper-alpha { system: extends upper-alpha; prefix: \"(\"; suffix: \") \"; } And then, we just gotta replace each with its equivalent in our initial ol declarations: ol { list-style-type: trimmed-decimal; ol { list-style-type: enclosed-lower-alpha; ol { list-style-type: enclosed-lower-roman; ol { list-style-type: enclosed-upper-alpha; } } } } It should work without CSS! Remember, though, it’s a legal document, so what happens if the internet is weak enough so that only the HTML loads correctly, or if someone checks the page from an old browser that doesn’t support nesting or @counter-style? Thinking only about the list, in most websites, it would be a mild annoyance where the markers go back to decimal, and you have to go by padding to know where each sublist starts. However, in a legal document, it can be a big deal. How big? I am no lawyer, so it beats me, but we still can make sure the list keeps its original numbering even without CSS. For the task, we can use the HTML type attribute. It’s similar to CSS list-style-type but with its own limited uses. First, its use with ul elements is deprecated, while it can be used in ol elements to keep the lists correctly numbered even without CSS, like in legal or technical documents such as ours. It has the following values: \"1\" for decimal numbers (default) \"a\" for lowercase alphabetic \"A\" for uppercase alphabetic \"i\" for lowercase Roman numbers \"I\" for uppercase Roman numbers Inside our HTML list, we would assign the correct numbering for each ol level: Depending on how long the document is, it may be more the hassle than the benefit, but it is still good to know. Although this kind of document doesn’t change constantly, so it wouldn’t hurt to add this extra safety net. Welp, that was kinda too much for a list! But that’s something intrinsic to legal documents. Still, I think it’s the simplest way to achieve the initial reader’s goal. Let me know in the comments if you think this is overengineered or if there is an easier way. More on lists!",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/11/html-lists.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eA couple of days back, among the tens of crypto-scams that flood our contact inbox, we found an interesting question on nested lists from one of our readers.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eI have a problem (related to list-numbering) that seems commonplace, but I can’t seem to solve it or find any solution for. If any of your geniuses can answer this, I’m sure there are going to be a lot of people interested.\u003c/p\u003e\n\n\n\n\u003cspan id=\"more-386580\"\u003e\u003c/span\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eStyling lists? Enough to catch my attention. After all, I just completed \u003ca href=\"https://css-tricks.com/styling-counters-in-css/\"\u003ean entire guide about CSS counters\u003c/a\u003e. The message continues:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eHere’s the problem. It’s a routine numbering sequence, of different levels, found in (for example) [government], legislation, and in my case, condominium bylaws. I have five levels represented by the first number at each level of 1., (1), (a) (lower-alpha), (i) (lower-roman), (A) (upper-alpha). Of course, I have 5 levels here, but if you could demonstrate a solution for 3 levels.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eFair enough! So, what we are looking to achieve is a nested list, where each sublist marker/counter is of a different kind. The example linked in the message is the following:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"Plain Text\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e8 The strata corporation must repair and maintain all of the following:\n    (a) common assets of the strata corporation;\n    (b) common property that has not been designated as limited common property;\n    (c) limited common property, but the duty to repair and maintain it is restricted to\n        (i) repair and maintenance that in the ordinary course of events occurs less often than once a year, and\n        (ii) the following, no matter how often the repair or maintenance ordinarily occurs:\n            (A) the structure of a building;\n            (B) the exterior of a building;\n            (C) chimneys, stairs, balconies and other things attached to the exterior of a building;\n            (D) doors, windows and skylights on the exterior of a building or that front on the common property;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhile simple at first glance, it still has some nuance, so let’s try to come up with the most maintainable solution here.\u003c/p\u003e\n\n\n\u003ch3 id=\"the-ugly-way\"\u003eThe ugly way\u003c/h3\u003e\n\n\n\u003cp\u003eMy first approach to this problem was no approach at all; I just opened CodePen, wrote up the HTML, and tried to get my CSS to work towards the final result. After translating the Markdown into \u003ccode\u003eol\u003c/code\u003e and \u003ccode\u003eli\u003c/code\u003e elements, and with no special styling on each list, the base list would look like the following:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eOnce there, my first instinct was to select each \u003ccode\u003eol\u003c/code\u003e element and then change its \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/l/list-style/\"\u003elist-style-type\u003c/a\u003e\u003c/code\u003e to the desired one. To target each level, I selected each \u003ccode\u003eol\u003c/code\u003e depending on its number of \u003ccode\u003eol\u003c/code\u003e ancestors, then let the specificity handle the rest:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  list-style-type: decimal; /* Unnecessary; just for demo */\n}\n\nol ol {\n  list-style-type: lower-alpha;\n}\n\nol ol ol {\n  list-style-type: lower-roman;\n}\n\nol ol ol ol {\n  list-style-type: upper-alpha;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd as you can see, this works… But we can agree it’s an ugly way to go about it.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch2 id=\"nesting-to-the-rescue\"\u003eNesting to the rescue\u003c/h2\u003e\n\n\n\u003cp\u003eLuckily, CSS nesting has been baseline for a couple of years now, so we could save ourselves a lot of \u003ccode\u003eol\u003c/code\u003e selectors by just nesting each element inside the next one.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  list-style-type: decimal;\n  \n  ol {\n    list-style-type: lower-alpha;\n     \n    ol {\n      list-style-type: lower-roman;\n          \n       ol {\n        list-style-type: upper-alpha;\n      }\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhile too much nesting is usually frowned upon, I think that, for this case in particular, it makes the CSS clearer on what it intends to do — especially since the CSS structure matches the HTML itself, and it also keeps all the list styles in one place. All to the same result:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"it-s-legal\"\u003eIt’s legal\u003c/h3\u003e\n\n\n\u003cp\u003eI don’t know anything about legal documents, nor do I intend to learn about them. However, I do know the law, and by extension, lawyers are finicky about how they are formatted because of legal technicalities and whatnot. The point is that for a legal document, those parentheses surrounding each list marker — like \u003ccode\u003e(A)\u003c/code\u003e or \u003ccode\u003e(ii)\u003c/code\u003e — are more than mere decoration and have to be included in our lists, which our current solution doesn’t.\u003c/p\u003e\n\n\n\n\u003cp\u003eA couple of years back, we would have needed to set a counter for each list and then include the parentheses along the \u003ca href=\"https://css-tricks.com/almanac/functions/c/counter/\"\u003e\u003ccode\u003ecounter()\u003c/code\u003e\u003c/a\u003e output; repetitive and ugly. Nowadays, we can use the \u003ca href=\"https://css-tricks.com/almanac/rules/c/counter-style/\"\u003e\u003ccode\u003e@counter-style\u003c/code\u003e\u003c/a\u003e at rule, which as its name implies, allows us to create custom counter styles that can be used (among other places) in the \u003ccode\u003elist-style-type\u003c/code\u003e property.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn case you’re unfamiliar with the \u003ccode\u003e@counter-style\u003c/code\u003e syntax, what we need to know is that it can be used to extend predefined counter styles (like \u003ccode\u003edecimal\u003c/code\u003e or \u003ccode\u003eupper-alpha\u003c/code\u003e), and attach to them a different \u003ccode\u003esuffix\u003c/code\u003e or \u003ccode\u003eprefix\u003c/code\u003e. For example, the following counter style extends the common \u003ccode\u003edecimal\u003c/code\u003e style and adds a dash (\u003ccode\u003e-\u003c/code\u003e) as a \u003ccode\u003eprefix\u003c/code\u003e and a colon (\u003ccode\u003e:\u003c/code\u003e) as a suffix.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style my-counter-style {\n  system: extends decimal;\n  prefix: \u0026#34;- \u0026#34;;\n  suffix: \u0026#34;: \u0026#34;;\n}\n\nol {\n  list-style-type: my-counter-style;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIn our case, we’ll need four counter styles:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eA decimal marker, without the ending dot. The initial submission doesn’t make it clear if it’s with or without the dot, but let’s assume it’s without.\u003c/li\u003e\n\n\n\n\u003cli\u003eA lower alpha marker, enclosed in parentheses.\u003c/li\u003e\n\n\n\n\u003cli\u003eA lower Roman marker, also enclosed in parentheses.\u003c/li\u003e\n\n\n\n\u003cli\u003eAn upper alpha marker, enclosed in parentheses as well.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAll these would translate to the following \u003ccode\u003e@counter-style\u003c/code\u003e rules:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style trimmed-decimal {\n  system: extends decimal;\n  suffix: \u0026#34; \u0026#34;;\n}\n\n@counter-style enclosed-lower-alpha {\n  system: extends lower-alpha;\n  prefix: \u0026#34;(\u0026#34;;\n  suffix: \u0026#34;) \u0026#34;;\n}\n\n@counter-style enclosed-lower-roman {\n  system: extends lower-roman;\n  prefix: \u0026#34;(\u0026#34;;\n  suffix: \u0026#34;) \u0026#34;;\n}\n\n@counter-style enclosed-upper-alpha {\n  system: extends upper-alpha;\n  prefix: \u0026#34;(\u0026#34;;\n  suffix: \u0026#34;) \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd then, we just gotta replace each with its equivalent in our initial \u003ccode\u003eol\u003c/code\u003e declarations:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  list-style-type: trimmed-decimal;\n\n  ol {\n    list-style-type: enclosed-lower-alpha;\n\n    ol {\n      list-style-type: enclosed-lower-roman;\n\n      ol {\n        list-style-type: enclosed-upper-alpha;\n      }\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003ch3 id=\"it-should-work-without-css-\"\u003eIt should work without CSS!\u003c/h3\u003e\n\n\n\u003cp\u003eRemember, though, it’s a legal document, so what happens if the internet is weak enough so that only the HTML loads correctly, or if someone checks the page from an old browser that doesn’t support nesting or \u003ccode\u003e@counter-style\u003c/code\u003e?\u003c/p\u003e\n\n\n\n\u003cp\u003eThinking only about the list, in most websites, it would be a mild annoyance where the markers go back to decimal, and you have to go by padding to know where each sublist starts. However, in a legal document, it can be a big deal. How big? I am no lawyer, so it beats me, but we still can make sure the list keeps its original numbering even without CSS.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor the task, we can use the HTML \u003ccode\u003etype\u003c/code\u003e attribute. It’s similar to CSS \u003ccode\u003elist-style-type\u003c/code\u003e but with its own limited uses. First, its use with \u003ccode\u003eul\u003c/code\u003e elements is deprecated, while it can be used in \u003ccode\u003eol\u003c/code\u003e elements to keep the lists correctly numbered even without CSS, like in legal or technical documents such as ours. It has the following values:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026#34;1\u0026#34;\u003c/code\u003e for decimal numbers (default)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u0026#34;a\u0026#34;\u003c/code\u003e for lowercase alphabetic\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u0026#34;A\u0026#34;\u003c/code\u003e for uppercase alphabetic\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u0026#34;i\u0026#34;\u003c/code\u003e for lowercase Roman numbers\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u0026#34;I\u0026#34;\u003c/code\u003e for uppercase Roman numbers\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eInside our HTML list, we would assign the correct numbering for each \u003ccode\u003eol\u003c/code\u003e level:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eDepending on how long the document is, it may be more the hassle than the benefit, but it is still good to know. Although this kind of document doesn’t change constantly, so it wouldn’t hurt to add this extra safety net.\u003c/p\u003e\n\n\n\n\u003cp\u003eWelp, that was kinda too much for a list! But that’s something intrinsic to legal documents. Still, I think it’s the simplest way to achieve the initial reader’s goal. Let me know in the comments if you think this is overengineered or if there is an easier way.\u003c/p\u003e\n\n\n\u003ch3 id=\"more-on-lists\"\u003eMore on lists!\u003c/h3\u003e\n\n\n    \t\t\n    \n  \n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-05-19T06:32:22-06:00",
  "modifiedTime": "2025-05-19T06:32:25-06:00"
}
