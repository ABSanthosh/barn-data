{
  "id": "b5567551-508f-4a84-83a2-4c16d86e66b3",
  "title": "Creating a “Starred” Feed",
  "link": "https://css-tricks.com/creating-a-starred-feed/",
  "description": "Chris wrote about “Likes” pages a long while back. The idea is rather simple: “Like” an item in your RSS reader and display it in a feed of other liked items. The little example Chris made is still really good.… Creating a “Starred” Feed originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Tue, 21 Jan 2025 14:21:32 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "api",
    "rss",
    "WordPress"
  ],
  "byline": "Geoff Graham",
  "length": 8898,
  "excerpt": "Chris wrote about \"Likes\" pages a long while back. The idea is rather simple: \"Like\" an item in your RSS reader and display it in a feed of other liked items.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Chris wrote about “Likes” pages a long while back. The idea is rather simple: “Like” an item in your RSS reader and display it in a feed of other liked items. The little example Chris made is still really good. There were two things Chris noted at the time. One was that he used a public CORS proxy that he wouldn’t use in a production environment. Good idea to nix that, security and all. The other was that he’d consider using WordPress transients to fetch and cache the data to work around CORS. I decided to do that! The result is this WordPress block I can drop right in here. I’ll plop it in a \u003cdetails\u003e to keep things brief. Open Starred Feed In my post Brief Note on Figure and Figcaption Support I demonstrate how, when encountering a figure with a screen reader, you won’t hear everything announced at once: No screen reader combo treats the caption as the accessible name nor accessible description, not even for an… One of the running jokes and/or discussion I am sick and tired of is people belittling HTML. Yes, HTML is not a programming language. No, HTML should not just be a compilation target. Learning HTML is a solid investment and not hard to do. I am not…Link on 1/14/2025Open Props UIWe can use the :empty pseudo-class as a way to style elements on your webpage that are empty. You might wonder why you’d want to style something that’s empty. Let’s say you’re creating a todo list. You want to put your todo items in a list, but what about when you don’t…Back in 2023, I belatedly jumped on the bandwagon of people posting their CSS wish lists for the coming year.  This year I’m doing all that again, less belatedly! (I didn’t do it last year because I couldn’t even.  Get it?) I started this post by looking at what I… It does, actually. In Firefox. Sometimes. A major risk of using ARIA to define text content is it typically gets overlooked in translation. Automated translation services often do not capture it. Those who pay for localization services frequently miss content in ARIA attributes when sending text strings to localization vendors. Content buried…6 years back I posted the Simplest Way to Load CSS Asynchronously to document a hack we’d been using for at least 6 years prior to that. The use case for this hack is to load CSS files asynchronously, something that HTML itself still does not support, even though…This article is a sponsored by DebugBear I was chatting with DebugBear’s Matt Zeunert and, in the process, he casually mentioned this thing called Tight Mode when describing how browsers fetch and prioritize resources. I wanted to nod along like I knew what he was talking about…I’ve been excited by the potential of text-box-trim, text-edge and text-box for a while. They’re in draft status at the moment, but when more browser support is available, this capability will open up some exciting possibilities for improving typesetting in the browser, as well as giving us more… It’s a little different. For one, I’m only fetching 10 items at a time. We could push that to infinity but that comes with a performance tax, not to mention I have no way of organizing the items for them to be grouped and filtered. Maybe that’ll be a future enhancement! The Chris demo provided the bones and it does most of the heavy lifting. The “tough” parts were square-pegging the thing into a WordPress block architecture and then getting transients going. This is my first time working with transients, so I thought I’d share the relevant code and pick it apart. function fetch_and_store_data() { $transient_key = 'fetched_data'; $cached_data = get_transient($transient_key); if ($cached_data) { return new WP_REST_Response($cached_data, 200); } $response = wp_remote_get('https://feedbin.com/starred/a22c4101980b055d688e90512b083e8d.xml'); if (is_wp_error($response)) { return new WP_REST_Response('Error fetching data', 500); } $body = wp_remote_retrieve_body($response); $data = simplexml_load_string($body, 'SimpleXMLElement', LIBXML_NOCDATA); $json_data = json_encode($data); $array_data = json_decode($json_data, true); $items = []; foreach ($array_data['channel']['item'] as $item) { $items[] = [ 'title' =\u003e $item['title'], 'link' =\u003e $item['link'], 'pubDate' =\u003e $item['pubDate'], 'description' =\u003e $item['description'], ]; } set_transient($transient_key, $items, 12 * HOUR_IN_SECONDS); return new WP_REST_Response($items, 200); } add_action('rest_api_init', function () { register_rest_route('custom/v1', '/fetch-data', [ 'methods' =\u003e 'GET', 'callback' =\u003e 'fetch_and_store_data', ]); }); Could this be refactored and written more efficiently? All signs point to yes. But here’s how I grokked it: function fetch_and_store_data() { } The function’s name can be anything. Naming is hard. The first two variables: $transient_key = 'fetched_data'; $cached_data = get_transient($transient_key); The $transient_key is simply a name that identifies the transient when we set it and get it. In fact, the $cached_data is the getter so that part’s done. Check! I only want the $cached_data if it exists, so there’s a check for that: if ($cached_data) { return new WP_REST_Response($cached_data, 200); } This also establishes a new response from the WordPress REST API, which is where the data is cached. Rather than pull the data directly from Feedbin, I’m pulling it and caching it in the REST API. This way, CORS is no longer an issue being that the starred items are now locally stored on my own domain. That’s where the wp_remote_get() function comes in to form that response from Feedbin as the origin: $response = wp_remote_get('https://feedbin.com/starred/a22c4101980b055d688e90512b083e8d.xml'); Similarly, I decided to throw an error if there’s no $response. That means there’s no freshly $cached_data and that’s something I want to know right away. if (is_wp_error($response)) { return new WP_REST_Response('Error fetching data', 500); } The bulk of the work is merely parsing the XML data I get back from Feedbin to JSON. This scours the XML and loops through each item to get its title, link, publish date, and description: $body = wp_remote_retrieve_body($response); $data = simplexml_load_string($body, 'SimpleXMLElement', LIBXML_NOCDATA); $json_data = json_encode($data); $array_data = json_decode($json_data, true); $items = []; foreach ($array_data['channel']['item'] as $item) { $items[] = [ 'title' =\u003e $item['title'], 'link' =\u003e $item['link'], 'pubDate' =\u003e $item['pubDate'], 'description' =\u003e $item['description'], ]; } “Description” is a loaded term. It could be the full body of a post or an excerpt — we don’t know until we get it! So, I’m splicing and trimming it in the block’s Edit component to stub it at no more than 50 words. There’s a little risk there because I’m rendering the HTML I get back from the API. Security, yes. But there’s also the chance I render an open tag without its closing counterpart, muffing up my layout. I know there are libraries to address that but I’m keeping things simple for now. Now it’s time to set the transient once things have been fetched and parsed: set_transient($transient_key, $items, 12 * HOUR_IN_SECONDS); The WordPress docs are great at explaining the set_transient() function. It takes three arguments, the first being the $transient_key that was named earlier to identify which transient is getting set. The other two: $value: This is the object we’re storing in the named transient. That’s the $items object handling all the parsing. $expiration: How long should this transient last? It wouldn’t be transient if it lingered around forever, so we set an amount of time expressed in seconds. Mine lingers for 12 hours before it expires and then updates the next time a visitor hits the page. OK, time to return the items from the REST API as a new response: return new WP_REST_Response($items, 200); That’s it! Well, at least for setting and getting the transient. The next thing I realized I needed was a custom REST API endpoint to call the data. I really had to lean on the WordPress docs to get this going: add_action('rest_api_init', function () { register_rest_route('custom/v1', '/fetch-data', [ 'methods' =\u003e 'GET', 'callback' =\u003e 'fetch_and_store_data', ]); }); That’s where I struggled most and felt like this all took wayyyyy too much time. Well, that and sparring with the block itself. I find it super hard to get the front and back end components to sync up and, honestly, a lot of that code looks super redundant if you were to scope it out. That’s another story altogether. Enjoy reading what we’re reading! I put a page together that pulls in the 10 most recent items with a link to subscribe to the full feed.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382660",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eChris \u003ca href=\"https://css-tricks.com/pages-for-likes/\"\u003ewrote about “Likes” pages\u003c/a\u003e a long while back. The idea is rather simple: “Like” an item in your RSS reader and display it in a feed of other liked items. The little example Chris made is still really good.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThere were two things Chris noted at the time. One was that he used a public CORS proxy that he wouldn’t use in a production environment. Good idea to nix that, security and all. The other was that he’d consider using WordPress transients to fetch and cache the data to work around CORS.\u003c/p\u003e\n\n\n\n\u003cp\u003eI decided to do that! The result is this WordPress block I can drop right in here. I’ll plop it in a \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e to keep things brief.\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open Starred Feed      \u003c/summary\u003e\n  \n\n\u003cdiv\u003e\u003carticle\u003e\u003cdiv\u003e\u003cp\u003e\n  In my post \u003ca href=\"https://adrianroselli.com/2025/01/brief-note-on-figure-and-figcaption-support.html\" rel=\"noopener\"\u003e\u003ccite\u003eBrief Note on Figure and Figcaption Support\u003c/cite\u003e\u003c/a\u003e I demonstrate how, when encountering a figure with a screen reader, you won’t hear \u003cem\u003eeverything\u003c/em\u003e announced at once:\n\u003c/p\u003e\n\n\u003cblockquote\u003e\n  No screen reader combo treats the caption as the accessible name nor accessible description, not even for an…\u003c/blockquote\u003e\u003c/div\u003e\u003c/article\u003e\u003carticle\u003e\u003cdiv\u003e\t\u003cp\u003eOne of the running jokes and/or discussion I am sick and tired of is people belittling \u003cspan\u003eHTML\u003c/span\u003e. Yes, \u003cspan\u003eHTML\u003c/span\u003e is not a programming language. No, \u003cspan\u003eHTML\u003c/span\u003e should not just be a compilation target. Learning \u003cspan\u003eHTML\u003c/span\u003e is a solid investment and not hard to do.\u003c/p\u003e\n\n\t\u003cp\u003eI am not…\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003carticle\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003e\u003cstrong\u003eLink\u003c/strong\u003e on 1/14/2025\u003c/span\u003e\u003c/p\u003e\u003ch2\u003e\u003ca href=\"https://nerdy.dev/open-props-ui?utm_source=rss\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eOpen Props UI\u003c/a\u003e\u003c/h2\u003e\u003c/div\u003e\u003c/article\u003e\u003carticle\u003e\u003c/article\u003e\u003carticle\u003e\u003cdiv\u003e\u003cp\u003eWe can use the \u003ccode\u003e:empty\u003c/code\u003e pseudo-class as a way to style elements on your webpage that are empty.\u003c/p\u003e\n\u003cp\u003eYou might wonder why you’d want to style something that’s empty. Let’s say you’re creating a todo list.\u003c/p\u003e\n\u003cp\u003eYou want to put your todo items in a list, but what about when you don’t…\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003carticle\u003e\u003cdiv\u003e\u003cp\u003eBack in 2023, I \u003ca href=\"https://meyerweb.com/eric/thoughts/2023/02/08/css-wish-list-2023/\" rel=\"noopener\"\u003ebelatedly jumped on the bandwagon\u003c/a\u003e of people posting their CSS wish lists for the coming year.  This year I’m doing all that again, less belatedly! (I didn’t do it last year because I couldn’t even.  Get it?)\u003c/p\u003e\n\n\u003cp\u003eI started this post by looking at what I…\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003carticle\u003e\u003cdiv\u003e\u003cp\u003e\nIt does, actually. In Firefox. Sometimes.\n\u003c/p\u003e\n\n\u003cp\u003e\nA major risk of using ARIA to define text content is it typically gets overlooked in translation. Automated translation services often do not capture it. Those who pay for localization services frequently miss content in ARIA attributes when sending text strings to localization vendors.\n\u003c/p\u003e\n\n\u003cp\u003e\nContent buried…\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003carticle\u003e\u003cdiv\u003e\u003cp\u003e6 years back I posted \u003ca href=\"https://www.filamentgroup.com/lab/load-css-simpler/\" rel=\"noopener\"\u003ethe Simplest Way to Load CSS Asynchronously\u003c/a\u003e to document a hack we’d been using for at least 6 years prior to that. The use case for this hack is to load CSS files asynchronously, something that HTML itself still does not support, even though…\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003carticle\u003e\u003cdiv\u003e\u003cp\u003eThis article is a sponsored by \u003ca href=\"https://www.debugbear.com/?utm_campaign=sm-7\" rel=\"noopener\"\u003eDebugBear\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI was chatting with \u003ca href=\"https://www.debugbear.com?utm_campaign=sm-7\" rel=\"noopener\"\u003eDebug\u003c/a\u003e\u003ca href=\"https://www.debugbear.com\" rel=\"noopener\"\u003eB\u003c/a\u003e\u003ca href=\"https://www.debugbear.com\" rel=\"noopener\"\u003eear\u003c/a\u003e’s Matt Zeunert and, in the process, he casually mentioned this thing called \u003cstrong\u003eTight Mode\u003c/strong\u003e when describing how browsers fetch and prioritize resources. I wanted to nod along like I knew what he was talking about…\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003carticle\u003e\u003cdiv\u003e\u003cp\u003eI’ve been excited by the potential of \u003ccode\u003etext-box-trim\u003c/code\u003e, \u003ccode\u003etext-edge\u003c/code\u003e and \u003ccode\u003etext-box\u003c/code\u003e for a while. They’re in \u003ca href=\"https://drafts.csswg.org/css-inline-3/#leading-trim\" rel=\"noopener\"\u003edraft status\u003c/a\u003e at the moment, but when more \u003ca href=\"https://caniuse.com/?search=text-box-trim\" rel=\"noopener\"\u003ebrowser support\u003c/a\u003e is available, this capability will open up some exciting possibilities for improving typesetting in the browser, as well as giving us more…\u003c/p\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eIt’s a little different. For one, I’m only fetching 10 items at a time. We could push that to infinity but that comes with a performance tax, not to mention I have no way of organizing the items for them to be grouped and filtered. Maybe that’ll be a future enhancement!\u003c/p\u003e\n\n\n\n\u003cp\u003eThe Chris demo provided the bones and it does most of the heavy lifting. The “tough” parts were square-pegging the thing into a WordPress block architecture and then getting transients going. This is my first time working with transients, so I thought I’d share the relevant code and pick it apart.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction fetch_and_store_data() {\n  $transient_key = \u0026#39;fetched_data\u0026#39;;\n  $cached_data = get_transient($transient_key);\n\n  if ($cached_data) {\n    return new WP_REST_Response($cached_data, 200);\n  }\n\n  $response = wp_remote_get(\u0026#39;https://feedbin.com/starred/a22c4101980b055d688e90512b083e8d.xml\u0026#39;);\n  if (is_wp_error($response)) {\n    return new WP_REST_Response(\u0026#39;Error fetching data\u0026#39;, 500);\n  }\n\n  $body = wp_remote_retrieve_body($response);\n  $data = simplexml_load_string($body, \u0026#39;SimpleXMLElement\u0026#39;, LIBXML_NOCDATA);\n  $json_data = json_encode($data);\n  $array_data = json_decode($json_data, true);\n\n  $items = [];\n  foreach ($array_data[\u0026#39;channel\u0026#39;][\u0026#39;item\u0026#39;] as $item) {\n    $items[] = [\n      \u0026#39;title\u0026#39; =\u0026gt; $item[\u0026#39;title\u0026#39;],\n      \u0026#39;link\u0026#39; =\u0026gt; $item[\u0026#39;link\u0026#39;],\n      \u0026#39;pubDate\u0026#39; =\u0026gt; $item[\u0026#39;pubDate\u0026#39;],\n      \u0026#39;description\u0026#39; =\u0026gt; $item[\u0026#39;description\u0026#39;],\n    ];\n  }\n\n  set_transient($transient_key, $items, 12 * HOUR_IN_SECONDS);\n\n  return new WP_REST_Response($items, 200);\n}\n\nadd_action(\u0026#39;rest_api_init\u0026#39;, function () {\n  register_rest_route(\u0026#39;custom/v1\u0026#39;, \u0026#39;/fetch-data\u0026#39;, [\n    \u0026#39;methods\u0026#39; =\u0026gt; \u0026#39;GET\u0026#39;,\n    \u0026#39;callback\u0026#39; =\u0026gt; \u0026#39;fetch_and_store_data\u0026#39;,\n  ]);\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCould this be refactored and written more efficiently? All signs point to yes. But here’s how I grokked it:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction fetch_and_store_data() {\n\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe function’s name can be anything. Naming is hard. The first two variables:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$transient_key = \u0026#39;fetched_data\u0026#39;;\n$cached_data = get_transient($transient_key);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003e$transient_key\u003c/code\u003e is simply a name that identifies the transient when we set it and get it. In fact, the \u003ccode\u003e$cached_data\u003c/code\u003e is the getter so that part’s done. Check!\u003c/p\u003e\n\n\n\n\u003cp\u003eI only want the \u003ccode\u003e$cached_data\u003c/code\u003e if it exists, so there’s a check for that:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eif ($cached_data) {\n  return new WP_REST_Response($cached_data, 200);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis also establishes a new response from the WordPress REST API, which is where the data is cached. Rather than pull the data directly from Feedbin, I’m pulling it and caching it in the REST API. This way, CORS is no longer an issue being that the starred items are now locally stored on my own domain. That’s where the \u003ccode\u003ewp_remote_get()\u003c/code\u003e function comes in to form that response from Feedbin as the origin:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$response = wp_remote_get(\u0026#39;https://feedbin.com/starred/a22c4101980b055d688e90512b083e8d.xml\u0026#39;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSimilarly, I decided to throw an error if there’s no \u003ccode\u003e$response\u003c/code\u003e. That means there’s no freshly \u003ccode\u003e$cached_data\u003c/code\u003e and that’s something I want to know right away.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eif (is_wp_error($response)) {\n  return new WP_REST_Response(\u0026#39;Error fetching data\u0026#39;, 500);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe bulk of the work is merely parsing the XML data I get back from Feedbin to JSON. This scours the XML and loops through each item to get its title, link, publish date, and description:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$body = wp_remote_retrieve_body($response);\n$data = simplexml_load_string($body, \u0026#39;SimpleXMLElement\u0026#39;, LIBXML_NOCDATA);\n$json_data = json_encode($data);\n$array_data = json_decode($json_data, true);\n\n$items = [];\nforeach ($array_data[\u0026#39;channel\u0026#39;][\u0026#39;item\u0026#39;] as $item) {\n  $items[] = [\n    \u0026#39;title\u0026#39; =\u0026gt; $item[\u0026#39;title\u0026#39;],\n    \u0026#39;link\u0026#39; =\u0026gt; $item[\u0026#39;link\u0026#39;],\n    \u0026#39;pubDate\u0026#39; =\u0026gt; $item[\u0026#39;pubDate\u0026#39;],\n    \u0026#39;description\u0026#39; =\u0026gt; $item[\u0026#39;description\u0026#39;],\n  ];\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e“Description” is a loaded term. It could be the full body of a post or an excerpt — we don’t know until we get it! So, I’m splicing and trimming it in the block’s \u003ccode\u003eEdit\u003c/code\u003e component to stub it at no more than 50 words. There’s a little risk there because I’m rendering the HTML I get back from the API. Security, yes. But there’s also the chance I render an open tag without its closing counterpart, muffing up my layout. I know there are libraries to address that but I’m keeping things simple for now.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow it’s time to set the transient once things have been fetched and parsed:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eset_transient($transient_key, $items, 12 * HOUR_IN_SECONDS);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe WordPress docs are great at explaining the \u003ccode\u003e\u003ca href=\"https://developer.wordpress.org/reference/functions/set_transient/\" rel=\"noopener\"\u003eset_transient()\u003c/a\u003e\u003c/code\u003e function. It takes three arguments, the first being the \u003ccode\u003e$transient_key\u003c/code\u003e that was named earlier to identify which transient is getting set. The other two:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e$value\u003c/code\u003e:\u003c/strong\u003e This is the object we’re storing in the named transient. That’s the \u003ccode\u003e$items\u003c/code\u003e object handling all the parsing.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e$expiration\u003c/code\u003e:\u003c/strong\u003e How long should this transient last? It wouldn’t be transient if it lingered around forever, so we set an amount of time expressed in seconds. Mine lingers for 12 hours before it expires and then updates the next time a visitor hits the page.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eOK, time to \u003ccode\u003ereturn\u003c/code\u003e the items from the REST API as a new response:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ereturn new WP_REST_Response($items, 200);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat’s it! Well, at least for setting and getting the transient. The next thing I realized I needed was a custom REST API endpoint to call the data. I really had to lean on the \u003ca href=\"https://developer.wordpress.org/rest-api/extending-the-rest-api/adding-custom-endpoints/\" rel=\"noopener\"\u003eWordPress docs\u003c/a\u003e to get this going:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"PHP\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eadd_action(\u0026#39;rest_api_init\u0026#39;, function () {\n  register_rest_route(\u0026#39;custom/v1\u0026#39;, \u0026#39;/fetch-data\u0026#39;, [\n    \u0026#39;methods\u0026#39; =\u0026gt; \u0026#39;GET\u0026#39;,\n    \u0026#39;callback\u0026#39; =\u0026gt; \u0026#39;fetch_and_store_data\u0026#39;,\n  ]);\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat’s where I struggled most and felt like this all took wayyyyy too much time. Well, that and sparring with the block itself. I find it super hard to get the front and back end components to sync up and, honestly, a lot of that code looks super redundant if you were to scope it out. That’s another story altogether.\u003c/p\u003e\n\n\n\n\u003cp\u003eEnjoy reading what we’re reading! \u003ca href=\"https://css-tricks.com/picks/\"\u003eI put a page together\u003c/a\u003e that pulls in the 10 most recent items with a link to subscribe to \u003ca href=\"https://feedbin.com/starred/a22c4101980b055d688e90512b083e8d.xml\" rel=\"noopener\"\u003ethe full feed\u003c/a\u003e.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-01-21T07:21:32-07:00",
  "modifiedTime": "2025-01-21T07:21:37-07:00"
}
