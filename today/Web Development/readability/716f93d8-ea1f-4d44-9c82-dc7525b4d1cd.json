{
  "id": "716f93d8-ea1f-4d44-9c82-dc7525b4d1cd",
  "title": "Scroll Driven Animations Notebook",
  "link": "https://css-tricks.com/scroll-driven-animations-notebook/",
  "description": "Adam’s such a mad scientist with CSS. He’s been putting together a series of “notebooks” that make it easy for him to demo code. He’s got one for gradient text, one for a comparison slider, another for accordions… Scroll Driven Animations Notebook originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Thu, 13 Feb 2025 13:24:29 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Links",
    "Scroll Driven Animation"
  ],
  "byline": "Geoff Graham",
  "length": 1750,
  "excerpt": "Adam's such a mad scientist with CSS. He's been putting together a series of \"notebooks\" that make it easy for him to demo code. He's got one for gradient",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Adam’s such a mad scientist with CSS. He’s been putting together a series of “notebooks” that make it easy for him to demo code. He’s got one for gradient text, one for a comparison slider, another for accordions, and the list goes on. One of his latest is a notebook of scroll-driven animations. They’re all impressive as heck, as you’d expect from Adam. But it’s the simplicity of the first few examples that I love most. Here I am recreating two of the effects in a CodePen, which you’ll want to view in the latest version of Chrome for support. This is a perfect example of how a scroll-driven animation is simply a normal CSS animation, just tied to scrolling instead of the document’s default timeline, which starts on render. We’re talking about the same set of keyframes: @keyframes slide-in-from-left { from { transform: translateX(-100%); } } All we have to do to trigger scrolling is call the animation and assign it to the timeline: li { animation: var(--animation) linear both; animation-timeline: view(); } Notice how there’s no duration set on the animation. There’s no need to since we’re dealing with a scroll-based timeline instead of the document’s timeline. We’re using the view() function instead of the scroll() function, which acts sort of like JavsScript’s Intersection Observer where scrolling is based on where the element comes into view and intersects the scrollable area. It’s easy to drop your jaw and ooo and ahh all over Adam’s demos, especially as they get more advanced. But just remember that we’re still working with plain ol’ CSS animations. The difference is the timeline they’re on. Direct Link →",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/384634",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eAdam’s such a mad scientist with CSS. He’s been putting together a series of \u003ca href=\"https://nerdy.dev/notebook/index.html\" rel=\"noopener\"\u003e“notebooks”\u003c/a\u003e that make it easy for him to demo code. He’s got one for \u003ca href=\"https://nerdy.dev/notebook/gradient-text.html\" rel=\"noopener\"\u003egradient text\u003c/a\u003e, one for a \u003ca href=\"https://nerdy.dev/notebook/comparison-slider.html\" rel=\"noopener\"\u003ecomparison slider\u003c/a\u003e, another for \u003ca href=\"https://nerdy.dev/notebook/accordion.html\" rel=\"noopener\"\u003eaccordions\u003c/a\u003e, and the list goes on.\u003c/p\u003e\n\n\n\n\u003cp\u003eOne of his latest is a \u003ca href=\"https://nerdy.dev/notebook/scroll-driven-animations.html\" rel=\"noopener\"\u003enotebook of scroll-driven animations\u003c/a\u003e. They’re all impressive as heck, as you’d expect from Adam. But it’s the simplicity of the first few examples that I love most. Here I am recreating two of the effects in a CodePen, which you’ll want to view in the latest version of Chrome for support.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis is a perfect example of how a scroll-driven animation is simply a normal CSS animation, just tied to scrolling instead of the document’s default timeline, which starts on render. We’re talking about the same set of keyframes:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@keyframes slide-in-from-left {\n  from {\n    transform: translateX(-100%);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAll we have to do to trigger scrolling is call the animation and assign it to the timeline:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli {\n  animation: var(--animation) linear both;\n  animation-timeline: view();\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNotice how there’s no duration set on the animation. There’s no need to since we’re dealing with a scroll-based timeline instead of the document’s timeline. We’re using the \u003ccode\u003eview()\u003c/code\u003e function instead of the \u003ccode\u003escroll()\u003c/code\u003e function, which acts sort of like JavsScript’s Intersection Observer where scrolling is based on where the element comes into view and intersects the scrollable area.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt’s easy to drop your jaw and ooo and ahh all over Adam’s demos, especially as they get more advanced. But just remember that we’re still working with plain ol’ CSS animations. The difference is the timeline they’re on.\u003c/p\u003e\n\n                      \u003cp\u003e     \n                              \u003ca href=\"https://nerdy.dev/notebook/scroll-driven-animations.html\"\u003e\n                  Direct Link →\n                \u003c/a\u003e\n              \n                          \u003c/p\u003e\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-02-13T06:24:29-07:00",
  "modifiedTime": "2025-02-13T06:24:31-07:00"
}
