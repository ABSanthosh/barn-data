{
  "id": "c2bf3f24-317d-47e3-8ab3-3b8df7a05673",
  "title": "Detect Caps Lock with JavaScript",
  "link": "https://davidwalsh.name/detect-caps-lock",
  "description": "Anyone is capable of having their caps lock key on at any given time without realizing so. Users can easily spot unwanted caps lock when typing in most inputs, but when using a password input, the problem isn’t so obvious. That leads to the user’s password being incorrect, which is an annoyance. Ideally developers could […] The post Detect Caps Lock with JavaScript appeared first on David Walsh Blog.",
  "author": "David Walsh",
  "published": "Tue, 06 Feb 2024 10:33:10 +0000",
  "source": "https://davidwalsh.name/feed",
  "categories": [
    "JavaScript"
  ],
  "byline": "David Walsh",
  "length": 2511,
  "excerpt": "Anyone is capable of having their caps lock key on at any given time without realizing so. Users can easily spot unwanted caps lock when typing in most",
  "siteName": "David Walsh Blog",
  "favicon": "https://davidwalsh.name/wp-content/themes/punky/images/favicon-144.png",
  "text": "Anyone is capable of having their caps lock key on at any given time without realizing so. Users can easily spot unwanted caps lock when typing in most inputs, but when using a password input, the problem isn't so obvious. That leads to the user's password being incorrect, which is an annoyance. Ideally developers could let the user know their caps lock key is activated. To detect if a user has their keyboard's caps lock turn on, we'll employ KeyboardEvent's getModifierState method: document.querySelector('input[type=password]').addEventListener('keyup', function (keyboardEvent) { const capsLockOn = keyboardEvent.getModifierState('CapsLock'); if (capsLockOn) { // Warn the user that their caps lock is on? } }); I'd never seen getModifierState used before, so I explored the W3C documentation to discover other useful values: dictionary EventModifierInit : UIEventInit { boolean ctrlKey = false; boolean shiftKey = false; boolean altKey = false; boolean metaKey = false; boolean modifierAltGraph = false; boolean modifierCapsLock = false; boolean modifierFn = false; boolean modifierFnLock = false; boolean modifierHyper = false; boolean modifierNumLock = false; boolean modifierScrollLock = false; boolean modifierSuper = false; boolean modifierSymbol = false; boolean modifierSymbolLock = false; }; getModifierState provides a wealth of insight as to the user's keyboard during key-centric events. I wish I had known about getModifier earlier in my career! Recent FeaturesSend Text Messages with PHPKids these days, I tell ya.  All they care about is the technology.  The video games.  The bottled water.  Oh, and the texting, always the texting.  Back in my day, all we had was...OK, I had all of these things too.  But I still don't get...Incredible DemosCSS @supportsFeature detection via JavaScript is a client side best practice and for all the right reasons, but unfortunately that same functionality hasn't been available within CSS.  What we end up doing is repeating the same properties multiple times with each browser prefix.  Yuck.  Another thing we...GitHub-Style Sliding LinksGitHub seems to change a lot but not really change at all, if that makes any sense; the updates come often but are always fairly small. I spotted one of the most recent updates on the pull request page. Links to long branch...",
  "image": "https://davidwalsh.name/wp-content/themes/punky/images/logo.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cmain id=\"main\"\u003e\u003carticle itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\n\u003cp\u003eAnyone is capable of having their caps lock key on at any given time without realizing so.  Users can easily spot unwanted caps lock when typing in most inputs, but when using a \u003ccode\u003epassword\u003c/code\u003e \u003ccode\u003einput\u003c/code\u003e, the problem isn\u0026#39;t so obvious.  That leads to the user\u0026#39;s password being incorrect, which is an annoyance.  Ideally developers could let the user know their caps lock key is activated.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo detect if a user has their keyboard\u0026#39;s caps lock turn on, we\u0026#39;ll employ \u003ccode\u003eKeyboardEvent\u003c/code\u003e\u0026#39;s \u003ccode\u003egetModifierState\u003c/code\u003e method:\u003c/p\u003e\n\n\n\n\u003cpre\u003edocument.querySelector(\u0026#39;input[type=password]\u0026#39;).addEventListener(\u0026#39;keyup\u0026#39;, function (keyboardEvent) {\n    const capsLockOn = keyboardEvent.getModifierState(\u0026#39;CapsLock\u0026#39;);\n    if (capsLockOn) {\n        // Warn the user that their caps lock is on?\n    }\n});\n\u003c/pre\u003e\n\n\n\n\u003cp\u003eI\u0026#39;d never seen \u003ccode\u003egetModifierState\u003c/code\u003e used before, so I explored the \u003ca href=\"https://w3c.github.io/uievents/#event-modifier-initializers\"\u003eW3C documentation\u003c/a\u003e to discover other useful values:\u003c/p\u003e\n\n\n\n\u003cpre\u003edictionary EventModifierInit : UIEventInit {\n  boolean ctrlKey = false;\n  boolean shiftKey = false;\n  boolean altKey = false;\n  boolean metaKey = false;\n\n  boolean modifierAltGraph = false;\n  boolean modifierCapsLock = false;\n  boolean modifierFn = false;\n  boolean modifierFnLock = false;\n  boolean modifierHyper = false;\n  boolean modifierNumLock = false;\n  boolean modifierScrollLock = false;\n  boolean modifierSuper = false;\n  boolean modifierSymbol = false;\n  boolean modifierSymbolLock = false;\n};\n\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003egetModifierState\u003c/code\u003e provides a wealth of insight as to the user\u0026#39;s keyboard during key-centric events.  I wish I had known about \u003ccode\u003egetModifier\u003c/code\u003e earlier in my career!\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\n    \n    \n    \u003cp\u003e\u003ca href=\"https://requestmetrics.com/?utm_source=davidwalsh\"\u003e\n        \u003cimg src=\"https://davidwalsh.name/demo/rm_perf_banner-728.min.svg\" alt=\"Request Metrics real user monitoring\" loading=\"lazy\" width=\"728\" height=\"90\"/\u003e\n    \u003c/a\u003e\n    \u003c/p\u003e\n    \u003cp\u003e\u003ca href=\"https://requestmetrics.com/?utm_source=davidwalsh\"\u003e\n        \u003cimg src=\"https://davidwalsh.name/demo/rm_perf_block_300.min.svg\" alt=\"Request Metrics real user monitoring\" loading=\"lazy\" width=\"300\" height=\"250\"/\u003e\n    \u003c/a\u003e\n    \u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003c/article\u003e\n\n\u003cdiv\u003e\n  \n    \n    \n\u003cp\u003e\u003ca href=\"https://requestmetrics.com/?utm_source=davidwalsh\"\u003e\n    \u003cimg src=\"https://davidwalsh.name/demo/rm_perf_banner-728.min.svg\" alt=\"Request Metrics real user monitoring\" loading=\"lazy\" width=\"728\" height=\"90\"/\u003e\n  \u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://requestmetrics.com/?utm_source=davidwalsh\"\u003e\n    \u003cimg src=\"https://davidwalsh.name/demo/rm_perf_block_300.min.svg\" alt=\"Request Metrics real user monitoring\" loading=\"lazy\" width=\"300\" height=\"250\"/\u003e\n  \u003c/a\u003e\n\u003c/p\u003e\n\n  \n\n\u003c/div\u003e\n\n\n\u003cdiv\u003e\u003ch2\u003e\u003ca href=\"https://davidwalsh.name/tutorials/features\"\u003eRecent Features\u003ci\u003e\u003c/i\u003e\u003c/a\u003e\u003c/h2\u003e\u003cul\u003e\u003cli data-url=\"https://davidwalsh.name/send-text-message\" itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\u003cspan itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg data-src=\"https://davidwalsh.name/demo/sms-text.png?preview\" alt=\"Send Text Messages with PHP\" src=\"https://davidwalsh.name/demo/sms-text.png?preview\"/\u003e\u003c/span\u003e\u003cdiv\u003e\u003ch3 itemprop=\"name\"\u003e\u003ca href=\"https://davidwalsh.name/send-text-message\" itemprop=\"url\"\u003eSend Text Messages with PHP\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eKids these days, I tell ya.  All they care about is the technology.  The video games.  The bottled water.  Oh, and the texting, always the texting.  Back in my day, all we had was...OK, I had all of these things too.  But I still don\u0026#39;t get...\u003c/p\u003e\u003c/div\u003e\u003c/li\u003e\u003cli data-url=\"https://davidwalsh.name/twitter-cards\" itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\u003cspan itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg data-src=\"https://davidwalsh.name/demo/twitter-card.jpg?preview\" alt=\"How to Create a Twitter Card\" src=\"https://davidwalsh.name/demo/twitter-card.jpg?preview\"/\u003e\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2\u003e\u003ca href=\"https://davidwalsh.name/tutorials/demos\"\u003eIncredible Demos\u003ci\u003e\u003c/i\u003e\u003c/a\u003e\u003c/h2\u003e\u003cul\u003e\u003cli data-url=\"https://davidwalsh.name/css-supports\" itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\u003cspan itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg data-src=\"/demo/css3logo250.jpg?preview\" alt=\"CSS @supports\" src=\"https://davidwalsh.name/demo/css3logo250.jpg?preview\"/\u003e\u003c/span\u003e\u003cdiv\u003e\u003ch3 itemprop=\"name\"\u003e\u003ca href=\"https://davidwalsh.name/css-supports\" itemprop=\"url\"\u003eCSS @supports\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFeature detection via JavaScript is a client side best practice and for all the right reasons, but unfortunately that same functionality hasn\u0026#39;t been available within CSS.  What we end up doing is repeating the same properties multiple times with each browser prefix.  Yuck.  Another thing we...\u003c/p\u003e\u003c/div\u003e\u003c/li\u003e\u003cli data-url=\"https://davidwalsh.name/sliding-links\" itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\u003cspan itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg data-src=\"/demo/github250.png?preview\" alt=\"GitHub-Style Sliding Links\" src=\"https://davidwalsh.name/demo/github250.png?preview\"/\u003e\u003c/span\u003e\u003cdiv\u003e\u003ch3 itemprop=\"name\"\u003e\u003ca href=\"https://davidwalsh.name/sliding-links\" itemprop=\"url\"\u003eGitHub-Style Sliding Links\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eGitHub seems to change a lot but not really change at all, if that makes any sense;  the updates come often but are always fairly small.  I spotted one of the most recent updates on the pull request page.  Links to long branch...\u003c/p\u003e\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/main\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-02-06T10:33:10Z",
  "modifiedTime": "2024-02-04T21:33:23Z"
}
