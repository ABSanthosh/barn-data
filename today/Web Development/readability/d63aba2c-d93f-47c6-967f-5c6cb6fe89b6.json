{
  "id": "d63aba2c-d93f-47c6-967f-5c6cb6fe89b6",
  "title": "The File System Observer API origin trial",
  "link": "https://developer.chrome.com/blog/file-system-observer?hl=en",
  "description": "The Chrome team is experimenting with a new File System Observer API that informs developers of changes to the file system.",
  "author": "",
  "published": "Thu, 14 Nov 2024 08:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 7823,
  "excerpt": "The Chrome team is experimenting with a new File System Observer API that informs developers of changes to the file system.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v870e399c64f7c43c99a3043db4b3a74327bb93d0914e84a0c3dba90bbfd67625/chrome/images/favicon.png",
  "text": "Stay organized with collections Save and categorize content based on your preferences. The File System Access API and the Origin Private File System API both allow developers to access files and directories on the user's device. The former lets developers read and write to the regular, user-visible file system, and the latter opens up a special, hidden from the user file system that is private to the origin of each site and that comes with certain performance advantages. The way developers interact with files and directories in both cases is through FileSystemHandle objects, more concretely, FileSystemFileHandle for files, and FileSystemDirectoryHandle for directories. Up until now, being informed of changes to a file or directory in either of the file systems required some form of polling and comparing the lastModified timestamp or even the file contents itself. The File System Observer API, in origin trial from Chrome 129, changes that, and lets developers be alerted automatically when changes happen. This guide explains how it works and how to try the feature. Use cases Use the File System Observer API in apps that need to be informed of possible file system changes as soon as they happen. Web-based integrated development environments (IDEs) that show a representation of a project's file system tree. Apps that synchronize file system changes with a server. For example, a SQLite database file. Apps that need to notify the main thread of file system changes from a worker or another tab. Apps that observe a directory of resources, for example, to automatically optimize images. Experiences that profit from hot-reloading, like HTML-based slide decks where a reload gets triggered by a file change. How to use the File System Observer API Feature detection To see if the File System Observer API is supported, run a feature test as in the following example. if ('FileSystemObserver' in self) { // The File System Observer API is supported. } Initialize a file system observer Initialize a File System Observer by calling new FileSystemObserver(), providing it a callback function as an argument. const observer = new FileSystemObserver(callback); Start observing a file or directory To begin observing a file or directory, call the asynchronous observe() method of the FileSystemObserver instance. Provide this method the FileSystemHandle of the selected file or directory as an argument. When observing a directory, there's an optional options argument that lets you choose if you want to be informed of changes to the directory recursively (that is, for the directory itself and all contained subdirectories and files). The default option is to only observe the directory itself and the directly contained files. // Observe a file. await observer.observe(fileHandle); // Observe a directory. await observer.observe(directoryHandle); // Observe a directory recursively. await observer.observe(directoryHandle, {recursive: true}); The callback function When changes to the file system happen, a callback function is called with the file system change records and the observer itself as its arguments. You can use the observer argument to, for example, disconnect the observer (see Stop observing the file system) when the files you're interested in are all deleted. const callback = (records, observer) =\u003e { for (const record of records) { console.log('Change detected', record); } }; The file system change record Each file system change record has the following structure. All fields are read-only. root (a FileSystemHandle): The handle passed to the FileSystemObserver.observe() function. changedHandle (a FileSystemHandle): The handle affected by the file system change. This field will be null for \"errored\", \"unknown\", and \"disappeared\" type events. To see which file or directory has disappeared, use relativePathComponents. relativePathComponents (an Array): The path of the changedHandle relative to the root. type (a String): The type of the change. The following types are possible: \"appeared\": The file or directory was created or got moved into the root. \"disappeared\": The file or directory was deleted or got moved out of the root. \"modified\": The file or directory was modified. \"moved\": The file or directory was moved within the root. \"unknown\": This indicates that zero or more events were missed. Developers should poll the watched directory in response to this. \"errored\": The observation is no longer valid. In this case, you may want to stop observing the file system. This value will also be sent when the maximum limit of per-origin observations is reached. This limit is dependent on the operating system and not known beforehand. If this happens, the site may decide to retry, though there's no guarantee that the operating system has freed up enough resources. Another case for when this value will be sent is when the observed handle (that is, the root of the observation) is deleted or moved. In this case, first, the \"disappeared\" event is sent, followed by an \"errored\" event, indicating that the observation is no longer valid. Finally, this event is sent when permission to the directory or file handle is removed. relativePathMovedFrom (an Array, optional): The former location of a moved handle. Available only when the type is \"moved\". Stop observing a file or directory To stop observing a FileSystemHandle, call the unobserve() method, passing it the handle as an argument. observer.unobserve(fileHandle); Stop observing the file system To stop observing the file system, disconnect the FileSystemObserver instance as follows. observer.disconnect(); Try the API To test the File System Observer API locally, set the #file-system-observer flag in about:flags. To test the API with real users, sign up for the origin trial and follow the instructions as per the guide Chrome Origin Trials. The origin trial will run from Chrome 129 (September 11, 2024) to Chrome 134 (February 26, 2025). Demo You can see the File System Observer API in action in the embedded demo. Check out the source code or remix the demo code on Glitch. The demo randomly creates, deletes, or modifies files in an observed directory and logs its activity in the upper part of the app window. It then logs the changes as they occur in the lower part of the app window. If you read this on a browser that doesn't support the File System Observer API, see a screenshot of the demo. Feedback If you have feedback on the shape of the File System Observer API, comment on Issue #123 in the WHATWG/fs repository. Relevant links Explainer TAG review Mozilla Standards Position WebKit Standards Position ChromeStatus Chromium bug Acknowledgements This document was reviewed by Daseul Lee, Nathan Memmott, Etienne NoÃ«l, and Rachel Andrew. Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-08-20 UTC. [[[\"Easy to understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved my problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing the information I need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / too many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out of date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2024-08-20 UTC.\"],[],[]]",
  "image": "https://developer.chrome.com/static/blog/file-system-observer/thumb.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\n    \u003cdevsite-progress type=\"indeterminate\" id=\"app-progress\"\u003e\u003c/devsite-progress\u003e\n  \n    \u003csection\u003e\n      \u003cdevsite-cookie-notification-bar\u003e\u003c/devsite-cookie-notification-bar\u003e\u003cdevsite-header role=\"banner\"\u003e\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\u003c/devsite-header\u003e\n      \n      \u003csection id=\"gc-wrapper\"\u003e\n        \u003cmain role=\"main\" has-sidebar=\"\"\u003e\n          \n          \n          \n          \n          \u003cdevsite-content\u003e\n            \n              \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003carticle\u003e\n  \n  \n  \n  \n  \n\n  \n  \n    \n  \u003cdevsite-feature-tooltip ack-key=\"AckCollectionsBookmarkTooltipDismiss\" analytics-category=\"Site-Wide Custom Events\" analytics-action-show=\"Callout Profile displayed\" analytics-action-close=\"Callout Profile dismissed\" analytics-label=\"Create Collection Callout\" dismiss-button=\"true\" id=\"devsite-collections-dropdown\" dismiss-button-text=\"Dismiss\" close-button-text=\"Got it\"\u003e\n\n    \n    \u003cdevsite-bookmark\u003e\u003c/devsite-bookmark\u003e\n\n    \u003cspan slot=\"popout-heading\"\u003e\n      \n      Stay organized with collections\n    \u003c/span\u003e\n    \u003cspan slot=\"popout-contents\"\u003e\n      \n      Save and categorize content based on your preferences.\n    \u003c/span\u003e\n  \u003c/devsite-feature-tooltip\u003e\n  \n  \n\n  \u003cdevsite-toc depth=\"2\" devsite-toc-embedded=\"\"\u003e\n  \u003c/devsite-toc\u003e\n  \n    \n  \n\n  \n\n\n\n\n\n\n\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Thomas Steiner\" src=\"https://web.dev/images/authors/thomassteiner.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://developer.chrome.com/docs/capabilities/web-apis/file-system-access\"\u003eFile System Access API\u003c/a\u003e and the \u003ca href=\"https://web.dev/articles/origin-private-file-system\"\u003eOrigin Private File System API\u003c/a\u003e both allow developers to access files and directories on the user\u0026#39;s device. The former lets developers read and write to the regular, user-visible file system, and the latter opens up a special, hidden from the user file system that is private to the \u003ca href=\"https://developer.mozilla.org/docs/Glossary/Origin\"\u003eorigin\u003c/a\u003e of each site and that comes with certain performance advantages. The way developers interact with files and directories in both cases is through \u003ca href=\"https://developer.mozilla.org/docs/Web/API/FileSystemHandle\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemHandle\u003c/code\u003e\u003c/a\u003e objects, more concretely, \u003ca href=\"https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemFileHandle\u003c/code\u003e\u003c/a\u003e for files, and \u003ca href=\"https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemDirectoryHandle\u003c/code\u003e\u003c/a\u003e for directories. Up until now, being informed of changes to a file or directory in either of the file systems required some form of polling and comparing the \u003ccode translate=\"no\" dir=\"ltr\"\u003elastModified\u003c/code\u003e timestamp or even the file contents itself.\u003c/p\u003e\n\n\u003cp\u003eThe File System Observer API, in origin trial from Chrome 129, changes that, and lets developers be alerted automatically when changes happen. This guide explains how it works and how to try the feature.\u003c/p\u003e\n\n\u003ch2 id=\"use_cases\" data-text=\"Use cases\" tabindex=\"-1\"\u003eUse cases\u003c/h2\u003e\n\n\u003cp\u003eUse the File System Observer API in apps that need to be informed of possible file system changes as soon as they happen.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eWeb-based integrated development environments (IDEs) that show a representation of a project\u0026#39;s file system tree.\u003c/li\u003e\n\u003cli\u003eApps that synchronize file system changes with a server. For example, a SQLite database file.\u003c/li\u003e\n\u003cli\u003eApps that need to notify the main thread of file system changes from a worker or another tab.\u003c/li\u003e\n\u003cli\u003eApps that observe a directory of resources, for example, to automatically optimize images.\u003c/li\u003e\n\u003cli\u003eExperiences that profit from hot-reloading, like HTML-based slide decks where a reload gets triggered by a file change.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"how_to_use_the_file_system_observer_api\" data-text=\"How to use the File System Observer API\" tabindex=\"-1\"\u003eHow to use the File System Observer API\u003c/h2\u003e\n\n\u003ch3 id=\"feature_detection\" data-text=\"Feature detection\" tabindex=\"-1\"\u003eFeature detection\u003c/h3\u003e\n\n\u003cp\u003eTo see if the File System Observer API is supported, run a feature test as in the following example.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eif (\u0026#39;FileSystemObserver\u0026#39; in self) {\n  // The File System Observer API is supported.\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"initialize_a_file_system_observer\" data-text=\"Initialize a file system observer\" tabindex=\"-1\"\u003eInitialize a file system observer\u003c/h3\u003e\n\n\u003cp\u003eInitialize a File System Observer by calling \u003ccode translate=\"no\" dir=\"ltr\"\u003enew FileSystemObserver()\u003c/code\u003e, providing it a \u003ca href=\"#the-callback-function\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003ecallback\u003c/code\u003e function\u003c/a\u003e as an argument.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003econst observer = new FileSystemObserver(callback);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"start_observing_a_file_or_directory\" data-text=\"Start observing a file or directory\" tabindex=\"-1\"\u003eStart observing a file or directory\u003c/h3\u003e\n\n\u003cp\u003eTo begin observing a file or directory, call the asynchronous \u003ccode translate=\"no\" dir=\"ltr\"\u003eobserve()\u003c/code\u003e method of the \u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemObserver\u003c/code\u003e instance. Provide this method the \u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemHandle\u003c/code\u003e of the selected file or directory as an argument. When observing a directory, there\u0026#39;s an optional \u003ccode translate=\"no\" dir=\"ltr\"\u003eoptions\u003c/code\u003e argument that lets you choose if you want to be informed of changes to the directory recursively (that is, for the directory itself and \u003cem\u003eall\u003c/em\u003e contained subdirectories and files). The default option is to only observe the directory itself and the directly contained files.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e// Observe a file.\nawait observer.observe(fileHandle);\n// Observe a directory.\nawait observer.observe(directoryHandle);\n// Observe a directory recursively.\nawait observer.observe(directoryHandle, {recursive: true});\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"the-callback-function\" data-text=\"The callback function\" tabindex=\"-1\"\u003eThe callback function\u003c/h3\u003e\n\n\u003cp\u003eWhen changes to the file system happen, a callback function is called with the \u003ca href=\"#the-file-system-change-record\"\u003efile system change \u003ccode translate=\"no\" dir=\"ltr\"\u003erecords\u003c/code\u003e\u003c/a\u003e and the \u003ccode translate=\"no\" dir=\"ltr\"\u003eobserver\u003c/code\u003e itself as its arguments. You can use the \u003ccode translate=\"no\" dir=\"ltr\"\u003eobserver\u003c/code\u003e argument to, for example, disconnect the observer (see \u003ca href=\"#stop-observing-the-file-system\"\u003eStop observing the file system\u003c/a\u003e) when the files you\u0026#39;re interested in are all deleted.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003econst callback = (records, observer) =\u0026gt; {\n  for (const record of records) {\n    console.log(\u0026#39;Change detected\u0026#39;, record);\n  }\n};\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id=\"the-file-system-change-record\" data-text=\"The file system change record\" tabindex=\"-1\"\u003eThe file system change record\u003c/h4\u003e\n\n\u003cp\u003eEach file system change record has the following structure. All fields are read-only.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eroot\u003c/code\u003e (a \u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemHandle\u003c/code\u003e): The handle passed to the \u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemObserver.observe()\u003c/code\u003e function.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003echangedHandle\u003c/code\u003e (a \u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemHandle\u003c/code\u003e): The handle affected by the file system change. This field will be \u003ccode translate=\"no\" dir=\"ltr\"\u003enull\u003c/code\u003e for \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;errored\u0026#34;\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;unknown\u0026#34;\u003c/code\u003e, and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;disappeared\u0026#34;\u003c/code\u003e type events. To see which file or directory has disappeared, use \u003ccode translate=\"no\" dir=\"ltr\"\u003erelativePathComponents\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003erelativePathComponents\u003c/code\u003e (an \u003ccode translate=\"no\" dir=\"ltr\"\u003eArray\u003c/code\u003e): The path of the \u003ccode translate=\"no\" dir=\"ltr\"\u003echangedHandle\u003c/code\u003e relative to the \u003ccode translate=\"no\" dir=\"ltr\"\u003eroot\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003etype\u003c/code\u003e (a \u003ccode translate=\"no\" dir=\"ltr\"\u003eString\u003c/code\u003e): The type of the change. The following types are possible:\n\u003cul\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;appeared\u0026#34;\u003c/code\u003e: The file or directory was created or got moved into the \u003ccode translate=\"no\" dir=\"ltr\"\u003eroot\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;disappeared\u0026#34;\u003c/code\u003e: The file or directory was deleted or got moved out of the \u003ccode translate=\"no\" dir=\"ltr\"\u003eroot\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;modified\u0026#34;\u003c/code\u003e: The file or directory was modified.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;moved\u0026#34;\u003c/code\u003e: The file or directory was moved within the \u003ccode translate=\"no\" dir=\"ltr\"\u003eroot\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;unknown\u0026#34;\u003c/code\u003e: This indicates that zero or more events were missed. Developers should poll the watched directory in response to this.\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;errored\u0026#34;\u003c/code\u003e: The observation is no longer valid. In this case, you may want to \u003ca href=\"#stop-observing-the-file-system\"\u003estop observing the file system\u003c/a\u003e. This value will also be sent when the maximum limit of per-origin observations is reached. This limit is dependent on the operating system and not known beforehand. If this happens, the site may decide to retry, though there\u0026#39;s no guarantee that the operating system has freed up enough resources. Another case for when this value will be sent is when the observed handle (that is, the root of the observation) is deleted or moved. In this case, first, the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;disappeared\u0026#34;\u003c/code\u003e event is sent, followed by an \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;errored\u0026#34;\u003c/code\u003e event, indicating that the observation is no longer valid. Finally, this event is sent when permission to the directory or file handle is removed.\u003c/li\u003e\n\u003c/ul\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003erelativePathMovedFrom\u003c/code\u003e (an \u003ccode translate=\"no\" dir=\"ltr\"\u003eArray\u003c/code\u003e, optional): The former location of a moved handle. Available only when the \u003ccode translate=\"no\" dir=\"ltr\"\u003etype\u003c/code\u003e is \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;moved\u0026#34;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"stop_observing_a_file_or_directory\" data-text=\"Stop observing a file or directory\" tabindex=\"-1\"\u003eStop observing a file or directory\u003c/h3\u003e\n\n\u003cp\u003eTo stop observing a \u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemHandle\u003c/code\u003e, call the \u003ccode translate=\"no\" dir=\"ltr\"\u003eunobserve()\u003c/code\u003e method, passing it the handle as an argument.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eobserver.unobserve(fileHandle);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"stop-observing-the-file-system\" data-text=\"Stop observing the file system\" tabindex=\"-1\"\u003eStop observing the file system\u003c/h3\u003e\n\n\u003cp\u003eTo stop observing the file system, disconnect the \u003ccode translate=\"no\" dir=\"ltr\"\u003eFileSystemObserver\u003c/code\u003e instance as follows.\u003c/p\u003e\n\u003cpre translate=\"no\" dir=\"ltr\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eobserver.disconnect();\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"try_the_api\" data-text=\"Try the API\" tabindex=\"-1\"\u003eTry the API\u003c/h2\u003e\n\n\u003cp\u003eTo test the File System Observer API locally, set the \u003ccode translate=\"no\" dir=\"ltr\"\u003e#file-system-observer\u003c/code\u003e flag in \u003ccode translate=\"no\" dir=\"ltr\"\u003eabout:flags\u003c/code\u003e. To test the API with real users, \u003ca href=\"https://developer.chrome.com/origintrials#/view_trial/59109745109237761\" target=\"_blank\"\u003esign up\u003c/a\u003e for the origin trial and follow the instructions as per the guide \u003ca href=\"https://developer.chrome.com/docs/web-platform/origin-trials\"\u003eChrome Origin Trials\u003c/a\u003e. The origin trial will run from Chrome 129 (September 11, 2024) to Chrome 134 (February 26, 2025).\u003c/p\u003e\n\n\u003ch2 id=\"demo\" data-text=\"Demo\" tabindex=\"-1\"\u003eDemo\u003c/h2\u003e\n\n\u003cp\u003eYou can see the File System Observer API in action in the embedded \u003ca href=\"https://file-system-observer.glitch.me/\"\u003edemo\u003c/a\u003e. Check out the \u003ca href=\"https://glitch.com/edit/#!/file-system-observer?path=observer.js\"\u003esource code\u003c/a\u003e or remix the demo code on Glitch. The demo randomly creates, deletes, or modifies files in an observed directory and logs its activity in the upper part of the app window. It then logs the changes as they occur in the lower part of the app window. If you read this on a browser that doesn\u0026#39;t support the File System Observer API, see a \u003ca href=\"https://developer.chrome.com/static/blog/file-system-observer/fso.png\"\u003escreenshot\u003c/a\u003e of the demo.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"feedback\" data-text=\"Feedback\" tabindex=\"-1\"\u003eFeedback\u003c/h2\u003e\n\n\u003cp\u003eIf you have feedback on the shape of the File System Observer API, comment on \u003ca href=\"https://github.com/whatwg/fs/issues/123\"\u003eIssue #123 in the WHATWG/fs\u003c/a\u003e repository.\u003c/p\u003e\n\n\u003ch2 id=\"relevant_links\" data-text=\"Relevant links\" tabindex=\"-1\"\u003eRelevant links\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/whatwg/fs/blob/main/proposals/FileSystemObserver.md\"\u003eExplainer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/w3ctag/design-reviews/issues/868\"\u003eTAG review\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/mozilla/standards-positions/issues/942\"\u003eMozilla Standards Position\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/WebKit/standards-positions/issues/291\"\u003eWebKit Standards Position\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://chromestatus.com/feature/4622243656630272\"\u003eChromeStatus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://g-issues.chromium.org/issues/40105284\"\u003eChromium bug\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2 id=\"acknowledgements\" data-text=\"Acknowledgements\" tabindex=\"-1\"\u003eAcknowledgements\u003c/h2\u003e\n\n\u003cp\u003eThis document was reviewed by \u003ca href=\"https://www.linkedin.com/in/daseul-lee-8297314b/\"\u003eDaseul Lee\u003c/a\u003e, \u003ca href=\"https://www.linkedin.com/in/nathan-memmott\"\u003eNathan Memmott\u003c/a\u003e, \u003ca href=\"https://www.linkedin.com/in/enoel19/\"\u003eEtienne NoÃ«l\u003c/a\u003e, and \u003ca href=\"https://rachelandrew.co.uk/\"\u003eRachel Andrew\u003c/a\u003e.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\n\n  \n\n  \n    \n    \n      \n    \u003cdevsite-thumb-rating position=\"footer\"\u003e\n    \u003c/devsite-thumb-rating\u003e\n  \n       \n    \n    \n  \n\n  \n  \n\u003c/article\u003e\n\n\n\u003cdevsite-content-footer\u003e\n  \u003cp\u003eExcept as otherwise noted, the content of this page is licensed under the \u003ca href=\"https://creativecommons.org/licenses/by/4.0/\"\u003eCreative Commons Attribution 4.0 License\u003c/a\u003e, and code samples are licensed under the \u003ca href=\"https://www.apache.org/licenses/LICENSE-2.0\"\u003eApache 2.0 License\u003c/a\u003e. For details, see the \u003ca href=\"https://developers.google.com/site-policies\"\u003eGoogle Developers Site Policies\u003c/a\u003e. Java is a registered trademark of Oracle and/or its affiliates.\u003c/p\u003e\n  \u003cp\u003eLast updated 2024-08-20 UTC.\u003c/p\u003e\n\u003c/devsite-content-footer\u003e\n\n\n\u003cdevsite-notification\u003e\n\u003c/devsite-notification\u003e\n\n\n  \n\u003cp\u003e\n  \n  \n    \u003ctemplate\u003e\n      [[[\u0026#34;Easy to understand\u0026#34;,\u0026#34;easyToUnderstand\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Solved my problem\u0026#34;,\u0026#34;solvedMyProblem\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherUp\u0026#34;,\u0026#34;thumb-up\u0026#34;]],[[\u0026#34;Missing the information I need\u0026#34;,\u0026#34;missingTheInformationINeed\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Too complicated / too many steps\u0026#34;,\u0026#34;tooComplicatedTooManySteps\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Out of date\u0026#34;,\u0026#34;outOfDate\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Samples / code issue\u0026#34;,\u0026#34;samplesCodeIssue\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherDown\u0026#34;,\u0026#34;thumb-down\u0026#34;]],[\u0026#34;Last updated 2024-08-20 UTC.\u0026#34;],[],[]]\n    \u003c/template\u003e\n  \n\u003c/p\u003e\n            \n          \u003c/devsite-content\u003e\n        \u003c/main\u003e\n        \n        \n        \n        \u003cdevsite-panel\u003e\u003c/devsite-panel\u003e\n        \n      \u003c/section\u003e\u003c/section\u003e\n    \u003cdevsite-sitemask\u003e\u003c/devsite-sitemask\u003e\n    \u003cdevsite-snackbar\u003e\u003c/devsite-snackbar\u003e\n    \u003cdevsite-tooltip\u003e\u003c/devsite-tooltip\u003e\n    \u003cdevsite-heading-link\u003e\u003c/devsite-heading-link\u003e\n    \u003cdevsite-analytics\u003e\n      \n        \n\n      \n    \u003c/devsite-analytics\u003e\n    \n      \u003cdevsite-badger\u003e\u003c/devsite-badger\u003e\n    \n    \n    \n    \u003cdevsite-a11y-announce\u003e\u003c/devsite-a11y-announce\u003e\n  \n\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
