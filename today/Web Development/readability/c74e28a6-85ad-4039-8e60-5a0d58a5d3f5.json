{
  "id": "c74e28a6-85ad-4039-8e60-5a0d58a5d3f5",
  "title": "Puppeteer Support for the Cross-Browser WebDriver BiDi Standard",
  "link": "https://hacks.mozilla.org/2023/12/puppeteer-webdriver-bidi/",
  "description": "Puppeteer now supports the next-generation, cross-browser WebDriver BiDi standard. This new protocol makes it easy for web developers to write automated tests that work across multiple browser engines. The post Puppeteer Support for the Cross-Browser WebDriver BiDi Standard appeared first on Mozilla Hacks - the Web developer blog.",
  "author": "James Graham",
  "published": "Tue, 12 Dec 2023 16:14:03 +0000",
  "source": "https://hacks.mozilla.org/feed/",
  "categories": [
    "Developer Tools",
    "Featured Article",
    "Firefox",
    "firefox",
    "Standards",
    "Testing",
    "Tools",
    "webDriver"
  ],
  "byline": "By James Graham",
  "length": 4668,
  "excerpt": "Puppeteer now supports the next-gen cross-browser WebDriver BiDi standard, simplifying testing for web developers across browser engines.",
  "siteName": "Mozilla Hacks – the Web developer blog",
  "favicon": "",
  "text": "We are pleased to share that Puppeteer now supports the next-generation, cross-browser WebDriver BiDi standard. This new protocol makes it easy for web developers to write automated tests that work across multiple browser engines. How Do I Use Puppeteer With Firefox? The WebDriver BiDi protocol is supported starting with Puppeteer v21.6.0. When calling puppeteer.launch pass in \"firefox\" as the product option, and \"webDriverBiDi\" as the protocol option: const browser = await puppeteer.launch({   product: 'firefox',   protocol: 'webDriverBiDi', }) You can also use the \"webDriverBiDi\" protocol when testing in Chrome, reflecting the fact that WebDriver BiDi offers a single standard for modern cross-browser automation. In the future we expect \"webDriverBiDi\" to become the default protocol when using Firefox in Puppeteer. Doesn’t Puppeteer Already Support Firefox? Puppeteer has had experimental support for Firefox based on a partial re-implementation of the proprietary Chrome DevTools Protocol (CDP). This approach had the advantage that it worked without significant changes to the existing Puppeteer code. However the CDP implementation in Firefox is incomplete and has significant technical limitations. In addition, the CDP protocol itself is not designed to be cross browser, and undergoes frequent breaking changes, making it unsuitable as a long-term solution for cross-browser automation. To overcome these problems, we’ve worked with the WebDriver Working Group at the W3C to create a standard automation protocol that meets the needs of modern browser automation clients: this is WebDriver BiDi. For more details on the protocol design and how it compares to the classic HTTP-based WebDriver protocol, see our earlier posts. As the standardization process has progressed, the Puppeteer team has added a WebDriver BiDi backend in Puppeteer, and provided feedback on the specification to ensure that it meets the needs of Puppeteer users, and that the protocol design enables existing CDP-based tooling to easily transition to WebDriver BiDi. The result is a single protocol based on open standards that can drive both Chrome and Firefox in Puppeteer. Are All Puppeteer Features Supported? Not yet; WebDriver BiDi is still a work in progress, and doesn’t yet cover the full feature set of Puppeteer. Compared to the Chrome+CDP implementation, there are some feature gaps, including support for accessing the cookie store, network request interception, some emulation features, and permissions. These features are actively being standardized and will be integrated as soon as they become available. For Firefox, the only missing feature compared to the Firefox+CDP implementation is cookie access. In addition, WebDriver BiDi already offers improvements, including better support for multi-process Firefox, which is essential for testing some websites. More information on the complete set of supported APIs can be found in the Puppeteer documentation, and as new WebDriver-BiDi features are enabled in Gecko we’ll publish details on the Firefox Developer Experience blog. Nevertheless, we believe that the WebDriver-based Firefox support in Puppeteer has reached a level of quality which makes it suitable for many real automation scenarios. For example at Mozilla we have successfully ported our Puppeteer tests for pdf.js from Firefox+CDP to Firefox+WebDriver BiDi. Is Firefox’s CDP Support Going Away? We currently don’t have a specific timeline for removing CDP support. However, maintaining multiple protocols is not a good use of our resources, and we expect WebDriver BiDi to be the future of remote automation in Firefox. If you are using the CDP support outside of the context of Puppeteer, we’d love to hear from you (see below), so that we can understand your use cases, and help transition to WebDriver BiDi. Where Can I Provide Feedback? For any issues you experience when porting Puppeteer tests to BiDi, please open issues in the Puppeteer issue tracker, unless you can verify the bug is in the Firefox implementation, in which case please file a bug on Bugzilla. If you are currently using CDP with Firefox, please join the #webdriver matrix channel so that we can discuss your use case and requirements, and help you solve any problems you encounter porting your code to WebDriver BiDi. Update: The Puppeteer team have published “Harness the Power of WebDriver BiDi: Chrome and Firefox Automation with Puppeteer“. Software engineer focused on maintaining a healthy open web. Web-platform-tests core team member. More articles by James Graham…",
  "image": "https://hacks.mozilla.org/wp-content/uploads/2023/12/pptr-fx.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle role=\"article\"\u003e\n    \u003cp\u003eWe are pleased to share that \u003ca href=\"https://pptr.dev/\"\u003ePuppeteer\u003c/a\u003e now supports the next-generation, cross-browser \u003ca href=\"https://w3c.github.io/webdriver-bidi/\"\u003eWebDriver BiDi standard\u003c/a\u003e. This new protocol makes it easy for web developers to write automated tests that work across multiple browser engines.\u003c/p\u003e\n\u003ch2\u003eHow Do I Use Puppeteer With Firefox?\u003c/h2\u003e\n\u003cp\u003eThe WebDriver BiDi protocol is supported starting with \u003ca href=\"https://pptr.dev/webdriver-bidi\"\u003ePuppeteer v21.6.0\u003c/a\u003e. When calling \u003ccode\u003epuppeteer.launch\u003c/code\u003e pass in \u003ccode\u003e\u0026#34;firefox\u0026#34;\u003c/code\u003e as the product option, and \u003ccode\u003e\u0026#34;webDriverBiDi\u0026#34;\u003c/code\u003e as the protocol option:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst browser = await puppeteer.launch({\n  product: \u0026#39;firefox\u0026#39;,\n  protocol: \u0026#39;webDriverBiDi\u0026#39;,\n})\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can also use the \u003ccode\u003e\u0026#34;webDriverBiDi\u0026#34;\u003c/code\u003e protocol when testing in Chrome, reflecting the fact that WebDriver BiDi offers a single standard for modern cross-browser automation.\u003c/p\u003e\n\u003cp\u003eIn the future we expect \u003ccode\u003e\u0026#34;webDriverBiDi\u0026#34;\u003c/code\u003e to become the default protocol when using Firefox in Puppeteer.\u003c/p\u003e\n\u003ch2\u003eDoesn’t Puppeteer Already Support Firefox?\u003c/h2\u003e\n\u003cp\u003ePuppeteer has had experimental support for Firefox based on a partial re-implementation of the proprietary \u003ca href=\"https://chromedevtools.github.io/devtools-protocol/\"\u003eChrome DevTools Protocol\u003c/a\u003e (CDP). This approach had the advantage that it worked without significant changes to the existing Puppeteer code. However the CDP implementation in Firefox is incomplete and has significant technical limitations. In addition, the CDP protocol itself is not designed to be cross browser, and undergoes frequent breaking changes, making it unsuitable as a long-term solution for cross-browser automation.\u003c/p\u003e\n\u003cp\u003eTo overcome these problems, we’ve worked with the WebDriver Working Group at the W3C to create a standard automation protocol that meets the needs of modern browser automation clients: this is WebDriver BiDi. For more details on the protocol design and how it compares to the classic HTTP-based WebDriver protocol, see our \u003ca href=\"https://hacks.mozilla.org/2020/12/cross-browser-testing-part-1-web-app-testing-today/\"\u003eearlier\u003c/a\u003e \u003ca href=\"https://hacks.mozilla.org/2021/01/improving-cross-browser-testing-part-2-new-automation-features-in-firefox-nightly/\"\u003eposts\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs the standardization process has progressed, the Puppeteer team has added a WebDriver BiDi backend in Puppeteer, and provided feedback on the specification to ensure that it meets the needs of Puppeteer users, and that the protocol design enables existing CDP-based tooling to easily transition to WebDriver BiDi. The result is a single protocol based on open standards that can drive both Chrome and Firefox in Puppeteer.\u003c/p\u003e\n\u003ch2\u003eAre All Puppeteer Features Supported?\u003c/h2\u003e\n\u003cp\u003eNot \u003ca href=\"https://puppeteer.github.io/ispuppeteerwebdriverbidiready/\"\u003eyet\u003c/a\u003e; WebDriver BiDi is still a work in progress, and doesn’t yet cover the full feature set of Puppeteer.\u003c/p\u003e\n\u003cp\u003eCompared to the Chrome+CDP implementation, there are some feature gaps, including support for accessing the cookie store, network request interception, some emulation features, and permissions. These features are actively being standardized and will be integrated as soon as they become available. For Firefox, the only missing feature compared to the Firefox+CDP implementation is cookie access. In addition, WebDriver BiDi already offers improvements, including better support for multi-process Firefox, which is essential for testing some websites. More information on the complete set of supported APIs can be found in the \u003ca href=\"https://pptr.dev/webdriver-bidi\"\u003ePuppeteer documentation\u003c/a\u003e, and as new WebDriver-BiDi features are enabled in Gecko we’ll publish details on the \u003ca href=\"https://fxdx.dev/\"\u003eFirefox Developer Experience blog\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNevertheless, we believe that the WebDriver-based Firefox support in Puppeteer has reached a level of quality which makes it suitable for many real automation scenarios. For example at Mozilla we have successfully \u003ca href=\"https://github.com/mozilla/pdf.js/pull/17172\"\u003eported\u003c/a\u003e our Puppeteer tests for \u003ca href=\"https://mozilla.github.io/pdf.js/\"\u003epdf.js\u003c/a\u003e from Firefox+CDP to Firefox+WebDriver BiDi.\u003c/p\u003e\n\u003ch2\u003eIs Firefox’s CDP Support Going Away?\u003c/h2\u003e\n\u003cp\u003eWe currently don’t have a specific timeline for removing CDP support. However, maintaining multiple protocols is not a good use of our resources, and we expect WebDriver BiDi to be the future of remote automation in Firefox. If you are using the CDP support outside of the context of Puppeteer, we’d love to hear from you (see below), so that we can understand your use cases, and help transition to WebDriver BiDi.\u003c/p\u003e\n\u003ch2\u003eWhere Can I Provide Feedback?\u003c/h2\u003e\n\u003cp\u003eFor any issues you experience when porting Puppeteer tests to BiDi, please open issues in the \u003ca href=\"https://github.com/puppeteer/puppeteer/issues/new/choose\"\u003ePuppeteer issue tracker\u003c/a\u003e, unless you can verify the bug is in the Firefox implementation, in which case please \u003ca href=\"https://bugzilla.mozilla.org/enter_bug.cgi?product=Remote%20Protocol\u0026amp;component=WebDriver%20BiDi\"\u003efile a bug on Bugzilla\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you are currently using CDP with Firefox, please join the \u003ca href=\"https://matrix.to/#/#webdriver:mozilla.org\"\u003e#webdriver matrix channel\u003c/a\u003e so that we can discuss your use case and requirements, and help you solve any problems you encounter porting your code to WebDriver BiDi.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate\u003c/strong\u003e: The Puppeteer team have published “\u003ca href=\"https://developer.chrome.com/blog/puppeteer-webdriver-bidi-2023\"\u003eHarness the Power of WebDriver BiDi: Chrome and Firefox Automation with Puppeteer\u003c/a\u003e“.\u003c/p\u003e\n    \u003csection\u003e\n                                \n                      \u003cp\u003eSoftware engineer focused on maintaining a healthy open web. Web-platform-tests core team member.\u003c/p\u003e\n                                \u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/author/jgrahammozilla-com/\"\u003eMore articles by James Graham…\u003c/a\u003e\u003c/p\u003e\n                  \u003c/section\u003e\n  \u003c/article\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
