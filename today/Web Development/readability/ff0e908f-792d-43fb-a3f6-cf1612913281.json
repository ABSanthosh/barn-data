{
  "id": "ff0e908f-792d-43fb-a3f6-cf1612913281",
  "title": "Extract a Number from a String with JavaScript",
  "link": "https://davidwalsh.name/javascript-extract-string",
  "description": "User input from HTML form fields is generally provided to JavaScript as a string. We’ve lived with that fact for decades but sometimes developers need to extract numbers from that string. There are multiple ways to get those numbers but let’s rely on regular expressions to extract those numbers! To employ a regular expression to […] The post Extract a Number from a String with JavaScript appeared first on David Walsh Blog.",
  "author": "David Walsh",
  "published": "Tue, 16 Jan 2024 11:48:41 +0000",
  "source": "https://davidwalsh.name/feed",
  "categories": [
    "JavaScript",
    "Quick Tips"
  ],
  "byline": "David Walsh",
  "length": 2027,
  "excerpt": "User input from HTML form fields is generally provided to JavaScript as a string. We've lived with that fact for decades but sometimes developers need to",
  "siteName": "David Walsh Blog",
  "favicon": "https://davidwalsh.name/wp-content/themes/punky/images/favicon-144.png",
  "text": "User input from HTML form fields is generally provided to JavaScript as a string. We've lived with that fact for decades but sometimes developers need to extract numbers from that string. There are multiple ways to get those numbers but let's rely on regular expressions to extract those numbers! To employ a regular expression to get a number within a string, we can use \\d+: const string = \"x12345david\"; const [match] = string.match(/(\\d+)/); match; // 12345 Regular expressions are capable of really powerful operations within JavaScript; this practice is one of the easier operations. Converting the number using a Number() wrapper will give you the number as a Number type. Recent FeaturesCSS @supportsFeature detection via JavaScript is a client side best practice and for all the right reasons, but unfortunately that same functionality hasn't been available within CSS.  What we end up doing is repeating the same properties multiple times with each browser prefix.  Yuck.  Another thing we...JavaScript Promise APIWhile synchronous code is easier to follow and debug, async is generally better for performance and flexibility. Why \"hold up the show\" when you can trigger numerous requests at once and then handle them when each is ready?  Promises are becoming a big part of the JavaScript world...Incredible DemosiPhone-Style Passwords Using MooTools PassSharkEvery once in a while I come across a plugin that blows me out of the water and the most recent culprit is PassShark: a MooTools plugin that duplicates the iPhone's method of showing/hiding the last character in a password field. This gem of...Hot Effect: MooTools Drag Opacity As you should already know, the best visual features of a website are usually held within the most subtle of details. One simple trick that usually makes a big different is the use of opacity and fading. Another awesome MooTools functionality is...",
  "image": "https://davidwalsh.name/wp-content/themes/punky/images/logo.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cmain id=\"main\"\u003e\u003carticle itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\n\u003cp\u003eUser input from HTML form fields is generally provided to JavaScript as a string.  We\u0026#39;ve lived with that fact for decades but sometimes developers need to extract numbers from that string.  There are multiple ways to get those numbers but let\u0026#39;s rely on regular expressions to extract those numbers!\u003c/p\u003e\n\n\n\n\u003cp\u003eTo employ a regular expression to get a number within a string, we can use \u003ccode\u003e\\d+\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre\u003econst string = \u0026#34;x12345david\u0026#34;;\nconst [match] = string.match(/(\\d+)/);\nmatch; // 12345\n\u003c/pre\u003e\n\n\n\n\u003cp\u003eRegular expressions are capable of really powerful operations within JavaScript; this practice is one of the easier operations.  Converting the number using a \u003ccode\u003eNumber()\u003c/code\u003e wrapper will give you the number as a \u003ccode\u003eNumber\u003c/code\u003e type.\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\n    \n    \n    \u003cp\u003e\u003ca href=\"https://requestmetrics.com/?utm_source=davidwalsh\"\u003e\n        \u003cimg src=\"https://davidwalsh.name/demo/rm_perf_banner-728.min.svg\" alt=\"Request Metrics real user monitoring\" loading=\"lazy\" width=\"728\" height=\"90\"/\u003e\n    \u003c/a\u003e\n    \u003c/p\u003e\n    \u003cp\u003e\u003ca href=\"https://requestmetrics.com/?utm_source=davidwalsh\"\u003e\n        \u003cimg src=\"https://davidwalsh.name/demo/rm_perf_block_300.min.svg\" alt=\"Request Metrics real user monitoring\" loading=\"lazy\" width=\"300\" height=\"250\"/\u003e\n    \u003c/a\u003e\n    \u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\n\n\u003c/article\u003e\n\n\u003cdiv\u003e\n  \n    \n    \n\u003cp\u003e\u003ca href=\"https://requestmetrics.com/?utm_source=davidwalsh\"\u003e\n    \u003cimg src=\"https://davidwalsh.name/demo/rm_perf_banner-728.min.svg\" alt=\"Request Metrics real user monitoring\" loading=\"lazy\" width=\"728\" height=\"90\"/\u003e\n  \u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://requestmetrics.com/?utm_source=davidwalsh\"\u003e\n    \u003cimg src=\"https://davidwalsh.name/demo/rm_perf_block_300.min.svg\" alt=\"Request Metrics real user monitoring\" loading=\"lazy\" width=\"300\" height=\"250\"/\u003e\n  \u003c/a\u003e\n\u003c/p\u003e\n\n  \n\n\u003c/div\u003e\n\n\n\u003cdiv\u003e\u003ch2\u003e\u003ca href=\"https://davidwalsh.name/tutorials/features\"\u003eRecent Features\u003ci\u003e\u003c/i\u003e\u003c/a\u003e\u003c/h2\u003e\u003cul\u003e\u003cli data-url=\"https://davidwalsh.name/css-supports\" itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\u003cspan itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg data-src=\"/demo/css3logo250.jpg?preview\" alt=\"CSS @supports\" src=\"https://davidwalsh.name/demo/css3logo250.jpg?preview\"/\u003e\u003c/span\u003e\u003cdiv\u003e\u003ch3 itemprop=\"name\"\u003e\u003ca href=\"https://davidwalsh.name/css-supports\" itemprop=\"url\"\u003eCSS @supports\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eFeature detection via JavaScript is a client side best practice and for all the right reasons, but unfortunately that same functionality hasn\u0026#39;t been available within CSS.  What we end up doing is repeating the same properties multiple times with each browser prefix.  Yuck.  Another thing we...\u003c/p\u003e\u003c/div\u003e\u003c/li\u003e\u003cli data-url=\"https://davidwalsh.name/promises\" itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\u003cspan itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg data-src=\"/demo/JavaScriptListImage.png?preview\" alt=\"JavaScript Promise API\" src=\"https://davidwalsh.name/demo/JavaScriptListImage.png?preview\"/\u003e\u003c/span\u003e\u003cdiv\u003e\u003ch3 itemprop=\"name\"\u003e\u003ca href=\"https://davidwalsh.name/promises\" itemprop=\"url\"\u003eJavaScript Promise API\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWhile synchronous code is easier to follow and debug, async is generally better for performance and flexibility. Why \u0026#34;hold up the show\u0026#34; when you can trigger numerous requests at once and then handle them when each is ready?  Promises are becoming a big part of the JavaScript world...\u003c/p\u003e\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2\u003e\u003ca href=\"https://davidwalsh.name/tutorials/demos\"\u003eIncredible Demos\u003ci\u003e\u003c/i\u003e\u003c/a\u003e\u003c/h2\u003e\u003cul\u003e\u003cli data-url=\"https://davidwalsh.name/iphone-password\" itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\u003cspan itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg data-src=\"https://davidwalsh.name/demo/iphone-front.jpg?preview\" alt=\"iPhone-Style Passwords Using MooTools PassShark\" src=\"https://davidwalsh.name/demo/iphone-front.jpg?preview\"/\u003e\u003c/span\u003e\u003cdiv\u003e\u003ch3 itemprop=\"name\"\u003e\u003ca href=\"https://davidwalsh.name/iphone-password\" itemprop=\"url\"\u003eiPhone-Style Passwords Using MooTools PassShark\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eEvery once in a while I come across a plugin that blows me out of the water and the most recent culprit is PassShark:  a MooTools plugin that duplicates the iPhone\u0026#39;s method of showing/hiding the last character in a password field.  This gem of...\u003c/p\u003e\u003c/div\u003e\u003c/li\u003e\u003cli data-url=\"https://davidwalsh.name/mootools-drag-opacity\" itemscope=\"\" itemtype=\"http://schema.org/Article\"\u003e\u003cspan itemscope=\"\" itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg data-src=\"https://davidwalsh.name/demo/drag-opacity.jpg?preview\" alt=\"Hot Effect: MooTools Drag Opacity\" src=\"https://davidwalsh.name/demo/drag-opacity.jpg?preview\"/\u003e\u003c/span\u003e\u003cdiv\u003e\u003ch3 itemprop=\"name\"\u003e\u003ca href=\"https://davidwalsh.name/mootools-drag-opacity\" itemprop=\"url\"\u003eHot Effect: MooTools Drag Opacity\u003c/a\u003e\u003c/h3\u003e\u003cp\u003e\u003ca href=\"https://davidwalsh.name/demo/drag-opacity.php\"\u003e\u003c/a\u003e\n\nAs you should already know, the best visual features of a website are usually held within the most subtle of details.  One simple trick that usually makes a big different is the use of opacity and fading.  Another awesome MooTools functionality is...\u003c/p\u003e\u003c/div\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/main\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-01-16T11:48:41Z",
  "modifiedTime": "2024-03-17T19:32:58Z"
}
