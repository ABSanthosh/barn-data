{
  "id": "7f98d40b-a6d5-4df9-952b-c46ee3bcb3f8",
  "title": "Lightly Poking at the CSS if() Function in Chrome 137",
  "link": "https://css-tricks.com/lightly-poking-at-the-css-if-function-in-chrome-137/",
  "description": "The CSS if() function was recently implemented in Chrome 137, making it the first instance where we have it supported by a mainstream browser. Let's poke at it a bit at a very high level. Lightly Poking at the CSS if() Function in Chrome 137 originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Sunkanmi Fafowora",
  "published": "Tue, 24 Jun 2025 15:17:10 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "CSS functions"
  ],
  "byline": "Sunkanmi Fafowora",
  "length": 8493,
  "excerpt": "The CSS if() function was recently implemented in Chrome 137, making it the first instance where we have it supported by a mainstream browser. Let's poke at it a bit at a very high level.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "We’ve known it for a few weeks now, but the CSS if() function officially shipped in Chrome 137 version. It’s really fast development for a feature that the CSSWG resolved to add less than a year ago. We can typically expect this sort of thing — especially one that is unlike anything we currently have in CSS — to develop over a number of years before we can get our dirty hands on it. But here we are! I’m not here to debate whether if() in CSS should exist, nor do I want to answer whether CSS is a programming language; Chris already did that and definitely explained how exhausting that fun little argument can be. What I am here to do is poke at if() in these early days of support and explore what we know about it today at a pretty high level to get a feel for its syntax. We’ll poke a little harder at it in another upcoming post where we’ll look at a more heady real-world example. Yes, it’s already here! Conditional statements exist everywhere in CSS. From at-rules to the parsing and matching of every statement to the DOM, CSS has always had conditionals. And, as Lea Verou put it, every selector is essentially a conditional! What we haven’t had, however, is a way to style an element against multiple conditions in one line, and then have it return a result conditionally. The if() function is a more advanced level of conditionals, where you can manipulate and have all your conditional statements assigned to a single property. .element { color: if(style(--theme: dark): oklch(52% 0.18 140); else: oklch(65% 0.05 220)); } How does if() work? Well before Chrome implemented the feature, back in 2021 when it was first proposed, the early syntax was like this: \u003cif()\u003e = if( \u003ccontainer-query\u003e, [\u003cdeclaration-value\u003e]{1, 2} ) Now we’re looking at this instead: \u003cif()\u003e = if( [\u003cif-statement\u003e: \u003cresult\u003e]*; \u003cif-statement\u003e: \u003cresult\u003e ;? ) Where… The first \u003cif-statement\u003e represents conditions inside either style(), media(), or supports() wrapper functions. This allows us to write multiple if statements, as many as we may desire. Yes, you read that right. As many as we want! The final \u003cif-statement\u003e condition (else) is the default value when all other if statements fail. That’s the “easy” way to read the syntax. This is what’s in the spec: \u003cif()\u003e = if( [ \u003cif-branch\u003e ; ]* \u003cif-branch\u003e ;? ) \u003cif-branch\u003e = \u003cif-condition\u003e : \u003cdeclaration-value\u003e? \u003cif-condition\u003e = \u003cboolean-expr[ \u003cif-test\u003e ]\u003e | else \u003cif-test\u003e = supports( [ \u003cident\u003e : \u003cdeclaration-value\u003e ] | \u003csupports-condition\u003e ) media( \u003cmedia-feature\u003e | \u003cmedia-condition\u003e ) | style( \u003cstyle-query\u003e ) A little wordy, right? So, let’s look at an example to wrap our heads around it. Say we want to change an element’s padding depending on a given active color scheme. We would set an if() statement with a style() function inside, and that would compare a given value with something like a custom variable to output a result. All this talk sounds so complicated, so let’s jump into code: .element { padding: if(style(--theme: dark): 2rem; else: 3rem); } The example above sets the padding to 2rem… if the --theme variable is set to dark. If not, it defaults to 3rem. I know, not exactly the sort of thing you might actually use the function for, but it’s merely to illustrate the basic idea. Make the syntax clean! One thing I noticed, though, is that things can get convoluted very very fast. Imagine you have three if() statements like this: :root { --height: 12.5rem; --width: 4rem; --weight: 2rem; } .element { height: if( style(--height: 3rem): 14.5rem; style(--width: 7rem): 10rem; style(--weight: 100rem): 2rem; else: var(--height) ); } We’re only working with three statements and, I’ll be honest, it makes my eyes hurt with complexity. So, I’m anticipating if() style patterns to be developed soon or prettier versions to adopt a formatting style for this. For example, if I were to break things out to be more readable, I would likely do something like this: :root { --height: 12.5rem; --width: 4rem; --weight: 2rem; } /* This is much cleaner, don't you think? */ .element { height: if( style(--height: 3rem): 14.5rem; style(--width: 7rem): 10rem; style(--weight: 100rem): 2rem; else: var(--height) ); } Much better, right? Now, you can definitely understand what is going on at a glance. That’s just me, though. Maybe you have different ideas… and if you do, I’d love to see them in the comments. Here’s a quick demo showing multiple conditionals in CSS for this animated ball to work. The width of the ball changes based on some custom variable values set. Gentle reminder that this is only supported in Chrome 137+ at the time I’m writing this: The supports() and media() statements Think of supports() the same way you would use the @supports at-rule. In fact, they work about the same, at least conceptually: /* formal syntax for @supports */ @supports \u003csupports-condition\u003e { \u003crule-list\u003e } /* formal syntax for supports() */ supports( [ \u003cident\u003e : \u003cdeclaration-value\u003e ] | \u003csupports-condition\u003e ) The only difference here is that supports() returns a value instead of matching a block of code. But, how does this work in real code? The \u003cident\u003e: \u003cdeclaration-value\u003e you see here is, in this case, the property name: property value e.g. display: flex. Let’s say you want to check for support for the backdrop-filter property, particularly the blur() function. Typically, you can do this with @supports: /* Fallback in case the browser doesn't support backdrop-filter */ .card { backdrop-filter: unset; background-color: oklch(20% 50% 40% / 0.8); } @supports (backdrop-filter: blur(10px)) { .card { backdrop-filter: blur(10px); background-color: oklch(20% 50% 40% / 0.8); } } But, with CSS if(), we can also do this: .card { backdrop-filter: if( supports(backdrop-filter: blur(10px)): blur(10px); else: unset ); } Note: Think of unset here as a possible fallback for graceful degradation. That looks awesome, right? Multiple conditions can be checked as well for supports() and any of the supported functions. For example: .card { backdrop-filter: if( supports(backdrop-filter: blur(10px)): blur(10px); supports(backdrop-filter: invert(50%)): invert(50%); supports(backdrop-filter: hue-rotate(230deg)): hue-rotate(230deg);; else: unset ); } Now, take a look at the @media at-rule. You can compare and check for a bunch of stuff, but I’d like to keep it simple and check for whether or not a screen size is a certain width and apply styles based on that: h1 { font-size: 2rem; } @media (min-width: 768px) { h1 { font-size: 2.5rem; } } @media (min-width: 1200px) { h1 { font-size: 3rem; } } The media() wrapper works almost the same way as its at-rule counterpart. Note its syntax from the spec: /* formal syntax for @media */ @media \u003cmedia-query-list\u003e { \u003crule-list\u003e } /* formal syntax for media() */ media( \u003cmedia-feature\u003e | \u003cmedia-condition\u003e ) Notice how at the end of the day, the formal syntax (\u003cmedia-query\u003e) is the same as the syntax for the media() function. And instead of returning a block of code in @media, you’d have something like this in the CSS inline if(): h1 { font-size: if( media(width \u003e= 1200px): 3rem; media(width \u003e= 768px): 2.5rem; else: 2rem ); } Again, these are early days As of the time of this writing, only the latest update of Chrome supports if()). I’m guessing other browsers will follow suit once usage and interest come in. I have no idea when that will happen. Until then, I think it’s fun to experiment with this stuff, just as others have been doing: The What If Machine: Bringing the “Iffy” Future of CSS into the Present (Lee Meyer) How To Correctly Use if() In CSS (Temani Afif) Future-Proofing Indirect Cyclical Conditions (Roma Komarov) The new if() function in CSS has landed in the latest Chrome (Amit Merchant) Experimenting with early features is how we help CSS evolve. If you’re trying things out, consider adding your feedback to the CSSWG and Chromium. The more use cases, the better, and that will certain help make future implementations better as well. Now that we have a high-level feel for the if()syntax, we’ll poke a little harder at the function in another article where we put it up against a real-world use case. We’ll link that up when it publishes tomorrow.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/07/if-conditional-thumbnail.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eWe’ve known it for a few weeks now, but the CSS \u003ccode\u003eif()\u003c/code\u003e function \u003ca href=\"https://css-tricks.com/quick-hit-49/\"\u003eofficially shipped in Chrome 137 version\u003c/a\u003e. It’s really fast development for a feature that \u003ca href=\"https://css-tricks.com/if-css-gets-inline-conditionals/\"\u003ethe CSSWG resolved to add less than a year ago\u003c/a\u003e. We can typically expect this sort of thing — especially one that is unlike anything we currently have in CSS — to develop over a number of years before we can get our dirty hands on it. But here we are!\u003c/p\u003e\n\n\n\n\u003cp\u003eI’m not here to debate whether \u003ccode\u003eif()\u003c/code\u003e in CSS should exist, nor do I want to answer whether CSS is a programming language; \u003ca href=\"https://css-tricks.com/is-css-a-programming-language/\"\u003eChris already did that\u003c/a\u003e and definitely explained how exhausting that \u003cem\u003efun \u003c/em\u003elittle argument can be.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhat I \u003cem\u003eam\u003c/em\u003e here to do is poke at \u003ccode\u003eif()\u003c/code\u003e in these early days of support and explore what we know about it today at a pretty high level to get a feel for its syntax. We’ll poke a little harder at it in another upcoming post where we’ll look at a more heady real-world example.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"it-s-finally-here-\"\u003eYes, it’s already here!\u003c/h3\u003e\n\n\n\u003cp\u003eConditional statements exist everywhere in CSS. From at-rules to the parsing and matching of every statement to the DOM, CSS has always had conditionals. And, \u003ca href=\"https://lea.verou.me/blog/2024/css-conditionals/\" rel=\"noopener\"\u003eas Lea Verou put it\u003c/a\u003e, every selector is essentially a conditional! What we haven’t had, however, is a way to style an element against multiple conditions in one line, and then have it return a result \u003cem\u003econditionally\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eif()\u003c/code\u003e function is a more advanced level of conditionals, where you can manipulate and have all your conditional statements assigned to a single property.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: if(style(--theme: dark): oklch(52% 0.18 140); else: oklch(65% 0.05 220));\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003ch3 id=\"how-does-if-work-\"\u003eHow does \u003ccode\u003eif()\u003c/code\u003e work?\u003c/h3\u003e\n\n\n\u003cp\u003eWell before Chrome implemented the feature, back in 2021 when it was first proposed, the early syntax was like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;if()\u0026gt; = if( \u0026lt;container-query\u0026gt;, [\u0026lt;declaration-value\u0026gt;]{1, 2} )\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow we’re looking at this instead:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;if()\u0026gt; = if(\n  [\u0026lt;if-statement\u0026gt;: \u0026lt;result\u0026gt;]*;\n  \u0026lt;if-statement\u0026gt;: \u0026lt;result\u0026gt; ;?\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhere…\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe first \u003ccode\u003e\u0026lt;if-statement\u0026gt;\u003c/code\u003e represents conditions inside either \u003ccode\u003estyle()\u003c/code\u003e, \u003ccode\u003emedia()\u003c/code\u003e, or \u003ccode\u003esupports()\u003c/code\u003e wrapper functions. This allows us to write multiple if statements, as many as we may desire. Yes, you read that right. As many as we want!\u003c/li\u003e\n\n\n\n\u003cli\u003eThe final \u003ccode\u003e\u0026lt;if-statement\u0026gt;\u003c/code\u003e condition (\u003ccode\u003eelse\u003c/code\u003e) is the default value when all other if statements fail.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThat’s the “easy” way to read the syntax. This is what’s \u003ca href=\"https://www.w3.org/TR/css-values-5/#if-notation\" rel=\"noopener\"\u003ein the spec\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;if()\u0026gt; = if( [ \u0026lt;if-branch\u0026gt; ; ]* \u0026lt;if-branch\u0026gt; ;? )\n\u0026lt;if-branch\u0026gt; = \u0026lt;if-condition\u0026gt; : \u0026lt;declaration-value\u0026gt;?\n\u0026lt;if-condition\u0026gt; = \u0026lt;boolean-expr[ \u0026lt;if-test\u0026gt; ]\u0026gt; | else\n\u0026lt;if-test\u0026gt; =\n  supports( [ \u0026lt;ident\u0026gt; : \u0026lt;declaration-value\u0026gt; ] | \u0026lt;supports-condition\u0026gt; )\n  media( \u0026lt;media-feature\u0026gt; | \u0026lt;media-condition\u0026gt; ) |\n  style( \u0026lt;style-query\u0026gt; )\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eA little wordy, right? So, let’s look at an example to wrap our heads around it. Say we want to change an element’s padding depending on a given active color scheme. We would set an \u003ccode\u003eif()\u003c/code\u003e statement with a \u003ccode\u003estyle()\u003c/code\u003e function inside, and that would compare a given value with something like a custom variable to output a result. All this talk sounds so complicated, so let’s jump into code:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  padding: if(style(--theme: dark): 2rem; else: 3rem);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe example above sets the padding to \u003ccode\u003e2rem\u003c/code\u003e… \u003cem\u003eif\u003c/em\u003e the \u003ccode\u003e--theme\u003c/code\u003e variable is set to \u003ccode\u003edark\u003c/code\u003e. \u003cem\u003eIf\u003c/em\u003e not, it defaults to \u003ccode\u003e3rem\u003c/code\u003e. I know, not exactly the sort of thing you might actually use the function for, but it’s merely to illustrate the basic idea.\u003c/p\u003e\n\n\n\u003ch3 id=\"make-the-syntax-clean-\"\u003eMake the syntax clean!\u003c/h3\u003e\n\n\n\u003cp\u003eOne thing I noticed, though, is that things can get convoluted very \u003cem\u003every\u003c/em\u003e fast. Imagine you have three \u003ccode\u003eif()\u003c/code\u003e statements like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  --height: 12.5rem;\n  --width: 4rem;\n  --weight: 2rem;\n}\n\n.element {\n  height: if(\n    style(--height: 3rem): 14.5rem; style(--width: 7rem): 10rem; style(--weight: 100rem): 2rem; else: var(--height)\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe’re only working with three statements and, I’ll be honest, it makes my eyes hurt with complexity. So, I’m anticipating \u003ccode\u003eif()\u003c/code\u003e style patterns to be developed soon or \u003cem\u003eprettier\u003c/em\u003e versions to adopt a formatting style for this.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, if I were to break things out to be more readable, I would likely do something like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  --height: 12.5rem;\n  --width: 4rem;\n  --weight: 2rem;\n}\n\n/* This is much cleaner, don\u0026#39;t you think? */\n.element {\n  height: if(\n    style(--height: 3rem): 14.5rem; \n    style(--width: 7rem): 10rem; \n    style(--weight: 100rem): 2rem; \n    else: var(--height)\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eMuch better, right? Now, you can definitely understand what is going on at a glance. That’s just me, though. Maybe you have different ideas… and \u003cem\u003eif\u003c/em\u003e you do, I’d love to see them in the comments.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s a quick demo showing multiple conditionals in CSS for this animated ball to work. The width of the ball changes based on some custom variable values set. Gentle reminder that this is only supported in Chrome 137+ at the time I’m writing this:\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"how-do-supports-and-media-work-in-if-\"\u003eThe \u003ccode\u003esupports()\u003c/code\u003e and \u003ccode\u003emedia()\u003c/code\u003e statements\u003c/h3\u003e\n\n\n\u003cp\u003eThink of \u003ccode\u003esupports()\u003c/code\u003e the same way you would use the \u003ca href=\"https://css-tricks.com/almanac/rules/s/supports/\"\u003e\u003ccode\u003e@supports\u003c/code\u003e\u003c/a\u003e at-rule. In fact, they work about the same, at least conceptually:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* formal syntax for @supports */\n@supports \u0026lt;supports-condition\u0026gt; {\n  \u0026lt;rule-list\u0026gt;\n}\n\n/* formal syntax for supports() */\nsupports( [ \u0026lt;ident\u0026gt; : \u0026lt;declaration-value\u0026gt; ] | \u0026lt;supports-condition\u0026gt; )\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe only difference here is that \u003ccode\u003esupports()\u003c/code\u003e returns a value instead of matching a block of code. But, how does this work in \u003cem\u003ereal code?\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0026lt;ident\u0026gt;: \u0026lt;declaration-value\u0026gt;\u003c/code\u003e you see here is, in this case, the \u003cstrong\u003eproperty name: property value\u003c/strong\u003e e.g. \u003ccode\u003edisplay: flex\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eLet’s say you want to check for support for the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/b/backdrop-filter/\"\u003ebackdrop-filter\u003c/a\u003e\u003c/code\u003e property, particularly the \u003ccode\u003eblur()\u003c/code\u003e function. Typically, you can do this with \u003ccode\u003e@supports\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Fallback in case the browser doesn\u0026#39;t support backdrop-filter */\n.card {\n  backdrop-filter: unset;\n  background-color: oklch(20% 50% 40% / 0.8);\n}\n\n@supports (backdrop-filter: blur(10px)) {\n  .card {\n    backdrop-filter: blur(10px);\n    background-color: oklch(20% 50% 40% / 0.8);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBut, with CSS \u003ccode\u003eif()\u003c/code\u003e, we can also do this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.card {\n  backdrop-filter: if(\n    supports(backdrop-filter: blur(10px)): blur(10px);\n    else: unset\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Think of \u003ccode\u003eunset\u003c/code\u003e here as a possible fallback for graceful degradation.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat looks awesome, right? Multiple conditions can be checked as well for \u003ccode\u003esupports()\u003c/code\u003e and any of the supported functions. For example:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.card {\n  backdrop-filter: if(\n    supports(backdrop-filter: blur(10px)): blur(10px);\n    supports(backdrop-filter: invert(50%)): invert(50%);\n    supports(backdrop-filter: hue-rotate(230deg)): hue-rotate(230deg);;\n    else: unset\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow, take a look at the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/rules/m/media/\"\u003e@media\u003c/a\u003e\u003c/code\u003e at-rule. \u003ca href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\"\u003eYou can compare and check for a bunch of stuff\u003c/a\u003e, but I’d like to keep it simple and check for whether or not a screen size is a certain width and apply styles based on that:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh1 {\n  font-size: 2rem;\n}\n\n@media (min-width: 768px) {\n  h1 {\n    font-size: 2.5rem;\n  }\n}\n\n@media (min-width: 1200px) {\n  h1 {\n    font-size: 3rem;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003emedia()\u003c/code\u003e wrapper works almost the same way as its at-rule counterpart. Note its syntax from the spec:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* formal syntax for @media */\n@media \u0026lt;media-query-list\u0026gt; {\n  \u0026lt;rule-list\u0026gt;\n}\n\n/* formal syntax for media() */\nmedia( \u0026lt;media-feature\u0026gt; | \u0026lt;media-condition\u0026gt; )\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNotice how at the \u003cem\u003eend of the day\u003c/em\u003e, the formal syntax (\u003ccode\u003e\u0026lt;media-query\u0026gt;\u003c/code\u003e) is the same as the syntax for the \u003ccode\u003emedia()\u003c/code\u003e function. And instead of returning a block of code in \u003ccode\u003e@media\u003c/code\u003e, you’d have something like this in the CSS inline \u003ccode\u003eif()\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh1 {\n  font-size: if(\n    media(width \u0026gt;= 1200px): 3rem;\n    media(width \u0026gt;= 768px): 2.5rem;\n    else: 2rem\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"how-is-browser-support-for-if-\"\u003eAgain, these are early days\u003c/h3\u003e\n\n\n\u003cp\u003eAs of the time of this writing, only the \u003ca href=\"https://caniuse.com/?search=if(\" rel=\"noopener\"\u003elatest update of Chrome supports \u003ccode\u003eif()\u003c/code\u003e\u003c/a\u003e). I’m guessing other browsers will follow suit once usage and interest come in. I have no idea when that will happen. Until then, I think it’s fun to experiment with this stuff, just as others have been doing:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://css-tricks.com/the-what-if-machine-bringing-the-iffy-future-of-css-into-the-present/\"\u003eThe What If Machine: Bringing the “Iffy” Future of CSS into the Present\u003c/a\u003e (Lee Meyer)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://css-tip.com/inline-if/\" rel=\"noopener\"\u003eHow To Correctly Use \u003ccode\u003eif()\u003c/code\u003e In CSS\u003c/a\u003e (Temani Afif)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://blog.kizu.dev/future-proofing-indirect-cyclic-conditions/\" rel=\"noopener\"\u003eFuture-Proofing Indirect Cyclical Conditions\u003c/a\u003e (Roma Komarov)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.amitmerchant.com/the-if-function-in-css/\" rel=\"noopener\"\u003eThe new \u003ccode\u003eif()\u003c/code\u003e function in CSS has landed in the latest Chrome\u003c/a\u003e (Amit Merchant)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eExperimenting with early features is how we help CSS evolve. If you’re trying things out, consider adding your feedback to the \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/\" rel=\"noopener\"\u003eCSSWG\u003c/a\u003e and \u003ca href=\"https://issues.chromium.org/issues/wizard?pli=1\" rel=\"noopener\"\u003eChromium\u003c/a\u003e. The more use cases, the better, and that will certain help make future implementations better as well.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow that we have a high-level feel for the \u003ccode\u003eif()\u003c/code\u003esyntax, we’ll poke a little harder at the function in another article where we put it up against a real-world use case. We’ll link that up when it publishes tomorrow.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-06-24T09:17:10-06:00",
  "modifiedTime": "2025-06-24T09:17:13-06:00"
}
