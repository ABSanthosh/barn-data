{
  "id": "733710fc-ab19-4123-a4e4-161b9d4dcf3e",
  "title": "Some Things You Might Not Know About Custom Counter Styles",
  "link": "https://css-tricks.com/some-things-you-might-not-know-about-custom-counter-styles/",
  "description": "I was reading through Juan’s recent Almanac entry for the @counter-style at-rule and I’ll be darned if he didn’t uncover and unpack some extremely interesting things that we can do to style lists, notably the list marker. You’re probably already … Some Things You Might Not Know About Custom Counter Styles originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Thu, 23 Jan 2025 17:21:15 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "lists"
  ],
  "byline": "Geoff Graham",
  "length": 4271,
  "excerpt": "I was reading through Juan's recent Almanac entry for the @counter-style at-rule and I'll be darned if he didn't uncover and unpack some extremely interesting",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "I was reading through Juan’s recent Almanac entry for the @counter-style at-rule and I’ll be darned if he didn’t uncover and unpack some extremely interesting things that we can do to style lists, notably the list marker. You’re probably already aware of the ::marker pseudo-element. You’ve more than likely dabbled with custom counters using counter-reset and counter-increment. Or maybe your way of doing things is to wipe out the list-style (careful when doing that!) and hand-roll a marker on the list item’s ::before pseudo. But have you toyed around with @counter-style? Turns out it does a lot of heavy lifting and opens up new ways of working with lists and list markers. You can style the marker of just one list item This is called a “fixed” system set to a specific item. @counter-style style-fourth-item { system: fixed 4; symbols: \"💠\"; suffix: \" \"; } li { list-style: style-fourth-item; } You can assign characters to specific markers If you go with an “additive” system, then you can define which symbols belong to which list items. @counter-style dice { system: additive; additive-symbols: 6 \"⚅\", 5 \"⚄\", 4 \"⚃\", 3 \"⚂\", 2 \"⚁\", 1 \"⚀\"; suffix: \" \"; } li { list-style: dice; } Notice how the system repeats once it reaches the end of the cycle and begins a new series based on the first item in the pattern. So, for example, there are six sides to typical dice and we start rolling two dice on the seventh list item, totaling seven. You can add a prefix and suffix to list markers A long while back, Chris showed off a way to insert punctuation at the end of a list marker using the list item’s ::before pseudo: ol { list-style: none; counter-reset: my-awesome-counter; li { counter-increment: my-awesome-counter; \u0026::before { content: counter(my-awesome-counter) \") \"; } } } That’s much easier these days with @counter-styles: @counter-style parentheses { system: extends decimal; prefix: \"(\"; suffix: \") \"; } You can style multiple ranges of list items Let’s say you have a list of 10 items but you only want to style items 1-3. We can set a range for that: @counter-style single-range { system: extends upper-roman; suffix: \".\"; range: 1 3; } li { list-style: single-range; } We can even extend our own dice example from earlier: @counter-style dice { system: additive; additive-symbols: 6 \"⚅\", 5 \"⚄\", 4 \"⚃\", 3 \"⚂\", 2 \"⚁\", 1 \"⚀\"; suffix: \" \"; } @counter-style single-range { system: extends dice; suffix: \".\"; range: 1 3; } li { list-style: single-range; } Another way to do that is to use the infinite keyword as the first value: @counter-style dice { system: additive; additive-symbols: 6 \"⚅\", 5 \"⚄\", 4 \"⚃\", 3 \"⚂\", 2 \"⚁\", 1 \"⚀\"; suffix: \" \"; } @counter-style single-range { system: extends dice; suffix: \".\"; range: infinite 3; } li { list-style: single-range; } Speaking of infinite, you can set it as the second value and it will count up infinitely for as many list items as you have. Maybe you want to style two ranges at a time and include items 6-9. I’m not sure why the heck you’d want to do that but I’m sure you (or your HIPPO) have got good reasons. @counter-style dice { system: additive; additive-symbols: 6 \"⚅\", 5 \"⚄\", 4 \"⚃\", 3 \"⚂\", 2 \"⚁\", 1 \"⚀\"; suffix: \" \"; } @counter-style multiple-ranges { system: extends dice; suffix: \".\"; range: 1 3, 6 9; } li { list-style: multiple-ranges; } You can add padding around the list markers You ever run into a situation where your list markers are unevenly aligned? That usually happens when going from, say, a single digit to a double-digit. You can pad the marker with extra characters to line things up. /* adds leading zeroes to list item markers */ @counter-style zero-padded-example { system: extends decimal; pad: 3 \"0\"; } Now the markers will always be aligned… well, up to 999 items. That’s it! I just thought those were some pretty interesting ways to work with list markers in CSS that run counter (get it?!) to how I’ve traditionally approached this sort of thing. And with @counter-style becoming Baseline “newly available” in September 2023, it’s well-supported in browsers.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/383776",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI was reading through Juan’s recent Almanac entry for the \u003ccode\u003e@counter-style\u003c/code\u003e at-rule and I’ll be darned if he didn’t uncover and unpack some extremely interesting things that we can do to style lists, notably the list marker. You’re probably already aware of the \u003ccode\u003e::marker\u003c/code\u003e pseudo-element. You’ve more than likely dabbled with custom counters using \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/c/counter-reset/\"\u003ecounter-reset\u003c/a\u003e\u003c/code\u003e and \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/c/counter-increment/\"\u003ecounter-increment\u003c/a\u003e\u003c/code\u003e. Or maybe your way of doing things is to wipe out the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/l/list-style/\"\u003elist-style\u003c/a\u003e\u003c/code\u003e (careful when \u003ca href=\"https://css-tricks.com/snippets/css/remove-list-markers-without-affecting-semantics/\"\u003edoing that\u003c/a\u003e!) and hand-roll a marker on the list item’s \u003ccode\u003e::before\u003c/code\u003e pseudo.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut have you toyed around with \u003ccode\u003e@counter-style\u003c/code\u003e? Turns out it does a lot of heavy lifting and opens up new ways of working with lists and list markers.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"you-can-style-the-marker-of-just-one-list-item\"\u003eYou can style the marker of just one list item\u003c/h3\u003e\n\n\n\u003cp\u003eThis is called a “fixed” \u003ccode\u003esystem\u003c/code\u003e set to a specific item.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style style-fourth-item {\n  system: fixed 4;\n  symbols: \u0026#34;💠\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\n\nli {\n  list-style: style-fourth-item;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003ch3 id=\"you-can-assign-characters-to-specific-markers\"\u003eYou can assign characters to specific markers\u003c/h3\u003e\n\n\n\u003cp\u003eIf you go with an “additive” \u003ccode\u003esystem\u003c/code\u003e, then you can define which symbols belong to which list items.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style dice {\n  system: additive;\n  additive-symbols: 6 \u0026#34;⚅\u0026#34;, 5 \u0026#34;⚄\u0026#34;, 4 \u0026#34;⚃\u0026#34;, 3 \u0026#34;⚂\u0026#34;, 2 \u0026#34;⚁\u0026#34;, 1 \u0026#34;⚀\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\n\nli {\n  list-style: dice;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eNotice how the \u003ccode\u003esystem\u003c/code\u003e repeats once it reaches the end of the cycle and begins a new series based on the first item in the pattern. So, for example, there are six sides to typical dice and we start rolling two dice on the seventh list item, totaling seven.\u003c/p\u003e\n\n\n\u003ch3 id=\"you-can-add-a-prefix-and-suffix-to-list-markers\"\u003eYou can add a prefix and suffix to list markers\u003c/h3\u003e\n\n\n\u003cp\u003eA long while back, \u003ca href=\"https://css-tricks.com/css-counters-custom-list-number-styling/\"\u003eChris showed off\u003c/a\u003e a way to insert punctuation at the end of a list marker using the list item’s \u003ccode\u003e::before\u003c/code\u003e pseudo:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  list-style: none;\n  counter-reset: my-awesome-counter;\n\n  li {\n    counter-increment: my-awesome-counter;\n\n    \u0026amp;::before {\n      content: counter(my-awesome-counter) \u0026#34;) \u0026#34;;\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat’s much easier these days with \u003ccode\u003e@counter-styles\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style parentheses {\n  system: extends decimal;\n  prefix: \u0026#34;(\u0026#34;;\n  suffix: \u0026#34;) \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003ch3 id=\"you-can-style-multiple-ranges-of-list-items\"\u003eYou can style multiple ranges of list items\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s say you have a list of 10 items but you only want to style items 1-3. We can set a \u003ccode\u003erange\u003c/code\u003e for that:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style single-range {\n  system: extends upper-roman;\n  suffix: \u0026#34;.\u0026#34;;\n  range: 1 3;\n}\n\nli {\n  list-style: single-range;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWe can even \u003ccode\u003eextend\u003c/code\u003e our own dice example from earlier:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style dice {\n  system: additive;\n  additive-symbols: 6 \u0026#34;⚅\u0026#34;, 5 \u0026#34;⚄\u0026#34;, 4 \u0026#34;⚃\u0026#34;, 3 \u0026#34;⚂\u0026#34;, 2 \u0026#34;⚁\u0026#34;, 1 \u0026#34;⚀\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\n\n@counter-style single-range {\n  system: extends dice;\n  suffix: \u0026#34;.\u0026#34;;\n  range: 1 3;\n}\n\nli {\n  list-style: single-range;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAnother way to do that is to use the \u003ccode\u003einfinite\u003c/code\u003e keyword as the first value:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"10\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style dice {\n  system: additive;\n  additive-symbols: 6 \u0026#34;⚅\u0026#34;, 5 \u0026#34;⚄\u0026#34;, 4 \u0026#34;⚃\u0026#34;, 3 \u0026#34;⚂\u0026#34;, 2 \u0026#34;⚁\u0026#34;, 1 \u0026#34;⚀\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\n\n@counter-style single-range {\n  system: extends dice;\n  suffix: \u0026#34;.\u0026#34;;\n  range: infinite 3;\n}\n\nli {\n  list-style: single-range;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSpeaking of \u003ccode\u003einfinite\u003c/code\u003e, you can set it as the second value and it will count up infinitely for as many list items as you have.\u003c/p\u003e\n\n\n\n\u003cp\u003eMaybe you want to style two ranges at a time and include items 6-9. I’m not sure why the heck you’d want to do that but I’m sure you (or your \u003ca href=\"https://www.kaushik.net/avinash/seven-steps-to-creating-a-data-driven-decision-making-culture/\" rel=\"noopener\"\u003eHIPPO\u003c/a\u003e) have got good reasons.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style dice {\n  system: additive;\n  additive-symbols: 6 \u0026#34;⚅\u0026#34;, 5 \u0026#34;⚄\u0026#34;, 4 \u0026#34;⚃\u0026#34;, 3 \u0026#34;⚂\u0026#34;, 2 \u0026#34;⚁\u0026#34;, 1 \u0026#34;⚀\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\n\n@counter-style multiple-ranges {\n  system: extends dice;\n  suffix: \u0026#34;.\u0026#34;;\n  range: 1 3, 6 9;\n}\n\nli {\n  list-style: multiple-ranges;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003ch3 id=\"you-can-add-padding-around-the-list-markers\"\u003eYou can add padding around the list markers\u003c/h3\u003e\n\n\n\u003cp\u003eYou ever run into a situation where your list markers are unevenly aligned? That usually happens when going from, say, a single digit to a double-digit. You can \u003ccode\u003epad\u003c/code\u003e the marker with extra characters to line things up.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* adds leading zeroes to list item markers */\n@counter-style zero-padded-example {\n  system: extends decimal;\n  pad: 3 \u0026#34;0\u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow the markers will always be aligned… well, up to 999 items.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"thats-it\"\u003eThat’s it!\u003c/h3\u003e\n\n\n\u003cp\u003eI just thought those were some pretty interesting ways to work with list markers in CSS that run \u003cem\u003ecounter\u003c/em\u003e (get it?!) to how I’ve traditionally approached this sort of thing. And with \u003ccode\u003e@counter-style\u003c/code\u003e becoming Baseline “newly available” in September 2023, it’s well-supported in browsers.\u003c/p\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"counter-style\"\u003e\u003c/baseline-status\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-01-23T10:21:15-07:00",
  "modifiedTime": "2025-01-23T10:21:19-07:00"
}
