{
  "id": "fa13bb5e-f607-4ec9-bc3e-2203f1547338",
  "title": "Better CSS Shapes Using shape() — Part 3: Curves",
  "link": "https://css-tricks.com/better-css-shapes-using-shape-part-3-curves/",
  "description": "This is the third article in a series about the CSS shape() function. We've covered drawing lines and arcs in previous articles and, this time, we look specifically at the curve command and how to use it for drawing complex shapes. Better CSS Shapes Using shape() — Part 3: Curves originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Temani Afif",
  "published": "Fri, 06 Jun 2025 13:52:42 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "art",
    "clip-path",
    "CSS functions",
    "css shapes"
  ],
  "byline": "Temani Afif",
  "length": 11944,
  "excerpt": "This is the third article in a series about the CSS shape() function. We've covered drawing lines and arcs in previous articles and, this time, we look specifically at the curve command and how to use it for drawing complex shapes.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "If you’re following along, this is the third post in a series about the new CSS shape() function. We’ve learned how to draw lines and arcs and, in this third part, I will introduce the curve command — the missing command you need to know to have full control over the shape() function. In reality, there are more commands, but you will rarely need them and you can easily learn about them later by checking the documentation. The curve command This command adds a Bézier curve between two points by specifying control points. We can either have one control point and create a Quadratic curve or two control points and create a Cubic curve. Bézier, Quadratic, Cubic, control points? What?! For many of you, that definition is simply unclear, or even useless! You can spend a few minutes reading about Bézier curves but is it really worth it? Probably not, unless your job is to create shapes all the day and you have a solid background in geometry. We already have cubic-bezier() as an easing function for animations but, honestly, who really understands how it works? We either rely on a generator to get the code or we read a “boring” explanation that we forget in two minutes. (I have one right here by the way!) Don’t worry, this article will not be boring as I will mostly focus on practical examples and more precisely the use case of rounding the corners of irregular shapes. Here is a figure to illustrate a few examples of Bézier curves. The blue dots are the starting and ending points (let’s call them A and B) and the black dots are the control points. And notice how the curve is tangent to the dashed lines illustrated in red. In this article, I will consider only one control point. The syntax will follow this pattern: clip-path: shape( from Xa Ya, curve to Xb Yb with Xc Yc ); arc command vs. curve command We already saw in Part 1 and Part 2 that the arc command is useful establishing rounded edges and corners, but it will not cover all the cases. That’s why you will need the curve command. The tricky part is to know when to use each one and the answer is “it depends.” There is no generic rule but my advice is to first see if it’s possible (and easy) using arc. If not, then you have to use curve. For some shapes, we can have the same result using both commands and this is a good starting point for us to understand the curve command and compare it with arc. Take the following example: This is the code for the first shape: .shape { clip-path: shape(from 0 0, arc to 100% 100% of 100% cw, line to 0 100%) } And for the second one, we have this: .shape { clip-path: shape(from 0 0, curve to 100% 100% with 100% 0, line to 0 100%) } The arc command needs a radius (100% in this case), but the curve command needs a control point (which is 100% 0 in this example). Now, if you look closely, you will notice that both results aren’t exactly the same. The first shape using the arc command is creating a quarter of a circle, whereas the shape using the curve command is slightly different. If you place both of them above each other, you can clearly see the difference. This is interesting because it means we can round some corners using either an arc or a curve, but with slightly different results. Which one is better, you ask? I would say it depends on your visual preference and the shape you are creating. In Part 1, we created rounded tabs using the arc command, but we can also create them with curve. Can you spot the difference? It’s barely visible but it’s there. Notice how I am using the by directive the same way I am doing with arc, but this time we have the control point, which is also relative. This part can be confusing, so pay close attention to this next bit. Consider the following: shape(from Xa Ya, curve by Xb Yb with Xc Yc) It means that both (Xb,Yb) and (Xc,Yc) are relative coordinates calculated from the coordinate of the starting point. The equivalent of the above using a to directive is this: shape(from Xa Ya, curve to (Xa + Xb) (Ya + Yb) with (Xa + Xc) (Yb + Yc)) We can change the reference of the control point by adding a from directive. We can either use start (the default value), end, or origin. shape(from Xa Ya, curve by Xb Yb with Xc Yc from end) The above means that the control point will now consider the ending point instead of the starting point. The result is similar to: shape(from Xa Ya, curve to (Xa + Xb) (Ya + Yb) with (Xa + Xb + Xc) (Ya + Yb + Yc)) If you use origin, the reference will be the origin, hence the coordinate of the control point becomes absolute instead of relative. The from directive may add some complexity to the code and the calculation, so don’t bother yourself with it. Simply know it exists in case you face it, but keep using the default value. I think it’s time for your first homework! Similar to the rounded tab exercise, try to create the inverted radius shape we covered in the Part 1 using curve instead of arc. Here are both versions for you to reference, but try to do it without peeking first, if you can. Let’s draw more shapes! Now that we have a good overview of the curve command, let’s consider more complex shapes where arc won’t help us round the corners and the only solution is to draw curves instead. Considering that each shape is unique, so I will focus on the technique rather than the code itself. Slanted edge Let’s start with a rectangular shape with a slanted edge. Getting the shape on the left is quite simple, but the shape on the right is a bit tricky. We can round two corners with a simple border-radius, but for the slanted edge, we will use shape() and two curve commands. The first step is to write the code of the shape without rounded corners (the left one) which is pretty straightforward since we’re only working with the line command: .shape { --s: 90px; /* slant size */ clip-path: shape(from 0 0, line to calc(100% - var(--s)) 0, line to 100% 100%, line to 0 100% ); } Then we take each corner and try to round it by modifying the code. Here is a figure to illustrate the technique I am going to use for each corner. We define a distance, R, that controls the radius. From each side of the corner point, I move by that distance to create two new points, which are illustrated above in red. Then, I draw my curve using the new points as starting and ending points. The corner point will be the control point. The code becomes: .shape { --s: 90px; /* slant size */ clip-path: shape(from 0 0, Line to Xa Ya, curve to Xb Yb with calc(100% - var(--s)) 0, line to 100% 100%, line to 0 100% ); } Notice how the curve is using the coordinates of the corner point in the with directive, and we have two new points, A and B. Until now, the technique is not that complex. For each corner point, you replace the line command with line + curve commands where the curve command reuses the old point in its with directive. If we apply the same logic to the other corner, we get the following: .shape { --s: 90px; /* slant size */ clip-path: shape(from 0 0, line to Xa Ya, curve to Xb Yb with calc(100% - var(--s)) 0, line to Xc Yc, curve to Xd Yd with 100% 100%, line to 0 100% ); } Now we need to calculate the coordinates of the new points. And here comes the tricky part because it’s not always simple and it may require some complex calculation. Even if I detail this case, the logic won’t be the same for the other shapes we’re making, so I will skip the math part and give you the final code: .box { --h: 200px; /* element height */ --s: 90px; /* slant size */ --r: 20px; /* radius */ height: var(--h); border-radius: var(--r) 0 0 var(--r); --_a: atan2(var(--s), var(--h)); clip-path: shape(from 0 0, line to calc(100% - var(--s) - var(--r)) 0, curve by calc(var(--r) * (1 + sin(var(--_a)))) calc(var(--r) * cos(var(--_a))) with var(--r) 0, line to calc(100% - var(--r) * sin(var(--_a))) calc(100% - var(--r) * cos(var(--_a))), curve to calc(100% - var(--r)) 100% with 100% 100%, line to 0 100% ); } I know the code looks a bit scary, but the good news is that the code is also really easy to control using CSS variables. So, even if the math is not easy to grasp, you don’t have to deal with it. It should be noted that I need to know the height to be able to calculate the coordinates which means the solution isn’t perfect because the height is a fixed value. Arrow-shaped box Here’s a similar shape, but this time we have three corners to round using the curve command. The final code is still complex but I followed the same steps. I started with this: .shape { --s: 90px; clip-path: shape(from 0 0, /* corner #1 */ line to calc(100% - var(--s)) 0, /* corner #2 */ line to 100% 50%, /* corner #3 */ line to calc(100% - var(--s)) 100%, line to 0 100% ); } Then, I modified it into this: .shape { --s: 90px; clip-path: shape(from 0 0, /* corner #1 */ line to Xa Ya curve to Xb Yb with calc(100% - var(--s)) 0, /* corner #2 */ line to Xa Ya curve to Xb Yb with 100% 50%, /* corner #3 */ line to Xa Yb curve to Xb Yb with calc(100% - var(--s)) 100%, line to 0 100% ); } Lastly, I use a pen and paper to do all the calculations. You might think this technique is useless if you are not good with math and geometry, right? Not really, because you can still grab the code and use it easily since it’s optimized using CSS variables. Plus, you aren’t obligated to be super accurate and precise. You can rely on the above technique and use trial and error to approximate the coordinates. It will probably take you less time than doing all the math. Rounded polygons I know you are waiting for this, right? Thanks to the new shape() and the curve command, we can now have rounded polygon shapes! Here is my implementation using Sass where you can control the radius, number of sides and the rotation of the shape: If we omit the complex geometry part, the loop is quite simple as it relies on the same technique with a line + curve per corner. $n: 9; /* number of sides*/ $r: .2; /* control the radius [0 1] */ $a: 15deg; /* control the rotation */ .poly { aspect-ratio: 1; $m: (); @for $i from 0 through ($n - 1) { $m: append($m, line to Xai Yai, comma); $m: append($m, curve to Xbi Ybi with Xci Yci, comma); } clip-path: shape(#{$m}); } Here is another implementation where I define the variables in CSS instead of Sass: Having the variables in CSS is pretty handy especially if you want to have some animations. Here is an example of a cool hover effect applied to hexagon shapes: I have also updated my online generator to add the radius parameter. If you are not familiar with Sass, you can easily copy the CSS code from there. You will also find the border-only and cut-out versions! Conclusion Are we done with the curve command? Probably not, but we have a good overview of its potential and all the complex shapes we can build with it. As for the code, I know that we have reached a level that is not easy for everyone. I could have extended the explanation by explicitly breaking down the math, but then this article would be overly complex and make it seem like using shape() is harder than it is. This said, most of the shapes I code are available within my online collection that I constantly update and optimize so you can easily grab the code of any shape! If you want a good follow-up to this article, I wrote an article for Frontend Masters where you can create blob shapes using the curve command.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/css-shape-curve-diagram.webp",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eIf you’re following along, this is the third post in a series about the new CSS \u003ccode\u003eshape()\u003c/code\u003e function. We’ve learned how to draw lines and arcs and, in this third part, I will introduce the \u003ccode\u003ecurve\u003c/code\u003e command — the missing command you need to know to have full control over the \u003ccode\u003eshape()\u003c/code\u003e function. In reality, there are more commands, but you will rarely need them and you can easily learn about them later by checking the documentation.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"the-curve-command\"\u003eThe \u003ccode\u003ecurve\u003c/code\u003e command\u003c/h3\u003e\n\n\n\u003cp\u003eThis command adds a Bézier curve between two points by specifying control points. We can either have one control point and create a Quadratic curve or two control points and create a Cubic curve.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eBézier, Quadratic, Cubic, control points? What?!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eFor many of you, that definition is simply unclear, or even useless! You can spend a few minutes reading about Bézier curves but is it really worth it? Probably not, unless your job is to create shapes all the day and you have a solid background in geometry.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe already have \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/c/cubic-bezier/\"\u003ecubic-bezier()\u003c/a\u003e\u003c/code\u003e as an easing function for animations but, honestly, who really understands how it works? We either rely on a generator to get the code or we read a “boring” explanation that we forget in two minutes. (\u003ca href=\"https://css-tricks.com/advanced-css-animation-using-cubic-bezier/\"\u003eI have one right here by the way!\u003c/a\u003e)\u003c/p\u003e\n\n\n\n\u003cp\u003eDon’t worry, this article will not be boring as I will mostly focus on practical examples and more precisely the use case of rounding the corners of irregular shapes. Here is a figure to illustrate a few examples of Bézier curves.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"767\" height=\"469\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1748026970288_image.png.webp?resize=767%2C469\u0026amp;ssl=1\" alt=\"Comparing two curved lines, one with one control point and one with two control points.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1748026970288_image.png.webp?w=767\u0026amp;ssl=1 767w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1748026970288_image.png.webp?resize=300%2C183\u0026amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe blue dots are the starting and ending points (let’s call them A and B) and the black dots are the control points. And notice how the curve is tangent to the dashed lines illustrated in red.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this article, I will consider only one control point. The syntax will follow this pattern:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eclip-path: shape(\n  from Xa Ya, \n  curve to Xb Yb with Xc Yc\n);\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"-arc-command-vs-curve-command\"\u003e\u003ccode\u003earc\u003c/code\u003e command vs. \u003ccode\u003ecurve\u003c/code\u003e command\u003c/h3\u003e\n\n\n\u003cp\u003eWe already saw in Part 1 and Part 2 that the \u003ccode\u003earc\u003c/code\u003e command is useful establishing rounded edges and corners, but it will not cover all the cases. That’s why you will need the \u003ccode\u003ecurve\u003c/code\u003e command. The tricky part is to know when to use each one and the answer is “it depends.” There is no generic rule but my advice is to first see if it’s possible (and easy) using \u003ccode\u003earc\u003c/code\u003e. If not, then you have to use \u003ccode\u003ecurve\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor some shapes, we can have the same result using both commands and this is a good starting point for us to understand the \u003ccode\u003ecurve\u003c/code\u003e command and compare it with \u003ccode\u003earc\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eTake the following example:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis is the code for the first shape:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.shape {\n  clip-path: shape(from 0 0,\n    arc to 100% 100% of 100% cw,\n    line to 0 100%)\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd for the second one, we have this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.shape {\n  clip-path: shape(from 0 0,\n    curve to 100% 100% with 100% 0,\n    line to 0 100%)\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003earc\u003c/code\u003e command needs a radius (\u003ccode\u003e100%\u003c/code\u003e in this case), but the \u003ccode\u003ecurve\u003c/code\u003e command needs a control point (which is \u003ccode\u003e100% 0\u003c/code\u003e in this example).\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"835\" height=\"430\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747829152319_image.png.webp?resize=835%2C430\u0026amp;ssl=1\" alt=\"Two rounded shapes that appear to have similar curves, one using an arc and another using a curve.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747829152319_image.png.webp?w=835\u0026amp;ssl=1 835w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747829152319_image.png.webp?resize=300%2C154\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747829152319_image.png.webp?resize=768%2C395\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, if you look closely, you will notice that both results aren’t exactly the same. The first shape using the \u003ccode\u003earc\u003c/code\u003e command is creating a quarter of a circle, whereas the shape using the \u003ccode\u003ecurve\u003c/code\u003e command is slightly different. If you place both of them above each other, you can clearly see the difference.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThis is interesting because it means we can round some corners using either an \u003ccode\u003earc\u003c/code\u003e or a \u003ccode\u003ecurve\u003c/code\u003e, but with slightly different results. Which one is better, you ask? I would say it depends on your visual preference and the shape you are creating.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn \u003ca href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/\"\u003ePart 1\u003c/a\u003e, we created rounded tabs using the \u003ccode\u003earc\u003c/code\u003e command, but we can also create them with \u003ccode\u003ecurve\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eCan you spot the difference? It’s barely visible but it’s there.\u003c/p\u003e\n\n\n\n\u003cp\u003eNotice how I am using the \u003ccode\u003eby\u003c/code\u003e directive the same way I am doing with \u003ccode\u003earc\u003c/code\u003e, but this time we have the control point, which is also relative. This part can be confusing, so pay close attention to this next bit.\u003c/p\u003e\n\n\n\n\u003cp\u003eConsider the following:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eshape(from Xa Ya, curve by Xb Yb with Xc Yc)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIt means that both \u003ccode\u003e(Xb,Yb)\u003c/code\u003e and \u003ccode\u003e(Xc,Yc)\u003c/code\u003e are relative coordinates calculated from the coordinate of the starting point. The equivalent of the above using a \u003ccode\u003eto\u003c/code\u003e directive is this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eshape(from Xa Ya, curve to (Xa + Xb) (Ya + Yb) with (Xa + Xc) (Yb + Yc))\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can change the reference of the control point by adding a \u003ccode\u003efrom\u003c/code\u003e directive. We can either use \u003ccode\u003estart\u003c/code\u003e (the default value), \u003ccode\u003eend\u003c/code\u003e, or \u003ccode\u003eorigin\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eshape(from Xa Ya, curve by Xb Yb with Xc Yc from end)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe above means that the control point will now consider the ending point instead of the starting point. The result is similar to:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eshape(from Xa Ya, curve to (Xa + Xb) (Ya + Yb) with (Xa + Xb + Xc) (Ya + Yb + Yc))\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIf you use \u003ccode\u003eorigin\u003c/code\u003e, the reference will be the origin, hence the coordinate of the control point becomes absolute instead of relative.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003efrom\u003c/code\u003e directive may add some complexity to the code and the calculation, so don’t bother yourself with it. Simply know it exists in case you face it, but keep using the default value.\u003c/p\u003e\n\n\n\n\u003cp\u003eI think it’s time for your first homework! Similar to the rounded tab exercise, try to create the \u003ca href=\"https://css-tricks.com/better-css-shapes-using-shape-part-1-lines-and-arcs/#aa-inverted-radius\"\u003einverted radius shape we covered in the Part 1\u003c/a\u003e using \u003ccode\u003ecurve\u003c/code\u003e instead of \u003ccode\u003earc\u003c/code\u003e. Here are both versions for you to reference, but try to do it without peeking first, if you can.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"let-s-draw-more-shapes-\"\u003eLet’s draw more shapes!\u003c/h3\u003e\n\n\n\u003cp\u003eNow that we have a good overview of the \u003ccode\u003ecurve\u003c/code\u003e command, let’s consider more complex shapes where \u003ccode\u003earc\u003c/code\u003e won’t help us round the corners and the only solution is to draw curves instead. Considering that each shape is unique, so I will focus on the technique rather than the code itself.\u003c/p\u003e\n\n\n\u003ch4 id=\"slanted-edge\"\u003eSlanted edge\u003c/h4\u003e\n\n\n\u003cp\u003eLet’s start with a rectangular shape with a slanted edge.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"777\" height=\"268\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747907121098_image.png.webp?resize=777%2C268\u0026amp;ssl=1\" alt=\"A slanted rectangle shape in two stages, first with sharp edges, then with curved edges.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747907121098_image.png.webp?w=777\u0026amp;ssl=1 777w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747907121098_image.png.webp?resize=300%2C103\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747907121098_image.png.webp?resize=768%2C265\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eGetting the shape on the left is quite simple, but the shape on the right is a bit tricky. We can round two corners with a simple \u003ccode\u003eborder-radius\u003c/code\u003e, but for the slanted edge, we will use \u003ccode\u003eshape()\u003c/code\u003e and two \u003ccode\u003ecurve\u003c/code\u003e commands.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe first step is to write the code of the shape without rounded corners (the left one) which is pretty straightforward since we’re only working with the \u003ccode\u003eline\u003c/code\u003e command:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.shape {\n  --s: 90px;  /* slant size */\n\n  clip-path: \n    shape(from 0 0,\n    line to calc(100% - var(--s)) 0,\n    line to 100% 100%,\n    line to 0 100%\n    );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen we take each corner and try to round it by modifying the code. Here is a figure to illustrate the technique I am going to use for each corner.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"330\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747908378803_image.png-1024x330.webp?resize=1024%2C330\u0026amp;ssl=1\" alt=\"Diagrammiong a rounded rectangular shape in three stages, first with sharp edges, then with points indicating where the curve control points are, then the completed shape.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747908378803_image.png.webp?resize=1024%2C330\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747908378803_image.png.webp?resize=300%2C97\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747908378803_image.png.webp?resize=768%2C247\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747908378803_image.png.webp?w=1220\u0026amp;ssl=1 1220w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe define a distance, \u003ccode\u003eR\u003c/code\u003e, that controls the radius. From each side of the corner point, I move by that distance to create two new points, which are illustrated above in red. Then, I draw my \u003ccode\u003ecurve\u003c/code\u003e using the new points as starting and ending points. The corner point will be the control point.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe code becomes:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"6,7\"\u003e\u003ccode markup=\"tt\"\u003e.shape {\n  --s: 90px;  /* slant size */\n\n  clip-path: \n    shape(from 0 0,\n    Line  to Xa Ya,\n    curve to Xb Yb with calc(100% - var(--s)) 0,\n    line to 100% 100%,\n    line to 0 100%\n    );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNotice how the \u003ccode\u003ecurve\u003c/code\u003e is using the coordinates of the corner point in the \u003ccode\u003ewith\u003c/code\u003e directive, and we have two new points, A and B.\u003c/p\u003e\n\n\n\n\u003cp\u003eUntil now, the technique is not that complex. For each corner point, you replace the \u003ccode\u003eline\u003c/code\u003e command with \u003ccode\u003eline\u003c/code\u003e + \u003ccode\u003ecurve\u003c/code\u003e commands where the \u003ccode\u003ecurve\u003c/code\u003e command reuses the old point in its \u003ccode\u003ewith\u003c/code\u003e directive.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf we apply the same logic to the other corner, we get the following:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"8,9\"\u003e\u003ccode markup=\"tt\"\u003e.shape {\n  --s: 90px;  /* slant size */\n\n  clip-path: \n    shape(from 0 0,\n    line  to Xa Ya, \n    curve to Xb Yb with calc(100% - var(--s)) 0,\n    line  to Xc Yc,\n    curve to Xd Yd with 100% 100%,\n    line to 0 100%\n    );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow we need to calculate the coordinates of the new points. And here comes the tricky part because it’s not always simple and it may require some complex calculation. Even if I detail this case, the logic won’t be the same for the other shapes we’re making, so I will skip the math part and give you the final code:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.box {\n  --h: 200px; /* element height */\n  --s: 90px;  /* slant size */\n  --r: 20px;  /* radius */\n  \n  height: var(--h);\n  border-radius: var(--r) 0 0 var(--r);\n  --_a: atan2(var(--s), var(--h));\n  clip-path: \n    shape(from 0 0,\n    line  to calc(100% - var(--s) - var(--r)) 0,\n    curve by calc(var(--r) * (1 + sin(var(--_a)))) \n              calc(var(--r) * cos(var(--_a)))\n    with var(--r) 0,\n    line  to calc(100% - var(--r) * sin(var(--_a))) \n              calc(100% - var(--r) * cos(var(--_a))),\n    curve to calc(100% - var(--r)) 100%  with 100% 100%,\n    line to 0 100%\n    );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI know the code looks a bit scary, but the good news is that the code is also really easy to control using CSS variables. So, even if the math is not easy to grasp, you don’t have to deal with it. It should be noted that I need to know the height to be able to calculate the coordinates which means the solution isn’t perfect because the height is a fixed value.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch4 id=\"arrow-shaped-box\"\u003eArrow-shaped box\u003c/h4\u003e\n\n\n\u003cp\u003eHere’s a similar shape, but this time we have three corners to round using the \u003ccode\u003ecurve\u003c/code\u003e command.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eThe final code is still complex but I followed the same steps. I started with this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.shape {\n  --s: 90px; \n\n  clip-path: \n    shape(from 0 0,\n    /* corner #1 */\n    line to calc(100% - var(--s)) 0,\n    /* corner #2 */\n    line to 100% 50%,\n    /* corner #3 */\n    line to calc(100% - var(--s)) 100%,\n\n    line to 0 100%\n    );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen, I modified it into this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.shape {\n  --s: 90px; \n\n  clip-path: \n    shape(from 0 0,\n    /* corner #1 */\n    line  to Xa Ya\n    curve to Xb Yb with calc(100% - var(--s)) 0,\n    /* corner #2 */\n    line  to Xa Ya\n    curve to Xb Yb with 100% 50%,\n    /* corner #3 */\n    line  to Xa Yb\n    curve to Xb Yb with calc(100% - var(--s)) 100%,\n\n    line to 0 100%\n    );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eLastly, I use a pen and paper to do all the calculations.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou might think this technique is useless if you are not good with math and geometry, right? Not really, because you can still grab the code and use it easily since it’s optimized using CSS variables. Plus, you aren’t obligated to be super accurate and precise. You can rely on the above technique and use trial and error to approximate the coordinates. It will probably take you less time than doing all the math.\u003c/p\u003e\n\n\n\u003ch4 id=\"rounded-polygons\"\u003eRounded polygons\u003c/h4\u003e\n\n\n\u003cp\u003eI know you are waiting for this, right? Thanks to the new \u003ccode\u003eshape()\u003c/code\u003e and the \u003ccode\u003ecurve\u003c/code\u003e command, we can now have \u003ca href=\"https://css-tip.com/rounded-polygon/\" rel=\"noopener\"\u003erounded polygon shapes\u003c/a\u003e!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"785\" height=\"283\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/XOAYt9t8ba-785.png.webp?resize=785%2C283\u0026amp;ssl=1\" alt=\"Three rounded polygon shapes, first a pentagon, second a triangle, and third an octagon.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/XOAYt9t8ba-785.png.webp?w=785\u0026amp;ssl=1 785w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/XOAYt9t8ba-785.png.webp?resize=300%2C108\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/XOAYt9t8ba-785.png.webp?resize=768%2C277\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHere is my implementation using Sass where you can control the radius, number of sides and the rotation of the shape:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIf we omit the complex geometry part, the loop is quite simple as it relies on the same technique with a \u003ccode\u003eline\u003c/code\u003e + \u003ccode\u003ecurve\u003c/code\u003e per corner.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"SCSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e$n: 9; /* number of sides*/\n$r: .2; /* control the radius [0 1] */\n$a: 15deg; /* control the rotation */\n\n.poly {\n  aspect-ratio: 1;\n  $m: ();\n  @for $i from 0 through ($n - 1) {\n    $m: append($m, line  to Xai Yai, comma);\n    $m: append($m, curve to Xbi Ybi with Xci Yci, comma);\n  } \n  clip-path: shape(#{$m});\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHere is another implementation where I define the variables in CSS instead of Sass:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eHaving the variables in CSS is pretty handy especially if you want to have some animations. Here is an example of a cool hover effect applied to hexagon shapes:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eI have also updated \u003ca href=\"https://css-generators.com/polygon-shape/\" rel=\"noopener\"\u003emy online generator\u003c/a\u003e to add the radius parameter. If you are not familiar with Sass, you can easily copy the CSS code from there. You will also find the border-only and cut-out versions!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"707\" height=\"335\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747913994712_image.png.webp?resize=707%2C335\u0026amp;ssl=1\" alt=\"A rounded shape with six sides next to a cutout of a rounded shape with six edges.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747913994712_image.png.webp?w=707\u0026amp;ssl=1 707w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/s_CA5FF42D54A3B2DEF87A93172940512B207A6EA57FD63EDD21AFC86A6AB687D3_1747913994712_image.png.webp?resize=300%2C142\u0026amp;ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3 id=\"conclusion\"\u003eConclusion\u003c/h3\u003e\n\n\n\u003cp\u003eAre we done with the \u003ccode\u003ecurve\u003c/code\u003e command? Probably not, but we have a good overview of its potential and all the complex shapes we can build with it. As for the code, I know that we have reached a level that is not easy for everyone. I could have extended the explanation by explicitly breaking down the math, but then this article would be overly complex and make it seem like using \u003ccode\u003eshape()\u003c/code\u003e is harder than it is.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis said, most of the shapes I code are available within \u003ca href=\"https://css-shape.com/\" rel=\"noopener\"\u003emy online collection\u003c/a\u003e that I constantly update and optimize so you can easily grab the code of any shape!\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you want a good follow-up to this article, \u003ca href=\"https://frontendmasters.com/blog/creating-blob-shapes-using-clip-path-shape/\" rel=\"noopener\"\u003eI wrote an article for Frontend Masters\u003c/a\u003e where you can create blob shapes using the \u003ccode\u003ecurve\u003c/code\u003e command.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"808\" height=\"361\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/blobs1.jpg.webp?resize=808%2C361\u0026amp;ssl=1\" alt=\"Three blob shapes in a single row, each colored with a gradient that goes left to right from dark orange to light orange.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/blobs1.jpg.webp?w=808\u0026amp;ssl=1 808w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/blobs1.jpg.webp?resize=300%2C134\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/05/blobs1.jpg.webp?resize=768%2C343\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": "2025-06-06T07:52:42-06:00",
  "modifiedTime": "2025-06-06T07:52:44-06:00"
}
