{
  "id": "2b0af697-7704-4f45-a5e7-fd67e10cd04f",
  "title": "CSS Color Functions",
  "link": "https://css-tricks.com/css-color-functions/",
  "description": "CSS has a number of functions that can be used to set, translate, and manipulate colors. Learn what they are and how they are used with a bunch of examples to get you started. CSS Color Functions originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Sunkanmi Fafowora",
  "published": "Thu, 19 Jun 2025 15:01:18 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Guides",
    "color"
  ],
  "byline": "Sunkanmi Fafowora",
  "length": 32906,
  "excerpt": "CSS has a number of functions that can be used to set, translate, and manipulate colors. Learn what they are and how they are used with a bunch of examples to get you started.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "If you asked me a few months ago, “What does it take for a website to stand out?” I may have said fancy animations, creative layouts, cool interactions, and maybe just the general aesthetics, without pointing out something in particular. If you ask me now, after working on color for the better part of the year, I can confidently say it’s all color. Among all the aspects that make a design, a good color system will make it as beautiful as possible. However, color in CSS can be a bit hard to fully understand since there are many ways to set the same color, and sometimes they even look the same, but underneath are completely different technologies. That’s why, in this guide, we will walk through all the ways you can set up colors in CSS and all the color-related properties out there! Colors are in everything They are in your phone, in what your eye sees, and on any screen you look at; they essentially capture everything. Design-wise, I see the amazing use of colors on sites listed over at awwwards.com, and I’m always in awe. Not all color is the same. In fact, similar colors can live in different worlds, known as color spaces. Take for example, sRGB, the color space used on the web for the better part of its existence and hence the most known. While it’s the most used, there are many colors that are simply missing in sRGB that new color spaces like CIELAB and Oklab bring, and they cover a wider range of colors sRGB could only dream of, but don’t let me get ahead of myself. What’s a color space? A color space is the way we arrange and represent colors that exist within a device, like printers and monitors. We have different types of color spaces that exist in media (Rec2020, Adobe RGB, etc), but not all of them are covered in CSS. Luckily, the ones we have are sufficient to produce all the awesome and beautiful colors we need. In this guide, we will be diving into the three main color spaces available in CSS: sRGB, CIELAB, and OkLab. The sRGB Color Space The sRGB is one of the first color spaces we learn. Inside, there are three color functions, which are essentially notations to define a color: rgb(), hsl(), and hwb(). sRGB has been a standard color space for the web since 1996. However, it’s closer to how old computers represented color, rather than how humans understand it, so it had some problems like not being able to capture the full gamut of modern screens. Still, many modern applications and websites use sRGB, so even though it is the “old way” of doing things, it is still widely accepted and used today. The rgb() function rgb() uses three values, r, g, and b which specifies the redness, greenness, and blueness of the color you want. All three values are non-negative, and they go from 0 to 255. .element { color: rgb(245 123 151); } It also has an optional value (the alpha value) preceded by a forward slash. It determines the level of opacity for the color, which goes from 0 (or 0%) for a completely transparent color, to 1 (or 100%) for a fully opaque one. .element { color: rgb(245 123 151 / 20%); } There are two ways you can write inside rgb(). Either using the legacy syntax that separates the three values with commas or the modern syntax that separates each with spaces. You want to combine the two syntax formats, yes? That’s a no-no. It won’t even work. /* This would not work */ .element { color: rgb(225, 245, 200 / 0.5); } /* Neither will this */ .element { color: rgb(225 245 200, 0.5); } /* Or this */ .element { color: rgb(225, 245 200 / 0.5); } But, following one consistent format will do the trick, so do that instead. Either you’re so used to the old syntax and it’s hard for you to move on, continue to use the legacy syntax, or you’re one who’s willing to try and stick to something new, use the modern syntax. /* Valid (Modern syntax) */ .element { color: rgb(245 245 255 / 0.5); } /* Valid (Legacy syntax) */ .element { color: rgb(245, 245, 255, 0.5); } The rgba() function rgba() is essentially the same as rgb() with an extra alpha value used for transparency. In terms of syntax, the rgba() function can be written in two ways: Comma-separated and without percentages Space-separated, with the alpha value written after a forward slash (/) .element { color: rgba(100, 50, 0, 0.5); } .element { color: rgba(100 50 0 / 0.5); } So, what’s the difference between rgba() and rgb()? Breaking news! There is no difference. Initially, only rgba() could set the alpha value for opacity, but in recent years, rgb() now supports transparency using the forward slash (/) before the alpha value. rgb() also supports legacy syntax (commas) and modern syntax (spaces), so there’s practically no reason to use rgba() anymore; it’s even noted as a CSS mistake by folks at W3C. In a nutshell, rgb() and rgba() are the same, so just use rgb(). /* This works */ .element-1 { color: rgba(250 30 45 / 0.8); } /* And this works too, so why not just use this? */ .element-2 { color: rgb(250 30 45 / 0.8); } The hexadecimal notation The hexadecimal CSS color code is a 3, 4, 6, or 8 (being the maximum) digit code for colors in sRGB. It’s basically a shorter way of writing rgb(). The hexadecimal color (or hex color) begins with a hash token (#) and then a hexadecimal number, which means it goes from 0 to 9 and then skips to letters a to f (a being 10, b being 11, and so on, up to f for 15). In the hexadecimal color system, the 6-digit style is done in pairs. Each pair represents red (RR), blue (BB), and green (GG). Each value in the pair can go from 00 to FF, which it’s equivalent to 255 in rgb(). Notice how I used caps for the letters (F) and not lowercase letters like I did previously? Well, that’s because hexadecimals are not case-sensitive in CSS, so you don’t have to worry about uppercase or lowercase letters when dealing with hexadecimal colors. 3-digit hexadecimal. The 3-digit hexadecimal system is a shorter way of writing the 6-digit hexadecimal system, where each value represents the color’s redness, greenness, and blueness, respectively .element { color: #abc; } In reality, each value in the 3-digit system is duplicated and then translated to a visible color .element { color: #abc; /* Equals #AABBCC */ } BUT, this severely limits the colors you can set. What if I want to target the color 213 in the red space, or how would I get a blue of value 103? It’s impossible. That’s why you can only get a total number of 4,096 colors here as opposed to the 17 million in the 6-digit notation. Still, if you want a fast way of getting a certain color in hexadecimal without having to worry about the millions of other colors, use the 3-digit notation. 4-digit hexadecimal. This is similar to the 3-digit hexadecimal notation except it includes the optional alpha value for opacity. It’s a shorter way of writing the 8-digit hexadecimal which also means that all values here are repeated once during color translation. .element { color: #ABCD2; } For the alpha value, 0 represents 00 (a fully transparent color) and F represents FF (a fully opaque color). .element { color: #abcd; /* Same as #AABBCCDD */ } 6-digit hexadecimal. The 6-digit hexadecimal system just specifies a hexadecimal color’s redness, blueness, and greenness without its alpha value for color opacity. .element { color: #abcdef; } 8-digit hexadecimal. This 8-digit hexadecimal system specifies hexadecimal color’s redness, blueness, greenness, and its alpha value for color opacity. Basically, it is complete for color control in sRGB. .element { color: #faded101; } The hsl() function Both hsl() and rgb() live in the sRGB space, but they access colors differently. And while the consensus is that hsl() is far more intuitive than rgb(), it all boils down to your preference. hsl() takes three values: h, s, and l, which set its hue, saturation, and lightness, respectively. The hue sets the base color and represents a direction in the color wheel, so it’s written in angles from 0deg to 360deg. The saturation sets how much of the base color is present and goes from 0 (or 0%) to 100 (or 100%). The lightness represents how close to white or black the color gets. One cool thing: the hue angle goes from (0deg–360deg), but we might as well use negative angles or angles above 360deg, and they will circle back to the right hue. Especially useful for infinite color animation. Pretty neat, right? Plus, you can easily get a complementary color from the opposite angle (i.e., adding 180deg to the current hue) on the color wheel. /* Current color */ .element { color: hsl(120deg 40 60 / 0.8); } /* Complementary color */ .element { color: hsl(300deg 40 60 / 0.8); } You want to combine the two syntax formats like in rgb(), yes? That’s also a no-no. It won’t work. /* This would not work */ .element { color: hsl(130deg, 50, 20 / 0.5); } /* Neither will this */ .element { color: hsl(130deg 50 20, 0.5); } /* Or this */ .element { color: hsl(130deg 50, 20 / 0.5); } Instead, stick to one of the syntaxes, like in rgb(): /* Valid (Modern syntax) */ .element { color: hsl(130deg 50 20 / 0.5); } /* Valid (Modern syntax) */ .element { color: hsl(130deg, 50, 20, 0.5); } The hsla() function hsla() is essentially the same with hsl(). It uses three values to represent its color’s hue (h), saturation (s), and lightness (l), and yes (again), an alpha value for transparency (a). We can write hsla() in two different ways: Comma separated Space separated, with the alpha value written after a forward slash (/) .element { color: hsla(120deg, 100%, 50%, 0.5); } .element { color: hsla(120deg 100% 50% / 0.5); } So, what’s the difference between hsla() and hsl()? Breaking news (again)! They’re the same. hsl() and hsla() both: Support legacy and modern syntax Have the power to increase or reduce color opacity So, why does hsla() still exist? Well, apart from being one of the mistakes of CSS, many applications on the web still use hsla() since there wasn’t a way to set opacity with hsl() when it was first conceived. My advice: just use hsl(). It’s the same as hsla() but less to write. /* This works */ .element-1 { color: hsla(120deg 80 90 / 0.8); } /* And this works too, so why not just use this? */ .element-2 { color: hsl(120deg 80 90 / 0.8); } The hwb() function hwb() also uses hue for its first value, but instead takes two values for whiteness and blackness to determine how your colors will come out (and yes, it also does have an optional transparency value, a, just like rgb() and hsl()). .element { color: hwb(80deg 20 50 / 0.5); } The first value h is the same as the hue angle in hsl(), which represents the color position in the color wheel from 0 (or 0deg) to 360 (or 360deg). The second value, w, represents the whiteness in the color. It ranges from 0/0% (no white) to 100/100% (full white if b is 0). The third value, b, represents the blackness in the color. It ranges from 0/0% (no black) to 100/100% (fully black if w is 0). The final (optional) value is the alpha value, a, for the color’s opacity, preceded by a forward slash The value’s range is from 0.0 (or 0%) to 1.0 (or 100%). Although this color function is barely used, it’s completely valid to use, so it’s up to personal preference. Named colors CSS named colors are hardcoded keywords representing predefined colors in sRGB. You are probably used to the basic: white, blue, black, red, but there are a lot more, totaling 147 in all, that are defined in the Color Modules Level 4 specification. Named colors are often discouraged because their names do not always match what color you would expect. The CIELAB Color Space The CIELAB color space is a relatively new color space on the web that represents a wider color gamut, closer to what the human eye can see, so it holds a lot more color than the sRGB space. The lab() function For this color function, we have three axes in a space-separated list to determine how the color is set. .element { color: lab(50 20 20 / 0.9); } The first value l represents the degree of whiteness to blackness of the color. Its range being 0/(or 0%) (black) to 100 (or 100%) (white). The second value a represents the degree of greenness to redness of the color. Its range being from -125/0% (green) to125 (or 100%) (red). The third value b represents the degree of blueness to yellowness of the color. Its range is also from -125 (or 0%) (blue) to 125 (or 100%) (red). The fourth and final value is its alpha value for color’s opacity. The value’s range is from 0.0 (or 0%) to 1.0 (or 100%). This is useful when you’re trying to obtain new colors and provide support for screens that do support them. Actually, most screens and all major browsers now support lab(), so you should be good. The CSS lab() color function’s a and b values are actually unbounded. Meaning they don’t technically have an upper or lower limit. But, at practice, those are their limits according to the spec. The lch() function The CSS lch() color function is said to be better and more intuitive than lab(). .element { color: lch(10 30 300deg); } They both use the same color space, but instead of having l, a, and b, lch uses lightness, chroma, and hue. The first value l represents the degree of whiteness to blackness of the color. Its range being 0 (or 0%) (black) to 100 (or 100%) (white). The second value c represents the color’s chroma (which is like saturation). Its range being from 0 (or 100%) to 150 or (or 100%). The third value h represents the color hue. The value’s range is also from 0 (or 0deg) to 360 (or 360deg). The fourth and final value is its alpha value for color’s opacity. The value’s range is from 0.0 (or 0%) to 1.0 (or 100%). The CSS lch() color function’s chroma (c) value is actually unbounded. Meaning it doesn’t technically have an upper or lower limit. But, in practice, the chroma values above are the limits according to the spec. The OkLab Color Space Björn Ottosson created this color space as an “OK” and even better version of the lab color space. It was created to solve the limitations of CIELAB and CIELAB color space like image processing in lab(), such as making an image grayscale, and perceptual uniformity. The two color functions in CSS that correspond to this color space are oklab() and oklch(). Perceptual uniformity occurs when there’s a smooth change in the direction of a gradient color from one point to another. If you notice stark contrasts like the example below for rgb() when transitioning from one hue to another, that is referred to as a non-uniform perceptual colormap. Notice how the change from one color to another is the same in oklab() without any stark contrasts as opposed to rgb()? Yeah, OKLab color space solves the stark contrasts present and gives you access to many more colors not present in sRGB. OKlab actually provides a better saturation of colors while still maintaining the hue and lightness present in colors in CIELAB (and even a smoother transition between colors!). The oklab() function The oklab() color function, just like lab(), generates colors according to their lightness, red/green axis, blue/yellow axis, and an alpha value for color opacity. Also, the values for oklab() are different from that of lab() so please watch out for that. .element { color: oklab(30% 20% 10% / 0.9); } The first value l represents the degree of whiteness to blackness of the color. Its range being 0 (or 0%) (black) to 0.1 (or 100%) (white). The second value a represents the degree of greenness to redness of the color. Its range being from -0.4 (or -100%) (green) to 0.4 (or 100%) (red). The third value b represents the degree of blueness to yellowness of the color. The value’s range is also from -0.4 (or 0%) (blue) to 0.4 (or -100%) (red). The fourth and final value is its alpha value for color’s opacity. The value’s range is from 0.0 (or 0%) to 1.0 (or 100%). Again, this solves one of the issues in lab which is perceptual uniformity so if you’re looking to use a better alternative to lab, use oklab(). The CSS oklab() color function’s a and b values are actually unbounded. Meaning they don’t technically have an upper or lower limit. But, theoretically, those are the limits for the values according to the spec. The oklch() function The oklch() color function, just like lch(), generates colors according to their lightness, chroma, hue, and an alpha value for color opacity. The main difference here is that it solves the issues present in lab() and lch(). .element { color: oklch(40% 20% 100deg / 0.7); } The first value l represents the degree of whiteness to blackness of the color. Its range being 0.0 (or 0%) (black) to 1.0 (or 100%) (white). The second value c represents the color’s chroma. Its range being from 0 (or 0%) to 0.4 (or 100%) (it theoretically doesn’t exceed 0.5). The third value h represents the color hue. The value’s range is also from 0 (or 0deg) to 360 (or 360deg). The fourth and final value is its alpha value for color’s opacity. The value’s range is from 0.0 (or 0%) to 1.0 (or 100%). The CSS oklch() color function’s chroma (c) value is actually unbounded. Meaning it doesn’t technically have an upper or lower limit. But, theoretically, the chroma values above are the limits according to the spec. The color() function The color() function allows access to colors in nine different color spaces, as opposed to the previous color functions mentioned, which only allow access to one. To use this function, you must simply be aware of these 6 parameters: The first value specifies the color space you want to access colors from. They can either be srgb, srgb-linear, display-p3, a98-rgb, prophoto-rgb, rec2020, xyz, xyz-d50, or xyz-d65 The next three values (c1, c2, and c3) specifies the coordinates in the color space for the color ranging from 0.0 – 1.0. The sixth and final value is its alpha value for color’s opacity. The value’s range is from 0.0 (or 0%) to 1.0 (or 100%). The color-mix() function The color-mix() function mixes two colors of any type in a given color space. Basically, you can create an endless number of colors with this method and explore more options than you normally would with any other color function. A pretty powerful CSS function, I would say. .element{ color-mix(in oklab, hsl(40 20 60) 80%, red 20%); } You’re basically mixing two colors of any type in a color space. Do take note, the accepted color spaces here are different from the color spaces accepted in the color() function. To use this function, you must be aware of these three values: The first value in colorspace specifies the interpolation method used to mix the colors, and these can be any of these 15 color spaces: srgb, srgb-linear, display-p3, a98-rgb, prophoto-rgb, rec2020, lab, oklab, xyz, xyz-d50, xyz-d65, hsl, hwb, lch, and oklch. The second and third values specifies an accepted color value and a percentage from 0% to 100%. The Relative Color Syntax Here’s how it works. We have: .element{ color-function(from origin-color c1 c2 c3 / alpha) } The first value from is a mandatory keyword you must set to extract the color values from origin-color. The second value, origin-color, represents a color function or value or even another relative color that you want to get color from. The next three values, c1, c2, and c3 represent the current color function’s color channels and they correspond with the color function’s valid color values. The sixth and final value is its alpha value for color’s opacity. The value’s range is from 0.0 (or 0%) to 1.0 (or 100%) which either set from the origin-color or set manually, Let’s take an example, say, converting a color from rgb() to lab(): .element { color: lab(from rgb(255 210 01 / 0.5) l a b / a); } All the values above will be translated to the corresponding colors in rgb(). Now, let’s take a look at another example where we convert a color from rgb() to oklch(): .element { color: oklch(from rgb(255 210 01 / 0.5) 50% 20% h / a); } Although, the l and c values were changed, the h and a would be taken from the original color, which in this case is a light yellowish color in rgb(). You can even be wacky and use math functions: All CSS color functions support the relative color syntax. The relative color syntax, simply put, is a way to access other colors in another color function or value, then translating it to the values of the current color function. It goes “from \u003ccolor\u003e” to another. .element { color: oklch(from rgb(255 210 01 / 0.5) calc(50% + var(--a)) calc(20% + var(--b)) h / a); } The relative color syntax is, however, different than the color() function in that you have to include the color space name and then fully write out the channels, like this: .element { color: color(from origin-color colorspace c1 c2 c3 / alpha); } Remember, the color-mix() function is not a part of this. You can have relative color functions inside the color functions you want to mix, yes, but the relative color syntax is not available in color-mix() directly. Color gradients CSS is totally capable of transitioning from one color to another. See the “CSS Gradients Guide” for a full run-down, including of the different types of gradients with examples. Properties that support color values There are a lot of properties that support the use of color. Just so you know, this list does not contain deprecated properties. accent-color This CSS property sets the accent color for UI controls like checkboxes and radio buttons, and any other form element progress { accent-color: lightgreen; } Accent colors are a way to style unique elements in respect to the chosen color scheme. background-color Applies solid colors as background on an element. .element { background-color: #ff7a18; } border-color Shorthand for setting the color of all four borders. /* Sets all border colors */ .element { border-color: lch(50 50 20); } /* Sets top, right, bottom, left border colors */ .element { border-color: black green red blue; } box-shadow Adds shadows to element for creating the illusion of depth. The property accepts a number of arguments, one of which sets the shadow color. .element { box-shadow: 0 3px 10px rgb(0 0 0 / 0.2); } caret-color Specifies the color of the text input cursor (caret). .element { caret-color: lch(30 40 40); } color Sets the foreground color of text and text decorations. .element { color: lch(80 10 20); } column-rule-color Sets the color of a line between columns in a multi-column layout. This property can’t act alone, so you need to set the columns and column-rule-style property first before using this. .element { column: 3; column-rule-style: solid; column-rule-color: lch(20 40 40); /* highlight */ } fill Sets the color of the SVG shape .element { fill: lch(40 20 10); } flood-color Specifies the flood color to use for \u003cfeFlood\u003e and \u003cfeDropShadow\u003e elements inside the \u003cfilter\u003e element for \u003csvg\u003e. This should not be confused with the flood-color CSS attribute, as this is a CSS property and that’s an HTML attribute (even though they basically do the same thing). If this property is specified, it overrides the CSS flood-color attribute .element { flood-color: lch(20 40 40); } lighting-color Specifies the color of the lighting source to use for \u003cfeDiffuseLighting\u003e and \u003cfeSpecularLighting\u003e elements inside the \u003cfilter\u003e element for \u003csvg\u003e. .element { lighting-color: lch(40 10 20); } outline-color Sets the color of an element’s outline. .element { outline-color: lch(20 40 40); } stop-color Specifies the color of gradient stops for the \u003cstop\u003e tags for \u003csvg\u003e. .element { stop-color: lch(20 40 40); } stroke Defines the color of the outline of \u003csvg\u003e. .element { stroke: lch(20 40 40); } text-decoration-color Sets the color of text decoration lines like underlines. .element { text-decoration-color: lch(20 40 40); } text-emphasis-color Specifies the color of emphasis marks on text. .element { text-emphasis-color: lch(70 20 40); } text-shadow Applies shadow effects to text, including color. .element { text-shadow: 1px 1px 1px lch(50 10 30); } Almanac references Color functions Almanac on Feb 22, 2025 rgb() .element { color: rgb(0 0 0 / 0.5); } Almanac on Feb 22, 2025 hsl() .element { color: hsl(90deg, 50%, 50%); } Almanac on Jun 12, 2025 hwb() .element { color: hwb(136 40% 15%); } Almanac on Mar 4, 2025 lab() .element { color: lab(50% 50% 50% / 0.5); } Almanac on Mar 12, 2025 lch() .element { color: lch(10% 0.215 15deg); } Almanac on Apr 29, 2025 oklab() .element { color: oklab(25.77% 25.77% 54.88%; } Almanac on May 10, 2025 oklch() .element { color: oklch(70% 0.15 240); } Almanac on May 2, 2025 color() .element { color: color(rec2020 0.5 0.15 0.115 / 0.5); } Color properties Almanac on Apr 19, 2025 accent-color .element { accent-color: #f8a100; } Almanac on Jan 13, 2025 background-color .element { background-color: #ff7a18; } Almanac on Jan 27, 2021 caret-color .element { caret-color: red; } Almanac on Jul 11, 2022 color .element { color: #f8a100; } Almanac on Jul 11, 2022 column-rule-color .element { column-rule-color: #f8a100; } Almanac on Jan 27, 2025 fill .element { fill: red; } Almanac on Jul 11, 2022 outline-color .element { outline-color: #f8a100; } Almanac on Dec 15, 2024 stroke .module { stroke: black; } Almanac on Aug 2, 2021 text-decoration-color .element { text-decoration-color: orange; } Almanac on Jan 27, 2023 text-emphasis .element { text-emphasis: circle red; } Almanac on Jan 27, 2023 text-shadow p { text-shadow: 1px 1px 1px #000; } Related articles \u0026 tutorials Article on Aug 12, 2024 Working With Colors Guide Article on Aug 23, 2022 The Expanding Gamut of Color on the Web Article on Oct 13, 2015 The Tragicomic History of CSS Color Names Article on Feb 11, 2022 A Whistle-Stop Tour of 4 New CSS Color Features Article on Feb 7, 2022 Using Different Color Spaces for Non-Boring Gradients Article on Oct 29, 2024 Come to the light-dark() Side Article on Sep 24, 2024 Color Mixing With Animation Composition Article on Sep 13, 2016 8-Digit Hex Codes? Article on Feb 24, 2021 A DRY Approach to Color Themes in CSS Article on Apr 6, 2017 Accessibility Basics: Testing Your Page For Color Blindness Article on Mar 9, 2020 Adventures in CSS Semi-Transparency Land Article on Mar 4, 2017 Change Color of All Four Borders Even With `border-collapse: collapse;` Article on Jan 2, 2020 Color contrast accessibility tools Article on Aug 14, 2019 Contextual Utility Classes for Color with Custom Properties Article on Jun 26, 2021 Creating Color Themes With Custom Properties, HSL, and a Little calc() Article on May 4, 2021 Creating Colorful, Smart Shadows Article on Feb 21, 2018 CSS Basics: Using Fallback Colors Article on Oct 21, 2019 Designing accessible color systems Article on Jun 22, 2021 Mixing Colors in Pure CSS Article on Jul 26, 2016 Overriding The Default Text Selection Color With CSS Article on Oct 21, 2015 Reverse Text Color Based on Background Color Automatically in CSS Article on Dec 27, 2019 So Many Color Links Article on Aug 18, 2018 Switch font color for different backgrounds with CSS Article on Jan 20, 2020 The Best Color Functions in CSS? Article on Dec 3, 2021 What do you name color variables? Article on May 8, 2025 Why is Nobody Using the hwb() Color Function?",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/color-functions-guide.webp",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eIf you asked me a few months ago, “What does it take for a website to stand out?” I may have said fancy animations, creative layouts, cool interactions, and maybe just the general aesthetics, without pointing out something in particular. If you ask me now, after working on color for the better part of the year, I can confidently say it’s all color. Among all the aspects that make a design, a good color system will make it as beautiful as possible.\u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, color in CSS can be a bit hard to fully understand since there are many ways to set the same color, and sometimes they even look the same, but underneath are completely different technologies. That’s why, in this guide, we will walk through \u003cem\u003eall\u003c/em\u003e the ways you can set up colors in CSS and \u003cem\u003eall\u003c/em\u003e the color-related properties out there!\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"colors-are-in-everything\"\u003eColors are in everything\u003c/h2\u003e\n\n\n\u003cp\u003eThey are in your phone, in what your eye sees, and on any screen you look at; they essentially capture everything. Design-wise, I see the amazing use of colors on sites listed over at \u003ca href=\"https://www.awwwards.com/websites/colorful/\" rel=\"noopener\"\u003eawwwards.com\u003c/a\u003e, and I’m always in awe.\u003c/p\u003e\n\n\n\n\u003cp\u003eNot all color is the same. In fact, similar colors can live in different worlds, known as color spaces. Take for example, sRGB, the color space used on the web for the better part of its existence and hence the most known. While it’s the most used, there are many colors that are simply missing in sRGB that new color spaces like \u003ca href=\"https://en.wikipedia.org/wiki/CIELAB_color_space\" rel=\"noopener\"\u003eCIELAB\u003c/a\u003e and \u003ca href=\"https://en.wikipedia.org/wiki/Oklab_color_space\" rel=\"noopener\"\u003eOklab\u003c/a\u003e bring, and they cover \u003ca href=\"https://rmit.pressbooks.pub/colourtheory1/chapter/colour-spaces-or-gamuts/\" rel=\"noopener\"\u003ea wider range of colors sRGB could only dream of\u003c/a\u003e, but don’t let me get ahead of myself.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"whats-a-color-space\"\u003eWhat’s a color space?\u003c/h2\u003e\n\n\n\u003cp\u003eA color space is the way we arrange and represent colors that exist within a device, like printers and monitors. We have different types of color spaces that exist in media (Rec2020, Adobe RGB, etc), but not all of them are covered in CSS. Luckily, the ones we have are sufficient to produce all the awesome and beautiful colors we need. In this guide, we will be diving into the three main color spaces available in CSS: sRGB, CIELAB, and OkLab.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"the-srgb-color-space\"\u003eThe sRGB Color Space\u003c/h2\u003e\n\n\n\u003cp\u003eThe sRGB is one of the first color spaces we learn. Inside, there are three color functions, which are essentially notations to define a color: \u003ccode\u003ergb()\u003c/code\u003e, \u003ccode\u003ehsl()\u003c/code\u003e, and \u003ccode\u003ehwb()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003esRGB has been a standard color space for the web \u003ca href=\"https://www.w3.org/Graphics/Color/sRGB.html\" rel=\"noopener\"\u003esince 1996\u003c/a\u003e. However, it’s closer to how old computers represented color, rather than how humans understand it, so it had some problems like not being able to capture the full gamut of modern screens. Still, many modern applications and websites use sRGB, so even though it is the “old way” of doing things, it is still widely accepted and used today.\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe \u003ccode\u003ergb()\u003c/code\u003e function\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/rgb-color-function-syntax.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Diagram of the rgb function showing arguments for red, green, blue, and alpha.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/rgb-color-function-syntax.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/rgb-color-function-syntax.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/rgb-color-function-syntax.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003ergb()\u003c/code\u003e uses three values, \u003ccode\u003er\u003c/code\u003e, \u003ccode\u003eg\u003c/code\u003e, and \u003ccode\u003eb\u003c/code\u003e which specifies the redness, greenness, and blueness of the color you want.\u003c/p\u003e\n\n\n\n\u003cp\u003eAll three values are non-negative, and \u003cstrong\u003ethey go from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e255\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: rgb(245 123 151);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIt also has an optional value (the \u003cem\u003ealpha\u003c/em\u003e value) preceded by a forward slash. It determines the level of opacity for the color, which goes from \u003ccode\u003e0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) for a completely transparent color, to \u003ccode\u003e1\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) for a fully opaque one.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: rgb(245 123 151 / 20%);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThere are two ways you can write inside \u003ccode\u003ergb()\u003c/code\u003e. Either using the \u003cstrong\u003elegacy syntax\u003c/strong\u003e that separates the three values with \u003cstrong\u003ecommas\u003c/strong\u003e or the \u003cstrong\u003emodern syntax\u003c/strong\u003e that separates each with \u003cstrong\u003espaces\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou want to combine the two syntax formats, yes? That’s a no-no. It won’t even work.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* This would not work */\n.element {\n  color: rgb(225, 245, 200 / 0.5);\n}\n\n/* Neither will this */\n.element {\n  color: rgb(225 245 200, 0.5);\n}\n\n/* Or this */\n.element {\n  color: rgb(225, 245 200 / 0.5);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBut, following \u003cem\u003eone\u003c/em\u003e consistent format will do the trick, so do that instead. Either you’re so used to the old syntax and it’s hard for you to move on, continue to use the \u003cstrong\u003elegacy syntax\u003c/strong\u003e, or you’re one who’s willing to try and stick to something new, use the \u003cstrong\u003emodern syntax\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Valid (Modern syntax)  */\n.element {\n  color: rgb(245 245 255 / 0.5);\n}\n\n/* Valid (Legacy syntax)  */\n.element {\n  color: rgb(245, 245, 255, 0.5);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe \u003ccode\u003ergba()\u003c/code\u003e function\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cp\u003e\u003ccode\u003ergba()\u003c/code\u003e is essentially the same as \u003ccode\u003ergb()\u003c/code\u003e with an extra alpha value used for transparency.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn terms of syntax, the \u003ccode\u003ergba()\u003c/code\u003e function can be written in two ways:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eComma-separated and without percentages\u003c/li\u003e\n\n\n\n\u003cli\u003eSpace-separated, with the alpha value written after a forward slash (\u003ccode\u003e/\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: rgba(100, 50, 0, 0.5);\n}\n\n.element {\n  color: rgba(100 50 0 / 0.5);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSo, what’s the difference between \u003ccode\u003ergba()\u003c/code\u003e and \u003ccode\u003ergb()\u003c/code\u003e?\u003c/p\u003e\n\n\n\n\u003cp\u003eBreaking news! \u003cstrong\u003eThere is no difference.\u003c/strong\u003e Initially, only \u003ccode\u003ergba()\u003c/code\u003e could set the alpha value for opacity, but in recent years, \u003ccode\u003ergb()\u003c/code\u003e now supports transparency using the forward slash (\u003ccode\u003e/\u003c/code\u003e) before the alpha value.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003ergb()\u003c/code\u003e also supports legacy syntax (commas) and modern syntax (spaces), so there’s practically no reason to use \u003ccode\u003ergba()\u003c/code\u003e anymore; it’s even noted as a \u003ca href=\"https://wiki.csswg.org/ideas/mistakes\" rel=\"noopener\"\u003eCSS mistake\u003c/a\u003e by folks at W3C.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn a nutshell, \u003ccode\u003ergb()\u003c/code\u003e and \u003ccode\u003ergba()\u003c/code\u003e are the same, so \u003cstrong\u003ejust use \u003ccode\u003ergb()\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* This works */\n.element-1 {\n    color: rgba(250 30 45 / 0.8);\n}\n\n/* And this works too, so why not just use this? */\n.element-2 {\n    color: rgb(250 30 45 / 0.8);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe hexadecimal notation\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hex-color-diagram.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Diagram of the hex color notation showing how #3dFa4C corresponds to the #RRGGBB color channels.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hex-color-diagram.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hex-color-diagram.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hex-color-diagram.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe hexadecimal CSS color code is a 3, 4, 6, or 8 (being the maximum) digit code for colors in sRGB. It’s basically a shorter way of writing \u003ccode\u003ergb()\u003c/code\u003e. The hexadecimal color (or hex color) begins with a hash token (\u003ccode\u003e#\u003c/code\u003e) and then a hexadecimal number, which means it goes from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e9\u003c/code\u003e and then skips to letters \u003ccode\u003ea\u003c/code\u003e to \u003ccode\u003ef\u003c/code\u003e (\u003ccode\u003ea\u003c/code\u003e being 10, \u003ccode\u003eb\u003c/code\u003e being 11, and so on, up to \u003ccode\u003ef\u003c/code\u003e for 15).\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the hexadecimal color system, the 6-digit \u003cem\u003estyle\u003c/em\u003e is done in pairs. Each pair represents red (\u003ccode\u003eRR\u003c/code\u003e), blue (\u003ccode\u003eBB\u003c/code\u003e), and green (\u003ccode\u003eGG\u003c/code\u003e).\u003c/p\u003e\n\n\n\n\u003cp\u003eEach value in the pair can go from \u003ccode\u003e00\u003c/code\u003e to \u003ccode\u003eFF\u003c/code\u003e, which it’s equivalent to \u003ccode\u003e255\u003c/code\u003e in \u003ccode\u003ergb()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eNotice how I used caps for the letters (\u003ccode\u003eF\u003c/code\u003e) and not lowercase letters like I did previously? Well, that’s because hexadecimals are not case-sensitive in CSS, so you don’t have to worry about uppercase or lowercase letters when dealing with hexadecimal colors.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e3-digit hexadecimal.\u003c/strong\u003e The 3-digit hexadecimal system is a shorter way of writing the 6-digit hexadecimal system, where each value represents the color’s redness, greenness, and blueness, respectively\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: #abc;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIn reality, each value in the 3-digit system is duplicated and then translated to a visible color\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: #abc; /* Equals #AABBCC  */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBUT, this severely limits the colors you can set. What if I want to target the color \u003ccode\u003e213\u003c/code\u003e in the red space, or how would I get a blue of value \u003ccode\u003e103\u003c/code\u003e? It’s impossible. That’s why you can only get a total number of 4,096 colors here as opposed to the 17 million in the 6-digit notation. Still, if you want a fast way of getting a certain color in hexadecimal without having to worry about the millions of other colors, use the 3-digit notation.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e4-digit hexadecimal.\u003c/strong\u003e This is similar to the 3-digit hexadecimal notation except it includes the optional alpha value for opacity. It’s a shorter way of writing the 8-digit hexadecimal which also means that all values here are repeated once during color translation.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: #ABCD2;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFor the alpha value, \u003ccode\u003e0\u003c/code\u003e represents \u003ccode\u003e00\u003c/code\u003e (a fully transparent color) and \u003ccode\u003eF\u003c/code\u003e represents \u003ccode\u003eFF\u003c/code\u003e (a fully opaque color).\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: #abcd; /* Same as #AABBCCDD */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e6-digit hexadecimal.\u003c/strong\u003e The 6-digit hexadecimal system just specifies a hexadecimal color’s redness, blueness, and greenness \u003cem\u003ewithout\u003c/em\u003e its alpha value for color opacity.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: #abcdef;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e8-digit hexadecimal.\u003c/strong\u003e This 8-digit hexadecimal system specifies hexadecimal color’s redness, blueness, greenness, and its alpha value for color opacity. Basically, it is complete for color control in sRGB.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: #faded101;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe \u003ccode\u003ehsl()\u003c/code\u003e function\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hsl-color-function.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Diagram of the hsl function showing arguments for hue, saturation, lightness, and alpha.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hsl-color-function.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hsl-color-function.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hsl-color-function.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eBoth \u003ccode\u003ehsl()\u003c/code\u003e and \u003ccode\u003ergb()\u003c/code\u003e live in the sRGB space, but they access colors differently. And while the consensus is that \u003ccode\u003ehsl()\u003c/code\u003e is far more intuitive than \u003ccode\u003ergb()\u003c/code\u003e, it all boils down to your preference.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003ehsl()\u003c/code\u003e takes three values: \u003ccode\u003eh\u003c/code\u003e, \u003ccode\u003es\u003c/code\u003e, and \u003ccode\u003el\u003c/code\u003e, which set its hue, saturation, and lightness, respectively.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe \u003cstrong\u003ehue\u003c/strong\u003e sets the base color and represents a direction in the color wheel, so it’s written in angles from \u003ccode\u003e0deg\u003c/code\u003e to \u003ccode\u003e360deg\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe \u003cstrong\u003esaturation\u003c/strong\u003e sets how much of the base color is present and goes from \u003ccode\u003e0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) to \u003ccode\u003e100\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe \u003cstrong\u003elightness\u003c/strong\u003e represents how close to white or black the color gets.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eOne cool thing: the hue angle goes from (\u003ccode\u003e0deg\u003c/code\u003e–\u003ccode\u003e360deg\u003c/code\u003e), but we might as well use negative angles or angles above \u003ccode\u003e360deg\u003c/code\u003e, and they will circle back to the right hue. Especially useful for infinite color animation. Pretty neat, right?\u003c/p\u003e\n\n\n\n\u003cp\u003ePlus, you can easily get a \u003cstrong\u003ecomplementary color\u003c/strong\u003e from the opposite angle (i.e., adding \u003ccode\u003e180deg\u003c/code\u003e to the current hue) on the color wheel.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Current color */\n.element {\n  color: hsl(120deg 40 60 / 0.8);\n}\n\n/* Complementary color */\n.element {\n  color: hsl(300deg 40 60 / 0.8);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou want to combine the two syntax formats like in \u003ccode\u003ergb()\u003c/code\u003e, yes? That’s also a no-no. It won’t work.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* This would not work */\n.element {\n  color: hsl(130deg, 50, 20 / 0.5);\n}\n\n/* Neither will this */\n.element {\n  color: hsl(130deg 50 20, 0.5);\n}\n\n/* Or this */\n.element {\n  color: hsl(130deg 50, 20 / 0.5);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eInstead, stick to one of the syntaxes, like in \u003ccode\u003ergb()\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Valid (Modern syntax)  */ \n.element {\n  color: hsl(130deg 50 20 / 0.5);\n}\n\n/* Valid (Modern syntax)  */ \n.element {\n  color: hsl(130deg, 50, 20, 0.5);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe \u003ccode\u003ehsla()\u003c/code\u003e function\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cp\u003e\u003ccode\u003ehsla()\u003c/code\u003e is essentially the same with \u003ccode\u003ehsl()\u003c/code\u003e. It uses three values to represent its color’s hue (\u003ccode\u003eh\u003c/code\u003e), saturation (\u003ccode\u003es\u003c/code\u003e), and lightness (\u003ccode\u003el\u003c/code\u003e), and yes (again), an alpha value for transparency (\u003ccode\u003ea\u003c/code\u003e). We can write \u003ccode\u003ehsla()\u003c/code\u003e in two different ways:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eComma separated\u003c/li\u003e\n\n\n\n\u003cli\u003eSpace separated, with the alpha value written after a forward slash (\u003ccode\u003e/\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: hsla(120deg, 100%, 50%, 0.5);\n}\n\n.element {\n  color: hsla(120deg 100% 50% / 0.5);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSo, what’s the difference between \u003ccode\u003ehsla()\u003c/code\u003e and \u003ccode\u003ehsl()\u003c/code\u003e?\u003c/p\u003e\n\n\n\n\u003cp\u003eBreaking news (again)! \u003cstrong\u003eThey’re the same.\u003c/strong\u003e \u003ccode\u003ehsl()\u003c/code\u003e and \u003ccode\u003ehsla()\u003c/code\u003e both:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eSupport legacy and modern syntax\u003c/li\u003e\n\n\n\n\u003cli\u003eHave the power to increase or reduce color opacity\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eSo, why does \u003ccode\u003ehsla()\u003c/code\u003e still exist? Well, apart from being \u003ca href=\"https://wiki.csswg.org/ideas/mistakes\" rel=\"noopener\"\u003eone of the mistakes of CSS\u003c/a\u003e, many applications on the web still use \u003ccode\u003ehsla()\u003c/code\u003e since there wasn’t a way to set opacity with \u003ccode\u003ehsl()\u003c/code\u003e when it was first conceived.\u003c/p\u003e\n\n\n\n\u003cp\u003eMy advice: \u003cstrong\u003ejust use \u003ccode\u003ehsl()\u003c/code\u003e\u003c/strong\u003e. It’s the same as \u003ccode\u003ehsla()\u003c/code\u003e but less to write.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* This works */\n.element-1 {\n    color: hsla(120deg 80 90 / 0.8);\n}\n\n/* And this works too, so why not just use this? */\n.element-2 {\n    color: hsl(120deg 80 90 / 0.8);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe \u003ccode\u003ehwb()\u003c/code\u003e function\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hwb-color-function.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Diagram of the hwb color function showing arguments for hue, whiteness, blackness, and alpha.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hwb-color-function.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hwb-color-function.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/hwb-color-function.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003ehwb()\u003c/code\u003e also uses hue for its first value, but instead takes two values for whiteness and blackness to determine how your colors will come out (and yes, it also does have an optional transparency value, \u003ccode\u003ea\u003c/code\u003e, just like \u003ccode\u003ergb()\u003c/code\u003e and \u003ccode\u003ehsl()\u003c/code\u003e).\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: hwb(80deg 20 50 / 0.5);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe first value \u003ccode\u003eh\u003c/code\u003e is the same as the hue angle in \u003ccode\u003ehsl()\u003c/code\u003e, which represents the color position in the color wheel from \u003ccode\u003e0\u003c/code\u003e (or \u003ccode\u003e0deg\u003c/code\u003e) to \u003ccode\u003e360\u003c/code\u003e (or \u003ccode\u003e360deg\u003c/code\u003e).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe second value, \u003ccode\u003ew\u003c/code\u003e, represents the whiteness in the color. It ranges from \u003ccode\u003e0\u003c/code\u003e/\u003ccode\u003e0%\u003c/code\u003e (no white) to \u003ccode\u003e100\u003c/code\u003e/\u003ccode\u003e100%\u003c/code\u003e (full white if \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe third value, \u003ccode\u003eb\u003c/code\u003e, represents the blackness in the color. It ranges from \u003ccode\u003e0\u003c/code\u003e/\u003ccode\u003e0%\u003c/code\u003e (no black) to \u003ccode\u003e100\u003c/code\u003e/\u003ccode\u003e100%\u003c/code\u003e (fully black if \u003ccode\u003ew\u003c/code\u003e is \u003ccode\u003e0\u003c/code\u003e).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe final (optional) value is the alpha value, \u003ccode\u003ea\u003c/code\u003e,  for the color’s opacity, preceded by a forward slash The value’s range is from \u003ccode\u003e0.0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) to \u003ccode\u003e1.0\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAlthough this color function is \u003ca href=\"https://css-tricks.com/why-is-nobody-using-the-hwb-color-function/\"\u003ebarely used\u003c/a\u003e,  it’s completely valid to use, so it’s up to personal preference.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"named-colors\"\u003eNamed colors\u003c/h3\u003e\n\n\n\u003cp\u003eCSS named colors are hardcoded keywords representing predefined colors in sRGB. You are probably used to the basic: \u003ccode\u003ewhite\u003c/code\u003e, \u003ccode\u003eblue\u003c/code\u003e, \u003ccode\u003eblack\u003c/code\u003e, \u003ccode\u003ered\u003c/code\u003e, but there are a lot more, \u003ca href=\"https://css-tricks.com/snippets/css/named-colors-and-hex-equivalents/\"\u003etotaling 147 in all\u003c/a\u003e, that are defined in the \u003ca href=\"https://www.w3.org/TR/css-color-4/#named-colors\" rel=\"noopener\"\u003eColor Modules Level 4 specification\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eNamed colors are often discouraged because \u003ca href=\"https://css-tricks.com/the-tragicomic-history-of-css-color-names/\"\u003etheir names do not always match what color you would expect\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003c/details\u003e\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"the-cielab-color-space\"\u003eThe CIELAB Color Space\u003c/h2\u003e\n\n\n\u003cp\u003eThe CIELAB color space is a relatively new color space on the web that represents a wider color gamut, closer to what the human eye can see, so it holds a lot more color than the sRGB space.\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe \u003ccode\u003elab()\u003c/code\u003e function\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/lab-color-function.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Diagram of the lab color function showing arguments for lightness, greenness to redness, blueness to yellowness, and the alpha transparency.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/lab-color-function.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/lab-color-function.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/lab-color-function.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFor this color function, we have three axes in a space-separated list to determine how the color is set.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n    color: lab(50 20 20 / 0.9);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe first value \u003ccode\u003el\u003c/code\u003e represents the degree of whiteness to blackness of the color. Its range being \u003ccode\u003e0\u003c/code\u003e/(or \u003ccode\u003e0%\u003c/code\u003e) (black) to \u003ccode\u003e100\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) (white).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe second value \u003ccode\u003ea\u003c/code\u003e represents the degree of greenness to redness of the color. Its range being from \u003ccode\u003e-125\u003c/code\u003e/\u003ccode\u003e0%\u003c/code\u003e (green) to\u003ccode\u003e125\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) (red).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe third value \u003ccode\u003eb\u003c/code\u003e represents the degree of blueness to yellowness of the color. Its range is also from \u003ccode\u003e-125\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) (blue) to \u003ccode\u003e125\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) (red).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe fourth and final value is its alpha value for color’s opacity. The value’s range is from \u003ccode\u003e0.0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) to \u003ccode\u003e1.0\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis is useful when you’re trying to obtain new colors and provide support for screens that do support them. Actually, most screens and all major browsers now support \u003ccode\u003elab()\u003c/code\u003e, so you should be good.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThe CSS \u003ccode\u003elab()\u003c/code\u003e color function’s \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e values are actually unbounded. Meaning they don’t technically have an upper or lower limit. But, at practice, those are their limits according to the spec.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe \u003ccode\u003elch()\u003c/code\u003e function\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/lch-color-function.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Diagram of the lch color function chowing arguments for whiteness to blackness, chroma, hue, and the alpha transparency.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/lch-color-function.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/lch-color-function.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/lch-color-function.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe CSS \u003ccode\u003elch()\u003c/code\u003e color function is said to be better and more intuitive than \u003ccode\u003elab()\u003c/code\u003e. \u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n    color: lch(10 30 300deg);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThey both use the same color space, but instead of having \u003ccode\u003el\u003c/code\u003e, \u003ccode\u003ea\u003c/code\u003e, and \u003ccode\u003eb\u003c/code\u003e, \u003ccode\u003elch\u003c/code\u003e uses lightness, chroma, and hue.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe first value \u003ccode\u003el\u003c/code\u003e represents the degree of whiteness to blackness of the color. Its range being \u003ccode\u003e0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) (black) to \u003ccode\u003e100\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) (white).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe second value \u003ccode\u003ec\u003c/code\u003e represents the color’s chroma (which is like saturation). Its range being from \u003ccode\u003e0\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) to \u003ccode\u003e150\u003c/code\u003e or (or \u003ccode\u003e100%\u003c/code\u003e).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe third value \u003ccode\u003eh\u003c/code\u003e represents the color hue. The value’s range is also from \u003ccode\u003e0\u003c/code\u003e (or \u003ccode\u003e0deg\u003c/code\u003e) to \u003ccode\u003e360\u003c/code\u003e (or \u003ccode\u003e360deg\u003c/code\u003e).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe fourth and final value is its alpha value for color’s opacity. The value’s range is from \u003ccode\u003e0.0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) to \u003ccode\u003e1.0\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThe CSS \u003ccode\u003elch()\u003c/code\u003e color function’s chroma (\u003ccode\u003ec\u003c/code\u003e) value is actually unbounded. Meaning it doesn’t technically have an upper or lower limit. But, in practice, the chroma values above are the limits according to the spec.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\n\n\n\u003c/details\u003e\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"the-oklab-color-space\"\u003eThe OkLab Color Space\u003c/h2\u003e\n\n\n\u003cp\u003e\u003ca href=\"https://bottosson.github.io/about/\" rel=\"noopener\"\u003eBjörn Ottosson\u003c/a\u003e created this color space as \u003ca href=\"https://www.smashingmagazine.com/2024/10/interview-bjorn-ottosson-creator-oklab-color-space/\" rel=\"noopener\"\u003ean “OK” and even better version of the lab color space\u003c/a\u003e. It was created to solve \u003ca href=\"https://www.w3.org/Graphics/Color/Workshop/slides/talk/lilley#limit\" rel=\"noopener\"\u003ethe limitations of CIELAB and CIELAB color space\u003c/a\u003e like image processing in \u003ccode\u003elab()\u003c/code\u003e, such as making an image grayscale, and perceptual uniformity. The two color functions in CSS that correspond to this color space are \u003ccode\u003eoklab()\u003c/code\u003e and \u003ccode\u003eoklch()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003ePerceptual uniformity occurs when there’s a smooth change in the direction of a gradient color from one point to another. If you notice stark contrasts like the example below for \u003ccode\u003ergb()\u003c/code\u003e when transitioning from one hue to another, that is referred to as a non-uniform perceptual colormap.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eNotice how the change from one color to another is the same in \u003ccode\u003eoklab()\u003c/code\u003e without any stark contrasts as opposed to \u003ccode\u003ergb()\u003c/code\u003e? Yeah, OKLab color space solves the stark contrasts present and gives you access to many more colors not present in sRGB.\u003c/p\u003e\n\n\n\n\u003cp\u003eOKlab actually provides a better saturation of colors while still maintaining the hue and lightness present in colors in CIELAB (and even a smoother transition between colors!).\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe \u003ccode\u003eoklab()\u003c/code\u003e function\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://css-tricks.com/wp-content/uploads/2025/06/oklab-color-function.svg\" alt=\"Diagram of the oklab color function syntax showing arguments for whiteness to blackness, green-ness to redness, blueness to yellowness, and the alpha transparency.\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eoklab()\u003c/code\u003e color function, just like \u003ccode\u003elab()\u003c/code\u003e, generates colors according to their lightness, red/green axis, blue/yellow axis, and an alpha value for color opacity. Also, the values for \u003ccode\u003eoklab()\u003c/code\u003e are different from that of \u003ccode\u003elab()\u003c/code\u003e so please watch out for that.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: oklab(30% 20% 10% / 0.9);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe first value \u003ccode\u003el\u003c/code\u003e represents the degree of whiteness to blackness of the color. Its range being \u003ccode\u003e0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) (black) to \u003ccode\u003e0.1\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) (white).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe second value \u003ccode\u003ea\u003c/code\u003e represents the degree of greenness to redness of the color. Its range being from \u003ccode\u003e-0.4\u003c/code\u003e (or \u003ccode\u003e-100%\u003c/code\u003e) (green) to \u003ccode\u003e0.4\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) (red).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe third value \u003ccode\u003eb\u003c/code\u003e represents the degree of blueness to yellowness of the color. The value’s range is also from \u003ccode\u003e-0.4\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) (blue) to \u003ccode\u003e0.4\u003c/code\u003e (or \u003ccode\u003e-100%\u003c/code\u003e) (red).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe fourth and final value is its alpha value for color’s opacity. The value’s range is from \u003ccode\u003e0.0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) to \u003ccode\u003e1.0\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAgain, this solves one of the issues in lab which is perceptual uniformity so if you’re looking to use a better alternative to lab, use \u003ccode\u003eoklab()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThe CSS \u003ccode\u003eoklab()\u003c/code\u003e color function’s \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e values are actually unbounded. Meaning they don’t technically have an upper or lower limit. But, theoretically, those are the limits for the values according to the spec.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch3\u003eThe \u003ccode\u003eoklch()\u003c/code\u003e function\u003c/h3\u003e\n      \u003c/summary\u003e\n  \n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/oclch-color-function-syntax.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Diagram of the oklch function showing the arguments for whiteness, chroma, hue, and alpha.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/oclch-color-function-syntax.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/oclch-color-function-syntax.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/oclch-color-function-syntax.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eoklch()\u003c/code\u003e color function, just like \u003ccode\u003elch()\u003c/code\u003e, generates colors according to their lightness, chroma, hue, and an alpha value for color opacity. The main difference here is that it solves the \u003ca href=\"https://bottosson.github.io/posts/oklab/\" rel=\"noopener\"\u003eissues present in lab() and lch()\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: oklch(40% 20% 100deg / 0.7);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe first value \u003ccode\u003el\u003c/code\u003e represents the degree of whiteness to blackness of the color. Its range being \u003ccode\u003e0.0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) (black) to \u003ccode\u003e1.0\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) (white).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe second value \u003ccode\u003ec\u003c/code\u003e represents the color’s chroma. Its range being from \u003ccode\u003e0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) to \u003ccode\u003e0.4\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) (it theoretically doesn’t exceed \u003ccode\u003e0.5\u003c/code\u003e).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe third value \u003ccode\u003eh\u003c/code\u003e represents the color hue. The value’s range is also from \u003ccode\u003e0\u003c/code\u003e (or \u003ccode\u003e0deg\u003c/code\u003e) to \u003ccode\u003e360\u003c/code\u003e (or \u003ccode\u003e360deg\u003c/code\u003e).\u003c/li\u003e\n\n\n\n\u003cli\u003eThe fourth and final value is its alpha value for color’s opacity. The value’s range is from \u003ccode\u003e0.0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) to \u003ccode\u003e1.0\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThe CSS \u003ccode\u003eoklch()\u003c/code\u003e color function’s chroma (\u003ccode\u003ec\u003c/code\u003e) value is actually unbounded. Meaning it doesn’t technically have an upper or lower limit. But, theoretically, the chroma values above are the limits according to the spec.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\n\n\n\u003c/details\u003e\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"the-color-function\"\u003eThe \u003ccode\u003ecolor()\u003c/code\u003e function\u003c/h2\u003e\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/relatibre-color-syntax-diagram.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Example of the color function syntax showing the arguments for the colorspace, c1, c2, and c3, and the alpha transparency channel.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/relatibre-color-syntax-diagram.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/relatibre-color-syntax-diagram.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/relatibre-color-syntax-diagram.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003ecolor()\u003c/code\u003e function allows access to colors in nine different color spaces, as opposed to the previous color functions mentioned, which only allow access to one.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo use this function, you must simply be aware of these 6 parameters:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe first value specifies the \u003ccode\u003ecolor space\u003c/code\u003e you want to access colors from. They can either be \u003ccode\u003esrgb\u003c/code\u003e, \u003ccode\u003esrgb-linear\u003c/code\u003e, \u003ccode\u003edisplay-p3\u003c/code\u003e, \u003ccode\u003ea98-rgb\u003c/code\u003e, \u003ccode\u003eprophoto-rgb\u003c/code\u003e, \u003ccode\u003erec2020\u003c/code\u003e, \u003ccode\u003exyz\u003c/code\u003e, \u003ccode\u003exyz-d50\u003c/code\u003e, or \u003ccode\u003exyz-d65\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eThe next three values (\u003ccode\u003ec1\u003c/code\u003e, \u003ccode\u003ec2\u003c/code\u003e, and \u003ccode\u003ec3\u003c/code\u003e) specifies the coordinates in the color space for the color ranging from \u003ccode\u003e0.0\u003c/code\u003e – \u003ccode\u003e1.0\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe sixth and final value is its alpha value for color’s opacity. The value’s range is from \u003ccode\u003e0.0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) to \u003ccode\u003e1.0\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"the-colormix-function\"\u003eThe \u003ccode\u003ecolor-mix()\u003c/code\u003e function\u003c/h2\u003e\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/color-mix-function-syntax.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Example of the color mix function syntax labelling the in keyword, the the color space, and the inputs followed by the alpha transparency.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/color-mix-function-syntax.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/color-mix-function-syntax.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/color-mix-function-syntax.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003ecolor-mix()\u003c/code\u003e function mixes two colors of any type in a given color space. Basically, you can create an endless number of colors with this method and explore more options than you normally would with any other color function. A pretty powerful CSS function, I would say.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element{\n  color-mix(in oklab, hsl(40 20 60) 80%, red 20%);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou’re basically mixing two colors of any type in a color space. Do take note, the accepted color spaces here are different from the color spaces accepted in the color() function.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo use this function, you must be aware of these three values:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe first value \u003ccode\u003ein colorspace\u003c/code\u003e specifies the interpolation method used to mix the colors, and these can be any of these 15 color spaces: \u003ccode\u003esrgb\u003c/code\u003e, \u003ccode\u003esrgb-linear\u003c/code\u003e, \u003ccode\u003edisplay-p3\u003c/code\u003e, \u003ccode\u003ea98-rgb\u003c/code\u003e, \u003ccode\u003eprophoto-rgb\u003c/code\u003e, \u003ccode\u003erec2020\u003c/code\u003e, \u003ccode\u003elab\u003c/code\u003e, \u003ccode\u003eoklab\u003c/code\u003e, \u003ccode\u003exyz\u003c/code\u003e, \u003ccode\u003exyz-d50\u003c/code\u003e, \u003ccode\u003exyz-d65\u003c/code\u003e, \u003ccode\u003ehsl\u003c/code\u003e, \u003ccode\u003ehwb\u003c/code\u003e, \u003ccode\u003elch\u003c/code\u003e, and \u003ccode\u003eoklch\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe second and third values specifies an accepted color value and a percentage from \u003ccode\u003e0%\u003c/code\u003e to \u003ccode\u003e100%\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\n\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"the-relative-color-syntax\"\u003eThe Relative Color Syntax\u003c/h2\u003e\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"900\" height=\"500\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/relative-color-syntax.webp?resize=900%2C500\u0026amp;ssl=1\" alt=\"Example of the relative color syntax labelling the color function, the mandatory keyword, the origin color, the color channel inputs, and the alpha value.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/relative-color-syntax.webp?w=900\u0026amp;ssl=1 900w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/relative-color-syntax.webp?resize=300%2C167\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/relative-color-syntax.webp?resize=768%2C427\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHere’s how it works. We have:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element{\n  color-function(from origin-color c1 c2 c3 / alpha)\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe first value \u003ccode\u003efrom\u003c/code\u003e is a mandatory keyword you must set to extract the color values from \u003ccode\u003eorigin-color\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe second value, \u003ccode\u003eorigin-color\u003c/code\u003e, represents a color function or value or even another relative color that you want to get color from.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe next three values, c1, c2, and c3 represent the current color function’s color channels and they correspond with the color function’s \u003cstrong\u003evalid\u003c/strong\u003e color values.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe sixth and final value is its alpha value for color’s opacity. The value’s range is from \u003ccode\u003e0.0\u003c/code\u003e (or \u003ccode\u003e0%\u003c/code\u003e) to \u003ccode\u003e1.0\u003c/code\u003e (or \u003ccode\u003e100%\u003c/code\u003e) which either set from the \u003ccode\u003eorigin-color\u003c/code\u003e or set manually,\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eLet’s take an example, say, converting a color from \u003ccode\u003ergb()\u003c/code\u003e to \u003ccode\u003elab()\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: lab(from rgb(255 210 01 / 0.5) l a b / a);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAll the values above will be translated to the corresponding colors in \u003ccode\u003ergb()\u003c/code\u003e. Now, let’s take a look at another example where we convert a color from \u003ccode\u003ergb()\u003c/code\u003e to \u003ccode\u003eoklch()\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n    color: oklch(from rgb(255 210 01 / 0.5) 50% 20% h / a);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAlthough, the \u003ccode\u003el\u003c/code\u003e and \u003ccode\u003ec\u003c/code\u003e values were changed, the \u003ccode\u003eh\u003c/code\u003e and \u003ccode\u003ea\u003c/code\u003e would be taken from the original color, which in this case is a light yellowish color in \u003ccode\u003ergb()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can even be wacky and use math functions:\u003c/p\u003e\n\n\n\n\u003cp\u003eAll CSS color functions support the \u003ca href=\"https://www.w3.org/TR/css-color-5/#relative-colors\" rel=\"noopener\"\u003erelative color syntax\u003c/a\u003e. The relative color syntax, simply put, is a way to access other colors in another color function or value, then translating it to the values of the current color function. It goes “from \u003ccode\u003e\u0026lt;color\u0026gt;\u003c/code\u003e” to another.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: oklch(from rgb(255 210 01 / 0.5) calc(50% + var(--a)) calc(20% + var(--b)) h / a);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe relative color syntax is, however, different than the \u003ccode\u003ecolor()\u003c/code\u003e function in that you have to include the color space name and then fully write out the channels, like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: color(from origin-color colorspace c1 c2 c3 / alpha);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eRemember, the \u003ccode\u003ecolor-mix()\u003c/code\u003e function is not a part of this. You can have relative color functions inside the color functions you want to mix, yes, but the relative color syntax is not available in \u003ccode\u003ecolor-mix()\u003c/code\u003e directly.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"color-gradients\"\u003eColor gradients\u003c/h2\u003e\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"512\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/11/css-gradient.png?resize=1024%2C512\" alt=\"Gradient transitioning from a rich magenta color to bright orange at a 145 degree angle.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/11/css-gradient.png?resize=1024%2C512\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/11/css-gradient.png?resize=300%2C150\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/11/css-gradient.png?resize=768%2C384\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/11/css-gradient.png?resize=1000%2C500\u0026amp;ssl=1 1000w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2020/11/css-gradient.png?w=1200\u0026amp;ssl=1 1200w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eCSS is totally capable of transitioning from one color to another. See the \u003ca href=\"https://css-tricks.com/a-complete-guide-to-css-gradients/\"\u003e“CSS Gradients Guide”\u003c/a\u003e for a full run-down, including of the different types of gradients with examples.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"properties-that-support-color-values\"\u003eProperties that support color values\u003c/h2\u003e\n\n\n\u003cp\u003eThere are \u003cstrong\u003ea lot\u003c/strong\u003e of properties that support the use of color. Just so you know, this list does not contain deprecated properties.\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003eaccent-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eThis CSS property sets the accent color for UI controls like checkboxes and radio buttons, and any other form element\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eprogress {\n  accent-color: lightgreen;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eAccent colors are a way to style unique elements in respect to the chosen color scheme.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003ebackground-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eApplies solid colors as background on an element.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  background-color: #ff7a18;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003eborder-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eShorthand for setting the color of all four borders.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Sets all border colors */\n.element {\n    border-color: lch(50 50 20);\n}\n\n/* Sets top, right, bottom, left border colors */\n.element {\n  border-color: black green red blue;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003ebox-shadow\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eAdds shadows to element for creating the illusion of depth. The property accepts a number of arguments, one of which sets the shadow color.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003ecaret-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSpecifies the color of the text input cursor (caret).\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n    caret-color: lch(30 40 40);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003ecolor\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSets the foreground color of text and text decorations.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  color: lch(80 10 20);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003ecolumn-rule-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSets the color of a line between columns in a multi-column layout. This property can’t act alone, so you need to set the \u003ccode\u003ecolumns\u003c/code\u003e and \u003ccode\u003ecolumn-rule-style\u003c/code\u003e property first before using this.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  column: 3;\n  column-rule-style: solid;\n  column-rule-color: lch(20 40 40); /* highlight */\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003efill\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSets the color of the SVG shape\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  fill: lch(40 20 10);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003eflood-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSpecifies the flood color to use for \u003ccode\u003e\u0026lt;feFlood\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;feDropShadow\u0026gt;\u003c/code\u003e elements inside the \u003ccode\u003e\u0026lt;filter\u0026gt;\u003c/code\u003e element for \u003ccode\u003e\u0026lt;svg\u0026gt;\u003c/code\u003e. This should not be confused with the \u003ccode\u003eflood-color\u003c/code\u003e CSS attribute, as this is a CSS property and that’s an HTML attribute (even though they basically do the same thing). If this property is specified, it overrides the CSS \u003ccode\u003eflood-color\u003c/code\u003e attribute\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  flood-color: lch(20 40 40);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003elighting-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSpecifies the color of the lighting source to use for \u003ccode\u003e\u0026lt;feDiffuseLighting\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;feSpecularLighting\u0026gt;\u003c/code\u003e elements inside the \u003ccode\u003e\u0026lt;filter\u0026gt;\u003c/code\u003e element for \u003ccode\u003e\u0026lt;svg\u0026gt;\u003c/code\u003e. \u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  lighting-color: lch(40 10 20);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003eoutline-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSets the color of an element’s outline.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  outline-color: lch(20 40 40);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003estop-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSpecifies the color of gradient stops for the \u003ccode\u003e\u0026lt;stop\u0026gt;\u003c/code\u003e tags for \u003ccode\u003e\u0026lt;svg\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  stop-color: lch(20 40 40);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003estroke\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eDefines the color of the outline of \u003ccode\u003e\u0026lt;svg\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  stroke: lch(20 40 40);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003etext-decoration-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSets the color of text decoration lines like underlines.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  text-decoration-color: lch(20 40 40);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003etext-emphasis-color\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eSpecifies the color of emphasis marks on text.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  text-emphasis-color: lch(70 20 40);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003e\u003ccode\u003etext-shadow\u003c/code\u003e\u003c/summary\u003e\n\u003cp\u003eApplies shadow effects to text, including color.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.element {\n  text-shadow: 1px 1px 1px lch(50 10 30);\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"almanac-references\"\u003eAlmanac references\u003c/h2\u003e\n\n\n\u003cdetails\u003e\u003csummary\u003eColor functions\u003c/summary\u003e\n    \t\t\n    \u003cdiv\u003e\n      \u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2025-01-28\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Feb 22, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/functions/r/rgb/\"\u003e\n      rgb()    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/functions/r/rgb/\"\u003e\n      \u003ccode\u003e.element { color: rgb(0 0 0 / 0.5); }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2025-02-20\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Feb 22, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/functions/h/hsl/\"\u003e\n      hsl()    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/functions/h/hsl/\"\u003e\n      \u003ccode\u003e.element { color: hsl(90deg, 50%, 50%); }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2025-06-12\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Jun 12, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/?page_id=385888\"\u003e\n      hwb()    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/?page_id=385888\"\u003e\n      \u003ccode\u003e.element { color: hwb(136 40% 15%); }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2025-03-04\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Mar 4, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/functions/l/lab/\"\u003e\n      lab()    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/functions/l/lab/\"\u003e\n      \u003ccode\u003e.element { color: lab(50% 50% 50% / 0.5); }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2025-03-12\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Mar 12, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/functions/l/lch/\"\u003e\n      lch()    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/functions/l/lch/\"\u003e\n      \u003ccode\u003e.element { color: lch(10% 0.215 15deg); }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2025-04-29\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Apr 29, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/functions/o/oklab/\"\u003e\n      oklab()    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/functions/o/oklab/\"\u003e\n      \u003ccode\u003e.element { color: oklab(25.77% 25.77% 54.88%; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2025-04-03\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    May 10, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/functions/o/oklch/\"\u003e\n      oklch()    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/functions/o/oklch/\"\u003e\n      \u003ccode\u003e.element { color: oklch(70% 0.15 240); }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2025-05-02\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    May 2, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/functions/c/color/\"\u003e\n      color()    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/functions/c/color/\"\u003e\n      \u003ccode\u003e.element { color: color(rec2020 0.5 0.15 0.115 / 0.5); }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n    \u003c/div\u003e\n  \n\u003c/details\u003e\n\n\n\n\u003cdetails\u003e\u003csummary\u003eColor properties\u003c/summary\u003e\n    \t\t\n    \u003cdiv\u003e\n      \u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2021-08-26\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Apr 19, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/a/accent-color/\"\u003e\n      accent-color    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/a/accent-color/\"\u003e\n      \u003ccode\u003e.element { accent-color: #f8a100; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2015-02-17\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Jan 13, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/b/background-color/\"\u003e\n      background-color    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/b/background-color/\"\u003e\n      \u003ccode\u003e.element { background-color: #ff7a18; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2017-08-18\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Jan 27, 2021  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/c/caret-color/\"\u003e\n      caret-color    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/c/caret-color/\"\u003e\n      \u003ccode\u003e.element { caret-color: red; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2011-09-05\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Jul 11, 2022  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/c/color/\"\u003e\n      color    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/c/color/\"\u003e\n      \u003ccode\u003e.element { color: #f8a100; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2020-10-05\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Jul 11, 2022  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/c/column-rule-color/\"\u003e\n      column-rule-color    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/c/column-rule-color/\"\u003e\n      \u003ccode\u003e.element { column-rule-color: #f8a100; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2016-01-07\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Jan 27, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/f/fill/\"\u003e\n      fill    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/f/fill/\"\u003e\n      \u003ccode\u003e.element { fill: red; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2021-09-01\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Jul 11, 2022  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/o/outline-color/\"\u003e\n      outline-color    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/o/outline-color/\"\u003e\n      \u003ccode\u003e.element { outline-color: #f8a100; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2016-01-12\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Dec 15, 2024  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/s/stroke/\"\u003e\n      stroke    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/s/stroke/\"\u003e\n      \u003ccode\u003e.module {\n  stroke: black;\n}\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2015-04-03\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Aug 2, 2021  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/t/text-decoration-color/\"\u003e\n      text-decoration-color    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/t/text-decoration-color/\"\u003e\n      \u003ccode\u003e.element { text-decoration-color: orange; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2021-08-04\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Jan 27, 2023  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/t/text-emphasis/\"\u003e\n      text-emphasis    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/t/text-emphasis/\"\u003e\n      \u003ccode\u003e.element { text-emphasis: circle red; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2011-09-06\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n      Almanac\n      \u003c/strong\u003e\n\n    on\n\n    Jan 27, 2023  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/almanac/properties/t/text-shadow/\"\u003e\n      text-shadow    \u003c/a\u003e\n  \u003c/h3\u003e\n\n      \u003ca href=\"https://css-tricks.com/almanac/properties/t/text-shadow/\"\u003e\n      \u003ccode\u003ep { text-shadow: 1px 1px 1px #000; }\u003c/code\u003e\n    \u003c/a\u003e\n  \n      \n  \n  \n\n\u003c/article\u003e\n    \u003c/div\u003e\n  \n\u003c/details\u003e\n\n\n\n\u003chr/\u003e\n\n\n\u003ch2 id=\"related-articles-amp-tutorials\"\u003eRelated articles \u0026amp; tutorials\u003c/h2\u003e\n\n\n    \t\t\n    \u003cdiv\u003e\n      \u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2016-09-12\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Aug 12, 2024  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/nerds-guide-color-web/\"\u003e\n      Working With Colors Guide    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2020-05-27\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Aug 23, 2022  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/the-expanding-gamut-of-color-on-the-web/\"\u003e\n      The Expanding Gamut of Color on the Web    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2015-10-13\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Oct 13, 2015  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/the-tragicomic-history-of-css-color-names/\"\u003e\n      The Tragicomic History of CSS Color Names    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2022-02-10\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Feb 11, 2022  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/new-css-color-features-preview/\"\u003e\n      A Whistle-Stop Tour of 4 New CSS Color Features    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2022-02-07\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Feb 7, 2022  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/color-spaces-for-more-interesting-css-gradients/\"\u003e\n      Using Different Color Spaces for Non-Boring Gradients    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2024-10-25\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Oct 29, 2024  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/come-to-the-light-dark-side/\"\u003e\n      Come to the light-dark() Side    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2024-09-24\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Sep 24, 2024  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/color-mixing-with-animation-composition/\"\u003e\n      Color Mixing With Animation Composition    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2016-09-08\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Sep 13, 2016  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/8-digit-hex-codes/\"\u003e\n      8-Digit Hex Codes?    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2021-02-24\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Feb 24, 2021  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/a-dry-approach-to-color-themes-in-css/\"\u003e\n      A DRY Approach to Color Themes in CSS    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2007-10-30\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Apr 6, 2017  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/accessibility-basics-testing-your-page-for-color-blindness/\"\u003e\n      Accessibility Basics: Testing Your Page For Color Blindness    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2020-03-09\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Mar 9, 2020  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/adventures-in-css-semi-transparency-land/\"\u003e\n      Adventures in CSS Semi-Transparency Land    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2016-07-15\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Mar 4, 2017  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/table-border-collapse-issue/\"\u003e\n      Change Color of All Four Borders Even With `border-collapse: collapse;`    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2019-05-28\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Jan 2, 2020  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/color-contrast-accessibility-tools/\"\u003e\n      Color contrast accessibility tools    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2019-08-14\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Aug 14, 2019  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/contextual-utility-classes-for-color-with-custom-properties/\"\u003e\n      Contextual Utility Classes for Color with Custom Properties    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2020-04-16\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Jun 26, 2021  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/creating-color-themes-with-custom-properties-hsl-and-a-little-calc/\"\u003e\n      Creating Color Themes With Custom Properties, HSL, and a Little calc()    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2021-05-04\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    May 4, 2021  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/creating-colorful-smart-shadows/\"\u003e\n      Creating Colorful, Smart Shadows    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2018-02-13\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Feb 21, 2018  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/css-basics-using-fallback-colors/\"\u003e\n      CSS Basics: Using Fallback Colors    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2019-10-21\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Oct 21, 2019  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/designing-accessible-color-systems/\"\u003e\n      Designing accessible color systems    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2020-11-16\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Jun 22, 2021  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/mixing-colors-in-pure-css/\"\u003e\n      Mixing Colors in Pure CSS    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2008-02-01\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Jul 26, 2016  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/overriding-the-default-text-selection-color-with-css/\"\u003e\n      Overriding The Default Text Selection Color With CSS    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2015-10-19\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Oct 21, 2015  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/reverse-text-color-mix-blend-mode/\"\u003e\n      Reverse Text Color Based on Background Color Automatically in CSS    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2019-12-27\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Dec 27, 2019  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/so-many-color-links/\"\u003e\n      So Many Color Links    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2018-08-10\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Aug 18, 2018  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/switch-font-color-for-different-backgrounds-with-css/\"\u003e\n      Switch font color for different backgrounds with CSS    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2020-01-20\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Jan 20, 2020  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/the-best-color-functions-in-css/\"\u003e\n      The Best Color Functions in CSS?    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2018-12-07\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    Dec 3, 2021  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/what-do-you-name-color-variables/\"\u003e\n      What do you name color variables?    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n\u003carticle id=\"mini-post-386735\"\u003e\n\n  \u003ctime datetime=\"2025-05-07\" title=\"Originally published Jun 19, 2025\"\u003e\n    \u003cstrong\u003e\n                \n        Article\n      \u003c/strong\u003e\n\n    on\n\n    May 8, 2025  \u003c/time\u003e\n\n  \u003ch3\u003e\n    \u003ca href=\"https://css-tricks.com/why-is-nobody-using-the-hwb-color-function/\"\u003e\n      Why is Nobody Using the hwb() Color Function?    \u003c/a\u003e\n  \u003c/h3\u003e\n\n  \n      \n  \n  \n\n\u003c/article\u003e\n    \u003c/div\u003e\n  \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "34 min read",
  "publishedTime": "2025-06-19T09:01:18-06:00",
  "modifiedTime": "2025-06-19T09:31:55-06:00"
}
