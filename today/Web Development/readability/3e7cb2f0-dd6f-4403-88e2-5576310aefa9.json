{
  "id": "3e7cb2f0-dd6f-4403-88e2-5576310aefa9",
  "title": "Down and to the Right: Firefox Got Faster for Real Users in 2023",
  "link": "https://hacks.mozilla.org/2023/10/down-and-to-the-right-firefox-got-faster-for-real-users-in-2023/",
  "description": "To deliver against our vision and enable a better online experience for everyone, we’ve been working hard on making Firefox even faster. We’re extremely happy to report that this has resulted in a significant improvement in speed over the past year. The post Down and to the Right: Firefox Got Faster for Real Users in 2023 appeared first on Mozilla Hacks - the Web developer blog.",
  "author": "Bas Schouten",
  "published": "Tue, 31 Oct 2023 16:29:05 +0000",
  "source": "https://hacks.mozilla.org/feed/",
  "categories": [
    "Developer Tools",
    "Featured Article",
    "Firefox",
    "JavaScript",
    "browser",
    "firefox",
    "speed"
  ],
  "byline": "By Bas Schouten",
  "length": 5043,
  "excerpt": "We’ve been working hard on making Firefox even faster and we’re extremely happy to report that this has resulted in an improvement in speed.",
  "siteName": "Mozilla Hacks – the Web developer blog",
  "favicon": "",
  "text": "One of the biggest challenges for any software is to determine how changes impact user experience in the real world. Whether it’s the processing speed of video editing software or the smoothness of a browsing experience, there’s only so much you can tell from testing in a controlled lab environment. While local experiments can provide plenty of metrics, improvements to those metrics may not translate to a better user experience. This can be especially challenging with complex client software running third-party code like Firefox, and it’s a big reason why we’ve undertaken the Speedometer 3 effort alongside other web browsers. Our goal is to build performance tests that simulate real-world user experiences so that browsers have better tools to drive improvements for real users on real webpages. While it’s easy to see that benchmarks have improved in Firefox throughout the year as a result of this work, what we really care about is how much those wins are being felt by our users. In order to measure the user experience, Firefox collects a wide range of anonymized timing metrics related to page load, responsiveness, startup and other aspects of browser performance. Collecting data while holding ourselves to the highest standards of privacy can be challenging. For example, because we rely on aggregated metrics, we lack the ability to pinpoint data from any particular website. But perhaps even more challenging is analyzing the data once collected and drawing actionable conclusions. In the future we’ll talk more about these challenges and how we’re addressing them, but in this post we’d like to share how some of the metrics that are fundamental to how our users experience the browser have improved throughout the year. Let’s start with page load. First Contentful Paint (FCP) is a better metric for felt performance than the `onload` event. We’re tracking the time it takes between receiving the first byte from the network to FCP. This tells us how much faster we are giving feedback to the user that the page is successfully loading, so it’s a critical metric for understanding the user experience. While much of this is up to web pages themselves, if the browser improves performance across the board, we expect this number to go down. Image 1 – Median time from Response Start to First Contentful Paint in milliseconds We can see that this time improved from roughly 250ms at the start of the year to 215ms in October. This means that a user receives feedback on page loads almost 15% faster than they did at the start of the year. And it’s important to note that this is all the result of optimization work that didn’t even explicitly target pageload. In order to understand where this improvement is coming from, let’s look at another piece of timing data: the amount of time that was spent executing JavaScript code during a pageload. Here we are going to look at the 95th percentile, representing the most JS heavy pages and highlighting a big opportunity for us to remove friction for users. Image 2 – 95th Percentile of JS execution time during pageload in milliseconds This shows the 95th percentile improving from ~1560ms at the beginning of the year, to ~1260ms in October. This represents a considerable improvement of 300ms, or almost 20%, and is likely responsible for a significant portion of the reduced FCP times. This makes sense, since Speedometer 3 work has led to significant optimizations to the SpiderMonkey JavaScript engine (a story for another post). We’d also like to know how responsive pages are after they are loaded. For example, how smooth is the response when typing on the keyboard as I write this blogpost! The primary metric we collect here is the “keypress present latency”; the time between a key being pressed on the keyboard and its result being presented onto the screen. Rendering some text to the screen may sound simple, but there’s a lot going on to make that happen – especially when web pages run main thread JavaScript to respond to the keypress event. Most typing is snappy and primarily limited by hardware (e.g. the refresh rate of the monitor), but it’s extremely disruptive when it’s not. This means it’s important to mitigate the worst cases, so we’ll again look at the 95th percentile. Image 3 – 95th Percentile of the keypress present latency Once again we see a measurable improvement. The 95th percentile hovered around 65ms for most of the year and dropped to under 59ms after the Firefox 116 and 117 releases in August. A 10% improvement to the slowest keypresses means users are experiencing more instantaneous feedback and fewer disruptions while typing. We’ve been motivated by the improvements we’re seeing in our telemetry data, and we’re convinced that our efforts this year are having a positive effect on Firefox users. We have many more optimizations in the pipeline and will share more details about those and our overall progress in future posts. More articles by Bas Schouten…",
  "image": "https://hacks.mozilla.org/wp-content/uploads/2023/10/FF-speed.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle role=\"article\"\u003e\n    \u003cp\u003eOne of the biggest challenges for any software is to determine how changes impact user experience in the real world. Whether it’s the processing speed of video editing software or the smoothness of a browsing experience, there’s only so much you can tell from testing in a controlled lab environment. While local experiments can provide plenty of metrics, improvements to those metrics may not translate to a better user experience.\u003c/p\u003e\n\u003cp\u003eThis can be especially challenging with complex client software running third-party code like Firefox, and it’s a big reason why we’ve undertaken the \u003ca href=\"https://twitter.com/mozhacks/status/1603435347190419456\"\u003eSpeedometer 3 effort\u003c/a\u003e alongside other web browsers. Our goal is to build performance tests that simulate real-world user experiences so that browsers have better tools to drive improvements for real users on real webpages. While it’s easy to see that benchmarks have improved in Firefox throughout the year as a result of this work, what we really care about is how much those wins are being felt by our users.\u003c/p\u003e\n\u003cp\u003eIn order to measure the user experience, Firefox collects a wide range of anonymized timing metrics related to page load, responsiveness, startup and other aspects of browser performance. Collecting data while holding ourselves to the highest standards of privacy can be challenging. For example, because we rely on aggregated metrics, we lack the ability to pinpoint data from any particular website. But perhaps even more challenging is analyzing the data once collected and drawing actionable conclusions. In the future we’ll talk more about these challenges and how we’re addressing them, but in this post we’d like to share how some of the metrics that are fundamental to how our users experience the browser have improved throughout the year.\u003c/p\u003e\n\u003cp\u003eLet’s start with page load. \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/First_contentful_paint\"\u003eFirst Contentful Paint\u003c/a\u003e (FCP) is a better metric for felt performance than the `onload` event. We’re tracking the time it takes between receiving the first byte from the network to FCP. This tells us how much faster we are giving feedback to the user that the page is successfully loading, so it’s a critical metric for understanding the user experience. While much of this is up to web pages themselves, if the browser improves performance across the board, we expect this number to go down.\u003c/p\u003e\n\u003cdiv id=\"attachment_48049\"\u003e\u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/wp-content/uploads/2023/10/FCPRUM.png\"\u003e\u003cimg fetchpriority=\"high\" decoding=\"async\" aria-describedby=\"caption-attachment-48049\" src=\"https://hacks.mozilla.org/wp-content/uploads/2023/10/FCPRUM-500x215.png\" alt=\"Graph of the median time between response start and first contentful paint, going from ~250 to ~215. Three distinct areas with a more pronounced slope are visible in mid february, late April and the largest in late July.\" width=\"500\" height=\"215\" srcset=\"https://hacks.mozilla.org/wp-content/uploads/2023/10/FCPRUM-500x215.png 500w, https://hacks.mozilla.org/wp-content/uploads/2023/10/FCPRUM-250x107.png 250w, https://hacks.mozilla.org/wp-content/uploads/2023/10/FCPRUM-768x330.png 768w, https://hacks.mozilla.org/wp-content/uploads/2023/10/FCPRUM-1536x659.png 1536w, https://hacks.mozilla.org/wp-content/uploads/2023/10/FCPRUM.png 1670w\" sizes=\"(max-width: 500px) 100vw, 500px\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"caption-attachment-48049\"\u003eImage 1 – Median time from Response Start to First Contentful Paint in milliseconds\u003c/p\u003e\u003c/div\u003e\n\u003cp\u003eWe can see that this time improved from roughly 250ms at the start of the year to 215ms in October. This means that a user receives feedback on page loads almost 15% faster than they did at the start of the year. And it’s important to note that this is all the result of optimization work that didn’t even explicitly target pageload.\u003c/p\u003e\n\u003cp\u003eIn order to understand where this improvement is coming from, let’s look at another piece of timing data: the amount of time that was spent executing JavaScript code during a pageload. Here we are going to look at the 95th percentile, representing the most JS heavy pages and highlighting a big opportunity for us to remove friction for users.\u003c/p\u003e\n\u003cdiv id=\"attachment_48050\"\u003e\u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/wp-content/uploads/2023/10/JSPRUM.png\"\u003e\u003cimg decoding=\"async\" aria-describedby=\"caption-attachment-48050\" src=\"https://hacks.mozilla.org/wp-content/uploads/2023/10/JSPRUM-500x215.png\" alt=\"A graph of the 95th percentile of JS execution time during pageload. It runs from ~1560 in January 2023 to ~1260 by October 2023. In general it\u0026#39;s a steady downward slope with a small downward jump in April and a large downward jump during August.\" width=\"500\" height=\"215\" srcset=\"https://hacks.mozilla.org/wp-content/uploads/2023/10/JSPRUM-500x215.png 500w, https://hacks.mozilla.org/wp-content/uploads/2023/10/JSPRUM-250x107.png 250w, https://hacks.mozilla.org/wp-content/uploads/2023/10/JSPRUM-768x330.png 768w, https://hacks.mozilla.org/wp-content/uploads/2023/10/JSPRUM-1536x659.png 1536w, https://hacks.mozilla.org/wp-content/uploads/2023/10/JSPRUM.png 1670w\" sizes=\"(max-width: 500px) 100vw, 500px\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"caption-attachment-48050\"\u003eImage 2 – 95th Percentile of JS execution time during pageload in milliseconds\u003c/p\u003e\u003c/div\u003e\n\u003cp\u003eThis shows the 95th percentile improving from ~1560ms at the beginning of the year, to ~1260ms in October. This represents a considerable improvement of 300ms, or almost 20%, and is likely responsible for a significant portion of the reduced FCP times. This makes sense, since Speedometer 3 work has led to significant optimizations to the \u003ca href=\"https://spidermonkey.dev/\"\u003eSpiderMonkey\u003c/a\u003e JavaScript engine (a story for another post).\u003c/p\u003e\n\u003cp\u003eWe’d also like to know how responsive pages are after they are loaded. For example, how smooth is the response when typing on the keyboard as I write this blogpost! The primary metric we collect here is the “keypress present latency”; the time between a key being pressed on the keyboard and its result being presented onto the screen. Rendering some text to the screen may sound simple, but there’s a lot going on to make that happen – especially when web pages run main thread JavaScript to respond to the keypress event. Most typing is snappy and primarily limited by hardware (e.g. the refresh rate of the monitor), but it’s extremely disruptive when it’s not. This means it’s important to mitigate the worst cases, so we’ll again look at the 95th percentile.\u003c/p\u003e\n\u003cdiv id=\"attachment_48048\"\u003e\u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/wp-content/uploads/2023/10/KeypressRUM.png\"\u003e\u003cimg loading=\"lazy\" decoding=\"async\" aria-describedby=\"caption-attachment-48048\" src=\"https://hacks.mozilla.org/wp-content/uploads/2023/10/KeypressRUM-500x215.png\" alt=\"A graph of the 95th percentile of the keypress present latency. Ranging from January 2023 to October 2023. It hovers fairly steady around 65ms, even seemingly going up a bit between March and May. Before dropping down to about 58-59ms over the course of August and September 2023.\" width=\"500\" height=\"215\" srcset=\"https://hacks.mozilla.org/wp-content/uploads/2023/10/KeypressRUM-500x215.png 500w, https://hacks.mozilla.org/wp-content/uploads/2023/10/KeypressRUM-250x107.png 250w, https://hacks.mozilla.org/wp-content/uploads/2023/10/KeypressRUM-768x330.png 768w, https://hacks.mozilla.org/wp-content/uploads/2023/10/KeypressRUM-1536x659.png 1536w, https://hacks.mozilla.org/wp-content/uploads/2023/10/KeypressRUM.png 1670w\" sizes=\"(max-width: 500px) 100vw, 500px\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"caption-attachment-48048\"\u003eImage 3 – 95th Percentile of the keypress present latency\u003c/p\u003e\u003c/div\u003e\n\u003cp\u003eOnce again we see a measurable improvement. The 95th percentile hovered around 65ms for most of the year and dropped to under 59ms after the Firefox 116 and 117 releases in August. A 10% improvement to the slowest keypresses means users are experiencing more instantaneous feedback and fewer disruptions while typing.\u003c/p\u003e\n\u003cp\u003eWe’ve been motivated by the improvements we’re seeing in our telemetry data, and we’re convinced that our efforts this year are having a positive effect on Firefox users. We have many more optimizations in the pipeline and will share more details about those and our overall progress in future posts.\u003c/p\u003e\n    \u003csection\u003e\n                                \n                                \u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/author/bschoutenmozilla-com/\"\u003eMore articles by Bas Schouten…\u003c/a\u003e\u003c/p\u003e\n                  \u003c/section\u003e\n  \u003c/article\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
