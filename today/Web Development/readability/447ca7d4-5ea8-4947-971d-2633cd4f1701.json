{
  "id": "447ca7d4-5ea8-4947-971d-2633cd4f1701",
  "title": "Tight Mode: Why Browsers Produce Different Performance Results",
  "link": "https://css-tricks.com/tight-mode-why-browsers-produce-different-performance-results/",
  "description": "I wrote a post for Smashing Magazine that was published today about this thing that Chrome and Safari have called “Tight Mode” and how it impacts page performance. I’d never heard the term until DebugBear’s Matt Zeunert mentioned it in … Tight Mode: Why Browsers Produce Different Performance Results originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Thu, 09 Jan 2025 16:16:15 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Links",
    "performance"
  ],
  "byline": "Geoff Graham",
  "length": 1758,
  "excerpt": "I wrote a post for Smashing Magazine that was published today about this thing that Chrome and Safari have called \"Tight Mode\" and how it impacts page",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "I wrote a post for Smashing Magazine that was published today about this thing that Chrome and Safari have called “Tight Mode” and how it impacts page performance. I’d never heard the term until DebugBear’s Matt Zeunert mentioned it in a passing conversation, but it’s a not-so-new deal and yet there’s precious little documentation about it anywhere. So, Matt shared a couple of resources with me and I used those to put some notes together that wound up becoming the article that was published. In short: Tight Mode discriminates resources, taking anything and everything marked as High and Medium priority. Everything else is constrained and left on the outside, looking in until the body is firmly attached to the document, signaling that blocking scripts have been executed. It’s at that point that resources marked with Low priority are allowed in the door during the second phase of loading. The implications are huge, as it means resources are not treated equally at face value. And yet the way Chrome and Safari approach it is wildly different, meaning the implications are wildly different depending on which browser is being evaluated. Firefox doesn’t enforce it, so we’re effectively looking at three distinct flavors of how resources are fetched and rendered on the page. It’s no wonder web performance is a hard discipline when we have these moving targets. Sure, it’s great that we now have a consistent set of metrics for evaluating, diagnosing, and discussing performance in the form of Core Web Vitals — but those metrics will never be consistent from browser to browser when the way resources are accessed and prioritized varies. Direct Link →",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/383563",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003e\u003ca href=\"https://www.smashingmagazine.com/2025/01/tight-mode-why-browsers-produce-different-performance-results/\" rel=\"noopener\"\u003eI wrote a post for Smashing Magazine \u003c/a\u003ethat was published today about this thing that Chrome and Safari have called “Tight Mode” and how it impacts page performance. I’d never heard the term until DebugBear’s Matt Zeunert mentioned it in a passing conversation, but it’s a not-so-new deal and yet there’s precious little documentation about it anywhere.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, Matt shared a couple of resources with me and I used those to put some notes together that wound up becoming the article that was published. In short:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eTight Mode discriminates resources, taking anything and everything marked as High and Medium priority. Everything else is constrained and left on the outside, looking in until the body is firmly attached to the document, signaling that blocking scripts have been executed. It’s at that point that resources marked with Low priority are allowed in the door during the second phase of loading.\u003c/p\u003e\n\n\n\n\u003cspan id=\"more-383563\"\u003e\u003c/span\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThe implications are huge, as it means resources are not treated equally at face value. And yet the way Chrome and Safari approach it is wildly different, meaning the implications are wildly different depending on which browser is being evaluated. Firefox doesn’t enforce it, so we’re effectively looking at three distinct flavors of how resources are fetched and rendered on the page.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt’s no wonder web performance is a hard discipline when we have these moving targets. Sure, it’s great that we now have a consistent set of metrics for evaluating, diagnosing, and discussing performance in the form of Core Web Vitals — but those metrics will never be consistent from browser to browser when the way resources are accessed and prioritized varies.\u003c/p\u003e\n\n                      \u003cp\u003e     \n                              \u003ca href=\"https://www.smashingmagazine.com/2025/01/tight-mode-why-browsers-produce-different-performance-results/\"\u003e\n                  Direct Link →\n                \u003c/a\u003e\n              \n                          \u003c/p\u003e\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-01-09T09:16:15-07:00",
  "modifiedTime": "2025-01-09T09:16:19-07:00"
}
