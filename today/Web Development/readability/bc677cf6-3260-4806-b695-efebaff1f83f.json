{
  "id": "bc677cf6-3260-4806-b695-efebaff1f83f",
  "title": "Color Mixing With Animation Composition",
  "link": "https://css-tricks.com/color-mixing-with-animation-composition/",
  "description": "Mixing colors in CSS is pretty much a solved deal, thanks to the more recent color-mix() function as it gains support. Pass in two color values — any two color values at all — and optionally set the proportions. background-color: … Color Mixing With Animation Composition originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Tue, 24 Sep 2024 18:22:01 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles"
  ],
  "byline": "Geoff Graham",
  "length": 3511,
  "excerpt": "Mixing colors in CSS is pretty much a solved deal, thanks to the more recent color-mix() function as it gains support. Pass in two color values — any two",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! Mixing colors in CSS is pretty much a solved deal, thanks to the more recent color-mix() function as it gains support. Pass in two color values — any two color values at all — and optionally set the proportions. background-color: color-mix(#000 30%, #fff 70%); We also have the relative color syntax that can manipulate colors from one color space to another and modify them from there. The preeminent use case being a way to add opacity to color values that don’t support it, such as named colors. background-color: hsl(from black h s l); /* hsl(0 0% 0%) */ background-color: hsl(from black h s l / 50%); /* hsl(0 0% 0% / 50%) */ We can get hacky and overlay one opaque element with another, I suppose. Same general idea maybe, but with mix-blend-mode? Another roundabout way of getting there is something I saw this morning when looking over the updates that Ryan added to the animation property in the Almanac. Now, we all know that animation is shorthand for about a gajillion other properties (the order of which always eludes me). One of those is animation-composition and it’s used to… well, Ryan nails the explanation: Defining a property in CSS also sets what is considered the underlying value of the property. By default, keyframe animations will ignore the underlying value, as they only consider the effect values defined within the animation. Keyframes create a stack of effect values, which determines the order in which the animation renders to the browser. Composite operations are how CSS handles the underlying effect combined with the keyframe effect value. Manuel Matuzović and Robin Rendle also have excellent ways of explaining the property, the former of which sparked us to update the Almanac. OK! We have three values supported by animation-composition to replace the underlying property value in favor of the effect value defined in keyframes, add to them, or accumulate for combining multiple values. The add value is what’s interesting to us because… oh gosh, let’s just let Ryan take it: [I]nstead of replacing an underlying background-color property value with the keyframe’s effect value, the color type values are combined, creating new colors. A-ha! The example goes like this: See that? The add value blends the two colors as one transitions to the other. Notice, too, how much smoother that transition is than the replace value, although we wind up with a completely new color at the 100% mark rather than the color we declared in the keyframes. What if we pause the animation at some arbitrary point? Can we extract a new color value from it? Ryan made this so that hovering on the elements pauses the animation. If we crack open DevTools and force the :hover pseudo on the element, maybe we can head over to the Computed tab to get the new color value. Interestingly, we get some RGB conversions in there. Probably because updating color channels is easier than converting one hex to another? Browsers do smart stuff. Now I want to go update my old color interpolation demo… Hmm, not any different to my untrained eye. Maybe that’s only because we’re changing the HSL’s hue channel and it’s super subtle. Whatever the case, animation-composition can produce new computed color values. What you need those for and what you’d do with them? I dunno, but go wild.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/381068",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \u003cmain id=\"post-381068\"\u003e\n\n    \u003carticle\u003e\n\n      \n        \u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\n        \u003cdiv\u003e\n\n          \n          \n\u003cp\u003eMixing colors in CSS is pretty much a solved deal, thanks to the more recent \u003ccode\u003ecolor-mix()\u003c/code\u003e function as it gains support. Pass in two color values — any two color values at all — and optionally set the proportions.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebackground-color: color-mix(#000 30%, #fff 70%);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe also have the relative color syntax that can manipulate colors from one color space to another and modify them from there. The preeminent use case being a way to add opacity to color values that don’t support it, such as named colors.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebackground-color: hsl(from black h s l); /* hsl(0 0% 0%) */\nbackground-color: hsl(from black h s l / 50%); /* hsl(0 0% 0% / 50%) */\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can get hacky and overlay one opaque element with another, I suppose.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eSame general idea maybe, but with \u003ccode\u003e\u003ca href=\"https://codepen.io/geoffgraham/pen/BaXBLYY?editors=0100\" rel=\"noopener\"\u003emix-blend-mode\u003c/a\u003e\u003c/code\u003e?\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAnother roundabout way of getting there is something I saw this morning when looking over the updates that Ryan added to \u003ca href=\"https://css-tricks.com/almanac/properties/a/animation/\"\u003ethe \u003ccode\u003eanimation\u003c/code\u003e property in the Almanac\u003c/a\u003e. Now, we all know that \u003ccode\u003eanimation\u003c/code\u003e is shorthand for about a gajillion other properties (the order of which always eludes me). One of those is \u003ccode\u003eanimation-composition\u003c/code\u003e and it’s used to… well, Ryan nails the explanation:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eDefining a property in CSS also sets what is considered the \u003cem\u003eunderlying\u003c/em\u003e value of the property. By default, keyframe animations will ignore the underlying value, as they only consider the effect values defined within the animation. Keyframes create a stack of effect values, which determines the order in which the animation renders to the browser. Composite operations are how CSS handles the underlying effect \u003cem\u003ecombined\u003c/em\u003e with the keyframe effect value.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://matuzo.at/blog/2024/100daysof-day109\" rel=\"noopener\"\u003eManuel Matuzović\u003c/a\u003e and \u003ca href=\"https://csscade.com/the-animation-composition-property/\" rel=\"noopener\"\u003eRobin Rendle\u003c/a\u003e also have excellent ways of explaining the property, the former of which sparked us to update the Almanac.\u003c/p\u003e\n\n\n\n\u003cp\u003eOK! We have three values supported by \u003ccode\u003eanimation-composition\u003c/code\u003e to \u003ccode\u003ereplace\u003c/code\u003e the underlying property value in favor of the effect value defined in keyframes, \u003ccode\u003eadd\u003c/code\u003e to them, or \u003ccode\u003eaccumulate\u003c/code\u003e for combining multiple values. The \u003ccode\u003eadd\u003c/code\u003e value is what’s interesting to us because… oh gosh, let’s just let Ryan take it:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e[I]nstead of replacing an underlying \u003ccode\u003ebackground-color\u003c/code\u003e property value with the keyframe’s effect value, the color type values are combined, creating new colors.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eA-ha! The example goes like this:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eSee that? The \u003ccode\u003eadd\u003c/code\u003e value blends the two colors as one transitions to the other. Notice, too, how much smoother that transition is than the \u003ccode\u003ereplace\u003c/code\u003e value, although we wind up with a completely new color at the 100% mark rather than the color we declared in the keyframes. What if we pause the animation at some arbitrary point? Can we extract a new color value from it?\u003c/p\u003e\n\n\n\n\u003cp\u003eRyan made this so that hovering on the elements pauses the animation. If we crack open DevTools and force the \u003ccode\u003e:hover\u003c/code\u003e pseudo on the element, maybe we can head over to the Computed tab to get the new color value.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1808\" height=\"810\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/color-animation-composition-add-devtools-draw.png?resize=1808%2C810\u0026amp;ssl=1\" alt=\"DevTools showing an RGB color value for the demo\u0026#39;s background color property equal to rgb(241, 212, 255).\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/color-animation-composition-add-devtools-draw.png?w=1808\u0026amp;ssl=1 1808w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/color-animation-composition-add-devtools-draw.png?resize=300%2C134\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/color-animation-composition-add-devtools-draw.png?resize=1024%2C459\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/color-animation-composition-add-devtools-draw.png?resize=768%2C344\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/color-animation-composition-add-devtools-draw.png?resize=1536%2C688\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eInterestingly, we get some RGB conversions in there. Probably because updating color channels is easier than converting one hex to another? Browsers do smart stuff.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow I want to go update my old color interpolation demo… \u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eHmm, not any different to my untrained eye. Maybe that’s only because we’re changing the HSL’s hue channel and it’s super subtle. Whatever the case, \u003ccode\u003eanimation-composition\u003c/code\u003e can produce new computed color values. What you need those for and what you’d do with them? I dunno, but go wild.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\n\n    \u003c/article\u003e\n\n  \u003c/main\u003e\n\n        \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-09-24T12:22:01-06:00",
  "modifiedTime": "2024-09-24T12:22:11-06:00"
}
