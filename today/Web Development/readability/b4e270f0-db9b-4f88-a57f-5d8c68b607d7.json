{
  "id": "b4e270f0-db9b-4f88-a57f-5d8c68b607d7",
  "title": "The selectmenu Element is No More…Long Live select!",
  "link": "https://css-tricks.com/the-selectmenu-element-is-no-morelong-live-select/",
  "description": "I was looking over an older article Patrick Brosset penned for us introducing , a new proposal at the time for a more style-able cousin to . From there, I clicked the linked-up explainer and got… this:… The selectmenu Element is No More…Long Live select! originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Mon, 23 Sep 2024 15:43:05 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Links",
    "forms"
  ],
  "byline": "Geoff Graham",
  "length": 2201,
  "excerpt": "I was looking over an older article Patrick Brosset penned for us introducing \u003cselectmenu\u003e, a new proposal at the time for a more style-able cousin",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! I was looking over an older article Patrick Brosset penned for us introducing \u003cselectmenu\u003e, a new proposal at the time for a more style-able cousin to \u003cselect\u003e. From there, I clicked the linked-up \u003cselectmenu\u003e explainer and got… this: OK, link rot is a thing and happens all the time. Perhaps the site needs a little URL designing? But no, it’s not that at all. I searched a bit and found Jared White’s post saying that \u003cselectmenu\u003e is no more, which came by way of Una’s post over at the Chrome Developer Blog seeking feedback on a “customizable select”. And Adam Argyle’s got a wonderful demo dedicated to it, no surprise there. I’m only sharing the links for now but plan to spend some time with it and jot down notes on Open UI’s new page for the Customizable \u003cselect\u003e. I enjoyed looking at the boilerplate from Adam’s demo as a first glance: select { \u0026, \u0026::picker(select) { appearance: base-select; } \u0026::picker(select) { transition: display allow-discrete 1s, opacity 1s, overlay 1s allow-discrete ; } \u0026:not(:open)::picker(select) { opacity: 0; } \u0026:open::picker(select) { opacity: 1; @starting-style { opacity: 0; } } } I see the ::picker(select) there that’s driving all of it. If I sneak a peek at Una’s post, I see that there are more ways to select different \u003cselect\u003e parts, including: \u003cselectedoption\u003e (the current selection) \u003coption\u003e (which now accepts HTML in between the tags!) option::before option:checked (a little confusion here with the selected option) \u003cbutton\u003e (the little chevron arrow marker thingy) So, perhaps Chrome is more of a fan of extending the native \u003cselect\u003e with additional CSS features for selecting the existing parts rather than moving forward with a completely new element. That’s cool, as one of Una’s demos shows how we still get the default \u003cselect\u003e behavior even if a browser does not support the new selectors. Direct Link →",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/381134",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI was looking over \u003ca href=\"https://css-tricks.com/the-selectmenu-element/\"\u003ean older article Patrick Brosset penned for us\u003c/a\u003e introducing \u003ccode\u003e\u0026lt;selectmenu\u0026gt;\u003c/code\u003e, a new proposal at the time for a more style-able cousin to \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e. From there, I clicked the linked-up \u003ccode\u003e\u0026lt;selectmenu\u0026gt;\u003c/code\u003e \u003ca href=\"https://open-ui.org/components/select\" rel=\"noopener\"\u003eexplainer\u003c/a\u003e and got… this:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"2226\" height=\"1550\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-20-at-10.55.41 AM.png?resize=2226%2C1550\u0026amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-20-at-10.55.41 AM.png?w=2226\u0026amp;ssl=1 2226w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-20-at-10.55.41 AM.png?resize=300%2C209\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-20-at-10.55.41 AM.png?resize=1024%2C713\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-20-at-10.55.41 AM.png?resize=768%2C535\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-20-at-10.55.41 AM.png?resize=1536%2C1070\u0026amp;ssl=1 1536w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/09/Screenshot-2024-09-20-at-10.55.41 AM.png?resize=2048%2C1426\u0026amp;ssl=1 2048w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eOK, \u003ca href=\"https://remysharp.com/2023/12/04/unrot-that-link\" rel=\"noopener\"\u003elink rot\u003c/a\u003e is a thing and happens all the time. Perhaps the site needs a little \u003ca href=\"https://blog.jim-nielsen.com/2023/examples-of-great-urls/\" rel=\"noopener\"\u003eURL designing\u003c/a\u003e? But no, it’s not that at all. I searched a bit and found \u003ca href=\"https://thathtml.blog/2024/09/new-select-styling-proposal/\" rel=\"noopener\"\u003eJared White’s post\u003c/a\u003e saying that \u003ccode\u003e\u0026lt;selectmenu\u0026gt;\u003c/code\u003e is no more, which came by way of \u003ca href=\"https://developer.chrome.com/blog/rfc-customizable-select\" rel=\"noopener\"\u003eUna’s post over at the Chrome Developer Blog\u003c/a\u003e seeking feedback on a “customizable select”. And \u003ca href=\"https://nerdy.dev/custom-select-with-transitions-boilerplate\" rel=\"noopener\"\u003eAdam Argyle’s got a wonderful demo dedicated to it\u003c/a\u003e, no surprise there.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’m only sharing the links for now but plan to spend some time with it and jot down notes on \u003ca href=\"https://open-ui.org/components/customizableselect/\" rel=\"noopener\"\u003eOpen UI’s new page\u003c/a\u003e for the Customizable \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e. I enjoyed looking at \u003ca href=\"https://nerdy.dev/custom-select-with-transitions-boilerplate#the-boilerplate\" rel=\"noopener\"\u003ethe boilerplate from Adam’s demo\u003c/a\u003e as a first glance:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eselect {\n  \u0026amp;, \u0026amp;::picker(select) {\n    appearance: base-select;\n  }\n  \n  \u0026amp;::picker(select) {\n    transition: \n      display allow-discrete 1s, \n      opacity 1s, \n      overlay 1s allow-discrete\n    ;\n  }\n  \n  \u0026amp;:not(:open)::picker(select) {\n    opacity: 0;\n  }\n  \n  \u0026amp;:open::picker(select) {\n    opacity: 1;\n    \n    @starting-style {\n      opacity: 0;\n    }\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI see the \u003ccode\u003e::picker(select)\u003c/code\u003e there that’s driving all of it. If I sneak a peek at Una’s post, I see that there are more ways to select different \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e parts, including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;selectedoption\u0026gt;\u003c/code\u003e (the current selection)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u0026lt;option\u0026gt;\u003c/code\u003e (which now accepts HTML in between the tags!)\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eoption::before\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eoption:checked\u003c/code\u003e (a little confusion here with the selected option)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e (the little chevron arrow marker thingy)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eSo, perhaps Chrome is more of a fan of extending the native \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e with additional CSS features for selecting the existing parts rather than moving forward with a completely new element. That’s cool, as one of Una’s demos shows how we still get the default \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e behavior even if a browser does not support the new selectors.\u003c/p\u003e\n\n\n\n\n\n                      \u003cp\u003e     \n                              \u003ca href=\"https://thathtml.blog/2024/09/new-select-styling-proposal/\"\u003e\n                  Direct Link →\n                \u003c/a\u003e\n              \n                          \u003c/p\u003e\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-09-23T09:43:05-06:00",
  "modifiedTime": "2024-09-23T09:43:08-06:00"
}
