{
  "id": "2b55b2b8-a9f0-474a-9c5d-91519f141035",
  "title": "Support Logical Shorthands in CSS",
  "link": "https://css-tricks.com/support-logical-shorthands-in-css/",
  "description": "There’s a bit of a blind spot when working with CSS logical properties concerning shorthands. Support Logical Shorthands in CSS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Mon, 24 Mar 2025 14:06:19 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Links",
    "at-rules",
    "csswg",
    "specifications"
  ],
  "byline": "Geoff Graham",
  "length": 2678,
  "excerpt": "There’s a bit of a blind spot when working with CSS logical properties concerning shorthands.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "There’s a bit of a blind spot when working with CSS logical properties concerning shorthands. Miriam explains: Logical properties are a great way to optimize our sites in advance, without any real effort. But what if we want to set multiple properties at once? This is where shorthands like margin and padding become useful. But they are currently limited to setting physical dimension. Logical properties are great, but they still feel like a second-class feature of the language. There are a few 2-value shorthands that have been implemented, like margin-block for setting both the -block-start and -block-endmargins. I find those extremely useful and concise. But the existing 4-value shorthands feel stuck in the past. It’s surprising that a size shorthand can’t set the inline-size, and the inset shorthand doesn’t include inset-block-start. Is there any way to update those shorthand properties so that they can be used to set logical dimensions? She ends with the money question, whether we can do anything about it. We’re currently in a position of having to choose between supporting flow-relative terms like block-start and inline-start with longhand properties and the ergonomic benefits of writing shorthand properties that are evaluated as physical terms like top, bottom, left, and right. Those of us writing CSS for a while likely have the muscle memory to adapt accordingly, but it’s otherwise a decision that has real consequences, particularly for multi-lingual sites. Note that Miriam says this is something the CSS Working Group has been working on since 2017. And there’s a little momentum to pick it up and do something about it. The first thing you can do is support Miriam’s work — everything she does with the CSS Working Group (and it’s a lot) is a labor of love and relies on sponsorships, so chipping in is one way to push things forward. The other thing you can do is chime into Miriam’s proposal that she published in 2021. I think it’s a solid idea. We can’t simply switch from physical to flow-relative terms in shorthand properties without triggering compatibility issues, so having some sort of higher-level instruction for CSS at the top of the stylesheet, perhaps as an at-rule that specifies which “mode” we’re in. \u003ccoordinate-mode\u003e = [ logical | physical ] or [ relative | absolute ] or ... @mode \u003ccoordinate-mode\u003e; /* must come after @import and before any style rules */ @mode \u003ccoordinate-mode\u003e { \u003cstylesheet\u003e } selector { property: value !\u003ccoordinate-mode\u003e; } Perhaps naming aside, it seems pretty reasonable, eh? Direct Link →",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2019/12/css-tricks-logo-gradient-outline.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eThere’s a bit of a blind spot when working with CSS logical properties concerning shorthands. Miriam explains:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eLogical properties are a great way to optimize our sites in advance, without any real effort.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut what if we want to set multiple properties at once? This is where shorthands like \u003ccode\u003emargin\u003c/code\u003e and \u003ccode\u003epadding\u003c/code\u003e become useful. But they are currently limited to setting physical dimension. Logical properties are great, but they still feel like a second-class feature of the language.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere are a few 2-value shorthands that have been implemented, like \u003ccode\u003emargin-block\u003c/code\u003e for setting both the \u003ccode\u003e-block-start\u003c/code\u003e and \u003ccode\u003e-block-end\u003c/code\u003emargins. I find those extremely useful and concise. But the existing 4-value shorthands feel stuck in the past. It’s surprising that a \u003ccode\u003esize\u003c/code\u003e shorthand can’t set the \u003ccode\u003einline-size\u003c/code\u003e, and the \u003ccode\u003einset\u003c/code\u003e shorthand doesn’t include \u003ccode\u003einset-block-start\u003c/code\u003e. Is there any way to update those shorthand properties so that they can be used to set logical dimensions?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eShe ends with the money question, whether we can do anything about it. We’re currently in a position of having to choose between supporting flow-relative terms like \u003ccode\u003eblock-start\u003c/code\u003e and \u003ccode\u003einline-start\u003c/code\u003e with longhand properties and the ergonomic benefits of writing shorthand properties that are evaluated as physical terms like \u003ccode\u003etop\u003c/code\u003e, \u003ccode\u003ebottom\u003c/code\u003e, \u003ccode\u003eleft\u003c/code\u003e, and \u003ccode\u003eright\u003c/code\u003e. Those of us writing CSS for a while likely have the muscle memory to adapt accordingly, but it’s otherwise a decision that has real consequences, particularly for multi-lingual sites.\u003c/p\u003e\n\n\n\n\u003cp\u003eNote that Miriam says this is something the CSS Working Group has been working on since 2017. And there’s a little momentum to pick it up and do something about it. The first thing you can do is \u003ca href=\"https://opencollective.com/oddbird-open-source/contribute/css-logical-shorthands-86141\" rel=\"noopener\"\u003esupport Miriam’s work\u003c/a\u003e — everything she does with the CSS Working Group (and it’s a lot) is a labor of love and relies on sponsorships, so chipping in is one way to push things forward.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe other thing you can do is chime into \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/1282#issuecomment-952428897\" rel=\"noopener\"\u003eMiriam’s proposal\u003c/a\u003e that she published in 2021. I think it’s a solid idea. We can’t simply switch from physical to flow-relative terms in shorthand properties without triggering compatibility issues, so having some sort of higher-level instruction for CSS at the top of the stylesheet, perhaps as an at-rule that specifies which “mode” we’re in.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;coordinate-mode\u0026gt; = [ logical | physical ] or [ relative | absolute ] or ...\n\n@mode \u0026lt;coordinate-mode\u0026gt;; /* must come after @import and before any style rules */\n\n@mode \u0026lt;coordinate-mode\u0026gt; { \u0026lt;stylesheet\u0026gt; }\n\nselector {\n  property: value  !\u0026lt;coordinate-mode\u0026gt;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003ePerhaps naming aside, it seems pretty reasonable, eh?\u003c/p\u003e\n\n                      \u003cp\u003e     \n                              \u003ca href=\"https://www.oddbird.net/2025/03/20/logical-shorthand/\"\u003e\n                  Direct Link →\n                \u003c/a\u003e\n              \n                          \u003c/p\u003e\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-03-24T08:06:19-06:00",
  "modifiedTime": "2025-03-24T08:06:21-06:00"
}
