{
  "id": "e456f3ee-e978-42cc-a55a-aa66ddc792f8",
  "title": "More options for styling",
  "link": "https://developer.chrome.com/blog/styling-details?hl=en",
  "description": "You can now set the display type and also style the container for the part that expands and collapses using the new ::details-content pseudo-element.",
  "author": "",
  "published": "Wed, 06 Nov 2024 08:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 9224,
  "excerpt": "You can now set the display type and also style the container for the part that expands and collapses using the new ::details-content pseudo-element.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v960e539c2421c080b00a083e0adb1dad169131e34dcce8c54dbf76c94616f031/chrome/images/favicon.png",
  "text": "Published: Nov 6, 2024 From Chrome 131 you have more options to style the structure of \u003cdetails\u003e and \u003csummary\u003e elements. You can now use these elements when building disclosure or accordion widgets. In particular, the changes introduced in Chrome 131 enable the use of the display property on these elements, and add a ::details-content pseudo-element to style the part that expands and collapses. Setting display on the \u003cdetails\u003e element Historically it wasn't possible to change the display type of the \u003cdetails\u003e element. This restriction has now been relaxed, allowing you to, for example, use grid or flex layouts on the \u003cdetails\u003e element. In the following example the exclusive accordion consists of several \u003cdetails\u003e elements placed side-by-side. When expanding one of the \u003cdetails\u003e elements, its content is placed next to the \u003csummary\u003e. Demo Recording Recording of https://codepen.io/web-dot-dev/pen/VwoBQjY in Chrome 131 This is achieved by using a flex layout on the \u003cdetails\u003e element, using the following CSS: details { display: flex; flex-direction: row; } Also allowed are other display values such as grid. A note on using display: inline A display value that can have an unexpected outcome is inline. Not because it doesn't work but because of HTML parser limitations. When placing a \u003cdetails\u003e element inside a paragraph it forces the HTML parser to first close the open paragraph, as defined in section 13.2.6.4.7 of the HTML Standard: A start tag whose tag name is one of: \"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dialog\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"main\", \"menu\", \"nav\", \"ol\", \"p\", \"search\", \"section\", \"summary\", \"ul\" If the stack of open elements has a p element in button scope, then close a p element. Insert an HTML element for the token. As a result, the \u003cdetails\u003e flows in the block direction, regardless of you having set display: inline. For example, the following markup \u003cp\u003eHello \u003cdetails\u003e…\u003c/details\u003e world\u003c/p\u003e Becomes this after parsing: \u003cp\u003eHello \u003c/p\u003e\u003cdetails\u003e…\u003c/details\u003e world\u003cp\u003e\u003c/p\u003e You can see for yourself in this demo by inspecting the parsed markup using Chrome DevTools. Note that this only applies to nesting \u003cdetails\u003e inside a \u003cp\u003e. Using display: inline on a \u003cdetails\u003e inside a \u003cdiv\u003e works fine. The ::details-content pseudo In browsers, the \u003cdetails\u003e element is implemented using Shadow DOM. It contains one \u003cslot\u003e for the summary (with a default summary child) and a \u003cslot\u003e for all remaining content, meaning all children of the \u003cdetails\u003e element except the \u003csummary\u003e element. \u003cdetails\u003e ↳ #shadow-root (user-agent) \u003cslot id=\"details-summary\"\u003e \u003csummary\u003eDetails\u003c/summary\u003e \u003c!-- The summary goes here --\u003e \u003c/slot\u003e \u003cslot id=\"details-content\"\u003e \u003c!-- All content goes here --\u003e \u003c/slot\u003e \u003c/details\u003e In addition to using more display types on \u003cdetails\u003e, the content slot can now be targeted using the ::details-content pseudo-element. You can use this pseudo to style the container that wraps the content of the \u003cdetails\u003e element. details::details-content { border: 5px dashed hotpink; } To only apply the set style when the \u003cdetails\u003e element is in the open state, prepend the [open] selector to it. [open]::details-content { border: 5px dashed hotpink; } It is recommended to only apply styling to the ::details-content pseudo when the \u003cdetails\u003e element is in the [open] state. Demo Recording Recording of https://codepen.io/web-dot-dev/pen/oNKMEYv in Chrome 131 The display type of ::details-content is set to block in the UA style sheet, whereas before it used to be display: contents. This change might work against you in some cases, such as disclosed content relying on height: 100%. If this is an issue for you, you can work around this by setting the display type back to contents, like so: details[open]::details-content { display: contents; }. Animating the ::details-content pseudo You can animate the content of the \u003cdetails\u003e element as it expands. In the following example, the width animates from 0px to 300px. ::details-content { transition: width 0.5s ease, content-visibility 0.5s ease allow-discrete; width: 0; } [open]::details-content { width: 300px; } Besides transitioning the width, the content-visibility property also needs to transition. This is because its value changes between the unopened and opened state, as defined in the User-Agent style sheet. Because that property is a discretely animatable property, you need the allow-discrete keyword to make it work. Added to the exclusive accordion demo shared before, the result becomes this: Demo Recording Recording of https://codepen.io/web-dot-dev/pen/XWvBZNo in Chrome 131 The height can also be animated. To animate to height: auto, you need to use interpolate-size or calc-size(). Additionally, to prevent the content from bleeding out of the ::details-content pseudo, apply overflow: clip to it. ::details-content { transition: height 0.5s ease, content-visibility 0.5s ease allow-discrete; height: 0; overflow: clip; } /* Browser supports interpolate-size */ @supports (interpolate-size: allow-keywords) { :root { interpolate-size: allow-keywords; } [open]::details-content { height: auto; } } /* Fallback for browsers with no interpolate-size support */ @supports not (interpolate-size: allow-keywords) { [open]::details-content { height: 150px; overflow-y: scroll; /* In case the contents should be taller than 150px */ } } You can see the code in action in the following demo, inspired by Material UI's accordion. The content of each \u003cdetails\u003e element nicely animates. Demo Recording Recording of https://codepen.io/web-dot-dev/pen/ExqpQZM in Chrome 131 In browsers with no support for ::details-content the component still works fine. The only thing visitors don't get to see is the animation. Feature detection To feature detect support for the ::details-content pseudo in CSS, use the following snippet. @supports selector(::details-content) { … } You can also use this detection as a telltale check to figure out if the browser your visitor is using supports the extra display values or not. Accessibility considerations The introduction of the ::details-content pseudo-element and the ability to change the display type does not have an impact on the accessibility of the \u003cdetails\u003e element. Like before, at least in Chromium based browsers and as per HTML Standard, the \u003cdetails\u003e element is searchable and automatically expands when the browser tries to scroll to its hidden contents in response to find-in-page, ScrollToTextFragment, and element fragment navigation. This does not change. However, before using exclusive accordions, consider if it's helpful or harmful to users. While using an exclusive accordion reduces the amount of visual space content occupies, users may have to open many items to consume all the information. This may frustrate users who want to look at multiple items at the same time. What about styling the marker? Currently styling of the list marker is not interoperable as there are two different approaches, one taken by Gecko and (current) Chromium, and another taken by WebKit (which was previously shared with Chromium). Once the feature is interoperable, our aim is to give you better control over how to style the marker. More demos To close off, here are some more demos for you to check out. They all use ::details-content. UIKit Accordion Demo Recording Recording of https://codepen.io/web-dot-dev/pen/rNXrJyQ in Chrome 131 This demo is built after the UIKit Accordion. The code is practically the same as the Material UI accordion that was shared before. Partially opened disclosure widget Demo Recording Recording of https://codepen.io/web-dot-dev/pen/PoMBQmW in Chrome 131 This demo features a partially opened disclosure widget whose content is already visible on the screen. To achieve this, the content-visibility is always set to visible. The height gets animated using calc-size() because there is a calculation involved. ::details-content { content-visibility: visible; /* Make it always visible */ transition: height 0.5s ease; height: 150px; overflow: clip; } [open]::details-content { height: calc-size(auto, size + 0.5rem); /* calc-size because we need to add a length */ } For styling convenience the content is wrapped in a wrapper div. The wrapper div gets the layout styles such as padding applied and the ::details-content pseudo is animated.",
  "image": "https://developer.chrome.com/static/blog/styling-details/image/details-thumbnail.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n    \n\n\n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Bramus\" src=\"https://web.dev/images/authors/bramus.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003e\n  Published: Nov 6, 2024\n\u003c/p\u003e\n\n\n\u003cp\u003eFrom Chrome 131 you have more options to style the structure of \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e elements. You can now use these elements when building disclosure or accordion widgets.\u003c/p\u003e\n\n\u003cp\u003eIn particular, the changes introduced in Chrome 131 enable the use of the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay\u003c/code\u003e property on these elements, and add a \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo-element to style the part that expands and collapses.\u003c/p\u003e\n\n\n    \n    \n    \n  \n\n\u003ch2 id=\"setting_display_on_the_details_element\" data-text=\"Setting display on the \u0026lt;details\u0026gt; element\" tabindex=\"-1\"\u003eSetting \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay\u003c/code\u003e on the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element\u003c/h2\u003e\n\n\u003cp\u003eHistorically it wasn\u0026#39;t possible to change the display type of the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element. This restriction has now been relaxed, allowing you to, for example, use grid or flex layouts on the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\n\u003cp\u003eIn the following example the \u003ca href=\"https://developer.chrome.com/docs/css-ui/exclusive-accordion\"\u003eexclusive accordion\u003c/a\u003e consists of several \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e elements placed side-by-side. When expanding one of the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e elements, its content is placed next to the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cdevsite-selector\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"demo\" data-text=\"Demo\" tabindex=\"-1\"\u003eDemo\u003c/h4\u003e\n      \n    \u003c/section\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"recording\" data-text=\"Recording\" tabindex=\"-1\"\u003eRecording\u003c/h4\u003e\n      \u003cfigure\u003e\n        \u003cvideo width=\"1576\" height=\"890\" loading=\"lazy\" controls=\"\" playsinline=\"\" autoplay=\"\" muted=\"\"\u003e\n          \u003csource src=\"https://developer.chrome.com/static/blog/styling-details/video/VwoBQjY.mp4\" type=\"video/mp4\"/\u003e\n        \u003c/video\u003e\n        \u003cfigcaption\u003eRecording of \u003ca href=\"https://codepen.io/web-dot-dev/pen/VwoBQjY\"\u003ehttps://codepen.io/web-dot-dev/pen/VwoBQjY\u003c/a\u003e in Chrome 131\u003c/figcaption\u003e\n      \u003c/figure\u003e\n    \u003c/section\u003e\n  \u003c/devsite-selector\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThis is achieved by using a flex layout on the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element, using the following CSS:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003edetails\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003edisplay\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eflex\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eflex-direction\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erow\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eAlso allowed are other display values such as \u003ccode translate=\"no\" dir=\"ltr\"\u003egrid\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"a_note_on_using_display_inline\" data-text=\"A note on using display: inline\" tabindex=\"-1\"\u003eA note on using \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: inline\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eA \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay\u003c/code\u003e value that can have an unexpected outcome is \u003ccode translate=\"no\" dir=\"ltr\"\u003einline\u003c/code\u003e. Not because it doesn\u0026#39;t work but because of HTML parser limitations.\u003c/p\u003e\n\n\u003cp\u003eWhen placing a \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element inside a paragraph it forces the HTML parser to first close the open paragraph, as defined \u003ca href=\"https://html.spec.whatwg.org/multipage/parsing.html#html-parser:%7E:text=A%20start%20tag%20whose%20tag%20name%20is%20one%20of%3A%20%22address%22%2C%20%22article%22%2C%20%22aside%22%2C%20%22blockquote%22%2C%20%22center%22%2C%20%22details%22%2C%20%22dialog%22%2C%20%22dir%22%2C%20%22div%22%2C%20%22dl%22%2C%20%22fieldset%22%2C%20%22figcaption%22%2C%20%22figure%22%2C%20%22footer%22%2C%20%22header%22%2C%20%22hgroup%22%2C%20%22main%22%2C%20%22menu%22%2C%20%22nav%22%2C%20%22ol%22%2C%20%22p%22%2C%20%22search%22%2C%20%22section%22%2C%20%22summary%22%2C%20%22ul%22\"\u003ein section 13.2.6.4.7 of the HTML Standard\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA start tag whose tag name is one of: \u0026#34;address\u0026#34;, \u0026#34;article\u0026#34;, \u0026#34;aside\u0026#34;, \u0026#34;blockquote\u0026#34;, \u0026#34;center\u0026#34;, \u0026#34;details\u0026#34;, \u0026#34;dialog\u0026#34;, \u0026#34;dir\u0026#34;, \u0026#34;div\u0026#34;, \u0026#34;dl\u0026#34;, \u0026#34;fieldset\u0026#34;, \u0026#34;figcaption\u0026#34;, \u0026#34;figure\u0026#34;, \u0026#34;footer\u0026#34;, \u0026#34;header\u0026#34;, \u0026#34;hgroup\u0026#34;, \u0026#34;main\u0026#34;, \u0026#34;menu\u0026#34;, \u0026#34;nav\u0026#34;, \u0026#34;ol\u0026#34;, \u0026#34;p\u0026#34;, \u0026#34;search\u0026#34;, \u0026#34;section\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;ul\u0026#34;\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eIf the stack of open elements has a p element in button scope, then close a p element.\u003c/strong\u003e\nInsert an HTML element for the token.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAs a result, the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e flows in the block direction, regardless of you having set \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: inline\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor example, the following markup\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;p\u0026gt;Hello \u0026lt;details\u0026gt;…\u0026lt;/details\u0026gt; world\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eBecomes this after parsing:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;p\u0026gt;Hello \u0026lt;/p\u0026gt;\u0026lt;details\u0026gt;…\u0026lt;/details\u0026gt; world\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eYou can see for yourself in \u003ca href=\"https://codepen.io/web-dot-dev/pen/jOgpZMY\"\u003ethis demo\u003c/a\u003e by inspecting the parsed markup using Chrome DevTools.\u003c/p\u003e\n\n\u003cp\u003eNote that this only applies to nesting \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e inside a \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;p\u0026gt;\u003c/code\u003e. Using \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: inline\u003c/code\u003e on a \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e inside a \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;div\u0026gt;\u003c/code\u003e works fine.\u003c/p\u003e\n\n\u003ch2 id=\"the_details-content_pseudo\" data-text=\"The ::details-content pseudo\" tabindex=\"-1\"\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo\u003c/h2\u003e\n\n\u003cp\u003eIn browsers, the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is implemented using \u003ca href=\"https://developer.mozilla.org/docs/Web/API/Web_components/Using_shadow_DOM\"\u003eShadow DOM\u003c/a\u003e. It contains one \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;slot\u0026gt;\u003c/code\u003e for the summary (with a default summary child) and a \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;slot\u0026gt;\u003c/code\u003e for all remaining content, meaning all children of the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element except the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\n  ↳ #shadow-root (user-agent)\n      \u0026lt;slot id=\u0026#34;details-summary\u0026#34;\u0026gt;\n        \u0026lt;summary\u0026gt;Details\u0026lt;/summary\u0026gt;\n        \u0026lt;!-- The summary goes here --\u0026gt;\n      \u0026lt;/slot\u0026gt;\n      \u0026lt;slot id=\u0026#34;details-content\u0026#34;\u0026gt;\n        \u0026lt;!-- All content goes here --\u0026gt;\n      \u0026lt;/slot\u0026gt;\n\u0026lt;/details\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eIn addition to using more display types on \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e, the content slot can now be targeted using the \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo-element. You can use this pseudo to style the container that wraps the content of the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003edetails\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eborder\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003epx\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edashed\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehotpink\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eTo only apply the set style when the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is in the open state, prepend the \u003ccode translate=\"no\" dir=\"ltr\"\u003e[open]\u003c/code\u003e selector to it.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eborder\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e5\u003c/span\u003e\u003cspan\u003epx\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edashed\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehotpink\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eIt is recommended to only apply styling to the \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo when the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is in the \u003ccode translate=\"no\" dir=\"ltr\"\u003e[open]\u003c/code\u003e state.\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cdevsite-selector\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"demo_1\" data-text=\"Demo\" tabindex=\"-1\"\u003eDemo\u003c/h4\u003e\n      \n    \u003c/section\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"recording_1\" data-text=\"Recording\" tabindex=\"-1\"\u003eRecording\u003c/h4\u003e\n      \u003cfigure\u003e\n        \u003cvideo width=\"1576\" height=\"372\" loading=\"lazy\" controls=\"\" playsinline=\"\" autoplay=\"\" muted=\"\"\u003e\n          \u003csource src=\"https://developer.chrome.com/static/blog/styling-details/video/oNKMEYv.mp4\" type=\"video/mp4\"/\u003e\n        \u003c/video\u003e\n        \u003cfigcaption\u003eRecording of \u003ca href=\"https://codepen.io/web-dot-dev/pen/oNKMEYv\"\u003ehttps://codepen.io/web-dot-dev/pen/oNKMEYv\u003c/a\u003e in Chrome 131\u003c/figcaption\u003e\n      \u003c/figure\u003e\n    \u003c/section\u003e\n  \u003c/devsite-selector\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay\u003c/code\u003e type of \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e is set to \u003ccode translate=\"no\" dir=\"ltr\"\u003eblock\u003c/code\u003e in the UA style sheet, whereas before it used to be \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay: contents\u003c/code\u003e. This change might work against you in some cases, such as disclosed content relying on \u003ccode translate=\"no\" dir=\"ltr\"\u003eheight: 100%\u003c/code\u003e. If this is an issue for you, you can work around this by setting the \u003ccode translate=\"no\" dir=\"ltr\"\u003edisplay\u003c/code\u003e type back to \u003ccode translate=\"no\" dir=\"ltr\"\u003econtents\u003c/code\u003e, like so: \u003ccode translate=\"no\" dir=\"ltr\"\u003edetails[open]::details-content { display: contents; }\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"animating_the_details-content_pseudo\" data-text=\"Animating the ::details-content pseudo\" tabindex=\"-1\"\u003eAnimating the \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo\u003c/h3\u003e\n\n\u003cp\u003eYou can animate the content of the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element as it expands. In the following example, the width animates from \u003ccode translate=\"no\" dir=\"ltr\"\u003e0px\u003c/code\u003e to \u003ccode translate=\"no\" dir=\"ltr\"\u003e300px\u003c/code\u003e.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003etransition\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0.5\u003c/span\u003e\u003cspan\u003es\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eease\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econtent-visibility\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0.5\u003c/span\u003e\u003cspan\u003es\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eease\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eallow-discrete\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ewidth\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e300\u003c/span\u003e\u003cspan\u003epx\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eBesides transitioning the \u003ccode translate=\"no\" dir=\"ltr\"\u003ewidth\u003c/code\u003e, the \u003ccode translate=\"no\" dir=\"ltr\"\u003econtent-visibility\u003c/code\u003e property also needs to transition. This is because its value changes between the unopened and opened state, as defined in the User-Agent style sheet. Because that property is a discretely animatable property, you need \u003ca href=\"https://developer.chrome.com/blog/entry-exit-animations#transitioning_discrete_animations\"\u003ethe \u003ccode translate=\"no\" dir=\"ltr\"\u003eallow-discrete\u003c/code\u003e keyword\u003c/a\u003e to make it work.\u003c/p\u003e\n\n\u003cp\u003eAdded to the exclusive accordion demo shared before, the result becomes this:\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cdevsite-selector\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"demo_2\" data-text=\"Demo\" tabindex=\"-1\"\u003eDemo\u003c/h4\u003e\n      \n    \u003c/section\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"recording_2\" data-text=\"Recording\" tabindex=\"-1\"\u003eRecording\u003c/h4\u003e\n      \u003cfigure\u003e\n        \u003cvideo width=\"1576\" height=\"886\" loading=\"lazy\" controls=\"\" playsinline=\"\" autoplay=\"\" muted=\"\"\u003e\n          \u003csource src=\"https://developer.chrome.com/static/blog/styling-details/video/XWvBZNo.mp4\" type=\"video/mp4\"/\u003e\n        \u003c/video\u003e\n        \u003cfigcaption\u003eRecording of \u003ca href=\"https://codepen.io/web-dot-dev/pen/XWvBZNo\"\u003ehttps://codepen.io/web-dot-dev/pen/XWvBZNo\u003c/a\u003e in Chrome 131\u003c/figcaption\u003e\n      \u003c/figure\u003e\n    \u003c/section\u003e\n  \u003c/devsite-selector\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eheight\u003c/code\u003e can also be animated. To animate to \u003ccode translate=\"no\" dir=\"ltr\"\u003eheight: auto\u003c/code\u003e, you need to \u003ca href=\"https://developer.chrome.com/docs/css-ui/animate-to-height-auto\"\u003euse \u003ccode translate=\"no\" dir=\"ltr\"\u003einterpolate-size\u003c/code\u003e or \u003ccode translate=\"no\" dir=\"ltr\"\u003ecalc-size()\u003c/code\u003e\u003c/a\u003e. Additionally, to prevent the content from bleeding out of the \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo, apply \u003ccode translate=\"no\" dir=\"ltr\"\u003eoverflow: clip\u003c/code\u003e to it.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003etransition\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0.5\u003c/span\u003e\u003cspan\u003es\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eease\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econtent-visibility\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0.5\u003c/span\u003e\u003cspan\u003es\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eease\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eallow-discrete\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eoverflow\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclip\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e/* Browser supports interpolate-size */\u003c/span\u003e\n\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003esupports\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003einterpolate-size\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eallow-keywords\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003eroot\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003einterpolate-size\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eallow-keywords\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eauto\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e/* Fallback for browsers with no interpolate-size support */\u003c/span\u003e\n\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003esupports\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enot\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003einterpolate-size\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eallow-keywords\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e150\u003c/span\u003e\u003cspan\u003epx\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003eoverflow-y\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003escroll\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/* In case the contents should be taller than 150px */\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eYou can see the code in action in the following demo, \u003ca href=\"https://mui.com/material-ui/react-accordion/\"\u003einspired by Material UI\u0026#39;s accordion\u003c/a\u003e. The content of each \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element nicely animates.\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cdevsite-selector\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"demo_3\" data-text=\"Demo\" tabindex=\"-1\"\u003eDemo\u003c/h4\u003e\n      \n    \u003c/section\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"recording_3\" data-text=\"Recording\" tabindex=\"-1\"\u003eRecording\u003c/h4\u003e\n      \u003cfigure\u003e\n        \u003cvideo height=\"946\" width=\"1598\" loading=\"lazy\" controls=\"\" playsinline=\"\" autoplay=\"\" muted=\"\"\u003e\n          \u003csource src=\"https://developer.chrome.com/static/blog/styling-details/video/ExqpQZM.mp4\" type=\"video/mp4\"/\u003e\n        \u003c/video\u003e\n        \u003cfigcaption\u003eRecording of \u003ca href=\"https://codepen.io/web-dot-dev/pen/ExqpQZM\"\u003ehttps://codepen.io/web-dot-dev/pen/ExqpQZM\u003c/a\u003e in Chrome 131\u003c/figcaption\u003e\n      \u003c/figure\u003e\n    \u003c/section\u003e\n  \u003c/devsite-selector\u003e\n\u003c/p\u003e\n\n\u003cp\u003eIn browsers with no support for \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e the component still works fine. The only thing visitors don\u0026#39;t get to see is the animation.\u003c/p\u003e\n\n\u003ch2 id=\"feature_detection\" data-text=\"Feature detection\" tabindex=\"-1\"\u003eFeature detection\u003c/h2\u003e\n\n\u003cp\u003eTo feature detect support for the \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo in CSS, use the following snippet.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003e@\u003c/span\u003e\u003cspan\u003esupports\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eselector\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e…\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eYou can also use this detection as a telltale check to figure out if the browser your visitor is using supports the extra display values or not.\u003c/p\u003e\n\n\u003ch2 id=\"accessibility_considerations\" data-text=\"Accessibility considerations\" tabindex=\"-1\"\u003eAccessibility considerations\u003c/h2\u003e\n\n\u003cp\u003eThe introduction of the \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo-element and the ability to change the display type does not have an impact on the accessibility of the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\n\u003cp\u003eLike before, at least in Chromium based browsers and \u003ca href=\"https://html.spec.whatwg.org/multipage/interaction.html#interaction-with-details-and-hidden=until-found\"\u003eas per HTML Standard\u003c/a\u003e, the \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element is searchable and automatically expands when the browser tries to scroll to its hidden contents in response to find-in-page, ScrollToTextFragment, and element fragment navigation. This does not change.\u003c/p\u003e\n\n\u003cp\u003eHowever, before using exclusive accordions, consider if it\u0026#39;s helpful or harmful to users. While using an exclusive accordion reduces the amount of visual space content occupies, users may have to open many items to consume all the information. This may frustrate users who want to look at multiple items at the same time.\u003c/p\u003e\n\n\u003ch2 id=\"what_about_styling_the_marker\" data-text=\"What about styling the marker?\" tabindex=\"-1\"\u003eWhat about styling the marker?\u003c/h2\u003e\n\n\u003cp\u003eCurrently styling of the list marker is not interoperable as there are two different approaches, one taken by Gecko and (current) Chromium, and another taken by WebKit (which was previously shared with Chromium).\u003c/p\u003e\n\n\u003cp\u003eOnce the feature is interoperable, our aim is to give you better control over how to style the marker.\u003c/p\u003e\n\n\u003ch2 id=\"more_demos\" data-text=\"More demos\" tabindex=\"-1\"\u003eMore demos\u003c/h2\u003e\n\n\u003cp\u003eTo close off, here are some more demos for you to check out. They all use \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"uikit_accordion\" data-text=\"UIKit Accordion\" tabindex=\"-1\"\u003eUIKit Accordion\u003c/h3\u003e\n\n\u003cp\u003e\n  \u003cdevsite-selector\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"demo_4\" data-text=\"Demo\" tabindex=\"-1\"\u003eDemo\u003c/h4\u003e\n      \n    \u003c/section\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"recording_4\" data-text=\"Recording\" tabindex=\"-1\"\u003eRecording\u003c/h4\u003e\n      \u003cfigure\u003e\n        \u003cvideo width=\"1598\" height=\"582\" loading=\"lazy\" controls=\"\" playsinline=\"\" autoplay=\"\" muted=\"\"\u003e\n          \u003csource src=\"https://developer.chrome.com/static/blog/styling-details/video/rNXrJyQ.mp4\" type=\"video/mp4\"/\u003e\n        \u003c/video\u003e\n        \u003cfigcaption\u003eRecording of \u003ca href=\"https://codepen.io/web-dot-dev/pen/rNXrJyQ\"\u003ehttps://codepen.io/web-dot-dev/pen/rNXrJyQ\u003c/a\u003e in Chrome 131\u003c/figcaption\u003e\n      \u003c/figure\u003e\n    \u003c/section\u003e\n  \u003c/devsite-selector\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThis demo is built after the \u003ca href=\"https://getuikit.com/docs/accordion\"\u003eUIKit Accordion\u003c/a\u003e. The code is practically the same as the Material UI accordion that was shared before.\u003c/p\u003e\n\n\u003ch3 id=\"partially_opened_disclosure_widget\" data-text=\"Partially opened disclosure widget\" tabindex=\"-1\"\u003ePartially opened disclosure widget\u003c/h3\u003e\n\n\u003cp\u003e\n  \u003cdevsite-selector\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"demo_5\" data-text=\"Demo\" tabindex=\"-1\"\u003eDemo\u003c/h4\u003e\n      \n    \u003c/section\u003e\n    \u003csection\u003e\n      \u003ch4 id=\"recording_5\" data-text=\"Recording\" tabindex=\"-1\"\u003eRecording\u003c/h4\u003e\n      \u003cfigure\u003e\n        \u003cvideo width=\"1598\" height=\"682\" loading=\"lazy\" controls=\"\" playsinline=\"\" autoplay=\"\" muted=\"\"\u003e\n          \u003csource src=\"https://developer.chrome.com/static/blog/styling-details/video/PoMBQmW.mp4\" type=\"video/mp4\"/\u003e\n        \u003c/video\u003e\n        \u003cfigcaption\u003eRecording of \u003ca href=\"https://codepen.io/web-dot-dev/pen/PoMBQmW\"\u003ehttps://codepen.io/web-dot-dev/pen/PoMBQmW\u003c/a\u003e in Chrome 131\u003c/figcaption\u003e\n      \u003c/figure\u003e\n    \u003c/section\u003e\n  \u003c/devsite-selector\u003e\n\u003c/p\u003e\n\n\u003cp\u003eThis demo features a partially opened disclosure widget whose content is already visible on the screen. To achieve this, the \u003ccode translate=\"no\" dir=\"ltr\"\u003econtent-visibility\u003c/code\u003e is always set to \u003ccode translate=\"no\" dir=\"ltr\"\u003evisible\u003c/code\u003e. The \u003ccode translate=\"no\" dir=\"ltr\"\u003eheight\u003c/code\u003e gets animated \u003ca href=\"https://developer.chrome.com/docs/css-ui/animate-to-height-auto#animate_to_and_from_intrinsic_sizing_keywords_with_calc-size\"\u003eusing \u003ccode translate=\"no\" dir=\"ltr\"\u003ecalc-size()\u003c/code\u003e\u003c/a\u003e because there is a calculation involved.\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"CSS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econtent-visibility\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003evisible\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/* Make it always visible */\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003etransition\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0.5\u003c/span\u003e\u003cspan\u003es\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eease\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e150\u003c/span\u003e\u003cspan\u003epx\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eoverflow\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclip\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003eopen\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e::\u003c/span\u003e\u003cspan\u003edetails-content\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003eheight\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ecalc-size\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eauto\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esize\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e0.5\u003c/span\u003e\u003cspan\u003erem\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/* calc-size because we need to add a length */\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eFor styling convenience the content is wrapped in a wrapper div. The wrapper div gets the layout styles such as \u003ccode translate=\"no\" dir=\"ltr\"\u003epadding\u003c/code\u003e applied and the \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo is animated.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": null,
  "modifiedTime": null
}
