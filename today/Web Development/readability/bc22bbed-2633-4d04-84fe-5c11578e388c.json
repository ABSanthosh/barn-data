{
  "id": "bc22bbed-2633-4d04-84fe-5c11578e388c",
  "title": "Color Everything in CSS",
  "link": "https://css-tricks.com/color-everything-in-css/",
  "description": "An introduction to \"Color spaces\", \"Color models\", \"Color gamuts,\" and basically all of the \"Color somethings\" in CSS. Color Everything in CSS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Juan Diego Rodríguez",
  "published": "Fri, 20 Jun 2025 14:04:12 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "color",
    "CSS functions"
  ],
  "byline": "Juan Diego Rodríguez",
  "length": 12960,
  "excerpt": "An introduction to \"Color spaces\", \"Color models\", \"Color gamuts,\" and basically all of the \"Color somethings\" in CSS.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "I have had the opportunity to edit over a lot of the new color entries coming to the CSS-Tricks Almanac. We’ve already published several with more on the way, including a complete guide on color functions: color() hsl() lab() lch() oklab() oklch() rgb() And I must admit: I didn’t know a lot about color in CSS (I still used rgb(), which apparently isn’t what cool people do anymore), so it has been a fun learning experience. One of the things I noticed while trying to keep up with all this new information was how long the glossary of color goes, especially the “color” concepts. There are “color spaces,” “color models,” “color gamuts,” and basically a “color” something for everything. They are all somewhat related, and it can get confusing as you dig into using color in CSS, especially the new color functions that have been shipped lately, like contrast-color() and color-mix(). Hence, I wanted to make the glossary I wish I had when I was hearing for the first time about each concept, and that anyone can check whenever they forget what a specific “color” thing is. As a disclaimer, I am not trying to explain color, or specifically, color reproduction, in this post; that would probably be impossible for a mortal like me. Instead, I want to give you a big enough picture for some technicalities behind color in CSS, such that you feel confident using functions like lab() or oklch() while also understanding what makes them special. What’s a color? Let’s slow down first. In order to understand everything in color, we first need to understand the color in everything. While it’s useful to think about an object being a certain color (watch out for the red car, or cut the white cable!), color isn’t a physical property of objects, or even a tangible thing. Yes, we can characterize light as the main cause of color1, but it isn’t until visible light enters our eyes and is interpreted by our brains that we perceive a color. As said by Elle Stone: Light waves are out there in the world, but color happens in the interaction between light waves and the eye, brain, and mind. Even if color isn’t a physical thing, we still want to replicate it as reliably as possible, especially in the digital era. If we take a photo of a beautiful bouquet of lilies (like the one on my desk) and then display it on a screen, we expect to see the same colors in both the image and reality. However, “reality” here is a misleading term since, once again, the reality of color depends on the viewer. To solve this, we need to understand how light wavelengths (something measurable and replicable) create different color responses in viewers (something not so measurable). Luckily, this task was already carried out 95 years ago by the International Commission on Illumination (CIE, by its French name). I wish I could get into the details of the experiment, but we haven’t gotten into our first color thingie yet. What’s important is that from these measurements, the CIE was able to map all the colors visible to the average human (in the experiment) to light wavelengths and describe them with only three values. Initially, those three primary values corresponded to the red, green, and blue wavelengths used in the experiment, and they made up the CIERGB Color Space, but researchers noticed that some colors required a negative wavelength2 to represent a visible color. To avoid that, a series of transformations were performed on the original CIERGB and the resulting color space was called CIEXYZ. This new color space also has three values, X and Z represent the chromaticity of a color, while Y represents its luminance. Since it has three axes, it makes a 3D shape, but if we slice it such that its luminance is the same, we get all the visible colors for a given luminance in a figure you have probably seen before. This is called the xy chromaticity diagram and holds all the colors visible by the average human eye (based on the average viewer in the CIE 1931 experiment). Colors inside the shape are considered real, while those outside are deemed imaginary. Color Spaces The purpose of the last explanation was to reach the CIEXYZ Color Space concept, but what exactly is a “color space”? And why is the CIEXYZ Color Space so important? The CIEXYZ Color Space is a mapping from all the colors visible by the average human eye into a 3D coordinate system, so we only need three values to define a color. Then, a color space can be thought of as a general mapping of color, with no need to include every visible color, and it is usually defined through three values as well. RGB Color Spaces The most well-known color spaces are the RGB color spaces (note the plural). As you may guess from the name, here we only need the amount of red, green, and blue to describe a color. And to describe an RGB color space, we only need to define its “reddest”, “greenest”, and “bluest” values3. If we use coordinates going from 0 to 1 to define a color in the RGB color space, then: (1, 0, 0) means the reddest color. (0, 1, 0) means the greenest color. (0, 0, 1) means the bluest color. However, “reddest”, “bluest”, and “greenest” are only arbitrary descriptions of color. What makes a color the “bluest” is up to each person. For example, which of the following colors do you think is the bluest? As you can guess, something like “bluest” is an appalling description. Luckily, we just have to look back at the CIEXYZ color space — it’s pretty useful! Here, we can define what we consider the reddest, greenest, and bluest colors just as coordinates inside the xy chromaticity diagram. That’s all it takes to create an RGB color space, and why there are so many! Credit: Elle Stone In CSS, the most used color space is the standard RGB (sRGB) color space, which, as you can see in the last image, leaves a lot of colors out. However, in CSS, we can use modern RGB color spaces with a lot more colors through the color() function, such as display-p3, prophoto-rgb, and rec2020. Credit: Chrome Developer Team Notice how the ProPhoto RGB color space goes out of the visible color. This is okay. Colors outside are clamped; they aren’t new or invisible colors. In CSS, besides sRGB, we have two more color spaces: the CIELAB color space and the Oklab color space. Luckily, once we understood what the CIEXYZ color space is, then these two should be simpler to understand. Let’s dig into that next. CIELAB and Oklab Color Spaces As we saw before, the sRGB color space lacks many of the colors visible by the average human eye. And as modern screens got better at displaying more colors, CSS needed to adopt newer color spaces to fully take advantage of those newer displays. That wasn’t the only problem with sRGB — it also lacks perceptual uniformity, meaning that changes in the color’s chromaticity also change its perceived lightness. Check, for example, this demo by Adam Argyle: Created in 1976 by the CIE, CIELAB, derived from CIEXYZ, also encompasses all the colors visible by the human eye. It works with three coordinates: L for perceptual lightness, a for the amount of red-green, and b* for the amount of yellow-blue in the color. Credit: Linshang Technology It has a way better perceptual uniformity than sRGB, but it still isn’t completely uniform, especially in gradients involving blue. For example, in the following white-to-blue gradient, CIELAB shifts towards purple. Image Credits to Björn Ottosson As a final improvement, Björn Ottosson came up with the Oklab color space, which also holds all colors visible by the human eye while keeping a better perceptual uniformity. Oklab also uses the three L*a*b* coordinates. Thanks to all these improvements, it is the color space I try to use the most lately. Color Models When I was learning about these concepts, my biggest challenge after understanding color spaces was not getting them confused with color models and color gamuts. These two concepts, while complementary and closely related to color spaces, aren’t the same, so they are a common pitfall when learning about color. A color model refers to the mathematical description of color through tuples of numbers, usually involving three numbers, but these values don’t give us an exact color until we pair them with a color space. For example, you know that in the RGB color model, we define color through three values: red, green, and blue. However, it isn’t until we match it to an RGB color space (e.g., sRGB with display-p3) that we have a color. In this sense, a color space can have several color models, like sRGB, which uses RGB, HSL, and HWB. At the same time, a color model can be used in several color spaces. I found plenty of articles and tutorials where “color spaces” and “color models” were used interchangeably. And some places were they had a different definition of color spaces and models than the one provided here. For example, Chrome’s High definition CSS color guide defines CSS’s RGB and HSL as different color spaces, while MDN’s Color Space entry does define RGB and HSL as part of the sRGB color space. Personally, in CSS, I find it easier to understand the idea of RGB, HSL and HWB as different models to access the sRGB color space. Color Gamuts A color gamut is more straightforward to explain. You may have noticed how we have talked about a color space having more colors than another, but it would be more correct to say it has a “wider” gamut, since a color gamut is the range of colors available in a color space. However, a color gamut isn’t only restricted by color space boundaries, but also by physical limitations. For example, an older screen may decrease the color gamut since it isn’t able to display each color available in a given color space. In this case where a color can’t be represented (due to physical limitation or being outside the color space itself), it’s said to be “out of gamut”. Color Functions In CSS, the only color space available used to be sRGB. Nowadays, we can work with a lot of modern color spaces through their respective color functions. As a quick reference, each of the color spaces in CSS uses the following functions: sRGB: We can work in sRGB using the ol’ hexadecimal notation, named colors, and the rgb(), rgba(), hsl(), hsla() and hwb() functions. CIELAB: Here we have the lab() for Cartesian coordinates and lch() for polar coordinates. Oklab: Similar to CIELAB, we have oklab() for Cartesian coordinates and oklch() for polar coordinates. More through the color() and color-mix(). Outside these three color spaces, we can use many more using the color() and color-mix() functions. Specifically, we can use the RGB color spaces: rgb-linear, display-p3, a98-rgb, prophoto-rgb, rec2020 and the XYZ color space: xyz, xyz-d50, or xyz-d65. TL;DR Color spaces are a mapping between available colors and a coordinate system. In CSS, we have three main color spaces: sRGB, CIELAB, and Oklab, but many more are accessible through the color() function. Color models define color with tuples of numbers, but they don’t give us information about the actual color until we pair them with a color space. For example, the RGB model doesn’t mean anything until we assign it an RGB color space. Most of the time, we want to talk about how many colors a color space holds, so we use the term color gamut for the task. However, a color gamut is also tied to the physical limitations of a camera/display. A color may be out-of-gamut, meaning it can’t be represented in a given color space. In CSS, we can access all these color spaces through color functions, of which there are many. The CIEXYZ color space is extremely useful to define other color spaces, describe their gamuts, and convert between them. References Completely Painless Programmer’s Guide to XYZ, RGB, ICC, xyY, and TRCs (Elle Stone) Color Spaces (Bartosz Ciechanowski) The CIE XYZ and xyY Color Spaces(Douglas A. Kerr) From personal project to industry standard (Björn Ottosson) High definition CSS color guide (Adam Argyle) Color Spaces: Explained from the Ground Up (Video Tech Explained) Color Space (MDN) What Makes a Color Space Well Behaved? (Elle Stone) Footnotes 1 Light is the main cause of color, but color can be created by things other than light. For example, rubbing your closed eyes mechanically stimulates your retina, creating color in what’s called phosphene. ⤴️ 2 If negative light also makes you scratch your head, and for more info on how the CIEXYZ color space was created, I highly recommend Douglas A. Kerr The CIE XYZ and xyY Color Spaces paper. ⤴️ 3 We also need to define the darkest dark color (“black”) and the lightest light color (“white”). However, for well-behaved color spaces, these two can be abstracted from the reddest, blues, and greenest colors. ⤴️",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/03/color-wheels.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI have had the opportunity to edit over a lot of the new color entries coming to the \u003ca href=\"https://css-tricks.com/almanac/\"\u003eCSS-Tricks Almanac\u003c/a\u003e. We’ve already published several with more on the way, including a \u003ca href=\"https://css-tricks.com/css-color-functions/\"\u003ecomplete guide on color functions\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/c/color/\"\u003ecolor()\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/h/hsl/\"\u003ehsl()\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/l/lab/\"\u003elab()\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/l/lch/\"\u003elch()\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/o/oklab/\"\u003eoklab()\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/o/oklch/\"\u003eoklch()\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/r/rgb/\"\u003ergb()\u003c/a\u003e\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAnd I must admit: I didn’t know a lot about color in CSS (I still used \u003ccode\u003ergb()\u003c/code\u003e, which apparently isn’t what cool people do anymore), so it has been a fun learning experience. One of the things I noticed while trying to keep up with all this new information was how long the glossary of color goes, especially the “color” concepts. There are “color spaces,” “color models,” “color gamuts,” and basically a “color” something for everything.\u003c/p\u003e\n\n\n\n\u003cp\u003eThey are all somewhat related, and it can get confusing as you dig into using color in CSS, especially the new color functions that have been shipped lately, like \u003ccode\u003e\u003ca href=\"https://css-tricks.com/exploring-the-css-contrast-color-function-a-second-time/\"\u003econtrast-color()\u003c/a\u003e\u003c/code\u003e and \u003ccode\u003e\u003ca href=\"https://css-tricks.com/color-mixing-with-animation-composition/\"\u003ecolor-mix()\u003c/a\u003e\u003c/code\u003e. Hence, I wanted to make the glossary I wish I had when I was hearing for the first time about each concept, and that anyone can check whenever they forget what a specific “color” thing is.\u003c/p\u003e\n\n\n\n\u003cp\u003eAs a disclaimer, I am not trying to explain color, or specifically, color reproduction, in this post; that would probably be impossible for a mortal like me. Instead, I want to give you a big enough picture for some technicalities behind color in CSS, such that you feel confident using functions like \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/l/lab/\"\u003elab()\u003c/a\u003e\u003c/code\u003e or \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/functions/o/oklch/\"\u003eoklch()\u003c/a\u003e\u003c/code\u003e while also understanding what makes them special.\u003c/p\u003e\n\n\n\u003ch3 id=\"what-s-a-color-\"\u003eWhat’s a color?\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s slow down first. In order to understand \u003cem\u003eeverything\u003c/em\u003e in \u003cem\u003ecolor\u003c/em\u003e, we first need to understand the \u003cem\u003ecolor\u003c/em\u003e in \u003cem\u003eeverything\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cp id=\"footnote-1\"\u003eWhile it’s useful to think about an object being a certain color (watch out for the \u003cem\u003ered\u003c/em\u003e car, or cut the \u003cem\u003ewhite\u003c/em\u003e cable!), color isn’t a physical property of objects, or even a tangible thing. Yes, we can characterize \u003cem\u003elight\u003c/em\u003e as the main cause of color\u003csup\u003e\u003ca href=\"#note-1\"\u003e1\u003c/a\u003e\u003c/sup\u003e, but it isn’t until visible light enters our eyes and is interpreted by our brains that we perceive a color. As said by \u003ca href=\"https://ninedegreesbelow.com/photography/xyz-rgb.html\" rel=\"noopener\"\u003eElle Stone\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eLight waves are out there in the world, but color happens in the interaction between light waves and the eye, brain, and mind.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eEven if color isn’t a physical thing, we still want to replicate it as reliably as possible, especially in the digital era. If we take a photo of a beautiful bouquet of lilies (like the one on my desk) and then display it on a screen, we expect to see the same colors in both the image and reality. However, “reality” here is a misleading term since, once again, the \u003cem\u003ereality\u003c/em\u003e of color depends on the viewer. To solve this, we need to understand how light wavelengths (something measurable and replicable) create different color responses in viewers (something not so measurable).\u003c/p\u003e\n\n\n\n\u003cp\u003eLuckily, this task was already carried out 95 years ago by the International Commission on Illumination (CIE, by its French name). I wish I could get into the details of the experiment, but we haven’t gotten into our first color thingie yet. What’s important is that from these measurements, the CIE was able to map all the colors visible to the average human (in the experiment) to light wavelengths and describe them with only three values.\u003c/p\u003e\n\n\n\n\u003cp id=\"footnote-2\"\u003eInitially, those three primary values corresponded to the red, green, and blue wavelengths used in the experiment, and they made up the CIERGB \u003cem\u003eColor Space\u003c/em\u003e, but researchers noticed that some colors required a negative wavelength\u003csup\u003e\u003ca href=\"#note-2\" data-type=\"internal\" data-id=\"#note-2\"\u003e2\u003c/a\u003e\u003c/sup\u003e to represent a visible color. To avoid that, a series of transformations were performed on the original CIERGB and the resulting color space was called CIEXYZ.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis new color space also has three values, X and Z represent the chromaticity of a color, while Y represents its luminance. Since it has three axes, it makes a 3D shape, but if we slice it such that its luminance is the same, we get all the visible colors for a given luminance in a figure you have probably seen before.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"742\" height=\"789\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1.png?resize=742%2C789\u0026amp;ssl=1\" alt=\"xy chromaticitydiagram showing all visible colors \" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1.png?w=742\u0026amp;ssl=1 742w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1.png?resize=282%2C300\u0026amp;ssl=1 282w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis is called the \u003cem\u003exy chromaticity\u003c/em\u003e diagram and holds \u003cem\u003eall\u003c/em\u003e the colors visible by the average human eye (based on the average viewer in the CIE 1931 experiment). Colors inside the shape are considered real, while those outside are deemed imaginary.\u003c/p\u003e\n\n\n\u003ch3 id=\"color-spaces\"\u003eColor Spaces\u003c/h3\u003e\n\n\n\u003cp\u003eThe purpose of the last explanation was to reach the CIEXYZ Color Space concept, but what exactly is a “color space”? And why is the CIEXYZ \u003cem\u003eColor Space\u003c/em\u003e so important?\u003c/p\u003e\n\n\n\n\u003cp\u003eThe CIEXYZ Color Space is a mapping from all the colors visible by the average human eye into a 3D coordinate system, so we only need three values to define a color. Then, a \u003cstrong\u003ecolor space can be thought of as a general mapping of color\u003c/strong\u003e, with no need to include every visible color, and it is usually defined through three values as well.\u003c/p\u003e\n\n\n\u003ch4 id=\"rgb-color-spaces\"\u003eRGB Color Spaces\u003c/h4\u003e\n\n\n\u003cp\u003eThe most well-known color spaces are the RGB color spaces (note the plural). As you may guess from the name, here we only need the amount of red, green, and blue to describe a color. And to describe an RGB color space, we only need to define its “reddest”, “greenest”, and “bluest” values\u003csup id=\"footnote-3\"\u003e\u003ca href=\"#note-3\"\u003e3\u003c/a\u003e\u003c/sup\u003e. If we use coordinates going from 0 to 1 to define a color in the RGB color space, then:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e(1, 0, 0)\u003c/code\u003e means the reddest color.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e(0, 1, 0)\u003c/code\u003e means the greenest color.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e(0, 0, 1)\u003c/code\u003e means the bluest color.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eHowever, “reddest”, “bluest”, and “greenest” are only arbitrary descriptions of color. What makes a color the “bluest” is up to each person. For example, which of the following colors do you think is the bluest?\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1024\" height=\"1024\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1-1024x1024.png?resize=1024%2C1024\u0026amp;ssl=1\" alt=\"Different shades of blue\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=1024%2C1024\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=300%2C300\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=150%2C150\u0026amp;ssl=1 150w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?resize=768%2C768\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-1-1.png?w=1200\u0026amp;ssl=1 1200w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAs you can guess, something like “bluest” is an appalling description. Luckily, we just have to look back at the CIEXYZ color space — it’s pretty useful! Here, we can define what we consider the reddest, greenest, and bluest colors just as coordinates inside the xy chromaticity diagram. That’s all it takes to create an RGB color space, and why there are so many!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"768\" height=\"583\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-2.png?resize=768%2C583\u0026amp;ssl=1\" alt=\"sRGV and WideGamutRGB in the xy chromaticity diagram\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-2.png?w=768\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-2.png?resize=300%2C228\u0026amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eCredit: \u003ca href=\"https://ninedegreesbelow.com/\" rel=\"noopener\"\u003eElle Stone\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn CSS, the most used color space is the standard RGB (sRGB) color space, which, as you can see in the last image, leaves a lot of colors out. However, in CSS, we can use modern RGB color spaces with a lot more colors through the \u003ca href=\"https://css-tricks.com/almanac/functions/c/color/\"\u003e\u003ccode\u003ecolor()\u003c/code\u003e\u003c/a\u003e function, such as \u003ccode\u003edisplay-p3\u003c/code\u003e, \u003ccode\u003eprophoto-rgb\u003c/code\u003e, and \u003ccode\u003erec2020\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1473\" height=\"1194\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=1473%2C1194\u0026amp;ssl=1\" alt=\"Comparing the shapes of various color spaces, including sRGB, Display P3, A98-RGB, Rec2020, and ProPhoto.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?w=1473\u0026amp;ssl=1 1473w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=300%2C243\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=1024%2C830\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-7.png?resize=768%2C623\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eCredit: Chrome Developer Team\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNotice how the ProPhoto RGB color space goes out of the visible color. This is okay. Colors outside are clamped; they aren’t new or invisible colors.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn CSS, besides sRGB, we have two more color spaces: the CIELAB color space and the Oklab color space. Luckily, once we understood what the CIEXYZ color space is, then these two should be simpler to understand. Let’s dig into that next.\u003c/p\u003e\n\n\n\u003ch4 id=\"cielab-and-oklab-color-spaces\"\u003eCIELAB and Oklab Color Spaces\u003c/h4\u003e\n\n\n\u003cp\u003eAs we saw before, the sRGB color space lacks many of the colors visible by the average human eye. And as modern screens got better at displaying more colors, CSS needed to adopt newer color spaces to fully take advantage of those newer displays. That wasn’t the only problem with sRGB — it also lacks perceptual uniformity, meaning that changes in the color’s chromaticity also change its perceived lightness. Check, for example, this \u003ca href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide#overview\" rel=\"noopener\"\u003edemo by Adam Argyle\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eCreated in 1976 by the CIE, CIELAB, derived from CIEXYZ, also encompasses all the colors visible by the human eye. It works with three coordinates: L for perceptual lightness, a for the amount of red-green, and b* for the amount of yellow-blue in the color.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"726\" height=\"450\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/Lab-color-space.jpg?resize=726%2C450\u0026amp;ssl=1\" alt=\"A diagram in the shape of a sphere containing a range of colors that go from white to black vertically and green to blue to yellow to red horizontally.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/Lab-color-space.jpg?w=726\u0026amp;ssl=1 726w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/Lab-color-space.jpg?resize=300%2C186\u0026amp;ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eCredit: Linshang Technology\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIt has a way better perceptual uniformity than sRGB, but it still isn’t completely uniform, especially in gradients involving blue. For example, in the following white-to-blue gradient, CIELAB shifts towards purple.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"592\" height=\"192\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-6.png?resize=592%2C192\u0026amp;ssl=1\" alt=\"Comparing blue gradients in Oklahoma and CIELAB. The CIELAB gradients contains shades of purple.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-6.png?w=592\u0026amp;ssl=1 592w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/06/image-6.png?resize=300%2C97\u0026amp;ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eImage Credits to \u003ca href=\"https://bottosson.github.io/\" rel=\"noopener\"\u003eBjörn Ottosson\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAs a final improvement, \u003ca href=\"https://bottosson.github.io/posts/oklab/\" rel=\"noopener\"\u003eBjörn Ottosson\u003c/a\u003e came up with the Oklab color space, which also holds all colors visible by the human eye while keeping a better perceptual uniformity. Oklab also uses the three \u003ccode\u003eL*a*b*\u003c/code\u003e coordinates. Thanks to all these improvements, it is the color space I try to use the most lately.\u003c/p\u003e\n\n\n\u003ch3 id=\"color-models\"\u003eColor Models\u003c/h3\u003e\n\n\n\u003cp\u003eWhen I was learning about these concepts, my biggest challenge after understanding color spaces was not getting them confused with color models and color gamuts. These two concepts, while complementary and closely related to color spaces, aren’t the same, so they are a common pitfall when learning about color.\u003c/p\u003e\n\n\n\n\u003cp\u003eA \u003cstrong\u003e\u003cdfn\u003ecolor model\u003c/dfn\u003e\u003c/strong\u003e refers to the mathematical description of color through tuples of numbers, usually involving three numbers, but these values don’t give us an exact color until we pair them with a color space. For example, you know that in the RGB color model, we define color through three values: red, green, and blue. However, it isn’t until we match it to an RGB color space (e.g., sRGB with display-p3) that we have a color. In this sense, a color space can have several color models, like sRGB, which uses RGB, HSL, and HWB. At the same time, a color model can be used in several color spaces.\u003c/p\u003e\n\n\n\n\u003cp\u003eI found plenty of articles and tutorials where “color spaces” and “color models” were used interchangeably. And some places were they had a different definition of color spaces and models than the one provided here. For example, Chrome’s \u003ca href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide#what_is_a_color_space\" rel=\"noopener\"\u003eHigh definition CSS color guide\u003c/a\u003e defines CSS’s RGB and HSL as different color spaces, while MDN’s \u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Color_space#rgb_color_spaces\" rel=\"noopener\"\u003eColor Space entry\u003c/a\u003e does define RGB and HSL as part of the sRGB color space.\u003c/p\u003e\n\n\n\n\u003cp\u003ePersonally, in CSS, I find it easier to understand the idea of RGB, HSL and HWB as different models to access the sRGB color space.\u003c/p\u003e\n\n\n\u003ch3 id=\"color-gamuts\"\u003eColor Gamuts\u003c/h3\u003e\n\n\n\u003cp\u003eA \u003cstrong\u003e\u003cdfn\u003ecolor gamut\u003c/dfn\u003e\u003c/strong\u003e is more straightforward to explain. You may have noticed how we have talked about a color space having more colors than another, but it would be more correct to say it has a “wider” gamut, since a color gamut is the range of colors available in a color space. However, a color gamut isn’t only restricted by color space boundaries, but also by physical limitations. For example, an older screen may decrease the color gamut since it isn’t able to display each color available in a given color space. In this case where a color can’t be represented (due to physical limitation or being outside the color space itself), it’s said to be “out of gamut”.\u003c/p\u003e\n\n\n\u003ch3 id=\"color-functions\"\u003eColor Functions\u003c/h3\u003e\n\n\n\u003cp\u003eIn CSS, the only color space available used to be sRGB. Nowadays, we can work with a lot of modern color spaces through their respective color functions. As a quick reference, each of the color spaces in CSS uses the following functions:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003esRGB:\u003c/strong\u003e We can work in sRGB using the ol’ hexadecimal notation, named colors, and the \u003ccode\u003ergb()\u003c/code\u003e, \u003ccode\u003ergba()\u003c/code\u003e, \u003ccode\u003ehsl()\u003c/code\u003e, \u003ccode\u003ehsla()\u003c/code\u003e and \u003ccode\u003ehwb()\u003c/code\u003e functions.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eCIELAB:\u003c/strong\u003e Here we have the \u003ccode\u003elab()\u003c/code\u003e for Cartesian coordinates and \u003ccode\u003elch()\u003c/code\u003e for polar coordinates.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eOklab:\u003c/strong\u003e Similar to CIELAB, we have \u003ccode\u003eoklab()\u003c/code\u003e for Cartesian coordinates and \u003ccode\u003eoklch()\u003c/code\u003e for polar coordinates.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMore through the \u003ccode\u003ecolor()\u003c/code\u003e and \u003ccode\u003ecolor-mix()\u003c/code\u003e.\u003c/strong\u003e Outside these three color spaces, we can use many more using the \u003ccode\u003ecolor()\u003c/code\u003e and \u003ccode\u003ecolor-mix()\u003c/code\u003e functions. Specifically, we can use the RGB color spaces: \u003ccode\u003ergb-linear\u003c/code\u003e, \u003ccode\u003edisplay-p3\u003c/code\u003e, \u003ccode\u003ea98-rgb\u003c/code\u003e, \u003ccode\u003eprophoto-rgb\u003c/code\u003e, \u003ccode\u003erec2020\u003c/code\u003e and the XYZ color space: \u003ccode\u003exyz\u003c/code\u003e, \u003ccode\u003exyz-d50\u003c/code\u003e, or \u003ccode\u003exyz-d65\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"tl-dr\"\u003eTL;DR\u003c/h3\u003e\n\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eColor spaces\u003c/strong\u003e are a mapping between available colors and a coordinate system. In CSS, we have three main color spaces: sRGB, CIELAB, and Oklab, but many more are accessible through the \u003ccode\u003ecolor()\u003c/code\u003e function.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eColor models\u003c/strong\u003e define color with tuples of numbers, but they don’t give us information about the actual color until we pair them with a color space. For example, the RGB model doesn’t mean anything until we assign it an RGB color space.\u003c/li\u003e\n\n\n\n\u003cli\u003eMost of the time, we want to talk about how many colors a color space holds, so we use the term \u003cstrong\u003ecolor gamut\u003c/strong\u003e for the task. However, a color gamut is also tied to the physical limitations of a camera/display. A color may be out-of-gamut, meaning it can’t be represented in a given color space.\u003c/li\u003e\n\n\n\n\u003cli\u003eIn CSS, \u003cstrong\u003ewe can access all these color spaces through color functions\u003c/strong\u003e, of which there are many.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe \u003cstrong\u003eCIEXYZ color space\u003c/strong\u003e is extremely useful to define other color spaces, describe their gamuts, and convert between them.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\u003ch3 id=\"references\"\u003eReferences\u003c/h3\u003e\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ninedegreesbelow.com/photography/xyz-rgb.html\" rel=\"noopener\"\u003eCompletely Painless Programmer’s Guide to XYZ, RGB, ICC, xyY, and TRCs\u003c/a\u003e (Elle Stone)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://ciechanow.ski/color-spaces/\" rel=\"noopener\"\u003eColor Spaces\u003c/a\u003e (Bartosz Ciechanowski)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"http://dougkerr.net/Pumpkin/articles/CIE_XYZ.pdf\" rel=\"noopener\"\u003eThe CIE XYZ and xyY Color Spaces\u003c/a\u003e(Douglas A. Kerr)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://bottosson.github.io/posts/oklab/\" rel=\"noopener\"\u003eFrom personal project to industry standard\u003c/a\u003e (Björn Ottosson)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://developer.chrome.com/docs/css-ui/high-definition-css-color-guide\" rel=\"noopener\"\u003eHigh definition CSS color guide\u003c/a\u003e (Adam Argyle)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/watch?v=99v96TL-tuY\" rel=\"noopener\"\u003eColor Spaces: Explained from the Ground Up\u003c/a\u003e (Video Tech Explained)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Color_space\" rel=\"noopener\"\u003eColor Space\u003c/a\u003e (MDN)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://ninedegreesbelow.com/photography/well-behaved-profile.html\" rel=\"noopener\"\u003eWhat Makes a Color Space Well Behaved?\u003c/a\u003e (Elle Stone)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"footnotes\"\u003eFootnotes\u003c/h3\u003e\n\n\n\u003cp\u003e\u003csup id=\"note-1\"\u003e1\u003c/sup\u003e Light is the main cause of color, but color can be created by things other than light. For example, rubbing your closed eyes mechanically stimulates your retina, creating color in what’s \u003ca href=\"https://en.wikipedia.org/wiki/Phosphene\" rel=\"noopener\"\u003ecalled phosphene\u003c/a\u003e. \u003ca href=\"#footnote-1\"\u003e⤴️\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003csup id=\"note-2\"\u003e2\u003c/sup\u003e If \u003cem\u003enegative light\u003c/em\u003e also makes you scratch your head, and for more info on how the CIEXYZ color space was created, I highly recommend Douglas A. Kerr \u003ca href=\"http://dougkerr.net/Pumpkin/articles/CIE_XYZ.pdf\" rel=\"noopener\"\u003e\u003cem\u003eThe CIE XYZ and xyY Color Spaces\u003c/em\u003e\u003c/a\u003e paper. \u003ca href=\"#footnote-2\"\u003e⤴️\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003csup id=\"note-3\"\u003e3\u003c/sup\u003e We also need to define the darkest dark color (“black”) and the lightest light color (“white”). However, for \u003ca href=\"https://ninedegreesbelow.com/photography/well-behaved-profile.html\" rel=\"noopener\"\u003ewell-behaved\u003c/a\u003e color spaces, these two can be abstracted from the reddest, blues, and greenest colors. \u003ca href=\"#footnote-3\"\u003e⤴️\u003c/a\u003e\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2025-06-20T08:04:12-06:00",
  "modifiedTime": "2025-06-20T08:09:53-06:00"
}
