{
  "id": "7fbc9329-eb88-40d5-a6d8-9ca8850caa2e",
  "title": "Chrome 131 beta",
  "link": "https://developer.chrome.com/blog/chrome-131-beta?hl=en",
  "description": "Discover the features that are coming to Chrome with the latest beta.",
  "author": "",
  "published": "Wed, 16 Oct 2024 07:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "",
  "length": 9577,
  "excerpt": "Discover the features that are coming to Chrome with the latest beta.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/v0e3f58103119c4df6fb3c3977dcfd0cb669bdf6385f895761c1853a4b0b11be9/chrome/images/favicon.png",
  "text": "Published: October 16, 2024 Unless otherwise noted, the following changes apply to the newest Chrome beta channel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more about the features listed here through the provided links or from the list on ChromeStatus.com. Chrome 131 is beta as of October 16, 2024. You can download the latest on Google.com for desktop or on Google Play Store on Android. CSS This release adds eight new CSS features. CSS Anchor Positioning: anchor-scope The anchor-scope property allows limiting the visibility of anchor names to a given subtree. â€‹CSS font-variant-emoji The font-variant-emoji CSS property provides a way to control between colored (emoji-style) and monochromatic (text-style) emoji glyphs. This can be also done by adding an emoji Variation Selector, specifically U+FE0E for text and U+FE0F for emoji, after each emoji codepoint. CSS highlight inheritance With CSS highlight inheritance, the CSS highlight pseudo-classes, such as ::selection and ::highlight, inherit their properties through the pseudo highlight chain, rather than the element chain. The result is a more intuitive model for inheritance of properties in highlights. To learn more, read the blog post Inheritance changes for CSS selection styling written by Stephen Chenney from Igalia. Improvements to styling structure of \u003cdetails\u003e and \u003csummary\u003e elements Support more CSS styling for the structure of \u003cdetails\u003e and \u003csummary\u003e elements to allow these elements to be used in more cases where disclosure widgets or accordion widgets are built on the web. In particular, this change removes restrictions that prevented setting the display property on these elements, and adds a ::details-content pseudo-element to style the container for the part that expands and collapses. @page margin boxes Add support for page margin boxes, when printing a web document, or exporting it as PDF. The @page margin boxes let you define the contents in the margin area of a page, for example to provide custom headers and footers, rather than using the built-in headers and footers generated by the browser. A margin box is defined using an at-rule inside a CSS @page rule. The appearance and the contents of a margin box are specified with CSS properties inside the at-rule, including the content property. Counters are also supported, for page numbering. The specification defines two special counter names: page for the current page number and pages for the total number of pages. @property support \u003cstring\u003e syntax Support for \u003cstring\u003e syntax component name for registered custom properties. Support currentcolor in relative color syntax Allow relative colors in CSS (using the from keyword) to use currentcolor as a base. This lets you set complementary colors, based on an element's text color, for that element's borders, shadows, or backgrounds. This feature also includes use cases where color functions are nested with a dependency on currentcolor, for example color-mix(in srgb, rgb(from currentcolor r g b), white)) or rgb(from rgb(from currentcolor 1 g b) b g r). Support external SVG resources for clip-path, fill, stroke, and marker-* properties This feature adds support for external references for clip paths, markers, and paint servers (for the 'fill' and 'stroke' properties). For example, clip-path: url(\"resources.svg#myPath\"). Web APIs Direct Sockets API Allows Isolated Web Apps to establish direct transmission control protocol (TCP) and user datagram protocol (UDP) communications with network devices and systems as well as listen to and accept incoming connections. Updates the integration between speculation rules and CSP so that CSP only applies to \u003cscript type=speculationrules\u003e, and not to the Speculation-Rules header. CSP's script policies are meant to protect against injection of scripts into HTML, and the CSP threat model doesn't relate to HTTP headers. This allows easier deployment of speculation rules from CDNs and other edge servers. FedCM as a trust signal for the Storage Access API Reconciles the FedCM and Storage Access APIs by making a prior FedCM grant a valid reason to automatically approve a storage access request. When a user grants permission to use their identity with a third-party identity provider (IdP) on a relying party (RP), many IdPs require third-party cookies to function correctly and securely. This proposal aims to satisfy that requirement in a private and secure manner by updating the Storage Access API (SAA) permission checks to not only accept the permission grant that is given by a storage access prompt, but also the permission grant that is given by a FedCM prompt. A key property of this mechanism is limiting the grant to cases explicitly allowed by the RP with the FedCM permissions policy, enforcing a per-frame control for the RP and preventing passive surveillance by the IdP beyond the capabilities that FedCM already grants. Some origins can contain different applications with different levels of security requirements. In those cases, it can be beneficial to prevent scripts running in one application from being able to open and script pages of another same-origin application. In such cases, it can be beneficial for a document to ensure its opener cannot script it, even if the opener document is a same-origin one. The noopener-allow-popups Cross-Origin-Opener-Policy value lets documents define that behavior. Private Aggregation API: increase contribution limit to 100 for Protected Audience callers Enables Protected Audience script runners to make up to 100 contributions per Private Aggregation report, compared to the current limit of 20. Private Aggregation limits the number of histogram contributions that can be embedded in a single aggregatable report, dropping any additional contributions. Shared Storage callers can work around the limit by invoking another Shared Storage operation. However, Protected Audience callers have no persistent storage, so they lose their excess contributions at the end of their auction. Note that this change is privacy neutral as the API's contributions are still limited by the same privacy budget. Due to padding, each Protected Audience report will have a larger payload, even if it did not need the larger contribution limit. We expect that these larger reports will increase the cost of operating the Aggregation Service. Select parser relaxation This change makes the HTML parser allow additional tags in \u003cselect\u003e besides \u003coption\u003e, \u003coptgroup\u003e, and \u003chr\u003e. This change is in support of the customizable \u003cselect\u003e feature but is being shipped first because it can be done separately and has some compat risk which the Chrome team would like to get feedback on. WebGPU: Clip distances Adds the optional GPU feature clip-distances that allows setting user-defined clip distances in vertex shader outputs. This technique is particularly useful for the applications that need to clip all vertices in a scene that are beyond a user-defined plane, such as many CAD applications. WebGPU: GPUCanvasContext getConfiguration() Once GPUCanvasContext configure() has been called with a configuration dictionary, you can use the GPUCanvasContext getConfiguration() method to check the canvas context configuration. It includes GPU device, format, usage, viewFormats, colorSpace, toneMapping, and alphaMode members. As discussed in issue 4828, web apps can use it to detect whether HDR canvas is supported in WebGPU. WebHID on dedicated workers Enables WebHID inside dedicated worker contexts. This lets you perform heavy I/O and processing of data from a HID device on a separate thread, helping to reduce the performance impact on the main thread. An API that configures WebRTC encoders to scale input frames if they are greater than the specified maxWidth and maxHeight. This API is similar to scaleResolutionDownBy except that resolution constraints are expressed in absolute terms (for example, 640x360) as opposed to relative terms (for example, scale down by 2), avoiding race conditions related to changing input frame size on the fly. New origin trials In Chrome 131 you can opt into the following new origin trials. Playout statistics for WebAudio The AudioContext.playoutStats feature allows an application to measure the quality and latency of audio playout using WebAudio. Summarizer API A JavaScript API for producing summaries of input text, backed by an AI language model. Deprecations and removals This version of Chrome introduces the following deprecations and removals. Visit ChromeStatus.com for lists of planned deprecations, current deprecations and previous removals. This release of Chrome removes three features. Remove the CSS Anchor Positioning property inset-area With the CSS Working Group resolution on renaming the inset-area property to position-area, this removal cleans up the implementation in Chromium for a standards compliant feature. Remove the ability to disable BeforeunloadEventCancelByPreventDefault Feature BeforeunloadEventCancelByPreventDefault was shipped in Chrome 117, but there is an enterprise policy that allows this flag to be force-disabled. The enterprise policy will be removed in Chrome 131. Remove non-standard GPUAdapter requestAdapterInfo() method The WebGPU Working Group decided it was impractical for requestAdapterInfo() to trigger a permission prompt so they've removed that option and replaced it with the GPUAdapter info attribute so that web developers can get the same GPUAdapterInfo value synchronously.",
  "image": "https://developer.chrome.com/static/blog/chrome-131-beta/image/thumbnail.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \n    \n\n\n\u003cdiv translate=\"no\"\u003e\n        \n          \u003cp\u003e\u003cimg alt=\"Rachel Andrew\" src=\"https://web.dev/images/authors/rachelandrew.jpg\" decoding=\"async\" height=\"64\" loading=\"lazy\" width=\"64\"/\u003e\u003c/p\u003e\n      \u003c/div\u003e\n\n\u003cp\u003e\n  Published: October 16, 2024\n\u003c/p\u003e\n\n\n\n\n\u003cp\u003eUnless otherwise noted, the following changes apply to the newest Chrome beta\nchannel release for Android, ChromeOS, Linux, macOS, and Windows. Learn more\nabout the features listed here through the provided links or from the list on\n\u003ca href=\"https://chromestatus.com\"\u003eChromeStatus.com\u003c/a\u003e.\nChrome 131 is beta as of October 16, 2024. You can download\nthe latest on \u003ca href=\"https://www.google.com/chrome/beta/\"\u003eGoogle.com\u003c/a\u003e for desktop or\non Google Play Store on Android.\u003c/p\u003e\n\n\u003ch2 id=\"css\" data-text=\"CSS\" tabindex=\"-1\"\u003eCSS\u003c/h2\u003e\n\n\u003cp\u003eThis release adds eight new CSS features.\u003c/p\u003e\n\n\u003ch3 id=\"css_anchor_positioning_anchor-scope\" data-text=\"CSS Anchor Positioning: anchor-scope\" tabindex=\"-1\"\u003eCSS Anchor Positioning: anchor-scope\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eanchor-scope\u003c/code\u003e property allows limiting the visibility of anchor names to a\ngiven subtree.\u003c/p\u003e\n\n\u003ch3 id=\"â€‹css_font-variant-emoji\" data-text=\"â€‹CSS font-variant-emoji\" tabindex=\"-1\"\u003eâ€‹CSS \u003ccode translate=\"no\" dir=\"ltr\"\u003efont-variant-emoji\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003efont-variant-emoji\u003c/code\u003e CSS property provides a way to control between\ncolored (emoji-style) and monochromatic (text-style) emoji glyphs. This can be\nalso done by adding an emoji Variation Selector, specifically U+FE0E for text\nand U+FE0F for emoji, after each emoji codepoint.\u003c/p\u003e\n\n\u003ch3 id=\"css_highlight_inheritance\" data-text=\"CSS highlight inheritance\" tabindex=\"-1\"\u003eCSS highlight inheritance\u003c/h3\u003e\n\n\u003cp\u003eWith CSS highlight inheritance, the CSS highlight pseudo-classes, such as\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e::selection\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e::highlight\u003c/code\u003e, inherit their properties through the pseudo\nhighlight chain, rather than the element chain. The result is a more intuitive\nmodel for inheritance of properties in highlights.\u003c/p\u003e\n\n\u003cp\u003eTo learn more, read the blog post\n\u003ca href=\"https://developer.chrome.com/blog/selection-styling\"\u003eInheritance changes for CSS selection styling\u003c/a\u003e\nwritten by Stephen Chenney from Igalia.\u003c/p\u003e\n\n\u003ch3 id=\"improvements_to_styling_structure_of_details_and_summary_elements\" data-text=\"Improvements to styling structure of \u0026lt;details\u0026gt; and \u0026lt;summary\u0026gt; elements\" tabindex=\"-1\"\u003eImprovements to styling structure of \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e elements\u003c/h3\u003e\n\n\u003cp\u003eSupport more CSS styling for the structure of \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e\nelements to allow these elements to be used in more cases where disclosure\nwidgets or accordion widgets are built on the web. In particular, this change\nremoves restrictions that prevented setting the display property on these\nelements, and adds a \u003ccode translate=\"no\" dir=\"ltr\"\u003e::details-content\u003c/code\u003e pseudo-element to style the container\nfor the part that expands and collapses.\u003c/p\u003e\n\n\u003ch3 id=\"page_margin_boxes\" data-text=\"@page margin boxes\" tabindex=\"-1\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e@page\u003c/code\u003e margin boxes\u003c/h3\u003e\n\n\u003cp\u003eAdd support for page margin boxes, when printing a web document, or exporting it\nas PDF.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003e@page\u003c/code\u003e margin boxes let you define the contents in the margin area of\na page, for example to provide custom headers and footers, rather than using\nthe built-in headers and footers generated by the browser.\u003c/p\u003e\n\n\u003cp\u003eA margin box is defined using an at-rule inside a CSS \u003ccode translate=\"no\" dir=\"ltr\"\u003e@page\u003c/code\u003e rule. The\nappearance and the contents of a margin box are specified with CSS properties\ninside the at-rule, including the \u003ccode translate=\"no\" dir=\"ltr\"\u003econtent\u003c/code\u003e property. Counters are also\nsupported, for page numbering. The specification defines two special counter\nnames: \u003ccode translate=\"no\" dir=\"ltr\"\u003epage\u003c/code\u003e for the current page number and \u003ccode translate=\"no\" dir=\"ltr\"\u003epages\u003c/code\u003e for the total number of\npages.\u003c/p\u003e\n\n\u003ch3 id=\"property_support_string_syntax\" data-text=\"@property support \u0026lt;string\u0026gt; syntax\" tabindex=\"-1\"\u003e@property support \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;string\u0026gt;\u003c/code\u003e syntax\u003c/h3\u003e\n\n\u003cp\u003eSupport for \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;string\u0026gt;\u003c/code\u003e syntax component name for registered custom properties.\u003c/p\u003e\n\n\u003ch3 id=\"support_currentcolor_in_relative_color_syntax\" data-text=\"Support currentcolor in relative color syntax\" tabindex=\"-1\"\u003eSupport currentcolor in relative color syntax\u003c/h3\u003e\n\n\u003cp\u003eAllow relative colors in CSS (using the \u003ccode translate=\"no\" dir=\"ltr\"\u003efrom\u003c/code\u003e keyword) to use \u003ccode translate=\"no\" dir=\"ltr\"\u003ecurrentcolor\u003c/code\u003e as\na base. This lets you set complementary colors, based on an\nelement\u0026#39;s text color, for that element\u0026#39;s borders, shadows, or backgrounds.\u003c/p\u003e\n\n\u003cp\u003eThis feature also includes use cases where color functions are nested with a\ndependency on currentcolor, for example\n\u003ccode translate=\"no\" dir=\"ltr\"\u003ecolor-mix(in srgb, rgb(from currentcolor r g b), white))\u003c/code\u003e or \n\u003ccode translate=\"no\" dir=\"ltr\"\u003ergb(from rgb(from currentcolor 1 g b) b g r)\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"support_external_svg_resources_for_clip-path_fill_stroke_and_marker-_properties\" data-text=\"Support external SVG resources for clip-path, fill, stroke, and marker-* properties\" tabindex=\"-1\"\u003eSupport external SVG resources for \u003ccode translate=\"no\" dir=\"ltr\"\u003eclip-path\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003efill\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003estroke\u003c/code\u003e, and \u003ccode translate=\"no\" dir=\"ltr\"\u003emarker-*\u003c/code\u003e properties\u003c/h3\u003e\n\n\u003cp\u003eThis feature adds support for external references for clip paths, markers, and\npaint servers (for the \u0026#39;fill\u0026#39; and \u0026#39;stroke\u0026#39; properties). For example,\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eclip-path: url(\u0026#34;resources.svg#myPath\u0026#34;)\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"web_apis\" data-text=\"Web APIs\" tabindex=\"-1\"\u003eWeb APIs\u003c/h2\u003e\n\n\u003ch3 id=\"direct_sockets_api\" data-text=\"Direct Sockets API\" tabindex=\"-1\"\u003eDirect Sockets API\u003c/h3\u003e\n\n\u003cp\u003eAllows Isolated Web Apps to establish direct transmission control protocol (TCP)\nand user datagram protocol (UDP) communications with network devices and systems\nas well as listen to and accept incoming connections.\u003c/p\u003e\n\n\n\n\u003cp\u003eUpdates the integration between speculation rules and CSP so that CSP only\napplies to \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;script type=speculationrules\u0026gt;\u003c/code\u003e, and not to the \u003ccode translate=\"no\" dir=\"ltr\"\u003eSpeculation-Rules\u003c/code\u003e\nheader. CSP\u0026#39;s script policies are meant to protect against injection of scripts\ninto HTML, and the CSP threat model doesn\u0026#39;t relate to HTTP headers. This allows\neasier deployment of speculation rules from CDNs and other edge servers.\u003c/p\u003e\n\n\u003ch3 id=\"fedcm_as_a_trust_signal_for_the_storage_access_api\" data-text=\"FedCM as a trust signal for the Storage Access API\" tabindex=\"-1\"\u003eFedCM as a trust signal for the Storage Access API\u003c/h3\u003e\n\n\u003cp\u003eReconciles the FedCM and Storage Access APIs by making a prior FedCM grant a\nvalid reason to automatically approve a storage access request.\u003c/p\u003e\n\n\u003cp\u003eWhen a user grants permission to use their identity with a third-party identity\nprovider (IdP) on a relying party (RP), many IdPs require third-party cookies to\nfunction correctly and securely. This proposal aims to satisfy that requirement\nin a private and secure manner by updating the Storage Access API (SAA)\npermission checks to not only accept the permission grant that is given by a\nstorage access prompt, but also the permission grant that is given by a FedCM\nprompt.\u003c/p\u003e\n\n\u003cp\u003eA key property of this mechanism is limiting the grant to cases explicitly\nallowed by the RP with the FedCM permissions policy, enforcing a per-frame\ncontrol for the RP and preventing passive surveillance by the IdP beyond the\ncapabilities that FedCM already grants.\u003c/p\u003e\n\n\n\n\u003cp\u003eSome origins can contain different applications with different levels of\nsecurity requirements. In those cases, it can be beneficial to prevent scripts\nrunning in one application from being able to open and script pages of another\nsame-origin application.\u003c/p\u003e\n\n\u003cp\u003eIn such cases, it can be beneficial for a document to ensure its opener cannot\nscript it, even if the opener document is a same-origin one. The\n\u003ccode translate=\"no\" dir=\"ltr\"\u003enoopener-allow-popups\u003c/code\u003e Cross-Origin-Opener-Policy value lets documents\ndefine that behavior.\u003c/p\u003e\n\n\u003ch3 id=\"private_aggregation_api_increase_contribution_limit_to_100_for_protected_audience_callers\" data-text=\"Private Aggregation API: increase contribution limit to 100 for Protected Audience callers\" tabindex=\"-1\"\u003ePrivate Aggregation API: increase contribution limit to 100 for Protected Audience callers\u003c/h3\u003e\n\n\u003cp\u003eEnables Protected Audience script runners to make up to 100 contributions per\nPrivate Aggregation report, compared to the current limit of 20.\u003c/p\u003e\n\n\u003cp\u003ePrivate Aggregation limits the number of histogram contributions that can be\nembedded in a single aggregatable report, dropping any additional contributions.\nShared Storage callers can work around the limit by invoking another Shared\nStorage operation. However, Protected Audience callers have no persistent\nstorage, so they lose their excess contributions at the end of their auction.\nNote that this change is privacy neutral as the API\u0026#39;s contributions are still\nlimited by the same privacy budget.\u003c/p\u003e\n\n\u003cp\u003eDue to padding, each Protected Audience report will have a larger payload, even\nif it did not need the larger contribution limit. We expect that these larger\nreports will increase the cost of operating the Aggregation Service.\u003c/p\u003e\n\n\u003ch3 id=\"select_parser_relaxation\" data-text=\"Select parser relaxation\" tabindex=\"-1\"\u003eSelect parser relaxation\u003c/h3\u003e\n\n\u003cp\u003eThis change makes the HTML parser allow additional tags in \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;select\u0026gt;\u003c/code\u003e besides\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;option\u0026gt;\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;optgroup\u0026gt;\u003c/code\u003e, and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;hr\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis change is in support of the customizable \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;select\u0026gt;\u003c/code\u003e feature but is being\nshipped first because it can be done separately and has some compat risk which\nthe Chrome team would like to get feedback on.\u003c/p\u003e\n\n\u003ch3 id=\"webgpu_clip_distances\" data-text=\"WebGPU: Clip distances\" tabindex=\"-1\"\u003eWebGPU: Clip distances\u003c/h3\u003e\n\n\u003cp\u003eAdds the optional GPU feature \u003ccode translate=\"no\" dir=\"ltr\"\u003eclip-distances\u003c/code\u003e that allows setting user-defined\nclip distances in vertex shader outputs. This technique is particularly useful\nfor the applications that need to clip all vertices in a scene that are beyond a\nuser-defined plane, such as many CAD applications.\u003c/p\u003e\n\n\u003ch3 id=\"webgpu_gpucanvascontext_getconfiguration\" data-text=\"WebGPU: GPUCanvasContext getConfiguration()\" tabindex=\"-1\"\u003eWebGPU: GPUCanvasContext \u003ccode translate=\"no\" dir=\"ltr\"\u003egetConfiguration()\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eOnce \u003ccode translate=\"no\" dir=\"ltr\"\u003eGPUCanvasContext configure()\u003c/code\u003e has been called with a configuration\ndictionary, you can use the \u003ccode translate=\"no\" dir=\"ltr\"\u003eGPUCanvasContext getConfiguration()\u003c/code\u003e method to\ncheck the canvas context configuration. It includes GPU \u003ccode translate=\"no\" dir=\"ltr\"\u003edevice\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eformat\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003eusage\u003c/code\u003e,\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eviewFormats\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003ecolorSpace\u003c/code\u003e, \u003ccode translate=\"no\" dir=\"ltr\"\u003etoneMapping\u003c/code\u003e, and \u003ccode translate=\"no\" dir=\"ltr\"\u003ealphaMode\u003c/code\u003e members.\n\u003ca href=\"https://github.com/gpuweb/gpuweb/issues/4828\"\u003eAs discussed in issue 4828\u003c/a\u003e,\nweb apps can use it\nto detect whether HDR canvas is supported in WebGPU.\u003c/p\u003e\n\n\u003ch3 id=\"webhid_on_dedicated_workers\" data-text=\"WebHID on dedicated workers\" tabindex=\"-1\"\u003eWebHID on dedicated workers\u003c/h3\u003e\n\n\u003cp\u003eEnables WebHID inside dedicated worker contexts. This lets you perform heavy I/O\nand processing of data from a HID device on a separate thread, helping to reduce\nthe performance impact on the main thread.\u003c/p\u003e\n\n\n\n\u003cp\u003eAn API that configures WebRTC encoders to scale input frames if they are greater\nthan the specified \u003ccode translate=\"no\" dir=\"ltr\"\u003emaxWidth\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003emaxHeight\u003c/code\u003e. This API is similar to\n\u003ccode translate=\"no\" dir=\"ltr\"\u003escaleResolutionDownBy\u003c/code\u003e except that resolution constraints are expressed in\nabsolute terms (for example, 640x360) as opposed to relative terms (for example,\nscale down by 2), avoiding race conditions related to changing input frame size\non the fly.\u003c/p\u003e\n\n\u003ch2 id=\"new_origin_trials\" data-text=\"New origin trials\" tabindex=\"-1\"\u003eNew origin trials\u003c/h2\u003e\n\n\u003cp\u003eIn Chrome 131 you can opt into the following new\n\u003ca href=\"https://developer.chrome.com/docs/web-platform/origin-trials\"\u003eorigin trials\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"playout_statistics_for_webaudio\" data-text=\"Playout statistics for WebAudio\" tabindex=\"-1\"\u003ePlayout statistics for WebAudio\u003c/h3\u003e\n\n\u003cp\u003eThe \u003ccode translate=\"no\" dir=\"ltr\"\u003eAudioContext.playoutStats\u003c/code\u003e feature allows an application to measure the\nquality and latency of audio playout using WebAudio.\u003c/p\u003e\n\n\u003ch3 id=\"summarizer_api\" data-text=\"Summarizer API\" tabindex=\"-1\"\u003eSummarizer API\u003c/h3\u003e\n\n\u003cp\u003eA JavaScript API for producing summaries of input text, backed by an AI language\nmodel.\u003c/p\u003e\n\n\u003ch2 id=\"deprecations_and_removals\" data-text=\"Deprecations and removals\" tabindex=\"-1\"\u003eDeprecations and removals\u003c/h2\u003e\n\n\u003cp\u003eThis version of Chrome introduces the following deprecations and removals.\nVisit ChromeStatus.com for lists of planned deprecations, current deprecations\nand previous removals.\u003c/p\u003e\n\n\u003cp\u003eThis release of Chrome removes three features.\u003c/p\u003e\n\n\u003ch3 id=\"remove_the_css_anchor_positioning_property_inset-area\" data-text=\"Remove the CSS Anchor Positioning property inset-area\" tabindex=\"-1\"\u003eRemove the CSS Anchor Positioning property \u003ccode translate=\"no\" dir=\"ltr\"\u003einset-area\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eWith the CSS Working Group resolution on renaming the \u003ccode translate=\"no\" dir=\"ltr\"\u003einset-area\u003c/code\u003e property to\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eposition-area\u003c/code\u003e, this removal cleans up the implementation in Chromium for a\nstandards compliant feature.\u003c/p\u003e\n\n\u003ch3 id=\"remove_the_ability_to_disable_beforeunloadeventcancelbypreventdefault\" data-text=\"Remove the ability to disable BeforeunloadEventCancelByPreventDefault\" tabindex=\"-1\"\u003eRemove the ability to disable \u003ccode translate=\"no\" dir=\"ltr\"\u003eBeforeunloadEventCancelByPreventDefault\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFeature \u003ccode translate=\"no\" dir=\"ltr\"\u003eBeforeunloadEventCancelByPreventDefault\u003c/code\u003e was shipped in Chrome 117, but\nthere is an enterprise policy that allows this flag to be force-disabled. The\nenterprise policy will be removed in Chrome 131.\u003c/p\u003e\n\n\u003ch3 id=\"remove_non-standard_gpuadapter_requestadapterinfo_method\" data-text=\"Remove non-standard GPUAdapter requestAdapterInfo() method\" tabindex=\"-1\"\u003eRemove non-standard GPUAdapter \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestAdapterInfo()\u003c/code\u003e method\u003c/h3\u003e\n\n\u003cp\u003eThe WebGPU Working Group decided it was impractical for \u003ccode translate=\"no\" dir=\"ltr\"\u003erequestAdapterInfo()\u003c/code\u003e\nto trigger a permission prompt so they\u0026#39;ve removed that option and replaced it\nwith the GPUAdapter \u003ccode translate=\"no\" dir=\"ltr\"\u003einfo\u003c/code\u003e attribute so that web developers can get the same\n\u003ccode translate=\"no\" dir=\"ltr\"\u003eGPUAdapterInfo\u003c/code\u003e value synchronously.\u003c/p\u003e\n\n  \n\n  \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
