{
  "id": "962ee54f-daba-4e8a-9faf-52fdc914b167",
  "title": "Feeling Like I Have No Release: A Journey Towards Sane Deployments",
  "link": "https://css-tricks.com/feeling-like-i-have-no-release-a-journey-towards-sane-deployments/",
  "description": "Deploying like an idiot comes down to a mismatch between the tools you use to deploy and the reward in complexity reduced versus complexity added. Feeling Like I Have No Release: A Journey Towards Sane Deployments originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Lee Meyer",
  "published": "Mon, 07 Apr 2025 14:41:53 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "deployment"
  ],
  "byline": "Lee Meyer",
  "length": 17671,
  "excerpt": "Deploying like an idiot comes down to a mismatch between the tools you use to deploy and the reward in complexity reduced versus complexity added.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "When I was young and dinosaurs walked the earth, I worked on a software team that developed a web-based product for two years before ever releasing it. I don’t just mean we didn’t make it publicly available; we didn’t deploy it anywhere except for a test machine in the office, accessed by two internal testers, and this required a change to each tester’s hosts file. You don’t have to be an agile evangelist to spot the red flag. There’s “release early, release often,” which seemed revolutionary the first time I heard it after living under a waterfall for years, or there’s building so much while waiting so long to deploy that you guarantee weird surprises in a realistic deployment, let alone when you get feedback from real users. I’m told the first deployment experience to a web farm was very special. A tale of a dodgy deployment Being a junior, I was spared being involved in the first deployment. But towards the end of the first three-month cycle of fixes, the team leader asked me, “Would you be available on Tuesday at 2 a.m. to come to the office and do a deployment?” “Yep, sure, no worries.” I went home thinking what a funny dude my team leader was. So on Tuesday at 9 a.m., I show up and say good morning to the team leader and the architect, who sit together staring at one computer. I sit down at my dev machine and start typing. “Man, what happened?” the team leader says over the partition. “You said you’d be here at 2 a.m.” I look at him and see he is not smiling. I say, ”Oh. I thought you were joking.” “I was not joking, and we have a massive problem with the deployment.” Uh-oh. I was junior and did not have the combined forty years of engineering experience of the team leader and architect, but what I had that they lacked was a well-rested brain, so I found the problem rather quickly: It was a code change the dev manager had made to the way we handled cookies, which didn’t show a problem on the internal test server but broke the world on the real web servers. Perhaps my finding the issue was the only thing that saved me from getting a stern lecture. By the time I left years later, it was just a funny story the dev manager shared in my farewell speech, along with nice compliments about what I had achieved for the company — I also accepted an offer to work for the company again later. Breaking news: Human beings need sleep I am sure the two seniors would have been capable of spotting the problem under different circumstances. They had a lot working against them: Sleep deprivation, together with the miscommunication about who would be present, would’ve contributed to feelings of panic, which the outage would’ve exacerbated after they powered through and deployed without me. More importantly, they didn’t know whether the problem was in the new code or human error in their manual deployment process of copying zipped binaries and website files to multiple servers, manually updating config files, comparing and updating database schemas — all in the wee hours of the morning. They were sleepily searching for a needle in a haystack of their own making. The haystack wouldn’t have existed if they had a proven automated deployment process, and if they could be sure the problem could only reside in the code they deployed. There was no reason everything they were doing couldn’t be scripted. They could’ve woken up at 6 a.m. instead of 2 a.m. to verify the automated release of the website before shifting traffic to it and fix any problems that became evident in their release without disrupting real users. The company would get a more stable website and the expensive developers would have more time to focus on developing. If you manually deploy overnight, and then drive, you’re a bloody idiot The 2 a.m. deployments might seem funny if it wasn’t your night to attend and if you have a dark sense of humor. In the subsequent years, I attended many 2 a.m. deployments to atone for the one I slept through. The company paid for breakfast on those days, and if we proved the deployment was working, we could leave for the day and catch up on sleep, assuming we survived the drive home and didn’t end up sleeping forever. The manual deployment checklist was perpetually incomplete and out-of-date, yet the process was never blamed for snafus on deployment days. In reality, sometimes it was a direct consequence of the fallibility of manually working from an inaccurate checklist. Sometimes manual deployment wasn’t directly the culprit, but it made pinpointing the problem or deciding whether to roll back unnecessarily challenging. And you knew rolling back would mean forgoing your sleep again the next day so you’d have a mounting sleep debt working against you. I learned a lot from that team and the complex features I had the opportunity to build. But the deployment process was a step backward from my internship doing Windows programming because in that job I had to write installers so my code would work on user machines, which by nature of the task, I didn’t have access to. When web development removes that inherent limitation, it’s like a devil on your shoulder tempting you to do what seems easy in the moment and update production from your dev machine. You know you want to, especially when the full deployment process is hard and people want a fix straightaway. This is why if you automate deployments, you want to lock things down so that the automated process is the only way to deploy changes. As I became more senior and had more say in how these processes happened at my workplace, I started researching — and I found it easy to relate to the shots taken at manual deployers, such as this presentation titled “Octopus Deploy and how to stop deploying like an idiot” and Octopus Deploy founder Paul Stovell’s sentiments on how to deploy database updates: “Your database isn’t in source control? You don’t deserve one. Go use Excel.” This approach to giving developers a kick in their complacency reminds me of the long-running anti-drunk driving ads here in Australia with the slogan “If you drink then drive, you’re a bloody idiot,” which scared people straight by insulting them for destructive life choices. In the “Stop deploying like an idiot” talk, Damian Brady insults a hypothetical deployment manager at Acme Corp named Frank, who keeps being a hero by introducing risk and wasted time to a process that could be automated using Octopus, which would never make stupid mistakes like overwriting the config file. “Frank’s pretty proud of his process in general,” says Damian. “Frank’s an idiot.” Why are people like this? Frankly, some of the Franks I have worked with were something worse than idiots. Comedian Jim Jeffries has a bit in which he says he’d take a nice idiot over a clever bastard. Frank’s a cunning bastard wolf in idiotic sheep’s clothing — the demographic of people who work in software shows above average IQ, and a person appointed “deployment manager” will have googled the options to make this task easier, but he chose not to use them. The thing is, Frank gets to seem important, make other devs look and feel stupid when they try to follow his process while he’s on leave, and even when he is working he gets to take overseas trips to hang with clients because he is the only one who can get the product working on a new server. Companies must be careful which behaviors they reward, and Conway’s law applies to deployment processes. What I learned by being forced to do deployments manually To an extent, the process reflecting hierarchy and division of responsibility is normal and necessary, which is why Octopus Deploy has built-in manual intervention and approval steps. But also, some of the motivations to stick with manual deployments are nonsense. Complex manual deployments are still more widespread than they need to be, which makes me feel bad for the developers who still live like me back in the 2000s — if you call that living. I guess there is an argument for the team-building experiences in those 2 a.m. deployments, much like deployments in the military sense of the word may teach the troops some valuable life lessons, even if the purported reason for the battle isn’t the real reason, and the costs turn out to be higher than anyone expects. It reminds me of a tour I had the good fortune to take in 2023 of the Adobe San Jose offices, in which a “Photoshop floor” includes time capsule conference rooms representing different periods in Photoshop’s history, including a 90’s room with a working Macintosh Classic running Photoshop 1.0. The past is an interesting and instructive place to visit but not somewhere you’d want to live in 2025. Even so, my experience of Flintsones-style deployments gave me an appreciation for the ways a tool like Octopus Deploy automates everything I was forced to do manually in the past, which kept my motivation up when I was working through the teething problems once I was tasked with transforming a manual deployment process into an automated process. This appreciation for the value proposition of a tool like Octopus Deploy was why I later jumped at the opportunity to work for Octopus in 2021. What I learned working for Octopus Deploy The first thing I noticed was how friendly the devs were and the smoothness of the onboarding process, with only one small manual change to make the code run correctly in Docker on my dev box. The second thing I noticed was that this wasn’t heaven, and there were flaky integration tests, slow builds, and cake file output that hid the informative build errors. In fairness, at the time Octopus was in a period of learning how to upscale. There was a whole project I eventually joined to performance-tune the integration tests and Octopus itself. As an Octopus user, the product had seemed as close to magic as we were likely to find, compared to the hell we had to go through without a proper deployment tool. Yet there’s something heartening about knowing nobody has a flawless codebase, and even Octopus Deploy has some smelly code they have to deal with and suboptimal deployments of some stuff. Once I made my peace with the fact that there’s no silver bullet that magically and perfectly solves any aspect of software, including deployments, my hot take is that deploying like an idiot comes down to a mismatch between the tools you use to deploy and the reward in complexity reduced versus complexity added. Therefore, one example of deploying like an idiot is the story I opened with, in which team members routinely drove to the office at 2 a.m. to manually deploy a complicated website involving database changes, background processes, web farms, and SLAs. But another example of deploying like an idiot might be a solo developer with a side project who sets up Azure Devops to push to Octopus Deploy and pays more than necessary in money and cognitive load. Indeed, Octopus is a deceptively complex tool that can automate anything, not only deployments, but the complexity comes at the price of a learning curve and the risk of decision fatigue. For instance, when I used my “sharpening time” (the Octopus term for side-project time) to explore ways to deploy a JavaScript library, I found at least two different ways to do it in Octopus, depending on whether it’s acceptable to automate upgrading all your consumers to the latest version of your library or whether you need more control of versioning per consumer. Sidenote: the Angry Birds Octopus parody that Octopus marketing created to go with my “consumers of your JavaScript library as tenants” article was a highlight of my time at Octopus — I wish we could have made it playable like a Google Doodle. Nowadays I see automation as a spectrum for how automatic and sophisticated you need things to be, somewhat separate from the choice of tools. The challenge is locating that sweet spot, where automation makes your life easier versus the cost of licensing fees and the time and energy you need to devote to working on the deployment process. Octopus Deploy might be at one end of the spectrum of automated deployments when you need lots of control over a complicated automatic process. On the other end of the spectrum, the guy who runs Can I Use found that adopting git-ftp was a life upgrade from manually copying the modified files to his web server while keeping his process simple and not spending a lot of energy on more sophisticated deployment systems. Somewhere in the middle reside things like Bitbucket Pipelines or GitHub Actions, which are more automated and sophisticated than just git-ftp from your dev machine, but less complicated than Octopus together with TeamCity, which could be overkill on a simple project. The complexity of deployment might be something to consider when defining your architecture, similar to how planning poker can trigger a business to rethink the value of certain features once they obtain holistic feedback from the team on the overall cost. For instance, you might assume you need a database, but when you factor in the complexity it adds to roll-outs, you may be motivated to rethink whether your use case truly needs a database. What about serverless? Does serverless solve our problems given it’s supposed to eliminate the need to worry about how the server works? Reminder: Serverless isn’t serverless It should be uncontroversial to say that “serverless” is a misnomer, but how much this inaccuracy matters is debatable. I’ll give this analogy for why I think the name “serverless” is a problem: Early cars had a right to call themselves “horseless carriages” because they were a paradigm shift that meant your carriage could move without a horse. “Driverless cars” shouldn’t be called that, because they don’t remove the need for a driver; it’s just that the driver is an AI. “Self-driving car” is therefore a better name. Self-driving cars often work well, but completely ignoring the limitations of how they work can be fatal. When you unpack the term “serverless,” it’s like a purportedly horseless carriage still pulled by horse — but the driver claims his feeding and handling of the horse will be managed so well, the carriage will be so insulated from neighing and horse flatulence, passengers will feel as if the horse doesn’t exist. My counterargument is that the reality of the horse is bound to affect the passenger experience sooner or later. For example, one of my hobby projects was a rap battle chat deployed to Firebase. I needed the Firebase cloud function to calculate the score for each post using the same rhyme detection algorithm I used to power the front end. This worked fine in testing when I ran the Firebase function using the Cloud Functions emulator — but it performed unacceptably after my first deployment due to a cold start (loading the pronunciation dictionary was the likely culprit if you’re wondering). Much like my experiences in the 2000s, my code behaved dramatically differently on my dev machine than on the real Firebase, almost as though there is still a server I can’t pretend doesn’t exist — but now I had limited ability to tweak it. One way to fix it was to throw money at the problem. That serverless experience reminds me of a scene in the science fiction novel Rainbows End in which the curmudgeonly main character cuts open a car that isn’t designed to be serviced, only to find that all the components inside are labeled “No user-serviceable parts within.” He’s assured that even if he could cut open those parts, the car is “Russian dolls all the way down.” One of the other characters asks him: “Who’d want to change them once they’re made? Just trash ’em if they’re not working like you want.” I don’t want to seem like a curmudgeon — but my point is that while something like Firebase offers many conveniences and can simplify deployment and configuration, it can also move the problem to knowing which services are appropriate to pay extra for. And you may find your options are limited when things go wrong with a deployment or any other part of web development. Deploying this article Since I love self-referential twist endings, I’ll point out that even publishing an article like this has a variety of possible “deployment processes.” For instance, Octopus uses Jekyll for their blog. You make a branch with the markdown of your proposed blog post, and then marketing proposes changes before setting a publication date and merging. The relevant automated process will handle publication from there. This process has the advantage of using familiar tools for collaborating on changes to a file — but it might not feel approachable to teams not comfortable with Git, and it also might not be immediately apparent how to preview the final article as it will appear on the website. On the other hand, when I create an article for CSS-Tricks, I use Dropbox Paper to create my initial draft, then send it to Geoff Graham, who makes edits, for which I get notifications. Once we have confirmed via email that we’re happy with the article, he manually ports it to Markdown in WordPress, then sends me a link to a pre-live version on the site to check before the article is scheduled for publication. It’s a manual process, so I sometimes find problems even in this “release” of static content collaborated by only two people — but you gotta weigh how much risk there is of mistakes against how much value there would be in fully automating the process. With anything you have to publish on the web, keep searching for that sweet spot of elegance, risk, and the reward-to-effort ratio.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/database-server.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eWhen I was young and dinosaurs walked the earth, I worked on a software team that developed a web-based product for two years before ever releasing it. I don’t just mean we didn’t make it publicly available; we didn’t deploy it anywhere except for a test machine in the office, accessed by two internal testers, and this required a change to each tester’s \u003ca href=\"https://en.wikipedia.org/wiki/Hosts_(file\" rel=\"noopener\"\u003ehosts file\u003c/a\u003e. You don’t have to be an \u003ca href=\"https://en.wikipedia.org/wiki/Agile_software_development\" rel=\"noopener\"\u003eagile\u003c/a\u003e evangelist to spot the red flag. There’s “\u003ca href=\"https://en.wikipedia.org/wiki/Release_early,_release_often\" rel=\"noopener\"\u003erelease early, release often\u003c/a\u003e,” which seemed revolutionary the first time I heard it after living under a \u003ca href=\"https://www.geeksforgeeks.org/why-waterfall-isnt-dead-and-agile-isnt-the-only-answer/#why-waterfall-model-is-not-dead-yet\" rel=\"noopener\"\u003ewaterfall\u003c/a\u003e for years, or there’s building so much while waiting so long to deploy that you guarantee weird surprises in a realistic deployment, let alone when you get feedback from real users. I’m told the first deployment experience to a \u003ca href=\"https://en.wikipedia.org/wiki/Server_farm\" rel=\"noopener\"\u003eweb farm\u003c/a\u003e was very special.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"a-tale-of-a-dodgy-deployment\"\u003eA tale of a dodgy deployment\u003c/h3\u003e\n\n\n\u003cp\u003eBeing a \u003ca href=\"https://medium.com/javascript-scene/junior-developer-for-life-is-for-suckers-921f7de0e7ce\" rel=\"noopener\"\u003ejunior\u003c/a\u003e, I was spared being involved in the first deployment. But towards the end of the first three-month cycle of fixes, the team leader asked me, “Would you be available on Tuesday at 2 a.m. to come to the office and do a deployment?”\u003c/p\u003e\n\n\n\n\u003cp\u003e“Yep, sure, no worries.” I went home thinking what a funny dude my team leader was.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo on Tuesday at 9 a.m., I show up and say good morning to the team leader and the architect, who sit together staring at one computer. I sit down at my dev machine and start typing.\u003c/p\u003e\n\n\n\n\u003cp\u003e“Man, what happened?” the team leader says over the partition. “You said you’d be here at 2 a.m.”\u003c/p\u003e\n\n\n\n\u003cp\u003eI look at him and see he is not smiling. I say, ”Oh. I thought you were joking.”\u003c/p\u003e\n\n\n\n\u003cp\u003e“I was not joking, and we have a massive problem with the deployment.”\u003c/p\u003e\n\n\n\n\u003cp\u003eUh-oh.\u003c/p\u003e\n\n\n\n\u003cp\u003eI was junior and did not have the combined forty years of engineering experience of the team leader and architect, but what I had that they lacked was a \u003ca href=\"https://medium.com/@tsecretdeveloper/how-sleep-affects-your-code-1e2fff5167a2\" rel=\"noopener\"\u003ewell-rested brain\u003c/a\u003e, so I found the problem rather quickly: It was a code change the dev manager had made to the way we handled cookies, which didn’t show a problem on the internal test server but broke the world on the real web servers. Perhaps my finding the issue was the only thing that saved me from getting a stern lecture. By the time I left years later, it was just a funny story the dev manager shared in my farewell speech, along with nice compliments about what I had achieved for the company — I also accepted an offer to work for the company again later.\u003c/p\u003e\n\n\n\u003ch3 id=\"breaking-news-human-beings-need-sleep\"\u003eBreaking news: Human beings need sleep\u003c/h3\u003e\n\n\n\u003cp\u003eI am sure the two seniors would have been capable of spotting the problem under different circumstances. They had a lot working against them: \u003ca href=\"https://www.nhlbi.nih.gov/health/sleep-deprivation\" rel=\"noopener\"\u003eSleep deprivation\u003c/a\u003e, together with the miscommunication about who would be present, would’ve contributed to \u003ca href=\"https://blog.airbrake.io/how-to-reduce-fear-of-deployments-among-your-team\" rel=\"noopener\"\u003efeelings of panic\u003c/a\u003e, which the outage would’ve exacerbated after they powered through and deployed without me. More importantly, they didn’t know whether the problem was in the new code or human error in their manual deployment process of copying zipped binaries and website files to multiple servers, manually updating config files, \u003ca href=\"https://www.red-gate.com/products/sql-compare/\" rel=\"noopener\"\u003ecomparing and updating database schemas\u003c/a\u003e — all in the wee hours of the morning.\u003c/p\u003e\n\n\n\n\u003cp\u003eThey were sleepily searching for a needle in a haystack of their own making. The haystack wouldn’t have existed if they had a proven automated deployment process, and if they could be sure the problem could only reside in the code they deployed. There was no reason everything they were doing couldn’t be \u003ca href=\"https://learn.microsoft.com/en-us/training/modules/script-with-powershell\" rel=\"noopener\"\u003escripted\u003c/a\u003e. They could’ve woken up at 6 a.m. instead of 2 a.m. to \u003ca href=\"https://octopus.com/devops/software-deployments/blue-green-deployment/#thorough-testing\" rel=\"noopener\"\u003everify the automated release of the website before shifting traffic to it\u003c/a\u003e and fix any problems that became evident in their release without disrupting real users. The company would get a more stable website and the expensive developers would have more time to focus on developing.\u003c/p\u003e\n\n\n\u003ch3 id=\"if-you-manually-deploy-overnight-and-then-drive-you-re-a-bloody-idiot\"\u003eIf you manually deploy overnight, and then drive, you’re a bloody idiot\u003c/h3\u003e\n\n\n\u003cp\u003eThe 2 a.m. deployments might seem funny if it wasn’t your night to attend and if you have a dark sense of humor. In the subsequent years, I attended many 2 a.m. deployments to atone for the one I slept through. The company paid for breakfast on those days, and if we proved the deployment was working, we could leave for the day and catch up on sleep, assuming we survived the drive home and didn’t end up \u003ca href=\"https://www.roadsafety.gov.au/action-plan/2018-2020/fatigue\" rel=\"noopener\"\u003esleeping forever\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe manual deployment checklist was perpetually incomplete and out-of-date, yet the process was never blamed for snafus on deployment days. In reality, sometimes it was a direct consequence of the fallibility of manually working from an inaccurate checklist. Sometimes manual deployment wasn’t directly the culprit, but it made pinpointing the problem or deciding whether to roll back unnecessarily challenging. And you knew rolling back would mean forgoing your sleep again the next day so you’d have a mounting \u003ca href=\"https://www.webmd.com/sleep-disorders/what-is-sleep-debt\" rel=\"noopener\"\u003esleep debt\u003c/a\u003e working against you.\u003c/p\u003e\n\n\n\n\u003cp\u003eI learned a lot from that team and the complex features I had the opportunity to build. But the deployment process was a step backward from my internship doing Windows programming because in that job I had to write \u003ca href=\"https://learn.microsoft.com/en-us/mem/configmgr/develop/apps/how-to-create-the-windows-installer-file-msi\" rel=\"noopener\"\u003einstallers\u003c/a\u003e so my code would work on user machines, which by nature of the task, I didn’t have access to. When web development removes that inherent limitation, it’s like a devil on your shoulder tempting you to do what seems easy in the moment and update production from your dev machine. You know you want to, especially when the full deployment process is hard and people want a fix straightaway. This is why if you automate deployments, you want to \u003ca href=\"https://pretius.com/blog/liquibase-tutorial/#Making\" rel=\"noopener\"\u003elock things down so that the automated process is the only way to deploy changes\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eAs I became more senior and had more say in how these processes happened at my workplace, I started researching — and I found it easy to relate to the shots taken at manual deployers, such as this presentation titled \u003ca href=\"https://youtu.be/66FLYTEoLhM?si=y6eS3sQ8GwE97CVu\" rel=\"noopener\"\u003e“Octopus Deploy and how to stop deploying like an idiot”\u003c/a\u003e and \u003ca href=\"https://octopus.com/\" rel=\"noopener\"\u003eOctopus Deploy\u003c/a\u003e founder \u003ca href=\"https://paulstovell.com/\" rel=\"noopener\"\u003ePaul Stovell’s\u003c/a\u003e sentiments on how to deploy database updates: “Your database isn’t in source control? You don’t deserve one. Go use Excel.” This approach to giving developers a kick in their complacency reminds me of the \u003ca href=\"https://catalogue.nla.gov.au/catalog/7125346\" rel=\"noopener\"\u003elong-running anti-drunk driving ads here in Australia\u003c/a\u003e with the slogan “If you drink then drive, you’re a bloody idiot,” which scared people straight by insulting them for destructive life choices.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the “Stop deploying like an idiot” talk, Damian Brady insults a hypothetical deployment manager at Acme Corp named Frank, who keeps being a hero by introducing risk and wasted time to a process that could be automated using Octopus, which would never make stupid mistakes like overwriting the \u003ca href=\"https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/web-config?view=aspnetcore-9.0\" rel=\"noopener\"\u003econfig file\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e“Frank’s pretty proud of his process in general,” says Damian. “Frank’s an idiot.”\u003c/p\u003e\n\n\n\u003ch3 id=\"why-are-people-like-this-\"\u003eWhy are people like this?\u003c/h3\u003e\n\n\n\u003cp\u003eFrankly, some of the Franks I have worked with were something worse than idiots. Comedian \u003ca href=\"https://en.wikipedia.org/wiki/Jim_Jefferies\" rel=\"noopener\"\u003eJim Jeffries\u003c/a\u003e has a bit in which he says he’d take a nice idiot over a clever bastard. Frank’s a cunning bastard wolf in idiotic sheep’s clothing — the demographic of people who work in software shows \u003ca href=\"https://www.electronicproducts.com/engineer-vs-engineer-who-has-the-higher-iq/\" rel=\"noopener\"\u003eabove average IQ\u003c/a\u003e, and a person appointed “deployment manager” will have googled the options to make this task easier, but he chose not to use them. The thing is, Frank gets to seem important, make other devs look and feel stupid when they try to follow his process while he’s on leave, and even when he is working he gets to take overseas trips to hang with clients because he is the only one who can get the product working on a new server. Companies must be careful which \u003ca href=\"https://ivyexec.com/career-advice/2017/accidentally-reward-wrong-behaviors/\" rel=\"noopener\"\u003ebehaviors they reward\u003c/a\u003e, and \u003ca href=\"https://en.wikipedia.org/wiki/Conway%27s_law\" rel=\"noopener\"\u003eConway’s law\u003c/a\u003e applies to deployment processes.\u003c/p\u003e\n\n\n\u003ch3 id=\"what-i-learned-by-being-forced-to-do-deployments-manually\"\u003eWhat I learned by being forced to do deployments manually\u003c/h3\u003e\n\n\n\u003cp\u003eTo an extent, the process reflecting hierarchy and division of responsibility is normal and necessary, which is why Octopus Deploy has built-in \u003ca href=\"https://octopus.com/docs/projects/built-in-step-templates/manual-intervention-and-approvals\" rel=\"noopener\"\u003emanual intervention and approval steps\u003c/a\u003e. But also, some of the motivations to stick with manual deployments are nonsense. \u003ca href=\"https://www.forbes.com/councils/forbestechcouncil/2021/02/25/its-dirty-little-secret-manual-processes-are-still-prevalent/\" rel=\"noopener\"\u003eComplex manual deployments are still more widespread than they need to be\u003c/a\u003e, which makes me feel bad for the developers who still live like me back in the 2000s — if you call that living.\u003c/p\u003e\n\n\n\n\u003cp\u003eI guess there is an argument for the team-building experiences in those 2 a.m. deployments, much like deployments in the military sense of the word may teach the troops some valuable life lessons, even if the purported reason for the battle isn’t the real reason, and the costs turn out to be higher than anyone expects.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt reminds me of a tour I had the good fortune to take in 2023 of the Adobe San Jose offices, in which a “Photoshop floor” includes \u003ca href=\"https://blog.adobe.com/en/publish/2018/04/04/adobe-photoshop-floor\" rel=\"noopener\"\u003etime capsule\u003c/a\u003e conference rooms representing different periods in Photoshop’s history, including a 90’s room with a working \u003ca href=\"https://www.cultofmac.com/news/what-its-like-to-use-photoshop-1-0-on-a-vintage-mac-25-years-later\" rel=\"noopener\"\u003eMacintosh Classic running Photoshop 1.0\u003c/a\u003e. The past is an interesting and instructive place to visit but not somewhere you’d want to live in 2025.\u003c/p\u003e\n\n\n\n\u003cp\u003eEven so, my experience of Flintsones-style deployments gave me an appreciation for the ways a tool like Octopus Deploy automates everything I was forced to do manually in the past, which kept my motivation up when I was working through the \u003ca href=\"https://www.xenonstack.com/insights/deployment-automation-challenges\" rel=\"noopener\"\u003eteething problems\u003c/a\u003e once I was tasked with transforming a manual deployment process into an automated process. This appreciation for the value proposition of a tool like Octopus Deploy was why I later jumped at the opportunity to work for Octopus in 2021.\u003c/p\u003e\n\n\n\u003ch3 id=\"what-i-learned-working-for-octopus-deploy\"\u003eWhat I learned working for Octopus Deploy\u003c/h3\u003e\n\n\n\u003cp\u003eThe first thing I noticed was how friendly the devs were and the smoothness of the onboarding process, with only one small manual change to make the code run correctly in Docker on my dev box. The second thing I noticed was that this wasn’t heaven, and there were \u003ca href=\"https://qase.io/blog/flaky-tests/\" rel=\"noopener\"\u003eflaky integration tests\u003c/a\u003e, \u003ca href=\"https://github.blog/engineering/experiment-the-hidden-costs-of-waiting-on-slow-build-times/\" rel=\"noopener\"\u003eslow builds,\u003c/a\u003e and \u003ca href=\"https://cakebuild.net/\" rel=\"noopener\"\u003ecake file\u003c/a\u003e output that hid the informative build errors. In fairness, at the time Octopus was in a period of \u003ca href=\"https://www.innovationaus.com/octopus-deploy-on-the-art-of-sustainable-scaling/\" rel=\"noopener\"\u003elearning how to upscale\u003c/a\u003e. There was a whole project I eventually joined to performance-tune the integration tests and Octopus itself. As an Octopus user, the product had seemed as close to magic as we were likely to find, compared to the hell we had to go through without a proper deployment tool. Yet there’s something heartening about knowing nobody has a flawless codebase, and even Octopus Deploy has some smelly code they have to deal with and suboptimal deployments of some stuff.\u003c/p\u003e\n\n\n\n\u003cp\u003eOnce I made my peace with the fact that there’s \u003ca href=\"https://en.wikipedia.org/wiki/No_Silver_Bullet\" rel=\"noopener\"\u003eno silver bullet\u003c/a\u003e that magically and perfectly solves any aspect of software, including deployments, my hot take is that deploying like an idiot comes down to a mismatch between the tools you use to deploy and the reward in complexity reduced versus complexity added. Therefore, one example of deploying like an idiot is the story I opened with, in which team members routinely drove to the office at 2 a.m. to manually deploy a complicated website involving database changes, background processes, web farms, and SLAs. But another example of deploying like an idiot might be a solo developer with a side project who sets up \u003ca href=\"https://octopus.com/azure-devops\" rel=\"noopener\"\u003eAzure Devops to push to Octopus Deploy\u003c/a\u003e and pays more than necessary in money and \u003ca href=\"https://www.mcw.edu/-/media/MCW/Education/Academic-Affairs/OEI/Faculty-Quick-Guides/Cognitive-Load-Theory.pdf\" rel=\"noopener\"\u003ecognitive load\u003c/a\u003e. Indeed, Octopus is a deceptively complex tool that can \u003ca href=\"https://octopus.com/docs/runbooks\" rel=\"noopener\"\u003eautomate anything\u003c/a\u003e, not only deployments, but the complexity comes at the price of a learning curve and the risk of \u003ca href=\"https://en.wikipedia.org/wiki/Decision_fatigue\" rel=\"noopener\"\u003edecision fatigue\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor instance, when I used my “\u003ca href=\"https://octopus.com/blog/at-the-helm-bob-walker#how-does-your-team-keep-up-with-all-the-changes-in-the-world-of-software-and-our-ever-evolving-product\" rel=\"noopener\"\u003esharpening time\u003c/a\u003e” (the Octopus term for \u003ca href=\"https://en.wikipedia.org/wiki/Side_project_time\" rel=\"noopener\"\u003eside-project time\u003c/a\u003e) to explore ways to deploy a JavaScript library, I found at least \u003ca href=\"https://octopus.com/blog/deploying-javascript-library-project-with-octopus\" rel=\"noopener\"\u003etwo\u003c/a\u003e different \u003ca href=\"https://octopus.com/blog/javacript-library-users-as-tenants\" rel=\"noopener\"\u003eways\u003c/a\u003e to do it in Octopus, depending on whether it’s acceptable to automate upgrading all your consumers to the latest version of your library or whether you need more control of versioning per consumer. Sidenote: the \u003ca href=\"https://i.octopus.com/blog/2021-12/javacript-library-users-as-tenants/blogimage-manageconsumersjslibraryastenants-2021.png\" rel=\"noopener\"\u003eAngry Birds Octopus parody\u003c/a\u003e that Octopus marketing created to go with my “consumers of your JavaScript library as tenants” article was a highlight of my time at Octopus — I wish we could have made it playable like a \u003ca href=\"https://doodles.google/\" rel=\"noopener\"\u003eGoogle Doodle\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eNowadays I see automation as a spectrum for how automatic and sophisticated you need things to be, somewhat separate from the choice of tools. The challenge is locating that \u003ca href=\"https://en.wikipedia.org/wiki/Sweet_spot_(sports\" rel=\"noopener\"\u003esweet spot\u003c/a\u003e, where automation makes your life easier versus the cost of licensing fees and the time and energy you need to devote to working on the deployment process. Octopus Deploy might be at one end of the spectrum of automated deployments when you need lots of control over a complicated automatic process. On the other end of the spectrum, the \u003ca href=\"https://front-end.social/@fyrd\" rel=\"noopener\"\u003eguy\u003c/a\u003e who runs \u003ca href=\"https://caniuse.com/\" rel=\"noopener\"\u003eCan I Use\u003c/a\u003e found that adopting \u003ca href=\"https://github.com/git-ftp/git-ftp\" rel=\"noopener\"\u003egit-ftp\u003c/a\u003e was a life upgrade from manually copying the modified files to his web server while keeping his process simple and not spending a lot of energy on more sophisticated deployment systems. Somewhere in the middle reside things like \u003ca href=\"https://www.atlassian.com/software/bitbucket/features/pipelines\" rel=\"noopener\"\u003eBitbucket Pipelines\u003c/a\u003e or \u003ca href=\"https://github.com/features/actions\" rel=\"noopener\"\u003eGitHub Actions\u003c/a\u003e, which are more automated and sophisticated than just git-ftp from your dev machine, but less complicated than \u003ca href=\"https://octopus.com/teamcity\" rel=\"noopener\"\u003eOctopus together with TeamCity\u003c/a\u003e, which could be overkill on a simple project.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe complexity of deployment might be something to consider when defining your architecture, similar to how \u003ca href=\"https://en.wikipedia.org/wiki/Planning_poker\" rel=\"noopener\"\u003eplanning poker\u003c/a\u003e can trigger a business to rethink the value of certain features once they obtain holistic feedback from the team on the overall cost. For instance, you might assume you need a database, but when you factor in the \u003ca href=\"https://blog.jetbrains.com/idea/2025/02/database-migrations-in-the-real-world/\" rel=\"noopener\"\u003ecomplexity it adds to roll-outs\u003c/a\u003e, you may be motivated to rethink whether your use case \u003ca href=\"https://frontendmasters.com/blog/the-moment-you-need-a-database/\" rel=\"noopener\"\u003etruly needs a database\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhat about serverless? Does serverless solve our problems given it’s supposed to eliminate the need to worry about how the server works?\u003c/p\u003e\n\n\n\u003ch3 id=\"reminder-serverless-isn-t-serverless\"\u003eReminder: Serverless isn’t serverless\u003c/h3\u003e\n\n\n\u003cp\u003eIt should be uncontroversial to say that “serverless” is a \u003ca href=\"https://en.wikipedia.org/wiki/Serverless_computing#Overview\" rel=\"noopener\"\u003emisnomer\u003c/a\u003e, but how much this inaccuracy matters is \u003ca href=\"https://www.reddit.com/r/dotnet/comments/xgu8b1/i_hate_this_term_serverless_its_non_existent/\" rel=\"noopener\"\u003edebatable\u003c/a\u003e. I’ll give this analogy for why I think the name “serverless” is a problem: Early cars had a right to call themselves \u003ca href=\"https://en.wikipedia.org/wiki/Horseless_carriage\" rel=\"noopener\"\u003e“horseless carriages”\u003c/a\u003e because they were a paradigm shift that meant your carriage could move without a horse. “Driverless cars” shouldn’t be called that, because they don’t remove the need for a driver; it’s just that the driver is an AI. “Self-driving car” is therefore a better name. Self-driving cars often work well, but completely ignoring the limitations of how they work \u003ca href=\"https://www.abc.net.au/news/2024-06-19/self-driving-cars-report/103992024\" rel=\"noopener\"\u003ecan be fatal\u003c/a\u003e. When you unpack the term “serverless,” it’s like a purportedly horseless carriage still pulled by horse — but the driver claims his feeding and handling of the horse will be managed so well, the carriage will be so insulated from neighing and horse flatulence, passengers will feel as if the horse doesn’t exist. My counterargument is that the reality of the horse is bound to affect the passenger experience sooner or later.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, one of my hobby projects was a rap battle chat deployed to \u003ca href=\"https://firebase.google.com/\" rel=\"noopener\"\u003eFirebase\u003c/a\u003e. I needed the \u003ca href=\"https://firebase.google.com/docs/functions\" rel=\"noopener\"\u003eFirebase cloud function\u003c/a\u003e to calculate the score for each post using the same \u003ca href=\"https://www.npmjs.com/package/rhyme-detector\" rel=\"noopener\"\u003erhyme detection algorithm\u003c/a\u003e I used to \u003ca href=\"https://www.npmjs.com/package/rhyme-highlight-vue-3\" rel=\"noopener\"\u003epower the front end\u003c/a\u003e. This worked fine in testing when I ran the Firebase function using the \u003ca href=\"https://firebase.google.com/docs/functions/local-emulator\" rel=\"noopener\"\u003eCloud Functions emulator\u003c/a\u003e — but it performed unacceptably after my first \u003ca href=\"https://cloud.google.com/build/docs/deploying-builds/deploy-firebase\" rel=\"noopener\"\u003edeployment\u003c/a\u003e due to \u003ca href=\"https://firebase.google.com/docs/functions/tips#use_dependencies_wisely\" rel=\"noopener\"\u003ea cold start\u003c/a\u003e (loading the \u003ca href=\"https://www.npmjs.com/package/cmu-pronouncing-dictionary\" rel=\"noopener\"\u003epronunciation dictionary\u003c/a\u003e was the likely culprit if you’re wondering). Much like my experiences in the 2000s, my code behaved dramatically differently on my dev machine than on the real Firebase, almost as though there is still a server I can’t pretend doesn’t exist — but now I had limited ability to tweak it. One way to fix it was to \u003ca href=\"https://firebase.google.com/docs/functions/manage-functions?gen=2nd#keep_a_minimum_number_of_instances_w\" rel=\"noopener\"\u003ethrow money at the problem\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat serverless experience reminds me of a scene in the science fiction novel \u003ca href=\"https://www.goodreads.com/book/show/102439.Rainbows_End\" rel=\"noopener\"\u003eRainbows End\u003c/a\u003e in which the curmudgeonly main character cuts open a car that isn’t designed to be serviced, only to find that all the components inside are labeled “No user-serviceable parts within.” He’s assured that even if he could cut open those parts, the car is “Russian dolls all the way down.” One of the other characters asks him: “Who’d want to change them once they’re made? Just trash ’em if they’re not working like you want.”\u003c/p\u003e\n\n\n\n\u003cp\u003eI don’t want to seem like a curmudgeon — but my point is that while something like Firebase offers many conveniences and can simplify \u003ca href=\"https://firebase.google.com/docs/functions/manage-functions?gen=2nd\" rel=\"noopener\"\u003edeployment\u003c/a\u003e and \u003ca href=\"https://firebase.google.com/docs/functions/config-env?gen=2nd\" rel=\"noopener\"\u003econfiguration\u003c/a\u003e, it can also move the problem to knowing which services are appropriate to pay extra for. And you may find your options are limited when things go wrong with a deployment or any other part of web development.\u003c/p\u003e\n\n\n\u003ch3 id=\"deploying-this-article\"\u003eDeploying this article\u003c/h3\u003e\n\n\n\u003cp\u003eSince I love self-referential twist endings, I’ll point out that even publishing an article like this has a variety of possible “deployment processes.” For instance, Octopus uses \u003ca href=\"https://jekyllrb.com/\" rel=\"noopener\"\u003eJekyll\u003c/a\u003e for their blog. You make a branch with the markdown of your proposed blog post, and then marketing proposes changes before setting a publication date and merging. The relevant automated process will handle publication from there. This process has the advantage of using familiar tools for collaborating on changes to a file — but it might not feel approachable to teams not comfortable with Git, and it also might not be immediately apparent how to preview the final article as it will appear on the website.\u003c/p\u003e\n\n\n\n\u003cp\u003eOn the other hand, when I create an article for CSS-Tricks, I use \u003ca href=\"https://css-tricks.com/paper\"\u003eDropbox Paper\u003c/a\u003e to create my initial draft, then \u003ca href=\"https://css-tricks.com/guest-writing/\"\u003esend it\u003c/a\u003e to \u003ca href=\"https://geoffgraham.me/\" rel=\"noopener\"\u003eGeoff Graham\u003c/a\u003e, who makes edits, for which I get notifications. Once we have confirmed via email that we’re happy with the article, he manually ports it to Markdown in WordPress, then sends me a link to a pre-live version on the site to check before the article is scheduled for publication. It’s a manual process, so I sometimes find problems even in this “release” of static content collaborated by only two people — but you gotta weigh how much risk there is of mistakes against how much value there would be in fully automating the process. With anything you have to publish on the web, keep searching for that sweet spot of elegance, risk, and the reward-to-effort ratio.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "19 min read",
  "publishedTime": "2025-04-07T08:41:53-06:00",
  "modifiedTime": "2025-04-07T08:41:56-06:00"
}
