{
  "id": "fa13e566-1609-4834-990b-1e0b8a6087a4",
  "title": "The Different (and Modern) Ways to Toggle Content",
  "link": "https://css-tricks.com/the-different-and-modern-ways-to-toggle-content/",
  "description": "Let’s spend some time looking at disclosures, the Dialog API, the Popover API, and more. We’ll look at the right time to use each one depending on your needs. Modal or non-modal? JavaScript or pure HTML/CSS? Not sure? Don’t worry, we’ll go into all that. The Different (and Modern) Ways to Toggle Content originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Daniel Schwarz",
  "published": "Fri, 08 Nov 2024 13:57:09 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "details",
    "dialog",
    "popover"
  ],
  "byline": "Daniel Schwarz",
  "length": 20830,
  "excerpt": "Let’s spend some time looking at disclosures, the Dialog API, the Popover API, and more. We’ll look at the right time to use each one depending on your needs. Modal or non-modal? JavaScript or pure HTML/CSS? Not sure? Don’t worry, we’ll go into all that.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! If all you have is a hammer, everything looks like a nail. Abraham Maslow It’s easy to default to what you know. When it comes to toggling content, that might be reaching for display: none or opacity: 0 with some JavaScript sprinkled in. But the web is more “modern” today, so perhaps now is the right time to get a birds-eye view of the different ways to toggle content — which native APIs are actually supported now, their pros and cons, and some things about them that you might not know (such as any pseudo-elements and other non-obvious stuff). So, let’s spend some time looking at disclosures (\u003cdetails\u003e and \u003csummary\u003e), the Dialog API, the Popover API, and more. We’ll look at the right time to use each one depending on your needs. Modal or non-modal? JavaScript or pure HTML/CSS? Not sure? Don’t worry, we’ll go into all that. Disclosures (\u003cdetails\u003e and \u003csummary\u003e) Use case: Accessibly summarizing content while making the content details togglable independently, or as an accordion. Going in release order, disclosures — known by their elements as \u003cdetails\u003e and \u003csummary\u003e — marked the first time we were able to toggle content without JavaScript or weird checkbox hacks. But lack of web browser support obviously holds new features back at first, and this one in particular came without keyboard accessibility. So I’d understand if you haven’t used it since it came to Chrome 12 way back in 2011. Out of sight, out of mind, right? Here’s the low-down: It’s functional without JavaScript (without any compromises). It’s fully stylable without appearance: none or the like. You can hide the marker without non-standard pseudo-selectors. You can connect multiple disclosures to create an accordion. Aaaand… it’s fully animatable, as of 2024. Marking up disclosures What you’re looking for is this: \u003cdetails\u003e \u003csummary\u003eContent summary (always visible)\u003c/summary\u003e Content (visibility is toggled when summary is clicked on) \u003c/details\u003e Behind the scenes, the content’s wrapped in a pseudo-element that as of 2024 we can select using ::details-content. To add to this, there’s a ::marker pseudo-element that indicates whether the disclosure’s open or closed, which we can customize. With that in mind, disclosures actually look like this under the hood: \u003cdetails\u003e \u003csummary\u003e\u003c::marker\u003e\u003c/::marker\u003eContent summary (always visible)\u003c/summary\u003e \u003c::details-content\u003e Content (visibility is toggled when summary is clicked on) \u003c/::details-content\u003e \u003c/details\u003e To have the disclosure open by default, give \u003cdetails\u003e the open attribute, which is what happens behind the scenes when disclosures are opened anyway. \u003cdetails open\u003e ... \u003c/details\u003e Styling disclosures Let’s be real: you probably just want to lose that annoying marker. Well, you can do that by setting the display property of \u003csummary\u003e to anything but list-item: summary { display: block; /* Or anything else that isn't list-item */ } Alternatively, you can modify the marker. In fact, the example below utilizes Font Awesome to replace it with another icon, but keep in mind that ::marker doesn’t support many properties. The most flexible workaround is to wrap the content of \u003csummary\u003e in an element and select it in CSS. \u003cdetails\u003e \u003csummary\u003e\u003cspan\u003eContent summary\u003c/span\u003e\u003c/summary\u003e Content \u003c/details\u003e details { /* The marker */ summary::marker { content: \"\\f150\"; font-family: \"Font Awesome 6 Free\"; } /* The marker when \u003cdetails\u003e is open */ \u0026[open] summary::marker { content: \"\\f151\"; } /* Because ::marker doesn’t support many properties */ summary span { margin-left: 1ch; display: inline-block; } } Creating an accordion with multiple disclosures To create an accordion, name multiple disclosures (they don’t even have to be siblings) with a name attribute and a matching value (similar to how you’d implement \u003cinput type=\"radio\"\u003e): \u003cdetails name=\"starWars\" open\u003e \u003csummary\u003ePrequels\u003c/summary\u003e \u003cul\u003e \u003cli\u003eEpisode I: The Phantom Menace\u003c/li\u003e \u003cli\u003eEpisode II: Attack of the Clones\u003c/li\u003e \u003cli\u003eEpisode III: Revenge of the Sith\u003c/li\u003e \u003c/ul\u003e \u003c/details\u003e \u003cdetails name=\"starWars\"\u003e \u003csummary\u003eOriginals\u003c/summary\u003e \u003cul\u003e \u003cli\u003eEpisode IV: A New Hope\u003c/li\u003e \u003cli\u003eEpisode V: The Empire Strikes Back\u003c/li\u003e \u003cli\u003eEpisode VI: Return of the Jedi\u003c/li\u003e \u003c/ul\u003e \u003c/details\u003e \u003cdetails name=\"starWars\"\u003e \u003csummary\u003eSequels\u003c/summary\u003e \u003cul\u003e \u003cli\u003eEpisode VII: The Force Awakens\u003c/li\u003e \u003cli\u003eEpisode VIII: The Last Jedi\u003c/li\u003e \u003cli\u003eEpisode IX: The Rise of Skywalker\u003c/li\u003e \u003c/ul\u003e \u003c/details\u003e Using a wrapper, we can even turn these into horizontal tabs: \u003cdiv\u003e \u003c!-- Flex wrapper --\u003e \u003cdetails name=\"starWars\" open\u003e ... \u003c/details\u003e \u003cdetails name=\"starWars\"\u003e ... \u003c/details\u003e \u003cdetails name=\"starWars\"\u003e ... \u003c/details\u003e \u003c/div\u003e div { gap: 1ch; display: flex; position: relative; details { min-height: 106px; /* Prevents content shift */ \u0026[open] summary, \u0026[open]::details-content { background: #eee; } \u0026[open]::details-content { left: 0; position: absolute; } } } …or, using 2024’s Anchor Positioning API, vertical tabs (same HTML): div { display: inline-grid; anchor-name: --wrapper; details[open] { summary, \u0026::details-content { background: #eee; } \u0026::details-content { position: absolute; position-anchor: --wrapper; top: anchor(top); left: anchor(right); } } } If you’re looking for some wild ideas on what we can do with the Popover API in CSS, check out John Rhea’s article in which he makes an interactive game solely out of disclosures! Adding JavaScript functionality Want to add some JavaScript functionality? // Optional: select and loop multiple disclosures document.querySelectorAll(\"details\").forEach(details =\u003e { details.addEventListener(\"toggle\", () =\u003e { // The disclosure was toggled if (details.open) { // The disclosure was opened } else { // The disclosure was closed } }); }); Creating accessible disclosures Disclosures are accessible as long as you follow a few rules. For example, \u003csummary\u003e is basically a \u003clabel\u003e, meaning that its content is announced by screen readers when in focus. If there isn’t a \u003csummary\u003e or \u003csummary\u003e isn’t a direct child of \u003cdetails\u003e then the user agent will create a label for you that normally says “Details” both visually and in assistive tech. Older web browsers might insist that it be the first child, so it’s best to make it so. To add to this, \u003csummary\u003e has the role of button, so whatever’s invalid inside a \u003cbutton\u003e is also invalid inside a \u003csummary\u003e. This includes headings, so you can style a \u003csummary\u003e as a heading, but you can’t actually insert a heading into a \u003csummary\u003e. The Dialog element (\u003cdialog\u003e) Use case: Modals Now that we have the Popover API for non-modal overlays, I think it’s best if we start to think of dialogs as modals even though the show() method does allow for non-modal dialogs. The advantage that the popover attribute has over the \u003cdialog\u003e element is that you can use it to create non-modal overlays without JavaScript, so in my opinion there’s no benefit to non-modal dialogs anymore, which do require JavaScript. For clarity, a modal is an overlay that makes the main document inert, whereas with non-modal overlays the main document remains interactive. There are a few other features that modal dialogs have out-of-the-box as well, including: a stylable backdrop, an autofocus onto the first focusable element within the \u003cdialog\u003e (or, as a backup, the \u003cdialog\u003e itself — include an aria-label in this case), a focus trap (as a result of the main document’s inertia), the esc key closes the dialog, and both the dialog and the backdrop are animatable.Marking up and activating dialogs Start with the \u003cdialog\u003e element: \u003cdialog\u003e ... \u003c/dialog\u003e It’s hidden by default and, similar to \u003cdetails\u003e, we can have it open when the page loads, although it isn’t modal in this scenario since it does not contain interactive content because it doesn’t opened with showModal(). \u003cdialog open\u003e ... \u003c/dialog\u003e I can’t say that I’ve ever needed this functionality. Instead, you’ll likely want to reveal the dialog upon some kind of interaction, such as the click of a button — so here’s that button: \u003cbutton data-dialog=\"dialogA\"\u003eOpen dialogA\u003c/button\u003e Wait, why are we using data attributes? Well, because we might want to hand over an identifier that tells the JavaScript which dialog to open, enabling us to add the dialog functionality to all dialogs in one snippet, like this: // Select and loop all elements with that data attribute document.querySelectorAll(\"[data-dialog]\").forEach(button =\u003e { // Listen for interaction (click) button.addEventListener(\"click\", () =\u003e { // Select the corresponding dialog const dialog = document.querySelector(`#${ button.dataset.dialog }`); // Open dialog dialog.showModal(); // Close dialog dialog.querySelector(\".closeDialog\").addEventListener(\"click\", () =\u003e dialog.close()); }); }); Don’t forget to add a matching id to the \u003cdialog\u003e so it’s associated with the \u003cbutton\u003e that shows it: \u003cdialog id=\"dialogA\"\u003e \u003c!-- id and data-dialog = dialogA --\u003e ... \u003c/dialog\u003e And, lastly, include the “close” button: \u003cdialog id=\"dialogA\"\u003e \u003cbutton class=\"closeDialog\"\u003eClose dialogA\u003c/button\u003e \u003c/dialog\u003e Note: \u003cform method=\"dialog\"\u003e (that has a \u003cbutton\u003e) or \u003cbutton formmethod=\"dialog\"\u003e (wrapped in a \u003cform\u003e) also closes the dialog. How to prevent scrolling when the dialog is open Prevent scrolling while the modal’s open, with one line of CSS: body:has(dialog:modal) { overflow: hidden; } Styling the dialog’s backdrop And finally, we have the backdrop to reduce distraction from what’s underneath the top layer (this applies to modals only). Its styles can be overwritten, like this: ::backdrop { background: hsl(0 0 0 / 90%); backdrop-filter: blur(3px); /* A fun property just for backdrops! */ } On that note, the \u003cdialog\u003e itself comes with a border, a background, and some padding, which you might want to reset. Actually, popovers behave the same way. Dealing with non-modal dialogs To implement a non-modal dialog, use: show() instead of showModal() dialog[open] (targets both) instead of dialog:modal Although, as I said before, the Popover API doesn’t require JavaScript, so for non-modal overlays I think it’s best to use that. The Popover API (\u003celement popover\u003e) Use case: Non-modal overlays Popups, basically. Suitable use cases include tooltips (or toggletips — it’s important to know the difference), onboarding walkthroughs, notifications, togglable navigations, and other non-modal overlays where you don’t want to lose access to the main document. Obviously these use cases are different to those of dialogs, but nonetheless popovers are extremely awesome. Functionally they’re just like just dialogs, but not modal and don’t require JavaScript. Marking up popovers To begin, the popover needs an id as well as the popover attribute with the manual value (which means clicking outside of the popover doesn’t close it), the auto value (clicking outside of the popover does close it), or no value (which means the same thing). To be semantic, the popover can be a \u003cdialog\u003e. \u003cdialog id=\"tooltipA\" popover\u003e ... \u003c/dialog\u003e Next, add the popovertarget attribute to the \u003cbutton\u003e or \u003cinput type=\"button\"\u003e that we want to toggle the popover’s visibility, with a value matching the popover’s id attribute (this is optional since clicking outside of the popover will close it anyway, unless popover is set to manual): \u003cdialog id=\"tooltipA\" popover\u003e \u003cbutton popovertarget=\"tooltipA\"\u003eHide tooltipA\u003c/button\u003e \u003c/dialog\u003e Place another one of those buttons in your main document, so that you can show the popover. That’s right, popovertarget is actually a toggle (unless you specify otherwise with the popovertargetaction attribute that accepts show, hide, or toggle as its value — more on that later). Styling popovers By default, popovers are centered within the top layer (like dialogs), but you probably don’t want them there as they’re not modals, after all. \u003cmain\u003e \u003cbutton popovertarget=\"tooltipA\"\u003eShow tooltipA\u003c/button\u003e \u003c/main\u003e \u003cdialog id=\"tooltipA\" popover\u003e \u003cbutton popovertarget=\"tooltipA\"\u003eHide tooltipA\u003c/button\u003e \u003c/dialog\u003e You can easily pull them into a corner using fixed positioning, but for a tooltip-style popover you’d want it to be relative to the trigger that opens it. CSS Anchor Positioning makes this super easy: main [popovertarget] { anchor-name: --trigger; } [popover] { margin: 0; position-anchor: --trigger; top: calc(anchor(bottom) + 10px); justify-self: anchor-center; } /* This also works but isn’t needed unless you’re using the display property [popover]:popover-open { ... } */ The problem though is that you have to name all of these anchors, which is fine for a tabbed component but overkill for a website with quite a few tooltips. Luckily, we can match an id attribute on the button to an anchor attribute on the popover, which isn’t well-supported as of November 2024 but will do for this demo: \u003cmain\u003e \u003c!-- The id should match the anchor attribute --\u003e \u003cbutton id=\"anchorA\" popovertarget=\"tooltipA\"\u003eShow tooltipA\u003c/button\u003e \u003cbutton id=\"anchorB\" popovertarget=\"tooltipB\"\u003eShow tooltipB\u003c/button\u003e \u003c/main\u003e \u003cdialog anchor=\"anchorA\" id=\"tooltipA\" popover\u003e \u003cbutton popovertarget=\"tooltipA\"\u003eHide tooltipA\u003c/button\u003e \u003c/dialog\u003e \u003cdialog anchor=\"anchorB\" id=\"tooltipB\" popover\u003e \u003cbutton popovertarget=\"tooltipB\"\u003eHide tooltipB\u003c/button\u003e \u003c/dialog\u003e main [popovertarget] { anchor-name: --anchorA; } /* No longer needed */ [popover] { margin: 0; position-anchor: --anchorA; /* No longer needed */ top: calc(anchor(bottom) + 10px); justify-self: anchor-center; } The next issue is that we expect tooltips to show on hover and this doesn’t do that, which means that we need to use JavaScript. While this seems complicated considering that we can create tooltips much more easily using ::before/::after/content:, popovers allow HTML content (in which case our tooltips are actually toggletips by the way) whereas content: only accepts text. Adding JavaScript functionality Which leads us to this… Okay, so let’s take a look at what’s happening here. First, we’re using anchor attributes to avoid writing a CSS block for each anchor element. Popovers are very HTML-focused, so let’s use anchor positioning in the same way. Secondly, we’re using JavaScript to show the popovers (showPopover()) on mouseover. And lastly, we’re using JavaScript to hide the popovers (hidePopover()) on mouseout, but not if they contain a link as obviously we want them to be clickable (in this scenario, we also don’t hide the button that hides the popover). \u003cmain\u003e \u003cbutton id=\"anchorLink\" popovertarget=\"tooltipLink\"\u003eOpen tooltipLink\u003c/button\u003e \u003cbutton id=\"anchorNoLink\" popovertarget=\"tooltipNoLink\"\u003eOpen tooltipNoLink\u003c/button\u003e \u003c/main\u003e \u003cdialog anchor=\"anchorLink\" id=\"tooltipLink\" popover\u003eHas \u003ca href=\"#\"\u003ea link\u003c/a\u003e, so we can’t hide it on mouseout \u003cbutton popovertarget=\"tooltipLink\"\u003eHide tooltipLink manually\u003c/button\u003e \u003c/dialog\u003e \u003cdialog anchor=\"anchorNoLink\" id=\"tooltipNoLink\" popover\u003eDoesn’t have a link, so it’s fine to hide it on mouseout automatically \u003cbutton popovertarget=\"tooltipNoLink\"\u003eHide tooltipNoLink\u003c/button\u003e \u003c/dialog\u003e [popover] { margin: 0; top: calc(anchor(bottom) + 10px); justify-self: anchor-center; /* No link? No button needed */ \u0026:not(:has(a)) [popovertarget] { display: none; } } /* Select and loop all popover triggers */ document.querySelectorAll(\"main [popovertarget]\").forEach((popovertarget) =\u003e { /* Select the corresponding popover */ const popover = document.querySelector(`#${popovertarget.getAttribute(\"popovertarget\")}`); /* Show popover on trigger mouseover */ popovertarget.addEventListener(\"mouseover\", () =\u003e { popover.showPopover(); }); /* Hide popover on trigger mouseout, but not if it has a link */ if (popover.matches(\":not(:has(a))\")) { popovertarget.addEventListener(\"mouseout\", () =\u003e { popover.hidePopover(); }); } }); Implementing timed backdrops (and sequenced popovers) At first, I was sure that popovers having backdrops was an oversight, the argument being that they shouldn’t obscure a focusable main document. But maybe it’s okay for a couple of seconds as long as we can resume what we were doing without being forced to close anything? At least, I think this works well for a set of onboarding tips: \u003c!-- Re-showing ‘A’ rolls the onboarding back to that step --\u003e \u003cbutton popovertarget=\"onboardingTipA\" popovertargetaction=\"show\"\u003eRestart onboarding\u003c/button\u003e \u003c!-- Hiding ‘A’ also hides subsequent tips as long as the popover attribute equates to auto --\u003e \u003cbutton popovertarget=\"onboardingTipA\" popovertargetaction=\"hide\"\u003eCancel onboarding\u003c/button\u003e \u003cul\u003e \u003cli id=\"toolA\"\u003eTool A\u003c/li\u003e \u003cli id=\"toolB\"\u003eTool B\u003c/li\u003e \u003cli id=\"toolC\"\u003eAnother tool, “C”\u003c/li\u003e \u003cli id=\"toolD\"\u003eAnother tool — let’s call this one “D”\u003c/li\u003e \u003c/ul\u003e \u003c!-- onboardingTipA’s button triggers onboardingTipB --\u003e \u003cdialog anchor=\"toolA\" id=\"onboardingTipA\" popover\u003e onboardingTipA \u003cbutton popovertarget=\"onboardingTipB\" popovertargetaction=\"show\"\u003eNext tip\u003c/button\u003e \u003c/dialog\u003e \u003c!-- onboardingTipB’s button triggers onboardingTipC --\u003e \u003cdialog anchor=\"toolB\" id=\"onboardingTipB\" popover\u003e onboardingTipB \u003cbutton popovertarget=\"onboardingTipC\" popovertargetaction=\"show\"\u003eNext tip\u003c/button\u003e \u003c/dialog\u003e \u003c!-- onboardingTipC’s button triggers onboardingTipD --\u003e \u003cdialog anchor=\"toolC\" id=\"onboardingTipC\" popover\u003e onboardingTipC \u003cbutton popovertarget=\"onboardingTipD\" popovertargetaction=\"show\"\u003eNext tip\u003c/button\u003e \u003c/dialog\u003e \u003c!-- onboardingTipD’s button hides onboardingTipA, which in-turn hides all tips --\u003e \u003cdialog anchor=\"toolD\" id=\"onboardingTipD\" popover\u003e onboardingTipD \u003cbutton popovertarget=\"onboardingTipA\" popovertargetaction=\"hide\"\u003eFinish onboarding\u003c/button\u003e \u003c/dialog\u003e ::backdrop { animation: 2s fadeInOut; } [popover] { margin: 0; align-self: anchor-center; left: calc(anchor(right) + 10px); } /* After users have had a couple of seconds to breathe, start the onboarding */ setTimeout(() =\u003e { document.querySelector(\"#onboardingTipA\").showPopover(); }, 2000); Again, let’s unpack. Firstly, setTimeout() shows the first onboarding tip after two seconds. Secondly, a simple fade-in-fade-out background animation runs on the backdrop and all subsequent backdrops. The main document isn’t made inert and the backdrop doesn’t persist, so attention is diverted to the onboarding tips while not feeling invasive. Thirdly, each popover has a button that triggers the next onboarding tip, which triggers another, and so on, chaining them to create a fully HTML onboarding flow. Typically, showing a popover closes other popovers, but this doesn’t appear to be the case if it’s triggered from within another popover. Also, re-showing a visible popover rolls the onboarding back to that step, and, hiding a popover hides it and all subsequent popovers — although that only appears to work when popover equates to auto. I don’t fully understand it but it’s enabled me to create “restart onboarding” and “cancel onboarding” buttons. With just HTML. And you can cycle through the tips using esc and return. Creating modal popovers Hear me out. If you like the HTML-ness of popover but the semantic value of \u003cdialog\u003e, this JavaScript one-liner can make the main document inert, therefore making your popovers modal: document.querySelectorAll(\"dialog[popover]\").forEach(dialog =\u003e dialog.addEventListener(\"toggle\", () =\u003e document.body.toggleAttribute(\"inert\"))); However, the popovers must come after the main document; otherwise they’ll also become inert. Personally, this is what I’m doing for modals anyway, as they aren’t a part of the page’s content. \u003cbody\u003e \u003c!-- All of this will become inert --\u003e \u003c/body\u003e \u003c!-- Therefore, the modals must come after --\u003e \u003cdialog popover\u003e ... \u003c/dialog\u003e Aaaand… breathe Yeah, that was a lot. But…I think it’s important to look at all of these APIs together now that they’re starting to mature, in order to really understand what they can, can’t, should, and shouldn’t be used for. As a parting gift, I’ll leave you with a transition-enabled version of each API: Sliding disclosures Popping dialog (with fading backdrop) Sliding popover (hamburger nav, because why not?)",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382363",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cblockquote\u003e\n\u003cp\u003eIf all you have is a hammer, everything looks like a nail.\u003c/p\u003e\n\u003ccite\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Abraham_Maslow\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e\u003cem\u003eAbraham Maslow\u003c/em\u003e\u003c/a\u003e\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eIt’s easy to default to what you know. When it comes to toggling content, that might be reaching for \u003ccode\u003edisplay: none\u003c/code\u003e or \u003ccode\u003eopacity: 0\u003c/code\u003e with some JavaScript sprinkled in. But the web is more “modern” today, so perhaps now is the right time to get a birds-eye view of the different ways to toggle content — which native APIs are actually supported now, their pros and cons, and some things about them that you might not know (such as any pseudo-elements and other non-obvious stuff).\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, let’s spend some time looking at \u003ca href=\"https://css-tricks.com/quick-reminder-that-details-summary-is-the-easiest-way-ever-to-make-an-accordion/\"\u003edisclosures\u003c/a\u003e (\u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e), the \u003ca href=\"https://css-tricks.com/how-to-implement-and-style-the-dialog-element/\"\u003eDialog API\u003c/a\u003e, the \u003ca href=\"https://css-tricks.com/poppin-in/\"\u003ePopover API\u003c/a\u003e, and more. We’ll look at the right time to use each one depending on your needs. Modal or non-modal? JavaScript or pure HTML/CSS? Not sure? Don’t worry, we’ll go into all that.\u003c/p\u003e\n\n\n\u003ch3 id=\"disclosures-details-and-summary-\"\u003eDisclosures (\u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e)\u003c/h3\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eUse case: Accessibly summarizing content while making the content details togglable independently, or as an accordion.\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eGoing in release order, disclosures — known by their elements as \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e — marked the first time we were able to toggle content without JavaScript or weird checkbox hacks. But lack of web browser support obviously holds new features back at first, and this one in particular came without keyboard accessibility. So I’d understand if you haven’t used it since it came to Chrome 12 way back in 2011. Out of sight, out of mind, right?\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s the low-down:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eIt’s functional without JavaScript (without any compromises).\u003c/li\u003e\n\n\n\n\u003cli\u003eIt’s fully stylable without \u003ccode\u003eappearance: none\u003c/code\u003e or the like.\u003c/li\u003e\n\n\n\n\u003cli\u003eYou can hide the marker without non-standard pseudo-selectors.\u003c/li\u003e\n\n\n\n\u003cli\u003eYou can connect multiple disclosures to create an accordion.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eAaaand\u003c/em\u003e… it’s fully animatable, as of 2024.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch4 id=\"marking-up-disclosures\"\u003eMarking up disclosures\u003c/h4\u003e\n\n\n\u003cp\u003eWhat you’re looking for is this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n  \u0026lt;summary\u0026gt;Content summary (always visible)\u0026lt;/summary\u0026gt;\n  Content (visibility is toggled when summary is clicked on)\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBehind the scenes, the content’s wrapped in a pseudo-element that as of 2024 we can select using \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/d/details-content/\"\u003e\u003ccode\u003e::details-content\u003c/code\u003e\u003c/a\u003e. To add to this, there’s a \u003ccode\u003e::marker\u003c/code\u003e pseudo-element that indicates whether the disclosure’s open or closed, which we can customize.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith that in mind, disclosures actually look like this under the hood:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n  \u0026lt;summary\u0026gt;\u0026lt;::marker\u0026gt;\u0026lt;/::marker\u0026gt;Content summary (always visible)\u0026lt;/summary\u0026gt;\n  \u0026lt;::details-content\u0026gt;\n      Content (visibility is toggled when summary is clicked on)\n  \u0026lt;/::details-content\u0026gt;\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTo have the disclosure open by default, give \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e the \u003ccode\u003eopen\u003c/code\u003e attribute, which is what happens behind the scenes when disclosures are opened anyway.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details open\u0026gt; ... \u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch4 id=\"styling-disclosures\"\u003eStyling disclosures\u003c/h4\u003e\n\n\n\u003cp\u003eLet’s be real: you probably just want to lose that annoying marker. Well, you can do that by setting the \u003ccode\u003edisplay\u003c/code\u003e property of \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e to anything but \u003ccode\u003elist-item\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esummary {\n  display: block; /* Or anything else that isn\u0026#39;t list-item */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAlternatively, you can modify the marker. In fact, the example below utilizes Font Awesome to replace it with another icon, but keep in mind that \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::marker#allowable_properties\" rel=\"noopener\"\u003e\u003ccode\u003e::marker\u003c/code\u003e doesn’t support many properties\u003c/a\u003e. The most flexible workaround is to wrap the content of \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e in an element and select it in CSS.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details\u0026gt;\n  \u0026lt;summary\u0026gt;\u0026lt;span\u0026gt;Content summary\u0026lt;/span\u0026gt;\u0026lt;/summary\u0026gt;\n  Content\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edetails {\n  \n  /* The marker */\n  summary::marker {\n    content: \u0026#34;\\f150\u0026#34;;\n    font-family: \u0026#34;Font Awesome 6 Free\u0026#34;;\n  }\n\n  /* The marker when \u0026lt;details\u0026gt; is open */\n  \u0026amp;[open] summary::marker {\n    content: \u0026#34;\\f151\u0026#34;;\n  }\n  \n  /* Because ::marker doesn’t support many properties */\n  summary span {\n    margin-left: 1ch;\n    display: inline-block;\n  }\n  \n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003ch4 id=\"creating-an-accordion-with-multiple-disclosures\"\u003eCreating an accordion with multiple disclosures\u003c/h4\u003e\n\n\n\n\n\n\n\u003cp\u003eTo create an accordion, name multiple disclosures (they don’t even have to be siblings) with a \u003ccode\u003ename\u003c/code\u003e attribute and a matching value (similar to how you’d implement \u003ccode\u003e\u0026lt;input type=\u0026#34;radio\u0026#34;\u0026gt;\u003c/code\u003e):\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;details name=\u0026#34;starWars\u0026#34; open\u0026gt;\n  \u0026lt;summary\u0026gt;Prequels\u0026lt;/summary\u0026gt;\n  \u0026lt;ul\u0026gt;\n    \u0026lt;li\u0026gt;Episode I: The Phantom Menace\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;Episode II: Attack of the Clones\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;Episode III: Revenge of the Sith\u0026lt;/li\u0026gt;\n  \u0026lt;/ul\u0026gt;\n\u0026lt;/details\u0026gt;\n\n\u0026lt;details name=\u0026#34;starWars\u0026#34;\u0026gt;\n  \u0026lt;summary\u0026gt;Originals\u0026lt;/summary\u0026gt;\n  \u0026lt;ul\u0026gt;\n    \u0026lt;li\u0026gt;Episode IV: A New Hope\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;Episode V: The Empire Strikes Back\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;Episode VI: Return of the Jedi\u0026lt;/li\u0026gt;\n  \u0026lt;/ul\u0026gt;\n\u0026lt;/details\u0026gt;\n\n\u0026lt;details name=\u0026#34;starWars\u0026#34;\u0026gt;\n  \u0026lt;summary\u0026gt;Sequels\u0026lt;/summary\u0026gt;\n  \u0026lt;ul\u0026gt;\n    \u0026lt;li\u0026gt;Episode VII: The Force Awakens\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;Episode VIII: The Last Jedi\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;Episode IX: The Rise of Skywalker\u0026lt;/li\u0026gt;\n  \u0026lt;/ul\u0026gt;\n\u0026lt;/details\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eUsing a wrapper, we can even turn these into horizontal tabs:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div\u0026gt; \u0026lt;!-- Flex wrapper --\u0026gt;\n  \u0026lt;details name=\u0026#34;starWars\u0026#34; open\u0026gt; ... \u0026lt;/details\u0026gt;\n  \u0026lt;details name=\u0026#34;starWars\u0026#34;\u0026gt; ... \u0026lt;/details\u0026gt;\n  \u0026lt;details name=\u0026#34;starWars\u0026#34;\u0026gt; ... \u0026lt;/details\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ediv {\n  gap: 1ch;\n  display: flex;\n  position: relative;\n\n  details {\n    min-height: 106px; /* Prevents content shift */\n      \n    \u0026amp;[open] summary,\n    \u0026amp;[open]::details-content {\n      background: #eee;\n    }\n\n    \u0026amp;[open]::details-content {\n      left: 0;\n      position: absolute;\n    } \n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…or, using 2024’s \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eAnchor Positioning API\u003c/a\u003e, \u003cem\u003evertical\u003c/em\u003e tabs (same HTML):\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ediv {\n  \n  display: inline-grid;\n  anchor-name: --wrapper;\n\n  details[open] {\n      \n    summary,\n    \u0026amp;::details-content {\n      background: #eee;\n    }\n\n    \u0026amp;::details-content {\n      position: absolute;\n      position-anchor: --wrapper;\n      top: anchor(top);\n      left: anchor(right);\n    } \n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIf you’re looking for some wild ideas on what we can do with the Popover API in CSS, check out \u003ca href=\"https://css-tricks.com/popover-the-balloons/\"\u003eJohn Rhea’s article\u003c/a\u003e in which he makes an interactive game solely out of disclosures!\u003c/p\u003e\n\n\n\u003ch4 id=\"adding-javascript-functionality\"\u003eAdding JavaScript functionality\u003c/h4\u003e\n\n\n\u003cp\u003eWant to add some JavaScript functionality?\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e// Optional: select and loop multiple disclosures\ndocument.querySelectorAll(\u0026#34;details\u0026#34;).forEach(details =\u0026gt; {\n  details.addEventListener(\u0026#34;toggle\u0026#34;, () =\u0026gt; {\n    // The disclosure was toggled\n    if (details.open) {\n      // The disclosure was opened\n    } else {\n      // The disclosure was closed\n    }\n  });    \n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch4 id=\"creating-accessible-disclosures\"\u003eCreating accessible disclosures\u003c/h4\u003e\n\n\n\u003cp\u003eDisclosures are accessible as long as you follow a few rules. For example, \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e is basically a \u003ccode\u003e\u0026lt;label\u0026gt;\u003c/code\u003e, meaning that its content is announced by screen readers when in focus. If there isn’t a \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e isn’t a direct child of \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e then the user agent will create a label for you that normally says “Details” both visually and in assistive tech. Older web browsers might insist that it be the \u003cem\u003efirst\u003c/em\u003e child, so it’s best to make it so.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo add to this, \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e has the \u003ccode\u003erole\u003c/code\u003e of \u003ccode\u003ebutton\u003c/code\u003e, so whatever’s invalid inside a \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e is also invalid inside a \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e. This includes headings, so you can \u003cem\u003estyle\u003c/em\u003e a \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e as a heading, but you can’t actually insert a heading into a \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\n\u003ch3 id=\"the-dialog-element-dialog-\"\u003eThe Dialog element (\u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e)\u003c/h3\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eUse case: Modals\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eNow that we have the Popover API for non-modal overlays, I think it’s best if we start to think of dialogs as modals even though the \u003ccode\u003eshow()\u003c/code\u003e method does allow for non-modal dialogs. The advantage that the \u003ccode\u003epopover\u003c/code\u003e attribute has over the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element is that you can use it to create non-modal overlays without JavaScript, so in my opinion there’s no benefit to non-modal dialogs anymore, which do require JavaScript. For clarity, a modal is an overlay that makes the main document inert, whereas with non-modal overlays the main document remains interactive. There are a few other features that modal dialogs have out-of-the-box as well, including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ea stylable backdrop,\u003c/li\u003e\n\n\n\n\u003cli\u003ean autofocus onto the first focusable element within the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e (or, as a backup, the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e itself — include an \u003ccode\u003earia-label\u003c/code\u003e in this case),\u003c/li\u003e\n\n\n\n\u003cli\u003ea focus trap (as a result of the main document’s inertia),\u003c/li\u003e\n\n\n\n\u003cli\u003ethe \u003ccode\u003eesc\u003c/code\u003e key closes the dialog, and\u003c/li\u003e\n\n\n\n\u003cli\u003eboth the dialog and the backdrop are animatable.Marking up and activating dialogs\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eStart with the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;dialog\u0026gt; ... \u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eIt’s hidden by default and, similar to \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e, we can have it \u003ccode\u003eopen\u003c/code\u003e when the page loads, although it isn’t modal in this scenario since it does not contain interactive content because it doesn’t opened with \u003ccode\u003eshowModal()\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;dialog open\u0026gt; ... \u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI can’t say that I’ve ever needed this functionality. Instead, you’ll likely want to reveal the dialog upon some kind of interaction, such as the click of a button — so here’s that button:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button data-dialog=\u0026#34;dialogA\u0026#34;\u0026gt;Open dialogA\u0026lt;/button\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWait, why are we using data attributes? Well, because we might want to hand over an identifier that tells the JavaScript which dialog to open, enabling us to add the dialog functionality to all dialogs in one snippet, like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e// Select and loop all elements with that data attribute\ndocument.querySelectorAll(\u0026#34;[data-dialog]\u0026#34;).forEach(button =\u0026gt; {\n  // Listen for interaction (click)\n  button.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {\n    // Select the corresponding dialog\n    const dialog = document.querySelector(`#${ button.dataset.dialog }`);\n    // Open dialog\n    dialog.showModal();      \n    // Close dialog\n    dialog.querySelector(\u0026#34;.closeDialog\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; dialog.close());\n  });\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eDon’t forget to add a matching \u003ccode\u003eid\u003c/code\u003e to the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e so it’s associated with the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e that shows it:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;dialog id=\u0026#34;dialogA\u0026#34;\u0026gt; \u0026lt;!-- id and data-dialog = dialogA --\u0026gt; ... \u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd, lastly, include the “close” button:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;dialog id=\u0026#34;dialogA\u0026#34;\u0026gt;\n  \u0026lt;button class=\u0026#34;closeDialog\u0026#34;\u0026gt;Close dialogA\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003ccode\u003e\u0026lt;form method=\u0026#34;dialog\u0026#34;\u0026gt;\u003c/code\u003e (that has a \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e) or \u003ccode\u003e\u0026lt;button formmethod=\u0026#34;dialog\u0026#34;\u0026gt;\u003c/code\u003e (wrapped in a \u003ccode\u003e\u0026lt;form\u0026gt;\u003c/code\u003e) also closes the dialog.\u003c/p\u003e\n\n\n\u003ch4 id=\"how-to-prevent-scrolling-when-the-dialog-is-open\"\u003eHow to prevent scrolling when the dialog is open\u003c/h4\u003e\n\n\n\u003cp\u003ePrevent scrolling while the modal’s open, with one line of CSS:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebody:has(dialog:modal) { overflow: hidden; }\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch4 id=\"styling-the-dialog-s-backdrop\"\u003eStyling the dialog’s backdrop\u003c/h4\u003e\n\n\n\u003cp\u003eAnd finally, we have the backdrop to reduce distraction from what’s underneath the top layer (this applies to modals only). Its styles can be overwritten, like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e::backdrop {\n  background: hsl(0 0 0 / 90%);\n  backdrop-filter: blur(3px); /* A fun property just for backdrops! */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOn that note, the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e itself comes with a \u003ccode\u003eborder\u003c/code\u003e, a \u003ccode\u003ebackground\u003c/code\u003e, and some \u003ccode\u003epadding\u003c/code\u003e, which you might want to reset. Actually, popovers behave the same way.\u003c/p\u003e\n\n\n\u003ch4 id=\"dealing-with-non-modal-dialogs\"\u003eDealing with non-modal dialogs\u003c/h4\u003e\n\n\n\u003cp\u003eTo implement a non-modal dialog, use:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eshow()\u003c/code\u003e instead of \u003ccode\u003eshowModal()\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003edialog[open]\u003c/code\u003e (targets both) instead of \u003ccode\u003edialog:modal\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eAlthough, as I said before, the Popover API doesn’t require JavaScript, so for non-modal overlays I think it’s best to use that.\u003c/p\u003e\n\n\n\u003ch3 id=\"the-popover-api-element-popover-\"\u003eThe Popover API (\u003ccode\u003e\u0026lt;element popover\u0026gt;\u003c/code\u003e)\u003c/h3\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eUse case: Non-modal overlays\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003ePopups, basically. Suitable use cases include tooltips (or toggletips — it’s important to know the difference), onboarding walkthroughs, notifications, togglable navigations, and other non-modal overlays where you don’t want to lose access to the main document. Obviously these use cases are different to those of dialogs, but nonetheless popovers are extremely awesome. Functionally they’re just like just dialogs, but not modal and don’t require JavaScript.\u003c/p\u003e\n\n\n\u003ch4 id=\"marking-up-popovers\"\u003eMarking up popovers\u003c/h4\u003e\n\n\n\u003cp\u003eTo begin, the popover needs an \u003ccode\u003eid\u003c/code\u003e as well as the \u003ccode\u003epopover\u003c/code\u003e attribute with the \u003ccode\u003emanual\u003c/code\u003e value (which means clicking outside of the popover doesn’t close it), the \u003ccode\u003eauto\u003c/code\u003e value (clicking outside of the popover \u003cem\u003edoes\u003c/em\u003e close it), or no value (which means the same thing). To be semantic, the popover can be a \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;dialog id=\u0026#34;tooltipA\u0026#34; popover\u0026gt; ... \u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNext, add the \u003ccode\u003epopovertarget\u003c/code\u003e attribute to the \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;input type=\u0026#34;button\u0026#34;\u0026gt;\u003c/code\u003e that we want to toggle the popover’s visibility, with a value matching the popover’s \u003ccode\u003eid\u003c/code\u003e attribute (this is optional since clicking outside of the popover will close it anyway, unless \u003ccode\u003epopover\u003c/code\u003e is set to \u003ccode\u003emanual\u003c/code\u003e):\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;dialog id=\u0026#34;tooltipA\u0026#34; popover\u0026gt;\n  \u0026lt;button popovertarget=\u0026#34;tooltipA\u0026#34;\u0026gt;Hide tooltipA\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003ePlace another one of those buttons in your main document, so that you can show the popover. That’s right, \u003ccode\u003epopovertarget\u003c/code\u003e is actually a toggle (unless you specify otherwise with the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#popovertargetaction\" rel=\"noopener\"\u003e\u003ccode\u003epopovertargetaction\u003c/code\u003e attribute\u003c/a\u003e that accepts \u003ccode\u003eshow\u003c/code\u003e, \u003ccode\u003ehide\u003c/code\u003e, or \u003ccode\u003etoggle\u003c/code\u003e as its value — more on that later).\u003c/p\u003e\n\n\n\u003ch4 id=\"styling-popovers\"\u003eStyling popovers\u003c/h4\u003e\n\n\n\n\n\n\n\u003cp\u003eBy default, popovers are centered within the top layer (like dialogs), but you probably don’t want them there as they’re not modals, after all.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;main\u0026gt;\n  \u0026lt;button popovertarget=\u0026#34;tooltipA\u0026#34;\u0026gt;Show tooltipA\u0026lt;/button\u0026gt;\n\u0026lt;/main\u0026gt;\n\n\u0026lt;dialog id=\u0026#34;tooltipA\u0026#34; popover\u0026gt;\n  \u0026lt;button popovertarget=\u0026#34;tooltipA\u0026#34;\u0026gt;Hide tooltipA\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can easily pull them into a corner using fixed positioning, but for a tooltip-style popover you’d want it to be relative to the trigger that opens it. \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eCSS Anchor Positioning\u003c/a\u003e makes this super easy:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003emain [popovertarget] {\n  anchor-name: --trigger;\n}\n\n[popover] {\n  margin: 0;\n  position-anchor: --trigger;\n  top: calc(anchor(bottom) + 10px);\n  justify-self: anchor-center;\n}\n\n/* This also works but isn’t needed\nunless you’re using the display property\n[popover]:popover-open {\n    ...\n}\n*/\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe problem though is that you have to name all of these anchors, which is fine for a tabbed component but overkill for a website with quite a few tooltips. Luckily, we can match an \u003ccode\u003eid\u003c/code\u003e attribute on the button to an \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/anchor\" rel=\"noopener\"\u003e\u003ccode\u003eanchor\u003c/code\u003e attribute\u003c/a\u003e on the \u003ccode\u003epopover\u003c/code\u003e, which isn’t well-supported as of November 2024 but will do for this demo:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;main\u0026gt;\n  \u0026lt;!-- The id should match the anchor attribute --\u0026gt;\n  \u0026lt;button id=\u0026#34;anchorA\u0026#34; popovertarget=\u0026#34;tooltipA\u0026#34;\u0026gt;Show tooltipA\u0026lt;/button\u0026gt;\n  \u0026lt;button id=\u0026#34;anchorB\u0026#34; popovertarget=\u0026#34;tooltipB\u0026#34;\u0026gt;Show tooltipB\u0026lt;/button\u0026gt;\n\u0026lt;/main\u0026gt;\n\n\u0026lt;dialog anchor=\u0026#34;anchorA\u0026#34; id=\u0026#34;tooltipA\u0026#34; popover\u0026gt;\n  \u0026lt;button popovertarget=\u0026#34;tooltipA\u0026#34;\u0026gt;Hide tooltipA\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\n\n\u0026lt;dialog anchor=\u0026#34;anchorB\u0026#34; id=\u0026#34;tooltipB\u0026#34; popover\u0026gt;\n  \u0026lt;button popovertarget=\u0026#34;tooltipB\u0026#34;\u0026gt;Hide tooltipB\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"2,7\"\u003e\u003ccode markup=\"tt\"\u003emain [popovertarget] { anchor-name: --anchorA; } /* No longer needed */\n\n[popover] {\n  margin: 0;\n  position-anchor: --anchorA; /* No longer needed */\n  top: calc(anchor(bottom) + 10px);\n  justify-self: anchor-center;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe next issue is that we expect tooltips to show on hover and this doesn’t do that, which means that we need to use JavaScript. While this seems complicated considering that we can create tooltips much more easily using \u003ccode\u003e::before\u003c/code\u003e/\u003ccode\u003e::after\u003c/code\u003e/\u003ccode\u003econtent:\u003c/code\u003e, popovers allow HTML content (in which case our tooltips are actually toggletips by the way) whereas \u003ccode\u003econtent:\u003c/code\u003e only accepts text.\u003c/p\u003e\n\n\n\u003ch4 id=\"adding-javascript-functionality\"\u003eAdding JavaScript functionality\u003c/h4\u003e\n\n\n\u003cp\u003eWhich leads us to this…\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eOkay, so let’s take a look at what’s happening here. First, we’re using \u003ccode\u003eanchor\u003c/code\u003e attributes to avoid writing a CSS block for each anchor element. Popovers are very HTML-focused, so let’s use anchor positioning in the same way. Secondly, we’re using JavaScript to show the popovers (\u003ccode\u003eshowPopover()\u003c/code\u003e) on \u003ccode\u003emouseover\u003c/code\u003e. And lastly, we’re using JavaScript to hide the popovers (\u003ccode\u003ehidePopover()\u003c/code\u003e) on \u003ccode\u003emouseout\u003c/code\u003e, but not if they contain a link as obviously we want them to be clickable (in this scenario, we also \u003cem\u003edon’t\u003c/em\u003e hide the button that hides the popover).\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;main\u0026gt;\n  \u0026lt;button id=\u0026#34;anchorLink\u0026#34; popovertarget=\u0026#34;tooltipLink\u0026#34;\u0026gt;Open tooltipLink\u0026lt;/button\u0026gt;\n  \u0026lt;button id=\u0026#34;anchorNoLink\u0026#34; popovertarget=\u0026#34;tooltipNoLink\u0026#34;\u0026gt;Open tooltipNoLink\u0026lt;/button\u0026gt;\n\u0026lt;/main\u0026gt;\n\n\u0026lt;dialog anchor=\u0026#34;anchorLink\u0026#34; id=\u0026#34;tooltipLink\u0026#34; popover\u0026gt;Has \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;a link\u0026lt;/a\u0026gt;, so we can’t hide it on mouseout\n  \u0026lt;button popovertarget=\u0026#34;tooltipLink\u0026#34;\u0026gt;Hide tooltipLink manually\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\n\n\u0026lt;dialog anchor=\u0026#34;anchorNoLink\u0026#34; id=\u0026#34;tooltipNoLink\u0026#34; popover\u0026gt;Doesn’t have a link, so it’s fine to hide it on mouseout automatically\n  \u0026lt;button popovertarget=\u0026#34;tooltipNoLink\u0026#34;\u0026gt;Hide tooltipNoLink\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e[popover] {\n  \n  margin: 0;\n  top: calc(anchor(bottom) + 10px);\n  justify-self: anchor-center;\n\n  /* No link? No button needed */\n  \u0026amp;:not(:has(a)) [popovertarget] {\n    display: none;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Select and loop all popover triggers */\ndocument.querySelectorAll(\u0026#34;main [popovertarget]\u0026#34;).forEach((popovertarget) =\u0026gt; {\n  \n  /* Select the corresponding popover */\n  const popover = document.querySelector(`#${popovertarget.getAttribute(\u0026#34;popovertarget\u0026#34;)}`);\n  \n  /* Show popover on trigger mouseover */\n  popovertarget.addEventListener(\u0026#34;mouseover\u0026#34;, () =\u0026gt; {\n    popover.showPopover();\n  });\n\n  /* Hide popover on trigger mouseout, but not if it has a link */\n  if (popover.matches(\u0026#34;:not(:has(a))\u0026#34;)) {\n    popovertarget.addEventListener(\u0026#34;mouseout\u0026#34;, () =\u0026gt; {\n      popover.hidePopover();\n    });\n  }\n});\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch4 id=\"implementing-timed-backdrops-and-sequenced-popovers-\"\u003eImplementing timed backdrops (and sequenced popovers)\u003c/h4\u003e\n\n\n\u003cp\u003eAt first, I was sure that popovers having backdrops was an oversight, the argument being that they shouldn’t obscure a focusable main document. But maybe it’s okay for a couple of seconds as long as we can resume what we were doing without being forced to close anything? At least, I think this works well for a set of onboarding tips:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Re-showing ‘A’ rolls the onboarding back to that step --\u0026gt;\n\u0026lt;button popovertarget=\u0026#34;onboardingTipA\u0026#34; popovertargetaction=\u0026#34;show\u0026#34;\u0026gt;Restart onboarding\u0026lt;/button\u0026gt;\n\u0026lt;!-- Hiding ‘A’ also hides subsequent tips as long as the popover attribute equates to auto --\u0026gt;\n\u0026lt;button popovertarget=\u0026#34;onboardingTipA\u0026#34; popovertargetaction=\u0026#34;hide\u0026#34;\u0026gt;Cancel onboarding\u0026lt;/button\u0026gt;\n\n\u0026lt;ul\u0026gt;\n  \u0026lt;li id=\u0026#34;toolA\u0026#34;\u0026gt;Tool A\u0026lt;/li\u0026gt;\n  \u0026lt;li id=\u0026#34;toolB\u0026#34;\u0026gt;Tool B\u0026lt;/li\u0026gt;\n  \u0026lt;li id=\u0026#34;toolC\u0026#34;\u0026gt;Another tool, “C”\u0026lt;/li\u0026gt;\n  \u0026lt;li id=\u0026#34;toolD\u0026#34;\u0026gt;Another tool — let’s call this one “D”\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\n\n\u0026lt;!-- onboardingTipA’s button triggers onboardingTipB --\u0026gt;\n\u0026lt;dialog anchor=\u0026#34;toolA\u0026#34; id=\u0026#34;onboardingTipA\u0026#34; popover\u0026gt;\n  onboardingTipA \u0026lt;button popovertarget=\u0026#34;onboardingTipB\u0026#34; popovertargetaction=\u0026#34;show\u0026#34;\u0026gt;Next tip\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\n\n\u0026lt;!-- onboardingTipB’s button triggers onboardingTipC --\u0026gt;\n\u0026lt;dialog anchor=\u0026#34;toolB\u0026#34; id=\u0026#34;onboardingTipB\u0026#34; popover\u0026gt;\n  onboardingTipB \u0026lt;button popovertarget=\u0026#34;onboardingTipC\u0026#34; popovertargetaction=\u0026#34;show\u0026#34;\u0026gt;Next tip\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\n\n\u0026lt;!-- onboardingTipC’s button triggers onboardingTipD --\u0026gt;\n\u0026lt;dialog anchor=\u0026#34;toolC\u0026#34; id=\u0026#34;onboardingTipC\u0026#34; popover\u0026gt;\n  onboardingTipC \u0026lt;button popovertarget=\u0026#34;onboardingTipD\u0026#34; popovertargetaction=\u0026#34;show\u0026#34;\u0026gt;Next tip\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\n\n\u0026lt;!-- onboardingTipD’s button hides onboardingTipA, which in-turn hides all tips --\u0026gt;\n\u0026lt;dialog anchor=\u0026#34;toolD\u0026#34; id=\u0026#34;onboardingTipD\u0026#34; popover\u0026gt;\n  onboardingTipD \u0026lt;button popovertarget=\u0026#34;onboardingTipA\u0026#34; popovertargetaction=\u0026#34;hide\u0026#34;\u0026gt;Finish onboarding\u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e::backdrop {\n  animation: 2s fadeInOut;\n}\n\n[popover] {\n  margin: 0;\n  align-self: anchor-center;\n  left: calc(anchor(right) + 10px);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/*\nAfter users have had a couple of\nseconds to breathe, start the onboarding\n*/\nsetTimeout(() =\u0026gt; {\n  document.querySelector(\u0026#34;#onboardingTipA\u0026#34;).showPopover();\n}, 2000);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAgain, let’s unpack. Firstly, \u003ccode\u003esetTimeout()\u003c/code\u003e shows the first onboarding tip after two seconds. Secondly, a simple fade-in-fade-out background animation runs on the backdrop and all subsequent backdrops. The main document isn’t made inert and the backdrop doesn’t persist, so attention is diverted to the onboarding tips while not feeling invasive.\u003c/p\u003e\n\n\n\n\u003cp\u003eThirdly, each popover has a button that triggers the next onboarding tip, which triggers another, and so on, chaining them to create a fully HTML onboarding flow. Typically, showing a popover closes other popovers, but this doesn’t appear to be the case if it’s triggered from within another popover. Also, re-showing a visible popover rolls the onboarding back to that step, and, hiding a popover hides it and all subsequent popovers — although \u003cem\u003ethat\u003c/em\u003e only appears to work when \u003ccode\u003epopover\u003c/code\u003e equates to \u003ccode\u003eauto\u003c/code\u003e. I don’t fully understand it but it’s enabled me to create “restart onboarding” and “cancel onboarding” buttons.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eWith just HTML.\u003c/em\u003e And you can cycle through the tips using \u003ccode\u003eesc\u003c/code\u003e and \u003ccode\u003ereturn\u003c/code\u003e.\u003c/p\u003e\n\n\n\u003ch4 id=\"creating-modal-popovers\"\u003eCreating modal popovers\u003c/h4\u003e\n\n\n\u003cp\u003eHear me out. If you like the HTML-ness of \u003ccode\u003epopover\u003c/code\u003e but the semantic value of \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e, this JavaScript one-liner can make the main document inert, therefore making your popovers modal:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003edocument.querySelectorAll(\u0026#34;dialog[popover]\u0026#34;).forEach(dialog =\u0026gt; dialog.addEventListener(\u0026#34;toggle\u0026#34;, () =\u0026gt; document.body.toggleAttribute(\u0026#34;inert\u0026#34;)));\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHowever, the popovers must come \u003cem\u003eafter\u003c/em\u003e the main document; otherwise they’ll \u003cem\u003ealso\u003c/em\u003e become inert. Personally, this is what I’m doing for modals anyway, as they aren’t a part of the page’s content.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;body\u0026gt;\n  \u0026lt;!-- All of this will become inert --\u0026gt;\n\u0026lt;/body\u0026gt;\n\n\u0026lt;!-- Therefore, the modals must come after --\u0026gt;\n\u0026lt;dialog popover\u0026gt; ... \u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"-aaaand-breathe\"\u003e\u003cem\u003eAaaand\u003c/em\u003e… breathe\u003c/h3\u003e\n\n\n\u003cp\u003eYeah, that was a lot. \u003cem\u003eBut\u003c/em\u003e…I think it’s important to look at all of these APIs together now that they’re starting to mature, in order to really understand what they can, can’t, should, and shouldn’t be used for. As a parting gift, I’ll leave you with a transition-enabled version of each API:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://codepen.io/mrdanielschwarz/pen/RwXMMVd\" rel=\"noopener\"\u003eSliding disclosures\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://codepen.io/mrdanielschwarz/pen/PoMRewz\" rel=\"noopener\"\u003ePopping dialog\u003c/a\u003e (with fading backdrop)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://codepen.io/mrdanielschwarz/pen/eYqMKgY\" rel=\"noopener\"\u003eSliding popover\u003c/a\u003e (hamburger nav, because why not?)\u003c/li\u003e\n\u003c/ul\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "22 min read",
  "publishedTime": "2024-11-08T06:57:09-07:00",
  "modifiedTime": "2024-11-08T06:57:18-07:00"
}
