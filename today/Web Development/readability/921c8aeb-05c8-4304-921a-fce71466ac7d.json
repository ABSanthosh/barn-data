{
  "id": "921c8aeb-05c8-4304-921a-fce71466ac7d",
  "title": "Launching Interop 2025",
  "link": "https://hacks.mozilla.org/2025/02/interop-2025/",
  "description": "Interop 2025 continues the mission to make the web more consistent across browsers, building on 2024’s 95% interoperability score. This year, 19 focus areas target key developer needs and long-standing issues, including WebRTC improvements, Storage Access API, and CSS Zoom. The post Launching Interop 2025 appeared first on Mozilla Hacks - the Web developer blog.",
  "author": "James Graham",
  "published": "Thu, 13 Feb 2025 16:59:13 +0000",
  "source": "https://hacks.mozilla.org/feed/",
  "categories": [
    "Featured Article",
    "Firefox",
    "Web Developers",
    "Accessibility",
    "browsers",
    "firefox",
    "interop",
    "interoperability",
    "storage",
    "WebRTC"
  ],
  "byline": "By James Graham",
  "length": 11146,
  "excerpt": "Interop 2025 continues the mission to make the web more consistent across browsers, building on 2024’s 95% interoperability score.",
  "siteName": "Mozilla Hacks – the Web developer blog",
  "favicon": "",
  "text": "Launching Interop 2025 The Interop Project is a collaboration between browser vendors and other platform implementors to provide users and web developers with high quality implementations of the web platform. Each year we select a set of focus areas representing key areas where we want to improve interoperability. Encouraging all browser engines to prioritize common features ensures they become usable for web developers as quickly as possible. Progress in each engine and the overall Interop score are measured by tracking the pass rate of a set of web-platform tests for each focus area using the Interop dashboard. Interop 2024 Before introducing the new focus areas for this year, we should look at the successes of Interop 2024. The Interop score, measuring the percentage of tests that pass in all of the major browser engines, has reached 95% in latest browser releases, up from only 46% at the start of the year. In pre-release browsers it’s even higher — over 97%. This is a huge win that shows how effective Interop can be at aligning browsers with the specifications and each other. Each browser engine individually achieved a test pass score of 98% in stable browser releases and 99% in pre-release, with Firefox finishing slightly ahead with 98.8% in release and 99.1% in Nightly. For users, this means features such as requestVideoFrameCallback, Declarative Shadow DOM, and Popover, which a year ago only had limited availability, are now implemented interoperably in all browsers. Interop 2025 Building on Interop 2024’s success, we are excited to continue the project into 2025. This year we have 19 focus areas; 17 new and 2 from previous years. A full description of all the focus areas is available in the Interop repository. From 2024 we’re carrying forward Layout (really “Flexbox and Grid”), and Pointer and Mouse Events. These are important platform primitives where the Interop project has already led to significant interoperability improvements. However, with technologies that are so fundamental to the modern web we think it’s important to set ambitious goals and continue to prioritize these areas, creating rock solid foundations for developers to build on. The new focus areas represent a broad cross section of the platform. Many of them — like Anchor Positioning and View Transitions — have been identified from clear developer demand in surveys such as State of HTML and State of CSS. Inclusion in Interop will ensure they’re usable as soon as possible. In addition to these high profile new features, we’d like to highlight some lesser-known focus areas and explain why we’re pleased to see them in Interop. Storage Access At Mozilla user privacy is a core principle. One of the most common methods for tracking across the web is via third-party cookies. When sites request data from external services, the service can store data that’s re-sent when another site uses the same service. Thus the service can follow the user’s browsing across the web. To counter this, Firefox’s “Total Cookie Protection” partitions storage so that third parties receive different cookie data per site and thus reduces tracking. Other browsers have similar policies, either by default or in private browsing modes. However, in some cases, non-tracking workflows such as SSO authentication depend on third party cookies. Storage partitioning can break these workflows, and browsers currently have to ship site-specific workarounds. The Storage Access API solves this by letting sites request access to the unpartitioned cookies. Interop here will allow browsers to advance privacy protections without breaking critical functionality. Web Compat The Web Compat focus area is unique in Interop. It isn’t about one specific standard, but focuses on browser bugs known to break sites. These are often in older parts of the platform with long-standing inconsistencies. Addressing these requires either aligning implementations with the standard or, where that would break sites, updating the standard itself. One feature in the Web Compat focus area for 2025 is CSS Zoom. Originally a proprietary feature in Internet Explorer, it allowed scaling layout by adjusting the computed dimensions of elements at a time before CSS transforms. WebKit reverse-engineered it, bringing it into Blink, but Gecko never implemented it, due to the lack of a specification and the complexities it created in layout calculations. Unfortunately, a feature not being standardised doesn’t prevent developers from using it. Use of CSS Zoom led to layout issues on some sites in Firefox, especially on mobile. We tried various workarounds and have had success using interventions to replace zoom with CSS transforms on some affected sites, but an attempt to implement the same approach directly in Gecko broke more sites than it fixed and was abandoned. The situation seemed to be at an impasse until 2023 when Google investigated removing CSS Zoom from Chromium. Unfortunately, it turned out that some use cases, such as Microsoft Excel Online’s worksheet zoom, depended on the specific behaviour of CSS Zoom, so removal was not feasible. However, having clarified the use cases, the Chromium team was able to propose a standardized model for CSS Zoom that was easier to implement without compromising compatibility. This proposal was accepted by the CSS WG and led to the first implementation of CSS Zoom in Firefox 126, 24 years after it was first released in Internet Explorer. With Interop 2025, we hope to bring the story of CSS Zoom to a close with all engines finally converging on the same behaviour, backed by a real open standard. WebRTC Video conferencing is now an essential feature of modern life, and in-browser video conferencing offers both ease of use and high security, as users are not required to download a native binary. Most web-based video conferencing relies on the WebRTC API, which offers high level tools for implementing real time communications. However, WebRTC has long suffered from interoperability issues, with implementations deviating from the standards and requiring nonstandard extensions for key features. This resulted in confusion and frustration for users and undermined trust in the web as a reliable alternative to native apps. Given this history, we’re excited to see WebRTC in Interop for the first time. The main part of the focus area is the RTCRtpScriptTransform API, which enables cross browser end-to-end encryption. Although there’s more to be done in the future, we believe Interop 2025 will be a big step towards making WebRTC a truly interoperable web standard. Removing Mutation Events The focus area for Removing Mutation Events is the first time Interop has been used to coordinate the removal of a feature. Mutation events fire when the DOM changes, meaning the event handlers run on the critical path for DOM manipulation, causing major performance issues, and significant implementation complexity. Despite the fact that they have been implemented in all engines, they’re so problematic that they were never standardised. Instead, mutation observers were developed as a standard solution for the use cases of mutation events without their complexity or performance problems. Almost immediately after mutation observers were implemented, a Gecko bug was filed: “We now have mutation observers, and we’d really like to kill support for mutation events at some point in the future. Probably not for a while yet.” That was in 2012. The difficulty is the web’s core commitment to backwards compatibility. Removing features that people rely on is unacceptable. However, last year Chromium determined that use of mutation events had dropped low enough to allow a “deprecation trial“, disabling mutation events by default, but allowing specific sites to re-enable them for a limited time. This is good news, but long-running deprecation trials can create problems for other browsers. Disabling the feature entirely can break sites that rely on the opt-out. On the other hand we know from experience that some sites actually function better in a browser with mutation events disabled (for example, because they are used for non-critical features, but impact performance). By including this removal in Interop 2025, we can ensure that mutation events are fully removed in 2025 and end the year with reduced platform complexity and improved web performance. Interop Investigations As well as focus areas, the Interop project also runs investigations aimed at long-term interoperability improvements to areas where we can’t measure progress using test pass rates. For example Interop investigations can be looking to add new test capabilities, or increase the test coverage of platform features. Accessibility Investigation The accessibility testing started as part of Interop 2023. It has added APIs for testing accessible name and computed role, as well as more than 1000 new tests. Those tests formed the Accessibility focus area in Interop 2024, which achieved an Interop score of 99.7%. In 2025 the focus will be expanding the testability of accessibility features. Mozilla is working on a prototype of AccessibleNode; an API that enables verifying the shape of the accessibility tree, along with its states and properties. This will allow us to test the effect of features like CSS display: contents or ::before/::after on the accessibility tree. Mobile Testing Investigation Today, all Interop focus areas are scored in desktop browsers. However, some features are mobile-specific or have interoperability challenges unique to mobile. Improving mobile testing has been part of Interop since 2023, and in that time we’ve made significant progress standing up mobile browsers in web-platform-tests CI systems. Today we have reliable runs of Chrome and Firefox Nightly on Android, and Safari runs on iOS are expected soon. However, some parts of our test framework were written with desktop-specific assumptions in the design, so the focus for 2025 will be on bringing mobile testing to parity with desktop. The goal is to allow mobile-specific focus areas in future Interop projects, helping improve interoperability across all device types. Driving the Web Forward The unique and distinguishing feature of the web platform is its basis in open standards, providing multiple implementations and user choice. Through the Interop project, web platform implementors collaborate to ensure that these core strengths are matched by a seamless user experience across browsers. With focus areas covering some of the most important new and existing areas of the modern web, Interop 2025 is set to deliver some of the biggest interoperability wins of the project so far. We are confident that Firefox and other browsers will rise to the challenge, providing users and developers with a more consistent and reliable web platform. Partner Announcements Apple Bocoup Google Igalia Microsoft Software engineer focused on maintaining a healthy open web. Web-platform-tests core team member. More articles by James Graham…",
  "image": "https://hacks.mozilla.org/wp-content/uploads/2025/02/Pasted-image.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle role=\"article\"\u003e\n    \u003ch2\u003eLaunching Interop 2025\u003c/h2\u003e\n\u003cp\u003eThe Interop Project is a collaboration between browser vendors and other platform implementors to provide users and web developers with high quality implementations of the web platform.\u003c/p\u003e\n\u003cp\u003eEach year we select a set of focus areas representing key areas where we want to improve interoperability. Encouraging all browser engines to prioritize common features ensures they become usable for web developers as quickly as possible.\u003c/p\u003e\n\u003cp\u003eProgress in each engine and the overall Interop score are measured by tracking the pass rate of a set of web-platform tests for each focus area using the \u003ca href=\"https://wpt.fyi/interop\"\u003eInterop dashboard\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eInterop 2024\u003c/h2\u003e\n\u003cp\u003eBefore introducing the new focus areas for this year, we should look at the \u003ca href=\"https://wpt.fyi/interop-2024\"\u003esuccesses\u003c/a\u003e of \u003ca href=\"https://hacks.mozilla.org/2024/02/announcing-interop-2024/\"\u003eInterop 2024\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://wpt.fyi/interop-2024?stable\"\u003e\u003cimg fetchpriority=\"high\" decoding=\"async\" src=\"https://hacks.mozilla.org/wp-content/uploads/2025/02/Pasted-image-500x348.png\" alt=\"\" width=\"500\" height=\"348\" srcset=\"https://hacks.mozilla.org/wp-content/uploads/2025/02/Pasted-image-500x348.png 500w, https://hacks.mozilla.org/wp-content/uploads/2025/02/Pasted-image-250x174.png 250w, https://hacks.mozilla.org/wp-content/uploads/2025/02/Pasted-image.png 692w\" sizes=\"(max-width: 500px) 100vw, 500px\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe Interop score, measuring the percentage of tests that pass in all of the major browser engines, has reached 95% in latest browser releases, up from only 46% at the start of the year. In pre-release browsers it’s even higher — over 97%. This is a huge win that shows how effective Interop can be at aligning browsers with the specifications and each other.\u003c/p\u003e\n\u003cp\u003eEach browser engine individually achieved a test pass score of 98% in stable browser releases and 99% in pre-release, with Firefox finishing slightly ahead with 98.8% in release and 99.1% in Nightly.\u003c/p\u003e\n\u003cp\u003eFor users, this means features such as \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/requestVideoFrameCallback\"\u003erequestVideoFrameCallback\u003c/a\u003e, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM#declaratively_with_html\"\u003eDeclarative Shadow DOM\u003c/a\u003e, and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Popover_API\"\u003ePopover\u003c/a\u003e, which a year ago only had limited availability, are now implemented interoperably in all browsers.\u003c/p\u003e\n\u003ch2\u003eInterop 2025\u003c/h2\u003e\n\u003cp\u003eBuilding on Interop 2024’s success, we are excited to continue the project into 2025. This year we have 19 focus areas; 17 new and 2 from previous years. A full description of all the focus areas is available \u003ca href=\"https://github.com/web-platform-tests/interop/blob/main/2025/README.md\"\u003ein the Interop repository\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFrom 2024 we’re carrying forward Layout (really “Flexbox and Grid”), and Pointer and Mouse Events. These are important platform primitives where the Interop project has already led to significant interoperability improvements. However, with technologies that are so fundamental to the modern web we think it’s important to set ambitious goals and continue to prioritize these areas, creating rock solid foundations for developers to build on.\u003c/p\u003e\n\u003cp\u003eThe new focus areas represent a broad cross section of the platform. Many of them — like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_anchor_positioning\"\u003eAnchor Positioning\u003c/a\u003e and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API\"\u003eView Transitions\u003c/a\u003e — have been identified from clear developer demand in surveys such as \u003ca href=\"https://2024.stateofhtml.com/en-US\"\u003eState of HTML\u003c/a\u003e and \u003ca href=\"https://2024.stateofcss.com/en-US\"\u003eState of CSS\u003c/a\u003e. Inclusion in Interop will ensure they’re usable as soon as possible.\u003c/p\u003e\n\u003cp\u003eIn addition to these high profile new features, we’d like to highlight some lesser-known focus areas and explain why we’re pleased to see them in Interop.\u003c/p\u003e\n\u003ch3\u003eStorage Access\u003c/h3\u003e\n\u003cp\u003eAt Mozilla user privacy is a core principle. One of the most common methods for tracking across the web is via \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Privacy/Third-party_cookies\"\u003ethird-party cookies\u003c/a\u003e. When sites request data from external services, the service can store data that’s re-sent when another site uses the same service. Thus the service can follow the user’s browsing across the web.\u003c/p\u003e\n\u003cp\u003eTo counter this, Firefox’s “\u003ca href=\"https://support.mozilla.org/en-US/kb/introducing-total-cookie-protection-standard-mode\"\u003eTotal Cookie Protection\u003c/a\u003e” partitions storage so that third parties receive different cookie data per site and thus reduces tracking. Other browsers have \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Privacy/Third-party_cookies#how_do_browsers_handle_third-party_cookies\"\u003esimilar policies\u003c/a\u003e, either by default or in private browsing modes.\u003c/p\u003e\n\u003cp\u003eHowever, in some cases, non-tracking workflows such as SSO authentication depend on third party cookies. Storage partitioning can break these workflows, and browsers currently have to ship site-specific workarounds. The \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API\"\u003eStorage Access API\u003c/a\u003e solves this by letting sites request access to the unpartitioned cookies. Interop here will allow browsers to advance privacy protections without breaking critical functionality.\u003c/p\u003e\n\u003ch3\u003eWeb Compat\u003c/h3\u003e\n\u003cp\u003eThe Web Compat focus area is unique in Interop. It isn’t about one specific standard, but focuses on browser bugs known to break sites. These are often in older parts of the platform with long-standing inconsistencies. Addressing these requires either aligning implementations with the standard or, where that would break sites, updating the standard itself.\u003c/p\u003e\n\u003cp\u003eOne feature in the Web Compat focus area for 2025 is \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/zoom\"\u003eCSS Zoom\u003c/a\u003e. Originally a proprietary feature in Internet Explorer, it allowed scaling layout by adjusting the computed dimensions of elements at a time before CSS transforms. WebKit reverse-engineered it, bringing it into Blink, but Gecko never implemented it, due to the lack of a specification and the complexities it created in layout calculations.\u003c/p\u003e\n\u003cp\u003eUnfortunately, a feature not being standardised doesn’t prevent developers from using it. Use of CSS Zoom led to layout issues on some sites in Firefox, especially on mobile. We tried various workarounds and have had success using \u003ca href=\"https://wiki.mozilla.org/Compatibility/System_Addon\"\u003einterventions\u003c/a\u003e to replace \u003ccode\u003ezoom\u003c/code\u003e with CSS transforms on some affected sites, but an attempt to implement the same approach directly in Gecko broke more sites than it fixed and was abandoned.\u003c/p\u003e\n\u003cp\u003eThe situation seemed to be at an impasse until 2023 when Google investigated \u003ca href=\"https://groups.google.com/a/chromium.org/g/blink-dev/c/V7q43bgutbo?pli=1\"\u003eremoving CSS Zoom from Chromium\u003c/a\u003e. Unfortunately, it turned out that some use cases, such as Microsoft Excel Online’s worksheet zoom, depended on the specific behaviour of CSS Zoom, so removal was not feasible. However, having clarified the use cases, the Chromium team was able to \u003ca href=\"https://github.com/w3c/csswg-drafts/issues/5623#issuecomment-1644208565\"\u003epropose\u003c/a\u003e a standardized model for CSS Zoom that was easier to implement without compromising compatibility. This proposal was accepted by the CSS WG and led to the first implementation of CSS Zoom in Firefox 126, 24 years after it was first released in Internet Explorer.\u003c/p\u003e\n\u003cp\u003eWith Interop 2025, we hope to bring the story of CSS Zoom to a close with all engines finally converging on the same behaviour, backed by a real open standard.\u003c/p\u003e\n\u003ch3\u003eWebRTC\u003c/h3\u003e\n\u003cp\u003eVideo conferencing is now an essential feature of modern life, and in-browser video conferencing offers both ease of use and high security, as users are not required to download a native binary. Most web-based video conferencing relies on the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API\"\u003eWebRTC API\u003c/a\u003e, which offers high level tools for implementing real time communications. However, WebRTC has long suffered from interoperability issues, with implementations deviating from the standards and requiring nonstandard extensions for key features. This resulted in confusion and frustration for users and undermined trust in the web as a reliable alternative to native apps.\u003c/p\u003e\n\u003cp\u003eGiven this history, we’re excited to see WebRTC in Interop for the first time. The main part of the focus area is the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpScriptTransform\"\u003eRTCRtpScriptTransform\u003c/a\u003e API, which enables cross browser end-to-end encryption. Although there’s more to be done in the future, we believe Interop 2025 will be a big step towards making WebRTC a truly interoperable web standard.\u003c/p\u003e\n\u003ch3\u003eRemoving Mutation Events\u003c/h3\u003e\n\u003cp\u003eThe focus area for Removing Mutation Events is the first time Interop has been used to coordinate the removal of a feature. \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationEvent\"\u003eMutation events\u003c/a\u003e fire when the DOM changes, meaning the event handlers run on the critical path for DOM manipulation, causing major performance issues, and significant implementation complexity. Despite the fact that they have been implemented in all engines, they’re so problematic that they were never standardised. Instead, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\"\u003emutation observers\u003c/a\u003e were developed as a standard solution for the use cases of mutation events without their complexity or performance problems. Almost immediately after mutation observers were implemented, a \u003ca href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=769207\"\u003eGecko bug was filed\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\u003cp\u003e“We now have mutation observers, and we’d really like to kill support for mutation events at some point in the future. Probably not for a while yet.”\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThat was in 2012. The difficulty is the web’s core \u003ca href=\"https://www.mozilla.org/en-US/about/webvision/full/#openness\"\u003ecommitment to backwards compatibility\u003c/a\u003e. Removing features that people rely on is unacceptable. However, last year Chromium determined that use of mutation events had dropped low enough to allow a “\u003ca href=\"https://developer.chrome.com/docs/web-platform/origin-trials#deprecation_trials\"\u003edeprecation trial\u003c/a\u003e“, disabling mutation events by default, but allowing specific sites to re-enable them for a limited time.\u003c/p\u003e\n\u003cp\u003eThis is good news, but long-running deprecation trials can create problems for other browsers. Disabling the feature entirely can break sites that rely on the opt-out. On the other hand we know from experience that some sites actually function better in a browser with mutation events disabled (for example, because they are used for non-critical features, but impact performance).\u003c/p\u003e\n\u003cp\u003eBy including this removal in Interop 2025, we can ensure that mutation events are fully removed in 2025 and end the year with reduced platform complexity and improved web performance.\u003c/p\u003e\n\u003ch2\u003eInterop Investigations\u003c/h2\u003e\n\u003cp\u003eAs well as focus areas, the Interop project also runs investigations aimed at long-term interoperability improvements to areas where we can’t measure progress using test pass rates. For example Interop investigations can be looking to add new test capabilities, or increase the test coverage of platform features.\u003c/p\u003e\n\u003ch3\u003eAccessibility Investigation\u003c/h3\u003e\n\u003cp\u003eThe accessibility testing started as part of Interop 2023. It has added APIs for testing accessible name and computed role, as well as more than 1000 new tests. Those tests formed the Accessibility focus area in Interop 2024, which achieved an Interop score of 99.7%.\u003c/p\u003e\n\u003cp\u003eIn 2025 the focus will be expanding the testability of accessibility features. Mozilla is working on a prototype of \u003ca href=\"https://github.com/WICG/aom/issues/203\"\u003eAccessibleNode\u003c/a\u003e; an API that enables verifying the shape of the accessibility tree, along with its states and properties. This will allow us to test the effect of features like CSS display: contents or ::before/::after on the accessibility tree.\u003c/p\u003e\n\u003ch3\u003eMobile Testing Investigation\u003c/h3\u003e\n\u003cp\u003eToday, all Interop focus areas are scored in desktop browsers. However, some features are mobile-specific or have interoperability challenges unique to mobile.\u003c/p\u003e\n\u003cp\u003eImproving mobile testing has been part of Interop since 2023, and in that time we’ve made significant progress standing up mobile browsers in web-platform-tests CI systems. Today we have reliable runs of Chrome and Firefox Nightly on Android, and Safari runs on iOS are expected soon. However, some parts of our test framework were written with desktop-specific assumptions in the design, so the focus for 2025 will be on bringing mobile testing to parity with desktop. The goal is to allow mobile-specific focus areas in future Interop projects, helping improve interoperability across all device types.\u003c/p\u003e\n\u003ch2\u003eDriving the Web Forward\u003c/h2\u003e\n\u003cp\u003eThe unique and distinguishing feature of the web platform is its basis in open standards, providing multiple implementations and user choice. Through the Interop project, web platform implementors collaborate to ensure that these core strengths are matched by a seamless user experience across browsers.\u003c/p\u003e\n\u003cp\u003eWith focus areas covering some of the most important new and existing areas of the modern web, Interop 2025 is set to deliver some of the biggest interoperability wins of the project so far. We are confident that Firefox and other browsers will rise to the challenge, providing users and developers with a more consistent and reliable web platform.\u003c/p\u003e\n\u003ch2\u003ePartner Announcements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://webkit.org/blog/16458/announcing-interop-2025/\"\u003eApple\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.bocoup.com/blog/interop-2025\"\u003eBocoup\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://web.dev/blog/interop-2025\"\u003eGoogle\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://igalia.com/2025/02/interop-2025\"\u003eIgalia\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blogs.windows.com/msedgedev/2025/02/13/microsoft-edge-and-interop-2025/\"\u003eMicrosoft\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n    \u003csection\u003e\n                                \n                      \u003cp\u003eSoftware engineer focused on maintaining a healthy open web. Web-platform-tests core team member.\u003c/p\u003e\n                                \u003cp\u003e\u003ca href=\"https://hacks.mozilla.org/author/jgrahammozilla-com/\"\u003eMore articles by James Graham…\u003c/a\u003e\u003c/p\u003e\n                  \u003c/section\u003e\n  \u003c/article\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
