{
  "id": "98043eb3-13b0-4b4f-8dff-b04f8d9c2630",
  "title": "Essential Tools for JetBrains IDE Plugin Development: Livestream Recording and Key Takeaways",
  "link": "https://blog.jetbrains.com/platform/2025/04/essential-tools-for-jetbrains-ide-plugin-development-livestream-recording-and-key-takeaways/",
  "description": "The recording of our livestream is available on JetBrains TV! In the recent session, IntelliJ Platform Developer Advocates Yann Cébron and Jakub Chrzanowski explored some of the most helpful tools for developing plugins for JetBrains IDEs. From plugin creation to UI debugging, the session covered practical tips and tricks to enhance your workflow. Let’s take […]",
  "author": "Elena Kerpeleva",
  "published": "Tue, 08 Apr 2025 16:23:11 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "livestreams",
    "marketplace",
    "livestream"
  ],
  "byline": "Elena Kerpeleva",
  "length": 5177,
  "excerpt": "Discover key tools that can improve your plugin development experience in this summary of the latest JetBrains streamline.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Plugin and extension development for JetBrains products. Livestreams MarketplaceEssential Tools for JetBrains IDE Plugin Development: Livestream Recording and Key Takeaways The recording of our livestream is available on JetBrains TV! In the recent session, IntelliJ Platform Developer Advocates Yann Cébron and Jakub Chrzanowski explored some of the most helpful tools for developing plugins for JetBrains IDEs. From plugin creation to UI debugging, the session covered practical tips and tricks to enhance your workflow. Let’s take a closer look at the main tools covered in the streamline. Whether you’re just getting started or have extensive experience in plugin development, exploring how these tools are used in practice can offer valuable insights and help you work more efficiently. Plugin DevKit: Smarter Plugin XML Authoring The Plugin DevKit has been a core tool for nearly two decades—but recent enhancements make it more powerful than ever. Developers can now benefit from: In-editor documentation: Hover over plugin XML tags and attributes to view the corresponding documentation directly inside the IDE. Improved completion and navigation: Extension points, language IDs, and Action IDs all offer rich auto-completion and go-to-declaration functionality. Extension point insights: Built-in links to the IntelliJ Platform Explorer let you discover how open source plugins use specific extension points. Internationalization support: Inspections suggest extracting hardcoded text into resource bundles, helping your plugin scale globally. Enhanced inspections: Spot missing plugin icons, enforce text capitalization rules, and verify extension point setup through a growing list of dedicatedinspections. New inspections like Can Be Dumb Aware help you ensure your plugin functions even during indexing mode—offering a smoother user experience. PSI Viewer: Understand Your Language’s Syntax Tree When working with custom languages or extending existing ones, the PSI Viewer becomes essential. This tool provides a deep view into: The structure of your code’s syntax tree. Reference relationships and injected languages. Formatting models (block structure). Stub structures used for fast resolving. There are two PSI viewers: A standalone plugin with a dockable tool window. A built-in viewer accessible from the Internal Tools menu. Both help developers navigate and debug PSI elements in real-time. UI Inspector: Explore and Debug the Plugin Interface Think of the UI Inspector as the “DevTools” of the IntelliJ UI. Once you enable internal mode, you can: Inspect any UI element via shortcut (Ctrl+Alt+Click / ⌃⌥Click). View Swing properties, padding, Action IDs, and tool window IDs. Modify certain UI parameters in real time (e.g., layout properties). It’s especially useful for: Designing themes and custom UIs. Looking up existing implementations as reference. Referencing UI elements programmatically in integration tests. Debugging visual layout or behavior inconsistencies. Index Viewer Plugin: Debug Your Plugin’s Indexes Indexes are the hidden backbone of IntelliJ’s speed and smarts. With the Index Viewer Plugin, you can: Inspect all file-based and stub indexes. Browse index contents, keys, and their associated data. Open index implementations and trace what they store. Use the “Show Index for File” option to see which indexes reference a given file. This is invaluable for debugging custom indexes, ensuring correct data collection, and optimizing performance. Wrapping Up Mastering the right tools is key to building high-quality, efficient plugins for JetBrains IDEs. From fine-tuning your plugin XML to navigating complex UI testing and PSI inspection, having a strong command of the available utilities can make a big difference in your workflow and the end-user experience. Stay tuned—we’ll be exploring even more plugin development tools in future sessions. Have an idea for our next streamline? Let us know in the comments below! Subscribe to JetBrains Platform updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/04/Social_Share_Blog_1280x720-4.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/platform/\"\u003e\n                                                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/JetBrains-icon-1.svg\" alt=\"Platform logo\"/\u003e\n                                                                                                                            \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003ePlugin and extension development for JetBrains products. \u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/platform/category/livestreams/\"\u003eLivestreams\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/platform/category/marketplace/\"\u003eMarketplace\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eEssential Tools for JetBrains IDE Plugin Development: Livestream Recording and Key Takeaways\u003c/h2\u003e                    \n                    \n\u003cp\u003eThe recording of our livestream is available on\u003ca href=\"https://www.youtube.com/watch?v=blXmgF5gbWg\" target=\"_blank\" rel=\"noopener\"\u003e JetBrains TV\u003c/a\u003e!\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the recent session, IntelliJ Platform Developer Advocates Yann Cébron and Jakub Chrzanowski explored some of the most helpful tools for developing plugins for JetBrains IDEs. From plugin creation to UI debugging, the session covered practical tips and tricks to enhance your workflow.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe title=\"Essential Tools for JetBrains IDE Plugin Development\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/blXmgF5gbWg?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eLet’s take a closer look at the main tools covered in the streamline. Whether you’re just getting started or have extensive experience in plugin development, exploring how these tools are used in practice can offer valuable insights and help you work more efficiently.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003ePlugin DevKit: Smarter Plugin XML Authoring\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2424\" height=\"1330\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Screenshot-2025-04-08-at-13.35.33.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://plugins.jetbrains.com/plugin/22851-plugin-devkit/\" target=\"_blank\" rel=\"noopener\"\u003ePlugin DevKit \u003c/a\u003ehas been a core tool for nearly two decades—but recent enhancements make it more powerful than ever. Developers can now benefit from:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIn-editor documentation:\u003c/strong\u003e Hover over plugin XML tags and attributes to view the corresponding documentation directly inside the IDE.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eImproved completion and navigation:\u003c/strong\u003e Extension points, language IDs, and Action IDs all offer rich auto-completion and go-to-declaration functionality.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eExtension point insights:\u003c/strong\u003e Built-in links to the\u003ca href=\"https://plugins.jetbrains.com/intellij-platform-explorer\" target=\"_blank\" rel=\"noopener\"\u003e IntelliJ Platform Explorer\u003c/a\u003e let you discover how open source plugins use specific extension points.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eInternationalization support:\u003c/strong\u003e Inspections suggest extracting hardcoded text into resource bundles, helping your plugin scale globally.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEnhanced inspections:\u003c/strong\u003e Spot missing plugin icons, enforce text capitalization rules, and verify extension point setup through a growing list of dedicatedinspections.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eNew inspections like \u003cstrong\u003eCan Be Dumb Aware\u003c/strong\u003e help you ensure your plugin functions even during indexing mode—offering a smoother user experience.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003ePSI Viewer: Understand Your Language’s Syntax Tree\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"2420\" height=\"1336\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Screenshot-2025-04-08-at-13.38.35.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWhen working with custom languages or extending existing ones, the \u003ca href=\"https://plugins.jetbrains.com/plugin/227-psiviewer/\" target=\"_blank\" rel=\"noopener\"\u003ePSI Viewer\u003c/a\u003e becomes essential. This tool provides a deep view into:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe structure of your code’s syntax tree.\u003c/li\u003e\n\n\n\n\u003cli\u003eReference relationships and injected languages.\u003c/li\u003e\n\n\n\n\u003cli\u003eFormatting models (block structure).\u003c/li\u003e\n\n\n\n\u003cli\u003eStub structures used for fast resolving.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThere are two PSI viewers:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eA standalone plugin with a dockable tool window.\u003c/li\u003e\n\n\n\n\u003cli\u003eA built-in viewer accessible from the \u003cstrong\u003eInternal Tools \u003c/strong\u003emenu.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eBoth help developers navigate and debug PSI elements in real-time.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eUI Inspector: Explore and Debug the Plugin Interface\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2186\" height=\"1236\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Screenshot-2025-04-08-at-13.41.52.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThink of the \u003ca href=\"https://plugins.jetbrains.com/docs/intellij/internal-ui-inspector.html\" target=\"_blank\" rel=\"noopener\"\u003eUI Inspector\u003c/a\u003e as the “DevTools” of the IntelliJ UI. Once you enable \u003cstrong\u003einternal mode\u003c/strong\u003e, you can:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eInspect any UI element via shortcut (Ctrl+Alt+Click / ⌃⌥Click).\u003c/li\u003e\n\n\n\n\u003cli\u003eView Swing properties, padding, Action IDs, and tool window IDs.\u003c/li\u003e\n\n\n\n\u003cli\u003eModify certain UI parameters in real time (e.g., layout properties).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eIt’s especially useful for:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eDesigning themes and custom UIs.\u003c/li\u003e\n\n\n\n\u003cli\u003eLooking up existing implementations as reference.\u003c/li\u003e\n\n\n\n\u003cli\u003eReferencing UI elements programmatically in integration tests.\u003c/li\u003e\n\n\n\n\u003cli\u003eDebugging visual layout or behavior inconsistencies.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eIndex Viewer Plugin: Debug Your Plugin’s Indexes\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2432\" height=\"1268\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Screenshot-2025-04-08-at-13.45.25-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIndexes are the hidden backbone of IntelliJ’s speed and smarts. With the \u003ca href=\"https://plugins.jetbrains.com/plugin/13029-index-viewer\" target=\"_blank\" rel=\"noopener\"\u003eIndex Viewer Plugin\u003c/a\u003e, you can:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eInspect all file-based and stub indexes.\u003c/li\u003e\n\n\n\n\u003cli\u003eBrowse index contents, keys, and their associated data.\u003c/li\u003e\n\n\n\n\u003cli\u003eOpen index implementations and trace what they store.\u003c/li\u003e\n\n\n\n\u003cli\u003eUse the \u003cem\u003e“Show Index for File”\u003c/em\u003e option to see which indexes reference a given file.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis is invaluable for debugging custom indexes, ensuring correct data collection, and optimizing performance.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eWrapping Up\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eMastering the right tools is key to building high-quality, efficient plugins for JetBrains IDEs. From fine-tuning your plugin XML to navigating complex UI testing and PSI inspection, having a strong command of the available utilities can make a big difference in your workflow and the end-user experience.\u003c/p\u003e\n\n\n\n\u003cp\u003eStay tuned—we’ll be exploring even more plugin development tools in future sessions.\u003c/p\u003e\n\n\n\n\u003cp\u003eHave an idea for our next streamline? Let us know in the comments below!\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to JetBrains Platform updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
