{
  "id": "e6673306-87ce-4545-9131-d80e90534ee4",
  "title": "Debugging Java Code in IntelliJ IDEA",
  "link": "https://blog.jetbrains.com/idea/2025/04/debugging-java-code-in-intellij-idea/",
  "description": "In this blog post, we will look at how to debug Java code using the IntelliJ IDEA debugger. We will look at how to fix a failing test, how to find out where an `Exception` is thrown, and how to find problems with our data. And we will learn some neat tricks about the debugger […]",
  "author": "Marit van Dijk",
  "published": "Thu, 24 Apr 2025 09:12:11 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "idea",
    "java",
    "tutorials",
    "debug",
    "debugger",
    "debugging",
    "intelij-idea"
  ],
  "byline": "Marit van Dijk",
  "length": 14329,
  "excerpt": "In this blog post, we will look at how to debug Java code using the IntelliJ IDEA debugger. We will look at how to fix a failing test, how to find out where an `Exception` is thrown, and how to find p",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "IntelliJ IDEA – the IDE for Professional Development in Java and Kotlin IntelliJ IDEA Java TutorialsDebugging Java Code in IntelliJ IDEA In this blog post, we will look at how to debug Java code using the IntelliJ IDEA debugger. We will look at how to fix a failing test, how to find out where an `Exception` is thrown, and how to find problems with our data. And we will learn some neat tricks about the debugger in the process!  To illustrate using the debugger, we will use a small example application that reads test scores from a CSV file, calculates the average score per student, and prints the results to the console. If you’d like to follow along, you can find the code here.  Debug a failing test One reason you might need the debugger is when one of your tests fails. In our example application, when we run the tests in `StudentTest`, we see that there is a failing test. Failing test Currently, this test fails because the expected average does not match the result of the method `getAverageScore()`, as we can see on line 127. We can use the debugger to find out what the problem is and how to fix it. Let’s navigate to this method so we can set a breakpoint there to see what happens. Set a breakpoint We can navigate to the method `getAverageScore()` using Jump to Source (⌘↓ on macOS / F4 on Windows/Linux) when our cursor is on the method. We can place a breakpoint, either by clicking in the gutter or using the shortcut (⌘F8 on macOS / Ctrl+F8 on Windows/Linux). Place the breakpoint on the first line of the method (line 50). Breakpoint in method Run in Debug mode When we run the test in Debug mode (⌃D on macOS / Shift+F9 on Windows/Linux), execution will stop when it hits the breakpoint, so that we can look at the state of our application. We see inline debugging information in the editor. Run in Debug mode Here we see that the list of `testScores` has `size = 3`. We can even click in the editor to expand this list to see details of the values in the list. We also see that `testScores.isEmpty()` evaluates to `false`, and therefore the `return` statement inside that `if` statement is unreachable and greyed out. In the Debug tool window (⌘5 on macOS / Alt+5 on Windows/Linux), we see the call stack (the methods that were called) on the left. We can also see information about objects and variables, like the student and their test scores, in this example. Debug tool window Stepping through the application Now, we can step through the code to see what happens, using different step actions. Use Step Over (F8) to step over a line and go to the next line, or use Step Into (F7) to step into a method that is called on a line. In this example, we can step into `getTestScore()` – which isn’t very interesting. When we step into a method, we can continue stepping to return to the call site once we exit the method, or use Step Out (Shift F8) to return right away. Notice that the variables and values that are shown inline and in the Debug tool window are updated as we step through the program. Step through the program Once all the scores have been added, we see that the` totalScore` is 25. And here, we see the problem with our logic: we forgot to divide by the number of test scores! Evaluate expression To fix our problem, we need to divide the total score by the number of test scores. To make sure our intended fix is correct, we can use Evaluate Expression. Right-click on `totalScore` in the editor to open the context menu and select Evaluate Expression. Alternatively, use the shortcut ⌥F8 on macOS / Alt+F8 on Windows/Linux. Evaluate Expression If we evaluate `totalScore`, we get 25.0, as we can already see in the debugger. However, we can use Evaluate Expression to evaluate other expressions, even ones not currently part of our code. Here we can try out potential solutions. For example, if we evaluate `totalScore / testScores.size()`, we get “8.333333333333334”, which is the expected average.  Evaluate Expression Apply fix and rerun tests Let’s apply our fix to the code to return `totalScore / testScores.size()` instead of `totalScore` from the method `getAverageScore()`. When we rerun the test, we see that it now passes. Note that you might want to run all tests to make sure that your fix has not had any unintended side effects. Test passed Since we no longer need the breakpoint, we can remove it, either by clicking the breakpoint in the gutter or by using the shortcut ⌘F8 on macOS / Ctrl+F8 on Windows/Linux. Run the application Now that we’ve fixed our failing test and all the tests pass, let’s see if our application works correctly. Go to the `Main` class and run it, for example, by clicking the Run button in the gutter. Debug an Exception When we run the application, we see that there seems to be another problem! Our application throws a `DateTimeParseException`, with the message `Text ‘8.7’ could not be parsed at index 0`. Let’s use the debugger to find out what’s wrong.  DateTimeParseException Note that we can create a breakpoint right from the console, by clicking the link Create breakpoint. This opens the Breakpoints dialog, where an Exception Breakpoint has been added for the `DateTimeParseException`. Create Exception Breakpoint Now, when we run our application in Debug mode, execution will stop when and where this exception is thrown, so we can figure out what caused it. Execution stops in the `DateTimeFormatter` class. When we expand the `Exception` in the Debug tool window, we see that the `detailMessage` is “Text “8.7” cannot be parsed as a `DateTime`”. That makes sense, as the number 8.7 does not represent a valid date. Reset frame To find out where the incorrect value comes from, we can go back in the call stack. The call stack is shown in the left pane of the Debug tool window. We see a round arrow in front of the last method that was called. When we hover over this arrow, we see the option to Reset Frame. Reset Frame We can use Reset Frame to go back to the previous frame. Let’s do so until we get to the point in our code where we try to parse this value into a date. We will need to drop several frames until we get back to our own code. We see that we try to parse a `LocalDate` on line 38 of our `Main` class. Note that there are limitations to using Reset Frame; it only resets local variables, not static and instance variables. It also won’t undo any side effects of your application, like console output. While this is not relevant in the current example, you should be aware when you use Reset Frame in the future. We are trying to parse a part of a line from our CSV file. Each line has been split into parts. To see all parts of the current line, click the View link next to the `parts` variable in the Debug tool window. Here we see that “8.7’ is actually a test score, as you might have guessed. We can also see that the line does contain a date, but it is in the next part of the line. Reset Frame As we can see in our code, we are parsing the same part of the line (`parts[3]`) twice! This looks like a copy-paste error! We should be parsing the part of the line that contains the date, which is `parts[4]`. Let’s fix that by changing line 38 to `var testDate = LocalDate.parse(parts[4]);` Note that we could have also gone directly to this line in the code from the console, by clicking the link “Main.java:38” in the console. However, it is useful to know how to set a breakpoint for an exception in case you ever need it. Go to line in code from console Print to the console In fact, while we’re here, let’s make sure that we are parsing all the parts of the lines correctly.  As we can see in the code just above (on line 25), our CSV file contains a header. Let’s print this header to the console to make sure we parse each part of the line to the correct field. We could add a `System.out.println()` to our code to print the header, but we don’t want to risk print statements ending up in production! Fortunately, there is a better way to do so. Non-suspending logging breakpoint Let’s create a non-suspending breakpoint, which means that execution will not stop on this breakpoint, and set it to log the line to the console when the breakpoint is hit. To do so, create a breakpoint on line 27. Right-click the breakpoint and click More to open the Breakpoints dialog. Unselect Suspend to make this a non-suspending breakpoint. Next, select Log and Evaluate \u0026 log. Set the Evaluate \u0026 log field to `”Header: ” + line` and click Done. Notice that the breakpoint is yellow, to signify that this is a non-suspending breakpoint. Non-suspending breakpoint Now, when we run the application in Debug mode, we see that the header is printed to the console. But so are all the other lines from the file. To print only the header, the breakpoint should be on the next line. We could set a new breakpoint there, but then we’d have to redo the configuration… Drag and drop breakpoint Instead of creating a new breakpoint, we can drag and drop the existing breakpoint to the next line, preserving its configuration.  Drag and drop breakpoint Now, when we run the application in Debug mode, only the header is printed to the console. Along with the output of our program, of course. It looks like our fields correspond correctly to the headers of the file. Checking the functionality of the application Let’s run our application again to see if everything is now as it should be. We see that the application runs without errors, but it looks like one of the students has a negative average test score. Negative average score That can’t be right! Let’s see what’s going on. We’ll set a breakpoint in the code where we add test scores to the student (line 45 in `Main.java`). When we run our application in Debug mode, execution will stop every time this breakpoint is hit. We can click the Resume Program button (⌥⌘R on macOS / F9 on Windows/Linux), either in the Debug tool window, or inline in the editor, to get to the next test score. Resume program Every time we click the Resume Program button, we can see the values change both in the inline debugging information in the editor and in the Debug tool window. Execution will stop every time it hits this breakpoint, so for every test score. Since there are a lot of test scores in the file, this is going to take a while…  Resume program Conditional breakpoint As we are only interested in the test scores for a particular student, we don’t need execution to stop for each test score. Instead of clicking the Resume Program button many times in a row to get to the scores we’re interested in, we can use a conditional breakpoint – which will only halt execution under certain conditions. Right-click the breakpoint to open the Line Breakpoint dialog and edit the configuration for the breakpoint. Since we don’t need execution to suspend until we process this particular student’s test scores, we can set the field Condition to `studentName.equals(“Olivia Garcia”)` and click Done.  Conditional breakpoint Notice that the breakpoint has a small question mark in it, to signify that it is a conditional breakpoint. Now, when we resume our program, execution will stop only once we get to the test scores for the student whose name we have set in the condition. Here we can see that the test score is negative. Negative test score Add watch To see whether all test scores for this student are negative, let’s add a watch to the field `testScore`. Adding a watch makes it easier to explicitly watch the value of a field. Right-click on the variable `testScore` in the Threads \u0026 Variables tab in the Debug tool window and select Add to watches from the context menu. The watch will be shown in the right pane of the Debug tool window.  Add to Watches If needed, select the Layout Settings icon at the top right of the Debug tool window and select Watches in the list, to show watches in the right pane. Add Watches to Debug tool window When we click Resume Program and loop over this student’s scores, we see that all her scores are negative. That would explain her negative average…  This looks like a problem with the input data. Let’s open the CSV file to correct the scores and make sure Olivia’s scores are no longer negative. We can use multiple carets to fix all scores at the same time. In this example, we can fix our input data ourselves. If you are dealing with user input that you can’t change, consider adding validation to the code, for example, that test scores cannot be negative. Final check Let’s run our application one more time to see that everything is in order. We see that average scores are printed to the console for all students, and none of the scores are negative. This is how our application is expected to work.  Final check Conclusion In this blog post, we’ve seen how to use the debugger to find and fix several types of bugs, from problems with the logic in the code, to reasons that exceptions are thrown, and finding problems with input data. Is there anything else you’d like to learn about the debugger? Please tell us in the comments! Subscribe to IntelliJ IDEA Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/04/ij-social_share_blog_1280x720_en-7.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/idea/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/IntelliJ-IDEA-1.svg\" alt=\"Idea logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eIntelliJ IDEA – the IDE for Professional Development in Java and Kotlin\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/idea/category/idea/\"\u003eIntelliJ IDEA\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/java/\"\u003eJava\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/tutorials/\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eDebugging Java Code in IntelliJ IDEA\u003c/h2\u003e                    \n                    \n\u003cp\u003eIn this blog post, we will look at how to debug Java code using the IntelliJ IDEA debugger. We will look at how to fix a failing test, how to find out where an `Exception` is thrown, and how to find problems with our data. And we will learn some neat tricks about the debugger in the process! \u003c/p\u003e\n\n\n\n\u003cp\u003eTo illustrate using the debugger, we will use a small example application that reads test scores from a CSV file, calculates the average score per student, and prints the results to the console. If you’d like to follow along, you can find the code \u003ca href=\"https://github.com/mlvandijk/student-tracker/tree/debugger\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003ch2\u003eDebug a failing test\u003c/h2\u003e\n\n\n\n\u003cp\u003eOne reason you might need the debugger is when one of your tests fails. In our example application, when we run the tests in `StudentTest`, we see that there is a failing test.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Failing-test.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eFailing test\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eCurrently, this test fails because the expected average does not match the result of the method `getAverageScore()`, as we can see on line 127. We can use the debugger to find out what the problem is and how to fix it. Let’s navigate to this method so we can set a breakpoint there to see what happens.\u003c/p\u003e\n\n\n\n\u003ch2\u003eSet a breakpoint\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe can navigate to the method `getAverageScore()` using \u003cem\u003eJump to Source\u003c/em\u003e (\u003cem\u003e⌘↓\u003c/em\u003e on macOS / \u003cem\u003eF4\u003c/em\u003e on Windows/Linux) when our cursor is on the method. We can place a breakpoint, either by clicking in the gutter or using the shortcut (\u003cem\u003e⌘F8\u003c/em\u003e on macOS / \u003cem\u003eCtrl+F8\u003c/em\u003e on Windows/Linux). Place the breakpoint on the first line of the method (line 50).\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Breakpoint-in-method.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eBreakpoint in method\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eRun in Debug mode\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhen we run the test in \u003cem\u003eDebug\u003c/em\u003e mode (\u003cem\u003e⌃D\u003c/em\u003e on macOS / \u003cem\u003eShift+F9\u003c/em\u003e on Windows/Linux), execution will stop when it hits the breakpoint, so that we can look at the state of our application. We see inline debugging information in the editor.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Run-in-debug-mode.gif\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eRun in Debug mode\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHere we see that the list of `testScores` has `size = 3`. We can even click in the editor to expand this list to see details of the values in the list. We also see that `testScores.isEmpty()` evaluates to `false`, and therefore the `return` statement inside that `if` statement is unreachable and greyed out.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the\u003cem\u003e Debug\u003c/em\u003e tool window (\u003cem\u003e⌘5\u003c/em\u003e on macOS / \u003cem\u003eAlt+5\u003c/em\u003e on Windows/Linux), we see the call stack (the methods that were called) on the left. We can also see information about objects and variables, like the student and their test scores, in this example.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Debug-tool-window.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eDebug tool window\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eStepping through the application\u003c/h2\u003e\n\n\n\n\u003cp\u003eNow, we can step through the code to see what happens, using different step actions.\u003c/p\u003e\n\n\n\n\u003cp\u003eUse \u003cem\u003eStep Over\u003c/em\u003e (\u003cem\u003eF8\u003c/em\u003e) to step over a line and go to the next line, or use \u003cem\u003eStep Into\u003c/em\u003e (\u003cem\u003eF7\u003c/em\u003e) to step into a method that is called on a line. In this example, we can step into `getTestScore()` – which isn’t very interesting. When we step into a method, we can continue stepping to return to the call site once we exit the method, or use \u003cem\u003eStep Out\u003c/em\u003e (\u003cem\u003eShift F8\u003c/em\u003e) to return right away. Notice that the variables and values that are shown inline and in the \u003cem\u003eDebug\u003c/em\u003e tool window are updated as we step through the program.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Step-actions.gif\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eStep through the program\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eOnce all the scores have been added, we see that the` totalScore` is 25. And here, we see the problem with our logic: we forgot to divide by the number of test scores!\u003c/p\u003e\n\n\n\n\u003ch2\u003eEvaluate expression\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo fix our problem, we need to divide the total score by the number of test scores. To make sure our intended fix is correct, we can use \u003cem\u003eEvaluate Expression\u003c/em\u003e. Right-click on `totalScore` in the editor to open the context menu and select \u003cem\u003eEvaluate Expression.\u003c/em\u003e Alternatively, use the shortcut \u003cem\u003e⌥F8\u003c/em\u003e on macOS / \u003cem\u003eAlt+F8\u003c/em\u003e on Windows/Linux.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Evaluate-Expression.png\" alt=\"\"/\u003e\u003cfigcaption\u003eEvaluate Expression\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf we evaluate `totalScore`, we get 25.0, as we can already see in the debugger. However, we can use \u003cem\u003eEvaluate Expression\u003c/em\u003e to evaluate other expressions, even ones not currently part of our code. Here we can try out potential solutions. For example, if we evaluate `totalScore / testScores.size()`, we get “8.333333333333334”, which is the expected average. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Evaluate-Expression.gif\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eEvaluate Expression\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eApply fix and rerun tests\u003c/h2\u003e\n\n\n\n\u003cp\u003eLet’s apply our fix to the code to return `totalScore / testScores.size()` instead of `totalScore` from the method `getAverageScore()`. When we rerun the test, we see that it now passes. Note that you might want to run all tests to make sure that your fix has not had any unintended side effects.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Test-passed.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eTest passed\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSince we no longer need the breakpoint, we can remove it, either by clicking the breakpoint in the gutter or by using the shortcut \u003cem\u003e⌘F8\u003c/em\u003e on macOS / \u003cem\u003eCtrl+F8\u003c/em\u003e on Windows/Linux.\u003c/p\u003e\n\n\n\n\u003ch2\u003eRun the application\u003c/h2\u003e\n\n\n\n\u003cp\u003eNow that we’ve fixed our failing test and all the tests pass, let’s see if our application works correctly. Go to the `Main` class and run it, for example, by clicking the \u003cem\u003eRun\u003c/em\u003e button in the gutter.\u003c/p\u003e\n\n\n\n\u003ch2\u003eDebug an Exception\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhen we run the application, we see that there seems to be another problem! Our application throws a `DateTimeParseException`, with the message `Text ‘8.7’ could not be parsed at index 0`. Let’s use the debugger to find out what’s wrong. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/DateTimeParseException.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eDateTimeParseException\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNote that we can create a breakpoint right from the console, by clicking the link \u003cem\u003eCreate breakpoint\u003c/em\u003e. This opens the \u003cem\u003eBreakpoints\u003c/em\u003e dialog, where an \u003cem\u003eException Breakpoint\u003c/em\u003e has been added for the `DateTimeParseException`.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Create-Exception-Breakpoint.gif\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCreate Exception Breakpoint\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, when we run our application in \u003cem\u003eDebug\u003c/em\u003e mode, execution will stop when and where this exception is thrown, so we can figure out what caused it. Execution stops in the `DateTimeFormatter` class. When we expand the `Exception` in the \u003cem\u003eDebug\u003c/em\u003e tool window, we see that the `detailMessage` is “Text “8.7” cannot be parsed as a `DateTime`”. That makes sense, as the number 8.7 does not represent a valid date.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eReset frame\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eTo find out where the incorrect value comes from, we can go back in the call stack. The call stack is shown in the left pane of the \u003cem\u003eDebug\u003c/em\u003e tool window. We see a round arrow in front of the last method that was called. When we hover over this arrow, we see the option to \u003cem\u003eReset Frame.\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Reset-Frame.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eReset Frame\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe can use \u003cem\u003eReset Frame\u003c/em\u003e to go back to the previous frame. Let’s do so until we get to the point in our code where we try to parse this value into a date. We will need to drop several frames until we get back to our own code. We see that we try to parse a `LocalDate` on line 38 of our `Main` class.\u003c/p\u003e\n\n\n\n\u003cp\u003eNote that there are limitations to using \u003cem\u003eReset Frame\u003c/em\u003e; it only resets local variables, not static and instance variables. It also won’t undo any side effects of your application, like console output. While this is not relevant in the current example, you should be aware when you use \u003cem\u003eReset Frame\u003c/em\u003e in the future.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe are trying to parse a part of a line from our CSV file. Each line has been split into parts. To see all parts of the current line, click the \u003cem\u003eView\u003c/em\u003e link next to the `parts` variable in the \u003cem\u003eDebug\u003c/em\u003e tool window. Here we see that “8.7’ is actually a test score, as you might have guessed. We can also see that the line does contain a date, but it is in the next part of the line.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Reset-Frame.gif\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eReset Frame\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAs we can see in our code, we are parsing the same part of the line (`parts[3]`) twice! This looks like a copy-paste error! We should be parsing the part of the line that contains the date, which is `parts[4]`. Let’s fix that by changing line 38 to `var testDate = LocalDate.parse(parts[4]);`\u003c/p\u003e\n\n\n\n\u003cp\u003eNote that we could have also gone directly to this line in the code from the console, by clicking the link “Main.java:38” in the console. However, it is useful to know how to set a breakpoint for an exception in case you ever need it.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Go-to-line-in-code-from-console.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eGo to line in code from console\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003ePrint to the console\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn fact, while we’re here, let’s make sure that we are parsing all the parts of the lines correctly. \u003c/p\u003e\n\n\n\n\u003cp\u003eAs we can see in the code just above (on line 25), our CSV file contains a header. Let’s print this header to the console to make sure we parse each part of the line to the correct field. We could add a `System.out.println()` to our code to print the header, but we don’t want to risk print statements ending up in production! Fortunately, there is a better way to do so.\u003c/p\u003e\n\n\n\n\u003ch2\u003eNon-suspending logging breakpoint\u003c/h2\u003e\n\n\n\n\u003cp\u003eLet’s create a non-suspending breakpoint, which means that execution will not stop on this breakpoint, and set it to log the line to the console when the breakpoint is hit.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo do so, create a breakpoint on line 27. Right-click the breakpoint and click \u003cem\u003eMore\u003c/em\u003e to open the \u003cem\u003eBreakpoints\u003c/em\u003e dialog. Unselect \u003cem\u003eSuspend\u003c/em\u003e to make this a non-suspending breakpoint. Next, select \u003cem\u003eLog\u003c/em\u003e and \u003cem\u003eEvaluate \u0026amp; log\u003c/em\u003e. Set the \u003cem\u003eEvaluate \u0026amp; log\u003c/em\u003e field to `”Header: ” + line` and click \u003cem\u003eDone\u003c/em\u003e. Notice that the breakpoint is yellow, to signify that this is a non-suspending breakpoint.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Non-suspending-breakpoint.gif\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eNon-suspending breakpoint\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, when we run the application in \u003cem\u003eDebug\u003c/em\u003e mode, we see that the header is printed to the console. But so are all the other lines from the file. To print only the header, the breakpoint should be on the next line. We could set a new breakpoint there, but then we’d have to redo the configuration…\u003c/p\u003e\n\n\n\n\u003ch2\u003eDrag and drop breakpoint\u003c/h2\u003e\n\n\n\n\u003cp\u003eInstead of creating a new breakpoint, we can drag and drop the existing breakpoint to the next line, preserving its configuration. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Drag-drop-breakpoint.gif\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eDrag and drop breakpoint\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, when we run the application in \u003cem\u003eDebug\u003c/em\u003e mode, only the header is printed to the console. Along with the output of our program, of course. It looks like our fields correspond correctly to the headers of the file.\u003c/p\u003e\n\n\n\n\u003ch2\u003eChecking the functionality of the application\u003c/h2\u003e\n\n\n\n\u003cp\u003eLet’s run our application again to see if everything is now as it should be. We see that the application runs without errors, but it looks like one of the students has a negative average test score.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Negative-average-score.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eNegative average score\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThat can’t be right! Let’s see what’s going on. We’ll set a breakpoint in the code where we add test scores to the student (line 45 in `Main.java`). When we run our application in \u003cem\u003eDebug\u003c/em\u003e mode, execution will stop every time this breakpoint is hit. We can click the \u003cem\u003eResume Program\u003c/em\u003e button (\u003cem\u003e⌥⌘R\u003c/em\u003e on macOS / \u003cem\u003eF9\u003c/em\u003e on Windows/Linux), either in the \u003cem\u003eDebug\u003c/em\u003e tool window, or inline in the editor, to get to the next test score.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Resume-program.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eResume program\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eEvery time we click the \u003cem\u003eResume Program\u003c/em\u003e button, we can see the values change both in the inline debugging information in the editor and in the \u003cem\u003eDebug\u003c/em\u003e tool window. Execution will stop every time it hits this breakpoint, so for every test score. Since there are a lot of test scores in the file, this is going to take a while… \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1920\" height=\"1080\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Resume-program.gif\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eResume program\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eConditional breakpoint\u003c/h2\u003e\n\n\n\n\u003cp\u003eAs we are only interested in the test scores for a particular student, we don’t need execution to stop for each test score. Instead of clicking the \u003cem\u003eResume Program\u003c/em\u003e button many times in a row to get to the scores we’re interested in, we can use a conditional breakpoint – which will only halt execution under certain conditions.\u003c/p\u003e\n\n\n\n\u003cp\u003eRight-click the breakpoint to open the \u003cem\u003eLine Breakpoint\u003c/em\u003e dialog and edit the configuration for the breakpoint. Since we don’t need execution to suspend until we process this particular student’s test scores, we can set the field \u003cem\u003eCondition\u003c/em\u003e to `studentName.equals(“Olivia Garcia”)` and click \u003cem\u003eDone\u003c/em\u003e. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Conditional-breakpoint.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eConditional breakpoint\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNotice that the breakpoint has a small question mark in it, to signify that it is a conditional breakpoint. Now, when we resume our program, execution will stop only once we get to the test scores for the student whose name we have set in the condition. Here we can see that the test score is negative.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Negative-test-score.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eNegative test score\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eAdd watch\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo see whether all test scores for this student are negative, let’s add a watch to the field `testScore`. Adding a watch makes it easier to explicitly watch the value of a field. Right-click on the variable `testScore` in the \u003cem\u003eThreads \u0026amp; Variables\u003c/em\u003e tab in the \u003cem\u003eDebug\u003c/em\u003e tool window and select \u003cem\u003eAdd to watches\u003c/em\u003e from the context menu. The watch will be shown in the right pane of the \u003cem\u003eDebug\u003c/em\u003e tool window. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Add-to-Watches.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eAdd to Watches\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf needed, select the \u003cem\u003eLayout Settings\u003c/em\u003e icon at the top right of the \u003cem\u003eDebug\u003c/em\u003e tool window and select \u003cem\u003eWatches\u003c/em\u003e in the list, to show watches in the right pane.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"3840\" height=\"2160\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Add-pane.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eAdd Watches to Debug tool window\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWhen we click \u003cem\u003eResume Program\u003c/em\u003e and loop over this student’s scores, we see that all her scores are negative. That would explain her negative average… \u003c/p\u003e\n\n\n\n\u003cp\u003eThis looks like a problem with the input data. Let’s open the CSV file to correct the scores and make sure Olivia’s scores are no longer negative. We can use \u003ca href=\"https://www.jetbrains.com/help/idea/multicursor.html\" target=\"_blank\" rel=\"noopener\"\u003emultiple carets\u003c/a\u003e to fix all scores at the same time.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this example, we can fix our input data ourselves. If you are dealing with user input that you can’t change, consider adding validation to the code, for example, that test scores cannot be negative.\u003c/p\u003e\n\n\n\n\u003ch2\u003eFinal check\u003c/h2\u003e\n\n\n\n\u003cp\u003eLet’s run our application one more time to see that everything is in order. We see that average scores are printed to the console for all students, and none of the scores are negative. This is how our application is expected to work. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2640\" height=\"1490\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Final-check.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eFinal check\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn this blog post, we’ve seen how to use the debugger to find and fix several types of bugs, from problems with the logic in the code, to reasons that exceptions are thrown, and finding problems with input data.\u003c/p\u003e\n\n\n\n\u003cp\u003eIs there anything else you’d like to learn about the \u003ca href=\"https://www.jetbrains.com/help/idea/debugging-code.html\" target=\"_blank\" rel=\"noopener\"\u003edebugger\u003c/a\u003e? Please tell us in the comments!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Debugging Java code in IntelliJ IDEA\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/V5iQ1FyRtBo?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to IntelliJ IDEA Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": null,
  "modifiedTime": null
}
