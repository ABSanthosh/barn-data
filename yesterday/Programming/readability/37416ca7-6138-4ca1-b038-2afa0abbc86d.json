{
  "id": "37416ca7-6138-4ca1-b038-2afa0abbc86d",
  "title": "What’s Next: The WebStorm 2025.2 Roadmap",
  "link": "https://blog.jetbrains.com/webstorm/2025/05/what-s-next-the-webstorm-2025-2-roadmap/",
  "description": "In April of this year, we released WebStorm 2025.1, our first major update for 2025. Thank you to everyone who is already using it and providing feedback. With April now behind us, we’d like to announce what we’ve got planned for the next release of WebStorm, which is scheduled for July, with our usual disclaimer: […]",
  "author": "David Watson",
  "published": "Thu, 22 May 2025 15:18:19 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "news",
    "webstorm-2025-2"
  ],
  "byline": "David Watson",
  "length": 5432,
  "excerpt": "See what we have planned for our second major release of 2025.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The JavaScript and TypeScript IDE NewsWhat’s Next: The WebStorm 2025.2 Roadmap In April of this year, we released WebStorm 2025.1, our first major update for 2025. Thank you to everyone who is already using it and providing feedback. With April now behind us, we’d like to announce what we’ve got planned for the next release of WebStorm, which is scheduled for July, with our usual disclaimer: these plans are subject to change.  Also, as usual, EAP builds are available in the run-up to this release. We encourage you to try these builds, provide feedback on the features, and report any issues you discover. At this stage, you can significantly impact the product’s development. Here are our most significant plans for WebStorm 2025.2: Bun In the 2025.2 release, we’re working on WebStorm’s Bun experience, with new features that make it easier to get up and running: Automatic detection: If your project includes a bun.lockb file, WebStorm will automatically detect it and suggest using Bun as your package manager. No manual setup needed. Context-aware actions: You’ll be able to run files using Bun directly from the context menu, just like you would with Node.js. These changes are part of our broader effort to support alternative runtimes and package managers out of the box – giving you more flexibility to choose the tools that work best for your stack (WEB-67011). Service-powered type engine Over the past few releases, we’ve been building out a new service-powered type engine – a behind-the-scenes revamp of how WebStorm understands and processes TypeScript types. While we’ve already shipped parts of it in earlier versions, WebStorm 2025.2 will continue this journey by focusing on improving performance. Improving performance in large frameworks: We’re aiming to make type inference and code completion faster and more reliable, especially in projects that use complex setups or extensive component hierarchies. Right now, we’re working on improving tag and attribute completion in React (TypeScript), as well as Angular templates – two areas where traditional language services can struggle to keep up. Fixing edge cases with third-party libraries: One notable fix we’re working on addresses missing props from libraries like motion when the new engine is enabled (WEB-72440). CSS CSS is evolving quickly, and we want to make sure WebStorm evolves with it – so you can take full advantage of the latest syntax and styling capabilities without sacrificing the confidence that comes from strong code assistance. In WebStorm 2025.2, we’re focusing on two main areas: Support for modern CSS features – We’re enhancing WebStorm’s CSS engine to recognize fresh property values, newly introduced at-rules, and updates from the CSS Color Module, including the ability to parse and validate newer color formats. Whether you’re using @layer, :has(), or working with color functions like color-mix(), you’ll benefit from more accurate validation, completion, and syntax highlighting (WEB-70107). Fix for CSS variables in language injections – A long-standing issue with CSS variables not resolving correctly inside language-injected code (like styled-components or other CSS-in-JS scenarios) is being addressed. This means cleaner, more accurate styling support across JavaScript, TypeScript, and HTML templates, without losing insight when working with embedded styles (WEB-38704). These improvements aim to make styling in WebStorm feel just as modern and powerful as the frameworks you’re building with – whether you’re using traditional CSS or the latest CSS-in-JS approaches. TypeScript The TypeScript team recently announced a major initiative: rebuilding the TypeScript compiler and language service in Go. This new “native” architecture is designed to unlock faster performance. While this native rewrite is still in its early stages, we’re already taking steps inside WebStorm to prepare for what’s coming. You won’t see visible changes from this just yet, but this groundwork is essential for staying aligned with the future of the TypeScript ecosystem. That’s all for now! For the full list of what we’re planning to work on, here’s a more complete breakdown of what’s coming. Also, join the 2025.2 Early Access Program to test out these features as they become available! The WebStorm team Subscribe to WebStorm Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/05/WS-2025-2-social.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/webstorm/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/WebStorm-2.svg\" alt=\"Webstorm logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe JavaScript and TypeScript IDE\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/webstorm/category/news/\"\u003eNews\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eWhat’s Next: The WebStorm 2025.2 Roadmap\u003c/h2\u003e                    \n                    \n\u003cp\u003eIn April of this year, we released WebStorm 2025.1, our first major update for 2025. Thank you to everyone who is already using it and providing feedback.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith April now behind us, we’d like to announce what we’ve got planned for the next release of WebStorm, which is scheduled for July, with our usual disclaimer: \u003cstrong\u003ethese plans are subject to change\u003c/strong\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eAlso, as usual, \u003ca href=\"https://www.jetbrains.com/webstorm/nextversion/\" data-type=\"link\" data-id=\"https://www.jetbrains.com/webstorm/nextversion/\" target=\"_blank\" rel=\"noopener\"\u003eEAP builds\u003c/a\u003e are available in the run-up to this release. We encourage you to try these builds, provide feedback on the features, and report any issues you discover. At this stage, you can significantly impact the product’s development.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere are our most significant plans for WebStorm 2025.2:\u003c/p\u003e\n\n\n\n\u003ch2\u003eBun\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn the 2025.2 release, we’re working on\u003cstrong\u003e \u003c/strong\u003eWebStorm’s Bun experience, with new features that make it easier to get up and running:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAutomatic detection\u003c/strong\u003e: If your project includes a \u003ccode\u003ebun.lockb\u003c/code\u003e file, WebStorm will automatically detect it and suggest using Bun as your package manager. No manual setup needed.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eContext-aware actions\u003c/strong\u003e: You’ll be able to run files using Bun directly from the context menu, just like you would with Node.js.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThese changes are part of our broader effort to support alternative runtimes and package managers out of the box – giving you more flexibility to choose the tools that work best for your stack (\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-67011\" target=\"_blank\" rel=\"noopener\"\u003eWEB-67011\u003c/a\u003e).\u003c/p\u003e\n\n\n\n\u003ch2\u003eService-powered type engine\u003c/h2\u003e\n\n\n\n\u003cp\u003eOver the past few releases, we’ve been building out a new service-powered type engine – a behind-the-scenes revamp of how WebStorm understands and processes TypeScript types. While we’ve already shipped parts of it in earlier versions, WebStorm 2025.2 will continue this journey by focusing on improving performance.\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eImproving performance in large frameworks\u003c/strong\u003e: We’re aiming to make type inference and code completion faster and more reliable, especially in projects that use complex setups or extensive component hierarchies. Right now, we’re working on improving tag and attribute completion in React (TypeScript), as well as Angular templates – two areas where traditional language services can struggle to keep up.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eFixing edge cases with third-party libraries\u003c/strong\u003e: One notable fix we’re working on addresses missing props from libraries like \u003ccode\u003emotion\u003c/code\u003e when the new engine is enabled (\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-72440/No-attribute-props-from-motion-library-with-enabled-service-type-engine\" target=\"_blank\" rel=\"noopener\"\u003eWEB-72440\u003c/a\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eCSS\u003c/h2\u003e\n\n\n\n\u003cp\u003eCSS is evolving quickly, and we want to make sure WebStorm evolves with it – so you can take full advantage of the latest syntax and styling capabilities without sacrificing the confidence that comes from strong code assistance.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn WebStorm 2025.2, we’re focusing on two main areas:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSupport for modern CSS features\u003c/strong\u003e – We’re enhancing WebStorm’s CSS engine to recognize fresh property values, newly introduced at-rules, and updates from the CSS Color Module, including the ability to parse and validate newer color formats. Whether you’re using \u003ccode\u003e@layer\u003c/code\u003e, \u003ccode\u003e:has()\u003c/code\u003e, or working with color functions like \u003ccode\u003ecolor-mix()\u003c/code\u003e, you’ll benefit from more accurate validation, completion, and syntax highlighting (\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-70107\" target=\"_blank\" rel=\"noopener\"\u003eWEB-70107\u003c/a\u003e).\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eFix for CSS variables in language injections\u003c/strong\u003e – A long-standing issue with CSS variables not resolving correctly inside language-injected code (like styled-components or other CSS-in-JS scenarios) is being addressed. This means cleaner, more accurate styling support across JavaScript, TypeScript, and HTML templates, without losing insight when working with embedded styles (\u003ca href=\"https://youtrack.jetbrains.com/issue/WEB-38704\" target=\"_blank\" rel=\"noopener\"\u003eWEB-38704\u003c/a\u003e).\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThese improvements aim to make styling in WebStorm feel just as modern and powerful as the frameworks you’re building with – whether you’re using traditional CSS or the latest CSS-in-JS approaches.\u003c/p\u003e\n\n\n\n\u003ch2\u003eTypeScript\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe TypeScript team recently announced a major initiative:\u003ca href=\"https://devblogs.microsoft.com/typescript/typescript-native-port/\" target=\"_blank\" rel=\"noopener\"\u003e rebuilding the TypeScript compiler and language service in Go\u003c/a\u003e. This new “native” architecture is designed to unlock faster performance.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhile this native rewrite is still in its early stages, we’re already taking steps inside WebStorm to prepare for what’s coming.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou won’t see visible changes from this just yet, but this groundwork is essential for staying aligned with the future of the TypeScript ecosystem.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat’s all for now! For the full list of what we’re planning to work on, here’s a more \u003ca href=\"https://youtrack.jetbrains.com/articles/WEB-A-233538605/2025.2-Roadmap-for-External-users\" data-type=\"link\" data-id=\"https://youtrack.jetbrains.com/articles/WEB-A-233538605/2025.2-Roadmap-for-External-users\" target=\"_blank\" rel=\"noopener\"\u003ecomplete breakdown\u003c/a\u003e of what’s coming. Also, join the \u003ca href=\"https://www.jetbrains.com/webstorm/nextversion/\" target=\"_blank\" rel=\"noopener\"\u003e2025.2 Early Access Program\u003c/a\u003e to test out these features as they become available!\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eThe WebStorm team\u003c/em\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to WebStorm Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
