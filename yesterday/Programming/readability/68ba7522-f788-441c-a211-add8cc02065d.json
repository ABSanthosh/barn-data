{
  "id": "68ba7522-f788-441c-a211-add8cc02065d",
  "title": "Node.js 23.6 Now Runs TypeScript Natively",
  "link": "https://www.infoq.com/news/2025/03/node-23-runs-typescript-natively/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "The Node team recently announced shipping TypeScript native support in Node 23.6. Node developers can now run TypeScript files without any extra configuration or flags. The feature, which was experimental in Node 22.6, is now stable. Native TypeScript support was among the most requested Node features by developers. By Bruno Couriol",
  "author": "Bruno Couriol",
  "published": "Sun, 09 Mar 2025 20:52:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "TypeScript",
    "Node.js",
    "Web Development",
    "Development",
    "news"
  ],
  "byline": "Bruno Couriol",
  "length": 2261,
  "excerpt": "The Node team recently announced shipping TypeScript native support in Node 23.6. Node developers can now run TypeScript files without any extra configuration or flags. The feature, which was experime",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250306134231/apple-touch-icon.png",
  "text": "The Node team recently announced shipping TypeScript native support in Node 23.6. Node developers can now run TypeScript files without any extra configuration or flags. The feature, which was experimental in Node 22.6, is now stable. Native TypeScript support was among the most requested Node features by developers. Node developers can now create an index.ts file, run node index.ts without additional flags, and Node will remove the TypeScript type annotations from the file and run the resulting JavaScript code. Caveats apply. Node.js ignores tsconfig.json files and therefore features that depend on settings within tsconfig.json, such as paths or converting newer JavaScript syntax to older standards (e.g., decorators, a stage 3 proposal), are intentionally unsupported. Similarly, there is no support for JSX files. Node also does not support TypeScript syntaxes that require JavaScript code generation. As Node will simply replace inline types with whitespaces (i.e., type stripping), developers can run TypeScript code without needing source maps. However, some TypeScript constructs, which have runtime semantics or require JavaScript code generation, will not be supported. The set of supported TypeScript syntax is dubbed erasable syntax. The latest release of TypeScript (i.e.,, TypeScript 5.8) adds a --erasableSyntaxOnly flag to support this workflow. The Node.js documentation lists the most important unsupported syntax: The most prominent features that require transformation are: Enum declarations namespace with runtime code legacy module with runtime code parameter properties import aliases Native TypeScript support brings Node closer to alternative TypeScript-native runtimes such as Deno or Bun. The Deno team detailed in a blog post the additional features still offered only by Deno, among which tsconfig support and distributing TypeScript without transpilation. Developers are encouraged to review the extensive discussion of the feature roadmap, which includes the rationale behind the choice of tradeoffs made by the team and the feedback from developers. About the Author Bruno Couriol",
  "image": "https://res.infoq.com/news/2025/03/node-23-runs-typescript-natively/en/headerimage/generatedHeaderImage-1741550115794.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eThe Node team \u003ca href=\"https://nodejs.org/en/blog/release/v23.6.0\"\u003erecently announced shipping TypeScript native support\u003c/a\u003e in Node 23.6. Node developers can now run TypeScript files without any extra configuration or flags. The feature, which was experimental in Node 22.6, is now stable. Native TypeScript support was among the most requested Node features by developers.\u003c/p\u003e\n\n\u003cp\u003eNode developers can now create an \u003ccode\u003eindex.ts\u003c/code\u003e file, run \u003ccode\u003enode index.ts\u003c/code\u003e without additional flags, and Node will remove the TypeScript type annotations from the file and run the resulting JavaScript code.\u003c/p\u003e\n\n\u003cp\u003eCaveats apply. Node.js ignores \u003ccode\u003etsconfig.json\u003c/code\u003e files and therefore features that depend on settings within \u003ccode\u003etsconfig.json\u003c/code\u003e, such as paths or converting newer JavaScript syntax to older standards (e.g., \u003ca href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/#decorators\"\u003edecorators, a stage 3 proposal\u003c/a\u003e), are intentionally unsupported. Similarly, there is no support for JSX files.\u003c/p\u003e\n\n\u003cp\u003eNode also does not support TypeScript syntaxes that require JavaScript code generation. As Node will simply replace inline types with whitespaces (i.e., type stripping), developers can run TypeScript code without needing source maps. However, some TypeScript constructs, which have runtime semantics or require JavaScript code generation, will not be supported. The set of supported TypeScript syntax is dubbed erasable syntax. The latest release of TypeScript (i.e.,, TypeScript 5.8) \u003ca href=\"https://www.infoq.com/news/2025/03/typescript-58-released/\"\u003eadds a \u003ccode\u003e--erasableSyntaxOnly\u003c/code\u003e flag\u003c/a\u003e to support this workflow.\u003c/p\u003e\n\n\u003cp\u003eThe Node.js documentation \u003ca href=\"https://nodejs.org/api/typescript.html#typescript-features\"\u003elists the most important unsupported syntax\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe most prominent features that require transformation are:\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n\u003cul\u003e\n\t\u003cli\u003e\u003ccode\u003eEnum\u003c/code\u003e declarations\u003c/li\u003e\n\t\u003cli\u003e\u003ccode\u003enamespace\u003c/code\u003e with runtime code\u003c/li\u003e\n\t\u003cli\u003elegacy \u003ccode\u003emodule\u003c/code\u003e with runtime code\u003c/li\u003e\n\t\u003cli\u003eparameter properties\u003c/li\u003e\n\t\u003cli\u003eimport aliases\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eNative TypeScript support brings Node closer to alternative TypeScript-native runtimes such as Deno or Bun. The Deno team \u003ca href=\"https://deno.com/blog/typescript-in-node-vs-deno\"\u003edetailed in a blog post the additional features\u003c/a\u003e still offered only by Deno, among which \u003ccode\u003etsconfig\u003c/code\u003e support and distributing TypeScript without transpilation.\u003c/p\u003e\n\n\u003cp\u003eDevelopers are encouraged to \u003ca href=\"https://github.com/nodejs/loaders/issues/217\"\u003ereview the extensive discussion of the feature roadmap\u003c/a\u003e, which includes the rationale behind the choice of tradeoffs made by the team and the feedback from developers.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Bruno-Couriol\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBruno Couriol\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-03-09T00:00:00Z",
  "modifiedTime": null
}
