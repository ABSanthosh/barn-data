{
  "id": "a41aa445-02f5-46a2-94c5-d618cdb3e747",
  "title": "GitHub for Beginners: Essential features of GitHub Copilot",
  "link": "https://github.blog/ai-and-ml/github-copilot/github-for-beginners-essential-features-of-github-copilot/",
  "description": "Get the most out of Copilot with code completion, inline chat, slash commands, Copilot code review, and more. The post GitHub for Beginners: Essential features of GitHub Copilot appeared first on The GitHub Blog.",
  "author": "Kedasha Kerr",
  "published": "Mon, 17 Mar 2025 13:00:12 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "GitHub for beginners"
  ],
  "byline": "Kedasha Kerr",
  "length": 13388,
  "excerpt": "Get the most out of Copilot with code completion, inline chat, slash commands, Copilot code review, and more.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Welcome back to our second GitHub for Beginners series, where we are diving into the world of GitHub Copilot. In our previous episode, we introduced you to GitHub Copilot and gave you some guidance on getting started. Hopefully you’ve had a chance to give it a try! Today we’re going to be looking at some of the essential features of Copilot, and provide you with tips on how to make the most out of your AI coding assistant. What is GitHub Copilot? First, let’s go over a quick refresher. GitHub Copilot is an AI pair programmer that helps you write code. It is a generative AI, which means that it is capable of creating new content based on what it has learned. This also means that if you are following along through any demos, Copilot might offer different solutions in response to prompts. This is expected. To use Copilot, you must have a GitHub account and a Copilot license. You can get started with a free license by visiting this link. Once you have access, you need to install the extension in your editor, authenticate it, and you’ll be good to go. For more introductory details, check out our first blog in the series. Now let’s take a look at some of the most essential features. Code completion Let’s say you wanted to create a rock, paper, scissors game in Python. First, create a new file called rock_paper_scissor.py. At the top of the file, add the following comment: Create a Rock Paper Scissors game where the player inputs their choice and plays against a computer that randomly selects its move, with the game showing who won each round. Add a score counter that tracks player and computer wins, and allow the game to continue until the player types ‘quit’. Press the Enter key a couple of times. You will notice some gray, italicized text appearing after your cursor. This is called ghost text, and is the suggestion provided from GitHub Copilot. You can press Tab to accept the suggestion. Continue accepting lines until the suggestion defines a function (that is, starts with the def keyword). https://github.blog/wp-content/uploads/2025/03/01-ghost-text.mp4#t=0.001 When you press the Enter key after the function definition, you’ll see ghost text defining the main function. Hover over the ghost text with your cursor to see different menu options available to you. You can accept a single word, tab through a few completions, or accept the current suggestion. You can also click on the three dots and select “Open Completions Panel.” https://github.blog/wp-content/uploads/2025/03/02-completions-panel.mp4#t=0.001 The Completions panel shows a list of the many ways this code could be implemented. Scroll through the options and choose the suggestion that you want to use. Once you’ve decided on a suggestion, click the associated “Accept suggestion” button. This populates the code into your file. Finally, add a line to invoke the function. Remember that because Copilot is a generative AI, it will not always provide the same suggestions, even with the same prompt! After adding the code, open your terminal and enter python rock_paper_scissor.py to play the game. Try it out as long as you like and enter quit when you’ve decided you’re done. Congratulations! You’ve just made a game with GitHub Copilot! Inline chat Now that we have the base for our game, we want to improve it, and we’re going to use the inline chat feature of GitHub Copilot to accomplish this. In our demo, we had the following line: player_choice = input('Rock, Paper, Scissors or Quit: ').lower() However, we want players to have a little more flexibility. By highlighting this line of code and pressing either Ctrl + I or Command + I, we open up Copilot Inline Chat where we can enter a prompt. Let’s say we give Copilot this prompt: allow the user to enter r for rock, p for paper, and s for scissors Before sending this prompt to Copilot, notice the dropdown menu at the end of the prompt window. This dropdown enables you to choose which model you’d like to use to respond to the prompt. Copilot Chat uses different models, and new ones are being continuously added. After selecting your model, press enter, and watch as Copilot updates the code. Once the code is updated, you have the option to accept or discard the suggested changes. If you accept the changes, try running the game again in your terminal, and observe that now you can use single letters to make your choice. The inline chat feature is really good at helping you apply quick fixes to your code. If you want to work at a deeper level, you can use the full Copilot Chat experience for that. Copilot Chat GitHub Copilot Chat can help you with code explanations, building out full minimum viable products (MVPs), writing tests, fixing errors in your terminals, and much more. To showcase the capabilities of Copilot Chat, we’re going to use it to create a graphical user interface (GUI) for our rock, paper, scissors game. First, click the chat icon in the left-hand bar of VS Code to open up the chat window. Enter the following prompt into the box provided: Create a simple GUI using a library like Tkinter for the game Note that as long as you keep your rock_paper_scissor.py file open, it will be listed at the bottom of the chat panel as the current file. This is known as the context, and it lets Copilot Chat know which game you are talking about. You could disable this by clicking the Close File icon shown after “Current file”. However, in this case, you want to make sure that Copilot Chat has the context of the correct file. The best practice is to let Copilot have the context of your currently-open file to generate relevant code. Just like with the inline chat prompt window, you can choose the model you want to use to respond to your prompt. Let’s use the Claude 3.5 Sonnet model and send the request. Copilot will respond in the chat window, and you will notice several things once it is complete. First, it identifies that it’s using the one file as a reference. Then it provides a plan of action and the code block. Finally, it provides the code citations that you can investigate if you choose to with the “View matches” link. https://github.blog/wp-content/uploads/2025/03/06_response.mp4#t=0.001 In the Chat panel, you have a few options available. Going from left to right, here are what the different icons do at the bottom of the suggestion: Have the code read aloud to you Retry the same prompt to get a different response Upvote the provided code Downvote the provided code Edit the suggestion by using Copilot https://github.blog/wp-content/uploads/2025/03/07-buttons.mp4#t=0.001 Scroll up and examine the provided code block. When you hover over it with your cursor, three icons appear in the top-right corner. Going from left to right, this is what these buttons do: Apply in Editor: Apply changes quickly in your code file with a single click—no need for copying and pasting! Insert At Cursor: Insert the code block into your current cursor position in the file. Copy: Copy the generated code to your clipboard, so you can paste it in at your leisure. More: Open up a dropdown menu with options for “Insert into Terminal” and “Insert into New File”. This will paste the code into the indicated locations. For now, click the Apply in Editor button to update the code. This updates the entire file. At the top of the file, you see options to accept the changes, discard them, and show or hide them. Click Accept Changes to have the editor finalize the changes to your file. Look at the changes and observe how your text-based game has now been changed to run with a GUI. Try running the code to see the changes in action! Slash commands Slash commands are shortcuts to common prompts that we’ve found to be particularly helpful in day-to-day usage. You can use them in a Copilot Chat window to get explanations of code, fix code, create a new notebook, and more. In your Copilot Chat window, type forward slash (/). As soon as you do, Copilot provides a list of possible commands that you can use. For example, you could use the /explain command to have Copilot provide a full explanation of the code in your current file. You could also use /help to get a list of available slash commands, as well as explanations of what they do. So if you’re ever stuck, just remember /help. If you’d like to see some of the more common slash commands without opening your editor, refer to our Copilot Chat cheat sheet. Adding context As we’ve already seen, context helps Copilot Chat provide answers that are targeted toward your specific goals. But what if you want to provide a context beyond your currently open file? You can use variables in the chat interface to provide additional context to help Copilot understand your requests. For example, you could use the #file variable to specify a specific file or files that Copilot should use when it tries to resolve your prompt. Or you could use #codebase to search through your codebase. https://github.blog/wp-content/uploads/2025/03/10_file_codebase.mp4#t=0.001 To see a list of chat variables, check out or Copilot Chat cheat sheet documentation. Chat participants Think of chat participants as experts with certain specialties. You can invoke a chat participant by typing @ in the chat window, followed by the name of the participant you want to use. For example, @workspace invokes a participant who has knowledge about your entire workspace. You could use this to determine where a function is defined in your project, or if you wanted to generate a detailed README of your project. Another frequently used participant is @terminal, who has context of all of the information in the terminal window integrated into VS Code. Perhaps the most common participant is @github who has knowledge of your repository, pull requests, issues, and can search the web. Our Copilot Chat cheat sheet also lists some of the most common chat participants that folks use when interacting with Copilot Chat. Copilot Edits Copilot Edits is one of the most recent and exciting features added to GitHub Copilot. With Copilot Edits, you can start a code session quickly to iterate on code changes using natural language. It allows you to edit multiple files at the same time, and combines the conversation flow of Copilot Chat with the fast feedback of inline chat together in one experience. Let’s use Copilot Edits to add a detailed scoreboard to the game we already have. To get started, click the GitHub Copilot button in VS Code to pull up the Copilot menu. Select “Open Copilot Edits”. In the box provided, enter the following prompt. Add a detailed scoreboard to track and display the number of ties, player wins, and computer wins for each round. Choose the model you want to use (we are continuing to use Claude 3.5 Sonnet), and then send the prompt. Once you do, you’ll see responses being streamed in. For now, just click “Accept” and run the game. See the GUI has been updated to keep track of stats for the game as you play. This example only has a single file in the project. Copilot Edits becomes even more powerful when you use it to edit multiple files at the same time. We’ll demonstrate that in another episode. Commit messages Now that we’ve finished our game, it’s time to send it up to GitHub, so that the team can review it. In VS Code, click the source control button. Stage your changes and then click the button on the right-hand side of the commit message box that looks like a set of sparkles. This button uses GitHub Copilot to generate a commit message. https://github.blog/wp-content/uploads/2025/03/13_commits.mp4#t=0.001 Copilot code review You can take this a step further and have Copilot review your code before sending it to the rest of the team. To do this, highlight a section of code in your editor. A sparkle icon will appear at the top-left of the highlighted section. Click this icon and select the “Review using Copilot” option. Copilot provides you with an initial review of your code before you push it and ask for a final review from your team. You can also get this Copilot review through github.com, if that’s your preference. JetBrains IDE features Not all IDEs are identical when it comes to GitHub Copilot, and different IDEs have different functionalities available. If you are using JetBrains IDEs, you have access to Copilot Code Complete and Copilot Chat. Your next steps We just went over some of the most essential features of GitHub Copilot that will help you make the most of our AI pair programmer. As you can see, it’s a very powerful coding assistant that does more than just code completion. Don’t forget that you can use GitHub Copilot for free. Make sure to check out our best practices for using GitHub Copilot. If you have any questions, pop them in the GitHub Community thread and we’ll be sure to respond. Join us for the next part of the series where we’ll walk through prompt engineering with GitHub Copilot. Happy coding! Want to try out some of the features for yourself?Give GitHub Copilot a try! Written by Kedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she's learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev.",
  "image": "https://github.blog/wp-content/uploads/2025/02/418127171-3bd956ac-6856-4c72-8601-010f10058417.png?fit=2400%2C1260",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eWelcome back to our second GitHub for Beginners series, where we are diving into the world of GitHub Copilot. In our \u003ca href=\"https://github.blog/ai-and-ml/github-copilot/github-for-beginners-how-to-get-started-with-github-copilot/\"\u003eprevious episode\u003c/a\u003e, we introduced you to GitHub Copilot and gave you some guidance on getting started. Hopefully you’ve had a chance to give it a try! Today we’re going to be looking at some of the essential features of Copilot, and provide you with tips on how to make the most out of your AI coding assistant.\u003c/p\u003e\n\u003cp\u003e\n\t\t\t\u003ciframe loading=\"lazy\" src=\"https://www.youtube.com/embed/b5xcWdzAB5c?feature=oembed\" title=\"YouTube video player\" allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\"\u003e\u003c/iframe\u003e\n\t\t\u003c/p\u003e\n\n\u003ch2 id=\"what-is-github-copilot\" id=\"what-is-github-copilot\"\u003eWhat is GitHub Copilot?\u003ca href=\"#what-is-github-copilot\" aria-label=\"What is GitHub Copilot?\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eFirst, let’s go over a quick refresher. GitHub Copilot is an AI pair programmer that helps you write code. It is a \u003ca href=\"https://github.blog/ai-and-ml/generative-ai/what-developers-need-to-know-about-generative-ai/\"\u003egenerative AI\u003c/a\u003e, which means that it is capable of creating new content based on what it has learned. This also means that if you are following along through any demos, Copilot might offer different solutions in response to prompts. This is expected.\u003c/p\u003e\n\u003cp\u003eTo use Copilot, you must have a GitHub account and a Copilot license. You can get started with a \u003ca href=\"http://gh.io/gfb-copilot\"\u003efree license by visiting this link\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOnce you have access, you need to install the extension in your editor, authenticate it, and you’ll be good to go. For more introductory details, check out our \u003ca href=\"https://github.blog/ai-and-ml/github-copilot/github-for-beginners-how-to-get-started-with-github-copilot/\"\u003efirst blog in the series\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eNow let’s take a look at some of the most essential features.\u003c/p\u003e\n\u003ch2 id=\"code-completion\" id=\"code-completion\"\u003eCode completion\u003ca href=\"#code-completion\" aria-label=\"Code completion\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eLet’s say you wanted to create a rock, paper, scissors game in Python. First, create a new file called \u003ccode\u003erock_paper_scissor.py\u003c/code\u003e. At the top of the file, add the following comment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate a Rock Paper Scissors game where the player inputs their choice and plays against a computer that randomly selects its move, with the game showing who won each round. Add a score counter that tracks player and computer wins, and allow the game to continue until the player types ‘quit’.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePress the Enter key a couple of times. You will notice some gray, \u003cem\u003eitalicized\u003c/em\u003e text appearing after your cursor. This is called \u003cstrong\u003eghost text\u003c/strong\u003e, and is the suggestion provided from GitHub Copilot. You can press Tab to accept the suggestion. Continue accepting lines until the suggestion defines a function (that is, starts with the \u003ccode\u003edef\u003c/code\u003e keyword).\u003c/p\u003e\n\u003cp\u003e\n\u003cvideo id=\"video-83245-1\" width=\"1928\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/03/01-ghost-text.mp4#t=0.001?_=1\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/03/01-ghost-text.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/03/01-ghost-text.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eWhen you press the \u003ckbd\u003eEnter\u003c/kbd\u003e key after the function definition, you’ll see ghost text defining the main function. Hover over the ghost text with your cursor to see different menu options available to you. You can accept a single word, tab through a few completions, or accept the current suggestion. You can also click on the three dots and select “Open Completions Panel.”\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-83245-2\" width=\"1928\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/03/02-completions-panel.mp4#t=0.001?_=2\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/03/02-completions-panel.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/03/02-completions-panel.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eThe Completions panel shows a list of the many ways this code could be implemented. Scroll through the options and choose the suggestion that you want to use. Once you’ve decided on a suggestion, click the associated “Accept suggestion” button. This populates the code into your file.\u003c/p\u003e\n\u003cp\u003eFinally, add a line to invoke the function. Remember that because Copilot is a generative AI, it will not always provide the same suggestions, even with the same prompt!\u003c/p\u003e\n\u003cp\u003eAfter adding the code, open your terminal and enter \u003ccode\u003epython rock_paper_scissor.py\u003c/code\u003e to play the game. Try it out as long as you like and enter \u003ccode\u003equit\u003c/code\u003e when you’ve decided you’re done.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/03-game-terminal.png?w=614\u0026amp;resize=614%2C281\" alt=\"Screenshot of the output of rock paper scissors.py in the terminal\" width=\"614\" height=\"281\" srcset=\"https://github.blog/wp-content/uploads/2025/03/03-game-terminal.png?w=614 614w, https://github.blog/wp-content/uploads/2025/03/03-game-terminal.png?w=300 300w\" sizes=\"auto, (max-width: 614px) 100vw, 614px\"/\u003e\u003c/p\u003e\n\u003cp\u003eCongratulations! You’ve just made a game with GitHub Copilot!\u003c/p\u003e\n\u003ch2 id=\"inline-chat\" id=\"inline-chat\"\u003eInline chat\u003ca href=\"#inline-chat\" aria-label=\"Inline chat\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNow that we have the base for our game, we want to improve it, and we’re going to use the inline chat feature of GitHub Copilot to accomplish this. In our demo, we had the following line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eplayer_choice = input(\u0026#39;Rock, Paper, Scissors or Quit: \u0026#39;).lower()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHowever, we want players to have a little more flexibility. By highlighting this line of code and pressing either \u003ckbd\u003eCtrl + I\u003c/kbd\u003e or \u003ckbd\u003eCommand + I\u003c/kbd\u003e, we open up Copilot Inline Chat where we can enter a prompt. Let’s say we give Copilot this prompt:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eallow the user to enter r for rock, p for paper, and s for scissors\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore sending this prompt to Copilot, notice the dropdown menu at the end of the prompt window. This dropdown enables you to choose which model you’d like to use to respond to the prompt. Copilot Chat uses different models, and new ones are being continuously added.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/04-multi-model.png?w=1024\u0026amp;resize=1024%2C573\" alt=\"multimodal in inline chat\" width=\"1024\" height=\"573\" srcset=\"https://github.blog/wp-content/uploads/2025/03/04-multi-model.png?w=1432 1432w, https://github.blog/wp-content/uploads/2025/03/04-multi-model.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/04-multi-model.png?w=768 768w, https://github.blog/wp-content/uploads/2025/03/04-multi-model.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eAfter selecting your model, press enter, and watch as Copilot updates the code. Once the code is updated, you have the option to accept or discard the suggested changes. If you accept the changes, try running the game again in your terminal, and observe that now you can use single letters to make your choice.\u003c/p\u003e\n\u003cp\u003eThe inline chat feature is really good at helping you apply quick fixes to your code. If you want to work at a deeper level, you can use the full Copilot Chat experience for that.\u003c/p\u003e\n\u003ch2 id=\"copilot-chat\" id=\"copilot-chat\"\u003eCopilot Chat\u003ca href=\"#copilot-chat\" aria-label=\"Copilot Chat\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGitHub Copilot Chat can help you with code explanations, building out full minimum viable products (MVPs), writing tests, fixing errors in your terminals, and much more. To showcase the capabilities of Copilot Chat, we’re going to use it to create a graphical user interface (GUI) for our rock, paper, scissors game.\u003c/p\u003e\n\u003cp\u003eFirst, click the chat icon in the left-hand bar of VS Code to open up the chat window. Enter the following prompt into the box provided:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCreate a simple GUI using a library like Tkinter for the game\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that as long as you keep your \u003ccode\u003erock_paper_scissor.py\u003c/code\u003e file open, it will be listed at the bottom of the chat panel as the current file. This is known as the context, and it lets Copilot Chat know which game you are talking about. You could disable this by clicking the Close File icon shown after “Current file”. However, in this case, you want to make sure that Copilot Chat has the context of the correct file. The best practice is to let Copilot have the context of your currently-open file to generate relevant code.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/05-curr-file.png?w=420\u0026amp;resize=420%2C305\" alt=\"Screenshot of the chat window with an arrow pointing to the current file\" width=\"420\" height=\"305\" srcset=\"https://github.blog/wp-content/uploads/2025/03/05-curr-file.png?w=420 420w, https://github.blog/wp-content/uploads/2025/03/05-curr-file.png?w=300 300w\" sizes=\"auto, (max-width: 420px) 100vw, 420px\"/\u003e\u003c/p\u003e\n\u003cp\u003eJust like with the inline chat prompt window, you can choose the model you want to use to respond to your prompt. Let’s use the Claude 3.5 Sonnet model and send the request.\u003c/p\u003e\n\u003cp\u003eCopilot will respond in the chat window, and you will notice several things once it is complete. First, it identifies that it’s using the one file as a reference. Then it provides a plan of action and the code block. Finally, it provides the code citations that you can investigate if you choose to with the “View matches” link.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-83245-3\" width=\"1928\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/03/06_response.mp4#t=0.001?_=3\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/03/06_response.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/03/06_response.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eIn the Chat panel, you have a few options available. Going from left to right, here are what the different icons do at the bottom of the suggestion:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHave the code read aloud to you\u003c/li\u003e\n\u003cli\u003eRetry the same prompt to get a different response\u003c/li\u003e\n\u003cli\u003eUpvote the provided code\u003c/li\u003e\n\u003cli\u003eDownvote the provided code\u003c/li\u003e\n\u003cli\u003eEdit the suggestion by using Copilot\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cvideo id=\"video-83245-4\" width=\"1928\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/03/07-buttons.mp4#t=0.001?_=4\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/03/07-buttons.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/03/07-buttons.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eScroll up and examine the provided code block. When you hover over it with your cursor, three icons appear in the top-right corner. Going from left to right, this is what these buttons do:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eApply in Editor\u003c/strong\u003e: Apply changes quickly in your code file with a single click—no need for copying and pasting!\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInsert At Cursor\u003c/strong\u003e: Insert the code block into your current cursor position in the file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCopy\u003c/strong\u003e: Copy the generated code to your clipboard, so you can paste it in at your leisure.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMore\u003c/strong\u003e: Open up a dropdown menu with options for “Insert into Terminal” and “Insert into New File”. This will paste the code into the indicated locations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/08-editor-buttons.png?w=1024\u0026amp;resize=1024%2C573\" alt=\"Screenshot with the four buttons described above circled\" width=\"1024\" height=\"573\" srcset=\"https://github.blog/wp-content/uploads/2025/03/08-editor-buttons.png?w=1432 1432w, https://github.blog/wp-content/uploads/2025/03/08-editor-buttons.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/08-editor-buttons.png?w=768 768w, https://github.blog/wp-content/uploads/2025/03/08-editor-buttons.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eFor now, click the Apply in Editor button to update the code. This updates the entire file. At the top of the file, you see options to accept the changes, discard them, and show or hide them. Click Accept Changes to have the editor finalize the changes to your file.\u003c/p\u003e\n\u003cp\u003eLook at the changes and observe how your text-based game has now been changed to run with a GUI. Try running the code to see the changes in action!\u003c/p\u003e\n\u003ch2 id=\"slash-commands\" id=\"slash-commands\"\u003eSlash commands\u003ca href=\"#slash-commands\" aria-label=\"Slash commands\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSlash commands are shortcuts to common prompts that we’ve found to be particularly helpful in day-to-day usage. You can use them in a Copilot Chat window to get explanations of code, fix code, create a new notebook, and more.\u003c/p\u003e\n\u003cp\u003eIn your Copilot Chat window, type forward slash (/). As soon as you do, Copilot provides a list of possible commands that you can use. For example, you could use the \u003ccode\u003e/explain\u003c/code\u003e command to have Copilot provide a full explanation of the code in your current file. You could also use \u003ccode\u003e/help\u003c/code\u003e to get a list of available slash commands, as well as explanations of what they do. So if you’re ever stuck, just remember \u003ccode\u003e/help\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/09-slash-commands.png?w=887\u0026amp;resize=887%2C388\" alt=\"Screenshot showing the list of commands that comes up when a user types /help.\" width=\"887\" height=\"388\" srcset=\"https://github.blog/wp-content/uploads/2025/03/09-slash-commands.png?w=887 887w, https://github.blog/wp-content/uploads/2025/03/09-slash-commands.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/09-slash-commands.png?w=768 768w\" sizes=\"auto, (max-width: 887px) 100vw, 887px\"/\u003e\u003c/p\u003e\n\u003cp\u003eIf you’d like to see some of the more common slash commands without opening your editor, refer to our \u003ca href=\"https://docs.github.com/en/copilot/using-github-copilot/copilot-chat/github-copilot-chat-cheat-sheet#slash-commands-1\"\u003eCopilot Chat cheat sheet\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"adding-context\" id=\"adding-context\"\u003eAdding context\u003ca href=\"#adding-context\" aria-label=\"Adding context\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAs we’ve already seen, context helps Copilot Chat provide answers that are targeted toward your specific goals. But what if you want to provide a context beyond your currently open file?\u003c/p\u003e\n\u003cp\u003eYou can use variables in the chat interface to provide additional context to help Copilot understand your requests. For example, you could use the \u003ccode\u003e#file\u003c/code\u003e variable to specify a specific file or files that Copilot should use when it tries to resolve your prompt. Or you could use \u003ccode\u003e#codebase\u003c/code\u003e to search through your codebase.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-83245-5\" width=\"1928\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/03/10_file_codebase.mp4#t=0.001?_=5\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/03/10_file_codebase.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/03/10_file_codebase.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eTo see a list of chat variables, check out or \u003ca href=\"https://docs.github.com/en/copilot/using-github-copilot/copilot-chat/github-copilot-chat-cheat-sheet?tool=vscode#chat-variables\"\u003eCopilot Chat cheat sheet\u003c/a\u003e documentation.\u003c/p\u003e\n\u003ch2 id=\"chat-participants\" id=\"chat-participants\"\u003eChat participants\u003ca href=\"#chat-participants\" aria-label=\"Chat participants\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThink of chat participants as experts with certain specialties. You can invoke a chat participant by typing \u003ckbd\u003e@\u003c/kbd\u003e in the chat window, followed by the name of the participant you want to use. For example, \u003ccode\u003e@workspace\u003c/code\u003e invokes a participant who has knowledge about your entire workspace. You could use this to determine where a function is defined in your project, or if you wanted to generate a detailed README of your project.\u003c/p\u003e\n\u003cp\u003eAnother frequently used participant is \u003ccode\u003e@terminal\u003c/code\u003e, who has context of all of the information in the terminal window integrated into VS Code. Perhaps the most common participant is \u003ccode\u003e@github\u003c/code\u003e who has knowledge of your repository, pull requests, issues, and can search the web.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/11_participants.png?w=1024\u0026amp;resize=1024%2C452\" alt=\"Screenshot showing some of the available chat participants\" width=\"1024\" height=\"452\" srcset=\"https://github.blog/wp-content/uploads/2025/03/11_participants.png?w=1195 1195w, https://github.blog/wp-content/uploads/2025/03/11_participants.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/11_participants.png?w=768 768w, https://github.blog/wp-content/uploads/2025/03/11_participants.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eOur \u003ca href=\"https://docs.github.com/en/copilot/using-github-copilot/copilot-chat/github-copilot-chat-cheat-sheet?tool=vscode#chat-participants\"\u003eCopilot Chat cheat sheet\u003c/a\u003e also lists some of the most common chat participants that folks use when interacting with Copilot Chat.\u003c/p\u003e\n\u003ch2 id=\"copilot-edits\" id=\"copilot-edits\"\u003eCopilot Edits\u003ca href=\"#copilot-edits\" aria-label=\"Copilot Edits\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCopilot Edits is one of the most recent and exciting features added to GitHub Copilot. With Copilot Edits, you can start a code session quickly to iterate on code changes using natural language. It allows you to edit multiple files at the same time, and combines the conversation flow of Copilot Chat with the fast feedback of inline chat together in one experience.\u003c/p\u003e\n\u003cp\u003eLet’s use Copilot Edits to add a detailed scoreboard to the game we already have. To get started, click the GitHub Copilot button in VS Code to pull up the Copilot menu. Select “Open Copilot Edits”. In the box provided, enter the following prompt.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eAdd a detailed scoreboard to track and display the number of ties, player wins, and computer wins for each round.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/12-copilot-edits.png?w=877\u0026amp;resize=877%2C394\" alt=\"Screenshot with an arrow pointing the Copilot icon and displaying the dropdown menu that appears when you click it.\" width=\"877\" height=\"394\" srcset=\"https://github.blog/wp-content/uploads/2025/03/12-copilot-edits.png?w=877 877w, https://github.blog/wp-content/uploads/2025/03/12-copilot-edits.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/12-copilot-edits.png?w=768 768w\" sizes=\"auto, (max-width: 877px) 100vw, 877px\"/\u003e\u003c/p\u003e\n\u003cp\u003eChoose the model you want to use (we are continuing to use Claude 3.5 Sonnet), and then send the prompt. Once you do, you’ll see responses being streamed in. For now, just click “Accept” and run the game. See the GUI has been updated to keep track of stats for the game as you play.\u003c/p\u003e\n\n\u003cp\u003eThis example only has a single file in the project. Copilot Edits becomes even more powerful when you use it to edit multiple files at the same time. We’ll demonstrate that in another episode.\u003c/p\u003e\n\u003ch2 id=\"commit-messages\" id=\"commit-messages\"\u003eCommit messages\u003ca href=\"#commit-messages\" aria-label=\"Commit messages\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNow that we’ve finished our game, it’s time to send it up to GitHub, so that the team can review it. In VS Code, click the source control button. Stage your changes and then click the button on the right-hand side of the commit message box that looks like a set of sparkles. This button uses GitHub Copilot to generate a commit message.\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-83245-6\" width=\"1928\" height=\"1080\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/03/13_commits.mp4#t=0.001?_=6\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/03/13_commits.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/03/13_commits.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003ch2 id=\"copilot-code-review\" id=\"copilot-code-review\"\u003eCopilot code review\u003ca href=\"#copilot-code-review\" aria-label=\"Copilot code review\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eYou can take this a step further and have Copilot review your code before sending it to the rest of the team. To do this, highlight a section of code in your editor. A sparkle icon will appear at the top-left of the highlighted section. Click this icon and select the “Review using Copilot” option.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/03/14-copilot-review.png?w=844\u0026amp;resize=844%2C313\" alt=\"Select the \u0026#39;Review using Copilot\u0026#39; option. \" width=\"844\" height=\"313\" srcset=\"https://github.blog/wp-content/uploads/2025/03/14-copilot-review.png?w=844 844w, https://github.blog/wp-content/uploads/2025/03/14-copilot-review.png?w=300 300w, https://github.blog/wp-content/uploads/2025/03/14-copilot-review.png?w=768 768w\" sizes=\"auto, (max-width: 844px) 100vw, 844px\"/\u003e\u003c/p\u003e\n\u003cp\u003eCopilot provides you with an initial review of your code before you push it and ask for a final review from your team. You can also get this Copilot review through github.com, if that’s your preference.\u003c/p\u003e\n\u003ch2 id=\"jetbrains-ide-features\" id=\"jetbrains-ide-features\"\u003eJetBrains IDE features\u003ca href=\"#jetbrains-ide-features\" aria-label=\"JetBrains IDE features\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eNot all IDEs are identical when it comes to GitHub Copilot, and different IDEs have different functionalities available. If you are using JetBrains IDEs, you have access to Copilot Code Complete and Copilot Chat.\u003c/p\u003e\n\u003ch2 id=\"your-next-steps\" id=\"your-next-steps\"\u003eYour next steps\u003ca href=\"#your-next-steps\" aria-label=\"Your next steps\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWe just went over some of the most essential features of GitHub Copilot that will help you make the most of our AI pair programmer. As you can see, it’s a very powerful coding assistant that does more than just code completion.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDon’t forget that you can \u003ca href=\"https://gh.io/gfb-copilot\"\u003euse GitHub Copilot for free\u003c/a\u003e. \u003c/li\u003e\n\u003cli\u003eMake sure to check out our \u003ca href=\"https://docs.github.com/en/copilot/using-github-copilot/best-practices-for-using-github-copilot\"\u003ebest practices for using GitHub Copilot\u003c/a\u003e. \u003c/li\u003e\n\u003cli\u003eIf you have any questions, pop them in the \u003ca href=\"https://github.com/orgs/community/discussions/152688\"\u003eGitHub Community thread\u003c/a\u003e and we’ll be sure to respond.\u003c/li\u003e\n\u003cli\u003eJoin us for the next part of the series where we’ll walk through prompt engineering with GitHub Copilot.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHappy coding!\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eWant to try out some of the features for yourself?\u003c/strong\u003e\u003cbr/\u003eGive \u003ca href=\"https://github.com/features/copilot\"\u003eGitHub Copilot\u003c/a\u003e a try!\u003c/p\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" alt=\"Kedasha Kerr\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eKedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she\u0026#39;s learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-03-17T13:00:12Z",
  "modifiedTime": null
}
