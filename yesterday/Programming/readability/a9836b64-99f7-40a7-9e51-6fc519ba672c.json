{
  "id": "a9836b64-99f7-40a7-9e51-6fc519ba672c",
  "title": "Unveiling Game Development in Rust with Bevy: Key Insights from Herbert Wolverson’s Livestream",
  "link": "https://blog.jetbrains.com/rust/2024/11/14/unveiling-game-development-in-rust-with-bevy-key-insights-from-herbert-wolverson-s-livestream/",
  "description": "Disclaimer: This article was created using JetBrains Grazie, an AI-based writing and communication companion. With its help, the core topics of this rich and nuanced livestream were conveniently distilled into a compact blog post format. Game development in Rust is gaining momentum, and Bevy, a modern game engine focusing on Rust, is at the forefront […]",
  "author": "Ilia Afanasiev",
  "published": "Thu, 14 Nov 2024 14:12:42 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "intellij-rust",
    "livestream",
    "bevy",
    "game-development-in-rust",
    "rustrover"
  ],
  "byline": "Ilia Afanasiev",
  "length": 4999,
  "excerpt": "Game development in Rust is gaining momentum, and Bevy, a modern game engine focusing on Rust, is at the forefront of this revolution.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Focus on what matters IntelliJ Rust LiveStreamUnveiling Game Development in Rust with Bevy: Key Insights from Herbert Wolverson’s Livestream Disclaimer: This article was created using JetBrains Grazie, an AI-based writing and communication companion. With its help, the core topics of this rich and nuanced livestream were conveniently distilled into a compact blog post format. Game development in Rust is gaining momentum, and Bevy, a modern game engine focusing on Rust, is at the forefront of this revolution. In a recent RustRover Livestream, Herbert Wolverson, an accomplished author and educator in the Rust community, shared his expertise on using Rust and Bevy for game development. Here’s a summary of the key insights from the live stream. Getting to know Herbert Wolverson Herbert Wolverson is renowned for his contributions to the Rust ecosystem. He authored the Rust Roguelike Tutorial, Hands-on Rust, Rust Brain Teasers, and the soon-to-be-published Advanced Hands-on Rust. His expertise extends beyond writing; he also teaches Rust through Ardan Labs, conducts workshops, and is active in open-source projects like LibreQoS. Introduction to Rust Herbert began coding at a young age, influenced by his father, who was a computer science teacher. After exploring various programming languages including BASIC, Pascal, C, and C++, Herbert discovered Rust and found its strict, safety-oriented design appealing. He emphasized how Rust’s compiler enforces good practices, such as preventing the use of uninitialized variables and ensuring safe memory management. Understanding game development Idioms and ECS In traditional game development, many use object-oriented programming (OOP), creating a deep hierarchy of objects. However, this method can lead to performance issues and complex maintenance. Herbert pointed out the limitations of OOP in game development and introduced the Entity-Component-System (ECS) model as a more suitable alternative in Rust. Benefits of ECS 1. Composition Over Inheritance: ECS focuses on composing entities with various components rather than relying on deep inheritance trees. 2. Performance: ECS models manage memory efficiently, minimizing cache misses and fragmentation. 3. Parallel Processing: Rust’s strict guarantees allow Bevy to provide multithreading for free, enhancing performance. Bevy’s ECS and game design Herbert outlined the basics of Bevy’s ECS: – Entities: Unique IDs without behavior. – Components: Data attached to entities. – Systems: Functions processing entities and components, forming game logic. Practical examples with Bevy Setting up Bevy To start, include Bevy in your Cargo.toml file and set up a basic application: Creating and moving entities Herbert demonstrated how to create entities and add components. For instance, spawning Ferris the Crab: This code sets up a basic 2D game with a camera and a sprite. Adding interactivity Herbert explained how to make entities interactive by adding systems that handle user input: Leveraging Bevy plugins Herbert highlighted the power of plugins in Bevy, such as Rapier for physics and Hanabi for particle effects. By adding a few lines, you can integrate complex functionality: Find the complete code from the livestream in the GitHub repository. Herbert Wolverson’s insights showcase the potential of Rust and Bevy for game development. By leveraging Rust’s strict safety features and Bevy’s ECS model, developers can create efficient, high-performance, and safe game applications. Whether you’re a seasoned programmer or new to game development, Bevy provides a robust and flexible framework to bring your game ideas to life.  Additional resources: For those looking to delve deeper, Herbert’s books and tutorials are invaluable resources. Stay tuned to our blog for more guides and tutorials on game development with Rust and Bevy. Happy coding! Subscribe to Rust Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/11/rr-social_share_blog_1280x720_en.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/rust/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2020/07/RustRover.svg\" alt=\"Rust logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eFocus on what matters\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/rust/category/intellij-rust/\"\u003eIntelliJ Rust\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/rust/category/livestream/\"\u003eLiveStream\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eUnveiling Game Development in Rust with Bevy: Key Insights from Herbert Wolverson’s Livestream\u003c/h2\u003e                    \n                    \n\u003cp\u003e\u003cem\u003eDisclaimer:\u003c/em\u003e This article was created using JetBrains Grazie, an AI-based writing and communication companion. With its help, the core topics of this rich and nuanced livestream were conveniently distilled into a compact blog post format.\u003c/p\u003e\n\n\n\n\u003cp\u003eGame development in Rust is gaining momentum, and Bevy, a modern game engine focusing on Rust, is at the forefront of this revolution. In a recent \u003ca href=\"https://www.youtube.com/live/yFOPtYwnDjU\" target=\"_blank\" rel=\"noopener\"\u003eRustRover Livestream\u003c/a\u003e, Herbert Wolverson, an accomplished author and educator in the Rust community, shared his expertise on using Rust and Bevy for game development. Here’s a summary of the key insights from the live stream.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe title=\"Unveiling Game Development in Rust With Bevy\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/yFOPtYwnDjU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eGetting to know Herbert Wolverson\u003c/h2\u003e\n\n\n\n\u003cp\u003eHerbert Wolverson is renowned for his contributions to the Rust ecosystem. He authored the \u003cem\u003eRust Roguelike Tutorial\u003c/em\u003e, \u003cem\u003eHands-on Rust\u003c/em\u003e, \u003cem\u003eRust Brain Teasers\u003c/em\u003e, and the soon-to-be-published \u003cem\u003eAdvanced Hands-on Rust\u003c/em\u003e. His expertise extends beyond writing; he also teaches Rust through \u003ca href=\"https://www.ardanlabs.com/\" data-type=\"link\" data-id=\"https://www.ardanlabs.com/\" target=\"_blank\" rel=\"noopener\"\u003eArdan Labs\u003c/a\u003e, conducts workshops, and is active in open-source projects like LibreQoS.\u003c/p\u003e\n\n\n\n\u003ch2\u003eIntroduction to Rust\u003c/h2\u003e\n\n\n\n\u003cp\u003eHerbert began coding at a young age, influenced by his father, who was a computer science teacher. After exploring various programming languages including BASIC, Pascal, C, and C++, Herbert discovered Rust and found its strict, safety-oriented design appealing. He emphasized how Rust’s compiler enforces good practices, such as preventing the use of uninitialized variables and ensuring safe memory management.\u003c/p\u003e\n\n\n\n\u003ch2\u003eUnderstanding game development Idioms and ECS\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn traditional game development, many use object-oriented programming (OOP), creating a deep hierarchy of objects. However, this method can lead to performance issues and complex maintenance. Herbert pointed out the limitations of OOP in game development and introduced the Entity-Component-System (ECS) model as a more suitable alternative in Rust.\u003c/p\u003e\n\n\n\n\u003ch3\u003eBenefits of ECS\u003c/h3\u003e\n\n\n\n\u003cp\u003e1. \u003cstrong\u003eComposition Over Inheritance\u003c/strong\u003e: ECS focuses on composing entities with various components rather than relying on deep inheritance trees.\u003c/p\u003e\n\n\n\n\u003cp\u003e2. \u003cstrong\u003ePerformance\u003c/strong\u003e: ECS models manage memory efficiently, minimizing cache misses and fragmentation.\u003c/p\u003e\n\n\n\n\u003cp\u003e3. \u003cstrong\u003eParallel Processing\u003c/strong\u003e: Rust’s strict guarantees allow Bevy to provide multithreading for free, enhancing performance.\u003c/p\u003e\n\n\n\n\u003ch3\u003eBevy’s ECS and game design\u003c/h3\u003e\n\n\n\n\u003cp\u003eHerbert outlined the basics of Bevy’s ECS:\u003c/p\u003e\n\n\n\n\u003cp\u003e– \u003cstrong\u003eEntities\u003c/strong\u003e: Unique IDs without behavior.\u003c/p\u003e\n\n\n\n\u003cp\u003e– \u003cstrong\u003eComponents\u003c/strong\u003e: Data attached to entities.\u003c/p\u003e\n\n\n\n\u003cp\u003e– \u003cstrong\u003eSystems\u003c/strong\u003e: Functions processing entities and components, forming game logic.\u003c/p\u003e\n\n\n\n\u003ch2\u003ePractical examples with Bevy\u003c/h2\u003e\n\n\n\n\u003ch3\u003eSetting up Bevy\u003c/h3\u003e\n\n\n\n\u003cp\u003eTo start, include Bevy in your Cargo.toml file and set up a basic application:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"3840\" height=\"2160\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Screenshot-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eCreating and moving entities\u003c/h3\u003e\n\n\n\n\u003cp\u003eHerbert demonstrated how to create entities and add components. For instance, spawning Ferris the Crab:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"3840\" height=\"2160\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Screenshot-2.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis code sets up a basic 2D game with a camera and a sprite.\u003c/p\u003e\n\n\n\n\u003ch3\u003eAdding interactivity\u003c/h3\u003e\n\n\n\n\u003cp\u003eHerbert explained how to make entities interactive by adding systems that handle user input:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"3840\" height=\"2160\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Screenshot-3.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eLeveraging Bevy plugins\u003c/h3\u003e\n\n\n\n\u003cp\u003eHerbert highlighted the power of plugins in Bevy, such as Rapier for physics and Hanabi for particle effects. By adding a few lines, you can integrate complex functionality:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"3840\" height=\"2160\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/Screenshot-4.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFind the complete code from the livestream in the \u003ca href=\"https://github.com/thebracket/JetBrainsBevy\" target=\"_blank\" rel=\"noopener\"\u003eGitHub repository\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eHerbert Wolverson’s insights showcase the potential of Rust and Bevy for game development. By leveraging Rust’s strict safety features and Bevy’s ECS model, developers can create efficient, high-performance, and safe game applications. Whether you’re a seasoned programmer or new to game development, Bevy provides a robust and flexible framework to bring your game ideas to life. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eAdditional resources:\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eFor those looking to delve deeper, Herbert’s books and tutorials are invaluable resources. Stay tuned to our blog for more guides and tutorials on game development with Rust and Bevy. Happy coding!\u003c/p\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Rust Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
