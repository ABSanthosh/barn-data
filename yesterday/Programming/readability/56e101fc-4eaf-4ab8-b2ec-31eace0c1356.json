{
  "id": "56e101fc-4eaf-4ab8-b2ec-31eace0c1356",
  "title": "Kotlin Reaches 2.1.0, Bringing New Language Features, Compiler Updates, and More",
  "link": "https://www.infoq.com/news/2024/12/kotlin-2-1-language-features/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Kotlin 2.1.0 introduces new syntax, including guard conditions, non-local break and continue, and multi-dollar string interpolation. Additionally, it extends its multiplatform capabilities and improves the K2 compiler. By Sergio De Simone",
  "author": "Sergio De Simone",
  "published": "Mon, 09 Dec 2024 12:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Mobile",
    "Cross Platform",
    "Android",
    "Kotlin",
    "JVM Languages",
    "iOS",
    "Development",
    "news"
  ],
  "byline": "Sergio De Simone",
  "length": 3511,
  "excerpt": "Kotlin 2.1.0 introduces new syntax, including guard conditions, non-local break and continue, and multi-dollar string interpolation. Additionally, it extends its multiplatform capabilities and improve",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241209233341/apple-touch-icon.png",
  "text": "Kotlin 2.1.0 introduces new syntax, including guard conditions, non-local break and continue, and multi-dollar string interpolation. Additionally, it extends its multiplatform capabilities and improves the K2 compiler. Guard conditions in when expressions are meant to make conditional logic more concise and readable. They allow to include an additional if conditional after the primary condition associated to a branch. For example: when (httpResponse) { is Success -\u003e ... is HttpError if httpResponse.status \u003e= 500 -\u003e ... is HttpError -\u003e ... } The code in a branch with a guard condition is executed only if both the primary condition and the if are verified. Also supported are if ... else guards. Non-local break and continue can be used to break out or continue the execution of a loop from within a lambda executed inside the loop. For example: fun processList(records: List\u003cInt\u003e): Boolean { for (record in list) { val variable = record.nullableValue() ?: run { log.warning(\"Record is null or invalid, continuing...\") continue } if (variable == 0) return true } return false } Still on the syntax front, Kotlin 2.1.0 extends string interpolation to make it easier to use $ signs inside interpolated strings without needing to escape them. This can come in handy, for example, when generating JSON schemas and is enabled by using $$ as an interpolation prefix, as shown in the following example: val KClass\u003c*\u003e.jsonSchema : String get() = $$\"\"\" { \"$schema\": \"https://json-schema.org/draft/2020-12/schema\", \"$id\": \"https://example.com/product.schema.json\", \"$dynamicAnchor\": \"meta\" \"title\": \"$${simpleName ?: qualifiedName ?: \"unknown\"}\", \"type\": \"object\" } \"\"\" Other new syntax features include the @SubclassOptInRequired annotation to require explicit opt-in to enable subclassing; improved overload resolution for functions with generic types; and improved exhaustiveness checks for when expressions with sealed classes. The new syntax capabilities described here are still in preview and must be enabled at the compiler level if you want to use them. The Kotlin 2.1.0 release also brings a more flexible K2 compiler with new configurable compiler checks, including for unused variables, unreachable code, defining a value and not using it, and so on. Conversely, K2 now supports silencing all warnings one by one. K2 also brings an improved kapt plugin implementation. kapt is an annotation processor which enables using libraries like Dagger or Data Binding to generate/modify code based on textual annotations. While kapt is currently in maintenance mode and superseded by the Kotlin Symbol Processing API, the new version coming with Kotlin 2.1.0 provides improved performance for all current users. Another area where Kotlin 2.1.0 brings significant changes is multiplatform programming, with support for using Swift API without using Objective-C headers, a new DSL to configure compiler options, and support to publish multiplatform libraries from any platform, including the previously excluded macOS. Kotlin 2.1.0 may break existing code, so you'll want to check the official migration guide before updating your build script when using IntelliJ IDEA 2023.3 and Android Studio Iguana (2023.2.1) Canary 15. About the Author Sergio De Simone",
  "image": "https://res.infoq.com/news/2024/12/kotlin-2-1-language-features/en/headerimage/kotlin-2-1-released-1733744286747.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003e\u003ca href=\"https://kotlinlang.org/docs/whatsnew21.html#language\"\u003eKotlin 2.1.0\u003c/a\u003e introduces new syntax, including guard conditions, non-local \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e, and multi-dollar string interpolation. Additionally, it extends its multiplatform capabilities and improves the K2 compiler.\u003c/p\u003e\n\n\u003cp\u003eGuard conditions in \u003ccode\u003ewhen\u003c/code\u003e expressions are meant to make conditional logic more concise and readable. They allow to include an additional \u003ccode\u003eif\u003c/code\u003e conditional after the primary condition associated to a branch. For example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ewhen (httpResponse) {\n    is Success -\u0026gt; ...\n    is HttpError if httpResponse.status \u0026gt;= 500 -\u0026gt; ...\n    is HttpError -\u0026gt; ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe code in a branch with a guard condition is executed only if both the primary condition and the \u003ccode\u003eif\u003c/code\u003e are verified. Also supported are \u003ccode\u003eif ... else\u003c/code\u003e guards.\u003c/p\u003e\n\n\u003cp\u003eNon-local \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e can be used to break out or continue the execution of a loop from within a lambda executed inside the loop. For example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003efun processList(records: List\u0026lt;Int\u0026gt;): Boolean {\n    for (record in list) {\n        val variable = record.nullableValue() ?: run {\n            log.warning(\u0026#34;Record is null or invalid, continuing...\u0026#34;)\n            continue\n        }\n        if (variable == 0) return true\n    }\n    return false\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eStill on the syntax front, Kotlin 2.1.0 extends string interpolation to make it easier to use \u003ccode\u003e$\u003c/code\u003e signs inside interpolated strings without needing to escape them. This can come in handy, for example, when generating JSON schemas and is enabled by using \u003ccode\u003e$$\u003c/code\u003e as an interpolation prefix, as shown in the following example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eval KClass\u0026lt;*\u0026gt;.jsonSchema : String\n    get() = $$\u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;$schema\u0026#34;: \u0026#34;https://json-schema.org/draft/2020-12/schema\u0026#34;,\n      \u0026#34;$id\u0026#34;: \u0026#34;https://example.com/product.schema.json\u0026#34;,\n      \u0026#34;$dynamicAnchor\u0026#34;: \u0026#34;meta\u0026#34;\n      \u0026#34;title\u0026#34;: \u0026#34;$${simpleName ?: qualifiedName ?: \u0026#34;unknown\u0026#34;}\u0026#34;,\n      \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOther new syntax features include the \u003ca href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-subclass-opt-in-required/\"\u003e\u003ccode\u003e@SubclassOptInRequired\u003c/code\u003e annotation\u003c/a\u003e to require explicit opt-in to enable subclassing; improved overload resolution for functions with generic types; and improved exhaustiveness checks for \u003ccode\u003ewhen\u003c/code\u003e expressions with sealed classes.\u003c/p\u003e\n\n\u003cp\u003eThe new syntax capabilities described here are still in preview and must be enabled at the compiler level if you want to use them.\u003c/p\u003e\n\n\u003cp\u003eThe Kotlin 2.1.0 release also brings a more flexible K2 compiler with new configurable compiler checks, including for unused variables, unreachable code, defining a value and not using it, and so on. Conversely, K2 now supports silencing all warnings one by one.\u003c/p\u003e\n\n\u003cp\u003eK2 also brings an improved \u003ccode\u003ekapt\u003c/code\u003e plugin implementation. \u003ccode\u003ekapt\u003c/code\u003e is an annotation processor which enables using libraries like \u003ca href=\"https://google.github.io/dagger/\"\u003eDagger\u003c/a\u003e or \u003ca href=\"https://developer.android.com/topic/libraries/data-binding/index.html\"\u003eData Binding\u003c/a\u003e to generate/modify code based on textual annotations. While \u003ccode\u003ekapt\u003c/code\u003e is currently in maintenance mode and superseded by the \u003ca href=\"https://kotlinlang.org/docs/ksp-overview.html\"\u003eKotlin Symbol Processing API\u003c/a\u003e, the new version coming with Kotlin 2.1.0 provides improved performance for all current users.\u003c/p\u003e\n\n\u003cp\u003eAnother area where Kotlin 2.1.0 brings significant changes is multiplatform programming, with support for using Swift API without using Objective-C headers, a new DSL to configure compiler options, and support to publish multiplatform libraries from any platform, including the previously excluded macOS.\u003c/p\u003e\n\n\u003cp\u003eKotlin 2.1.0 may break existing code, so you\u0026#39;ll want to check the official \u003ca href=\"https://kotlinlang.org/docs/compatibility-guide-21.html\"\u003emigration guide\u003c/a\u003e before \u003ca href=\"https://kotlinlang.org/docs/releases.html#update-to-a-new-kotlin-version\"\u003eupdating your build script\u003c/a\u003e when using IntelliJ IDEA 2023.3 and Android Studio Iguana (2023.2.1) Canary 15.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio-De-Simone\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio De Simone\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-12-09T00:00:00Z",
  "modifiedTime": null
}
