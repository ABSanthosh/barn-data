{
  "id": "17af84ba-70ed-4032-812c-23d7760d8966",
  "title": "Dapr Agents: Scalable AI Workflows with LLMs, Kubernetes \u0026 Multi-Agent Coordination",
  "link": "https://www.infoq.com/news/2025/03/dapr-agents/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Introducing Dapr Agents—a groundbreaking framework for creating scalable AI agents using Large Language Models (LLMs). With robust workflows, multi-agent coordination, and cloud-neutral architecture, it enables enterprises to deploy thousands of resilient agents. Built on Dapr’s proven infrastructure, Dapr Agents ensures reliability and observability in AI-driven applications. By Eran Stiller",
  "author": "Eran Stiller",
  "published": "Thu, 20 Mar 2025 11:30:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Python",
    "Agents",
    "dapr",
    "Large language models",
    "Distributed Systems",
    "Actor Model",
    "Architecture \u0026 Design",
    "Development",
    "AI, ML \u0026 Data Engineering",
    "news"
  ],
  "byline": "Eran Stiller",
  "length": 7096,
  "excerpt": "Introducing Dapr Agents—a groundbreaking framework for creating scalable AI agents using Large Language Models (LLMs). With robust workflows, multi-agent coordination, and cloud-neutral architecture,",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250320073856/apple-touch-icon.png",
  "text": "Dapr recently introduced Dapr Agents, a framework for building scalable, resilient AI agents using Large Language Models (LLMs). It enables structured workflows, multi-agent coordination, and event-driven execution, leveraging Dapr's security, observability, and cloud-neutral architecture. Designed for enterprise use, it supports thousands of agents, integrates with databases, and ensures reliability through robust orchestration and messaging. Based on Dapr, Dapr Agents provides a framework for developing AI agents that can reason, act, and collaborate using LLMs. It offers reliability, scalability, and observability, supporting thousands of agents on a single core and running natively on Kubernetes. The authors, Mark Fussel, Yaron Schneider and Roberto Rodriguez, describe how Dapr Agents is unique from other frameworks: Dapr Agents is built on top of Dapr's full-featured workflow engine. Many other agent and LLM frameworks use homegrown workflow systems that aren't reliable for production use cases. Dapr Agents uses Dapr's proven workflow system, which is designed to handle failures, retries, and scaling. import logging import asyncio import requests from dotenv import load_dotenv from dapr_agents.llm.dapr import DaprChatClient from dapr_agents import AssistantAgent, tool # Load environment variables load_dotenv() logging.basicConfig(level=logging.INFO) @tool def get_pr_code(repository: str, pr: str) -\u003e str: \"\"\"Get the code for a given PR\"\"\" response = requests.get(f\"https://api.github.com/repos/{repository}/pulls/{pr}/files\") files = response.json() code = {file[\"filename\"]: requests.get(file[\"raw_url\"]).text for file in files} return code @tool def perform_review(code: str) -\u003e str: \"\"\"Review code\"\"\" response = DaprChatClient().generate(f\"Review the following code: {code}\") return response.get_content() # Define Code Review Agent code_review_agent = AssistantAgent( name=\"CodeReviewAgent\", role=\"Review PRs\", instructions=[\"Review code in a pull request, then return comments and/or suggestions\"], tools=[get_pr_code, perform_review], message_bus_name=\"messagepubsub\", state_store_name=\"workflowstatestore\", agents_registry_store_name=\"agentstatestore\", service_port=8001, ) # Start Agent Workflow Service await code_review_agent.start() An example of building a Code Review Agent with Dapr Agent (Source) Distributed Application Runtime (Dapr) is an open-source framework designed to simplify the development of cloud-native applications by providing building blocks for service invocation, state management, pub/sub messaging, and observability. It abstracts infrastructure complexities, allowing developers to focus on business logic while seamlessly integrating with Kubernetes and other environments. Agentic AI refers to AI-driven systems that can autonomously process information, make decisions, and execute tasks. Various solutions exist in this space, including frameworks like LangChain, AutoGen, and CrewAI, which enable developers to build agent-based applications. Dapr Agents use LLMs as their reasoning engine and integrate with external tools for enhanced functionality. Developers can create agents with predefined roles, goals, and instructions, equipping them with reasoning capabilities and tool-based actions. They can also define structured, deterministic workflows using functions that incorporate LLM reasoning. These workflows ensure the controlled execution of tasks in a predefined order while maintaining flexibility with tool integration. An example Agent workflow (Source) Dapr Agents supports multi-agent workflows, allowing agents to collaborate using Dapr's pub/sub messaging. Coordination models include LLM-based decision-making, random selection, and round-robin task distribution, enabling adaptive, self-reasoning workflows. The authors elaborate on this matter: Agents need to operate as autonomous entities that respond to events dynamically, enabling real-time interactions and collaboration coordinated with workflows. These event-driven agentic workflows take advantage of Dapr's pub/sub messaging system. This allows agents to communicate, share tasks, and reason through events triggered by their environment. Agents can communicate with other agents via a message broker (Source) The design abstracts integrations with databases and message brokers, allowing developers to switch between infrastructure providers without significant code changes. It integrates seamlessly with monitoring tools like Prometheus and OpenTelemetry for observability. As a CNCF project, it avoids vendor lock-in while ensuring secure communication and fault tolerance. Developers can explore Dapr Agents' capabilities via the GitHub repository and join the Discord community for discussions and support. InfoQ spoke with Yaron Schneider, CTO at Diagrid and Dapr Maintainer, about Dapr Agents, their implementation and future plans. InfoQ: You mentioned that Dapr Agents is designed to run thousands of agents on a single core. What optimizations or architectural choices enable this efficiency level, and how should architects consider scaling in a Kubernetes environment? Yaron Schneider: Dapr Agents represent agents and their subsequent tasks as actors - extremely lightweight, durable objects that can scale to the millions with very low latency. This enables Dapr Agents to run large amounts of agents using minimal CPU and memory requirements. As Dapr runs and integrates natively with Kubernetes, existing users of the platform should know that Dapr Agents is highly resilient to failures and takes into account the ephemeral nature of Kubernetes pods. InfoQ: Debugging and observability become critical with distributed AI agents interacting asynchronously. What built-in capabilities do Dapr Agents provide for monitoring, logging, and troubleshooting agent behaviours? Yaron Schneider: Dapr Agents, built on top of Dapr, emit metrics for its agentic workflows, including requests per second, error rates and latency. In addition, since Dapr Workflows supports distributed tracing, developers can visualize the agent call graph using their OTel-compliant tools. We will be investing more in agentic observability in the future. InfoQ: What's next for Dapr Agents? Are there any planned features or improvements, such as enhanced LLM integrations, new workflow primitives, or broader multi-cloud capabilities? Yaron Schneider: Since data synthesis is becoming a crucial aspect of agentic workloads, we plan to integrate with Model Context Protocol (MCP) so developers can connect Dapr Agents to various data sources and Dapr's native capabilities via the state store and bindings APIs. We also plan to add support to additional LLM providers through Dapr's Conversation API. Most importantly, Dapr Agents is available today in Python, and we're working on adding support for Dotnet and Java. About the Author Eran Stiller",
  "image": "https://res.infoq.com/news/2025/03/dapr-agents/en/headerimage/Dapr+Agents+-+Header-1742468332781.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eDapr recently introduced \u003ca href=\"https://www.cncf.io/blog/2025/03/12/announcing-dapr-ai-agents/\" target=\"_blank\"\u003eDapr Agents\u003c/a\u003e, a framework for building scalable, resilient AI agents using Large Language Models (LLMs). It enables structured workflows, multi-agent coordination, and event-driven execution, leveraging Dapr\u0026#39;s security, observability, and cloud-neutral architecture. Designed for enterprise use, it supports thousands of agents, integrates with databases, and ensures reliability through robust orchestration and messaging.\u003c/p\u003e\n\n\u003cp\u003eBased on Dapr, Dapr Agents provides a framework for developing AI agents that can reason, act, and collaborate using \u003ca href=\"https://en.wikipedia.org/wiki/Large_language_model\" target=\"_blank\"\u003eLLMs\u003c/a\u003e. It offers reliability, scalability, and observability, supporting thousands of agents on a single core and running natively on Kubernetes. The authors, \u003ca href=\"https://www.linkedin.com/in/mfussell/\" target=\"_blank\"\u003eMark Fussel\u003c/a\u003e, \u003ca href=\"https://www.linkedin.com/in/yaron-schneider-2130b7a3/\" target=\"_blank\"\u003eYaron Schneider\u003c/a\u003e and \u003ca href=\"https://www.linkedin.com/in/cyb3rward0g/\" target=\"_blank\"\u003eRoberto Rodriguez\u003c/a\u003e, describe how Dapr Agents is unique from other frameworks:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eDapr Agents is built on top of Dapr\u0026#39;s full-featured workflow engine. Many other agent and LLM frameworks use homegrown workflow systems that aren\u0026#39;t reliable for production use cases. Dapr Agents uses Dapr\u0026#39;s proven workflow system, which is designed to handle failures, retries, and scaling.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cpre\u003e\u003ccode\u003eimport logging\nimport asyncio\nimport requests\nfrom dotenv import load_dotenv\n\n\nfrom dapr_agents.llm.dapr import DaprChatClient\nfrom dapr_agents import AssistantAgent, tool\n\n\n# Load environment variables\nload_dotenv()\n\n\nlogging.basicConfig(level=logging.INFO)\n\n\n@tool\ndef get_pr_code(repository: str, pr: str) -\u0026gt; str:\n   \u0026#34;\u0026#34;\u0026#34;Get the code for a given PR\u0026#34;\u0026#34;\u0026#34;\n response = requests.get(f\u0026#34;https://api.github.com/repos/{repository}/pulls/{pr}/files\u0026#34;)\n   files = response.json()\n   code = {file[\u0026#34;filename\u0026#34;]: requests.get(file[\u0026#34;raw_url\u0026#34;]).text for file in files}\n   return code\n\n\n@tool\ndef perform_review(code: str) -\u0026gt; str:\n   \u0026#34;\u0026#34;\u0026#34;Review code\u0026#34;\u0026#34;\u0026#34;\n   response = DaprChatClient().generate(f\u0026#34;Review the following code: {code}\u0026#34;)\n   return response.get_content()\n\n\n# Define Code Review Agent\ncode_review_agent = AssistantAgent(\n  name=\u0026#34;CodeReviewAgent\u0026#34;,\n  role=\u0026#34;Review PRs\u0026#34;,\n  instructions=[\u0026#34;Review code in a pull request, then return comments and/or suggestions\u0026#34;],\n  tools=[get_pr_code, perform_review],\n  message_bus_name=\u0026#34;messagepubsub\u0026#34;,\n  state_store_name=\u0026#34;workflowstatestore\u0026#34;,\n  agents_registry_store_name=\u0026#34;agentstatestore\u0026#34;,\n  service_port=8001,\n)\n\n\n# Start Agent Workflow Service\nawait code_review_agent.start()\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cem\u003eAn example of building a Code Review Agent with Dapr Agent (\u003ca href=\"https://www.cncf.io/blog/2025/03/12/announcing-dapr-ai-agents/\" target=\"_blank\"\u003eSource\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://dapr.io/\" target=\"_blank\"\u003eDistributed Application Runtime (Dapr)\u003c/a\u003e is an open-source framework designed to simplify the development of cloud-native applications by providing building blocks for service invocation, state management, pub/sub messaging, and observability. It abstracts infrastructure complexities, allowing developers to focus on business logic while seamlessly integrating with Kubernetes and other environments.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://blogs.nvidia.com/blog/what-is-agentic-ai/\" target=\"_blank\"\u003eAgentic AI\u003c/a\u003e refers to AI-driven systems that can autonomously process information, make decisions, and execute tasks. Various solutions exist in this space, including frameworks like \u003ca href=\"https://www.langchain.com/\" target=\"_blank\"\u003eLangChain\u003c/a\u003e, \u003ca href=\"https://microsoft.github.io/autogen/stable/\" target=\"_blank\"\u003eAutoGen\u003c/a\u003e, and \u003ca href=\"https://www.crewai.com/\" target=\"_blank\"\u003eCrewAI\u003c/a\u003e, which enable developers to build agent-based applications.\u003c/p\u003e\n\n\u003cp\u003eDapr Agents use LLMs as their reasoning engine and integrate with external tools for enhanced functionality. Developers can create agents with predefined roles, goals, and instructions, equipping them with reasoning capabilities and tool-based actions. They can also define structured, deterministic workflows using functions that incorporate LLM reasoning. These workflows ensure the controlled execution of tasks in a predefined order while maintaining flexibility with tool integration.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/03/dapr-agents/en/resources/1Dapr Agents - Workflow-1742468598128.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/03/dapr-agents/en/resources/1Dapr Agents - Workflow-1742468598128.png\" rel=\"share\"/\u003e\u003cbr/\u003e\n\u003cem\u003eAn example Agent workflow (\u003ca href=\"https://www.cncf.io/blog/2025/03/12/announcing-dapr-ai-agents/\" target=\"_blank\"\u003eSource\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eDapr Agents supports multi-agent workflows, allowing agents to collaborate using Dapr\u0026#39;s pub/sub messaging. Coordination models include LLM-based decision-making, random selection, and round-robin task distribution, enabling adaptive, self-reasoning workflows. The authors elaborate on this matter:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAgents need to operate as autonomous entities that respond to events dynamically, enabling real-time interactions and collaboration coordinated with workflows. These event-driven agentic workflows take advantage of Dapr\u0026#39;s pub/sub messaging system. This allows agents to communicate, share tasks, and reason through events triggered by their environment.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/03/dapr-agents/en/resources/1Dapr Agents - Multi-Agents-1742468598128.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/03/dapr-agents/en/resources/1Dapr Agents - Multi-Agents-1742468598128.png\" rel=\"share\"/\u003e\u003cbr/\u003e\n\u003cem\u003eAgents can communicate with other agents via a message broker (\u003ca href=\"https://www.cncf.io/blog/2025/03/12/announcing-dapr-ai-agents/\" target=\"_blank\"\u003eSource\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe design abstracts integrations with databases and message brokers, allowing developers to switch between infrastructure providers without significant code changes. It integrates seamlessly with monitoring tools like \u003ca href=\"https://prometheus.io/\" target=\"_blank\"\u003ePrometheus\u003c/a\u003e and \u003ca href=\"https://opentelemetry.io/\" target=\"_blank\"\u003eOpenTelemetry\u003c/a\u003e for observability. As a CNCF project, it avoids vendor lock-in while ensuring secure communication and fault tolerance.\u003c/p\u003e\n\n\u003cp\u003eDevelopers can explore Dapr Agents\u0026#39; capabilities via the \u003ca href=\"https://github.com/dapr/dapr-agents\" target=\"_blank\"\u003eGitHub repository\u003c/a\u003e and join the \u003ca href=\"https://discord.com/invite/dapr-778680217417809931\" target=\"_blank\"\u003eDiscord community\u003c/a\u003e for discussions and support.\u003c/p\u003e\n\n\u003cp\u003eInfoQ spoke with \u003ca href=\"https://www.linkedin.com/in/yaron-schneider-2130b7a3/\" target=\"_blank\"\u003eYaron Schneider\u003c/a\u003e, CTO at Diagrid and Dapr Maintainer, about Dapr Agents, their implementation and future plans.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: You mentioned that Dapr Agents is designed to run thousands of agents on a single core. What optimizations or architectural choices enable this efficiency level, and how should architects consider scaling in a Kubernetes environment?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eYaron Schneider:\u003c/strong\u003e Dapr Agents represent agents and their subsequent tasks as actors - extremely lightweight, durable objects that can scale to the millions with very low latency. This enables Dapr Agents to run large amounts of agents using minimal CPU and memory requirements. As Dapr runs and integrates natively with Kubernetes, existing users of the platform should know that Dapr Agents is highly resilient to failures and takes into account the ephemeral nature of Kubernetes pods.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: Debugging and observability become critical with distributed AI agents interacting asynchronously. What built-in capabilities do Dapr Agents provide for monitoring, logging, and troubleshooting agent behaviours?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eYaron Schneider:\u003c/strong\u003e Dapr Agents, built on top of Dapr, emit metrics for its agentic workflows, including requests per second, error rates and latency. In addition, since Dapr Workflows supports distributed tracing, developers can visualize the agent call graph using their OTel-compliant tools. We will be investing more in agentic observability in the future.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: What\u0026#39;s next for Dapr Agents? Are there any planned features or improvements, such as enhanced LLM integrations, new workflow primitives, or broader multi-cloud capabilities?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eYaron Schneider:\u003c/strong\u003e Since data synthesis is becoming a crucial aspect of agentic workloads, we plan to integrate with \u003ca href=\"https://www.anthropic.com/news/model-context-protocol\" target=\"_blank\"\u003eModel Context Protocol (MCP)\u003c/a\u003e so developers can connect Dapr Agents to various data sources and Dapr\u0026#39;s native capabilities via the state store and bindings APIs. We also plan to add support to additional LLM providers through Dapr\u0026#39;s \u003ca href=\"https://docs.dapr.io/developing-applications/building-blocks/conversation/conversation-overview/\" target=\"_blank\"\u003eConversation API\u003c/a\u003e. Most importantly, Dapr Agents is available today in Python, and we\u0026#39;re working on adding support for Dotnet and Java.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Eran-Stiller\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eEran Stiller\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-03-20T00:00:00Z",
  "modifiedTime": null
}
