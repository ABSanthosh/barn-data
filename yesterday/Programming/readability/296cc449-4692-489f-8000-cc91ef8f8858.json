{
  "id": "296cc449-4692-489f-8000-cc91ef8f8858",
  "title": "How to Build Secure Software without Sacrificing Productivity",
  "link": "https://www.infoq.com/news/2025/07/secure-software-productivity/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Security can clash with development efficiency. Focusing on minimizing breach impact can be more effective than prevention. Dorota Parad argues for flexibility in compliance and collaborating with security teams to define practical protections. Limiting blast radius and using automation can boost security with minimal productivity loss. By Ben Linders",
  "author": "Ben Linders",
  "published": "Thu, 17 Jul 2025 11:32:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Security",
    "Secure Coding",
    "Platforms",
    "Productivity",
    "Software Engineering",
    "QCon Software Development Conference",
    "Agile Conferences",
    "Compliance",
    "QCon San Francisco 2024",
    "Culture \u0026 Methods",
    "news"
  ],
  "byline": "Ben Linders",
  "length": 5404,
  "excerpt": "Security can clash with development efficiency. Focusing on minimizing breach impact can be more effective than prevention. Dorota Parad argues for flexibility in compliance and collaborating with sec",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250717100249/apple-touch-icon.png",
  "text": "Security can clash with development efficiency. Focusing on minimizing breach impact can be more effective than prevention. Dorota Parad argues for flexibility in compliance and collaborating with security teams to define practical protections. Limiting blast radius and using automation can boost security with minimal productivity loss. At QCon San Francisco, Dorota Parad presented how to build secure software without sacrificing productivity. Security can be at odds with a fast and efficient development process. Focusing on minimizing the impact of breaches can be more effective than trying to prevent the breach in the first place. In Ensuring Security without Harming Software Development Productivity, Dorota Parad explored creating a foundation for security without negatively impacting engineering productivity. Parad suggested pushing back on security mandates, as they can hinder productivity. This starts with understanding where those mandates are coming from: The job of a CISO and your security team is very rarely about security; they are there to ensure compliance. Contrary to popular opinion, compliance doesn’t just mean mindlessly ticking checkboxes, the checkboxes are just (one) means to an end. It all boils down to crafting a narrative that will convince third-party stakeholders - auditors, regulators, insurance companies - that your company does a good enough job minimizing security risks, Parad said. None of the security certifications or regulations are prescriptive; it is up to your company to define the scope, means, and implementation, Parad said. It can be a daunting task, so it may be tempting to optimize for the ease of audits and do something like force invasive MDM (mobile device management) software without considering how it will affect engineers’ productivity, she added. If you want to get rid of some of the more annoying mandates, you need to start a dialog with your security team and help them craft that convincing narrative they’re after, Parad suggested. This means documenting how you think about risks in your area, what you’re doing to reduce the blast radius of breaches, what levels of protection you have in place, and how you’re minimizing the impact of incidents. Parad explored what can be done to minimize the impact of security breaches. She gave the example of a common threat: a malicious actor getting their hands on one of our engineer’s cloud account credentials: What’s the worst that can happen here? If we applied the principle of bulkheads, then those credentials are limited in scope to a single cloud account, which may or may not host our production environment. Parad mentioned that if we utilize modern software development practices, the access would be limited to read-only and innocuous configuration changes, since resource creation and deletion would be automated and only permitted as part of CI/CD pipeline. If that account includes access to a database containing user data, and if we applied proper encryption, the data is effectively useless to the attacker, Parad added. Trying to prevent the incident would be a prohibitively costly endeavor, involving multiple remediations to account for all the different attack vectors, Parad said. Limiting the impact is a holistic solution that doesn’t take as much effort or cost, and often comes with additional benefits of increased robustness, she concluded. InfoQ interviewed Dorota Parad about how security and engineering productivity can go together. InfoQ: What’s your approach to pushing back on security mandates that hinder productivity? Dorota Parad: You can only push back on mandates if you have an alternative way to minimize security risks. This is where the BLISS framework (bulkheads, levels, impact, simplicity, and pit of success) helps, by offering an alternative that doesn’t get in your engineers’ way. With Bliss, you can make your security strategy almost invisible to the engineers while embedding it deep into the culture at the same time, Parad said InfoQ: Can a CI/CD pipeline be considered a security practice? Parad: This sometimes raises eyebrows among security folks, but yes, I consider a CI/CD pipeline a security tool. Implemented properly, it severely reduces the risk of malicious code ending up in your production. A typical build/deployment pipeline involves increasingly strict levels of protection the closer to production the code gets - we start with git access controls to make a commit, then developer credentials to create a pull request, we have automated testing that may catch some issues, and finally a second set of credentials and a human review to merge. That’s a very powerful way to minimize security risks. InfoQ: How can we increase security with a CI/CD pipeline? Parad: Every single piece of code needs to go through that pipeline in order to reach production, no exceptions. No manual tinkering to push the build through, no bypassing of steps, no logging onto the servers to copy files or run some scripts. The only way to achieve that in practice is by keeping your CI/CD pipelines healthy and robust, so that they only fail when something is truly wrong. Flaky pipelines are the enemy of both security and productivity. About the Author Ben Linders",
  "image": "https://res.infoq.com/news/2025/07/secure-software-productivity/en/headerimage/generatedHeaderImage-1752479026945.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eSecurity can clash with development efficiency. Focusing on minimizing breach impact can be more effective than prevention. Dorota Parad argues for flexibility in compliance and collaborating with security teams to define practical protections. Limiting blast radius and using automation can boost security with minimal productivity loss.\u003c/p\u003e\n\n\u003cp\u003eAt \u003ca href=\"https://qconsf.com/\"\u003eQCon San Francisco\u003c/a\u003e, Dorota Parad presented \u003ca href=\"https://www.infoq.com/presentations/security-productivity/\"\u003ehow to build secure software without sacrificing productivity\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eSecurity can be at odds with a fast and efficient development process. Focusing on minimizing the impact of breaches can be more effective than trying to prevent the breach in the first place. In \u003ca href=\"https://www.infoq.com/news/2025/02/security-software-development/\"\u003eEnsuring Security without Harming Software Development Productivity\u003c/a\u003e, Dorota Parad explored creating a foundation for security without negatively impacting engineering productivity.\u003c/p\u003e\n\n\u003cp\u003eParad suggested pushing back on security mandates, as they can hinder productivity. This starts with understanding where those mandates are coming from:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eThe job of a CISO and your security team is very rarely about security; they are there to ensure compliance. Contrary to popular opinion, compliance doesn’t just mean mindlessly ticking checkboxes, the checkboxes are just (one) means to an end.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIt all boils down to crafting a narrative that will convince third-party stakeholders - auditors, regulators, insurance companies - that your company does a good enough job minimizing security risks, Parad said.\u003c/p\u003e\n\n\u003cp\u003eNone of the security certifications or regulations are prescriptive; it is up to your company to define the scope, means, and implementation, Parad said. It can be a daunting task, so it may be tempting to optimize for the ease of audits and do something like force invasive MDM (mobile device management) software without considering how it will affect engineers’ productivity, she added.\u003c/p\u003e\n\n\u003cp\u003eIf you want to get rid of some of the more annoying mandates, you need to start a dialog with your security team and help them craft that convincing narrative they’re after, Parad suggested. This means documenting how you think about risks in your area, what you’re doing to reduce the blast radius of breaches, what levels of protection you have in place, and how you’re minimizing the impact of incidents.\u003c/p\u003e\n\n\u003cp\u003eParad explored what can be done to minimize the impact of security breaches. She gave the example of a common threat: a malicious actor getting their hands on one of our engineer’s cloud account credentials:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhat’s the worst that can happen here? If we applied the principle of bulkheads, then those credentials are limited in scope to a single cloud account, which may or may not host our production environment.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eParad mentioned that if we utilize modern software development practices, the access would be limited to read-only and innocuous configuration changes, since resource creation and deletion would be automated and only permitted as part of CI/CD pipeline.\u003c/p\u003e\n\n\u003cp\u003eIf that account includes access to a database containing user data, and if we applied proper encryption, the data is effectively useless to the attacker, Parad added.\u003c/p\u003e\n\n\u003cp\u003eTrying to prevent the incident would be a prohibitively costly endeavor, involving multiple remediations to account for all the different attack vectors, Parad said. Limiting the impact is a holistic solution that doesn’t take as much effort or cost, and often comes with additional benefits of increased robustness, she concluded.\u003c/p\u003e\n\n\u003cp\u003eInfoQ interviewed \u003ca href=\"https://www.linkedin.com/in/dorota-parad/\"\u003eDorota Parad\u003c/a\u003e about how security and engineering productivity can go together.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: What’s your approach to pushing back on security mandates that hinder productivity?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eDorota Parad\u003c/strong\u003e: You can only push back on mandates if you have an alternative way to minimize security risks. This is where the \u003ca href=\"https://authress.io/knowledge-base/articles/2025/01/03/bliss-security-framework\"\u003eBLISS framework\u003c/a\u003e (bulkheads, levels, impact, simplicity, and pit of success) helps, by offering an alternative that doesn’t get in your engineers’ way. With Bliss, you can make your security strategy almost invisible to the engineers while embedding it deep into the culture at the same time, Parad said\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: Can a CI/CD pipeline be considered a security practice?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eParad\u003c/strong\u003e: This sometimes raises eyebrows among security folks, but yes, I consider a CI/CD pipeline a security tool. Implemented properly, it severely reduces the risk of malicious code ending up in your production.\u003c/p\u003e\n\n\u003cp\u003eA typical build/deployment pipeline involves increasingly strict levels of protection the closer to production the code gets - we start with git access controls to make a commit, then developer credentials to create a pull request, we have automated testing that may catch some issues, and finally a second set of credentials and a human review to merge. That’s a very powerful way to minimize security risks.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: How can we increase security with a CI/CD pipeline?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eParad\u003c/strong\u003e: Every single piece of code needs to go through that pipeline in order to reach production, no exceptions. No manual tinkering to push the build through, no bypassing of steps, no logging onto the servers to copy files or run some scripts.\u003c/p\u003e\n\n\u003cp\u003eThe only way to achieve that in practice is by keeping your CI/CD pipelines healthy and robust, so that they only fail when something is truly wrong. Flaky pipelines are the enemy of both security and productivity.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Ben-Linders\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBen Linders\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-07-17T00:00:00Z",
  "modifiedTime": null
}
