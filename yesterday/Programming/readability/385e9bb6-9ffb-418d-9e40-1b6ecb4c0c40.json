{
  "id": "385e9bb6-9ffb-418d-9e40-1b6ecb4c0c40",
  "title": ".NET Community Toolkit 8.4: New MVVM Features, Enhanced Analyzers and Bug Fixes",
  "link": "https://www.infoq.com/news/2024/12/dotnet-community-toolkit-84/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "The .NET Community Toolkit has officially released version 8.4, introducing significant updates and improvements. The latest release includes support for partial properties in the MVVM Toolkit generators, new diagnostic analyzers, bug fixes, and other enhancements to facilitate development workflows. By Almir Vuk",
  "author": "Almir Vuk",
  "published": "Fri, 27 Dec 2024 09:40:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "MVVM",
    ".NET 9",
    ".NET",
    ".NET 8",
    ".NET Core",
    "Development",
    "news"
  ],
  "byline": "Almir Vuk",
  "length": 3102,
  "excerpt": "The .NET Community Toolkit has officially released version 8.4, introducing significant updates and improvements. The latest release includes support for partial properties in the MVVM Toolkit generat",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241210082243/apple-touch-icon.png",
  "text": "The .NET Community Toolkit has officially released version 8.4, introducing significant updates and improvements. The latest release includes support for partial properties in the MVVM Toolkit generators, new diagnostic analyzers, bug fixes, and other enhancements to facilitate development workflows. One of the key highlights is the introduction of partial properties for the MVVM Toolkit, enabled by new C# language features available in the .NET 9 SDK. As stated, this enhancement integrates property declarations more closely with the C# language, improving support for modifiers such as new, sealed, override, and required. Developers can now apply custom attributes and accessibility modifiers to properties, fields, or accessors. Partial properties also enhance nullability annotations and provide compatibility with Native AOT in UWP and WinUI 3 applications. Additionally, as reported, an upcoming Visual Studio update will simplify navigation between partial property declarations and their implementations. Furthermore, a new code fixer in Visual Studio further supports the transition to partial properties, enabling developers to migrate existing [ObservableProperty] fields with, as stated \"a single click\". This migration is recommended for projects using CsWinRT to benefit from improved performance and enhanced language support. (Code fixer in Visual Studio, Source: Microsoft DevBlog) The release also brings an expanded set of diagnostic analyzers for the MVVM Toolkit. These analyzers address common coding issues, such as unsupported types or incorrect declarations, and improve code quality for MVVM scenarios. Specific analyzers introduced in version 8.4 include checks for language version compatibility, AOT compatibility for WinRT scenarios, and proper usage of [ObservableProperty] and [RelayCommand]. With a note, developers are advised to set \u003cLangVersion\u003epreview\u003c/LangVersion\u003e in their project files to enable partial properties and ensure compatibility with the new features. Several additional improvements have been made in this release. These include validation of the Windows SDK version through MSBuild logic, support for forwarding attributes to property accessors, and refined diagnostic suppressions for custom attribute targets. Additionally, debugging has been simplified with embedded .pdb files for all source generators and analyzers, and performance improvements have been implemented for several toolkit components. Other notable updates include a new AsStream() extension for ReadOnlySequence\u003cbyte\u003e, enabling developers to create readonly, seekable streams more efficiently. The IndexOf\u003cT\u003e extension now uses ref readonly, emphasizing its intended usage. The .NET Community Toolkit team encourages developers to explore the new features and share feedback to help refine future updates. For a complete overview and guidance, the toolkit's official release notes provide detailed documentation. About the Author Almir Vuk",
  "image": "https://res.infoq.com/news/2024/12/dotnet-community-toolkit-84/en/headerimage/twitter_card+%2834%29-1735253275109.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cdiv\u003e\u003cp\u003eThe .NET Community Toolkit has officially \u003ca href=\"https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-840/\"\u003ereleased version 8.4\u003c/a\u003e, introducing significant updates and improvements. The latest release includes support for partial properties in the MVVM Toolkit generators, new diagnostic analyzers, bug fixes, and other enhancements to facilitate development workflows.\u003c/p\u003e\u003cp\u003e\n\nOne of the key highlights is the introduction of partial properties for the MVVM Toolkit, enabled by new C# language features available in the .NET 9 SDK. As stated, this enhancement integrates property declarations more closely with the C# language, improving support for modifiers such as \u003cem\u003enew\u003c/em\u003e, \u003cem\u003esealed\u003c/em\u003e, \u003cem\u003eoverride\u003c/em\u003e, and \u003cem\u003erequired\u003c/em\u003e. Developers can now apply custom attributes and accessibility modifiers to properties, fields, or accessors.\u003c/p\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003ca href=\"https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-840/#partial-properties-support-for-the-mvvm-toolkit-\"\u003ePartial properties\u003c/a\u003e also enhance nullability annotations and provide compatibility with Native AOT in UWP and WinUI 3 applications. Additionally, as reported, an upcoming Visual Studio update will simplify navigation between partial property declarations and their implementations.\u003c/p\u003e\n\n\u003cp\u003eFurthermore, a new code fixer in Visual Studio further supports the transition to partial properties, enabling developers to migrate existing \u003cem\u003e[ObservableProperty]\u003c/em\u003e fields with, as stated \u003cem\u003e\u0026#34;a single click\u0026#34;\u003c/em\u003e. This migration is recommended for projects using \u003cem\u003eCsWinRT\u003c/em\u003e to benefit from improved performance and enhanced language support.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2024/12/dotnet-community-toolkit-84/en/resources/1partial-property-code-fixer-1735253754239.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/12/dotnet-community-toolkit-84/en/resources/1partial-property-code-fixer-1735253754239.png\" rel=\"share\"/\u003e\u003cem\u003e(Code fixer in Visual Studio, Source: \u003ca href=\"https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-840/\"\u003eMicrosoft DevBlog\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eThe release also brings an expanded set of \u003ca href=\"https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-840/#lots-of-new-mvvm-toolkit-analyzers-\"\u003ediagnostic analyzers\u003c/a\u003e for the MVVM Toolkit. These analyzers address common coding issues, such as unsupported types or incorrect declarations, and improve code quality for MVVM scenarios. Specific analyzers introduced in version 8.4 include checks for language version compatibility, AOT compatibility for WinRT scenarios, and proper usage of \u003cem\u003e[ObservableProperty]\u003c/em\u003e and \u003cem\u003e[RelayCommand]\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith a note, developers are advised to set \u003cem\u003e\u0026lt;LangVersion\u0026gt;preview\u0026lt;/LangVersion\u0026gt;\u003c/em\u003e in their project files to enable partial properties and ensure compatibility with the new features.\u003c/p\u003e\n\n\u003cp\u003eSeveral additional improvements have been made in this release. These include validation of the Windows SDK version through MSBuild logic, support for forwarding attributes to property accessors, and refined diagnostic suppressions for custom attribute targets.\u003c/p\u003e\n\n\u003cp\u003eAdditionally, debugging has been simplified with embedded .pdb files for all source generators and analyzers, and performance improvements have been implemented for several toolkit components.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://devblogs.microsoft.com/dotnet/announcing-the-dotnet-community-toolkit-840/#other-changes-and-improvements-✅\"\u003eOther notable updates\u003c/a\u003e include a new \u003cem\u003eAsStream()\u003c/em\u003e extension for \u003cem\u003eReadOnlySequence\u0026lt;byte\u0026gt;\u003c/em\u003e, enabling developers to create \u003cem\u003ereadonly\u003c/em\u003e, seekable streams more efficiently. The \u003cem\u003eIndexOf\u0026lt;T\u0026gt;\u003c/em\u003e extension now uses \u003cem\u003eref readonly\u003c/em\u003e, emphasizing its intended usage.\u003c/p\u003e\n\n\u003cp\u003eThe .NET Community Toolkit team encourages developers to explore the new features and share feedback to help refine future updates. For a complete overview and guidance, the toolkit\u0026#39;s \u003ca href=\"https://github.com/CommunityToolkit/dotnet/releases/tag/v8.4.0\"\u003eofficial release notes\u003c/a\u003e provide detailed documentation.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Almir-Vuk\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eAlmir Vuk\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-12-27T00:00:00Z",
  "modifiedTime": null
}
