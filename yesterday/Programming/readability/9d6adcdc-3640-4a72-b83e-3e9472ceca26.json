{
  "id": "9d6adcdc-3640-4a72-b83e-3e9472ceca26",
  "title": "Improving the Efficiency of Goku Time-Series Database at Pinterest",
  "link": "https://www.infoq.com/news/2024/11/time-series-db-pinterest/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Pinterest has modernized and enhanced its Goku time-series database. The recent updates focus on optimizing storage and resource usage without compromising service quality. By Mohit Palriwal",
  "author": "Mohit Palriwal",
  "published": "Wed, 06 Nov 2024 20:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Performance",
    "Performance \u0026 Scalability",
    "Database",
    "Time Series Data",
    "DevOps",
    "Architecture \u0026 Design",
    "news"
  ],
  "byline": "Mohit Palriwal",
  "length": 4143,
  "excerpt": "Pinterest has modernized and enhanced its Goku time-series database. The recent updates focus on optimizing storage and resource usage without compromising service quality.",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241105072618/apple-touch-icon.png",
  "text": "Pinterest has modernized and enhanced its Goku time-series database. The recent updates focus on optimizing storage and resource usage without compromising service quality. Pinterest built Goku, an in-house database engine, to address specific limitations in OpenTSDB. You can read a detailed explanation of what motivated Pinterest in this article. In a recent blog post, the Goku team introduced two features, a metrics namespace and providing top write-heavy metrics, to the client Observability team that helped them reduce the data stored on Goku. These innovations have significantly reduced data storage requirements. The metrics namespace organizes metric configurations, allowing for efficient data management. Meanwhile, the system for identifying top metrics helps the Observability team block unnecessary data, reducing stored time series by 37%. Fig 1: Example configurations of three namespaces named ns1, ns2, and ns3. The namespace configurations (Fig 1) are stored in a dynamic shared config file watched by all hosts in the Goku ecosystem (Fig 2). Any moment the contents of this file change, the Goku process running on the hosts is notified, and it parses the new content to understand the changes. Fig 2: Goku architecture with namespace Several architectural changes further reduce infrastructure costs. Indexing improvements for metric names have cut memory usage from 12 GB to 3 GB per host. Additionally, the introduction of dictionary encoding in the Goku Compactor has eliminated out-of-memory issues, allowing for the use of less expensive hardware. Fig 3: Host level memory consumption for storing a metric name. Fig 4: Memory usage drop per host doing heavy tier compaction after dictionary encoding. Pinterest has also focused on optimizing memory allocation. By addressing internal fragmentation and over-allocated memory, the team has achieved significant memory savings. For instance, changes to the folly::IOBuf structure have reduced memory usage by 8–11 GB per host. Time-series compression algorithms are crucial for efficiently storing and processing large volumes of time-stamped data. These algorithms reduce the data size by identifying patterns and redundancies, allowing for faster query processing and reduced storage costs. Techniques such as delta encoding, delta-of-delta encoding, and XOR-based compression are employed to achieve significant storage efficiencies. For instance, TimescaleDB, an open-source time-series database, uses these algorithms to achieve over 90% storage efficiency, translating into substantial cost savings and improved query performance. Meta, in its Gorilla time-series database, also leverages compression techniques like delta-of-delta timestamps and XOR’d floating point values to reduce storage footprint by 10x, significantly enhancing query efficiency. More details can be found in their research paper. Pinterest's efforts are part of a broader trend in the tech industry towards optimizing time series data management systems. Similar initiatives include Apple's FiloDB, Netflix's Atlas, Uber’s M3, Meta Gorilla and Salesforce's Argus. These projects, like Goku, focus on efficient time-series data management and some are available as open-source solutions on platforms like GitHub. They represent a collective move towards more scalable and cost-effective data infrastructure. These enhancements have led Pinterest to achieve a 40% reduction in time series storage and a 70% decrease in costs. The improvements also allow Pinterest to accommodate a 30% increase in organic storage growth without additional capacity. A relevant discussion on observability spending and efficiency can be found in this Reddit thread, where industry professionals share insights and benchmarks. For example, serverlessmom on Reddit, stated: To level set: in many enterprises Observability is the #2 costs after actual infra/hosting. People are paying a lot to know what their software is doing. About the Author Mohit Palriwal",
  "image": "https://res.infoq.com/news/2024/11/time-series-db-pinterest/en/headerimage/generatedHeaderImage-1730918407834.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003e\u003ca href=\"https://www.pinterest.com/\"\u003ePinterest\u003c/a\u003e has modernized and enhanced its \u003ca href=\"https://medium.com/pinterest-engineering/goku-building-a-scalable-and-high-performant-time-series-database-system-a8ff5758a181\"\u003eGoku\u003c/a\u003e time-series database. The recent updates focus on optimizing storage and resource usage without compromising service quality.\u003c/p\u003e\n\n\u003cp\u003ePinterest built Goku, an in-house database engine,\u003ca href=\"https://www.infoq.com/news/2018/09/pinterest-goku-timeseries-db/\"\u003e to address specific limitations\u003c/a\u003e in \u003ca href=\"http://opentsdb.net/\"\u003eOpenTSDB\u003c/a\u003e. You can read a detailed explanation of what motivated Pinterest in this \u003ca href=\"https://medium.com/pinterest-engineering/analyzing-time-series-for-pinterest-observability-95f8cc0c5885\"\u003earticle\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn a \u003ca href=\"https://medium.com/pinterest-engineering/improving-efficiency-of-goku-time-series-database-at-pinterest-part-3-116cfdba4cb9\"\u003erecent blog post\u003c/a\u003e, the Goku team introduced two features, a metrics namespace and providing top write-heavy metrics\u003cstrong\u003e,\u003c/strong\u003e to the client Observability team that helped them reduce the data stored on Goku. These innovations have significantly reduced data storage requirements. The metrics namespace organizes metric configurations, allowing for efficient data management. Meanwhile, the system for identifying top metrics helps the Observability team block unnecessary data, reducing stored time series by 37%.\u003c/p\u003e\n\n\u003cfigure\u003e\u003cimg alt=\" Example configurations of three namespaces named ns1, ns2, and ns3.\" data-src=\"news/2024/11/time-series-db-pinterest/en/resources/3image4-1730918405881.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/11/time-series-db-pinterest/en/resources/3image4-1730918405881.png\" rel=\"share\"/\u003e\n\u003cfigcaption\u003eFig 1: Example configurations of three namespaces named ns1, ns2, and ns3.\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eThe namespace configurations (Fig 1) are stored in a \u003ca href=\"https://medium.com/pinterest-engineering/serving-configuration-data-at-scale-with-high-availability-8612521c1108\"\u003edynamic shared config file\u003c/a\u003e watched by all hosts in the Goku ecosystem (Fig 2). Any moment the contents of this file change, the Goku process running on the hosts is notified, and it parses the new content to understand the changes.\u003c/p\u003e\n\n\u003cfigure\u003e\u003cimg alt=\"Fig 2: Goku architecture with namespace\" data-src=\"news/2024/11/time-series-db-pinterest/en/resources/8image1-1730918405881.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/11/time-series-db-pinterest/en/resources/8image1-1730918405881.png\" rel=\"share\"/\u003e\n\u003cfigcaption\u003eFig 2: Goku architecture with namespace\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eSeveral architectural changes further reduce infrastructure costs. Indexing improvements for metric names have cut memory usage from 12 GB to 3 GB per host. Additionally, the introduction of dictionary encoding in the Goku Compactor has eliminated out-of-memory issues, allowing for the use of less expensive hardware.\u003c/p\u003e\n\n\u003cfigure\u003e\u003cimg alt=\"Fig 3: Host level memory consumption for storing a metric name.\" data-src=\"news/2024/11/time-series-db-pinterest/en/resources/8image2-1730918405881.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/11/time-series-db-pinterest/en/resources/8image2-1730918405881.png\" rel=\"share\"/\u003e\n\u003cfigcaption\u003eFig 3: Host level memory consumption for storing a metric name.\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg alt=\"Fig 4: Memory usage drop per host doing heavy tier compaction after dictionary encoding.\" data-src=\"news/2024/11/time-series-db-pinterest/en/resources/6image3-1730918405881.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2024/11/time-series-db-pinterest/en/resources/6image3-1730918405881.png\" rel=\"share\"/\u003e\n\u003cfigcaption\u003eFig 4: Memory usage drop per host doing heavy tier compaction after dictionary encoding.\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003ePinterest has also focused on optimizing memory allocation. By addressing internal fragmentation and over-allocated memory, the team has achieved significant memory savings. For instance, changes to the folly::IOBuf structure have reduced memory usage by 8–11 GB per host.\u003c/p\u003e\n\n\u003cp\u003eTime-series compression algorithms are crucial for efficiently storing and processing large volumes of time-stamped data. These algorithms reduce the data size by identifying patterns and redundancies, allowing for faster query processing and reduced storage costs. Techniques such as \u003cstrong\u003edelta encoding\u003c/strong\u003e, \u003cstrong\u003edelta-of-delta encoding\u003c/strong\u003e, and \u003cstrong\u003eXOR\u003c/strong\u003e-based compression are employed to achieve significant storage efficiencies. For instance,\u003ca href=\"https://www.timescale.com/blog/time-series-compression-algorithms-explained/\"\u003e TimescaleDB, an open-source time-series database\u003c/a\u003e, uses these algorithms to achieve over 90% storage efficiency, translating into substantial cost savings and improved query performance.\u003c/p\u003e\n\n\u003cp\u003eMeta, in its Gorilla time-series database, also leverages compression techniques like \u003cstrong\u003edelta-of-delta\u003c/strong\u003e timestamps and \u003cstrong\u003eXOR’d floating point values\u003c/strong\u003e to reduce storage footprint by 10x, significantly enhancing query efficiency. More details can be found in their \u003ca href=\"https://www.vldb.org/pvldb/vol8/p1816-teller.pdf\"\u003eresearch paper\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003ePinterest\u0026#39;s efforts are part of a broader trend in the tech industry towards optimizing time series data management systems. Similar initiatives include \u003ca href=\"https://github.com/filodb/FiloDB\"\u003eApple\u0026#39;s FiloDB\u003c/a\u003e, \u003ca href=\"https://github.com/Netflix/atlas\"\u003eNetflix\u0026#39;s Atlas\u003c/a\u003e, \u003ca href=\"https://www.uber.com/blog/m3/\"\u003eUber’s M3\u003c/a\u003e, \u003ca href=\"https://www.vldb.org/pvldb/vol8/p1816-teller.pdf\"\u003eMeta Gorilla\u003c/a\u003e and \u003ca href=\"https://github.com/salesforce/Argus\"\u003eSalesforce\u0026#39;s Argus\u003c/a\u003e. These projects, like Goku, focus on efficient time-series data management and some are available as open-source solutions on platforms like GitHub. They represent a collective move towards more scalable and cost-effective data infrastructure.\u003c/p\u003e\n\n\u003cp\u003eThese enhancements have led Pinterest to achieve a \u003cstrong\u003e40% reduction in time series storage\u003c/strong\u003e and a \u003cstrong\u003e70% decrease in costs\u003c/strong\u003e. The improvements also allow Pinterest to accommodate a \u003cstrong\u003e30% increase in organic storage growth\u003c/strong\u003e without additional capacity. A relevant discussion on observability spending and efficiency can be found in this \u003ca href=\"https://www.reddit.com/r/sre/comments/1acdh9k/what_percentage_of_your_infrastructure_costs_do/\"\u003eReddit thread\u003c/a\u003e, where industry professionals share insights and benchmarks. For example, \u003ca href=\"https://www.reddit.com/r/Observability/comments/16ihplr/comment/k0kvaos/?utm_source=share\u0026amp;utm_medium=web3x\u0026amp;utm_name=web3xcss\u0026amp;utm_term=1\u0026amp;utm_content=share_button\"\u003eserverlessmom on Reddit\u003c/a\u003e, stated:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eTo level set: in many enterprises Observability is the #2 costs after actual infra/hosting. People are paying a lot to know what their software is doing.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Mohit-Palriwal\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMohit Palriwal\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-11-06T00:00:00Z",
  "modifiedTime": null
}
