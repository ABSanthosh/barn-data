{
  "id": "7ff4a2da-132c-4f80-b087-f9645efdd447",
  "title": "QCon London 2025 Day 1: Parsing Data from Space, Developer Joy, Local First Apps, Platforms",
  "link": "https://www.infoq.com/news/2025/04/day-one-qcon-london-2025/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "The 19th annual QCon London conference was held at The Queen Elizabeth II Conference Centre in London, England. This three-day event, organized by C4Media, consists of presentations by expert practitioners. Day One, scheduled on April 7th, 2025, included a keynote address by Dr. Kenneth Harris and presentations from five conference tracks. By Michael Redlich",
  "author": "Michael Redlich",
  "published": "Sun, 13 Apr 2025 05:45:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Developer Experience",
    "Java",
    "Platform Engineering",
    "QCon London 2025",
    "Architecture \u0026 Design",
    "Development",
    "news"
  ],
  "byline": "Michael Redlich",
  "length": 10450,
  "excerpt": "The 19th annual QCon London conference was held at The Queen Elizabeth II Conference Centre in London, England. This three-day event, organized by C4Media, consists of presentations by expert practiti",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250413214503/apple-touch-icon.png",
  "text": "Day One of the 19th annual QCon London conference was held on April 7th, 2025, at the Queen Elizabeth II Conference Centre in London, England. Key takeaways included: developer joy increases developer productivity; platforms are \"not an island,\" but organizations adopting them do so within an ecosystem; collaborative software can be fragile; and local-first software is a design principle by which the data on a user's device is the primary source of truth. What follows is a summary of the keynote address and highlighted presentations. Keynote Address: a Thirteen Billion Year Old Photograph Dr. Kenneth Harris, senior project manager at The Aerospace Corporation and Former Rocket Scientist and Integration Engineer at NASA, presented his keynote address entitled, A Thirteen Billion Year Old Photograph. Harris started his presentation with a picture of the 30 billion-year-old Tarantula Nebula as the basis for describing some history and details of infrared radiation. He described how infrared is used in the James Webb telescope and how the numerous images from the instruments in the telescope are processed. In 1800, while making measurements using a thermometer in the path of visible light, British astronomer Sir William Herschel stumbled upon a temperature change in the area that was just \"beyond red.\" Initially referred to as \"invisible heat,\" infrared radiation, or the wavelength range in the infrared spectrum, is used in many applications of the analytical sciences. Moving forward in time to 1929, Hungarian physicist Kálmán Tihanyi invented the first infrared camera. Harris described many details of the James Webb telescope, starting with the lens that allows the light into the telescope to operate the instrumentation, such as spectrometers. From there, Harris continued with additional details that included: 3D simulations of the various near- and mid-infrared instruments; the cosmic redshift; the temperature differences on each side of the sun shield (85℃ and -230℃); and what is inside the instrument module. The data packets from the instrument are processed using several file formats: .fits, Flexible Image Transport System; .json, JavaScript Object Notation; .ecsv, Enhanced Comma Separated Value; and .asdf, Advanced Scientific Data Format. Generating a final image involves layering the various images captured by the instrument. There are six steps: stack the images; assign blue images; assign green images; assign orange images; assign red images; and finally create the composite. Harris concluded his presentation by demonstrating the Mikulski Archive for Space Telescopes (MAST) portal, managed by the Space Telescope Science Institute (STSci). Entering a value, say, NGC 3324, in the target field will provide all the images and corresponding details of the Carina Nebula. Highlighted Presentations: Productivity is Messing Around and Having Fun | Local First – How To Build Software Which Still Works After the Acquihire | Your Platform is Not an Island: Embracing Evolution in Your Ecosystem Productivity Is Messing Around and Having Fun was presented by Holly Cummins, full-stack engineer, Building Quarkus at Red Hat, and Trisha Gee, developer champion and author of \"Head First Java\" (3rd Edition), \"97 Things Every Java Developer Should Know,\" and \"Getting to Know IntelliJ IDEA.\" Cummins and Gee kicked off their presentation by asking the question: \"Developer Joy and Developer Productivity Engineering: are these opposites, or the same?\" Cummins recalled a story in which her team was working harmoniously together, writing code for a project. The product manager approached her one day and asked, \"Why are you smiling?\" After stating that the team is happy, the product manager responded, \"Work is not a place to be happy!\" Fred Brooks, an American computer scientist and author of \"The Mythical Man-Month: Essays on Software Engineering,\" described the joys of the craft as: the sheer joy of making things; the pleasure of making things that are useful to other people; the fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work; the joy of always learning; and the delight of working in such a tractable medium. Joy in the workplace has business value, but sometimes management doesn't recognize that. Aristotle once said, \"pleasure in the job puts perfection in the work.\" The research, which can be measured, shows that fun is good for business. Examples include: Effects of Workplace Fun on Employee Behaviors: Focused on Generation Y in the Hospitality Industry from UMass Amherst; Positive Intelligence from the Harvard Business Review; and Happiness and Productivity from The University of Warwick. The 2014 State of DevOps Report concluded that job satisfaction is the number one predictor of organizational performance. The SPACE Framework, introduced in 2021, is a formal approach to understanding and enhancing developer productivity. Cummins and Gee focused on the Activity and Efficiency \u0026 Flow dimensions of this framework. For the Activity dimension, the use of incentives to produce more lines of code was explored. For the Efficiency \u0026 Flow dimension, Cummins and Gee introduced the Default Mode Network, a \"system of connected brain areas that show increased activity when a person is not focused on what is happening around them.\" For example, according to a Business Insider news piece from 2016, 72% of people get their best ideas while showering. Cummins and Gee shared their own personal activities on how they are more productive. In summary, Cummins and Gee offered these key takeaways: be careful how productivity is measured because that metric determines what you will get (do not use LOC!); automate drudgery that stops developers from being effective at their job; being happier makes developers better at their job; having down time (and showers, or knitting jumpers) makes developers better at their job. InfoQ will follow-up with a more detailed news story. Local First – How to Build Software Which Still Works after the Acquihire was presented by Alex Good, software engineer at Ink \u0026 Switch and core contributor on the Automerge CRDT Library. Good started his presentation with a description of his local workout tracker application that was simple until he was asked for it to be collaborative. This required tasks such as: design and implement a backend server API; synchronization related to updates; establish and maintain a server; and authentication and authorization. This creates a problem by which users now depend on servers they cannot control or understand. As once stated by Leslie Lamport, American computer scientist and mathematician: A distributed system is one in which the failure of a computer you didn't even know existed can render your computer unusable. Local-first software is a \"design principle in which the data on the user's device is the primary source of truth; other copies on servers or other users' devices are secondary.\" Attributes include: no spinners; multi-device; using the network is optional; seamless collaboration; secure and private; and ownership and control. An example of local-first is GitHub. However, there are synchronization issues that can be avoided using a finer-grained data model for each commit over the \"snapshot of the filesystem\" approach. This provides a default automatic resolution of conflicts to access conflicting values during synchronization. This is useful for more complex applications. Collaboration as version control provides benefits, such as: a generic infrastructure; reduced complexity; and improved management of change. Your Platform is Not an Island: Embracing Evolution in Your Ecosystem, was presented by Rachael Wonnacott, associate director for container platform engineering at Fidelity International. Wonnacott kicked off her presentation by stating an organization's platform is not an island. The developer experience matters in platform engineering but shouldn't be a major focus. She maintained that organizations are an ecosystem where teams and people interact as a living, breathing system. Organizations grow organically, but there are notable differences in the spectrum of startups and large corporations. Historically, an on-premise infrastructure created an application, packaged it, and threw it over the wall, as it were, to the customer. Conway's Law, a principle created by American computer scientist Melvin Conway, is defined as: \"any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.\" The reality within the enterprise, Wonnacott explained, is that on-premise dependencies are essentially technical debt in disguise. A Fidelity International container platform case study revealed that \"on average, a cloud developer only spends 11% of their time actually writing code. Instead, about 3x as much time is spent working on boilerplate, plumbing, debugging pipelines, waiting, and writing \"code about code\" that has little to do with their business.\" Ideally, developers should only focus on applications and data in cloud development. Things such as runtime, virtualization and storage should be handled by others. Cloud operations messaging has evolved using a new cloud operating model analogy, where developers now have a choice between the existing model, known as the \"Public Cloud House,\" or the \"Kubernetes Hotel,\" offering a fully-managed platform that incorporates container hosting, platform compliance, data and integration services, all of which can be isolated and segregated from one another. The application lifecycle could be a reference to a platform being an island, but platforms should do more than connect; they should amplify. There should be a dynamic configuration generation approach such that the developer entry point is simplified using dynamic configuration, and deployment mechanisms should be transparent to the end user. Wonnacott described how platform engineering can be used to improve the application lifecycle that strikes a balance between developer experience and business outcomes. In conclusion, Wonnacott stated that a platform can be a bridge, not an island. About the Author Michael Redlich",
  "image": "https://res.infoq.com/news/2025/04/day-one-qcon-london-2025/en/headerimage/java-istock-image-01-1744522896161.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eDay One of the 19th annual \u003ca href=\"https://qconlondon.com/\"\u003eQCon London\u003c/a\u003e conference was held on April 7th, 2025, at the \u003ca href=\"https://qeiicentre.london/\"\u003eQueen Elizabeth II Conference Centre\u003c/a\u003e in London, England. Key takeaways included: developer joy increases developer productivity; platforms are \u0026#34;not an island,\u0026#34; but organizations adopting them do so within an ecosystem; collaborative software can be fragile; and local-first software is a design principle by which the data on a user\u0026#39;s device is the primary source of truth.\u003c/p\u003e\n\n\u003cp\u003eWhat follows is a summary of the keynote address and highlighted presentations.\u003c/p\u003e\n\n\u003ch4\u003eKeynote Address: a Thirteen Billion Year Old Photograph\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://qconlondon.com/speakers/kennethharris\"\u003eDr. Kenneth Harris\u003c/a\u003e, senior project manager at The Aerospace Corporation and Former Rocket Scientist and Integration Engineer at NASA, presented his keynote address entitled, \u003ca href=\"https://qconlondon.com/keynote/apr2025/thirteen-billion-year-old-photograph\"\u003eA Thirteen Billion Year Old Photograph\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eHarris started his presentation with a picture of the 30 billion-year-old \u003ca href=\"https://www.britannica.com/place/Tarantula-Nebula\"\u003eTarantula Nebula\u003c/a\u003e as the basis for describing some history and details of infrared radiation. He described how infrared is used in the \u003ca href=\"https://science.nasa.gov/mission/webb/\"\u003eJames Webb\u003c/a\u003e telescope and how the numerous images from the instruments in the telescope are processed.\u003c/p\u003e\n\n\u003cp\u003eIn 1800, while making measurements using a thermometer in the path of visible light, British astronomer \u003ca href=\"https://www.britannica.com/biography/William-Herschel\"\u003eSir William Herschel\u003c/a\u003e stumbled upon a temperature change in the area that was just \u0026#34;beyond red.\u0026#34; Initially referred to as \u0026#34;invisible heat,\u0026#34; infrared radiation, or the wavelength range in the infrared spectrum, is used in many applications of the analytical sciences. Moving forward in time to 1929, Hungarian physicist \u003ca href=\"https://dbpedia.org/page/K%C3%A1lm%C3%A1n_Tihanyi\"\u003eKálmán Tihanyi\u003c/a\u003e invented the first infrared camera.\u003c/p\u003e\n\n\u003cp\u003eHarris described many details of the James Webb telescope, starting with the lens that allows the light into the telescope to operate the instrumentation, such as spectrometers.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/04/day-one-qcon-london-2025/en/resources/1infoq-webb-instrument-1744522894357.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/day-one-qcon-london-2025/en/resources/1infoq-webb-instrument-1744522894357.jpg\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eFrom there, Harris continued with additional details that included: 3D simulations of the various near- and mid-infrared instruments; the \u003ca href=\"https://science.howstuffworks.com/cosmological-redshift.htm\"\u003ecosmic redshift\u003c/a\u003e; the temperature differences on each side of the sun shield (85℃ and -230℃); and what is inside the instrument module.\u003c/p\u003e\n\n\u003cp\u003eThe data packets from the instrument are processed using several file formats: \u003cstrong\u003e\u003ccode\u003e.fits\u003c/code\u003e\u003c/strong\u003e, Flexible Image Transport System; \u003cstrong\u003e\u003ccode\u003e.json\u003c/code\u003e\u003c/strong\u003e, JavaScript Object Notation; \u003cstrong\u003e\u003ccode\u003e.ecsv\u003c/code\u003e\u003c/strong\u003e, Enhanced Comma Separated Value; and \u003cstrong\u003e\u003ccode\u003e.asdf\u003c/code\u003e\u003c/strong\u003e, Advanced Scientific Data Format.\u003c/p\u003e\n\n\u003cp\u003eGenerating a final image involves layering the various images captured by the instrument. There are six steps: stack the images; assign blue images; assign green images; assign orange images; assign red images; and finally create the composite.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/04/day-one-qcon-london-2025/en/resources/1infoq-webb-image-layering-1744522894357.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/04/day-one-qcon-london-2025/en/resources/1infoq-webb-image-layering-1744522894357.jpg\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eHarris concluded his presentation by demonstrating the \u003ca href=\"https://mast.stsci.edu/portal/Mashup/Clients/Mast/Portal.html\"\u003eMikulski Archive for Space Telescopes\u003c/a\u003e (MAST) portal, managed by the \u003ca href=\"http://www.stsci.edu/\"\u003eSpace Telescope Science Institute\u003c/a\u003e (STSci). Entering a value, say, NGC 3324, in the target field will provide all the images and corresponding details of the \u003ca href=\"https://esahubble.org/images/opo0834a/\"\u003eCarina Nebula\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eHighlighted Presentations: Productivity is Messing Around and Having Fun | Local First – How To Build Software Which Still Works After the Acquihire | Your Platform is Not an Island: Embracing Evolution in Your Ecosystem\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://qconlondon.com/presentation/apr2025/productivity-messing-around-and-having-fun\"\u003eProductivity Is Messing Around and Having Fun\u003c/a\u003e\u003c/strong\u003e was presented by \u003ca href=\"https://qconlondon.com/speakers/hollycummins\"\u003eHolly Cummins\u003c/a\u003e, full-stack engineer, Building Quarkus at Red Hat, and \u003ca href=\"https://qconlondon.com/speakers/trishagee\"\u003eTrisha Gee\u003c/a\u003e, developer champion and author of \u0026#34;\u003cem\u003eHead First Java\u003c/em\u003e\u0026#34; (3rd Edition), \u0026#34;\u003cem\u003e97 Things Every Java Developer Should Know\u003c/em\u003e,\u0026#34; and \u0026#34;\u003cem\u003eGetting to Know IntelliJ IDEA\u003c/em\u003e.\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eCummins and Gee kicked off their presentation by asking the question: \u0026#34;\u003cem\u003eDeveloper Joy and Developer Productivity Engineering: are these opposites, or the same?\u003c/em\u003e\u0026#34; Cummins recalled a story in which her team was working harmoniously together, writing code for a project. The product manager approached her one day and asked, \u0026#34;\u003cem\u003eWhy are you smiling?\u003c/em\u003e\u0026#34; After stating that the team is happy, the product manager responded, \u0026#34;\u003cem\u003eWork is \u003cstrong\u003enot\u003c/strong\u003e a place to be happy!\u003c/em\u003e\u0026#34;\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.britannica.com/biography/Fred-Brooks\"\u003eFred Brooks\u003c/a\u003e, an American computer scientist and author of \u0026#34;\u003cem\u003eThe Mythical Man-Month: Essays on Software Engineering\u003c/em\u003e,\u0026#34; described the joys of the craft as: the sheer joy of making things; the pleasure of making things that are useful to other people; the fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work; the joy of always learning; and the delight of working in such a tractable medium.\u003c/p\u003e\n\n\u003cp\u003eJoy in the workplace has business value, but sometimes management doesn\u0026#39;t recognize that. Aristotle once said, \u0026#34;\u003cem\u003epleasure in the job puts perfection in the work.\u003c/em\u003e\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eThe research, which can be measured, shows that fun is good for business. Examples include: \u003ca href=\"https://scholarworks.umass.edu/entities/publication/4d05c3a5-69a6-43d5-9576-93931f29fbc5\"\u003eEffects of Workplace Fun on Employee Behaviors: Focused on Generation Y in the Hospitality Industry\u003c/a\u003e from UMass Amherst; \u003ca href=\"https://hbr.org/2012/01/positive-intelligence\"\u003ePositive Intelligence\u003c/a\u003e from the Harvard Business Review; and \u003ca href=\"https://www.journals.uchicago.edu/doi/10.1086/681096\"\u003eHappiness and Productivity\u003c/a\u003e from The University of Warwick.\u003c/p\u003e\n\n\u003cp\u003eThe 2014 \u003ca href=\"https://services.google.com/fh/files/misc/state-of-devops-2014.pdf\"\u003eState of DevOps Report\u003c/a\u003e concluded that job satisfaction is the number one predictor of organizational performance.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://queue.acm.org/detail.cfm?id=3454124\"\u003eSPACE Framework\u003c/a\u003e, introduced in 2021, is a formal approach to understanding and enhancing developer productivity. Cummins and Gee focused on the \u003cstrong\u003eActivity\u003c/strong\u003e and \u003cstrong\u003eEfficiency \u0026amp; Flow\u003c/strong\u003e dimensions of this framework.\u003c/p\u003e\n\n\u003cp\u003eFor the \u003cstrong\u003eActivity\u003c/strong\u003e dimension, the use of incentives to produce more lines of code was explored.\u003c/p\u003e\n\n\u003cp\u003eFor the \u003cstrong\u003eEfficiency \u0026amp; Flow\u003c/strong\u003e dimension, Cummins and Gee introduced the \u003ca href=\"https://www.psychologytoday.com/gb/basics/default-mode-network\"\u003eDefault Mode Network\u003c/a\u003e, a \u0026#34;\u003cem\u003esystem of connected brain areas that show increased activity when a person is not focused on what is happening around them.\u003c/em\u003e\u0026#34; For example, according to a Business Insider \u003ca href=\"https://www.businessinsider.com/why-people-get-their-best-ideas-in-the-shower-2016-1\"\u003enews piece\u003c/a\u003e from 2016, 72% of people get their best ideas while showering. Cummins and Gee shared their own personal activities on how they are more productive.\u003c/p\u003e\n\n\u003cp\u003eIn summary, Cummins and Gee offered these key takeaways: be careful how productivity is measured because that metric determines what you will get (do not use LOC!); automate drudgery that stops developers from being effective at their job; being happier makes developers better at their job; having down time (and showers, or knitting jumpers) makes developers better at their job.\u003c/p\u003e\n\n\u003cp\u003eInfoQ will follow-up with a more detailed news story.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://qconlondon.com/presentation/apr2025/local-first-how-build-software-which-still-works-after-acquihire\"\u003eLocal First – How to Build Software Which Still Works after the Acquihire\u003c/a\u003e\u003c/strong\u003e was presented by \u003ca href=\"https://qconlondon.com/speakers/alexgood\"\u003eAlex Good\u003c/a\u003e, software engineer at Ink \u0026amp; Switch and core contributor on the Automerge CRDT Library.\u003c/p\u003e\n\n\u003cp\u003eGood started his presentation with a description of his local workout tracker application that was simple until he was asked for it to be collaborative. This required tasks such as: design and implement a backend server API; synchronization related to updates; establish and maintain a server; and authentication and authorization. This creates a problem by which users now depend on servers they cannot control or understand. As once stated by \u003ca href=\"https://www.lamport.org/\"\u003eLeslie Lamport\u003c/a\u003e, American computer scientist and mathematician:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eA distributed system is one in which the failure of a computer you didn\u0026#39;t even know existed can render your computer unusable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.inkandswitch.com/essay/local-first/\"\u003eLocal-first software\u003c/a\u003e is a \u0026#34;\u003cem\u003edesign principle in which the data on the user\u0026#39;s device is the primary source of truth; other copies on servers or other users\u0026#39; devices are secondary.\u003c/em\u003e\u0026#34; Attributes include: no spinners; multi-device; using the network is optional; seamless collaboration; secure and private; and ownership and control.\u003c/p\u003e\n\n\u003cp\u003eAn example of local-first is GitHub. However, there are synchronization issues that can be avoided using a finer-grained data model for each commit over the \u0026#34;snapshot of the filesystem\u0026#34; approach. This provides a default automatic resolution of conflicts to access conflicting values during synchronization. This is useful for more complex applications.\u003c/p\u003e\n\n\u003cp\u003eCollaboration as version control provides benefits, such as: a generic infrastructure; reduced complexity; and improved management of change.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://qconlondon.com/presentation/apr2025/your-platform-not-island-embracing-evolution-your-ecosystem\"\u003eYour Platform is Not an Island: Embracing Evolution in Your Ecosystem\u003c/a\u003e\u003c/strong\u003e, was presented by \u003ca href=\"https://qconlondon.com/speakers/rachaelwonnacott\"\u003eRachael Wonnacott\u003c/a\u003e, associate director for container platform engineering at Fidelity International.\u003c/p\u003e\n\n\u003cp\u003eWonnacott kicked off her presentation by stating an organization\u0026#39;s platform is not an island. The developer experience matters in platform engineering but shouldn\u0026#39;t be a major focus. She maintained that organizations are an ecosystem where teams and people interact as a living, breathing system. Organizations grow organically, but there are notable differences in the spectrum of startups and large corporations.\u003c/p\u003e\n\n\u003cp\u003eHistorically, an on-premise infrastructure created an application, packaged it, and threw it over the wall, as it were, to the customer.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.melconway.com/Home/Conways_Law.html\"\u003eConway\u0026#39;s Law\u003c/a\u003e, a principle created by American computer scientist \u003ca href=\"https://www.melconway.com/Home/Home.html\"\u003eMelvin Conway\u003c/a\u003e, is defined as: \u0026#34;\u003cem\u003eany organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization\u0026#39;s communication structure.\u003c/em\u003e\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eThe reality within the enterprise, Wonnacott explained, is that on-premise dependencies are essentially technical debt in disguise. A Fidelity International container platform case study revealed that \u0026#34;\u003cem\u003eon average, a cloud developer only spends 11% of their time actually writing code. Instead, about 3x as much time is spent working on boilerplate, plumbing, debugging pipelines, waiting, and writing \u0026#34;code about code\u0026#34; that has little to do with their business.\u003c/em\u003e\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eIdeally, developers should only focus on applications and data in cloud development. Things such as runtime, virtualization and storage should be handled by others.\u003c/p\u003e\n\n\u003cp\u003eCloud operations messaging has evolved using a new cloud operating model analogy, where developers now have a choice between the existing model, known as the \u0026#34;Public Cloud House,\u0026#34; or the \u0026#34;Kubernetes Hotel,\u0026#34; offering a fully-managed platform that incorporates container hosting, platform compliance, data and integration services, all of which can be isolated and segregated from one another.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ca href=\"https://www.couchbase.com/blog/application-development-life-cycle/\"\u003eapplication lifecycle\u003c/a\u003e could be a reference to a platform being an island, but platforms should do more than connect; they should amplify. There should be a dynamic configuration generation approach such that the developer entry point is simplified using dynamic configuration, and deployment mechanisms should be transparent to the end user.\u003c/p\u003e\n\n\u003cp\u003eWonnacott described how platform engineering can be used to improve the application lifecycle that strikes a balance between developer experience and business outcomes.\u003c/p\u003e\n\n\u003cp\u003eIn conclusion, Wonnacott stated that a platform can be a bridge, not an island.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Michael-Redlich\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMichael Redlich\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2025-04-13T00:00:00Z",
  "modifiedTime": null
}
