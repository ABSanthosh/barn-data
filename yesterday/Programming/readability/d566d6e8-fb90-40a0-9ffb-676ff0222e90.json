{
  "id": "d566d6e8-fb90-40a0-9ffb-676ff0222e90",
  "title": "The Gemini API and the Internet of Things",
  "link": "https://developers.googleblog.com/en/the-gemini-api-and-the-internet-of-things/",
  "description": "The Gemini API and ESP32 microcontroller simplify custom voice commands for IoT devices, leveraging speech recognition for devices to understand and react to custom commands, bridging the gap between digital and physical worlds.",
  "author": "",
  "published": "",
  "source": "http://feeds.feedburner.com/GDBcode",
  "categories": null,
  "byline": "Paul Ruiz",
  "length": 7736,
  "excerpt": "The Gemini API and ESP32 microcontroller simplify custom voice commands for IoT devices, leveraging speech recognition for devices to understand and react to custom commands, bridging the gap between digital and physical worlds.",
  "siteName": "",
  "favicon": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/meta/apple-touch-icon.png",
  "text": "The Internet of Things (IoT) space is changing rapidly with the introduction of artificial intelligence into everything. Thanks to the advancement in AI and cloud services, simple microcontrollers, along with standard sensors and actuators, can be integrated into a variety of things to create interactive intelligent devices. In this post, we’ll explore how IoT developers can leverage the Gemini REST API to create devices that both understand and react to custom speech commands, bridging the gap between the digital and physical worlds to solve practical and previously challenging problems.To keep things simple, this post will stick to high level concepts, but you can see the full code example and device schematic leveraging the ESP32 microcontroller on GitHub.From Voice to Action: The power of Speech Recognition and Custom FunctionsTraditionally, integrating speech recognition into IoT devices, especially those with limited memory, has been a complex task. While solutions like LiteRT for Microcontrollers enable you to run basic models to recognize keywords, human language is a much broader and more nuanced input that developers can use to their advantage. The Gemini API simplifies this by providing a powerful, cloud-based solution that understands a wide range of spoken language, even across different languages, all from a single tool, while also being able to determine what actions an embedded device should take based on user input.These capabilities rely on the Gemini API’s ability to process and interpret audio data from an IoT device, as well as determine the next step the device should take, following this process:1. Audio capture: The IoT device, equipped with a microphone, captures a spoken sentence.2. Audio encoding: Speech is encoded into a format for internet transmission. In the official example mentioned above, we convert analog signals to WAV format audio, then to a base64 encoded string for the Gemini API.3. API request: The encoded audio is sent to the Gemini API via a REST API call. This call includes instructions, such as requesting the text of the spoken command, or directing Gemini to select a predefined custom function (e.g., turning on lights). If using the Gemini API’s function calling feature, you must provide function definitions, including names, descriptions, and parameters, within your request JSON.4. Processing: The Gemini API’s AI models analyze the encoded audio and determine the appropriate response.5. Response: The API returns information to the IoT device, such as a transcript of the audio, the next function to call, or a text response with further instructions.For example, let’s consider controlling an LED with voice commands to turn it on or off and change its color. We can define two functions: one to toggle the LED and another to change its color. Instead of limiting the color to a preset range, we can allow any RGB value from 0 to 255, offering over 16 million possible combinations. Sorry, your browser doesn't support playback for this video The following request, including the base64 encoded audio string ($DATA), demonstrates this: { \"contents\": [ { \"parts\": [ { \"text\": \"Trigger a function based on this audio input.\" }, { \"inline_data\": { \"mime_type\": \"audio/x-wav\", \"data\": \"$DATA\" } } ] } ], \"tools\": [ { \"function_declarations\": [ { \"name\": \"changeColor\", \"description\": \"Change the default color for the lights in an RGB format. Example: Green would be 0 255 0\", \"parameters\": { \"type\": \"object\", \"properties\": { \"red\": { \"type\": \"integer\", \"description\": \"A value from 0 to 255 for the color RED in an RGB color code\" }, \"green\": { \"type\": \"integer\", \"description\": \"A value from 0 to 255 for the color GREEN in an RGB color code\" }, \"blue\": { \"type\": \"integer\", \"description\": \"A value from 0 to 255 for the color BLUE in an RGB color code\" } }, \"required\": [ \"red\", \"green\", \"blue\" ] } }, { \"name\": \"toggleLights\", \"description\": \"Turn on or off the lights\", \"parameters\": { \"type\": \"object\", \"properties\": { \"toggle\": { \"type\": \"boolean\", \"description\": \"Determine if the lights should be turned on or off.\" } }, \"required\": [ \"toggle\" ] } } ] } ] } While this is a very simplified example, it does highlight numerous practical benefits for IoT development:Enhanced user experience: Developers can easily support voice input, providing a more intuitive and natural interaction, even for low-memory devices.Simplified command handling: This setup eliminates the need for complex parsing logic, such as trying to break down each spoken command or waiting for more complex manual inputs to pick the next function to run.Dynamic function execution: The Gemini AI intelligently selects the appropriate action based on user intent, making devices more dynamic and capable of complex operations.Contextual understanding: While older speech recognition patterns needed a structure similar to “turn on the lights” or “set the brightness to 70%”, the Gemini API can understand more general statements, such as “it’s dark in here!”, “give me some reading light”, or \"make it dark and spooky in here\" to provide an appropriate solution to users without it being specified.By combining function calling and audio input with the Gemini API, developers can create IoT devices that intelligently respond to spoken commands.Turning Ideas into RealityWhile audio and function calling are essential tools for enhancing IoT devices with AI, there’s so much more that can be used to create amazing and useful intelligent devices. Some of the potential areas for exploration include:Smart home automation: Control lights, appliances, and other devices with voice commands, improving convenience and accessibility.Robotics: Issue spoken commands to robots or send streams of images or video to the Gemini API for navigation, task execution, and interaction, automating repetitive tasks and providing assistance in various settings.Industrial IoT: Enhance specialized machinery and equipment to increase productivity and reduce risk for the people that rely on them.Next StepsWe’re excited to see all of the great things you build with the Gemini API! Your applications can transform the way we interact with the world around us and solve real world problems with the power of AI. Please share your projects with us on Google AI for Developers on LinkedIn and Google AI Developers on X.",
  "image": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/Gemini-API-IoT_1.2e16d0ba.fill-1200x600.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n    \n      \n    \n\n    \n\n    \n\n    \n\n    \n    \u003cdiv\u003e\n          \n\n\u003cdiv\u003e\n    \u003cp data-block-key=\"pv1ln\"\u003eThe Internet of Things (IoT) space is changing rapidly with the introduction of artificial intelligence into \u003ci\u003eeverything\u003c/i\u003e. Thanks to the advancement in AI and cloud services, simple microcontrollers, along with standard sensors and actuators, can be integrated into a variety of \u003ci\u003ethings\u003c/i\u003e to create interactive intelligent devices. In this post, we’ll explore how IoT developers can leverage the Gemini REST API to create devices that both understand and react to custom speech commands, bridging the gap between the digital and physical worlds to solve practical and previously challenging problems.\u003c/p\u003e\u003cp data-block-key=\"4m0mj\"\u003eTo keep things simple, this post will stick to high level concepts, but you can see the full code example and device schematic leveraging the \u003ca href=\"https://www.espressif.com/en/products/devkits\"\u003eESP32 microcontroller\u003c/a\u003e \u003ca href=\"https://github.com/google-gemini/cookbook/tree/main/examples/iot/esp32/voice_led_controller\"\u003eon GitHub\u003c/a\u003e.\u003c/p\u003e\u003ch2 data-block-key=\"4coo5\"\u003e\u003cb\u003e\u003cbr/\u003e\u003c/b\u003eFrom Voice to Action: The power of Speech Recognition and Custom Functions\u003c/h2\u003e\u003cp data-block-key=\"5u8eb\"\u003eTraditionally, integrating speech recognition into IoT devices, especially those with limited memory, has been a complex task. While solutions like \u003ca href=\"https://ai.google.dev/edge/litert/microcontrollers/overview\"\u003eLiteRT for Microcontrollers\u003c/a\u003e enable you to run basic models to recognize keywords, human language is a much broader and more nuanced input that developers can use to their advantage. The Gemini API simplifies this by providing a powerful, cloud-based solution that understands a wide range of spoken language, even across different languages, all from a single tool, while also being able to determine what actions an embedded device should take based on user input.\u003c/p\u003e\u003cp data-block-key=\"eqooq\"\u003eThese capabilities rely on the Gemini API’s ability to process and interpret audio data from an IoT device, as well as determine the next step the device should take, following this process:\u003c/p\u003e\u003cp data-block-key=\"3vqvt\"\u003e\u003cb\u003e1. Audio capture\u003c/b\u003e: The IoT device, equipped with a microphone, captures a spoken sentence.\u003c/p\u003e\u003cp data-block-key=\"1bniv\"\u003e\u003cb\u003e2. Audio encoding\u003c/b\u003e: Speech is encoded into a format for internet transmission. In the official example mentioned above, we convert analog signals to WAV format audio, then to a base64 encoded string for the Gemini API.\u003c/p\u003e\u003cp data-block-key=\"hdjq\"\u003e\u003cb\u003e3. API request\u003c/b\u003e: The encoded audio is sent to the Gemini API via a REST API call. This call includes instructions, such as requesting the text of the spoken command, or directing Gemini to select a predefined custom function (e.g., turning on lights). If using the Gemini API’s \u003ca href=\"https://ai.google.dev/gemini-api/docs/function-calling\"\u003efunction calling feature\u003c/a\u003e, you must provide function definitions, including names, descriptions, and parameters, within your request JSON.\u003c/p\u003e\u003cp data-block-key=\"a3v97\"\u003e\u003cb\u003e4. Processing\u003c/b\u003e: The Gemini API’s AI models analyze the encoded audio and determine the appropriate response.\u003c/p\u003e\u003cp data-block-key=\"di1k0\"\u003e\u003cb\u003e5. Response\u003c/b\u003e: The API returns information to the IoT device, such as a transcript of the audio, the next function to call, or a text response with further instructions.\u003c/p\u003e\u003cp data-block-key=\"94s31\"\u003e\u003cbr/\u003eFor example, let’s consider controlling an LED with voice commands to turn it on or off and change its color. We can define two functions: one to toggle the LED and another to change its color. Instead of limiting the color to a preset range, we can allow any RGB value from 0 to 255, offering over \u003ci\u003e16 million\u003c/i\u003e possible combinations.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \n        \u003cvideo autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" poster=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/wagtailvideo-ost6acm5_thumb.jpg\"\u003e\n\u003csource src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/dark-and-spooky.mp4\" type=\"video/mp4\"/\u003e\n\u003cp\u003eSorry, your browser doesn\u0026#39;t support playback for this video\u003c/p\u003e\n\n\u003c/video\u003e\n    \n    \n\u003c/div\u003e  \u003cp data-block-key=\"pv1ln\"\u003eThe following request, including the base64 encoded audio string (\u003ccode\u003e$DATA\u003c/code\u003e), demonstrates this:\u003c/p\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026#34;contents\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003e\u0026#34;parts\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e\u0026#34;text\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;Trigger a function based on this audio input.\u0026#34;\u003c/span\u003e\n\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e\u0026#34;inline_data\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e\u0026#34;mime_type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;audio/x-wav\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e\u0026#34;data\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;$DATA\u0026#34;\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e],\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026#34;tools\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003e\u0026#34;function_declarations\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;changeColor\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;Change the default color for the lights in an RGB format. Example: Green would be 0 255 0\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e\u0026#34;parameters\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;object\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e\u0026#34;properties\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e\u0026#34;red\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                                \u003c/span\u003e\u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;integer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                                \u003c/span\u003e\u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;A value from 0 to 255 for the color RED in an RGB color code\u0026#34;\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e\u0026#34;green\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                                \u003c/span\u003e\u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;integer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                                \u003c/span\u003e\u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;A value from 0 to 255 for the color GREEN in an RGB color code\u0026#34;\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e\u0026#34;blue\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                                \u003c/span\u003e\u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;integer\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                                \u003c/span\u003e\u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;A value from 0 to 255 for the color BLUE in an RGB color code\u0026#34;\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e\u0026#34;required\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e\u0026#34;red\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e\u0026#34;green\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e\u0026#34;blue\u0026#34;\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;toggleLights\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;Turn on or off the lights\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e\u0026#34;parameters\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;object\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e\u0026#34;properties\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e\u0026#34;toggle\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n\u003cspan\u003e                                \u003c/span\u003e\u003cspan\u003e\u0026#34;type\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;boolean\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n\u003cspan\u003e                                \u003c/span\u003e\u003cspan\u003e\u0026#34;description\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;Determine if the lights should be turned on or off.\u0026#34;\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e\u0026#34;required\u0026#34;\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\n\u003cspan\u003e                            \u003c/span\u003e\u003cspan\u003e\u0026#34;toggle\u0026#34;\u003c/span\u003e\n\u003cspan\u003e                        \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e                    \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e                \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e            \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cdiv\u003e\n    \u003cp data-block-key=\"pv1ln\"\u003eWhile this is a very simplified example, it does highlight numerous practical benefits for IoT development:\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"4ntcd\"\u003e\u003cb\u003eEnhanced user experience\u003c/b\u003e: Developers can easily support voice input, providing a more intuitive and natural interaction, even for low-memory devices.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"b61rv\"\u003e\u003cb\u003eSimplified command handling\u003c/b\u003e: This setup eliminates the need for complex parsing logic, such as trying to break down each spoken command or waiting for more complex manual inputs to pick the next function to run.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"aapqq\"\u003e\u003cb\u003eDynamic function execution\u003c/b\u003e: The Gemini AI intelligently selects the appropriate action based on \u003ci\u003euser intent\u003c/i\u003e, making devices more dynamic and capable of complex operations.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"fal5u\"\u003e\u003cb\u003eContextual understanding\u003c/b\u003e: While older speech recognition patterns needed a structure similar to “turn on the lights” or “set the brightness to 70%”, the Gemini API can understand more general statements, such as “it’s dark in here!”, “give me some reading light”, or \u0026#34;make it dark and spooky in here\u0026#34; to provide an appropriate solution to users without it being specified.\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"e01ts\"\u003eBy combining function calling and audio input with the Gemini API, developers can create IoT devices that intelligently respond to spoken commands.\u003c/p\u003e\u003ch2 data-block-key=\"1unht\"\u003e\u003cb\u003e\u003cbr/\u003e\u003c/b\u003eTurning Ideas into Reality\u003c/h2\u003e\u003cp data-block-key=\"7matu\"\u003eWhile audio and function calling are essential tools for enhancing IoT devices with AI, there’s so much more that can be used to create amazing and useful intelligent devices. Some of the potential areas for exploration include:\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"1r8lv\"\u003e\u003cb\u003eSmart home automation\u003c/b\u003e: Control lights, appliances, and other devices with voice commands, improving convenience and accessibility.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"cf2e5\"\u003e\u003cb\u003eRobotics\u003c/b\u003e: Issue spoken commands to robots or send streams of images or video to the Gemini API for navigation, task execution, and interaction, automating repetitive tasks and providing assistance in various settings.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"69lu9\"\u003e\u003cb\u003eIndustrial IoT\u003c/b\u003e: Enhance specialized machinery and equipment to increase productivity and reduce risk for the people that rely on them.\u003c/li\u003e\u003c/ul\u003e\u003ch2 data-block-key=\"2kgts\"\u003e\u003cbr/\u003eNext Steps\u003c/h2\u003e\u003cp data-block-key=\"2qfqg\"\u003eWe’re excited to see all of the great things you build with the Gemini API! Your applications can transform the way we interact with the world around us and solve real world problems with the power of AI. Please share your projects with us on \u003ca href=\"https://www.linkedin.com/showcase/googleaidevs/\"\u003eGoogle AI for Developers on LinkedIn\u003c/a\u003e and \u003ca href=\"https://x.com/googleaidevs\"\u003eGoogle AI Developers on X\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e \n      \u003c/div\u003e\n    \n\n    \n\n    \n    \n    \n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-03-31T00:00:00Z",
  "modifiedTime": null
}
