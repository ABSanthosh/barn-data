{
  "id": "73b3bdc8-f958-4fea-9452-7a9f2919635c",
  "title": "Dragonfly v2.2.0 Released: Rust Client, P2P Upgrades, and Enhanced Image Acceleration",
  "link": "https://www.infoq.com/news/2025/01/dragonfly-rust-client/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "In January, the Cloud Native Computing Foundation (CNCF) announced the release of Dragonfly version 2.2.0, introducing several significant enhancements to the open-source, peer-to-peer (P2P) file distribution and image acceleration system. By Claudio Masolo",
  "author": "Claudio Masolo",
  "published": "Fri, 31 Jan 2025 20:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Rust",
    "DevOps",
    "news"
  ],
  "byline": "Claudio Masolo",
  "length": 4795,
  "excerpt": "In January, the Cloud Native Computing Foundation (CNCF) announced the release of Dragonfly version 2.2.0, introducing several significant enhancements to the open-source, peer-to-peer (P2P) file dist",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250129235850/apple-touch-icon.png",
  "text": "In January, the Cloud Native Computing Foundation (CNCF) announced the release of Dragonfly version 2.2.0, introducing several significant enhancements to the open-source, peer-to-peer (P2P) file distribution and image acceleration system. Dragonfly is an open-source, peer-to-peer (P2P) based system designed to enhance the efficiency of large-scale file distribution and image acceleration. Leveraging idle bandwidth from peers accelerates data distribution across various domains, including image and file distribution, AI model dissemination, and dataset sharing. Key features of Dragonfly include non-intrusive support for multiple container runtimes and download tools, configurable peer settings such as load and traffic limits, and mechanisms to ensure file consistency and isolate exceptions to improve download stability. Its architecture comprises components like the Manager, Scheduler, Seed Peer, and Peer, which collaboratively manage tasks and optimize data transfer within the P2P network. A notable advancement in the 2.2.0 release is the reimplementation of the Dragonfly client in Rust. This transition offers improved memory safety and enhanced performance, contributing to a more robust and efficient client experience. The updated client now supports bandwidth rate limiting for prefetch requests. This feature prevents network congestion and reduces competition with active download tasks, optimizing overall system performance. Users can configure this setting through the proxy.prefetchRateLimit option. download rate limit usage Dragonfly v2.2.0 introduces a leeching mode, allowing clients to disable sharing. When configured as such, the client operates solely as a downloader without contributing to the distribution network, providing flexibility for users with specific requirements. The release also includes several optimizations to enhance the client's performance in managing numerous small input/output operations, particularly benefiting applications like Nydus. Key improvements encompass: Introduction of the X-Dragonfly-Prefetch HTTP header to enable full-task prefetching for range requests. Implementation of an independent HTTP proxy cache to decrease latency by reducing gRPC server requests. Expansion of memory cache size in RocksDB and activation of prefix search to expedite piece metadata retrieval. Adoption of the CRC-32-Castagnoli algorithm with hardware acceleration to lower hash calculation overhead for piece content. Reuse of gRPC connections and optimization of download logic to improve efficiency. Dragonfly v2.2.0 defines the second version of its P2P transfer protocol, aiming for a more standardized, clearer, and higher-performing protocol. This update is expected to enhance data transfer efficiency within the P2P network. This new version strengthens its integration with Harbor v2.13, focusing on P2P preheating of images. Enhancements include: Support for preheating multi-architecture images. User-defined preheat scopes allow selection among a single Seed Peer, all Seed Peers, or all Peers for multi-granularity preheating. Capability for users to specify scheduler cluster IDs to direct preheating to desired Dragonfly clusters. These improvements aim to give users more control and efficiency in managing image distribution and acceleration tasks. Several tools offer similar capabilities of Dragonfly v2.2.0 for large-scale file distribution, container image acceleration, and peer-to-peer (P2P) data transfer: BitTorrent is a widely used P2P protocol that efficiently distributes large files across decentralized networks, making it a viable alternative for general-purpose file sharing. JFrog Artifactory serves as a powerful artifact repository manager, providing caching and distribution for container images, binaries, and other software artifacts. FastDFS, a lightweight open-source distributed file system, is optimized for small file storage and synchronization, though it lacks specific container image acceleration features. Amazon S3 Transfer Acceleration leverages Amazonâ€™s global edge network to speed up large-scale file transfers, making it ideal for organizations already using AWS. Lastly In conclusion, Dragonfly v2.2.0 enhances P2P file distribution through its new Rust-based client, improved bandwidth management, and strengthened Harbor integration. While alternatives like BitTorrent and Amazon S3 Transfer Acceleration exist, Dragonfly's optimizations for I/O operations and container image acceleration make it well-suited for cloud-native environments requiring efficient, large-scale file distribution. About the Author Claudio Masolo",
  "image": "https://res.infoq.com/news/2025/01/dragonfly-rust-client/en/headerimage/generatedHeaderImage-1738320579409.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eIn January, the Cloud Native Computing Foundation (CNCF) \u003ca href=\"https://www.cncf.io/blog/2025/01/07/dragonfly-v2-2-0-has-been-released/\"\u003eannounced\u003c/a\u003e the release of Dragonfly version 2.2.0, introducing several significant enhancements to the open-source, peer-to-peer (P2P) file distribution and image acceleration system.\u003c/p\u003e\n\n\u003cp\u003eDragonfly is an open-source, peer-to-peer (P2P) based system designed to enhance the efficiency of large-scale file distribution and image acceleration. Leveraging idle bandwidth from peers accelerates data distribution across various domains, including image and file distribution, AI model dissemination, and dataset sharing. Key features of Dragonfly include non-intrusive support for multiple container runtimes and download tools, configurable peer settings such as load and traffic limits, and mechanisms to ensure file consistency and isolate exceptions to improve download stability. Its architecture comprises components like the Manager, Scheduler, Seed Peer, and Peer, which collaboratively manage tasks and optimize data transfer within the P2P network.\u003c/p\u003e\n\n\u003cp\u003eA notable advancement in the 2.2.0 release is the reimplementation of the Dragonfly client in Rust. This transition offers improved memory safety and enhanced performance, contributing to a more robust and efficient client experience.\u003c/p\u003e\n\n\u003cp\u003eThe updated client now supports bandwidth rate limiting for prefetch requests. This feature prevents network congestion and reduces competition with active download tasks, optimizing overall system performance. Users can configure this setting through the \u003ccode\u003eproxy.prefetchRateLimit\u003c/code\u003e option.\u003c/p\u003e\n\n\n\n\u003ccenter\u003e\u003cimg alt=\"\" data-src=\"news/2025/01/dragonfly-rust-client/en/resources/2dragonfly-1-1738321043774.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/01/dragonfly-rust-client/en/resources/2dragonfly-1-1738321043774.jpg\" rel=\"share\"/\u003e\u003c/center\u003e\n\n\u003cp\u003e\u003csmall\u003edownload rate limit usage\u003c/small\u003e\u003c/p\u003e\n\n\u003cp\u003eDragonfly v2.2.0 introduces a leeching mode, allowing clients to disable sharing. When configured as such, the client operates solely as a downloader without contributing to the distribution network, providing flexibility for users with specific requirements.\u003c/p\u003e\n\n\u003cp\u003eThe release also includes several optimizations to enhance the client\u0026#39;s performance in managing numerous small input/output operations, particularly benefiting applications like Nydus. Key improvements encompass:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eIntroduction of the \u003ccode\u003eX-Dragonfly-Prefetch\u003c/code\u003e HTTP header to enable full-task prefetching for range requests.\u003c/li\u003e\n\t\u003cli\u003eImplementation of an independent HTTP proxy cache to decrease latency by reducing gRPC server requests.\u003c/li\u003e\n\t\u003cli\u003eExpansion of memory cache size in RocksDB and activation of prefix search to expedite piece metadata retrieval.\u003c/li\u003e\n\t\u003cli\u003eAdoption of the CRC-32-Castagnoli algorithm with hardware acceleration to lower hash calculation overhead for piece content.\u003c/li\u003e\n\t\u003cli\u003eReuse of gRPC connections and optimization of download logic to improve efficiency.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eDragonfly v2.2.0 defines the second version of its P2P transfer protocol, aiming for a more standardized, clearer, and higher-performing protocol. This update is expected to enhance data transfer efficiency within the P2P network.\u003c/p\u003e\n\n\u003cp\u003eThis new version strengthens its integration with \u003ca href=\"https://goharbor.io/\"\u003eHarbor\u003c/a\u003e v2.13, focusing on P2P preheating of images. Enhancements include:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003eSupport for preheating multi-architecture images.\u003c/li\u003e\n\t\u003cli\u003eUser-defined preheat scopes allow selection among a single Seed Peer, all Seed Peers, or all Peers for multi-granularity preheating.\u003c/li\u003e\n\t\u003cli\u003eCapability for users to specify scheduler cluster IDs to direct preheating to desired Dragonfly clusters.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese improvements aim to give users more control and efficiency in managing image distribution and acceleration tasks.\u003c/p\u003e\n\n\u003cp\u003eSeveral tools offer similar capabilities of \u003cstrong\u003eDragonfly v2.2.0 \u003c/strong\u003efor large-scale file distribution, container image acceleration, and peer-to-peer (P2P) data transfer:\u003c/p\u003e\n\n\u003cul\u003e\n\t\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://www.bittorrent.com/\"\u003eBitTorrent\u003c/a\u003e\u003c/strong\u003e is a widely used P2P protocol that efficiently distributes large files across decentralized networks, making it a viable alternative for general-purpose file sharing.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://jfrog.com/artifactory/\"\u003eJFrog Artifactory\u003c/a\u003e\u003c/strong\u003e serves as a powerful artifact repository manager, providing caching and distribution for container images, binaries, and other software artifacts.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/happyfish100/fastdfs\"\u003eFastDFS\u003c/a\u003e\u003c/strong\u003e, a lightweight open-source distributed file system, is optimized for small file storage and synchronization, though it lacks specific container image acceleration features.\u003c/li\u003e\n\t\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://aws.amazon.com/it/s3/transfer-acceleration/\"\u003eAmazon S3 Transfer Acceleration\u003c/a\u003e\u003c/strong\u003e leverages Amazonâ€™s global edge network to speed up large-scale file transfers, making it ideal for organizations already using AWS. Lastly\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn conclusion, Dragonfly v2.2.0 enhances P2P file distribution through its new Rust-based client, improved bandwidth management, and strengthened Harbor integration. While alternatives like BitTorrent and Amazon S3 Transfer Acceleration exist, Dragonfly\u0026#39;s optimizations for I/O operations and container image acceleration make it well-suited for cloud-native environments requiring efficient, large-scale file distribution.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Claudio-Masolo\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eClaudio Masolo\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-01-31T00:00:00Z",
  "modifiedTime": null
}
