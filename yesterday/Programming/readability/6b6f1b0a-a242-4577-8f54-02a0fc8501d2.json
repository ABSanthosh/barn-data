{
  "id": "6b6f1b0a-a242-4577-8f54-02a0fc8501d2",
  "title": "Google's Image Generation Model Imagen 3 Now Available in Vertex AI in Firebase as a Preview",
  "link": "https://www.infoq.com/news/2025/03/imagen3-vertex-ai-firebase/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Google's most advanced GenAI image generation model, Imagen 3, is now available in preview through Vertex AI in Firebase enabling seamless integration into Android and iOS apps through its Kotlin and Swift SDKs. By Sergio De Simone",
  "author": "Sergio De Simone",
  "published": "Sat, 08 Mar 2025 17:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Mobile",
    "iOS",
    "Large language models",
    "Flutter",
    "Android",
    "Development",
    "news"
  ],
  "byline": "Sergio De Simone",
  "length": 3417,
  "excerpt": "Google's most advanced GenAI image generation model, Imagen 3, is now available in preview through Vertex AI in Firebase enabling seamless integration into Android and iOS apps through its Kotlin and",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250306064810/apple-touch-icon.png",
  "text": "Google's most advanced GenAI image generation model, Imagen 3, is now available in preview through Vertex AI in Firebase enabling seamless integration into Android and iOS apps through its Kotlin and Swift SDKs. Introduced a few months ago on Google's Vertex AI platform along with video generation model Veo, Imagen 3 aims to create lifelike images with more detail and fewer artifacts than its previous versions, says Google. The Vertex AI in Firebase SDKs provide access to two different models: Imagen 3 and Imagen 3 Fast. Imagen 3 Fast is optimized for speed and is suggested for contexts where low latency is required. Using either of these models, you can generate images in a variety of formats, resolutions, and styles from a prompt written in natural language as well as render text in images. Once you have installed the Vertex AI in Firebase SDK, you instantiate it as usual, then create an Imagen 3 model calling imagenModel with the name of the model you want to use: import FirebaseVertexAI let vertex = VertexAI.vertexAI() let model = vertex.imagenModel(modelName: \"imagen-3.0-generate-002\") Along with the model name, currently \"imagen-3.0-generate-002\" or \"imagen-3.0-fast-generate-001\", you can specify the model configuration through the generationConfig parameter, which enables setting the number of desired images, the aspect ratio, the image format using a MIME type and a compression level, whether to suppress the non visible SynthID watermark, what kind of content to omit using a negative prompt, and so on. let config = ImagenGenerationConfig( negativePrompt: \"frogs\", numberOfImages: 2, aspectRatio: .landscape16x9, imageFormat: .jpeg(compressionQuality: 100), addWatermark: false ) let model = vertex.imagenModel(modelName: \"imagen-3.0-generate-002\" generationConfig: config) To generate the images, you finally call generateImages passing in the prompt: let prompt = \"An astronaut riding a horse\" let response = try await model.generateImages(prompt: prompt) let uiImages = response.images.compactMap { UIImage(data: $0.data) } Common to all models it supports, the Vertex AI in Firebase SDK enables specifying safety settings to filter generated content. For Imagen 3 models, you provide a safetyFilterLevel, which defines how strictly problematic prompts and responses are blocked, and a personFilterLevel, defining whether the generated image may contain people or faces and whether they should be restricted to adult people only. A key feature of Imagen 3 is the ability to edit and customize images. For example, you can refine an image using a text prompt to modify parts of it using mask-based editing. Additionally, you can upscale images, verify their digital watermarks, use a predefined style, and other advanced features. However, Imagen 3 in Vertex AI for Firebase does not yet support these features. Imagen 3 can use prompt enhancements, that is, it can refine the prompt provided by the user to include more details. While you can disable this feature when using the API, the SDK does not yet support this. As mentioned, support for Imagen 3 in the Vertex AI in Firebase is still a public preview. Google says it will extend its capabilities, but does not guarantee backward compatibility. About the Author Sergio De Simone",
  "image": "https://res.infoq.com/news/2025/03/imagen3-vertex-ai-firebase/en/headerimage/imagen3-vertex-ai-firebase-1741451687705.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eGoogle\u0026#39;s most advanced GenAI image generation model, \u003ca href=\"https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/imagen-api\"\u003eImagen 3\u003c/a\u003e, is \u003ca href=\"https://android-developers.googleblog.com/2025/03/imagen3-via-vertex-ai-in-firebase.html\"\u003enow available in preview through Vertex AI in Firebase\u003c/a\u003e enabling seamless integration into Android and iOS apps through its Kotlin and Swift SDKs.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.infoq.com/news/2024/12/veo-imagen-vertex-ai/\"\u003eIntroduced a few months ago on Google\u0026#39;s Vertex AI platform\u003c/a\u003e along with video generation model Veo, Imagen 3 aims to create lifelike images with more detail and fewer artifacts than its previous versions, says Google.\u003c/p\u003e\n\n\u003cp\u003eThe Vertex AI in Firebase SDKs provide access to two different models: Imagen 3 and Imagen 3 Fast. Imagen 3 Fast is optimized for speed and is suggested for contexts where low latency is required. Using either of these models, you can generate images in a variety of formats, resolutions, and styles from a prompt written in natural language as well as render text in images.\u003c/p\u003e\n\n\u003cp\u003eOnce you have installed the Vertex AI in Firebase SDK, you instantiate it as usual, then create an Imagen 3 model calling \u003ccode\u003eimagenModel\u003c/code\u003e with the name of the model you want to use:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eimport FirebaseVertexAI\nlet vertex = VertexAI.vertexAI()\nlet model = vertex.imagenModel(modelName: \u0026#34;imagen-3.0-generate-002\u0026#34;)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAlong with the model name, currently \u003ccode\u003e\u0026#34;imagen-3.0-generate-002\u0026#34;\u003c/code\u003e or \u003ccode\u003e\u0026#34;imagen-3.0-fast-generate-001\u0026#34;\u003c/code\u003e, you can \u003ca href=\"https://firebase.google.com/docs/vertex-ai/model-parameters?platform=ios#parameters-descriptions-imagen\"\u003especify the model configuration through the \u003ccode\u003egenerationConfig\u003c/code\u003e parameter\u003c/a\u003e, which enables setting the number of desired images, the \u003ca href=\"https://firebase.google.com/docs/vertex-ai/generate-images-imagen?platform=ios#specs-and-limitations\"\u003easpect ratio\u003c/a\u003e, the image format using a MIME type and a compression level, whether to suppress the non visible \u003ca href=\"https://deepmind.google/technologies/synthid/?db=rachelsaunders\"\u003eSynthID watermark\u003c/a\u003e, what kind of content to omit using a negative prompt, and so on.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003elet config = ImagenGenerationConfig(\n negativePrompt: \u0026#34;frogs\u0026#34;,\n numberOfImages: 2,\n aspectRatio: .landscape16x9,\n imageFormat: .jpeg(compressionQuality: 100),\n addWatermark: false\n)\n\nlet model = vertex.imagenModel(modelName: \u0026#34;imagen-3.0-generate-002\u0026#34;\n generationConfig: config)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eTo generate the images, you finally call \u003ccode\u003egenerateImages\u003c/code\u003e passing in the prompt:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003elet prompt = \u0026#34;An astronaut riding a horse\u0026#34;\nlet response = try await model.generateImages(prompt: prompt)\nlet uiImages =  response.images.compactMap { UIImage(data: $0.data) }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCommon to all models it supports, the Vertex AI in Firebase SDK enables specifying \u003ca href=\"https://firebase.google.com/docs/vertex-ai/safety-settings?platform=ios#imagen\"\u003esafety settings\u003c/a\u003e to filter generated content. For Imagen 3 models, you provide a \u003ccode\u003esafetyFilterLevel\u003c/code\u003e, which defines how strictly problematic prompts and responses are blocked, and a \u003ccode\u003epersonFilterLevel\u003c/code\u003e, defining whether the generated image may contain people or faces and whether they should be restricted to adult people only.\u003c/p\u003e\n\n\u003cp\u003eA key feature of Imagen 3 is the ability to edit and customize images. For example, you can refine an image using a text prompt to modify parts of it using mask-based editing. Additionally, you can upscale images, verify their digital watermarks, use a predefined style, and other advanced features. However, Imagen 3 in Vertex AI for Firebase does not yet support these features.\u003c/p\u003e\n\n\u003cp\u003eImagen 3 can use prompt enhancements, that is, it can refine the prompt provided by the user to include more details. While you can disable this feature when using the API, the SDK does not yet support this.\u003c/p\u003e\n\n\u003cp\u003eAs mentioned, support for Imagen 3 in the Vertex AI in Firebase is still a public preview. Google says it will extend its capabilities, but does not guarantee backward compatibility.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio-De-Simone\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio De Simone\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-03-08T00:00:00Z",
  "modifiedTime": null
}
