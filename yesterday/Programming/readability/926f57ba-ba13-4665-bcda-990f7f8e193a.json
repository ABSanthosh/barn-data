{
  "id": "926f57ba-ba13-4665-bcda-990f7f8e193a",
  "title": "Kotlin Multiplatform Development Roadmap for 2025",
  "link": "https://blog.jetbrains.com/kotlin/2024/10/kotlin-multiplatform-development-roadmap-for-2025/",
  "description": "As Kotlin Multiplatform is now firmly established, development teams across the globe – including major companies like Shopify, Forbes, Haier, and Zürcher Kantonalbank – can harness its power in production environments. During Google I/O 2024 in May, Google announced their official support for Kotlin Multiplatform for sharing business logic across Android and iOS. This and […]",
  "author": "Egor Tolstoy",
  "published": "Mon, 28 Oct 2024 18:52:27 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "multiplatform",
    "compose-multiplatform",
    "kotlin-multiplatform",
    "roadmap"
  ],
  "byline": "Egor Tolstoy",
  "length": 11070,
  "excerpt": "Kotlin Multiplatform roadmap outlining our key priorities and goals for 2025.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "A concise multiplatform language developed by JetBrains MultiplatformKotlin Multiplatform Development Roadmap for 2025 As Kotlin Multiplatform is now firmly established, development teams across the globe – including major companies like Shopify, Forbes, Haier, and Zürcher Kantonalbank – can harness its power in production environments. During Google I/O 2024 in May, Google announced their official support for Kotlin Multiplatform for sharing business logic across Android and iOS. This and other remarkable advancements set a strong foundation for further stabilizing and refining the technology. For 2025, JetBrains is focused on enhancing the Kotlin Multiplatform ecosystem, including upgrading Compose Multiplatform for iOS to Stable, the first public releases of Kotlin-to-Swift export and the all-in-one KMP IDE, as well as other significant improvements to the core technology, tooling, and libraries. Read on to explore our key priorities and goals for the upcoming year. Additionally, we recently updated our Kotlin roadmap to reflect our evolving vision. Be sure to check it out for more insights into our plans. Compose Multiplatform We are committed to making Compose Multiplatform a framework that enables developers to create beautiful and performant applications, ensuring a consistent look across all supported platforms. Our primary focus is driving the iOS target to a Stable release, which will also enhance the experience for other targets. Currently, we are concentrating on several key areas: Jetpack Compose feature parity. We are working to ensure that all core APIs and components are multiplatform. Significant progress has been made, but we still have some remaining elements to address before the Stable release. Our focus is on infrastructural changes that will streamline this process. iOS rendering performance. We have delivered significant improvements in rendering performance for iOS. Our next steps include implementing benchmarking infrastructure to catch regressions and to ensure that the performance of the framework is transparent to users. Feature completeness for core components. We are prioritizing the completion of essential features, including navigation, resource management, accessibility, and internationalization. Stabilizing the interoperability between Compose and native views is also a key objective. General stabilization of the framework. We are committed to improving the overall stability of the framework and enhancing the user experience through Compose Multiplatform Previews. Documentation. Our goal is to provide users with all the resources they need to learn and use Compose Multiplatform in a single place.  In addition, for the web target, we are focusing on achieving feature parity with other platforms. This includes implementing drag-and-drop support, improving text input and rendering, and ensuring interoperability with HTML page contents. Compose Multiplatform for Desktop, already used in Android Studio and IntelliJ IDEA codebase, will also benefit from adopting newer APIs from Jetpack Compose, along with continuous performance improvements. Through these initiatives, we aim to make Compose Multiplatform the best choice for building applications, allowing you to support any platform with just a single line of configuration. Tooling We remain committed to delivering an excellent development experience for Kotlin Multiplatform. Our goal is to reduce the need for developers to switch between different IDEs, offering a seamless and integrated workflow across platforms. We aim to ensure that Kotlin Multiplatform integrates seamlessly with the IDEs commonly used for KMP development, such as IntelliJ IDEA and Android Studio, making it more straightforward to share business logic or UIs. While we continue to prioritize strong KMP support for all existing platforms, we also believe there’s a place for a dedicated IDE. With this in mind, we are working towards the public release of a standalone KMP IDE. This IDE will be tailored specifically for Kotlin Multiplatform development, offering an optimized, all-in-one environment. With this release, we focus on mobile scenarios and aim to: Ensure that developers no longer need to switch between different IDEs. Provide enhanced language support, delivering an equally great experience in both Kotlin and Swift, with a focus on seamless interoperability between the two. Create a unified and simplified workflow that helps developers with experience in either iOS or Android to feel confident and productive when working with both platforms, offering clarity and consistency. Looking ahead, we are also exploring new areas to enhance the development experience: Investigating the possibility of building apps for iOS platforms using cloud machines, which could help developers who don’t have access to Apple devices. Exploring deeper integration with AI tools to assist not only in code generation but also in solving more complex development tasks, improving efficiency across the board. Kotlin-to-Swift export We are progressing rapidly with the direct Kotlin-to-Swift export. In 2024, we laid the foundation of the architecture and are now iterating to support more Kotlin features. Our current goal for 2025 is to release the first public version. This initial release aims to provide a user experience comparable to the existing Objective-C export, while overcoming the constraints of Objective-C. This will enable broader Swift language support and facilitate more seamless API exporting, paving the way for future improvements that will fully leverage the advantages of exporting to Swift. You can track our progress on YouTrack or join the discussions in the #swift-export channel in our public Slack. Library ecosystem As the Kotlin Multiplatform ecosystem rapidly expands, ensuring the backward compatibility of libraries becomes crucial. To achieve this, the JetBrains team and library creators must collaborate closely. Here’s what we plan to do: Improve the klib format to allow library creators to leverage their knowledge of building JVM libraries. Implement the same code-inlining behavior in Kotlin Multiplatform libraries as for the JVM. Provide a tool that ensures your multiplatform library public API remains compatible. We’re also looking to improve the publishing process for Kotlin Multiplatform libraries, which includes: Providing templates and comprehensive guidelines for creating and publishing KMP libraries. Stabilizing klib cross-compilation on different platforms. Launching a fully re-designed KMP library publication process. Significantly improving the libraries documentation process. Even though Kotlin Multiplatform is now Stable, we’re still planning significant updates. But don’t worry: Libraries built with the current format will still work with newer Kotlin versions. Search for multiplatform libraries on the web We are currently working on simplifying the search process for multiplatform libraries on the web. The library ecosystem is rapidly growing; there are now around 2,500 Kotlin Multiplatform libraries available. However, despite the extensive selection, it can often be challenging for developers to find libraries that meet their specific needs and support their chosen platforms. Our goal is to introduce a solution that facilitates the discovery of these libraries and allows developers to try them out easily, enhancing their overall experience within the Kotlin Multiplatform ecosystem. We’ll share more details about this initiative throughout the year, so stay tuned! Amper Amper, an experimental project configuration and build tool by JetBrains, has received positive feedback from early adopters, along with valuable bug reports, blockers, use cases, and feature requests. We appreciate this input, as it really helps us refine the scope and improve the product. In 2025, we’ll be focusing on making Amper fully suitable for multiplatform mobile app development for Android and iOS, complete with shared Compose Multiplatform UI. This includes: Running and testing applications (locally, on physical devices, and on CI). Signing applications and publishing them on Google Play and App Store. Numerous IDE features to ensure a smooth and enjoyable experience. We’ll also explore scenarios around server-side development, such as projects that include a backend for the mobile application with shared business logic. You can follow the posts on the Amper blog to keep up-to-date with our latest releases and join the discussion in the #amper channel on the Kotlinlang Slack. Gradle and other build tools As we look ahead to 2025, our work on Gradle enhancements is outlined in the Kotlin roadmap. Here are some key areas we will be working on: Support for declaring Kotlin Multiplatform dependencies at the project level. This will make it easier for developers to manage their project dependencies effectively. Improving integration of the Kotlin/Native toolchain into Gradle. Implementing the next-generation distribution format for multiplatform libraries. This initiative can simplify the dependencies model and publication layout for multiplatform libraries, making them easier to use with third-party build tools and reducing complexity for library authors. Providing full support for Kotlin Multiplatform in Declarative Gradle. Our work on the Experimental Kotlin Ecosystem Plugin, which supports Declarative Gradle, aims to help developers explore a declarative approach to their Gradle builds. We’re also working on support for Gradle project isolation, publicly available API references for the Kotlin Gradle Plugin, and other initiatives. You can read about our other projects in the detailed Kotlin roadmap document. Further reading Kotlin roadmap Compose Multiplatform 1.7.0 Amper Update August 2024 Kotlin 2.0.20 Subscribe to Kotlin Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/10/Social_Share_1280x720-2x-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/kotlin/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/Kotlin-5.svg\" alt=\"Kotlin logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eA concise multiplatform language developed by JetBrains\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/kotlin/category/multiplatform/\"\u003eMultiplatform\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eKotlin Multiplatform Development Roadmap for 2025\u003c/h2\u003e                    \n                    \n\u003cp\u003eAs Kotlin Multiplatform is now firmly established, development teams across the globe – including major companies like Shopify, Forbes, Haier, and Zürcher Kantonalbank – can harness its power in production environments. During Google I/O 2024 in May, Google announced their official \u003ca href=\"https://android-developers.googleblog.com/2024/05/android-support-for-kotlin-multiplatform-to-share-business-logic-across-mobile-web-server-desktop.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003esupport for Kotlin Multiplatform\u003c/a\u003e for sharing business logic across Android and iOS. This and other remarkable advancements set a strong foundation for further stabilizing and refining the technology.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor 2025, JetBrains is focused on enhancing the Kotlin Multiplatform ecosystem, including upgrading Compose Multiplatform for iOS to Stable, the first public releases of Kotlin-to-Swift export and the all-in-one KMP IDE, as well as other significant improvements to the core technology, tooling, and libraries. Read on to explore our key priorities and goals for the upcoming year.\u003c/p\u003e\n\n\n\n\u003cp\u003eAdditionally, we recently updated our \u003ca href=\"https://kotlinlang.org/docs/roadmap.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKotlin roadmap\u003c/a\u003e to reflect our evolving vision. Be sure to check it out for more insights into our plans.\u003c/p\u003e\n\n\n\n\u003ch2\u003eCompose Multiplatform\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe are committed to making Compose Multiplatform a framework that enables developers to create beautiful and performant applications, ensuring a consistent look across all supported platforms. Our primary focus is driving the \u003cstrong\u003eiOS target to a Stable release\u003c/strong\u003e, which will also enhance the experience for other targets.\u003c/p\u003e\n\n\n\n\u003cp\u003eCurrently, we are concentrating on several key areas:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eJetpack Compose feature parity\u003c/strong\u003e. We are working to ensure that all core APIs and components are multiplatform. Significant progress has been made, but we still have some remaining elements to address before the Stable release. Our focus is on infrastructural changes that will streamline this process.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eiOS rendering performance\u003c/strong\u003e. We have delivered significant improvements in rendering performance for iOS. Our next steps include implementing benchmarking infrastructure to catch regressions and to ensure that the performance of the framework is transparent to users.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eFeature completeness for core components\u003c/strong\u003e. We are prioritizing the completion of essential features, including navigation, resource management, accessibility, and internationalization.\u003c/li\u003e\n\n\n\n\u003cli\u003eStabilizing the interoperability between Compose and native views is also a key objective.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eGeneral stabilization of the framework.\u003c/strong\u003e We are committed to improving the overall stability of the framework and enhancing the user experience through Compose Multiplatform Previews.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDocumentation\u003c/strong\u003e. Our goal is to provide users with all the resources they need to learn and use Compose Multiplatform in a single place. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eIn addition, for the web target, we are focusing on achieving feature parity with other platforms. This includes implementing drag-and-drop support, improving text input and rendering, and ensuring interoperability with HTML page contents. Compose Multiplatform for Desktop, already used in Android Studio and IntelliJ IDEA codebase, will also benefit from adopting newer APIs from Jetpack Compose, along with continuous performance improvements.\u003c/p\u003e\n\n\n\n\u003cp\u003eThrough these initiatives, we aim to make Compose Multiplatform the best choice for building applications, allowing you to support any platform with just a single line of configuration.\u003c/p\u003e\n\n\n\n\u003ch2\u003eTooling\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe remain committed to delivering an excellent development experience for Kotlin Multiplatform. Our goal is to reduce the need for developers to switch between different IDEs, offering a seamless and integrated workflow across platforms.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe aim to ensure that Kotlin Multiplatform integrates seamlessly with the IDEs commonly used for KMP development, such as IntelliJ IDEA and Android Studio, making it more straightforward to share business logic or UIs.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhile we continue to prioritize strong KMP support for all existing platforms, we also believe there’s a place for a dedicated IDE. With this in mind, we are working towards the public release of a \u003cstrong\u003estandalone KMP IDE\u003c/strong\u003e. This IDE will be tailored specifically for Kotlin Multiplatform development, offering an optimized, all-in-one environment. With this release, we focus on mobile scenarios and aim to:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eEnsure that developers no longer need to switch between different IDEs.\u003c/li\u003e\n\n\n\n\u003cli\u003eProvide enhanced language support, delivering an equally great experience in both Kotlin and Swift, with a focus on seamless interoperability between the two.\u003c/li\u003e\n\n\n\n\u003cli\u003eCreate a unified and simplified workflow that helps developers with experience in either iOS or Android to feel confident and productive when working with both platforms, offering clarity and consistency.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eLooking ahead, we are also exploring new areas to enhance the development experience:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eInvestigating the possibility of building apps for iOS platforms using cloud machines, which could help developers who don’t have access to Apple devices.\u003c/li\u003e\n\n\n\n\u003cli\u003eExploring deeper integration with AI tools to assist not only in code generation but also in solving more complex development tasks, improving efficiency across the board.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eKotlin-to-Swift export\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe are progressing rapidly with the \u003cstrong\u003edirect Kotlin-to-Swift export\u003c/strong\u003e. In 2024, we laid \u003ca href=\"https://github.com/JetBrains/kotlin/blob/master/docs/swift-export/architecture.md\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethe foundation of the architecture\u003c/a\u003e and are now iterating to support more Kotlin features. Our current goal for 2025 is to release the first public version. This initial release aims to provide a user experience comparable to the existing Objective-C export, while overcoming the constraints of Objective-C. This will enable broader Swift language support and facilitate more seamless API exporting, paving the way for future improvements that will fully leverage the advantages of exporting to Swift.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can track our progress on \u003ca href=\"https://youtrack.jetbrains.com/issue/KT-64572/The-first-public-release-of-Swift-Export\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eYouTrack\u003c/a\u003e or join the discussions in the \u003ca href=\"https://slack-chats.kotlinlang.org/c/swift-export\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e#swift-export\u003c/a\u003e channel in our public Slack.\u003c/p\u003e\n\n\n\n\u003ch2\u003eLibrary ecosystem\u003c/h2\u003e\n\n\n\n\u003cp\u003eAs the Kotlin Multiplatform ecosystem rapidly expands, ensuring the backward compatibility of libraries becomes crucial. To achieve this, the JetBrains team and library creators must collaborate closely. Here’s what we plan to do:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eImprove the klib format to allow library creators to leverage their knowledge of building JVM libraries.\u003c/li\u003e\n\n\n\n\u003cli\u003eImplement the same code-inlining behavior in Kotlin Multiplatform libraries as for the JVM.\u003c/li\u003e\n\n\n\n\u003cli\u003eProvide a tool that ensures your multiplatform library public API remains compatible.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe’re also looking to improve the publishing process for Kotlin Multiplatform libraries, which includes:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eProviding templates and comprehensive guidelines for creating and publishing KMP libraries.\u003c/li\u003e\n\n\n\n\u003cli\u003eStabilizing klib cross-compilation on different platforms.\u003c/li\u003e\n\n\n\n\u003cli\u003eLaunching a fully re-designed KMP library publication process.\u003c/li\u003e\n\n\n\n\u003cli\u003eSignificantly improving the libraries documentation process.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eEven though Kotlin Multiplatform is now Stable, we’re still planning significant updates. But don’t worry: Libraries built with the current format will still work with newer Kotlin versions.\u003c/p\u003e\n\n\n\n\u003ch2\u003eSearch for multiplatform libraries on the web\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe are currently working on simplifying the search process for multiplatform libraries on the web. The library ecosystem is rapidly growing; there are now around 2,500 Kotlin Multiplatform libraries available. However, despite the extensive selection, it can often be challenging for developers to find libraries that meet their specific needs and support their chosen platforms.\u003c/p\u003e\n\n\n\n\u003cp\u003eOur goal is to introduce a solution that facilitates the discovery of these libraries and allows developers to try them out easily, enhancing their overall experience within the Kotlin Multiplatform ecosystem. We’ll share more details about this initiative throughout the year, so stay tuned!\u003c/p\u003e\n\n\n\n\u003ch2\u003eAmper\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/JetBrains/amper\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAmper\u003c/a\u003e, an experimental project configuration and build tool by JetBrains, has received positive feedback from early adopters, along with valuable bug reports, blockers, use cases, and feature requests. We appreciate this input, as it really helps us refine the scope and improve the product.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn 2025, we’ll be focusing on making Amper fully suitable for multiplatform mobile app development for Android and iOS, complete with shared Compose Multiplatform UI. This includes:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eRunning and testing applications (locally, on physical devices, and on CI).\u003c/li\u003e\n\n\n\n\u003cli\u003eSigning applications and publishing them on Google Play and App Store.\u003c/li\u003e\n\n\n\n\u003cli\u003eNumerous IDE features to ensure a smooth and enjoyable experience.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe’ll also explore scenarios around server-side development, such as projects that include a backend for the mobile application with shared business logic.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can follow the posts on the \u003ca href=\"https://blog.jetbrains.com/amper/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAmper blog\u003c/a\u003e to keep up-to-date with our latest releases and join the discussion in the \u003ca href=\"https://slack-chats.kotlinlang.org/c/amper\" target=\"_blank\" rel=\"noreferrer noopener\"\u003e#amper channel\u003c/a\u003e on the Kotlinlang Slack.\u003c/p\u003e\n\n\n\n\u003ch2\u003eGradle and other build tools\u003c/h2\u003e\n\n\n\n\u003cp\u003eAs we look ahead to 2025, our work on Gradle enhancements is outlined in the \u003ca href=\"https://kotlinlang.org/docs/roadmap.html#tooling\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKotlin roadmap\u003c/a\u003e. Here are some key areas we will be working on:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eSupport for declaring Kotlin Multiplatform dependencies at the project level. This will make it easier for developers to manage their project dependencies effectively.\u003c/li\u003e\n\n\n\n\u003cli\u003eImproving integration of the Kotlin/Native toolchain into Gradle.\u003c/li\u003e\n\n\n\n\u003cli\u003eImplementing the next-generation distribution format for multiplatform libraries. This initiative can simplify the dependencies model and publication layout for multiplatform libraries, making them easier to use with third-party build tools and reducing complexity for library authors.\u003c/li\u003e\n\n\n\n\u003cli\u003eProviding full support for Kotlin Multiplatform in Declarative Gradle. Our work on the Experimental Kotlin Ecosystem Plugin, which supports Declarative Gradle, aims to help developers explore a declarative approach to their Gradle builds.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWe’re also working on support for Gradle project isolation, publicly available API references for the Kotlin Gradle Plugin, and other initiatives. You can read about our other projects in the detailed \u003ca href=\"https://kotlinlang.org/docs/roadmap.html#multiplatform\" target=\"_blank\" data-type=\"link\" data-id=\"https://kotlinlang.org/docs/roadmap.html#multiplatform\" rel=\"noreferrer noopener\"\u003eKotlin roadmap\u003c/a\u003e document.\u003c/p\u003e\n\n\n\n\u003ch2\u003eFurther reading\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://kotlinlang.org/docs/roadmap.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKotlin roadmap\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/kotlin/2024/10/compose-multiplatform-1-7-0-released/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eCompose Multiplatform 1.7.0\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/amper/2024/08/amper-update-august-2024/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eAmper Update August 2024\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/kotlin/2024/08/kotlin-2-0-20-released/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eKotlin 2.0.20\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Kotlin Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
