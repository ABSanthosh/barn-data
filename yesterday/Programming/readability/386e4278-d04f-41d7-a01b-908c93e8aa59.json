{
  "id": "386e4278-d04f-41d7-a01b-908c93e8aa59",
  "title": "Boosting Your Coding Projects With JetBrains AI Assistant: My Journey to Build a Flask Web App",
  "link": "https://blog.jetbrains.com/ai/2024/11/boosting-your-coding-projects-with-jetbrains-ai-assistant/",
  "description": "TL;DR: In this post, I walk through the process of enhancing a chatbot project from Hyperskill by adding a web interface with Flask, JavaScript, and HTML. I tried out JetBrains AI Assistant and documented how it helped me with common coding tasks like installing frameworks, debugging, and generating code snippets, streamlining my development workflow.  From […]",
  "author": "Ilnur Galimov",
  "published": "Mon, 11 Nov 2024 13:22:34 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "jetbrains-ai",
    "tutorials",
    "ai-assistance",
    "ai-assistant"
  ],
  "byline": "Ilnur Galimov",
  "length": 8161,
  "excerpt": "TL;DR: In this post, I walk through the process of enhancing a chatbot project from Hyperskill by adding a web interface with Flask, JavaScript, and HTML. I tried out JetBrains AI Assistant and doc",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Supercharge your tools with AI-powered features inside many JetBrains products JetBrains AI TutorialsBoosting Your Coding Projects With JetBrains AI Assistant: My Journey to Build a Flask Web App TL;DR: In this post, I walk through the process of enhancing a chatbot project from Hyperskill by adding a web interface with Flask, JavaScript, and HTML. I tried out JetBrains AI Assistant and documented how it helped me with common coding tasks like installing frameworks, debugging, and generating code snippets, streamlining my development workflow.  From CLI to web UI: Exploring generative AI with Hyperskill While searching for new generative AI coding challenges, I came across the Simple Python CLI Chat project on Hyperskill, which teaches the basics of working with a generative AI API through the process of creating a basic chat assistant. The project was engaging, but I wanted to add an extra challenge by building a web interface to interact with the chat assistant in a more user-friendly way. After a bit of research, I decided to go with a setup that used Flask, JavaScript, and HTML. I already had experience with Flask from Hyperskill’s Python Backend Developer track, but my JavaScript knowledge from university was a bit rusty – that motivated me to look for tools that could help fill in the gaps. Getting started with JetBrains AI Assistant A colleague shared his experience using JetBrains AI Assistant to convert code from Kotlin to Python. Inspired, I decided to try it out myself and document my experience here. First, I cloned my Hyperskill project from GitHub and installed the JetBrains AI Assistant plugin through the AI Assistant tab. Installation went smoothly, and after restarting my IDE, I was ready to dive in. Multilingual feature test: Trying out Dutch As soon as I started, AI Assistant asked if I wanted to receive responses in a custom language. Living and working in the Netherlands, I’m currently learning Dutch, so I switched the response language to Dutch to test out the multilingual capabilities.  Long story short: it worked flawlessly! I later switched back to English, as my Dutch still has some room for improvement, but the feature left an impression. It made me think how useful it could be in multilingual work environments, especially here in Amsterdam, where developers often juggle multiple languages. With setup complete, I was ready to dive into my project. Easy Flask installation with JetBrains AI To test out AI Assistant, I asked it how to install Flask. It recommended running the pip install Flask command, which I could execute directly in the terminal with a single click on Run Snippet. This quick execution feature saved time and was super convenient. Building the frontend: JavaScript and HTML With Flask installed, I moved on to creating the frontend. I started with a JavaScript file for handling user inputs, server interactions, and keeping the UI updated, and an HTML file for structuring a simple chat interface. But before diving into these details, I had to transform my Hyperskill project into a working Flask app to act as a basic web server. Setting up the Flask server for AI communication To start, I initialized a basic Flask app and created a route to handle POST requests from the chat interface. This route captured the user’s message, processed it, and returned a JSON response containing the AI’s reply. I also added error handling to ensure the server could respond with clear error messages.  Debugging and fixing errors with AI Assistant After setting up the basic server, I ran it locally to make sure everything worked as expected. I encountered an error, so I used AI Assistant’s Explain with AI option, and within seconds, it suggested a solution, including a code snippet. By clicking Insert Snippet at Caret, I applied the fix, and my server finally started up! With this first hurdle cleared, I was able to move on to refining the JavaScript and HTML files. Creating a dynamic chat with the real-time Fetch API In the JavaScript file, I wanted to ensure that messages could be fetched and displayed in real time, without the need for page reloads. Back in university, I would have achieved this with AJAX. But since that was nearly a decade ago, this time I opted for the more modern Fetch API. As I typed, AI Assistant offered code completion suggestions, which were especially useful for building a new file from scratch. Letting AI generate HTML: A little experiment When it came time to set up the HTML layout, I decided to let AI Assistant generate the initial structure for me. The result needed tweaking (for example, the Send button wasn’t functional and the layout wasn’t ideal), but it saved me a lot of time. While AI is great for generating code, it’s important to have enough knowledge to adjust and refine the output. Launching the web app and… getting hungry! After some final adjustments, my web app was ready. I launched it, and everything worked seamlessly! But by this point, I was starving. As a lighthearted test, I asked the chatbot to give me a recipe for my favorite pasta, cacio e pepe – and it delivered! Having a functional AI chatbot and a pasta recipe felt like a win-win. Committing code with AI’s help With my app up and running, it was time to commit and push my changes to GitHub. AI Assistant even helped generate a commit message. While it was a bit too detailed, I kept the essential parts, which added a nice finishing touch to my coding session. Discovering AI Assistant’s full range of features Curious to see what else the assistant could do, I explored the Options I Discover Features section. There’s a wealth of capabilities here to streamline the coding process, from multi-language support to debugging assistance and documentation generation. Final thoughts: AI as a coding companion JetBrains AI Assistant proved to be a powerful tool throughout this project. It helped me accomplish key tasks like installing frameworks, troubleshooting server errors, generating code snippets, and even suggesting commit messages – all of which streamlined my workflow and saved time. Experimenting with its multilingual support also gave me insight into its flexibility for developers in diverse work environments. For developers in multilingual or fast-paced settings, tools like AI Assistant can make a big difference. However, its effectiveness ultimately increases when paired with foundational coding knowledge. My advice to new programmers is this: try fixing errors independently before relying on AI. Doing so will sharpen your problem-solving skills and help you get the most out of AI assistance when you need it. Thanks for joining me on this coding journey! Hopefully, this post inspires you to give JetBrains AI Assistant a try in your own projects. Explore its features, experiment, and make coding a little more fun. And don’t forget to reward yourself with some delicious pasta afterward! Till next time! Subscribe to JetBrains AI Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/11/jbai-social_share_blog_1280x720_en.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/ai/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/01/JetBrains-AI.svg\" alt=\"Ai logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eSupercharge your tools with AI-powered features inside many JetBrains products\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/ai/category/jetbrains-ai/\"\u003eJetBrains AI\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/ai/category/tutorials/\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eBoosting Your Coding Projects With JetBrains AI Assistant: My Journey to Build a Flask Web App\u003c/h2\u003e                    \n                    \n\u003ch3\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eIn this post, I walk through the process of enhancing a chatbot project from Hyperskill by adding a web interface with Flask, JavaScript, and HTML. I tried out JetBrains AI Assistant and documented how it helped me with common coding tasks like installing frameworks, debugging, and generating code snippets, streamlining my development workflow. \u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eFrom CLI to web UI: Exploring generative AI with Hyperskill\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eWhile searching for new generative AI coding challenges, I came across the \u003ca href=\"https://hyperskill.org/projects/478?track=124\" target=\"_blank\" rel=\"noopener\"\u003e\u003cem\u003eSimple Python CLI Chat\u003c/em\u003e\u003c/a\u003e project on Hyperskill, which teaches the basics of working with a generative AI API through the process of creating a basic chat assistant. The project was engaging, but I wanted to add an extra challenge by building a web interface to interact with the chat assistant in a more user-friendly way. After a bit of research, I decided to go with a setup that used Flask, JavaScript, and HTML. I already had experience with Flask from Hyperskill’s \u003ca href=\"https://hyperskill.org/courses/29-python-backend-developer-with-flask\" target=\"_blank\" rel=\"noopener\"\u003e\u003cem\u003ePython Backend Developer\u003c/em\u003e\u003c/a\u003e track, but my JavaScript knowledge from university was a bit rusty – that motivated me to look for tools that could help fill in the gaps.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXctJrKW6_aDfPWhwFoZDowPSYcCnQkq9rkYBqk9Q2ew3k-Hqoy6UAhm10l4ZPIFcCCPxuzBcT6CL1hOmyyav1MqR47rirUy9gDWI_iF-gV1ukm6ENJLmbY3xTlEwMPYlxNAiOKRNttEm_YM5uURmJ_Uddmg?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eGetting started with JetBrains AI Assistant\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eA colleague shared his experience using JetBrains AI Assistant to convert code from Kotlin to Python. Inspired, I decided to try it out myself and document my experience here. First, I cloned my Hyperskill project from GitHub and \u003ca href=\"https://www.jetbrains.com/help/idea/ai-assistant.html#install-ai-assistant-plugin\" target=\"_blank\" rel=\"noopener\"\u003einstalled the JetBrains AI Assistant plugin\u003c/a\u003e through the \u003cem\u003eAI Assistant\u003c/em\u003e tab. Installation went smoothly, and after restarting my IDE, I was ready to dive in.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeO8iuTswAP6mfWeG6qVVVl1pp87plrhM2bYU8_bOjpolL7PWUZXlWkYaKdbgk871EKUZf6Sbtx0kkmxw6F-ILj_Cd7iY2afWa33aNmh3yzThq8CDCgbdEcWxsZGABcXuZAh4Af52mrJcrr96utU-wlgO37?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eMultilingual feature test: Trying out Dutch\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eAs soon as I started, AI Assistant asked if I wanted to receive responses in a custom language. Living and working in the Netherlands, I’m currently learning Dutch, so I switched the response language to Dutch to test out the multilingual capabilities. \u003c/p\u003e\n\n\n\n\u003cp\u003eLong story short: it worked flawlessly! I later switched back to English, as my Dutch still has some room for improvement, but the feature left an impression. It made me think how useful it could be in multilingual work environments, especially here in Amsterdam, where developers often juggle multiple languages. With setup complete, I was ready to dive into my project.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeawpQYxmsgM3_ZXUNWmsgUrNrPvTK6SX5JX_Khuf4Nf77uxSrXekvB8ZXWCVMeSU8DUQTKkivl2nhSFMhEEX_b5H2Yj6G4pPjSTWjZJWQru52idPMBstiCvZxxTyWFexS9VOQtBkRskkIpo9n2gQclzWgr?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfLDbOlStk90tWjsSDpmQSNZ-QLzCGO_4t8eFnK_TSaxrOPkmXyf_m7wjAYo-mVztphzqSehHLzxdqBxhVFEMjydhLkCijgdv3UX7lIF3KxfGe0g6JfSiC4cprYa3eK6LGoqVog82BE1Y_zHLjtCE9KAdsy?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eEasy Flask installation with JetBrains AI\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eTo test out AI Assistant, I asked it how to install Flask. It recommended running the pip install Flask command, which I could execute directly in the terminal with a single click on \u003cem\u003eRun Snippet\u003c/em\u003e. This quick execution feature saved time and was super convenient.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"3452\" height=\"1988\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/cli_install_flask.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eBuilding the frontend: JavaScript and HTML\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eWith Flask installed, I moved on to creating the frontend. I started with a JavaScript file for handling user inputs, server interactions, and keeping the UI updated, and an HTML file for structuring a simple chat interface. But before diving into these details, I had to transform my Hyperskill project into a working Flask app to act as a basic web server.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eSetting up the Flask server for AI communication\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eTo start, I initialized a basic Flask app and created a route to handle POST requests from the chat interface. This route captured the user’s message, processed it, and returned a JSON response containing the AI’s reply. I also added error handling to ensure the server could respond with clear error messages. \u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eDebugging and fixing errors with AI Assistant\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eAfter setting up the basic server, I ran it locally to make sure everything worked as expected. I encountered an error, so I used AI Assistant’s \u003cem\u003eExplain with AI\u003c/em\u003e option, and within seconds, it suggested a solution, including a code snippet. By clicking \u003cem\u003eInsert Snippet at Caret\u003c/em\u003e, I applied the fix, and my server finally started up! With this first hurdle cleared, I was able to move on to refining the JavaScript and HTML files.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfbMICCvPifWNVyRU__HXzXqbZBvLAmaW5kiTWIbCKe7lMO0JFxeCe5psg2hAcV9nIHiRHteTMg7EMkFpP5NzychqlRO_Q5ktH70Dp1iOKb7ACmYVx0gRZZ8M2HHxMDyTaMUGl4DR307_4vi1DVyHMKv2UO?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcgvfLietDKtRYYfii4Ex4BRXoZrFCEfvjGURUqvJS_UlrRY6BWpHJcT_9PCyuELFVyF6Li3lb8u4rH5BxJwUQoFrFIZ9XhQkK8xKlXeXZx2JnXDv8MUhSRVS7pcAuEvhTMcltZSb5rNoKFLrsB4T6Dt-zB?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfignsUWcrVAJ0fe5Z0QcT8fJ5LaRlOZEdbnEM-EXeOqtCP5q54KzrIe3sKmG4nOrhnUDl0s2Ag5CelKhFLNmsMRsBiiRldF9JT8R_Y3HoRETNp2Ri6gB34dqNFn_EqDS8UO5jPP2UzS3pX4eadyTZIJAg?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eCreating a dynamic chat with the real-time Fetch API\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eIn the JavaScript file, I wanted to ensure that messages could be fetched and displayed in real time, without the need for page reloads. Back in university, I would have achieved this with AJAX. But since that was nearly a decade ago, this time I opted for the more modern Fetch API. As I typed, AI Assistant offered code completion suggestions, which were especially useful for building a new file from scratch.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"3452\" height=\"1988\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/cli_cloud_completion.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"3452\" height=\"1988\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/cli_cloud_completion_2.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eLetting AI generate HTML: A little experiment\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eWhen it came time to set up the HTML layout, I decided to let AI Assistant generate the initial structure for me. The result needed tweaking (for example, the \u003cem\u003eSend\u003c/em\u003e button wasn’t functional and the layout wasn’t ideal), but it saved me a lot of time. While AI is great for generating code, it’s important to have enough knowledge to adjust and refine the output.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdOQ9HBfsTP4nucSKqOsKBqg7EtRuHFO6Yb2mxCsjmiZsqpzCjng5OubPwb6ZX5y0pbQpD2vmC9F-uvQ1IxrKZStAAvahdERNwfZBvIef3sdZTgOqS8nVi7erYnijq7HqkdkQdD1or75ZfJOgHUctMVJnkk?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXesEfxguWmlYhvWqDNREyQr7r3vTaHKeOLtwmVm93A9gbu59-o0lPOHn_nkUdzDzU65dVXbf0jVEsPePciJHadUFKLs38sS3WXFjA_oE-3QcOt1D2u7Rcdz_doRshNxtBS2a-EaKw?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eLaunching the web app and… getting hungry!\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eAfter some final adjustments, my web app was ready. I launched it, and everything worked seamlessly! But by this point, I was starving. As a lighthearted test, I asked the chatbot to give me a recipe for my favorite pasta, \u003cem\u003ecacio e pepe\u003c/em\u003e – and it delivered! Having a functional AI chatbot and a pasta recipe felt like a win-win.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXezzsI4YEpIfCoeWuSBSCgJ_vF_eV5iHdsFYmjLpa6SUKKKs_16ns2IH4CrpDPRWrMfV0dEiT3MUMg1xNOcmcGEKYqB1KrSiYSHgZ14EsSOF2sqHvD-xOMz9PIKN6_NAMIBQaYBGHlANzXPWIlJ9qEYzPG2?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eCommitting code with AI’s help\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eWith my app up and running, it was time to commit and push my changes to GitHub. AI Assistant even helped generate a commit message. While it was a bit too detailed, I kept the essential parts, which added a nice finishing touch to my coding session.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"3438\" height=\"1986\" src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/cli_generate_commit_messages.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eDiscovering AI Assistant’s full range of features\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eCurious to see what else the assistant could do, I explored the \u003cem\u003eOptions \u003c/em\u003eI\u003cem\u003e Discover Features\u003c/em\u003e section. There’s a wealth of capabilities here to streamline the coding process, from multi-language support to debugging assistance and documentation generation.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdfQbbEBMIsgCTQGPkFINAOdlXyYAKQK2es_HDWMOjDYV0IFiOrhf1vAg5KlNmfB_T4DgAGPImyeqlP5mvXAy260BT2-sYW5fUQwVneNcohCLvJfhGwMeJa1fjc2PsIXi7iqbwfG6tNoBRWFPTGTawjfQ_J?key=_392kx9ZhXlw99HI-39oxYlN\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eFinal thoughts: AI as a coding companion\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eJetBrains AI Assistant proved to be a powerful tool throughout this project. It helped me accomplish key tasks like installing frameworks, troubleshooting server errors, generating code snippets, and even suggesting commit messages – all of which streamlined my workflow and saved time. Experimenting with its multilingual support also gave me insight into its flexibility for developers in diverse work environments.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor developers in multilingual or fast-paced settings, tools like AI Assistant can make a big difference. However, its effectiveness ultimately increases when paired with foundational coding knowledge. My advice to new programmers is this: try fixing errors independently before relying on AI. Doing so will sharpen your problem-solving skills and help you get the most out of AI assistance when you need it.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eThanks for joining me on this coding journey! Hopefully, this post inspires you to give JetBrains AI Assistant a try in your own projects. Explore its features, experiment, and make coding a little more fun. And don’t forget to reward yourself with some delicious pasta afterward!\u003c/p\u003e\n\n\n\n\u003cp\u003eTill next time!\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to JetBrains AI Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
