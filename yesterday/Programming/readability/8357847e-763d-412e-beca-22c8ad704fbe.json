{
  "id": "8357847e-763d-412e-beca-22c8ad704fbe",
  "title": "Real‑world video demo: Using different AI models in GitHub Copilot",
  "link": "https://github.blog/ai-and-ml/real%e2%80%91world-video-demo-using-different-ai-models-in-github-copilot/",
  "description": "Curious about how AI models perform in real-world scenarios with GitHub Copilot? Same. We made a live video demo to find out, and wrote up our key takeaways. The post Real‑world video demo: Using different AI models in GitHub Copilot appeared first on The GitHub Blog.",
  "author": "Jon Peck",
  "published": "Sat, 10 May 2025 16:00:00 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "AI models",
    "demo"
  ],
  "byline": "Jon Peck",
  "length": 8270,
  "excerpt": "Curious about how AI models perform in real-world scenarios with GitHub Copilot? Same.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "Claude 3.7 Sonnet, Gemini 2.5 Pro, GPT-4… developer choice is key to GitHub Copilot, and that’s especially true when it comes to picking your frontier model of choice.  But with so many frontier generative AI models now available to use with GitHub Copilot (and more coming seemingly every day), how do you pick the right one for the job—especially with the growing capabilities of Copilot Chat, edit, ask, and agent modes? In a recent video, I worked with GitHub’s Developer Advocate Kedasha Kerr (aka @ladykerr) to answer this exact question. Our goal? To build the same travel‑reservation app three different ways with Copilot ask, edit, and agent modes while swapping between Copilot’s growing roster of foundation models to compare each AI model in real-world development workflows.  We set out to build a very simple travel‑reservation web app (think “browse hotel rooms, pick dates, book a room”). To keep the demo snappy, we chose a lightweight stack: Backend: Flask REST API Frontend: Vue.js, styled with Tailwind Data: a local  data.json file instead of a real database That gave us just enough surface area to compare models while scaffolding the app, wiring up endpoints, and adding tests, docs, and security tweaks along the way .  Here are a few key takeaways from our video (which you should watch).  But first, let’s talk about Copilot’s three modes GitHub Copilot gives you three distinct “modes:” ask, edit, and agent mode.  Ask is there to answer questions, edit is a precise code‑rewriting scalpel, and agent mode can drive an entire task from your prompt to the finished commit. Think of it this way: Ask answers, edit assists, agent executes.  What it does (nuts \u0026 bolts)Ideal moments to reach for itAsk modeAnalyzes the code you highlight (or the context of your open file) and returns explanations, examples, or quick fixes without touching your code. No diffs, and no saving. It’s just conversational answers.• Debug a puzzling stack trace• Refresh your memory on a library or pattern• Grab a snippet or algorithm on the flyEdit modeYou select one or more files, describe a change in a plain-language prompt, and Copilot applies inline edits across those files. But first, it shows you a diff, so you can approve every change.• Add error handling or refactor repetitive code• Tight, multi‑file tweaks in a brown‑field codebase• Apply team style rules via custom instructionsAgent modeFeed it a high‑level prompt and Copilot plans steps, runs terminal commands, edits multiple files, and keeps iterating autonomously while surfacing risky commands for review. Great for project‑wide, multi‑step work.• Scaffold a new service or feature from a README• Large bug fixes that touch many modules• Automated clean ups (e.g., migrate to Tailwind everywhere) Tip 1: No matter what model you use, context matters more than you think The model you use is far from the only variable, and the context you offer your model of choice is often one of the most important elements.  That means the way you shape your prompt—and the context you provide Copilot with your prompt and additional files—makes a big difference in output quality. By toggling between capabilities, such as Copilot agent or edit mode, and switching models mid-session, we explored how Copilot responds when fed just the right amount of detail—or when asked to think a few steps ahead. Our demo underscores that different modes impact results, and thoughtful prompting can dramatically change a model’s behavior (especially in complex or ambiguous coding tasks).  The takeaway: If you’re not shaping your prompts and context deliberately, you’re probably leaving performance on the table. For a deeper dive into model choice, the guide “Which AI model should I use with GitHub Copilot?” offers a comprehensive breakdown. Agent mode, which is still relatively new and evolving fast, allows Copilot to operate more autonomously by navigating files, making changes, and performing repository-wide tasks with minimal hand holding.  This mode opens up new workflow possibilities (especially for repetitive or large-scale changes). But it also demands a different kind of trust and supervision. Seeing it in action helps demystify where it fits in your workflows. Here are two ways we used agent mode in our demo:  One‑click project scaffolding: Kedasha highlighted the project README and simply told Copilot “implement this.” Agent mode (running Gemini 2.5 Pro) created the entire Flask and Vue repository with directories, boiler‑plate code, unit tests, and even seeded data.  End‑to‑end technical docs: I started using agent mode with Claude 3.5 and prompted: “Make documentation for this app … include workflow diagrams in Mermaid.” Copilot generated a polished README, API reference, and two Mermaid sequence/flow diagrams, then opened a preview so I could render the charts before committing . Tip 3: Use custom instructions to set your ground rules Another insight from the session is just how much mileage you can get from customizing Copilot’s behavior with custom instructions.  If you don’t know, custom instructions let you lay down the rules before Copilot suggests anything (like how APIs need to be called, naming conventions, and style standards).  Kedasha in particular underscored how custom instructions can tailor tone, code style, and task focus to fit your workflow—or your team’s.  One example? Using custom instructions to give every model the same ground rules, so swaps between each model produced consistent, secure code without re‑explaining standards each time. Whether you’re nudging Copilot to avoid over-explaining, stick to a certain stack, or adopt a consistent commenting voice, the customization options are more powerful than most people realize. If you haven’t personalized Copilot yet, try custom instructions (and check out our Docs on them to get started). Tip 4: The balance between speed vs. output quality No matter what model you use, there are always tradeoffs between responsiveness, completeness, and confidence. A larger model may not provide quick suggestions when you’re working through an edit, for instance—but a smaller model may not offer the best refactoring suggestions, even if it’s faster in practice.  TL;DR: It’s not about chasing the “best” model—it’s about knowing when to switch, and why. Your default model might work 80% of the time—but having others on deck lets you handle edge cases faster and better. Take this with you This video demo isn’t a scripted feature demo. It’s two devs using Copilot the way you would—navigating unknowns, poking at what’s possible, and figuring out how to get better results by working smarter instead of harder. If you’ve been sticking with the defaults or haven’t explored multi-model workflows, this is your invitation to take things further. 👉 Watch the full video to see how we put Copilot to work—and got more out of every mode, prompt, and model.  Now—what will you build? Try GitHub Copilot to get started (we have a free tier that’s pretty great, too).  Additional resources:  Explore the demo repository: Try forking our demo repository from the video to test our different models with GitHub Copilot.  Which AI model should I use with GitHub Copilot? A look into each model currently offered with GitHub Copilot from Cassidy Williams.  A guide to deciding what model to use in GitHub Copilot: A framework for figuring out which model to use when new models are appearing what feels like every day (or maybe every week).  Written by Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/05/AI-model-thumbnail.png?fit=1600%2C900",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eClaude 3.7 Sonnet, Gemini 2.5 Pro, GPT-4… developer choice is key to GitHub Copilot, and that’s especially true when it comes to picking your frontier model of choice. \u003c/p\u003e\n\n\n\n\u003cp\u003eBut with so many frontier generative AI models now available to use with GitHub Copilot (and more coming seemingly every day), how do you pick the right one for the job—especially with the growing capabilities of Copilot Chat, edit, ask, and agent modes?\u003c/p\u003e\n\n\n\n\u003cp\u003eIn a recent video, I worked with GitHub’s Developer Advocate Kedasha Kerr (aka \u003ca href=\"https://github.com/ladykerr\"\u003e@ladykerr\u003c/a\u003e) to answer this exact question. Our goal? To build the \u003cstrong\u003esame\u003c/strong\u003e travel‑reservation app three different ways with Copilot ask, edit, and agent modes while swapping between Copilot’s growing roster of foundation models to compare each AI model in real-world development workflows. \u003c/p\u003e\n\n\n\n\u003cp\u003eWe set out to build a \u003cstrong\u003every simple travel‑reservation web app\u003c/strong\u003e (think “browse hotel rooms, pick dates, book a room”). To keep the demo snappy, we chose a lightweight stack:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBackend:\u003c/strong\u003e Flask REST API\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eFrontend:\u003c/strong\u003e Vue.js, styled with Tailwind\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eData:\u003c/strong\u003e a local  \u003ccode\u003edata.json\u003c/code\u003e file instead of a real database\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThat gave us just enough surface area to compare models while scaffolding the app, wiring up endpoints, and adding tests, docs, and security tweaks along the way . \u003c/p\u003e\n\n\n\n\u003cp\u003eHere are a few key takeaways from our video (which you should watch). \u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-but-first-let-s-talk-about-copilot-s-three-modes\"\u003eBut first, let’s talk about Copilot’s three modes\u003c/h2\u003e\n\n\n\n\u003cp\u003eGitHub Copilot gives you three distinct “modes:” ask, edit, and agent mode.  Ask is there to answer questions, edit is a precise code‑rewriting scalpel, and agent mode can drive an entire task from your prompt to the finished commit. Think of it this way: Ask answers, edit assists, agent executes. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003ctd\u003e\u003cstrong\u003eWhat it does (nuts \u0026amp; bolts)\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003e\u003cstrong\u003eIdeal moments to reach for it\u003c/strong\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eAsk mode\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eAnalyzes the code you highlight (or the context of your open file) and returns explanations, examples, or quick fixes \u003cstrong\u003ewithout touching your code\u003c/strong\u003e. No diffs, and no saving. It’s just conversational answers.\u003c/td\u003e\u003ctd\u003e• Debug a puzzling stack trace\u003cbr/\u003e• Refresh your memory on a library or pattern\u003cbr/\u003e• Grab a snippet or algorithm on the fly\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eEdit mode\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eYou select one or more files, describe a change in a plain-language prompt, and Copilot applies inline edits across those files. But first, it \u003cstrong\u003eshows you a diff, so you can approve every change\u003c/strong\u003e.\u003ca href=\"https://github.blog/ai-and-ml/github-copilot/copilot-ask-edit-and-agent-modes-what-they-do-and-when-to-use-them/\"\u003e\u003c/a\u003e\u003c/td\u003e\u003ctd\u003e• Add error handling or refactor repetitive code\u003cbr/\u003e• Tight, multi‑file tweaks in a brown‑field codebase\u003cbr/\u003e• Apply team style rules via custom instructions\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eAgent mode\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eFeed it a high‑level prompt and Copilot plans steps, runs terminal commands, edits multiple files, and keeps iterating \u003cstrong\u003eautonomously\u003c/strong\u003e while surfacing risky commands for review. Great for project‑wide, multi‑step work.\u003c/td\u003e\u003ctd\u003e• Scaffold a new service or feature from a README\u003cbr/\u003e• Large bug fixes that touch many modules\u003cbr/\u003e• Automated clean ups (e.g., migrate to Tailwind everywhere)\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\n\n\n\n\u003ch2 id=\"h-tip-1-no-matter-what-model-you-use-context-matters-more-than-you-think\"\u003eTip 1: No matter what model you use, context matters more than you think\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe model you use is far from the only variable, and the context you offer your model of choice is often one of the most important elements. \u003c/p\u003e\n\n\n\n\u003cp\u003eThat means the way you shape your prompt—and the context you provide Copilot with your prompt and additional files—makes a big difference in output quality. By toggling between capabilities, such as Copilot agent or edit mode, and switching models mid-session, we explored how Copilot responds when fed just the right amount of detail—or when asked to think a few steps ahead.\u003c/p\u003e\n\n\n\n\u003cp\u003eOur demo underscores that different modes impact results, and thoughtful prompting can dramatically change a model’s behavior (especially in complex or ambiguous coding tasks). \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eThe takeaway: \u003c/strong\u003eIf you’re not shaping your prompts and context deliberately, you’re probably leaving performance on the table.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor a deeper dive into model choice, the guide \u003ca href=\"https://github.blog/ai-and-ml/github-copilot/which-ai-model-should-i-use-with-github-copilot/\"\u003e“Which AI model should I use with GitHub Copilot?”\u003c/a\u003e offers a comprehensive breakdown.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.blog/news-insights/product-news/github-copilot-agent-mode-activated/\"\u003eAgent mode\u003c/a\u003e, which is still relatively new and evolving fast, allows Copilot to operate more autonomously by navigating files, making changes, and performing repository-wide tasks with minimal hand holding. \u003c/p\u003e\n\n\n\n\u003cp\u003eThis mode opens up new workflow possibilities (especially for repetitive or large-scale changes). But it also demands a different kind of trust and supervision. Seeing it in action helps demystify where it fits in your workflows.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere are two ways we used agent mode in our demo: \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOne‑click project scaffolding\u003c/strong\u003e: Kedasha highlighted the project README and simply told Copilot “\u003cem\u003eimplement this\u003c/em\u003e.” Agent mode (running Gemini 2.5 Pro) created the entire Flask and Vue repository with directories, boiler‑plate code, unit tests, and even seeded data. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEnd‑to‑end technical docs\u003c/strong\u003e: I started using agent mode with Claude 3.5 and prompted: “\u003cem\u003eMake documentation for this app … include workflow diagrams in Mermaid\u003c/em\u003e.” Copilot generated a polished README, API reference, and two Mermaid sequence/flow diagrams, then opened a preview so I could render the charts before committing .\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"h-tip-3-use-custom-instructions-to-set-your-ground-rules\"\u003eTip 3: Use custom instructions to set your ground rules\u003c/h2\u003e\n\n\n\n\u003cp\u003eAnother insight from the session is just how much mileage you can get from customizing Copilot’s behavior with custom instructions. \u003c/p\u003e\n\n\n\n\u003cp\u003eIf you don’t know, custom instructions let you lay down the rules before Copilot suggests anything (like how APIs need to be called, naming conventions, and style standards). \u003c/p\u003e\n\n\n\n\u003cp\u003eKedasha in particular underscored how custom instructions can tailor tone, code style, and task focus to fit your workflow—or your team’s. \u003c/p\u003e\n\n\n\n\u003cp\u003eOne example? Using custom instructions to give every model the same ground rules, so swaps between each model produced consistent, secure code without re‑explaining standards each time.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhether you’re nudging Copilot to avoid over-explaining, stick to a certain stack, or adopt a consistent commenting voice, the customization options are more powerful than most people realize. If you haven’t personalized Copilot yet, try custom instructions (and \u003ca href=\"https://code.visualstudio.com/docs/copilot/copilot-customization#_custom-instructions\"\u003echeck out our Docs on them to get started\u003c/a\u003e).\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-tip-4-the-balance-between-speed-vs-output-quality\"\u003eTip 4: The balance between speed vs. output quality\u003c/h2\u003e\n\n\n\n\u003cp\u003eNo matter what model you use, there are always tradeoffs between responsiveness, completeness, and confidence. A larger model may not provide quick suggestions when you’re working through an edit, for instance—but a smaller model may not offer the best refactoring suggestions, even if it’s faster in practice. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e It’s not about chasing the “best” model—it’s about knowing when to switch, and why. Your default model might work 80% of the time—but having others on deck lets you handle edge cases faster and better.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-take-this-with-you\"\u003eTake this with you\u003c/h2\u003e\n\n\n\n\u003cp\u003eThis video demo isn’t a scripted feature demo. It’s two devs using Copilot the way you would—navigating unknowns, poking at what’s possible, and figuring out how to get better results by working smarter instead of harder.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you’ve been sticking with the defaults or haven’t explored multi-model workflows, this is your invitation to take things further.\u003c/p\u003e\n\n\n\n\u003cp\u003e👉 \u003cstrong\u003eWatch the full video\u003c/strong\u003e to see how we put Copilot to work—and got more out of every mode, prompt, and model. \u003c/p\u003e\n\n\n\n\u003cp\u003eNow—what will you build? \u003ca href=\"https://github.com/features/copilot\"\u003eTry GitHub Copilot to get started\u003c/a\u003e (we have a free tier that’s pretty great, too). \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eAdditional resources: \u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://gh.io/travel-app\"\u003e\u003cstrong\u003eExplore the demo repository: \u003c/strong\u003e\u003c/a\u003eTry forking our demo repository from the video to test our different models with GitHub Copilot. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.blog/ai-and-ml/github-copilot/which-ai-model-should-i-use-with-github-copilot/\"\u003e\u003cstrong\u003eWhich AI model should I use with GitHub Copilot?\u003c/strong\u003e\u003c/a\u003e A look into each model currently offered with GitHub Copilot from Cassidy Williams. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://github.blog/ai-and-ml/github-copilot/a-guide-to-deciding-what-ai-model-to-use-in-github-copilot/\"\u003e\u003cstrong\u003eA guide to deciding what model to use in GitHub Copilot:\u003c/strong\u003e\u003c/a\u003e A framework for figuring out which model to use when new models are appearing what feels like every day (or maybe every week). \u003c/li\u003e\n\u003c/ul\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/5299412?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/5299412?v=4\u0026amp;s=200\" alt=\"Jon Peck\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-05-10T16:00:00Z",
  "modifiedTime": null
}
