{
  "id": "c96a41cd-7869-4d3a-8114-7e82bd27028f",
  "title": "Getting Top 1 Values Per Group in Oracle",
  "link": "https://blog.jooq.org/getting-top-1-values-per-group-in-oracle/",
  "description": "I’ve blogged about generic ways of getting top 1 or top n per category queries before on this blog. An Oracle specific version in that post used the arcane KEEP syntax: This is a bit difficult to read when you see it for the first time. Think of it as a complicated way to say … Continue reading Getting Top 1 Values Per Group in Oracle →",
  "author": "lukaseder",
  "published": "Fri, 01 Mar 2024 09:55:41 +0000",
  "source": "https://blog.jooq.org/feed",
  "categories": [
    "sql",
    "aggregate functions",
    "ANY_VALUE",
    "KEEP",
    "Oracle",
    "top-1-per-category"
  ],
  "byline": "Published by lukaseder I made jOOQ View all posts by lukaseder",
  "length": 2870,
  "excerpt": "Getting top 1 per group values is a bit tricky in SQL in general. This post explains how to do this with Oracle when multiple values per group are requested",
  "siteName": "Java, SQL and jOOQ.",
  "favicon": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=180%2C180\u0026ssl=1",
  "text": "I’ve blogged about generic ways of getting top 1 or top n per category queries before on this blog. An Oracle specific version in that post used the arcane KEEP syntax: SELECT max(actor_id) KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id), max(first_name) KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id), max(last_name) KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id), max(c) KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id) FROM ( SELECT actor_id, first_name, last_name, count(film_id) c FROM actor LEFT JOIN film_actor USING (actor_id) GROUP BY actor_id, first_name, last_name ) t; This is a bit difficult to read when you see it for the first time. Think of it as a complicated way to say you want to get the first value per group. This hypothetical syntax would be much nicer: SELECT FIRST(actor_id ORDER BY c DESC, actor_id), FIRST(first_name ORDER BY c DESC, actor_id), FIRST(last_name ORDER BY c DESC, actor_id), FIRST(c ORDER BY c DESC, actor_id) FROM (...) t; So, we’re getting the FIRST value of an expression per group when we order the group contents by the ORDER BY clause. Oracle’s syntax takes into account that ordering may be non-deterministic, leading to ties if you don’t include a unique value in the ORDER BY clause. In that case, you can aggregate all the ties, e.g. to get an AVG() if that makes sense in your business case. If you don’t care about ties, or ensure there are no ties, MAX() is an OK workaround, or since 21c, ANY_VALUE() Now, there’s quite a bit of repetition when you’re projecting multiple columns per group like that. Window functions have a WINDOW clause, where common window specifications can be named for repeated use. But GROUP BY doesn’t have such a feature, probably because only few cases arise where this would be useful. But luckily, Oracle has: OBJECT types, which are just nominally typed row value expressions ANY_VALUE, an aggregate function that generates any value per group, which has been added in Oracle 21c With these two utilities, we can do this: CREATE TYPE o AS OBJECT ( actor_id NUMBER(18), first_name VARCHAR2(50), last_name VARCHAR2(50), c NUMBER(18) ); And now: SELECT ANY_VALUE(o(actor_id, first_name, last_name, c)) KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id) FROM (...) t; Note, it would be possible to use MAX() in older Oracle versions, if you work around this error message as well: ORA-22950: cannot order objects without MAP or ORDER method This is just a workaround, of course. It’s tedious to manage named OBJECT types like that for every case of aggregation. If you don’t need the type safety, you can always also just use JSON instead: SELECT ANY_VALUE(JSON_OBJECT(actor_id, first_name, last_name, c)) KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id) FROM (...) t;",
  "image": "https://i0.wp.com/blog.jooq.org/wp-content/uploads/2021/08/jooq-logo-white-750x750-padded.png?fit=750%2C750\u0026ssl=1",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle id=\"post-12538\"\u003e\n\t\n\t\n\t\u003cdiv\u003e\n\t\t\n\u003cp\u003eI’ve blogged about generic ways of getting \u003ca href=\"https://blog.jooq.org/how-to-write-efficient-top-n-queries-in-sql/\" data-type=\"link\" data-id=\"https://blog.jooq.org/how-to-write-efficient-top-n-queries-in-sql/\"\u003etop 1 or top n per category queries\u003c/a\u003e before on this blog.\u003c/p\u003e\n\n\n\n\u003cp\u003eAn Oracle specific version in that post used the arcane \u003ccode\u003eKEEP\u003c/code\u003e syntax:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eSELECT\n  max(actor_id)   KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id),\n  max(first_name) KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id),\n  max(last_name)  KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id),\n  max(c)          KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id)\nFROM (\n  SELECT actor_id, first_name, last_name, count(film_id) c\n  FROM actor\n  LEFT JOIN film_actor USING (actor_id)\n  GROUP BY actor_id, first_name, last_name\n) t;\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eThis is a bit difficult to read when you see it for the first time. Think of it as a complicated way to say you want to get the first value per group. This hypothetical syntax would be much nicer:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eSELECT\n  FIRST(actor_id ORDER BY c DESC, actor_id),\n  FIRST(first_name ORDER BY c DESC, actor_id),\n  FIRST(last_name ORDER BY c DESC, actor_id),\n  FIRST(c ORDER BY c DESC, actor_id)\nFROM (...) t;\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eSo, we’re getting the \u003ccode\u003eFIRST\u003c/code\u003e value of an expression per group when we order the group contents by the \u003ccode\u003eORDER BY\u003c/code\u003e clause.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eOracle’s syntax takes into account that ordering may be non-deterministic, leading to ties if you don’t include a unique value in the \u003ccode\u003eORDER BY\u003c/code\u003e clause. In that case, you can aggregate all the ties, e.g. to get an \u003ccode\u003eAVG()\u003c/code\u003e if that makes sense in your business case. If you don’t care about ties, or ensure there are no ties, \u003ccode\u003eMAX()\u003c/code\u003e is an OK workaround, or since 21c, \u003ccode\u003eANY_VALUE()\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eNow, there’s quite a bit of repetition when you’re projecting multiple columns per group like that. Window functions have a \u003ca href=\"https://blog.jooq.org/how-to-reduce-syntactic-overhead-using-the-sql-window-clause/\" data-type=\"link\" data-id=\"https://blog.jooq.org/how-to-reduce-syntactic-overhead-using-the-sql-window-clause/\"\u003e\u003ccode\u003eWINDOW\u003c/code\u003e clause\u003c/a\u003e, where common window specifications can be named for repeated use. But \u003ccode\u003eGROUP BY\u003c/code\u003e doesn’t have such a feature, probably because only few cases arise where this would be useful.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut luckily, Oracle has:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOBJECT\u003c/code\u003e types, which are just nominally typed row value expressions\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u003ca href=\"https://oracle-base.com/articles/21c/any_value-21c\" data-type=\"link\" data-id=\"https://oracle-base.com/articles/21c/any_value-21c\"\u003eANY_VALUE\u003c/a\u003e\u003c/code\u003e, an aggregate function that generates any value per group, which has been added in Oracle 21c\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eWith these two utilities, we can do this:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eCREATE TYPE o AS OBJECT (\n  actor_id NUMBER(18),\n  first_name VARCHAR2(50),\n  last_name VARCHAR2(50),\n  c NUMBER(18)\n);\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAnd now:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eSELECT\n  ANY_VALUE(o(actor_id, first_name, last_name, c))\n    KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id)\nFROM (...) t;\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eNote, it would be possible to use \u003ccode\u003eMAX()\u003c/code\u003e in older Oracle versions, if you work around this error message as well:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eORA-22950: cannot order objects without MAP or ORDER method\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThis is just a workaround, of course. It’s tedious to manage named \u003ccode\u003eOBJECT\u003c/code\u003e types like that for every case of aggregation. If you don’t need the type safety, you can always also just use JSON instead:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre title=\"\"\u003eSELECT\n  ANY_VALUE(JSON_OBJECT(actor_id, first_name, last_name, c))\n    KEEP (DENSE_RANK FIRST ORDER BY c DESC, actor_id)\nFROM (...) t;\n\u003c/pre\u003e\u003c/div\u003e\t\u003c/div\u003e\n\t\n\n\t\t\t\n\t\t\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-03-01T09:55:41Z",
  "modifiedTime": "2024-03-01T09:55:41Z"
}
