{
  "id": "c02db6c0-4419-4643-8db3-d90e6afd12b8",
  "title": "Meta Open-Sources Pyrefly, a High-Performance Python Type Checker in Rust",
  "link": "https://www.infoq.com/news/2025/05/meta-pyrefly-python-typechecker/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Currently in alpha, Pyrefly is a new open-source Python type checker developed by Meta in Rust for maximum performance. Inspired by tools like Pyre, Pyright, and MyPy, Pyrefly is intended to replace the OCaml-based Pyre type checker previously used for Instagram's codebase. By Sergio De Simone",
  "author": "Sergio De Simone",
  "published": "Tue, 27 May 2025 17:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Compilers",
    "Type Inference",
    "Programming Languages",
    "Open Source",
    "Facebook",
    "Python",
    "Development",
    "news"
  ],
  "byline": "Sergio De Simone",
  "length": 2774,
  "excerpt": "Currently in alpha, Pyrefly is a new open-source Python type checker developed by Meta in Rust for maximum performance. Inspired by tools like Pyre, Pyright, and MyPy, Pyrefly is intended to replace t",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250527074915/apple-touch-icon.png",
  "text": "Currently in alpha, Pyrefly is a new open-source Python type checker developed by Meta in Rust for maximum performance. Inspired by tools like Pyre, Pyright, and MyPy, Pyrefly is intended to replace the OCaml-based Pyre type checker previously used for Instagram’s codebase. We built a custom engine for incremental computation and designed our type-checking algorithm based on years of experience in gradual typing theory and Rust expertise. By open-sourcing this technology we hope it can serve projects of any size well. According to Meta engineers, the main motivation behind Pyrefly was the need to support responsive IDE typechecking, which became increasingly difficult to achieve with Pyre as the complexity of Instagram’s type system grew. We explored alternate solutions and leveraged community tools like Pyright for code navigation. But the need for an extensible type checker that can bring code navigation, checking at scale, and exporting types to other services drove us to start over, creating Pyrefly. Pyrefly is designed for high performance and implemented in Rust to maximize efficiency. According to Meta, it can check 1.8 million lines of code per second on large codebases, making it possible to perform typechecking on every single keystroke. Meta’s benchmarks show that Pyrefly can typecheck the entire Instagram codebase in 13.4 seconds, compared to 100+ seconds with Pyre. Similarly, Pyrefly takes just 2.4 seconds to typecheck PyTorch, while Pyright takes 35.2 seconds and MyPy 48.1 seconds. Beyond performance, Meta chose Rust for building Pyrefly because of its safety, cross-platform support, and ability to compile to WebAssembly, which enables a browser-based Playground experience. Besides typechecking annotated Python codebases, Pyrefly also aims to be useful for unannotated code. To this end, it can automatically infer types for return values and local variables, allowing developers to explicitly insert the inferred types into their code if they want so. Meta has released Pyrefly as an alpha, due to open bugs and features in the making, but plans to move to beta tis Summer. A Visual Studio Code extension is available on the Visual Studio Marketplace. Pyrefly is not the only Python type checker written in Rust. Astral, a company specializing in developer tools, recently launched Ty in preview. Ty uses an hand-written parser for Python, written in Rust and based on Python's official specification. It also offers a playground if you'd like to try it out. Other tools made by Astral include the Ruff linter and the uv package manager, both written in Rust. About the Author Sergio De Simone",
  "image": "https://res.infoq.com/news/2025/05/meta-pyrefly-python-typechecker/en/card_header_image/generatedCard-1748361682992.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eCurrently in alpha, \u003ca href=\"https://github.com/facebook/pyrefly\"\u003ePyrefly\u003c/a\u003e is a new open-source Python type checker \u003ca href=\"https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python\"\u003edeveloped by Meta\u003c/a\u003e in Rust for maximum performance. Inspired by tools like Pyre, Pyright, and MyPy, Pyrefly is intended to replace the OCaml-based \u003ca href=\"https://github.com/facebook/pyre-check\"\u003ePyre\u003c/a\u003e type checker previously used for Instagram’s codebase.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://pyrefly.org/en/docs/pyrefly-faq/\"\u003eWe built\u003c/a\u003e a custom engine for incremental computation and designed our type-checking algorithm based on years of experience in gradual typing theory and Rust expertise. By open-sourcing this technology we hope it can serve projects of any size well.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAccording to Meta engineers, the main motivation behind Pyrefly was the need to support responsive IDE typechecking, which became increasingly difficult to achieve with Pyre as the complexity of Instagram’s type system grew.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWe explored alternate solutions and leveraged community tools like Pyright for code navigation. But the need for an extensible type checker that can bring code navigation, checking at scale, and exporting types to other services drove us to start over, creating Pyrefly.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003ePyrefly is designed for high performance and implemented in Rust to maximize efficiency. According to Meta, it can check 1.8 million lines of code per second on large codebases, making it possible to perform typechecking on every single keystroke.\u003c/p\u003e\n\n\u003cp\u003eMeta’s benchmarks show that Pyrefly can typecheck the entire Instagram codebase in 13.4 seconds, compared to 100+ seconds with Pyre. Similarly, Pyrefly takes just 2.4 seconds to typecheck PyTorch, while Pyright takes 35.2 seconds and MyPy 48.1 seconds.\u003c/p\u003e\n\n\u003cp\u003eBeyond performance, Meta chose Rust for building Pyrefly because of its safety, cross-platform support, and ability to compile to WebAssembly, which enables a browser-based \u003ca href=\"https://pyrefly.org/sandbox/\"\u003ePlayground experience\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eBesides typechecking annotated Python codebases, Pyrefly also aims to be useful for unannotated code. To this end, it can automatically infer types for return values and local variables, allowing developers to explicitly insert the inferred types into their code if they want so.\u003c/p\u003e\n\n\u003cp\u003eMeta has released Pyrefly as an alpha, due to open bugs and features in the making, but plans to move to beta tis Summer. A \u003ca href=\"https://marketplace.visualstudio.com/items?itemName=meta.pyrefly\"\u003eVisual Studio Code extension\u003c/a\u003e is available on the Visual Studio Marketplace.\u003c/p\u003e\n\n\u003cp\u003ePyrefly is not the only Python type checker written in Rust. Astral, a company specializing in developer tools, recently launched \u003ca href=\"https://github.com/astral-sh/ty\"\u003eTy\u003c/a\u003e in preview. \u003ca href=\"https://news.ycombinator.com/item?id=43919844\"\u003eTy uses an hand-written parser\u003c/a\u003e for Python, written in Rust and based on Python\u0026#39;s official specification. \u003ca href=\"https://play.ty.dev/\"\u003eIt also offers a playground\u003c/a\u003e if you\u0026#39;d like to try it out. Other tools made by Astral include the \u003ca href=\"https://astral.sh/ruff\"\u003eRuff linter\u003c/a\u003e and the \u003ca href=\"https://github.com/astral-sh/uv\"\u003e\u003ccode\u003euv\u003c/code\u003e package manager\u003c/a\u003e, both written in Rust.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio-De-Simone\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio De Simone\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-05-27T00:00:00Z",
  "modifiedTime": null
}
