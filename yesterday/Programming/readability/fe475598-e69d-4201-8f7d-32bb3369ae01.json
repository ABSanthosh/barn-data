{
  "id": "fe475598-e69d-4201-8f7d-32bb3369ae01",
  "title": "Plugin Verifier and API Compatibility Maintenance: Livestream Recording \u0026 Key Takeaways",
  "link": "https://blog.jetbrains.com/platform/2025/05/plugin-verifier-and-api-compatibility-maintenance-livestream-recording-amp-key-takeaways/",
  "description": "In a recent session, IntelliJ Platform Developer Advocate Róbert Novotný walked through the Plugin Verifier—one of the most important tools for maintaining plugin compatibility across JetBrains IDEs. The session focused on spotting breaking API changes, avoiding internal APIs, and verifying plugin behavior across IDE versions. If you couldn’t join us live, the full recording is […]",
  "author": "Elena Kerpeleva",
  "published": "Fri, 30 May 2025 13:34:43 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "plugin-development",
    "livestreams",
    "marketplace",
    "jetbrains-marketplace",
    "livestream"
  ],
  "byline": "Elena Kerpeleva",
  "length": 5757,
  "excerpt": "Check out the key takeaways from the recent livestream on the Plugin Verifier, including tips on keeping plugins compatible and avoiding API issues.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Plugin and extension development for JetBrains products. Development Livestreams MarketplacePlugin Verifier and API Compatibility Maintenance: Livestream Recording \u0026 Key Takeaways In a recent session, IntelliJ Platform Developer Advocate Róbert Novotný walked through the Plugin Verifier—one of the most important tools for maintaining plugin compatibility across JetBrains IDEs. The session focused on spotting breaking API changes, avoiding internal APIs, and verifying plugin behavior across IDE versions. If you couldn’t join us live, the full recording is now available on JetBrains TV. And if you prefer reading over watching, this blog post sums up the key takeaways from the session. What is the IntelliJ Plugin Verifier? The IntelliJ Plugin Verifier is a tool that ensures a plugin behaves correctly across JetBrains IDE versions. It checks for compatibility issues with the evolving IntelliJ Platform APIs, and validates that a plugin: Contains a complete and correct plugin descriptor (plugin.xml) Uses APIs that are available and compatible with target IDE versions Avoids deprecated, internal, or experimental APIs JetBrains Marketplace relies on the Plugin Verifier to assess plugins upon upload, acting as a quality gate for all listed plugins. Why Compatibility Matters Publishing a plugin to JetBrains Marketplace is about more than just passing basic validation. End users expect plugins to work reliably, without errors or unexpected behavior. The Plugin Verifier helps plugin authors ensure their plugins will run smoothly across IDE versions, minimizing user disruption. Typical Compatibility Challenges The session covered several types of issues that the Plugin Verifier can detect: Deprecated APIs: These may work now but are scheduled for removal in future platform versions. Internal APIs: Not intended for external use, these may change without notice and break plugins. Experimental APIs: Unstable and subject to change, their use is discouraged. Override-only APIs: These should only be overridden, not invoked directly. Visibility changes: Classes, methods and fields may become protected or public. Structural changes: Classes may become interfaces or vice versa, breaking assumptions in plugin code. Example: Plugin verification results Running the Plugin Verifier Locally To avoid the delay of uploading a plugin just to see it fail verification, developers can and should run the Plugin Verifier locally. There are two main ways to do this: With IntelliJ Platform Gradle Plugin: This is the recommended approach. The Gradle plugin provides tasks like verifyPlugin and verifyPluginStructure for integrated verification. Standalone Tool: Developers can download the Plugin Verifier JAR from GitHub or Maven Central and run it via the command line. The session also walked through how to set up both methods, showing how developers can validate plugins against multiple IDE versions, identify API compatibility problems, and fix issues before publication. Integrating with CI/CD Integrating the Plugin Verifier into a continuous integration pipeline saves time and prevents issues from reaching production. The verifier can be run against new plugin versions and upcoming IDE releases to catch problems proactively. Handling Warnings and Errors While the Plugin Verifier highlights potential problems, not all warnings are show-stoppers. Some rules (like those about naming or older plugin IDs) can be muted locally using CLI flags (e.g., --mute). However, JetBrains Marketplace may enforce stricter rules, and muted issues locally do not affect Marketplace verification. Best Practices To get the most out of the Plugin Verifier and to avoid common pitfalls later on, keep these practical tips in mind: Avoid internal and deprecated APIs whenever possible. Use stable and documented APIs that are part of the official SDK. Run verification locally before every release. Regularly check compatibility against newer IDE versions. Resources and Further Reading Find more details and documentation in the IntelliJ Platform SDK docs Ask questions or explore existing discussions on the JetBrains Platform Forum Contribute to development on the Plugin Verifier GitHub Repository Conclusion The Plugin Verifier is a crucial tool in the JetBrains plugin development workflow. Whether integrated via Gradle or run standalone, it empowers developers to ship robust, future-proof plugins. By embracing it early in the development process, plugin authors can ensure a smoother path to publication and better experiences for their users. Subscribe to JetBrains Platform updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/05/Featured_Blog_1280x720-5-3.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/platform/\"\u003e\n                                                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/JetBrains-icon-1.svg\" alt=\"Platform logo\"/\u003e\n                                                                                                                            \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003ePlugin and extension development for JetBrains products. \u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/platform/category/plugin-development/\"\u003eDevelopment\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/platform/category/livestreams/\"\u003eLivestreams\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/platform/category/marketplace/\"\u003eMarketplace\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003ePlugin Verifier and API Compatibility Maintenance: Livestream Recording \u0026amp; Key Takeaways\u003c/h2\u003e                    \n                    \n\u003cp\u003eIn a recent session, IntelliJ Platform Developer Advocate Róbert Novotný walked through the Plugin Verifier—one of the most important tools for maintaining plugin compatibility across JetBrains IDEs. The session focused on spotting breaking API changes, avoiding internal APIs, and verifying plugin behavior across IDE versions.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you couldn’t join us live, the full recording is now available on \u003ca href=\"https://www.youtube.com/live/cpGvA_Wf5Zo\" data-type=\"link\" data-id=\"https://www.youtube.com/live/cpGvA_Wf5Zo\" target=\"_blank\" rel=\"noopener\"\u003eJetBrains TV\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe title=\"Plugin Verifier and API Compatibility Maintenance\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/cpGvA_Wf5Zo?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnd if you prefer reading over watching, this blog post sums up the key takeaways from the session.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eWhat is the IntelliJ Plugin Verifier?\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe IntelliJ Plugin Verifier is a tool that ensures a plugin behaves correctly across JetBrains IDE versions. It checks for compatibility issues with the evolving IntelliJ Platform APIs, and validates that a plugin:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eContains a complete and correct plugin descriptor (plugin.xml)\u003c/li\u003e\n\n\n\n\u003cli\u003eUses APIs that are available and compatible with target IDE versions\u003c/li\u003e\n\n\n\n\u003cli\u003eAvoids deprecated, internal, or experimental APIs\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eJetBrains Marketplace relies on the Plugin Verifier to assess plugins upon upload, acting as a quality gate for all listed plugins.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eWhy Compatibility Matters\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003ePublishing a plugin to JetBrains Marketplace is about more than just passing basic validation. End users expect plugins to work reliably, without errors or unexpected behavior. The Plugin Verifier helps plugin authors ensure their plugins will run smoothly across IDE versions, minimizing user disruption.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eTypical Compatibility Challenges\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe session covered several types of issues that the Plugin Verifier can detect:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDeprecated APIs\u003c/strong\u003e: These may work now but are scheduled for removal in future platform versions.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eInternal APIs\u003c/strong\u003e: Not intended for external use, these may change without notice and break plugins.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eExperimental APIs\u003c/strong\u003e: Unstable and subject to change, their use is discouraged.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eOverride-only APIs\u003c/strong\u003e: These should only be overridden, not invoked directly.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eVisibility changes\u003c/strong\u003e: Classes, methods and fields may become protected or public.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eStructural changes\u003c/strong\u003e: Classes may become interfaces or vice versa, breaking assumptions in plugin code.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2048\" height=\"1593\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-37.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eExample: Plugin verification results\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eRunning the Plugin Verifier Locally\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo avoid the delay of uploading a plugin just to see it fail verification, developers can and should run the Plugin Verifier locally. There are two main ways to do this:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eWith IntelliJ Platform Gradle Plugin\u003c/strong\u003e: This is the recommended approach. The Gradle plugin provides tasks like \u003ccode\u003everifyPlugin\u003c/code\u003e and \u003ccode\u003everifyPluginStructure\u003c/code\u003e for integrated verification.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eStandalone Tool\u003c/strong\u003e: Developers can download the Plugin Verifier JAR from GitHub or Maven Central and run it via the command line.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eThe session also walked through how to set up both methods, showing how developers can validate plugins against multiple IDE versions, identify API compatibility problems, and fix issues before publication.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eIntegrating with CI/CD\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eIntegrating the Plugin Verifier into a continuous integration pipeline saves time and prevents issues from reaching production. The verifier can be run against new plugin versions and upcoming IDE releases to catch problems proactively.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eHandling Warnings and Errors\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhile the Plugin Verifier highlights potential problems, not all warnings are show-stoppers. Some rules (like those about naming or older plugin IDs) can be muted locally using CLI flags (e.g., \u003ccode\u003e--mute\u003c/code\u003e). However, JetBrains Marketplace may enforce stricter rules, and muted issues locally do not affect Marketplace verification.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1364\" height=\"524\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Screenshot-2025-05-26-at-18.15.48.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eBest Practices\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo get the most out of the Plugin Verifier and to avoid common pitfalls later on, keep these practical tips in mind:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eAvoid internal and deprecated APIs whenever possible.\u003c/li\u003e\n\n\n\n\u003cli\u003eUse stable and documented APIs that are part of the official SDK.\u003c/li\u003e\n\n\n\n\u003cli\u003eRun verification locally before every release.\u003c/li\u003e\n\n\n\n\u003cli\u003eRegularly check compatibility against newer IDE versions.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eResources and Further Reading\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eFind more details and documentation in the\u003cstrong\u003e \u003c/strong\u003e\u003ca href=\"https://plugins.jetbrains.com/docs/intellij/verifying-plugin-compatibility.html\" target=\"_blank\" rel=\"noopener\"\u003eIntelliJ Platform SDK docs\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eAsk questions or explore existing discussions on the\u003cstrong\u003e \u003c/strong\u003e\u003ca href=\"https://platform.jetbrains.com/c/intellij-platform/plugin-verifier\" target=\"_blank\" rel=\"noopener\"\u003eJetBrains Platform Forum\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eContribute to development on the\u003cstrong\u003e \u003c/strong\u003e\u003ca href=\"https://github.com/JetBrains/intellij-plugin-verifier\" target=\"_blank\" rel=\"noopener\"\u003ePlugin Verifier GitHub Repository\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eConclusion\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe Plugin Verifier is a crucial tool in the JetBrains plugin development workflow. Whether integrated via Gradle or run standalone, it empowers developers to ship robust, future-proof plugins. By embracing it early in the development process, plugin authors can ensure a smoother path to publication and better experiences for their users.\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to JetBrains Platform updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
