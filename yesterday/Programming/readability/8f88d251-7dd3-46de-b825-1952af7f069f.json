{
  "id": "8f88d251-7dd3-46de-b825-1952af7f069f",
  "title": "Qodana Case Study: How JetBrains Kotlin QA Scaled Quality for Kotlin 2.0",
  "link": "https://blog.jetbrains.com/qodana/2025/05/qodana-case-study-kotlin/",
  "description": "When we prepared to release IntelliJ IDEA support for Kotlin 2.0, a major milestone for their compiler and ecosystem, their QA team faced a formidable challenge: how to ensure consistent, reliable quality across a complex and evolving codebase without slowing down development. With the Kotlin compiler, IDE plugin, and numerous inspections being refactored and rewritten, […]",
  "author": "Kerry Beetge",
  "published": "Wed, 21 May 2025 15:01:27 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "case-study-qodana",
    "kotlin",
    "qodana"
  ],
  "byline": "Kerry Beetge",
  "length": 6396,
  "excerpt": "With the Kotlin compiler, IDE plugin, and numerous inspections being refactored and rewritten, the need for deep validation was clear, but the scope made traditional manual testing impractical. That’s where Qodana came in.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The code quality platform for teams Case Study Kotlin QodanaQodana Case Study: How JetBrains Kotlin QA Scaled Quality for Kotlin 2.0 Qodana case study Table of ContentsThe challenge: Complexity without clear-cut use casesThe solution: Static analysis with QodanaHow Kotlin integrated QodanaResults: Faster releases, more confidenceLooking ahead When we prepared to release IntelliJ IDEA support for Kotlin 2.0, a major milestone for their compiler and ecosystem, their QA team faced a formidable challenge: how to ensure consistent, reliable quality across a complex and evolving codebase without slowing down development. With the Kotlin compiler, IDE plugin, and numerous inspections being refactored and rewritten, the need for deep validation was clear, but the scope made traditional manual testing impractical. That’s where Qodana came in. The challenge: Complexity without clear-cut use cases Rather than discrete features with predictable behavior, Kotlin QA was dealing with broad architectural changes, language-level enhancements, and evolving development workflows. Many of these updates didn’t come with fixed test scenarios. Instead, the QA team had to understand and test large interconnected systems within the scope of the IDE quickly and at scale. The release of Kotlin 2.0 brought major updates to the compiler, improving performance and extensibility, while also introducing necessary refactorings and reductions in technical debt. Alongside this, the Kotlin IDE plugin underwent substantial changes, including complete rewrites of many inspections used to detect unreachable or unconventional code. These inspections needed to work reliably across every conceivable language construct. Manually verifying each one would have required hundreds of hours and substantial QA bandwidth, something the team simply didn’t have. The solution: Static analysis with Qodana To help meet this challenge, the Kotlin QA team turned to Qodana as a supporting tool in the process. Their strategy was to leverage static code analysis to both improve code health and test the inspections themselves by running them on large, real-world codebases like IntelliJ IDEA, which is developed using both Kotlin and Java. This gave the team immediate value in two ways: Validation at scale: They could confirm that inspections were functioning as expected across millions of lines of code quickly, automatically, and comprehensively. Early detection: Static analysis helped uncover edge cases, inconsistencies, and bugs that wouldn’t have surfaced through manual exploratory testing. This image is for illustrative purposes only as the Kotlin profile is confidential. How Kotlin integrated Qodana After experimenting with Qodana locally, the team integrated it into their CI pipeline using TeamCity. They added Qodana as a build step and began publishing results to Qodana Cloud. To ensure focus, they used baseline files to filter out known issues, allowing them to zero in on new, unexpected regressions without unnecessary noise. The result was a streamlined workflow that supported both developers and QA engineers by delivering fast, actionable feedback. Supporting strategic testingThis initiative has brought a significant improvement for both QA and the development team. It took automated regression testing to the next level, providing solid ground for further development. Qodana played a key role in enabling this shift: By automating deep inspection coverage, it freed the team to focus on high-value, human-driven exploratory testing of complex integration parts. It allowed the team to move faster while maintaining confidence in the quality of the Kotlin ecosystem. Results: Faster releases, more confidence Saved time and effort: Manual testing was no longer a bottleneck. Improved accuracy: Real-world validation caught bugs earlier and more reliably. Increased team buy-in: The approach was well-received across the team, and quickly became a standard part of Kotlin QA’s workflow. Looking ahead Following the success of this initiative, the Kotlin team is exploring further expansion of static analysis with Qodana, including: Deeper CI integration and infrastructure automation. Performance QA support. Continued evolution of their Exploratory QA model. Liliia Abdulina, Head of QA For Kotlin Language and Ecosystem Teams Qodana really saved us when we were rolling out Kotlin 2.0 IDE support. It helped us scale testing across large codebases and identify problems early – without overwhelming our team with manual work. The developers were genuinely impressed by the results, and the whole team values the stability and speed we’ve gained.” Kotlin uses Qodana to analyze complex, modular systems. Your team can also use Qodana for code quality and as a core pillar of your QA strategy. Want to integrate Qodana into your team’s QA workflow? Learn more about how Qodana works or dive into another Qodana case study with Moovit. Try Qodana Subscribe to Qodana Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/05/QD-social-BlogSocialShare-2560x1440-1-2.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/qodana/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2021/07/Qodana-1.svg\" alt=\"Qodana logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe code quality platform for teams\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/qodana/category/case-study-qodana/\"\u003eCase Study\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/qodana/category/kotlin/\"\u003eKotlin\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/qodana/category/qodana/\"\u003eQodana\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eQodana Case Study: How JetBrains Kotlin QA Scaled Quality for Kotlin 2.0\u003c/h2\u003e                    \n                    \n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXetO7F7iXEWTK26xeCvobwmN-5DlPv9AL3ZD7gq14yg3p4-gnIRoIzdm2xq6dppuKgkN9HcJPpN1YYUn8sP9zx6nsf0Rlfxq4iRBAnDXObjiFUAb6U--FtBrsmuRvmOpsz-z5W9?key=axDCrNcEhPBW17CayNm6x7rC\" alt=\"Qodana Case Study: Kotlin\"/\u003e\u003cfigcaption\u003eQodana case study\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cdiv id=\"rank-math-toc\"\u003e\u003ch2\u003eTable of Contents\u003c/h2\u003e\u003cnav\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#the-challenge-complexity-without-clear-cut-use-cases\"\u003eThe challenge: Complexity without clear-cut use cases\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#the-solution-static-analysis-with-qodana\"\u003eThe solution: Static analysis with Qodana\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#how-kotlin-integrated-qodana\"\u003eHow Kotlin integrated Qodana\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#results-faster-releases-more-confidence\"\u003eResults: Faster releases, more confidence\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#looking-ahead\"\u003eLooking ahead\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eWhen we prepared to release IntelliJ IDEA support for Kotlin 2.0, a major milestone for their compiler and ecosystem, their QA team faced a formidable challenge: how to ensure consistent, reliable quality across a complex and evolving codebase without slowing down development.\u003c/p\u003e\n\n\n\n\u003cp\u003eWith the Kotlin compiler, IDE plugin, and numerous inspections being refactored and rewritten, the need for deep validation was clear, but the scope made traditional manual testing impractical. That’s where Qodana came in.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"the-challenge-complexity-without-clear-cut-use-cases\"\u003e\u003cstrong\u003eThe challenge: Complexity without clear-cut use cases\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eRather than discrete features with predictable behavior, Kotlin QA was dealing with broad architectural changes, language-level enhancements, and evolving development workflows. Many of these updates didn’t come with fixed test scenarios. Instead, the QA team had to understand and test large interconnected systems within the scope of the IDE quickly and at scale.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe release of Kotlin 2.0 brought major updates to the compiler, improving performance and extensibility, while also introducing necessary refactorings and reductions in technical debt. Alongside this, the Kotlin IDE plugin underwent substantial changes, including complete rewrites of many inspections used to detect unreachable or unconventional code.\u003c/p\u003e\n\n\n\n\u003cp\u003eThese inspections needed to work reliably across every conceivable language construct. Manually verifying each one would have required hundreds of hours and substantial QA bandwidth, something the team simply didn’t have.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"the-solution-static-analysis-with-qodana\"\u003e\u003cstrong\u003eThe solution: Static analysis with Qodana\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eTo help meet this challenge, the Kotlin QA team turned to Qodana as a supporting tool in the process.\u003c/p\u003e\n\n\n\n\u003cp\u003eTheir strategy was to leverage\u003ca href=\"https://www.jetbrains.com/pages/static-code-analysis-guide/#:~:text=So%2C%20what%20is%20static%20code,vulnerabilities%2C%20without%20executing%20the%20code.\" target=\"_blank\" rel=\"noopener\"\u003e static code analysis\u003c/a\u003e to both improve code health and test the inspections themselves by running them on large, real-world codebases like IntelliJ IDEA, which is developed using both Kotlin and Java.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis gave the team immediate value in two ways:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eValidation at scale:\u003c/strong\u003e They could confirm that inspections were functioning as expected across millions of lines of code quickly, automatically, and comprehensively.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEarly detection:\u003c/strong\u003e Static analysis helped uncover edge cases, inconsistencies, and bugs that wouldn’t have surfaced through manual exploratory testing.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1999\" height=\"1125\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-26.png\" alt=\"\"/\u003e\u003cfigcaption\u003eThis image is for illustrative purposes only as the Kotlin profile is confidential. \u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"how-kotlin-integrated-qodana\"\u003e\u003cstrong\u003eHow Kotlin integrated Qodana\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eAfter experimenting with Qodana locally, the team integrated it into their CI pipeline using TeamCity. They added Qodana as a build step and began publishing results to Qodana Cloud.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo ensure focus, they used baseline files to filter out known issues, allowing them to zero in on new, unexpected regressions without unnecessary noise. The result was a streamlined workflow that supported both developers and QA engineers by delivering fast, actionable feedback.\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eSupporting strategic testing\u003c/strong\u003e\u003c/p\u003e\u003cp\u003eThis initiative has brought a significant improvement for both QA and the development team. It took automated regression testing to the next level, providing solid ground for further development.\u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eQodana played a key role in enabling this shift:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eBy automating deep inspection coverage, it freed the team to focus on high-value, human-driven exploratory testing of complex integration parts.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003eIt allowed the team to move faster while maintaining confidence in the quality of the Kotlin ecosystem.\u003cbr/\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"results-faster-releases-more-confidence\"\u003e\u003cstrong\u003eResults: Faster releases, more confidence\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSaved time and effort:\u003c/strong\u003e Manual testing was no longer a bottleneck.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eImproved accuracy:\u003c/strong\u003e Real-world validation caught bugs earlier and more reliably.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eIncreased team buy-in:\u003c/strong\u003e The approach was well-received across the team, and quickly became a standard part of Kotlin QA’s workflow.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"looking-ahead\"\u003e\u003cstrong\u003eLooking ahead\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eFollowing the success of this initiative, the Kotlin team is exploring further expansion of static analysis with Qodana, including:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eDeeper CI integration and infrastructure automation.\u003c/li\u003e\n\n\n\n\u003cli\u003ePerformance QA support.\u003c/li\u003e\n\n\n\n\u003cli\u003eContinued evolution of their Exploratory QA model.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n    \u003cdiv\u003e\n                                                            \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/leadership-10.png\" alt=\"\" loading=\"lazy\"/\u003e\n                        \u003c/p\u003e\n                                        \u003cdiv\u003e\n                                                    \u003ch4\u003eLiliia Abdulina, Head of QA For Kotlin Language and Ecosystem Teams\u003c/h4\u003e\n                                                \u003cp\u003e\u003cem data-rich-text-format-boundary=\"true\"\u003eQodana really saved us when we were rolling out Kotlin 2.0 IDE support. It helped us scale testing across large codebases and identify problems early – without overwhelming our team with manual work. The developers were genuinely impressed by the results, and the whole team values the stability and speed we’ve gained.”\u003c/em\u003e\u003c/p\u003e\n                    \u003c/div\u003e\n                            \u003c/div\u003e\n\n\n\n\u003cp\u003eKotlin uses Qodana to analyze complex, modular systems. Your team can also \u003ca href=\"https://blog.jetbrains.com/qodana/2025/05/qodana-2025-1-release/\"\u003euse Qodana for code quality\u003c/a\u003e and as a core pillar of your QA strategy.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eWant to integrate Qodana into your team’s QA workflow?\u003c/strong\u003e\u003ca href=\"https://www.jetbrains.com/qodana/\" target=\"_blank\" rel=\"noopener\"\u003e Learn more about how Qodana works\u003c/a\u003e or dive into another Qodana case study with \u003ca href=\"https://blog.jetbrains.com/qodana/2024/11/qodana-case-studies-moovit/\"\u003eMoovit\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Try Qodana\" href=\"https://www.jetbrains.com/qodana/buy/?billing=yearly\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://www.jetbrains.com/qodana/buy/?billing=yearly\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eTry Qodana\u003c/a\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Qodana Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
