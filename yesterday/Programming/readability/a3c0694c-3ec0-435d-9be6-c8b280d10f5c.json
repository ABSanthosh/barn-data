{
  "id": "a3c0694c-3ec0-435d-9be6-c8b280d10f5c",
  "title": "Kotlin Multiplatform Tooling: Now in IntelliJ IDEA and Android Studio",
  "link": "https://blog.jetbrains.com/kotlin/2025/05/kotlin-multiplatform-tooling-now-in-intellij-idea-and-android-studio/",
  "description": "We recently outlined our plans for the future of Kotlin Multiplatform tooling. Today, we’re putting those plans into action with the Beta release of the new KMP plugin for your favorite IDEs – IntelliJ IDEA and Android Studio. This plugin simplifies every part of the KMP experience, from project setup to cross-platform development and Compose […]",
  "author": "Ekaterina Volodko",
  "published": "Mon, 19 May 2025 15:38:18 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "multiplatform"
  ],
  "byline": "Ekaterina Volodko",
  "length": 6397,
  "excerpt": "The new KMP plugin for IntelliJ IDEA and Android Studio simplifies every part of the KMP experience, from project setup to Compose UI previews.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "A concise multiplatform language developed by JetBrains MultiplatformKotlin Multiplatform Tooling: Now in IntelliJ IDEA and Android Studio We recently outlined our plans for the future of Kotlin Multiplatform tooling. Today, we’re putting those plans into action with the Beta release of the new KMP plugin for your favorite IDEs – IntelliJ IDEA and Android Studio. This plugin simplifies every part of the KMP experience, from project setup to cross-platform development and Compose UI previews. Try the KMP Plugin Integrated New Project wizard With the plugin installed, you can create new KMP projects directly in the IDE. The wizard supports all target combinations of Android, iOS, desktop, web, and server. You can also choose between a native UI or a shared UI with Compose Multiplatform. Preflight checks When you open a project, the plugin runs environment checks automatically. It verifies your OS, Java setup, Android SDK, Xcode installation, and Gradle configuration. If anything’s missing or outdated, you’ll get recommendations on how to fix it. Ready to run After indexing, the plugin automatically generates run configurations for all platforms available in your project – Android, iOS, web, desktop, and server.  For iOS and Android, you can select simulators or emulators, or set up a physical device with the plugin’s guidance. Cross-language support For projects with both Kotlin and Swift, the plugin enables cross-language navigation, syntax highlighting, quick documentation, and debugging in your IDE. Debugging support for iOS is already available in Android Studio and IntelliJ IDEA Ultimate, and support in IntelliJ IDEA Community Edition is coming later. Compose Multiplatform support Compose Multiplatform for iOS recently became Stable, allowing you to confidently build beautiful shared UIs for production use across iOS, Android, and desktop.  Compose Multiplatform code is fully supported in the IDE, with features like autocompletion, navigation, refactorings, and resource support. Thanks to UI previews that are available even from common code, you can preview components directly in the IDE without deploying your app. Compose Hot Reload We know that fast iteration is key when building UIs. With Compose Hot Reload, you can instantly see UI changes without restarting your app or losing its state.  Compose Hot Reload runs on the desktop JVM target, but even if your project is focused on mobile, you can add a desktop target just for development purposes. As you modify your Compose code – adjusting layouts, styles, or logic – Hot Reload detects changes and applies them live to your running app. It’s not limited to small tweaks – you can change method signatures, remove existing code, and even create new classes. Your app retains its state, including the current screen and user input. You can safely use Hot Reload for production apps, as it only affects development builds. To get started, add the Compose Hot Reload Gradle plugin to your project – see the documentation for setup details. Try Compose Hot Reload How to install the KMP plugin The Kotlin Multiplatform plugin is available via JetBrains Marketplace for IntelliJ IDEA 2025.1.1.1 and Android Studio Narwhal 2025.1.1. It only supports macOS for now, but Windows and Linux support is coming soon.  Note that you need to explicitly enable K2 mode. To do this, go to Settings | Languages \u0026 Frameworks | Kotlin and select the Enable K2 mode checkbox. What’s next for Kotlin Multiplatform tooling The KMP plugin is currently in Beta. It is ready for production use and already provides a solid foundation for Kotlin Multiplatform development. We are actively working to expand its capabilities, polish the experience, and address known limitations. Your feedback is crucial to help us refine the tooling further. Our initial focus is on mobile development, with desktop and web improvements coming next. We plan to stabilize the KMP plugin later this year, expand operating system support, and introduce new features based on your feedback. Upcoming tooling improvements include: Windows and Linux supportYou’ll be able to use the KMP plugin on Windows and Linux. Running iOS applications will remain macOS-specific. Advanced IDE support for SwiftThe current plugin version already supports basic code completion and editing for Swift code. More advanced features, such as finding usages and type hierarchy navigation, are still planned. Easier KMP module creationYou’ll be able to create new Kotlin Multiplatform modules using the integrated KMP wizard. Improved tooling support for web and desktop platformsAfter stabilizing mobile platform support, we will focus on improving tooling for desktop and web development, aiming for a smoother, unified multiplatform experience. Share your feedback We’d love to hear your feedback! Please share it in the #multiplatform channel on the Kotlinlang Slack (get an invite). If you encounter any issues, please report them through our issue tracker. Try the KMP Plugin Read more Get started with Kotlin Multiplatform Compose Multiplatform for iOS Is Stable and Production-Ready Present and Future of Kotlin for Web Kotlin Multiplatform Tooling – Shifting Gears Subscribe to Kotlin Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/05/kmp-tooling-social-share.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/kotlin/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/Kotlin-5.svg\" alt=\"Kotlin logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eA concise multiplatform language developed by JetBrains\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/kotlin/category/multiplatform/\"\u003eMultiplatform\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eKotlin Multiplatform Tooling: Now in IntelliJ IDEA and Android Studio\u003c/h2\u003e                    \n                    \n\u003cp\u003eWe recently outlined our \u003ca href=\"https://blog.jetbrains.com/kotlin/2025/02/kotlin-multiplatform-tooling-shifting-gears/\"\u003eplans for the future of Kotlin Multiplatform tooling.\u003c/a\u003e Today, we’re putting those plans into action with the Beta release of the \u003ca href=\"https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform\" target=\"_blank\" rel=\"noopener\"\u003enew KMP plugin\u003c/a\u003e for your favorite IDEs – IntelliJ IDEA and Android Studio. This plugin simplifies every part of the KMP experience, from project setup to cross-platform development and Compose UI previews.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Try the KMP Plugin\" href=\"https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform\" target=\"_blank\" rel=\"noopener\"\u003eTry the KMP Plugin\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eIntegrated \u003c/strong\u003e\u003cstrong\u003e\u003cem\u003eNew Project\u003c/em\u003e\u003c/strong\u003e \u003cstrong\u003ewizard\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eWith the plugin installed, you can create new KMP projects directly in the IDE.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe wizard supports all target combinations of Android, iOS, desktop, web, and server. You can also choose between a native UI or a shared UI with \u003ca href=\"https://www.jetbrains.com/compose-multiplatform/\" target=\"_blank\" rel=\"noopener\"\u003eCompose Multiplatform\u003c/a\u003e.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1600\" height=\"1469\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-19.png\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003ch2\u003e\u003cstrong\u003ePreflight checks\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhen you open a project, the plugin runs environment checks automatically. It verifies your OS, Java setup, Android SDK, Xcode installation, and Gradle configuration. If anything’s missing or outdated, you’ll get recommendations on how to fix it.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXczpXtXYCzwa6NMidUi0FvbjNjToZFgDjUROEHuwHYcqV1KqlUiXcGvtp80K_kAtk6499y0HGvN4-XEOY6MTuq23_4NDqNByrXgBytCNI493IXCcaV33NakHtvCAW-HP_eSuJVmSQ?key=hhM1Zmnh32zmFX_ozlvbtA\" width=\"624\" height=\"404\"/\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eReady to run\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eAfter indexing, the plugin automatically generates run configurations for all platforms available in your project – Android, iOS, web, desktop, and server. \u003c/p\u003e\n\n\n\n\u003cp\u003eFor iOS and Android, you can select simulators or emulators, or set up a physical device with the plugin’s guidance.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeIR1_rXswt6Jpyjsy8EoBhbsCb1oH20xtgdHPTPaDPA3Nwy8ZXJXiHPBuETo-5hGFynldNm6a9wdqzghtqSVirbq_t2_D9f00aw3L03u-sI5Wn68UkXn2-4-ZK23aFIlZfpC2xwA?key=hhM1Zmnh32zmFX_ozlvbtA\" width=\"624\" height=\"383\"/\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eCross-language support\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eFor projects with both Kotlin and Swift, the plugin enables cross-language navigation, syntax highlighting, quick documentation, and debugging in your IDE.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1246\" height=\"662\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-16.png\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eDebugging support for iOS is already available in Android Studio and IntelliJ IDEA Ultimate, and support in IntelliJ IDEA Community Edition is coming later.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eCompose Multiplatform support\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/kotlin/2025/05/compose-multiplatform-1-8-0-released-compose-multiplatform-for-ios-is-stable-and-production-ready/\"\u003eCompose Multiplatform for iOS recently became Stable\u003c/a\u003e, allowing you to confidently build beautiful shared UIs for production use across iOS, Android, and desktop. \u003c/p\u003e\n\n\n\n\u003cp\u003eCompose Multiplatform code is fully supported in the IDE, with features like autocompletion, navigation, refactorings, and resource support. Thanks to UI previews that are available even from common code, you can preview components directly in the IDE without deploying your app.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXf4scFeF0XcZ0bRZ4W9zDZVjYLRldvz6P3wnmZiULn-Kxo2v7EPBZdSoPgGbvr8dEYZKQPeFm0DbRz9Ph5sGlp0nEZb9Nt_GHIcOgPf6uE1xqGyK9mt6WIxjrLFFjEG_XNLabr9uQ?key=hhM1Zmnh32zmFX_ozlvbtA\" width=\"624\" height=\"473\"/\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eCompose Hot Reload\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe know that fast iteration is key when building UIs. With \u003ca href=\"https://github.com/JetBrains/compose-hot-reload?tab=readme-ov-file#-compose-hot-reload\" target=\"_blank\" rel=\"noopener\"\u003eCompose Hot Reload\u003c/a\u003e, you can instantly see UI changes without restarting your app or losing its state. \u003c/p\u003e\n\n\n\n\u003cp\u003eCompose Hot Reload runs on the desktop JVM target, but even if your project is focused on mobile, you can add a desktop target just for development purposes.\u003c/p\u003e\n\n\n\n\u003cp\u003eAs you modify your Compose code – adjusting layouts, styles, or logic – Hot Reload detects changes and applies them live to your running app. It’s not limited to small tweaks – you can change method signatures, remove existing code, and even create new classes. Your app retains its state, including the current screen and user input.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can safely use Hot Reload for production apps, as it only affects development builds. To get started, add the Compose Hot Reload Gradle plugin to your project – see the \u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-hot-reload.html\" target=\"_blank\" rel=\"noopener\"\u003edocumentation\u003c/a\u003e for setup details.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Screen-Recording-2025-05-06-at-17.34.06.mov\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Try Compose Hot Reload\" href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-hot-reload.html\" target=\"_blank\" rel=\"noopener\"\u003eTry Compose Hot Reload\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eHow to install the KMP plugin\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe Kotlin Multiplatform plugin is available via \u003ca href=\"https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform\" target=\"_blank\" rel=\"noopener\"\u003eJetBrains Marketplace\u003c/a\u003e for IntelliJ IDEA 2025.1.1.1 and Android Studio Narwhal 2025.1.1. It only supports macOS for now, but Windows and Linux support is coming soon. \u003c/p\u003e\n\n\n\n\u003cp\u003eNote that you need to explicitly enable \u003ca href=\"https://kotlinlang.org/docs/releases.html#ide-support\" target=\"_blank\" rel=\"noopener\"\u003eK2 mode\u003c/a\u003e. To do this, go to \u003cem\u003eSettings | Languages \u0026amp; Frameworks | Kotlin\u003c/em\u003e\u003cstrong\u003e \u003c/strong\u003eand select the\u003cstrong\u003e \u003c/strong\u003e\u003cem\u003eEnable K2 mode\u003c/em\u003e checkbox\u003cstrong\u003e.\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eWhat’s next for Kotlin Multiplatform tooling\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe KMP plugin is currently in Beta. It is ready for production use and already provides a solid foundation for Kotlin Multiplatform development.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe are actively working to expand its capabilities, polish the experience, and address \u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-plugin-releases.html#0.9\" target=\"_blank\" rel=\"noopener\"\u003eknown limitations\u003c/a\u003e. Your feedback is crucial to help us refine the tooling further. Our initial focus is on mobile development, with desktop and web improvements coming next.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe plan to stabilize the KMP plugin later this year, expand operating system support, and introduce new features based on your feedback.\u003c/p\u003e\n\n\n\n\u003cp\u003eUpcoming tooling improvements include:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eWindows and Linux support\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eYou’ll be able to use the KMP plugin on Windows and Linux. Running iOS applications will remain macOS-specific.\u003cs\u003e\u003cbr/\u003e\u003c/s\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAdvanced IDE support for Swift\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eThe current plugin version already supports basic code completion and editing for Swift code. More advanced features, such as finding usages and type hierarchy navigation, are still planned.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eEasier KMP module creation\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eYou’ll be able to create new Kotlin Multiplatform modules using the integrated KMP wizard.\u003cbr/\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eImproved tooling support for web and desktop platforms\u003c/strong\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eAfter stabilizing mobile platform support, we will focus on improving tooling for desktop and web development, aiming for a smoother, unified multiplatform experience.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eShare your feedback\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe’d love to hear your feedback! Please share it in the \u003ca href=\"https://kotlinlang.slack.com/archives/C3PQML5NU\" target=\"_blank\" rel=\"noopener\"\u003e#multiplatform channel\u003c/a\u003e on the Kotlinlang Slack (\u003ca href=\"https://surveys.jetbrains.com/s3/kotlin-slack-sign-up\" target=\"_blank\" rel=\"noopener\"\u003eget an invite\u003c/a\u003e). If you encounter any issues, please report them through \u003ca href=\"https://youtrack.jetbrains.com/issues/KMT\" target=\"_blank\" rel=\"noopener\"\u003eour issue tracker\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Try the KMP Plugin\" href=\"https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform\" target=\"_blank\" rel=\"noopener\"\u003eTry the KMP Plugin\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003eRead more\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html\" target=\"_blank\" rel=\"noopener\"\u003eGet started with Kotlin Multiplatform\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/kotlin/2025/05/compose-multiplatform-1-8-0-released-compose-multiplatform-for-ios-is-stable-and-production-ready/\"\u003eCompose Multiplatform for iOS Is Stable and Production-Ready\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/kotlin/2025/05/present-and-future-kotlin-for-web/\"\u003ePresent and Future of Kotlin for Web\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/kotlin/2025/02/kotlin-multiplatform-tooling-shifting-gears/\"\u003eKotlin Multiplatform Tooling – Shifting Gears\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Kotlin Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
