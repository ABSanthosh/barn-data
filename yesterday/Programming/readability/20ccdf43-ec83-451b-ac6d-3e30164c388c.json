{
  "id": "20ccdf43-ec83-451b-ac6d-3e30164c388c",
  "title": "From prompt to production: Building a landing page with Copilot agent mode",
  "link": "https://github.blog/ai-and-ml/github-copilot/from-prompt-to-production-building-a-landing-page-with-copilot-agent-mode/",
  "description": "See how I built a developer-focused landing page in under 30 minutes using GitHub Copilot agent mode and Claude 3.5 Sonnet—with just screenshots and prompts. The post From prompt to production: Building a landing page with Copilot agent mode appeared first on The GitHub Blog.",
  "author": "Kedasha Kerr",
  "published": "Wed, 23 Apr 2025 16:06:05 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "Generative AI",
    "GitHub Copilot"
  ],
  "byline": "Kedasha Kerr",
  "length": 11207,
  "excerpt": "See how I built a developer-focused landing page in under 30 minutes using GitHub Copilot agent mode and Claude 3.5 Sonnet.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "GitHub Copilot has quickly become an integral part of how I build. Whether I’m exploring new ideas or scaffolding full pages, using Copilot’s agent mode in my IDE helps me move faster—and more confidently—through each step of the development process. GitHub Copilot agent mode is an interactive chat experience built right into your IDE that turns Copilot into an active participant in your development workflow. After you give it a prompt, agent mode streamlines complex coding tasks by autonomously iterating on its own code, identifying and fixing errors, suggesting and executing terminal commands, and resolving runtime issues with self-healing capabilities. And here’s the best part: You can attach images, reference files, and give natural language instructions, and Copilot will generate and modify code directly in your project! In this post, I’ll walk you through how I built a developer-focused landing page—from product requirements to code—using GitHub Copilot agent mode and the Claude 3.5 Sonnet model. This kind of build could easily take a few hours if I did it all by myself. But with Copilot, I had a working prototype in under 30 minutes! You’ll see how I used design artifacts, inline chat, and Copilot’s awareness of context to go from idea → design → code, with minimal friction. You can also watch the full build in the video above! Designing with AI: From PRD to UI Before I wrote a single line of code, I needed a basic product vision. I started by using GitHub Copilot on GitHub.com to generate a lightweight product requirements document (PRD) using GPT-4o. Here was my prompt: \u003e “Describe a landing page for developers in simple terms.” Copilot returned a structured but simple outline of a PRD for a developer-focused landing page. I then passed this PRD into Claude 3.5 Sonnet and asked it to generate a design based on that prompt. Claude gave me a clean, organized layout with common landing page sections: a hero, feature list, API examples, a dashboard preview, and more. This was more than enough for me to get started. You can explore the full design that Claude built here; it’s pretty cool. Setting up the project For the tech stack, I chose Astro because of its performance and flexibility. I paired it with Tailwind CSS and React for styling and component architecture. I started in a blank directory and ran the following commands: npm create astro@latest npx astro add react npx astro add tailwind I initialized the project, configured Tailwind, and opened it in VS Code with GitHub Copilot agent mode enabled (learn how to enable it with our docs!). Once the server was running, I was ready to start building. Building section by section with Copilot agent mode Copilot agent mode really shines when translating visual designs into production-ready code because it understands both image and code context in your project. By attaching a screenshot and specifying which file to edit, I could prompt it to scaffold new components, update layout structure, and even apply Tailwind styles—all without switching tabs or writing boilerplate manually. For our project here, this meant I could take screenshots of each section from Claude’s design and drop them directly into Copilot’s context window. 💡 Pro tip: When building from a visual design like this, I recommend working on one section at a time. This not only keeps the context manageable for the model, but also makes it easier to debug if something goes off track. You’ll know exactly where to look! Creating the hero and navigation section I opened index.astro, attached the design screenshot, and typed the following prompt: \u003e “Update index.astro to reflect the attached design. Add a new navbar and hero section to start the landing page.” Copilot agent mode then returned the following: Created Navbar.astro and Hero.astro Updated index.astro to render them Applied Tailwind styling based on the visual layout And here’s what I got: https://github.blog/wp-content/uploads/2025/04/dev-flow-final-landing.mp4#t=0.001 Now, this is beautiful! Though it doesn’t have the image on the right per the design, it did a very good job of getting the initial design down. We’ll go back in later to update the section to be exactly what we want. Commit early and often 💡 Pro tip: When building with AI tools, commit early and often. I’ve seen too many folks lose progress when a prompt goes sideways. And in case you didn’t know, GitHub Copilot can help here too. After staging your changes in the Source Control panel, click the ✨ sparkles icon to automatically generate a commit message. It’s a small step that can save you a lot of time (and heartache). https://github.blog/wp-content/uploads/2025/04/dev-flow-commit-code.mp4#t=0.001 Improve accuracy with Copilot custom instructions One of the best ways to improve the quality of GitHub Copilot’s suggestions—especially in multi-file projects—is by providing it with custom instructions. These are short, structured notes that describe your tech stack, project structure, and any conventions or tools you’re using. Instead of repeatedly adding this contextual detail to your chat questions, you can create a file in your repository that automatically adds this information for you. The additional information won’t be displayed in the chat, but is available to Copilot—allowing it to generate higher-quality responses. To give Copilot better context, I created a CopilotInstructions.md file describing my tech stack: Astro v5 Tailwind CSS v4 React TypeScript When Copilot agent mode referenced this file when making suggestions, I noticed the results became more accurate and aligned with my setup. Here’s what some of the file looked like: # GitHub Copilot Project Instructions ## Project Overview This is an Astro project that uses React components and Tailwind CSS for styling. When making suggestions, please consider the following framework-specific details and conventions. ## Tech Stack - Astro v5.x - React as UI library - Tailwind CSS for styling (v4.x) - TypeScript for type safety ## Project Structure ``` ├── src/ │ ├── components/ # React and Astro components │ ├── layouts/ # Astro layout components │ ├── pages/ # Astro pages and routes │ ├── styles/ # Global styles │ └── utils/ # Utility functions ├── public/ # Static assets └── astro.config.mjs # Astro configuration ``` ## Component Conventions ### Astro Components - Use `.astro` extension - Follow kebab-case for filenames - Example structure: ```astro --- // Imports and props interface Props { title: string; } const { title } = Astro.props; --- \u003cdiv class=\"component-wrapper\"\u003e \u003ch1\u003e{title}\u003c/h1\u003e \u003cslot /\u003e \u003c/div\u003e \u003cstyle\u003e /* Scoped styles if needed */ \u003c/style\u003e ``` You can explore the full instructions file in my repo, along with the full code, setup instructions, and a link to the deployed landing page. Iterating on your designs by prompting Copilot I then repeated the same process to build each new section. Here’s what this looked like in practice: “Built by Developers” section \u003e “Add a new section to the landing page called ‘By Developers’ and follow the attached design.” Copilot generated a reusable component with feature cards structured in a Tailwind-styled grid. “API development” section \u003e “Add the API development section based on the design.” This section featured interactive code samples in tabs. Copilot interpreted that from the screenshot and added UI logic to switch between examples—without me asking. https://github.blog/wp-content/uploads/2025/04/api-design-section.mp4#t=0.001 “Dashboard preview” section \u003e “Now add the dashboard management section on the landing page based on the design.” I uploaded a screenshot of my editor as a placeholder image, and Copilot added it seamlessly to the new component. It’s so amazing how fast we’re building this landing page. Look at the progress we’ve already made! Smart suggestions, fast results Even with sections like “Trusted by Developers” and “Try it Yourself,” Copilot created placeholder images, added semantic HTML, and applied Tailwind styling—all based on a single image and prompt. 🤯 When I updated the final hero section to match the layout more closely, Copilot flagged and fixed TypeScript issues without being prompted. That might sound small, but it’s a big deal. It means Copilot agent mode wasn’t just taking instructions—it was actively understanding my codebase, looking at my terminal, identifying problems, and resolving them in real time. This reduced my need to context switch, so I could focus on shipping! This wasn’t just a series of generated components. It was a fully structured, landing page built with modern best practices baked in. And I didn’t have to build it alone! Wrapping up: With GitHub Copilot agent mode and Claude working together, I was able to: Generate a usable PRD and design mockup with a single prompt Build a responsive Astro-based landing page in less than thirty minutes Scaffold, test, and iterate on each section with minimal manual coding Use natural language to stay in the flow as I developed https://github.blog/wp-content/uploads/2025/04/dev-flow-final-landing_64d2b2.mp4#t=0.001 What’s next? To complete this project, I updated the README with a clear project structure, added instructions for getting started, and staged it for deployment. From here, you can: Deploy it with GitHub Pages, Netlify, or your host of choice Set up GitHub Actions for CI/CD Add unit tests or accessibility checks Replace placeholder content with real data (like logos, dashboard, and profile images) Add new pages based on the Navbar Want to explore it yourself? View the repository View the live demo Take this with you AI tools like GitHub Copilot agent mode are transforming how we build, but like any tool, their power depends on how well we use them. Adding context, being explicit, and committing often made building this web page smooth and successful. If you’re thinking about building with GitHub Copilot, give this workflow a try: Start with a PRD using Copilot on GitHub.com Generate a design from your PRD with Claude Use Copilot Agent in your IDE to code it, step by step. Until next time, happy coding! Written by Kedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she's learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/04/design-to-code.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eGitHub Copilot has quickly become an integral part of how I build. Whether I’m exploring new ideas or scaffolding full pages, using Copilot’s agent mode in my IDE helps me move faster—and more confidently—through each step of the development process.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/news-insights/product-news/github-copilot-agent-mode-activated/#agent-mode-in-vs-code\"\u003eGitHub Copilot agent mode\u003c/a\u003e is an interactive chat experience built right into your IDE that turns Copilot into an active participant in your development workflow. After you give it a prompt, agent mode streamlines complex coding tasks by autonomously iterating on its own code, identifying and fixing errors, suggesting and executing terminal commands, and resolving runtime issues with self-healing capabilities.\u003c/p\u003e\n\u003cp\u003eAnd here’s the best part: You can attach images, reference files, and give natural language instructions, and Copilot will generate and modify code directly in your project!\u003c/p\u003e\n\u003cp\u003eIn this post, I’ll walk you through how I built a \u003cstrong\u003edeveloper-focused landing page—\u003c/strong\u003efrom product requirements to code—using GitHub Copilot agent mode and the Claude 3.5 Sonnet model. This kind of build could easily take a few hours if I did it all by myself. But with Copilot, I had a working prototype in \u003cstrong\u003eunder 30 minutes!\u003c/strong\u003e You’ll see how I used design artifacts, inline chat, and Copilot’s awareness of context to go from idea → design → code, with minimal friction.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eYou can also watch the full build in the video above!\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2 id=\"designing-with-ai-from-prd-to-ui\" id=\"designing-with-ai-from-prd-to-ui\"\u003eDesigning with AI: From PRD to UI\u003ca href=\"#designing-with-ai-from-prd-to-ui\" aria-label=\"Designing with AI: From PRD to UI\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eBefore I wrote a single line of code, I needed a basic product vision. I started by \u003ca href=\"https://github.com/copilot\"\u003eusing GitHub Copilot on GitHub.com\u003c/a\u003e to generate a lightweight product requirements document (PRD) using GPT-4o. Here was my prompt:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026gt; “Describe a landing page for developers in simple terms.”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eCopilot returned a structured but simple \u003ca href=\"https://github.com/copilot/share/0a631304-4100-80a1-a951-3e0864370837\"\u003eoutline of a PRD\u003c/a\u003e for a developer-focused landing page. I then passed this PRD into Claude 3.5 Sonnet and asked it to generate a design based on that prompt.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/copilot-claude-prd-design.png?resize=1024%2C576\" alt=\"An image showing the interface for GitHub Copilot responding to the prompt \u0026#34;Describe a landing page for developers in simple terms\u0026#34; with a a structured but simple outline of a PRD for a developer-focused landing page.\" width=\"1024\" height=\"576\" srcset=\"https://github.blog/wp-content/uploads/2025/04/copilot-claude-prd-design.png?w=1920 1920w, https://github.blog/wp-content/uploads/2025/04/copilot-claude-prd-design.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/copilot-claude-prd-design.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/copilot-claude-prd-design.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/04/copilot-claude-prd-design.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eClaude gave me a clean, organized layout with common landing page sections: a hero, feature list, API examples, a dashboard preview, and more. This was more than enough for me to get started.\u003c/p\u003e\n\u003cp\u003eYou can explore the full design that Claude \u003ca href=\"https://gh.io/devflow-design\"\u003ebuilt here\u003c/a\u003e; it’s pretty cool.\u003c/p\u003e\n\u003ch2 id=\"setting-up-the-project\" id=\"setting-up-the-project\"\u003eSetting up the project\u003ca href=\"#setting-up-the-project\" aria-label=\"Setting up the project\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eFor the tech stack, I chose \u003ca href=\"https://astro.build/\"\u003eAstro\u003c/a\u003e because of its performance and flexibility. I paired it with Tailwind CSS and React for styling and component architecture. I started in a blank directory and ran the following commands:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm create astro@latest\nnpx astro add react\nnpx astro add tailwind\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI initialized the project, configured Tailwind, and opened it in VS Code with GitHub Copilot agent mode enabled (\u003ca href=\"https://code.visualstudio.com/docs/copilot/chat/chat-agent-mode\"\u003elearn how to enable it with our docs\u003c/a\u003e!). Once the server was running, I was ready to start building.\u003c/p\u003e\n\u003ch2 id=\"building-section-by-section-with-copilot-agent-mode\" id=\"building-section-by-section-with-copilot-agent-mode\"\u003e\u003cstrong\u003eBuilding section by section with Copilot agent mode\u003c/strong\u003e\u003ca href=\"#building-section-by-section-with-copilot-agent-mode\" aria-label=\"\u0026lt;strong\u0026gt;Building section by section with Copilot agent mode\u0026lt;/strong\u0026gt;\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCopilot agent mode really shines when translating visual designs into production-ready code because it understands both image and code context in your project. By attaching a screenshot and specifying which file to edit, I could prompt it to scaffold new components, update layout structure, and even apply Tailwind styles—all without switching tabs or writing boilerplate manually.\u003c/p\u003e\n\u003cp\u003eFor our project here, this meant I could take screenshots of each section from Claude’s design and drop them directly into Copilot’s context window.\u003c/p\u003e\n\u003cdiv\u003e\u003cp\u003e💡 \u003cstrong\u003ePro tip:\u003c/strong\u003e When building from a visual design like this, I recommend working on one section at a time. This not only keeps the context manageable for the model, but also makes it easier to debug if something goes off track. You’ll know exactly where to look!\n\u003c/p\u003e\u003c/div\u003e\n\u003ch3 id=\"creating-the-hero-and-navigation-section\" id=\"creating-the-hero-and-navigation-section\"\u003eCreating the hero and navigation section\u003ca href=\"#creating-the-hero-and-navigation-section\" aria-label=\"Creating the hero and navigation section\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eI opened \u003ccode\u003eindex.astro\u003c/code\u003e, attached the design screenshot, and typed the following prompt:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u0026gt; “Update index.astro to reflect the attached design. Add a new navbar and hero section to start the landing page.”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eCopilot agent mode then returned the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreated \u003ccode\u003eNavbar.astro\u003c/code\u003e and \u003ccode\u003eHero.astro\u003c/code\u003e   \u003c/li\u003e\n\u003cli\u003eUpdated \u003ccode\u003eindex.astro\u003c/code\u003e to render them  \u003c/li\u003e\n\u003cli\u003eApplied Tailwind styling based on the visual layout\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd here’s what I got:\u003c/p\u003e\n\u003cp\u003e\n\u003cvideo id=\"video-86884-1\" width=\"1706\" height=\"1096\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/dev-flow-final-landing.mp4#t=0.001?_=1\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/dev-flow-final-landing.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/dev-flow-final-landing.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003cp\u003eNow, this is beautiful! Though it doesn’t have the image on the right \u003ca href=\"https://gh.io/devflow-design\"\u003eper the design\u003c/a\u003e, it did a very good job of getting the initial design down. We’ll go back in later to update the section to be exactly what we want.\u003c/p\u003e\n\u003ch2 id=\"commit-early-and-often\" id=\"commit-early-and-often\"\u003eCommit early and often\u003ca href=\"#commit-early-and-often\" aria-label=\"Commit early and often\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cdiv\u003e\u003cp\u003e💡 \u003cstrong\u003ePro tip:\u003c/strong\u003e When building with AI tools, \u003cstrong\u003ecommit early and often\u003c/strong\u003e. I’ve seen too many folks lose progress when a prompt goes sideways.\n\u003c/p\u003e\u003c/div\u003e\n\u003cp\u003eAnd in case you didn’t know, GitHub Copilot can help here too. After staging your changes in the Source Control panel, click the ✨ sparkles icon to automatically generate a commit message. It’s a small step that can save you a lot of time (and heartache).\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86884-2\" width=\"1614\" height=\"908\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/dev-flow-commit-code.mp4#t=0.001?_=2\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/dev-flow-commit-code.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/dev-flow-commit-code.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003ch2 id=\"improve-accuracy-with-copilot-custom-instructions\" id=\"improve-accuracy-with-copilot-custom-instructions\"\u003eImprove accuracy with Copilot custom instructions\u003ca href=\"#improve-accuracy-with-copilot-custom-instructions\" aria-label=\"Improve accuracy with Copilot custom instructions\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eOne of the best ways to improve the quality of GitHub Copilot’s suggestions—especially in multi-file projects—is by providing it with \u003ca href=\"https://docs.github.com/en/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot\"\u003e\u003cstrong\u003ecustom instructions\u003c/strong\u003e\u003c/a\u003e. These are short, structured notes that describe your tech stack, project structure, and any conventions or tools you’re using.\u003c/p\u003e\n\u003cp\u003eInstead of repeatedly adding this contextual detail to your chat questions, you can create a file in your repository that automatically adds this information for you. The additional information won’t be displayed in the chat, but is available to Copilot—allowing it to generate higher-quality responses.\u003c/p\u003e\n\u003cp\u003eTo give Copilot better context, I created a \u003ccode\u003eCopilotInstructions.md\u003c/code\u003e file describing my tech stack:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAstro v5  \u003c/li\u003e\n\u003cli\u003eTailwind CSS v4  \u003c/li\u003e\n\u003cli\u003eReact  \u003c/li\u003e\n\u003cli\u003eTypeScript\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen Copilot agent mode referenced this file when making suggestions, I noticed the results became more accurate and aligned with my setup.\u003c/p\u003e\n\u003cp\u003eHere’s what some of the file looked like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# GitHub Copilot Project Instructions\n\n## Project Overview\nThis is an Astro project that uses React components and Tailwind CSS for styling. When making suggestions, please consider the following framework-specific details and conventions.\n\n## Tech Stack\n- Astro v5.x\n- React as UI library\n- Tailwind CSS for styling (v4.x)\n- TypeScript for type safety\n\n## Project Structure\n```\n├── src/\n│   ├── components/     # React and Astro components\n│   ├── layouts/        # Astro layout components\n│   ├── pages/          # Astro pages and routes\n│   ├── styles/         # Global styles\n│   └── utils/          # Utility functions\n├── public/             # Static assets\n└── astro.config.mjs    # Astro configuration\n```\n\n## Component Conventions\n\n### Astro Components\n- Use `.astro` extension\n- Follow kebab-case for filenames\n- Example structure:\n\n```astro\n---\n// Imports and props\ninterface Props {\n  title: string;\n}\n\nconst { title } = Astro.props;\n---\n\n\u0026lt;div class=\u0026#34;component-wrapper\u0026#34;\u0026gt;\n  \u0026lt;h1\u0026gt;{title}\u0026lt;/h1\u0026gt;\n  \u0026lt;slot /\u0026gt;\n\u0026lt;/div\u0026gt;\n\n\u0026lt;style\u0026gt;\n  /* Scoped styles if needed */\n\u0026lt;/style\u0026gt;\n```\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can explore the full instructions \u003ca href=\"https://github.com/LadyKerr/devflow-landing/blob/main/.github/copilot-instructions.md\"\u003efile in my repo\u003c/a\u003e, along with the full code, setup instructions, and a link to the deployed landing page.\u003c/p\u003e\n\u003ch2 id=\"iterating-on-your-designs-by-prompting-copilot\" id=\"iterating-on-your-designs-by-prompting-copilot\"\u003eIterating on your designs by prompting Copilot\u003ca href=\"#iterating-on-your-designs-by-prompting-copilot\" aria-label=\"Iterating on your designs by prompting Copilot\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eI then repeated the same process to build each new section. Here’s what this looked like in practice:\u003c/p\u003e\n\u003ch3 id=\"built-by-developers-section\" id=\"built-by-developers-section\"\u003e“Built by Developers” section\u003ca href=\"#built-by-developers-section\" aria-label=\"“Built by Developers” section\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003e\u0026gt; “Add a new section to the landing page called ‘By Developers’ and follow the attached design.”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eCopilot generated a reusable component with feature cards structured in a Tailwind-styled grid.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/by-devs-section.png?resize=1024%2C445\" alt=\"An image showing a reusable component with feature cards structured in a Tailwind-styled grid.\" width=\"1024\" height=\"445\" srcset=\"https://github.blog/wp-content/uploads/2025/04/by-devs-section.png?w=1614 1614w, https://github.blog/wp-content/uploads/2025/04/by-devs-section.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/by-devs-section.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/by-devs-section.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/04/by-devs-section.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003ch3 id=\"api-development-section\" id=\"api-development-section\"\u003e\u003cstrong\u003e“API development” section\u003c/strong\u003e\u003ca href=\"#api-development-section\" aria-label=\"\u0026lt;strong\u0026gt;“API development” section\u0026lt;/strong\u0026gt;\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003e\u0026gt; “Add the API development section based on the design.”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThis section featured interactive code samples in tabs. Copilot interpreted that from the screenshot and added UI logic to switch between examples—\u003cem\u003ewithout me asking.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cvideo id=\"video-86884-3\" width=\"1900\" height=\"1068\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/api-design-section.mp4#t=0.001?_=3\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/api-design-section.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/api-design-section.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003ch3 id=\"dashboard-preview-section\" id=\"dashboard-preview-section\"\u003e“Dashboard preview” section\u003ca href=\"#dashboard-preview-section\" aria-label=\"“Dashboard preview” section\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003e\u0026gt; “Now add the dashboard management section on the landing page based on the design.”\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eI uploaded a screenshot of my editor as a placeholder image, and Copilot added it seamlessly to the new component.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/dashboard_api.png?resize=512%2C339\" alt=\"A screenshot of the dashboard management section.\" width=\"512\" height=\"339\" srcset=\"https://github.blog/wp-content/uploads/2025/04/dashboard_api.png?w=512 512w, https://github.blog/wp-content/uploads/2025/04/dashboard_api.png?w=300 300w\" sizes=\"auto, (max-width: 512px) 100vw, 512px\"/\u003e\u003c/p\u003e\n\u003cp\u003eIt’s so amazing how fast we’re building this landing page. Look at the progress we’ve already made!\u003c/p\u003e\n\u003ch2 id=\"smart-suggestions-fast-results\" id=\"smart-suggestions-fast-results\"\u003eSmart suggestions, fast results\u003ca href=\"#smart-suggestions-fast-results\" aria-label=\"Smart suggestions, fast results\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEven with sections like “Trusted by Developers” and “Try it Yourself,” Copilot created placeholder images, added semantic HTML, and applied Tailwind styling—all based on a single image and prompt. 🤯\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/04/trusted-by-devs.png?resize=1024%2C693\" alt=\"A screenshot of the \u0026#34;Trusted by developers worldwide\u0026#34; section of the landing page.\" width=\"1024\" height=\"693\" srcset=\"https://github.blog/wp-content/uploads/2025/04/trusted-by-devs.png?w=1621 1621w, https://github.blog/wp-content/uploads/2025/04/trusted-by-devs.png?w=300 300w, https://github.blog/wp-content/uploads/2025/04/trusted-by-devs.png?w=768 768w, https://github.blog/wp-content/uploads/2025/04/trusted-by-devs.png?w=1024 1024w, https://github.blog/wp-content/uploads/2025/04/trusted-by-devs.png?w=1536 1536w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhen I updated the final hero section to match the layout more closely, Copilot flagged and fixed TypeScript issues without being prompted.\u003c/p\u003e\n\u003cp\u003eThat might sound small, but \u003cstrong\u003eit’s a big deal\u003c/strong\u003e. It means Copilot agent mode wasn’t just taking instructions—it was actively understanding my codebase, looking at my terminal, identifying problems, and \u003cstrong\u003eresolving them in real time.\u003c/strong\u003e This reduced my need to context switch, so I could focus on shipping!\u003c/p\u003e\n\u003cp\u003eThis wasn’t just a series of generated components.  It was a \u003cstrong\u003efully structured, landing page\u003c/strong\u003e built with modern best practices baked in. And I didn’t have to build it alone!\u003c/p\u003e\n\u003ch2 id=\"wrapping-up\" id=\"wrapping-up\"\u003eWrapping up:\u003ca href=\"#wrapping-up\" aria-label=\"Wrapping up:\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWith GitHub Copilot agent mode and Claude working together, I was able to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGenerate a usable PRD and design mockup with a single prompt  \u003c/li\u003e\n\u003cli\u003eBuild a responsive Astro-based landing page in less than thirty minutes  \u003c/li\u003e\n\u003cli\u003eScaffold, test, and iterate on each section with minimal manual coding  \u003c/li\u003e\n\u003cli\u003eUse natural language to stay in the flow as I developed\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cvideo id=\"video-86884-4\" width=\"1706\" height=\"1096\" preload=\"metadata\" controls=\"controls\"\u003e\u003csource type=\"video/mp4\" src=\"https://github.blog/wp-content/uploads/2025/04/dev-flow-final-landing_64d2b2.mp4#t=0.001?_=4\"/\u003e\u003ca href=\"https://github.blog/wp-content/uploads/2025/04/dev-flow-final-landing_64d2b2.mp4#t=0.001\"\u003ehttps://github.blog/wp-content/uploads/2025/04/dev-flow-final-landing_64d2b2.mp4#t=0.001\u003c/a\u003e\u003c/video\u003e\u003c/p\u003e\n\u003ch2 id=\"whats-next\" id=\"whats-next\"\u003eWhat’s next?\u003ca href=\"#whats-next\" aria-label=\"What’s next?\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo complete this project, I updated the README with a clear project structure, added instructions for getting started, and staged it for deployment. From here, you can:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDeploy it with GitHub Pages, Netlify, or your host of choice  \u003c/li\u003e\n\u003cli\u003eSet up GitHub Actions for CI/CD  \u003c/li\u003e\n\u003cli\u003eAdd unit tests or accessibility checks  \u003c/li\u003e\n\u003cli\u003eReplace placeholder content with real data (like logos, dashboard, and profile images)  \u003c/li\u003e\n\u003cli\u003eAdd new pages based on the Navbar\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWant to explore it yourself?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/LadyKerr/devflow-landing\"\u003eView the repository\u003c/a\u003e  \u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ladykerr.github.io/devflow-landing/\"\u003eView the live demo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"take-this-with-you\" id=\"take-this-with-you\"\u003e\u003cstrong\u003eTake this with you\u003c/strong\u003e\u003ca href=\"#take-this-with-you\" aria-label=\"\u0026lt;strong\u0026gt;Take this with you\u0026lt;/strong\u0026gt;\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eAI tools like GitHub Copilot agent mode are transforming how we build, but like any tool, their power depends on how well we use them. Adding context, being explicit, and committing often made building this web page smooth and successful.\u003c/p\u003e\n\u003cp\u003eIf you’re thinking about building with GitHub Copilot, give this workflow a try:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eStart with a PRD using Copilot on GitHub.com  \u003c/li\u003e\n\u003cli\u003eGenerate a design from your PRD with Claude  \u003c/li\u003e\n\u003cli\u003eUse Copilot Agent in your IDE to code it, step by step.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eUntil next time, happy coding!\u003c/p\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/47188731?v=4\u0026amp;s=200\" alt=\"Kedasha Kerr\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eKedasha is a Developer Advocate at GitHub where she enjoys sharing the lessons she\u0026#39;s learned with the wider developer community. She finds joy in helping others learn about the tech industry and loves sharing her experience as a software developer. Find her online @itsthatladydev.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.blog/developer-skills/github/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"\u003e\u003cpath fill=\"currentColor\" d=\"M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z\"\u003e\u003c/path\u003e\u003cpath stroke=\"currentColor\" d=\"M1.75 8H11\" stroke-width=\"1.5\" stroke-linecap=\"round\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2025-04-23T16:06:05Z",
  "modifiedTime": null
}
