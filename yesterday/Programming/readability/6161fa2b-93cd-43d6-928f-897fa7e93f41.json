{
  "id": "6161fa2b-93cd-43d6-928f-897fa7e93f41",
  "title": "Managing High-Performing Software Teams",
  "link": "https://www.infoq.com/news/2024/10/manage-high-performance-sw-teams/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "High-performing teams expect their leader to enable them to make things better, Gillard-Moss said at QCon London. Independence in software teams can enable decision-making for faster delivery. Teams need empathy, understanding, and guidance from their managers. By Ben Linders",
  "author": "Ben Linders",
  "published": "Thu, 24 Oct 2024 11:58:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Continuous Improvement",
    "Agile Conferences",
    "QCon Software Development Conference",
    "Leadership",
    "Agile Manager",
    "QCon London 2024",
    "Team Leader",
    "Software Development Lifecycle",
    "Culture \u0026 Methods",
    "news"
  ],
  "byline": "Ben Linders",
  "length": 5448,
  "excerpt": "High-performing teams expect their leader to enable them to make things better, Gillard-Moss said at QCon London. Independence in software teams can enable decision-making for faster delivery. Teams n",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241022062452/apple-touch-icon.png",
  "text": "High-performing teams expect their leader to enable them to make things better, Gillard-Moss said at QCon London. Independence in software teams can enable decision-making for faster delivery. Teams need empathy, understanding, and guidance from their managers. Something most driven and motivated engineers have in common is that they will have a longer list of all the things they want to improve than the things they believe are going well. Gillard-Moss mentioned that for some managers this is intimidating and makes them believe the team is being negative, when in reality this is a good thing. They are motivated to get these things solved. In return, they need you to create the opportunity to solve things. If the team feels that you are not enabling them to solve things fast enough, then sentiment turns negative, Gillard-Moss argued. This is because they’ve stopped believing in you as someone who can help. So rather than bringing you problems to solve and wanting your help, they become complaints, burdens, and excuses: If you have a team that is unable to make things better, and is stuck complaining that things aren’t getting better, then you do not have a high-performing team. We should strive for independence in teams for faster and better decision-making, which leads to faster delivery and faster impact, Gillard-Moss said. Waiting for decisions is the single biggest productivity killer, and making decisions on poor information is the most effective way to waste money, he explained: In technology, we need to make thousands of decisions a day. It’s unrealistic for someone far from the information to make high-quality decisions without blocking teams. And it doesn’t scale. With low-performing teams, Gillard-Moss suggested analysing their cycle time. The vast majority of it is waiting for someone to provide information or make a decision, he mentioned. And then, when they do, the team struggles to implement or pursue a suboptimal solution because the decision maker had an overly naive view of what needed to be done. What teams need from managers is empathy, understanding, and guidance. Empathy comes from being able to think like an engineer, Gillard-Moss said, and understanding because you’ve been there and done that yourself. Guidance comes from a deep instinct for the universal fundamentals of engineering and how to apply them to get better results, he added, the evergreen wisdom and principles. Gillard-Moss stated that a good engineering leader builds teams that can maximise impact by applying their expertise: My experience as an engineer tells me that integrating early and often results in less delivery risk, and when to tell that’s not happening. It also tells me that’s sometimes easier said than done and the team might need help working through it. This gives me the patience and empathy to guide a team through the trade-offs in these difficult situations. InfoQ interviewed Peter Gillard-Moss about managing high-performing teams. InfoQ: How can managers help teams improve their cycle time? Peter Gillard-Moss: There are so many factors that influence cycle time, from architecture to organisation design to culture to processes. The best thing any manager can do is observe the system and continuously ask, \"Why did this take as long as it did? With hindsight how could we have improved the quality of this decision?\" And then experiment with small changes. Little nudges. This is, after all, why we have retrospectives. One example was a team who felt like they worked on a lot but nothing came out the other end. When we analysed the cards, we saw that they would keep moving back up the wall from Dev Complete back into Dev, or more cards would be created and the original card would be placed in Blocked or Ready to Deploy for weeks on end. What was happening was the stakeholder would specify the exact solution, literally down to fields in the database in the original card. The team would build it and then the QA would find edge cases. The edge cases would go back to the stakeholder who would then decide on the next steps, either adding new criteria to the original card or creating new ones. Most of this was over email (because the stakeholder was too busy) and it was often missing context both ways. When you gathered the history and context around the cards, it looked absurd as weeks would go by for simple stories which have long email chains connected to them. Despite the obvious inefficiencies, this is a pattern I’ve seen in many teams. InfoQ: How can engineering leaders keep their engineering expertise up-to-date? Gillard-Moss: You can’t. I’m really sorry but you can’t. It’s impossible. Once you realise this, it will liberate you and you will become a better leader. Plus it’s not what teams need from you. The engineering expertise needs to be in the team with the people doing the work. Knowledge and expertise is a group asset, not an individual asset. How do you think a team would perform if all the knowledge and expertise was only in their manager’s head? Every time a team gets stuck having to go to their manager to get the answer. How slow is that? How expensive is that? And the manager will burn out and complain that they don’t have time to focus on the important things. About the Author Ben Linders",
  "image": "https://res.infoq.com/news/2024/10/manage-high-performance-sw-teams/en/headerimage/generatedHeaderImage-1727943527151.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eHigh-performing teams expect their leader to enable them to make things better, Gillard-Moss said at \u003ca href=\"https://qconlondon.com/\"\u003eQCon London\u003c/a\u003e. Independence in software teams can enable decision-making for faster delivery. Teams need empathy, understanding, and guidance from their managers.\u003c/p\u003e\n\n\u003cp\u003eSomething most driven and motivated engineers have in common is that they will have a longer list of all the things they want to improve than the things they believe are going well. Gillard-Moss mentioned that for some managers this is intimidating and makes them believe the team is being negative, when in reality this is a good thing. They are motivated to get these things solved. In return, they need you to create the opportunity to solve things.\u003c/p\u003e\n\n\u003cp\u003eIf the team feels that you are not enabling them to solve things fast enough, then sentiment turns negative, Gillard-Moss argued. This is because they’ve stopped believing in you as someone who can help. So rather than bringing you problems to solve and wanting your help, they become complaints, burdens, and excuses:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf you have a team that is unable to make things better, and is stuck complaining that things aren’t getting better, then you do not have a high-performing team.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWe should strive for independence in teams for faster and better decision-making, which leads to faster delivery and faster impact, Gillard-Moss said. Waiting for decisions is the single biggest productivity killer, and making decisions on poor information is the most effective way to waste money, he explained:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIn technology, we need to make thousands of decisions a day. It’s unrealistic for someone far from the information to make high-quality decisions without blocking teams. And it doesn’t scale.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWith low-performing teams, Gillard-Moss suggested analysing their cycle time. The vast majority of it is waiting for someone to provide information or make a decision, he mentioned. And then, when they do, the team struggles to implement or pursue a suboptimal solution because the decision maker had an overly naive view of what needed to be done.\u003c/p\u003e\n\n\u003cp\u003eWhat teams need from managers is empathy, understanding, and guidance. Empathy comes from being able to think like an engineer, Gillard-Moss said, and understanding because you’ve been there and done that yourself. Guidance comes from a deep instinct for the universal fundamentals of engineering and how to apply them to get better results, he added, the evergreen wisdom and principles.\u003c/p\u003e\n\n\u003cp\u003eGillard-Moss stated that a good engineering leader builds teams that can maximise impact by applying their expertise:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eMy experience as an engineer tells me that integrating early and often results in less delivery risk, and when to tell that’s not happening. It also tells me that’s sometimes easier said than done and the team might need help working through it. This gives me the patience and empathy to guide a team through the trade-offs in these difficult situations.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eInfoQ interviewed \u003ca href=\"https://www.linkedin.com/in/petergillardmoss/\"\u003ePeter Gillard-Moss\u003c/a\u003e about managing high-performing teams.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: How can managers help teams improve their cycle time?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003ePeter Gillard-Moss\u003c/strong\u003e: There are so many factors that influence cycle time, from architecture to organisation design to culture to processes. The best thing any manager can do is observe the system and continuously ask, \u0026#34;Why did this take as long as it did? With hindsight how could we have improved the quality of this decision?\u0026#34; And then experiment with small changes. Little nudges. This is, after all, why we have retrospectives.\u003c/p\u003e\n\n\u003cp\u003eOne example was a team who felt like they worked on a lot but nothing came out the other end. When we analysed the cards, we saw that they would keep moving back up the wall from Dev Complete back into Dev, or more cards would be created and the original card would be placed in Blocked or Ready to Deploy for weeks on end. What was happening was the stakeholder would specify the exact solution, literally down to fields in the database in the original card. The team would build it and then the QA would find edge cases. The edge cases would go back to the stakeholder who would then decide on the next steps, either adding new criteria to the original card or creating new ones.\u003c/p\u003e\n\n\u003cp\u003eMost of this was over email (because the stakeholder was too busy) and it was often missing context both ways. When you gathered the history and context around the cards, it looked absurd as weeks would go by for simple stories which have long email chains connected to them. Despite the obvious inefficiencies, this is a pattern I’ve seen in many teams.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: How can engineering leaders keep their engineering expertise up-to-date?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eGillard-Moss\u003c/strong\u003e: You can’t. I’m really sorry but you can’t. It’s impossible. Once you realise this, it will liberate you and you will become a better leader.\u003c/p\u003e\n\n\u003cp\u003ePlus it’s not what teams need from you. The engineering expertise needs to be in the team with the people doing the work. Knowledge and expertise is a group asset, not an individual asset.\u003c/p\u003e\n\n\u003cp\u003eHow do you think a team would perform if all the knowledge and expertise was only in their manager’s head? Every time a team gets stuck having to go to their manager to get the answer. How slow is that? How expensive is that? And the manager will burn out and complain that they don’t have time to focus on the important things.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Ben-Linders\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBen Linders\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-10-24T00:00:00Z",
  "modifiedTime": null
}
