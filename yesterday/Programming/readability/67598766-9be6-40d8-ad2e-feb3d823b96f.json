{
  "id": "67598766-9be6-40d8-ad2e-feb3d823b96f",
  "title": "The Two Reacts",
  "link": "https://overreacted.io/the-two-reacts/",
  "description": "UI = f(data)(state)",
  "author": "",
  "published": "Thu, 04 Jan 2024 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 11451,
  "excerpt": "UI = f(data)(state)",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "Suppose I want to display something on your screen. Whether I want to display a web page like this blog post, an interactive web app, or even a native app that you might download from some app store, at least two devices must be involved. Your device and mine. It starts with some code and data on my device. For example, I am editing this blog post as a file on my laptop. If you see it on your screen, it must have already traveled from my device to yours. At some point, somewhere, my code and data turned into the HTML and JavaScript instructing your device to display this. So how does that relate to React? React is a UI programming paradigm that lets me break down what to display (a blog post, a signup form, or even a whole app) into independent pieces called components, and compose them like LEGO blocks. I’ll assume you already know and like components; check react.dev for an intro. Components are code, and that code has to run somewhere. But wait—whose computer should they run on? Should they run on your computer? Or on mine? Let’s make a case for each side. First, I’ll argue that components should run on your computer. Here’s a little counter button to demonstrate interactivity. Click it a few times! Assuming the JavaScript code for this component has already loaded, the number will increase. Notice that it increases instantly on press. There is no delay. No need to wait for the server. No need to download any additional data. This is possible because this component’s code is running on your computer: import { useState } from \"react\"; export function Counter() { const [count, setCount] = useState(0); return ( \u003cbutton className=\"dark:color-white rounded-lg bg-purple-700 px-2 py-1 font-sans font-semibold text-white focus:ring active:bg-purple-600\" onClick={() =\u003e setCount(count + 1)} \u003e You clicked me {count} times \u003c/button\u003e ); } Here, count is a piece of client state—a bit of information in your computer’s memory that updates every time you press that button. I don’t know how many times you’re going to press the button so I can’t predict and prepare all of its possible outputs on my computer. The most I’ll dare to prepare on my computer is the initial rendering output (“You clicked me 0 times”) and send it as HTML. But from that point and on, your computer had to take over running this code. You could argue that it’s still not necessary to run this code on your computer. Maybe I could have it running on my server instead? Whenever you press the button, your computer could ask my server for the next rendering output. Isn’t that how websites worked before all of those client-side JavaScript frameworks? Asking the server for a fresh UI works well when the user expects a little delay—for example, when clicking a link. When the user knows they’re navigating to some different place in your app, they’ll wait. However, any direct manipulation (such as dragging a slider, switching a tab, typing into a post composer, clicking a like button, swiping a card, hovering a menu, dragging a chart, and so on) would feel broken if it didn’t reliably provide at least some instant feedback. This principle isn’t strictly technical—it’s an intuition from the everyday life. For example, you wouldn’t expect an elevator button to take you to the next floor in an instant. But when you’re pushing a door handle, you do expect it to follow your hand’s movement directly, or it will feel stuck. In fact, even with an elevator button you’d expect at least some instant feedback: it should yield to the pressure of your hand. Then it should light up to acknowledge your press. When you build a user interface, you need to be able to respond to at least some interactions with guaranteed low latency and with zero network roundtrips. You might have seen the React mental model being described as a sort of an equation: UI is a function of state, or UI = f(state). This doesn’t mean that your UI code has to literally be a single function taking state as an argument; it only means that the current state determines the UI. When the state changes, the UI needs to be recomputed. Since the state “lives” on your computer, the code to compute the UI (your components) must also run on your computer. Or so this argument goes. Next, I’ll argue the opposite—that components should run on my computer. Here’s a preview card for a different post from this blog: \u003cPostPreview slug=\"a-chain-reaction\" /\u003e A Chain Reaction2452 words How does a component from this page know the number of words on that page? If you check the Network tab, you’ll see no extra requests. I’m not downloading that entire blog post from GitHub just to count the number of words in it. I’m not embedding the contents of that blog post on this page either. I’m not calling any APIs to count the words. And I sure did not count all those words by myself. So how does this component work? import { readFile } from \"fs/promises\"; import matter from \"gray-matter\"; export async function PostPreview({ slug }) { const fileContent = await readFile(\"./public/\" + slug + \"/index.md\", \"utf8\"); const { data, content } = matter(fileContent); const wordCount = content.split(\" \").filter(Boolean).length; return ( \u003csection className=\"rounded-md bg-black/5 p-2\"\u003e \u003ch5 className=\"font-bold\"\u003e \u003ca href={\"/\" + slug} target=\"_blank\"\u003e {data.title} \u003c/a\u003e \u003c/h5\u003e \u003ci\u003e{wordCount} words\u003c/i\u003e \u003c/section\u003e ); } This component runs on my computer. When I want to read a file, I read a file with fs.readFile. When I want to parse its Markdown header, I parse it with gray-matter. When I want to count the words, I split its text and count them. There is nothing extra I need to do because my code runs right where the data is. Suppose I wanted to list all the posts on my blog along with their word counts. Easy: A Chain Reaction2452 wordsA Complete Guide to useEffect9913 wordsAlgebraic Effects for the Rest of Us3062 wordsBefore You memo()856 wordsCoping with Feedback669 wordsFix Like No One’s Watching251 wordsGoodbye, Clean Code1196 wordsHow Are Function Components Different from Classes?2519 wordsHow Does React Tell a Class from a Function?3000 wordsHow Does setState Know What to Do?1511 wordsHow Does the Development Mode Work?1930 wordsMaking setInterval Declarative with React Hooks2769 wordsMy Decade in Review5866 wordsMy Wishlist for Hot Reloading2602 wordsName It, and They Will Come774 wordsnpm audit: Broken by Design2627 wordsOn let vs const673 wordsOptimized for Change225 wordsPreparing for a Tech Talk, Part 1: Motivation1122 wordsPreparing for a Tech Talk, Part 2: What, Why, and How891 wordsPreparing for a Tech Talk, Part 3: Content1401 wordsReact as a UI Runtime6760 wordsThe “Bug-O” Notation1127 wordsThe Elements of UI Engineering1971 wordsThe Two Reacts1637 wordsThe WET Codebase196 wordsThings I Don’t Know as of 20181198 wordsWhat Are the React Team Principles?1196 wordsWhat Is JavaScript Made Of?2899 wordsWhy Do React Hooks Rely on Call Order?3891 wordsWhy Do React Elements Have a $$typeof Property?910 wordsWhy Do We Write super(props)?912 wordsWhy Isn’t X a Hook?1328 wordsWriting Resilient Components4689 words All I needed to do was to render a \u003cPostPreview /\u003e for every post folder: import { readdir } from \"fs/promises\"; import { PostPreview } from \"./post-preview\"; export async function PostList() { const entries = await readdir(\"./public/\", { withFileTypes: true }); const dirs = entries.filter(entry =\u003e entry.isDirectory()); return ( \u003cdiv className=\"mb-4 flex h-72 flex-col gap-2 overflow-scroll font-sans\"\u003e {dirs.map(dir =\u003e ( \u003cPostPreview key={dir.name} slug={dir.name} /\u003e ))} \u003c/div\u003e ); } None of this code needed to run on your computer—and indeed it couldn’t because your computer doesn’t have my files. Let’s check when this code ran: \u003cp className=\"text-purple-500 font-bold\"\u003e {new Date().toString()} \u003c/p\u003e Fri Jan 05 2024 00:50:25 GMT+0000 (Coordinated Universal Time) Aha—that’s exactly when I last deployed my blog to my static web hosting! My components ran during the build process so they had full access to my posts. Running my components close to their data source lets them read their own data and preprocess it before sending any of that information to your device. By the time you loaded this page, there was no more \u003cPostList\u003e and no more \u003cPostPreview\u003e, no fileContent and no dirs, no fs and no gray-matter. Instead, there was only a \u003cdiv\u003e with a few \u003csection\u003es with \u003ca\u003es and \u003ci\u003es inside each of them. Your device only received the UI it actually needs to display (the rendered post titles, link URLs, and post word counts) rather than the full raw data that your components used to compute that UI from (the actual posts). With this mental model, the UI is a function of server data, or UI = f(data). That data only exists my device, so that’s where the components should run. Or so the argument goes. UI is made of components, but we argued for two very different visions: UI = f(state) where state is client-side, and f runs on the client. This approach allows writing instantly interactive components like \u003cCounter /\u003e. (Here, f may also run on the server with the initial state to generate HTML.) UI = f(data) where data is server-side, and f runs on the server only. This approach allows writing data-processing components like \u003cPostPreview /\u003e. (Here, f runs categorically on the server only. Build-time counts as “server”.) If we set aside the familiarity bias, both of these approaches are compelling at what they do best. Unfortunately, these visions seem mutually incompatible. If we want to allow instant interactivity like needed by \u003cCounter /\u003e, we have to run components on the client. But components like \u003cPostPreview /\u003e can’t run on the client in principle because they use server-only APIs like readFile. (That’s their whole point! Otherwise we might as well run them on the client.) Okay, what if we run all components on the server instead? But on the server, components like \u003cCounter /\u003e can only render their initial state. The server doesn’t know their current state, and passing that state between the server and the client is too slow (unless it’s tiny like a URL) and not even always possible (e.g. my blog’s server code only runs on deploy so you can’t “pass” stuff to it). Again, it seems like we have to choose between two different Reacts: The “client” UI = f(state) paradigm that lets us write \u003cCounter /\u003e. The “server” UI = f(data) paradigm that lets us write \u003cPostPreview /\u003e. But in practice, the real “formula” is closer to UI = f(data, state). If you had no data or no state, it would generalize to those cases. But ideally, I’d prefer my programming paradigm to be able to handle both cases without having to pick another abstraction, and I know at least a few of you would like that too. The problem to solve, then, is how to split our “f” across two very different programming environments. Is that even possible? Recall we’re not talking about some actual function called f—here, f represents all our components. Is there some way we could split components between your computer and mine in a way that preserves what’s great about React? Could we combine and nest components from two different environments? How would that work? How should that work? Give it some thought, and next time we’ll compare our notes.Discuss on 𝕏  ·  Edit on GitHub",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eSuppose I want to display something on your screen. Whether I want to display a web page like this blog post, an interactive web app, or even a native app that you might download from some app store, at least \u003cem\u003etwo\u003c/em\u003e devices must be involved.\u003c/p\u003e\n\u003cp\u003eYour device and mine.\u003c/p\u003e\n\u003cp\u003eIt starts with some code and data on \u003cem\u003emy\u003c/em\u003e device. For example, I am editing this blog post as a file on my laptop. If you see it on your screen, it must have already traveled from my device to yours. At some point, somewhere, my code and data turned into the HTML and JavaScript instructing \u003cem\u003eyour\u003c/em\u003e device to display this.\u003c/p\u003e\n\u003cp\u003eSo how does that relate to React? React is a UI programming paradigm that lets me break down \u003cem\u003ewhat\u003c/em\u003e to display (a blog post, a signup form, or even a whole app) into independent pieces called \u003cem\u003ecomponents\u003c/em\u003e, and compose them like LEGO blocks. I’ll assume you already know and like components; check \u003ca target=\"_blank\" href=\"https://react.dev\"\u003ereact.dev\u003c/a\u003e for an intro.\u003c/p\u003e\n\u003cp\u003eComponents are code, and that code has to run somewhere. But wait—\u003cem\u003ewhose\u003c/em\u003e computer should they run on? Should they run on your computer? Or on mine?\u003c/p\u003e\n\u003cp\u003eLet’s make a case for each side.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eFirst, I’ll argue that components should run on \u003cem\u003eyour\u003c/em\u003e computer.\u003c/p\u003e\n\u003cp\u003eHere’s a little counter button to demonstrate interactivity. Click it a few times!\u003c/p\u003e\n\n\n\u003cp\u003eAssuming the JavaScript code for this component has already loaded, the number will increase. Notice that it increases \u003cem\u003einstantly on press\u003c/em\u003e. There is no delay. No need to wait for the server. No need to download any additional data.\u003c/p\u003e\n\u003cp\u003eThis is possible because this component’s code is running on \u003cem\u003eyour\u003c/em\u003e computer:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e useState \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ereact\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eCounter\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst [\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003euseState\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      className=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003edark:color-white rounded-lg bg-purple-700 px-2 py-1 font-sans font-semibold text-white focus:ring active:bg-purple-600\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      onClick={() \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esetCount\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e)}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      You clicked me \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003ecount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e times\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eHere, \u003ccode\u003ecount\u003c/code\u003e is a piece of \u003cem\u003eclient state\u003c/em\u003e—a bit of information in your computer’s memory that updates every time you press that button. \u003cstrong\u003eI don’t know how many times you’re going to press the button\u003c/strong\u003e so I can’t predict and prepare all of its possible outputs on \u003cem\u003emy\u003c/em\u003e computer. The most I’ll dare to prepare on my computer is the \u003cem\u003einitial\u003c/em\u003e rendering output (“You clicked me 0 times”) and send it as HTML. But from that point and on, \u003cem\u003eyour computer had to take over\u003c/em\u003e running this code.\u003c/p\u003e\n\u003cp\u003eYou could argue that it’s \u003cem\u003estill\u003c/em\u003e not necessary to run this code on your computer. Maybe I could have it running on my server instead? Whenever you press the button, your computer could ask my server for the next rendering output. Isn’t that how websites worked before all of those client-side JavaScript frameworks?\u003c/p\u003e\n\u003cp\u003eAsking the server for a fresh UI works well when the user \u003cem\u003eexpects\u003c/em\u003e a little delay—for example, when clicking a link. When the user knows they’re navigating to \u003cem\u003esome different place\u003c/em\u003e in your app, they’ll wait. However, any direct manipulation (such as dragging a slider, switching a tab, typing into a post composer, clicking a like button, swiping a card, hovering a menu, dragging a chart, and so on) would feel broken if it didn’t reliably provide at least \u003cem\u003esome\u003c/em\u003e instant feedback.\u003c/p\u003e\n\u003cp\u003eThis principle isn’t strictly technical—it’s an intuition from the everyday life. For example, you wouldn’t expect an elevator button to take you to the next floor in an instant. But when you’re pushing a door handle, you \u003cem\u003edo\u003c/em\u003e expect it to follow your hand’s movement directly, or it will feel stuck. In fact, even with an elevator button you’d expect at least \u003cem\u003esome\u003c/em\u003e instant feedback: it should yield to the pressure of your hand. Then it should light up to acknowledge your press.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWhen you build a user interface, you need to be able to respond to at least some interactions with \u003cem\u003eguaranteed\u003c/em\u003e low latency and with \u003cem\u003ezero\u003c/em\u003e network roundtrips.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eYou might have seen the React mental model being described as a sort of an equation: \u003cem\u003eUI is a function of state\u003c/em\u003e, or \u003ccode\u003eUI = f(state)\u003c/code\u003e. This doesn’t mean that your UI code has to literally be a single function taking state as an argument; it only means that the current state determines the UI. When the state changes, the UI needs to be recomputed. Since the state “lives” on your computer, the code to compute the UI (your components) must also run on your computer.\u003c/p\u003e\n\u003cp\u003eOr so this argument goes.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eNext, I’ll argue the opposite—that components should run on \u003cem\u003emy\u003c/em\u003e computer.\u003c/p\u003e\n\u003cp\u003eHere’s a preview card for a different post from this blog:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostPreview\u003c/span\u003e\u003cspan\u003e slug=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ea-chain-reaction\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/a-chain-reaction\" target=\"_blank\"\u003eA Chain Reaction\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e2452 words\u003c/i\u003e\u003c/section\u003e\u003c/p\u003e\n\u003cp\u003eHow does a component from \u003cem\u003ethis\u003c/em\u003e page know the number of words on \u003cem\u003ethat\u003c/em\u003e page?\u003c/p\u003e\n\u003cp\u003eIf you check the Network tab, you’ll see no extra requests. I’m not downloading that entire blog post from GitHub just to count the number of words in it. I’m not embedding the contents of that blog post on this page either. I’m not calling any APIs to count the words. And I sure did not count all those words by myself.\u003c/p\u003e\n\u003cp\u003eSo how does this component work?\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e readFile \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003efs/promises\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e matter \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003egray-matter\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostPreview\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{ slug }\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003efileContent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ereadFile\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e./public/\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eslug\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e/index.md\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eutf8\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst { \u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ematter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003efileContent\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003ewordCount\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e content\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esplit\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eBoolean\u003c/span\u003e\u003cspan\u003e).\u003c/span\u003e\u003cspan\u003elength\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e className=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003erounded-md bg-black/5 p-2\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eh5\u003c/span\u003e\u003cspan\u003e className=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003efont-bold\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e href={\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e/\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e + \u003c/span\u003e\u003cspan\u003eslug\u003c/span\u003e\u003cspan\u003e} target=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e_blank\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etitle\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ea\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eh5\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ewordCount\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e words\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003esection\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis component runs on \u003cem\u003emy\u003c/em\u003e computer. When I want to read a file, I read a file with \u003ccode\u003efs.readFile\u003c/code\u003e. When I want to parse its Markdown header, I parse it with \u003ccode\u003egray-matter\u003c/code\u003e. When I want to count the words, I split its text and count them. \u003cstrong\u003eThere is nothing extra I need to do because my code runs \u003cem\u003eright where the data is\u003c/em\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eSuppose I wanted to list \u003cem\u003eall\u003c/em\u003e the posts on my blog along with their word counts.\u003c/p\u003e\n\u003cp\u003eEasy:\u003c/p\u003e\n\n\u003cp\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/a-chain-reaction\" target=\"_blank\"\u003eA Chain Reaction\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e2452 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/a-complete-guide-to-useeffect\" target=\"_blank\"\u003eA Complete Guide to useEffect\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e9913 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/algebraic-effects-for-the-rest-of-us\" target=\"_blank\"\u003eAlgebraic Effects for the Rest of Us\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e3062 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/before-you-memo\" target=\"_blank\"\u003eBefore You memo()\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e856 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/coping-with-feedback\" target=\"_blank\"\u003eCoping with Feedback\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e669 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/fix-like-no-ones-watching\" target=\"_blank\"\u003eFix Like No One’s Watching\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e251 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/goodbye-clean-code\" target=\"_blank\"\u003eGoodbye, Clean Code\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1196 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/how-are-function-components-different-from-classes\" target=\"_blank\"\u003eHow Are Function Components Different from Classes?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e2519 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/how-does-react-tell-a-class-from-a-function\" target=\"_blank\"\u003eHow Does React Tell a Class from a Function?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e3000 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/how-does-setstate-know-what-to-do\" target=\"_blank\"\u003eHow Does setState Know What to Do?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1511 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/how-does-the-development-mode-work\" target=\"_blank\"\u003eHow Does the Development Mode Work?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1930 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/making-setinterval-declarative-with-react-hooks\" target=\"_blank\"\u003eMaking setInterval Declarative with React Hooks\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e2769 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/my-decade-in-review\" target=\"_blank\"\u003eMy Decade in Review\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e5866 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/my-wishlist-for-hot-reloading\" target=\"_blank\"\u003eMy Wishlist for Hot Reloading\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e2602 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/name-it-and-they-will-come\" target=\"_blank\"\u003eName It, and They Will Come\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e774 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/npm-audit-broken-by-design\" target=\"_blank\"\u003enpm audit: Broken by Design\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e2627 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/on-let-vs-const\" target=\"_blank\"\u003eOn let vs const\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e673 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/optimized-for-change\" target=\"_blank\"\u003eOptimized for Change\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e225 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/preparing-for-tech-talk-part-1-motivation\" target=\"_blank\"\u003ePreparing for a Tech Talk, Part 1: Motivation\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1122 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/preparing-for-tech-talk-part-2-what-why-and-how\" target=\"_blank\"\u003ePreparing for a Tech Talk, Part 2: What, Why, and How\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e891 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/preparing-for-tech-talk-part-3-content\" target=\"_blank\"\u003ePreparing for a Tech Talk, Part 3: Content\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1401 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/react-as-a-ui-runtime\" target=\"_blank\"\u003eReact as a UI Runtime\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e6760 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/the-bug-o-notation\" target=\"_blank\"\u003eThe “Bug-O” Notation\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1127 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/the-elements-of-ui-engineering\" target=\"_blank\"\u003eThe Elements of UI Engineering\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1971 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/the-two-reacts\" target=\"_blank\"\u003eThe Two Reacts\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1637 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/the-wet-codebase\" target=\"_blank\"\u003eThe WET Codebase\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e196 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/things-i-dont-know-as-of-2018\" target=\"_blank\"\u003eThings I Don’t Know as of 2018\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1198 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/what-are-the-react-team-principles\" target=\"_blank\"\u003eWhat Are the React Team Principles?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1196 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/what-is-javascript-made-of\" target=\"_blank\"\u003eWhat Is JavaScript Made Of?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e2899 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/why-do-hooks-rely-on-call-order\" target=\"_blank\"\u003eWhy Do React Hooks Rely on Call Order?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e3891 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/why-do-react-elements-have-typeof-property\" target=\"_blank\"\u003eWhy Do React Elements Have a $$typeof Property?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e910 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/why-do-we-write-super-props\" target=\"_blank\"\u003eWhy Do We Write super(props)?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e912 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/why-isnt-x-a-hook\" target=\"_blank\"\u003eWhy Isn’t X a Hook?\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e1328 words\u003c/i\u003e\u003c/section\u003e\u003csection\u003e\u003ch5\u003e\u003ca href=\"https://overreacted.io/writing-resilient-components\" target=\"_blank\"\u003eWriting Resilient Components\u003c/a\u003e\u003c/h5\u003e\u003ci\u003e4689 words\u003c/i\u003e\u003c/section\u003e\u003c/p\u003e\n\u003cp\u003eAll I needed to do was to render a \u003ccode\u003e\u0026lt;PostPreview /\u0026gt;\u003c/code\u003e for every post folder:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e readdir \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003efs/promises\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e PostPreview \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e./post-preview\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003eexport\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ePostList\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003eentries\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003ereaddir\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e./public/\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ewithFileTypes\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e});\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003edirs\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e entries\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efilter\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eentry\u003c/span\u003e\u003cspan\u003e =\u0026gt; entry\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eisDirectory\u003c/span\u003e\u003cspan\u003e());\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e className=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003emb-4 flex h-72 flex-col gap-2 overflow-scroll font-sans\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003edirs\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edir \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ePostPreview\u003c/span\u003e\u003cspan\u003e key={\u003c/span\u003e\u003cspan\u003edir\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e} slug={\u003c/span\u003e\u003cspan\u003edir\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e} /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u003c/span\u003e\u003cspan\u003e))}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNone of this code needed to run on your computer—and indeed \u003cem\u003eit couldn’t\u003c/em\u003e because your computer doesn’t have my files. Let’s check \u003cem\u003ewhen\u003c/em\u003e this code ran:\u003c/p\u003e\n\u003cdiv data-rehype-pretty-code-fragment=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"default\"\u003e\u003ccode data-language=\"js\" data-theme=\"default\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e className=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003etext-purple-500 font-bold\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u003c/span\u003e\u003cspan\u003e{new\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eDate\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003etoString\u003c/span\u003e\u003cspan\u003e()}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFri Jan 05 2024 00:50:25 GMT+0000 (Coordinated Universal Time)\u003c/p\u003e\n\u003cp\u003eAha—that’s exactly when I last deployed my blog to my static web hosting! My components ran during the build process so they had full access to my posts.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRunning my components close to their data source lets them read their own data and preprocess it \u003cem\u003ebefore\u003c/em\u003e sending any of that information to your device.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eBy the time you loaded this page, there was no more \u003ccode\u003e\u0026lt;PostList\u0026gt;\u003c/code\u003e and no more \u003ccode\u003e\u0026lt;PostPreview\u0026gt;\u003c/code\u003e, no \u003ccode\u003efileContent\u003c/code\u003e and no \u003ccode\u003edirs\u003c/code\u003e, no \u003ccode\u003efs\u003c/code\u003e and no \u003ccode\u003egray-matter\u003c/code\u003e. Instead, there was only a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e with a few \u003ccode\u003e\u0026lt;section\u0026gt;\u003c/code\u003es with \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003es and \u003ccode\u003e\u0026lt;i\u0026gt;\u003c/code\u003es inside each of them. Your device only received \u003cem\u003ethe UI it actually needs to display\u003c/em\u003e (the rendered post titles, link URLs, and post word counts) rather than \u003cem\u003ethe full raw data\u003c/em\u003e that your components used to compute that UI from (the actual posts).\u003c/p\u003e\n\u003cp\u003eWith this mental model, \u003cem\u003ethe UI is a function of server data\u003c/em\u003e, or \u003ccode\u003eUI = f(data)\u003c/code\u003e. That data only exists \u003cem\u003emy\u003c/em\u003e device, so that’s where the components should run.\u003c/p\u003e\n\u003cp\u003eOr so the argument goes.\u003c/p\u003e\n\u003chr/\u003e\n\u003cp\u003eUI is made of components, but we argued for two very different visions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eUI = f(state)\u003c/code\u003e where \u003ccode\u003estate\u003c/code\u003e is client-side, and \u003ccode\u003ef\u003c/code\u003e runs on the client. This approach allows writing instantly interactive components like \u003ccode\u003e\u0026lt;Counter /\u0026gt;\u003c/code\u003e. (Here, \u003ccode\u003ef\u003c/code\u003e may \u003cem\u003ealso\u003c/em\u003e run on the server with the initial state to generate HTML.)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUI = f(data)\u003c/code\u003e where \u003ccode\u003edata\u003c/code\u003e is server-side, and \u003ccode\u003ef\u003c/code\u003e runs on the server only. This approach allows writing data-processing components like \u003ccode\u003e\u0026lt;PostPreview /\u0026gt;\u003c/code\u003e. (Here, \u003ccode\u003ef\u003c/code\u003e runs categorically on the server only. Build-time counts as “server”.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf we set aside the familiarity bias, both of these approaches are compelling at what they do best. Unfortunately, these visions \u003cem\u003eseem\u003c/em\u003e mutually incompatible.\u003c/p\u003e\n\u003cp\u003eIf we want to allow instant interactivity like needed by \u003ccode\u003e\u0026lt;Counter /\u0026gt;\u003c/code\u003e, we \u003cem\u003ehave to\u003c/em\u003e run components on the client. But components like \u003ccode\u003e\u0026lt;PostPreview /\u0026gt;\u003c/code\u003e can’t run on the client \u003cem\u003ein principle\u003c/em\u003e because they use server-only APIs like \u003ccode\u003ereadFile\u003c/code\u003e. (That’s their whole point! Otherwise we might as well run them on the client.)\u003c/p\u003e\n\u003cp\u003eOkay, what if we run all components on the server instead? But on the server, components like \u003ccode\u003e\u0026lt;Counter /\u0026gt;\u003c/code\u003e can only render their \u003cem\u003einitial\u003c/em\u003e state. The server doesn’t know their \u003cem\u003ecurrent\u003c/em\u003e state, and passing that state between the server and the client is too slow (unless it’s tiny like a URL) and not even always possible (e.g. my blog’s server code only runs on deploy so you can’t “pass” stuff to it).\u003c/p\u003e\n\u003cp\u003eAgain, it seems like we have to choose between two different Reacts:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe “client” \u003ccode\u003eUI = f(state)\u003c/code\u003e paradigm that lets us write \u003ccode\u003e\u0026lt;Counter /\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eThe “server” \u003ccode\u003eUI = f(data)\u003c/code\u003e paradigm that lets us write \u003ccode\u003e\u0026lt;PostPreview /\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBut in practice, the real “formula” is closer to \u003ccode\u003eUI = f(data, state)\u003c/code\u003e. If you had no \u003ccode\u003edata\u003c/code\u003e or no \u003ccode\u003estate\u003c/code\u003e, it would generalize to those cases. But ideally, I’d prefer my programming paradigm to be able to \u003cem\u003ehandle both cases\u003c/em\u003e without having to pick another abstraction, and I know at least a few of you would like that too.\u003c/p\u003e\n\u003cp\u003eThe problem to solve, then, is how to split our “\u003ccode\u003ef\u003c/code\u003e” across two very different programming environments. Is that even possible? Recall we’re not talking about some actual function called \u003ccode\u003ef\u003c/code\u003e—here, \u003ccode\u003ef\u003c/code\u003e represents all our components.\u003c/p\u003e\n\u003cp\u003eIs there some way we could split components between your computer and mine in a way that preserves what’s great about React? Could we combine and nest components from two different environments? How would that work?\u003c/p\u003e\n\u003cp\u003eHow \u003cem\u003eshould\u003c/em\u003e that work?\u003c/p\u003e\n\u003cp\u003eGive it some thought, and next time we’ll compare our notes.\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://x.com/search?q=https%3A%2F%2Foverreacted.io%2Fthe-two-reacts%2F\"\u003eDiscuss on 𝕏\u003c/a\u003e  ·  \u003ca target=\"_blank\" href=\"https://github.com/gaearon/overreacted.io/edit/main/public/the-two-reacts/index.md\"\u003eEdit on GitHub\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": null,
  "modifiedTime": null
}
