{
  "id": "a258124b-9f10-4847-afb1-d410c6729741",
  "title": "Kafka 4.0: KRaft Simplifies Architecture",
  "link": "https://www.infoq.com/news/2025/04/kafka-4-kraft-architecture/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Apache Kafka 4.0 ushers in a transformative era by adopting KRaft mode, eliminating the need for ZooKeeper, streamlining architecture, and enhancing scalability. With a next-gen consumer group protocol for improved performance and early access to point-to-point messaging, Kafka solidifies its role in modern data streaming. Elevate your data infrastructure with Kafka’s innovative advancements! By Steef-Jan Wiggers",
  "author": "Steef-Jan Wiggers",
  "published": "Tue, 08 Apr 2025 12:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Messaging",
    "Apache Kafka",
    "Architecture",
    "Development",
    "Architecture \u0026 Design",
    "news"
  ],
  "byline": "Steef-Jan Wiggers",
  "length": 3556,
  "excerpt": "Apache Kafka 4.0 ushers in a transformative era by adopting KRaft mode, eliminating the need for ZooKeeper, streamlining architecture, and enhancing scalability. With a next-gen consumer group protoco",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250408103814/apple-touch-icon.png",
  "text": "Apache Kafka has reached a significant milestone with the release of version 4.0, a major update that introduces a host of new features and improvements, most notably the default operation in KRaft mode, which, according to Confluent's documentation, eliminates the dependency on Apache ZooKeeper.. For over a decade, ZooKeeper has served as the backbone of Kafka, and the community has expressed gratitude for its contributions. However, the move to KRaft by default in Kafka 4.0 streamlines deployment and management by removing the need to maintain a separate ZooKeeper ensemble. (Source: Confluent documentation) Lalit Moharana, an AWS Community Builder, posted on LinkedIn: ZooKeeper is stepping aside as Apache Kafka adopts KRaft with the upcoming Kafka 4.0 release, marking the end of a 14-year partnership. This shift simplifies Kafka’s architecture by ditching the separate ZooKeeper system, boosting scalability, and paving the way for a self-sufficient future - all thanks to KRaft’s Raft protocol magic. In addition: Why the Change? ZooKeeper’s overhead and limits (think 100,000+ partitions) couldn’t keep up with Kafka’s growth. And: KRaft Benefits: One system, millions of partitions, faster recovery - Kafka’s ready to soar! Beyond the architectural shift, Kafka 4.0 brings the general availability of KIP-848, which introduces a next-generation consumer group protocol. This new protocol is designed to dramatically improve rebalance performance, reducing downtime and latency for consumer groups, especially in large-scale environments. By minimizing \"stop-the-world\" rebalances, Kafka aims to provide a more stable and responsive data streaming experience. The new protocol is enabled by default on the server side, with consumers needing to opt in by setting group.protocol=consumer. In a Hacker News thread, a respondent commented: One thing I immediately noticed after switching from SNS/SQS to Kafka was its speed. Messages seem to get sent/received almost immediately. Furthermore, Kafka 4.0 offers early access to Queues for Kafka (KIP-932). This feature introduces the concept of \"share groups\" to enable cooperative consumption using regular Kafka topics, effectively allowing Kafka to support traditional queue semantics. While not a direct addition of a \"queue\" data structure, this enhancement expands Kafka's versatility, making it suitable for a broader range of messaging use cases, particularly those requiring point-to-point messaging patterns akin to durable shared subscriptions. In a LinkedIn post, Govindan Gopalan, an AI \u0026 Data Engineering Leader at IBM, concluded: Early queue support (KIP-932) introduces point-to-point messaging, expanding Kafka’s use cases beyond traditional publish-subscribe workflows. This major release marks a significant step forward in platform modernization. As part of its evolution, Kafka 4.0 has removed APIs deprecated for at least 12 months. Furthermore, it updates the minimum Java requirements, with Kafka Clients and Kafka Streams now requiring Java 11, and Kafka Brokers, Connect, and Tools requiring Java 17. This move encourages the adoption of newer Java features and aligns Kafka with more current technology stacks. The release also updates the minimum supported client and broker versions (KIP-896) and defines new baseline requirements for supported upgrade paths, as detailed in KIP-1124. About the Author Steef-Jan Wiggers",
  "image": "https://res.infoq.com/news/2025/04/kafka-4-kraft-architecture/en/headerimage/generatedHeaderImage-1743760689782.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eApache Kafka has reached a significant milestone with the release of \u003ca href=\"https://archive.apache.org/dist/kafka/4.0.0/RELEASE_NOTES.html\"\u003eversion 4.0\u003c/a\u003e, a major update that introduces a host of new features and improvements, most notably the default operation in KRaft mode, which, according to Confluent\u0026#39;s \u003ca href=\"https://docs.confluent.io/platform/current/kafka-metadata/kraft.html\"\u003edocumentation\u003c/a\u003e, eliminates the dependency on Apache ZooKeeper..\u003c/p\u003e\n\n\u003cp\u003eFor over a decade, \u003ca href=\"https://en.wikipedia.org/wiki/Apache_ZooKeeper\"\u003eZooKeeper\u003c/a\u003e has served as the backbone of Kafka, and the community has expressed gratitude for its contributions. However, the move to \u003ca href=\"https://docs.confluent.io/platform/current/kafka-metadata/kraft.html\"\u003eKRaft\u003c/a\u003e by default in Kafka 4.0 streamlines deployment and management by removing the need to maintain a separate ZooKeeper ensemble.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://docs.confluent.io/platform/current/_images/KRaft-isolated-mode.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e(Source: Confluent \u003ca href=\"https://docs.confluent.io/platform/current/kafka-metadata/kraft.html\"\u003edocumentation\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eLalit Moharana, an AWS Community Builder, \u003ca href=\"https://www.linkedin.com/posts/lalit-moharana-987516191_aws-confluent-kafka-activity-7307385273883971584-3jnM?utm_source=share\u0026amp;utm_medium=member_desktop\u0026amp;rcm=ACoAAABXKo8Bjx0FBabVPbsCe3F5-eTWuvKhojU\"\u003eposted\u003c/a\u003e on LinkedIn:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eZooKeeper is stepping aside as Apache Kafka adopts KRaft with the upcoming Kafka 4.0 release, marking the end of a 14-year partnership. This shift simplifies Kafka’s architecture by ditching the separate ZooKeeper system, boosting scalability, and paving the way for a self-sufficient future - all thanks to KRaft’s Raft protocol magic.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn addition:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eWhy the Change? ZooKeeper’s overhead and limits (think 100,000+ partitions) couldn’t keep up with Kafka’s growth. And:\u003c/p\u003e\n\n\u003cp\u003eKRaft Benefits: One system, millions of partitions, faster recovery - Kafka’s ready to soar!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eBeyond the architectural shift, Kafka 4.0 brings the general availability of \u003ca href=\"https://cwiki.apache.org/confluence/x/HhD1D\"\u003eKIP-848\u003c/a\u003e, which introduces a next-generation consumer group protocol. This new protocol is designed to dramatically improve rebalance performance, reducing downtime and latency for consumer groups, especially in large-scale environments. By minimizing \u0026#34;stop-the-world\u0026#34; rebalances, Kafka aims to provide a more stable and responsive data streaming experience. The new protocol is enabled by default on the server side, with consumers needing to opt in by setting group.protocol=consumer.\u003c/p\u003e\n\n\u003cp\u003eIn a Hacker News \u003ca href=\"https://news.ycombinator.com/item?id=43402784\"\u003ethread\u003c/a\u003e, a respondent commented:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eOne thing I immediately noticed after switching from SNS/SQS to Kafka was its speed. Messages seem to get sent/received almost immediately.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eFurthermore, Kafka 4.0 offers early access to Queues for Kafka (\u003ca href=\"https://cwiki.apache.org/confluence/x/4hA0Dw\"\u003eKIP-932\u003c/a\u003e). This feature introduces the concept of \u0026#34;share groups\u0026#34; to enable cooperative consumption using regular Kafka topics, effectively allowing Kafka to support traditional queue semantics. While not a direct addition of a \u0026#34;queue\u0026#34; data structure, this enhancement expands Kafka\u0026#39;s versatility, making it suitable for a broader range of messaging use cases, particularly those requiring point-to-point messaging patterns akin to durable shared subscriptions.\u003c/p\u003e\n\n\u003cp\u003eIn a \u003ca href=\"https://www.linkedin.com/pulse/apache-kafka-40-unveiled-revolutionizing-speed-data-govindan-gopalan-qtiwc\"\u003eLinkedIn post\u003c/a\u003e, Govindan Gopalan, an AI \u0026amp; Data Engineering Leader at IBM, concluded:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eEarly queue support (KIP-932) introduces point-to-point messaging, expanding Kafka’s use cases beyond traditional publish-subscribe workflows.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis major release marks a significant step forward in platform modernization. As part of its evolution, Kafka 4.0 has removed APIs deprecated for at least 12 months. Furthermore, it updates the minimum Java requirements, with Kafka Clients and Kafka Streams now requiring Java 11, and Kafka Brokers, Connect, and Tools requiring Java 17. This move encourages the adoption of newer Java features and aligns Kafka with more current technology stacks. The release also updates the minimum supported client and broker versions (\u003ca href=\"https://cwiki.apache.org/confluence/display/KAFKA/KIP-896%3A+Remove+old+client+protocol+API+versions+in+Kafka+4.0\"\u003eKIP-896\u003c/a\u003e) and defines new baseline requirements for supported upgrade paths, as detailed in \u003ca href=\"https://cwiki.apache.org/confluence/x/y4kgF\"\u003eKIP-1124\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Steef~Jan-Wiggers\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSteef-Jan Wiggers\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-04-08T00:00:00Z",
  "modifiedTime": null
}
