{
  "id": "34a3dc40-2362-4035-9bf7-a97994e98ae9",
  "title": "How To Increase Code Quality in GitHub With Qodana",
  "link": "https://blog.jetbrains.com/qodana/2025/04/code-quality-in-github/",
  "description": "A year ago we shared a post on how to integrate Qodana with Github Actions on the .NET Community – but a lot has changed since then. Qodana self-hosted has been released, with analysis that can make your code more secure by detecting hardcoded passwords and running taint analysis for JVM. The new Android Linter […]",
  "author": "Kerry Beetge",
  "published": "Thu, 10 Apr 2025 17:37:29 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "code-review",
    "tutorials",
    "github",
    "qodana"
  ],
  "byline": "Kerry Beetge",
  "length": 9857,
  "excerpt": "It's been awhile since we last updated you on our code quality in GitHub offering. Take a look at this how-to guide from Qodana.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The code quality platform for teams Code Review TutorialsHow To Increase Code Quality in GitHub With Qodana Guest Author: Andrei Lurko Andrei Lurko is a software developer in the Qodana Core team and a champion of code quality for developers of all skill levels. He is based in Paphos, Cypress and likes karaoke, refining architecture, and finding unique gifts that his wife will love. And, more importantly than releasing new functionality and features, the Qodana team has worked hard on improving the experience for users – creating a world-class platform for developers and QAs. As a result of this, we’re now providing a more seamless integration with Github too. In this post, we will discuss what’s changed and how to elevate your code quality in Github with Qodana. Open Qodana Cloud Table of ContentsSetting up a Qodana Project and configuring a GitHub Actions workflow fileInspecting Qodana results for GitHub ActionsQodana results in GitHub pull requestsUploading Qodana results as artifactsAdding Quick Fixes in your worflow runAdding a Qodana status badgeTry Qodana for GitHub Setting up a Qodana Project and configuring a GitHub Actions workflow file Head over to Qodana Cloud or your on-premise solution, and create a new project.  After you created the project, choose Github Actions from the options: You will be prompted to install the Qodana Cloud Github application. You can choose which repositories it will have access to. After installation, you will be able to link your repository to the Qodana Cloud project: The final step is to integrate Qodana into your pipeline. To do this, you only need to choose the right linter, suitable for the language of your project and press the Save token and submit pull request button. If you want to set everything manually, you will be able to find instructions on the same page: After that, navigate to your repository and find the pull request created by Qodana. There, you will see the configuration to apply Qodana to your GitHub CI/CD. And that’s it! The Qodana team put a great effort into making the configuration as seamless as possible. If you would like to change the configuration later, you can easily do so in the IDE – because the configuration fully supports the YAML format. Then you can take advantage of code completion, formatting, and validation when editing the file. For instance, you can see which inspection profiles are included out of the box: Inspecting Qodana results for GitHub Actions At this point, you might start imagining the process of using Qodana like this: make some changes to the project, push it to GitHub, wait until the Qodana Action is complete, view the result in Github and then start switching back and forth to fix all the issues you find. Well, here’s some good news – you can fix everything without leaving your IDE! To do so, you need to connect the IDE to Qodana Cloud. Launch your IDE and navigate to problems → Server-Side Analysis tab. Make sure that the configuration suggested in GitHub is applied locally – and press the Log in to use all features button! After you log in, you will find the Qodana Cloud project in the window – choose it and press OK. Let’s test our setup! I had this ancient react-native project for testing. After adding configuration to the develop branch, I opened a pull request to master. As you can see, Qodana gave us the result as a comment in the pull request, and we can see that there are some issues in the project. We are one click away from seeing this report in IDE. All that is left is to open the Server-Side Analysis tab again and press the Refresh Report button (make sure you are on the same branch as your pull request). This report will include all the important information about the workflow run, branch, number of issues, their classifications, and severities. And it seems like in the past, I made a serious mistake – I pushed a RAPID API token right into the code. Well, it was almost my first application, after all. But if you would prefer to view all problems on Github – Qodana can show them to you directly through both annotations and job summaries under workflow runs. That means even contributors who don’t use JetBrains IDEs or don’t have access to your Qodana project can take advantage of Qodana’s first-class analysis reports: In case you don’t want to see any annotations, you can opt out via the use-annotations property: In contrast to our demo project, your solution might show significantly more code inspections and problems. This is expected, and you shouldn’t feel discouraged by it. Our goal with Qodana is to help you improve your code quality in an incremental and flexible way, which can be achieved by moving existing problems to the baseline and configuring a fail threshold as a quality gate. Qodana also supports CodeQL format reporting, which means that you can configure It to include found problems in a Github CodeQL scan. While not all found issues are security concerns, you may want to look into Qodana Taint Analysis results to be on the safe side. Qodana results in GitHub pull requests In order to make Qodana work properly with pull requests, you need to set the ref and fetch-depth properties on the checkout action as follows (already pre-configured if you followed the previous steps): - uses: actions/checkout@v4 with: ref: ${{ github.event.pull_request.head.sha }} fetch-depth: 0 Without any additional effort, Qodana can post the results of your analysis on GitHub pull requests. This enables contributors to react quickly to potential bugs and quality degradation. At the same time, it gives repository owners more confidence when it comes to merging pull requests by providing a summary in comments: This analysis report is updated as more commits are pushed to the branch. If you prefer not to post any updates on pull requests, you can opt out via the post-pr-comment property: - name: 'Qodana Scan' uses: JetBrains/qodana-action@v2024.3 with: post-pr-comment: false Uploading Qodana results as artifacts By default, Qodana will upload analysis results only to Qodana Cloud. Under certain circumstances, you might also want to upload them as artifacts. This could be to update the qodana.sarif.json baseline file by simply downloading and replacing it in your repository or allow contributors to investigate a report directly in their IDE without having to link the project (which is also possible in our Visual Studio Code extension): In order to opt into uploading the Qodana report as an artifact, you can use the upload-result and artifact-name properties: - name: 'Qodana Scan' uses: JetBrains/qodana-action@v2024.3 with: upload-result: ${{ github.ref_name == 'main' }} artifact-name: qodana-report Adding Quick Fixes in your worflow run Another powerful feature of Qodana is quick fixes. Jetbrains and the community have developed them for years and you can enable them in your codebase through Qodana. This can be done with any paid linter by adding this configuration to your workflow file: - name: 'Qodana Scan' uses: JetBrains/qodana-action@v2024.3 with: args: --apply-fixes push-fixes: 'branch' With this configuration, after Qodana runs, it will push fixes directly into your branch, without any additional input. If you want to be on the safe side and first review the fixes, then you can change the push-fixes input argument to ‘pull-request‘ and Qodana will open the pull request suggesting fixes in the analyzed branch! For example, here is how one of the quick-fixes looks after the analysis of Glide – a popular Android library for image loading. Adding a Qodana status badge After integrating Qodana into your repository, what could be better than adding a cool badge to show that it’s in good shape? Just head over to one of the workflow runs and grab it from the menu in the upper right-hand corner: Try Qodana for GitHub The Qodana team has improved Github integration, allowing maintainers and contributors to react to any issue fast, and improving the code quality and security of the your products. The experience is not limited to JetBrains IDE users – anyone can benefit from issues displayed in the Github UI and reports exported to their Visual Studio Code too. Get Qodana Cloud or Self-Hosted for your team, and give it a try. Try Qodana Cloud Subscribe to Qodana Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/04/qd-social_share_blog_1280x720_en-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/qodana/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2021/07/Qodana-1.svg\" alt=\"Qodana logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe code quality platform for teams\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/qodana/category/code-review/\"\u003eCode Review\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/qodana/category/tutorials/\"\u003eTutorials\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eHow To Increase Code Quality in GitHub With Qodana\u003c/h2\u003e                    \n                        \u003cdiv\u003e\n                                                            \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/Andrei.jpeg\" alt=\"Andrei Lurko Qodana\" loading=\"lazy\"/\u003e\n                        \u003c/p\u003e\n                                        \u003cdiv\u003e\n                                                    \u003ch4\u003eGuest Author: Andrei Lurko\u003c/h4\u003e\n                                                \u003cp\u003eAndrei Lurko is a software developer in the Qodana Core team and a champion of code quality for developers of all skill levels. He is based in Paphos, Cypress and likes karaoke, refining architecture, and finding unique gifts that his wife will love.\u003c/p\u003e\n                    \u003c/div\u003e\n                            \u003c/div\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAnd, more importantly than releasing new functionality and features, the Qodana team has worked hard on improving the experience for users – creating a world-class platform for developers and QAs. As a result of this, we’re now providing a more seamless integration with Github too. \u003c/p\u003e\n\n\n\n\u003cp\u003eIn this post, we will discuss what’s changed and how to elevate your code quality in Github with Qodana.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Open Qodana Cloud\" href=\"https://qodana.cloud/\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://qodana.cloud/\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eOpen Qodana Cloud\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cdiv id=\"rank-math-toc\"\u003e\u003ch2\u003eTable of Contents\u003c/h2\u003e\u003cnav\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#setting-up-a-qodana-project-and-configuring-git-hub-actions-workflow-file\"\u003eSetting up a Qodana Project and configuring a GitHub Actions workflow file\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#inspecting-qodana-results-for-git-hub-actions\"\u003eInspecting Qodana results for GitHub Actions\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#qodana-results-in-git-hub-pull-requests\"\u003eQodana results in GitHub pull requests\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#uploading-qodana-results-as-artifacts\"\u003eUploading Qodana results as artifacts\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#adding-quick-fixes-in-your-worflow-run\"\u003eAdding Quick Fixes in your worflow run\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"#adding-a-qodana-status-badge\"\u003eAdding a Qodana status badge\u003c/a\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"#try-qodana-for-git-hub\"\u003eTry Qodana for GitHub\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/nav\u003e\u003c/div\u003e\n\n\n\n\u003ch2 id=\"setting-up-a-qodana-project-and-configuring-git-hub-actions-workflow-file\"\u003eSetting up a Qodana Project and configuring a GitHub Actions workflow file\u003c/h2\u003e\n\n\n\n\u003cp\u003eHead over to \u003ca href=\"https://qodana.cloud/\" target=\"_blank\" rel=\"noopener\"\u003eQodana Cloud\u003c/a\u003e or your on-premise solution, and create a new project. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeDCjJhbT1f8QCBck9iD863iP2sLzzEFySFZE-9IBE1NEyr32-TzEa6Gc5BWLchYoaLp5HKj6LL5dei_U8dsoL73tiF8CKe742OVPL0g6CXcA4TEbuRBh2KNg85VtkZ8lvM2FK4?key=xNxQ1GJTY_sTCUUUhdhkbCQy\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAfter you created the project, choose Github Actions from the options: \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXehJyb1f9vJkkWEOyOlTymwBGSLgICZTv9UQewvodMrTQgNSQ3t0eCfSnN59u2tMR-ckr6ePFbmA7tW8xfzQUYjcmSq1jyeipJHr5vx3WOpSzzez87CfNDHV8SQJsH8oVxC9lE?key=xNxQ1GJTY_sTCUUUhdhkbCQy\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou will be prompted to install the Qodana Cloud Github application. You can choose which repositories it will have access to. After installation, you will be able to link your repository to the Qodana Cloud project:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcmhB7QfwixkUSp8L0LnEPUjWvJzON7J1TWg4hhihkc4bJc5vHO0BvzT5JRDOxkN3hDQgkOGv7EKUugQ2okaFRSDELWPNYAZGxysKVVdyPtopjKLA3oE1cNoTmsKkVeUVZv4w8a?key=xNxQ1GJTY_sTCUUUhdhkbCQy\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe final step is to integrate Qodana into your pipeline. To do this, you only need to choose the right linter, suitable for the language of your project and press the \u003cstrong\u003eSave token and submit pull request\u003c/strong\u003e button. If you want to set everything manually, you will be able to find instructions on the same page:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcntTvcTGITK6mnzT8ynTPGvDxPdkU50m5MlfOnfnS9RGzxdm-tCc8QTW-JVMeh3J98_BYZT_-nfQGTqpDzksxqi86x6fzMxk9cnKNMNoi1v61NUGDRUGB_vvwhO-AfGGyaSNgb?key=xNxQ1GJTY_sTCUUUhdhkbCQy\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAfter that, navigate to your repository and find the pull request created by Qodana. There, you will see the configuration to apply Qodana to your GitHub CI/CD.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeSQXZAx3fzfOXlpGgI2INGPlqt1uqhJ3icNXzb29gLCC3D0os73yTx-OKIdG9c3ipFHbuQBCWulaAtc2Yh3SfScBWsMvDmQmpKckUr6HV3vCuyiETHjU8idX4EE7h1ythAg4Dh?key=xNxQ1GJTY_sTCUUUhdhkbCQy\" alt=\"Static code analysis in GitHub\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXeKOJxr1_8otL-XSHEV-m1Dfzl6kegLQftZH_mHrIGVd4k8czguWSOwzC1VITbYBHIgvVxOMzCPfdVkCVRMT2oOk9U77zVFwIVhui_1Qy_C6Ed6XurM99YmWpPTLxZ-jWX5M9A?key=xNxQ1GJTY_sTCUUUhdhkbCQy\" alt=\"Code Quality in GitHub\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnd that’s it! The Qodana team put a great effort into making the configuration as seamless as possible. If you would like to change the configuration later, you can easily do so in the IDE – because the configuration fully supports the YAML format. Then you can take advantage of code completion, formatting, and validation when editing the file. For instance, you can see which \u003ca href=\"https://www.jetbrains.com/help/qodana/inspection-profiles.html\" target=\"_blank\" rel=\"noopener\"\u003einspection profiles\u003c/a\u003e are included out of the box:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdFy-evQc0e4bGfAc_Xw2JMzMHglruchzkZgTmOUUDMUJ8Yry6NTEKWjzcX5mlBx1lepSw4v4NcRS0zu6VmPfjvDiJ_wOaU4jtFCfgQMw91Gek-uOEgXYBXOgnF6Uxp7eoTTOc?key=xNxQ1GJTY_sTCUUUhdhkbCQy\" alt=\"Code quality scan\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"inspecting-qodana-results-for-git-hub-actions\"\u003e\u003cstrong\u003eInspecting Qodana results for GitHub Actions\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eAt this point, you might start imagining the process of using Qodana like this: make some changes to the project, push it to GitHub, wait until the Qodana Action is complete, view the result in Github and then start switching back and forth to fix all the issues you find. Well, here’s some good news – you can fix everything without leaving your IDE!\u003c/p\u003e\n\n\n\n\u003cp\u003eTo do so, you need to connect the IDE to Qodana Cloud. Launch your IDE and navigate to problems → Server-Side Analysis tab. Make sure that the configuration suggested in GitHub is applied locally – and press the \u003cstrong\u003eLog in to use all features\u003c/strong\u003e button!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1480\" height=\"524\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-39.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAfter you log in, you will find the Qodana Cloud project in the window – choose it and press \u003cstrong\u003eOK\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1508\" height=\"1108\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-40.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eLet’s test our setup! I had this ancient react-native project for testing. After adding configuration to the \u003ccode\u003edevelop\u003c/code\u003e branch, I opened a pull request to \u003ccode\u003emaster\u003c/code\u003e. As you can see, Qodana gave us the result as a comment in the pull request, and we can see that there are some issues in the project.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"923\" height=\"1000\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-41.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe are one click away from seeing this report in IDE. All that is left is to open the \u003cstrong\u003eServer-Side Analysis\u003c/strong\u003e tab again and press the \u003cstrong\u003eRefresh Report\u003c/strong\u003e button (make sure you are on the same branch as your pull request). This report will include all the important information about the workflow run, branch, number of issues, their classifications, and severities. And it seems like in the past, I made a serious mistake – I pushed a RAPID API token right into the code. Well, it was almost my first application, after all.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1478\" height=\"522\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-42.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eBut if you would prefer to view all problems on Github – Qodana can show them to you directly through \u003ca href=\"https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#using-workflow-commands-to-access-toolkit-functions\" target=\"_blank\" rel=\"noopener\"\u003eboth annotations\u003c/a\u003e and \u003ca href=\"https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary\" target=\"_blank\" rel=\"noopener\"\u003ejob summaries\u003c/a\u003e under workflow runs. That means even contributors who don’t use JetBrains IDEs or don’t have access to your Qodana project can take advantage of Qodana’s first-class analysis reports:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2484\" height=\"1582\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-43.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn case you don’t want to see any annotations, you can opt out via the \u003ccode\u003euse-annotations\u003c/code\u003e property:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"752\" height=\"118\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-44.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn contrast to our demo project, your solution might show significantly more code inspections and problems. This is expected, and you shouldn’t feel discouraged by it. Our goal with Qodana is to help you improve your code quality in an incremental and flexible way, which can be achieved by \u003ca href=\"https://blog.jetbrains.com/dotnet/2023/06/29/elevating-csharp-code-quality-with-qodana-a-journey-towards-perfection/#qodana-scans-in-cicd-environments\"\u003emoving existing problems to the baseline and configuring a fail threshold as a quality gate\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eQodana also supports \u003ca href=\"https://codeql.github.com/\" target=\"_blank\" rel=\"noopener\"\u003eCodeQL\u003c/a\u003e format reporting, which means that you can configure It to include found problems in a Github CodeQL scan. While not all found issues are security concerns, you may want to look into \u003ca href=\"https://www.jetbrains.com/help/qodana/taint-analysis.html\" target=\"_blank\" rel=\"noopener\"\u003eQodana Taint Analysis results\u003c/a\u003e to be on the safe side.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1382\" height=\"820\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-45.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"qodana-results-in-git-hub-pull-requests\"\u003e\u003cstrong\u003eQodana results in GitHub pull requests\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn order to make Qodana work properly with pull requests, you need to set the \u003ccode\u003eref\u003c/code\u003e and \u003ccode\u003efetch-depth\u003c/code\u003e properties on the \u003ccode\u003echeckout\u003c/code\u003e action as follows (already pre-configured if you followed the previous steps):\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003e- uses: actions/checkout@v4\n\twith:\n\t\tref: ${{ github.event.pull_request.head.sha }}\n\t\tfetch-depth: 0\u003c/pre\u003e\n\n\n\n\u003cp\u003eWithout any additional effort, Qodana can post the results of your analysis on GitHub pull requests. This enables contributors to react quickly to potential bugs and quality degradation. At the same time, it gives repository owners more confidence when it comes to merging pull requests by providing a summary in comments:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"923\" height=\"442\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-46.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis analysis report is updated as more commits are pushed to the branch.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you prefer not to post any updates on pull requests, you can opt out via the \u003ccode\u003epost-pr-comment \u003c/code\u003eproperty:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003e- name: \u0026#39;Qodana Scan\u0026#39;\n  uses: JetBrains/qodana-action@v2024.3\n  with:\n    post-pr-comment: false\u003c/pre\u003e\n\n\n\n\u003ch2 id=\"uploading-qodana-results-as-artifacts\"\u003e\u003cstrong\u003eUploading Qodana results as artifacts\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eBy default, Qodana will upload analysis results only to Qodana Cloud. Under certain circumstances, you might also want to upload them as artifacts. This could be to update the \u003ccode\u003eqodana.sarif.json\u003c/code\u003e baseline file by simply downloading and replacing it in your repository or allow contributors to investigate a report directly in their IDE without having to link the project (which is also possible in our\u003ca href=\"https://blog.jetbrains.com/qodana/2023/11/visual-studio-code-analysis/\"\u003e Visual Studio Code\u003c/a\u003e extension):\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1248\" height=\"566\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-47.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn order to opt into uploading the Qodana report as an artifact, you can use the \u003ccode\u003eupload-result\u003c/code\u003e and \u003ccode\u003eartifact-name\u003c/code\u003e properties:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003e- name: \u0026#39;Qodana Scan\u0026#39;\n  uses: JetBrains/qodana-action@v2024.3\n  with:\n    upload-result: ${{ github.ref_name == \u0026#39;main\u0026#39; }}\n    artifact-name: qodana-report\u003c/pre\u003e\n\n\n\n\u003ch2 id=\"adding-quick-fixes-in-your-worflow-run\"\u003e\u003cstrong\u003eAdding Quick Fixes in your worflow run\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eAnother powerful feature of Qodana is\u003ca href=\"https://www.jetbrains.com/help/qodana/quick-fix.html\" target=\"_blank\" rel=\"noopener\"\u003e quick fixes\u003c/a\u003e. Jetbrains and the community have developed them for years and you can enable them in your codebase through Qodana. This can be done with any paid linter by adding this configuration to your workflow file:\u003c/p\u003e\n\n\n\n\u003cpre data-enlighter-language=\"yaml\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"\u003e- name: \u0026#39;Qodana Scan\u0026#39;\n  uses: JetBrains/qodana-action@v2024.3\n  with:\n    args: --apply-fixes\n    push-fixes: \u0026#39;branch\u0026#39;\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this configuration, after Qodana runs, it will push fixes directly into your branch, without any additional input. If you want to be on the safe side and first review the fixes, then you can change the \u003ccode\u003epush-fixes\u003c/code\u003e input argument to ‘\u003ccode\u003epull-request\u003c/code\u003e‘ and Qodana will open the pull request suggesting fixes in the analyzed branch!\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example, here is how one of the quick-fixes looks after the analysis of\u003ca href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"noopener\"\u003e Glide\u003c/a\u003e – a popular Android library for image loading.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1486\" height=\"630\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-48.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"adding-a-qodana-status-badge\"\u003e\u003cstrong\u003eAdding a Qodana status badge\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eAfter integrating Qodana into your repository, what could be better than adding a cool badge to show that it’s in good shape? Just head over to one of the workflow runs and grab it from the menu in the upper right-hand corner:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"3010\" height=\"1646\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/image-49.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3 id=\"try-qodana-for-git-hub\"\u003e\u003cstrong\u003eTry Qodana for GitHub\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe Qodana team has improved Github integration, allowing maintainers and contributors to react to any issue fast, and improving the code quality and security of the your products. The experience is not limited to JetBrains IDE users – anyone can benefit from issues displayed in the Github UI and reports exported to their \u003ca href=\"https://blog.jetbrains.com/qodana/2023/11/visual-studio-code-analysis/\"\u003eVisual Studio Code\u003c/a\u003e too. Get Qodana Cloud or Self-Hosted for your team, and give it a try. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Try Qodana Cloud\" href=\"https://qodana.cloud/\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://qodana.cloud/\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eTry Qodana Cloud\u003c/a\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Qodana Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": null,
  "modifiedTime": null
}
