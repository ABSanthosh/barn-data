{
  "id": "6f47ed9b-46bd-42a5-8e1b-46fcc7b0c95a",
  "title": "Google Pay inside sandboxed iframe for PCI DSS v4 compliance",
  "link": "https://developers.googleblog.com/en/google-pay-inside-sandboxed-iframe-for-pci-dss-v4-compliance/",
  "description": "Use a sandboxed iframe to implement Google Pay on checkout pages, which helps comply with PCI DSS v4 requirements by isolating scripts. Shopify successfully implemented this method and passed the PCI DSS v4 audit.",
  "author": "",
  "published": "",
  "source": "http://feeds.feedburner.com/GDBcode",
  "categories": null,
  "byline": "Dominik Mengelt, Matthew Class",
  "length": 3310,
  "excerpt": "Use a sandboxed iframe to implement Google Pay on checkout pages, which helps comply with PCI DSS v4 requirements by isolating scripts. Shopify successfully implemented this method and passed the PCI DSS v4 audit.",
  "siteName": "",
  "favicon": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/meta/apple-touch-icon.png",
  "text": "If you are developing or maintaining a checkout page you might come across PCI DSS v4 which includes the following requirement under 6.4.3:All payment page scripts that are loaded and executed in the consumer’s browser are managed as follows:- A method is implemented to confirm that each script is authorized.- A method is implemented to assure the integrity of each script.- An inventory of all scripts is maintained with written business or technical justification as to why each is necessary.One way to comply with this requirement is to use a technique like Subresource Integrity (SRI). However, the Google Pay JavaScript (pay.js) build and release process does not allow for a long-lived, stable hash required by techniques like SRI.Using a sandboxed iframeUsing a sandboxed iframe satisfies any concerns with compliance since scripts within the iFrame will not have access to the parent DOM. See the following illustration for an example: \u003ciframe src=\"https://cdn.somewhereelse.com\" allow=\"payment\" sandbox=\"allow-scripts allow-popups allow-same-origin allow-forms\"\u003e \u003c/iframe\u003e HTML Copied In this case the domain “cdn.somewhereelse.com” would load Google Pay’s pay.js JavaScript file. After a successful transaction, the inner iframe can communicate with the parent page through mechanisms like window.postMessage() if needed.In order for Google Pay to work in all browsers we need the following 4 sandbox attribute values in addition to allow=”payment”:allow-scriptsTo allow the iframe to execute scripts (pay.js as an example)allow-popupsAllows the embedded page to create 'child browsing contexts'. In practice, this flag enables the embedded iframe to open new tabs and windows when the user clicks a link.allow-same-originIf not set, fails on various occasions for browsers. If set, the iframe has access to the parents storage and cookies.allow-formsAllows forms such as the Google Pay login to submit the data.See this test page to see the various iframe sandbox values in action.Shopify successfully certified for PCI DSS v4Google Pay partnered with Shopify to implement the above solution. Shopify was able to successfully pass the PCI DSS v4 audit by using a sandboxed iframe to display the Google Pay button. Here is what Shopify has to say:We’ve built Shopify Checkout in such a way that Google Pay code executes in a secure sandboxed environment, allowing us to maintain the integrity of our checkout and comply with PCI DSS V4 requirements.– Ilya Grigorik, Distinguished Engineer at ShopifyFor more information on how Shopify built their checkout solution using sandboxed iframes, their “Powering Shopify’s High-Performance, PCI DSS v4 Compliant Checkout with Sandboxing” blog post has the insights.ConclusionWrapping your Google Pay integration in a sandboxed iframe can help you to comply with PCI DSS v4 requirements. For more assistance with your implementation, sign in to the Google Pay \u0026 Wallet Console to create a support ticket. In addition, you can join the developer community in the #payments channel on Discord.Follow @GooglePayDevs on X for future updates. If you have questions, tag @GooglePayDevs and include #AskGooglePayDevs in your tweets.",
  "image": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/G-Pay-feature.2e16d0ba.fill-1200x600.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n          \n\n\u003cdiv\u003e\n    \u003cp data-block-key=\"clk02\"\u003eIf you are developing or maintaining a checkout page you might come across \u003ca href=\"https://docs-prv.pcisecuritystandards.org/PCI%20DSS/Standard/PCI-DSS-v4_0_1.pdf\"\u003ePCI DSS v4\u003c/a\u003e which includes the following requirement under 6.4.3:\u003c/p\u003e\u003cblockquote data-block-key=\"3kcmt\"\u003e\u003ci\u003e\u003csup\u003eAll payment page scripts that are loaded and executed in the consumer’s browser are managed as follows:\u003cbr/\u003e- A method is implemented to confirm that each script is authorized.\u003cbr/\u003e- A method is implemented to assure the integrity of each script.\u003cbr/\u003e- An inventory of all scripts is maintained with written business or technical justification as to why each is necessary.\u003c/sup\u003e\u003c/i\u003e\u003c/blockquote\u003e\u003cp data-block-key=\"11hdp\"\u003eOne way to comply with this requirement is to use a technique like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\"\u003eSubresource Integrity (SRI)\u003c/a\u003e. However, the Google Pay JavaScript (pay.js) build and release process does not allow for a long-lived, stable hash required by techniques like SRI.\u003c/p\u003e\u003ch2 data-block-key=\"1bjgu\" id=\"using-a-sandboxed-iframe\"\u003e\u003cb\u003e\u003cbr/\u003e\u003c/b\u003eUsing a sandboxed iframe\u003c/h2\u003e\u003cp data-block-key=\"9msbo\"\u003eUsing a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#sandbox\"\u003esandboxed iframe\u003c/a\u003e satisfies any concerns with compliance since scripts within the iFrame will not have access to the parent DOM. See the following illustration for an example:\u003c/p\u003e\n\u003c/div\u003e   \n\n\n    \n    \u003cdiv\u003e\n        \u003cp\u003e\u003cimg src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/image2_yuqehlR.original.png\" alt=\"sandboxed iframe\"/\u003e\n            \n            \n        \u003c/p\u003e\n    \u003c/div\u003e\n  \u003cdiv\u003e\n    \u003cpre\u003e\u003ccode\u003e\u0026lt;iframe\n  src=\u0026#34;https://cdn.somewhereelse.com\u0026#34;\n  allow=\u0026#34;payment\u0026#34;\n  sandbox=\u0026#34;allow-scripts allow-popups allow-same-origin allow-forms\u0026#34;\u0026gt;\n\u0026lt;/iframe\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n    \u003cp\u003e\n        HTML\n    \u003c/p\u003e\n    \u003cp\u003e\u003cspan\u003eCopied\u003c/span\u003e\n        \n    \u003c/p\u003e\n    \n    \n\u003c/div\u003e  \u003cdiv\u003e\n    \u003cp data-block-key=\"clk02\"\u003eIn this case the domain “cdn.somewhereelse.com” would load Google Pay’s pay.js JavaScript file. After a successful transaction, the inner iframe can communicate with the parent page through mechanisms like \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\"\u003ewindow.postMessage()\u003c/a\u003e if needed.\u003c/p\u003e\u003cp data-block-key=\"4acvc\"\u003eIn order for Google Pay to work in all browsers we need the following 4 \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/iframe#sandbox\"\u003esandbox attribute values\u003c/a\u003e in addition to \u003cb\u003e\u003ccode\u003eallow=”payment”\u003c/code\u003e\u003c/b\u003e:\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"71iov\"\u003e\u003cb\u003e\u003ccode\u003eallow-scripts\u003c/code\u003e\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"eibkv\"\u003eTo allow the iframe to execute scripts (pay.js as an example)\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"46eln\"\u003e\u003cb\u003e\u003ccode\u003eallow-popups\u003c/code\u003e\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"5dbl3\"\u003eAllows the embedded page to create \u0026#39;child browsing contexts\u0026#39;. In practice, this flag enables the embedded iframe to open new tabs and windows when the user clicks a link.\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"c3kgb\"\u003e\u003cb\u003e\u003ccode\u003eallow-same-origin\u003c/code\u003e\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"dfbou\"\u003eIf not set, fails on various occasions for browsers. If set, the iframe has access to the parents storage and cookies.\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"98v2t\"\u003e\u003cb\u003e\u003ccode\u003eallow-forms\u003c/code\u003e\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"akt25\"\u003eAllows forms such as the Google Pay login to submit the data.\u003c/p\u003e\u003cp data-block-key=\"165up\"\u003eSee \u003ca href=\"https://dmengelt.github.io/gpay-web-tester/reproducers/google-pay-sandboxed-iframe\"\u003ethis\u003c/a\u003e test page to see the various iframe sandbox values in action.\u003c/p\u003e\u003ch2 data-block-key=\"umi2k\" id=\"shopify-successfully-certified-for-pci-dss-v4\"\u003e\u003cb\u003e\u003cbr/\u003e\u003c/b\u003eShopify successfully certified for PCI DSS v4\u003c/h2\u003e\u003cp data-block-key=\"47q23\"\u003eGoogle Pay partnered with Shopify to implement the above solution. Shopify was able to successfully pass the PCI DSS v4 audit by using a sandboxed iframe to display the Google Pay button. Here is what Shopify has to say:\u003c/p\u003e\u003cblockquote data-block-key=\"eqq5o\"\u003e\u003ci\u003eWe’ve built Shopify Checkout in such a way that Google Pay code executes in a secure sandboxed environment, allowing us to maintain the integrity of our checkout and comply with PCI DSS V4 requirements.\u003c/i\u003e\u003ci\u003e\u003csup\u003e\u003cp\u003e–\u003c/p\u003e\u003c/sup\u003e\u003c/i\u003e \u003csup\u003eIlya Grigorik, Distinguished Engineer at Shopify\u003c/sup\u003e\u003c/blockquote\u003e\u003cp data-block-key=\"chppi\"\u003eFor more information on how Shopify built their checkout solution using sandboxed iframes, their \u003ca href=\"https://www.shopify.com/in/partners/blog/checkout-compliance\"\u003e“Powering Shopify’s High-Performance, PCI DSS v4 Compliant Checkout with Sandboxing”\u003c/a\u003e blog post has the insights.\u003c/p\u003e\u003ch2 data-block-key=\"p8fvt\" id=\"conclusion\"\u003e\u003cb\u003e\u003cbr/\u003e\u003c/b\u003eConclusion\u003c/h2\u003e\u003cp data-block-key=\"6so1u\"\u003eWrapping your Google Pay integration in a sandboxed iframe can help you to comply with PCI DSS v4 requirements. For more assistance with your implementation, sign in to the Google Pay \u0026amp; Wallet Console to create a support ticket. In addition, you can join the developer community in the #payments channel on \u003ca href=\"https://goo.gle/payments-dev-community\"\u003eDiscord\u003c/a\u003e.\u003c/p\u003e\u003cp data-block-key=\"aj6oa\"\u003eFollow \u003ca href=\"https://twitter.com/GooglePayDevs?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\"\u003e@GooglePayDevs\u003c/a\u003e on X for future updates. If you have questions, tag \u003ca href=\"https://twitter.com/GooglePayDevs?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\"\u003e@GooglePayDevs\u003c/a\u003e and include #AskGooglePayDevs in your tweets.\u003c/p\u003e\n\u003c/div\u003e \n      \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-06-10T00:00:00Z",
  "modifiedTime": null
}
