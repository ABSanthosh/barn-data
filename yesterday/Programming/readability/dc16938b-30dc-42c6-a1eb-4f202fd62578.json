{
  "id": "dc16938b-30dc-42c6-a1eb-4f202fd62578",
  "title": "Is Rust the Future of Programming?",
  "link": "https://blog.jetbrains.com/rust/2025/05/13/is-rust-the-future-of-programming/",
  "description": "Rust is rewriting the rules of modern software development as the fastest-growing programming language. Its unmatched performance, memory safety without garbage collection, and concurrency capabilities are capturing developers’ attention worldwide. According to our data, with 2,267,000 developers using Rust in the last 12 months and 709,000 identifying it as a primary language, Rust’s footprint in […]",
  "author": "Tatiana Parshutkina",
  "published": "Tue, 13 May 2025 12:15:19 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "news",
    "rust"
  ],
  "byline": "Ilia Afanasiev",
  "length": 16311,
  "excerpt": "Explore Rust's 2024 trends and learn how developers use Rust for high-performance, safe, and scalable software development.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Focus on what matters NewsIs Rust the Future of Programming? Rust is rewriting the rules of modern software development as the fastest-growing programming language. Its unmatched performance, memory safety without garbage collection, and concurrency capabilities are capturing developers’ attention worldwide. According to our data, with 2,267,000 developers using Rust in the last 12 months and 709,000 identifying it as a primary language, Rust’s footprint in the programming world is expanding rapidly. But what’s fueling its rise? Is it ready to replace C++? This year’s State of Developer Ecosystem Survey reveals some exciting trends: Rust is the only language to set a new usage record, with one in six Go developers considering making the switch. Join us as we break down these insights, explore the future of Rust, and uncover why developers are embracing it to tackle today’s toughest software challenges. What do you use Rust for? In 2024, while personal and side projects remained a strong use case, developers increasingly recognized Rust’s appeal in career-oriented and enterprise solutions. “The most significant change for me is the major increase in the use of Rust at work. Between 2021 and 2024, there was a 68.75% increase in the proportion of Rust developers using Rust commercially. As the number of Rust developers has itself increased, there is a compounding effect throughout the industry. What’s especially interesting to me is how rapidly Rust has been adopted by industry. According to the JetBrains Developer Survey from 2018, only 2% of developers had used Rust at all during that year. 2018 was only 6 years ago. We now have a situation where all Python and JavaScript developers are exposed to Rust through high-profile projects fueling their productivity, including uv and turbopack.  As Rust’s adoption in industry grows, it’s only logical that its usage would decrease for hobby projects. People don’t want to spend their free time using the same language they use for work.” Tim McNamara, X Author of Rust in Action, founder of Accelerant.dev How long have you been using Rust? Rust’s community remained dynamic, with a steady influx of new developers contributing to its expansion. The balance between newcomers and experienced users is good for long-term ecosystem health. “One of the things that made coming into Rust really nice was the friendly, helpful attitude of the experts. So let’s try and keep doing that as we transition to experts!” Herbert Wolverson, X Rust Trainer/Consultant at Ardan Labs Coding experience among those who use Rust for work Rust is rarely a developer’s first programming language, as most Rust professionals come from diverse coding backgrounds with substantial experience. The increase in seasoned developers adopting Rust reflected its reliability and robustness for complex systems, making it an attractive option for experienced professionals transitioning from other languages. “Rust is getting easier – you can go ages without ever seeing a lifetime. I’d still not recommend it as a “first-ever” language for most – but I’d replace C and C++ first language classes with it. Rust’s syntax is still a deterrent when you first run into it, but everyone I’ve talked to who has stuck with it past the “wow, this is different” phase has grown to like most of it. One of Rust’s big strengths is that it’s multi-paradigm, so everyone can feel at home.” Herbert Wolverson, X Rust Trainer/Consultant at Ardan Labs Top 10 industry segments among those who use Rust for work Rust is thriving across several high-demand, innovation-driven sectors such as cloud computing, data analysis, AI, and embedded systems. Its adoption in areas requiring high performance and system reliability reflects the language’s strengths. “Rust is the dark horse of the AI race. It isn’t the language chosen by researchers and data scientists, but it powers a lot of the infrastructure required to train ever-larger models.” Luca Palmieri, X Principal Engineering Consultant, Mainmatter GmbH Languages used alongside Rust among professionals The data shows that Rust is rarely used in isolation, as the share of developers working exclusively with Rust dropped dramatically in 2024. Rust is becoming increasingly integrated into multi-language environments, with Python and JavaScript/TypeScript being the most common companions in 2024. Shell scripting languages and SQL have also seen consistent adoption alongside Rust as developers manage full-stack or infrastructure-heavy projects. Interestingly, the use of low-level languages like C++ and C alongside Rust remained strong, likely due to its overlap in system-level programming domains. However, the increase in usage of Python and JavaScript/TypeScript suggested Rust’s growing role in broader application contexts beyond its traditional systems niche. “When I’m teaching “Rust for C or C++ users”, I’ve never run into a successful “drop the years of C and rewrite it all” project; fork-lift upgrades suck, even if you have an amazing target language. Expect coexistence between the two for a very long time – “if it works, don’t break it” isn’t a bad mentality; porting battle-tested code isn’t as fruitful as making sure the new code arrives with better armor!” Herbert Wolverson, X Rust Trainer/Consultant at Ardan Labs Which language did you migrate from? A significant portion of developers are not directly replacing another programming language with Rust, which suggests that many are adopting it as a complementary technology rather than a strict alternative. Among those who migrated from specific languages, C++ remained the most commonly replaced language in 2024, reflecting Rust’s positioning as a safer and more modern alternative to legacy system-level tools. Other notable mentions include Python, C, and Go, showing Rust’s ability to compete across multiple domains, from scripting to systems programming. “Rust is more and more standing on its own. I wonder: how many people are approaching Rust as their first programming language?” Luca Palmieri, X Principal Engineering Consultant, Mainmatter GmbH Which IDEs or editors do you use for Rust development? The Rust community has a clear preference for modern, lightweight IDEs and editors, with Visual Studio Code holding its position as the top choice. This is consistent with its broad popularity across industries and its support for Rust through extensions like rust-analyzer. Interestingly, RustRover, a JetBrains IDE purpose-built for Rust, debuted in 2024 and immediately gained traction within the community, reflecting a growing demand for specialized tools. Traditional options like Vim and IntelliJ IDEA Ultimate remain valuable for those who prefer customizable or full-featured IDEs. By comparison, tools like Eclipse and Sublime Text see minimal adoption, emphasizing a shift to editors and IDEs that prioritize Rust-specific features. “Features like lifetime visualization can be a lifesaver! Rust Rover was an immediate install for me because I was used to other JetBrains environments – but VS Code was a decent choice. Rust-analyzer is a pretty remarkable language server!” Herbert Wolverson, X Rust Trainer/Consultant at Ardan Labs How does Rust code interact with the other parts of your code? Rust’s strong interoperability features make it ideal for integrating with codebases written in other languages. The adoption of REST APIs leads as the most common method of integration, reflecting Rust’s use in web development and backend services. Language interoperability (via foreign functions) is also significant, signaling Rust’s frequent use alongside systems programming languages like C and C++. Emerging technologies like WebAssembly/WASI show how Rust caters to modern, portable computing needs. Meanwhile, RPC also sees adoption, particularly for distributed systems requiring high-performance communication. “Interoperability with other languages is of paramount importance for Rust adoption in the industry, especially on brownfield projects. Network, FFI, WASM – you can pick whatever fits your use case best, thus minimizing friction.” Luca Palmieri, X Principal Engineering Consultant, Mainmatter GmbH How do you usually debug your Rust code? Rust developers rely heavily on simple, practical debugging tools. A majority prefer using println! and dbg! macros, pointing to a lightweight, direct approach to tracing program behavior, especially during early development phases. UI debugging in IDEs is also widely used, reflecting the growing maturity of development tooling tailored to Rust. More traditional console-based debuggers like gdb or lldb are likely to be used by those working on low-level systems projects. Notably, only 4% of respondents avoided debugging altogether, suggesting that most developers actively rely on strong debugging practices to handle Rust’s strict compile-time guarantees. “I’m a println! debugger – I only fall back on the IDE debugger when I’m really stuck.” Herbert Wolverson, X Rust Trainer/Consultant at Ardan Labs Which profiling tools do you use for Rust, if any? Profiling remains an underutilized area in the Rust ecosystem, as 70% of developers report not using any profiling tools. Among those who do, IDE-bundled profilers are the most common, with developers showing a preference for tools that integrate tightly with development environments. Low-level profilers like perf, gprof, and Callgrind/Cachegrind see lower adoption, mostly being used by developers working on performance-critical systems projects. “Profiling remains a pain point when using Rust daily. The user experience of traditional profiling tools is far from optimal, so it’s great to see IDEs stepping in to fill the gap.” Luca Palmieri, X Principal Engineering Consultant, Mainmatter GmbH Which kinds of projects do you develop in Rust? Rust is thriving in traditional domains like systems and network programming but is increasingly branching into web, desktop applications, and newer fields like embedded systems, machine learning, and blockchain. “Each ecosystem cares about Rust for different reasons. Infrastructure savings and correctness help Rust in the Cloud-native world, portability boosts its usage for CLIs, while memory safety pushes its adoption for system programming. It is truly a general-purpose programming language.” Luca Palmieri, X Principal Engineering Consultant, Mainmatter GmbH Why did you start using Rust? Developers are drawn to Rust due to its blend of safety, performance, and the challenge of learning a modern language. Additionally, its increasing recognition as a vital language in the industry motivates career-focused adoption. “I was burned out on a C++ project that just wouldn’t work right, and wanted to see what the cool kids were doing!” Herbert Wolverson, X Rust Trainer/Consultant at Ardan Labs Which of the following sources did you use to learn Rust? Due to Rust’s complexity, its official documentation is the cornerstone of learning the language, often complemented by books and other online resources. The absence of widely available formal or employer-provided training suggests that Rust’s adoption has been largely self-directed and community-driven. Read our How to Learn Rust blog post to help you get started. “One thing is certain – there’s no shortage of learning resources to get started with Rust! We don’t yet have the same abundance for intermediate and advanced topics, but things are improving every year.” Luca Palmieri, X Principal Engineering Consultant, Mainmatter GmbH Rust’s evolution in 2024 demonstrates its growing role as a foundational language for modern software development. From its increasing adoption in professional environments to its use across diverse industries like systems programming, web development, and embedded systems, Rust is no longer just a systems language – it’s a versatile, community-driven force. Developers are embracing Rust for its safety, performance, and modern features, with its adoption driven by both newcomers and seasoned professionals. While challenges such as tooling gaps and Rust’s steep learning curve remain, the language’s vibrant community and robust ecosystem continue to push it forward. Fueled by passionate developers and real-world success, Rust is shaping the future of software engineering and paving the way for safer, faster, and more scalable solutions. The future of Rust is bright, and its momentum shows no sign of slowing down. Subscribe to Rust Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/05/RR-social-BlogSocialShare-2560x1440-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/rust/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2020/07/RustRover.svg\" alt=\"Rust logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eFocus on what matters\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/rust/category/news/\"\u003eNews\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eIs Rust the Future of Programming?\u003c/h2\u003e                    \n                    \n\u003cp\u003eRust is rewriting the rules of modern software development as the fastest-growing programming language. Its unmatched performance, memory safety without garbage collection, and concurrency capabilities are capturing developers’ attention worldwide. According to \u003ca href=\"https://www.jetbrains.com/lp/devecosystem-data-playground/#by%20primary%20programming%20language\" target=\"_blank\" rel=\"noopener\"\u003eour data\u003c/a\u003e, with 2,267,000 developers using Rust in the last 12 months and 709,000 identifying it as a primary language, Rust’s footprint in the programming world is expanding rapidly. But what’s fueling its rise? Is it ready to replace C++?\u003c/p\u003e\n\n\n\n\u003cp\u003eThis year’s State of Developer Ecosystem Survey reveals some exciting trends: Rust is the only language to set a new usage record, with one in six Go developers considering making the switch. Join us as we break down these insights, explore the future of Rust, and uncover why developers are embracing it to tackle today’s toughest software challenges.\u003c/p\u003e\n\n\n\n\u003ch2\u003eWhat do you use Rust for?\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn 2024, while personal and side projects remained a strong use case, developers increasingly recognized Rust’s appeal in career-oriented and enterprise solutions.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cdiv\u003e\u003cp\u003e“The most significant change for me is the major increase in the use of Rust at work. Between 2021 and 2024, there was a 68.75% increase in the proportion of Rust developers using Rust commercially. As the number of Rust developers has itself increased, there is a compounding effect throughout the industry.\u003c/p\u003e\u003cp\u003e\n\nWhat’s especially interesting to me is how rapidly Rust has been adopted by industry. According to the JetBrains Developer Survey from 2018, only 2% of developers had used Rust at all during that year. 2018 was only 6 years ago.\u003c/p\u003e\u003cp\u003e\n\nWe now have a situation where all Python and JavaScript developers are exposed to Rust through high-profile projects fueling their productivity, including uv and turbopack. \u003c/p\u003e\u003cp\u003e\n\nAs Rust’s adoption in industry grows, it’s only logical that its usage would decrease for hobby projects. People don’t want to spend their free time using the same language they use for work.”\u003c/p\u003e\u003c/div\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Tim.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTim McNamara, \u003ca href=\"https://x.com/timclicks\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003eAuthor of Rust in Action, founder of Accelerant.dev\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1700\" height=\"1486\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/01-2x-1-2.png\" alt=\"How do you use Rust\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eHow long have you been using Rust?\u003c/h2\u003e\n\n\n\n\u003cp\u003eRust’s community remained dynamic, with a steady influx of new developers contributing to its expansion. The balance between newcomers and experienced users is good for long-term ecosystem health.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“One of the things that made coming into Rust really nice was the friendly, helpful attitude of the experts. So let’s try and keep doing that as we transition to experts!”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/herbert-wolverson-avatar.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHerbert Wolverson, \u003ca href=\"https://x.com/herberticus/\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003eRust Trainer/Consultant at Ardan Labs\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1700\" height=\"1570\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/02-2x.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eCoding experience among those who use Rust for work\u003c/h2\u003e\n\n\n\n\u003cp\u003eRust is rarely a developer’s first programming language, as most Rust professionals come from diverse coding backgrounds with substantial experience. The increase in seasoned developers adopting Rust reflected its reliability and robustness for complex systems, making it an attractive option for experienced professionals transitioning from other languages.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cdiv\u003e\u003cp\u003e“Rust is getting easier – you can go ages without ever seeing a lifetime. I’d still not recommend it as a “first-ever” language for most – but I’d replace C and C++ first language classes with it.\u003c/p\u003e\u003cp\u003e\n\nRust’s syntax is still a deterrent when you first run into it, but everyone I’ve talked to who has stuck with it past the “wow, this is different” phase has grown to like most of it.\u003c/p\u003e\u003cp\u003e\n\nOne of Rust’s big strengths is that it’s multi-paradigm, so everyone can feel at home.”\u003c/p\u003e\u003c/div\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/herbert-wolverson-avatar.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHerbert Wolverson, \u003ca href=\"https://x.com/herberticus/\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003eRust Trainer/Consultant at Ardan Labs\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1700\" height=\"2150\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/03-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eTop 10 industry segments among those who use Rust for work\u003c/h2\u003e\n\n\n\n\u003cp\u003eRust is thriving across several high-demand, innovation-driven sectors such as cloud computing, data analysis, AI, and embedded systems. Its adoption in areas requiring high performance and system reliability reflects the language’s strengths.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“Rust is the dark horse of the AI race. It isn’t the language chosen by researchers and data scientists, but it powers a lot of the infrastructure required to train ever-larger models.”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Luca-Palmieri.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLuca Palmieri, \u003ca href=\"https://x.com/algo_luca\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003ePrincipal Engineering Consultant, Mainmatter GmbH\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"2926\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/04-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eLanguages used alongside Rust among professionals\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe data shows that Rust is rarely used in isolation, as the share of developers working exclusively with Rust dropped dramatically in 2024. Rust is becoming increasingly integrated into multi-language environments, with Python and JavaScript/TypeScript being the most common companions in 2024. Shell scripting languages and SQL have also seen consistent adoption alongside Rust as developers manage full-stack or infrastructure-heavy projects.\u003c/p\u003e\n\n\n\n\u003cp\u003eInterestingly, the use of low-level languages like C++ and C alongside Rust remained strong, likely due to its overlap in system-level programming domains. However, the increase in usage of Python and JavaScript/TypeScript suggested Rust’s growing role in broader application contexts beyond its traditional systems niche.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“When I’m teaching “Rust for C or C++ users”, I’ve never run into a successful “drop the years of C and rewrite it all” project; fork-lift upgrades suck, even if you have an amazing target language. Expect coexistence between the two for a very long time – “if it works, don’t break it” isn’t a bad mentality; porting battle-tested code isn’t as fruitful as making sure the new code arrives with better armor!”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/herbert-wolverson-avatar.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHerbert Wolverson, \u003ca href=\"https://x.com/herberticus/\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003eRust Trainer/Consultant at Ardan Labs\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"1760\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/05-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eWhich language did you migrate from?\u003c/h2\u003e\n\n\n\n\u003cp\u003eA significant portion of developers are not directly replacing another programming language with Rust, which suggests that many are adopting it as a complementary technology rather than a strict alternative.\u003c/p\u003e\n\n\n\n\u003cp\u003eAmong those who migrated from specific languages, C++ remained the most commonly replaced language in 2024, reflecting Rust’s positioning as a safer and more modern alternative to legacy system-level tools. Other notable mentions include Python, C, and Go, showing Rust’s ability to compete across multiple domains, from scripting to systems programming.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“Rust is more and more standing on its own. I wonder: how many people are approaching Rust as their first programming language?”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Luca-Palmieri.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLuca Palmieri, \u003ca href=\"https://x.com/algo_luca\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003ePrincipal Engineering Consultant, Mainmatter GmbH\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"2170\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/06-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eWhich IDEs or editors do you use for Rust development?\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe Rust community has a clear preference for modern, lightweight IDEs and editors, with Visual Studio Code holding its position as the top choice. This is consistent with its broad popularity across industries and its support for Rust through extensions like rust-analyzer.\u003c/p\u003e\n\n\n\n\u003cp\u003eInterestingly, RustRover, a JetBrains IDE purpose-built for Rust, debuted in 2024 and immediately gained traction within the community, reflecting a growing demand for specialized tools. Traditional options like Vim and IntelliJ IDEA Ultimate remain valuable for those who prefer customizable or full-featured IDEs.\u003c/p\u003e\n\n\n    \n\n\n\n\n\n\n\n\u003cp\u003eBy comparison, tools like Eclipse and Sublime Text see minimal adoption, emphasizing a shift to editors and IDEs that prioritize Rust-specific features.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“Features like lifetime visualization can be a lifesaver! Rust Rover was an immediate install for me because I was used to other JetBrains environments – but VS Code was a decent choice. Rust-analyzer is a pretty remarkable language server!”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/herbert-wolverson-avatar.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHerbert Wolverson, \u003ca href=\"https://x.com/herberticus/\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003eRust Trainer/Consultant at Ardan Labs\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"1704\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/07-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eHow does Rust code interact with the other parts of your code?\u003c/h2\u003e\n\n\n\n\u003cp\u003eRust’s strong interoperability features make it ideal for integrating with codebases written in other languages. The adoption of REST APIs leads as the most common method of integration, reflecting Rust’s use in web development and backend services. Language interoperability (via foreign functions) is also significant, signaling Rust’s frequent use alongside systems programming languages like C and C++.\u003c/p\u003e\n\n\n\n\u003cp\u003eEmerging technologies like WebAssembly/WASI show how Rust caters to modern, portable computing needs. Meanwhile, RPC also sees adoption, particularly for distributed systems requiring high-performance communication.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“Interoperability with other languages is of paramount importance for Rust adoption in the industry, especially on brownfield projects. Network, FFI, WASM – you can pick whatever fits your use case best, thus minimizing friction.”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Luca-Palmieri.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLuca Palmieri, \u003ca href=\"https://x.com/algo_luca\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003ePrincipal Engineering Consultant, Mainmatter GmbH\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"1224\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/08-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eHow do you usually debug your Rust code?\u003c/h2\u003e\n\n\n\n\u003cp\u003eRust developers rely heavily on simple, practical debugging tools. A majority prefer using \u003ccode\u003eprintln!\u003c/code\u003e and \u003ccode\u003edbg!\u003c/code\u003e macros, pointing to a lightweight, direct approach to tracing program behavior, especially during early development phases. UI debugging in IDEs is also widely used, reflecting the growing maturity of development tooling tailored to Rust.\u003c/p\u003e\n\n\n\n\u003cp\u003eMore traditional console-based debuggers like \u003ccode\u003egdb\u003c/code\u003e or \u003ccode\u003elldb\u003c/code\u003e are likely to be used by those working on low-level systems projects. Notably, only 4% of respondents avoided debugging altogether, suggesting that most developers actively rely on strong debugging practices to handle Rust’s strict compile-time guarantees.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“I’m a println! debugger – I only fall back on the IDE debugger when I’m really stuck.”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/herbert-wolverson-avatar.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHerbert Wolverson, \u003ca href=\"https://x.com/herberticus/\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003eRust Trainer/Consultant at Ardan Labs\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"1140\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/09-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eWhich profiling tools do you use for Rust, if any?\u003c/h2\u003e\n\n\n\n\u003cp\u003eProfiling remains an underutilized area in the Rust ecosystem, as 70% of developers report not using any profiling tools. Among those who do, IDE-bundled profilers are the most common, with developers showing a preference for tools that integrate tightly with development environments. Low-level profilers like perf, gprof, and Callgrind/Cachegrind see lower adoption, mostly being used by developers working on performance-critical systems projects.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“Profiling remains a pain point when using Rust daily. The user experience of traditional profiling tools is far from optimal, so it’s great to see IDEs stepping in to fill the gap.”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Luca-Palmieri.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLuca Palmieri, \u003ca href=\"https://x.com/algo_luca\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003ePrincipal Engineering Consultant, Mainmatter GmbH\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"1416\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/10-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eWhich kinds of projects do you develop in Rust?\u003c/h2\u003e\n\n\n\n\u003cp\u003eRust is thriving in traditional domains like systems and network programming but is increasingly branching into web, desktop applications, and newer fields like embedded systems, machine learning, and blockchain.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cdiv\u003e\u003cp\u003e“Each ecosystem cares about Rust for different reasons. Infrastructure savings and correctness help Rust in the Cloud-native world, portability boosts its usage for CLIs, while memory safety pushes its adoption for system programming.\u003c/p\u003e\u003cp\u003e\n\nIt is truly a general-purpose programming language.”\u003c/p\u003e\u003c/div\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Luca-Palmieri.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLuca Palmieri, \u003ca href=\"https://x.com/algo_luca\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003ePrincipal Engineering Consultant, Mainmatter GmbH\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"2088\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/11-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eWhy did you start using Rust?\u003c/h2\u003e\n\n\n\n\u003cp\u003eDevelopers are drawn to Rust due to its blend of safety, performance, and the challenge of learning a modern language. Additionally, its increasing recognition as a vital language in the industry motivates career-focused adoption.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“I was burned out on a C++ project that just wouldn’t work right, and wanted to see what the cool kids were doing!”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/herbert-wolverson-avatar.jpg\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eHerbert Wolverson, \u003ca href=\"https://x.com/herberticus/\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003eRust Trainer/Consultant at Ardan Labs\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"2100\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/12-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eWhich of the following sources did you use to learn Rust?\u003c/h2\u003e\n\n\n\n\u003cp\u003eDue to Rust’s complexity, its official documentation is the cornerstone of learning the language, often complemented by books and other online resources. The absence of widely available formal or employer-provided training suggests that Rust’s adoption has been largely self-directed and community-driven. \u003cbr/\u003eRead our \u003ca href=\"https://blog.jetbrains.com/rust/2024/09/20/how-to-learn-rust/\"\u003eHow to Learn Rust\u003c/a\u003e blog post to help you get started.\u003c/p\u003e\n\n\n    \u003cdiv\u003e\n                    \u003cblockquote\u003e\u003cp\u003e“One thing is certain – there’s no shortage of learning resources to get started with Rust!\u003cbr/\u003e\nWe don’t yet have the same abundance for intermediate and advanced topics, but things are improving every year.”\u003c/p\u003e\u003c/blockquote\u003e\n            \u003cdiv\u003e\n                                    \u003cp\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Luca-Palmieri.png\" alt=\"\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eLuca Palmieri, \u003ca href=\"https://x.com/algo_luca\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/strong\u003e\n                                                                \u003cspan\u003ePrincipal Engineering Consultant, Mainmatter GmbH\u003c/span\u003e\n                                    \u003c/p\u003e\n            \u003c/div\u003e\n            \u003c/div\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1700\" height=\"1512\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/13-2x-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eRust’s evolution in 2024 demonstrates its growing role as a foundational language for modern software development. From its increasing adoption in professional environments to its use across diverse industries like systems programming, web development, and embedded systems, Rust is no longer just a systems language – it’s a versatile, community-driven force. Developers are embracing Rust for its safety, performance, and modern features, with its adoption driven by both newcomers and seasoned professionals.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhile challenges such as tooling gaps and Rust’s steep learning curve remain, the language’s vibrant community and robust ecosystem continue to push it forward. Fueled by passionate developers and real-world success, Rust is shaping the future of software engineering and paving the way for safer, faster, and more scalable solutions. The future of Rust is bright, and its momentum shows no sign of slowing down.\u003c/p\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Rust Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": null,
  "modifiedTime": null
}
