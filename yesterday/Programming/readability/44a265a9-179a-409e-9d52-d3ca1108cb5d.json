{
  "id": "44a265a9-179a-409e-9d52-d3ca1108cb5d",
  "title": "Rider 2025.2 EAP 5: Reimagined Monitoring tool window and New OpenTelemetry Plugin",
  "link": "https://blog.jetbrains.com/dotnet/2025/06/16/rider-eap-5-new-monitoring-tool-opentelemetry-plugin/",
  "description": "The Rider 2025.2 EAP 5 build has just been released, and this one brings two major productivity enhancements for .NET developers.  We’re excited to introduce the reimagined Monitoring tool window, which transforms how you identify and resolve performance issues, plus the new OpenTelemetry plugin, which brings runtime observability directly into your development environment. We can’t […]",
  "author": "Sasha Ivanova",
  "published": "Mon, 16 Jun 2025 14:56:45 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "net-tools",
    "eap",
    "news",
    "releases",
    "rider",
    "dotmemory",
    "dottrace",
    "dotultimate",
    "opentelemetry"
  ],
  "byline": "Sasha Ivanova",
  "length": 6479,
  "excerpt": "The Rider 2025.2 EAP 5 build has just been released, and this one brings two major productivity enhancements for .NET developers. We're excited to introduce the reimagined Monitoring tool win",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Essential productivity kit for .NET and game developers .NET Tools Early Access Program News Releases RiderRider 2025.2 EAP 5: Reimagined Monitoring tool window and New OpenTelemetry Plugin The Rider 2025.2 EAP 5 build has just been released, and this one brings two major productivity enhancements for .NET developers.  We’re excited to introduce the reimagined Monitoring tool window, which transforms how you identify and resolve performance issues, plus the new OpenTelemetry plugin, which brings runtime observability directly into your development environment. We can’t wait for you to download Rider 2025.2 EAP 5 and try it out, but before you do, let us tell you more about what you can expect to find inside. Reimagined Monitoring tool window The Monitoring tool window was first introduced with the release of Rider 2024.1 over a year ago. Since then, we’ve been working to enhance its capabilities. Now, it features three interactive charts and deeper integration with our bundled profiling tools dotTrace and dotMemory (both included with the dotUltimate subscription). Just as before, the tool window launches automatically when you start running or debugging your application. The key difference with this upgrade is that it automatically detects performance issues during runtime and serves as an entry point for further exploration should you want to dive deeper into the issue. Real-time performance monitoring The Monitoring tool now offers rich, interactive visualizations for key runtime metrics in the form of three stacked charts: CPU usage shows the application’s load and thread activity. Garbage collection (GC) helps identify memory pressure points with detailed activity overlays. Memory shows total memory usage. You can scroll, zoom, and select custom intervals in the chart to focus on performance windows of interest, making it easy to correlate performance issues with specific timeframes in your application’s lifecycle. Automatic inspections New intelligent detectors now automatically identify and report critical performance issues: UI Freeze detection catches UI thread hangs, providing exact timestamps and duration information to help you understand the scope of responsiveness problems.  Performance Hotspot highlights methods consuming the most execution time using dotTrace’s proven algorithms. High GC flags spikes in garbage collection frequency and severity that could impact application performance. Each inspection entry provides one-click navigation directly to the offending code, streamlining your debugging workflow and reducing the time between detection and resolution. Deep profiling without restart Thanks to tighter integration with dotTrace and dotMemory, you can now open profiler views for any issue or chart interval without rerunning your application under the profiler. This integration makes diagnosing runtime issues significantly faster and more efficient, eliminating the traditional cycle of stopping your application, configuring profiling, and restarting to gather the data you need. Limitations At this stage, the availability of various inspections varies by platform:  Windows environments enjoy full support with UI Freeze, Performance Hotspots, and High GC inspections available for .NET, .NET Framework, and MAUI applications. Please note that MAUI inspection support is exclusive to Windows x64. macOS and Linux platforms currently offer partial support, with GC pressure inspections available for .NET applications. The Analyze issue feature is not supported on these platforms: you can’t open detailed information in dotTrace for a selected inspection or a specific time range on the chart. Windows ARM64 is partially supported. On native (non-virtualized) ARM64 machines, all inspections and detailed information in dotTrace are available for ARM64 processes only. x64 and x86 applications running on ARM64 are not supported. When running Windows ARM64 via Parallels on macOS: The Performance Hotspot inspection is not available. Opening detailed information in dotTrace is not supported. OpenTelemetry plugin for observability inside the IDE Rider 2025.2 EAP 5 also introduces the OpenTelemetry plugin for Rider, bringing runtime observability directly into your development environment. This plugin is designed for observability during local development and testing, allowing you to correlate runtime behavior (logs, metrics, and traces) with code inside Rider. The plugin features comprehensive log management with direct code navigation, runtime metrics visualization, automatic architecture diagrams generated from execution traces, and zero-setup auto-instrumentation. Check out this dedicated blog post to get all the details. Feedback These EAP features represent significant steps forward in making performance analysis and runtime observability more accessible for .NET developers. At this stage, it’s extremely important for us to hear your feedback, including success stories, situations where the tools didn’t perform as expected, and suggestions for additional scenarios where these capabilities could assist you. Please send us your ideas and suggestions through our usual feedback channels: here in the comments section, over on our issue tracker, or on our social media – X (formerly Twitter) and Bluesky.  Subscribe to a monthly digest curated from the .NET Tools blog: Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/06/Social_Share_Blog_1280x720-2x-11.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/dotnet/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/Frame-1321314548.svg\" alt=\"Dotnet logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eEssential productivity kit for .NET and game developers\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/dotnet/category/net-tools/\"\u003e.NET Tools\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/dotnet/category/eap/\"\u003eEarly Access Program\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/dotnet/category/news/\"\u003eNews\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/dotnet/category/releases/\"\u003eReleases\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/dotnet/category/rider/\"\u003eRider\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eRider 2025.2 EAP 5: Reimagined Monitoring tool window and New OpenTelemetry Plugin\u003c/h2\u003e                    \n                    \n\u003cp\u003eThe Rider 2025.2 EAP 5 build has just been released, and this one brings two major productivity enhancements for .NET developers. \u003c/p\u003e\n\n\n\n\u003cp\u003eWe’re excited to introduce the reimagined \u003cem\u003eMonitoring\u003c/em\u003e tool window, which transforms how you identify and resolve performance issues, plus the new OpenTelemetry plugin, which brings runtime observability directly into your development environment.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can’t wait for you to download Rider 2025.2 EAP 5 and try it out, but before you do, let us tell you more about what you can expect to find inside.\u003c/p\u003e\n\n\n    \n\n\n\n\n\n\n\n\u003ch2\u003eReimagined \u003cem\u003eMonitoring\u003c/em\u003e tool window\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe \u003cem\u003eMonitoring\u003c/em\u003e tool window was first introduced \u003ca href=\"https://blog.jetbrains.com/dotnet/2024/02/12/monitoring-tool-in-rider-2024-1-eap-4/\"\u003ewith the release of Rider 2024.1 over a year ago\u003c/a\u003e. Since then, we’ve been working to enhance its capabilities. Now, it features three interactive charts and deeper integration with our bundled profiling tools dotTrace and dotMemory (both included with the \u003ca href=\"https://www.jetbrains.com/dotnet/\" target=\"_blank\" rel=\"noopener\"\u003edotUltimate subscription\u003c/a\u003e).\u003c/p\u003e\n\n\n\n\u003cp\u003eJust as before, the tool window launches automatically when you start running or debugging your application. The key difference with this upgrade is that it automatically detects performance issues during runtime and serves as an entry point for further exploration should you want to dive deeper into the issue.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/06/image-25.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eReal-time performance monitoring\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003cem\u003eMonitoring\u003c/em\u003e tool now offers rich, interactive visualizations for key runtime metrics in the form of three stacked charts:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCPU usage\u003c/strong\u003e shows the application’s load and thread activity.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eGarbage collection (GC)\u003c/strong\u003e helps identify memory pressure points with detailed activity overlays.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eMemory\u003c/strong\u003e shows total memory usage.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eYou can scroll, zoom, and select custom intervals in the chart to focus on performance windows of interest, making it easy to correlate performance issues with specific timeframes in your application’s lifecycle.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"1200\" height=\"1112\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/06/RD-252-MonitoringTool_Crop.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eAutomatic inspections\u003c/h3\u003e\n\n\n\n\u003cp\u003eNew intelligent detectors now automatically identify and report critical performance issues:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eUI Freeze\u003c/em\u003e detection catches UI thread hangs, providing exact timestamps and duration information to help you understand the scope of responsiveness problems. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003ePerformance Hotspot \u003c/em\u003ehighlights methods consuming the most execution time using dotTrace’s proven algorithms.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eHigh GC \u003c/em\u003eflags spikes in garbage collection frequency and severity that could impact application performance.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eEach inspection entry provides one-click navigation directly to the offending code, streamlining your debugging workflow and reducing the time between detection and resolution.\u003c/p\u003e\n\n\n\n\u003ch3\u003eDeep profiling without restart\u003c/h3\u003e\n\n\n\n\u003cp\u003eThanks to tighter integration with dotTrace and dotMemory, you can now open profiler views for any issue or chart interval without rerunning your application under the profiler. This integration makes diagnosing runtime issues significantly faster and more efficient, eliminating the traditional cycle of stopping your application, configuring profiling, and restarting to gather the data you need.\u003c/p\u003e\n\n\n\n\u003ch3\u003eLimitations\u003c/h3\u003e\n\n\n\n\u003cp\u003eAt this stage, the availability of various inspections varies by platform: \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eWindows\u003c/strong\u003e environments enjoy full support with \u003cem\u003eUI Freeze\u003c/em\u003e, \u003cem\u003ePerformance Hotspots\u003c/em\u003e, and \u003cem\u003eHigh GC \u003c/em\u003einspections available for .NET, .NET Framework, and MAUI applications. Please note that MAUI inspection support is exclusive to Windows x64.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003emacOS and Linux\u003c/strong\u003e platforms currently offer partial support, with GC pressure inspections available for .NET applications. The \u003cem\u003eAnalyze issue\u003c/em\u003e feature is not supported on these platforms: you can’t open detailed information in dotTrace for a selected inspection or a specific time range on the chart.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eWindows ARM64\u003c/strong\u003e is partially supported. On native (non-virtualized) ARM64 machines, all inspections and detailed information in dotTrace are available for ARM64 processes only. x64 and x86 applications running on ARM64 are not supported. When running Windows ARM64 via Parallels on macOS:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe \u003cem\u003ePerformance Hotspot\u003c/em\u003e inspection is not available.\u003c/li\u003e\n\n\n\n\u003cli\u003eOpening detailed information in dotTrace is not supported.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eOpenTelemetry plugin for observability inside the IDE\u003c/h2\u003e\n\n\n\n\u003cp\u003eRider 2025.2 EAP 5 also introduces the OpenTelemetry plugin for Rider, bringing runtime observability directly into your development environment. This plugin is designed for observability during local development and testing, allowing you to correlate runtime behavior (logs, metrics, and traces) with code inside Rider.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"2400\" height=\"1238\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/06/RD-252-OT-Preview.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe plugin features comprehensive log management with direct code navigation, runtime metrics visualization, automatic architecture diagrams generated from execution traces, and zero-setup auto-instrumentation.\u003c/p\u003e\n\n\n\n\u003cp\u003eCheck out \u003ca href=\"https://blog.jetbrains.com/dotnet/2025/06/16/opentelemetry-plugin-for-jetbrains-rider/\" target=\"_blank\" data-type=\"link\" data-id=\"https://blog.jetbrains.com/dotnet/2025/06/16/rider-eap-5-new-monitoring-tool-opentelemetry-plugin/\" rel=\"noreferrer noopener\"\u003ethis dedicated blog post\u003c/a\u003e to get all the details.\u003c/p\u003e\n\n\n\n\u003ch2\u003eFeedback\u003c/h2\u003e\n\n\n\n\u003cp\u003eThese EAP features represent significant steps forward in making performance analysis and runtime observability more accessible for .NET developers. At this stage, it’s extremely important for us to hear your feedback, including success stories, situations where the tools didn’t perform as expected, and suggestions for additional scenarios where these capabilities could assist you.\u003c/p\u003e\n\n\n\n\u003cp\u003ePlease send us your ideas and suggestions through our usual feedback channels: here in the comments section, over on our \u003ca href=\"https://youtrack.jetbrains.com/issues/RIDER\" target=\"_blank\" rel=\"noopener\"\u003eissue tracker\u003c/a\u003e, or on our social media – \u003ca href=\"https://x.com/JetBrainsRider\" target=\"_blank\"\u003eX (formerly Twitter)\u003c/a\u003e and \u003ca href=\"https://bsky.app/profile/jetbrains-rider.bsky.social\" target=\"_blank\" rel=\"noopener\"\u003eBluesky\u003c/a\u003e. \u003c/p\u003e\n\n\n    \n\n\n\n\n                    \n                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to a monthly digest curated from the .NET Tools blog:\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
