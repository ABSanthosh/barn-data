{
  "id": "2e752779-663d-4ff5-a7c8-a1c07a878d91",
  "title": "Qodana 2025.1 Release",
  "link": "https://blog.jetbrains.com/qodana/2025/05/qodana-2025-1-release/",
  "description": "As we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your team. Let’s take a look at some of the most exciting changes with the Qodana 2025.1 release! Try Qodana OWASP Top 10: covering even more categories […]",
  "author": "Kerry Beetge",
  "published": "Fri, 02 May 2025 12:47:29 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "releases",
    "azure-integrations",
    "eap",
    "github-integrations",
    "k2-mode",
    "qodana",
    "release"
  ],
  "byline": "Kerry Beetge",
  "length": 7784,
  "excerpt": "As we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your t",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "The code quality platform for teams ReleasesQodana 2025.1 Release As we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your team. Let’s take a look at some of the most exciting changes with the Qodana 2025.1 release! Try Qodana OWASP Top 10: covering even more categories At Qodana, we take security very seriously, and recently discussed inspections that commonly make it to the OWASP Top 10. We also know that configuring taint rules for the security analyzers can be a difficult and time-consuming task, often requiring manual effort to detect rules and correctly configure it. To simplify this process, we provide predefined taint configuration, built on various benchmarks and external providers, automatically covering common sources and sinks. Qodana now includes predefined taint rules for the most common categories of OWASP Top 10:2021 vulnerabilities: (A01, A03, A07, A08, A10). This significantly improves issue detection out of the box, minimizing user effort while ensuring broad security coverage. To address issues with the problem’s trace reconstruction, we had to rethink the way issue propagation being shown to the user. Now we’re capable of showing even more complex cases including tricky aliasing. Feedback received and addressed: for those who need deeper customization, taint rules can be configured using KTS files, allowing users to define both library and user codes as sources or sinks. This flexibility ensures that security analysis adapts to project-specific needs without unnecessary complexity. TL;DR Automatic detection for common security flaws. 700+ new configuration entries covering common frameworks and libraries. The ability to add configuration on your own: customize via KTS files to define sources and sinks. Enhanced Azure \u0026 GitLab CI/CD Integrations To improve adoption beyond GitHub, we’ve made major enhancements to Azure and GitLab integrations. These changes streamline workflows and enable better visibility into analysis results. Azure improvements In Azure, it’s now possible to reduce the time spent on PR analysis by only analyzing files that were changed using pr-mode. Also, instead of getting results in the build log, the Qodana extension provides you with a summary in the Extensions tab. This release also integrates the powerful Qodana Quick Fix feature into your analysis. This allows you to fix some problems in your code and apply them to the branch you’ve analyzed or create a pull request with suggested fixes. To use this feature you will need to update the Qodana pipeline configuration. TL;DR Get faster PR analysis by checking only modified files. Results now appear in the Extensions tab instead of cluttering the build log. Auto-apply fixes to the analyzed branch or create a PR with suggested changes. GitLab enhancements Now you can use the new Qodana component to perform analysis in your repository. This means that instead of using the linter container directly, you can configure Qodana with a predefined set of needed arguments (there is no need to understand all the steps to launch Qodana; the component does it for you). The new component supports mr-mode (the same as pr-mode in Azure) for fast analysis in merge requests, which analyses only the changed files, summary comments in merge requests and quick fixes. To use it you’ll need to include the Qodana component in your pipeline configuration file. TL;DR Use the new Qodana component for simplified configuration. It supports merge request (MR) mode to analyze only changed files. it provides summary comments and quick fixes. Pro C++ Linter [EAP] Based on demand, especially from our .NET, and Rider communities, we’re introducing Qodana for C/C++. This advanced linter goes beyond Clang-Tidy to detect critical issues like memory leaks, null dereferences, and uninitialized memory usage to name a few. The old community-licensed linter that was previously known under this name is now called “Qodana Community for C/C++”. Why upgrade? The new C++ paid linter for professional teams:  Includes MISRA, and Data Flow Analysis for error tracking during value propagation. Is a more powerful option than Clang-Tidy for bug detection. Has easy integration with Qodana CLI and Docker. Example of a DFA analysis inspection catching a memory leak. Would you have caught this in a normal code review? What are DFA inspections? DFA (or data flow) inspections are based on a more thorough code analysis, such as tracking possible variable states through possible execution paths. Such introspection allows DFA to catch some of the more sneaky errors in your code. For example, these inspections are capable of finding nullptr dereferences, memory leaks, out of bounds memory accesses, and more. You can try this new linter using Qodana CLI or by manually running the jetbrains/qodana-cpp docker image with a token from Qodana Cloud. Switching to Kotlin K2 Mode We’ve enabled K2 mode for qodana-jvm and qodana-jvm-community linters. This update aligns with JetBrains’ move towards K2 in IntelliJ IDEA 2025.1 and offers improved performance and stability, along with support for new Kotlin 2.1 features. Potential issues to be aware of: Third-party plugins might not support K2 yet. Some inspections are still being implemented (see details). Need to switch back?  There are a number of way to do this depending on the way linter is configured. But you could simply set the property “idea.kotlin.plugin.use.k2” to “false” in your linter configuration. View Documentation What to do next If you’re using the latest tag, you don’t need to do anything to enjoy the benefits of our new Qodana 2025.1 release. If not, please change from 2024.4 to 2025.1 to update. Users of GitHub Actions, Azure DevOps, and Circle CI can find the latest version of the extension here.With these new enhancements, you have greater potential to substantially improve your coding experience. For further information, including detailed setup instructions for each feature, please refer to our official documentation.  We’re continuously improving Qodana to provide better inspections, integrations, and security features. Stay tuned for more updates in upcoming releasesYou can also stay up to date with Qodana by joining our communities on Reddit, LinkedIn, and X. Other Qodana releases this month Insights DashboardNative ModeVisual Studio PluginSSOQodana On-Prem Lite Subscribe to Qodana Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/05/qd-social_share_blog_1280x720_en.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/qodana/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2021/07/Qodana-1.svg\" alt=\"Qodana logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eThe code quality platform for teams\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/qodana/category/releases/\"\u003eReleases\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eQodana 2025.1 Release\u003c/h2\u003e                    \n                    \n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2560\" height=\"1440\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/qd-featured_blog_1280x720_en-1.png\" alt=\"New OWASP Security Inspections, Better Azure and GitLab Integrations, Pro C++ Linter [EAP], Switching To Kotlin K2 Mode, and More!\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAs we continue improving Qodana, we’re excited to introduce a set of powerful updates that enhance performance, improve security analysis, and offer better integration opportunities for you and your team. Let’s take a look at some of the most exciting changes with the Qodana 2025.1 release!\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"Try Qodana\" href=\"https://www.jetbrains.com/qodana/buy/?billing=yearly\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://www.jetbrains.com/qodana/buy/?billing=yearly\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eTry Qodana\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eOWASP Top 10: covering even more categories\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eAt Qodana, we take security very seriously, and recently discussed inspections that \u003ca href=\"https://blog.jetbrains.com/qodana/2025/03/owasp-top-10/\"\u003ecommonly make it to the OWASP Top 10\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cp\u003eWe also know that configuring taint rules for the security analyzers can be a difficult and time-consuming task, often requiring manual effort to detect rules and correctly configure it.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo simplify this process, we provide predefined taint configuration, built on various benchmarks and external providers, automatically covering common sources and sinks. \u003c/p\u003e\n\n\n\n\u003cp\u003eQodana now includes predefined taint rules for the most common categories of OWASP Top 10:2021 vulnerabilities: (A01, A03, A07, A08, A10). This significantly improves issue detection out of the box, minimizing user effort while ensuring broad security coverage.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo address issues with the problem’s trace reconstruction, we had to rethink the way issue propagation being shown to the user. Now we’re capable of showing even more complex cases including tricky aliasing.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"1766\" height=\"836\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-50.png\" alt=\"Qodana 2025.1 Release: Taint analysis\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFeedback received and addressed: for those who need deeper customization, \u003ca href=\"https://www.jetbrains.com/help/qodana/taint-analysis.html\" target=\"_blank\" rel=\"noopener\"\u003etaint rules can be configured\u003c/a\u003e using KTS files, allowing users to define both library and user codes as sources or sinks. This flexibility ensures that security analysis adapts to project-specific needs without unnecessary complexity.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"3000\" height=\"1200\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/configuring.gif\" alt=\"Qodana 2025.1 Release: Configuring taint analysis\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch4\u003e\u003cstrong\u003eTL;DR\u003c/strong\u003e\u003c/h4\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eAutomatic detection for common security flaws.\u003c/li\u003e\n\n\n\n\u003cli\u003e700+ new configuration entries covering common frameworks and libraries.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe ability to add configuration on your own: customize via KTS files to define sources and sinks.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eEnhanced Azure \u0026amp; GitLab CI/CD Integrations\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo improve adoption beyond GitHub, we’ve made major enhancements to Azure and GitLab integrations. These changes streamline workflows and enable better visibility into analysis results.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eAzure improvements\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eIn Azure, it’s now possible to reduce the time spent on PR analysis by only analyzing files that were changed using pr-mode. Also, instead of getting results in the build log, the Qodana extension provides you with a summary in the Extensions tab. \u003c/p\u003e\n\n\n\n\u003cp\u003eThis release also integrates the powerful Qodana Quick Fix feature into your analysis. This allows you to fix some problems in your code and apply them to the branch you’ve analyzed or create a pull request with suggested fixes. To use this feature you will need to update the Qodana pipeline configuration.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eTL;DR\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eGet faster PR analysis by checking only modified files.\u003c/li\u003e\n\n\n\n\u003cli\u003eResults now appear in the Extensions tab instead of cluttering the build log.\u003c/li\u003e\n\n\n\n\u003cli\u003eAuto-apply fixes to the analyzed branch or create a PR with suggested changes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1204\" height=\"598\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-29-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1638\" height=\"463\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-52.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1612\" height=\"608\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-53.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eGitLab enhancements\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eNow you can use the new \u003ca href=\"https://gitlab.com/qodana/qodana\" target=\"_blank\" rel=\"noopener\"\u003eQodana component\u003c/a\u003e to perform analysis in your repository. This means that instead of using the linter container directly, you can configure Qodana with a predefined set of needed arguments (there is no need to understand all the steps to launch Qodana; the component does it for you). \u003c/p\u003e\n\n\n\n\u003cp\u003eThe new component supports mr-mode (the same as pr-mode in Azure) for fast analysis in merge requests, which analyses only the changed files, summary comments in merge requests and quick fixes. To use it you’ll need to include the Qodana component in your pipeline configuration file. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eTL;DR\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eUse the new\u003ca href=\"https://gitlab.com/qodana/qodana\" target=\"_blank\" rel=\"noopener\"\u003e \u003cstrong\u003eQodana component\u003c/strong\u003e\u003c/a\u003e for simplified configuration.\u003c/li\u003e\n\n\n\n\u003cli\u003eIt supports merge request (MR) mode to analyze only changed files.\u003c/li\u003e\n\n\n\n\u003cli\u003eit provides summary comments and quick fixes.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2454\" height=\"632\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-54.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1436\" height=\"1360\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-55.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"2520\" height=\"1564\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/image-56.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003ePro C++ Linter [EAP]\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eBased on demand, especially from our .NET, and Rider communities, we’re introducing Qodana for C/C++. This advanced linter goes beyond Clang-Tidy to detect critical issues like memory leaks, null dereferences, and uninitialized memory usage to name a few.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe old community-licensed linter that was previously known under this name is now called “Qodana Community for C/C++”.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eWhy upgrade?\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe new C++ paid linter for professional teams: \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eIncludes \u003ca href=\"https://misra.org.uk/\" target=\"_blank\" rel=\"noopener\"\u003eMISRA\u003c/a\u003e, and Data Flow Analysis for error tracking during value propagation.\u003c/li\u003e\n\n\n\n\u003cli\u003eIs a more powerful option than Clang-Tidy for bug detection.\u003c/li\u003e\n\n\n\n\u003cli\u003eHas easy integration with Qodana CLI and Docker.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1366\" height=\"1013\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/example.png\" alt=\"\"/\u003e\u003cfigcaption\u003eExample of a DFA analysis inspection catching a memory leak.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eWould you have caught this in a normal code review?\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1000\" height=\"652\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Screenshot-2025-03-27-at-18.56.25.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"1000\" height=\"696\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/Screenshot-2025-03-27-at-18.57.29.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch3\u003eWhat are DFA inspections?\u003c/h3\u003e\n\n\n\n\u003cp\u003eDFA (or data flow) inspections are based on a more thorough code analysis, such as tracking possible variable states through possible execution paths. Such introspection allows DFA to catch some of the more sneaky errors in your code. For example, these inspections are capable of finding \u003ccode\u003enullptr\u003c/code\u003e dereferences, memory leaks, out of bounds memory accesses, and more.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can try this new linter using Qodana CLI or by manually running the jetbrains/qodana-cpp docker image with a token from Qodana Cloud.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eSwitching to Kotlin K2 Mode\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003eWe’ve enabled K2 mode for qodana-jvm and qodana-jvm-community linters. This update aligns with JetBrains’ move towards K2 in IntelliJ IDEA 2025.1 and offers improved performance and stability, along with support for new Kotlin 2.1 features.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003ePotential issues to be aware of:\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThird-party plugins might not support K2 yet.\u003c/li\u003e\n\n\n\n\u003cli\u003eSome inspections are still being implemented (see details).\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eNeed to switch back?\u003c/strong\u003e \u003c/h3\u003e\n\n\n\n\u003cp\u003eThere are a number of way to do this depending on the way linter is configured. But you could simply set the property “idea.kotlin.plugin.use.k2” to “false” in your linter configuration.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca title=\"View Documentation\" href=\"https://www.jetbrains.com/help/qodana/new-in-2025-1.html#Kotlin+K2+Mode\" target=\"_blank\" rel=\"noopener noreferrer\" data-mce-href=\"https://www.jetbrains.com/help/qodana/new-in-2025-1.html#Kotlin+K2+Mode\" data-mce-selected=\"inline-boundary\" data-mce-=\"\"\u003e\u003ci\u003e\u003c/i\u003eView Documentation\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eWhat to do next\u003c/strong\u003e\u003c/h3\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003e\u003cbr/\u003e\u003c/strong\u003eIf you’re using the latest tag, you don’t need to do anything to enjoy the benefits of our new Qodana 2025.1 release. If not, please change from 2024.4 to 2025.1 to update. Users of GitHub Actions, Azure DevOps, and Circle CI can find the latest version of the extension \u003ca href=\"https://www.jetbrains.com/help/qodana/ci.html\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eWith these new enhancements, you have greater potential to substantially improve your coding experience. For further information, including detailed setup instructions for each feature, please refer to our official documentation. \u003c/p\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eWe’re continuously improving Qodana to provide better inspections, integrations, and security features. Stay tuned for more updates in upcoming releasesYou can also stay up to date with Qodana by joining our communities on \u003ca href=\"https://www.reddit.com/r/Qodana/\" target=\"_blank\" rel=\"noopener\"\u003eReddit\u003c/a\u003e, \u003ca href=\"https://www.linkedin.com/showcase/qodana/\" target=\"_blank\" rel=\"noopener\"\u003eLinkedIn\u003c/a\u003e, and \u003ca href=\"https://x.com/Qodana\" target=\"_blank\"\u003eX\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003eOther Qodana releases this month\u003c/h2\u003e\n\n\n\n\u003cp\u003eInsights Dashboard\u003cbr/\u003eNative Mode\u003cbr/\u003e\u003ca href=\"https://blog.jetbrains.com/qodana/2025/04/visual-studio-plugin/\"\u003eVisual Studio Plugin\u003c/a\u003e\u003cbr/\u003eSSO\u003cbr/\u003eQodana On-Prem Lite\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Qodana Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
