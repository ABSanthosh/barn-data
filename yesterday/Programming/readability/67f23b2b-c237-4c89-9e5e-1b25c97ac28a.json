{
  "id": "67f23b2b-c237-4c89-9e5e-1b25c97ac28a",
  "title": "Securing the open source supply chain: The essential role of CVEs",
  "link": "https://github.blog/security/supply-chain-security/securing-the-open-source-supply-chain-the-essential-role-of-cves/",
  "description": "Vulnerability data has grown in volume and complexity over the past decade, but open source and programs like the Github Security Lab have helped supply chain security keep pace. The post Securing the open source supply chain: The essential role of CVEs appeared first on The GitHub Blog.",
  "author": "Madison Oliver",
  "published": "Mon, 21 Oct 2024 16:00:45 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "Security",
    "Supply chain security",
    "CVE",
    "GitHub Security Lab",
    "vulnerability research"
  ],
  "byline": "Madison Oliver",
  "length": 14831,
  "excerpt": "Vulnerability data has grown in volume and complexity over the past decade, but open source and programs like the Github Security Lab have helped supply chain security keep pace.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "As security continues to shift left, developers are increasing as the first line of defense against vulnerabilities. In fact, open source developers now spend nearly 3x more time on security compared with a few years ago—which is an incredible development, considering how much the world relies on open source software. I’m Madison Oliver and I manage the team that curates the vulnerability data here within the GitHub Security Lab, where developers and security professionals come together to secure the open source software (OSS) we all rely on. At GitHub, we’re dedicated to supporting open source—including securing it. Our researchers are constantly keeping the OSS ecosystem aware of vulnerabilities by discovering and disclosing new vulnerabilities, educating the community with research, performing variant analysis for OSS projects, and curating the GitHub Advisory Database, our own vulnerability reporting database dedicated to open source. We also regularly assign and publish vulnerabilities to the broader vulnerability management ecosystem on behalf of OSS maintainers. Much of this is done through Common Vulnerabilities and Exposures (CVEs). Whether you’re contributing to open source software, maintaining a project, or just relying on open source like most developers, CVEs help keep that software secure. CVEs and the broader vulnerability landscape have grown and changed drastically in recent years, but we’ve kept pace by empowering the open source community to improve their software security through policies, products, open source solutions, and security automation tools. Let’s jump in. What is a CVE? A CVE is a unique identifier for a vulnerability published in the CVE List, a catalog of vulnerability records. MITRE, a non-profit spun out of the MIT Lincoln Laboratory, maintains the catalog and the CVE Program with the goal of identifying, defining, and cataloging publicly-disclosed cybersecurity vulnerabilities. We actively contribute back to the CVE Program through serving on working groups and the CVE Program board, providing feedback and helping ensure that this critical security program is aligned with open source developers’ needs. At GitHub, we have a unique perspective on CVEs: we not only use CVE data for our internal vulnerability management and for our Advisory Database, which feeds into Dependabot, code scanning, npm audit, and more, but also create it. Since 2019, we have managed two CVE Numbering Authorities (CNAs)—special entities allowed to assign and publish CVE IDs—where we produce CVE data, much of it provided by OSS maintainers. In 2019, we published 29 CVEs (CVE-2019-16760 was the first) and last year, we published more than 1,700. We’re not the only ones seeing an increase in vulnerability data. In fact, it’s one of the bigger industry-wide changes of the past decade, and it has implications for how we keep software secure. The double-edged sword of increased vulnerability data When the CVE Program originated in 1999, it published 321 CVE records. Last year, it published more than 28,900, increasing 460% in the past decade—and the amount is expected to continue growing. This growth means downstream consumers of vulnerability data—like yourself and our Advisory Database curation team—have more and more vulnerability data to sift through each day, which can lead to information overload. It also means increased vulnerability transparency (that is, making vulnerability information publicly available), which is fundamental to improving security across the industry. After all, you can’t address a vulnerability if you don’t even know about it. So, while this increase in data may seem overwhelming, it also means we are becoming much more aware. But we’re not just dealing with more data; we’re facing a larger variety of vulnerabilities that have a greater impact through network effect. Thankfully, better data sources and increased automation can help manage the deluge. But first, let’s better understand the problem. New vulnerability types and their widening impact through the software supply chain When a novel vulnerability type is disclosed, it very often spurs researchers to seek, and find, more examples of this new class, leading to a flood of new information. For example, an abundance of speculative execution vulnerabilities followed the Spectre and Meltdown disclosures, and, to the chagrin of many open source developers, regular expression denial-of-service (ReDoS) attacks have increased since 2021 (though they’ve been around much longer than that). We’ve also seen an increase in cloud-related vulnerability disclosures—not because the cloud is a new concept, but because disclosing vulnerabilities in cloud-related products has long been a point of contention. The prevailing reasoning against disclosing cloud vulnerabilities was to avoid generating alerts that don’t require user action to remediate. But as cloud-based technologies have become integral to modern development, the need for transparency has outweighed the perceived negatives. The CVE rules were updated this year to encourage disclosures, and major vendors like Microsoft have publicly stated that they’re making this change to support transparency, learning, safety, and resilience of critical cloud software. Beyond cloud vulnerabilities, the 2021 edition of the OWASP Top 10 also saw an increase in vulnerabilities due to broken access controls, insecure design, security misconfigurations, vulnerable or outdated components (like dependencies), and security logging and monitoring failures. Whatever the vulnerability type, new categories of vulnerabilities often require new remediation and prevention tactics that developers must stay on top to keep their project secure. When a spur of research leads to a dramatic increase in vulnerability disclosures, development teams may need to spend significant effort to validate, deduplicate, and remediate these unfamiliar vulnerabilities. This creates a huge, time-sensitive burden for those responding, during an urgent time when delays should be avoided. To complicate matters even further, these new vulnerability types don’t even need to be in your code to affect you—they can be several layers down. The open source libraries, frameworks, and other tools that your project depends on to function—its dependencies—form the foundation of its supply chain. Just like vulnerabilities in your own code, vulnerabilities in your supply chain can pose a security risk, compromising the security of your project and its users. For example, our 2020 Octoverse report found that the median JavaScript project on GitHub used just 10 open source dependencies directly. That same repository, however, can have 683 transitive dependencies. In other words, even if you only directly include 10 dependencies, those dependencies come with their own transitive dependencies that you inherit. Lacking awareness of transitive dependencies can leave you and your users unknowingly at risk, and the sheer number of transitive dependencies for the average project requires automation to scale. More security data coming straight from open source Since starting as a CNA in 2019, the open source GitHub CNA has grown so much that we are now the 5th largest CVE publisher of all time. This shows that open source maintainers—who are the source of this data—want to play a role in the security landscape. This is a big shift, and it’s a boon for open source, and everyone who relies on it. Indulge me for a brief history lesson to illustrate the degree of this change. For a significant portion of the CVE Program’s history, MITRE was the primary entity authorized to create, assign, and publish CVE IDs. While CNAs have existed since the program’s inception, their only duty until 2016 was to assign IDs. As the demands on the program grew, they led to scalability issues and data quality concerns, so the program expanded CNA duties to include curating and publishing CVE record details. Since then, the program has made significant efforts to increase the number of CNAs engaged in the program, and now has over 400 partners from 40 countries. Nowadays, more than 80% of CVE data originates directly from CNAs like ours. The explosion in CNAs has helped scale the program to better support the growing number of requests for CVEs, and almost more importantly, also means more primary sources of vulnerability data. Since CNAs must have a specific scope of coverage, as opposed to CNAs of Last Resort (CNA-LR) like MITRE, whose scope is everything else that isn’t already covered, a CNA’s scope tends to include software that it owns or is heavily invested in securing. The overwhelming benefit of this structure is that subject matter experts can control the messaging and vulnerability information shared with unique communities, leading to higher quality data and lower false positives. For us, this means a larger focus on securing open source software—and for any developer who contributes to or uses open source, that means more secure outcomes. Maintainers can ensure that they’re the primary source of vulnerability information on GitHub by leveraging repository security advisories to notify their end users and enabling private vulnerability reporting to help ensure that new vulnerabilities reach them first. Looking to level up your skills in software security? Check out the GitHub Secure Code Game developed by our Security Lab. It provides an in-repository learning experience where users can secure intentionally vulnerable code! Tackling data overload with automation Let’s return to that double-edged sword we started with: there’s more vulnerability data than ever before, which means more visibility and transparency, but also more data to sort through. The answer isn’t to reduce the amount of data. It’s to use automation to support easier curation, consumption, and prioritization of vulnerability data. Keeping track of the number of direct dependencies at scale can be burdensome, but the sheer number of transitive dependencies can be overwhelming. To keep up, software bill of materials (SBOM) formats like SPDX and CycloneDX allow users to create a machine-readable inventory of a project’s dependencies and information like versions, package identifiers, licenses, and copyright. SBOMs help reduce supply chain risks by: Providing transparency about the dependencies used by your repository. Allowing vulnerabilities to be identified early in the process. Providing insights into the security, license compliance, or quality issues that may exist in your code base. Enabling you to better comply with various data protection standards through automation. When it comes to reporting vulnerabilities, CVE Services has been extremely helpful in reducing the friction for CNAs to reserve CVE IDs and publish CVE Records by providing a self-service web interface—and that CVE data is a critical data source for us. It accounts for over 92% of the data feeding into our Advisory Database, so anything that helps ensure this information is published faster and more efficiently benefits those using the data downstream, like our team, and by proxy, developers on GitHub! At GitHub, we leverage APIs from our vulnerability data providers to ingest data for review, export our data in the machine-readable Open Source Vulnerability (OSV) format for consumption by others, and notify our users automatically through Dependabot alerts. While the increased automation around vulnerability data has allowed for easier reporting and consumption of this data, it’s also led to an increased need to automate the downstream impact for developers—finding and fixing vulnerabilities in both your own code and within your dependencies. Automated software composition analysis (SCA) tools like Dependabot help identify and mitigate security vulnerabilities in your dependencies by automatically updating your packages to the latest version or filing pull requests for security updates. Keep in mind that the coverage of SCA tools can often vary in scope—the GitHub Advisory Database and osv-scanner emphasize vulnerabilities in open source software, while grype focuses on container scanning and file systems—and ensure that their SCA solution supports the types of software in their production environment. Prioritization features in SCA tools, like Dependabot’s preset and custom auto-triage rules, can help users more efficiently manage data overload by helping determine which alerts should be addressed. Static application security testing (SAST) and SCA tools will both help you detect vulnerabilities. While SCA is geared towards addressing open source dependencies, SAST focuses more on vulnerabilities in your proprietary code. GitHub’s SAST tools like code scanning and CodeQL help find vulnerabilities in your code while Copilot Autofix simplifies vulnerability remediation by providing natural language explanations for vulnerabilities and suggesting code changes. As the vulnerability landscape continues to evolve and aspects of vulnerability management shift left, it’s critical that open source developers are empowered to engage in security. The double-edged sword of increased vulnerability data means more awareness, but requires automation to manage properly, especially when considering the wider impact that supply chain vulnerabilities can cause. At GitHub and within the Security Lab, we are committed to continuing to support and secure open source by providing tools, guidance, and educational resources for the community as software and vulnerabilities progress. Learn more Research from the Cyentia institute (inspired this blog) The GitHub Security Lab How to work with security advisories Securing your end-to-end supply chain Removing the stigma of a CVE How to mitigate OWASP vulnerabilities while staying in the flow SCA vs SAST: what are they and which one is right for you? Fixing security vulnerabilities with AI Coordinated vulnerability disclosure (CVD) for open source projects OpenSSF Guide to implementing a coordinated vulnerability disclosure process for open source projects 5 myths about CVEs The Value of Assigning CVEs Written by Madison Oliver is a vulnerability transparency advocate and senior security manager at GitHub, leading the advisory database curation team. She is passionate about vulnerability reporting, response, and disclosure, and co-chairs the relevant Open Source Security Foundation (OpenSSF) working group and serves on the CVE Program Board. Her views are enriched by her prior experience as a product incident response analyst at GitHub and as a vulnerability coordinator at the CERT Coordination Center at the Software Engineering Institute at Carnegie Mellon University.",
  "image": "https://github.blog/wp-content/uploads/2023/10/Security-DarkMode-2.png?fit=1200%2C630",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eAs security continues to \u003ca href=\"https://github.blog/enterprise-software/devsecops/secure-at-every-step-a-guide-to-devsecops-shifting-left-and-gitops/\"\u003eshift left\u003c/a\u003e, developers are increasing as the first line of defense against vulnerabilities. In fact, open source developers now spend nearly \u003ca href=\"https://explore.tidelift.com/2024-tidelift-survey\"\u003e3x more time on security\u003c/a\u003e compared with a few years ago—which is an incredible development, considering how much the world relies on open source software.\u003c/p\u003e\n\u003cp\u003eI’m \u003ca href=\"https://github.com/taladrane\"\u003eMadison Oliver\u003c/a\u003e and I manage the team that curates the vulnerability data here within the \u003ca href=\"https://securitylab.github.com/\"\u003eGitHub Security Lab\u003c/a\u003e, where developers and security professionals come together to secure the open source software (OSS) we all rely on.\u003c/p\u003e\n\u003cp\u003eAt GitHub, we’re dedicated to supporting open source—including securing it.\u003c/p\u003e\n\u003cp\u003eOur researchers are constantly keeping the OSS ecosystem aware of vulnerabilities by discovering and disclosing new vulnerabilities, educating the community with research, performing \u003ca href=\"https://github.blog/security/vulnerability-research/multi-repository-variant-analysis-a-powerful-new-way-to-perform-security-research-across-github/\"\u003evariant analysis\u003c/a\u003e for OSS projects, and curating the \u003ca href=\"https://github.com/advisories\"\u003eGitHub Advisory Database\u003c/a\u003e, our own vulnerability reporting database dedicated to open source. We also regularly assign and publish vulnerabilities to the broader vulnerability management ecosystem on behalf of OSS maintainers. Much of this is done through Common Vulnerabilities and Exposures (CVEs).\u003c/p\u003e\n\u003cp\u003eWhether you’re contributing to open source software, maintaining a project, or just relying on open source like most developers, CVEs help keep that software secure. CVEs and the broader vulnerability landscape have grown and changed drastically in recent years, but we’ve kept pace by empowering the open source community to improve their software security through policies, products, open source solutions, and security automation tools.\u003c/p\u003e\n\u003cp\u003eLet’s jump in.\u003c/p\u003e\n\u003ch2 id=\"what-is-a-cve\"\u003eWhat is a CVE?\u003ca href=\"#what-is-a-cve\" aria-label=\"What is a CVE?\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eA \u003ca href=\"https://www.cve.org/ResourcesSupport/Glossary?activeTerm=glossaryCVEID\"\u003eCVE\u003c/a\u003e is a unique identifier for a vulnerability published in the \u003ca href=\"https://cve.mitre.org/cve/search_cve_list.html\"\u003eCVE List\u003c/a\u003e, a catalog of vulnerability records. \u003ca href=\"https://www.mitre.org/\"\u003eMITRE\u003c/a\u003e, a non-profit spun out of the MIT Lincoln Laboratory, maintains the catalog and the \u003ca href=\"https://github.com/CVEProject\"\u003eCVE Program\u003c/a\u003e with the goal of identifying, defining, and cataloging publicly-disclosed cybersecurity vulnerabilities. We actively contribute back to the CVE Program through serving on working groups and \u003ca href=\"https://www.cve.org/Media/News/item/blog/2024/01/09/Madison-Oliver-GitHub-Security-Lab-CVE-Board\"\u003ethe CVE Program board\u003c/a\u003e, providing feedback and helping ensure that this critical security program is aligned with open source developers’ needs.\u003c/p\u003e\n\u003cp\u003eAt GitHub, we have a unique perspective on CVEs: we not only use CVE data for our internal vulnerability management and for our Advisory Database, which feeds into Dependabot, code scanning, npm audit, and more, but also create it. Since 2019, we have managed two CVE Numbering Authorities (\u003ca href=\"https://www.cve.org/ResourcesSupport/Glossary#glossaryCNA\"\u003eCNA\u003c/a\u003es)—special entities allowed to assign and publish CVE IDs—where we produce CVE data, much of it provided by OSS maintainers. In 2019, we published 29 CVEs (\u003ca href=\"https://www.cve.org/CVERecord?id=CVE-2019-16760\"\u003eCVE-2019-16760\u003c/a\u003e was the first) and last year, we published more than 1,700.\u003c/p\u003e\n\u003cp\u003eWe’re not the only ones seeing an increase in vulnerability data. In fact, it’s one of the bigger industry-wide changes of the past decade, and it has implications for how we keep software secure.\u003c/p\u003e\n\n\u003ch2 id=\"the-double-edged-sword-of-increased-vulnerability-data\"\u003eThe double-edged sword of increased vulnerability data\u003ca href=\"#the-double-edged-sword-of-increased-vulnerability-data\" aria-label=\"The double-edged sword of increased vulnerability data\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhen the CVE Program originated in 1999, it published 321 CVE records. Last year, it published more than 28,900, \u003cstrong\u003eincreasing 460% in the past decade\u003c/strong\u003e—and the amount is expected to continue growing.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/10/total-cves-by-year.png?w=1024\u0026amp;resize=1024%2C538\" alt=\"The graph shows the total number of CVEs published per year from 1999 to 2023. It begins with fewer than 2,500 CVEs annually, rising gradually until 2016, when it reaches around 5,000. From 2017, the number increases sharply, nearing 30,000 by 2023.\" width=\"1024\" height=\"538\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/10/total-cves-by-year.png?w=1600 1600w, https://github.blog/wp-content/uploads/2024/10/total-cves-by-year.png?w=300 300w, https://github.blog/wp-content/uploads/2024/10/total-cves-by-year.png?w=768 768w, https://github.blog/wp-content/uploads/2024/10/total-cves-by-year.png?w=1024 1024w, https://github.blog/wp-content/uploads/2024/10/total-cves-by-year.png?w=1536 1536w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis growth means downstream consumers of vulnerability data—like yourself and our Advisory Database curation team—have more and more vulnerability data to sift through each day, which can lead to information overload. It also means increased vulnerability transparency (that is, making vulnerability information publicly available), which is fundamental to improving security across the industry. After all, you can’t address a vulnerability if you don’t even know about it. So, while this increase in data may seem overwhelming, it also means we are becoming \u003cem\u003emuch\u003c/em\u003e more aware.\u003c/p\u003e\n\u003cp\u003eBut we’re not just dealing with \u003cem\u003emore\u003c/em\u003e data; we’re facing a larger variety of vulnerabilities that have a greater impact through network effect. Thankfully, better data sources and increased automation can help manage the deluge. But first, let’s better understand the problem.\u003c/p\u003e\n\u003ch2 id=\"new-vulnerability-types-and-their-widening-impact-through-the-software-supply-chain\"\u003eNew vulnerability types and their widening impact through the software supply chain\u003ca href=\"#new-vulnerability-types-and-their-widening-impact-through-the-software-supply-chain\" aria-label=\"New vulnerability types and their widening impact through the software supply chain\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eWhen a novel vulnerability type is disclosed, it very often spurs researchers to seek, and find, more examples of this new class, leading to a flood of new information. For example, an abundance of speculative execution vulnerabilities followed the \u003ca href=\"https://meltdownattack.com/\"\u003eSpectre and Meltdown\u003c/a\u003e disclosures, and, to the \u003ca href=\"https://blog.yossarian.net/2022/12/28/ReDoS-vulnerabilities-and-misaligned-incentives\"\u003echagrin\u003c/a\u003e of many open source developers, \u003ca href=\"https://github.com/search?q=repo%3ACVEProject%2Fcvelist+CWE-1333\u0026amp;type=code\u0026amp;p=1\"\u003eregular expression denial-of-service (ReDoS) attacks have increased since 2021\u003c/a\u003e (though they’ve been around \u003ca href=\"https://www.usenix.org/conference/12th-usenix-security-symposium/denial-service-through-regular-expressions\"\u003emuch longer than that\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eWe’ve also seen an increase in cloud-related vulnerability disclosures—not because the cloud \u003ca href=\"https://www.bcs.org/articles-opinion-and-research/history-of-the-cloud/\"\u003eis a new concept\u003c/a\u003e, but because disclosing vulnerabilities in cloud-related products has long been a point of contention. The prevailing reasoning against disclosing cloud vulnerabilities was to avoid generating alerts that don’t require user action to remediate. But as cloud-based technologies have become integral to modern development, the need for transparency has outweighed the perceived negatives. The \u003ca href=\"https://www.cve.org/Media/News/item/blog/2024/05/07/CNA-Rules-v4-0-Update-and-Transition\"\u003eCVE rules were updated\u003c/a\u003e this year to encourage disclosures, and major vendors like Microsoft have \u003ca href=\"https://msrc.microsoft.com/blog/2024/06/toward-greater-transparency-unveiling-cloud-service-cves/\"\u003epublicly stated\u003c/a\u003e that they’re making this change to support transparency, learning, safety, and resilience of critical cloud software.\u003c/p\u003e\n\u003cp\u003eBeyond cloud vulnerabilities, the 2021 edition of the \u003ca href=\"https://owasp.org/Top10/#whats-changed-in-the-top-10-for-2021\"\u003eOWASP Top 10\u003c/a\u003e also saw an increase in vulnerabilities due to broken access controls, insecure design, security misconfigurations, vulnerable or outdated components (like dependencies), and security logging and monitoring failures.\u003c/p\u003e\n\u003cp\u003eWhatever the vulnerability type, new categories of vulnerabilities often require new remediation and prevention tactics that developers must stay on top to keep their project secure. When a spur of research leads to a dramatic increase in vulnerability disclosures, development teams may need to spend significant effort to validate, deduplicate, and remediate these unfamiliar vulnerabilities. This creates a huge, time-sensitive burden for those responding, during an urgent time when delays should be avoided.\u003c/p\u003e\n\u003cp\u003eTo complicate matters even further, these new vulnerability types don’t even need to be in your code to affect you—they can be several layers down. The open source libraries, frameworks, and other tools that your project depends on to function—its dependencies—form the foundation of its supply chain. Just like vulnerabilities in your own code, vulnerabilities in your supply chain can pose a security risk, compromising the security of your project and its users.\u003c/p\u003e\n\n\u003cp\u003eFor example, our \u003ca href=\"https://github.blog/2022-04-28-best-practices-to-keep-your-projects-secure-on-github/\"\u003e2020 Octoverse report\u003c/a\u003e found that the median JavaScript project on GitHub used just 10 open source dependencies directly. That same repository, however, can have 683 transitive dependencies. In other words, even if you only directly include 10 dependencies, those dependencies come with their own transitive dependencies that you inherit. Lacking awareness of transitive dependencies can leave you and your users unknowingly at risk, and the sheer number of transitive dependencies for the average project requires automation to scale.\u003c/p\u003e\n\u003ch2 id=\"more-security-data-coming-straight-from-open-source\"\u003eMore security data coming straight from open source\u003ca href=\"#more-security-data-coming-straight-from-open-source\" aria-label=\"More security data coming straight from open source\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSince starting as a CNA in 2019, the open source GitHub CNA has grown so much that we are now the 5th largest CVE publisher of all time. This shows that open source maintainers—who are the source of this data—want to play a role in the security landscape. This is a big shift, and it’s a boon for open source, and everyone who relies on it.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/10/percentage-published.png?w=1024\u0026amp;resize=1024%2C538\" alt=\"The graph shows the percentage of all CVEs published by the GitHub CNA from 2019 to 2023. Starting just above 0% in 2019, the percentage rises steeply to around 5% in 2021. After a slight dip, it increases again to approximately 6.5% by 2023.\" width=\"1024\" height=\"538\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/10/percentage-published.png?w=1600 1600w, https://github.blog/wp-content/uploads/2024/10/percentage-published.png?w=300 300w, https://github.blog/wp-content/uploads/2024/10/percentage-published.png?w=768 768w, https://github.blog/wp-content/uploads/2024/10/percentage-published.png?w=1024 1024w, https://github.blog/wp-content/uploads/2024/10/percentage-published.png?w=1536 1536w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eIndulge me for a brief history lesson to illustrate the degree of this change.\u003c/p\u003e\n\u003cp\u003eFor a significant portion of the CVE Program’s history, MITRE was the primary entity authorized to create, assign, and publish CVE IDs. While CNAs have existed since the program’s inception, their only duty until 2016 was to assign IDs. As the demands on the program grew, they led to scalability issues and data quality concerns, so the program \u003ca href=\"https://cve.mitre.org/cve/cna/CNA_Rules_v1.1.pdf\"\u003eexpanded CNA duties\u003c/a\u003e to include curating and publishing CVE record details. Since then, the program has made significant efforts to increase the number of CNAs engaged in the program, and now has over 400 partners from 40 countries.\u003c/p\u003e\n\u003cp\u003eNowadays, more than 80% of CVE data originates directly from CNAs like ours. The explosion in CNAs has helped scale the program to better support the growing number of requests for CVEs, and almost more importantly, also means more primary sources of vulnerability data. Since CNAs must have a \u003cem\u003especific\u003c/em\u003e \u003ca href=\"https://www.cve.org/ResourcesSupport/Glossary?activeTerm=glossaryScope\"\u003escope of coverage\u003c/a\u003e, as opposed to \u003ca href=\"https://www.cve.org/ResourcesSupport/Glossary#glossaryCNALR\"\u003eCNAs of Last Resort (CNA-LR)\u003c/a\u003e like MITRE, whose scope is everything else that isn’t already covered, a CNA’s scope tends to include software that it \u003cem\u003eowns\u003c/em\u003e or is heavily invested in securing.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/10/percentage-assigned.png?w=1024\u0026amp;resize=1024%2C538\" alt=\"The graph compares the percentage of CVEs assigned by CNAs and CNA-LRs from 1999 to 2024. Initially, CNA-LRs assign 100% of CVEs but rapidly drop to 50% in 2017. From 2017 onward, the percentage of CVEs assigned by CNAs increases steadily, surpassing 80% by 2024.\" width=\"1024\" height=\"538\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/10/percentage-assigned.png?w=1600 1600w, https://github.blog/wp-content/uploads/2024/10/percentage-assigned.png?w=300 300w, https://github.blog/wp-content/uploads/2024/10/percentage-assigned.png?w=768 768w, https://github.blog/wp-content/uploads/2024/10/percentage-assigned.png?w=1024 1024w, https://github.blog/wp-content/uploads/2024/10/percentage-assigned.png?w=1536 1536w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eThe overwhelming benefit of this structure is that subject matter experts can control the messaging and vulnerability information shared with unique communities, leading to higher quality data and lower false positives. For us, this means a larger focus on securing open source software—and for any developer who contributes to or uses open source, that means more secure outcomes. Maintainers can ensure that they’re the primary source of vulnerability information on GitHub by leveraging \u003ca href=\"https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/about-repository-security-advisories\"\u003erepository security advisories\u003c/a\u003e to notify their end users and enabling \u003ca href=\"https://docs.github.com/code-security/security-advisories/working-with-repository-security-advisories/configuring-private-vulnerability-reporting-for-a-repository\"\u003eprivate vulnerability reporting\u003c/a\u003e to help ensure that new vulnerabilities reach them first.\u003c/p\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eLooking to level up your skills in software security?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eCheck out the \u003ca href=\"https://github.com/skills/secure-code-game\"\u003eGitHub Secure Code Game\u003c/a\u003e developed by our Security Lab. It provides an in-repository learning experience where users can secure intentionally vulnerable code!\u003c/p\u003e\n\u003c/div\u003e\n\u003ch2 id=\"tackling-data-overload-with-automation\"\u003eTackling data overload with automation\u003ca href=\"#tackling-data-overload-with-automation\" aria-label=\"Tackling data overload with automation\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eLet’s return to that double-edged sword we started with: there’s more vulnerability data than ever before, which means more visibility and transparency, but also more data to sort through. The answer isn’t to reduce the amount of data. It’s to use automation to support easier curation, consumption, and prioritization of vulnerability data.\u003c/p\u003e\n\u003cp\u003eKeeping track of the number of direct dependencies at scale can be burdensome, but the sheer number of transitive dependencies can be overwhelming. To keep up, \u003ca href=\"https://docs.github.com/code-security/supply-chain-security/understanding-your-software-supply-chain/exporting-a-software-bill-of-materials-for-your-repository\"\u003esoftware bill of materials (SBOM)\u003c/a\u003e formats like \u003ca href=\"https://spdx.dev/use/overview/\"\u003eSPDX\u003c/a\u003e and \u003ca href=\"https://cyclonedx.org/specification/overview/\"\u003eCycloneDX\u003c/a\u003e allow users to create a machine-readable inventory of a project’s dependencies and information like versions, package identifiers, licenses, and copyright. SBOMs help reduce supply chain risks by:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eProviding transparency about the dependencies used by your repository.\u003c/li\u003e\n\u003cli\u003eAllowing vulnerabilities to be identified early in the process.\u003c/li\u003e\n\u003cli\u003eProviding insights into the security, license compliance, or quality issues that may exist in your code base.\u003c/li\u003e\n\u003cli\u003eEnabling you to better comply with various data protection standards through automation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen it comes to reporting vulnerabilities, \u003ca href=\"https://www.cve.org/AllResources/CveServices\"\u003eCVE Services\u003c/a\u003e has been extremely helpful in reducing the friction for CNAs to reserve CVE IDs and publish CVE Records by providing a self-service web interface—and that CVE data is a critical data source for us. It \u003cstrong\u003eaccounts for over 92% of the data feeding into our Advisory Database\u003c/strong\u003e, so anything that helps ensure this information is published faster and more efficiently benefits those using the data downstream, like our team, and by proxy, developers on GitHub!\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/10/vulnerability-data.png?w=1024\u0026amp;resize=1024%2C538\" alt=\"The chart shows the percentage contributions of various vulnerability data feeds to the GitHub Advisory Database. CVE via NVD dominates with 92.41%, followed by other smaller contributors like Repository GHSA at 3.80% and PYPA at 1.85%, with several other sources contributing less than 1% each.\" width=\"1024\" height=\"538\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/10/vulnerability-data.png?w=1600 1600w, https://github.blog/wp-content/uploads/2024/10/vulnerability-data.png?w=300 300w, https://github.blog/wp-content/uploads/2024/10/vulnerability-data.png?w=768 768w, https://github.blog/wp-content/uploads/2024/10/vulnerability-data.png?w=1024 1024w, https://github.blog/wp-content/uploads/2024/10/vulnerability-data.png?w=1536 1536w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eAt GitHub, we leverage APIs from our vulnerability data providers to ingest data for review, export our data in the machine-readable \u003ca href=\"https://ossf.github.io/osv-schema/\"\u003eOpen Source Vulnerability (OSV) format\u003c/a\u003e for consumption by others, and notify our users automatically through \u003ca href=\"https://docs.github.com/code-security/dependabot/dependabot-alerts/about-dependabot-alerts\"\u003eDependabot alerts\u003c/a\u003e. While the increased automation around vulnerability data has allowed for easier reporting and consumption of this data, it’s also led to an increased need to automate the downstream impact for developers—finding and fixing vulnerabilities in both your own code and within your dependencies.\u003c/p\u003e\n\u003cp\u003eAutomated software composition analysis (SCA) tools like Dependabot help identify and mitigate security vulnerabilities in your dependencies by automatically \u003ca href=\"https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates\"\u003eupdating your packages to the latest version\u003c/a\u003e or \u003ca href=\"https://docs.github.com/en/code-security/dependabot/dependabot-security-updates/about-dependabot-security-updates\"\u003efiling pull requests for security updates\u003c/a\u003e. Keep in mind that the coverage of SCA tools can often vary in scope—the GitHub Advisory Database and \u003ca href=\"https://github.com/google/osv-scanner\"\u003eosv-scanner\u003c/a\u003e emphasize vulnerabilities in open source software, while \u003ca href=\"https://github.com/anchore/grype\"\u003egrype\u003c/a\u003e focuses on container scanning and file systems—and ensure that their SCA solution supports the types of software in their production environment. Prioritization features in SCA tools, like \u003ca href=\"https://docs.github.com/code-security/dependabot/dependabot-auto-triage-rules/about-dependabot-auto-triage-rules\"\u003eDependabot’s preset and custom auto-triage rules\u003c/a\u003e, can help users more efficiently manage data overload by helping determine which alerts should be addressed.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.blog/enterprise-software/secure-software-development/the-architecture-of-sast-tools-an-explainer-for-developers/\"\u003eStatic application security testing (SAST)\u003c/a\u003e and SCA tools will both help you detect vulnerabilities. While SCA is geared towards addressing open source dependencies, \u003ca href=\"https://github.blog/security/supply-chain-security/sca-vs-sast-what-are-they-and-which-one-is-right-for-you/\"\u003eSAST\u003c/a\u003e focuses more on vulnerabilities in your proprietary code. GitHub’s SAST tools like \u003ca href=\"https://docs.github.com/code-security/code-scanning/introduction-to-code-scanning/about-code-scanning\"\u003ecode scanning\u003c/a\u003e and \u003ca href=\"https://codeql.github.com/\"\u003eCodeQL\u003c/a\u003e help \u003ca href=\"http://gh.io/codeql-wall-of-fame\"\u003efind vulnerabilities in your code\u003c/a\u003e while \u003ca href=\"https://github.blog/news-insights/product-news/secure-code-more-than-three-times-faster-with-copilot-autofix/\"\u003eCopilot Autofix\u003c/a\u003e simplifies vulnerability remediation by providing natural language explanations for vulnerabilities and suggesting code changes.\u003c/p\u003e\n\u003cp\u003eAs the vulnerability landscape continues to evolve and aspects of vulnerability management shift left, it’s critical that open source developers are empowered to engage in security. The double-edged sword of increased vulnerability data means more awareness, but requires automation to manage properly, especially when considering the wider impact that supply chain vulnerabilities can cause. At GitHub and within the Security Lab, we are committed to continuing to support and secure open source by providing tools, guidance, and \u003ca href=\"https://securitylab.github.com/open-source/\"\u003eeducational resources\u003c/a\u003e for the community as software and vulnerabilities progress.\u003c/p\u003e\n\u003ch3 id=\"learn-more\"\u003eLearn more\u003ca href=\"#learn-more\" aria-label=\"Learn more\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.f5.com/labs/articles/threat-intelligence/the-evolving-cve-landscape\"\u003eResearch from the Cyentia institute\u003c/a\u003e (inspired this blog)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://securitylab.github.com/\"\u003eThe GitHub Security Lab\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/code-security/security-advisories\"\u003eHow to work with security advisories\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.github.com/code-security/supply-chain-security/end-to-end-supply-chain/end-to-end-supply-chain-overview\"\u003eSecuring your end-to-end supply chain\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.blog/2022-04-22-removing-the-stigma-of-a-cve/\"\u003eRemoving the stigma of a CVE\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.blog/2023-02-06-how-to-mitigate-owasp-vulnerabilities-while-staying-in-the-flow/\"\u003eHow to mitigate OWASP vulnerabilities while staying in the flow\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.blog/security/supply-chain-security/sca-vs-sast-what-are-they-and-which-one-is-right-for-you/\"\u003eSCA vs SAST: what are they and which one is right for you?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.blog/engineering/fixing-security-vulnerabilities-with-ai/\"\u003eFixing security vulnerabilities with AI \u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.blog/2022-02-09-coordinated-vulnerability-disclosure-cvd-open-source-projects/\"\u003eCoordinated vulnerability disclosure (CVD) for open source projects\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ossf/oss-vulnerability-guide/blob/main/maintainer-guide.md\"\u003eOpenSSF Guide to implementing a coordinated vulnerability disclosure process for open source projects\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cve.org/Media/News/item/news/2022/12/06/5-Myths-about-CVEs-by\"\u003e5 myths about CVEs\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cve.org/Media/News/item/podcast/2022/06/22/The-Value-of-Assigning-CVEs\"\u003eThe Value of Assigning CVEs\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/63199643?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/63199643?v=4\u0026amp;s=200\" alt=\"Madison Oliver\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eMadison Oliver is a vulnerability transparency advocate and senior security manager at GitHub, leading the advisory database curation team. She is passionate about vulnerability reporting, response, and disclosure, and co-chairs the relevant Open Source Security Foundation (OpenSSF) working group and serves on the CVE Program Board. Her views are enriched by her prior experience as a product incident response analyst at GitHub and as a vulnerability coordinator at the CERT Coordination Center at the Software Engineering Institute at Carnegie Mellon University.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2024-10-21T16:00:45Z",
  "modifiedTime": "2024-10-21T14:02:26Z"
}
