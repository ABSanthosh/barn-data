{
  "id": "6c58de37-c848-4256-bcbf-4df836c65d3c",
  "title": "OTP Authentication in Laravel \u0026 Vue.js for Secure Transactions",
  "link": "https://stackabuse.com/otp-authentication-in-laravel-vue-js-for-secure-transactions/",
  "description": "Introduction In today’s digital world, security is paramount, especially when dealing with sensitive data like user authentication and financial transactions. One of the most effective ways to enhance security is by implementing One-Time Password (OTP) authentication. This article explores how to implement OTP authentication in a Laravel backend with",
  "author": "Ojekudo Oghenemaro Emmanuel",
  "published": "Sun, 20 Apr 2025 08:04:07 GMT",
  "source": "https://stackabuse.com/rss/",
  "categories": [
    "javascript",
    "security",
    "vue"
  ],
  "byline": "Ojekudo Oghenemaro Emmanuel",
  "length": 12320,
  "excerpt": "In today’s digital world, security is paramount, especially when dealing with sensitive data like user authentication and financial transactions. One of the mo...",
  "siteName": "Stack Abuse",
  "favicon": "",
  "text": "Introduction In today’s digital world, security is paramount, especially when dealing with sensitive data like user authentication and financial transactions. One of the most effective ways to enhance security is by implementing One-Time Password (OTP) authentication. This article explores how to implement OTP authentication in a Laravel backend with a Vue.js frontend, ensuring secure transactions. Why Use OTP Authentication? OTP authentication provides an extra layer of security beyond traditional username and password authentication. Some key benefits include: Prevention of Unauthorized Access: Even if login credentials are compromised, an attacker cannot log in without the OTP. Enhanced Security for Transactions: OTPs can be used to confirm high-value transactions, preventing fraud. Temporary Validity: Since OTPs expire after a short period, they reduce the risk of reuse by attackers. Prerequisites Before getting started, ensure you have the following: Laravel 8 or later installed Vue.js configured in your project A mail or SMS service provider for sending OTPs (e.g., Twilio, Mailtrap) Basic understanding of Laravel and Vue.js In this guide, we’ll implement OTP authentication in a Laravel (backend) and Vue.js (frontend) application. We’ll cover: Setting up Laravel and Vue (frontend) from scratch Setting up OTP generation and validation in Laravel Creating a Vue.js component for OTP input Integrating OTP authentication into login workflows Enhancing security with best practices By the end, you’ll have a fully functional OTP authentication system ready to enhance the security of your fintech or web application. Setting Up Laravel for OTP Authentication Step 1: Install Laravel and Required Packages If you haven't already set up a Laravel project, create a new one: composer create-project \"laravel/laravel:^10.0\" example-app Next, install the Laravel Breeze package for frontend scaffolding: composer require laravel/breeze --dev After composer has finished installing, run the following command to select the framework you want to use—the Vue configuration: php artisan breeze:install You’ll see a prompt with the available stacks: Which Breeze stack would you like to install? - Vue with Inertia Would you like any optional features? - None Which testing framework do you prefer? - PHPUnit Breeze will automatically install the necessary packages for your Laravel Vue project. You should see: INFO Breeze scaffolding installed successfully. Now run the npm command to build your frontend assets: npm run dev Then, open another terminal and launch your Laravel app: php artisan serve Step 2: Setting up OTP generation and validation in Laravel We'll use a mail testing platform called Mailtrap to send and receive mail locally. If you don’t have a mail testing service set up, sign up at Mailtrap to get your SMTP credentials and add them to your .env file: MAIL_MAILER=smtp MAIL_HOST=sandbox.smtp.mailtrap.io MAIL_PORT=2525 MAIL_USERNAME=1780944422200a MAIL_PASSWORD=a8250ee453323b MAIL_ENCRYPTION=tls [email protected] MAIL_FROM_NAME=\"${APP_NAME}\" To send OTPs to users, we’ll use Laravel’s built-in mail services. Create a mail class and controller: php artisan make:mail OtpMail php artisan make:controller OtpController Then modify the OtpMail class: Check out our hands-on, practical guide to learning Git, with best-practices, industry-accepted standards, and included cheat sheet. Stop Googling Git commands and actually learn it!\u003c?php namespace App\\Mail; use Illuminate\\Bus\\Queueable; use Illuminate\\Contracts\\Queue\\ShouldQueue; use Illuminate\\Mail\\Mailable; use Illuminate\\Mail\\Mailables\\Content; use Illuminate\\Mail\\Mailables\\Envelope; use Illuminate\\Queue\\SerializesModels; class OtpMail extends Mailable { use Queueable, SerializesModels; public $otp; /** * Create a new message instance. */ public function __construct($otp) { $this-\u003eotp = $otp; } /** * Build the email message. */ public function build() { return $this-\u003esubject('Your OTP Code') -\u003eview('emails.otp') -\u003ewith(['otp' =\u003e $this-\u003eotp]); } /** * Get the message envelope. */ public function envelope(): Envelope { return new Envelope( subject: 'OTP Mail', ); } } Create a Blade view in resources/views/emails/otp.blade.php: \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eYour OTP Code\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eHello,\u003c/p\u003e \u003cp\u003eYour One-Time Password (OTP) is: \u003cstrong\u003e{{ $otp }}\u003c/strong\u003e\u003c/p\u003e \u003cp\u003eThis code is valid for 10 minutes. Do not share it with anyone.\u003c/p\u003e \u003cp\u003eThank you!\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e Step 3: Creating a Vue.js component for OTP input Normally, after login or registration, users are redirected to the dashboard. In this tutorial, we add an extra security step that validates users with an OTP before granting dashboard access. Create two Vue files: Request.vue: requests the OTP Verify.vue: inputs the OTP for verification Now we create the routes for the purpose of return the View and the functionality of creating OTP codes, storing OTP codes, sending OTP codes through the mail class, we head to our web.php file: Route::middleware('auth')-\u003egroup(function () { Route::get('/request', [OtpController::class, 'create'])-\u003ename('request'); Route::post('/store-request', [OtpController::class, 'store'])-\u003ename('send.otp.request'); Route::get('/verify', [OtpController::class, 'verify'])-\u003ename('verify'); Route::post('/verify-request', [OtpController::class, 'verify_request'])-\u003ename('verify.otp.request'); }); Putting all of this code in the OTP controller returns the View for our request.vue and verify.vue file and the functionality of creating OTP codes, storing OTP codes, sending OTP codes through the mail class and verifying OTP codes, we head to our web.php file to set up the routes. public function create(Request $request) { return Inertia::render('Request', [ 'email' =\u003e $request-\u003equery('email', ''), ]); } public function store(Request $request) { $request-\u003evalidate([ 'email' =\u003e 'required|email|exists:users,email', ]); $otp = rand(100000, 999999); Cache::put('otp_' . $request-\u003eemail, $otp, now()-\u003eaddMinutes(10)); Log::info(\"OTP generated for \" . $request-\u003eemail . \": \" . $otp); Mail::to($request-\u003eemail)-\u003esend(new OtpMail($otp)); return redirect()-\u003eroute('verify', ['email' =\u003e $request-\u003eemail]); } public function verify(Request $request) { return Inertia::render('Verify', [ 'email' =\u003e $request-\u003equery('email'), ]); } public function verify_request(Request $request) { $request-\u003evalidate([ 'email' =\u003e 'required|email|exists:users,email', 'otp' =\u003e 'required|digits:6', ]); $cachedOtp = Cache::get('otp_' . $request-\u003eemail); Log::info(\"OTP entered: \" . $request-\u003eotp); Log::info(\"OTP stored in cache: \" . ($cachedOtp ?? 'No OTP found')); if (!$cachedOtp) { return back()-\u003ewithErrors(['otp' =\u003e 'OTP has expired. Please request a new one.']); } if ((string) $cachedOtp !== (string) $request-\u003eotp) { return back()-\u003ewithErrors(['otp' =\u003e 'Invalid OTP. Please try again.']); } Cache::forget('otp_' . $request-\u003eemail); $user = User::where('email', $request-\u003eemail)-\u003efirst(); if ($user) { $user-\u003eemail_verified_at = now(); $user-\u003esave(); } return redirect()-\u003eroute('dashboard')-\u003ewith('success', 'OTP Verified Successfully!'); } Having set all this code, we return to the request.vue file to set it up. \u003cscript setup\u003e import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue'; import InputError from '@/Components/InputError.vue'; import InputLabel from '@/Components/InputLabel.vue'; import PrimaryButton from '@/Components/PrimaryButton.vue'; import TextInput from '@/Components/TextInput.vue'; import { Head, useForm } from '@inertiajs/vue3'; const props = defineProps({ email: { type: String, required: true, }, }); const form = useForm({ email: props.email, }); const submit = () =\u003e { form.post(route('send.otp.request'), { onSuccess: () =\u003e { alert(\"OTP has been sent to your email!\"); form.get(route('verify'), { email: form.email }); // Redirecting to OTP verification }, }); }; \u003c/script\u003e \u003ctemplate\u003e \u003cHead title=\"Request OTP\" /\u003e \u003cAuthenticatedLayout\u003e \u003cform @submit.prevent=\"submit\"\u003e \u003cdiv\u003e \u003cInputLabel for=\"email\" value=\"Email\" /\u003e \u003cTextInput id=\"email\" type=\"email\" class=\"mt-1 block w-full\" v-model=\"form.email\" required autofocus /\u003e \u003cInputError class=\"mt-2\" :message=\"form.errors.email\" /\u003e \u003c/div\u003e \u003cdiv class=\"mt-4 flex items-center justify-end\"\u003e \u003cPrimaryButton :class=\"{ 'opacity-25': form.processing }\" :disabled=\"form.processing\"\u003e Request OTP \u003c/PrimaryButton\u003e \u003c/div\u003e \u003c/form\u003e \u003c/AuthenticatedLayout\u003e \u003c/template\u003e Having set all this code, we return to the verify.vue to set it up: \u003cscript setup\u003e import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue'; import InputError from '@/Components/InputError.vue'; import InputLabel from '@/Components/InputLabel.vue'; import PrimaryButton from '@/Components/PrimaryButton.vue'; import TextInput from '@/Components/TextInput.vue'; import { Head, useForm, usePage } from '@inertiajs/vue3'; const page = usePage(); // Get the email from the URL query params const email = page.props.email || ''; // Initialize form with email and OTP field const form = useForm({ email: email, otp: '', }); // Submit function const submit = () =\u003e { form.post(route('verify.otp.request'), { onSuccess: () =\u003e { alert(\"OTP verified successfully! Redirecting...\"); window.location.href = '/dashboard'; // Change to your desired redirect page }, onError: () =\u003e { alert(\"Invalid OTP. Please try again.\"); }, }); }; \u003c/script\u003e \u003ctemplate\u003e \u003cHead title=\"Verify OTP\" /\u003e \u003cAuthenticatedLayout\u003e \u003cform @submit.prevent=\"submit\"\u003e \u003cdiv\u003e \u003cInputLabel for=\"otp\" value=\"Enter OTP\" /\u003e \u003cTextInput id=\"otp\" type=\"text\" class=\"mt-1 block w-full\" v-model=\"form.otp\" required /\u003e \u003cInputError class=\"mt-2\" :message=\"form.errors.otp\" /\u003e \u003c/div\u003e \u003cdiv class=\"mt-4 flex items-center justify-end\"\u003e \u003cPrimaryButton :disabled=\"form.processing\"\u003e Verify OTP \u003c/PrimaryButton\u003e \u003c/div\u003e \u003c/form\u003e \u003c/AuthenticatedLayout\u003e \u003c/template\u003e Step 4: Integrating OTP authentication into login and register workflows Update the login controller: public function store(LoginRequest $request): RedirectResponse { $request-\u003eauthenticate(); $request-\u003esession()-\u003eregenerate(); return redirect()-\u003eintended(route('request', absolute: false)); } Update the registration controller: public function store(Request $request): RedirectResponse { $request-\u003evalidate([ 'name' =\u003e 'required|string|max:255', 'email' =\u003e 'required|string|lowercase|email|max:255|unique:' . User::class, 'password' =\u003e ['required', 'confirmed', Rules\\Password::defaults()], ]); $user = User::create([ 'name' =\u003e $request-\u003ename, 'email' =\u003e $request-\u003eemail, 'password' =\u003e Hash::make($request-\u003epassword), ]); event(new Registered($user)); Auth::login($user); return redirect(route('request', absolute: false)); } Conclusion Implementing OTP authentication in Laravel and Vue.js enhances security for user logins and transactions. By generating, sending, and verifying OTPs, we can add an extra layer of protection against unauthorized access. This method is particularly useful for financial applications and sensitive user data.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn today’s digital world, security is paramount, especially when dealing with sensitive data like user authentication and financial transactions. One of the most effective ways to enhance security is by implementing One-Time Password (OTP) authentication. This article explores how to implement OTP authentication in a Laravel backend with a Vue.js frontend, ensuring secure transactions.\u003c/p\u003e\n\u003ch2 id=\"whyuseotpauthentication\"\u003eWhy Use OTP Authentication?\u003c/h2\u003e\n\u003cp\u003eOTP authentication provides an extra layer of security beyond traditional username and password authentication. Some key benefits include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePrevention of Unauthorized Access:\u003c/strong\u003e Even if login credentials are compromised, an attacker cannot log in without the OTP.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnhanced Security for Transactions:\u003c/strong\u003e OTPs can be used to confirm high-value transactions, preventing fraud.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTemporary Validity:\u003c/strong\u003e Since OTPs expire after a short period, they reduce the risk of reuse by attackers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003cp\u003eBefore getting started, ensure you have the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca target=\"_blank\" rel=\"nofollow noopener noreferrer\" href=\"https://laravel.com/docs/10.x/installation\"\u003eLaravel\u003c/a\u003e 8 or later installed\u003c/li\u003e\n\u003cli\u003eVue.js configured in your project\u003c/li\u003e\n\u003cli\u003eA mail or SMS service provider for sending OTPs (e.g., Twilio, Mailtrap)\u003c/li\u003e\n\u003cli\u003eBasic understanding of Laravel and Vue.js\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn this guide, we’ll implement OTP authentication in a \u003cstrong\u003eLaravel (backend) and Vue.js (frontend) application\u003c/strong\u003e. We’ll cover:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSetting up Laravel and Vue (frontend) from scratch\u003c/li\u003e\n\u003cli\u003eSetting up OTP generation and validation in Laravel\u003c/li\u003e\n\u003cli\u003eCreating a Vue.js component for OTP input\u003c/li\u003e\n\u003cli\u003eIntegrating OTP authentication into login workflows\u003c/li\u003e\n\u003cli\u003eEnhancing security with best practices\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy the end, you’ll have a fully functional OTP authentication system ready to enhance the security of your fintech or web application.\u003c/p\u003e\n\u003ch2 id=\"settinguplaravelforotpauthentication\"\u003eSetting Up Laravel for OTP Authentication\u003c/h2\u003e\n\u003ch3 id=\"step1installlaravelandrequiredpackages\"\u003eStep 1: Install Laravel and Required Packages\u003c/h3\u003e\n\u003cp\u003eIf you haven\u0026#39;t already set up a Laravel project, create a new one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecomposer create-project \u003cspan\u003e\u0026#34;laravel/laravel:^10.0\u0026#34;\u003c/span\u003e example-app\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext, install the \u003ca target=\"_blank\" rel=\"nofollow noopener noreferrer\" href=\"https://laravel.com/docs/10.x/starter-kits\"\u003eLaravel Breeze package\u003c/a\u003e for frontend scaffolding:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecomposer \u003cspan\u003erequire\u003c/span\u003e laravel/breeze --dev\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter \u003ccode\u003ecomposer\u003c/code\u003e has finished installing, run the following command to select the framework you want to use—the Vue configuration:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephp artisan breeze:install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou’ll see a prompt with the available stacks:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWhich Breeze stack would you like to install?\n- Vue with Inertia   \nWould you like any optional features?\n- None   \nWhich testing framework do you prefer? \n- PHPUnit\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBreeze will automatically install the necessary packages for your Laravel Vue project. You should see:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eINFO Breeze scaffolding installed successfully.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow run the npm command to build your frontend assets:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm run dev\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen, open another terminal and launch your Laravel app:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephp artisan serve\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"step2settingupotpgenerationandvalidationinlaravel\"\u003eStep 2: Setting up OTP generation and validation in Laravel\u003c/h3\u003e\n\u003cp\u003eWe\u0026#39;ll use a mail testing platform called Mailtrap to send and receive mail locally. If you don’t have a mail testing service set up, sign up at \u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mailtrap.io/\"\u003eMailtrap\u003c/a\u003e to get your SMTP credentials and add them to your \u003ccode\u003e.env\u003c/code\u003e file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMAIL_MAILER=smtp\nMAIL_HOST=sandbox.smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=1780944422200a\nMAIL_PASSWORD=a8250ee453323b\nMAIL_ENCRYPTION=tls\n\u003ca href=\"https://stackabuse.com/cdn-cgi/l/email-protection\" data-cfemail=\"2469656d687b62766b697b65606076617777194c4148484b64415c45495448410a474b49\"\u003e[email protected]\u003c/a\u003e\nMAIL_FROM_NAME=\u0026#34;${APP_NAME}\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo send OTPs to users, we’ll use Laravel’s built-in mail services. Create a mail class and controller:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ephp artisan make:mail OtpMail\nphp artisan make:controller OtpController\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThen modify the \u003ccode\u003eOtpMail\u003c/code\u003e class:\u003c/p\u003e\n\u003cdiv data-nosnippet=\"\" id=\"ad-lead-magnet\"\u003e\u003cp\u003eCheck out our hands-on, practical guide to learning Git, with best-practices, industry-accepted standards, and included cheat sheet. Stop Googling Git commands and actually \u003cem\u003elearn\u003c/em\u003e it!\u003c/p\u003e\u003c/div\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;?php\u003c/span\u003e\n\n\u003cspan\u003enamespace\u003c/span\u003e \u003cspan\u003eApp\u003c/span\u003e\\\u003cspan\u003eMail\u003c/span\u003e;\n\n\u003cspan\u003euse\u003c/span\u003e \u003cspan\u003eIlluminate\u003c/span\u003e\\\u003cspan\u003eBus\u003c/span\u003e\\\u003cspan\u003eQueueable\u003c/span\u003e;\n\u003cspan\u003euse\u003c/span\u003e \u003cspan\u003eIlluminate\u003c/span\u003e\\\u003cspan\u003eContracts\u003c/span\u003e\\\u003cspan\u003eQueue\u003c/span\u003e\\\u003cspan\u003eShouldQueue\u003c/span\u003e;\n\u003cspan\u003euse\u003c/span\u003e \u003cspan\u003eIlluminate\u003c/span\u003e\\\u003cspan\u003eMail\u003c/span\u003e\\\u003cspan\u003eMailable\u003c/span\u003e;\n\u003cspan\u003euse\u003c/span\u003e \u003cspan\u003eIlluminate\u003c/span\u003e\\\u003cspan\u003eMail\u003c/span\u003e\\\u003cspan\u003eMailables\u003c/span\u003e\\\u003cspan\u003eContent\u003c/span\u003e;\n\u003cspan\u003euse\u003c/span\u003e \u003cspan\u003eIlluminate\u003c/span\u003e\\\u003cspan\u003eMail\u003c/span\u003e\\\u003cspan\u003eMailables\u003c/span\u003e\\\u003cspan\u003eEnvelope\u003c/span\u003e;\n\u003cspan\u003euse\u003c/span\u003e \u003cspan\u003eIlluminate\u003c/span\u003e\\\u003cspan\u003eQueue\u003c/span\u003e\\\u003cspan\u003eSerializesModels\u003c/span\u003e;\n\n\u003cspan\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eOtpMail\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eMailable\u003c/span\u003e\n\u003c/span\u003e{\n    \u003cspan\u003euse\u003c/span\u003e \u003cspan\u003eQueueable\u003c/span\u003e, \u003cspan\u003eSerializesModels\u003c/span\u003e;\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e$otp\u003c/span\u003e;\n\n    \u003cspan\u003e/**\n     * Create a new message instance.\n     */\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003e__construct\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$otp\u003c/span\u003e\u003c/span\u003e)\n    \u003c/span\u003e{\n        \u003cspan\u003e$this\u003c/span\u003e-\u0026gt;otp = \u003cspan\u003e$otp\u003c/span\u003e;\n    }\n\n    \u003cspan\u003e/**\n     * Build the email message.\n     */\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ebuild\u003c/span\u003e(\u003cspan\u003e\u003c/span\u003e)\n    \u003c/span\u003e{\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e$this\u003c/span\u003e-\u0026gt;subject(\u003cspan\u003e\u0026#39;Your OTP Code\u0026#39;\u003c/span\u003e)\n            -\u0026gt;view(\u003cspan\u003e\u0026#39;emails.otp\u0026#39;\u003c/span\u003e)\n            -\u0026gt;with([\u003cspan\u003e\u0026#39;otp\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e$this\u003c/span\u003e-\u0026gt;otp]);\n    }\n\n    \u003cspan\u003e/**\n     * Get the message envelope.\n     */\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eenvelope\u003c/span\u003e(\u003cspan\u003e\u003c/span\u003e): \u003cspan\u003eEnvelope\u003c/span\u003e\n    \u003c/span\u003e{\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e Envelope(\n            subject: \u003cspan\u003e\u0026#39;OTP Mail\u0026#39;\u003c/span\u003e,\n        );\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCreate a Blade view in \u003ccode\u003eresources/views/emails/otp.blade.php\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;!DOCTYPE \u003cspan\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;\u003cspan\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003cspan\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003cspan\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003eYour OTP Code\u003cspan\u003e\u0026lt;/\u003cspan\u003etitle\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;/\u003cspan\u003ehead\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003cspan\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003cspan\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eHello,\u003cspan\u003e\u0026lt;/\u003cspan\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003cspan\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eYour One-Time Password (OTP) is: \u003cspan\u003e\u0026lt;\u003cspan\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e{{ $otp }}\u003cspan\u003e\u0026lt;/\u003cspan\u003estrong\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003cspan\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003cspan\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThis code is valid for 10 minutes. Do not share it with anyone.\u003cspan\u003e\u0026lt;/\u003cspan\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003cspan\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003eThank you!\u003cspan\u003e\u0026lt;/\u003cspan\u003ep\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;/\u003cspan\u003ebody\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;/\u003cspan\u003ehtml\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"step3creatingavuejscomponentforotpinput\"\u003eStep 3: Creating a Vue.js component for OTP input\u003c/h3\u003e\n\u003cp\u003eNormally, after login or registration, users are redirected to the dashboard. In this tutorial, we add an extra security step that validates users with an OTP before granting dashboard access.\u003c/p\u003e\n\u003cp\u003eCreate two Vue files:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRequest.vue\u003c/code\u003e: requests the OTP\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eVerify.vue\u003c/code\u003e: inputs the OTP for verification\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow we create the routes for the purpose of return the View and the functionality of creating OTP codes, storing OTP codes, sending OTP codes through the \u003ccode\u003email\u003c/code\u003e class, we head to our \u003ccode\u003eweb.php\u003c/code\u003e file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRoute::middleware(\u003cspan\u003e\u0026#39;auth\u0026#39;\u003c/span\u003e)-\u0026gt;group(\u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e (\u003cspan\u003e\u003c/span\u003e) \u003c/span\u003e{\n    Route::get(\u003cspan\u003e\u0026#39;/request\u0026#39;\u003c/span\u003e, [OtpController::class, \u003cspan\u003e\u0026#39;create\u0026#39;\u003c/span\u003e])-\u0026gt;name(\u003cspan\u003e\u0026#39;request\u0026#39;\u003c/span\u003e);\n    Route::post(\u003cspan\u003e\u0026#39;/store-request\u0026#39;\u003c/span\u003e, [OtpController::class, \u003cspan\u003e\u0026#39;store\u0026#39;\u003c/span\u003e])-\u0026gt;name(\u003cspan\u003e\u0026#39;send.otp.request\u0026#39;\u003c/span\u003e);\n\n    Route::get(\u003cspan\u003e\u0026#39;/verify\u0026#39;\u003c/span\u003e, [OtpController::class, \u003cspan\u003e\u0026#39;verify\u0026#39;\u003c/span\u003e])-\u0026gt;name(\u003cspan\u003e\u0026#39;verify\u0026#39;\u003c/span\u003e);\n    Route::post(\u003cspan\u003e\u0026#39;/verify-request\u0026#39;\u003c/span\u003e, [OtpController::class, \u003cspan\u003e\u0026#39;verify_request\u0026#39;\u003c/span\u003e])-\u0026gt;name(\u003cspan\u003e\u0026#39;verify.otp.request\u0026#39;\u003c/span\u003e);\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePutting all of this code in the OTP controller returns the View for our \u003ccode\u003erequest.vue\u003c/code\u003e and \u003ccode\u003everify.vue\u003c/code\u003e file and the functionality of creating OTP codes, storing OTP codes, sending OTP codes through the mail class and verifying OTP codes, we head to our \u003ccode\u003eweb.php\u003c/code\u003e file to set up the routes.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ecreate\u003c/span\u003e(\u003cspan\u003eRequest \u003cspan\u003e$request\u003c/span\u003e\u003c/span\u003e)\n\u003c/span\u003e{\n    \u003cspan\u003ereturn\u003c/span\u003e Inertia::render(\u003cspan\u003e\u0026#39;Request\u0026#39;\u003c/span\u003e, [\n        \u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;query(\u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e, \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e),\n    ]);\n}\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003estore\u003c/span\u003e(\u003cspan\u003eRequest \u003cspan\u003e$request\u003c/span\u003e\u003c/span\u003e)\n\u003c/span\u003e{\n    \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;validate([\n        \u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e\u0026#39;required|email|exists:users,email\u0026#39;\u003c/span\u003e,\n    ]);\n\n    \u003cspan\u003e$otp\u003c/span\u003e = rand(\u003cspan\u003e100000\u003c/span\u003e, \u003cspan\u003e999999\u003c/span\u003e);\n\n    Cache::put(\u003cspan\u003e\u0026#39;otp_\u0026#39;\u003c/span\u003e . \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;email, \u003cspan\u003e$otp\u003c/span\u003e, now()-\u0026gt;addMinutes(\u003cspan\u003e10\u003c/span\u003e));\n\n    Log::info(\u003cspan\u003e\u0026#34;OTP generated for \u0026#34;\u003c/span\u003e . \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;email . \u003cspan\u003e\u0026#34;: \u0026#34;\u003c/span\u003e . \u003cspan\u003e$otp\u003c/span\u003e);\n\n    Mail::to(\u003cspan\u003e$request\u003c/span\u003e-\u0026gt;email)-\u0026gt;send(\u003cspan\u003enew\u003c/span\u003e OtpMail(\u003cspan\u003e$otp\u003c/span\u003e));\n\n    \u003cspan\u003ereturn\u003c/span\u003e redirect()-\u0026gt;route(\u003cspan\u003e\u0026#39;verify\u0026#39;\u003c/span\u003e, [\u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;email]);\n}\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003everify\u003c/span\u003e(\u003cspan\u003eRequest \u003cspan\u003e$request\u003c/span\u003e\u003c/span\u003e)\n\u003c/span\u003e{\n    \u003cspan\u003ereturn\u003c/span\u003e Inertia::render(\u003cspan\u003e\u0026#39;Verify\u0026#39;\u003c/span\u003e, [\n        \u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;query(\u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e),\n    ]);\n}\n\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003everify_request\u003c/span\u003e(\u003cspan\u003eRequest \u003cspan\u003e$request\u003c/span\u003e\u003c/span\u003e)\n\u003c/span\u003e{\n    \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;validate([\n        \u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e\u0026#39;required|email|exists:users,email\u0026#39;\u003c/span\u003e,\n        \u003cspan\u003e\u0026#39;otp\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e\u0026#39;required|digits:6\u0026#39;\u003c/span\u003e,\n    ]);\n\n    \u003cspan\u003e$cachedOtp\u003c/span\u003e = Cache::get(\u003cspan\u003e\u0026#39;otp_\u0026#39;\u003c/span\u003e . \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;email);\n\n    Log::info(\u003cspan\u003e\u0026#34;OTP entered: \u0026#34;\u003c/span\u003e . \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;otp);\n    Log::info(\u003cspan\u003e\u0026#34;OTP stored in cache: \u0026#34;\u003c/span\u003e . (\u003cspan\u003e$cachedOtp\u003c/span\u003e ?? \u003cspan\u003e\u0026#39;No OTP found\u0026#39;\u003c/span\u003e));\n\n    \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003e$cachedOtp\u003c/span\u003e) {\n        \u003cspan\u003ereturn\u003c/span\u003e back()-\u0026gt;withErrors([\u003cspan\u003e\u0026#39;otp\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e\u0026#39;OTP has expired. Please request a new one.\u0026#39;\u003c/span\u003e]);\n    }\n\n    \u003cspan\u003eif\u003c/span\u003e ((\u003cspan\u003estring\u003c/span\u003e) \u003cspan\u003e$cachedOtp\u003c/span\u003e !== (\u003cspan\u003estring\u003c/span\u003e) \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;otp) {\n        \u003cspan\u003ereturn\u003c/span\u003e back()-\u0026gt;withErrors([\u003cspan\u003e\u0026#39;otp\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e\u0026#39;Invalid OTP. Please try again.\u0026#39;\u003c/span\u003e]);\n    }\n\n    Cache::forget(\u003cspan\u003e\u0026#39;otp_\u0026#39;\u003c/span\u003e . \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;email);\n\n    \u003cspan\u003e$user\u003c/span\u003e = User::where(\u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e, \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;email)-\u0026gt;first();\n    \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003e$user\u003c/span\u003e) {\n        \u003cspan\u003e$user\u003c/span\u003e-\u0026gt;email_verified_at = now();\n        \u003cspan\u003e$user\u003c/span\u003e-\u0026gt;save();\n    }\n\n    \u003cspan\u003ereturn\u003c/span\u003e redirect()-\u0026gt;route(\u003cspan\u003e\u0026#39;dashboard\u0026#39;\u003c/span\u003e)-\u0026gt;with(\u003cspan\u003e\u0026#39;success\u0026#39;\u003c/span\u003e, \u003cspan\u003e\u0026#39;OTP Verified Successfully!\u0026#39;\u003c/span\u003e);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHaving set all this code, we return to the \u003ccode\u003erequest.vue\u003c/code\u003e file to set it up.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;script setup\u0026gt;\n\u003cspan\u003eimport\u003c/span\u003e AuthenticatedLayout \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Layouts/AuthenticatedLayout.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e InputError \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Components/InputError.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e InputLabel \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Components/InputLabel.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e PrimaryButton \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Components/PrimaryButton.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e TextInput \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Components/TextInput.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e { Head, useForm } \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@inertiajs/vue3\u0026#39;\u003c/span\u003e;\n\n\u003cspan\u003econst\u003c/span\u003e props = defineProps({\n    \u003cspan\u003eemail\u003c/span\u003e: {\n        \u003cspan\u003etype\u003c/span\u003e: \u003cspan\u003eString\u003c/span\u003e,\n        \u003cspan\u003erequired\u003c/span\u003e: \u003cspan\u003etrue\u003c/span\u003e,\n    },\n});\n\n\u003cspan\u003econst\u003c/span\u003e form = useForm({\n    \u003cspan\u003eemail\u003c/span\u003e: props.email,\n});\n\n\u003cspan\u003econst\u003c/span\u003e submit = \u003cspan\u003e() =\u0026gt;\u003c/span\u003e {\n    form.post(route(\u003cspan\u003e\u0026#39;send.otp.request\u0026#39;\u003c/span\u003e), {\n        \u003cspan\u003eonSuccess\u003c/span\u003e: \u003cspan\u003e() =\u0026gt;\u003c/span\u003e {\n            alert(\u003cspan\u003e\u0026#34;OTP has been sent to your email!\u0026#34;\u003c/span\u003e);\n            form.get(route(\u003cspan\u003e\u0026#39;verify\u0026#39;\u003c/span\u003e), { \u003cspan\u003eemail\u003c/span\u003e: form.email }); \u003cspan\u003e// Redirecting to OTP verification\u003c/span\u003e\n        },\n    });\n};\n\u0026lt;/script\u0026gt;\n\n\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003cspan\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003cspan\u003eHead\u003c/span\u003e \u003cspan\u003etitle\u003c/span\u003e=\u003cspan\u003e\u0026#34;Request OTP\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;\u003cspan\u003eAuthenticatedLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003cspan\u003eform\u003c/span\u003e @\u003cspan\u003esubmit.prevent\u003c/span\u003e=\u003cspan\u003e\u0026#34;submit\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003cspan\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003cspan\u003eInputLabel\u003c/span\u003e \u003cspan\u003efor\u003c/span\u003e=\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e=\u003cspan\u003e\u0026#34;Email\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\n\n                \u003cspan\u003e\u0026lt;\u003cspan\u003eTextInput\u003c/span\u003e\n                    \u003cspan\u003eid\u003c/span\u003e=\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e\n                    \u003cspan\u003etype\u003c/span\u003e=\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e\n                    \u003cspan\u003eclass\u003c/span\u003e=\u003cspan\u003e\u0026#34;mt-1 block w-full\u0026#34;\u003c/span\u003e\n                    \u003cspan\u003ev-model\u003c/span\u003e=\u003cspan\u003e\u0026#34;form.email\u0026#34;\u003c/span\u003e\n                    \u003cspan\u003erequired\u003c/span\u003e\n                    \u003cspan\u003eautofocus\u003c/span\u003e\n                /\u0026gt;\u003c/span\u003e\n\n                \u003cspan\u003e\u0026lt;\u003cspan\u003eInputError\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e=\u003cspan\u003e\u0026#34;mt-2\u0026#34;\u003c/span\u003e \u003cspan\u003e:message\u003c/span\u003e=\u003cspan\u003e\u0026#34;form.errors.email\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;/\u003cspan\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n            \u003cspan\u003e\u0026lt;\u003cspan\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e=\u003cspan\u003e\u0026#34;mt-4 flex items-center justify-end\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003cspan\u003ePrimaryButton\u003c/span\u003e \u003cspan\u003e:class\u003c/span\u003e=\u003cspan\u003e\u0026#34;{ \u0026#39;opacity-25\u0026#39;: form.processing }\u0026#34;\u003c/span\u003e \u003cspan\u003e:disabled\u003c/span\u003e=\u003cspan\u003e\u0026#34;form.processing\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\n                    Request OTP\n                \u003cspan\u003e\u0026lt;/\u003cspan\u003ePrimaryButton\u003c/span\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;/\u003cspan\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;/\u003cspan\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;/\u003cspan\u003eAuthenticatedLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;/\u003cspan\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHaving set all this code, we return to the \u003ccode\u003everify.vue\u003c/code\u003e to set it up:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;script setup\u0026gt;\n\u003cspan\u003eimport\u003c/span\u003e AuthenticatedLayout \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Layouts/AuthenticatedLayout.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e InputError \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Components/InputError.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e InputLabel \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Components/InputLabel.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e PrimaryButton \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Components/PrimaryButton.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e TextInput \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@/Components/TextInput.vue\u0026#39;\u003c/span\u003e;\n\u003cspan\u003eimport\u003c/span\u003e { Head, useForm, usePage } \u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003e\u0026#39;@inertiajs/vue3\u0026#39;\u003c/span\u003e;\n\n\u003cspan\u003econst\u003c/span\u003e page = usePage();\n\u003cspan\u003e// Get the email from the URL query params\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e email = page.props.email || \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n\n\u003cspan\u003e// Initialize form with email and OTP field\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e form = useForm({\n    \u003cspan\u003eemail\u003c/span\u003e: email,\n    \u003cspan\u003eotp\u003c/span\u003e: \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e,\n});\n\n\u003cspan\u003e// Submit function\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e submit = \u003cspan\u003e() =\u0026gt;\u003c/span\u003e {\n    form.post(route(\u003cspan\u003e\u0026#39;verify.otp.request\u0026#39;\u003c/span\u003e), {\n        \u003cspan\u003eonSuccess\u003c/span\u003e: \u003cspan\u003e() =\u0026gt;\u003c/span\u003e {\n            alert(\u003cspan\u003e\u0026#34;OTP verified successfully! Redirecting...\u0026#34;\u003c/span\u003e);\n            \u003cspan\u003ewindow\u003c/span\u003e.location.href = \u003cspan\u003e\u0026#39;/dashboard\u0026#39;\u003c/span\u003e; \u003cspan\u003e// Change to your desired redirect page\u003c/span\u003e\n        },\n        \u003cspan\u003eonError\u003c/span\u003e: \u003cspan\u003e() =\u0026gt;\u003c/span\u003e {\n            alert(\u003cspan\u003e\u0026#34;Invalid OTP. Please try again.\u0026#34;\u003c/span\u003e);\n        },\n    });\n};\n\u0026lt;/script\u0026gt;\n\n\u003cspan\u003e\u003cspan\u003e\u0026lt;\u003cspan\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;\u003cspan\u003eHead\u003c/span\u003e \u003cspan\u003etitle\u003c/span\u003e=\u003cspan\u003e\u0026#34;Verify OTP\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\n\n    \u003cspan\u003e\u0026lt;\u003cspan\u003eAuthenticatedLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;\u003cspan\u003eform\u003c/span\u003e @\u003cspan\u003esubmit.prevent\u003c/span\u003e=\u003cspan\u003e\u0026#34;submit\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;\u003cspan\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003cspan\u003eInputLabel\u003c/span\u003e \u003cspan\u003efor\u003c/span\u003e=\u003cspan\u003e\u0026#34;otp\u0026#34;\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e=\u003cspan\u003e\u0026#34;Enter OTP\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\n\n                \u003cspan\u003e\u0026lt;\u003cspan\u003eTextInput\u003c/span\u003e\n                    \u003cspan\u003eid\u003c/span\u003e=\u003cspan\u003e\u0026#34;otp\u0026#34;\u003c/span\u003e\n                    \u003cspan\u003etype\u003c/span\u003e=\u003cspan\u003e\u0026#34;text\u0026#34;\u003c/span\u003e\n                    \u003cspan\u003eclass\u003c/span\u003e=\u003cspan\u003e\u0026#34;mt-1 block w-full\u0026#34;\u003c/span\u003e\n                    \u003cspan\u003ev-model\u003c/span\u003e=\u003cspan\u003e\u0026#34;form.otp\u0026#34;\u003c/span\u003e\n                    \u003cspan\u003erequired\u003c/span\u003e\n                /\u0026gt;\u003c/span\u003e\n\n                \u003cspan\u003e\u0026lt;\u003cspan\u003eInputError\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e=\u003cspan\u003e\u0026#34;mt-2\u0026#34;\u003c/span\u003e \u003cspan\u003e:message\u003c/span\u003e=\u003cspan\u003e\u0026#34;form.errors.otp\u0026#34;\u003c/span\u003e /\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;/\u003cspan\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n            \u003cspan\u003e\u0026lt;\u003cspan\u003ediv\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e=\u003cspan\u003e\u0026#34;mt-4 flex items-center justify-end\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\n                \u003cspan\u003e\u0026lt;\u003cspan\u003ePrimaryButton\u003c/span\u003e \u003cspan\u003e:disabled\u003c/span\u003e=\u003cspan\u003e\u0026#34;form.processing\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e\n                    Verify OTP\n                \u003cspan\u003e\u0026lt;/\u003cspan\u003ePrimaryButton\u003c/span\u003e\u0026gt;\u003c/span\u003e\n            \u003cspan\u003e\u0026lt;/\u003cspan\u003ediv\u003c/span\u003e\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026lt;/\u003cspan\u003eform\u003c/span\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan\u003e\u0026lt;/\u003cspan\u003eAuthenticatedLayout\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003cspan\u003e\u0026lt;/\u003cspan\u003etemplate\u003c/span\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"step4integratingotpauthenticationintologinandregisterworkflows\"\u003eStep 4: Integrating OTP authentication into login and register workflows\u003c/h3\u003e\n\u003cp\u003eUpdate the login controller:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003estore\u003c/span\u003e(\u003cspan\u003eLoginRequest \u003cspan\u003e$request\u003c/span\u003e\u003c/span\u003e): \u003cspan\u003eRedirectResponse\u003c/span\u003e\n\u003c/span\u003e{\n    \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;authenticate();\n\n    \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;session()-\u0026gt;regenerate();\n\n    \u003cspan\u003ereturn\u003c/span\u003e redirect()-\u0026gt;intended(route(\u003cspan\u003e\u0026#39;request\u0026#39;\u003c/span\u003e, absolute: \u003cspan\u003efalse\u003c/span\u003e));\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUpdate the registration controller:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003estore\u003c/span\u003e(\u003cspan\u003eRequest \u003cspan\u003e$request\u003c/span\u003e\u003c/span\u003e): \u003cspan\u003eRedirectResponse\u003c/span\u003e\n\u003c/span\u003e{\n    \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;validate([\n        \u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e\u0026#39;required|string|max:255\u0026#39;\u003c/span\u003e,\n        \u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e\u0026#39;required|string|lowercase|email|max:255|unique:\u0026#39;\u003c/span\u003e . User::class,\n        \u003cspan\u003e\u0026#39;password\u0026#39;\u003c/span\u003e =\u0026gt; [\u003cspan\u003e\u0026#39;required\u0026#39;\u003c/span\u003e, \u003cspan\u003e\u0026#39;confirmed\u0026#39;\u003c/span\u003e, Rules\\Password::defaults()],\n    ]);\n\n    \u003cspan\u003e$user\u003c/span\u003e = User::create([\n        \u003cspan\u003e\u0026#39;name\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;name,\n        \u003cspan\u003e\u0026#39;email\u0026#39;\u003c/span\u003e =\u0026gt; \u003cspan\u003e$request\u003c/span\u003e-\u0026gt;email,\n        \u003cspan\u003e\u0026#39;password\u0026#39;\u003c/span\u003e =\u0026gt; Hash::make(\u003cspan\u003e$request\u003c/span\u003e-\u0026gt;password),\n    ]);\n\n    event(\u003cspan\u003enew\u003c/span\u003e Registered(\u003cspan\u003e$user\u003c/span\u003e));\n\n    Auth::login(\u003cspan\u003e$user\u003c/span\u003e);\n\n    \u003cspan\u003ereturn\u003c/span\u003e redirect(route(\u003cspan\u003e\u0026#39;request\u0026#39;\u003c/span\u003e, absolute: \u003cspan\u003efalse\u003c/span\u003e));\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eImplementing OTP authentication in Laravel and Vue.js enhances security for user logins and transactions. By generating, sending, and verifying OTPs, we can add an extra layer of protection against unauthorized access. This method is particularly useful for financial applications and sensitive user data.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2025-04-20T08:04:07Z",
  "modifiedTime": "2025-04-22T07:40:41Z"
}
