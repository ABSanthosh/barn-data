{
  "id": "b6440eed-f361-44a6-9f36-c74018ab6c58",
  "title": "Journey through Git's 20-year history",
  "link": "https://about.gitlab.com/blog/2025/04/14/journey-through-gits-20-year-history",
  "description": "",
  "author": "Patrick Steinhardt",
  "published": "2025-04-14T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Patrick Steinhardt",
  "length": 13845,
  "excerpt": "Follow along as we reminisce about the first commit, the unique aspects of the earliest releases, and the confusion sparked by an update to the git-push(1) default behavior.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "The Git project has just turned 20 years old. A lot has happened during these years, and while the conceptual design of Git hasn't changed significantly since its inception, the way users interact with the tool has changed quite significantly. We at GitLab are proud to build on top of this critical piece of software and to be part of its history. Join us on a journey through Git's history to explore how it has evolved over the years. The first commit The first commit was made on April 7, 2005, by Linus Torvalds, the creator of the Linux kernel: e83c5163316 (Initial revision of \"git\", the information manager from hell, 2005-04-07). As we can see, this commit does not contain a lot of files: $ git ls-tree e83c5163316 100644 blob a6bba79ba1f46a1bbf7773449c3bd2bb9bf48e8b Makefile 100644 blob 27577f76849c09d3405397244eb3d8ae1d11b0f3 README 100644 blob 98a32a9ad39883c6d05a000a68511d4b1ee2b3c7 cache.h 100644 blob 74a0a234dd346fff51c773aa57d82fc4b83a8557 cat-file.c 100644 blob 840307af0cfaab31555795ce7175d5e9c9f981a0 commit-tree.c 100644 blob 25dc13fe101b219f74007f3194b787dd99e863da init-db.c 100644 blob c924a6e0fc4c36bad6f23cb87ee59518c771f936 read-cache.c 100644 blob 1b47742d8cbc0d98903777758b7b519980e7499e read-tree.c 100644 blob b8522886a15db861508fb6d03d4d88d6de912a4b show-diff.c 100644 blob 5085a5cb53ee52e1886ff6d46c609bdb2fc6d6cd update-cache.c 100644 blob 921f981353229db0c56103a52609d35aff16f41b write-tree.c In addition to build infrastructure, the first commit provides seven top-level commands: init-db to initialize a new Git repository update-cache to add files to the index write-tree to take what is in the index and create a new tree from it read-tree to read a tree object commit-tree to create a commit from a tree cat-file to read a specific object into a temporary file Note that the git command itself did not yet exist at this point in time. Instead, these commands had to be executed directly. As example, let's create a new repository: $ mkdir repo $ cd repo $ init-db defaulting to private storage area $ ls -a . .. .dircache That looks quite unfamiliar: There is no .git directory, but there is a .dircache directory. And where was the private storage area? The early design of Git distinguished between a \"shared\" and \"private\" object storage area. This object storage area was where all of your Git objects went. For example, your commits and blobs. By default, init-db created a private object storage area that was only used for the managed directory that it was created in. A \"shared\" object storage area, on the other hand, shared object content across multiple managed directories so that the same object did not need to be stored twice. Create a commit So, now that we have a repository, how did we create a commit? Well, it isn't as easy as today's git add . \u0026\u0026 git commit. Instead, you had to: Update the index by calling update-cache for every file that you want to add. Write a new tree by calling write-tree, which takes everything you have added to the index. Set up environment variables to tell Git who you are. Write a commit object by calling commit-tree. Let’s create a commit in the repository: $ echo content-1 \u003efile-a $ update-cache file-a $ echo content-2 \u003efile-b $ update-cache file-b $ write-tree 3f143dfb48f2d84936626e2e5402e1f10c2050fb $ export COMMITTER_NAME=\"Patrick Steinhardt\" $ export [email protected] $ echo \"commit message\" | commit-tree 3f143dfb48f2d84936626e2e5402e1f10c2050fb Committing initial tree 3f143dfb48f2d84936626e2e5402e1f10c2050fb 5f8e928066c03cebe5fd0a0cc1b93d058155b969 This isn't exactly ergonomic, but it works! Let's have a look at the generated commit: $ cat-file 5f8e928066c03cebe5fd0a0cc1b93d058155b969 temp_git_file_rlTXtE: commit $ cat temp_git_file_rlTXtE tree 3f143dfb48f2d84936626e2e5402e1f10c2050fb author Patrick Steinhardt \u003c[email protected]\u003e Wed Mar 26 13:10:16 2025 committer Patrick Steinhardt \u003c[email protected]\u003e Wed Mar 26 13:10:16 2025 commit message Note that cat-file didn't print the contents directly, but instead wrote it into a temporary file first. But the contents of the file looked exactly how a modern commit would look. Making changes Now that we have files, how do we get their status? You might have guessed it: this could be done with show-diff: $ show-diff file-a: ok file-b: ok $ echo modified-content \u003efile-a $ show-diff --- - 2025-03-26 13:14:53.457611094 +0100 +++ file-a 2025-03-26 13:14:52.230085756 +0100 @@ -1 +1 @@ -content-1 +modified-content file-a: 46d8be14cdec97aac6a769fdbce4db340e888bf8 file-b: ok Amazingly, show-diff even knew to already generate diffs between the old and new state of modified files! Funny enough though, Git achieved this by simply executing the diff(1) Unix tool. In summary, all of this was still rather bare-bones, but it performed all of the necessary duties to track history. There were still many limitations: There was no easy way yet to switch between commits. There was no way to show logs. There were no branches, tags, or even references. Users were expected to manually keep track of object IDs. There was no way to synchronize two repositories with one another. Instead, users were expected to use rsync(1) to synchronize the .dircache directories. There was no way to perform merges. Git 0.99 The first test release of Git was Version 0.99. This release came only two months after the initial commit, but already contained 1,076 commits. There had been almost 50 different developers involved. The most frequent committer at this point was Linus himself, but he was closely followed by Junio Hamano, the current maintainer. A lot of things had changed since the initial commit: Git started to track different development branches by using references, which in most cases removes the need to manually track object IDs. There was a new remote protocol that allows two repositories to exchange objects with one another. The .dircache directory was renamed to .git. It became possible to merge single files with one another. The most important visible change, though, was the introduction of the top-level git command and its subcommands. Interestingly, this release also created the notion of \"plumbing\" and \"porcelain\" commands: \"Plumbing\" tools are the low-level commands that access the underlying Git repository. \"Porcelain\" tools are shell scripts that wrap the plumbing commands to provide a nicer, high-level user interface. This split still exists nowadays as documented in git(1), but because most porcelain tools have been rewritten from shell scripts to C, the line between these two categories has started to blur significantly. Linus hands over maintainership Linus never started Git out of love for version control systems, but because there was a need to replace BitKeeper for Linux kernel development. As such, he never planned to keep maintaining Git forever. The intent was to maintain it until someone trustworthy stepped up. That someone was Junio Hamano. Junio got involved in Git about a week after Linus’s first commit and already had a couple of hundred commits in the history after the Git 0.99 release. So, on July 26, 2005, Linus made Junio the new maintainer of the Git project. While Linus has continued to contribute to Git, his involvement with the project faded over time, which is only natural considering that he is quite busy as head of the Linux project. Junio is still leading the Git project today. Git 1.0 The first major release of Git happened on December 21, 2005, by Junio. Interestingly enough, there had been 34 releases between Version 0.99 and Version 1.0: 0.99.1 to 0.99.7, 0.99.7a to 0.99.7d, 0.99.8 to 0.99.8g, and 0.99.9 up to 0.99.9n. One of the more important milestones since 0.99 was probably the addition of the git-merge(1) command that allows one to merge two trees with one another. This is in stark contrast to before, where one had to basically script the merges file by file. Remotes Another significant change was the introduction of shorthand notation for remote repositories. While Git already knew how to talk to remote repositories, users always had to specify the URL to fetch from every single time they wanted to fetch changes from it. This was quite unfriendly to the users, because, typically, they wanted to interact with the same remote over and over again. You may know about how remotes work now, but the mechanism that existed at this point in time was still significantly different. There was no git-remote(1) command that you could use to manage your remotes. Remotes weren't even stored in your .git/config file. In fact, when remotes were first introduced in Version 0.99.2, Git didn't even have config files. Instead, you had to configure remotes by writing a file into the .git/branches directory, which nowadays feels somewhat counterintuitive. But the mechanism still works today: $ git init repo -- Initialized empty Git repository in /tmp/repo/.git/ $ cd repo $ mkdir .git/branches $ echo https://gitlab.com/git-scm/git.git \u003e.git/branches/origin $ git fetch origin refs/heads/master But that isn't all! The directory was soon renamed in Git Version 0.99.5 to \"remotes\", so there are a total of three different ways to configure remotes in a modern Git client. Most of you have probably never used either .git/branches nor .git/remotes, and both of these mechanisms have been deprecated since 2005 and 2011, respectively. Furthermore, these directories will finally be removed in Git 3.0. Git branding In 2007, the first Git logo was created. It’s arguable if you can call it a logo, because it only consisted of three red minus signs above three green plus signs, reflecting what the output of git diff looks like: A bit later, in 2008, the website git-scm.com was launched: In 2012, the Git website was revamped by Scott Chacon and Jason Long. It looks pretty similar to how it looks today: This site redesign sports the new red-orange logo designed by Jason Long; the same logo that's currently used: Git 2.0 Git already started to look a lot like modern Git at the 1.0 release, so we are going to do a big historical jump to Git 2.0. This version was released around 10 years after Git 1.0 and was the first release that intentionally contained backwards-incompatible changes in central workflows. git-push(1) default behavior The change that arguably caused most the confusion in this release was the updated default behavior of git-push(1). There are a couple of different actions that Git could take when you push into a remote repository and don’t specify exactly what you want to push: Git could refuse to do anything, asking you to provide more information of what exactly you want to push. Git could push the currently checked out branch. Git could push the currently checked out branch, but only if it knows that it has an equivalent on the remote side. Git could push all of your branches that have an equivalent on the remote side. The behavior of modern Git is the so-called \"simple\" strategy, which is the third option above. But before Git 2.0, the default behavior was the \"matching\" strategy, which is the last option. The “matching” strategy was significantly more risky. You always had to make sure that you were fine with pushing all of your local branches that have an equivalent on the remote side before pushing. Otherwise, you might have ended up pushing changes unintentionally. As such, it was decided to change the strategy to \"simple\" to reduce the risk and help out Git beginners. git-add(1) Another big change was the default behavior of git-add(1) when it comes to tracked files that have been deleted. Before Git 2.0, git-add(1) wouldn't stage deleted files automatically, but you instead had to manually add each deleted file by using git-rm(1) to make them part of a commit. With Git 2.0, this behavior was changed so that git-add(1) also adds deleted files to the index. I won’t bore you with the details around how Git works nowadays – you probably use it daily anyway, and, if you don’t, there are many tutorials out there that can help you get started. Instead, let’s celebrate the Git community, which has ensured that Git works as well as it does 20 years later. Over time, Git has: Accumulated 56,721 commits as of the Git 2.49 release. Received contributions from more than 2,000 different individuals. Published 60 major releases. The Git project also has a steady influx of new contributors by taking part in Google Summer of Code and Outreachy. New contributors like these are what will ensure that the Git project will remain healthy in the long term. As such, let me extend a big thank you to all contributors. It is your contributions that have made Git possible. Going forward It should be an uncontroversial take to say that Git has essentially won the competition of version control systems. It has significant market share, and it isn't easy to find open source projects that are using a version control system other than Git. So it has clearly done a lot of things right. That being said, its development hasn't stood still, and there are still many challenges ahead of Git. On the one hand, we have technical challenges: modernization of an aging code base scaling with the ever-growing size of monorepos handling large binary files better And on the other hand, there are problems of a more social type: improving the usability of Git fostering the Git community so that the project remains healthy in the long term There always remains work to be done and we at GitLab are proud to be part of these efforts to make sure that Git continues to be a great version control system for the next 20 years. Read more about Git Celebrating Git's 20th anniversary with creator Linus Torvalds What's new in Git 2.49.0? What’s new in Git 2.48.0? A beginner's guide to the Git reftable format",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/TWNsNk8KH43b3jP0KLD0U/9bc99b74135012468495d8dbcf35424c/git-20-years-opt2.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eThe Git project has just turned 20 years old. A lot has happened during these years, and while the conceptual design of Git hasn\u0026#39;t changed significantly since its inception, the way users interact with the tool has changed quite significantly. We at GitLab are proud to build on top of this critical piece of software and to be part of its history.\u003c/p\u003e\n\u003cp\u003eJoin us on a journey through Git\u0026#39;s history to explore how it has evolved over the years.\u003c/p\u003e\n\u003ch2 id=\"the-first-commit\" tabindex=\"-1\"\u003eThe first commit \u003ca href=\"#the-first-commit\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe first commit was made on April 7, 2005, by Linus Torvalds, the creator of the Linux kernel: \u003ccode\u003ee83c5163316 (Initial revision of \u0026#34;git\u0026#34;, the information manager from hell, 2005-04-07)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs we can see, this\ncommit does not contain a lot of files:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git ls-tree e83c5163316\n100644 blob a6bba79ba1f46a1bbf7773449c3bd2bb9bf48e8b\tMakefile\n100644 blob 27577f76849c09d3405397244eb3d8ae1d11b0f3\tREADME\n100644 blob 98a32a9ad39883c6d05a000a68511d4b1ee2b3c7\tcache.h\n100644 blob 74a0a234dd346fff51c773aa57d82fc4b83a8557\tcat-file.c\n100644 blob 840307af0cfaab31555795ce7175d5e9c9f981a0\tcommit-tree.c\n100644 blob 25dc13fe101b219f74007f3194b787dd99e863da\tinit-db.c\n100644 blob c924a6e0fc4c36bad6f23cb87ee59518c771f936\tread-cache.c\n100644 blob 1b47742d8cbc0d98903777758b7b519980e7499e\tread-tree.c\n100644 blob b8522886a15db861508fb6d03d4d88d6de912a4b\tshow-diff.c\n100644 blob 5085a5cb53ee52e1886ff6d46c609bdb2fc6d6cd\tupdate-cache.c\n100644 blob 921f981353229db0c56103a52609d35aff16f41b\twrite-tree.c\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn addition to build infrastructure, the first commit provides seven top-level commands:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003einit-db\u003c/code\u003e to initialize a new Git repository\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eupdate-cache\u003c/code\u003e to add files to the index\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ewrite-tree\u003c/code\u003e to take what is in the index and create a new tree from it\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eread-tree\u003c/code\u003e to read a tree object\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecommit-tree\u003c/code\u003e to create a commit from a tree\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecat-file\u003c/code\u003e to read a specific object into a temporary file\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that the \u003ccode\u003egit\u003c/code\u003e command itself did not yet exist at this point in time.\nInstead, these commands had to be executed directly.\u003c/p\u003e\n\u003cp\u003eAs example, let\u0026#39;s create a\nnew repository:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ mkdir repo\n$ cd repo\n$ init-db\ndefaulting to private storage area\n$ ls -a\n.  ..  .dircache\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat looks quite unfamiliar: There is no \u003ccode\u003e.git\u003c/code\u003e directory, but there is a\n\u003ccode\u003e.dircache\u003c/code\u003e directory. And where was the private storage area?\u003c/p\u003e\n\u003cp\u003eThe early design of Git distinguished between a \u0026#34;shared\u0026#34; and \u0026#34;private\u0026#34; object\nstorage area. This object storage area was where all of your Git objects went. For example, your\ncommits and blobs.\u003c/p\u003e\n\u003cp\u003eBy default, \u003ccode\u003einit-db\u003c/code\u003e created a private object storage area that was only used for\nthe managed directory that it was created in. A \u0026#34;shared\u0026#34; object storage area, on\nthe other hand, shared object content across multiple managed directories so\nthat the same object did not need to be stored twice.\u003c/p\u003e\n\u003ch3 id=\"create-a-commit\" tabindex=\"-1\"\u003eCreate a commit \u003ca href=\"#create-a-commit\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eSo, now that we have a repository, how did we create a commit? Well, it isn\u0026#39;t as\neasy as today\u0026#39;s \u003ccode\u003egit add . \u0026amp;\u0026amp; git commit\u003c/code\u003e. Instead, you had to:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eUpdate the index by calling \u003ccode\u003eupdate-cache\u003c/code\u003e for every file that you want to\nadd.\u003c/li\u003e\n\u003cli\u003eWrite a new tree by calling \u003ccode\u003ewrite-tree\u003c/code\u003e, which takes everything you have\nadded to the index.\u003c/li\u003e\n\u003cli\u003eSet up environment variables to tell Git who you are.\u003c/li\u003e\n\u003cli\u003eWrite a commit object by calling \u003ccode\u003ecommit-tree\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLet’s create a commit in the repository:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ echo content-1 \u0026gt;file-a\n$ update-cache file-a\n$ echo content-2 \u0026gt;file-b\n$ update-cache file-b\n$ write-tree\n3f143dfb48f2d84936626e2e5402e1f10c2050fb\n$ export COMMITTER_NAME=\u0026#34;Patrick Steinhardt\u0026#34;\n$ export \u003ca href=\"https://about.gitlab.com/cdn-cgi/l/email-protection\" data-cfemail=\"d5969a98989c8190878a9098949c99e8a5a695a5bea6fbbcb8\"\u003e[email protected]\u003c/a\u003e\n$ echo \u0026#34;commit message\u0026#34; | commit-tree 3f143dfb48f2d84936626e2e5402e1f10c2050fb\nCommitting initial tree 3f143dfb48f2d84936626e2e5402e1f10c2050fb\n5f8e928066c03cebe5fd0a0cc1b93d058155b969\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis isn\u0026#39;t exactly ergonomic, but it works! Let\u0026#39;s have a look at the generated\ncommit:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ cat-file 5f8e928066c03cebe5fd0a0cc1b93d058155b969\ntemp_git_file_rlTXtE: commit\n$ cat temp_git_file_rlTXtE\ntree 3f143dfb48f2d84936626e2e5402e1f10c2050fb\nauthor Patrick Steinhardt \u0026lt;\u003ca href=\"https://about.gitlab.com/cdn-cgi/l/email-protection\" data-cfemail=\"6e1e1d2e1e051d400703\"\u003e[email protected]\u003c/a\u003e\u0026gt; Wed Mar 26 13:10:16 2025\ncommitter Patrick Steinhardt \u0026lt;\u003ca href=\"https://about.gitlab.com/cdn-cgi/l/email-protection\" data-cfemail=\"4a3a390a3a2139642327\"\u003e[email protected]\u003c/a\u003e\u0026gt; Wed Mar 26 13:10:16 2025\n\ncommit message\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that \u003ccode\u003ecat-file\u003c/code\u003e didn\u0026#39;t print the contents directly, but instead wrote\nit into a temporary file first. But the contents of the file looked exactly how a\nmodern commit would look.\u003c/p\u003e\n\u003ch3 id=\"making-changes\" tabindex=\"-1\"\u003eMaking changes \u003ca href=\"#making-changes\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNow that we have files, how do we get their status? You might have guessed it:\nthis could be done with \u003ccode\u003eshow-diff\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ show-diff\nfile-a: ok\nfile-b: ok\n\n$ echo modified-content \u0026gt;file-a\n$ show-diff\n--- -\t2025-03-26 13:14:53.457611094 +0100\n+++ file-a\t2025-03-26 13:14:52.230085756 +0100\n@@ -1 +1 @@\n-content-1\n+modified-content\nfile-a:  46d8be14cdec97aac6a769fdbce4db340e888bf8\nfile-b: ok\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAmazingly, \u003ccode\u003eshow-diff\u003c/code\u003e even knew to already generate diffs between the old and\nnew state of modified files! Funny enough though, Git achieved this by simply\nexecuting the diff(1) Unix tool.\u003c/p\u003e\n\u003cp\u003eIn summary, all of this was still rather bare-bones, but it performed all of the\nnecessary duties to track history. There were still many limitations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThere was no easy way yet to switch between commits.\u003c/li\u003e\n\u003cli\u003eThere was no way to show logs.\u003c/li\u003e\n\u003cli\u003eThere were no branches, tags, or even references. Users were expected to manually\nkeep track of object IDs.\u003c/li\u003e\n\u003cli\u003eThere was no way to synchronize two repositories with one another. Instead,\nusers were expected to use rsync(1) to synchronize the \u003ccode\u003e.dircache\u003c/code\u003e directories.\u003c/li\u003e\n\u003cli\u003eThere was no way to perform merges.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"git-0.99\" tabindex=\"-1\"\u003eGit 0.99 \u003ca href=\"#git-0.99\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe first test release of Git was Version 0.99. This release came only two months after\nthe initial commit, but already contained 1,076 commits. There had been almost 50\ndifferent developers involved. The most frequent committer at this point was\nLinus himself, but he was closely followed by Junio Hamano, the current maintainer.\u003c/p\u003e\n\u003cp\u003eA lot of things had changed since the initial commit:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGit started to track different development branches by using references, which\nin most cases removes the need to manually track object IDs.\u003c/li\u003e\n\u003cli\u003eThere was a new remote protocol that allows two repositories to exchange\nobjects with one another.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003e.dircache\u003c/code\u003e directory was renamed to \u003ccode\u003e.git\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIt became possible to merge single files with one another.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe most important visible change, though, was the introduction of\nthe top-level \u003ccode\u003egit\u003c/code\u003e command and its subcommands. Interestingly, this release\nalso created the notion of \u0026#34;plumbing\u0026#34; and \u0026#34;porcelain\u0026#34; commands:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026#34;Plumbing\u0026#34; tools are the low-level commands that access the underlying Git\nrepository.\u003c/li\u003e\n\u003cli\u003e\u0026#34;Porcelain\u0026#34; tools are shell scripts that wrap the plumbing commands to provide\na nicer, high-level user interface.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis split still exists nowadays as documented in\n\u003ca href=\"https://git-scm.com/docs/git#_high_level_commands_porcelain\"\u003e\u003ccode\u003egit(1)\u003c/code\u003e\u003c/a\u003e, but because\nmost porcelain tools have been rewritten from shell scripts to C, the line between these two\ncategories has started to blur significantly.\u003c/p\u003e\n\u003ch2 id=\"linus-hands-over-maintainership\" tabindex=\"-1\"\u003eLinus hands over maintainership \u003ca href=\"#linus-hands-over-maintainership\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eLinus never started Git out of love for version control systems, but because there was a need to replace BitKeeper for Linux kernel development. As such, he never planned to keep maintaining Git forever. The intent was to maintain it until someone trustworthy stepped up.\u003c/p\u003e\n\u003cp\u003eThat someone was Junio Hamano. Junio got involved in Git about a week after Linus’s first commit and already had a couple of hundred commits in the history after the Git 0.99 release. So, on July 26, 2005, \u003ca href=\"https://lore.kernel.org/git/Pine.LNX.4.58.0507262004320.3227@g5.osdl.org/\"\u003eLinus made Junio the new maintainer of the Git project\u003c/a\u003e. While Linus has continued to contribute to Git, his involvement with the project faded over time, which is only natural considering that he is quite busy as head of the Linux project.\u003c/p\u003e\n\u003cp\u003eJunio is still leading the Git project today.\u003c/p\u003e\n\u003ch2 id=\"git-1.0\" tabindex=\"-1\"\u003eGit 1.0 \u003ca href=\"#git-1.0\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe first major release of Git happened on December 21, 2005, by\nJunio. Interestingly enough, there had been 34 releases between Version 0.99\nand Version 1.0: 0.99.1 to 0.99.7, 0.99.7a to 0.99.7d, 0.99.8 to 0.99.8g, and\n0.99.9 up to 0.99.9n.\u003c/p\u003e\n\u003cp\u003eOne of the more important milestones since 0.99 was probably the addition of the \u003ccode\u003egit-merge(1)\u003c/code\u003e\ncommand that allows one to merge two trees with one another. This is in stark\ncontrast to before, where one had to basically script the merges file by file.\u003c/p\u003e\n\u003ch3 id=\"remotes\" tabindex=\"-1\"\u003eRemotes \u003ca href=\"#remotes\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAnother significant change was the introduction of shorthand notation for\nremote repositories. While Git already knew how to talk to remote repositories,\nusers always had to specify the URL to fetch from every single time they wanted\nto fetch changes from it. This was quite unfriendly to the users, because, typically, they wanted to interact with the same remote over and over again.\u003c/p\u003e\n\u003cp\u003eYou may know about how remotes work now, but the mechanism that existed at\u003cbr/\u003e\nthis point in time was still significantly different. There was no \u003ccode\u003egit-remote(1)\u003c/code\u003e\u003cbr/\u003e\ncommand that you could use to manage your remotes. Remotes weren\u0026#39;t even stored\u003cbr/\u003e\nin your \u003ccode\u003e.git/config\u003c/code\u003e file. In fact, when remotes were first introduced in\u003cbr/\u003e\nVersion 0.99.2, Git didn\u0026#39;t even \u003cem\u003ehave\u003c/em\u003e config files.\u003c/p\u003e\n\u003cp\u003eInstead, you had to configure remotes by writing a file into the\u003cbr/\u003e\n\u003ccode\u003e.git/branches\u003c/code\u003e directory, which nowadays feels somewhat counterintuitive. But\u003cbr/\u003e\nthe mechanism still works today:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ git init repo --\nInitialized empty Git repository in /tmp/repo/.git/\n$ cd repo\n$ mkdir .git/branches\n$ echo https://gitlab.com/git-scm/git.git \u0026gt;.git/branches/origin\n$ git fetch origin refs/heads/master\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBut that isn\u0026#39;t all! The directory was soon renamed in Git Version 0.99.5 to \u0026#34;remotes\u0026#34;, so there are a total of three different ways to configure remotes in a modern Git client.\u003c/p\u003e\n\u003cp\u003eMost of you have probably never used either \u003ccode\u003e.git/branches\u003c/code\u003e nor \u003ccode\u003e.git/remotes\u003c/code\u003e,\u003cbr/\u003e\nand both of these mechanisms have been deprecated since 2005 and 2011,\u003cbr/\u003e\nrespectively. Furthermore, these directories will finally be removed in Git 3.0.\u003c/p\u003e\n\u003ch2 id=\"git-branding\" tabindex=\"-1\"\u003eGit branding \u003ca href=\"#git-branding\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIn 2007, the first Git logo was created. It’s arguable if you can call it a logo, because it only consisted of three red minus signs above three green plus signs, reflecting what the output of \u003ccode\u003egit diff\u003c/code\u003e looks like:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/7osV14Ac9DSSLpIDu1fpTc/3bb22ea949094764e8ec0dc009620093/image3.png\" alt=\"three red minus signs above three green plus signs, reflecting what the output of \"/\u003e\u003c/p\u003e\n\u003cp\u003eA bit later, in 2008, the website \u003ca href=\"https://git-scm.com\"\u003egit-scm.com\u003c/a\u003e was launched:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/42hvCFymDZpr371GkfHaZG/a25d6226d3bf92ef561e24c65bdd72f6/image4.png\" alt=\"landing page for git-scm.com in 2006\"/\u003e\u003c/p\u003e\n\u003cp\u003eIn 2012, the Git website was \u003ca href=\"https://lore.kernel.org/git/CAP2yMaJy=1c3b4F72h6jL_454+0ydEQNXYiC6E-ZeQQgE0PcVA@mail.gmail.com/\"\u003erevamped\u003c/a\u003e by Scott Chacon and Jason Long. It looks pretty similar to how it looks today:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/6djaYD1fIUcnnB4EhhSP2r/7f66f9d599f0fe2ce8295676e4808076/image2.png\" alt=\"git website revamped in 2012\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis site redesign sports the new red-orange logo designed by Jason Long; the same logo that\u0026#39;s currently used:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/4Ll0I7lJ9LIfAChLp6YyaK/92c79bea2ec8b80f3c4de37e33a067e8/image1.png\" alt=\"git logo\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"git-2.0\" tabindex=\"-1\"\u003eGit 2.0 \u003ca href=\"#git-2.0\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eGit already started to look a lot like modern Git at the 1.0 release, so we\nare going to do a big historical jump to Git 2.0. This version was\nreleased around 10 years after Git 1.0 and was the first release that\nintentionally contained backwards-incompatible changes in central workflows.\u003c/p\u003e\n\u003ch3 id=\"git-push(1)-default-behavior\" tabindex=\"-1\"\u003e\u003ccode\u003egit-push(1)\u003c/code\u003e default behavior \u003ca href=\"#git-push(1)-default-behavior\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe change that arguably caused most the confusion in this release was the\nupdated default behavior of \u003ccode\u003egit-push(1)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThere are a couple of different actions that Git could take when you push\ninto a remote repository and don’t specify exactly what you want to push:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGit could refuse to do anything, asking you to provide more information of\nwhat exactly you want to push.\u003c/li\u003e\n\u003cli\u003eGit could push the currently checked out branch.\u003c/li\u003e\n\u003cli\u003eGit could push the currently checked out branch, but only if it knows that it\nhas an equivalent on the remote side.\u003c/li\u003e\n\u003cli\u003eGit could push all of your branches that have an equivalent on the remote side.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe behavior of modern Git is the so-called \u0026#34;simple\u0026#34; strategy, which is the third\noption above. But before Git 2.0, the default behavior was the \u0026#34;matching\u0026#34;\nstrategy, which is the last option.\u003c/p\u003e\n\u003cp\u003eThe “matching” strategy was significantly more risky. You always had to make sure that you\nwere fine with pushing all of your local branches that have an equivalent on the\nremote side before pushing. Otherwise, you might have ended up\npushing changes unintentionally. As such, it was decided to change the strategy\nto \u0026#34;simple\u0026#34; to reduce the risk and help out Git beginners.\u003c/p\u003e\n\u003ch3 id=\"git-add(1)\" tabindex=\"-1\"\u003e\u003ccode\u003egit-add(1)\u003c/code\u003e \u003ca href=\"#git-add(1)\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAnother big change was the default behavior of \u003ccode\u003egit-add(1)\u003c/code\u003e when it comes to\u003cbr/\u003e\ntracked files that have been deleted. Before Git 2.0, \u003ccode\u003egit-add(1)\u003c/code\u003e wouldn\u0026#39;t\u003cbr/\u003e\nstage deleted files automatically, but you instead had to manually add each\u003cbr/\u003e\ndeleted file by using \u003ccode\u003egit-rm(1)\u003c/code\u003e to make them part of a commit. With Git 2.0, this behavior was changed so that \u003ccode\u003egit-add(1)\u003c/code\u003e also adds deleted files to the index.\u003c/p\u003e\n\n\u003cp\u003eI won’t bore you with the details around how Git works nowadays – you probably use it daily anyway, and, if you don’t, there are many tutorials out there that can help you get started. Instead, let’s celebrate the Git community, which has ensured that Git works as well as it does 20 years later.\u003c/p\u003e\n\u003cp\u003eOver time, Git has:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAccumulated 56,721 commits as of the Git 2.49 release.\u003c/li\u003e\n\u003cli\u003eReceived contributions from more than 2,000 different individuals.\u003c/li\u003e\n\u003cli\u003ePublished 60 major releases.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Git project also has a steady influx of new contributors by taking part in \u003ca href=\"https://summerofcode.withgoogle.com/\"\u003eGoogle Summer of Code\u003c/a\u003e and \u003ca href=\"https://www.outreachy.org/\"\u003eOutreachy\u003c/a\u003e. New contributors like these are what will ensure that the Git project will remain healthy in the long term.\u003c/p\u003e\n\u003cp\u003eAs such, let me extend a big thank you to all contributors. It is your contributions that have made Git possible.\u003c/p\u003e\n\u003ch2 id=\"going-forward\" tabindex=\"-1\"\u003eGoing forward \u003ca href=\"#going-forward\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIt should be an uncontroversial take to say that Git has essentially won the competition of version control systems. It has significant market share, and it isn\u0026#39;t easy to find open source projects that are using a version control system other than Git. So it has clearly done a lot of things right.\u003c/p\u003e\n\u003cp\u003eThat being said, its development hasn\u0026#39;t stood still, and there are still many challenges ahead of Git. On the one hand, we have technical challenges:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emodernization of an aging code base\u003c/li\u003e\n\u003cli\u003escaling with the ever-growing size of monorepos\u003c/li\u003e\n\u003cli\u003ehandling large binary files better\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd on the other hand, there are problems of a more social type:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eimproving the usability of Git\u003c/li\u003e\n\u003cli\u003efostering the Git community so that the project remains healthy in the long\u003cbr/\u003e\nterm\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere always remains work to be done and we at GitLab are proud to be part\u003cbr/\u003e\nof these efforts to make sure that Git continues to be a great version control\u003cbr/\u003e\nsystem for the next 20 years.\u003c/p\u003e\n\u003ch2 id=\"read-more-about-git\" tabindex=\"-1\"\u003eRead more about Git \u003ca href=\"#read-more-about-git\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/04/07/celebrating-gits-20th-anniversary-with-creator-linus-torvalds/\"\u003eCelebrating Git\u0026#39;s 20th anniversary with creator Linus Torvalds\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/03/14/whats-new-in-git-2-49-0/\"\u003eWhat\u0026#39;s new in Git 2.49.0?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2025/01/10/whats-new-in-git-2-48-0/\"\u003eWhat’s new in Git 2.48.0?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/blog/2024/05/30/a-beginners-guide-to-the-git-reftable-format/\"\u003eA beginner\u0026#39;s guide to the Git reftable format\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-04-14T00:00:00Z",
  "modifiedTime": null
}
