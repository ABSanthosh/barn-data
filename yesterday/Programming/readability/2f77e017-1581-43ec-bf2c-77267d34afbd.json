{
  "id": "2f77e017-1581-43ec-bf2c-77267d34afbd",
  "title": "Microsoft Extends SLNX Solution File Support in .NET CLI",
  "link": "https://www.infoq.com/news/2025/04/dotnet-cli-slxn-support/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Microsoft has announced experimental support for .slnx files in the .NET CLI v9.0.200, unifying the developer experience among the .NET tooling. This new feature aims to remove clutter in the solution file and to reduce friction when working with large solutions. By Edin Kapić",
  "author": "Edin Kapić",
  "published": "Fri, 25 Apr 2025 12:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Visual Studio",
    ".NET",
    "Development",
    "news"
  ],
  "byline": "Edin Kapić",
  "length": 3990,
  "excerpt": "Microsoft has announced experimental support for .slnx files in the .NET CLI v9.0.200, unifying the developer experience among the .NET tooling. This new feature aims to remove clutter in the solution",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250422123044_u1/apple-touch-icon.png",
  "text": "Microsoft has announced experimental support for .slnx files in the .NET CLI v9.0.200, unifying the developer experience among the .NET tooling. This new feature aims to remove clutter in the solution file and to reduce friction when working with large solutions. Traditionally, .sln files have been the standard for Visual Studio solutions, but they come with limitations such as manual maintenance of project references and path dependencies, difficult merging of source code changes, and overall verbosity, as can be seen in this example: Microsoft Visual Studio Solution File, Format Version 12.00 # Visual Studio Version 17 VisualStudioVersion = 17.9.34511.98 MinimumVisualStudioVersion = 10.0.40219.1 Project(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"DotNetMonitorWebApp\", \"DotNetMonitorWebApp\\DotNetMonitorWebApp.csproj\", \"{1385B389-B20C-4D19-8FE0-85629BC41343}\" EndProject Global GlobalSection(SolutionConfigurationPlatforms) = preSolution Debug|Any CPU = Debug|Any CPU Release|Any CPU = Release|Any CPU EndGlobalSection GlobalSection(ProjectConfigurationPlatforms) = postSolution {1385B389-B20C-4D19-8FE0-85629BC41343}.Debug|Any CPU.ActiveCfg = Debug|Any CPU {1385B389-B20C-4D19-8FE0-85629BC41343}.Debug|Any CPU.Build.0 = Debug|Any CPU {1385B389-B20C-4D19-8FE0-85629BC41343}.Release|Any CPU.ActiveCfg = Release|Any CPU {1385B389-B20C-4D19-8FE0-85629BC41343}.Release|Any CPU.Build.0 = Release|Any CPU EndGlobalSection GlobalSection(SolutionProperties) = preSolution HideSolutionNode = FALSE EndGlobalSection GlobalSection(ExtensibilityGlobals) = postSolution SolutionGuid = {C12E911E-FAA3-4ACE-B6BF-C3605E866483} EndGlobalSection EndGlobal The new .slnx format, based on XML and introduced in 2024, provides a more robust and flexible alternative, similar to project files in Visual Studio. It has a minimal footprint, removing the duplication of information already present in the project files. It uses a human-readable format that reduces the chances of accidental errors when manually editing the solution file. \u003cSolution\u003e \u003cProject Path=\"DotNetMonitorWebApp\\DotNetMonitorWebApp.csproj\" /\u003e \u003c/Solution\u003e MSBuild already fully supports the .slnx format since version 17.13. The experimental support for .NET CLI in version 9.0.200 allows developers to use .slnx files directly with dotnet commands (e.g., dotnet build, dotnet test). Visual Studio support for the new format might require developers enabling the 'Use Solution File Persistence Model' option listed under Environment / Preview Features. A new dotnet command called migrate helps developers convert their .sln files into .slnx files. Alternatively, from Visual Studio developers can right-click the solution node in the Solution Explorer and save the solution in the new format (if enabled in the preview options). The official recommendation is to keep either .sln or .slnx file, but not both of them in the solution folder. The .slnx file format is still officially in preview, with Microsoft encouraging developers to try the new format in their workflows and sharing their feedback with the appropriate tooling team owners. The stated goal is to make the new format the default in both Visual Studio and the .NET CLI tool. According to Microsoft, the new format will also work with legacy .NET Framework solutions. Microsoft has also released a library called Microsoft.VisualStuidio.SolutionPersistence that allows programmatic access to both .sln and .slnx file operations. This allows third-party tools to leverage the new solution format without having to create a parser for it. The comments by the developer community are mixed. Some praise the new format for simplicity and straightforward migration. Other developers think that new features such as globbing (dynamic project discovery inside a folder tree) should be added to the new format. About the Author Edin Kapić",
  "image": "https://res.infoq.com/news/2025/04/dotnet-cli-slxn-support/en/headerimage/header-1745532166066.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eMicrosoft \u003ca href=\"https://devblogs.microsoft.com/dotnet/introducing-slnx-support-dotnet-cli/\"\u003ehas announced\u003c/a\u003e experimental support for \u003ccode\u003e.slnx\u003c/code\u003e files in the .NET CLI v9.0.200, unifying the developer experience among the .NET tooling. This new feature aims to remove clutter in the solution file and to reduce friction when working with large solutions.\u003c/p\u003e\n\n\u003cp\u003eTraditionally, \u003ccode\u003e.sln\u003c/code\u003e files have been the standard for Visual Studio solutions, but they come with limitations such as manual maintenance of project references and path dependencies, difficult merging of source code changes, and overall verbosity, as can be seen in this example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.9.34511.98\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\u0026#34;{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\u0026#34;) = \u0026#34;DotNetMonitorWebApp\u0026#34;, \u0026#34;DotNetMonitorWebApp\\DotNetMonitorWebApp.csproj\u0026#34;, \u0026#34;{1385B389-B20C-4D19-8FE0-85629BC41343}\u0026#34;\nEndProject\nGlobal\nGlobalSection(SolutionConfigurationPlatforms) = preSolution\nDebug|Any CPU = Debug|Any CPU\nRelease|Any CPU = Release|Any CPU\nEndGlobalSection\nGlobalSection(ProjectConfigurationPlatforms) = postSolution\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Debug|Any CPU.Build.0 = Debug|Any CPU\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Release|Any CPU.ActiveCfg = Release|Any CPU\n{1385B389-B20C-4D19-8FE0-85629BC41343}.Release|Any CPU.Build.0 = Release|Any CPU\nEndGlobalSection\nGlobalSection(SolutionProperties) = preSolution\nHideSolutionNode = FALSE\nEndGlobalSection\nGlobalSection(ExtensibilityGlobals) = postSolution\nSolutionGuid = {C12E911E-FAA3-4ACE-B6BF-C3605E866483}\nEndGlobalSection\nEndGlobal\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ca href=\"http://devblogs.microsoft.com/visualstudio/new-simpler-solution-file-format\"\u003enew \u003ccode\u003e.slnx\u003c/code\u003e format\u003c/a\u003e, based on XML and introduced in 2024, provides a more robust and flexible alternative, similar to project files in Visual Studio. It has a minimal footprint, removing the duplication of information already present in the project files. It uses a human-readable format that reduces the chances of accidental errors when manually editing the solution file.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;Solution\u0026gt;\n\u0026lt;Project Path=\u0026#34;DotNetMonitorWebApp\\DotNetMonitorWebApp.csproj\u0026#34; /\u0026gt;\n\u0026lt;/Solution\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eMSBuild already fully supports the \u003ccode\u003e.slnx\u003c/code\u003e format since version 17.13. The experimental support for .NET CLI in version 9.0.200 allows developers to use \u003ccode\u003e.slnx\u003c/code\u003e files directly with \u003ccode\u003edotnet\u003c/code\u003e commands (e.g., \u003ccode\u003edotnet build\u003c/code\u003e, \u003ccode\u003edotnet test\u003c/code\u003e). Visual Studio support for the new format might require developers enabling the \u0026#39;\u003cem\u003eUse Solution File Persistence Model\u003c/em\u003e\u0026#39; option listed under \u003cem\u003eEnvironment / Preview Features\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eA new\u003ccode\u003e dotnet\u003c/code\u003e command called \u003ccode\u003emigrate\u003c/code\u003e helps developers convert their \u003ccode\u003e.sln\u003c/code\u003e files into \u003ccode\u003e.slnx\u003c/code\u003e files. Alternatively, from Visual Studio developers can right-click the solution node in the Solution Explorer and save the solution in the new format (if enabled in the preview options). The official recommendation is to keep either .\u003ccode\u003esln\u003c/code\u003e or \u003ccode\u003e.slnx\u003c/code\u003e file, but not both of them in the solution folder.\u003c/p\u003e\n\n\u003cp\u003eThe .\u003ccode\u003eslnx\u003c/code\u003e file format is still officially in preview, with Microsoft encouraging developers to try the new format in their workflows and sharing their feedback with the appropriate tooling team owners. The stated goal is to make the new format the default in both Visual Studio and the .NET CLI tool. \u003ca href=\"https://devblogs.microsoft.com/dotnet/introducing-slnx-support-dotnet-cli/?commentid=21528#comment-21528\"\u003eAccording to Microsoft\u003c/a\u003e, the new format will also work with legacy .NET Framework solutions.\u003c/p\u003e\n\n\u003cp\u003eMicrosoft has also released a library called \u003ca href=\"https://github.com/microsoft/vs-solutionpersistence\"\u003eMicrosoft.VisualStuidio.SolutionPersistence \u003c/a\u003ethat allows programmatic access to both .sln and .slnx file operations. This allows third-party tools to leverage the new solution format without having to create a parser for it.\u003c/p\u003e\n\n\u003cp\u003eThe comments by the developer community are mixed. Some \u003ca href=\"https://www.reddit.com/r/dotnet/comments/1cax30d/comment/l0w23w6/\"\u003epraise the new format\u003c/a\u003e for simplicity and straightforward migration. Other developers think that new features such as \u003ca href=\"https://github.com/microsoft/vs-solutionpersistence/issues/61\"\u003eglobbing\u003c/a\u003e (dynamic project discovery inside a folder tree) should be added to the new format.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Edin-Kapić\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eEdin Kapić\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-04-25T00:00:00Z",
  "modifiedTime": null
}
