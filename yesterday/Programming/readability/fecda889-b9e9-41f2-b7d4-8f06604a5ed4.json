{
  "id": "fecda889-b9e9-41f2-b7d4-8f06604a5ed4",
  "title": "The Rider 2025.2 Release Candidate Is Here!",
  "link": "https://blog.jetbrains.com/dotnet/2025/07/24/the-rider-2025-2-release-candidate/",
  "description": "Rider 2025.2 is shaping up to be a big release – especially if you’re a game developer. This update introduces powerful new debugging features for Unity, Unreal Engine, and Godot, including source-level shader debugging, mixed-mode debugging for native and managed code, and stepping time improvements. Beyond game dev, Rider 2025.2 delivers a range of enhancements […]",
  "author": "Sasha Ivanova",
  "published": "Thu, 24 Jul 2025 13:15:40 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": null,
  "byline": "Sasha Ivanova",
  "length": 8231,
  "excerpt": "Rider 2025.2 is shaping up to be a big release – especially if you’re a game developer. This update introduces powerful new debugging features for Unity, Unreal Engine, and Godot, including source-lev",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Essential productivity kit for .NET and game developers The Rider 2025.2 Release Candidate Is Here! Rider 2025.2 is shaping up to be a big release – especially if you’re a game developer. This update introduces powerful new debugging features for Unity, Unreal Engine, and Godot, including source-level shader debugging, mixed-mode debugging for native and managed code, and stepping time improvements. Beyond game dev, Rider 2025.2 delivers a range of enhancements for performance, observability, and AI-powered productivity. With the new OpenTelemetry plugin, a reworked Monitoring tool window, and support for connecting external AI clients via MCP (Model Context Protocol), this release will help you build more performant and stable applications – and enjoy the process, too. Download the RC and explore the changes: Release highlights Reworked Monitoring tool with automatic issue detection The Monitoring tool window has been entirely reimagined to make performance optimization for .NET applications simpler and more insightful. You’ll find new interactive charts, automatic issue detection on Windows, and seamless integration with Rider’s bundled profilers, dotTrace and dotMemory. With just a couple of clicks, you can navigate from a performance issue to the responsible method in the editor. OpenTelemetry plugin for in-IDE runtime observability Rider now offers an OpenTelemetry plugin, bringing runtime metrics and logs directly into your IDE. You can visualize app behavior, generate architecture diagrams, and click through from logs to the exact source code – all without leaving Rider or opening an external dashboard. Learn more about the new tool here. The OpenTelemetry plugin also integrates with MCP Servers, allowing AI tools to access logs, architecture diagrams, and other observability data. One-click MCP server setup to connect external AI clients to Rider Starting with version 2025.2, JetBrains IDEs come with an integrated MCP server, allowing external clients such as Claude Desktop, Cursor, VS Code, and others to access tools provided by the IDE. This provides users with the ability to control and interact with JetBrains IDEs without leaving their application of choice. For external clients like Claude Code, Claude Desktop, Cursor, VS Code, and Windsurf, configuration can be performed automatically. Go to Settings | Tools | MCP Server, click Enable MCP Server, and in the Clients Auto-Configuration section, click Auto-Configure for each client you want to set up for use with the MCP server. This will automatically update their JSON configuration. Restart your client for the configuration to take effect. Performance improvements Improved memory consumption We’ve fine-tuned Rider’s garbage collection settings, reducing peak managed memory usage by GC up to 20% – especially helpful when working on large codebases. Faster debugger stepping Stepping through code is now snappier, even when working with complex watches like large Unity objects or LINQ expressions. Rider now cancels unnecessary evaluations earlier for a smoother debugging experience. Code analysis and language support Extended C# 14 support Rider 2025.2 brings initial support for the latest additions in C# 14, as well as a range of other improvements to code analysis. Here are some highlights: Extension members: Initial support for code completion, usage search, and refactorings. Partial events and constructors. Null-conditional assignments using a?.b = c and a?[i] = c. User-defined compound assignment operators. Roslyn support Roslyn support in this release includes enhanced CompletionProvider functionality, enabling richer context-aware code completion through analyzers and community packages. It also introduces Roslyn suppressors, which silently suppress diagnostics in the background to reduce noise and improve clarity in the editor. F# improvements The F# plugin brings better import suggestions, smarter code annotations, improved type inference, and fixes for interop issues and F# scripts. Debugger updates Native debugging improvements Low-level exception suppression: You will now be able to prevent Rider from breaking on framework-level assertions like int3, either globally or at runtime. Step filters: Skip over library functions by treating Step Into as Step Over for selected methods. Pause All Processes: Coordinate debugging across multiple processes with new actions to pause, resume, or stop them together. Remote native debugging: Attach to native processes on a remote machine via SSH. [Windows only] Game development Unity Shader debugging: Debug ShaderLab code in Rider using the integrated Frame Viewer with full support for breakpoints, draw calls, texture inspection, and more. [Windows only] Mixed-mode debugging: Step seamlessly between managed (C#) and native (C++) code in Unity projects. [Windows only] Unity Profiler integration is now enabled by default to display profiling results directly in your editor. Unreal Engine Show Usages for UINTERFACE in Blueprints. Code completion for BlueprintGetters and Setters. .uproject loader suggestions: Use the native .uproject format instead of generating solution files, simplifying project setup on Windows, Mac, and Linux. Godot For Godot development, Rider now bundles a new GDScript plugin, providing: Smarter completions for nodes and resources. Ctrl+Click navigation, the Rename refactoring, and Find Usages. Scene Preview tool window with interactive tree, parent method highlights, and performance monitors. Deeper code inspections, stricter untyped value handling, and many fixes for test running and C++ build scenarios. Web and database development TypeScript-Go language server support Rider 2025.2 introduces experimental support for the new TypeScript-Go language server, bringing improved performance and modern architecture to TypeScript development. You can enable it in your project by installing the @typescript/native-preview package as a dependency in place of TypeScript. Rider will automatically detect and use the correct language server. SQL project support  Rider now provides support for SQL database projects via a new bundled plugin. The plugin works out of the box and delivers a smoother experience when working with SQL database projects. Deprecations and notices Code coverage for Mono and Unity has been removed in this release due to low usage and high maintenance costs. Coverage may return once Unity adopts CoreCLR. Dynamic Program Analysis (DPA) will be sunset in Rider 2025.3, with parts of its functionality integrated into the new Monitoring tool window for a more consistent performance analysis experience. You can download and install Rider 2025.2 RC from our website right now: We’d love to hear what you think. If you run into any issues or have suggestions, please let us know here in the comments section, over on our issue tracker, or on our social media – X and Bluesky. Subscribe to a monthly digest curated from the .NET Tools blog: Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/07/Social_Share_Blog_1280x720-2x-11.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/dotnet/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/Frame-1321314548.svg\" alt=\"Dotnet logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eEssential productivity kit for .NET and game developers\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                                        \u003ch2 id=\"major-updates\"\u003eThe Rider 2025.2 Release Candidate Is Here!\u003c/h2\u003e                    \n                    \n\u003cp\u003eRider 2025.2 is shaping up to be a big release – especially if you’re a game developer. This update introduces powerful new debugging features for Unity, Unreal Engine, and Godot, including source-level shader debugging, mixed-mode debugging for native and managed code, and stepping time improvements.\u003c/p\u003e\n\n\n\n\u003cp\u003eBeyond game dev, Rider 2025.2 delivers a range of enhancements for performance, observability, and AI-powered productivity. With the new OpenTelemetry plugin, a reworked \u003cem\u003eMonitoring\u003c/em\u003e tool window, and support for connecting external AI clients via MCP (Model Context Protocol), this release will help you build more performant and stable applications – and enjoy the process, too.\u003c/p\u003e\n\n\n\n\u003cp\u003eDownload the RC and explore the changes:\u003c/p\u003e\n\n\n    \n\n\n\n\n\n\n\n\u003ch2\u003eRelease highlights\u003c/h2\u003e\n\n\n\n\u003ch3\u003eReworked \u003cem\u003eMonitoring\u003c/em\u003e tool with automatic issue detection\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe \u003cem\u003eMonitoring\u003c/em\u003e tool window has been entirely reimagined to make performance optimization for .NET applications simpler and more insightful. You’ll find new interactive charts, automatic issue detection on Windows, and seamless integration with Rider’s bundled profilers, dotTrace and dotMemory. With just a couple of clicks, you can navigate from a performance issue to the responsible method in the editor.\u003c/p\u003e\n\n\n\n\u003ch3\u003eOpenTelemetry plugin for in-IDE runtime observability\u003c/h3\u003e\n\n\n\n\u003cp\u003eRider now offers an OpenTelemetry plugin, bringing runtime metrics and logs directly into your IDE. You can visualize app behavior, generate architecture diagrams, and click through from logs to the exact source code – all without leaving Rider or opening an external dashboard. Learn more about the new tool \u003ca href=\"https://blog.jetbrains.com/dotnet/2025/06/16/opentelemetry-plugin-for-jetbrains-rider/\" data-type=\"link\" data-id=\"https://blog.jetbrains.com/dotnet/2025/06/16/opentelemetry-plugin-for-jetbrains-rider/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe OpenTelemetry plugin also \u003cstrong\u003eintegrates with MCP Servers\u003c/strong\u003e, allowing AI tools to access logs, architecture diagrams, and other observability data.\u003c/p\u003e\n\n\n\n\u003ch3\u003eOne-click MCP server setup to connect external AI clients to Rider\u003c/h3\u003e\n\n\n\n\u003cp\u003eStarting with version 2025.2, JetBrains IDEs come with an integrated \u003ca href=\"https://plugins.jetbrains.com/plugin/26071-mcp-server\" target=\"_blank\" rel=\"noopener\"\u003eMCP server\u003c/a\u003e, allowing external clients such as Claude Desktop, Cursor, VS Code, and others to access tools provided by the IDE. This provides users with the ability to control and interact with JetBrains IDEs without leaving their application of choice.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor external clients like Claude Code, Claude Desktop, Cursor, VS Code, and Windsurf, configuration can be performed automatically. Go to \u003cem\u003eSettings | Tools | MCP Server\u003c/em\u003e, click \u003cem\u003eEnable MCP Server\u003c/em\u003e, and in the \u003cem\u003eClients Auto-Configuration\u003c/em\u003e section, click \u003cem\u003eAuto-Configure\u003c/em\u003e for each client you want to set up for use with the MCP server. This will automatically update their JSON configuration. Restart your client for the configuration to take effect.\u003c/p\u003e\n\n\n\n\u003ch2\u003ePerformance improvements\u003c/h2\u003e\n\n\n\n\u003ch3\u003eImproved memory consumption\u003c/h3\u003e\n\n\n\n\u003cp\u003eWe’ve fine-tuned Rider’s garbage collection settings, reducing peak managed memory usage by GC up to 20% – especially helpful when working on large codebases.\u003c/p\u003e\n\n\n\n\u003ch3\u003eFaster debugger stepping\u003c/h3\u003e\n\n\n\n\u003cp\u003eStepping through code is now snappier, even when working with complex watches like large Unity objects or LINQ expressions. Rider now cancels unnecessary evaluations earlier for a smoother debugging experience.\u003c/p\u003e\n\n\n\n\u003ch2\u003eCode analysis and language support\u003c/h2\u003e\n\n\n\n\u003ch3\u003eExtended C# 14 support\u003c/h3\u003e\n\n\n\n\u003cp\u003eRider 2025.2 brings initial support for the latest additions in C# 14, as well as a range of other improvements to code analysis. Here are some highlights:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eExtension members: Initial support for code completion, usage search, and refactorings.\u003c/li\u003e\n\n\n\n\u003cli\u003ePartial events and constructors.\u003c/li\u003e\n\n\n\n\u003cli\u003eNull-conditional assignments using \u003ccode\u003ea?.b = c\u003c/code\u003e and \u003ccode\u003ea?[i] = c\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003eUser-defined compound assignment operators.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eRoslyn support\u003c/h3\u003e\n\n\n\n\u003cp\u003eRoslyn support in this release includes enhanced \u003ccode\u003eCompletionProvider\u003c/code\u003e functionality, enabling richer context-aware code completion through analyzers and community packages. It also introduces Roslyn suppressors, which silently suppress diagnostics in the background to reduce noise and improve clarity in the editor.\u003c/p\u003e\n\n\n\n\u003ch3\u003eF# improvements\u003c/h3\u003e\n\n\n\n\u003cp\u003eThe F# plugin brings better import suggestions, smarter code annotations, improved type inference, and fixes for interop issues and F# scripts.\u003c/p\u003e\n\n\n\n\u003ch2\u003eDebugger updates\u003c/h2\u003e\n\n\n\n\u003ch3\u003eNative debugging improvements\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.jetbrains.com/dotnet/2025/06/26/rider-2025-2-eap-7-low-level-exception-suppression/#low-level-exception-suppression-in-the-native-debugger\" data-type=\"link\" data-id=\"https://blog.jetbrains.com/dotnet/2025/06/26/rider-2025-2-eap-7-low-level-exception-suppression/#low-level-exception-suppression-in-the-native-debugger\"\u003e\u003cstrong\u003eLow-level exception suppression\u003c/strong\u003e\u003c/a\u003e: You will now be able to prevent Rider from breaking on framework-level assertions like \u003ccode\u003eint3\u003c/code\u003e, either globally or at runtime.\u003c/li\u003e\n\n\n\n\u003cli\u003eStep filters: Skip over library functions by treating \u003cem\u003eStep Into\u003c/em\u003e as \u003cem\u003eStep Over\u003c/em\u003e for selected methods.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003ePause All Processes\u003c/em\u003e: Coordinate debugging across multiple processes with new actions to pause, resume, or stop them together.\u003c/li\u003e\n\n\n\n\u003cli\u003eRemote native debugging: Attach to native processes on a remote machine via SSH. [Windows only]\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eGame development\u003c/h2\u003e\n\n\n\n\u003ch3\u003eUnity\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eShader debugging: Debug \u003ccode\u003eShaderLab\u003c/code\u003e code in Rider using the integrated \u003cem\u003eFrame Viewer\u003c/em\u003e with full support for breakpoints, draw calls, texture inspection, and more. [Windows only]\u003c/li\u003e\n\n\n\n\u003cli\u003eMixed-mode debugging: Step seamlessly between managed (C#) and native (C++) code in Unity projects. [Windows only]\u003c/li\u003e\n\n\n\n\u003cli\u003eUnity Profiler integration is now enabled by default to display profiling results directly in your editor.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eUnreal Engine\u003c/h3\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eShow Usages\u003c/em\u003e for \u003ccode\u003eUINTERFACE\u003c/code\u003e in Blueprints.\u003c/li\u003e\n\n\n\n\u003cli\u003eCode completion for BlueprintGetters and Setters.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e.uproject \u003c/code\u003eloader suggestions: Use the native \u003ccode\u003e.uproject\u003c/code\u003e format instead of generating solution files, simplifying project setup on Windows, Mac, and Linux.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3\u003eGodot\u003c/h3\u003e\n\n\n\n\u003cp\u003eFor Godot development, Rider now bundles a new GDScript plugin, providing:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eSmarter completions for nodes and resources.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ckbd\u003eCtrl+Click\u003c/kbd\u003e navigation, the \u003cem\u003eRename\u003c/em\u003e refactoring, and \u003cem\u003eFind Usages\u003c/em\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cem\u003eScene Preview\u003c/em\u003e tool window with interactive tree, parent method highlights, and performance monitors.\u003c/li\u003e\n\n\n\n\u003cli\u003eDeeper code inspections, stricter untyped value handling, and many fixes for test running and C++ build scenarios.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eWeb and database development\u003c/h2\u003e\n\n\n\n\u003ch3\u003eTypeScript-Go language server support\u003c/h3\u003e\n\n\n\n\u003cp\u003eRider 2025.2 introduces experimental support for the new TypeScript-Go language server, bringing improved performance and modern architecture to TypeScript development.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can enable it in your project by installing the \u003ccode\u003e@typescript/native-preview\u003c/code\u003e package as a dependency in place of TypeScript. Rider will automatically detect and use the correct language server.\u003c/p\u003e\n\n\n\n\u003ch3\u003eSQL project support \u003c/h3\u003e\n\n\n\n\u003cp\u003eRider now provides support for SQL database projects via a new bundled plugin. The plugin works out of the box and delivers a smoother experience when working with SQL database projects.\u003c/p\u003e\n\n\n\n\u003ch2\u003eDeprecations and notices\u003c/h2\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCode coverage for Mono and Unity\u003c/strong\u003e has been removed in this release due to low usage and high maintenance costs. Coverage may return once Unity adopts CoreCLR.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eDynamic Program Analysis (DPA)\u003c/strong\u003e will be sunset in Rider 2025.3, with parts of its functionality integrated into the new \u003cem\u003eMonitoring\u003c/em\u003e tool window for a more consistent performance analysis experience.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eYou can download and install Rider 2025.2 RC from our website right now:\u003c/p\u003e\n\n\n    \n\n\n\n\n\n\n\n\u003cp\u003eWe’d love to hear what you think. If you run into any issues or have suggestions, please let us know here in the comments section, over on our \u003ca href=\"https://youtrack.jetbrains.com/issues/RIDER\" target=\"_blank\" rel=\"noopener\"\u003eissue tracker\u003c/a\u003e, or on our social media – \u003ca href=\"https://x.com/JetBrainsRider\" target=\"_blank\"\u003eX\u003c/a\u003e and \u003ca href=\"https://bsky.app/profile/jetbrains-rider.bsky.social\" target=\"_blank\" rel=\"noopener\"\u003eBluesky\u003c/a\u003e.\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to a monthly digest curated from the .NET Tools blog:\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": null,
  "modifiedTime": null
}
