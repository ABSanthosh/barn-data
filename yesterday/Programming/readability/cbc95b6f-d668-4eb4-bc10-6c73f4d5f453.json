{
  "id": "cbc95b6f-d668-4eb4-bc10-6c73f4d5f453",
  "title": "Refresh of Agile Threat Modeling",
  "link": "https://martinfowler.com/articles/agile-threat-modelling.html",
  "description": "",
  "author": "",
  "published": "2025-05-20T09:20:00-04:00",
  "source": "https://martinfowler.com/feed.atom",
  "categories": null,
  "byline": "Gayathri Mohan",
  "length": 39134,
  "excerpt": "Threat modeling is a risk based approach to cyber security requirements analysis.",
  "siteName": "martinfowler.com",
  "favicon": "",
  "text": "Every software team should strive for excellence in building security into their application and infrastructure. Within Thoughtworks, we have long sought accessible approaches to threat modeling. At its heart, threat modeling is a risk-based approach to designing secure systems by identifying threats continually and developing mitigations intentionally. We believe effective threat modeling should start simple and grow incrementally, rather than relying on exhaustive upfront analysis. To demonstrate this in practice, we begin with outlining the core insights required for threat modeling. We then dive into practical threat modeling examples using the STRIDE framework. Breaking Down the Fundamentals Start from your Dataflows Today’s cyber threats can seem overwhelming. Ransomware, supply chain attacks, backdoors, social engineering - where should your team begin? The attacks we read about in breach reports often chain together in unexpected and chaotic ways. The key to cutting through complexity in threat modeling lies in tracing how data moves through your technology stack. Start with following where the data enters your boundary. Typically, it could be via user interfaces, APIs, message queues, or model endpoints. Dive into getting a deeper understanding of how it flows between services, through data stores, and across trust boundaries through integrated systems. This concrete layout of the data flow between systems would transform vague worries, such as, “Should we worry about hackers?” into specific actionable questions. For example, “What happens if this API response is tampered with?” or “What if this model input is poisoned?”. The Crux to Identifying Threats From there on, identifying threats can become deceptively simple: follow each one of the data flows and ask “What can go wrong?”. You'll find that this simple question will lead to complex technical and socio-behavioural analysis that will challenge your unconscious assumptions. It will force you to pivot from thinking “how system works” to “how system fails”, which in essence is the crux of threat modeling. Let’s try it. We have an API for a messaging service that accepts two inputs: a message and the recipient’s ID, which then delivers the message to all internal staff. Follow through the carousel below to see how threats appear even this simple data flow. External user Phishing attempt Messaging Service On the outset, we see an uncomplicated data flow where an external user sends a message to the messaging service with no explicit notion of security threats. This is the 'how system works' view. But when we make a cognitive pivot and ask the question, 'What can go wrong?' with this data flow, we can easily spot the potential for a phishing attempt since the API is unprotected. Any attacker could send malicious content using this API and cause harm to the staff. Like illustrated in the carousel above, even a simple dataflow could warrant potential threats and cause havoc massively. By layering the question “What can go wrong?”, we have been able to expose this perspective that would otherwise remain hidden. The essence of doing this at this small scale leads to adding appropriate defense mechanisms incrementally within every data flow and therefore build a secure system. STRIDE as a Practical Aid Brainstorming threats can become open-ended without structured frameworks to guide your thinking. As you follow key data flows through your system, use STRIDE to turbocharge your security thinking. STRIDE is an acronym and mnemonic to help remember six key information security properties, so you can methodically identify common security vulnerabilities. Mentally check each one off each time you consider a data flow: Spoofed identity: Is there Authentication? Should there be? - Attackers pretending to be legitimate users through stolen credentials, phishing, or social engineering. Tampering with input: What about nasty input? - Attackers modifying data, code, or memory maliciously to break your system's trust boundaries. Repudiation: Does the system show who is accountable? - When something goes wrong, can you prove which user performed an action, or could they plausibly deny responsibility due to insufficient audit trails? Information disclosure: Is sensitive data inappropriately exposed or unencrypted? - Unauthorized access to sensitive data through poor access controls, cleartext transmission, or insufficient data protection. Denial of service: What if we smash it? - Attacks aiming at making the system unavailable to legitimate users by flooding or breaking critical components. Elevation of privilege: Can I bypass Authorization? Move deeper into the system? - Attackers gaining unauthorized access levels, obtaining higher permissions than intended, or moving laterally through your system. We use these STRIDE cards internally during threat modeling sessions either as printed cards or have them on screen. Another great way to help brainstorm, is to use GenAI. You don't need any fancy tool just prompt using a normal chat interface. Give some context on the dataflow and tell it to use STRIDE- most of the time you'll get a really helpful list of threats to consider. Work 'Little and Often' Once you get the hang of identifying threats, it's tempting to organize a full-day workshop to “threat model” every dataflow in your entire syste at once. This big-bang approach often overwhelms teams and rarely sticks as a consistent practice. Instead, integrate threat modeling regularly, like continuous integration for security. The most effective threat modeling happens in bite-sized chunks, closely tied to what your team is working on right now. Spending fifteen minutes examining the security implications of a new feature can yield more practical value than hours analyzing hypothetical scenarios for code that isn’t written yet. These small sessions fit naturally into your existing rhythms - perhaps during sprint planning, design discussions, or even daily standups. This “little and often” approach brings multiple benefits. Teams build confidence gradually, making the practice less daunting. You focus on immediate, actionable concerns rather than getting lost in edge cases. Most importantly, threat modeling becomes a natural part of how your team thinks about and delivers software, rather than a separate security activity. It's a Team Sport! Effective threat modeling draws strength from diverse perspectives. While a security specialist might spot technical vulnerabilities, a product owner could identify business risks, and a developer might see implementation challenges. Each viewpoint adds depth to your understanding of potential threats. This doesn't mean you need formal workshops with the entire organization. A quick conversation by the team's whiteboard can be just as valuable as a structured session. What matters is bringing different viewpoints together - whether you're a small team huddled around a screen, or collaborating remotely with security experts. The goal isn't just to find threats - it's to build shared understanding. When a team threat models together, they develop a common language for discussing security. Developers learn to think like attackers, product owners understand security trade-offs, and security specialists gain insight into the system's inner workings. You don't need security expertise to start. Fresh eyes often spot risks that experts might miss, and every team member brings valuable context about how the system is built and used. The key is creating an environment where everyone feels comfortable contributing ideas, whether they're seasoned security professionals or completely new to threat modeling. Navigation from here Now that we've established the core principles of threat modeling, it's time to put theory into practice. Like any skill worth mastering, threat modeling isn't something you can fully grasp through explanation alone—it requires hands-on experience. The concepts might make sense intellectually, but the real learning happens when you start applying them. In the following sections, we'll walk through practical exercises where you can actively identify threats alongside us, developing the mental frameworks that make effective threat modeling possible. You'll see, every threat modeling exercise follows the same pattern as seen below in the table, where a set of structured activities, each leading to a specified outcome, is conducted within a team. We've also laid out a few different formats for the teams to run these activities. For example, as quick sessions at a whiteboard, or as a singular long-ish workshop. As with all agile ways of working, the key is finding what works in your team's context. ActivityQuestionOutcome Explain and exploreWhat are you building?A technical diagram Identify threatsWhat can go wrong?A list of threats Prioritize and fixWhat are you going to do?Prioritized fixes added to backlog The examples in this article are independent from each other. So you can pick and choose the one that which most suits your current needs, or feel free to stick through them all to gain varied perspectives. Once you've grasped the gist of it, we highly recommend you pick a suitable format that fits your team's ways of working and give it a headstart immediately. Nothing can beat learning from hands-on practice! Quick Team Threat Modeling Approach and Preparation A quick whiteboard session within the team provides an accessible starting point for threat modeling. Rather than attempting exhaustive analysis, these informal 15-30 minute sessions focus on examining immediate security implications of features your team is currently developing. Let's walk through the steps to conduct one with an example. Let's say, a software team is working on an order management system, and is planning an epic, where store assistants can create and modify customer orders. This is a perfect scope for a threat modeling session. It is focused on a single feature with clear boundaries. The session requires participation from development team members, who can elaborate the technical implementation. It's great to get attendance from product owners, who know the business context, and security specialists, who can provide valuable input but don't have to be blocked by their unavailability. Anyone involved in building or supporting the feature, such as the testers or the business analysts too, should be encouraged to join and contribute their perspective. The materials needed are straightforward: a whiteboard or shared digital canvas, different colored markers for drawing components, data flows, and sticky notes for capturing threats. Once the team is gathered with these materials, they're ready to 'explain and explore'. Explain and Explore In this stage, the team aims to gain a common understanding of the system from different perspectives before they start to identify threats. Typically, the product owner begins the session with an elaboration of the functional flows highlighting the users involved. A technical overview from developers follows after with them also capturing the low-level tech diagram on the whiteboard. Here might be a good place to put those colored markers to use to clearly classify different internal and external systems and their boundaries as it helps in identifying threats greatly later on. Once this low-level technical diagram is up, the entities that lead to financial loss, reputation loss, or that results in legal disputes are highlighted as 'assets' on the whiteboard before the floor opens for threat modeling. A worked example: For the order management scope — create and modify orders — the product owner elaborated the functional flows and identified key business assets requiring protection. The flow begins with the customer service executive or the store assistant logging in the web UI, landing on the home page. To modify the order, the user will have to search the order ID from the home page, land on the orders page, and change the details required. To create a new order, the user will have to use the create order page by navigating from the home page menu. The product owner emphasized that customer data and order information are critical business assets that drive revenue and maintain customer trust, particularly as they are covered by GDPR. The developers walked through the technical components supporting the functional flow. They noted an UI component, an authentication service, a customer database, an order service and the orders database. They further elaborated the data flows between the components. The UI sends the user credentials to the authentication service to verify the user before logging them in, and then it calls the order service to perform /GET, /POST, and /DELETE operations to view, create and delete orders respectively. They also noted the UI component as the least trusted since it's exposed to external access during these discussions. The carousel below shows how the order management team went about capturing the low-level technical diagram step-by-step on the whiteboard: External Customer UI Component Authentication Service Order Service Customer Database Sensitive asset Orders Database Sensitive asset Step 1: Start with capturing the key system components. The order management system has a UI component, backend services, and databases. Step 2: Represent the users of the system. Remember to capture the external systems with direct access separately, so that you can indicate the trust boundaries later on. Step 3: Indicate the data flows through the system components clearly. Draw the arrows starting from where the request is initiated with the arrow head pointing the right direction. Step 4: Finally, highlight the assets. Step 5: Optionally, you can group components that are in the same trust boundary. For instance, the UI could be prone to external threats vs. the internal services hosted in a secure infrastructure. Throughout the discussion, the team members were encouraged to point out missing elements or corrections. The goal was to ensure everyone understood the accurate representation of how the system worked before diving into threat modeling. As the next step, they went on to identifying the critical assets that need protection based on the following logical conclusions: Order information: A critical asset as tampering them could lead to loss in sales and damaged reputation. Customer details: Any exposure to sensitive customer details could result in legal issues under privacy laws. With this concrete layout of the system and its assets, the team went on to brainstorming threats directly. Identify Threats In the whiteboarding format, we could run the blackhat thinking session as follows: First, distribute the sticky notes and pens to everyone. Take one data flow on the low-level tech diagram to discuss threats. Ask the question, “what could go wrong?” while prompting through the STRIDE threat categories. Capture threats, one per sticky, with the mandate that the threat is specific such as “SQL injection from Internet” or “No encryption of customer data”. Place stickies where the threat could occur on the data flow visibly. Keep going until the team runs out of ideas! Remember, attackers will use the same data flows as legitimate users, but in unexpected ways. Even a seemingly simple data flow from an untrusted source can cause significant havoc, and therefore, its essential to cover all the data flows before you end the session. A worked example: The order management team opened the floor for black hat thinking after identifying the assets. Each team member was encouraged to think like a hacker and come up with ways to attack the assets. The STRIDE cards were distributed as a precursor. The team went ahead and flushed the board with their ideas freely without debating if something was really a threat or not for now, and captured them as stickies along the data flows. Try coming up with a list of threats based on the system understanding you’ve so far. Recall the crux of threat modeling. Start thinking what can go wrong and cross-check with the list the team came up with. You may have identified more as well. 🙂 The carousel here shows how threats are captured along the data flows on the tech diagram as the team brainstorms: External Customer Credential Stuffing UI Component Authentication Service Order Service Auth Flooding SQL Injection Customer Database Order Denial Sensitive asset Orders Database Unencrypted Data Sensitive asset Library Exploit The team started with one data flow at a time for black hat thinking. As they went through the STRIDE categories one-by-one, they captured the threats in the respective data flows as highlighted in the subsequent images. We've demonstrated only one threat per category in the images here to keep things simple but the team could add as many as they can think of in a similar fashion. The first cue is 'spoofed identity'. Since MFA isn't a feature yet in the system, it is possible for an attacker to use username and password pairs harvested from other breaches to login and create fraudulent orders. The second cue is 'tampering'. An attacker could exploit poorly validated input from the UI/API to inject malicious SQL commands, potentially modifying order details, prices, or even deleting order records entirely. The third cue is 'repudiation'. Without proper logging and non-repudiation controls, a customer could claim they never authorized a purchase, leading to disputes and potential financial losses. The fourth cue is 'information disclosure'. Attackers could abuse the unencrypted network traffic to intercept the sensitive customer information in transit, leading to legal lawsuits. The fifth cue is 'denial of service'. As the system doesn't prohibit anyone from making a series of login attempts, attackers could flood the authentication service, and bring it down. This could result in loss of sales for a prolonged period of time. The sixth cue is 'elevation of privilege'. It is possible for any library used within the system to have open vulnerabilities that could provide access to the trusted network boundaries. For example, the order Service could be exploited to take control of the underlying operating system with such open vulnerabilities, which can become a stepping stone for future attacks, potentially compromising the entire system. The team flooded the whiteboard with many threats as stickies on the respective data flows similar to those depicted in the carousel above: CategoryThreats Spoofed identity 1. Social engineering tricks could be played on the customer service executive or store assistant to get their login credentials, or just shoulder surfing or malware might do the trick. They can use it to change the orders. 2. The store assistant could forget to log out, and anyone in the store could use the logged-in session to change the delivery addresses of existing orders (e.g., to their own address) Tampering with inputs 3. The attacker could get hold of the order service endpoints from any open browser session and tamper with orders later, if the endpoints are not protected. 4. Code injection could be used while placing an order to hijack customer payment details. Repudiation of actions 5. Developers with production access, when they find out there are no logs for their actions, could create bulk orders for their family and friends by directly inserting records in the database and triggering other relevant processes. Information disclosure 6. If the database is attacked via a back door, all the information it holds will be exposed, when the data is stored in plain text. 7. Stealing passwords from unencrypted logs or other storage would enable the attacker to tamper with order data. 8. The customer service executive or store assistant doesn’t have any restrictions on their operations—clarifying clear roles and responsibilities may be required as they could work with an accomplice to abuse their permissions. 9. The /viewOrders endpoint allows any number of records to be returned. Once compromised, this endpoint could be used to view all orders. The team made a note to at least think of reducing the blast radius. Denial of service 10. The attacker could perform a Distributed Denial of Service (DDoS) attack and bring down the order service once they get hold of the endpoint, leading to loss of sales. Elevation of privileges 11. If an attacker manages to get hold of the credentials of any developer with admin rights, they could add new users or elevate the privileges of existing users to maintain an elevated level of access to the system in the future. They could also create, modify, or delete order records without anyone noticing, as there are no logs for admin actions. NOTE: This exercise is intended only to get you familiar with the threat modeling steps, not to provide an accurate threat model for an order management system. Later, the team went on to discuss the threats one by one and added their points to each of them. They noticed several design flaws, nuanced permission issues and also noted to discuss production privileges for team members. Once the discussion delved deeper, they realized most threats seemed critical and that they need to prioritize in order to focus on building the right defenses. Prioritize and Fix Time to turn threats into action. For each identified threat, evaluate its risk by considering likelihood, exposure, and impact. You can also try to come up with a dollar value for the loss of the respective asset. That might sound daunting, but you just need to think about whether you've seen this threat before, if it's a common pattern like those in the OWASP Top 10, and how exposed your system is. Consider the worst case scenario, especially when threats might combine to create bigger problems. But we are not done yet. The goal of threat modeling isn't to instill paranoia, but to drive improvement. Now that we have identified the top threats, we should adopt day-to-day practices to ensure the appropriate defense is built for them. Some of the day-to-day practices you could use to embue security into are: Add security related acceptance criteria on existing user stories Create focused user stories for new security features Plan spikes when you need to investigate solutions from a security lens Update 'Definition of Done' with security requirements Create epics for major security architecture changes Remember to take a photo of your threat modeling diagram, assign action items to the product owner/tech lead/any team member to get them into the backlog as per one of the above ways. Keep it simple and use your normal planning process to implement them. Just tag them as 'security-related' so you can track their progress consciously. A worked example: The order management team decided to address the threats in the following ways: 1. adding cross-functional acceptance criteria across all the user stories, 2. creating new security user stories and 3. following security by design principles as elaborated here: ThreatsMeasures Any unencrypted sensitive information in the logs, transit, and the database at rest is vulnerable for attacks. The team decided to address this threat by adding a cross-functional acceptance criteria to all of their user stories. “All sensitive information such as order data, customer data, access tokens, and development credentials should be encrypted in logs, in transit and in the database.” Unprotected Order service APIs could lead to exposure of order data. Although the user has to be logged in to see the orders (is authenticated), the team realized there is nothing to stop unauthenticated requests direct to the API. This would have been a pretty major flaw if it had made it into production! The team had not spotted it before the session. They added the following user story so it can be tested explicitly as part of sign-off. “GIVEN any API request is sent to the order service WHEN there is no valid auth token for the current user included in the request THEN the API request is rejected as unauthorized.” This is a critical architecture change as they need to implement a mechanism to validate if the auth token is valid by calling the authentication service. And the authentication service needs to have a mechanism to validate if the request is coming only from a trusted source. So they captured it as a separate user story. Login credentials of store assistants and customer service executives are prone to social engineering attacks. Given that there are significant consequences to the loss of login credentials, the team realized they need to add an epic around multi-factor authentication, role based authorization restrictions, time based auto-logout from the browser to their backlog. This is a significant chunk of scope that would have been missed otherwise leading to unrealistic release timelines. Along with these specific actions, the team staunchly decided to follow the principle of least privileges where each team member will only be provided the least minimum required access to any and all test and production environments, repositories, and other internal tools. Platform focussed threat model workshop Approach and Preparation There are times when security demands a larger, more cross-programme, or cross-organizational effort. Security issues often occur at the boundaries between systems or teams, where responsibilities overlap and gaps are sometimes overlooked. These boundary points, such as infrastructure and deployment pipelines, are critical as they often become prime targets for attackers due to their high privilege and control over the deployment environment. But when multiple teams are involved, it becomes increasingly hard to get a comprehensive view of vulnerabilities across the entire architecture. So it is absolutely essential to involve the right people in such cross-team threat modeling workshops. Participation from platform engineers, application developers, and security specialists is going to be crucial. Involving other roles who closely work in the product development cycle, such as the business analysts/testers, would guarantee a holistic view of risks too. Here is a preparation kit for such cross team threat modeling workshops: Collaborative tools: If running the session remotely, use tools like Mural, Miro, or Google Docs to diagram and collaborate. Ensure these tools are security-approved to handle sensitive information. Set a manageable scope: Focus the session on critical components, such as the CI/CD pipeline, AWS infrastructure, and deployment artifacts. Avoid trying to cover the entire system in one session—timebox the scope. Diagram ahead of time: Consider creating basic diagrams asynchronously before the session to save time. Ensure everyone understands the diagrams and symbols in advance. Keep the session concise: Start with 90-minute sessions to allow for discussion and learning. Once the team gains experience, shorter, more frequent sessions can be held as part of regular sprints. Engagement and facilitation: Make sure everyone actively contributes, especially in remote sessions where it's easier for participants to disengage. Use icebreakers or simple security exercises to start the session. Prioritize outcomes: Refocus the discussions towards identifying actionable security stories as it is the primary outcome of the workshop. Prepare for documenting them clearly. Identify action owners to add them to their respective backlogs. Breaks and timing: Plan for extra breaks to avoid fatigue when remote, and ensure the session finishes on time with clear, concrete outcomes. Explain and Explore We have a worked example here where we focus on threat modeling the infrastructure and deployment pipelines of the same order management system assuming it is hosted on AWS. A cross functional team comprising of platform engineers, application developers, and security specialists was gathered to uncover all of the localized and systemic vulnerabilities. They began the workshop with defining the scope for threat modeling clearly to everyone. They elaborated on the various users of the system: Platform engineers, who are responsible for infrastructure management, have privileged access to the AWS Management Console. Application developers and testers interact with the CI/CD pipelines and application code. End users interact with the application UI and provide sensitive personal and order information while placing orders. The team then captured the low-level technical diagram showing the CI/CD pipelines, AWS infrastructure components, data flows, and the users as seen in the carousel below. AWS Application Developers Platform Engineers End users Application Pipeline Infrastructure Pipeline AWS Management Console Authentication Service UI - S3 Bucket Order service - Lambda DB - aurora Step 1: Start with capturing the system components: S3 (UI), Lambda (Order service), Aurora DB, and CI/CD pipelines for application and infrastructure deployment. Step 2: Represent the users of the system. Here different users have different ways to access the system. For instance, platform engineers use the AWS console, application developers use the CI/CD pipelines, and end users use the application UI. Step 3: Indicate the dataflows by capturing the path of deployment artifacts and configuration files through the pipelines. Step 4: Mark the trust boundaries of components. Here we have grouped the AWS management zone and application services zone separately. Step 5: Highlight the assets. Here the team identified AWS Console access, CI/CD configurations, deployment artifacts, and sensitive data in Aurora DB as assets to be protected. The team moved on to identifying the key assets in their AWS-based delivery pipeline based on the following conclusions: AWS Management Console access: Since it provides powerful capabilities for infrastructure management including IAM configuration, any unauthorized changes to core infrastructure could lead to system-wide vulnerabilities and potential outages. CI/CD pipeline configurations for both application and infrastructure pipelines: Tampering with them could lead to malicious code moving into production, disrupting the business. Deployment artifacts such as application code, infrastructure as code for S3 (hosting UI), Lambda (Order service), and Aurora DB: They are sensitive IP of the organization and could be stolen, destroyed or tampered with, leading to loss of business. Authentication service: Since it allows interaction with the core identity service, it can be abused for gaining illegitimate access control to the order management system. Order data stored in the Aurora database: Since it stores sensitive business and customer information, it can lead to loss of business reputation when breached. Access credentials including AWS access keys, database passwords, and other secrets used throughout the pipeline: These can be used for ill intentions like crypto mining leading to financial losses. With these assets laid on the technical diagram, the team put on their “black hat” and started thinking about how an attacker might exploit the privileged access points in their AWS environment and the application-level components in their delivery pipeline. Identify Threats The team once again adopted the STRIDE framework to prompt the discussion (refer worked example under 'Quick Team Threat Modeling' section above for STRIDE framework elaboration) and captured all their ideas as stickies. Here's is the list of threats they identified: CategoryThreats Spoofed identity 1. An attacker could use stolen platform engineer credentials to access the AWS Management Console and make unauthorized changes to infrastructure. 2. Someone could impersonate an application developer in GitHub to inject malicious code into the CI/CD pipeline. Tampering with inputs 3. An attacker might modify infrastructure-as-code files in the GitHub repository to disable security protections. 4. Someone could tamper with source code for the app to include malicious code. Repudiation of actions 5. A platform engineer could make unauthorized changes to AWS configurations and later deny their actions due to lack of proper logging in CloudTrail. 6. An application developer could deploy ill-intended code, if there's no audit trail in the CI/CD pipeline. Information disclosure 7. Misconfigured S3 bucket permissions could expose the UI files and potentially sensitive information. 8. Improperly written Lambda functions might leak sensitive order data through verbose error messages. Denial of service 9. An attacker could exploit the autoscaling configuration to trigger unnecessary scaling, causing financial damage. 10. Someone could flood the authentication service with requests, preventing legitimate users from accessing the system. Elevation of privilege 11. An application developer could exploit a misconfigured IAM role to gain platform engineer level access. 12. An attacker might use a vulnerability in the Lambda function to gain broader access to the AWS environment. Prioritize and Fix The team had to prioritize the threats to identify the right defense measures next. The team chose to vote on threats based on their impact this time. For the top threats, they discussed the defense measures as buying secret vaults, integrating secret scanners into the pipelines, building two-factor authentications, and buying specific off the shelf security related products. Apart from the tools, they also identified the need to follow stricter practices such as the 'principle of least privileges' even within the platform team and the need to design the infrastructure components with well thought through security policies. When they had successfully translated these defense measures as security stories, they were able to identify the budget required to purchase the tools, and a plan for internal approvals and implementation, which subsequently led to a smoother cross-team collaboration. Conclusion Threat modeling isn't just another security activity - it's a transformative practice that helps teams build security thinking into their DNA. While automated checks and penetration tests are valuable, they only catch known issues. Threat modeling helps teams understand and manage evolving cyber risks by making security everyone's responsibility. Start simple and keep improving. Run retrospectives after a few sessions. Ask what worked, what didn't, and adapt. Experiment with different diagrams, try domain-specific threat libraries, and connect with the wider threat modeling community. Remember - no team has ever found this “too hard” when approached step by step. At minimum, your first session will add concrete security stories to your backlog. But the real value comes from building a team that thinks about security continuously, and not as an afterthought. Just set aside that first 30 minutes, get your team together, and start drawing those diagrams.",
  "image": "https://martinfowler.com/articles/agile-threat-modelling/card.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003eEvery software team should strive for excellence in building security into their application and infrastructure. Within Thoughtworks, we have long sought accessible approaches to threat modeling. At its heart, threat modeling is a risk-based approach to designing secure systems by identifying threats continually and developing mitigations intentionally. We believe effective threat modeling should start simple and grow incrementally, rather than relying on exhaustive upfront analysis. To demonstrate this in practice, we begin with outlining the core insights required for threat modeling. We then dive into practical threat modeling examples using the STRIDE framework.\n      \u003c/p\u003e\n\n\u003csection id=\"BreakingDownTheFundamentals\"\u003e\n\u003ch2\u003eBreaking Down the Fundamentals\u003c/h2\u003e\n\n\u003csection id=\"StartFromYourDataflows\"\u003e\n\u003ch3\u003eStart from your Dataflows\u003c/h3\u003e\n\n\u003cp\u003eToday’s cyber threats can seem overwhelming. Ransomware, supply chain\n        attacks, backdoors, social engineering - where should your team begin?\n        The attacks we read about in breach reports often chain together in\n        unexpected and chaotic ways.\u003c/p\u003e\n\n\u003cp\u003eThe key to cutting through complexity in threat modeling lies in tracing how data moves through your technology stack. Start with following where the data enters your boundary. Typically, it could be via user interfaces, APIs, message queues, or model endpoints. Dive into getting a deeper understanding of how it flows between services, through data stores, and across trust boundaries through integrated systems.\n        \u003c/p\u003e\n\n\u003cp\u003eThis concrete layout of the data flow between systems would transform vague worries, such as, “Should we worry about hackers?” into specific actionable questions. For example, “What happens if this API response is tampered with?” or “What if this model input is poisoned?”.\n        \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"TheCruxToIdentifyingThreats\"\u003e\n\u003ch3\u003eThe Crux to Identifying Threats\u003c/h3\u003e\n\n\u003cp\u003eFrom there on, identifying threats can become deceptively simple: follow each one of the data flows and ask “What can go wrong?”. You\u0026#39;ll find that this simple question will lead to complex technical and socio-behavioural analysis that will challenge your unconscious assumptions. It will force you to pivot from thinking “how system works” to “how system fails”, which in essence is the crux of threat modeling.\n        \u003c/p\u003e\n\n\u003cp\u003eLet’s try it. We have an API for a messaging service that accepts two inputs: a message and the recipient’s ID, which then delivers the message to all internal staff. Follow through the carousel below to see how threats appear even this simple data flow.\n        \u003c/p\u003e\n\n\u003cdiv data-pages=\"step-0 step-1\" id=\"threat-carousel\"\u003e\n\u003csvg id=\"\" version=\"1.1\" viewBox=\"0 0 800 300\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n\n\n\u003cg nid=\"untrusted\"\u003e\n\u003cg transform=\"translate(50, 100)\"\u003e\n\u003cpath d=\"m 22.02127,10.00741\nh 0.005\nc 2.95253,0 5.2159,2.29601 5.2425,5.316239 0.029,3.366031 -2.30931,5.86275 -5.47826,5.86275\nh -0.0399\nc -2.87153,-0.01935 -5.20018,-2.3613 -5.23282,-5.26305 -0.0411,-3.328549 2.36371,-5.913519 5.50365,-5.915939\nz\n\nm 6.32897,18.69916\nc 4.61366,-2.67144 7.33116,-7.751081 7.36124,-14.83984 -0.01,-3.64653 -1.39405,-8.00882 -5.62335,-11.04115 -2.96341,-2.12191 -6.34999,-2.82558 -9.91794,-2.82558 -0.081,0 -0.16564,0.0012 -0.24544,0.0012 -11.6734896,0.10277 -18.95325957,12.78583 -13.2827496,22.979439 1.64425,2.95681 4.3496896,4.997591 7.3301496,6.221221 -0.24548,0.37672 -0.48256,0.77549 -0.71034,1.1961 -4.6771996,7.50097 -5.9450096,6.57892 -11.0879096,14.47238 -5.05568,8.02585 -0.86286,14.63125 8.1317596,14.86799\nh 0.13083\nc 5.23479,0 7.89346,0.0654 10.54434,0.13083 2.65867,0.0654 5.30643,0.13083 10.53032,0.13083\nh 0.25855 0.0825\nc 8.73608,0 12.38221,-6.88575 7.15365,-14.32909 -5.21766,-7.36079 -4.80648,-7.2798 -9.41982,-15.11563 -0.39653,-0.67354 -0.8095,-1.28955 -1.23583,-1.84872\nz\" transform=\"scale(1.9312942085314921)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"20\" width=\"80\" x=\"50\" y=\"255.87765251188952\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eExternal user\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"phishing_attempt\"\u003e\n\u003cg transform=\"translate(290.0, 67.93882625594478)\"\u003e\n\u003cpath d=\"M 0 0 L 50 0 L 50 40 C 35 35 15 55 0 45 Z\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80.0\" width=\"80\" x=\"290.0\" y=\"67.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003ePhishing attempt\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"protected\"\u003e\n\u003crect height=\"80\" width=\"200\" x=\"530\" y=\"117.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"80\" width=\"200\" x=\"530\" y=\"117.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eMessaging Service\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 130 157.93882625594478 L 530 157.93882625594478\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 530, 157.93882625594478)translate(530 157.93882625594478)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003crect height=\"100.0\" width=\"100.0\" x=\"280.0\" y=\"57.938826255944775\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003eOn the outset, we see an uncomplicated data flow where an external user sends a message to the messaging service with no explicit\n                notion of security threats. This is the \u0026#39;how system works\u0026#39; view.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003eBut when we make a \u003ci\u003ecognitive pivot\u003c/i\u003e and ask the question, \u0026#39;What can go wrong?\u0026#39; with this data flow, we can easily spot the potential for a phishing attempt since the API is unprotected.\n                  Any attacker could send malicious content using this API and cause harm to the staff.\n                \u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/svg\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLike illustrated in the carousel above, even a simple dataflow could warrant potential threats and cause havoc massively. By layering the question “What can go wrong?”, we have been able to expose this perspective that would otherwise remain hidden. The essence of doing this at this small scale leads to adding appropriate defense mechanisms incrementally within every data flow and therefore build a secure system.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"StrideAsAPracticalAid\"\u003e\n\u003ch3\u003eSTRIDE as a Practical Aid\u003c/h3\u003e\n\n\u003cp\u003eBrainstorming threats can become open-ended without structured frameworks to guide your thinking. As you follow key data flows through your system, use STRIDE to turbocharge your security thinking. STRIDE is an acronym and mnemonic to help remember six key information security properties, so you can methodically identify common security vulnerabilities. Mentally check each one off each time you consider a data flow:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003eS\u003c/b\u003epoofed identity: \u003ci\u003eIs there Authentication? Should there be?\u003c/i\u003e - Attackers pretending to be legitimate users through stolen credentials, phishing, or social engineering.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eT\u003c/b\u003eampering with input: \u003ci\u003eWhat about nasty input?\u003c/i\u003e - Attackers modifying data, code, or memory maliciously to break your system\u0026#39;s trust boundaries.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eR\u003c/b\u003eepudiation: \u003ci\u003eDoes the system show who is accountable?\u003c/i\u003e - When something goes wrong, can you prove which user performed an action, or could they plausibly deny responsibility due to insufficient audit trails?\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eI\u003c/b\u003enformation disclosure: \u003ci\u003eIs sensitive data inappropriately exposed or unencrypted?\u003c/i\u003e - Unauthorized access to sensitive data through poor access controls, cleartext transmission, or insufficient data protection.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eD\u003c/b\u003eenial of service: \u003ci\u003eWhat if we smash it?\u003c/i\u003e - Attacks aiming at making the system unavailable to legitimate users by flooding or breaking critical components.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eE\u003c/b\u003elevation of privilege: \u003ci\u003eCan I bypass Authorization? Move deeper into the system?\u003c/i\u003e - Attackers gaining unauthorized access levels, obtaining higher permissions than intended, or moving laterally through your system.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWe use these \u003ca href=\"https://martinfowler.com/articles/agile-threat-modelling/TW_STRIDE_Cue_Cards.pdf\"\u003eSTRIDE cards\u003c/a\u003e internally during threat modeling sessions either as printed cards or have them on screen. Another great way to help brainstorm, is to use GenAI. You don\u0026#39;t need any fancy tool just prompt using a normal chat interface. Give some context on the dataflow and tell it to use STRIDE- most of the time you\u0026#39;ll get a really helpful list of threats to consider.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"WorklittleAndOften\"\u003e\n\u003ch3\u003eWork \u0026#39;Little and Often\u0026#39;\u003c/h3\u003e\n\n\u003cp\u003eOnce you get the hang of identifying threats, it\u0026#39;s tempting to organize a\n        full-day workshop to “threat model” every dataflow in your entire syste \n        at once. This big-bang approach often overwhelms teams and rarely sticks as a consistent\n        practice. Instead, integrate threat modeling regularly, like continuous integration for security.\u003c/p\u003e\n\n\u003cp\u003eThe most effective threat modeling happens in bite-sized chunks,\n        closely tied to what your team is working on right now. Spending fifteen\n        minutes examining the security implications of a new feature can yield\n        more practical value than hours analyzing hypothetical scenarios for\n        code that isn’t written yet. These small sessions fit naturally into\n        your existing rhythms - perhaps during sprint planning, design\n        discussions, or even daily standups.\u003c/p\u003e\n\n\u003cp\u003eThis “little and often” approach brings multiple benefits. Teams\n        build confidence gradually, making the practice less daunting. You focus\n        on immediate, actionable concerns rather than getting lost in edge\n        cases. Most importantly, threat modeling becomes a natural part of how\n        your team thinks about and delivers software, rather than a separate\n        security activity.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"ItsATeamSport\"\u003e\n\u003ch3\u003eIt\u0026#39;s a Team Sport!\u003c/h3\u003e\n\n\u003cp\u003eEffective threat modeling draws strength from diverse perspectives.\n        While a security specialist might spot technical vulnerabilities, a\n        product owner could identify business risks, and a developer might see\n        implementation challenges. Each viewpoint adds depth to your\n        understanding of potential threats.\u003c/p\u003e\n\n\u003cp\u003eThis doesn\u0026#39;t mean you need formal workshops with the entire\n        organization. A quick conversation by the team\u0026#39;s whiteboard can be just\n        as valuable as a structured session. What matters is bringing different\n        viewpoints together - whether you\u0026#39;re a small team huddled around a\n        screen, or collaborating remotely with security experts.\u003c/p\u003e\n\n\u003cp\u003eThe goal isn\u0026#39;t just to find threats - it\u0026#39;s to build shared\n        understanding. When a team threat models together, they develop a common\n        language for discussing security. Developers learn to think like\n        attackers, product owners understand security trade-offs, and security\n        specialists gain insight into the system\u0026#39;s inner workings.\u003c/p\u003e\n\n\u003cp\u003eYou don\u0026#39;t need security expertise to start. Fresh eyes often spot\n        risks that experts might miss, and every team member brings valuable\n        context about how the system is built and used. The key is creating an\n        environment where everyone feels comfortable contributing ideas, whether\n        they\u0026#39;re seasoned security professionals or completely new to threat\n        modeling.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"NavigationFromHere\"\u003e\n\u003ch3\u003eNavigation from here\u003c/h3\u003e\n\n\u003cp\u003eNow that we\u0026#39;ve established the core principles of threat modeling, it\u0026#39;s time to put theory into practice. Like any skill worth mastering, threat modeling isn\u0026#39;t something you can fully grasp through explanation alone—it requires hands-on experience. The concepts might make sense intellectually, but the real learning happens when you start applying them. In the following sections, we\u0026#39;ll walk through practical exercises where you can actively identify threats alongside us, developing the mental frameworks that make effective threat modeling possible.\u003c/p\u003e\n\n\u003cp\u003eYou\u0026#39;ll see, every threat modeling exercise follows the same pattern as seen below in the table, where a set of structured activities,\n          each leading to a specified outcome, is conducted within a team. We\u0026#39;ve also laid out a few different formats for the teams to run these activities.\n          For example, as quick sessions at a whiteboard, or as a singular long-ish workshop.\n          As with all agile ways of working, the key is finding what works in your team\u0026#39;s context.\n        \u003c/p\u003e\n\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\u003cth\u003eActivity\u003c/th\u003e\u003cth\u003eQuestion\u003c/th\u003e\u003cth\u003eOutcome\u003c/th\u003e\u003c/tr\u003e\n\u003c/thead\u003e\n\n\u003ctbody\u003e\n\u003ctr\u003e\u003ctd\u003eExplain and explore\u003c/td\u003e\u003ctd\u003eWhat are you building?\u003c/td\u003e\u003ctd\u003eA technical diagram\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003eIdentify threats\u003c/td\u003e\u003ctd\u003eWhat can go wrong?\u003c/td\u003e\u003ctd\u003eA list of threats\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003ePrioritize and fix\u003c/td\u003e\u003ctd\u003eWhat are you going to do?\u003c/td\u003e\u003ctd\u003ePrioritized fixes added to backlog\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n\n\n\u003cp\u003eThe examples in this article are independent from each other. So you can pick and choose the one that which most suits your current needs, or feel free to stick through them all to gain varied perspectives.\n          Once you\u0026#39;ve grasped the gist of it, we highly recommend you pick a suitable format that fits your team\u0026#39;s ways of working\n          and give it a headstart immediately. Nothing can beat learning from hands-on practice!\n        \u003c/p\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003csection id=\"QuickTeamThreatModeling\"\u003e\n\u003ch2\u003eQuick Team Threat Modeling\u003c/h2\u003e\n\n\u003csection id=\"ApproachAndPreparation\"\u003e\n\u003ch3\u003eApproach and Preparation\u003c/h3\u003e\n\n\u003cp\u003eA quick whiteboard session within the team provides an accessible\n        starting point for threat modeling. Rather than attempting exhaustive\n        analysis, these informal 15-30 minute sessions focus on examining\n        immediate security implications of features your team is currently\n        developing. Let\u0026#39;s walk through the steps to conduct one with an example.\u003c/p\u003e\n\n\u003cp\u003eLet\u0026#39;s say, a software team is working on an order\n        management system, and is planning an epic, where store assistants can\n        create and modify customer orders. This is a perfect scope for a threat modeling session. It is focused on a single feature with\n        clear boundaries.\u003c/p\u003e\n\n\u003cdiv id=\"story-card.png\"\u003e\u003cp\u003e\u003cimg src=\"https://martinfowler.com/articles/agile-threat-modelling/story-card.png\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eThe session requires participation from development team members, who can elaborate the technical implementation.\n          It\u0026#39;s great to get attendance from product owners, who know the business context, and security specialists, who can provide valuable input\n          but don\u0026#39;t have to be blocked by their unavailability. Anyone involved in building or supporting the feature, such as the testers or\n          the business analysts too, should be encouraged to join and contribute their perspective. \u003c/p\u003e\n\n\u003cp\u003eThe materials needed are straightforward:\n          a whiteboard or shared digital canvas, different colored markers for drawing components, data flows, and sticky notes for capturing threats. \u003c/p\u003e\n\n\u003cp\u003eOnce the team is gathered with these materials, they\u0026#39;re ready to \u0026#39;explain and explore\u0026#39;. \u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"ExplainAndExplore\"\u003e\n\u003ch3\u003eExplain and Explore\u003c/h3\u003e\n\n\u003cp\u003eIn this stage, the team aims to gain a common understanding of the system from different perspectives before they start to identify threats.\n          Typically, the product owner begins the session with an elaboration of the functional flows highlighting the users involved.\n          A technical overview from developers follows after with them also capturing the low-level tech diagram on the whiteboard.\n          Here might be a good place to put those colored markers to use to clearly classify different internal and external systems and their boundaries as it helps in identifying threats greatly later on.\u003c/p\u003e\n\n\u003cp\u003eOnce this low-level technical diagram is up, the entities that lead to financial loss, reputation loss, or that results in legal disputes are highlighted as \u0026#39;assets\u0026#39; on the whiteboard before\n          the floor opens for threat modeling.\u003c/p\u003e\n\n\u003csection id=\"AWorkedExample\"\u003e\n\u003ch4\u003eA worked example:\u003c/h4\u003e\n\n\u003cp\u003eFor the order management scope — create and modify orders — the product owner elaborated the functional flows and identified key business assets requiring protection. The flow begins with the customer service executive or the store assistant logging in the web UI, landing on the home page. To modify the order, the user will have to search the order ID from the home page, land on the orders page, and change the details required. To create a new order, the user will have to use the create order page by navigating from the home page menu. The product owner emphasized that customer data and order information are critical business assets that drive revenue and maintain customer trust, particularly as they are covered by GDPR.\n          \u003c/p\u003e\n\n\u003cp\u003eThe developers walked through the technical components supporting the functional flow.\n            They noted an UI component, an authentication service, a customer database, an order service and the orders database.\n            They further elaborated the data flows between the components.\n            The UI sends the user credentials to the authentication service to verify the user before logging them in,\n            and then it calls the order service to perform \u003ccode\u003e/GET\u003c/code\u003e, \u003ccode\u003e/POST\u003c/code\u003e,\n            and \u003ccode\u003e/DELETE\u003c/code\u003e operations to view, create and delete orders respectively.\n            They also noted the UI component as the least trusted since it\u0026#39;s exposed to external access during these discussions.\u003c/p\u003e\n\n\u003cp\u003e The carousel below shows how the order management team went about capturing the low-level technical diagram step-by-step on the whiteboard:\u003c/p\u003e\n\n\u003cdiv data-pages=\"step-0 step-1 step-2 step-3 step-4\" id=\"ecomm-carousel\"\u003e\n\u003csvg id=\"\" version=\"1.1\" viewBox=\"0 0 800 350\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n\n\n\u003cg nid=\"protected_zone\"\u003e\n\u003crect height=\"270.0\" width=\"330\" x=\"395\" y=\"52.938826255944775\"\u003e\u003c/rect\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"user\"\u003e\n\u003cg transform=\"translate(50, 120)\"\u003e\n\u003cpath d=\"m 22.02127,10.00741\nh 0.005\nc 2.95253,0 5.2159,2.29601 5.2425,5.316239 0.029,3.366031 -2.30931,5.86275 -5.47826,5.86275\nh -0.0399\nc -2.87153,-0.01935 -5.20018,-2.3613 -5.23282,-5.26305 -0.0411,-3.328549 2.36371,-5.913519 5.50365,-5.915939\nz\n\nm 6.32897,18.69916\nc 4.61366,-2.67144 7.33116,-7.751081 7.36124,-14.83984 -0.01,-3.64653 -1.39405,-8.00882 -5.62335,-11.04115 -2.96341,-2.12191 -6.34999,-2.82558 -9.91794,-2.82558 -0.081,0 -0.16564,0.0012 -0.24544,0.0012 -11.6734896,0.10277 -18.95325957,12.78583 -13.2827496,22.979439 1.64425,2.95681 4.3496896,4.997591 7.3301496,6.221221 -0.24548,0.37672 -0.48256,0.77549 -0.71034,1.1961 -4.6771996,7.50097 -5.9450096,6.57892 -11.0879096,14.47238 -5.05568,8.02585 -0.86286,14.63125 8.1317596,14.86799\nh 0.13083\nc 5.23479,0 7.89346,0.0654 10.54434,0.13083 2.65867,0.0654 5.30643,0.13083 10.53032,0.13083\nh 0.25855 0.0825\nc 8.73608,0 12.38221,-6.88575 7.15365,-14.32909 -5.21766,-7.36079 -4.80648,-7.2798 -9.41982,-15.11563 -0.39653,-0.67354 -0.8095,-1.28955 -1.23583,-1.84872\nz\" transform=\"scale(1.9312942085314921)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"20\" width=\"80\" x=\"50\" y=\"275.87765251188955\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eExternal Customer\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"ui\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"190\" y=\"147.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"190\" y=\"147.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eUI Component\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"auth\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"430\" y=\"97.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"430\" y=\"97.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eAuthentication Service\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"order\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"430\" y=\"217.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"430\" y=\"217.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eOrder Service\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"customer_db\"\u003e\n\u003cg transform=\"translate(610, 87.93882625594478)\"\u003e\n\u003cpath d=\"m 0 45 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 0 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 -40 c 0 2.76 11.2 5 25 5 c 13.8 0 25 -2.24 25 -5\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80\" width=\"80\" x=\"610\" y=\"87.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eCustomer Database\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"50\" width=\"100\" x=\"610.0\" y=\"62.938826255944775\"\u003e\n\u003cp\u003eSensitive asset\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cg nid=\"orders_db\"\u003e\n\u003cg transform=\"translate(610, 207.93882625594478)\"\u003e\n\u003cpath d=\"m 0 45 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 0 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 -40 c 0 2.76 11.2 5 25 5 c 13.8 0 25 -2.24 25 -5\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80\" width=\"80\" x=\"610\" y=\"207.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eOrders Database\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"50\" width=\"100\" x=\"610.0\" y=\"182.93882625594478\"\u003e\n\u003cp\u003eSensitive asset\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 130 177.93882625594478 L 190 177.93882625594478\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 190, 177.93882625594478)translate(190 177.93882625594478)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 310 177.93882625594478 L 370 177.93882625594478 L 370 127.93882625594478 L 430 127.93882625594478\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 430, 127.93882625594478)translate(430 127.93882625594478)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 310 177.93882625594478 L 370 177.93882625594478 L 370 247.93882625594478 L 430 247.93882625594478\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 430, 247.93882625594478)translate(430 247.93882625594478)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 550 127.93882625594478 L 610 127.93882625594478\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 610, 127.93882625594478)translate(610 127.93882625594478)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 550 247.93882625594478 L 610 247.93882625594478\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 610, 247.93882625594478)translate(610 247.93882625594478)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003crect height=\"135.87765251188952\" width=\"100\" x=\"40\" y=\"110\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"20.0\" width=\"80\" x=\"540\" y=\"117.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"20.0\" width=\"80\" x=\"120\" y=\"167.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"140.0\" width=\"140\" x=\"300\" y=\"117.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"20.0\" width=\"80\" x=\"540\" y=\"237.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"100.0\" width=\"100\" x=\"600\" y=\"77.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"100.0\" width=\"100\" x=\"600\" y=\"197.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"290.0\" width=\"350\" x=\"385\" y=\"42.938826255944775\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 1:\u003c/b\u003e Start with capturing the key system \u003cb\u003ecomponents\u003c/b\u003e. The order management system has a UI component, backend services, and databases.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 2:\u003c/b\u003e Represent the \u003cb\u003eusers\u003c/b\u003e of the system. Remember to capture the external systems with direct access separately, so that you can indicate the trust boundaries later on.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 3:\u003c/b\u003e Indicate the \u003cb\u003edata flows\u003c/b\u003e through the system components clearly. Draw the arrows starting from where the request is initiated with the arrow head pointing the right direction.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 4:\u003c/b\u003e Finally, highlight the \u003cb\u003eassets\u003c/b\u003e.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 5:\u003c/b\u003e Optionally, you can group components that are in the same \u003cb\u003etrust boundary\u003c/b\u003e. For instance, the UI could be prone to external threats vs. the internal services hosted in a secure infrastructure.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/svg\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThroughout the discussion, the team members were encouraged to point out missing elements or corrections.\n          The goal was to ensure everyone understood the accurate representation of how the system worked before diving into threat modeling.\u003c/p\u003e\n\n\u003cp\u003eAs the next step, they went on to identifying the critical assets that need protection based on the following logical conclusions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eOrder information: A critical asset as tampering them could lead to loss in sales and damaged reputation.\u003c/li\u003e\n\n\u003cli\u003eCustomer details: Any exposure to sensitive customer details could result in legal issues under privacy laws.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith this concrete layout of the system and its assets, the team went on to brainstorming threats directly.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003csection id=\"IdentifyThreats\"\u003e\n\u003ch3\u003eIdentify Threats\u003c/h3\u003e\n\n\u003cp\u003e\n          In the whiteboarding format, we could run the blackhat thinking session as follows:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003eFirst, distribute the sticky notes and pens to everyone.\u003c/li\u003e\n\n\u003cli\u003eTake one data flow on the low-level tech diagram to discuss threats.\u003c/li\u003e\n\n\u003cli\u003eAsk the question, “what could go wrong?” while prompting through the STRIDE threat categories.\u003c/li\u003e\n\n\u003cli\u003eCapture threats, one per sticky, with the mandate that the threat is specific such as “SQL injection from\n          Internet” or “No encryption of customer data”.\u003c/li\u003e\n\n\u003cli\u003ePlace stickies where the threat could occur on the data flow visibly.\u003c/li\u003e\n\n\u003cli\u003eKeep going until the team runs out of ideas!\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eRemember, attackers will use the same data flows as legitimate users, but in unexpected ways.\n          Even a seemingly simple data flow from an untrusted source can cause significant havoc, and therefore, its essential to cover all the data flows before you end the session.\u003c/p\u003e\n\n\u003csection id=\"AWorkedExample\"\u003e\n\u003ch4\u003eA worked example:\u003c/h4\u003e\n\n\u003cp\u003eThe order management team opened the floor for black hat thinking after identifying the assets. Each team member was\n          encouraged to think like a hacker and come up with ways to attack the assets. The STRIDE cards were distributed as a precursor.\n            The team went ahead and flushed the board with their ideas freely without debating if something was really a threat or not for now,\n            and captured them as stickies along the data flows.\u003c/p\u003e\n\n\u003cp\u003eTry coming up with a list of threats based on the system understanding you’ve so far.\n          Recall the crux of threat modeling. Start thinking what can go wrong and\n          cross-check with the list the team came up with. You may have identified\n          more as well. 🙂\u003c/p\u003e\n\n\u003cp\u003eThe carousel here shows how threats are captured along the data flows on the tech diagram as the team brainstorms:\u003c/p\u003e\n\n\u003cdiv data-pages=\"step-0 step-1 step-2 step-3 step-4 step-5 step-6\" id=\"ecomm-threats-carousel\"\u003e\n\u003csvg id=\"\" version=\"1.1\" viewBox=\"0 0 800 500\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n\n\n\u003cg nid=\"protected_zone\"\u003e\n\u003crect height=\"304.0\" width=\"304\" x=\"408\" y=\"85.93882625594478\"\u003e\u003c/rect\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"user\"\u003e\n\u003cg transform=\"translate(50, 170)\"\u003e\n\u003cpath d=\"m 22.02127,10.00741\nh 0.005\nc 2.95253,0 5.2159,2.29601 5.2425,5.316239 0.029,3.366031 -2.30931,5.86275 -5.47826,5.86275\nh -0.0399\nc -2.87153,-0.01935 -5.20018,-2.3613 -5.23282,-5.26305 -0.0411,-3.328549 2.36371,-5.913519 5.50365,-5.915939\nz\n\nm 6.32897,18.69916\nc 4.61366,-2.67144 7.33116,-7.751081 7.36124,-14.83984 -0.01,-3.64653 -1.39405,-8.00882 -5.62335,-11.04115 -2.96341,-2.12191 -6.34999,-2.82558 -9.91794,-2.82558 -0.081,0 -0.16564,0.0012 -0.24544,0.0012 -11.6734896,0.10277 -18.95325957,12.78583 -13.2827496,22.979439 1.64425,2.95681 4.3496896,4.997591 7.3301496,6.221221 -0.24548,0.37672 -0.48256,0.77549 -0.71034,1.1961 -4.6771996,7.50097 -5.9450096,6.57892 -11.0879096,14.47238 -5.05568,8.02585 -0.86286,14.63125 8.1317596,14.86799\nh 0.13083\nc 5.23479,0 7.89346,0.0654 10.54434,0.13083 2.65867,0.0654 5.30643,0.13083 10.53032,0.13083\nh 0.25855 0.0825\nc 8.73608,0 12.38221,-6.88575 7.15365,-14.32909 -5.21766,-7.36079 -4.80648,-7.2798 -9.41982,-15.11563 -0.39653,-0.67354 -0.8095,-1.28955 -1.23583,-1.84872\nz\" transform=\"scale(1.9312942085314921)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"20\" width=\"80\" x=\"50\" y=\"325.87765251188955\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eExternal Customer\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"credential_stuffing\"\u003e\n\u003cg transform=\"translate(140.0, 117.93882625594478)\"\u003e\n\u003cpath d=\"M 0 0 L 50 0 L 50 40 C 35 35 15 55 0 45 Z\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80.0\" width=\"80\" x=\"140.0\" y=\"117.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eCredential Stuffing\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"ui\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"230\" y=\"197.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"230\" y=\"197.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eUI Component\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"auth\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"430\" y=\"117.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"430\" y=\"117.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eAuthentication Service\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"order\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"430\" y=\"297.9388262559448\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"430\" y=\"297.9388262559448\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eOrder Service\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"auth_flooding\"\u003e\n\u003cg transform=\"translate(310.0, 67.93882625594478)\"\u003e\n\u003cpath d=\"M 0 0 L 50 0 L 50 40 C 35 35 15 55 0 45 Z\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80.0\" width=\"80\" x=\"310.0\" y=\"67.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eAuth Flooding\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"sql_injection\"\u003e\n\u003cg transform=\"translate(540.0, 197.93882625594478)\"\u003e\n\u003cpath d=\"M 0 0 L 50 0 L 50 40 C 35 35 15 55 0 45 Z\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80.0\" width=\"80\" x=\"540.0\" y=\"197.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eSQL Injection\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"customer_db\"\u003e\n\u003cg transform=\"translate(610, 107.93882625594478)\"\u003e\n\u003cpath d=\"m 0 45 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 0 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 -40 c 0 2.76 11.2 5 25 5 c 13.8 0 25 -2.24 25 -5\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80\" width=\"80\" x=\"610\" y=\"107.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eCustomer Database\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"order_denial\"\u003e\n\u003cg transform=\"translate(220.0, 297.9388262559448)\"\u003e\n\u003cpath d=\"M 0 0 L 50 0 L 50 40 C 35 35 15 55 0 45 Z\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80.0\" width=\"80\" x=\"220.0\" y=\"297.9388262559448\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eOrder Denial\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"50\" width=\"100\" x=\"610.0\" y=\"87.93882625594478\"\u003e\n\u003cp\u003eSensitive asset\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cg nid=\"orders_db\"\u003e\n\u003cg transform=\"translate(610, 287.9388262559448)\"\u003e\n\u003cpath d=\"m 0 45 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 0 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 -40 c 0 2.76 11.2 5 25 5 c 13.8 0 25 -2.24 25 -5\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80\" width=\"80\" x=\"610\" y=\"287.9388262559448\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eOrders Database\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"unencrypted_data\"\u003e\n\u003cg transform=\"translate(540.0, 197.93882625594478)\"\u003e\n\u003cpath d=\"M 0 0 L 50 0 L 50 40 C 35 35 15 55 0 45 Z\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80.0\" width=\"80\" x=\"540.0\" y=\"197.93882625594478\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eUnencrypted Data\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"50\" width=\"100\" x=\"610.0\" y=\"267.9388262559448\"\u003e\n\u003cp\u003eSensitive asset\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cg nid=\"library_exploit\"\u003e\n\u003cg transform=\"translate(250.0, 287.9388262559448)\"\u003e\n\u003cpath d=\"M 0 0 L 50 0 L 50 40 C 35 35 15 55 0 45 Z\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80.0\" width=\"80\" x=\"250.0\" y=\"287.9388262559448\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eLibrary Exploit\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 130 227.93882625594478 L 230 227.93882625594478\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 230, 227.93882625594478)translate(230 227.93882625594478)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 350 227.93882625594478 L 390 227.93882625594478 L 390 147.93882625594478 L 430 147.93882625594478\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 430, 147.93882625594478)translate(430 147.93882625594478)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 350 227.93882625594478 L 390 227.93882625594478 L 390 327.9388262559448 L 430 327.9388262559448\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 430, 327.9388262559448)translate(430 327.9388262559448)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 550 147.93882625594478 L 610 147.93882625594478\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 610, 147.93882625594478)translate(610 147.93882625594478)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 550 327.9388262559448 L 610 327.9388262559448\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 610, 327.9388262559448)translate(610 327.9388262559448)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003crect height=\"20.0\" width=\"120\" x=\"120\" y=\"217.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"20.0\" width=\"80\" x=\"540\" y=\"317.9388262559448\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"120.0\" width=\"100\" x=\"340\" y=\"217.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"20.0\" width=\"80\" x=\"540\" y=\"137.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"100.0\" width=\"100\" x=\"340\" y=\"137.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"20.0\" width=\"120\" x=\"120\" y=\"217.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"120.0\" width=\"100\" x=\"340\" y=\"217.93882625594478\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003eThe team started with one data flow at a time for black hat thinking. As they went through the STRIDE categories one-by-one,\n                they captured the threats in the respective data flows as highlighted in the subsequent images.\n                We\u0026#39;ve demonstrated only one threat per category in the images here to keep things simple but the team could add as many as they can think of in a similar fashion.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003eThe first cue is \u003cb\u003e\u0026#39;spoofed identity\u0026#39;\u003c/b\u003e. Since MFA isn\u0026#39;t a feature yet in the system, it is possible for an attacker to use username and password pairs harvested from other breaches to login and create fraudulent orders.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003eThe second cue is \u003cb\u003e\u0026#39;tampering\u0026#39;\u003c/b\u003e. An attacker could exploit poorly validated input from the UI/API to inject malicious SQL commands, potentially modifying order details, prices, or even deleting order records entirely.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003eThe third cue is \u003cb\u003e\u0026#39;repudiation\u0026#39;\u003c/b\u003e. Without proper logging and non-repudiation controls, a customer could claim they never authorized a purchase, leading to disputes and potential financial losses.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003eThe fourth cue is \u003cb\u003e\u0026#39;information disclosure\u0026#39;\u003c/b\u003e. Attackers could abuse the unencrypted network traffic to intercept the sensitive customer information in transit, leading to legal lawsuits.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003eThe fifth cue is \u003cb\u003e\u0026#39;denial of service\u0026#39;\u003c/b\u003e. As the system doesn\u0026#39;t prohibit anyone from making a series of login attempts, attackers could flood the authentication service, and bring it down. This could result in loss of sales for a prolonged period of time. \u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003eThe sixth cue is \u003cb\u003e\u0026#39;elevation of privilege\u0026#39;\u003c/b\u003e. It is possible for any library used within the system to have open vulnerabilities that could provide access to the trusted network boundaries.\n                For example, the order Service could be exploited to take control of the underlying operating system with such open vulnerabilities, which can become a stepping stone for future attacks, potentially compromising the entire system.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/svg\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe team flooded the whiteboard with many threats as stickies on the respective data flows similar to those depicted in the carousel above:\u003c/p\u003e\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003cth\u003eCategory\u003c/th\u003e\u003cth\u003eThreats\u003c/th\u003e\n\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eSpoofed identity\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n                1. Social engineering tricks could be played on the customer service\n                executive or store assistant to get their login credentials, or just shoulder\n                surfing or malware might do the trick. They can use it to change the\n                orders.\n              \u003c/p\u003e\n\n\u003cp\u003e\n                2. The store assistant could forget to log out, and anyone in the store\n                could use the logged-in session to change the delivery addresses of existing\n                orders (e.g., to their own address)\n              \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eTampering with inputs\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n                3. The attacker could get hold of the order service endpoints from any open\n                browser session and tamper with orders later, if the endpoints are not\n                protected.\n              \u003c/p\u003e\n\n\u003cp\u003e\n                4. Code injection could be used while placing an order to hijack customer\n                payment details.\n              \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eRepudiation of actions\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n                5. Developers with production access, when they find out there are no logs\n                for their actions, could create bulk orders for their family and friends by\n                directly inserting records in the database and triggering other relevant\n                processes.\n              \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eInformation disclosure\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n                6. If the database is attacked via a back door, all the information it holds\n                will be exposed, when the data is stored in plain text.\n              \u003c/p\u003e\n\n\u003cp\u003e\n                7. Stealing passwords from unencrypted logs or other storage would enable\n                the attacker to tamper with order data.\n              \u003c/p\u003e\n\n\u003cp\u003e\n                8. The customer service executive or store assistant doesn’t have any\n                restrictions on their operations—clarifying clear roles and responsibilities may\n                be required as they could work with an accomplice to abuse their\n                permissions.\n              \u003c/p\u003e\n\n\u003cp\u003e\n                9. The /viewOrders endpoint allows any number of records to be returned.\n                Once compromised, this endpoint could be used to view all orders. The team made\n                a note to at least think of reducing the blast radius.\n              \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eDenial of service\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n                10. The attacker could perform a Distributed Denial of Service (DDoS) attack and bring down the order\n                service once they get hold of the endpoint, leading to loss of sales.\n              \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eElevation of privileges\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n                11. If an attacker manages to get hold of the credentials of any developer with admin rights, they could add new users or elevate the privileges of existing\n                users to maintain an elevated level of access to the system in the future. They\n                could also create, modify, or delete order records without anyone noticing, as\n                there are no logs for admin actions.\n              \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\n\u003cp\u003e\u003cb\u003eNOTE\u003c/b\u003e: This exercise is intended only to get you familiar with the\n          threat modeling steps, not to provide an accurate threat model for an\n          order management system.\u003c/p\u003e\n\n\u003cp\u003eLater, the team went on to discuss the threats one by one and added their points to each of them. They noticed several design flaws, nuanced\n          permission issues and also noted to discuss production privileges for team members.\n            Once the discussion delved deeper, they realized most threats seemed critical and that they need to prioritize in order to\n          focus on building the right defenses.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003csection id=\"PrioritizeAndFix\"\u003e\n\u003ch3\u003ePrioritize and Fix\u003c/h3\u003e\n\n\u003cp\u003eTime to turn threats into action. For each identified threat,\n        evaluate its risk by considering likelihood, exposure, and impact. You\n        can also try to come up with a dollar value for the loss of the\n        respective asset. That might sound daunting, but you just need to think\n        about whether you\u0026#39;ve seen this threat before, if it\u0026#39;s a common pattern\n        like those in the OWASP Top 10, and how exposed your system is. Consider\n        the worst case scenario, especially when threats might combine to create\n        bigger problems.\u003c/p\u003e\n\n\u003cp\u003eBut we are not done yet. The goal of threat modeling isn\u0026#39;t to\n        instill paranoia, but to drive improvement. Now that we have identified the top\n        threats, we should adopt day-to-day practices to ensure the appropriate defense is built for them.\n        Some of the day-to-day practices you could use to embue security into are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd security related acceptance criteria on existing user stories\u003c/li\u003e\n\n\u003cli\u003eCreate focused user stories for new security features\u003c/li\u003e\n\n\u003cli\u003ePlan spikes when you need to investigate solutions from a security lens\u003c/li\u003e\n\n\u003cli\u003eUpdate \u0026#39;Definition of Done\u0026#39; with security requirements\u003c/li\u003e\n\n\u003cli\u003eCreate epics for major security architecture changes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRemember to take a photo of your threat modeling diagram, assign action items to the product owner/tech lead/any team member to get them into the backlog as per one of the above ways.\n          Keep it simple and use your normal planning process to implement them. Just tag them as \u0026#39;security-related\u0026#39; so you can track their progress consciously.\u003c/p\u003e\n\n\u003csection id=\"AWorkedExample\"\u003e\n\u003ch4\u003eA worked example:\u003c/h4\u003e\n\n\u003cp\u003eThe order management team decided to address the threats in the following ways:\n            1. adding cross-functional acceptance criteria across all the user stories,\n            2. creating new security user stories and\n            3. following security by design principles as elaborated here:\u003c/p\u003e\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003cth\u003eThreats\u003c/th\u003e\u003cth\u003eMeasures\u003c/th\u003e\n\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eAny unencrypted sensitive information in the logs, transit,              and the database at rest is vulnerable for attacks.\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n                The team decided to address this threat by adding a cross-functional\n                acceptance criteria to all of their user stories.\n              \u003c/p\u003e\n\n\u003cp\u003e\n                “All sensitive information such as order data, customer data, access\n                tokens, and development credentials should be encrypted in logs, in\n                transit and in the database.”\n              \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eUnprotected Order service APIs could lead to exposure of             order data.\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n                Although the user has to be logged in to see the orders (is\n                authenticated), the team realized there is nothing to stop unauthenticated\n                requests direct to the API. This would have been a pretty major flaw if it\n                had made it into production! The team had not spotted it before the\n                session. They added the following user story so it can be tested\n                explicitly as part of sign-off.\n              \u003c/p\u003e\n\n\u003cp\u003e“GIVEN any API request is sent to the order service\u003c/p\u003e\n\n\u003cp\u003eWHEN there is no valid auth token for the current user included in the request\u003c/p\u003e\n\n\u003cp\u003eTHEN the API request is rejected as unauthorized.”\u003c/p\u003e\n\n\n\u003cp\u003e\n                This is a critical architecture change as they need to implement a\n                mechanism to validate if the auth token is valid by calling the\n                authentication service. And the authentication service needs to have a\n                mechanism to validate if the request is coming only from a trusted source.\n                So they captured it as a separate user story.\n              \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eLogin credentials of store assistants and customer service           executives are prone to social engineering attacks.\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n                Given that there are significant consequences to the loss of login\n                credentials, the team realized they need to add an epic around\n                multi-factor authentication, role based authorization restrictions, time\n                based auto-logout from the browser to their backlog. This is a significant\n                chunk of scope that would have been missed otherwise leading to\n                unrealistic release timelines.\n              \u003c/p\u003e\n\n\u003cp\u003e\n                Along with these specific actions, the team staunchly decided to follow\n                the principle of least privileges where each team member will only be\n                provided the least minimum required access to any and all test and\n                production environments, repositories, and other internal tools.\n              \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003csection id=\"PlatformFocussedThreatModelWorkshop\"\u003e\n\u003ch2\u003ePlatform focussed threat model workshop\u003c/h2\u003e\n\n\u003csection id=\"ApproachAndPreparation\"\u003e\n\u003ch3\u003eApproach and Preparation\u003c/h3\u003e\n\n\u003cp\u003eThere are times when security demands a larger, more cross-programme, or\n        cross-organizational effort. Security issues often occur at the boundaries\n        between systems or teams, where responsibilities overlap and gaps are sometimes\n        overlooked. These boundary points, such as infrastructure and deployment\n        pipelines, are critical as they often become prime targets for attackers due to\n        their high privilege and control over the deployment environment. But when multiple teams are involved,\n          it becomes increasingly hard to get a comprehensive view of vulnerabilities across the\n        entire architecture.\u003c/p\u003e\n\n\u003cp\u003eSo it is absolutely essential to involve the right people in such cross-team threat modeling workshops. Participation from platform engineers, application developers, and security specialists is going to be crucial. Involving other roles who closely work in the product development cycle, such as the business analysts/testers, would guarantee a holistic view of risks too.\u003c/p\u003e\n\n\u003cp\u003eHere is a preparation kit for such cross team threat modeling workshops:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cb\u003eCollaborative tools:\u003c/b\u003e If running the session remotely, use tools like Mural,\n          Miro, or Google Docs to diagram and collaborate. Ensure these tools are\n          security-approved to handle sensitive information.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eSet a manageable scope:\u003c/b\u003e Focus the session on critical components, such as\n          the CI/CD pipeline, AWS infrastructure, and deployment artifacts. Avoid trying\n          to cover the entire system in one session—timebox the scope.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eDiagram ahead of time:\u003c/b\u003e Consider creating basic diagrams asynchronously\n          before the session to save time. Ensure everyone understands the diagrams and\n          symbols in advance.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eKeep the session concise:\u003c/b\u003e Start with 90-minute sessions to allow for\n          discussion and learning. Once the team gains experience, shorter, more frequent\n          sessions can be held as part of regular sprints.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eEngagement and facilitation:\u003c/b\u003e Make sure everyone actively contributes,\n          especially in remote sessions where it\u0026#39;s easier for participants to disengage.\n          Use icebreakers or simple security exercises to start the session.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003ePrioritize outcomes:\u003c/b\u003e Refocus the discussions towards identifying actionable security stories as it is the primary outcome of the workshop.\n            Prepare for documenting them clearly. Identify action owners to add them to their respective backlogs.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eBreaks and timing:\u003c/b\u003e Plan for extra breaks to avoid fatigue when remote, and ensure the session finishes on time with clear, concrete\n          outcomes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/section\u003e\n\n\u003csection id=\"ExplainAndExplore\"\u003e\n\u003ch3\u003eExplain and Explore\u003c/h3\u003e\n\n\u003cp\u003eWe have a worked example here where we focus on threat modeling the infrastructure\n          and deployment pipelines of the same order management system assuming it is hosted on AWS.\n          A cross functional team comprising of platform engineers, application developers, and security\n          specialists was gathered to uncover all of the localized and systemic vulnerabilities.\u003c/p\u003e\n\n\u003cp\u003eThey began the workshop with defining the scope for threat modeling clearly to everyone. They elaborated on the various users of the system:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ePlatform engineers, who are responsible for infrastructure management, have privileged access to the AWS Management Console.\u003c/li\u003e\n\n\u003cli\u003eApplication developers and testers interact with the CI/CD pipelines and application code.\u003c/li\u003e\n\n\u003cli\u003eEnd users interact with the application UI and provide sensitive personal and order information while placing orders.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe team then captured the low-level technical diagram showing the CI/CD pipelines, AWS infrastructure components, data flows,\n          and the users as seen in the carousel below.\u003c/p\u003e\n\n\u003cdiv data-pages=\"step-0 step-1 step-2 step-3 step-4\" id=\"platform-diag\"\u003e\n\u003csvg id=\"\" version=\"1.1\" viewBox=\"0 0 800 520\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n\n\n\u003cg nid=\"aws_container\"\u003e\n\u003crect height=\"458.0\" width=\"386\" x=\"228\" y=\"36\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"458.0\" width=\"386\" x=\"228\" y=\"36\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eAWS\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"services_container\"\u003e\n\u003crect height=\"414.0\" width=\"164\" x=\"428\" y=\"58\"\u003e\u003c/rect\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"app_devs\"\u003e\n\u003cg transform=\"translate(30, 130)\"\u003e\n\u003cpath d=\"m 22.02127,10.00741\nh 0.005\nc 2.95253,0 5.2159,2.29601 5.2425,5.316239 0.029,3.366031 -2.30931,5.86275 -5.47826,5.86275\nh -0.0399\nc -2.87153,-0.01935 -5.20018,-2.3613 -5.23282,-5.26305 -0.0411,-3.328549 2.36371,-5.913519 5.50365,-5.915939\nz\n\nm 6.32897,18.69916\nc 4.61366,-2.67144 7.33116,-7.751081 7.36124,-14.83984 -0.01,-3.64653 -1.39405,-8.00882 -5.62335,-11.04115 -2.96341,-2.12191 -6.34999,-2.82558 -9.91794,-2.82558 -0.081,0 -0.16564,0.0012 -0.24544,0.0012 -11.6734896,0.10277 -18.95325957,12.78583 -13.2827496,22.979439 1.64425,2.95681 4.3496896,4.997591 7.3301496,6.221221 -0.24548,0.37672 -0.48256,0.77549 -0.71034,1.1961 -4.6771996,7.50097 -5.9450096,6.57892 -11.0879096,14.47238 -5.05568,8.02585 -0.86286,14.63125 8.1317596,14.86799\nh 0.13083\nc 5.23479,0 7.89346,0.0654 10.54434,0.13083 2.65867,0.0654 5.30643,0.13083 10.53032,0.13083\nh 0.25855 0.0825\nc 8.73608,0 12.38221,-6.88575 7.15365,-14.32909 -5.21766,-7.36079 -4.80648,-7.2798 -9.41982,-15.11563 -0.39653,-0.67354 -0.8095,-1.28955 -1.23583,-1.84872\nz\" transform=\"scale(1.2070588803321824)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"20\" width=\"50\" x=\"30\" y=\"222.42353281993093\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eApplication Developers\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"platform_engineers\"\u003e\n\u003cg transform=\"translate(30, 280)\"\u003e\n\u003cpath d=\"m 22.02127,10.00741\nh 0.005\nc 2.95253,0 5.2159,2.29601 5.2425,5.316239 0.029,3.366031 -2.30931,5.86275 -5.47826,5.86275\nh -0.0399\nc -2.87153,-0.01935 -5.20018,-2.3613 -5.23282,-5.26305 -0.0411,-3.328549 2.36371,-5.913519 5.50365,-5.915939\nz\n\nm 6.32897,18.69916\nc 4.61366,-2.67144 7.33116,-7.751081 7.36124,-14.83984 -0.01,-3.64653 -1.39405,-8.00882 -5.62335,-11.04115 -2.96341,-2.12191 -6.34999,-2.82558 -9.91794,-2.82558 -0.081,0 -0.16564,0.0012 -0.24544,0.0012 -11.6734896,0.10277 -18.95325957,12.78583 -13.2827496,22.979439 1.64425,2.95681 4.3496896,4.997591 7.3301496,6.221221 -0.24548,0.37672 -0.48256,0.77549 -0.71034,1.1961 -4.6771996,7.50097 -5.9450096,6.57892 -11.0879096,14.47238 -5.05568,8.02585 -0.86286,14.63125 8.1317596,14.86799\nh 0.13083\nc 5.23479,0 7.89346,0.0654 10.54434,0.13083 2.65867,0.0654 5.30643,0.13083 10.53032,0.13083\nh 0.25855 0.0825\nc 8.73608,0 12.38221,-6.88575 7.15365,-14.32909 -5.21766,-7.36079 -4.80648,-7.2798 -9.41982,-15.11563 -0.39653,-0.67354 -0.8095,-1.28955 -1.23583,-1.84872\nz\" transform=\"scale(1.2070588803321824)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"20\" width=\"50\" x=\"30\" y=\"372.4235328199309\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003ePlatform Engineers\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"system_users\"\u003e\n\u003cg transform=\"translate(700, 130)\"\u003e\n\u003cpath d=\"m 22.02127,10.00741\nh 0.005\nc 2.95253,0 5.2159,2.29601 5.2425,5.316239 0.029,3.366031 -2.30931,5.86275 -5.47826,5.86275\nh -0.0399\nc -2.87153,-0.01935 -5.20018,-2.3613 -5.23282,-5.26305 -0.0411,-3.328549 2.36371,-5.913519 5.50365,-5.915939\nz\n\nm 6.32897,18.69916\nc 4.61366,-2.67144 7.33116,-7.751081 7.36124,-14.83984 -0.01,-3.64653 -1.39405,-8.00882 -5.62335,-11.04115 -2.96341,-2.12191 -6.34999,-2.82558 -9.91794,-2.82558 -0.081,0 -0.16564,0.0012 -0.24544,0.0012 -11.6734896,0.10277 -18.95325957,12.78583 -13.2827496,22.979439 1.64425,2.95681 4.3496896,4.997591 7.3301496,6.221221 -0.24548,0.37672 -0.48256,0.77549 -0.71034,1.1961 -4.6771996,7.50097 -5.9450096,6.57892 -11.0879096,14.47238 -5.05568,8.02585 -0.86286,14.63125 8.1317596,14.86799\nh 0.13083\nc 5.23479,0 7.89346,0.0654 10.54434,0.13083 2.65867,0.0654 5.30643,0.13083 10.53032,0.13083\nh 0.25855 0.0825\nc 8.73608,0 12.38221,-6.88575 7.15365,-14.32909 -5.21766,-7.36079 -4.80648,-7.2798 -9.41982,-15.11563 -0.39653,-0.67354 -0.8095,-1.28955 -1.23583,-1.84872\nz\" transform=\"scale(1.2070588803321824)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"20\" width=\"50\" x=\"700\" y=\"222.42353281993093\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eEnd users\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"app_pipeline\"\u003e\n\u003cg transform=\"translate(250, 130)\"\u003e\n\u003cpath d=\"M 0,0\n              H 100\n              A 20 20 0 0 1 100,40\n              H 0\n              A 20 20 0 0 1 0,0\n              Z\" transform=\"scale(1.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"40\" width=\"120\" x=\"250\" y=\"130\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eApplication Pipeline\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"infra_pipeline\"\u003e\n\u003cg transform=\"translate(250, 280)\"\u003e\n\u003cpath d=\"M 0,0\n              H 100\n              A 20 20 0 0 1 100,40\n              H 0\n              A 20 20 0 0 1 0,0\n              Z\" transform=\"scale(1.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"40\" width=\"120\" x=\"250\" y=\"280\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eInfrastructure Pipeline\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"aws_console\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"250\" y=\"380\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"250\" y=\"380\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eAWS Management Console\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"auth_service\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"450\" y=\"80\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"450\" y=\"80\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eAuthentication Service\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"ui_s3\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"450\" y=\"180\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"450\" y=\"180\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eUI - S3 Bucket\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"order_service\"\u003e\n\u003crect height=\"60\" width=\"120\" x=\"450\" y=\"280\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"60\" width=\"120\" x=\"450\" y=\"280\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eOrder service - Lambda\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg nid=\"db_aurora\"\u003e\n\u003cg transform=\"translate(470.0, 370.0)\"\u003e\n\u003cpath d=\"m 0 45 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 0 l 0 -40 c 0 -2.76 11.2 -5 25 -5 c 13.8 0 25 2.24 25 5 l 0 40 c 0 2.76 -11.2 5 -25 5 c -13.8 0 -25 -2.24 -25 -5 m 0 -40 c 0 2.76 11.2 5 25 5 c 13.8 0 25 -2.24 25 -5\" transform=\"scale(1.6)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cforeignObject height=\"80\" width=\"80\" x=\"470.0\" y=\"370.0\"\u003e\n\u003cp xmlns=\"http://www.w3.org/1999/xhtml\"\u003e\n\u003cspan\u003eDB - aurora\u003c/span\u003e\n\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 80 166.21176640996546 L 165 166.21176640996546 L 165 150.0 L 250 150.0\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 250, 150.0)translate(250 150.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 80 316.2117664099655 L 165 316.2117664099655 L 165 300.0 L 250 300.0\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 250, 300.0)translate(250 300.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 80 316.2117664099655 L 165 316.2117664099655 L 165 410.0 L 250 410.0\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 250, 410.0)translate(250 410.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 370 150.0 L 410 150.0 L 410 210.0 L 450 210.0\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 450, 210.0)translate(450 210.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 370 300.0 L 399 300.0 L 399 265.0 L 428 265.0\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(0.0, 428, 265.0)translate(428 265.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 510.0 240 L 510.0 280\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(90.0, 510.0, 280)translate(510.0 280)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 510.0 340 L 510.0 370.0\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(90.0, 510.0, 370.0)translate(510.0 370.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 700 166.21176640996546 L 635 166.21176640996546 L 635 210.0 L 570 210.0\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(180.0, 570, 210.0)translate(570 210.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003cg\u003e\n\u003cpath d=\"M 700 166.21176640996546 L 635 166.21176640996546 L 635 110.0 L 570 110.0\"\u003e\u003c/path\u003e\n\n\u003cpath d=\"M 0 0 l -12 -5 m 12 5 l -12 5\" transform=\"rotate(180.0, 570, 110.0)translate(570 110.0)\"\u003e\u003c/path\u003e\n\u003c/g\u003e\n\n\u003crect height=\"92.42353281993093\" width=\"70\" x=\"20\" y=\"120\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"92.42353281993093\" width=\"70\" x=\"20\" y=\"270\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"92.42353281993093\" width=\"70\" x=\"690\" y=\"120\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"36.21176640996546\" width=\"190\" x=\"70\" y=\"140.0\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"36.21176640996549\" width=\"190\" x=\"70\" y=\"290.0\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"80.0\" width=\"100\" x=\"360\" y=\"140.0\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"55.0\" width=\"78\" x=\"360\" y=\"255.0\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"478.0\" width=\"406\" x=\"218\" y=\"26\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"434.0\" width=\"184\" x=\"418\" y=\"48\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"80\" width=\"140\" x=\"240\" y=\"370\"\u003e\u003c/rect\u003e\n\n\u003crect height=\"100.0\" width=\"100.0\" x=\"460.0\" y=\"360.0\"\u003e\u003c/rect\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 1:\u003c/b\u003e Start with capturing the system \u003cb\u003ecomponents\u003c/b\u003e: S3 (UI), Lambda (Order service), Aurora DB, and CI/CD pipelines for application and infrastructure deployment.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 2:\u003c/b\u003e Represent the \u003cb\u003e users\u003c/b\u003e of the system. Here different users have different ways to access the system. For instance, platform engineers use the AWS console, application developers use the CI/CD pipelines, and end users use the application UI.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 3:\u003c/b\u003e Indicate the \u003cb\u003edataflows\u003c/b\u003e by capturing the path of deployment artifacts and configuration files through the pipelines.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 4:\u003c/b\u003e Mark the trust boundaries of components. Here we have grouped the AWS management zone and application services zone separately.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\n\u003cforeignObject height=\"100\" n_type=\"html-text\" width=\"200\" x=\"0\" y=\"0\"\u003e\n\u003cp\u003e\u003cb\u003eStep 5:\u003c/b\u003e Highlight the \u003cb\u003eassets\u003c/b\u003e. Here the team identified AWS Console access, CI/CD configurations, deployment artifacts, and sensitive data in Aurora DB as assets to be protected.\u003c/p\u003e\n\u003c/foreignObject\u003e\n\u003c/svg\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe team moved on to identifying the key assets in their AWS-based delivery pipeline based on the following conclusions:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAWS Management Console access:  Since it provides powerful capabilities for infrastructure management including IAM configuration,\n            any unauthorized changes to core infrastructure could lead to system-wide vulnerabilities and potential outages.\u003c/li\u003e\n\n\u003cli\u003eCI/CD pipeline configurations for both application and infrastructure pipelines:\n            Tampering with them could lead to malicious code moving into production, disrupting the business.\u003c/li\u003e\n\n\u003cli\u003eDeployment artifacts such as application code, infrastructure as code for S3 (hosting UI), Lambda (Order service), and Aurora DB:\n            They are sensitive IP of the organization and could be stolen, destroyed or tampered with, leading to loss of business.\u003c/li\u003e\n\n\u003cli\u003eAuthentication service: Since it allows interaction with the core identity service,\n            it can be abused for gaining illegitimate access control to the order management system.\u003c/li\u003e\n\n\u003cli\u003eOrder data stored in the Aurora database: Since it stores sensitive business and customer information, it can lead to loss of business reputation when breached.\u003c/li\u003e\n\n\u003cli\u003eAccess credentials including AWS access keys, database passwords, and other secrets used throughout the pipeline:\n            These can be used for ill intentions like crypto mining leading to financial losses.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith these assets laid on the technical diagram, the team put on their “black hat” and started thinking about how an attacker might exploit the\n        privileged access points in their AWS environment and the application-level components in their delivery pipeline.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"IdentifyThreats\"\u003e\n\u003ch3\u003eIdentify Threats\u003c/h3\u003e\n\n\u003cp\u003eThe team once again adopted the STRIDE framework to prompt the discussion\n        (refer worked example under \u0026#39;Quick Team Threat Modeling\u0026#39; section above for STRIDE framework elaboration) and captured all their\n        ideas as stickies. Here\u0026#39;s is the list of threats they identified:\u003c/p\u003e\n\n\u003ctable\u003e\u003ctbody\u003e\u003ctr\u003e\u003cth\u003eCategory\u003c/th\u003e\u003cth\u003eThreats\u003c/th\u003e\n\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eSpoofed identity\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n              1. An attacker could use stolen platform engineer credentials to access the AWS\n              Management Console and make unauthorized changes to infrastructure.\n           \u003c/p\u003e\n\n\u003cp\u003e\n             2. Someone could impersonate an application developer in GitHub to inject\n              malicious code into the CI/CD pipeline.\n           \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eTampering with inputs\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n              3. An attacker might modify infrastructure-as-code files in the GitHub\n              repository to disable security protections.\n            \u003c/p\u003e\n\n\u003cp\u003e\n              4. Someone could tamper with source code for the app to include malicious\n              code.\n            \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eRepudiation of actions\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n              5. A platform engineer could make unauthorized changes to AWS configurations\n              and later deny their actions due to lack of proper logging in CloudTrail.\n            \u003c/p\u003e\n\n\u003cp\u003e\n              6. An application developer could deploy ill-intended code, if there\u0026#39;s no audit trail in the CI/CD pipeline.\n            \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eInformation disclosure\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n              7. Misconfigured S3 bucket permissions could expose the UI files and\n              potentially sensitive information.\n            \u003c/p\u003e\n\n\u003cp\u003e\n              8. Improperly written Lambda functions might leak sensitive order data through\n              verbose error messages.\n            \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eDenial of service\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n              9. An attacker could exploit the autoscaling configuration to trigger\n              unnecessary scaling, causing financial damage.\n            \u003c/p\u003e\n\n\u003cp\u003e\n              10. Someone could flood the authentication service with requests, preventing\n              legitimate users from accessing the system.\n            \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\n\u003ctr\u003e\u003ctd\u003e\n\u003cp\u003eElevation of privilege\u003c/p\u003e\n\u003c/td\u003e\u003ctd\u003e\n\u003cp\u003e\n              11. An application developer could exploit a misconfigured IAM role to gain\n              platform engineer level access.\n            \u003c/p\u003e\n\n\u003cp\u003e\n              12. An attacker might use a vulnerability in the Lambda function to gain broader\n              access to the AWS environment.\n            \u003c/p\u003e\n\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003c/section\u003e\n\n\u003csection id=\"PrioritizeAndFix\"\u003e\n\u003ch3\u003ePrioritize and Fix\u003c/h3\u003e\n\n\u003cp\u003eThe team had to prioritize the threats to identify the right defense measures next. The team chose to vote on threats based on\n        their impact this time. For the top threats, they discussed the defense measures as buying secret vaults,\n          integrating secret scanners into the pipelines, building two-factor authentications, and buying specific off the shelf security related products.\n          \u003c/p\u003e\n\n\u003cp\u003eApart from the tools, they also identified the need to follow stricter practices such as the \u0026#39;principle of least privileges\u0026#39; even within the platform team\n          and the need to design the infrastructure components with well thought through security policies.\n          When they had successfully translated these defense measures as security stories,\n          they were able to identify the budget required to purchase the tools, and a plan for internal approvals and implementation, which subsequently\n          led to a smoother cross-team collaboration.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/section\u003e\n\n\u003csection id=\"Conclusion\"\u003e\n\u003ch2\u003e Conclusion\u003c/h2\u003e\n\n\u003cp\u003eThreat modeling isn\u0026#39;t just another security activity - it\u0026#39;s a\n      transformative practice that helps teams build security thinking into their\n      DNA. While automated checks and penetration tests are valuable, they only\n      catch known issues. Threat modeling helps teams understand and manage evolving\n      cyber risks by making security everyone\u0026#39;s responsibility.\u003c/p\u003e\n\n\u003cp\u003eStart simple and keep improving. Run retrospectives after a few sessions.\n      Ask what worked, what didn\u0026#39;t, and adapt. Experiment with different diagrams,\n      try domain-specific threat libraries, and connect with the wider threat\n      modeling community. Remember - no team has ever found this “too hard” when\n      approached step by step.\u003c/p\u003e\n\n\u003cp\u003eAt minimum, your first session will add concrete security stories to your\n      backlog. But the real value comes from building a team that thinks about\n      security continuously, and not as an afterthought. Just set aside that first 30\n      minutes, get your team together, and start drawing those diagrams.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003chr/\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "41 min read",
  "publishedTime": null,
  "modifiedTime": "2025-05-20T00:00:00Z"
}
