{
  "id": "7453510b-2037-4734-ba74-12667c1a5bea",
  "title": "Building TMT Mirror Visualization with LLM",
  "link": "https://martinfowler.com/articles/exploring-gen-ai/15-building-tmt-mirror-visualization.html",
  "description": "",
  "author": "",
  "published": "2025-04-30T09:54:00-04:00",
  "source": "https://martinfowler.com/feed.atom",
  "categories": null,
  "byline": "Unmesh Joshi",
  "length": 7151,
  "excerpt": "Notes from my Thoughtworks colleagues on AI-assisted software delivery",
  "siteName": "martinfowler.com",
  "favicon": "",
  "text": "Creating a user interface that visualizes a real-world structure — like the Thirty Meter Telescope's mirror — might seem like a task that demands deep knowledge of geometry, D3.js, and SVG graphics. But with a Large Language Model (LLM) like Claude or ChatGPT, you don't need to know everything upfront. This article documents a journey in building a complex, interactive UI with no prior experience in D3.js or UI development in general. The work was done as part of building a prototype for an operational user interface for the telescope's primary mirror, designed to show real-time status of mirror segments. It highlights how LLMs help you “get on with it”, giving you a working prototype even when you're unfamiliar with the underlying tech. More importantly, it shows how iterative prompting — refining your requests step-by-step — leads not only to the right code but also to a clearer understanding of what you're trying to build. The Goal We wanted to create an HTML-based visualization of the Thirty Meter Telescope's primary mirror, composed of 492 hexagonal segments arranged symmetrically in a circular pattern. We began with a high-level prompt that described the structure, but soon realized that to reach my goal, I'd need to guide the AI step by step. Step 1: The Initial Prompt “I want to create an HTML view of the Thirty Meter Telescope's honeycomb mirror. Try to generate an HTML and CSS based UI for this mirror, which consists of 492 hexagonal segments arranged in a circular pattern. Overall structure is of a honeycomb. The structure should be symmetric. For example the number of hexagons in the first row should be same in the last row. The number of hexagons in the second row should be same as the one in the second last row, etc.” Claude gave it a shot — but the result wasn't what I had in mind. The layout was blocky and not quite symmetric. That's when I decided to take a step-by-step approach. Step 2: Drawing One Hexagon “This is not what I want... Let's do it step by step.” “Let's draw one hexagon with flat edge vertical. The hexagon should have all sides of same length.” “Let's use d3.js and draw svg.” “Let's draw only one hexagon with d3.” Claude generated clean D3 code to draw a single hexagon with the correct orientation and geometry. It worked — and gave me confidence in the building blocks. Lesson: Start small. Confirm the foundation works before scaling complexity. Step 3: Adding a Second Hexagon “Nice... Now let's add one more hexagon next to this one. It should share vertical edge with the first hexagon.” Claude adjusted the coordinates, placing the second hexagon adjacent to the first by aligning their vertical edges. The layout logic was beginning to emerge. Step 4: Creating the Second Row “Now let's add one more row. The hexagons in the second row share vertical edges with each other similar to the first row. The top slanting edges of the hexagons in the second row should be shared with the bottom slanting edges of the hexagons in the first row. The number of hexagons in the second row should be such that the first row appears centrally positioned with the second row.” Initial attempts failed to properly align the slanting edges. “Oops... this does not share the slanting edges with the previous row.” But eventually, after clarifying spacing and offset logic, Claude got it right. Lesson: Geometry-based layouts often require multiple iterations with careful visual inspection. Step 5: Expanding into a Symmetric Structure “Now we need to create bigger structure with more hexagons arranged in more rows such that: The overall structure appears circular like honeycomb. The number of hexagons in the rows goes on increasing and then goes on decreasing to form a perfectly symmetric structure. The total number of hexagons needs to be 492 to match the TMT telescope. We can have an empty hexagon (showing empty space) exactly at the center of the circle.” Claude used a ring-based layout approach to simulate circular symmetry. But at first: “This is not circular but looks more like a hexagonal overall view...” Then I suggested: “Try with only 6 hexagons in the first and last row.” This change improved symmetry and helped achieve a visually circular layout. The number of hexagons per row increased and then decreased — exactly as desired. Step 6: Tuning the Central Opening “This is better but we need a smaller opening at the center.The black space at the center is too big. It should be at most 1 or a few hexagons.” By reducing the empty space and rebalancing the inner rings, we finally got a well-packed, circular structure with a small central gap — matching the TMT design. Lesson: Use domain-specific constraints (like total count = 492) as guideposts for layout parameters. Step 7: Adding Numbering and Tooltips “We want to have a number on each hexagonal segment. They should be numbered sequentially. The first in the first row should be 1 and the last in the last row should be 492. When we show the hexagonal segment information on mouseover, we should show the number as well.” Claude initially assigned numbers based on ring index, not row order. “You are generating numbers based on position in the ring... But the numbering should be row-based. So we should somehow map the rings to the row. For example, Ring 13 segment number 483 is in row 1 and should be numbered 1, etc. Can you suggest a way to map segments from rings to rows this way?” Once this mapping was implemented, everything fell into place: A circular layout of 492 numbered segments A small central gap Tooltips showing segment metadata Visual symmetry from outer to inner rings Reflections This experience taught me several key lessons: LLMs help you get on with it: Even with zero knowledge of D3.js or SVG geometry, I could start building immediately. The AI scaffolded the coding, and I learned through the process. Prompting is iterative: My first prompt wasn't wrong — it just wasn't specific enough. By reviewing the output at each step, clarified what I really wanted and refined my asks accordingly. LLMs unlock learning through building: In the end, I didn't just get a working UI. I got an understandable codebase and a hands-on entry point into a new technology. Building first and learning from it. Conclusion What started as a vague design idea turned into a functioning, symmetric, interactive visualization of the Thirty Meter Telescope's mirror — built collaboratively with an LLM. This experience reaffirmed that prompt-driven development isn't just about generating code — it's about thinking through design, clarifying intent, and building your way into understanding. If you've ever wanted to explore a new technology, build a UI, or tackle a domain-specific visualization — don't wait to learn it all first. Start building with an LLM. You'll learn along the way.",
  "image": "https://martinfowler.com/articles/exploring-gen-ai/donkey-card.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\n\u003cp\u003eCreating a user interface that visualizes a real-world structure — like the Thirty Meter Telescope\u0026#39;s mirror — might seem like a task that demands deep knowledge of geometry, D3.js, and SVG graphics. But with a Large Language Model (LLM) like Claude or ChatGPT, you don\u0026#39;t need to know everything upfront.\u003c/p\u003e\n\n\u003cp\u003eThis article documents a journey in building a complex, interactive UI with no prior experience in D3.js or UI development in general. \n    The work was done as part of building a prototype for an operational user interface for the telescope\u0026#39;s primary mirror, designed to show real-time status of mirror segments. \n    It highlights how LLMs help you “get on with it”, giving you a working prototype \n    even when you\u0026#39;re unfamiliar with the underlying tech. \n    More importantly, it shows how iterative prompting — refining your requests step-by-step — \n    leads not only to the right code but also to a clearer understanding \n    of what you\u0026#39;re trying to build.\n    \u003c/p\u003e\n\n\u003csection id=\"TheGoal\"\u003e\n\u003ch2\u003eThe Goal\u003c/h2\u003e\n\n\u003cp\u003eWe wanted to create an HTML-based visualization of the Thirty Meter Telescope\u0026#39;s primary mirror, composed of 492 hexagonal segments arranged symmetrically in a circular pattern.\u003c/p\u003e\n\n\u003cp\u003eWe began with a high-level prompt that described the structure, but soon realized that to reach my goal, I\u0026#39;d need to guide the AI step by step.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"Step1TheInitialPrompt\"\u003e\n\u003ch2\u003eStep 1: The Initial Prompt\u003c/h2\u003e\n\n\u003cp\u003e“I want to create an HTML view of the Thirty Meter Telescope\u0026#39;s honeycomb mirror. \n        Try to generate an HTML and CSS based UI for this mirror, which consists of 492 hexagonal segments arranged in a circular pattern. \n        Overall structure is of a honeycomb. The structure should be symmetric. \n        For example the number of hexagons in the first row should be same in the last row. \n        The number of hexagons in the second row should be same as the one in the second last row, etc.”\u003c/p\u003e\n\n\u003cp\u003eClaude gave it a shot — but the result wasn\u0026#39;t what I had in mind. The layout was blocky and not quite symmetric. That\u0026#39;s when I decided to take a step-by-step approach.\u003c/p\u003e\n\n\u003cdiv id=\"step1-initial-attempt.png\"\u003e\u003cp\u003e\u003cimg alt=\"Initial attempt showing blocky, non-symmetric layout\" src=\"https://martinfowler.com/articles/exploring-gen-ai/step1-initial-attempt.png\" width=\"325\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003c/section\u003e\n\n\u003csection id=\"Step2DrawingOneHexagon\"\u003e\n\u003ch2\u003eStep 2: Drawing One Hexagon\u003c/h2\u003e\n\n\u003cdiv\u003e\n\u003cp\u003e“This is not what I want... Let\u0026#39;s do it step by step.”\u003c/p\u003e\n\n\u003cp\u003e“Let\u0026#39;s draw one hexagon with flat edge vertical. The hexagon should have all sides of same length.”\u003c/p\u003e\n\n\u003cp\u003e“Let\u0026#39;s use d3.js and draw svg.”\u003c/p\u003e\n\n\u003cp\u003e“Let\u0026#39;s draw only one hexagon with d3.”\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eClaude generated clean D3 code to draw a single hexagon with the correct orientation and geometry. It worked — and gave me confidence in the building blocks.\u003c/p\u003e\n\n\u003cp\u003eLesson: Start small. Confirm the foundation works before scaling complexity.\u003c/p\u003e\n\n\u003cdiv id=\"step2-single-hexagon.png\"\u003e\u003cp\u003e\u003cimg alt=\"Single hexagon with flat edge vertical\" src=\"https://martinfowler.com/articles/exploring-gen-ai/step2-single-hexagon.png\" width=\"325\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003c/section\u003e\n\n\u003csection id=\"Step3AddingASecondHexagon\"\u003e\n\u003ch2\u003eStep 3: Adding a Second Hexagon\u003c/h2\u003e\n\n\u003cp\u003e“Nice... Now let\u0026#39;s add one more hexagon next to this one. It should share vertical edge with the first hexagon.”\u003c/p\u003e\n\n\u003cp\u003eClaude adjusted the coordinates, placing the second hexagon adjacent to the first by aligning their vertical edges. The layout logic was beginning to emerge.\u003c/p\u003e\n\n\u003cdiv id=\"step3-two-hexagons.png\"\u003e\u003cp\u003e\u003cimg alt=\"Two hexagons sharing a vertical edge\" src=\"https://martinfowler.com/articles/exploring-gen-ai/step3-two-hexagons.png\" width=\"325\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003c/section\u003e\n\n\u003csection id=\"Step4CreatingTheSecondRow\"\u003e\n\u003ch2\u003eStep 4: Creating the Second Row\u003c/h2\u003e\n\n\u003cdiv\u003e\n\u003cp\u003e“Now let\u0026#39;s add one more row.\u003c/p\u003e\n\n\u003cp\u003eThe hexagons in the second row share vertical edges with each other similar to the first row.\u003c/p\u003e\n\n\u003cp\u003eThe top slanting edges of the hexagons in the second row should be shared with the bottom slanting edges of the hexagons in the first row.\u003c/p\u003e\n\n\u003cp\u003eThe number of hexagons in the second row should be such that the first row appears centrally positioned with the second row.”\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eInitial attempts failed to properly align the slanting edges.\u003c/p\u003e\n\n\u003cp\u003e\n        “Oops... this does not share the slanting edges with the previous row.”\n      \u003c/p\u003e\n\n\u003cdiv id=\"step4-two-rows.png\"\u003e\u003cp\u003e\u003cimg alt=\"Two rows of hexagons\" src=\"https://martinfowler.com/articles/exploring-gen-ai/step4-two-rows.png\" width=\"325\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eBut eventually, after clarifying spacing and offset logic, Claude got it right.\u003c/p\u003e\n\n\u003cdiv id=\"step4-two-rows_fixed.png\"\u003e\u003cp\u003e\u003cimg alt=\"Two rows of hexagons with proper edge alignment\" src=\"https://martinfowler.com/articles/exploring-gen-ai/step4-two-rows_fixed.png\" width=\"325\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eLesson: Geometry-based layouts often require multiple iterations with careful visual inspection.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"Step5ExpandingIntoASymmetricStructure\"\u003e\n\u003ch2\u003eStep 5: Expanding into a Symmetric Structure\u003c/h2\u003e\n\n\u003cp\u003e\n        “Now we need to create bigger structure with more hexagons arranged in more rows such that:\n          The overall structure appears circular like honeycomb.\n          The number of hexagons in the rows goes on increasing and then goes on decreasing to form a perfectly symmetric structure.\n          The total number of hexagons needs to be 492 to match the TMT telescope.\n          We can have an empty hexagon (showing empty space) exactly at the center of the circle.”\n      \u003c/p\u003e\n\n\u003cp\u003eClaude used a ring-based layout approach to simulate circular symmetry. But at first:\u003c/p\u003e\n\n\u003cp\u003e\n        “This is not circular but looks more like a hexagonal overall view...”\n      \u003c/p\u003e\n\n\u003cp\u003eThen I suggested:\u003c/p\u003e\n\n\u003cp\u003e“Try with only 6 hexagons in the first and last row.”\u003c/p\u003e\n\n\u003cp\u003eThis change improved symmetry and helped achieve a visually circular layout. The number of hexagons per row increased and then decreased — exactly as desired.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"Step6TuningTheCentralOpening\"\u003e\n\u003ch2\u003eStep 6: Tuning the Central Opening\u003c/h2\u003e\n\n\u003cp\u003e\n        “This is better but we need a smaller opening at the center.The black space at the center is too big. It should be at most 1 or a few hexagons.”\n      \u003c/p\u003e\n\n\u003cp\u003eBy reducing the empty space and rebalancing the inner rings, we finally got a well-packed, circular structure with a small central gap — matching the TMT design.\u003c/p\u003e\n\n\u003cp\u003eLesson: Use domain-specific constraints (like total count = 492) as guideposts for layout parameters.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003csection id=\"Step7AddingNumberingAndTooltips\"\u003e\n\u003ch2\u003eStep 7: Adding Numbering and Tooltips\u003c/h2\u003e\n\n\u003cp\u003e\n        “We want to have a number on each hexagonal segment. They should be numbered sequentially. The first in the first row should be 1 and the last in the last row should be 492. When we show the hexagonal segment information on mouseover, we should show the number as well.”\n      \u003c/p\u003e\n\n\u003cp\u003eClaude initially assigned numbers based on ring index, not row order.\u003c/p\u003e\n\n\u003cp\u003e“You are generating numbers based on position in the ring... But the numbering should be row-based. So we should somehow map the rings to the row. For example, Ring 13 segment number 483 is in row 1 and should be numbered 1, etc. Can you suggest a way to map segments from rings to rows this way?”\u003c/p\u003e\n\n\u003cp\u003eOnce this mapping was implemented, everything fell into place:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA circular layout of 492 numbered segments\u003c/li\u003e\n\n\u003cli\u003eA small central gap\u003c/li\u003e\n\n\u003cli\u003eTooltips showing segment metadata\u003c/li\u003e\n\n\u003cli\u003eVisual symmetry from outer to inner rings\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cdiv id=\"step7-numbered-segments.png\"\u003e\u003cp\u003e\u003cimg alt=\"Final structure with numbered segments and tooltips\" src=\"https://martinfowler.com/articles/exploring-gen-ai/step7-numbered-segments.png\" width=\"325\"/\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003c/section\u003e\n\n\u003csection id=\"Reflections\"\u003e\n\u003ch2\u003eReflections\u003c/h2\u003e\n\n\u003cp\u003eThis experience taught me several key lessons:\u003c/p\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cb\u003eLLMs help you get on with it\u003c/b\u003e: Even with zero knowledge of D3.js or SVG geometry, I could start building immediately. The AI scaffolded the coding, and I learned through the process.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003ePrompting is iterative\u003c/b\u003e: My first prompt wasn\u0026#39;t wrong — it just wasn\u0026#39;t specific enough. By reviewing the output at each step, clarified what I really wanted and refined my asks accordingly.\u003c/li\u003e\n\n\u003cli\u003e\u003cb\u003eLLMs unlock learning through building\u003c/b\u003e: In the end, I didn\u0026#39;t just get a working UI. I got an understandable codebase and a hands-on entry point into a new technology. Building first and learning from it.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/section\u003e\n\n\u003csection id=\"Conclusion\"\u003e\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eWhat started as a vague design idea turned into a functioning, symmetric, interactive visualization of the Thirty Meter Telescope\u0026#39;s mirror — built collaboratively with an LLM.\u003c/p\u003e\n\n\u003cp\u003eThis experience reaffirmed that prompt-driven development isn\u0026#39;t just about generating code — it\u0026#39;s about thinking through design, clarifying intent, and building your way into understanding.\u003c/p\u003e\n\n\u003cp\u003eIf you\u0026#39;ve ever wanted to explore a new technology, build a UI, or tackle a domain-specific visualization — don\u0026#39;t wait to learn it all first.\u003c/p\u003e\n\n\u003cp\u003eStart building with an LLM. You\u0026#39;ll learn along the way.\u003c/p\u003e\n\u003c/section\u003e\n\n\u003chr/\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": "2025-04-30T00:00:00Z"
}
