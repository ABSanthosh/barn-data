{
  "id": "a5327d0f-c546-4c47-81e5-dca058cfc79e",
  "title": "Vulnerability risk prioritization made simple with GitLab",
  "link": "https://about.gitlab.com/blog/2025/03/12/vulnerability-risk-prioritization-made-simple-with-gitlab",
  "description": "",
  "author": "Fernando Diaz",
  "published": "2025-03-12T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Fernando Diaz",
  "length": 7792,
  "excerpt": "GitLab provides detailed vulnerability risk data to assess the potential impact of detected vulnerabilities. Learn how this enables teams to effectively prioritize remediation efforts.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/blog/nuxt-images/ico/favicon-192x192.png?cache=2022041",
  "text": "Development and security teams are often overwhelmed by the number of vulnerabilities they need to remediate. Many organizations remediate less than 16% of their known vulnerabilities monthly. Vulnerability management teams face a constant challenge: which security flaws deserve immediate attention? Three key frameworks help answer this question: Common Vulnerability Scoring System (CVSS), Known Exploited Vulnerabilities (KEV), and Exploit Prediction Scoring System (EPSS). The GitLab 17.9 release adds support for these frameworks. In this article, you'll learn how to use these frameworks within GitLab to efficiently prioritize risk across your dependency and container image vulnerabilities using this data. Vulnerability risk assessment data CVSS CVSS provides a standardized method for rating the severity of security vulnerabilities. Scores range from 0 to 10, with higher values indicating greater severity. CVSS evaluates vulnerabilities across three dimension groups: Base metrics: intrinsic qualities that don't change over time (attack complexity, privileges required) Temporal metrics: factors that evolve (exploit maturity, remediation level) Environmental metrics: organization-specific impact considerations CVSS offers a consistent severity baseline and common language for security teams. Its comprehensive scoring methodology considers multiple aspects of a vulnerability's technical impact. KEV The Cybersecurity and Infrastructure Security Agency (CISA) maintains the KEV catalog, which identifies vulnerabilities actively exploited in the wild. Unlike academic severity scores, KEV focuses on real-world threat intelligence. Each entry includes: CVE identifier Vulnerability name Action required Due date for remediation (for federal agencies) KEV provides actionable intelligence based on observed threat actor behavior. It cuts through scoring complexity with a binary signal: \"This vulnerability is being actively exploited right now.\" EPSS The EPSS uses machine learning to predict the likelihood a vulnerability will be exploited in the next 30 days. Scores range from 0 to 1 (or 0%-100%), representing probability. EPSS analyzes hundreds of factors, including: Technical characteristics Social media mentions Exploit availability Vulnerability age EPSS brings risk-based prioritization to vulnerability management. Rather than focusing solely on technical severity, it helps teams understand which vulnerabilities attackers are most likely to target. Combining the frameworks for effective prioritization Each framework serves a unique purpose: CVSS indicates how severe a vulnerability is technically. KEV indicates which vulnerabilities are actively being exploited. EPSS indicates which vulnerabilities are likely to be exploited soon. An effective prioritization strategy leverages all three: Start with KEV-listed vulnerabilities as immediate priorities. Use EPSS to identify high-probability threats not yet on KEV. Consider CVSS for understanding technical impact. By combining these complementary frameworks, security teams can focus limited resources on the vulnerabilities that pose the greatest actual risk to their organizations. You can get started with prioritizing vulnerabilities with GitLab by: Adding security scanners to your pipeline Viewing vulnerability insights Setting the vulnerability status based metrics Watch this video to learn more: Adding security scanners to your pipeline GitLab provides built-in security scanning tools through its templates that can be integrated directly into your CI/CD pipeline. GitLab offers several security scanners that address different aspects of your application security: Static Application Security Testing (SAST): Analyzes your source code for known vulnerabilities Dynamic Application Security Testing (DAST): Tests your running application for vulnerabilities Dependency Scanning: Checks your dependencies for known vulnerabilities Container Scanning: Identifies vulnerabilities in container images Secret Detection: Finds secrets and credentials accidentally committed to your repository Infrastructure as Code Scanning: Detects security issues in IaC files Coverage-guided Fuzzing: Sends random inputs to an instrumented version of your application in an effort to detect bugs Web API Fuzzing: Sets operation parameters to unexpected values in an effort to cause unexpected behavior and errors in the API backend To add them to your pipeline, simply add the appropriate templates to .gitlab-ci.yml file. For example, adding SAST and Dependency Scanning to your pipeline is as simple as: include: - template: Security/SAST.gitlab-ci.yml - template: Security/Dependency-Scanning.gitlab-ci.yml stages: - test Once you commit the above changes, security scanners will begin to run. These scanners can be further configured to meet the needs of your organization. To learn more about our various scanners, see the GitLab application security documentation. Note: EPSS and KEV metrics are only provided for dependency and container image vulnerabilities. Viewing vulnerability insights Once a pipeline with your security scanners is run on the default branch, you can access the vulnerability report. The vulnerability report provides a consolidated view of all security vulnerabilities detected across your project by GitLab's security scanners. You can access it from your project by going to the side-tab and selecting Secure \u003e Vulnerability Report. Vulnerability report grouped by tool From the vulnerability report, select a vulnerability to see its insights page, which includes the severity, EPSS, KEV, and CVSS along with the following: description when it was detected current status available actions linked issues actions log filename and line number of the vulnerability (if available) This data can be used to effectively triage, remediate, or mitigate the vulnerability. Note: From the insights page, you can also leverage GitLab Duo’s AI capabilities to explain and auto-resolve a vulnerability. Setting the vulnerability status-based metrics After examining the provided data, we can go ahead and change the status of our vulnerability by clicking the Change status button: Change vulnerability status from insights page Then we'll see a popup that will allow you to change the status of a vulnerability: Change vulnerability status option When you dismiss a vulnerability you can choose one of the following reasons and optionally provide a comment: Acceptable risk: The vulnerability is known, and has not been remediated or mitigated, but is considered to be an acceptable business risk. False positive: An error in reporting in which a test result incorrectly indicates the presence of a vulnerability in a system when the vulnerability is not present. Mitigating control: The vulnerability’s risk is mitigated by a management, operational, or technical control (that is, safeguard or countermeasure) employed by an organization that provides equivalent or comparable protection for an information system. Used in tests: The finding is not a vulnerability because it is part of a test or is test data. Not applicable: The vulnerability is known, and has not been remediated or mitigated, but is considered to be in a part of the application that will not be updated. And there you have it, quick and easy vulnerability risk prioritization with GitLab! Get started today with a free, 60-day trial of GitLab Ultimate! Learn more To learn more about GitLab security and governance features and how we can help enhance your security posture, check out the following resources: GitLab Risk Assessment Data GitLab Security and Compliance Solutions GitLab Application Security documentation GitLab Risk Assessment Data epic",
  "image": "https://images.ctfassets.net/r9o86ar0p03f/1iy516k40hwBDChKcUJ2zb/264b924e95ca5c65751e0a52ee6a41d7/blog-image-template-1800x945__5_.png?fm=webp\u0026w=820\u0026h=500",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-37f1022b=\"\" data-v-53094866=\"\" data-v-74bd29c6=\"\"\u003e\u003cp\u003eDevelopment and security teams are often overwhelmed by the number of vulnerabilities they need to remediate. Many organizations remediate \u003ca href=\"https://arxiv.org/pdf/2302.14172\"\u003eless than 16%\u003c/a\u003e of their known vulnerabilities monthly. Vulnerability management teams face a constant challenge: which security flaws deserve immediate attention? Three key frameworks help answer this question: Common Vulnerability Scoring System (\u003ca href=\"https://nvd.nist.gov/vuln-metrics/cvss\"\u003eCVSS\u003c/a\u003e), Known Exploited Vulnerabilities (\u003ca href=\"https://www.cisa.gov/known-exploited-vulnerabilities-catalog\"\u003eKEV\u003c/a\u003e), and Exploit Prediction Scoring System (\u003ca href=\"https://www.first.org/epss/\"\u003eEPSS\u003c/a\u003e). The \u003ca href=\"https://about.gitlab.com/releases/2025/02/20/gitlab-17-9-released/\"\u003eGitLab 17.9 release\u003c/a\u003e adds support for these frameworks. In this article, you\u0026#39;ll learn how to use these frameworks within GitLab to efficiently prioritize risk across your dependency and container image vulnerabilities using this data.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/7nzhbKHvicBjJsi9mRlYjf/7bd48bd3af76d56707690f84745bb6f7/vulnerability_data.png\" alt=\"Vulnerability risk assessment data\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eVulnerability risk assessment data\u003c/i\u003e\u003c/center\u003e\n\u003ch2 id=\"cvss\" tabindex=\"-1\"\u003eCVSS \u003ca href=\"#cvss\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eCVSS provides a standardized method for rating the severity of security vulnerabilities. Scores range from 0 to 10, with higher values indicating greater severity.\u003c/p\u003e\n\u003cp\u003eCVSS evaluates vulnerabilities across three dimension groups:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBase metrics: intrinsic qualities that don\u0026#39;t change over time (attack complexity, privileges   required)\u003c/li\u003e\n\u003cli\u003eTemporal metrics: factors that evolve (exploit maturity, remediation level)\u003c/li\u003e\n\u003cli\u003eEnvironmental metrics: organization-specific impact considerations\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCVSS offers a consistent severity baseline and common language for security teams. Its comprehensive scoring methodology considers multiple aspects of a vulnerability\u0026#39;s technical impact.\u003c/p\u003e\n\u003ch2 id=\"kev\" tabindex=\"-1\"\u003eKEV \u003ca href=\"#kev\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe Cybersecurity and Infrastructure Security Agency (CISA) maintains the KEV catalog, which identifies vulnerabilities actively exploited in the wild.\u003c/p\u003e\n\u003cp\u003eUnlike academic severity scores, KEV focuses on real-world threat intelligence. Each entry includes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCVE identifier\u003c/li\u003e\n\u003cli\u003eVulnerability name\u003c/li\u003e\n\u003cli\u003eAction required\u003c/li\u003e\n\u003cli\u003eDue date for remediation (for federal agencies)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eKEV provides actionable intelligence based on observed threat actor behavior. It cuts through scoring complexity with a binary signal: \u0026#34;This vulnerability is being actively exploited right now.\u0026#34;\u003c/p\u003e\n\u003ch2 id=\"epss\" tabindex=\"-1\"\u003eEPSS \u003ca href=\"#epss\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe EPSS uses machine learning to predict the likelihood a vulnerability will be exploited in the next 30 days. Scores range from 0 to 1 (or 0%-100%), representing probability.\u003c/p\u003e\n\u003cp\u003eEPSS analyzes hundreds of factors, including:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTechnical characteristics\u003c/li\u003e\n\u003cli\u003eSocial media mentions\u003c/li\u003e\n\u003cli\u003eExploit availability\u003c/li\u003e\n\u003cli\u003eVulnerability age\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEPSS brings risk-based prioritization to vulnerability management. Rather than focusing solely on technical severity, it helps teams understand which vulnerabilities attackers are most likely to target.\u003c/p\u003e\n\u003ch2 id=\"combining-the-frameworks-for-effective-prioritization\" tabindex=\"-1\"\u003eCombining the frameworks for effective prioritization \u003ca href=\"#combining-the-frameworks-for-effective-prioritization\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eEach framework serves a unique purpose:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCVSS indicates how severe a vulnerability is technically.\u003c/li\u003e\n\u003cli\u003eKEV indicates which vulnerabilities are actively being exploited.\u003c/li\u003e\n\u003cli\u003eEPSS indicates which vulnerabilities are likely to be exploited soon.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAn effective prioritization strategy leverages all three:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eStart with KEV-listed vulnerabilities as immediate priorities.\u003c/li\u003e\n\u003cli\u003eUse EPSS to identify high-probability threats not yet on KEV.\u003c/li\u003e\n\u003cli\u003eConsider CVSS for understanding technical impact.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBy combining these complementary frameworks, security teams can focus limited resources on the vulnerabilities that pose the greatest actual risk to their organizations. You can get started with prioritizing vulnerabilities with GitLab by:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAdding security scanners to your pipeline\u003c/li\u003e\n\u003cli\u003eViewing vulnerability insights\u003c/li\u003e\n\u003cli\u003eSetting the vulnerability status based metrics\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWatch this video to learn more:\u003c/p\u003e\n\n\u003cfigure\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/7-dWwoKfCHw?si=iC73JCRsxPUEWKf-\" frameborder=\"0\" allowfullscreen=\"\"\u003e \u003c/iframe\u003e\n\u003c/figure\u003e\n\n\u003ch3 id=\"adding-security-scanners-to-your-pipeline\" tabindex=\"-1\"\u003eAdding security scanners to your pipeline \u003ca href=\"#adding-security-scanners-to-your-pipeline\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eGitLab provides built-in security scanning tools through its templates that can be integrated directly into your CI/CD pipeline. GitLab offers several security scanners that address different aspects of your application security:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://docs.gitlab.com/user/application_security/sast/\"\u003eStatic Application Security Testing (SAST)\u003c/a\u003e:\u003c/strong\u003e Analyzes your source code for known vulnerabilities\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://docs.gitlab.com/user/application_security/dast/\"\u003eDynamic Application Security Testing (DAST)\u003c/a\u003e:\u003c/strong\u003e Tests your running application for vulnerabilities\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://docs.gitlab.com/user/application_security/dependency_scanning/\"\u003eDependency Scanning\u003c/a\u003e:\u003c/strong\u003e Checks your dependencies for known vulnerabilities\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://docs.gitlab.com/user/application_security/container_scanning/\"\u003eContainer Scanning\u003c/a\u003e:\u003c/strong\u003e Identifies vulnerabilities in container images\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://docs.gitlab.com/user/application_security/secret_detection/\"\u003eSecret Detection\u003c/a\u003e:\u003c/strong\u003e Finds secrets and credentials accidentally committed to your repository\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://docs.gitlab.com/user/application_security/iac_scanning/\"\u003eInfrastructure as Code Scanning\u003c/a\u003e:\u003c/strong\u003e Detects security issues in IaC files\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://docs.gitlab.com/user/application_security/coverage_fuzzing/\"\u003eCoverage-guided Fuzzing\u003c/a\u003e:\u003c/strong\u003e Sends random inputs to an instrumented version of your application in an effort to detect bugs\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://docs.gitlab.com/user/application_security/api_fuzzing/\"\u003eWeb API Fuzzing\u003c/a\u003e:\u003c/strong\u003e Sets operation parameters to unexpected values in an effort to cause unexpected behavior and errors in the API backend\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo add them to your pipeline, simply add the appropriate templates to \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file. For example, adding SAST and Dependency Scanning to your pipeline is as simple as:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003einclude:  \n  - template: Security/SAST.gitlab-ci.yml  \n  - template: Security/Dependency-Scanning.gitlab-ci.yml\n\nstages:  \n  - test  \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce you commit the above changes, security scanners will begin to run. These scanners can be further configured to meet the needs of your organization. To learn more about our various scanners, see the \u003ca href=\"https://docs.gitlab.com/user/application_security/\"\u003eGitLab application security documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e EPSS and KEV metrics are only provided for \u003ca href=\"https://docs.gitlab.com/user/application_security/dependency_scanning/\"\u003edependency\u003c/a\u003e and \u003ca href=\"https://docs.gitlab.com/user/application_security/container_scanning/\"\u003econtainer image\u003c/a\u003e vulnerabilities.\u003c/p\u003e\n\u003ch3 id=\"viewing-vulnerability-insights\" tabindex=\"-1\"\u003eViewing vulnerability insights \u003ca href=\"#viewing-vulnerability-insights\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eOnce a pipeline with your security scanners is run on the default branch, you can access the vulnerability report. The vulnerability report provides a consolidated view of all security vulnerabilities detected across your project by GitLab\u0026#39;s security scanners. You can access it from your project by going to the side-tab and selecting \u003cstrong\u003eSecure \u0026gt; Vulnerability Report\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/2aP7NfnjJXScSxopiE5GHx/b1b51f8cb454038a2b320ab6886ad87c/vulnerability_report__1_.png\" alt=\"Vulnerability report grouped by tool\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eVulnerability report grouped by tool\u003c/i\u003e\u003c/center\u003e\n\u003cp\u003eFrom the vulnerability report, select a vulnerability to see its insights page, which includes the severity, EPSS, KEV, and CVSS along with the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edescription\u003c/li\u003e\n\u003cli\u003ewhen it was detected\u003c/li\u003e\n\u003cli\u003ecurrent status\u003c/li\u003e\n\u003cli\u003eavailable actions\u003c/li\u003e\n\u003cli\u003elinked issues\u003c/li\u003e\n\u003cli\u003eactions log\u003c/li\u003e\n\u003cli\u003efilename and line number of the vulnerability (if available)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis data can be used to effectively triage, remediate, or mitigate the vulnerability.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e From the insights page, you can also leverage GitLab Duo’s AI capabilities to \u003ca href=\"https://docs.gitlab.com/user/application_security/vulnerabilities/#vulnerability-explanation\"\u003eexplain\u003c/a\u003e and \u003ca href=\"https://docs.gitlab.com/user/application_security/vulnerabilities/#vulnerability-resolution\"\u003eauto-resolve\u003c/a\u003e a vulnerability.\u003c/p\u003e\n\u003ch3 id=\"setting-the-vulnerability-status-based-metrics\" tabindex=\"-1\"\u003eSetting the vulnerability status-based metrics \u003ca href=\"#setting-the-vulnerability-status-based-metrics\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eAfter examining the provided data, we can go ahead and change the status of our vulnerability by clicking the \u003cstrong\u003eChange status\u003c/strong\u003e button:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/6LggzuPyiVGzd8PIzPDtIS/1cf5f83a989f558c69eba33bac863c44/change_status.png\" alt=\"Change vulnerability status from insights page\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eChange vulnerability status from insights page\u003c/i\u003e\u003c/center\u003e\n\u003cp\u003eThen we\u0026#39;ll see a popup that will allow you to change the status of a vulnerability:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://images.ctfassets.net/r9o86ar0p03f/6IdOP9DmSC4rrYR7BIIFfy/e61d0f68a4750b1f40471445055df113/change_status_2.png\" alt=\"Change vulnerability status option\"/\u003e\u003c/p\u003e\n\u003ccenter\u003e\u003ci\u003eChange vulnerability status option\u003c/i\u003e\u003c/center\u003e\n\n\u003cp\u003eWhen you dismiss a vulnerability you can choose one of the following reasons and optionally provide a comment:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAcceptable risk:\u003c/strong\u003e The vulnerability is known, and has not been remediated or mitigated, but is considered to be an acceptable business risk.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFalse positive:\u003c/strong\u003e An error in reporting in which a test result incorrectly indicates the presence of a vulnerability in a system when the vulnerability is not present.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigating control:\u003c/strong\u003e The vulnerability’s risk is mitigated by a management, operational, or technical control (that is, safeguard or countermeasure) employed by an organization that provides equivalent or comparable protection for an information system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUsed in tests:\u003c/strong\u003e The finding is not a vulnerability because it is part of a test or is test data.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNot applicable:\u003c/strong\u003e The vulnerability is known, and has not been remediated or mitigated, but is considered to be in a part of the application that will not be updated.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd there you have it, quick and easy vulnerability risk prioritization with GitLab!\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGet started today with \u003ca href=\"https://about.gitlab.com/pricing/ultimate/\"\u003ea free, 60-day trial of GitLab Ultimate\u003c/a\u003e!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"learn-more\" tabindex=\"-1\"\u003eLearn more \u003ca href=\"#learn-more\"\u003e\u003csvg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eTo learn more about GitLab security and governance features and how we can help enhance your security posture, check out the following resources:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/user/application_security/vulnerabilities/risk_assessment_data/\"\u003eGitLab Risk Assessment Data\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/solutions/security-compliance/\"\u003eGitLab Security and Compliance Solutions\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://docs.gitlab.com/ee/user/application_security/\"\u003eGitLab Application Security documentation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gitlab.com/groups/gitlab-org/-/epics/11544\"\u003eGitLab Risk Assessment Data epic\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-03-12T00:00:00Z",
  "modifiedTime": null
}
