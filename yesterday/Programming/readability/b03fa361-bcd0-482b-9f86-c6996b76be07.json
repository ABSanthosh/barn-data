{
  "id": "b03fa361-bcd0-482b-9f86-c6996b76be07",
  "title": "Enhancing the Python ecosystem with type checking and free threading",
  "link": "https://engineering.fb.com/2025/05/05/developer-tools/enhancing-the-python-ecosystem-with-type-checking-and-free-threading/",
  "description": "Meta and Quantsight have improved key libraries in the Python Ecosystem. There is plenty more to do and we invite the community to help with our efforts.¬† We‚Äôll look at two key efforts in Python‚Äôs packaging ecosystem to make packages faster and easier to use: üöÄ Unlock performance wins for developers through free-threaded Python ‚Äì [...] Read More... The post Enhancing the Python ecosystem with type checking and free threading appeared first on Engineering at Meta.",
  "author": "",
  "published": "Mon, 05 May 2025 16:00:05 +0000",
  "source": "https://engineering.fb.com/feed/",
  "categories": [
    "DevInfra"
  ],
  "byline": "By Danny Yang, Matt Page, Aaron Pollack",
  "length": 6287,
  "excerpt": "Meta and Quantsight have improved key libraries in the Python Ecosystem. There is plenty more to do and we invite the community to help with our efforts. We‚Äôll look at two key efforts in Python‚Äôs ‚Ä¶",
  "siteName": "Engineering at Meta",
  "favicon": "",
  "text": "Meta and Quantsight have improved key libraries in the Python Ecosystem. There is plenty more to do and we invite the community to help with our efforts.¬† We‚Äôll look at two key efforts in Python‚Äôs packaging ecosystem to make packages faster and easier to use: üöÄ Unlock performance wins for developers through free-threaded Python ‚Äì where we leverage Python 3.13‚Äôs support for concurrent programming (made possible by removing the Global Interpreter Lock (GIL)).¬† ‚úÖ Increase developer velocity in the IDE with improved type annotations. Enhancing typed Python in the Python scientific stack Type hints, introduced in Python 3.5 with PEP-484, allow developers to specify variable types, enhancing code understanding without affecting runtime behavior. Type-checkers validate these annotations, helping prevent bugs and improving IDE functions like autocomplete and jump-to-definition. Despite their benefits, adoption is inconsistent across the open source ecosystem, with varied approaches to specifying and maintaining type annotations. The landscape of open source software is fractured with respect to how type annotations are specified, maintained, and distributed to end users. Some projects have in-line annotations (types directly declared in the source code directly), others keep types in stub files, and many projects have no types at all, relying on third party repositories such as the typeshed to provide community-maintained stubs. Each approach has its own pros and cons, but application and maintenance of them has been inconsistent. Meta and Quansight are addressing this inconsistency through: Direct contributions: We have improved the type coverage for pandas-stubs and numpy, and are eager to expand the effort to more packages.¬† Community engagement: Promoting type annotation efforts to encourage community involvement, listen to feedback and create actionable ways to improve the ecosystem.¬† Tooling and automation: Developing tools to address common challenges adding types and keeping the types up-to-date with the source code. Improved type annotations in pandas TL;DR: Pandas is the second most downloaded package from the Python scientific stack. We improved pandas-stubs package type annotation coverage from 36% to over 50%. Background The pandas community maintains its own stubs in a separate repository, which must be installed to obtain type annotations. While these stubs are checked separately from the source code, it allows the community to use types with their own type checking and IDE.¬† Improving type coverage When we began our work in pandas-stubs, coverage was around 36%, as measured by the percentage of parameters, returns, and attributes that had a complete type annotation (the annotation is present and all generics have type arguments). After several weeks of work and about 30 PRs, type completeness is now measured at over 50%. The majority of our contributions involved adding annotations to previously-untyped parameters, adding type arguments to raw generic types, and removing deprecated/undocumented interfaces. We also improved several inaccurate annotations and updated others to match the inline annotations in the pandas source code.¬† Key introductions Two key introductions significantly increased coverage: Replacing raw Series types with UnknownSeries, a new type aliased to Series[Any]. When applied to return type annotations, this reduces the number of type checker false-positives when the function is called. Improving types of core Dataframe operations like insert, combine, replace, transpose, and assign, as well as many timestamp and time-zone related APIs. Tooling development In addition to improving coverage directly, we developed tooling to catalog public interfaces missing annotations. We also augmented our tools for measuring type coverage to handle the situation where stubs are distributed independently, rather than being packaged into the core library wheel. What is free-threaded Python ? Free-threaded Python (FTP) is an experimental build of CPython that allows multiple threads to interact with the VM in parallel. Previously, access to the VM required holding the global interpreter lock (GIL), thereby serializing execution of concurrently running threads. With the GIL becoming optional, developers will be able to take full advantage of multi-core processors and write truly parallel code. Benefits of free-threaded Python The benefits of free-threaded Python are numerous: True parallelism in a single process: With the GIL removed, developers can write Python code that takes full advantage of multi-core processors without needing to use multiple processes. CPU-bound code can execute in parallel across multiple cores. Improved performance: By allowing multiple threads to execute Python code simultaneously, work can be effectively distributed across multiple threads inside a single process. Simplified concurrency: Free-threading provides developers with a more ergonomic way to write parallel programs in Python. Gone are the days of needing to use multiprocessing.Pool and/or resorting to custom shared memory data structures to efficiently share data between worker processes. Getting Python‚Äôs ecosystem ready for FTP The ecosystem of Python packages must work well with free-threaded Python in order for it to be practically useful; application owners can‚Äôt use free-threading unless their dependencies work well with it. To that end, we have been taking a ‚Äúbottoms up‚Äù approach to tackle the most difficult/popular packages in the ecosystem. We‚Äôve added free-threading support to many of the most popular packages used for scientific computing (e.g. numpy, scipy, scikit-learn) and language bindings (e.g. Cython, nanobind, pybind, PyO3). Just getting started Together, we made substantial progress in improving type annotations and free-threading compatibility in Python libraries. We couldn‚Äôt have done it without the Python community and are asking others to join our efforts.¬† Whether it‚Äôs further updates to the type annotations or preparing your code for FTP, we value your help moving the Python ecosystem forward! To learn more about Meta Open Source, visit our open source site, subscribe to our YouTube channel, or follow us on Facebook, Threads, X and LinkedIn.",
  "image": "https://engineering.fb.com/wp-content/uploads/2025/04/Python-Packaging-Ecosystem-for-Performance-and-Usability.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\t\t\u003cp\u003e\u003ci\u003e\u003cspan\u003eMeta and Quantsight have improved key libraries in the Python Ecosystem. There is plenty more to do and we invite the community to help with our efforts.¬†\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eWe‚Äôll look at two key efforts in Python‚Äôs packaging ecosystem to make packages faster and easier to use:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eüöÄ Unlock performance wins for developers through free-threaded Python ‚Äì where we leverage Python 3.13‚Äôs support for concurrent programming (made possible by removing the Global Interpreter Lock (GIL)).¬†\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003e‚úÖ Increase developer velocity in the IDE with improved type annotations.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003e\u003cspan\u003eEnhancing typed Python in the Python scientific stack\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eType hints, introduced in Python 3.5 with \u003c/span\u003e\u003ca href=\"https://peps.python.org/pep-0484/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ePEP-484\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, allow developers to specify variable types, enhancing code understanding without affecting runtime behavior. Type-checkers validate these annotations, helping prevent bugs and improving IDE functions like autocomplete and jump-to-definition. Despite their benefits, adoption is inconsistent across the open source ecosystem, with varied approaches to specifying and maintaining type annotations.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eThe landscape of open source software is fractured with respect to how type annotations are specified, maintained, and distributed to end users. Some projects have in-line annotations (types directly declared in the source code directly), others keep types in stub files, and many projects have no types at all, relying on third party repositories such as the \u003c/span\u003e\u003ca href=\"https://github.com/python/typeshed\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003etypeshed\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e to provide community-maintained stubs. Each approach has its own pros and cons, but application and maintenance of them \u003c/span\u003e\u003ca href=\"https://discuss.python.org/t/prevalence-staleness-of-stubs-packages-in-pypi/70457\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003ehas been inconsistent\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eMeta and Quansight are addressing this inconsistency through:\u003c/span\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli aria-level=\"1\"\u003e\u003cb\u003eDirect contributions:\u003c/b\u003e\u003cspan\u003e We have improved the type coverage for pandas-stubs and numpy, and are eager to expand the effort to more packages.¬†\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cb\u003eCommunity engagement:\u003c/b\u003e\u003cspan\u003e Promoting type annotation efforts to encourage community involvement, listen to feedback and create actionable ways to improve the ecosystem.¬†\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cb\u003eTooling and automation:\u003c/b\u003e\u003cspan\u003e Developing tools to address common challenges adding types and keeping the types up-to-date with the source code.\u003c/span\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003e\u003cspan\u003eImproved type annotations in pandas\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eTL;DR: \u003c/span\u003e\u003ci\u003e\u003cspan\u003ePandas is the second most downloaded package from the Python scientific stack. We improved \u003c/span\u003e\u003c/i\u003e\u003ca href=\"https://github.com/pandas-dev/pandas-stubs/\" target=\"_blank\" rel=\"noopener\"\u003e\u003ci\u003e\u003cspan\u003epandas-stubs\u003c/span\u003e\u003c/i\u003e\u003c/a\u003e\u003ci\u003e\u003cspan\u003e package type annotation coverage from 36% to over 50%.\u003c/span\u003e\u003c/i\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eBackground\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThe pandas community maintains its own stubs in a separate repository, which must be installed to obtain type annotations. While these stubs are checked separately from the source code, it allows the community to use types with their own type checking and IDE.¬†\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eImproving type coverage\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eWhen we began our work in pandas-stubs, coverage was around 36%, as measured by the percentage of parameters, returns, and attributes that had a complete type annotation (the annotation is present and all generics have type arguments). After several weeks of work and about 30 PRs, type completeness is now measured at over 50%. The majority of our contributions involved adding annotations to previously-untyped parameters, adding type arguments to raw generic types, and removing deprecated/undocumented interfaces. We also improved several inaccurate annotations and updated others to match the inline annotations in the pandas source code.¬†\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eKey introductions\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eTwo key introductions significantly increased coverage:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eReplacing raw \u003c/span\u003e\u003cspan\u003eSeries\u003c/span\u003e\u003cspan\u003e types with \u003c/span\u003e\u003cspan\u003eUnknownSeries\u003c/span\u003e\u003cspan\u003e, a new type aliased to \u003c/span\u003e\u003cspan\u003eSeries[Any]\u003c/span\u003e\u003cspan\u003e. When applied to return type annotations, this reduces the number of type checker false-positives when the function is called.\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cspan\u003eImproving types of core Dataframe operations like insert, combine, replace, transpose, and assign, as well as many timestamp and time-zone related APIs.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e\u003cspan\u003eTooling development\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eIn addition to improving coverage directly, we developed tooling to catalog public interfaces missing annotations. We also augmented our tools for measuring type coverage to handle the situation where stubs are distributed independently, rather than being packaged into the core library wheel.\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eWhat is free-threaded Python ?\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eFree-threaded Python (FTP) is an experimental build of CPython that allows multiple threads to interact with the VM in parallel. Previously, access to the VM required holding the global interpreter lock (GIL), thereby serializing execution of concurrently running threads. With the GIL becoming optional, developers will be able to take full advantage of multi-core processors and write truly parallel code.\u003c/span\u003e\u003c/p\u003e\n\u003ch3\u003e\u003cspan\u003eBenefits of free-threaded Python\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThe benefits of free-threaded Python are numerous:\u003c/span\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli aria-level=\"1\"\u003e\u003cb\u003eTrue parallelism in a single process\u003c/b\u003e\u003cspan\u003e: With the GIL removed, developers can write Python code that takes full advantage of multi-core processors without needing to use multiple processes. CPU-bound code can execute in parallel across multiple cores.\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cb\u003eImproved performance:\u003c/b\u003e\u003cspan\u003e By allowing multiple threads to execute Python code simultaneously, work can be effectively distributed across multiple threads inside a single process.\u003c/span\u003e\u003c/li\u003e\n\u003cli aria-level=\"1\"\u003e\u003cb\u003eSimplified concurrency:\u003c/b\u003e\u003cspan\u003e Free-threading provides developers with a more ergonomic way to write parallel programs in Python. Gone are the days of needing to use \u003c/span\u003e\u003cspan\u003emultiprocessing.Pool\u003c/span\u003e\u003cspan\u003e and/or resorting to custom shared memory data structures to efficiently share data between worker processes.\u003c/span\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003e\u003cspan\u003eGetting Python‚Äôs ecosystem ready for FTP\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003e\u003cspan\u003eThe ecosystem of Python packages must work well with free-threaded Python in order for it to be practically useful; application owners can‚Äôt use free-threading unless their dependencies work well with it. To that end, we have been taking a ‚Äúbottoms up‚Äù approach to tackle the most difficult/popular packages in the ecosystem. \u003c/span\u003e\u003ca href=\"https://py-free-threading.github.io/tracking/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eWe‚Äôve added free-threading support\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e to many of the most popular packages used for scientific computing (e.g. numpy, scipy, scikit-learn) and language bindings (e.g. Cython, nanobind, pybind, PyO3).\u003c/span\u003e\u003c/p\u003e\n\u003ch2\u003e\u003cspan\u003eJust getting started\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003e\u003cspan\u003eTogether, we made substantial progress in improving type annotations and free-threading compatibility in Python libraries. We couldn‚Äôt have done it without the Python community and are asking others to join our efforts.¬† Whether it‚Äôs\u003c/span\u003e \u003ca href=\"https://discuss.python.org/t/call-for-suggestions-nominate-python-packages-for-typing-improvements/80186\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003efurther updates to the type annotations\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e or\u003c/span\u003e \u003ca href=\"https://py-free-threading.github.io/porting/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003epreparing your code for FTP\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, we value your help moving the Python ecosystem forward!\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003eTo learn more about Meta Open Source, visit our \u003c/span\u003e\u003ca href=\"https://opensource.fb.com/\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eopen source site\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, subscribe to our \u003c/span\u003e\u003ca href=\"https://www.youtube.com/channel/UCCQY962PmHabTjaHv2wJzfQ\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eYouTube channel\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, or follow us on \u003c/span\u003e\u003ca href=\"https://www.facebook.com/MetaOpenSource\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eFacebook\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, \u003c/span\u003e\u003ca href=\"https://www.threads.net/@metaopensource\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eThreads\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e, \u003c/span\u003e\u003ca href=\"https://x.com/MetaOpenSource\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eX\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e and \u003c/span\u003e\u003ca href=\"https://www.linkedin.com/showcase/meta-open-source?fbclid=IwZXh0bgNhZW0CMTEAAR2fEOJNb7zOi8rJeRvQry5sRxARpdL3OpS4sYLdC1_npkEy60gBS1ynXwQ_aem_mJUK6jEUApFTW75Emhtpqw\" target=\"_blank\" rel=\"noopener\"\u003e\u003cspan\u003eLinkedIn\u003c/span\u003e\u003c/a\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\n\n\t\t\n\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-05-05T16:00:05Z",
  "modifiedTime": "2025-04-29T23:27:46Z"
}
