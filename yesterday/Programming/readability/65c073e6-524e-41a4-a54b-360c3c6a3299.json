{
  "id": "65c073e6-524e-41a4-a54b-360c3c6a3299",
  "title": "Microsoft CTO Details Successes, Challenges, and Commitment to Rust at Rust Nation UK",
  "link": "https://www.infoq.com/news/2025/05/microsoft-cto-rust-commitment/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Mark Russinovich, Chief Technology Officer for Microsoft Azure, delved in a recent talk at Rust Nation UK into the factors driving Rust adoption, providing concrete examples of Rust usage in Microsoft products, and detailing ongoing efforts to accelerate the migration from C/C++ to Rust at Microsoft by leveraging generative AI. By Bruno Couriol",
  "author": "Bruno Couriol",
  "published": "Mon, 19 May 2025 22:34:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Azure",
    "C++",
    "Windows",
    "Rust",
    "Microsoft",
    "Web Development",
    "Development",
    "news"
  ],
  "byline": "Bruno Couriol",
  "length": 6168,
  "excerpt": "Mark Russinovich, Chief Technology Officer for Microsoft Azure, delved in a recent talk at Rust Nation UK into the factors driving Rust adoption, providing concrete examples of Rust usage in Microsoft",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250513062629/apple-touch-icon.png",
  "text": "Mark Russinovich, Chief Technology Officer for Microsoft Azure, delved in a recent talk at Rust Nation UK into the factors driving Rust adoption, providing concrete examples of Rust usage in Microsoft products, and detailing ongoing efforts to accelerate the migration from C/C++ to Rust at Microsoft by leveraging generative AI. The original motivation for recommending Rust originated from a detailed review of security vulnerabilities. Russinovick says: [The] journey actually begins with us looking at the problems we’ve had with C and C++ [… Looking at a] summary of Microsoft security response centers triaging of the vulnerabilities over the previous 10 years across all Microsoft products, 70% of the vulnerabilities were due to unsafe use of memory specifically in C++ and we just see this trend continuing as the threat actors are going after these kinds of problems. It also is causing problems just in terms of incidents as well. Other major IT companies and security organizations have expressed similar conclusions. Google’s security research team, Project Zero, reported that out of the 58 in-the-wild 0-days for the year, 39, or 67% were memory corruption vulnerabilities. Memory corruption vulnerabilities have been the standard for attacking software for the last few decades and it’s still how attackers are having success. Mozilla also estimated a few years back that 74% of security bugs identified in Firefox’s style component could have been avoided by writing this component in Rust. In fact, Rust’s language creator, Graydon Hoare, contended at the Mozilla Annual Summit in 2010 in one of the earliest presentations about Rust that C++ was unsafe is almost every way, and featured no ownership policies, no concurrency control at all, and could not even keep const values constant. Microsoft’s “Secure Future Initiative”, which Russinovich links to breaches performed by two nation-state actors, commits to expanding the use of memory-safe languages. Microsoft recently donated $1 million to the Rust Foundation to support a variety of critical Rust language and project priorities. Russinovich further detailed examples of Rust in Microsoft products. In Windows, Rust is used in security-critical software. That includes firmware development (Project Mu), kernel components, a cryptography library (e.g. rustls symcrypt support), and ancillary components (e.g., DirectWrite Core). In Office, Rust is being used in some performance-critical areas. The Rust implementation of a semantic search algorithm in Office, delivered to customers on CosmosDB and PostgreSQL, proved to be more performant and memory efficient than the C++ version, providing a significant win for large-scale vector searches. Following a directive mandating that no more systems code be written in C++ in Azure, Rust is used in several Azure-related software. Caliptra is an industry collaboration for secure cloud server firmware. Key firmware components are written entirely in Rust and are open-sourced. Azure Integrated HSM is a new in-house security chip deployed in all new servers starting in 2025. The firmware and guest libraries are written in Rust to ensure the highest security standards for cryptographic keys. Russinovich also mentioned Azure Boost agents, Hyper-V (Microsoft’s hypervisor), OpenVMM (a modular, cross-platform Virtual Machine Monitor recently open-sourced), and Hyperlight as partly or entirely written in Rust. Developer feedback at Microsoft has generally been positive but also included negatives. On the positive side, developers liked that if Rust code compiles, it generally works as expected, leading to faster iteration. Reduced friction in development leads to more motivation to write tests. Developers become more conscious of memory management pitfalls. The Rust ecosystem and Cargo are appreciated for dependency management. Performance increases are often observed (though not always the primary goal). Data-race-related concurrency bugs are reduced. Memory-safety-related vulnerabilities are significantly reduced. On the negative side, developers mentioned that C++ interop remains difficult. The initial learning curve for Rust is further perceived as steep. Dynamic linking is a challenge. Reliance on some non-stabilized Rust features is a concern. Integrating Cargo with larger enterprise build systems requires effort. Foreign Function Interface (FFI) is tough to do safely, even in Rust. Tooling is still behind when compared with other languages. Russinovich further describes Microsoft’s efforts to accelerate the migration of C/C++ legacy code to Rust. One area is verified crypto libraries, using formal verification techniques for C and then transpiling to safe Rust (see Compiling C to Safe Rust, Formalized). Microsoft is also exploring using large language models for automated code translation. Russinovich concluded by reiterating Microsoft’s strong commitment to Rust across the company and emphasizing Rust’s increasing maturity and adoption: You know people will come and say, hey wait, there’s this new language that’s even better than Rust. It’s more easy to use than Rust and I say well when is it going to be ready? Because we’re over 10 years into Rust and you know we’re finally ready because it takes a long time for a language to mature, for the tooling to mature, and we’re not even finally, you know, completely done with maturing the Rust toolchain. Anybody that wants to come along at this point and disrupt something that’s already as good as Rust has a very high hill to climb. So I don’t see anything replacing Rust anytime soon […] We’re 100% behind Rust. Readers are strongly encouraged to view the full talk on YouTube. It contains abundant valuable examples, technical explanations, and demos. Rust Nation UK is a multi-track conference dedicated to the Rust language and community. The conference features workshops, talks, and tutorials curated for developers of all levels. The conference is held annually at The Brewery. About the Author Bruno Couriol",
  "image": "https://res.infoq.com/news/2025/05/microsoft-cto-rust-commitment/en/headerimage/generatedHeaderImage-1747690867185.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eMark Russinovich, \u003ca href=\"https://www.linkedin.com/in/markrussinovich\"\u003eChief Technology Officer for Microsoft Azure\u003c/a\u003e, delved in a \u003ca href=\"https://www.youtube.com/watch?v=1VgptLwP588\"\u003erecent talk at Rust Nation UK\u003c/a\u003e into the factors driving Rust adoption, providing concrete examples of Rust usage in Microsoft products, and detailing ongoing efforts to accelerate the migration from C/C++ to Rust at Microsoft by leveraging generative AI.\u003c/p\u003e\n\u003cp\u003eThe original motivation for recommending Rust originated from a detailed review of security vulnerabilities. Russinovick \u003ca href=\"https://youtu.be/1VgptLwP588?t=20\"\u003esays\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e[The] journey actually begins with us looking at the problems we’ve had with C and C++ [… Looking at a] summary of Microsoft security response centers triaging of the vulnerabilities over the previous 10 years across all Microsoft products, 70% of the vulnerabilities were due to unsafe use of memory specifically in C++ and we just see this trend continuing as the threat actors are going after these kinds of problems. It also is causing problems just in terms of incidents as well.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eOther major IT companies and security organizations have expressed similar conclusions. Google’s security research team, Project Zero, \u003ca href=\"https://googleprojectzero.blogspot.com/2022/04/the-more-you-know-more-you-know-you.html\"\u003ereported\u003c/a\u003e that \u003cem\u003eout of the 58 in-the-wild 0-days for the year, 39, or 67% were memory corruption vulnerabilities. Memory corruption vulnerabilities have been the standard for attacking software for the last few decades and it’s still how attackers are having success.\u003c/em\u003e  Mozilla also \u003ca href=\"https://hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust/\"\u003eestimated\u003c/a\u003e a few years back that 74% of security bugs identified in Firefox’s style component could have been avoided by writing this component in Rust. In fact, Rust’s language creator, \u003ca href=\"https://types.pl/@graydon\"\u003eGraydon Hoare\u003c/a\u003e, contended at the Mozilla Annual Summit in 2010 in \u003ca href=\"http://venge.net/graydon/talks/intro-talk-2.pdf\"\u003eone of the earliest presentations about Rust\u003c/a\u003e  that C++ was \u003cem\u003eunsafe is almost every way\u003c/em\u003e, and featured \u003cem\u003eno ownership policies, no concurrency control at all, and could not even keep \u003ccode\u003econst\u003c/code\u003e values constant\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eMicrosoft’s “Secure Future Initiative”, which Russinovich links to breaches performed by two nation-state actors, commits to expanding the use of memory-safe languages. Microsoft \u003ca href=\"https://rustfoundation.org/media/1m-microsoft-donation-to-fund-key-rust-foundation-project-priorities/\"\u003erecently donated $1 million to the Rust Foundation\u003c/a\u003e to support a variety of critical Rust language and project priorities.\u003c/p\u003e\n\u003cp\u003eRussinovich further detailed examples of Rust in Microsoft products. In Windows, Rust is used in security-critical software. That includes firmware development (\u003ca href=\"https://microsoft.github.io/mu/WhatAndWhy/rust/\"\u003eProject Mu\u003c/a\u003e), kernel components,  a cryptography library (e.g. \u003ca href=\"https://github.com/microsoft/rustls-symcrypt\"\u003erustls symcrypt support\u003c/a\u003e), and ancillary components (e.g., DirectWrite Core).\u003c/p\u003e\n\u003cp\u003eIn Office, Rust is being used in some performance-critical areas. The Rust implementation of a semantic search algorithm in Office, delivered to customers on CosmosDB and PostgreSQL, proved to be  more performant and memory efficient than the C++ version, providing a significant win for large-scale vector searches.\u003c/p\u003e\n\u003cp\u003eFollowing a directive mandating that no more systems code be written in C++ in Azure, Rust is used in several Azure-related software. Caliptra is an industry collaboration for secure cloud server firmware. Key firmware components are written entirely in Rust and are open-sourced. Azure Integrated HSM is a new in-house security chip deployed in all new servers starting in 2025. The firmware and guest libraries are written in Rust to ensure the highest security standards for cryptographic keys. Russinovich also mentioned Azure Boost agents, \u003ca href=\"https://learn.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-overview\"\u003eHyper-V\u003c/a\u003e (Microsoft’s hypervisor), \u003ca href=\"https://openvmm.dev/guide/\"\u003eOpenVMM\u003c/a\u003e (a modular, cross-platform Virtual Machine Monitor recently open-sourced), \u003ca href=\"https://youtu.be/1VgptLwP588?t=1244\"\u003eand Hyperlight\u003c/a\u003e as partly or entirely written in Rust.\u003c/p\u003e\n\u003cp\u003eDeveloper feedback at Microsoft has generally been positive but also included negatives. On the positive side, \u003ca href=\"https://youtu.be/1VgptLwP588?t=1434\"\u003edevelopers liked\u003c/a\u003e that if Rust code compiles, it generally works as expected, leading to faster iteration. Reduced friction in development leads to more motivation to write tests. Developers become more conscious of memory management pitfalls. The Rust ecosystem and Cargo are appreciated for dependency management. Performance increases are often observed (though not always the primary goal). Data-race-related concurrency bugs are reduced. Memory-safety-related vulnerabilities are significantly reduced.\u003c/p\u003e\n\u003cp\u003eOn the \u003ca href=\"https://youtu.be/1VgptLwP588?t=1467\"\u003enegative side\u003c/a\u003e, developers mentioned that C++ interop remains difficult. The initial learning curve for Rust is further perceived as steep. Dynamic linking is a challenge. Reliance on some non-stabilized Rust features is a concern. Integrating Cargo with larger enterprise build systems requires effort. Foreign Function Interface (FFI) is tough to do safely, even in Rust. Tooling is still behind when compared with other languages.\u003c/p\u003e\n\u003cp\u003eRussinovich further describes \u003ca href=\"https://youtu.be/1VgptLwP588?t=1558\"\u003eMicrosoft’s efforts to accelerate the migration of C/C++ legacy code to Rust\u003c/a\u003e. One area is verified crypto libraries, using formal verification techniques for C and then transpiling to safe Rust (see \u003ca href=\"https://arxiv.org/abs/2412.15042\"\u003e\u003cem\u003eCompiling C to Safe Rust, Formalized\u003c/em\u003e\u003c/a\u003e). Microsoft is also exploring using large language models for automated code translation.\u003c/p\u003e\n\u003cp\u003eRussinovich concluded by reiterating Microsoft’s strong commitment to Rust across the company and emphasizing Rust’s increasing maturity and adoption:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYou know people will come and say, hey wait, there’s this new language that’s even better than Rust. It’s more easy to use than Rust and I say well when is it going to be ready? Because we’re over 10 years into Rust and you know we’re finally ready because it takes a long time for a language to mature, for the tooling to mature, and we’re not even finally, you know, completely done with maturing the Rust toolchain. Anybody that wants to come along at this point and disrupt something that’s already as good as Rust has a very high hill to climb. So I don’t see anything replacing Rust anytime soon […] We’re 100% behind Rust.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eReaders are strongly encouraged to \u003ca href=\"https://www.youtube.com/watch?v=1VgptLwP588\"\u003eview the full talk on YouTube\u003c/a\u003e. It contains abundant valuable examples, technical explanations, and demos.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.rustnationuk.com/\"\u003eRust Nation UK\u003c/a\u003e is a multi-track conference dedicated to the Rust language and community. The conference features workshops, talks, and tutorials curated for developers of all levels. The conference is held annually at \u003ca href=\"https://www.thebrewery.co.uk/\"\u003eThe Brewery\u003c/a\u003e.\u003c/p\u003e\n\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Bruno-Couriol\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eBruno Couriol\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-05-19T00:00:00Z",
  "modifiedTime": null
}
