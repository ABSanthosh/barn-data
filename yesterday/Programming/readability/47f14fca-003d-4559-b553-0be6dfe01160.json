{
  "id": "47f14fca-003d-4559-b553-0be6dfe01160",
  "title": "QCon London 2025 Day 3: AMQP Politics, Serverless Databases, Betrayal in Security and Architecture",
  "link": "https://www.infoq.com/news/2025/05/day-three-qcon-london-2025/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "The 19th annual QCon London conference took place at The Queen Elizabeth II Conference Centre in London, England. This three-day event, organized by C4Media, consists of presentations by expert practitioners. Day Three, scheduled on April 9th, 2025, included two keynote addresses by John O'Hara and Hannah Foxwell and presentations from five conference tracks. By Michael Redlich",
  "author": "Michael Redlich",
  "published": "Fri, 02 May 2025 17:45:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Serverless",
    "Application Security",
    "QCon London 2025",
    "Java",
    "Architecture",
    "AMQP",
    "Architecture \u0026 Design",
    "Development",
    "news"
  ],
  "byline": "Michael Redlich",
  "length": 7473,
  "excerpt": "The 19th annual QCon London conference took place at The Queen Elizabeth II Conference Centre in London, England. This three-day event, organized by C4Media, consists of presentations by expert practi",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20250422123044_u1/apple-touch-icon.png",
  "text": "Day three of the 19th annual QCon London conference took place on April 9th, 2025, at the Queen Elizabeth II Conference Centre in London, England. Key takeaways included: a dedicated leader owns the vision, but the human experience can be tense; CRDTs are useful, but are very subtle things as models cannot be correctly set; and to betray trust in the relationship between security and architecture means to betray both. What follows is a summary of the keynote address and highlighted presentations. Keynote Address: Advanced Message Queuing Politics John O'Hara, Father of AMQP, Venture Partner at Fidelity and Founder of Taskize, presented his keynote address entitled, Advanced Message Queuing Politics. O'Hara started his presentation with a story about a bank that developed a message-oriented middleware system, ultimately selling the software to an \"enterprising chap\" who started a company based on that software. That was the business case for AMQP. Message Oriented Middleware is a managed message delivery between computer systems. By the 1990s, middleware was considered arcane to keep up with the scale at which banks had been operating. The banks would often write their own middleware. By 2002, there were a number of banks that had their own middleware, with some that ultimately became overpriced commercial products. When it comes to managing the lines between various entities, O'Hara stated that \"inter-business and intra-system connections are a major source of complexity and cost.\" Today, we have an AMQP specification standard with seven implementations. All clients can communicate with all servers. Creating a universal standard can be challenging. In 2002, there were 14 standards, and O'Hara stated that we are all too familiar with this situation. Despite being released in October 2011, the AMQP 1.0 protocol still remains today's standard. As O'Hara stated, his presentation is a story of people, visions, passions, friends and competitors, so he described the details on how the AMQP standard had evolved. In 2003, AMQP was created to: solve the business problem; commodize messaging; make it open-source; and provide a standard for all messaging. O'Hara maintained that it was expensive not to have standards. Well-known implementations such as IBM MQ (2004) ActiveMQ (2004), RabbitMQ (2007) and Apache Qpid started to emerge since the creation of AMQP. Even the Department of Homeland Security decided to standardize custom operations on AMQP. Today, AMQP is ISO-certified, under ISO-19464, and implementations of AMQP processes 10 trillions messages per day. O'Hara concluded his presentation on what he learned from creating AMQP. First, it's People where a dedicated leader owns the vision. O'Hara didn't anticipate how intense the human experience would be. Second, it's Hygiene where everyone needs a business case and to find a way to secure resources. Third, it's thorough Specifications with mechanisms that provide extensibility. O'Hara stated that the lack of compatibility can be fatal. And finally, it's Products that provide a balance between users and vendors. More details from this keynote may be found in this InfoQ news story. Highlighted Presentations: How to Build a Database Without a Server | Security and Architecture: To Betray One Is To Destroy Both How to Build a Database Without a Server was presented by Alex Seaton, Staff Engineer at ArcticDB. Seaton started his presentation by introducing a serverless database through multiple definitions. In general, a serverless database adjusts database capacity based on the demands of an application. Other definitions may be found from MongoDB and Cockroach Labs. Using ArcticDB and a combination of Python and C++, Seaton focused on the software library and object storage with code examples on how to execute creating a database and querying for stock information. Object storage consists of a structure as a tree of objects using the same file format. Only the very top layer is mutable. In terms of performance, processing in the native layer (C++) and mapping to Python can be expensive. Even with the simplest approach to managing the global state, there are still problems. Clock drift is real and can easily be tens of seconds. Seaton suggested using either the system clock or the storage clock. The system clock suffers from drift, and the storage clock suffers from latency effects. Seaton introduced the Conflict-Free Replicated Data Type (CRDT), defined as any replica that can be updated without coordination with inconsistencies that are automatically resolved. They must be convergent to the same state and =\u003e operations must be commutative. Examples of some known CRDTs include: a Grow-Only Set (G-Set), a set that does not allow data to be deleted; a Two-Phase Set (2P-Set), a G-Set that allows data to be deleted; a Last-Write-Wins-Element-Set (LWW-Element-Set), a 2P-Set with \"add sets\" and \"remove sets\" with timestamps for the data; and an Observed-Remove Set (OR-Set), a LWW-Element-Set with unique tags instead of timestamps. For managing the global state, Seaton maintained that we should respect the consistency of the LWW-Element-Set. After demonstrating their new approach using CRDTs, Seaton explained that there are practical problems with: garbage collection, such that there is an accumulation of tiny objects; and compaction, where there is a need to compact while keeping a consistent view for clients. Seaton also discussed distributed locking in terms of transactions, garbage collection and compaction. In closing, Seaton provided these key takeaways: object storage is consistently improving (improved concurrency models are now possible); distributed locking is subtle; it is possible to build a useful system, but be aware that clocks don't act like clocks, sets don't act like sets and locks do not provide mutual exclusion; and CRDTs are useful, but are very subtle things as models cannot be correctly set. Security and Architecture: To Betray One Is To Destroy Both was presented by Shana Dacres-Lawrence, Senior Principal Architect at 6point6 and Founder of ArchitectHer. Dacres-Lawrence started her presentation with a definition of Betrayal as \"the breaking or violation of a presumptive contract, trust, or confidence.\" For security and architecture, she tailored this definition as \"compromising the foundation and trust upon which resilient systems are built.\" From the early days to today, the relationship between security and architecture has evolved from individual silos to one that is more collaborative. But, as Dacres-Lawrence warned, there is still betrayal. To betray one of these means to destroy both. There are three types of betrayal: Physical (structural weakness), Emotional (assumed loyalty) and Trust (assumed trust). Dacres-Lawrence explored all three types of betrayals and discussed these five defense strategies: Open Communication, Tools and Technology, Automation, Hands-On Validation and Collaborative Culture. Dacres-Lawrence concluded with five key takeaways: consistency builds trust; adopt a \"shift-left\" approach; be intentional, not transactional; it's not possible to test every scenario, but you will have to react; security should guide architecture, but architecture must also shape security. About the Author Michael Redlich",
  "image": "https://res.infoq.com/news/2025/05/day-three-qcon-london-2025/en/headerimage/java-istock-image-01-1746207789864.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eDay three of the 19th annual \u003ca href=\"https://qconlondon.com/\"\u003eQCon London\u003c/a\u003e conference took place on April 9th, 2025, at the \u003ca href=\"https://qeiicentre.london/\"\u003eQueen Elizabeth II Conference Centre\u003c/a\u003e in London, England. Key takeaways included: a dedicated leader owns the vision, but the human experience can be tense; CRDTs are useful, but are very subtle things as models cannot be correctly set; and to betray trust in the relationship between security and architecture means to betray both.\u003c/p\u003e\n\n\u003cp\u003eWhat follows is a summary of the keynote address and highlighted presentations.\u003c/p\u003e\n\n\u003ch4\u003eKeynote Address: Advanced Message Queuing Politics\u003c/h4\u003e\n\n\u003cp\u003e\u003ca href=\"https://qconlondon.com/speakers/johnohara\"\u003eJohn O\u0026#39;Hara\u003c/a\u003e, Father of AMQP, Venture Partner at Fidelity and Founder of Taskize, presented his keynote address entitled, \u003ca href=\"https://qconlondon.com/keynote/apr2025/advanced-message-queuing-politics\"\u003eAdvanced Message Queuing Politics\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eO\u0026#39;Hara started his presentation with a story about a bank that developed a message-oriented middleware system, ultimately selling the software to an \u0026#34;enterprising chap\u0026#34; who started a company based on that software. That was the business case for AMQP. \u003cstrong\u003eMessage Oriented Middleware\u003c/strong\u003e is a managed message delivery between computer systems.\u003c/p\u003e\n\n\u003cp\u003eBy the 1990s, middleware was considered arcane to keep up with the scale at which banks had been operating. The banks would often write their own middleware. By 2002, there were a number of banks that had their own middleware, with some that ultimately became overpriced commercial products.\u003c/p\u003e\n\n\u003cp\u003eWhen it comes to managing the lines between various entities, O\u0026#39;Hara stated that \u0026#34;\u003cem\u003einter-business and intra-system connections are a major source of complexity and cost.\u003c/em\u003e\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eToday, we have an AMQP specification standard with seven implementations. All clients can communicate with all servers.\u003c/p\u003e\n\n\u003cp\u003eCreating a universal standard can be challenging. In 2002, there were 14 standards, and O\u0026#39;Hara stated that we are all too familiar with this situation.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/05/day-three-qcon-london-2025/en/resources/1infoq-standards-1746207788834.jpg\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/05/day-three-qcon-london-2025/en/resources/1infoq-standards-1746207788834.jpg\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eDespite being released in October 2011, the AMQP 1.0 protocol still remains today\u0026#39;s standard. As O\u0026#39;Hara stated, his presentation is a story of people, visions, passions, friends and competitors, so he described the details on how the AMQP standard had evolved.\u003c/p\u003e\n\n\u003cp\u003eIn 2003, AMQP was created to: solve the business problem; commodize messaging; make it open-source; and provide a standard for all messaging. O\u0026#39;Hara maintained that it was expensive not to have standards.\u003c/p\u003e\n\n\u003cp\u003eWell-known implementations such as \u003ca href=\"https://www.ibm.com/products/mq\"\u003eIBM MQ\u003c/a\u003e (2004) \u003ca href=\"https://activemq.apache.org/\"\u003eActiveMQ\u003c/a\u003e (2004), \u003ca href=\"https://www.rabbitmq.com/\"\u003eRabbitMQ\u003c/a\u003e (2007) and \u003ca href=\"https://qpid.apache.org/\"\u003eApache Qpid\u003c/a\u003e started to emerge since the creation of AMQP. Even the Department of Homeland Security decided to standardize custom operations on AMQP.\u003c/p\u003e\n\n\u003cp\u003eToday, AMQP is ISO-certified, under \u003ca href=\"https://www.iso.org/standard/64955.html\"\u003eISO-19464\u003c/a\u003e, and implementations of AMQP processes 10 trillions messages per day.\u003c/p\u003e\n\n\u003cp\u003eO\u0026#39;Hara concluded his presentation on what he learned from creating AMQP. First, it\u0026#39;s \u003cstrong\u003ePeople\u003c/strong\u003e where a dedicated leader owns the vision. O\u0026#39;Hara didn\u0026#39;t anticipate how intense the human experience would be. Second, it\u0026#39;s \u003cstrong\u003eHygiene\u003c/strong\u003e where everyone needs a business case and to find a way to secure resources. Third, it\u0026#39;s thorough \u003cstrong\u003eSpecifications\u003c/strong\u003e with mechanisms that provide extensibility. O\u0026#39;Hara stated that the lack of compatibility can be fatal. And finally, it\u0026#39;s \u003cstrong\u003eProducts\u003c/strong\u003e that provide a balance between users and vendors.\u003c/p\u003e\n\n\u003cp\u003eMore details from this keynote may be found in this InfoQ \u003ca href=\"https://www.infoq.com/news/2025/04/origin-advanced-message-queuing/\"\u003enews story\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch4\u003eHighlighted Presentations: How to Build a Database Without a Server | Security and Architecture: To Betray One Is To Destroy Both\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://qconlondon.com/presentation/apr2025/how-build-database-without-server\"\u003eHow to Build a Database Without a Server\u003c/a\u003e\u003c/strong\u003e was presented by \u003ca href=\"https://qconlondon.com/speakers/alexseaton\"\u003eAlex Seaton\u003c/a\u003e, Staff Engineer at ArcticDB.\u003c/p\u003e\n\n\u003cp\u003eSeaton started his presentation by introducing a serverless database through multiple definitions. In general, a serverless database adjusts database capacity based on the demands of an application. Other definitions may be found from \u003ca href=\"https://www.mongodb.com/resources/basics/databases/serverless-database\"\u003eMongoDB\u003c/a\u003e and \u003ca href=\"https://www.cockroachlabs.com/blog/what-is-a-serverless-database/\"\u003eCockroach Labs\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ca href=\"https://arcticdb.io/\"\u003eArcticDB\u003c/a\u003e and a combination of Python and C++, Seaton focused on the software library and object storage with code examples on how to execute creating a database and querying for stock information.\u003c/p\u003e\n\n\u003cp\u003eObject storage consists of a structure as a tree of objects using the same file format. Only the very top layer is mutable. In terms of performance, processing in the native layer (C++) and mapping to Python can be expensive.\u003c/p\u003e\n\n\u003cp\u003eEven with the simplest approach to managing the global state, there are still problems. Clock drift is real and can easily be tens of seconds. Seaton suggested using either the system clock or the storage clock. The system clock suffers from drift, and the storage clock suffers from latency effects.\u003c/p\u003e\n\n\u003cp\u003eSeaton introduced the \u003ca href=\"https://crdt.tech/\"\u003eConflict-Free Replicated Data Type\u003c/a\u003e (CRDT), defined as any replica that can be updated without coordination with inconsistencies that are automatically resolved. They must be convergent to the same state and \u003cstrong\u003e\u003ccode\u003e=\u0026gt;\u003c/code\u003e\u003c/strong\u003e operations must be commutative. Examples of some known CRDTs include: a \u003cstrong\u003eGrow-Only Set\u003c/strong\u003e (G-Set), a set that does not allow data to be deleted; a \u003cstrong\u003eTwo-Phase Set\u003c/strong\u003e (2P-Set), a G-Set that allows data to be deleted; a \u003cstrong\u003eLast-Write-Wins-Element-Set\u003c/strong\u003e (LWW-Element-Set), a 2P-Set with \u0026#34;add sets\u0026#34; and \u0026#34;remove sets\u0026#34; with timestamps for the data; and an \u003cstrong\u003eObserved-Remove Set\u003c/strong\u003e (OR-Set), a LWW-Element-Set with unique tags instead of timestamps. For managing the global state, Seaton maintained that we should respect the consistency of the LWW-Element-Set.\u003c/p\u003e\n\n\u003cp\u003eAfter demonstrating their new approach using CRDTs, Seaton explained that there are practical problems with: garbage collection, such that there is an accumulation of tiny objects; and compaction, where there is a need to compact while keeping a consistent view for clients.\u003c/p\u003e\n\n\u003cp\u003eSeaton also discussed distributed locking in terms of transactions, garbage collection and compaction.\u003c/p\u003e\n\n\u003cp\u003eIn closing, Seaton provided these key takeaways: object storage is consistently improving (improved concurrency models are now possible); distributed locking is subtle; it is possible to build a useful system, but be aware that clocks don\u0026#39;t act like clocks, sets don\u0026#39;t act like sets and locks do not provide mutual exclusion; and CRDTs are useful, but are very subtle things as models cannot be correctly set.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://qconlondon.com/presentation/apr2025/security-and-architecture-betray-one-destroy-both\"\u003eSecurity and Architecture: To Betray One Is To Destroy Both\u003c/a\u003e\u003c/strong\u003e was presented by \u003ca href=\"https://qconlondon.com/speakers/shanadacres\"\u003eShana Dacres-Lawrence\u003c/a\u003e, Senior Principal Architect at 6point6 and Founder of ArchitectHer.\u003c/p\u003e\n\n\u003cp\u003eDacres-Lawrence started her presentation with a definition of Betrayal as \u0026#34;\u003cem\u003ethe breaking or violation of a presumptive contract, trust, or confidence.\u003c/em\u003e\u0026#34; For security and architecture, she tailored this definition as \u0026#34;\u003cem\u003ecompromising the foundation and trust upon which resilient systems are built.\u003c/em\u003e\u0026#34;\u003c/p\u003e\n\n\u003cp\u003eFrom the early days to today, the relationship between security and architecture has evolved from individual silos to one that is more collaborative. But, as Dacres-Lawrence warned, there is still betrayal. To betray one of these means to destroy both.\u003c/p\u003e\n\n\u003cp\u003eThere are three types of betrayal: \u003cstrong\u003ePhysical\u003c/strong\u003e (structural weakness), \u003cstrong\u003eEmotional\u003c/strong\u003e (assumed loyalty) and \u003cstrong\u003eTrust\u003c/strong\u003e (assumed trust). Dacres-Lawrence explored all three types of betrayals and discussed these five defense strategies: \u003cstrong\u003eOpen Communication\u003c/strong\u003e, \u003cstrong\u003eTools and Technology\u003c/strong\u003e, \u003cstrong\u003eAutomation\u003c/strong\u003e, \u003cstrong\u003eHands-On Validation\u003c/strong\u003e and \u003cstrong\u003eCollaborative Culture\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eDacres-Lawrence concluded with five key takeaways: consistency builds trust; adopt a \u0026#34;shift-left\u0026#34; approach; be intentional, not transactional; it\u0026#39;s not possible to test every scenario, but you will have to react; security should guide architecture, but architecture must also shape security.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Michael-Redlich\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eMichael Redlich\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2025-05-02T00:00:00Z",
  "modifiedTime": null
}
