{
  "id": "a41196da-cd6b-4d85-8b6d-f57719e575db",
  "title": "Hugging Face Smolagents is a Simple Library to Build LLM-Powered Agents",
  "link": "https://www.infoq.com/news/2025/01/hugging-face-smolagents-agents/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Smolagents is a library created at Hugging Face to build agents based on large language models (LLMs). Hugging Faces says its new library aims to be simple and LLM-agnostic. It supports secure \"agents that write their actions in code\" and is integrated with Hugging Face Hub. By Sergio De Simone",
  "author": "Sergio De Simone",
  "published": "Sat, 04 Jan 2025 16:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Hugging Face",
    "Python",
    "Agents",
    "Emerging Technologies",
    "Large language models",
    "AI, ML \u0026 Data Engineering",
    "news"
  ],
  "byline": "Sergio De Simone",
  "length": 3882,
  "excerpt": "Smolagents is a library created at Hugging Face to build agents based on large language models (LLMs). Hugging Faces says its new library aims to be simple and LLM-agnostic. It supports secure \u0026quot;agents",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s2_20241210082921/apple-touch-icon.png",
  "text": "Smolagents is a library created at Hugging Face to build agents leveraging large language models (LLMs). Hugging Faces says its new library aims to be simple and LLM-agnostic. It supports secure \"agents that write their actions in code\" and is integrated with Hugging Face Hub. Agentic systems promises to extend the possibility of computer programs beyond the mere execution of pre-determined workflows conceived to solve narrow tasks. In fact, most real-life problems do not fit in pre-determined workflows, say Hugging Face engineers Aymeric Roucher, Merve Noyan, and Thomas Wolf. Agents, in HuggingFace's view, provide LLMs access to the outside world. An Agent-based system can be either a multi-step agent or multi-agent and differs from other LLM-based systems in the level of agency of LLMs in the system. Specifically, AI Agents have the characteristic that LLM outputs control the system workflow. In other LLM-based systems, on the contrary, LLM output may have no impact whatsoever on the program's flow or some intermediate effect. The way agentic systems achieve their workflow flexibility is having an LLM write an action, which takes the form of calls to external tools. This idea is represented in the following meta-code: memory = [user_defined_task] while llm_should_continue(memory): # this loop is the multi-step part action = llm_get_next_action(memory) # this is the tool-calling part observations = execute_action(action) memory += [action, observations] This idea is not new and, as Roucher, Noyan, and Wolf remarks, there already exists a commonly accepted JSON format, used by Anthropic, OpenAI, and others to describe such actions, i.e., calls to external tools. Here is where smolagents takes a distinct approach, based on the realization that JSON is not the best way to express what a computer should do. Instead, they preferred writing actions in code because programming languages provide a superior way to describe computer behavior, granting better composability, data management, and generality. Since LLMs already have the capacity oto create quality code, this approach adds no major complexity. To create agentic systems, you need to solve a few recurrent problems, such as parsing the agent's output and synthesizing prompts based on what happened in the last iteration. Those are among the key features provided by smolagents, along with error logging and retry mechanisms. If you want to build an agent system, however, you need to first determine if you need one. Indeed, as Roucher, Noyan, and Wolf explain, agents may be overkill. If [a] deterministic workflow fits all queries, by all means just code everything! This will give you a 100% reliable system with no risk of error introduced by letting unpredictable LLMs meddle in your workflow. For the sake of simplicity and robustness, it's advised to regularize towards not using any agentic behavior. Once you are sure you need an agent, you need an LLM and some tools. You can use any open model using Hugging Face HfApiModel class or you can use LiteLMMModel to access a plethora of Cloud-based LLM. A tool is just a function the LLM can execute with some inputs. Hugging Face ran a series of benchmarks using some of the leading models, such as GPT4o, Claude3.5, LLaMA-3.3 70B, and others, to create smolagents and found out that open models can rival with the best closed models. Hugging Face smolagents are not the only currently available tool to create agentic systems. In particular, OpenAI released Swarm, which leverages routines and handoffs to have multiple agents coordinate with one another. Additionally, Microsoft introduced Magentic-One and AWS has its own Multi-Agent Orchestrator. About the Author Sergio De Simone",
  "image": "https://res.infoq.com/news/2025/01/hugging-face-smolagents-agents/en/headerimage/hugging-chat-open-source-1736003895435.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003e\u003ca href=\"https://github.com/huggingface/smolagents\"\u003eSmolagents\u003c/a\u003e is a library created at Hugging Face to build agents leveraging large language models (LLMs). Hugging Faces says its new library aims to be simple and LLM-agnostic. It supports secure \u0026#34;agents that write their actions in code\u0026#34; and is integrated with Hugging Face Hub.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://huggingface.co/blog/smolagents\"\u003eAgentic systems promises to extend the possibility of computer programs beyond the mere execution of pre-determined workflows\u003c/a\u003e conceived to solve narrow tasks. In fact, most real-life problems do not fit in pre-determined workflows, say Hugging Face engineers Aymeric Roucher, Merve Noyan, and Thomas Wolf.\u003c/p\u003e\n\n\u003cp\u003eAgents, in HuggingFace\u0026#39;s view, provide LLMs access to the outside world. An Agent-based system can be either a multi-step agent or multi-agent and differs from other LLM-based systems in the level of \u003cstrong\u003eagency\u003c/strong\u003e of LLMs in the system. Specifically, AI Agents have the characteristic that LLM outputs control the system workflow. In other LLM-based systems, on the contrary, LLM output may have no impact whatsoever on the program\u0026#39;s flow or some intermediate effect.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" data-src=\"news/2025/01/hugging-face-smolagents-agents/en/resources/1hugging-face-smolagents-1736003894412.png\" src=\"https://imgopt.infoq.com/fit-in/3000x4000/filters:quality(85)/filters:no_upscale()/news/2025/01/hugging-face-smolagents-agents/en/resources/1hugging-face-smolagents-1736003894412.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eThe way agentic systems achieve their workflow flexibility is having an LLM write an action, which takes the form of calls to external tools. This idea is represented in the following meta-code:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ememory = [user_defined_task]\nwhile llm_should_continue(memory): # this loop is the multi-step part\n    action = llm_get_next_action(memory) # this is the tool-calling part\n    observations = execute_action(action)\n    memory += [action, observations]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis idea is not new and, as Roucher, Noyan, and Wolf remarks, there already exists a commonly accepted JSON format, used by Anthropic, OpenAI, and others to describe such actions, i.e., calls to external tools. Here is where smolagents takes a distinct approach, based on the realization that JSON is not the best way to express what a computer should do. Instead, they preferred writing actions in code because programming languages provide a superior way to describe computer behavior, granting better composability, data management, and generality. Since LLMs already have the capacity oto create quality code, this approach adds no major complexity.\u003c/p\u003e\n\n\u003cp\u003eTo create agentic systems, you need to solve a few recurrent problems, such as parsing the agent\u0026#39;s output and synthesizing prompts based on what happened in the last iteration. \u003ca href=\"https://huggingface.co/docs/smolagents/conceptual_guides/intro_agents\"\u003eThose are among the key features provided by smolagents\u003c/a\u003e, along with error logging and retry mechanisms.\u003c/p\u003e\n\n\u003cp\u003eIf you want to build an agent system, however, you need to first determine if you need one. Indeed, as Roucher, Noyan, and Wolf explain, agents may be overkill.\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIf [a] deterministic workflow fits all queries, by all means just code everything! This will give you a 100% reliable system with no risk of error introduced by letting unpredictable LLMs meddle in your workflow. For the sake of simplicity and robustness, it\u0026#39;s advised to regularize towards not using any agentic behavior.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOnce you are sure you need an agent, you need an LLM and some tools. You can use any open model using Hugging Face \u003ccode\u003eHfApiModel\u003c/code\u003e class or you can use \u003ca href=\"https://github.com/BerriAI/litellm\"\u003e\u003ccode\u003eLiteLMMModel\u003c/code\u003e\u003c/a\u003e to access a plethora of Cloud-based LLM. A \u003ca href=\"https://github.com/huggingface/smolagents/tree/main/examples\"\u003etool is just a function the LLM can execute with some inputs\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eHugging Face ran a \u003ca href=\"https://github.com/huggingface/smolagents/blob/main/examples/benchmark.ipynb\"\u003eseries of benchmarks\u003c/a\u003e using some of the leading models, such as GPT4o, Claude3.5, LLaMA-3.3 70B, and others, to create smolagents and found out that open models can rival with the best closed models.\u003c/p\u003e\n\n\u003cp\u003eHugging Face smolagents are not the only currently available tool to create agentic systems. In particular, \u003ca href=\"https://www.infoq.com/news/2024/10/openai-swarm-orchestration/\"\u003eOpenAI released Swarm\u003c/a\u003e, which leverages routines and handoffs to have multiple agents coordinate with one another. Additionally, \u003ca href=\"https://www.infoq.com/news/2024/11/microsoft-magentic-one/\"\u003eMicrosoft introduced Magentic-One\u003c/a\u003e and AWS has its own \u003ca href=\"https://github.com/awslabs/multi-agent-orchestrator\"\u003eMulti-Agent Orchestrator\u003c/a\u003e.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Sergio-De-Simone\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSergio De Simone\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-01-04T00:00:00Z",
  "modifiedTime": null
}
