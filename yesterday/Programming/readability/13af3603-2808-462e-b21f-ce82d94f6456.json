{
  "id": "13af3603-2808-462e-b21f-ce82d94f6456",
  "title": "Rider 2025.1 EAP 5: Roslyn Syntax Tree Visualizer, Unity Profiler Integration, and More",
  "link": "https://blog.jetbrains.com/dotnet/2025/02/24/rider-2025-1-eap-5/",
  "description": "JetBrains Rider 2025.1 EAP 5 has just been released! You can now download this version from our website, update directly from within the IDE, use the free Toolbox App, or install it via snap packages for Ubuntu.  Here’s what you can expect from this update: Roslyn support enhancements Roslyn syntax tree visualizer Working with Roslyn […]",
  "author": "Sasha Ivanova",
  "published": "Mon, 24 Feb 2025 17:49:58 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "net-tools",
    "news",
    "releases",
    "rider",
    "game-development",
    "roslyn"
  ],
  "byline": "Sasha Ivanova",
  "length": 7293,
  "excerpt": "JetBrains Rider 2025.1 EAP 5 has just been released! You can now download this version from our website, update directly from within the IDE, use the free Toolbox App, or install it via snap packag",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Essential productivity kit for .NET and game developers .NET Tools News Releases RiderRider 2025.1 EAP 5: Roslyn Syntax Tree Visualizer, Unity Profiler Integration, and More JetBrains Rider 2025.1 EAP 5 has just been released! You can now download this version from our website, update directly from within the IDE, use the free Toolbox App, or install it via snap packages for Ubuntu.  Here’s what you can expect from this update: Roslyn support enhancements Roslyn syntax tree visualizer Working with Roslyn analyzers or exploring C# code structure? Rider’s new Roslyn syntax tree visualizer lets you inspect syntax trees directly inside the IDE, making it easier to understand how your code is parsed and structured. Smart navigation  The syntax tree visualizer provides dynamic updates that reflect changes in your active C# file in real time. As you navigate through your code, you can expand and collapse tree nodes to examine different levels of the syntax structure. Clicking on any node reveals detailed properties about that specific element, while double-clicking highlights the corresponding code fragment in your editor.  Intelligently tracking your position in the code, the syntax tree visualizer automatically highlights corresponding nodes as you move your cursor and provides tooltips with source code snippets for immediate context. Search and filtering  The built-in search and filtering capabilities make finding specific elements within complex syntax trees straightforward. You can search through nodes using traditional keyboard shortcuts like Ctrl+F, leverage the Speed Search feature, or simply start typing in the tool window.  The filtering system allows you to narrow down nodes based on identifier names, types of syntax, or other properties, and you can even search within the properties of a selected node to quickly locate specific attributes. The visualizer can be accessed through Search Everywhere or via View | Tool Windows in the main menu. Scoped quick fixes for Roslyn analyzers Rider 2025.1 EAP 5 introduces scoped quick fixes for Roslyn analyzers, allowing you to apply fixes at the file, project, or solution level in a single action. This long-awaited feature streamlines workflows, especially for Unity developers, who frequently work with large codebases and need efficient bulk refactoring. Now, instead of applying the same fix repeatedly, you can select the scope — whether a single file, an entire project, or the full solution — directly from the quick fix menu. Run/Debug Support for dotnet watch as a run/debug configuration  Rider 2025.1 EAP 5 introduces a dedicated run and debug configuration for dotnet watch, streamlining the development workflow for projects that need automatic rebuilding and restarting as code changes. This enhancement particularly benefits ASP.NET Core and .NET developers, as it continuously builds your application when you modify .cs, .html, or .css files. The feature also extends to test files, enabling automatic test execution whenever your code changes. While hot reload is great for many scenarios, dotnet watch offers broader flexibility by tracking changes across both source code and static files. With the addition of debugging support, you can now work with dotnet watch more effectively without leaving Rider. Input/output redirection for run configurations  Another highly requested feature is coming to Rider 2025.1: input and output redirection for run configurations. You can now easily specify a file to be used as standard input (stdin) and direct program output to a file, streamlining debugging and testing workflows. Additionally, you can now attach log files to a run configuration. These files will then be shown in separate tabs in the Run or Debug tool windows during program execution. Here’s how it works: A new Input/Output section has been added to the Run/Debug Configuration options for all main run configuration types. You can now redirect input from a file, allowing applications to read from a predefined source instead of requiring manual input. You can also redirect output to a file, capturing program output for analysis or logging. Game development Unity Profiler integration Rider now integrates with the Unity Profiler, bringing CPU performance insights directly into your editor. The IDE fetches CPU usage snapshots and displays them inline with your code, making it easy to spot performance hotspots as you write and debug your Unity scripts. You can navigate seamlessly from calls in the Unity Profiler hierarchy view to their corresponding methods in Rider. The integration provides rich data visualization features. Method and class declarations are highlighted with CPU timing data, and you can explore detailed insights, including internal method calls and BEGIN / END sample calls. For example, you can see timing information such as “116 ms” for a MonoBehaviour class execution or “100 ms” for specific method calls. The feature also supports auto-navigation – double-clicking a call in the Unity Profiler takes you directly to the relevant code location. Please note that this initial integration fetches snapshot data only from the main thread and supports CPU data exclusively. Since the Unity Profiler aggregates data from multiple calls of the same method, individual calls cannot be distinguished at this time. For more information, please refer to Rider’s documentation for this feature. Enhanced C++ debugging on Windows  Rider 2025.1 offers one more enhancement for Natvis file handling in the C++ debugger on Windows. Previously, Rider only loaded Natvis files from system-wide directories and the project model. Now, you can: Set the paths for your Natvis files in the settings. Automatically load Natvis files from %USERPROFILE%\\Documents\\Visual Studio \u003cVersion\u003e\\Visualizers. This flexibility should make it easier for you to maintain consistent debugging visualization across your development environments. For full information about the updates included in this build, please see our issue tracker. Subscribe to a monthly digest curated from the .NET Tools blog: Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/02/Social_Share_Blog_1280x720-2x.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/dotnet/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/Frame-1321314548.svg\" alt=\"Dotnet logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eEssential productivity kit for .NET and game developers\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/dotnet/category/net-tools/\"\u003e.NET Tools\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/dotnet/category/news/\"\u003eNews\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/dotnet/category/releases/\"\u003eReleases\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/dotnet/category/rider/\"\u003eRider\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eRider 2025.1 EAP 5: Roslyn Syntax Tree Visualizer, Unity Profiler Integration, and More\u003c/h2\u003e                    \n                    \n\u003cp\u003eJetBrains Rider 2025.1 EAP 5 has just been released!\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can now download this version from our \u003ca href=\"https://www.jetbrains.com/rider/nextversion/\" target=\"_blank\" rel=\"noopener\"\u003ewebsite\u003c/a\u003e, update directly from within the IDE, use the free \u003ca href=\"https://www.jetbrains.com/toolbox-app/\" target=\"_blank\" rel=\"noopener\"\u003eToolbox App\u003c/a\u003e, or install it via snap packages for Ubuntu. \u003c/p\u003e\n\n\n    \n\n\n\n\n\n\n\n\u003cp\u003eHere’s what you can expect from this update:\u003c/p\u003e\n\n\n\n\u003ch2\u003eRoslyn support enhancements\u003c/h2\u003e\n\n\n\n\u003ch3\u003eRoslyn syntax tree visualizer\u003c/h3\u003e\n\n\n\n\u003cp\u003eWorking with Roslyn analyzers or exploring C# code structure? Rider’s new Roslyn syntax tree visualizer lets you inspect syntax trees directly inside the IDE, making it easier to understand how your code is parsed and structured.\u003c/p\u003e\n\n\n\n\u003ch4\u003eSmart navigation \u003c/h4\u003e\n\n\n\n\u003cp\u003eThe\u003cem\u003e \u003c/em\u003esyntax tree visualizer provides dynamic updates that reflect changes in your active C# file in real time. As you navigate through your code, you can expand and collapse tree nodes to examine different levels of the syntax structure. Clicking on any node reveals detailed properties about that specific element, while double-clicking highlights the corresponding code fragment in your editor. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdwUW8ZLluazhiyRk9jgB1-vvks-2trG1IEIqBNosIRSSo1YEUpdYb3LyD6Di7i69_ytJ9B43hoYbTpY1VHTyTL3m-FvMPLbDFhfSyIPUVsYgb8az5K9ixrNMCn7rSUPNPfIyjMbg?key=e2QyVzBeUyozrH4QMARwDhhT\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIntelligently tracking your position in the code, the syntax tree visualizer automatically highlights corresponding nodes as you move your cursor and provides tooltips with source code snippets for immediate context.\u003c/p\u003e\n\n\n\n\u003ch4\u003eSearch and filtering \u003c/h4\u003e\n\n\n\n\u003cp\u003eThe built-in search and filtering capabilities make finding specific elements within complex syntax trees straightforward. You can search through nodes using traditional keyboard shortcuts like \u003ckbd\u003eCtrl+F\u003c/kbd\u003e, leverage the \u003cem\u003eSpeed Search\u003c/em\u003e \u003ca href=\"https://www.jetbrains.com/help/rider/Speed_Search_in_the_Tool_Windows.html\" target=\"_blank\" rel=\"noopener\"\u003efeature\u003c/a\u003e, or simply start typing in the tool window. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXddF_CMe-0wcZotQx2XpcgnHqw81kQo4UbLkiAMEOY8y9xYr6z13BECJh3pOOEEQicv7ihGRY49DvMWF84WgQ0VomXM6mbldt4Imq5RQD5BqAgfhec_hjfTtz0za6uj1VwK6b2exA?key=e2QyVzBeUyozrH4QMARwDhhT\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe filtering system allows you to narrow down nodes based on identifier names, types of syntax, or other properties, and you can even search within the properties of a selected node to quickly locate specific attributes.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe visualizer can be accessed through \u003cem\u003eSearch Everywhere\u003c/em\u003e or via \u003cem\u003eView | Tool Windows\u003c/em\u003e in the main menu.\u003c/p\u003e\n\n\n\n\u003ch3\u003eScoped quick fixes for Roslyn analyzers\u003c/h3\u003e\n\n\n\n\u003cp\u003eRider 2025.1 EAP 5 introduces scoped quick fixes for Roslyn analyzers, allowing you to apply fixes at the file, project, or solution level in a single action. This long-awaited feature streamlines workflows, especially for Unity developers, who frequently work with large codebases and need efficient bulk refactoring.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow, instead of applying the same fix repeatedly, you can select the scope — whether a single file, an entire project, or the full solution — directly from the quick fix menu.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdl6rlcQ3VjYHTW6yC5XmdHyqRrOCUr14NCYfHOvLmyJ2zXRkbtgeYCi0_f18aMpPHYHSg4JefBPYia8Gtr2UPEXDQ5HUwUkMCqp7fCmoqQoA27Xy_iISqTQarVZQ_6tY6rIHKB?key=e2QyVzBeUyozrH4QMARwDhhT\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eRun/Debug\u003c/h2\u003e\n\n\n\n\u003ch3\u003eSupport for \u003ccode\u003edotnet watch\u003c/code\u003e as a run/debug configuration \u003c/h3\u003e\n\n\n\n\u003cp\u003eRider 2025.1 EAP 5 introduces a dedicated run and debug configuration for \u003ccode\u003edotnet watch\u003c/code\u003e, streamlining the development workflow for projects that need automatic rebuilding and restarting as code changes.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis enhancement particularly benefits ASP.NET Core and .NET developers, as it continuously builds your application when you modify \u003ccode\u003e.cs\u003c/code\u003e, \u003ccode\u003e.html\u003c/code\u003e, or \u003ccode\u003e.css\u003c/code\u003e files. The feature also extends to test files, enabling automatic test execution whenever your code changes.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhile hot reload is great for many scenarios, \u003ccode\u003edotnet watch\u003c/code\u003e offers broader flexibility by tracking changes across both source code and static files. With the addition of debugging support, you can now work with \u003ccode\u003edotnet watch\u003c/code\u003e more effectively without leaving Rider.\u003c/p\u003e\n\n\n\n\u003ch3\u003eInput/output redirection for run configurations \u003c/h3\u003e\n\n\n\n\u003cp\u003eAnother highly requested feature is coming to Rider 2025.1: input and output redirection for run configurations. You can now easily specify a file to be used as standard input (\u003ccode\u003estdin\u003c/code\u003e) and direct program output to a file, streamlining debugging and testing workflows.\u003c/p\u003e\n\n\n\n\u003cp\u003eAdditionally, you can now attach log files to a run configuration. These files will then be shown in separate tabs in the \u003cem\u003eRun\u003c/em\u003e or \u003cem\u003eDebug\u003c/em\u003e tool windows during program execution.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s how it works:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eA new \u003cem\u003eInput/Output \u003c/em\u003esection has been added to the \u003cem\u003eRun/Debug Configuration\u003c/em\u003e options for all main run configuration types.\u003c/li\u003e\n\n\n\n\u003cli\u003eYou can now redirect input from a file, allowing applications to read from a predefined source instead of requiring manual input.\u003c/li\u003e\n\n\n\n\u003cli\u003eYou can also redirect output to a file, capturing program output for analysis or logging.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2\u003eGame development\u003c/h2\u003e\n\n\n\n\u003ch3\u003eUnity Profiler integration\u003c/h3\u003e\n\n\n\n\u003cp\u003eRider now integrates with the Unity Profiler, bringing CPU performance insights directly into your editor. The IDE fetches CPU usage snapshots and displays them inline with your code, making it easy to spot performance hotspots as you write and debug your Unity scripts. You can navigate seamlessly from calls in the Unity Profiler hierarchy view to their corresponding methods in Rider.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXep-qM0YX_rGeT5ObD0FyV4ajHN0X5tXw_E_1UIU942CczJ9GqiXd6yk3Is0tB5pmS5v0oKp_Opn5_qt0sdEak87C7sYuFTs7p52p3FfANFy--UfAtL6rMIOwOeRdPJn3o8RBOj?key=e2QyVzBeUyozrH4QMARwDhhT\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe integration provides rich data visualization features. Method and class declarations are highlighted with CPU timing data, and you can explore detailed insights, including internal method calls and \u003ccode\u003eBEGIN\u003c/code\u003e / \u003ccode\u003eEND\u003c/code\u003e sample calls. For example, you can see timing information such as “116 ms” for a \u003ccode\u003eMonoBehaviour\u003c/code\u003e class execution or “100 ms” for specific method calls. The feature also supports auto-navigation – double-clicking a call in the Unity Profiler takes you directly to the relevant code location.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfQC2zX0I26vJIkAvcaIyC3BJwceFVF1L6VMD3rU7qI2gKNDxCGqw9QS2pEBYUwlpjPnmxk6QDmIWfvb94lu2R5uD57n6Q2ojXskhowwYUFEs_itGWm8fCzvSSvonOW_12sTn9z0Q?key=e2QyVzBeUyozrH4QMARwDhhT\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003ePlease note that this initial integration fetches snapshot data only from the main thread and supports CPU data exclusively. Since the Unity Profiler aggregates data from multiple calls of the same method, individual calls cannot be distinguished at this time. For more information, please refer to \u003ca href=\"https://www.jetbrains.com/help/rider/2025.1/Unity_Profiler_Assistance.html\" target=\"_blank\" rel=\"noopener\"\u003eRider’s documentation for this feature\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch3\u003eEnhanced C++ debugging on Windows \u003c/h3\u003e\n\n\n\n\u003cp\u003eRider 2025.1 offers one more enhancement for Natvis file handling in the C++ debugger on Windows. Previously, Rider only loaded Natvis files from system-wide directories and the project model. Now, you can:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eSet the paths for your Natvis files in the settings.\u003c/li\u003e\n\n\n\n\u003cli\u003eAutomatically load Natvis files from \u003ccode\u003e%USERPROFILE%\\Documents\\Visual Studio \u0026lt;Version\u0026gt;\\Visualizers\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThis flexibility should make it easier for you to maintain consistent debugging visualization across your development environments.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003e\u003cbr/\u003eFor full information about the updates included in this build, please see \u003ca href=\"https://youtrack.jetbrains.com/issues/RIDER?q=Available%20in:%20%7B2025.1%20EAP%205*%7D%20\" target=\"_blank\" rel=\"noopener\"\u003eour issue tracker\u003c/a\u003e.\u003c/p\u003e\n\n\n    \n\n\n\n\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to a monthly digest curated from the .NET Tools blog:\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
