{
  "id": "18e9cea9-6dc6-4fe0-9e83-47bd8e42e665",
  "title": "Design system annotations, part 1: How accessibility gets left out of components",
  "link": "https://github.blog/engineering/user-experience/design-system-annotations-part-1-how-accessibility-gets-left-out-of-components/",
  "description": "The Accessibility Design team created a set of annotations to bridge the gaps that design systems alone can’t fix and proactively addresses accessibility issues within Primer components. The post Design system annotations, part 1: How accessibility gets left out of components appeared first on The GitHub Blog.",
  "author": "Jan Maarten",
  "published": "Fri, 09 May 2025 16:56:41 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "Engineering",
    "User experience",
    "accessibility",
    "annotations",
    "ARIA",
    "Components",
    "design",
    "design systems",
    "Figma",
    "Primer"
  ],
  "byline": "Jan Maarten",
  "length": 14530,
  "excerpt": "The Accessibility Design team created a set of annotations to bridge the gaps that design systems alone can’t fix and proactively addresses accessibility issues within Primer components.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "When it comes to design systems, every organization tends to be at a different place in their accessibility journey. Some have put a great deal of work into making their design system accessible while others have a long way to go before getting there. To help on this journey, many organizations rely on accessibility annotations to make sure there are no access barriers when a design is ready to be built.  However, it’s a common misconception (especially for organizations with mature design systems) that accessible components will result in accessible designs. While design systems are fantastic for scaling standards and consistency, they can’t prevent every issue with our designs or how we build them. Access barriers can still slip through the cracks and make it into production. This is the root of the problem our Accessibility Design team set out to solve.  In this two-part series, we’ll show you exactly how accessible design system components can produce inaccessible designs. Then we’ll demonstrate our solution: integrating annotations with our Primer components. This allows us to spend less time annotating, increases design system adoption, and reaches teams who may not have accessibility support. And in our next post, we’ll walk you through how you can do the same for your own components. Let’s dig in. What are annotations and their benefits?  Annotations are notes included in design projects that help make the unseen explicit by conveying design intent that isn’t shown visually. They improve the usability of digital experiences by providing a holistic picture for developers of how an experience should function. Integrating annotations into our design process helps our teams work better together by closing communication gaps and preventing quality issues, accessibility audit issues, and expensive re-work.  Some of the questions annotations help us answer include: How is assistive technology meant to navigate a page from one element to another? What’s the alternative text for informative images and buttons without labels? How does content shift depending on viewport size, screen orientation, or zoom level? Which virtual keyboard should be used for a form input on mobile? How should focus be managed for complex interactions? Our answers to questions like this—or the lack thereof—can make or break the experience of the web for a lot of people, especially users with disabilities. Some annotation tools are built specifically to help with this by guiding designers to include key details about web standards, platform functionality, and accessibility (a11y).  Most public annotation kits are well suited for teams who are creating new design system components, teams who aren’t already using a design system, or teams who don’t have specialized accessibility knowledge. They usually help annotate things like: Controls such as buttons and links Structural elements such as headings and landmarks Decorative images and informative descriptions  Forms and other elements that require labels and semantic roles  Focus order for assistive technology and keyboard navigation GitHub’s annotation’s toolkit One of our top priorities is to meet our colleagues where they’re at. We wanted all our designers to be able to use annotations out of the box because we believe they shouldn’t need to be a certified accessibility specialist in order to get things built in an accessible way.  To this end, last year we began creating an internal Figma library—the GitHub Annotation Toolkit (which we aim to release to the public soon). Our toolkit builds on the legacy of the former Inclusive Design team at CVS Health. Their two open source annotation kits help make documentation that’s easy to create and consume, and are among the most widely used annotation libraries in the Figma Community.  While they add clarity, annotations can also add overhead. If teams are only relying on specialists to interpret designs and technical specifications for developers, the hand-off process can take longer than it needs to. To create our annotation toolkit, we rebuilt its predecessor from the ground up to avoid that overhead, making extensive improvements and adding inline documentation to make it more intuitive and helpful for all of our designers—not just accessibility specialists.  Design systems can also help reduce that overhead. When you audit your design systems for accessibility, there’s less need for specialist attention on every product feature, since you’re using annotations to add technical semantics and specialist knowledge into every component. This means that designers and developers only need to adhere to the usage guidelines consistently, right? The problems with annotations and design system components Unfortunately, it’s not that simple.  Accessibility is not binary While design systems can help drive more accessible design at scale, they are constantly evolving and the work on them is never done. The accessibility of any component isn’t binary. Some may have a few severe issues that create access barriers, such as being inoperable with a keyboard or missing alt text. Others may have a few trivial issues, such as generic control labels.  Most of the time, it will be a misnomer to claim that your design system is “fully accessible.” There’s always more work to do—it’s just a question of how much. The Web Content Accessibility Guidelines (WCAG) are a great starting point, but their “Success Criteria” isn’t tailored for the unique context that is your website or product or audience.  While the WCAG should be used as a foundation to build from, it’s important to understand that it can’t capture every nuance of disabled users’ needs because your users’ needs are not every user’s needs. It would be very easy to believe that your design system is “fully accessible” if you never look past WCAG to talk to your users. If Primer has accessible components, it’s because we feel that direct participation and input from daily assistive technology users is the most important aspect of our work. Testing plans with real users—with and without disabilities—is where you really find what matters most.  Accessible components do not guarantee accessible designs Arranging a series of accessible components on a page does not automatically create an accurate and informative heading hierarchy. There’s a good chance that without additional documentation, the heading structure won’t make sense visually—nor as a medium for navigating with assistive technology. It’s great when accessible components are flexible and responsive, but what about when they’re placed in a layout that the component guidance doesn’t account for? Do they adapt to different zoom levels, viewport sizes, and screen orientations? Do they lose any functionality or context when any of those things change? Component usage is contextual. You can add an image or icon to your design, but the design system docs can’t write descriptive text for you. You can use the same image in multiple places, but the image description may need to change depending on context.  Similarly, forms built using the same input components may do different things and require different error validation messages. It’s no wonder that adopting design system components doesn’t get rid of all audit issues. Design system components in Figma don’t include all the details Annotation kits don’t include components for specific design systems because almost every organization is using their own. When annotation kits are adopted, teams often add ways to label their design system components.  This labeling lets developers know they can use something that’s already been built, and that they don’t need to build something from scratch. It also helps identify any design system components that get ‘detached’ in Figma. And it reduces the number of things that need to be annotated.  Let’s look at an example: If we’re using this Primer Button component from the Primer Web Figma library, there are a few important things that we won’t know just by looking at the design or the component properties: Functional differences when components are implemented. Is this a link that just looks visually like a button? If so, a developer would use the \u003cLinkButton\u003e React component instead of \u003cButton\u003e. Accessible labels for folks using assistive technology. The icon may need alt text. In some cases, the button text might need some visually-hidden text to differentiate it from similar buttons. How would we know what that text is? Without annotations, the Figma component doesn’t have a place to display this. Whether user data is submitted. When a design doesn’t include an obvious form with input fields, how do we convey that the button needs specific attributes to submit data?  It’s risky to leave questions like this unanswered, hoping someone notices and guesses the correct answer.  A solution that streamlines the annotation process while minimizing risk When creating new components, a set of detailed annotations can be a huge factor in how robust and accessible they are. Once the component is built, design teams can start to add instances of that component in their designs. When those designs are ready to be annotated, those new components shouldn’t need to be annotated again. In most cases, it would be redundant and unnecessary—but not in every case.  There are some important details in many Primer components that may change from one instance to another. If we use the CVS Health annotation kit out of the box, we should be able to capture those variations, but we wouldn’t be able to avoid those redundant and unnecessary annotations. As we built our own annotation toolkit, we built a set of annotations for each Primer component to do both of those things at once.  This accordion component has been thoroughly annotated so that an engineer has everything they need to build it the first time. These include heading levels, semantics for \u003cdetail\u003e and \u003csummary\u003e elements, landmarks, and decorative icons. All of this is built into the component so we don’t need to annotate most of this when adding the accordion to our new designs. However, there are two important things we need to annotate, as they can change from one instance to another: The optional title at the top. The heading level of each item within the accordion. If we don’t specify these things, we’re leaving it to chance that the page’s heading structure will break or that the experience will be confusing for people to understand and navigate the page. The risks may be low for a single button or basic accordion, but they grow with pattern complexity, component nesting, interaction states, duplicated instances, and so on.  Instead of annotating what’s already built into the component or leaving these details to chance, we can add two quick annotations. One Stamp to point to the component, and one Details annotation where we fill in some blanks to make the heading levels clear.  Because the prompts for specific component details are pre-set in the annotation, we call them Preset annotations. Introducing our Primer A11y Preset annotations With this proof of concept, we selected ten frequently used Primer components for the same treatment and built a new set of Preset annotations to document these easily missed accessibility details—our Primer A11y Presets.  Those Primer components tend to contribute to more accessibility audit issues when key details are missing on implementation. Issues for these components relate to things like lack of proper labels, error validation messages, or missing HTML or ARIA attributes.  Each of our Preset annotations is linked to component docs and Storybook demos. This will hopefully help developers get straight to the technical info they need without designers having to find and add links manually. We also included guidance for how to fill out each Preset, as well as how to use the component in an accessible way. This helps designers get support inline without leaving their Figma canvas.  Want to create your own? Check out Design system annotations, part 2 Button components in Google’s Material Design and Shopify’s Polaris, IBM’s Carbon, or our Primer design system are all very different from one another. Because Preset annotations are based on specific components, they only work if you’re also using the design system they’re made for.  In part 2 of this series, we’ll walk you through how you can build your own set of Preset annotations for your design system, as well as some different ways to document important accessibility details before development starts. You may also like:  If you’re more of a visual learner, you can watch Alexis Lucio explore Preset annotations during GitHub’s Dev Community Event to kick off Figma’s Config 2024.  Tags: accessibility annotations ARIA Components design design systems Figma Primer Written by Jan Maarten (he/him) is a designer and accessibility specialist living on unceded Duwamish lands. He has two decades of experience as a full-stack designer wearing every kind of hat, from end-to-end product design and brand to strategy and leadership. In his previous role on the CVS Health Inclusive Design team, he co-created several new accessibility annotation toolkits for web and iOS. He is currently a Senior Accessibility Designer at GitHub, helping teams shift left and improving design infrastructure. Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/05/Design-System-Annotations-Part-1.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eWhen it comes to design systems, every organization tends to be at a different place in their accessibility journey. Some have put a great deal of work into making their design system accessible while others have a long way to go before getting there. To help on this journey, many organizations rely on \u003ca href=\"https://tangible.is/en/thinking/2024/10/the-value-of-accessibility-annotations-in-inclusive-design\"\u003eaccessibility annotations\u003c/a\u003e to make sure there are no access barriers when a design is ready to be built. \u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, it’s a common misconception (especially for organizations with mature design systems) that accessible components will result in accessible designs. While design systems are fantastic for scaling standards and consistency, they can’t prevent every issue with our designs or how we build them. Access barriers can still slip through the cracks and make it into production.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis is the root of the problem our Accessibility Design team set out to solve. \u003c/p\u003e\n\n\n\n\u003cp\u003eIn this two-part series, we’ll show you exactly how accessible design system components can produce inaccessible designs. Then we’ll demonstrate our solution: integrating annotations with our \u003ca href=\"https://primer.style/\"\u003ePrimer\u003c/a\u003e components. This allows us to spend less time annotating, increases design system adoption, and reaches teams who may not have accessibility support. And in our next post, we’ll walk you through how you can do the same for your own components.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s dig in.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"h-what-are-annotations-and-their-benefits-nbsp\"\u003eWhat are annotations and their benefits? \u003c/h2\u003e\n\n\n\n\u003cp\u003eAnnotations are notes included in design projects that help make the unseen explicit by conveying design intent that isn’t shown visually. They improve the usability of digital experiences by providing a holistic picture for developers of how an experience should function. Integrating annotations into our design process helps our teams work better together by closing communication gaps and preventing quality issues, \u003ca href=\"https://www.w3.org/WAI/test-evaluate/\"\u003eaccessibility audit issues\u003c/a\u003e, and expensive re-work. \u003c/p\u003e\n\n\n\n\u003cp\u003eSome of the questions annotations help us answer include:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eHow is \u003ca href=\"https://tetralogical.com/blog/2021/12/24/browsing-with-assistive-technology-videos/\"\u003eassistive technology\u003c/a\u003e meant to navigate a page from one element to another?\u003c/li\u003e\n\n\n\n\u003cli\u003eWhat’s the alternative text for informative images and buttons without labels?\u003c/li\u003e\n\n\n\n\u003cli\u003eHow does content shift depending on viewport size, screen orientation, or zoom level?\u003c/li\u003e\n\n\n\n\u003cli\u003eWhich \u003ca href=\"https://developer.apple.com/design/human-interface-guidelines/virtual-keyboards#Best-practices\"\u003evirtual keyboard\u003c/a\u003e should be used for a form input on mobile?\u003c/li\u003e\n\n\n\n\u003cli\u003eHow should focus be managed for complex interactions?\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eOur answers to questions like this—or the lack thereof—can \u003cstrong\u003emake or break\u003c/strong\u003e the experience of the web for a lot of people, especially users with disabilities. Some annotation tools are built specifically to help with this by guiding designers to include key details about web standards, platform functionality, and accessibility (a11y). \u003c/p\u003e\n\n\n\n\u003cp\u003eMost public annotation kits are well suited for teams who are creating new design system components, teams who aren’t already using a design system, or teams who don’t have specialized accessibility knowledge. They usually help annotate things like:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eControls such as buttons and links\u003c/li\u003e\n\n\n\n\u003cli\u003eStructural elements such as headings and \u003ca href=\"https://developer.mozilla.org/en-US/blog/aria-accessibility-html-landmark-roles/\"\u003elandmarks\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"https://tetralogical.com/blog/2022/01/24/text-descriptions/\"\u003eDecorative images\u003c/a\u003e and informative descriptions \u003c/li\u003e\n\n\n\n\u003cli\u003eForms and other elements that require labels and semantic roles \u003c/li\u003e\n\n\n\n\u003cli\u003eFocus order for assistive technology and keyboard navigation\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch3 id=\"h-github-s-annotation-s-toolkit\"\u003eGitHub’s annotation’s toolkit\u003c/h3\u003e\n\n\n\n\u003cp\u003eOne of our top priorities is to \u003cstrong\u003emeet our colleagues where they’re at\u003c/strong\u003e. We wanted all our designers to be able to use annotations out of the box because we believe they shouldn’t need to be a certified accessibility specialist in order to get things built in an accessible way. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1200\" height=\"630\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/Figure-1-Web-Accessibility-Annotation-Kit.png?resize=1200%2C630\" alt=\" A browser window showing the Web Accessibility Annotation Kit in the cvs-health/annotations repository.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/Figure-1-Web-Accessibility-Annotation-Kit.png?w=1200 1200w, https://github.blog/wp-content/uploads/2025/05/Figure-1-Web-Accessibility-Annotation-Kit.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/Figure-1-Web-Accessibility-Annotation-Kit.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/Figure-1-Web-Accessibility-Annotation-Kit.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTo this end, last year we began creating an internal Figma library—the \u003ca href=\"https://primer.style/accessibility/tools/#annotation-toolkit-internal\"\u003eGitHub Annotation Toolkit\u003c/a\u003e (which we aim to release to the public soon). Our toolkit builds on the legacy of the former Inclusive Design team at CVS Health. Their two \u003ca href=\"https://github.com/cvs-health/annotations\"\u003eopen source annotation kits\u003c/a\u003e help make documentation that’s easy to create and consume, and are among the most widely used annotation libraries in the Figma Community. \u003c/p\u003e\n\n\n\n\u003cp\u003eWhile they add clarity, annotations can also add overhead. If teams are only relying on specialists to interpret designs and technical specifications for developers, the hand-off process can take longer than it needs to. To create our annotation toolkit, we rebuilt its predecessor from the ground up to avoid that overhead, making extensive improvements and adding inline documentation to make it more intuitive and helpful for all of our designers—not just accessibility specialists. \u003c/p\u003e\n\n\n\n\u003cp\u003eDesign systems can also help reduce that overhead. When you \u003ca href=\"https://www.deque.com/blog/auditing-design-systems-for-accessibility/\"\u003eaudit your design systems for accessibility\u003c/a\u003e, there’s less need for specialist attention on every product feature, since you’re using annotations to add technical semantics and specialist knowledge into every component. This means that designers and developers only need to adhere to the usage guidelines consistently, right?\u003c/p\u003e\n\n\n\n\u003ch2 id=\"the-problems-with-annotations-and-design-system-components\"\u003eThe problems with annotations and design system components\u003c/h2\u003e\n\n\n\n\u003cp\u003eUnfortunately, it’s not that simple. \u003c/p\u003e\n\n\n\n\u003ch3 id=\"accessibility-is-not-binary\"\u003eAccessibility is not binary\u003c/h3\u003e\n\n\n\n\u003cp\u003eWhile design systems can help drive more accessible design at scale, they are constantly evolving and the work on them is never done. The accessibility of any component isn’t binary. Some may have a few severe issues that create access barriers, such as being inoperable with a keyboard or missing alt text. Others may have a few trivial issues, such as generic control labels. \u003c/p\u003e\n\n\n\n\u003cp\u003eMost of the time, it will be a misnomer to claim that your design system is “fully accessible.” There’s always more work to do—it’s just a question of how much. The \u003ca href=\"https://www.a11yproject.com/posts/wcag2-documents/\"\u003eWeb Content Accessibility Guidelines\u003c/a\u003e (WCAG) are a great starting point, but their “Success Criteria” isn’t tailored for the unique context that is your website or product or audience. \u003c/p\u003e\n\n\n\n\u003cp\u003eWhile the WCAG should be used as a foundation to build from, it’s important to understand that it \u003ca href=\"https://cerovac.com/a11y/2021/12/how-to-know-that-a-website-or-app-is-really-accessible/\"\u003ecan’t capture every nuance\u003c/a\u003e of disabled users’ needs because \u003cstrong\u003eyour\u003c/strong\u003e users’ needs are not \u003cstrong\u003eevery\u003c/strong\u003e user’s needs. It would be very easy to believe that your design system is “fully accessible” if you never look past WCAG to talk to \u003cstrong\u003eyour\u003c/strong\u003e users. If Primer has accessible components, it’s because we feel that direct participation and input from daily assistive technology users is \u003ca href=\"https://github.blog/engineering/user-experience/how-were-building-more-inclusive-and-accessible-components-at-github/\"\u003ethe most important aspect of our work\u003c/a\u003e. Testing plans with real users—with and without disabilities—is where you really find what matters most. \u003c/p\u003e\n\n\n\n\u003ch3 id=\"accessible-components-do-not-guarantee-accessible-designs\"\u003eAccessible \u003cem\u003ecomponents\u003c/em\u003e do not guarantee accessible \u003cem\u003edesigns\u003c/em\u003e\u003c/h3\u003e\n\n\n\n\u003cp\u003eArranging a series of accessible components on a page does not automatically create an accurate and informative heading hierarchy. There’s a good chance that without additional documentation, the heading structure won’t make sense visually—nor as a medium for \u003ca href=\"https://tetralogical.com/blog/2021/09/29/browsing-with-a-desktop-screen-reader/\"\u003enavigating with assistive technology.\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1200\" height=\"630\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/Figure-2.png?resize=1200%2C630\" alt=\"A page wireframe showing a linear layout of an H1 title, an H2 in a banner below it, and a row of several cards below with headings of H4. The caption reads: this accessible card has an H4, breaking the page structure by skipping heading levels. Next to the wireframe is a diagram showing the page structure as a tree view, highlighting the level skipping from H2 to H4.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/Figure-2.png?w=1200 1200w, https://github.blog/wp-content/uploads/2025/05/Figure-2.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/Figure-2.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/Figure-2.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIt’s great when accessible components are flexible and responsive, but what about when they’re placed in a layout that the component guidance doesn’t account for? Do they adapt to different zoom levels, viewport sizes, and screen orientations? Do they lose any functionality or context when any of those things change?\u003c/p\u003e\n\n\n\n\u003cp\u003eComponent usage is contextual. You can add an image or icon to your design, but the design system docs can’t write descriptive text for you. You can use the same image in multiple places, but the image description may need to change depending on context. \u003c/p\u003e\n\n\n\n\u003cp\u003eSimilarly, forms built using the same input components may do different things and require different error validation messages. It’s no wonder that \u003ca href=\"https://www.a11yquest.com/blog/2024-11-13-component-libraries\"\u003eadopting design system components doesn’t get rid of all audit issues.\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"design-system-components-in-figma-dont-include-all-the-details\"\u003eDesign system components in Figma don’t include all the details\u003c/h3\u003e\n\n\n\n\u003cp\u003eAnnotation kits don’t include components for specific design systems because almost every organization is using their own. When annotation kits are adopted, teams often add ways to label their design system components. \u003c/p\u003e\n\n\n\n\u003cp\u003eThis labeling lets developers know they can use something that’s already been built, and that they don’t need to build something from scratch. It also helps identify any design system components that get ‘detached’ in Figma. And it reduces the number of things that need to be annotated. \u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s look at an example:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1200\" height=\"470\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/Figure-3-A-Mysterious-Button.png?w=1024\u0026amp;resize=1200%2C470\" alt=\"A green Primer button with a lightning bolt icon and a label that says: this button does something. To the right is a set of Figma component properties that control the button’s visual appearance.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/Figure-3-A-Mysterious-Button.png?w=1200 1200w, https://github.blog/wp-content/uploads/2025/05/Figure-3-A-Mysterious-Button.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/Figure-3-A-Mysterious-Button.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/Figure-3-A-Mysterious-Button.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf we’re using this Primer \u003ca href=\"https://primer.style/react/storybook/?path=/story/components-button-features--primary\"\u003eButton\u003c/a\u003e component from the \u003ca href=\"https://www.figma.com/community/file/854767373644076713\"\u003ePrimer Web Figma library\u003c/a\u003e, there are a few important things that we won’t know just by looking at the design or the component properties:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFunctional differences when components are implemented.\u003c/strong\u003e Is this a link that just looks visually like a button? If so, a developer would use the \u003ccode\u003e\u003ca href=\"https://primer.style/react/storybook/?path=/story/components-linkbutton--default\"\u003e\u0026lt;LinkButton\u0026gt;\u003c/a\u003e\u003c/code\u003e React component instead of \u003ccode\u003e\u0026lt;Button\u0026gt;\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eAccessible labels for folks using assistive technology.\u003c/strong\u003e The icon may need alt text. In some cases, the button text might need some \u003ca href=\"https://webaim.org/techniques/css/invisiblecontent/\"\u003evisually-hidden text\u003c/a\u003e to differentiate it from similar buttons. How would we know what that text is? Without annotations, the Figma component doesn’t have a place to display this.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eWhether user data is submitted.\u003c/strong\u003e When a design doesn’t include an obvious form with input fields, how do we convey that the button needs specific attributes to submit data? \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eIt’s risky to leave questions like this unanswered, hoping someone notices and guesses the correct answer. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"a-solution-that-streamlines-the-annotation-process-while-minimizing-risk\"\u003eA solution that streamlines the annotation process while minimizing risk\u003c/h2\u003e\n\n\n\n\u003cp\u003eWhen creating new components, a set of detailed annotations can be a huge factor in how robust and accessible they are. Once the component is built, design teams can start to add instances of that component in their designs. When those designs are ready to be annotated, those new components shouldn’t need to be annotated again. In most cases, it would be redundant and unnecessary—but not in every case. \u003c/p\u003e\n\n\n\n\u003cp\u003eThere are some important details in many Primer components that may change from one instance to another. If we use the CVS Health annotation kit out of the box, we should be able to capture those variations, but we wouldn’t be able to avoid those redundant and unnecessary annotations. As we built our own annotation toolkit, we built a set of annotations for each Primer component to do both of those things at once. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1390\" height=\"580\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/Figure-4-Annotated-Primer-Brand-Accordion.png?resize=1390%2C580\" alt=\"An annotated Primer Brand accordion with six Stamps and four Detail notes in the margins.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/Figure-4-Annotated-Primer-Brand-Accordion.png?w=1390 1390w, https://github.blog/wp-content/uploads/2025/05/Figure-4-Annotated-Primer-Brand-Accordion.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/Figure-4-Annotated-Primer-Brand-Accordion.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/Figure-4-Annotated-Primer-Brand-Accordion.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis accordion component has been thoroughly annotated so that an engineer has everything they need to build it the first time. These include heading levels, semantics for \u003ccode\u003e\u0026lt;detail\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e elements, landmarks, and decorative icons. All of this is built into the component so we don’t need to annotate most of this when adding the accordion to our new designs.\u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, there are two important things we need to annotate, as they can change from one instance to another:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eThe optional title at the top.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe heading level of each item within the accordion.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eIf we don’t specify these things, we’re leaving it to chance that the page’s heading structure will break or that the experience will be confusing for people to understand and navigate the page. The risks may be low for a single button or basic accordion, but they grow with pattern complexity, component nesting, interaction states, duplicated instances, and so on. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1390\" height=\"580\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/Figure-5-Primer-Brand-Accordion-with-Preset-annotations.png?resize=1390%2C580\" alt=\"An annotated Primer Brand accordion with one Stamp and one Detail note in the margins.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/Figure-5-Primer-Brand-Accordion-with-Preset-annotations.png?w=1390 1390w, https://github.blog/wp-content/uploads/2025/05/Figure-5-Primer-Brand-Accordion-with-Preset-annotations.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/Figure-5-Primer-Brand-Accordion-with-Preset-annotations.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/Figure-5-Primer-Brand-Accordion-with-Preset-annotations.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eInstead of annotating what’s already built into the component or leaving these details to chance, we can add two quick annotations. One Stamp to point to the component, and one Details annotation where we fill in some blanks to make the heading levels clear. \u003c/p\u003e\n\n\n\n\u003cp\u003eBecause the prompts for specific component details are \u003cstrong\u003epre-set\u003c/strong\u003e in the annotation, we call them Preset annotations.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1200\" height=\"630\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/Figure-6-Primer-A11y-Presets.png?resize=1200%2C630\" alt=\"A mosaic of preset annotation for various Primer components.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/Figure-6-Primer-A11y-Presets.png?w=1200 1200w, https://github.blog/wp-content/uploads/2025/05/Figure-6-Primer-A11y-Presets.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/Figure-6-Primer-A11y-Presets.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/Figure-6-Primer-A11y-Presets.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"introducing-our-primer-a11y-preset-annotations\"\u003eIntroducing our Primer A11y Preset annotations\u003c/h2\u003e\n\n\n\n\u003cp\u003eWith this proof of concept, we selected ten frequently used Primer components for the same treatment and built a new set of Preset annotations to document these easily missed accessibility details—our Primer A11y Presets. \u003c/p\u003e\n\n\n\n\u003cp\u003eThose Primer components tend to contribute to more accessibility audit issues when key details are missing on implementation. Issues for these components relate to things like lack of proper labels, error validation messages, or missing HTML or \u003ca href=\"https://tetralogical.com/blog/2023/02/10/foundations-wai-aria/\"\u003eARIA attributes\u003c/a\u003e. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1200\" height=\"630\" loading=\"lazy\" src=\"https://github.blog/wp-content/uploads/2025/05/Figure-7-IconButton-with-guidance.png?resize=1200%2C630\" alt=\"IconButton Preset annotation, with guidance toggled on.\" srcset=\"https://github.blog/wp-content/uploads/2025/05/Figure-7-IconButton-with-guidance.png?w=1200 1200w, https://github.blog/wp-content/uploads/2025/05/Figure-7-IconButton-with-guidance.png?w=300 300w, https://github.blog/wp-content/uploads/2025/05/Figure-7-IconButton-with-guidance.png?w=768 768w, https://github.blog/wp-content/uploads/2025/05/Figure-7-IconButton-with-guidance.png?w=1024 1024w\" sizes=\"auto, (max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eEach of our Preset annotations is linked to component docs and \u003ca href=\"https://primer.style/react/storybook/\"\u003eStorybook\u003c/a\u003e demos. This will hopefully help developers get straight to the technical info they need without designers having to find and add links manually. We also included guidance for how to fill out each Preset, as well as how to use the component in an accessible way. This helps designers get support inline without leaving their Figma canvas. \u003c/p\u003e\n\n\n\n\u003ch2 id=\"want-to-create-your-own-check-out-design-system-annotations-part-2\"\u003eWant to create your own? Check out Design system annotations, part 2\u003c/h2\u003e\n\n\n\n\u003cp\u003eButton components in Google’s \u003ca href=\"https://m3.material.io/\"\u003eMaterial Design\u003c/a\u003e and Shopify’s \u003ca href=\"https://polaris.shopify.com/\"\u003ePolaris\u003c/a\u003e, IBM’s \u003ca href=\"https://carbondesignsystem.com/\"\u003eCarbon\u003c/a\u003e, or our Primer design system are all very different from one another. Because Preset annotations are based on specific components, they only work if you’re also using the design system they’re made for. \u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.blog/engineering/user-experience/design-system-annotations-part-2-advanced-methods-of-annotating-components/\"\u003eIn part 2 of this series\u003c/a\u003e\u003c/strong\u003e, we’ll walk you through how you can build your own set of Preset annotations for your design system, as well as some different ways to document important accessibility details before development starts.\u003c/p\u003e\n\n\n\n\u003ch2 id=\"you-may-also-like\"\u003eYou may also like: \u003c/h2\u003e\n\n\n\n\u003cp\u003eIf you’re more of a visual learner, you can watch \u003ca href=\"https://primer.style/about/#alexislucio\"\u003eAlexis Lucio\u003c/a\u003e explore Preset annotations during GitHub’s \u003ca href=\"https://githubday0.splashthat.com/\"\u003eDev Community Event\u003c/a\u003e to kick off Figma’s Config 2024. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe loading=\"lazy\" title=\"Putting theory into practice: How GitHub uses Figma for its a11y annotation kit and training\" width=\"500\" height=\"281\" src=\"https://www.youtube.com/embed/bNweRLxWxGA?list=PL0lo9MOBetEG5P2wUZYfUUehbYArAgpng\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\t\n\u003csection\u003e\n\t\u003chr/\u003e\n\t\u003cdiv\u003e\n\t\t\u003ch2\u003eTags:\u003c/h2\u003e\n\t\t\u003cul\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/accessibility/\" rel=\"tag\"\u003e\n\t\t\t\t\t\taccessibility\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/annotations/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tannotations\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/aria/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tARIA\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/components/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tComponents\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/design/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tdesign\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/design-systems/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tdesign systems\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/figma/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tFigma\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\t\t\u003cli\u003e\n\t\t\t\t\t\u003ca href=\"https://github.blog/tag/primer/\" rel=\"tag\"\u003e\n\t\t\t\t\t\tPrimer\t\t\t\t\t\u003c/a\u003e\n\t\t\t\t\u003c/li\u003e\n\t\t\t\t\t\u003c/ul\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/83665577?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/83665577?v=4\u0026amp;s=200\" alt=\"Jan Maarten\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eJan Maarten (he/him) is a designer and accessibility specialist living on unceded Duwamish lands. He has two decades of experience as a full-stack designer wearing every kind of hat, from end-to-end product design and brand to strategy and leadership. In his previous role on the CVS Health Inclusive Design team, he co-created several new accessibility annotation toolkits for web and iOS. He is currently a Senior Accessibility Designer at GitHub, helping teams shift left and improving design infrastructure.\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "16 min read",
  "publishedTime": "2025-05-09T16:56:41Z",
  "modifiedTime": "2025-05-09T19:12:07Z"
}
