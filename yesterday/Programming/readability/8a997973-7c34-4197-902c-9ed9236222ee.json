{
  "id": "8a997973-7c34-4197-902c-9ed9236222ee",
  "title": "Google Go Module Mirror Served Backdoor for 3+ Years",
  "link": "https://www.infoq.com/news/2025/04/google-go-module-mirror-backdoor/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "In February 2025, researchers at Socket uncovered a significant supply chain attack within the Go programming ecosystem. A malicious package, named github.com/boltdb-go/bolt, was discovered impersonating the legitimate and widely-used BoltDB module. By Craig Risi",
  "author": "Craig Risi",
  "published": "Mon, 21 Apr 2025 12:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Google Go",
    "Security",
    "DevOps",
    "news"
  ],
  "byline": "Craig Risi",
  "length": 2024,
  "excerpt": "In February 2025, researchers at Socket uncovered a significant supply chain attack within the Go programming ecosystem. A malicious package, named github.com/boltdb-go/bolt, was discovered impersonat",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250413214448/apple-touch-icon.png",
  "text": "In February 2025, researchers at Socket uncovered a significant supply chain attack within the Go programming ecosystem. A malicious package, named github.com/boltdb-go/bolt, was discovered impersonating the legitimate and widely-used BoltDB module. This backdoored package exploited the Go Module Proxy's caching mechanism to persist undetected for years, underscoring vulnerabilities in module management systems. ​The Go Module Proxy is designed to cache modules indefinitely to ensure consistent and reliable builds. While this immutability offers benefits like reproducible builds and protection against upstream changes, it also presents a risk: once a malicious module is cached, it remains available to developers, even if the source repository is cleaned or altered. In this incident, the attacker leveraged this feature to maintain the presence of the backdoored package within the ecosystem, despite subsequent changes to the repository.  This case is part of a broader trend where attackers exploit package management systems through techniques like typosquatting. Similar incidents have been observed in other ecosystems, such as npm and PyPI, where malicious packages mimic popular libraries to deceive developers.  To reduce the risk of supply chain attacks, developers should carefully verify package names and sources before installation, ensuring they’re using trusted libraries. Regular audits of dependencies can help catch signs of tampering or malicious behavior early. Security tools that flag suspicious packages offer another layer of protection, and staying up to date with known vulnerabilities and ecosystem alerts is essential for maintaining safe development practices. By adopting these practices, developers can enhance the security of their software supply chains and reduce the risk of introducing malicious code into their projects. About the Author Craig Risi",
  "image": "https://res.infoq.com/news/2025/04/google-go-module-mirror-backdoor/en/headerimage/Google-Files-Go-1744449553777.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp dir=\"ltr\"\u003eIn February 2025, \u003ca href=\"https://socket.dev/blog/malicious-package-exploits-go-module-proxy-caching-for-persistence\"\u003eresearchers at Socket uncovered \u003c/a\u003ea significant supply chain attack within the Go programming ecosystem. A malicious package, named github.com/boltdb-go/bolt, was discovered impersonating the legitimate and widely-used BoltDB module. This backdoored package exploited the Go Module Proxy\u0026#39;s caching mechanism to persist undetected for years, underscoring vulnerabilities in module management systems.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003e​The \u003ca href=\"https://proxy.golang.org/\"\u003eGo Module Proxy\u003c/a\u003e is designed to cache modules indefinitely to ensure consistent and reliable builds. While this immutability offers benefits like reproducible builds and protection against upstream changes, it also presents a risk: once a malicious module is cached, it remains available to developers, even if the source repository is cleaned or altered. In this incident, the attacker leveraged this feature to maintain the presence of the backdoored package within the ecosystem, despite subsequent changes to the repository. \u003c/p\u003e\n\n\n\n\u003cp dir=\"ltr\"\u003eThis case is part of a broader trend where attackers exploit package management systems through techniques like typosquatting. Similar incidents have been observed in other ecosystems, such as npm and PyPI, where malicious packages mimic popular libraries to deceive developers. \u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eTo reduce the risk of supply chain attacks, developers should carefully verify package names and sources before installation, ensuring they’re using trusted libraries. Regular audits of dependencies can help catch signs of tampering or malicious behavior early. Security tools that flag suspicious packages offer another layer of protection, and staying up to date with known vulnerabilities and ecosystem alerts is essential for maintaining safe development practices.\u003c/p\u003e\n\n\u003cp dir=\"ltr\"\u003eBy adopting these practices, developers can enhance the security of their software supply chains and reduce the risk of introducing malicious code into their projects.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Craig-Risi\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eCraig Risi\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-04-21T00:00:00Z",
  "modifiedTime": null
}
