{
  "id": "cb4c9b46-f247-40b7-a2c6-130d05339171",
  "title": "AWS Lambda Introduces a Visual Studio Code-Based Editor with Advanced Features and AI Integration",
  "link": "https://www.infoq.com/news/2024/10/aws-lambda-code-editor/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "AWS Lambda's new console features a VS Code OSS-integrated editor, enhancing code editing with customizable settings and support for larger function packages. It includes a split-screen layout for simultaneous viewing of code and outputs, real-time log tracking, and AI-driven suggestions via Amazon Q Developer. By Steef-Jan Wiggers",
  "author": "Steef-Jan Wiggers",
  "published": "Wed, 30 Oct 2024 10:00:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Amazon Web Services",
    "IDE",
    "Productivity",
    "Developer Experience",
    "Visual Studio Code",
    "Open Source",
    "Cloud",
    "AWS Lambda",
    "Serverless",
    "Amazon",
    "AWS",
    "DevOps",
    "Architecture \u0026 Design",
    "Development",
    "news"
  ],
  "byline": "Steef-Jan Wiggers",
  "length": 3136,
  "excerpt": "AWS Lambda's new console features a VS Code OSS-integrated editor, enhancing code editing with customizable settings and support for larger function packages. It includes a split-screen layout for sim",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20241030124718/apple-touch-icon.png",
  "text": "AWS Lambda has launched a new code editing experience within its console, featuring an integration based on the Visual Studio Code Open Source (Code-OSS) editor. The Code-OSS integration delivers a coding environment like a local setup, with the ability to install preferred extensions and customize settings. Developers can now view function packages up to 50 MB directly within the console, addressing a limitation of previous Lambda editors. Although a 3 MB per file size limit remains, this change allows users to better handle functions with extensive dependencies. Furthermore, the editor offers a split-screen layout, letting users view test events, function code, and outputs simultaneously. With real-time CloudWatch Logs Live Tail integration, developers can track logs instantly as code executes, allowing immediate troubleshooting and faster iteration. A respondent in a Reddit thread commented: It can be very helpful for quick debugging/testing; thanks for the improvement! In addition, AWS has focused on making the new editor more accessible by including screen reader support, high-contrast themes, and keyboard-only navigation, creating a more inclusive experience for all developers. (Source: AWS Compute blog post) Julian Wood, a Serverless developer advocate at AWS, tweeted: Lambda's console is all new and shiny! Now, using the VS Code OSS editor. So, it feels similar to your IDE. Now, view larger package sizes! Test invokes are much simpler; view your results side-by-side with your code for quick iteration. And finally, the console now features Amazon Q Developer, an AI-driven coding assistant that provides real-time suggestions, code completions, and troubleshooting insights. This integration enables Lambda developers to build, understand, and debug functions more efficiently, streamlining the development process by reducing context-switching. Amazon Q’s contextual suggestions benefit repetitive or complex tasks, such as configuring permissions or handling event-specific data structures. In an AWS DevOps and Developer Productivity blog post, Brian Breach writes: Q Developer can provide you with code recommendations in real-time. As you write code, Q Developer automatically generates suggestions based on your existing code and comments.  Yet, Alan Blockley, a self-proclaimed AWS Evangelist, commented in a LinkedIn post by Luc van Donkersgoed: I'm conflicted by this release. While I like that it modernizes the creation of Lambda functions and introduces the potential of AI-driven development using Amazon Q and the like, I've never liked coding in the console as it discourages other best practices like IaC and change control. And Marcin Kazula commented: It is great for experimentation, quick and dirty fixes, validating deployed code, and more. The fact that it deals with large lambda packages is an extra bonus. Lastly, the new code editor is available in all AWS regions where Lambda is available. About the Author Steef-Jan Wiggers",
  "image": "https://res.infoq.com/news/2024/10/aws-lambda-code-editor/en/headerimage/generatedHeaderImage-1730110943498.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eAWS Lambda has launched a new code editing experience within its console, featuring an integration based on the Visual Studio Code Open Source (\u003ca href=\"https://github.com/microsoft/vscode\"\u003eCode-OSS\u003c/a\u003e) editor.\u003c/p\u003e\n\n\u003cp\u003eThe Code-OSS integration delivers a coding environment like a local setup, with the ability to install preferred extensions and customize settings. Developers can now view function packages up to 50 MB directly within the console, addressing a limitation of previous Lambda editors. Although a 3 MB per file size limit remains, this change allows users to better handle functions with extensive dependencies.\u003c/p\u003e\n\n\u003cp\u003eFurthermore, the editor offers a split-screen layout, letting users view test events, function code, and outputs simultaneously. With real-time CloudWatch \u003ca href=\"https://aws.amazon.com/blogs/compute/simplifying-lambda-function-development-using-cloudwatch-logs-live-tail-and-metrics-insights/\"\u003eLogs Live Tail\u003c/a\u003e integration, developers can track logs instantly as code executes, allowing immediate troubleshooting and faster iteration.\u003c/p\u003e\n\n\u003cp\u003eA respondent in a Reddit \u003ca href=\"https://www.infoq.com/news/2024/10/aws-lambda-code-editor/It%20can%20be%20very%20helpful%20for%20quick%20debugging/testing,%20thanks%20for%20the%20improvement!\"\u003ethread\u003c/a\u003e commented:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIt can be very helpful for quick debugging/testing; thanks for the improvement!\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn addition, AWS has focused on making the new editor more accessible by including screen reader support, high-contrast themes, and keyboard-only navigation, creating a more inclusive experience for all developers.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"\" src=\"https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2024/10/21/Viewing-function-code-in-the-Lambda-Code-Editor.png\" rel=\"share\"/\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e(Source: \u003ca href=\"https://aws.amazon.com/blogs/compute/introducing-an-enhanced-in-console-editing-experience-for-aws-lambda/\"\u003eAWS Compute blog post\u003c/a\u003e)\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://x.com/julian_wood\"\u003eJulian Wood\u003c/a\u003e, a Serverless developer advocate at AWS, \u003ca href=\"https://x.com/julian_wood/status/1848797783710413164\"\u003etweeted\u003c/a\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eLambda\u0026#39;s console is all new and shiny! Now, using the VS Code OSS editor. So, it feels similar to your IDE. Now, view larger package sizes! Test invokes are much simpler; view your results side-by-side with your code for quick iteration.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnd finally, the console now features Amazon Q Developer, an AI-driven coding assistant that provides real-time suggestions, code completions, and troubleshooting insights. This integration enables Lambda developers to build, understand, and debug functions more efficiently, streamlining the development process by reducing context-switching. Amazon Q’s contextual suggestions benefit repetitive or complex tasks, such as configuring permissions or handling event-specific data structures.\u003c/p\u003e\n\n\u003cp\u003eIn an AWS DevOps and Developer Productivity \u003ca href=\"https://aws.amazon.com/blogs/devops/introducing-the-new-amazon-q-developer-experience-in-aws-lambda/\"\u003eblog post\u003c/a\u003e, Brian Breach writes:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eQ Developer can provide you with code recommendations in real-time. As you write code, Q Developer automatically generates suggestions based on your existing code and comments. \u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eYet, Alan Blockley, a self-proclaimed AWS Evangelist, commented in a \u003ca href=\"https://www.linkedin.com/posts/donkersgoed_introducing-an-enhanced-in-console-editing-activity-7254564926864695296-Fltk/\"\u003eLinkedIn post\u003c/a\u003e by Luc van Donkersgoed:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eI\u0026#39;m conflicted by this release. While I like that it modernizes the creation of Lambda functions and introduces the potential of AI-driven development using Amazon Q and the like, I\u0026#39;ve never liked coding in the console as it discourages other best practices like IaC and change control.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnd Marcin Kazula commented:\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eIt is great for experimentation, quick and dirty fixes, validating deployed code, and more. The fact that it deals with large lambda packages is an extra bonus.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eLastly, the new code editor is available in all AWS regions where Lambda is available.\u003c/p\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-Steef~Jan-Wiggers\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eSteef-Jan Wiggers\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-10-30T00:00:00Z",
  "modifiedTime": null
}
