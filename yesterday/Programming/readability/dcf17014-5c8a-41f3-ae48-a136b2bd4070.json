{
  "id": "dcf17014-5c8a-41f3-ae48-a136b2bd4070",
  "title": "Progressive JSON",
  "link": "https://overreacted.io/progressive-json/",
  "description": "Why streaming isn't enough.",
  "author": "",
  "published": "Sat, 31 May 2025 00:00:00 GMT",
  "source": "https://overreacted.io/rss.xml",
  "categories": null,
  "byline": "",
  "length": 15710,
  "excerpt": "Why streaming isn't enough.",
  "siteName": "",
  "favicon": "https://overreacted.io/icon.png?e0852c1e2c7f0e65",
  "text": "Do you know about Progressive JPEGs? Here’s a nice explanation of what a Progressive JPEG is. The idea is that instead of loading the image top to bottom, the image instead is fuzzy at first and then progressively becomes more crisp. What if we apply the same idea to transferring JSON? Suppose you have a JSON tree with some data: { header: 'Welcome to my blog', post: { content: 'This is my article', comments: [ 'First comment', 'Second comment', // ... ] }, footer: 'Hope you like it' } Now imagine you want to transfer it over the wire. Because the format is JSON, you’re not going to have a valid object tree until the last byte loads. You have to wait for the entire thing to load, then call JSON.parse, and then process it. The client can’t do anything with JSON until the server sends the last byte. If a part of the JSON was slow to generate on the server (e.g. loading comments took a slow database trip), the client can’t start any work until the server finishes all the work. Would you call that good engineering? And yet it’s the status quo—that’s how 99.9999%* of apps send and process JSON. Do we dare to improve on that? * I made it up Streaming JSON We can try to improve this by implementing a streaming JSON parser. A streaming JSON parser would be able to produce an object tree from an incomplete input: { header: 'Welcome to my blog', post: { content: 'This is my article', comments: [ 'First comment', 'Second comment' If you ask for the result at this point, a streaming parser would hand you this: { header: 'Welcome to my blog', post: { content: 'This is my article', comments: [ 'First comment', 'Second comment' // (The rest of the comments are missing) ] } // (The footer property is missing) } However, this isn’t too great either. One downside of this approach is that the objects are kind of malformed. For example, the top-level object was supposed to have three properties (header, post, and footer), but the footer is missing because it hasn’t appeared in the stream yet. The post was supposed to have three comments, but you can’t actually tell whether more comments are coming or if this was the last one. In a way, this is inherent to streaming—didn’t we want to get incomplete data?—but this makes it very difficult to actually use this data on the client. None of the types “match up” due to missing fields. We don’t know what’s complete and what’s not. That’s why streaming JSON isn’t popular aside from niche use cases. It’s just too hard to actually take advantage of it in the application logic which generally assumes the types are correct, “ready” means “complete”, and so on. In the analogy with JPEG, this naïve approach to streaming matches the default “top-down” loading mechanism. The picture you see is crisp but you only see the top 10%. So despite the high fidelity, you don’t actually see what’s on the picture. Curiously, this is also how streaming HTML itself works by default. If you load an HTML page on a slow connection, it will be streamed in the document order: \u003chtml\u003e \u003cbody\u003e \u003cheader\u003eWelcome to my blog\u003c/header\u003e \u003carticle\u003e \u003cp\u003eThis is my article\u003c/p\u003e \u003cul class=\"comments\"\u003e \u003cli\u003eFirst comment\u003c/li\u003e \u003cli\u003eSecond comment\u003c/li\u003e This has some upsides—the browser is able to display the page partially—but it has the same issues. The cutoff point is arbitrary and can be visually jarring or even mess up the page layout. It’s unclear if more content is coming. Whatever’s below—like the footer—is cut off, even if it was ready on the server and could have been sent earlier. When we stream data in order, one slow part delays everything. Let’s repeat that: when we stream things in order they appear, a single slow part delays everything that comes after it. Can you think of some way to fix this? Progressive JSON There is another way to approach streaming. So far we’ve been sending things depth-first. We start with the top-level object’s properties, we go into that object’s post property, then we go into that object’s comments property, and so on. If something is slow, everything else gets held up. However, we could also send data breadth-first. Suppose we send the top-level object like this: { header: \"$1\", post: \"$2\", footer: \"$3\" } Here, \"$1\", \"$2\", \"$3\" refer to pieces of information that have not been sent yet. These are placeholders that can progressively be filled in later in the stream. For example, suppose the server sends a few more rows of data to the stream: { header: \"$1\", post: \"$2\", footer: \"$3\" } /* $1 */ \"Welcome to my blog\" /* $3 */ \"Hope you like it\" Notice that we’re not obligated to send the rows in any particular order. In the above example, we’ve just sent both $1 and $3—but the $2 row is still pending! If the client tried to reconstruct the tree at this point, it could look like this: { header: \"Welcome to my blog\", post: new Promise(/* ... not yet resolved ... */), footer: \"Hope you like it\" } We’ll represent the parts that haven’t loaded yet as Promises. Then suppose the server could stream in a few more rows: { header: \"$1\", post: \"$2\", footer: \"$3\" } /* $1 */ \"Welcome to my blog\" /* $3 */ \"Hope you like it\" /* $2 */ { content: \"$4\", comments: \"$5\" } /* $4 */ \"This is my article\" This would “fill in” some of the missing pieces from the client’s perspective: { header: \"Welcome to my blog\", post: { content: \"This is my article\", comments: new Promise(/* ... not yet resolved ... */), }, footer: \"Hope you like it\" } The Promise for the post would now resolve to an object. However, we still don’t know what’s inside the comments, so now those are represented as a Promise. Finally, the comments could stream in: { header: \"$1\", post: \"$2\", footer: \"$3\" } /* $1 */ \"Welcome to my blog\" /* $3 */ \"Hope you like it\" /* $2 */ { content: \"$4\", comments: \"$5\" } /* $4 */ \"This is my article\" /* $5 */ [\"$6\", \"$7\", \"$8\"] /* $6 */ \"This is the first comment\" /* $7 */ \"This is the second comment\" /* $8 */ \"This is the third comment\" Now, from the client’s perspective, the entire tree would be complete: { header: \"Welcome to my blog\", post: { content: \"This is my article\", comments: [ \"This is the first comment\", \"This is the second comment\", \"This is the third comment\" ] }, footer: \"Hope you like it\" } By sending data breadth-first in chunks, we gained the ability to progressively handle it on the client. As long as the client can deal with some parts being “not ready” (represented as Promises) and process the rest, this is an improvement! Inlining Now that we have the basic mechanism, we’ll adjust it for more efficient output. Let’s have another look at the entire streaming sequence from the last example: { header: \"$1\", post: \"$2\", footer: \"$3\" } /* $1 */ \"Welcome to my blog\" /* $3 */ \"Hope you like it\" /* $2 */ { content: \"$4\", comments: \"$5\" } /* $4 */ \"This is my article\" /* $5 */ [\"$6\", \"$7\", \"$8\"] /* $6 */ \"This is the first comment\" /* $7 */ \"This is the second comment\" /* $8 */ \"This is the third comment\" We may have gone a little too far with streaming here. Unless generating some parts actually is slow, we don’t gain anything from sending them as separate rows. Suppose that we have two different slow operations: loading a post and loading a post’s comments. In that case, it would make sense to send three chunks in total. First, we would send the outer shell: { header: \"Welcome to my blog\", post: \"$1\", footer: \"Hope you like it\" } On the client, this would immediately become: { header: \"Welcome to my blog\", post: new Promise(/* ... not yet resolved ... */), footer: \"Hope you like it\" } Then we’d send the post data (but without the comments): { header: \"Welcome to my blog\", post: \"$1\", footer: \"Hope you like it\" } /* $1 */ { content: \"This is my article\", comments: \"$2\" } From the client’s perspective: { header: \"Welcome to my blog\", post: { content: \"This is my article\", comments: new Promise(/* ... not yet resolved ... */), }, footer: \"Hope you like it\" } Finally, we’d send the comments in a single chunk: { header: \"Welcome to my blog\", post: \"$1\", footer: \"Hope you like it\" } /* $1 */ { content: \"This is my article\", comments: \"$2\" } /* $2 */ [ \"This is the first comment\", \"This is the second comment\", \"This is the third comment\" ] That would give us the whole tree on the client: { header: \"Welcome to my blog\", post: { content: \"This is my article\", comments: [ \"This is the first comment\", \"This is the second comment\", \"This is the third comment\" ] }, footer: \"Hope you like it\" } This is more compact and achieves the same purpose. In general, this format gives us leeway to decide when to send things as a single chunks vs. multiple chunks. As long as the client is resilient to chunks arriving out-of-order, the server can pick different batching and chunking heuristics. Outlining One interesting consequence of this approach is that it also gives us a natural way to reduce repetition in the output stream. If we’re serializing an object we’ve already seen before, we can just outline it as a separate row, and reuse it. For example, suppose we have an object tree like this: const userInfo = { name: 'Dan' }; [ { type: 'header', user: userInfo }, { type: 'sidebar', user: userInfo }, { type: 'footer', user: userInfo } ] If we were to serialize it to plain JSON, we’d end up repeating { name: 'Dan' }: [ { type: 'header', user: { name: 'Dan' } }, { type: 'sidebar', user: { name: 'Dan' } }, { type: 'footer', user: { name: 'Dan' } } ] However, if we’re serving JSON progressively, we could choose to outline it: [ { type: 'header', user: \"$1\" }, { type: 'sidebar', user: \"$1\" }, { type: 'footer', user: \"$1\" } ] /* $1 */ { name: \"Dan\" } We could also pursue a more balanced strategy—for example, to inline objects by default (for compactness) until we see some object being used two or more times, at which point we’ll emit it separately and dedupe the rest of them in the stream. This also means that, unlike with plain JSON, we can support serializing cyclic objects. A cyclic object just has a property that points to its own stream “row”. Streaming Data vs Streaming UI The approach described above is essentially how React Server Components work. Suppose you write a page with React Server Components: function Page() { return ( \u003chtml\u003e \u003cbody\u003e \u003cheader\u003eWelcome to my blog\u003c/header\u003e \u003cPost /\u003e \u003cfooter\u003eHope you like it\u003c/footer\u003e \u003c/body\u003e \u003c/html\u003e ); } async function Post() { const post = await loadPost(); return ( \u003carticle\u003e \u003cp\u003e{post.text}\u003c/p\u003e \u003cComments /\u003e \u003c/article\u003e ); } async function Comments() { const comments = await loadComments(); return \u003cul\u003e{comments.map(c =\u003e \u003cli key={c.id}\u003e{c.text}\u003c/li\u003e)}\u003c/ul\u003e; } React will serve the output of the Page as a progressive JSON stream. On the client, it will be reconstructed as a progressively loaded React tree. Initially, the React tree on the client will appear like this: \u003chtml\u003e \u003cbody\u003e \u003cheader\u003eWelcome to my blog\u003c/header\u003e {new Promise(/* ... not resolved yet */)} \u003cfooter\u003eHope you like it\u003c/footer\u003e \u003c/body\u003e \u003c/html\u003e Then, as loadPost resolves on the server, more will stream in: \u003chtml\u003e \u003cbody\u003e \u003cheader\u003eWelcome to my blog\u003c/header\u003e \u003carticle\u003e \u003cp\u003eThis is my post\u003c/p\u003e {new Promise(/* ... not resolved yet */)} \u003c/article\u003e \u003cfooter\u003eHope you like it\u003c/footer\u003e \u003c/body\u003e \u003c/html\u003e Finally, when loadComments resolves on the server, the client receives the rest: \u003chtml\u003e \u003cbody\u003e \u003cheader\u003eWelcome to my blog\u003c/header\u003e \u003carticle\u003e \u003cp\u003eThis is my post\u003c/p\u003e \u003cul\u003e \u003cli key=\"1\"\u003eThis is the first comment\u003c/li\u003e \u003cli key=\"2\"\u003eThis is the second comment\u003c/li\u003e \u003cli key=\"3\"\u003eThis is the third comment\u003c/li\u003e \u003c/ul\u003e \u003c/article\u003e \u003cfooter\u003eHope you like it\u003c/footer\u003e \u003c/body\u003e \u003c/html\u003e However, here’s the kicker. You don’t actually want the page to jump arbitrarily as the data streams in. For example, maybe you never want to show the page without the post’s content. This is why React doesn’t display “holes” for pending Promises. Instead, it displays the closest declarative loading state, indicated by \u003cSuspense\u003e. In the above example, there are no \u003cSuspense\u003e boundaries in the tree. This means that, although React will receive the data as a stream, it will not actually display a “jumping” page to the user. It will wait for the entire page to be ready. However, you can opt into a progressively revealed loading state by wrapping a part of the UI tree into \u003cSuspense\u003e. This doesn’t change how the data is sent (it’s still as “streaming” as possible), but it changes when React reveals it to the user. For example: import { Suspense } from 'react'; function Page() { return ( \u003chtml\u003e \u003cbody\u003e \u003cheader\u003eWelcome to my blog\u003c/header\u003e \u003cPost /\u003e \u003cfooter\u003eHope you like it\u003c/footer\u003e \u003c/body\u003e \u003c/html\u003e ); } async function Post() { const post = await loadPost(); return ( \u003carticle\u003e \u003cp\u003e{post.text}\u003c/p\u003e \u003cSuspense fallback={\u003cCommentsGlimmer /\u003e}\u003e \u003cComments /\u003e \u003c/Suspense\u003e \u003c/article\u003e ); } async function Comments() { const comments = await loadComments(); return \u003cul\u003e{comments.map(c =\u003e \u003cli key={c.id}\u003e{c.text}\u003c/li\u003e)}\u003c/ul\u003e; } Now the user will perceive the loading sequence in two stages: First, the post “pops in” together with the header, the footer, and a glimmer for comments. The header and the footer never appear on their own. Then, the comments “pop in” on their own. In other words, the stages in which the UI gets revealed are decoupled from how the data arrives. The data is streamed as it becomes available, but we only want to reveal things to the user according to intentionally designed loading states. In a way, you can see those Promises in the React tree acting almost like a throw, while \u003cSuspense\u003e acts almost like a catch. The data arrives as fast as it can in whatever order the server is ready to send it, but React takes care to present the loading sequence gracefully and let the developer control the visual reveal. Note that what I described so far has nothing to do with “SSR” or HTML. I was describing a general mechanism for streaming a UI tree represented as JSON. You can turn that JSON tree into progressively revealed HTML (and React can do that), but the idea is broader than HTML and applies to SPA-like navigations as well. In Conclusion In this post, I’ve sketched out one of the core innovations of RSC. Instead of sending data as a single big chunk, it sends the props for your component tree outside-in. As a result, as soon as there’s an intentional loading state to display, React can do that while the rest of the data for your page is being streamed in. I’d like to challenge more tools to adopt progressive streaming of data. If you have a situation where you can’t start doing something on the client until the server stops doing something, that’s a clear example of where streaming can help. If a single slow thing can slow down everything after it, that’s another warning sign. Like I showed in this post, streaming alone is not enough—you also need a programming model that can take advantage of streaming and gracefully handle incomplete information. React solves that with intentional \u003cSuspense\u003e loading states. If you know systems that solve this differently, I’d love to hear about them!Pay what you likeDiscuss on Bluesky  ·  Watch on YouTube  ·  Edit on GitHub",
  "image": "https://overreacted.io/progressive-json/opengraph-image?5b0b970dfd19bb8c",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003eDo you know about Progressive JPEGs? Here’s a \u003ca target=\"_blank\" href=\"https://www.liquidweb.com/blog/what-is-a-progressive-jpeg/\"\u003enice explanation\u003c/a\u003e of what a Progressive JPEG is. The idea is that instead of loading the image top to bottom, the image instead is fuzzy at first and then progressively becomes more crisp.\u003c/p\u003e\n\u003cp\u003eWhat if we apply the same idea to transferring JSON?\u003c/p\u003e\n\u003cp\u003eSuppose you have a JSON tree with some data:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    content: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    comments: \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026#39;\u003c/span\u003e\u003cspan\u003eFirst comment\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026#39;\u003c/span\u003e\u003cspan\u003eSecond comment\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      // ...\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    ]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eNow imagine you want to transfer it over the wire. Because the format is JSON, you’re not going to have a valid object tree until the last byte loads. You have to wait for the \u003cem\u003eentire\u003c/em\u003e thing to load, then call \u003ccode\u003eJSON.parse\u003c/code\u003e, and then process it.\u003c/p\u003e\n\u003cp\u003eThe client can’t do \u003cem\u003eanything\u003c/em\u003e with JSON until the server sends the \u003cem\u003elast\u003c/em\u003e byte. If a part of the JSON was slow to generate on the server (e.g. loading \u003ccode\u003ecomments\u003c/code\u003e took a slow database trip), \u003cstrong\u003ethe client can’t \u003cem\u003estart any\u003c/em\u003e work until the server \u003cem\u003efinishes all\u003c/em\u003e the work.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eWould you call that good engineering? And yet it’s the status quo—that’s how 99.9999%\u003csup\u003e*\u003c/sup\u003e of apps send and process JSON. Do we dare to improve on that?\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003e* I made it up\u003c/small\u003e\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"streaming-json\"\u003e\u003ca target=\"_self\" href=\"#streaming-json\"\u003eStreaming JSON\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eWe can try to improve this by implementing a \u003cem\u003estreaming\u003c/em\u003e JSON parser. A streaming JSON parser would be able to produce an object tree from an incomplete input:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    content: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    comments: \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026#39;\u003c/span\u003e\u003cspan\u003eFirst comment\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026#39;\u003c/span\u003e\u003cspan\u003eSecond comment\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eIf you ask for the result at this point, a streaming parser would hand you this:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    content: \u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    comments: \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026#39;\u003c/span\u003e\u003cspan\u003eFirst comment\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026#39;\u003c/span\u003e\u003cspan\u003eSecond comment\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      // (The rest of the comments are missing)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    ]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  // (The footer property is missing)\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eHowever, this isn’t too great either.\u003c/p\u003e\n\u003cp\u003eOne downside of this approach is that the objects are kind of malformed. For example, the top-level object was supposed to have three properties (\u003ccode\u003eheader\u003c/code\u003e, \u003ccode\u003epost\u003c/code\u003e, and \u003ccode\u003efooter\u003c/code\u003e), but the \u003ccode\u003efooter\u003c/code\u003e is missing because it hasn’t appeared in the stream yet. The \u003ccode\u003epost\u003c/code\u003e was supposed to have three \u003ccode\u003ecomments\u003c/code\u003e, but you \u003cem\u003ecan’t actually tell\u003c/em\u003e whether more \u003ccode\u003ecomments\u003c/code\u003e are coming or if this was the last one.\u003c/p\u003e\n\u003cp\u003eIn a way, this is inherent to streaming—didn’t we \u003cem\u003ewant\u003c/em\u003e to get incomplete data?—but \u003cstrong\u003ethis makes it very difficult to actually \u003cem\u003euse\u003c/em\u003e this data on the client.\u003c/strong\u003e None of the types “match up” due to missing fields. We don’t know what’s complete and what’s not. That’s why streaming JSON isn’t popular aside from niche use cases. It’s just too hard to actually take advantage of it in the application logic which generally assumes the types are correct, “ready” means “complete”, and so on.\u003c/p\u003e\n\u003cp\u003eIn the analogy with JPEG, this naïve approach to streaming matches the default “top-down” loading mechanism. The picture you see is crisp but you only see the top 10%. So despite the high fidelity, you don’t actually see \u003cem\u003ewhat’s\u003c/em\u003e on the picture.\u003c/p\u003e\n\u003cp\u003eCuriously, this is also how streaming \u003cem\u003eHTML itself\u003c/em\u003e works by default. If you load an HTML page on a slow connection, it will be streamed in the document order:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e class=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ecomments\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u0026lt;\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eFirst comment\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e          \u0026lt;\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eSecond comment\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThis has some upsides—the browser is able to display the page partially—but it has the same issues. The cutoff point is arbitrary and can be visually jarring or even mess up the page layout. It’s unclear if more content is coming. Whatever’s below—like the footer—is cut off, even if it \u003cem\u003ewas\u003c/em\u003e ready on the server and \u003cem\u003ecould\u003c/em\u003e have been sent earlier. When we stream data \u003cem\u003ein order\u003c/em\u003e, \u003cstrong\u003eone slow part delays \u003cem\u003eeverything\u003c/em\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eLet’s repeat that: when we stream things in order they appear, a \u003cem\u003esingle\u003c/em\u003e slow part delays \u003cem\u003eeverything\u003c/em\u003e that comes after it. Can you think of some way to fix this?\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"progressive-json\"\u003e\u003ca target=\"_self\" href=\"#progressive-json\"\u003eProgressive JSON\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThere is another way to approach streaming.\u003c/p\u003e\n\u003cp\u003eSo far we’ve been sending things \u003cem\u003edepth-first\u003c/em\u003e. We start with the top-level object’s properties, we go into that object’s \u003ccode\u003epost\u003c/code\u003e property, then we go into \u003cem\u003ethat\u003c/em\u003e object’s \u003ccode\u003ecomments\u003c/code\u003e property, and so on. If something is slow, everything else gets held up.\u003c/p\u003e\n\u003cp\u003eHowever, we could also send data \u003cem\u003ebreadth-first\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eSuppose we send the top-level object like this:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$2\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$3\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eHere, \u003ccode\u003e\u0026#34;$1\u0026#34;\u003c/code\u003e, \u003ccode\u003e\u0026#34;$2\u0026#34;\u003c/code\u003e, \u003ccode\u003e\u0026#34;$3\u0026#34;\u003c/code\u003e refer to pieces of information that \u003cem\u003ehave not been sent yet\u003c/em\u003e. These are placeholders that can progressively be filled in later in the stream.\u003c/p\u003e\n\u003cp\u003eFor example, suppose the server sends a few more rows of data to the stream:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$2\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$3\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $1 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $3 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eNotice that we’re not obligated to send the rows in any particular order. In the above example, we’ve just sent both \u003ccode\u003e$1\u003c/code\u003e and \u003ccode\u003e$3\u003c/code\u003e—but the \u003ccode\u003e$2\u003c/code\u003e row is still pending!\u003c/p\u003e\n\u003cp\u003eIf the client tried to reconstruct the tree at this point, it could look like this:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e Promise\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/* ... not yet resolved ... */\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eWe’ll represent the parts that haven’t loaded yet as Promises.\u003c/p\u003e\n\u003cp\u003eThen suppose the server could stream in a few more rows:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$2\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$3\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $1 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $3 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $2 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  content: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$4\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  comments: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$5\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $4 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThis would “fill in” some of the missing pieces from the client’s perspective:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    content: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    comments: \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e Promise\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/* ... not yet resolved ... */\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThe Promise for the \u003ccode\u003epost\u003c/code\u003e would now resolve to an object. However, we still don’t know what’s inside the \u003ccode\u003ecomments\u003c/code\u003e, so now \u003cem\u003ethose\u003c/em\u003e are represented as a Promise.\u003c/p\u003e\n\u003cp\u003eFinally, the comments could stream in:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$2\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$3\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $1 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $3 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $2 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  content: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$4\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  comments: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$5\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $4 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $5 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$6\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e$7\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e$8\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $6 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the first comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $7 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the second comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $8 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the third comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eNow, from the client’s perspective, the entire tree would be complete:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    content: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    comments: \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the first comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the second comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the third comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    ]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eBy sending data breadth-first in chunks, we gained the ability to progressively handle it on the client. As long as the client can deal with some parts being “not ready” (represented as Promises) and process the rest, this is an improvement!\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"inlining\"\u003e\u003ca target=\"_self\" href=\"#inlining\"\u003eInlining\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eNow that we have the basic mechanism, we’ll adjust it for more efficient output. Let’s have another look at the entire streaming sequence from the last example:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$2\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$3\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $1 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $3 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $2 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  content: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$4\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  comments: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$5\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $4 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $5 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$6\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e$7\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e$8\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $6 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the first comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $7 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the second comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $8 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the third comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eWe may have gone a \u003cem\u003elittle\u003c/em\u003e too far with streaming here. Unless generating some parts actually \u003cem\u003eis\u003c/em\u003e slow, we don’t gain anything from sending them as separate rows.\u003c/p\u003e\n\u003cp\u003eSuppose that we have two different slow operations: loading a post and loading a post’s comments. In that case, it would make sense to send three chunks in total.\u003c/p\u003e\n\u003cp\u003eFirst, we would send the outer shell:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eOn the client, this would immediately become:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e Promise\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/* ... not yet resolved ... */\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThen we’d send the \u003ccode\u003epost\u003c/code\u003e data (but without the \u003ccode\u003ecomments\u003c/code\u003e):\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $1 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  content: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  comments: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$2\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eFrom the client’s perspective:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    content: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    comments: \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e Promise\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/* ... not yet resolved ... */\u003c/span\u003e\u003cspan\u003e),\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eFinally, we’d send the comments in a single chunk:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e/* $1 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  content: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  comments: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e$2\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $2 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the first comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the second comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e  \u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the third comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThat would give us the whole tree on the client:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  header: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  post: \u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    content: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eThis is my article\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    comments: \u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the first comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the second comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026#34;\u003c/span\u003e\u003cspan\u003eThis is the third comment\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    ]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  footer: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThis is more compact and achieves the same purpose.\u003c/p\u003e\n\u003cp\u003eIn general, this format gives us leeway to decide when to send things as a single chunks vs. multiple chunks. As long as the client is resilient to chunks arriving out-of-order, the server can pick different batching and chunking heuristics.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"outlining\"\u003e\u003ca target=\"_self\" href=\"#outlining\"\u003eOutlining\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eOne interesting consequence of this approach is that it \u003cem\u003ealso\u003c/em\u003e gives us a natural way to reduce repetition in the output stream. If we’re serializing an object we’ve already seen before, we can just outline it as a separate row, and reuse it.\u003c/p\u003e\n\u003cp\u003eFor example, suppose we have an object tree like this:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003econst \u003c/span\u003e\u003cspan\u003euserInfo\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e };\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  {\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e userInfo \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  {\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003esidebar\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e userInfo \u003c/span\u003e\u003cspan\u003e},\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  {\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e userInfo \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eIf we were to serialize it to plain JSON, we’d end up repeating \u003ccode\u003e{ name: \u0026#39;Dan\u0026#39; }\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  {\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003cspan\u003e },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  {\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003esidebar\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003cspan\u003e },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  {\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e name\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eHowever, if we’re serving JSON progressively, we could choose to outline it:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e[\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  {\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  {\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003esidebar\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e },\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  {\u003c/span\u003e\u003cspan\u003e type\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e user\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u0026#34;\u003c/span\u003e\u003cspan\u003e$1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e]\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e/* $1 */\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e{\u003c/span\u003e\u003cspan\u003e name: \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003eDan\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e }\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eWe could also pursue a more balanced strategy—for example, to inline objects by default (for compactness) until we see some object being used two or more times, at which point we’ll emit it separately and dedupe the rest of them in the stream.\u003c/p\u003e\n\u003cp\u003eThis also means that, unlike with plain JSON, we can support serializing cyclic objects. A cyclic object just has a property that points to its own stream “row”.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"streaming-data-vs-streaming-ui\"\u003e\u003ca target=\"_self\" href=\"#streaming-data-vs-streaming-ui\"\u003eStreaming Data vs Streaming UI\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eThe approach described above is essentially how React Server Components work.\u003c/p\u003e\n\u003cp\u003eSuppose you write a page with React Server Components:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e Page\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003ePost\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e Post\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eloadPost\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003eComments\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e Comments\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ecomments\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eloadComments\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e \u0026lt;\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecomments\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ec \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u0026lt;\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e key={\u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e}\u0026gt;{\u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;)}\u0026lt;/\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eReact will serve the output of the \u003ccode\u003ePage\u003c/code\u003e as a progressive JSON stream. On the client, it will be reconstructed as a progressively loaded React tree.\u003c/p\u003e\n\u003cp\u003eInitially, the React tree on the client will appear like this:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    {new\u003c/span\u003e\u003cspan\u003e Promise\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/* ... not resolved yet */\u003c/span\u003e\u003cspan\u003e)}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eThen, as \u003ccode\u003eloadPost\u003c/code\u003e resolves on the server, more will stream in:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThis is my post\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      {new\u003c/span\u003e\u003cspan\u003e Promise\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/* ... not resolved yet */\u003c/span\u003e\u003cspan\u003e)}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eFinally, when \u003ccode\u003eloadComments\u003c/code\u003e resolves on the server, the client receives the rest:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThis is my post\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e key=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThis is the first comment\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e key=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e2\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThis is the second comment\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e key=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e3\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eThis is the third comment\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  \u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eHowever, here’s the kicker.\u003c/p\u003e\n\u003cp\u003eYou don’t actually \u003cem\u003ewant\u003c/em\u003e the page to jump arbitrarily as the data streams in. For example, maybe you never want to show the page \u003cem\u003ewithout\u003c/em\u003e the post’s content.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThis is why React doesn’t display “holes” for pending Promises. Instead, it displays the closest declarative loading state, indicated by \u003ca target=\"_blank\" href=\"https://react.dev/reference/react/Suspense\"\u003e\u003ccode\u003e\u0026lt;Suspense\u0026gt;\u003c/code\u003e\u003c/a\u003e.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn the above example, there are no \u003ccode\u003e\u0026lt;Suspense\u0026gt;\u003c/code\u003e boundaries in the tree. This means that, although React will receive the \u003cem\u003edata\u003c/em\u003e as a stream, it will not actually display a “jumping” page to the user. It will wait for the \u003cem\u003eentire\u003c/em\u003e page to be ready.\u003c/p\u003e\n\u003cp\u003eHowever, you can \u003cem\u003eopt into\u003c/em\u003e a progressively revealed loading state by wrapping a part of the UI tree into \u003ccode\u003e\u0026lt;Suspense\u0026gt;\u003c/code\u003e. This doesn’t change how the data is sent (it’s still as “streaming” as possible), but it changes \u003cem\u003ewhen\u003c/em\u003e React reveals it to the user.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cfigure data-rehype-pretty-code-figure=\"\"\u003e\u003cpre tabindex=\"0\" data-language=\"js\" data-theme=\"Overnight\"\u003e\u003ccode data-language=\"js\" data-theme=\"Overnight\"\u003e\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003cspan\u003e Suspense \u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e from\u003c/span\u003e\u003cspan\u003e \u0026#39;\u003c/span\u003e\u003cspan\u003ereact\u003c/span\u003e\u003cspan\u003e\u0026#39;\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003efunction\u003c/span\u003e\u003cspan\u003e Page\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eWelcome to my blog\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eheader\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003ePost\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eHope you like it\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003efooter\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/\u003c/span\u003e\u003cspan\u003ebody\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e Post\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eloadPost\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003epost\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;\u003c/span\u003e\u003cspan\u003eSuspense\u003c/span\u003e\u003cspan\u003e fallback={\u0026lt;\u003c/span\u003e\u003cspan\u003eCommentsGlimmer\u003c/span\u003e\u003cspan\u003e /\u0026gt;}\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e        \u0026lt;\u003c/span\u003e\u003cspan\u003eComments\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\" data-highlighted-line=\"\"\u003e\u003cspan\u003e      \u0026lt;/\u003c/span\u003e\u003cspan\u003eSuspense\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e    \u0026lt;/\u003c/span\u003e\u003cspan\u003earticle\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  );\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e \u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003easync\u003c/span\u003e\u003cspan\u003e function\u003c/span\u003e\u003cspan\u003e Comments\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  const \u003c/span\u003e\u003cspan\u003ecomments\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await \u003c/span\u003e\u003cspan\u003eloadComments\u003c/span\u003e\u003cspan\u003e();\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e \u0026lt;\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;{\u003c/span\u003e\u003cspan\u003ecomments\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ec \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u0026lt;\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e key={\u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e}\u0026gt;{\u003c/span\u003e\u003cspan\u003ec\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etext\u003c/span\u003e\u003cspan\u003e}\u0026lt;/\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;)}\u0026lt;/\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;;\u003c/span\u003e\u003c/span\u003e\n\u003cspan data-line=\"\"\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/figure\u003e\n\u003cp\u003eNow the user will perceive the loading sequence in two stages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFirst, the post “pops in” together with the header, the footer, and a glimmer for comments. The header and the footer never appear on their own.\u003c/li\u003e\n\u003cli\u003eThen, the comments “pop in” on their own.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eIn other words, the stages in which the UI gets revealed are decoupled from how the data arrives. The data is streamed as it becomes available, but we only want to \u003cem\u003ereveal\u003c/em\u003e things to the user according to intentionally designed loading states.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn a way, you can see those Promises in the React tree acting almost like a \u003ccode\u003ethrow\u003c/code\u003e, while \u003ccode\u003e\u0026lt;Suspense\u0026gt;\u003c/code\u003e acts almost like a \u003ccode\u003ecatch\u003c/code\u003e. The data arrives as fast as it can in whatever order the server is ready to send it, but React takes care to present the loading sequence gracefully and let the developer control the visual reveal.\u003c/p\u003e\n\u003cp\u003eNote that what I described so far has nothing to do with “SSR” or HTML. I was describing a general mechanism for streaming a UI tree represented as JSON. You can \u003cem\u003eturn\u003c/em\u003e that JSON tree into progressively revealed HTML (and \u003ca target=\"_blank\" href=\"https://gal.hagever.com/posts/out-of-order-streaming-from-scratch\"\u003eReact can do that\u003c/a\u003e), but the idea is broader than HTML and applies to SPA-like navigations as well.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"in-conclusion\"\u003e\u003ca target=\"_self\" href=\"#in-conclusion\"\u003eIn Conclusion\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eIn this post, I’ve sketched out one of the core innovations of RSC. Instead of sending data as a single big chunk, it sends the props for your component tree outside-in. As a result, as soon as there’s an intentional loading state to display, React can do that while the rest of the data for your page is being streamed in.\u003c/p\u003e\n\u003cp\u003eI’d like to challenge more tools to adopt progressive streaming of data. If you have a situation where you can’t \u003cem\u003estart\u003c/em\u003e doing something on the client until the server \u003cem\u003estops\u003c/em\u003e doing something, that’s a clear example of where streaming can help. If a \u003cem\u003esingle slow thing\u003c/em\u003e can slow down \u003cem\u003eeverything after it,\u003c/em\u003e that’s another warning sign.\u003c/p\u003e\n\u003cp\u003eLike I showed in this post, streaming \u003cem\u003ealone\u003c/em\u003e is not enough—you also need a programming model that can \u003cem\u003etake advantage\u003c/em\u003e of streaming and gracefully handle incomplete information. React solves that with intentional \u003ccode\u003e\u0026lt;Suspense\u0026gt;\u003c/code\u003e loading states. If you know systems that solve this differently, I’d love to hear about them!\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://ko-fi.com/gaearon\" target=\"_blank\"\u003e\u003cspan\u003e\u003c/span\u003ePay what you like\u003c/a\u003e\u003c/p\u003e\u003chr/\u003e\u003cp\u003e\u003ca target=\"_blank\" href=\"https://bsky.app/search?q=https%3A%2F%2Foverreacted.io%2Fprogressive-json%2F\"\u003eDiscuss on Bluesky\u003c/a\u003e  ·  \u003ca target=\"_blank\" href=\"https://www.youtube.com/watch?v=MaMQLNBZz64\"\u003eWatch on YouTube\u003c/a\u003e  ·  \u003ca target=\"_blank\" href=\"https://github.com/gaearon/overreacted.io/edit/main/public/progressive-json/index.md\"\u003eEdit on GitHub\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "17 min read",
  "publishedTime": null,
  "modifiedTime": null
}
