{
  "id": "2996bd28-94bb-4deb-9757-63e39abc6f3d",
  "title": "Code Analysis for Your Projects With IntelliJ IDEA and Qodana",
  "link": "https://blog.jetbrains.com/idea/2024/10/code-analysis-for-your-projects-with-intellij-idea-and-qodana/",
  "description": "As developers, we spend more time maintaining existing code than we do writing new code. Any tools that can help make this easier can save us a lot of time. In this blog post series, we’ll look at several ways that code analysis in IntelliJ IDEA can help you find and fix problems in your […]",
  "author": "Marit van Dijk",
  "published": "Wed, 16 Oct 2024 11:57:03 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "idea",
    "java",
    "qodana"
  ],
  "byline": "Marit van Dijk",
  "length": 10860,
  "excerpt": "As developers, we spend more time maintaining existing code than we do writing new code. Any tools that can help make this easier can save us a lot of time. In this blog post series, we’ll look at",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "IntelliJ IDEA – the Leading Java and Kotlin IDE, by JetBrains IntelliJ IDEA Java QodanaCode Analysis for Your Projects With IntelliJ IDEA and Qodana As developers, we spend more time maintaining existing code than we do writing new code. Any tools that can help make this easier can save us a lot of time. In this blog post series, we’ll look at several ways that code analysis in IntelliJ IDEA can help you find and fix problems in your code. In the previous post, we looked at how the IDE can help you prevent problems while working with code.  Part 1: Introduction to code analysis in IntelliJ IDEA IntelliJ IDEA can also help you resolve problems throughout your entire project, not only in the file you’re currently working on. Find and fix a specific problem throughout your project To check if a particular problem is present elsewhere in your project, you can run a specific inspection on your whole project or a section of the project. To do so, open the Run Inspection by Name dialog using the shortcut (⌘⌥⇧I on macOS / Alt+\\ on Windows/Linux). Or, find any action in IntelliJ IDEA using Find Action (⌘⇧A on macOS / Ctrl+Shift+A on Windows/Linux) and search for “Run Inspection by Name” in the popup field. Run Inspection by Name In the Enter inspection name dialog that opens, enter the name of the inspection you want to run. For example, you may want to replace all `var`s in your code base with explicit types using the Variable type can be explicit inspection. Or, if you prefer the opposite, you can replace explicit types with `var`s by using the Local variable type can be omitted inspection. Note that you don’t need to know the full or exact name of an inspection, as you can search for it in the popup. There are many inspections available for different languages and frameworks, including Java, Kotlin, and Spring. Enter inspection name Select the scope to run this inspection on, and select either Analyze or Fix all:  If you’re sure you want to apply the suggested fix everywhere in your selected scope, click Fix all.  If you’d like to see what might change first or apply individual fixes, select Analyze. Inspection Scope If you select Analyze, the Problems tool window opens. The tab Inspections on \u003cselected scope\u003e shows the Inspection Results on the left and a description of the inspection on the right. Inspection Results Inspection Results show the files that have problems based on the inspection you ran. Some files might have multiple occurrences of the problem; expand the files to see them all and click the file to open a preview on the right. Here, you have the option to either execute the suggested fix, in this example, Replace ‘var’ with explicit type, or Suppress the warning. Double-click the file to open it in the editor, fix any problems there, and check the results. If you have selected Fix instead of Analyze, you can open the Commit tool window (⌘0 on macOS / Alt+0 on Windows/Linux) to look at the applied changes. Related problems If you’re making changes to your code that lead to problems elsewhere in your code base, IntelliJ IDEA will warn you with an inlay hint, for example if you change the method signature of a method that is called elsewhere. This works for classes and fields as well. Related problems Check for problems when committing new code You can also configure IntelliJ IDEA to analyze your code when you create a commit and which checks should be performed on your commits. To do so, select Show Commit Options from the Commit tool window (⌘0 on macOS) / Alt+0 on Windows/Linux). Show Commit Options If you select Analyze code here, IntelliJ IDEA will run the inspections according to the chosen profile on the changed file(s) in your commit. Analyze code Suppose IntelliJ IDEA finds any code that may need your attention. In that case, a popup will appear in the bottom right corner, with the message Commit contains problems and listing the number and severity of these problems. Click Review code analysis to open the Code Analysis tab in the Problems tool window. Double-click any of the problems to navigate to that problem in the code and use ⌥⏎ (macOS) or Alt+Enter (Windows/Linux) to fix them. Amend your commit to include those fixes (if you haven’t pushed your commit), or create a new commit with your fixes. Commit contains problems Find problems throughout the project You may also want to check for any problems throughout your entire project. Run inspections across your entire project using Code / Inspect Code from the main menu. Alternatively, open the Problems tool window (⌘6 on macOS) / Alt+6 on Windows/Linux), go to the Project Errors tab, and select Inspect Code… there. You can specify the scope to run the inspections on and the profile to use. Use the Project Default profile, or create a custom profile. A custom profile can be used to run a subset of inspections or to include some inspections that are not run as part of the default profile. For example, if you are upgrading from one Java version to the next, you might want to create a profile to run relevant inspections, like the Java / Java language level migration aids.  Java language level migration aids To create a custom profile, go to Settings / Editor / Inspections. Click on the Settings icon, select Duplicate, and change the profile name. Next, select the inspections you want to include in this profile.  If you want to add only a handful of inspections to the profile, start with none by clicking on Reset to Empty to unselect all inspections. Select the inspections you want to include in this profile and click OK. Now, when you run Inspect Code, you can select the newly created profile. Custom Profile Similar to when you run an inspection by name, IntelliJ IDEA will show any potential problems in the Problems tool window in the Inspections on \u003cselected scope\u003e tab. The Inspection Results are grouped into categories, with their severity shown. To group them differently, for example, by severity, open the View Options and select Severity. You can expand the Inspection Results to drill down to a specific result to see what the problem is and how to fix it. Note that project-wide inspections only work on Java projects. Run inspections in CI/CD pipelines with Qodana In addition to running inspections in your IDE, you can inspect your code using Qodana. Using Qodana, you can run IntelliJ IDEA inspections locally and include them in your CI/CD pipelines, which we will discuss later. To try out Qodana, you can enable Qodana locally for your project by going to the Problems tool window (⌘6 on macOS) / Alt+6 on Windows/Linux) and clicking on the button Try Locally. Qodana – Try locally This will add a `qodana.yaml` configuration file to your project and run Qodana inspections on your project as defined in that configuration file. You can see the Inspection Results in the Problems tool window / Server-Side Analysis tab or open them in the browser using the link Open Qodana report in browser. See the results in your browser and add additional inspections to your configuration as needed. Try Qodana You can also run Qodana in your CI/CD pipelines. This allows you to run resource-consuming inspections in your CI/CD pipelines and to enforce quality standards with quality gates in your CI system. It enables you to access inspections that are only available in Qodana, like license audits and security checks, for example, finding hard-coded passwords in your code base. In addition, you can access historical overviews of inspection results and compare the current state of your project with a baseline to see new, unchanged, and resolved problems. Add Qodana to CI/CD pipeline To integrate Qodana with your CI system, have a look at the documentation. Integration guides are available for the most popular CI tools. If you’d like to learn how to integrate Qodana static analysis into your project, we recommend watching this livestream. Qodana now also includes Spring-specific inspections. You can find the full list of inspections for Spring Framework in IntelliJ IDEA under Settings / Editor / Inspections by searching for “Spring” to filter out irrelevant inspections. For more information on inspections for Spring, see this blog post. Overview of inspections You can see the full list of inspections in your IDE. Open Settings (⌘, on macOS) / Ctrl+Alt+S on Windows/Linux), and go to Editor / Intentions. Inspections are grouped by languages and frameworks. Settings – Inspections Each group has a checkbox next to it. A check mark indicates that all inspections in this category have been enabled. A missing check mark or any other mark indicates that all inspections have been disabled, and a minus sign indicates that some of the inspections are enabled and some are disabled, which also means that not all the inspections are enabled by default. You can enable or disable inspections depending on how applicable they are to your project. You can also change the severity of inspections, for example, if you want to make sure to use new language features. Alternatively, you can find more information about available inspections on the Inspectopedia website. Conclusion Running automated checks on your project can help you find and fix problems throughout your entire project. Run checks locally using IntelliJ IDEA and/or Qodana, or add automated checks to your CI/CD pipeline using Qodana. You can use inspections to improve the style and quality of your code, as well as to prevent security issues. In the next part of this series, we will look at some more advanced code analysis features in IntelliJ IDEA. Subscribe to our blog if you don’t want to miss it. Subscribe to IntelliJ IDEA Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/10/ij-social_share_blog_1280x720_en-3.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/idea/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/IntelliJ-IDEA-1.svg\" alt=\"Idea logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eIntelliJ IDEA – the Leading Java and Kotlin IDE, by JetBrains\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/idea/category/idea/\"\u003eIntelliJ IDEA\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/java/\"\u003eJava\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/idea/category/qodana/\"\u003eQodana\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eCode Analysis for Your Projects With IntelliJ IDEA and Qodana\u003c/h2\u003e                    \n                    \n\u003cp\u003eAs developers, we spend more time maintaining existing code than we do writing new code. Any tools that can help make this easier can save us a lot of time.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this blog post series, we’ll look at several ways that code analysis in IntelliJ IDEA can help you find and fix problems in your code. In the previous post, we looked at how the IDE can help you prevent problems while working with code. \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ePart 1: \u003ca href=\"https://blog.jetbrains.com/idea/2024/09/introduction-to-code-analysis-in-intellij-idea/\"\u003eIntroduction to code analysis in IntelliJ IDEA\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIntelliJ IDEA can also help you resolve problems throughout your entire project, not only in the file you’re currently working on.\u003c/p\u003e\n\n\n\n\u003ch2\u003eFind and fix a specific problem throughout your project\u003c/h2\u003e\n\n\n\n\u003cp\u003eTo check if a particular problem is present elsewhere in your project, you can run a specific inspection on your whole project or a section of the project. To do so, open the \u003cem\u003eRun Inspection by Name\u003c/em\u003e dialog using the shortcut (\u003cem\u003e⌘⌥⇧I\u003c/em\u003e on macOS / \u003cem\u003eAlt+\\\u003c/em\u003e on Windows/Linux). Or, find any action in IntelliJ IDEA using \u003cem\u003eFind Action\u003c/em\u003e (\u003cem\u003e⌘⇧A\u003c/em\u003e on macOS / \u003cem\u003eCtrl+Shift+A\u003c/em\u003e\u003cstrong\u003e \u003c/strong\u003eon Windows/Linux) and search for “Run Inspection by Name” in the popup field.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXe37lSLlp20nzuCZdfkZ_APuDLs4yrUP-z7dt_GFDb-6BqdxZ1RTqyeSNY3Bfea6PkgI4sNZqabejeEgrB3KhMi3mwMIio09703jiVh7A51MC8C56yQZrMR9PsXa-BB0VHDo5dkJlrQnmkGj-RuJh5E6tE?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003eRun Inspection by Name\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn the \u003cem\u003eEnter inspection name\u003c/em\u003e dialog that opens, enter the name of the inspection you want to run. For example, you may want to replace all `var`s in your code base with explicit types using the \u003cem\u003eVariable type can be explicit\u003c/em\u003e inspection. Or, if you prefer the opposite, you can replace explicit types with `var`s by using the \u003cem\u003eLocal variable type can be omitted\u003c/em\u003e inspection. Note that you don’t need to know the full or exact name of an inspection, as you can search for it in the popup. There are many inspections available for different languages and frameworks, including Java, Kotlin, and Spring.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfBtyDMJR7oy1hOW7OIDz3iQQpr6rLPz6lPCFl6R9Cd_z5vliiQc7DKIEI-L5x5Jt4nOhwyhqjvoZ6IIGHaeM2xgnrVie7i_4Fcg7J1DpVYqvqrn5zalGG291hofx_wdnrd9U8GIJ7_i7tqobLPaE3KvtOj?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eEnter inspection name\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSelect the scope to run this inspection on, and select either \u003cem\u003eAnalyze\u003c/em\u003e or\u003cem\u003e Fix all\u003c/em\u003e: \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eIf you’re sure you want to apply the suggested fix everywhere in your selected scope, click \u003cem\u003eFix all\u003c/em\u003e. \u003c/li\u003e\n\n\n\n\u003cli\u003eIf you’d like to see what might change first or apply individual fixes, select \u003cem\u003eAnalyze\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcLAHDe198YkRuFZ4hSWPcaGyjEdREalINaVSs6R-qDJwoMk7PdWc8ZMP8YBhKA0Zd-y2cUEFJXXBiPw9k_IlZLZRR70IfsIvhaXGqwZbCmcC21RszX5nKYrPGMkZRjHyAP7OPzscNVMo7pYAoBw_OAmlLh?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eInspection Scope\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf you select \u003cem\u003eAnalyze\u003c/em\u003e, the \u003cem\u003eProblems\u003c/em\u003e tool window opens. The tab \u003cem\u003eInspections on \u0026lt;selected scope\u0026gt;\u003c/em\u003e shows the \u003cem\u003eInspection Results\u003c/em\u003e on the left and a description of the inspection on the right.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfmfv0V34EI0lpweAatnNlR6oP809RsI52dsF3mcppMtcqBA6P8qJij9bXUoIY4WeHFiTpFX6yWdT55JyKmq6wTZ1SPin2IiJetePx_VFVV8XvSWSqqlFC9RcfArj6oNH2Sqid9mJMiUTTy_gEya93NL7E?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eInspection Results\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eInspection Results\u003c/em\u003e show the files that have problems based on the inspection you ran. Some files might have multiple occurrences of the problem; expand the files to see them all and click the file to open a preview on the right. Here, you have the option to either execute the suggested fix, in this example, \u003cem\u003eReplace ‘var’ with explicit type\u003c/em\u003e, or \u003cem\u003eSuppress\u003c/em\u003e the warning. Double-click the file to open it in the editor, fix any problems there, and check the results.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you have selected \u003cem\u003eFix\u003c/em\u003e instead of \u003cem\u003eAnalyze\u003c/em\u003e, you can open the \u003cem\u003eCommit\u003c/em\u003e tool window (\u003cem\u003e⌘0\u003c/em\u003e on macOS / \u003cem\u003eAlt+0\u003c/em\u003e on Windows/Linux) to look at the applied changes.\u003c/p\u003e\n\n\n\n\u003ch2\u003eRelated problems\u003c/h2\u003e\n\n\n\n\u003cp\u003eIf you’re making changes to your code that lead to problems elsewhere in your code base, IntelliJ IDEA will warn you with an \u003ca href=\"https://www.jetbrains.com/help/idea/find-highlight-usages.html#usages_hints\" target=\"_blank\" rel=\"noreferrer noopener\"\u003einlay hint\u003c/a\u003e, for example if you change the method signature of a method that is called elsewhere. This works for classes and fields as well.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfPkpd4HHXy8tg3WfYpERyawrnfWuXNQ42hz_m-CWycdSO0MSjEM8yz-_gtDVOPwfsBiiXgaivvoq4glX6tu6uAZ_oasWDsjIj6Fyh-W5eTtSNAZ-I4eypAxMV-qewkdhrU-419E_P_l_ySUsmZbtmt9-8?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eRelated problems\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eCheck for problems when committing new code\u003c/h2\u003e\n\n\n\n\u003cp\u003eYou can also configure IntelliJ IDEA to analyze your code when you create a commit and which checks should be performed on your commits. To do so, select \u003cem\u003eShow Commit Options\u003c/em\u003e from the \u003cem\u003eCommit\u003c/em\u003e tool window (\u003cem\u003e⌘0\u003c/em\u003e on macOS) / \u003cem\u003eAlt+0\u003c/em\u003e on Windows/Linux).\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXfg_wyi1m_Cjjg5D9FTWCiSjize22Qy4rQ4D2YRKUFKIadgA1JwNgdawYb6nufdm0SM4zvxdMlC8LEDnCwALhk2-f2JaQYvE2p02zTt65lJhDLMByJ5mfitcIhmz7FntNbSgvY3veFYdFClv-GLbdgdFQ2V?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eShow Commit Options\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf you select \u003cem\u003eAnalyze code\u003c/em\u003e here, IntelliJ IDEA will run the inspections according to the chosen profile on the changed file(s) in your commit.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdwIYBESywp4j_csqVre84n6PyJ4E6DXvQFAjqpE26OkVoITJc4CV5i_blUOfNpuMbASxIIq3RztdvMnrAMw4KrSNydvHbkcImbsftopaIqJcdA3q-FxTMRtXozosdb-yepTJ7WNTIBIuJ3ys2RWPLMwHSL?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eAnalyze code\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSuppose IntelliJ IDEA finds any code that may need your attention. In that case, a popup will appear in the bottom right corner, with the message \u003cem\u003eCommit contains problems\u003c/em\u003e and listing the number and severity of these problems. Click \u003cem\u003eReview code analysis\u003c/em\u003e to open the \u003cem\u003eCode Analysis\u003c/em\u003e tab in the \u003cem\u003eProblems\u003c/em\u003e tool window. Double-click any of the problems to navigate to that problem in the code and use \u003cem\u003e⌥⏎\u003c/em\u003e (macOS) or \u003cem\u003eAlt+Enter\u003c/em\u003e (Windows/Linux) to fix them. Amend your commit to include those fixes (if you haven’t pushed your commit), or create a new commit with your fixes.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXc_KRWSmfNDpiW-trhaPag1G_8x1xp5wTUnnjddJTnXQ8VflSDU_8RKAF5SHf5R0kCDMyhjmIcHV5seLNMYWZEZD2AUiysHV3BihcEm5xiuZPF5DZQeWMMj8nUD6NtfN9U7HoeZNSn779a_p0MvTyFxQ04i?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCommit contains problems\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003ch2\u003eFind problems throughout the project\u003c/h2\u003e\n\n\n\n\u003cp\u003eYou may also want to check for any problems throughout your entire project. Run inspections across your entire project using \u003cem\u003eCode / Inspect Code\u003c/em\u003e from the main menu. Alternatively, open the \u003cem\u003eProblems\u003c/em\u003e tool window (\u003cem\u003e⌘6\u003c/em\u003e on macOS) / \u003cem\u003eAlt+6\u003c/em\u003e on Windows/Linux), go to the \u003cem\u003eProject Errors\u003c/em\u003e tab, and select \u003cem\u003eInspect Code…\u003c/em\u003e\u003cstrong\u003e \u003c/strong\u003ethere.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can specify the scope to run the inspections on and the profile to use. Use the \u003cem\u003eProject Default\u003c/em\u003e profile, or \u003ca href=\"https://www.jetbrains.com/help/idea/customizing-profiles.html#create-inspection-profile\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ecreate a custom profile\u003c/a\u003e. A custom profile can be used to run a subset of inspections or to include some inspections that are not run as part of the default profile. For example, if you are upgrading from one Java version to the next, you might want to create a profile to run relevant inspections, like the \u003cem\u003eJava / Java language level migration aids\u003c/em\u003e. \u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXes771lz3bqs0M7C0_ymuQQ3uZ2FnXoM6xMMN4G27OFoTmBW3dnfofYiW2U1PByTjeYKSUPGTpde5WugxHpiC8lhmUsMS3lNws0jZSZI2btdsS-Lw2W3vBMXMqHCBRQJTgMJZ5b3iMEzZATw5hcCnoKn6xA?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eJava language level migration aids\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTo create a custom profile, go to \u003cem\u003eSettings / Editor / Inspections\u003c/em\u003e. Click on the \u003cem\u003eSettings\u003c/em\u003e icon, select \u003cem\u003eDuplicate\u003c/em\u003e, and change the profile name. Next, select the inspections you want to include in this profile. \u003c/p\u003e\n\n\n\n\u003cp\u003eIf you want to add only a handful of inspections to the profile, start with none by clicking on \u003cem\u003eReset to Empty\u003c/em\u003e to unselect all inspections. Select the inspections you want to include in this profile and click \u003cem\u003eOK\u003c/em\u003e. Now, when you run \u003cem\u003eInspect Code\u003c/em\u003e, you can select the newly created profile.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXc8lbviSgslZIB8kgvriMFvYBqQcHWbZq2Eyzex2vMduncbjCVWiPDcFTRzV8x6y93o1TajUrDhpYsEQEX-SCIsUS-ZwBWMFjLIt0Ucp5bAp4fotrJLLo-Vmi1V-aYW4hfyEIYtPRgPNyFi-BAwcBNCNDQ?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eCustom Profile\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eSimilar to when you run an inspection by name, IntelliJ IDEA will show any potential problems in the \u003cem\u003eProblems\u003c/em\u003e tool window in the \u003cem\u003eInspections on \u0026lt;selected scope\u0026gt;\u003c/em\u003e tab. The \u003cem\u003eInspection Results\u003c/em\u003e are grouped into categories, with their severity shown. To group them differently, for example, by severity, open the \u003cem\u003eView Options\u003c/em\u003e and select \u003cem\u003eSeverity\u003c/em\u003e. You can expand the \u003cem\u003eInspection Results\u003c/em\u003e to drill down to a specific result to see what the problem is and how to fix it.\u003c/p\u003e\n\n\n\n\u003cp\u003eNote that project-wide inspections only work on Java projects.\u003c/p\u003e\n\n\n\n\u003ch2\u003eRun inspections in CI/CD pipelines with Qodana\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn addition to running inspections in your IDE, you can inspect your code using \u003ca href=\"https://www.jetbrains.com/qodana/\" target=\"_blank\" rel=\"noopener\"\u003eQodana\u003c/a\u003e. Using Qodana, you can run IntelliJ IDEA inspections locally and include them in your CI/CD pipelines, which we will discuss later.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo try out Qodana, you can enable Qodana locally for your project by going to the \u003cem\u003eProblems\u003c/em\u003e tool window (\u003cem\u003e⌘6\u003c/em\u003e on macOS) / \u003cem\u003eAlt+6\u003c/em\u003e on Windows/Linux) and clicking on the button \u003cem\u003eTry Locally\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXcuBDks5rJ3TK3mSmH58g9-CmcLBSZtj3xPRQU4Wj8GlrXq6WGFtSe02bRWlgRM9__UiGyC9xr6WsakOa2Pa7kiINAaTY_9dafNRutw2gY7gt33Yxv4HT29txCrjPt1D5J0_GYXfEebugyiYFR-TZBjzwbZ?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eQodana – Try locally\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThis will add a `qodana.yaml` configuration file to your project and run Qodana inspections on your project as defined in that configuration file. You can see the \u003cem\u003eInspection Results\u003c/em\u003e in the \u003cem\u003eProblems tool window / Server-Side Analysis\u003c/em\u003e tab or open them in the browser using the link\u003cstrong\u003e \u003c/strong\u003e\u003cem\u003eOpen Qodana report in browser\u003c/em\u003e. See the results in your browser and add additional inspections to your configuration as needed.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXe247_klKjfmblMLYq3mzoEpHwNatV8LSiRjFoRFeH8dWt0UVTNs1D7N1duqjLadh3J5CoP4_wFy4N4iGFeaPy7MeYdWOAzmg6s5HSBmPsakXewSwV0PWR0IE5gZMbrRXlpxKSKJFZuEE3dIt0L_erpxWq4?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eTry Qodana\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can also run Qodana in your CI/CD pipelines. This allows you to run resource-consuming inspections in your CI/CD pipelines and to enforce quality standards with quality gates in your CI system. It enables you to access inspections that are only available in Qodana, like \u003ca href=\"https://blog.jetbrains.com/qodana/2024/06/static-code-analysis-for-spring-run-analysis-fix-critical-errors-hit-the-beach/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003elicense audits\u003c/a\u003e and security checks, for example, \u003ca href=\"https://www.youtube.com/watch?v=Y80rIKoSSSU\" target=\"_blank\" rel=\"noopener\"\u003efinding hard-coded passwords in your code base\u003c/a\u003e. In addition, you can access historical overviews of inspection results and compare the current state of your project with a baseline to see new, unchanged, and resolved problems.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXd8LJmlzH_ZpPL_fz_GQ_eRLzZ0lTWj0rcV_Ve1seTaIEv5AhfMjL72Q0Keu1_tIjZelwVixTfm5sKqgS0etqHN9XCuMnI_wXYIaz1GVDKkmiQkLVcQqgNur_ctgHLhU0AtB-LIwYvC0OUs08h00jSSbUg4?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eAdd Qodana to CI/CD pipeline\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eTo integrate Qodana with your CI system, have a look at the \u003ca href=\"https://www.jetbrains.com/help/qodana/ci.html\" target=\"_blank\" rel=\"noreferrer noopener\"\u003edocumentation\u003c/a\u003e. Integration guides are available for the most popular CI tools. If you’d like to learn how to integrate Qodana static analysis into your project, we recommend watching \u003ca href=\"https://www.youtube.com/watch?v=h6fZeocZHlI\" target=\"_blank\" rel=\"noreferrer noopener\"\u003ethis livestream\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eQodana now also includes Spring-specific inspections. You can find the full list of inspections for Spring Framework in IntelliJ IDEA under \u003cem\u003eSettings / Editor / Inspections\u003c/em\u003e by searching for “Spring” to filter out irrelevant inspections. For more information on inspections for Spring, see \u003ca href=\"https://blog.jetbrains.com/qodana/2024/06/static-code-analysis-for-spring-run-analysis-fix-critical-errors-hit-the-beach/\"\u003ethis blog post\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003eOverview of inspections\u003c/h2\u003e\n\n\n\n\u003cp\u003eYou can see the full list of inspections in your IDE. Open \u003cem\u003eSettings\u003c/em\u003e (\u003cem\u003e⌘,\u003c/em\u003e on macOS) / \u003cem\u003eCtrl+Alt+S\u003c/em\u003e on Windows/Linux), and go to \u003cem\u003eEditor / Intentions\u003c/em\u003e. Inspections are grouped by languages and frameworks.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://lh7-rt.googleusercontent.com/docsz/AD_4nXdrq9D7HcC80Iigbb52CefG-iQaMOpQyMateS6mATS70zOrizUMGfjQhEaD0vA94sjVjk0gPNSuvT-Lnv_7q5LXMsWOxLgPufgDOjOBsZhsR-C3QKr98GPNMxrDc_4y2vM8LUTkYq3caF3M8Vif-5MkvQo?key=cUR2x81PxmQkmyvGShjdWg\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cem\u003eSettings – Inspections\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eEach group has a checkbox next to it. A check mark indicates that all inspections in this category have been enabled. A missing check mark or any other mark indicates that all inspections have been disabled, and a minus sign indicates that some of the inspections are enabled and some are disabled, which also means that not all the inspections are enabled by default. You can enable or disable inspections depending on how applicable they are to your project. You can also change the severity of inspections, for example, if you want to make sure to use new language features.\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003eAlternatively, you can find more information about available inspections on the \u003ca href=\"https://www.jetbrains.com/pages/inspectopedia-by-jetbrains/\" target=\"_blank\" rel=\"noreferrer noopener\"\u003eInspectopedia website\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\n\n\u003cp\u003eRunning automated checks on your project can help you find and fix problems throughout your entire project. Run checks locally using IntelliJ IDEA and/or Qodana, or add automated checks to your CI/CD pipeline using Qodana. You can use inspections to improve the style and quality of your code, as well as to prevent security issues.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the next part of this series, we will look at some more advanced code analysis features in IntelliJ IDEA. Subscribe to our \u003ca href=\"https://lp.jetbrains.com/intellij-idea-communication-center/\" target=\"_blank\" rel=\"noopener\"\u003eblog\u003c/a\u003e if you don’t want to miss it.\u003c/p\u003e\n                    \n                                                                \n                                                                                                                                \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to IntelliJ IDEA Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": null,
  "modifiedTime": null
}
