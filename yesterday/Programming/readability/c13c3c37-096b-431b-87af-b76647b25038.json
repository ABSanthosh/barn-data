{
  "id": "c13c3c37-096b-431b-87af-b76647b25038",
  "title": "Ktor 3.2.0 Is Now Available",
  "link": "https://blog.jetbrains.com/kotlin/2025/06/ktor-3-2-0-is-now-available/",
  "description": "Ktor 3.2.0 is here! This is the second minor release of the year, bringing exciting new features, performance improvements, and bug fixes. This release includes two new modules for dependency injection and HTMX, support for Gradle version catalogs, automatic configuration deserialization, Unix domain socket support for CIO, and much more. Check out the full changelog [‚Ä¶]",
  "author": "Alina Dolgikh",
  "published": "Thu, 19 Jun 2025 15:19:23 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "ktor",
    "news",
    "releases",
    "release"
  ],
  "byline": "Simon Vergauwen",
  "length": 7335,
  "excerpt": "Ktor 3.2.0 is here! This release brings exciting new features, performance improvements, and bug fixes.",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "A concise multiplatform language developed by JetBrains Ktor News ReleasesKtor 3.2.0 Is Now Available Ktor 3.2.0 is here! This is the second minor release of the year, bringing exciting new features, performance improvements, and bug fixes. This release includes two new modules for dependency injection and HTMX, support for Gradle version catalogs, automatic configuration deserialization, Unix domain socket support for CIO, and much more. Check out the full changelog here. üöÄ Get started with Ktor 3.2.0 Ready to explore Ktor 3.2.0? Start building your next project today with our interactive project generator at start.ktor.io. Your feedback and contributions are always welcome!üì¢ Join the Community on Reddit and Slack Typed configuration Ktor now automatically deserializes configuration files into data classes, in addition to primitive types. Let‚Äôs create a simple application.yaml that defines some database configuration.¬ß database: jdbcUrl: \"$DB_JDBC_URL:jdbc:postgresql://localhost/ktor_database\" username: \"$DB_USERNAME:ktor_user\" password: \"$DB_PASSWORD:ktor_password\" Note: In Ktor, YAML can reference environment variables with $ENV_VAR or ‚Äú$ENV_VAR:default_value‚Äù syntax, and even ${ENV_VAR} like in HOCON. In order to deserialize structure data, we need to define it first ‚Äì so we define a data class that matches our application.yaml. Once we‚Äôve defined it, we can use it to load our configuration in a typed manner in our modules. @Serializable data class DatabaseConfig( val jdbcUrl: String, val username: String, val password: String, ) fun Application.module() { property\u003cDatabaseConfig\u003e(\"database\") } Dependency injection The 3.2.0 release features a brand new module! Dependency injection (DI) is a crucial feature for many teams, and it was highly requested by the community. This module is completely optional, but when enabled, it allows Ktor to offer additional functionality out of the box for DI users. Ktor DI is built on top of coroutines, just like Ktor itself, which is really powerful since it easily allows for the concurrent initialization of your application. It automatically closes AutoCloseable instances or allows to configure your own cleanup handlers. When the server receives a stop command, the HikariDataSource will close automatically, and then the custom cleanup handler for Database will be executed. fun Application.database(@Property(\"database\") config: DatabaseConfig) { dependencies { provide(\"optional-name\") { HikariDataSource(...) } provide { Database.connect(resolve\u003cHikariDataSource\u003e(\"optional-name\")) } cleanup { database: Database -\u003e TransactionManager.closeAndUnregister(database) } } } Ktor DI also allows for easy integration with existing DI frameworks, and Koin 4.1 has an experimental module that already integrates with Ktor 3.2.0-EAP, offering seamless interoperability between Ktor DI and Koin. More details can be found on the Koin website. Suspend modules Along with these new features, Ktor now also supports suspend, or asynchronous, modules. These make it possible to await dependencies that require suspension for their initialization. They also make it easy to parallelize large, complex dependency graphs. suspend fun Application.module() { val database: Database = dependencies.resolve() ... } Unix domain socket support for CIO The CIO client and server engine now support Unix domain sockets! This support provides more efficient bidirectional communication between processes on the same system, allowing them to eliminate the networking overhead completely. To use Unix domain sockets, you need to explicitly configure your embeddedServer to use a unixConnector by specifying the path to the socket. val server = embeddedServer(CIO, configure = { unixConnector(\"/tmp/test-unix-socket-client.sock\") }) { routing { get(\"/\") { call.respondText(\"Hello, Unix socket world!\") } } } To communicate with the Ktor server listening to Unix domain sockets, you also need to connect to the same Unix domain socket file. val response = HttpClient(CIO) { defaultRequest { unixSocket(\"/tmp/test-unix-socket-client.sock\") } }.get(\"/\") HTMX The new HTMX module includes tight integration with kotlinx.html and the Ktor Routing DSL. This allows you to more easily define HTML attributes for HTMX and define routes that¬†automatically include HTMX headers. fun Application.routing() { hx.get(\"/status\") { /* Return HTML content */ } get(\"/status\") { call.respondHtml { head { script { src = \"https://unpkg.com/htmx.org@1.9.12\" } } body { div { attributes.hx { get = \"/status\" trigger = \"load\" } } } } } } Ktor version catalog¬† Version catalogs have quickly become the standard for managing dependencies and their versions in Gradle. They allow us to reference dependencies in a type-safe way from our Gradle scripts and manage dependencies in a single location. Ktor now exports a version catalog, just as it does a Maven BOM. To use Ktor‚Äôs version catalog, you need to import it into your settings.gradle.kts: dependencyResolutionManagement { versionCatalogs { create(\"ktorLibs\") { from(\"io.ktor:ktor-version-catalog:3.2.0\") } } } Once imported, you can reference all Ktor modules in a type-safe way from all your build.gradle.kts configurations. dependencies { implementation(ktorLibs.server.netty) implementation(ktorLibs.server.contentNegotiation) implementation(ktorLibs.serialization.kotlinx.json) } Android R8 regression There is a known regression in the Ktor 3.2.0 release regarding Android R8. For more information about the issue, you can check out this issue on YouTrack. It will be fixed in the 3.2.1 release, and we‚Äôre also working to improve our pipelines and test suites to prevent regression in this area in the future. üöÄ Thank you! Start building your next project at start.ktor.io. Your feedback and contributions are always welcome! üîó Get Started With Ktor | üì¢ Join the Community on Reddit and Slack Subscribe to Kotlin Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/06/KT-social-BlogSocialShare-1280x720-2x-2.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/kotlin/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/Kotlin-5.svg\" alt=\"Kotlin logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eA concise multiplatform language developed by JetBrains\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/kotlin/category/ktor/\"\u003eKtor\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/kotlin/category/news/\"\u003eNews\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/kotlin/category/releases/\"\u003eReleases\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eKtor 3.2.0 Is Now Available\u003c/h2\u003e                    \n                    \n\u003cp\u003eKtor 3.2.0 is here! This is the second minor release of the year, bringing exciting new features, performance improvements, and bug fixes. This release includes two new modules for \u003ca href=\"https://blog.jetbrains.com/kotlin/2024/03/ktor-2024-roadmap-di-update/\"\u003edependency injection\u003c/a\u003e and \u003ca href=\"https://htmx.org/\" target=\"_blank\" rel=\"noopener\"\u003eHTMX\u003c/a\u003e, support for Gradle version catalogs, automatic configuration deserialization, Unix domain socket support for CIO, and much more. Check out the full changelog \u003ca href=\"https://github.com/ktorio/ktor/releases\" target=\"_blank\" rel=\"noopener\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch2\u003eüöÄ Get started with Ktor 3.2.0\u003c/h2\u003e\n\n\n\n\u003cdiv\u003e\u003cp\u003eReady to explore Ktor 3.2.0? Start building your next project today with our interactive project generator at \u003ca href=\"https://kotl.in/ixiien\" target=\"_blank\" rel=\"noopener\"\u003estart.ktor.io\u003c/a\u003e. Your feedback and contributions are always welcome!\u003c/p\u003e\u003cp\u003eüì¢ Join the Community on \u003ca href=\"https://www.reddit.com/r/ktor/\" target=\"_blank\" rel=\"noopener\"\u003eReddit\u003c/a\u003e and \u003ca href=\"https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*1wxglsg*_gcl_au*MTE4MjgxMTg3Mi4xNzM2MjY0ODgy*_ga*MTYyODczMDg5NS4xNzAyMDQyMTMx*_ga_9J976DJZ68*MTczODY3Mjg3Ny4xOTguMS4xNzM4NjczNDI2LjM2LjAuMA..\" target=\"_blank\" rel=\"noopener\"\u003eSlack\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\n\n\n\n\n\n\n\n\u003ch2\u003eTyped configuration\u003c/h2\u003e\n\n\n\n\u003cp\u003eKtor now automatically deserializes configuration files into data classes, in addition to primitive types. Let‚Äôs create a simple \u003cstrong\u003eapplication.yaml\u003c/strong\u003e that defines some database configuration.¬ß\u003c/p\u003e\n\n\n\n\u003cpre\u003edatabase:\n    jdbcUrl: \u0026#34;$DB_JDBC_URL:jdbc:postgresql://localhost/ktor_database\u0026#34;\n    username: \u0026#34;$DB_USERNAME:ktor_user\u0026#34;\n    password: \u0026#34;$DB_PASSWORD:ktor_password\u0026#34;\u003c/pre\u003e\n\n\n\n\u003cblockquote\u003e\n\n\u003ccite\u003eNote: In Ktor, YAML can reference environment variables with $ENV_VAR or ‚Äú$ENV_VAR:default_value‚Äù syntax, and even ${ENV_VAR} like in HOCON.\u003c/cite\u003e\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eIn order to deserialize structure data, we need to define it first ‚Äì so we define a data class that matches our \u003cstrong\u003eapplication.yaml\u003c/strong\u003e. Once we‚Äôve defined it, we can use it to load our configuration in a typed manner in our modules.\u003c/p\u003e\n\n\n\n\u003cpre\u003e@Serializable\ndata class DatabaseConfig(\n    val jdbcUrl: String,\n    val username: String,\n    val password: String,\n)\n\nfun Application.module() {\n    property\u0026lt;DatabaseConfig\u0026gt;(\u0026#34;database\u0026#34;)\n }\u003c/pre\u003e\n\n\n\n\u003ch2\u003eDependency injection\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe 3.2.0 release features a brand new module! Dependency injection (DI) is a crucial feature for many teams, and it was highly requested by the community. This module is completely optional, but when enabled, it allows Ktor to offer additional functionality out of the box for DI users. Ktor DI is built on top of coroutines, just like Ktor itself, which is really powerful since it easily allows for the concurrent initialization of your application.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cbr/\u003eIt automatically closes AutoCloseable instances or allows to configure your own cleanup handlers. When the server receives a stop command, the HikariDataSource will close automatically, and then the custom cleanup handler for \u003cstrong\u003eDatabase\u003c/strong\u003e will be executed.\u003c/p\u003e\n\n\n\n\u003cpre\u003efun Application.database(@Property(\u0026#34;database\u0026#34;) config: DatabaseConfig) {\n    dependencies {\n        provide(\u0026#34;optional-name\u0026#34;) { HikariDataSource(...) }\n        provide {\n            Database.connect(resolve\u0026lt;HikariDataSource\u0026gt;(\u0026#34;optional-name\u0026#34;))\n        } cleanup { database: Database -\u0026gt;\n            TransactionManager.closeAndUnregister(database)\n        }\n    }\n}\u003c/pre\u003e\n\n\n\n\u003cp\u003eKtor DI also allows for easy integration with existing DI frameworks, and Koin 4.1 has an experimental module that already integrates with Ktor 3.2.0-EAP, offering seamless interoperability between Ktor DI and Koin. More details can be found on the \u003ca href=\"https://insert-koin.io/docs/reference/koin-ktor/ktor/#resolve-from-ktor-request-scope-since-41\" target=\"_blank\" rel=\"noopener\"\u003eKoin website\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch3\u003e\u003cstrong\u003eSuspend\u003c/strong\u003e modules\u003c/h3\u003e\n\n\n\n\u003cp\u003eAlong with these new features, Ktor now also supports suspend, or asynchronous, modules. These make it possible to await dependencies that require suspension for their initialization. They also make it easy to parallelize large, complex dependency graphs.\u003c/p\u003e\n\n\n\n\u003cpre\u003esuspend fun Application.module() {\n   val database: Database = dependencies.resolve()\n   ...\n}\u003c/pre\u003e\n\n\n\n\u003ch2\u003eUnix domain socket support for CIO\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe CIO client and server engine now support Unix domain sockets! This support provides more efficient bidirectional communication between processes on the same system, allowing them to eliminate the networking overhead completely.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo use Unix domain sockets, you need to explicitly configure your embeddedServer to use a unixConnector by specifying the path to the socket.\u003c/p\u003e\n\n\n\n\u003cpre\u003eval server = embeddedServer(CIO, configure = {\n    unixConnector(\u0026#34;/tmp/test-unix-socket-client.sock\u0026#34;)\n}) {\n    routing {\n        get(\u0026#34;/\u0026#34;) {\n            call.respondText(\u0026#34;Hello, Unix socket world!\u0026#34;)\n        }\n    }\n}\u003c/pre\u003e\n\n\n\n\u003cp\u003eTo communicate with the Ktor server listening to Unix domain sockets, you also need to connect to the same Unix domain socket file.\u003c/p\u003e\n\n\n\n\u003cpre\u003eval response = HttpClient(CIO) {\n  defaultRequest {\n    unixSocket(\u0026#34;/tmp/test-unix-socket-client.sock\u0026#34;)\n  }\n}.get(\u0026#34;/\u0026#34;)\u003c/pre\u003e\n\n\n\n\u003ch2\u003eHTMX\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe new HTMX module includes tight integration with \u003ca href=\"https://github.com/Kotlin/kotlinx.html\" target=\"_blank\" rel=\"noopener\"\u003ekotlinx.html\u003c/a\u003e and the Ktor Routing DSL. This allows you to more easily define HTML attributes for HTMX and define routes that¬†automatically include HTMX headers.\u003c/p\u003e\n\n\n\n\u003cpre\u003efun Application.routing() {\n  hx.get(\u0026#34;/status\u0026#34;) { /* Return HTML content */ }\n  get(\u0026#34;/status\u0026#34;) {\n    call.respondHtml {\n      head { script { src = \u0026#34;https://unpkg.com/htmx.org@1.9.12\u0026#34; } }\n      body {\n        div {\n          attributes.hx {\n            get = \u0026#34;/status\u0026#34;\n            trigger = \u0026#34;load\u0026#34;\n          }\n        }\n      }\n    }\n  }\n}\u003c/pre\u003e\n\n\n\n\u003ch2\u003eKtor version catalog¬†\u003c/h2\u003e\n\n\n\n\u003cp\u003eVersion catalogs have quickly become the standard for managing dependencies and their versions in Gradle. They allow us to reference dependencies in a type-safe way from our Gradle scripts and manage dependencies in a single location. Ktor now exports a version catalog, just as it does a Maven BOM. To use Ktor‚Äôs version catalog, you need to import it into your settings.gradle.kts:\u003c/p\u003e\n\n\n\n\u003cpre\u003edependencyResolutionManagement {\n    versionCatalogs {\n        create(\u0026#34;ktorLibs\u0026#34;) {\n            from(\u0026#34;io.ktor:ktor-version-catalog:3.2.0\u0026#34;)\n        }\n    }\n}\u003c/pre\u003e\n\n\n\n\u003cp\u003eOnce imported, you can reference all Ktor modules in a type-safe way from all your \u003cstrong\u003ebuild.gradle.kts\u003c/strong\u003e configurations.\u003c/p\u003e\n\n\n\n\u003cpre\u003edependencies {\n    implementation(ktorLibs.server.netty)\n    implementation(ktorLibs.server.contentNegotiation)\n    implementation(ktorLibs.serialization.kotlinx.json)\n}\u003c/pre\u003e\n\n\n\n\u003ch2\u003eAndroid R8 regression\u003c/h2\u003e\n\n\n\n\u003cp\u003eThere is a known regression in the Ktor 3.2.0 release regarding Android R8. For more information about the issue, you can check out this issue on \u003ca href=\"https://youtrack.jetbrains.com/issue/KTOR-8583/Space-characters-in-SimpleName-error-when-executing-R8-mergeExtDex-task-with-3.2.0\" target=\"_blank\" rel=\"noopener\"\u003eYouTrack\u003c/a\u003e. It will be fixed in the 3.2.1 release, and we‚Äôre also working to improve our pipelines and test suites to prevent regression in this area in the future.\u003c/p\u003e\n\n\n\n\u003ch2\u003e\u003cstrong\u003eüöÄ\u003c/strong\u003e\u003cstrong\u003e \u003c/strong\u003eThank you!\u003c/h2\u003e\n\n\n\n\n\n\n\n\u003cp\u003eStart building your next project at \u003ca href=\"https://kotl.in/ixiien\" target=\"_blank\" rel=\"noopener\"\u003estart.ktor.io\u003c/a\u003e. Your feedback and contributions are always welcome!\u003c/p\u003e\n\n\n\n\u003cp\u003eüîó \u003ca href=\"https://ktor.io/docs/welcome.html\" target=\"_blank\" rel=\"noopener\"\u003eGet Started With Ktor\u003c/a\u003e | üì¢ Join the Community on \u003ca href=\"https://www.reddit.com/r/ktor/\" target=\"_blank\" rel=\"noopener\"\u003eReddit\u003c/a\u003e and \u003ca href=\"https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*1wxglsg*_gcl_au*MTE4MjgxMTg3Mi4xNzM2MjY0ODgy*_ga*MTYyODczMDg5NS4xNzAyMDQyMTMx*_ga_9J976DJZ68*MTczODY3Mjg3Ny4xOTguMS4xNzM4NjczNDI2LjM2LjAuMA..\" target=\"_blank\" rel=\"noopener\"\u003eSlack\u003c/a\u003e\u003c/p\u003e\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to Kotlin Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
