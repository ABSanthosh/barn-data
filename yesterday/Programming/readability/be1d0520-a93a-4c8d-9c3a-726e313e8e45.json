{
  "id": "be1d0520-a93a-4c8d-9c3a-726e313e8e45",
  "title": "Does GitHub Copilot improve code quality? Here’s what the data says",
  "link": "https://github.blog/news-insights/research/does-github-copilot-improve-code-quality-heres-what-the-data-says/",
  "description": "Findings in our latest study show that the quality of code written with GitHub Copilot is significantly more functional, readable, reliable, maintainable, and concise. The post Does GitHub Copilot improve code quality? Here’s what the data says appeared first on The GitHub Blog.",
  "author": "Jared Bauer",
  "published": "Mon, 18 Nov 2024 16:00:46 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "News \u0026 insights",
    "Research",
    "code quality",
    "GitHub Copilot"
  ],
  "byline": "Jared Bauer",
  "length": 8156,
  "excerpt": "Findings in our latest study show that the quality of code written with GitHub Copilot is significantly more functional, readable, reliable, maintainable, and concise.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "AI has fundamentally changed software development in the two years since GitHub Copilot was released to the public. In that time, GitHub Copilot has helped developers code up to 55% faster. Prior research also showed that 85% of developers felt more confident in their code and 88% felt more in the flow using GitHub Copilot. But the question remains: is the quality of code written using GitHub Copilot objectively better or worse? To answer this, we conducted a randomized controlled trial to understand how functional, readable, reliable, maintainable, concise, and likely to be approved code authored using GitHub Copilot is. In the study, we recruited 202 developers with at least five years of experience. Half were randomly assigned GitHub Copilot access and the other half were instructed not to use any AI tools. The participants were all asked to complete a coding task writing API endpoints for a web server. We then evaluated the code with unit tests and with an expert review conducted by developers. Our findings overall show that the quality of code authored with GitHub Copilot has increased functionality, improved readability, better quality, and higher approval rates. Here’s a deep dive into what we found: Code written using GitHub Copilot was more functional If code doesn’t work, it’s impossible to say it’s high quality. So, we looked at functionality and measured it by analyzing how many unit tests the code passed. We found that code authored using GitHub Copilot passed significantly more tests (p=0.002). In fact, the developers with GitHub Copilot access had a 56% greater likelihood to pass all 10 unit tests in the study (p=0.04). This means that using GitHub Copilot helps developers write code that is more functional by a wide margin. Developers found code written using GitHub Copilot easier to read The 25 developers who authored code that passed all 10 unit tests from the first phase of the study were randomly assigned to do a blind review of the anonymized submissions, both those written with and without GitHub Copilot. What the reviewers found was that code authored using GitHub Copilot had fewer code readability errors. Our analysis of the developers’ line-by-line code review showed that code written using GitHub Copilot had significantly fewer code errors: developers using GitHub Copilot wrote 18.2 lines of code per code error, but only 16.0 without. That equals 13.6% more lines of code with GitHub Copilot on average without a code error (p=0.002). This can translate into real-time savings, as each of these code errors require action from a developer. For example, without using GitHub Copilot, teams may face up to 13% more comments or suggestions to address, which accumulates over time. Mean # of code errors Mean lines of code Avg lines of code per code error % difference Using GitHub Copilot 4.63 84.3 18.2 13.6% Not using GitHub Copilot 5.35 85.7 16.0 -11.9% Furthermore, the differences developers found weren’t limited to the errors per line of code. They also rated the code authored using GitHub Copilot as more readable, reliable, maintainable, and concise by 1-3% (p=0.003, p=0.01, p=0.041, p=0.002, respectively). While these differences were small, they were statistically significant and do contribute to a better codebase. Dependent Variable Mean difference P-value Readable 3.62% 0.003 Reliable 2.94% 0.01 Maintainable 2.47% 0.041 Concise 4.16% 0.002 Code authored using GitHub Copilot was more likely to be approved Finally, we found that developers were 5% more likely to approve code authored using GitHub Copilot, too (p=0.014). In real-world settings, this means that developers using GitHub Copilot write code that’s ready to be merged sooner, which will speed up the time to fix bugs or deploy new features. The bottom line So, what do these findings say about how GitHub Copilot improves code quality? While the number of commits and lines of code changed was significantly higher for the GitHub Copilot group, the average commit size was slightly smaller. This suggests that GitHub Copilot enabled developers to iterate on the code to improve its quality. Our hypothesis is that because developers spent less time making their code functional, they were able to focus more on refining its quality. This aligns with our previous findings that developers felt more confident using GitHub Copilot. It also demonstrates that with the greater confidence GitHub Copilot gave them, they were likely empowered to iterate without the fear of causing errors in the code. As the first controlled study to examine GitHub Copilot’s impact on code quality, it shows that GitHub Copilot aids in writing high quality code. We hypothesize that other studies might not have found an improvement in code quality with GitHub Copilot, not because of the tool itself, but because developers may have lacked the opportunity or incentive to focus on quality. This data builds on our previous research indicating that GitHub Copilot is a powerful product that helps developers code quicker and increase job satisfaction, as well as empowers teams to move fast and supercharge their creativity and innovation. Here, in the GitHub Customer Research team, we’re constantly conducting new research on the efficacy of our products as we work to be the home of 1 billion developers—so, stay tuned for more insights and developments in the near future. Methodology In the first phase of the study, we recruited 243 developers with at least five years of Python experience. They were randomly assigned to either use GitHub Copilot or not. Each group completed a coding exercise for a web server of fictional restaurant reviews, with 10 unit tests to assess functionality. We received valid submissions from 202 developers: 104 with GitHub Copilot and 98 without. In the second phase, developers were randomly assigned submissions to review using a provided rubric. They were blind to whether the code was authored with GitHub Copilot. Each submission was reviewed by at least 10 different participants, resulting in 1,293 reviews. The developers used the rubric to provide a line-by-line review that focused on identifying code errors. They also provided an overall evaluation of the submission for readability, reliability, maintainability, and conciseness, and if the submission should be approved. For additional questions about the methodology, please reach out to press@github.com How do we define a code error? In this study, we defined code errors as any code that reduces the ability for the code to be easily understood. This did not include functional errors that would prevent the code from operating as intended, but instead errors that represent poor coding practices. These code errors were derived from academic literature on code readability1 and code complexity2. The code errors were used in the rubric provided during the code review. They included: inconsistent naming, unclear identifiers, excessive line length, excessive whitespace, missing documentation, repeated code, excessive branching or loop depth, insufficient separation of functionality, and variable complexity. Acknowledgments: we’d like to thank Lizzie Redford, Ph.D. and Sida Peng, Ph.D. for their support on the study design and statistical analysis of this research. Ready to build high-quality code quickly? Get started with GitHub Copilot \u003e Notes Written by Staff Researcher, GitHub Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more GitHub Universe 2024 Get tickets to the 10th anniversary of our global developer event on AI, DevEx, and security. Get tickets",
  "image": "https://github.blog/wp-content/uploads/2024/11/Header.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eAI has fundamentally changed software development in the two years since \u003ca href=\"https://github.com/features/copilot\"\u003eGitHub Copilot\u003c/a\u003e was released to the public. In that time, GitHub Copilot has \u003ca href=\"https://github.blog/news-insights/research/research-quantifying-github-copilots-impact-on-developer-productivity-and-happiness/\"\u003ehelped developers code up to 55% faster\u003c/a\u003e. \u003ca href=\"https://github.blog/news-insights/research/research-quantifying-github-copilots-impact-on-code-quality/\"\u003ePrior research\u003c/a\u003e also showed that 85% of developers felt more confident in their code and 88% felt more in the flow using GitHub Copilot.\u003c/p\u003e\n\u003cp\u003eBut the question remains: is the quality of code written using GitHub Copilot objectively better or worse?\u003c/p\u003e\n\u003cp\u003eTo answer this, we conducted a randomized controlled trial to understand how \u003cstrong\u003efunctional, readable, reliable, maintainable, concise\u003c/strong\u003e, and \u003cstrong\u003elikely to be approved\u003c/strong\u003e code authored using GitHub Copilot is.\u003c/p\u003e\n\u003cp\u003eIn the study, we recruited 202 developers with at least five years of experience. Half were randomly assigned GitHub Copilot access and the other half were instructed not to use any AI tools. The participants were all asked to complete a coding task writing API endpoints for a web server. We then evaluated the code with unit tests and with an expert review conducted by developers.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOur findings overall show that the quality of code authored with GitHub Copilot has increased functionality, improved readability, better quality, and higher approval rates.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eHere’s a deep dive into what we found:\u003c/p\u003e\n\u003ch2 id=\"code-written-using-github-copilot-was-more-functional\" id=\"code-written-using-github-copilot-was-more-functional\"\u003eCode written using GitHub Copilot was more functional\u003ca href=\"#code-written-using-github-copilot-was-more-functional\" aria-label=\"Code written using GitHub Copilot was more functional\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eIf code doesn’t work, it’s impossible to say it’s high quality. So, we looked at \u003cstrong\u003efunctionality\u003c/strong\u003e and measured it by analyzing how many unit tests the code passed. We found that code authored using GitHub Copilot passed significantly more tests (p=0.002). \u003cstrong\u003eIn fact, the developers with GitHub Copilot access had a 56% greater likelihood to pass all 10 unit tests in the study\u003c/strong\u003e (p=0.04). This means that using GitHub Copilot helps developers write code that is more functional by a wide margin.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/11/1200x630.png?w=1024\u0026amp;resize=1024%2C538\" alt=\"Graph indicating percentage that passed all unit tests using and not using GitHub Copilot.\" width=\"1024\" height=\"538\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/11/1200x630.png?w=1200 1200w, https://github.blog/wp-content/uploads/2024/11/1200x630.png?w=300 300w, https://github.blog/wp-content/uploads/2024/11/1200x630.png?w=768 768w, https://github.blog/wp-content/uploads/2024/11/1200x630.png?w=1024 1024w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"developers-found-code-written-using-github-copilot-easier-to-read\" id=\"developers-found-code-written-using-github-copilot-easier-to-read\"\u003eDevelopers found code written using GitHub Copilot easier to read\u003ca href=\"#developers-found-code-written-using-github-copilot-easier-to-read\" aria-label=\"Developers found code written using GitHub Copilot easier to read\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eThe 25 developers who authored code that passed all 10 unit tests from the first phase of the study were randomly assigned to do a blind review of the anonymized submissions, both those written with and without GitHub Copilot. What the reviewers found was that code authored using GitHub Copilot had fewer code readability errors.\u003c/p\u003e\n\u003cp\u003eOur analysis of the developers’ line-by-line code review showed that code written using GitHub Copilot had significantly fewer code errors: developers using GitHub Copilot wrote 18.2 lines of code per code error, but only 16.0 without. That equals 13.6% more lines of code with GitHub Copilot on average without a code error (p=0.002). This can translate into real-time savings, as each of these code errors require action from a developer. For example, without using GitHub Copilot, teams may face up to 13% more comments or suggestions to address, which accumulates over time.\u003c/p\u003e\n\u003cdiv\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eMean # of code errors\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eMean lines of code\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eAvg lines of code per code error\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003e% difference\u003c/strong\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eUsing GitHub Copilot\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e4.63\u003c/td\u003e\n\u003ctd\u003e84.3\u003c/td\u003e\n\u003ctd\u003e18.2\u003c/td\u003e\n\u003ctd\u003e13.6%\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eNot using GitHub Copilot\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e5.35\u003c/td\u003e\n\u003ctd\u003e85.7\u003c/td\u003e\n\u003ctd\u003e16.0\u003c/td\u003e\n\u003ctd\u003e-11.9%\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/11/1200x630-copy-3.png?w=1024\u0026amp;resize=1024%2C538\" alt=\"Graph indicating the lines of code authored per code error found using and not using GitHub Copilot.\" width=\"1024\" height=\"538\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/11/1200x630-copy-3.png?w=1200 1200w, https://github.blog/wp-content/uploads/2024/11/1200x630-copy-3.png?w=300 300w, https://github.blog/wp-content/uploads/2024/11/1200x630-copy-3.png?w=768 768w, https://github.blog/wp-content/uploads/2024/11/1200x630-copy-3.png?w=1024 1024w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003cp\u003eFurthermore, the differences developers found weren’t limited to the errors per line of code. They also rated the code authored using GitHub Copilot as more \u003cstrong\u003ereadable\u003c/strong\u003e, \u003cstrong\u003ereliable\u003c/strong\u003e, \u003cstrong\u003emaintainable,\u003c/strong\u003e and \u003cstrong\u003econcise by 1-3%\u003c/strong\u003e (p=0.003, p=0.01, p=0.041, p=0.002, respectively). While these differences were small, they were statistically significant and do contribute to a better codebase.\u003c/p\u003e\n\u003cdiv\u003e\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003cstrong\u003eDependent Variable\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eMean difference\u003c/strong\u003e\u003c/th\u003e\n\u003cth\u003e\u003cstrong\u003eP-value\u003c/strong\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eReadable\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e3.62%\u003c/td\u003e\n\u003ctd\u003e0.003\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eReliable\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e2.94%\u003c/td\u003e\n\u003ctd\u003e0.01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eMaintainable\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e2.47%\u003c/td\u003e\n\u003ctd\u003e0.041\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003cstrong\u003eConcise\u003c/strong\u003e\u003c/td\u003e\n\u003ctd\u003e4.16%\u003c/td\u003e\n\u003ctd\u003e0.002\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\u003c/div\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/11/1200x630-copy-2.png?w=1024\u0026amp;resize=1024%2C538\" alt=\"Graph indicating the code submission ratings for readability, reliability, maintainability, and conciseness.\" width=\"1024\" height=\"538\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/11/1200x630-copy-2.png?w=1200 1200w, https://github.blog/wp-content/uploads/2024/11/1200x630-copy-2.png?w=300 300w, https://github.blog/wp-content/uploads/2024/11/1200x630-copy-2.png?w=768 768w, https://github.blog/wp-content/uploads/2024/11/1200x630-copy-2.png?w=1024 1024w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"code-authored-using-github-copilot-was-more-likely-to-be-approved\" id=\"code-authored-using-github-copilot-was-more-likely-to-be-approved\"\u003eCode authored using GitHub Copilot was more likely to be approved\u003ca href=\"#code-authored-using-github-copilot-was-more-likely-to-be-approved\" aria-label=\"Code authored using GitHub Copilot was more likely to be approved\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eFinally, we found that developers were 5% more likely to approve code authored using GitHub Copilot, too (p=0.014). In real-world settings, this means that developers using GitHub Copilot write code that’s ready to be merged sooner, which will speed up the time to fix bugs or deploy new features.\u003c/p\u003e\n\u003cp\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" src=\"https://github.blog/wp-content/uploads/2024/11/1200x630-copy.png?w=1024\u0026amp;resize=1024%2C538\" alt=\"Graph indicating the percent of code submissions approved when authored using and not using GitHub Copilot.\" width=\"1024\" height=\"538\" loading=\"lazy\" srcset=\"https://github.blog/wp-content/uploads/2024/11/1200x630-copy.png?w=1200 1200w, https://github.blog/wp-content/uploads/2024/11/1200x630-copy.png?w=300 300w, https://github.blog/wp-content/uploads/2024/11/1200x630-copy.png?w=768 768w, https://github.blog/wp-content/uploads/2024/11/1200x630-copy.png?w=1024 1024w\" sizes=\"(max-width: 1000px) 100vw, 1000px\"/\u003e\u003c/p\u003e\n\u003ch2 id=\"the-bottom-line\" id=\"the-bottom-line\"\u003eThe bottom line\u003ca href=\"#the-bottom-line\" aria-label=\"The bottom line\"\u003e\u003c/a\u003e\u003c/h2\u003e\n\u003cp\u003eSo, what do these findings say about how GitHub Copilot improves code quality? While the number of commits and lines of code changed was significantly higher for the GitHub Copilot group, the average commit size was slightly smaller. This suggests that GitHub Copilot enabled developers to iterate on the code to improve its quality. Our hypothesis is that because developers spent less time making their code functional, they were able to focus more on refining its quality. This aligns with our previous findings that developers felt more confident using GitHub Copilot. It also demonstrates that with the greater confidence GitHub Copilot gave them, they were likely empowered to iterate without the fear of causing errors in the code.\u003c/p\u003e\n\u003cp\u003eAs the first controlled study to examine GitHub Copilot’s impact on code quality, it shows that GitHub Copilot aids in writing high quality code. We hypothesize that other studies might not have found an improvement in code quality with GitHub Copilot, not because of the tool itself, but because developers may have lacked the opportunity or incentive to focus on quality. This data builds on our previous research indicating that GitHub Copilot is a powerful product that helps developers code quicker and increase job satisfaction, as well as empowers teams to move fast and supercharge their creativity and innovation.\u003c/p\u003e\n\u003cp\u003eHere, in the GitHub Customer Research team, we’re constantly conducting new research on the efficacy of our products as we work to be the home of 1 billion developers—so, stay tuned for more insights and developments in the near future.\u003c/p\u003e\n\u003chr/\u003e\n\u003ch3 id=\"methodology\" id=\"methodology\"\u003eMethodology\u003ca href=\"#methodology\" aria-label=\"Methodology\"\u003e\u003c/a\u003e\u003c/h3\u003e\n\u003cp\u003eIn the first phase of the study, we recruited 243 developers with at least five years of Python experience. They were randomly assigned to either use GitHub Copilot or not. Each group completed a coding exercise for a web server of fictional restaurant reviews, with 10 unit tests to assess functionality. We received valid submissions from 202 developers: 104 with GitHub Copilot and 98 without.\u003c/p\u003e\n\u003cp\u003eIn the second phase, developers were randomly assigned submissions to review using a provided rubric. They were blind to whether the code was authored with GitHub Copilot. Each submission was reviewed by at least 10 different participants, resulting in 1,293 reviews. The developers used the rubric to provide a line-by-line review that focused on identifying code errors. They also provided an overall evaluation of the submission for \u003cstrong\u003ereadability, reliability, maintainability, and conciseness,\u003c/strong\u003e and if the submission should be \u003cstrong\u003eapproved.\u003c/strong\u003e For additional questions about the methodology, please reach out to \u003ca href=\"mailto:press@github.com\"\u003epress@github.com\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"how-do-we-define-a-code-error\" id=\"how-do-we-define-a-code-error\"\u003eHow do we define a code error?\u003ca href=\"#how-do-we-define-a-code-error\" aria-label=\"How do we define a code error?\"\u003e\u003c/a\u003e\u003c/h4\u003e\n\u003cp\u003eIn this study, we defined code errors as any code that reduces the ability for the code to be easily understood. This did not include functional errors that would prevent the code from operating as intended, but instead errors that represent poor coding practices. These code errors were derived from academic literature on code readability\u003csup id=\"fnref-81151-1\"\u003e\u003ca href=\"#fn-81151-1\" title=\"Read footnote.\"\u003e1\u003c/a\u003e\u003c/sup\u003e and code complexity\u003csup id=\"fnref-81151-2\"\u003e\u003ca href=\"#fn-81151-2\" title=\"Read footnote.\"\u003e2\u003c/a\u003e\u003c/sup\u003e. The code errors were used in the rubric provided during the code review. They included: inconsistent naming, unclear identifiers, excessive line length, excessive whitespace, missing documentation, repeated code, excessive branching or loop depth, insufficient separation of functionality, and variable complexity.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eAcknowledgments:\u003c/strong\u003e we’d like to thank Lizzie Redford, Ph.D. and \u003ca href=\"https://www.microsoft.com/en-us/research/people/sidpeng/\"\u003eSida Peng, Ph.D.\u003c/a\u003e for their support on the study design and statistical analysis of this research.\u003c/em\u003e\u003c/p\u003e\n\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eReady to build high-quality code quickly?\u003c/strong\u003e\u003cbr/\u003e\n\u003ca href=\"https://github.com/features/copilot\"\u003eGet started with GitHub Copilot \u0026gt;\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"notes\" id=\"notes\"\u003eNotes\u003ca href=\"#notes\" aria-label=\"Notes\"\u003e\u003c/a\u003e\u003c/h4\u003e\n\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/5274164?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/5274164?v=4\u0026amp;s=200\" alt=\"Jared Bauer\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eStaff Researcher, GitHub\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.blog/developer-skills/github/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\"\u003e\u003cpath fill=\"currentColor\" d=\"M7.28033 3.21967C6.98744 2.92678 6.51256 2.92678 6.21967 3.21967C5.92678 3.51256 5.92678 3.98744 6.21967 4.28033L7.28033 3.21967ZM11 8L11.5303 8.53033C11.8232 8.23744 11.8232 7.76256 11.5303 7.46967L11 8ZM6.21967 11.7197C5.92678 12.0126 5.92678 12.4874 6.21967 12.7803C6.51256 13.0732 6.98744 13.0732 7.28033 12.7803L6.21967 11.7197ZM6.21967 4.28033L10.4697 8.53033L11.5303 7.46967L7.28033 3.21967L6.21967 4.28033ZM10.4697 7.46967L6.21967 11.7197L7.28033 12.7803L11.5303 8.53033L10.4697 7.46967Z\"\u003e\u003c/path\u003e\u003cpath stroke=\"currentColor\" d=\"M1.75 8H11\" stroke-width=\"1.5\" stroke-linecap=\"round\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/04/Icon.svg\" width=\"44\" height=\"44\" alt=\"GitHub Universe 2024\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub Universe 2024\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eGet tickets to the 10th anniversary of our global developer event on AI, DevEx, and security.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get tickets; ref_location:bottom recirculation;\" href=\"https://githubuniverse.com/?utm_source=Blog\u0026amp;utm_medium=GitHub\u0026amp;utm_campaign=blog-module\" target=\"_blank\" aria-label=\"Get tickets\"\u003e\n\t\t\t\t\tGet tickets\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2024-11-18T16:00:46Z",
  "modifiedTime": "2024-11-18T16:30:44Z"
}
