{
  "id": "fb505134-d9de-407e-967c-d5758fc227e7",
  "title": "Reduce the load on GitLab Gitaly with bundle URI",
  "link": "https://about.gitlab.com/blog/reduce-the-load-on-gitlab-gitaly-with-bundle-uri/",
  "description": "",
  "author": "Olivier Campeau",
  "published": "2025-06-24T00:00:00.000Z",
  "source": "https://about.gitlab.com/atom.xml",
  "categories": null,
  "byline": "Olivier Campeau",
  "length": 10664,
  "excerpt": "Discover what the bundle URI Git feature is, how it is integrated into Gitaly, configuration best practices, and how GitLab users can benefit from it.",
  "siteName": "GitLab",
  "favicon": "https://about.gitlab.com/images/ico/favicon-192x192.png",
  "text": "Gitaly plays a vital role in the GitLab ecosystem — it is the server component that handles all Git operations. Every push and pull made to/from a repository is handled by Gitaly, which has direct access to the disk where the actual repositories are stored. As a result, when Gitaly is under heavy load, some operations like CI/CD pipelines and browsing a repository in the GitLab UI can become quite slow. This is particularly true when serving clones and fetches for large and busy monorepos, which can consume large amounts of CPU and memory. Bundle URI takes significant load off of Gitaly servers during clones by allowing Git to pre-download a bundled repository from object storage before calling the Gitaly servers to fetch the remaining objects. Here is a graph that shows the difference between clones without and with bundle URI. This graph shows the results of a small test we ran on an isolated GitLab installation, with Gitaly running on a machine with 2 CPUs. We wanted to test bundle URI with a large repository, so we pushed the GitLab repository to the instance. We also generated a bundle beforehand. The big CPU spike is from when we performed a single clone of the GitLab repository with bundle URI disabled. It's quite noticeable. A little later, we turned on bundle URI and launched three concurrent clones of the GitLab repository. Sure enough, turning on bundle URI provides massive performance gain. We can't even distinguish the CPU usage of the three clones from normal usage. Configure Gitaly to use bundle URI To enable bundle URI on your GitLab installation, there are a couple of things you need to configure. Create a cloud bucket Bundles need to be stored somewhere. The ideal place is in a cloud storage bucket. Gitaly uses the gocloud.dev library to read and write from cloud storage. Any cloud storage solution supported by this library can be used. Once you have a cloud bucket URL, you can add it in the Gitaly configuration here: [bundle_uri] go_cloud_url = \"\u003cbucket-uri\u003e\" It must be noted that Gitaly does not manage the lifecycle of the bundles stored in the bucket. To avoid cost issues, object lifecycle policies must be enabled on the bucket in order to delete unused or old objects. Enable the feature flags There are two feature flags to enable: gitaly_bundle_generation enables auto-generation of bundles. gitaly_bundle_uri makes Gitaly advertise bundle URIs when they are available (either manually created or auto-generated) and allows the user to manually generate bundles. These feature flags can be enabled at-large on a GitLab installation, or per repository. See the documentation on how to enable a GitLab feature behind a feature flag. How to generate bundles Gitaly offers two ways for users to use bundle URI: a manual way and an auto-generated way. Manual It is possible to create a bundle manually by connecting over SSH with the Gitaly node that stores the repository you want to create a bundle for, and run the following command: sudo -u git -- /opt/gitlab/embedded/bin/gitaly bundle-uri --config=\u003cconfig-file\u003e --storage=\u003cstorage-name\u003e --repository=\u003crelative-path\u003e This command will create a bundle for the given repository and store it into the bucket configured above. When a subsequent git clone request will reach Gitaly for the same repository, the bundle URI mechanism described above will come into play. Auto-generated Gitaly can also generate bundles automatically, using a heuristic to determine if it is currently handling frequent clones for the same repository. The current heuristic keeps track of the number of times a git fetch request is issued for each repository. If the number of requests reaches a certain threshold in a given time interval, a bundle is automatically generated. Gitaly also keeps track of the last time it generated a bundle for a repository. When a new bundle should be regenerated, based on the threshold and interval, Gitaly looks at the last time a bundle was generated for the given repository. It will only generate a new bundle if the existing bundle is older than some maxBundleAge configuration. The old bundle is overwritten. There can only be one bundle per repository in cloud storage. Using bundle URI When a bundle exists for a repository, it can be used by the git clone command. Cloning from your terminal To clone a repository from your terminal, make sure your Git configuration enables bundle URI. The configuration can be set like so: git config --global transfer.bundleuri true To verify that bundle URI is used during a clone, you can run the git clone command with GIT_TRACE=1 and see if your bundle is being downloaded: ➜ GIT_TRACE=1 git clone https://gitlab.com/gitlab-org/gitaly ... 14:31:42.374912 run-command.c:667 trace: run_command: git-remote-https '\u003cbundle-uri\u003e' ... Cloning during CI/CD pipelines One scenario where using bundle URI would be beneficial is during a CI/CD pipeline, where each job needs a copy of the repository in order to run. Cloning a repository during a CI/CD pipeline is the same as cloning a repository from your terminal, except that the Git client in this case is the GitLab Runner. Thus, we need to configure the GitLab Runner in such a way that it can use bundle URI. 1. Update the helper-image The first thing to do to configure the GitLab Runner is to overwrite the helper-image that your GitLab Runner instances use. The helper-image is the image that is used to run the process of cloning a repository before the job starts. To use bundle URI, the image needs the following: Git Version 2.49.0 or later GitLab Runner helper Version 18.1.0 or later The helper-images can be found here. Select an image that corresponds to the OS distribution and the architecture you use for your GitLab Runner instances, and verify that the image satisfies the requirements. At the time of writing, the alpine-edge-\u003carch\u003e-v18.1.0* tag meets all requirements. You can validate the image meets all requirements with: docker run -it \u003cimage:tag\u003e $ git version ## must be 2.49.0 or newer $ gitlab-runner-helper -v ## must be 18.0 or newer If you do not find an image that meets the requirements, you can also use the helper-image as a base image and install the requirements yourself in a custom-built image that you can host on GitLab Container Registry. Once you have found the image you need, you must configure your GitLab Runner instances to use it by updating your config.toml file: [[runners]] (...) executor = \"docker\" [runners.docker] (...) helper_image = \"image:tag\" ## \u003c-- put the image name and tag here Once the configuration is changed, you must restart the runners for the new configuration to take effect. 2. Turn on the feature flag Next, you must enable the FF_USE_GIT_NATIVE_CLONE GitLab Runner feature flags in your .gitlab-ci.yml file. To do that, simply add it as a variable and set to true : variables: FF_USE_GIT_NATIVE_CLONE: \"true\" The GIT_STRATEGY must also be set to clone, as Git bundle URI only works with clone commands. How bundle URI works When a user clones a repository with the git clone command, a process called git-receive-pack is launched on the client's machine. This process communicates with the remote repository's server (it can be over HTTP/S, SSH, etc.) and asks to start a git-upload-pack process. Those two processes then exchange information using the Git protocol (it must be noted that bundle URI is only supported with Git protocol v2). The capabilities both processes support and the references and objects the client needs are among the information exchanged. Once the Git server has determined which objects to send to the client, it must package them into a packfile, which, depending on the size of the data it must process, can consume a good amount of resources. Where does bundle URI fit into this interaction? If bundle URI is advertised as a capability from the upload-pack process and the client supports bundle URI, the Git client will ask the server if it knows about any bundle URIs. The server sends those URIs back and the client downloads those bundles. Here is a diagram that shows those interactions: sequenceDiagram participant receive as Client participant upload as Server participant cloud as File server receive -\u003e\u003e upload: issue git-upload-pack upload --\u003e\u003e receive: list of server capabilities opt if bundle URI is advertised as a capability receive -\u003e\u003e upload: request bundle URI upload --\u003e\u003e receive: bundle URI receive -\u003e\u003e cloud: download bundle at URI cloud --\u003e\u003e receive: bundle file receive -\u003e\u003e receive: clone from bundle end receive -\u003e\u003e upload: requests missing references and objects upload --\u003e\u003e receive: packfile data As such, Git bundle URI is a mechanism by which, during a git clone, a Git server can advertise the URI of a bundle for the repository being cloned by the Git client. When that is the case, the Git client can clone the repository from the bundle and request from the Git server only the missing references or objects that were not part of the bundle. This mechanism really helps to alleviate pressure from the Git server. Alternatives GitLab also has a feature Pack-objects cache. This feature works slightly differently than bundle URI. When the server packs objects together into a so-called packfile, this feature will keep that file in the cache. When another client needs the same set of objects, it doesn't need to repack them, but it can just send the same packfile again. The feature is only beneficial when many clients request the exact same set of objects. In a repository that is quick-changing, this feature might not give any improvements. With bundle URI, it doesn't matter if the bundle is slightly out-of-date because the client can request missing objects after downloading the bundle and apply those changes on top. Also bundle URI in Gitaly stores the bundles on external storage, which the Pack-objects Cache stores them on the Gitaly node, so using the latter doesn't reduce network and I/O load on the Gitaly server. Try bundle URI today You can try the bundle URI feature in one of the following ways: Download a free, 60-day trial version of GitLab Ultimate. If you already run a self-hosted GitLab installation, upgrade to 18.1. If you can't upgrade to 18.1 at this time, download GitLab to a local machine.",
  "image": "https://about.gitlab.com/images/open-graph/open-graph-gitlab.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-d90b052d=\"\" data-v-3f3ac235=\"\" data-v-b7392a61=\"\"\u003e\u003cp\u003eGitaly plays a vital role in the GitLab ecosystem — it is the server\ncomponent that handles all Git operations. Every push and pull made to/from\na repository is handled by Gitaly, which has direct access to the disk where\nthe actual repositories are stored. As a result, when Gitaly is under heavy\nload, some operations like CI/CD pipelines and browsing a repository in the\nGitLab UI can become quite slow. This is particularly true when serving\nclones and fetches for large and busy monorepos, which can consume large\namounts of CPU and memory.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.gitlab.com/administration/gitaly/bundle_uris/\"\u003eBundle URI\u003c/a\u003e takes significant load off of Gitaly servers during clones by allowing Git to pre-download a bundled repository from object storage before calling the Gitaly servers to fetch the remaining objects.\u003c/p\u003e\n\u003cp\u003eHere is a graph that shows the difference between clones without and with bundle URI.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/about-gitlab-com/image/upload/v1750705069/rvbm4ru1w58msd6zv4x7.png\" alt=\"Graph that shows the difference between clones without and with bundle URI\"/\u003e\u003c/p\u003e\n\u003cp\u003eThis graph shows the results of a small test we ran on an isolated GitLab installation, with Gitaly running on a machine with 2 CPUs. We wanted to test bundle URI with a large repository, so we pushed the \u003ca href=\"https://gitlab.com/gitlab-org/gitlab\"\u003eGitLab repository\u003c/a\u003e to the instance. We also generated a bundle beforehand.\u003c/p\u003e\n\u003cp\u003eThe big CPU spike is from when we performed a single clone of the GitLab repository with bundle URI disabled. It\u0026#39;s quite noticeable. A little later, we turned on bundle URI and launched three concurrent clones of the GitLab repository. Sure enough, turning on bundle URI provides massive performance gain. We can\u0026#39;t even distinguish the CPU usage of the three clones from normal usage.\u003c/p\u003e\n\u003ch2 id=\"configure-gitaly-to-use-bundle-uri\" tabindex=\"-1\"\u003e\u003ca href=\"#configure-gitaly-to-use-bundle-uri\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Configure Gitaly to use bundle URI\u003c/h2\u003e\n\u003cp\u003eTo enable bundle URI on your GitLab installation, there are a couple of things you need to configure.\u003c/p\u003e\n\u003ch3 id=\"create-a-cloud-bucket\" tabindex=\"-1\"\u003e\u003ca href=\"#create-a-cloud-bucket\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Create a cloud bucket\u003c/h3\u003e\n\u003cp\u003eBundles need to be stored somewhere. The ideal place is in a cloud storage bucket. Gitaly uses the \u003ca href=\"https://pkg.go.dev/gocloud.dev\"\u003egocloud.dev\u003c/a\u003e library to read and write from cloud storage. Any cloud storage solution supported by this library can be used. Once you have a cloud bucket URL, you can add it in the Gitaly configuration here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[bundle_uri]\ngo_cloud_url = \u0026#34;\u0026lt;bucket-uri\u0026gt;\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt must be noted that Gitaly does not manage the lifecycle of the bundles stored in the bucket. To avoid cost issues, object lifecycle policies must be enabled on the bucket in order to delete unused or old objects.\u003c/p\u003e\n\u003ch3 id=\"enable-the-feature-flags\" tabindex=\"-1\"\u003e\u003ca href=\"#enable-the-feature-flags\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Enable the feature flags\u003c/h3\u003e\n\u003cp\u003eThere are two feature flags to enable:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003egitaly_bundle_generation\u003c/code\u003e enables \u003ca href=\"#auto-generated\"\u003eauto-generation\u003c/a\u003e of bundles.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003egitaly_bundle_uri\u003c/code\u003e makes Gitaly advertise bundle URIs when they are available (either manually created or auto-generated) and allows the user to \u003ca href=\"#manual\"\u003emanually\u003c/a\u003e generate bundles.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese feature flags can be enabled at-large on a GitLab installation, or per repository. See the \u003ca href=\"https://docs.gitlab.com/administration/feature_flags/#how-to-enable-and-disable-features-behind-flags\"\u003edocumentation on how to enable a GitLab feature behind a feature flag\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"how-to-generate-bundles\" tabindex=\"-1\"\u003e\u003ca href=\"#how-to-generate-bundles\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e How to generate bundles\u003c/h3\u003e\n\u003cp\u003eGitaly offers two ways for users to use bundle URI: a \u003ca href=\"#manual\"\u003emanual\u003c/a\u003e way and an \u003ca href=\"#auto-generated\"\u003eauto-generated\u003c/a\u003e way.\u003c/p\u003e\n\u003ch4 id=\"manual\" tabindex=\"-1\"\u003e\u003ca href=\"#manual\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Manual\u003c/h4\u003e\n\u003cp\u003eIt is possible to create a bundle manually by connecting over SSH with the Gitaly node that stores the repository you want to create a bundle for, and run the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo -u git -- /opt/gitlab/embedded/bin/gitaly bundle-uri \n--config=\u0026lt;config-file\u0026gt;\n--storage=\u0026lt;storage-name\u0026gt;\n--repository=\u0026lt;relative-path\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis command will create a bundle for the given repository and store it into the bucket configured above. When a subsequent \u003ccode\u003egit clone\u003c/code\u003e request will reach Gitaly for the same repository, the bundle URI mechanism described above will come into play.\u003c/p\u003e\n\u003ch4 id=\"auto-generated\" tabindex=\"-1\"\u003e\u003ca href=\"#auto-generated\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Auto-generated\u003c/h4\u003e\n\u003cp\u003eGitaly can also generate bundles automatically, using a heuristic to determine if it is currently handling frequent clones for the same repository.\u003c/p\u003e\n\u003cp\u003eThe current heuristic keeps track of the number of times a \u003ccode\u003egit fetch\u003c/code\u003e request is issued for each repository. If the number of requests reaches a certain \u003ccode\u003ethreshold\u003c/code\u003e in a given time \u003ccode\u003einterval\u003c/code\u003e, a bundle is automatically generated. Gitaly also keeps track of the last time it generated a bundle for a repository. When a new bundle should be regenerated, based on the \u003ccode\u003ethreshold\u003c/code\u003e and \u003ccode\u003einterval\u003c/code\u003e, Gitaly looks at the last time a bundle was generated for the given repository. It will only generate a new bundle if the existing bundle is older than some \u003ccode\u003emaxBundleAge\u003c/code\u003e configuration. The old bundle is overwritten. There can only be one bundle per repository in cloud storage.\u003c/p\u003e\n\u003ch2 id=\"using-bundle-uri\" tabindex=\"-1\"\u003e\u003ca href=\"#using-bundle-uri\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Using bundle URI\u003c/h2\u003e\n\u003cp\u003eWhen a bundle exists for a repository, it can be used by the \u003ccode\u003egit clone\u003c/code\u003e command.\u003c/p\u003e\n\u003ch3 id=\"cloning-from-your-terminal\" tabindex=\"-1\"\u003e\u003ca href=\"#cloning-from-your-terminal\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Cloning from your terminal\u003c/h3\u003e\n\u003cp\u003eTo clone a repository from your terminal, make sure your Git configuration enables bundle URI. The configuration can be set like so:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit config --global transfer.bundleuri true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo verify that bundle URI is used during a clone, you can run the \u003ccode\u003egit clone\u003c/code\u003e command with \u003ccode\u003eGIT_TRACE=1\u003c/code\u003e and see if your bundle is being downloaded:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e➜  GIT_TRACE=1 git clone https://gitlab.com/gitlab-org/gitaly\n...\n14:31:42.374912 run-command.c:667       trace: run_command: git-remote-https \u0026#39;\u0026lt;bundle-uri\u0026gt;\u0026#39;\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"cloning-during-cicd-pipelines\" tabindex=\"-1\"\u003e\u003ca href=\"#cloning-during-cicd-pipelines\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Cloning during CI/CD pipelines\u003c/h3\u003e\n\u003cp\u003eOne scenario where using bundle URI would be beneficial is during a CI/CD pipeline, where each job needs a copy of the repository in order to run. Cloning a repository during a CI/CD pipeline is the same as cloning a repository from your terminal, except that the Git client in this case is the GitLab Runner. Thus, we need to configure the GitLab Runner in such a way that it can use bundle URI.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e1. Update the helper-image\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe first thing to do to configure the GitLab Runner is to \u003ca href=\"https://docs.gitlab.com/runner/configuration/advanced-configuration/#override-the-helper-image\"\u003eoverwrite the helper-image\u003c/a\u003e that your GitLab Runner instances use. The \u003ccode\u003ehelper-image\u003c/code\u003e is the image that is used to run the process of cloning a repository before the job starts. To use bundle URI, the image needs the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eGit Version 2.49.0 or later\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://gitlab.com/gitlab-org/gitlab-runner/-/tree/main/apps/gitlab-runner-helper?ref_type=heads\"\u003e\u003ccode\u003eGitLab Runner helper\u003c/code\u003e\u003c/a\u003e Version 18.1.0 or later\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe helper-images can be found \u003ca href=\"https://gitlab.com/gitlab-org/gitlab-runner/container_registry/1472754?orderBy=PUBLISHED_AT\u0026amp;sort=desc\u0026amp;search%5B%5D=v18.1.0\"\u003ehere\u003c/a\u003e. Select an image that corresponds to the OS distribution and the architecture you use for your GitLab Runner instances, and verify that the image satisfies the requirements.\u003c/p\u003e\n\u003cp\u003eAt the time of writing, the \u003ccode\u003ealpine-edge-\u0026lt;arch\u0026gt;-v18.1.0*\u003c/code\u003e tag meets all requirements.\u003c/p\u003e\n\u003cp\u003eYou can validate the image meets all requirements with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocker run -it \u0026lt;image:tag\u0026gt;\n$ git version ## must be 2.49.0 or newer\n$ gitlab-runner-helper -v ## must be 18.0 or newer\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you do not find an image that meets the requirements, you can also use the helper-image as a base image and install the requirements yourself in a custom-built image that you can host on \u003ca href=\"https://docs.gitlab.com/user/packages/container_registry/\"\u003eGitLab Container Registry\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOnce you have found the image you need, you must configure your GitLab Runner instances to use it by updating your \u003ccode\u003econfig.toml\u003c/code\u003e file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[[runners]]\n (...)\n executor = \u0026#34;docker\u0026#34;\n [runners.docker]\n    (...)\n    helper_image = \u0026#34;image:tag\u0026#34; ## \u0026lt;-- put the image name and tag here\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce the configuration is changed, you must restart the runners for the new configuration to take effect.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e2. Turn on the feature flag\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eNext, you must enable the \u003ccode\u003eFF_USE_GIT_NATIVE_CLONE\u003c/code\u003e \u003ca href=\"https://docs.gitlab.com/runner/configuration/feature-flags/\"\u003eGitLab Runner feature flags\u003c/a\u003e in your \u003ccode\u003e.gitlab-ci.yml\u003c/code\u003e file. To do that, simply add it as a variable and set to \u003ccode\u003etrue\u003c/code\u003e :\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evariables:\n  FF_USE_GIT_NATIVE_CLONE: \u0026#34;true\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eGIT_STRATEGY\u003c/code\u003e must also be \u003ca href=\"https://docs.gitlab.com/ci/runners/configure_runners/#git-strategy\"\u003eset to \u003ccode\u003eclone\u003c/code\u003e\u003c/a\u003e, as Git bundle URI only works with \u003ccode\u003eclone\u003c/code\u003e commands.\u003c/p\u003e\n\u003ch2 id=\"how-bundle-uri-works\" tabindex=\"-1\"\u003e\u003ca href=\"#how-bundle-uri-works\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e How bundle URI works\u003c/h2\u003e\n\u003cp\u003eWhen a user clones a repository with the \u003ccode\u003egit clone\u003c/code\u003e command, a process called \u003ca href=\"https://git-scm.com/docs/git-receive-pack\"\u003e\u003ccode\u003egit-receive-pack\u003c/code\u003e\u003c/a\u003e is launched on the client\u0026#39;s machine. This process communicates with the remote repository\u0026#39;s server (it can be over HTTP/S, SSH, etc.) and asks to start a \u003ca href=\"https://git-scm.com/docs/git-receive-pack\"\u003e\u003ccode\u003egit-upload-pack\u003c/code\u003e\u003c/a\u003e process. Those two processes then exchange information using the Git protocol (it must be noted that bundle URI is only supported with \u003ca href=\"https://git-scm.com/docs/protocol-v2\"\u003eGit protocol v2\u003c/a\u003e). The capabilities both processes support and the references and objects the client needs are among the information exchanged. Once the Git server has determined which objects to send to the client, it must package them into a packfile, which, depending on the size of the data it must process, can consume a good amount of resources.\u003c/p\u003e\n\u003cp\u003eWhere does bundle URI fit into this interaction? If bundle URI is advertised as a capability from the \u003ccode\u003eupload-pack\u003c/code\u003e process and the client supports bundle URI, the Git client will ask the server if it knows about any bundle URIs. The server sends those URIs back and the client downloads those bundles.\u003c/p\u003e\n\u003cp\u003eHere is a diagram that shows those interactions:\u003c/p\u003e\n\u003cp\u003e\nsequenceDiagram\n\n\n    participant receive as Client\n\n\n    participant upload as Server\n\n\n    participant cloud as File server\n\n\n    receive -\u0026gt;\u0026gt; upload: issue git-upload-pack\n\n\n    upload --\u0026gt;\u0026gt; receive: list of server capabilities\n\n\n    opt if bundle URI is advertised as a capability\n\n\n    receive -\u0026gt;\u0026gt; upload: request bundle URI\n\n\n    upload --\u0026gt;\u0026gt; receive: bundle URI\n\n\n    receive -\u0026gt;\u0026gt; cloud: download bundle at URI\n\n\n    cloud --\u0026gt;\u0026gt; receive: bundle file\n\n\n    receive -\u0026gt;\u0026gt; receive: clone from bundle\n\n\n    end\n\n\n    receive -\u0026gt;\u0026gt; upload: requests missing references and objects\n\n\n    upload --\u0026gt;\u0026gt; receive: packfile data\n\n\u003c/p\u003e\u003cp\u003eAs such, Git \u003ca href=\"https://git-scm.com/docs/bundle-uri\"\u003ebundle URI\u003c/a\u003e is a mechanism by which, during a \u003ccode\u003egit clone\u003c/code\u003e, a Git server can advertise the URI of a bundle for the repository being cloned by the Git client. When that is the case, the Git client can clone the repository from the bundle and request from the Git server only the missing references or objects that were not part of the bundle. This mechanism really helps to alleviate pressure from the Git server.\u003c/p\u003e\n\u003ch2 id=\"alternatives\" tabindex=\"-1\"\u003e\u003ca href=\"#alternatives\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Alternatives\u003c/h2\u003e\n\u003cp\u003eGitLab also has a feature \u003ca href=\"https://docs.gitlab.com/administration/gitaly/configure_gitaly/#pack-objects-cache\"\u003ePack-objects cache\u003c/a\u003e. This feature works slightly differently than bundle URI. When the server packs objects together into a so-called packfile, this feature will keep that file in the cache. When another client needs the same set of objects, it doesn\u0026#39;t need to repack them, but it can just send the same packfile again.\u003c/p\u003e\n\u003cp\u003eThe feature is only beneficial when many clients request the exact same set of objects. In a repository that is quick-changing, this feature might not give any improvements. With bundle URI, it doesn\u0026#39;t matter if the bundle is slightly out-of-date because the client can request missing objects after downloading the bundle and apply those changes on top. Also bundle URI in Gitaly stores the bundles on external storage, which the Pack-objects Cache stores them on the Gitaly node, so using the latter doesn\u0026#39;t reduce network and I/O load on the Gitaly server.\u003c/p\u003e\n\u003ch2 id=\"try-bundle-uri-today\" tabindex=\"-1\"\u003e\u003ca href=\"#try-bundle-uri-today\"\u003e\n          \u003csvg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpath d=\"M12.2426 3.75736C11.4615 2.97631 10.1952 2.97631 9.41416 3.75736L7.99995 5.17157C7.60942 5.56209 6.97626 5.56209 6.58573 5.17157C6.19521 4.78105 6.19521 4.14788 6.58573 3.75736L7.99995 2.34314C9.56205 0.781046 12.0947 0.781046 13.6568 2.34314C15.2189 3.90524 15.2189 6.4379 13.6568 8L12.2426 9.41421C11.8521 9.80473 11.2189 9.80473 10.8284 9.41421C10.4379 9.02369 10.4379 8.39052 10.8284 8L12.2426 6.58578C13.0236 5.80473 13.0236 4.5384 12.2426 3.75736Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M10.5355 5.4645C10.926 5.85502 10.926 6.48819 10.5355 6.87871L6.87863 10.5356C6.4881 10.9261 5.85494 10.9261 5.46441 10.5356C5.07389 10.145 5.07389 9.51188 5.46441 9.12135L9.12127 5.4645C9.51179 5.07397 10.145 5.07397 10.5355 5.4645Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003cpath d=\"M3.75742 9.41422C2.97637 10.1953 2.97637 11.4616 3.75742 12.2426C4.53847 13.0237 5.8048 13.0237 6.58584 12.2426L8.00006 10.8284C8.39058 10.4379 9.02375 10.4379 9.41427 10.8284C9.8048 11.219 9.8048 11.8521 9.41427 12.2426L8.00006 13.6569C6.43796 15.219 3.9053 15.219 2.3432 13.6569C0.781107 12.0948 0.781107 9.56211 2.3432 8.00001L3.75742 6.5858C4.14794 6.19527 4.78111 6.19527 5.17163 6.5858C5.56216 6.97632 5.56215 7.60948 5.17163 8.00001L3.75742 9.41422Z\" fill=\"#333333\"\u003e\u003c/path\u003e\u003c/svg\u003e\n        \u003c/a\u003e Try bundle URI today\u003c/h2\u003e\n\u003cp\u003eYou can try the bundle URI feature in one of the following ways:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eDownload a \u003ca href=\"https://about.gitlab.com/free-trial/\"\u003efree, 60-day trial version of GitLab Ultimate\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you already run a self-hosted GitLab installation, upgrade to 18.1.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you can\u0026#39;t upgrade to 18.1 at this time, \u003ca href=\"https://about.gitlab.com/install/\"\u003edownload GitLab\u003c/a\u003e to a local machine.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2025-06-24T00:00:00Z",
  "modifiedTime": null
}
