{
  "id": "a521860a-9673-490d-8201-dd369b9f7c7c",
  "title": "Build Go applications using Project IDX and the Gemini API",
  "link": "https://developers.googleblog.com/en/build-go-applications-project-idx-gemini-api/",
  "description": "Learn how to build Go applications using Project IDX, an AI-assisted workspace for full-stack app development.",
  "author": "",
  "published": "",
  "source": "http://feeds.feedburner.com/GDBcode",
  "categories": null,
  "byline": "Suzy Mueller, Nooras Saba",
  "length": 4710,
  "excerpt": "Learn how to build Go applications using Project IDX, an AI-assisted workspace for full-stack app development.",
  "siteName": "",
  "favicon": "",
  "text": "Products More Solutions Events Learn Community Developer Program Blog Project IDX, launched in June 2024, is an AI-assisted workspace for full-stack app development in the cloud. It supports a wide range of frameworks, languages and services, along with integrations for Google products to streamline development workflows.We’re going to take advantage of this to show you how to build applications with Go in minutes. We'll set up a Go development environment in Project IDX and create your first server application. Let's walk through setting up a Go development environment in IDX and creating a simple hello world server.There are a few different ways to create workspaces in IDX. You can import a GitHub repository, create a new blank workspace from scratch, or use a preconfigured template. We’re going to show you how to start from scratch first, and then we’ll take a look at templatesGetting startedThis section will walk through setting up the environment and writing a basic Hello, World server with IDX.Let’s get started by creating a new blank project in IDX from idx.google.com/new/blank. This project contains a README and a default dev.nix.Environment CustomizationEnvironment configuration can be customized with nix environment configurations. A minimal configuration for a Go workspace in IDX will add the Go nix package and install the Go extension:Update .idx/dev.nix to include the Go nix package and the Go extension: { pkgs, ... }: { packages = [ pkgs.go ]; idx = { extensions = [ \"golang.go\" ]; }; } Rebuild your environment to allow these changes to take effect.Write Go codeNow that the workspace is set up for Go code development, we can start writing our Go server.First, let's initialize the module that will contain our Go code. You can do this by running the \u003e Go: Initialize go.mod provided by the Go extension from the Command Palette, or by running go mod init from the command line. $ go mod init github.com/myorg/helloWorld Let’s create a main.go with a simple server that returns “Hello, World!\" package main import ( \"fmt\" \"log\" \"net/http\" \"os\" ) func main() { log.Print(\"starting server...\") http.HandleFunc(\"/\", handler) // Determine port for HTTP service. port := os.Getenv(\"PORT\") if port == \"\" { port = \"3000\" log.Printf(\"defaulting to port %s\", port) } // Start HTTP server. log.Printf(\"listening on port %s\", port) if err := http.ListenAndServe(\":\"+port, nil); err != nil { log.Fatal(err) } } func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, \"\u003c!DOCTYPE html\u003e\\n\") fmt.Fprint(w, \"Hello, World!\\n\") } Preview in IDXNow that we have a server that can listen to requests, let’s test it out by creating a preview.To .idx/dev.nix, add the web preview configuration: idx = { previews = { enable = true; previews = { web = { command = [\"go\" \"run\" \"main.go\"]; manager = \"web\"; env = { # Environment variables to set for your server PORT = \"$PORT\"; }; }; }; }; }; Rebuild the environment again to see the web preview. The preview can also be opened from the Command Palette using \u003e Project IDX: Show Web Preview. Explore Go Templates in IDXTo start quickly, we are providing you with ready to use templates that include a pre-configured environment with all the tools and the libraries needed.Start with one of the Go backend server templates or start building LLM applications with the Go and Gemini template.Gemini with Go template is integrated with Gemini API to leverage the power of AI. Plug in your Gemini API key to get going.",
  "image": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/Go-Gopher_IDX-rev2.2e16d0ba.fill-1200x600.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\n        \n        \n        \n\n        \n\n\t\t\t\t\n        \n\n\n\n\n\u003cdiv top-level-nav=\"\"\u003e\n  \u003cnav aria-label=\"Side menu\"\u003e\n    \n    \u003cdiv\u003e\n        \u003cul\u003e\n          \u003cli\u003e\n            \u003ca href=\"https://developers.google.com/products\" data-label=\"Tab: Products\"\u003e\n              \u003cspan tooltip=\"\"\u003e\n                Products\n             \u003c/span\u003e\n            \u003c/a\u003e\n            \u003cul\u003e\n              \u003cli\u003e\n                \u003cspan tabindex=\"0\" data-label=\"More Products\"\u003e\n                  \u003cspan menu=\"Products\"\u003e\n                    More\n                  \u003c/span\u003e\n                  \u003cspan menu=\"Products\"\u003e\n                    \n                  \u003c/span\u003e\n                \u003c/span\u003e\n              \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\n            \u003ca href=\"https://developers.google.com/solutions/catalog\" data-label=\"Tab: Solutions\"\u003e\n              \u003cspan tooltip=\"\"\u003e\n                Solutions\n             \u003c/span\u003e\n            \u003c/a\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\n            \u003ca href=\"https://developers.google.com/events\" data-label=\"Tab: Events\"\u003e\n              \u003cspan tooltip=\"\"\u003e\n                Events\n             \u003c/span\u003e\n            \u003c/a\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\n            \u003ca href=\"https://developers.google.com/learn\" data-label=\"Tab: Learn\"\u003e\n              \u003cspan tooltip=\"\"\u003e\n                Learn\n             \u003c/span\u003e\n            \u003c/a\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\n            \u003ca href=\"https://developers.google.com/community\" data-label=\"Tab: Community\"\u003e\n              \u003cspan tooltip=\"\"\u003e\n                Community\n             \u003c/span\u003e\n            \u003c/a\u003e\n            \u003cul\u003e\n              \u003cli\u003e\n                \n              \u003c/li\u003e\n            \u003c/ul\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\n            \u003ca href=\"https://developers.google.com/profile/u/me\" data-label=\"Tab: Developer Program\"\u003e\n              \u003cspan tooltip=\"\"\u003e\n                Developer Program\n             \u003c/span\u003e\n            \u003c/a\u003e\n          \u003c/li\u003e\n          \u003cli\u003e\n            \u003ca href=\"https://developers.googleblog.com/\" data-label=\"Tab: Blog\"\u003e\n              \u003cspan tooltip=\"\"\u003e\n                Blog\n             \u003c/span\u003e\n            \u003c/a\u003e\n          \u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/div\u003e\n  \u003c/nav\u003e\n  \u003c/div\u003e\n\n\n\n        \n  \u003cdiv\u003e\n\n    \n      \n    \n\n    \n\n    \n\n    \n\n    \n    \u003cdiv\u003e\n          \n\n\u003cdiv\u003e\n    \u003cp data-block-key=\"paw9f\"\u003e\u003ca href=\"http://idx.dev/\"\u003eProject IDX\u003c/a\u003e, launched in June 2024, is an AI-assisted workspace for full-stack app development in the cloud. It supports a wide range of frameworks, languages and services, along with integrations for Google products to streamline development workflows.\u003c/p\u003e\u003cp data-block-key=\"4kull\"\u003eWe’re going to take advantage of this to show you how to build applications with Go in minutes. We\u0026#39;ll set up a Go development environment in Project IDX and create your first server application. Let\u0026#39;s walk through setting up a Go development environment in IDX and creating a simple hello world server.\u003c/p\u003e\u003cp data-block-key=\"shgr\"\u003eThere are a few different ways to create workspaces in IDX. You can import a GitHub repository, create a new blank workspace from scratch, or use a preconfigured template. We’re going to show you how to start from scratch first, and then we’ll take a look at templates\u003c/p\u003e\u003ch2 data-block-key=\"8e5b0\"\u003e\u003cb\u003e\u003cbr/\u003e\u003c/b\u003eGetting started\u003c/h2\u003e\u003cp data-block-key=\"6l9et\"\u003eThis section will walk through setting up the environment and writing a basic Hello, World server with IDX.\u003c/p\u003e\u003cp data-block-key=\"12mmd\"\u003eLet’s get started by creating a new blank project in IDX from \u003ca href=\"http://idx.google.com/new/blank\"\u003eidx.google.com/new/blank\u003c/a\u003e. This project contains a README and a default \u003ca href=\"https://developers.google.com/idx/guides/customize-idx-env#nix+idx\"\u003edev.nix\u003c/a\u003e.\u003c/p\u003e\u003ch3 data-block-key=\"3hact\"\u003e\u003cb\u003e\u003cbr/\u003eEnvironment Customization\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"89jr0\"\u003eEnvironment configuration can be customized with \u003ca href=\"https://developers.google.com/idx/guides/customize-idx-env#nix+idx\"\u003enix\u003c/a\u003e environment configurations. A minimal configuration for a Go workspace in IDX will add the Go nix package and install the Go extension:\u003c/p\u003e\u003cp data-block-key=\"1oucv\"\u003eUpdate .idx/dev.nix to include the Go nix package and the Go extension:\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e{ pkgs, ... }: {\u003c/span\u003e\n\u003cspan\u003e  packages = [\u003c/span\u003e\n\u003cspan\u003e    pkgs.go\u003c/span\u003e\n\u003cspan\u003e  ];\u003c/span\u003e\n\n\u003cspan\u003e  idx = {\u003c/span\u003e\n\u003cspan\u003e    extensions = [\u003c/span\u003e\n\u003cspan\u003e      \u0026#34;golang.go\u0026#34;\u003c/span\u003e\n\u003cspan\u003e    ];\u003c/span\u003e\n\u003cspan\u003e  };\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cdiv\u003e\n    \u003cp data-block-key=\"hc7cp\"\u003eRebuild your environment to allow these changes to take effect.\u003c/p\u003e\u003ch3 data-block-key=\"7p69n\"\u003e\u003cb\u003e\u003cbr/\u003eWrite Go code\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"6h24o\"\u003eNow that the workspace is set up for Go code development, we can start writing our Go server.\u003c/p\u003e\u003cp data-block-key=\"dagq3\"\u003eFirst, let\u0026#39;s \u003ca href=\"https://go.dev/doc/tutorial/create-module\"\u003einitialize the module\u003c/a\u003e that will contain our Go code. You can do this by running the \u003ccode\u003e\u0026gt; Go: Initialize go.mod\u003c/code\u003e provided by the Go extension from the Command Palette, or by running \u003ccode\u003ego mod init\u003c/code\u003e from the command line.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003e$ go mod init github.com/myorg/helloWorld\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cp data-block-key=\"hc7cp\"\u003eLet’s create a \u003ca href=\"http://main.go/\"\u003e\u003ccode\u003emain.go\u003c/code\u003e\u003c/a\u003e with a simple server that returns “Hello, World!\u0026#34;\u003c/p\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003epackage main\u003c/span\u003e\n\n\u003cspan\u003eimport (\u003c/span\u003e\n\u003cspan\u003e\t\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003cspan\u003e\t\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003cspan\u003e\t\u0026#34;net/http\u0026#34;\u003c/span\u003e\n\u003cspan\u003e\t\u0026#34;os\u0026#34;\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003efunc main() {\u003c/span\u003e\n\u003cspan\u003e\tlog.Print(\u0026#34;starting server...\u0026#34;)\u003c/span\u003e\n\u003cspan\u003e\thttp.HandleFunc(\u0026#34;/\u0026#34;, handler)\u003c/span\u003e\n\n\u003cspan\u003e\t// Determine port for HTTP service.\u003c/span\u003e\n\u003cspan\u003e\tport := os.Getenv(\u0026#34;PORT\u0026#34;)\u003c/span\u003e\n\u003cspan\u003e\tif port == \u0026#34;\u0026#34; {\u003c/span\u003e\n\u003cspan\u003e\t\tport = \u0026#34;3000\u0026#34;\u003c/span\u003e\n\u003cspan\u003e\t\tlog.Printf(\u0026#34;defaulting to port %s\u0026#34;, port)\u003c/span\u003e\n\u003cspan\u003e\t}\u003c/span\u003e\n\n\u003cspan\u003e\t// Start HTTP server.\u003c/span\u003e\n\u003cspan\u003e\tlog.Printf(\u0026#34;listening on port %s\u0026#34;, port)\u003c/span\u003e\n\u003cspan\u003e\tif err := http.ListenAndServe(\u0026#34;:\u0026#34;+port, nil); err != nil {\u003c/span\u003e\n\u003cspan\u003e\t\tlog.Fatal(err)\u003c/span\u003e\n\u003cspan\u003e\t}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\n\u003cspan\u003efunc handler(w http.ResponseWriter, r *http.Request) {\u003c/span\u003e\n\u003cspan\u003e\tfmt.Fprint(w, \u0026#34;\u0026lt;!DOCTYPE html\u0026gt;\\n\u0026#34;)\u003c/span\u003e\n\u003cspan\u003e\tfmt.Fprint(w, \u0026#34;Hello, World!\\n\u0026#34;)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cdiv\u003e\n    \u003ch3 data-block-key=\"hc7cp\"\u003e\u003cb\u003ePreview in IDX\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"f7hv5\"\u003eNow that we have a server that can listen to requests, let’s test it out by creating a preview.\u003c/p\u003e\u003cp data-block-key=\"ec7q9\"\u003eTo .idx/dev.nix, add the web preview configuration:\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003eidx = {\u003c/span\u003e\n\u003cspan\u003e      previews = {\u003c/span\u003e\n\u003cspan\u003e      enable = true;\u003c/span\u003e\n\u003cspan\u003e      previews = {\u003c/span\u003e\n\u003cspan\u003e          web = {\u003c/span\u003e\n\u003cspan\u003e          command = [\u0026#34;go\u0026#34; \u0026#34;run\u0026#34; \u0026#34;main.go\u0026#34;];\u003c/span\u003e\n\u003cspan\u003e          manager = \u0026#34;web\u0026#34;;\u003c/span\u003e\n\u003cspan\u003e          env = {\u003c/span\u003e\n\u003cspan\u003e            # Environment variables to set for your server\u003c/span\u003e\n\u003cspan\u003e            PORT = \u0026#34;$PORT\u0026#34;;\u003c/span\u003e\n\u003cspan\u003e          };\u003c/span\u003e\n\u003cspan\u003e        };\u003c/span\u003e\n\u003cspan\u003e      };\u003c/span\u003e\n\u003cspan\u003e    };\u003c/span\u003e\n\u003cspan\u003e  };\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cp data-block-key=\"hc7cp\"\u003eRebuild the environment again to see the web preview. The preview can also be opened from the Command Palette using \u003ccode\u003e\u0026gt; Project IDX: Show Web Preview\u003c/code\u003e.\u003c/p\u003e   \n\n\u003cdiv\u003e\n    \u003cp\u003e\u003cimg src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/image3_0CXQpMd.original.png\" alt=\"Show Web Preview in Project IDX\"/\u003e\n        \n        \n    \u003c/p\u003e\n\u003c/div\u003e\n  \u003cdiv\u003e\n    \u003ch2 data-block-key=\"hc7cp\"\u003eExplore Go Templates in IDX\u003c/h2\u003e\u003cp data-block-key=\"360sm\"\u003eTo start quickly, we are providing you with ready to use templates that include a pre-configured environment with all the tools and the libraries needed.\u003c/p\u003e\u003cp data-block-key=\"cb24\"\u003eStart with one of the \u003ca href=\"https://idx.google.com/new/go\"\u003eGo backend server templates\u003c/a\u003e or start building LLM applications with the \u003ca href=\"http://idx.google.com/new/gemini\"\u003eGo and Gemini template\u003c/a\u003e.\u003c/p\u003e\u003cp data-block-key=\"2d3ag\"\u003eGemini with Go template is integrated with \u003ca href=\"https://ai.google.dev/\"\u003eGemini API\u003c/a\u003e to leverage the power of AI. Plug in your \u003ca href=\"https://ai.google.dev/gemini-api/docs/api-key\"\u003eGemini API key\u003c/a\u003e to get going.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \u003cp\u003e\u003cimg src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/image4_imqiLaj.original.png\" alt=\"Code editor displays project files and a web page titled \u0026#34;Baking with Gemini\u0026#34;  with images of baked goods and a prompt to provide a recipe in IDX\"/\u003e\n        \n        \n    \u003c/p\u003e\n\u003c/div\u003e\n \n      \u003c/div\u003e\n    \n\n    \n\n    \n    \n    \n  \u003c/div\u003e\n\n\n\t\t\t\t\n\t\t\t\t\n\n\n\n\n\n        \n\t\t\t\t\n\n        \n        \n        \n        \n\n        \n\n        \n  \n\n    \n\n\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-12-18T00:00:00Z",
  "modifiedTime": null
}
