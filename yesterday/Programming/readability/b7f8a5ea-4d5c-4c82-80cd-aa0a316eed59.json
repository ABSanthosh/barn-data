{
  "id": "b7f8a5ea-4d5c-4c82-80cd-aa0a316eed59",
  "title": "Introducing Embabel: Advanced AI Agent Development for Java Applications",
  "link": "https://www.infoq.com/news/2025/06/introducing-embabel-ai-agent/?utm_campaign=infoq_content\u0026utm_source=infoq\u0026utm_medium=feed\u0026utm_term=global",
  "description": "Introducing the Embabel Agent Framework, a pioneering platform developed by Spring founder Rod Johnson, designed to revolutionize AI applications on the JVM. By integrating structured agent development and Goal-Oriented Action Planning, Embabel combines strong typing with dynamic planning, ensuring reliable, adaptable, and type-safe solutions for enterprise Java applications. By A N M Bazlur Rahman",
  "author": "A N M Bazlur Rahman",
  "published": "Thu, 05 Jun 2025 12:53:00 GMT",
  "source": "https://feed.infoq.com",
  "categories": [
    "Artificial Intelligence",
    "Large language models",
    "Java",
    "Agents",
    "Development",
    "Architecture \u0026 Design",
    "news"
  ],
  "byline": "A N M Bazlur Rahman",
  "length": 8698,
  "excerpt": "Introducing the Embabel Agent Framework, a pioneering platform developed by Spring founder Rod Johnson, designed to revolutionize AI applications on the JVM. By integrating structured agent developmen",
  "siteName": "InfoQ",
  "favicon": "https://cdn.infoq.com/statics_s1_20250605075448/apple-touch-icon.png",
  "text": "The Embabel Agent Framework, launched by Spring founder Rod Johnson, is a new JVM-based platform for building AI-powered applications built on the Spring Framework. It aims to transform how developers integrate large language models (LLMs) with conventional Java applications, shifting from experimental approaches to production-ready, type-safe solutions. Embabel models \"agentic flows\" using actions, goals, and conditions. Unlike simpler frameworks, it leverages Goal-Oriented Action Planning (GOAP), an AI algorithm traditionally used in gaming, for proper planning. This allows applications to perform tasks that weren't explicitly programmed to do by combining steps in novel ways and dynamically replanning after each action, forming an OODA loop. A core tenet of Embabel is its strong typing and object orientation. This ensures all LLM interactions are strongly typed, offering compile-time checking, refactoring support, and IDE assistance, aligning AI development with disciplined engineering practices. Rod Johnson highlighted that Embabel treats planning as a distinct capability, leveraging specialized algorithms rather than relying solely on LLMs. The framework's GOAP implementation determines optimal action sequences by considering preconditions and effects. This yields several benefits: enhanced efficiency by minimizing unnecessary LLM calls, dynamic adaptability through replanning, increased composability by allowing new actions and goals without modifying existing code, and the ability to parallelize actions. This planning cycle significantly improves reliability for complex, multi-step processes. The framework supports three execution modes: Focused (specific agent calls), Closed (user intent classifies agent selection), and Open (the platform assesses user intent to achieve goals using all available resources). Embabel also prioritizes ease of testing, with agents being unit testable like Spring beans and a dedicated library for prompt testing. Its extensibility allows adding domain objects, actions, goals, and conditions without altering existing code. The framework also provides a clear separation between the programming model and platform internals, enabling local runs and higher quality of service in production. It supports LLM mixing for cost-effectiveness and enhanced capability, including local models for privacy and cost management. Embabel brings agent capabilities to the JVM ecosystem, building on Spring AI with higher-level abstractions for complex requirements. It addresses key AI application development challenges by maximizing reuse, facilitating testing, increasing composability, enhancing manageability, and providing type safety. InfoQ engaged with Rod Johnson, the founder of Embabel and Spring, to gain further insights into the framework's design and strategic positioning. InfoQ. Why Kotlin for Embabel, given the advancements in modern Java? Rod Johnson: Java has done remarkably well under Oracle's stewardship. Modern Java is certainly much improved. I personally prefer coding in Kotlin and feel that using Kotlin accelerates Embabel's development. I particularly like null safety, more readable collection usage with no need to lift to streams, and more concise syntax. Reification also makes pure Kotlin usage more elegant by reducing the impact of type erasure. However, the choice of language for implementing the framework does not imply anything about the choice of language to build applications on it. I would encourage all JVM developers to consider Kotlin, but there are good reasons why many projects remain in Java. Kotlin has outstanding interop with Java. It's painless. We're committed to ensuring that Java usage is entirely idiomatic, without any Kotlin influence. Where necessary, we add a little Java code to ensure that. For example, you'll never see a Kt import if you build applications in Java. Embabel's core values of type safety and a rich domain model stand out whether you build in Kotlin or Java. We aim to be idiomatic in both languages--there's also a Kotlin DSL. Embabel is a JVM framework, not a Kotlin framework. We know that the dominant language on the JVM is Java, and it's great that Java is moving forward. InfoQ: How do you position Embabel relative to other Java-based AI initiatives like LangChain4j and Spring AI? Rod Johnson: Embabel is a much higher level than LangChain4j and Spring AI. It builds on that layer, choosing Spring AI due to its affinity with the Spring ecosystem, but it offers a higher level of abstraction and introduces original ideas. The agent framework level is already familiar in Python, but it's very new on the JVM. And it's urgently needed if Java is going to maintain its position in the enterprise and beyond. InfoQ: Can traditional Java teams adopt Embabel, or is AI expertise required? Rod Johnson: I think that understanding of the domain and existing business applications and infrastructures is vital to making Gen AI deliver business value. Embabel aims to make it as easy for JVM developers to write agents as to write Spring MVC applications, using their core skills. Many people and organizations think that you need to write Gen AI applications in Python. That means a new stack to put into production, potentially a new skill set and a lot of friction in getting at existing business logic and infrastructure. I believe that that is entirely wrong--and I'm very familiar with the Python ecosystem. Java teams are well-positioned to leverage AI in their applications, with minimal friction and the benefit of their existing understanding and toolset. Having said that, LLMs are a powerful new technology with far-reaching implications. Organizations and developers need to understand the risks and costs as well as the rewards. A good agent framework will make Gen AI safer and more predictable, but it's still essential to understand the forces at work. And that caveat applies to whatever tech stack you build your applications on. InfoQ. Given your history with Spring and current relationship with the ecosystem, how do you see Embabel's evolution in relation to Spring AI and the broader Spring portfolio? Are there discussions about closer integration or potential inclusion in the official Spring family of projects? Rod Johnson: I just spoke at Spring I/O in Barcelona. It was a great show. I'm very happy to build on Spring, because Spring is a great technology, and as it's the dominant component model in enterprise Java, it's a no-brainer from an adoption standpoint. Of course, I'm also happy to build on Spring for personal reasons. It's a joy to see something I gave birth to 23 years ago thriving and in good hands. Embabel is an independent project with novel ideas and the goal of being the best agent framework on any platform. It's a much higher level than Spring AI and introduces novel ideas. I think its existence is a good thing for Spring and Java. When I created Spring, I was focused on solving the most important enterprise Java problem at that time--the fact that J2EE made it way too hard to build applications. In creating Embabel, I'm focused on solving the most important JVM problem of today: how to bring business applications into the Gen AI era. While I think the JVM has a particularly important role to play in the future of Gen AI, Embabel's goal of being the best agent framework anywhere means eventually porting the model to other platforms, something that doesn't apply to Spring. I can definitely see a TypeScript version (I won't say port as it would need to be idiomatic), as I like TypeScript, and Node is important. And obviously, Python is very popular. I believe Embabel can be as important a technology as Spring, while expanding the power of the Spring ecosystem. InfoQ: Where can developers find examples and learning resources for Embabel? Rod Johnson:  We're continually working to improve the examples. The embabel repository is the starting point for exploration and contains instructions for getting started. There are example agents under the embabel-agent-examples subdirectory of that repository. The coding agent doubles as an example and is in its own repository at https://github.com/embabel/embabel-coding-agent. We plan to evolve examples like the coding agent and travel planner to the point where they're not only helpful for developers learning Embabel but genuinely useful. I can definitely see some of them becoming interesting open-source projects in their own right. About the Author A N M Bazlur Rahman",
  "image": "https://res.infoq.com/news/2025/06/introducing-embabel-ai-agent/en/headerimage/generatedHeaderImage-1748820807625.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\u003cp\u003eThe \u003ca href=\"https://github.com/embabel\"\u003eEmbabel Agent Framework\u003c/a\u003e, launched by Spring founder \u003ca href=\"https://www.linkedin.com/in/johnsonroda/\"\u003eRod Johnson\u003c/a\u003e, is a new JVM-based platform for building AI-powered applications built on the \u003ca href=\"https://spring.io/projects/spring-framework\"\u003eSpring Framework\u003c/a\u003e. It aims to transform how developers integrate large language models (LLMs) with conventional Java applications, shifting from experimental approaches to production-ready, type-safe solutions.\u003c/p\u003e\n\n\u003cp\u003eEmbabel models \u0026#34;agentic flows\u0026#34; using actions, goals, and conditions. Unlike simpler frameworks, it leverages \u003ca href=\"https://medium.com/@vedantchaudhari/goal-oriented-action-planning-34035ed40d0b\"\u003eGoal-Oriented Action Planning (GOAP)\u003c/a\u003e, an AI algorithm traditionally used in gaming, for proper planning. This allows applications to perform tasks that weren\u0026#39;t explicitly programmed to do by combining steps in novel ways and dynamically replanning after each action, forming an \u003ca href=\"https://en.wikipedia.org/wiki/OODA_loop\"\u003eOODA loop\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eA core tenet of Embabel is its strong typing and object orientation. This ensures all LLM interactions are strongly typed, offering compile-time checking, refactoring support, and IDE assistance, aligning AI development with disciplined engineering practices.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cp\u003eRod Johnson highlighted that Embabel treats planning as a distinct capability, leveraging specialized algorithms rather than relying solely on LLMs. The framework\u0026#39;s GOAP implementation determines optimal action sequences by considering preconditions and effects. This yields several benefits: enhanced efficiency by minimizing unnecessary LLM calls, dynamic adaptability through replanning, increased composability by allowing new actions and goals without modifying existing code, and the ability to parallelize actions. This planning cycle significantly improves reliability for complex, multi-step processes.\u003c/p\u003e\u003cp\u003e\n\n\u003cimg alt=\"\" data-src=\"news/2025/06/introducing-embabel-ai-agent/en/resources/11_7zRgQXOVCCTeXIJdCyL7FQ-1749009028306.webp\" src=\"https://res.infoq.com/news/2025/06/introducing-embabel-ai-agent/en/resources/11_7zRgQXOVCCTeXIJdCyL7FQ-1749009028306.webp\" rel=\"share\"/\u003e\u003c/p\u003e\u003c/div\u003e\n\n\u003cp\u003eThe framework supports three execution modes: Focused (specific agent calls), Closed (user intent classifies agent selection), and Open (the platform assesses user intent to achieve goals using all available resources). Embabel also prioritizes ease of testing, with agents being unit testable like Spring beans and a dedicated library for prompt testing. Its extensibility allows adding domain objects, actions, goals, and conditions without altering existing code.\u003c/p\u003e\n\n\u003cp\u003eThe framework also provides a clear separation between the programming model and platform internals, enabling local runs and higher quality of service in production. It supports LLM mixing for cost-effectiveness and enhanced capability, including local models for privacy and cost management.\u003c/p\u003e\n\n\u003cp\u003eEmbabel brings agent capabilities to the JVM ecosystem, building on Spring AI with higher-level abstractions for complex requirements. It addresses key AI application development challenges by maximizing reuse, facilitating testing, increasing composability, enhancing manageability, and providing type safety.\u003c/p\u003e\n\n\u003cp\u003eInfoQ engaged with Rod Johnson, the founder of Embabel and Spring, to gain further insights into the framework\u0026#39;s design and strategic positioning.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ. Why Kotlin for Embabel, given the advancements in modern Java?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eRod Johnson:\u003c/strong\u003e Java has done remarkably well under Oracle\u0026#39;s stewardship. Modern Java is certainly much improved. I personally prefer coding in Kotlin and feel that using Kotlin accelerates Embabel\u0026#39;s development. I particularly like null safety, more readable collection usage with no need to lift to streams, and more concise syntax. Reification also makes pure Kotlin usage more elegant by reducing the impact of type erasure.\u003c/p\u003e\n\n\u003cp\u003eHowever, the choice of language for implementing the framework does not imply anything about the choice of language to build applications on it. I would encourage all JVM developers to consider Kotlin, but there are good reasons why many projects remain in Java. Kotlin has outstanding interop with Java. It\u0026#39;s painless. We\u0026#39;re committed to ensuring that Java usage is entirely idiomatic, without any Kotlin influence. Where necessary, we add a little Java code to ensure that. For example, you\u0026#39;ll never see a Kt import if you build applications in Java.\u003c/p\u003e\n\n\u003cp\u003eEmbabel\u0026#39;s core values of type safety and a rich domain model stand out whether you build in Kotlin or Java. We aim to be idiomatic in both languages--there\u0026#39;s also a Kotlin DSL.\u003c/p\u003e\n\n\u003cp\u003eEmbabel is a JVM framework, not a Kotlin framework. We know that the dominant language on the JVM is Java, and it\u0026#39;s great that Java is moving forward.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: How do you position Embabel relative to other Java-based AI initiatives like LangChain4j and Spring AI?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eRod Johnson:\u003c/strong\u003e Embabel is a much higher level than LangChain4j and Spring AI. It builds on that layer, choosing Spring AI due to its affinity with the Spring ecosystem, but it offers a higher level of abstraction and introduces original ideas. The agent framework level is already familiar in Python, but it\u0026#39;s very new on the JVM. And it\u0026#39;s urgently needed if Java is going to maintain its position in the enterprise and beyond.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: Can traditional Java teams adopt Embabel, or is AI expertise required?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eRod Johnson:\u003c/strong\u003e I think that understanding of the domain and existing business applications and infrastructures is vital to making Gen AI deliver business value. Embabel aims to make it as easy for JVM developers to write agents as to write Spring MVC applications, using their core skills.\u003c/p\u003e\n\n\u003cp\u003eMany people and organizations think that you need to write Gen AI applications in Python. That means a new stack to put into production, potentially a new skill set and a lot of friction in getting at existing business logic and infrastructure. I believe that that is entirely wrong--and I\u0026#39;m very familiar with the Python ecosystem. Java teams are well-positioned to leverage AI in their applications, with minimal friction and the benefit of their existing understanding and toolset.\u003c/p\u003e\n\n\u003cp\u003eHaving said that, LLMs are a powerful new technology with far-reaching implications. Organizations and developers need to understand the risks and costs as well as the rewards. A good agent framework will make Gen AI safer and more predictable, but it\u0026#39;s still essential to understand the forces at work. And that caveat applies to whatever tech stack you build your applications on.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ. Given your history with Spring and current relationship with the ecosystem, how do you see Embabel\u0026#39;s evolution in relation to Spring AI and the broader Spring portfolio? Are there discussions about closer integration or potential inclusion in the official Spring family of projects?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eRod Johnson:\u003c/strong\u003e I just spoke at Spring I/O in Barcelona. It was a great show. I\u0026#39;m very happy to build on Spring, because Spring is a great technology, and as it\u0026#39;s the dominant component model in enterprise Java, it\u0026#39;s a no-brainer from an adoption standpoint. Of course, I\u0026#39;m also happy to build on Spring for personal reasons. It\u0026#39;s a joy to see something I gave birth to 23 years ago thriving and in good hands.\u003c/p\u003e\n\n\u003cp\u003eEmbabel is an independent project with novel ideas and the goal of being the best agent framework on any platform. It\u0026#39;s a much higher level than Spring AI and introduces novel ideas. I think its existence is a good thing for Spring and Java.\u003c/p\u003e\n\n\u003cp\u003eWhen I created Spring, I was focused on solving the most important enterprise Java problem at that time--the fact that J2EE made it way too hard to build applications. In creating Embabel, I\u0026#39;m focused on solving the most important JVM problem of today: how to bring business applications into the Gen AI era.\u003c/p\u003e\n\n\u003cp\u003eWhile I think the JVM has a particularly important role to play in the future of Gen AI, Embabel\u0026#39;s goal of being the best agent framework anywhere means eventually porting the model to other platforms, something that doesn\u0026#39;t apply to Spring. I can definitely see a TypeScript version (I won\u0026#39;t say port as it would need to be idiomatic), as I like TypeScript, and Node is important. And obviously, Python is very popular.\u003c/p\u003e\n\n\u003cp\u003eI believe Embabel can be as important a technology as Spring, while expanding the power of the Spring ecosystem.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cstrong\u003eInfoQ: Where can developers find examples and learning resources for Embabel?\u003c/strong\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eRod Johnson:\u003c/strong\u003e  We\u0026#39;re continually working to improve the examples. The \u003ca data-saferedirecturl=\"https://www.google.com/url?q=https://github.com/embabel/embabel-agent/\u0026amp;source=gmail\u0026amp;ust=1749208229884000\u0026amp;usg=AOvVaw1HYHNrmGGsymGPRRSfP44z\" href=\"https://github.com/embabel/embabel-agent/\" target=\"_blank\"\u003eembabel repository\u003c/a\u003e is the starting point for exploration and contains instructions for getting started. There are example agents under the \u003ca data-saferedirecturl=\"https://www.google.com/url?q=https://github.com/embabel/embabel-agent/tree/main/embabel-agent-examples\u0026amp;source=gmail\u0026amp;ust=1749208229884000\u0026amp;usg=AOvVaw33rbqMEWiLNzKFhK8hbKly\" href=\"https://github.com/embabel/embabel-agent/tree/main/embabel-agent-examples\" target=\"_blank\"\u003e\u003cstrong\u003eembabel-agent-examples\u003c/strong\u003e\u003c/a\u003e \u003cwbr/\u003esubdirectory of that repository. The coding agent doubles as an example and is in its own repository at \u003ca data-saferedirecturl=\"https://www.google.com/url?q=https://github.com/embabel/embabel-coding-agent\u0026amp;source=gmail\u0026amp;ust=1749208229884000\u0026amp;usg=AOvVaw2d-IijHO8xdVLlPKnEGofN\" href=\"https://github.com/embabel/embabel-coding-agent\" target=\"_blank\"\u003ehttps://github.com/embabel/\u003cwbr/\u003eembabel-coding-agent\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe plan to evolve examples like the coding agent and travel planner to the point where they\u0026#39;re not only helpful for developers learning Embabel but genuinely useful. I can definitely see some of them becoming interesting open-source projects in their own right.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n  \n    \u003cdiv\u003e \n        \u003ch2\u003eAbout the Author\u003c/h2\u003e \n\n        \n            \n                \n            \n            \u003cdiv data-id=\"author-A-N-M-Bazlur-Rahman\"\u003e\n                    \u003ch4\u003e\u003cstrong\u003eA N M Bazlur Rahman\u003c/strong\u003e\u003c/h4\u003e\n                    \n                \u003c/div\u003e\n        \n    \u003c/div\u003e\n\n\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-06-05T00:00:00Z",
  "modifiedTime": null
}
