{
  "id": "485abdc4-9556-47b8-a3cf-eaa1edf57691",
  "title": "Assigning and completing issues with coding agent in GitHub Copilot",
  "link": "https://github.blog/ai-and-ml/github-copilot/assigning-and-completing-issues-with-coding-agent-in-github-copilot/",
  "description": "Have you tried the new coding agent in GitHub Copilot? Here’s how developers are using it to work more efficiently. The post Assigning and completing issues with coding agent in GitHub Copilot appeared first on The GitHub Blog.",
  "author": "Alexandra Lietzke",
  "published": "Fri, 06 Jun 2025 16:00:00 +0000",
  "source": "https://github.blog/feed/",
  "categories": [
    "AI \u0026 ML",
    "GitHub Copilot",
    "AI agents",
    "coding agent"
  ],
  "byline": "Alexandra Lietzke",
  "length": 8641,
  "excerpt": "Have you tried the new coding agent in GitHub Copilot? Here’s how developers are using it to work more efficiently.",
  "siteName": "The GitHub Blog",
  "favicon": "https://github.blog/wp-content/uploads/2019/01/cropped-github-favicon-512.png?fit=192%2C192",
  "text": "You’ve used GitHub Copilot to help you write code in your IDE. Now, imagine assigning Copilot an issue, just like you would a teammate—and getting a fully tested pull request in return.  That’s the power of the new coding agent in GitHub Copilot. Built directly into GitHub, this agent starts working as soon as you assign it a GitHub Issue or prompt it in VS Code. Keeping you firmly in the pilot’s seat, the coding agent builds pull requests based on the issues you assign it. This isn’t just autocomplete. It’s a new class of software engineering agents that work asynchronously to help you move faster, clean up tech debt, and focus on the work that really matters. Let’s explore how this coding agent works and how it can help you find new ways of working faster. ✨ Oh, and if you’re a visual learner we have you covered. 👇 Coding agent in GitHub Copilot 101 This new coding agent, which is our first asynchronous software engineering agent, is built on GitHub Actions and works like a teammate. You assign it an issue, let it do the work, and then review its outputs before changing or accepting them. It also incorporates context from related issues or PR discussions and can follow custom repository instructions that your team has already set. You assign Copilot an issue and it plans the work, opens a pull request, writes the code, runs the tests, and then asks for your review. If you leave feedback, it’ll revise the PR and keep going until you approve.  The process isn’t instant—it takes a little time to compute and run. But it’s already helping developers work faster and more efficiently.  According to Brittany Ellich, Senior Software Engineer at GitHub, traditional advice for devs has been to do one thing at a time, and do it well. But with the new coding agent, GitHub can now help you do more things well, like: Offloading repetitive, boilerplate tasks like adding and extending unit tests Maintaining better issue hygiene and documentation with quick typo fixes and small refactors Improving user experience by fixing bugs, updating user interface features, and bolstering accessibility By assigning these low- to medium-complexity tasks to the coding agent, you may finally have the bandwidth to focus on higher-level problem solving and design, tackle that tech debt that’s been piling up, learn new skills, and more. Even though Copilot is doing the work, you’re in control the entire time: You decide what to assign, what to approve, and what should be changed. How to get the coding agent to complete an issue Step one: Write and assign the issue to Copilot This is where you’ll be most involved—and this step is crucial for success. Think of writing the issue like briefing a team member: The more context you give, the better the results (like any other prompt).  Make sure to include: Relevant background info: Why this task matters, what it touches, and any important history or context.  Expected outcome: What “done” looks like. Technical details: File names, functions, or components involved. Formatting or linting rules: These are especially important if you use custom scripts or auto-generated files. You can add these instructions for Copilot so it’s automatically reflected in every issue.  Once you’ve written the issue, it’s time to assign it to Copilot—just like you would a teammate. You can do this via github.com, the GitHub Mobile app, or through the GitHub CLI.  Copilot works best with well-scoped tasks, but it can handle larger ones. It just might take a little bit longer. You don’t have to assign only one issue; you can batch-assign multiple issues, which is great for tasks like increasing test coverage or updating documentation. Here are a few tips and tricks that we’ve found helpful: You can use issue templates with fields like “description” and “acceptance criteria” to make writing issues easier and more consistent across your team.  If your repo includes custom instructions (such as which files are auto-generated or how to run formatters), Copilot will use these to improve its output. The agent can actually see images included in its assigned issues on GitHub, so you can easily share images of what you want your new feature to look like, and the agent can run with it.  Step two: Copilot plans the code  Once you assign Copilot an issue, it will add an 👀 emoji reaction. Then it will kick off an agent session using GitHub Actions, which powers the integrated, secure, and fully customizable environment the coding agent is built on.  This environment is where Copilot can explore and analyze your codebase, run tests, and make changes. The coding agent will simultaneously open both a branch and a pull request, which will evolve as Copilot works.  Copilot will read your issue and break it down into a checklist of tasks, then update the pull request with this checklist. As it completes each task, Copilot checks it off and pushes commits to the branch. You can watch the session live, view the session logs later, or refresh the PR to see how Copilot is reasoning through the task. These are updated regularly for increased visibility, so you can easily spot problems if they arise. Step three: Copilot writes the code This is where the magic happens. Once you see the “Copilot started work” event in the pull request timeline, you’ll know the wheels are turning. Here’s what happens next: Copilot modifies your codebase based on the issue. It runs automated tests and linters if they’re present in your repo and updates or generates tests as needed. Copilot will also push commits iteratively as it completes tasks. You can see the work happening in real time, and if you notice that something looks off, you can step in at any point to make sure things are going in the right direction before Copilot passes it back to you. Step four: Review and merge the pull request This is another stage where you’ll need to be involved. Once Copilot finishes the work, it will tag you for review. You can either: Approve the pull request Leave comments Ask for changes Copilot will automatically request reviewers based on the rules you’ve set in your repo. And if needed, you can go through multiple review cycles until you get your desired outcome—just like with a human teammate.  Once the pull request is approved: The change can now follow your repo’s merge and deploy process. The agent session will end. If needed, a human can take over from the branch at any time.  🚨One important thing to note: The person who created the issue can’t be the final approver. You’ll need a peer, manager, or designated reviewer to give the green light. This promotes collaboration and ensures unreviewed or unsafe code doesn’t get merged. And you’re done! ✅  Like any other tool (or teammate), Copilot’s coding agent might need a little prodding to deliver exactly the output you want. Remember, the biggest factor to success starts with how you write the issue (Copilot can also help you write those faster).  Here are a few tips on how to get the most out of Copilot:  Write comprehensive issues: Clear, scoped, and well-documented issues lead to better results. Start small: Try using the agent for tests, docs, or simple refactors. Troubleshooting: If Copilot gets stuck, tag it in a comment and add more context. Iterating and refining the issue requirements can also help. Take this with you  AI and LLMs are improving at a rapid pace. “The models we’re using today are the worst ones we’ll ever use—because they’re only getting better,” says Ellich. And coding agents are already proving useful in real workflows.  Try using the coding agent on a sample repo. See what it can do. And start building your own agentic workflows. Happy coding! Visit the Docs to get started with the coding agent in GitHub Copilot. Written by Content Writer Explore more from GitHub Docs Everything you need to master GitHub, all in one place. Go to Docs GitHub Build what’s next on GitHub, the place for anyone from anywhere to build anything. Start building Customer stories Meet the companies and engineering teams that build with GitHub. Learn more Enterprise content Executive insights, curated just for you Get started",
  "image": "https://github.blog/wp-content/uploads/2025/04/wallpaper_copilot_generic_logo.png?fit=1920%2C1080",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003csection\u003e\n\t\n\u003cp\u003eYou’ve used GitHub Copilot to help you write code in your IDE. Now, imagine assigning Copilot an issue, just like you would a teammate—and getting a fully tested pull request in return. \u003c/p\u003e\n\n\n\n\u003cp\u003eThat’s the power of the new \u003ca href=\"https://github.blog/news-insights/product-news/github-copilot-meet-the-new-coding-agent/\"\u003ecoding agent in GitHub Copilot\u003c/a\u003e. Built directly into GitHub, this agent starts working as soon as you assign it a GitHub Issue or prompt it in VS Code. Keeping you firmly in the pilot’s seat, the coding agent builds pull requests based on the issues you assign it.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis isn’t just autocomplete. It’s a new class of software engineering agents that work asynchronously to help you move faster, clean up tech debt, and focus on the work that really matters. Let’s explore how this coding agent works and how it can help you find new ways of working faster. ✨\u003c/p\u003e\n\n\n\n\u003cp\u003eOh, and if you’re a visual learner we have you covered. 👇\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" poster=\"https://github.blog/wp-content/uploads/2025/06/Screenshot-2025-06-05-at-11.22.28 AM.png\" src=\"https://github.blog/wp-content/uploads/2025/06/Copilot-Coding-Agent-Overview-v3-Burned.mp4\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003ch2 id=\"h-coding-agent-in-github-copilot-101\"\u003eCoding agent in GitHub Copilot 101\u003c/h2\u003e\n\n\n\n\u003cp\u003eThis new coding agent, which is our first asynchronous software engineering agent, is built on GitHub Actions and works like a teammate. You assign it an issue, let it do the work, and then review its outputs before changing or accepting them. It also incorporates context from related issues or PR discussions and can follow custom repository instructions that your team has already set.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou assign Copilot an issue and it plans the work, opens a pull request, writes the code, runs the tests, and then asks for your review. If you leave feedback, it’ll revise the PR and keep going until you approve. \u003c/p\u003e\n\n\n\n\u003cp\u003eThe process isn’t instant—it takes a little time to compute and run. But it’s already helping developers work faster and more efficiently. \u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAccording to Brittany Ellich, Senior Software Engineer at GitHub, traditional advice for devs has been to do one thing at a time, and do it well. But with the new coding agent, GitHub can now help you do \u003cstrong\u003emore\u003c/strong\u003e things well, like:\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eOffloading repetitive, boilerplate tasks like adding and extending unit tests\u003c/li\u003e\n\n\n\n\u003cli\u003eMaintaining better issue hygiene and documentation with quick typo fixes and small refactors\u003c/li\u003e\n\n\n\n\u003cli\u003eImproving user experience by fixing bugs, updating user interface features, and bolstering accessibility\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eBy assigning these low- to medium-complexity tasks to the coding agent, you may finally have the bandwidth to focus on higher-level problem solving and design, tackle that tech debt that’s been piling up, learn new skills, and more.\u003c/p\u003e\n\n\n\n\u003cp\u003eEven though Copilot is doing the work, you’re in control the entire time: You decide what to assign, what to approve, and what should be changed.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003ch3 id=\"how-to-get-the-coding-agent-to-complete-an-issue\"\u003eHow to get the coding agent to complete an issue\u003c/h3\u003e\n\n\n\n\u003ch4 id=\"step-one-write-and-assign-the-issue-to-copilot\"\u003eStep one: Write and assign the issue to Copilot\u003c/h4\u003e\n\n\n\n\u003cp\u003eThis is where you’ll be most involved—and this step is crucial for success. Think of writing the issue like briefing a team member: The more context you give, the better the results (like any other \u003ca href=\"https://github.blog/ai-and-ml/github-copilot/github-for-beginners-how-to-get-llms-to-do-what-you-want/#what-is-prompt-engineering\"\u003eprompt\u003c/a\u003e). \u003c/p\u003e\n\n\n\n\u003cp\u003eMake sure to include:\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRelevant background info\u003c/strong\u003e: Why this task matters, what it touches, and any important history or context. \u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eExpected outcome\u003c/strong\u003e: What “done” looks like.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eTechnical details\u003c/strong\u003e: File names, functions, or components involved.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eFormatting or linting rules\u003c/strong\u003e: These are especially important if you use custom scripts or auto-generated files. You can add these \u003ca href=\"https://docs.github.com/en/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot\"\u003einstructions\u003c/a\u003e for Copilot so it’s automatically reflected in every issue. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eOnce you’ve written the issue, it’s time to assign it to Copilot—just like you would a teammate. You can do this via \u003ca href=\"http://github.com/\"\u003egithub.com\u003c/a\u003e, the GitHub Mobile app, or through the GitHub CLI. \u003c/p\u003e\n\n\n\n\u003cp\u003eCopilot works best with well-scoped tasks, but it can handle larger ones. It just might take a little bit longer. You don’t have to assign only one issue; you can batch-assign multiple issues, which is great for tasks like increasing test coverage or updating documentation.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere are a few tips and tricks that we’ve found helpful:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eYou can use \u003ca href=\"https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository\"\u003eissue templates\u003c/a\u003e with fields like “description” and “acceptance criteria” to make writing issues easier and more consistent across your team. \u003c/li\u003e\n\n\n\n\u003cli\u003eIf your repo includes custom instructions (such as which files are auto-generated or how to run formatters), Copilot will use these to improve its output.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe agent can actually see images included in its assigned issues on GitHub, so you can easily share images of what you want your new feature to look like, and the agent can run with it. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch4 id=\"step-two-copilot-plans-the-code\"\u003eStep two: Copilot plans the code \u003c/h4\u003e\n\n\n\n\u003cp\u003eOnce you assign Copilot an issue, it will add an 👀 emoji reaction. Then it will kick off an agent session using GitHub Actions, which powers the \u003ca href=\"https://github.com/newsroom/press-releases/coding-agent-for-github-copilot\"\u003eintegrated, secure, and fully customizable\u003c/a\u003e environment the coding agent is built on. \u003c/p\u003e\n\n\n\n\u003cp\u003eThis environment is where Copilot can explore and analyze your codebase, run tests, and make changes. The coding agent will simultaneously open both a branch and a pull request, which will evolve as Copilot works. \u003c/p\u003e\n\n\n\n\u003cp\u003eCopilot will read your issue and break it down into a checklist of tasks, then update the pull request with this checklist. As it completes each task, Copilot checks it off and pushes commits to the branch. You can watch the session live, view the session logs later, or refresh the PR to see how Copilot is reasoning through the task. These are updated regularly for increased visibility, so you can easily spot problems if they arise.\u003c/p\u003e\n\n\n\n\u003ch4 id=\"step-three-copilot-writes-the-code\"\u003eStep three: Copilot writes the code\u003c/h4\u003e\n\n\n\n\u003cp\u003eThis is where the magic happens. Once you see the “Copilot started work” event in the pull request timeline, you’ll know the wheels are turning. Here’s what happens next:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eCopilot modifies your codebase based on the issue.\u003c/li\u003e\n\n\n\n\u003cli\u003eIt runs automated tests and linters if they’re present in your repo and updates or generates tests as needed.\u003c/li\u003e\n\n\n\n\u003cli\u003eCopilot will also push commits iteratively as it completes tasks.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eYou can see the work happening in real time, and if you notice that something looks off, you can step in at any point to make sure things are going in the right direction before Copilot passes it back to you.\u003c/p\u003e\n\n\n\n\u003ch4 id=\"step-four-review-and-merge-the-pull-request\"\u003eStep four: Review and merge the pull request\u003c/h4\u003e\n\n\n\n\u003cp\u003eThis is another stage where you’ll need to be involved. Once Copilot finishes the work, it will tag you for review. You can either:\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eApprove the pull request\u003c/li\u003e\n\n\n\n\u003cli\u003eLeave comments\u003c/li\u003e\n\n\n\n\u003cli\u003eAsk for changes\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eCopilot will automatically request reviewers based on the rules you’ve set in your repo. And if needed, you can go through multiple review cycles until you get your desired outcome—just like with a human teammate. \u003c/p\u003e\n\n\n\n\u003cp\u003eOnce the pull request is approved:\u003cbr/\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eThe change can now follow your repo’s merge and deploy process.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe agent session will end.\u003c/li\u003e\n\n\n\n\u003cli\u003eIf needed, a human can take over from the branch at any time. \u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e🚨One important thing to note: The person who created the issue can’t be the final approver. You’ll need a peer, manager, or designated reviewer to give the green light. This promotes collaboration and ensures unreviewed or unsafe code doesn’t get merged.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eAnd you’re done!\u003c/strong\u003e ✅ \u003c/p\u003e\n\n\n\n\u003cp\u003eLike any other tool (or teammate), Copilot’s coding agent might need a little prodding to deliver exactly the output you want. Remember, the biggest factor to success starts with how you write the issue (\u003ca href=\"https://github.blog/changelog/2025-05-19-creating-issues-with-copilot-on-github-com-is-in-public-preview/\"\u003eCopilot can also help you write those faster\u003c/a\u003e). \u003c/p\u003e\n\n\n\n\u003cp\u003eHere are a few tips on how to get the most out of Copilot: \u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eWrite comprehensive issues\u003c/strong\u003e: Clear, scoped, and well-documented issues lead to better results.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eStart small\u003c/strong\u003e: Try using the agent for tests, docs, or simple refactors.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eTroubleshooting\u003c/strong\u003e: If Copilot gets stuck, tag it in a comment and add more context. Iterating and refining the issue requirements can also help.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003ch2 id=\"take-this-with-you\"\u003eTake this with you \u003c/h2\u003e\n\n\n\n\u003cp\u003eAI and LLMs are improving at a rapid pace. “The models we’re using today are the worst ones we’ll ever use—because they’re only getting better,” says Ellich. And coding agents are already proving useful in real workflows. \u003c/p\u003e\n\n\n\n\u003cp\u003eTry using the coding agent on a sample repo. See what it can do. And start building your own agentic workflows. Happy coding!\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://docs.github.com/en/enterprise-cloud@latest/copilot/using-github-copilot/using-copilot-coding-agent-to-work-on-tasks/about-assigning-tasks-to-copilot\"\u003e\u003cstrong\u003eVisit the Docs\u003c/strong\u003e\u003c/a\u003e to get started with the coding agent in GitHub Copilot.\u003c/p\u003e\n\n\t\n\n\t\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tWritten by\t\u003c/h2\u003e\n\t\n\t\t\t\u003carticle\u003e\n\t\u003cdiv\u003e\n\t\t\t\t\t\u003cdiv\u003e\n\t\t\t\t\u003cpicture\u003e\n\t\t\t\t\t\u003csource srcset=\"https://avatars.githubusercontent.com/u/188614820?v=4\u0026amp;s=200\" width=\"120\" height=\"120\" media=\"(min-width: 768px)\"/\u003e\n\t\t\t\t\t\u003cimg src=\"https://avatars.githubusercontent.com/u/188614820?v=4\u0026amp;s=200\" alt=\"Alexandra Lietzke\" width=\"80\" height=\"80\" loading=\"lazy\" decoding=\"async\"/\u003e\n\t\t\t\t\u003c/picture\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\t\n\t\t\t\t\t\u003cp\u003eContent Writer\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003c/article\u003e\n\t\u003c/div\u003e\n\u003c/section\u003e\u003cdiv\u003e\n\t\u003ch2\u003e\n\t\tExplore more from GitHub\t\u003c/h2\u003e\n\t\u003cdiv\u003e\n\t\t\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg\" width=\"44\" height=\"44\" alt=\"Docs\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tDocs\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eEverything you need to master GitHub, all in one place.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Go to Docs; ref_location:bottom recirculation;\" href=\"https://docs.github.com/\" target=\"_blank\" aria-label=\"Go to Docs\"\u003e\n\t\t\t\t\tGo to Docs\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg\" width=\"44\" height=\"44\" alt=\"GitHub\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tGitHub\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eBuild what’s next on GitHub, the place for anyone from anywhere to build anything.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Start building; ref_location:bottom recirculation;\" href=\"https://github.com/\" target=\"_blank\" aria-label=\"Start building\"\u003e\n\t\t\t\t\tStart building\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg\" width=\"44\" height=\"44\" alt=\"Customer stories\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tCustomer stories\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eMeet the companies and engineering teams that build with GitHub.\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Learn more; ref_location:bottom recirculation;\" href=\"https://github.com/customer-stories\" target=\"_blank\" aria-label=\"Learn more\"\u003e\n\t\t\t\t\tLearn more\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\u003cdiv\u003e\n\t\t\u003cp\u003e\u003cimg src=\"https://github.blog/wp-content/uploads/2022/05/careers.svg\" width=\"44\" height=\"44\" alt=\"Enterprise content\"/\u003e\u003c/p\u003e\u003ch3\u003e\n\t\t\tEnterprise content\t\t\u003c/h3\u003e\n\t\t\u003cp\u003eExecutive insights, curated just for you\u003c/p\u003e\n\t\t\t\t\t\u003cp\u003e\n\t\t\t\t\u003ca data-analytics-click=\"Blog, click on module, text: Get started; ref_location:bottom recirculation;\" href=\"https://github.com/solutions/executive-insights\" target=\"_blank\" aria-label=\"Get started\"\u003e\n\t\t\t\t\tGet started\t\t\t\t\t\t\t\t\t\t\t\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"\u003e\u003cpath fill-rule=\"evenodd\" d=\"M10.604 1h4.146a.25.25 0 01.25.25v4.146a.25.25 0 01-.427.177L13.03 4.03 9.28 7.78a.75.75 0 01-1.06-1.06l3.75-3.75-1.543-1.543A.25.25 0 0110.604 1zM3.75 2A1.75 1.75 0 002 3.75v8.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 12.25v-3.5a.75.75 0 00-1.5 0v3.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-8.5a.25.25 0 01.25-.25h3.5a.75.75 0 000-1.5h-3.5z\"\u003e\u003c/path\u003e\u003c/svg\u003e\n\t\t\t\t\t\t\t\t\t\u003c/a\u003e\n\t\t\t\u003c/p\u003e\n\t\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-06-06T16:00:00Z",
  "modifiedTime": null
}
