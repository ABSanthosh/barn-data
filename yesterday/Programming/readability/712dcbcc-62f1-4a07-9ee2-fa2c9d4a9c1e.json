{
  "id": "712dcbcc-62f1-4a07-9ee2-fa2c9d4a9c1e",
  "title": "C# Language Support in ReSharper and Rider 2024.3",
  "link": "https://blog.jetbrains.com/dotnet/2024/11/12/csharp-language-support-in-resharper-and-rider-2024-3/",
  "description": "Our upcoming 2024.3 release marks a huge milestone for our development process but especially for our users. ReSharper and Rider 2024.3 will be simshipped along with .NET 9 and C# 13! Yes, you heard rightâ€”no more waiting an extra few weeks or using our EAP builds to take advantage of the latest and greatest C# [â€¦]",
  "author": "Matthias Koch",
  "published": "Tue, 12 Nov 2024 15:26:18 +0000",
  "source": "https://blog.jetbrains.com/feed",
  "categories": [
    "net-tools",
    "how-tos",
    "net",
    "net-9",
    "c",
    "c-13",
    "resharper",
    "rider",
    "unity"
  ],
  "byline": "Matthias Koch",
  "length": 11307,
  "excerpt": "Our upcoming 2024.3 release marks a huge milestone for our development process but especially for our users. ReSharper and Rider 2024.3 will be simshipped along with .NET 9 and C# 13! Yes, you heard r",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Essential productivity kit for .NET and game developers .NET Tools How-To'sC# Language Support in ReSharper and Rider 2024.3 Our upcoming 2024.3 release marks a huge milestone for our development process but especially for our users. ReSharper and Rider 2024.3 will be simshipped along with .NET 9 and C# 13! Yes, you heard rightâ€”no more waiting an extra few weeks or using our EAP builds to take advantage of the latest and greatest C# of all time. If all goes well (ðŸ¤ž), you can enjoy your most loved language in your most loved IDE starting tomorrow! In this blog post, we will cover new features that have been added to our C# language support over the 2024.3 release cycle. Note that some C# 13 features have already been covered in the 2024.2 release, including escape characters and ref struct interfaces. Make sure to check out our three-part series if youâ€™ve missed it! Partial Properties One of the most anticipated features in C# 13 are partial properties. Previously, the concept of partial members was limited to types and methods. While partial types (classes, structs, records) mainly help organize your code into multiple parts and avoid cluttered single files, partial members allow you to define a single member (methods, properties, indexers) in any of these parts with only one part implementing it. This concept becomes particularly powerful in combination with source generators that automatically provide the correct and optimized implementation based on your member definitions: // User code public partial Person : INotifyPropertyChanged { [JsonPropertyName(\"custom-name\")] public partial string Name { get; set; } } // Generated code partial Person { // More attributes allowed! public partial string Name { get =\u003e field; set =\u003e SetField(ref field, value); } // ... } With ReSharper and Rider 2024.3, we are adding support for partial properties syntax and updating our code highlightings and generators. For instance, you can generate property definitions through: The Implement property in another part of class quick-fix Implementing a partial property in another part of the type The Generate Partial Members action from the Alt+Enter menu Generating multiple partial properties The code completion after typing partial Code completion for missing partial properties You will also find new and updated context actions to manage existing partial definitions. For instance, you can change the accessibility from one part of a member definition, and it will reflect on all the other parts: Changing access modifiers or partial properties Or you can merge partial members into one definition: Merging partial properties into one definition Field Keyword The long-awaited field keyword for properties is finally coming to C# 13 as a preview feature. Previously, you had to explicitly declare a backing field for every non-trivial property. With the new field keyword, you can implement semi-auto-properties by referencing the compiler-generated backing field in your custom accessor: // Before C# 13 class Person { private string _name; public string Name { get =\u003e _name; set =\u003e _name = value.Trim(); } } // From C# 13 class Person { public string Name { get; set =\u003e field = value.Trim(); } } Once youâ€™ve added \u003cLangVersion\u003epreview\u003c/LangVersion\u003e to your project file, ReSharper and Rider will recognize the old pattern and offer to Replace with â€˜fieldâ€™ keyword: Replacing backing fields with the field keyword ReSharper and Rider will also help you to Remove redundant bodies where the property value is only returned or set: Removing redundant bodies for accessor bodies With this syntax, some popular patterns involving properties become notably compact. For instance, as part of ourINotifyPropertyChanged support, weâ€™ve updated our To property with â€˜SetFieldâ€™ change notification context action to implement properties more efficiently and easy to read: Implementing property change notifications Another very common pattern is input value validation. While previously, you were forced to implement getter/setter accessors and declare a backing field, ReSharper and Rider will now allow you to use parameter-checking context actions to convert to a succinct implementation for just the set or init accessor: Adding null checks for properties To get the most compact formatting layout, make sure to enableÂ Place simple accessor on single lineÂ in your code style settings! Code style settings for property accessors System.Threading.Lock Type In .NET 9, we are getting a new type System.Threading.Lock designed for thread synchronization. In C#, you can implement thread synchronization through the lock statement over any reference type object. Often, this is done with a private object field that is created solely for locking purposes: class LockObject { private readonly object _syncRoot = new(); public void M() { lock (_syncRoot) { // work } } } While technically alright, these object fields do not tell how theyâ€™re intended to be used apart from their name. Locking is often performed over existing objects accessible to other locking types, which can have unintended side effects. Firstly, entering the block can be unnecessarily delayed from other classes that lock on the same object. Secondly, since the runtime might have to promote the lock when Object.GetHashCode() is called or thread contention happens, the following lock acquisition or release will be slightly more expensive. The System.Threading.Lock was introduced to solve both of the issues described above. It clearly expresses the intent of fields used for locking, while it also avoids performance degradation. In 2024.3, we detect old field synchronization patterns and offer the replacement with the Lock type: Converting to System.Threading.Lock in synchronization patterns Merge Switch-Case Sections In our last 2024.2 release, we introduced a new quick-fix Extract Common Code, which can extract common statements from if and switch statements. In the new 2024.3 release, we are extending this family of code duplication fixes with a new quick-fix to merge duplicated switch cases into a single case with broader conditions: Merging duplicated switch section bodies As a reminder, these inspections can also hint at code that was supposed to be different but ended up unchanged after copy-pasting it. So make sure to carefully investigate each duplication before merging it! IDE Tooltips Colorization As with every release, we not only focus on supporting new language features but also enhancing existing functionality to ensure our .NET IDEs stay aligned with modern IDE capabilities. In this release, we reviewed nearly all C# errors, warnings, and informational messages to introduce editor-like text colorization wherever possible. Overall, approximately 600 messages were upgraded, making many of the tooltips you see daily more structured and easier to read: Colorization and cleanup of tooltips And this is just the beginningâ€”utilizing the colorization infrastructure, we plan to enhance other error messages, particularly type conversion errors. During the refactoring, we also introduced colorization in various other editor tooltips and popups: Colorization of classes in â€˜missing referencesâ€™ popup (Rider only) Colorization of classes in type hierarchy popup (ReSharper only) Obsolete and EditorBrowsable Over many years, weâ€™ve been struggling to properly support [Obsolete] and [EditorBrowsable] in our code completion. That is mainly because we cannot afford toÂ askÂ each code entity in a completion list (types, members) about its traits regarding these two attributes. Caching, one of the most obvious solutions, is not well-suited for the source code domain, where code semantics can change drastically with each keypress. However, it can be effective for compiled code from assemblies, though it has the drawback of using more memory and performance on the first read. In 2024.3, weâ€™ve managed to find the sweet spot of trade-offs to support both the [Obsolete] and [EditorBrowsable] attributes while also ensuring that the IDE performance remains unaffected. Types and members marked as obsolete are now de-prioritized in the completion list sorting. This should be particularly useful for Unity developers, where some common base classes have many obsolete members. Types and members marked with EditorBrowsableState.Never are filtered out from the list by default: Filtering and sorting in code completion lists You can change the filter behavior for the [EditorBrowsable] attribute in the code completion settings: Code completion settings for the [EditorBrowsable] attribute Operation Priority Quick-Fixes In C#, certain operations, such as enum flag checks or nested ternary conditional expressions, may require extra parentheses to ensure correct priority and readability. Adding these parentheses manually can be cumbersome and disrupt your coding flow. To streamline this, weâ€™ve introduced a Prioritize operation using parentheses quick-fix that automatically inserts any necessary parentheses in these common scenarios, allowing you to focus on more critical aspects of your code: Prioritizing operations using parentheses Conclusion .NET 9 and C# 13 bring powerful advancements in runtime and language. ReSharper and Rider are here to complement them with the best-in-class and most productive IDE experience! ðŸŽ¤ðŸ‘‹ As alwaysâ€”make sure to use the comment section below to let us know about other features around .NET and C# youâ€™d like to see in your developer toolbox! Subscribe to a monthly digest curated from the .NET Tools blog: Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2024/11/csharp-language-support-in-20243-social.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \u003cdiv\u003e\n                        \u003ca href=\"https://blog.jetbrains.com/dotnet/\"\u003e\n                            \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2019/01/Frame-1321314548.svg\" alt=\"Dotnet logo\"/\u003e\n                                                                                                \n                                                                                    \u003c/a\u003e\n                                                    \u003cp\u003eEssential productivity kit for .NET and game developers\u003c/p\u003e\n                                            \u003c/div\u003e\n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/dotnet/category/net-tools/\"\u003e.NET Tools\u003c/a\u003e\n\t\t\t\u003ca href=\"https://blog.jetbrains.com/dotnet/category/how-tos/\"\u003eHow-To\u0026#39;s\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"major-updates\"\u003eC# Language Support in ReSharper and Rider 2024.3\u003c/h2\u003e                    \n                    \n\u003cp\u003eOur upcoming 2024.3 release marks a \u003cb\u003ehuge milestone\u003c/b\u003e for our development process but \u003cem\u003eespecially\u003c/em\u003e for our users. \u003cb\u003eReSharper and Rider 2024.3 will be\u003cem\u003e \u003c/em\u003e\u003ca href=\"https://lingoport.com/i18n-term/simship/\" target=\"_blank\" rel=\"noopener\"\u003esimshipped\u003c/a\u003e along with .NET 9 and C# 13!\u003c/b\u003e Yes, you heard rightâ€”no more waiting an extra few weeks or using our EAP builds to take advantage of the latest and greatest C# of all time. If all goes well (ðŸ¤ž), you can enjoy your most loved language in your most loved IDE starting tomorrow!\u003c/p\u003e\n\n\n\n\n\n\u003cp\u003eIn this blog post, we will cover new features that have been added to our C# language support over the 2024.3 release cycle. Note that some C# 13 features have already been covered in the 2024.2 release, including \u003ca href=\"https://blog.jetbrains.com/dotnet/2024/08/07/escape-character-extract-common-code-params-modifier-out-vars-csharp-language-support-in-2024-2/\"\u003eescape characters\u003c/a\u003e and \u003ca href=\"https://blog.jetbrains.com/dotnet/2024/08/08/equality-analysis-ref-structs-culture-previews-using-directives-csharp-language-support-in-2024-2/\"\u003eref struct interfaces\u003c/a\u003e. Make sure to check out our \u003ca href=\"https://blog.jetbrains.com/dotnet/2024/08/07/escape-character-extract-common-code-params-modifier-out-vars-csharp-language-support-in-2024-2/\"\u003ethree-part series\u003c/a\u003e if youâ€™ve missed it!\u003c/p\u003e\n\n\n\n\u003ch2\u003ePartial Properties\u003c/h2\u003e\n\n\n\n\u003cp\u003eOne of the most anticipated features in C# 13 are \u003ca href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/partial-member\" target=\"_blank\" rel=\"noopener\"\u003epartial properties\u003c/a\u003e. Previously, the concept of partial members was limited to types and methods. While partial types (classes, structs, records) mainly help organize your code into multiple parts and avoid cluttered single files, partial members allow you to define a single member (methods, properties, indexers) in any of these parts with only one part implementing it. This concept becomes particularly powerful in combination with \u003ca href=\"https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.cookbook.md\" target=\"_blank\" rel=\"noopener\"\u003esource generators\u003c/a\u003e that automatically provide the correct and optimized implementation based on your member definitions:\u003c/p\u003e\n\n\n                        \u003cdiv\u003e\n                \u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// User code\u003c/span\u003e\n\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003epartial\u003c/span\u003e \u003cspan\u003ePerson\u003c/span\u003e : \u003cspan\u003eINotifyPropertyChanged\u003c/span\u003e\n{\n    [\u003cspan\u003eJsonPropertyName\u003c/span\u003e(\u003cspan\u003e\u0026#34;custom-name\u0026#34;\u003c/span\u003e)]\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003epartial\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e \u003cspan\u003eName\u003c/span\u003e { \u003cspan\u003eget\u003c/span\u003e; \u003cspan\u003eset\u003c/span\u003e; }\n}\n\n\u003cspan\u003e// Generated code\u003c/span\u003e\n\u003cspan\u003epartial\u003c/span\u003e \u003cspan\u003ePerson\u003c/span\u003e\n{\n    \u003cspan\u003e// More attributes allowed!\u003c/span\u003e\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003epartial\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e \u003cspan\u003eName\u003c/span\u003e\n    {\n        \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003efield\u003c/span\u003e;\n        \u003cspan\u003eset\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003eSetField\u003c/span\u003e(\u003cspan\u003eref\u003c/span\u003e \u003cspan\u003efield\u003c/span\u003e, \u003cspan\u003evalue\u003c/span\u003e);\n    }\n    \u003cspan\u003e// ...\u003c/span\u003e\n}\u003c/code\u003e\u003c/pre\u003e\n                \n            \u003c/div\u003e\n            \n\n\n\n\n\n\n\u003cp\u003eWith ReSharper and Rider 2024.3, we are adding support for partial properties syntax and updating our code highlightings and generators. For instance, you can generate property definitions through:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eThe \u003cem\u003eImplement property in another part of class\u003c/em\u003e quick-fix\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/implementing-a-partial-property-in-another-part-of-the-type.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/implementing-a-partial-property-in-another-part-of-the-type.gif\" alt=\"Implementing a partial property in another part of the type\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eImplementing a partial property in another part of the type\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003eThe \u003ca href=\"https://www.jetbrains.com/help/rider/Code_Generation__Partial_Methods.html\" target=\"_blank\" rel=\"noopener\"\u003e\u003cem\u003eGenerate Partial Members\u003c/em\u003e\u003c/a\u003e action from the \u003ckbd\u003eAlt\u003c/kbd\u003e+\u003ckbd\u003eEnter\u003c/kbd\u003e menu\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/generating-multiple-partial-properties.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/generating-multiple-partial-properties.gif\" alt=\"Generating multiple partial properties\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eGenerating multiple partial properties\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003eThe code completion after typing \u003ccode\u003epartial\u003c/code\u003e\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/code-completion-for-missing-partial-properties.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/code-completion-for-missing-partial-properties.gif\" alt=\"Code completion for missing partial properties\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eCode completion for missing partial properties\u003c/figcaption\u003e\n\u003c/figure\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eYou will also find new and updated context actions to manage existing partial definitions. For instance, you can change the accessibility from one part of a member definition, and it will reflect on all the other parts:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/changing-access-modifiers-or-partial-properties.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/changing-access-modifiers-or-partial-properties.gif\" alt=\"Changing access modifiers or partial properties\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eChanging access modifiers or partial properties\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003eOr you can \u003cem\u003emerge partial members\u003c/em\u003e into one definition:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/merging-partial-properties-into-one-definition.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/merging-partial-properties-into-one-definition.gif\" alt=\"Merging partial properties into one definition\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eMerging partial properties into one definition\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003ch2\u003eField Keyword\u003c/h2\u003e\n\n\n\n\u003cp\u003eThe long-awaited \u003ccode\u003efield\u003c/code\u003e keyword for properties is finally coming to C# 13 as a preview feature. Previously, you had to explicitly declare a backing field for every non-trivial property. With the new \u003ccode\u003efield\u003c/code\u003e keyword, you can implement \u003cem\u003esemi-auto-properties\u003c/em\u003e by referencing the compiler-generated backing field in your custom accessor:\u003c/p\u003e\n\n\n                        \u003cdiv\u003e\n                \u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Before C# 13\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003ePerson\u003c/span\u003e\n{\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e \u003cspan\u003e_name\u003c/span\u003e;\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e \u003cspan\u003eName\u003c/span\u003e\n    {\n        \u003cspan\u003eget\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e_name\u003c/span\u003e;\n        \u003cspan\u003eset\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003e_name\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eTrim\u003c/span\u003e();\n    }\n}\n\n\u003cspan\u003e// From C# 13\u003c/span\u003e\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003ePerson\u003c/span\u003e\n{\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e \u003cspan\u003eName\u003c/span\u003e\n    {\n        \u003cspan\u003eget\u003c/span\u003e;\n        \u003cspan\u003eset\u003c/span\u003e \u003cspan\u003e=\u0026gt;\u003c/span\u003e \u003cspan\u003efield\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eTrim\u003c/span\u003e();\n    }\n}\u003c/code\u003e\u003c/pre\u003e\n                \n            \u003c/div\u003e\n            \n\n\n\n\n\n\n\u003cp\u003eOnce youâ€™ve added \u003ccode\u003e\u0026lt;LangVersion\u0026gt;preview\u0026lt;/LangVersion\u0026gt;\u003c/code\u003e to your project file, ReSharper and Rider will recognize the old pattern and offer to \u003cem\u003eReplace with â€˜fieldâ€™ keyword\u003c/em\u003e:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/replacing-backing-fields-with-the-field-keyword.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/replacing-backing-fields-with-the-field-keyword.gif\" alt=\"Replacing backing fields with the field keyword\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eReplacing backing fields with the field keyword\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003eReSharper and Rider will also help you to \u003cem\u003eRemove redundant bodies\u003c/em\u003e where the property value is only returned or set:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/removing-redundant-bodies-for-accessor-bodies.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/removing-redundant-bodies-for-accessor-bodies.gif\" alt=\"Removing redundant bodies for accessor bodies\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eRemoving redundant bodies for accessor bodies\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003eWith this syntax, some popular patterns involving properties become notably compact. For instance, as part of our\u003ca href=\"https://www.jetbrains.com/help/resharper/Coding_Assistance__INotifyPropertyChanged_Support.html\" target=\"_blank\" rel=\"noopener\"\u003e\u003ccode\u003eINotifyPropertyChanged\u003c/code\u003e support\u003c/a\u003e, weâ€™ve updated our \u003cem\u003eTo property with â€˜SetFieldâ€™ change notification\u003c/em\u003e context action to implement properties more efficiently and easy to read:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/implementing-property-change-notifications.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/implementing-property-change-notifications.gif\" alt=\"Implementing property change notifications\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eImplementing property change notifications\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnother very common pattern is input value validation. While previously, you were forced to implement getter/setter accessors and declare a backing field, ReSharper and Rider will now allow you to use parameter-checking context actions to convert to a succinct implementation for just the \u003ccode\u003eset\u003c/code\u003e or \u003ccode\u003einit\u003c/code\u003e accessor:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/adding-null-checks-for-properties.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/adding-null-checks-for-properties.gif\" alt=\"Adding null checks for properties\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eAdding null checks for properties\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cspan\u003eTo get the most compact formatting layout, make sure to enableÂ \u003cem\u003ePlace simple accessor on single line\u003c/em\u003eÂ in your code style settings\u003c/span\u003e!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/code-style-settings-for-property-accessors.png\" alt=\"Code style settings for property accessors\" width=\"660\"/\u003e\n   \u003cfigcaption\u003eCode style settings for property accessors\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003ch2\u003eSystem.Threading.Lock Type\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn .NET 9, we are getting a new type \u003ccode\u003e\u003ca href=\"https://learn.microsoft.com/en-us/dotnet/api/system.threading.lock?view=net-9.0\" target=\"_blank\" rel=\"noopener\"\u003eSystem.Threading.Lock\u003c/a\u003e\u003c/code\u003e designed for \u003ca href=\"https://learn.microsoft.com/en-us/dotnet/standard/threading/overview-of-synchronization-primitives\" target=\"_blank\" rel=\"noopener\"\u003ethread synchronization\u003c/a\u003e. In C#, you can implement thread synchronization through the \u003ccode\u003elock\u003c/code\u003e statement over any reference type object. Often, this is done with a private \u003ccode\u003eobject\u003c/code\u003e field that is created solely for locking purposes:\u003c/p\u003e\n\n\n                        \u003cdiv\u003e\n                \u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eLockObject\u003c/span\u003e\n{\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003ereadonly\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e_syncRoot\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e();\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003eM\u003c/span\u003e()\n    {\n        \u003cspan\u003elock\u003c/span\u003e (\u003cspan\u003e_syncRoot\u003c/span\u003e)\n        {\n            \u003cspan\u003e// work\u003c/span\u003e\n        }\n    }\n}\u003c/code\u003e\u003c/pre\u003e\n                \n            \u003c/div\u003e\n            \n\n\n\n\n\n\n\u003cp\u003eWhile technically alright, these \u003ccode\u003eobject\u003c/code\u003e fields do not tell how theyâ€™re intended to be used apart from their name. Locking is often performed over existing objects accessible to other locking types, which can have unintended side effects. Firstly, entering the block can be unnecessarily delayed from other classes that lock on the same object. Secondly, since the runtime might have to \u003ca href=\"https://devblogs.microsoft.com/premier-developer/managed-object-internals-part-2-object-header-layout-and-the-cost-of-locking/\" target=\"_blank\" rel=\"noopener\"\u003epromote the lock\u003c/a\u003e when \u003ccode\u003eObject.GetHashCode()\u003c/code\u003e is called or thread contention happens, the following lock acquisition or release will be slightly more expensive.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eSystem.Threading.Lock\u003c/code\u003e was introduced to solve both of the issues described above. It clearly expresses the intent of fields used for locking, while it also avoids performance degradation. In 2024.3, we detect old field synchronization patterns and offer the replacement with the \u003ccode\u003eLock\u003c/code\u003e type:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/converting-to-systemthreadinglock-in-synchronization-patterns.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/converting-to-systemthreadinglock-in-synchronization-patterns.gif\" alt=\"Converting to System.Threading.Lock in synchronization patterns\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eConverting to System.Threading.Lock in synchronization patterns\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003ch2\u003eMerge Switch-Case Sections\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn our last 2024.2 release, we introduced a new quick-fix \u003ca href=\"https://blog.jetbrains.com/dotnet/2024/08/07/escape-character-extract-common-code-params-modifier-out-vars-csharp-language-support-in-2024-2/#extract-common-code\"\u003e\u003cem\u003eExtract Common Code\u003c/em\u003e\u003c/a\u003e, which can extract common statements from \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eswitch\u003c/code\u003e statements. In the new 2024.3 release, we are extending this family of code duplication fixes with a new quick-fix to merge duplicated \u003ccode\u003eswitch\u003c/code\u003e cases into a single case with broader conditions:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/merging-duplicated-switch-section-bodies.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/merging-duplicated-switch-section-bodies.gif\" alt=\"Merging duplicated switch section bodies\" width=\"660\"/\u003e\n    \u003cfigcaption\u003eMerging duplicated switch section bodies\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003eAs a reminder, these inspections can also hint at code that was \u003cem\u003esupposed\u003c/em\u003e to be different but ended up unchanged after copy-pasting it. So make sure to carefully investigate each duplication before merging it!\u003c/p\u003e\n\n\n\n\u003ch2\u003eIDE Tooltips Colorization\u003c/h2\u003e\n\n\n\n\u003cp\u003eAs with every release, we not only focus on supporting new language features but also enhancing existing functionality to ensure our .NET IDEs stay aligned with modern IDE capabilities. In this release, we reviewed nearly all C# errors, warnings, and informational messages to introduce editor-like text colorization wherever possible. Overall, approximately 600 messages were upgraded, making many of the tooltips you see daily more structured and easier to read:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/colorization-and-cleanup-of-tooltips.png\" alt=\"Colorization and cleanup of tooltips\" width=\"1320\"/\u003e\n   \u003cfigcaption\u003eColorization and cleanup of tooltips\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnd this is just the beginningâ€”utilizing the colorization infrastructure, we plan to enhance other error messages, particularly type conversion errors. During the refactoring, we also introduced colorization in various other editor tooltips and popups:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/colorization-of-classes-in-missing-references-popup-rider-only.png\" alt=\"Colorization of classes in â€˜missing referencesâ€™ popup (Rider only)\" width=\"660\"/\u003e\n   \u003cfigcaption\u003eColorization of classes in â€˜missing referencesâ€™ popup (Rider only)\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/colorization-of-classes-in-type-hierarchy-popup-resharper-only.png\" alt=\"Colorization of classes in type hierarchy popup (ReSharper only)\" width=\"660\"/\u003e\n   \u003cfigcaption\u003eColorization of classes in type hierarchy popup (ReSharper only)\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003ch2\u003eObsolete and EditorBrowsable\u003c/h2\u003e\n\n\n\n\u003cp\u003eOver many years, weâ€™ve been struggling to properly support \u003ca href=\"https://learn.microsoft.com/en-us/dotnet/api/system.obsoleteattribute?view=net-8.0\" target=\"_blank\" rel=\"noopener\"\u003e\u003ccode\u003e[Obsolete]\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.editorbrowsableattribute?view=net-8.0\" target=\"_blank\" rel=\"noopener\"\u003e\u003ccode\u003e[EditorBrowsable]\u003c/code\u003e\u003c/a\u003e in our code completion. That is mainly because we cannot afford toÂ askÂ each code entity in a completion list (types, members) about its traits regarding these two attributes. Caching, one of the most obvious solutions, is not well-suited for the source code domain, where code semantics can change drastically with each keypress. However, it can be effective for compiled code from assemblies, though it has the drawback of using more memory and performance on the first read.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn 2024.3, weâ€™ve managed to find the sweet spot of trade-offs to support both the \u003ccode\u003e[Obsolete]\u003c/code\u003e and \u003ccode\u003e[EditorBrowsable]\u003c/code\u003e attributes while also ensuring that the IDE performance remains unaffected. Types and members marked as obsolete are now de-prioritized in the completion list sorting. This should be particularly useful for Unity developers, where some common base classes have many obsolete members. Types and members marked with \u003ccode\u003eEditorBrowsableState.Never\u003c/code\u003e are filtered out from the list by default:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/filtering-and-sorting-in-code-completion-lists.png\" alt=\"Filtering and sorting in code completion lists\" width=\"660\"/\u003e\n   \u003cfigcaption\u003eFiltering and sorting in code completion lists\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003cp\u003eYou can change the filter behavior for the \u003ccode\u003e[EditorBrowsable]\u003c/code\u003e attribute in the code completion settings:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/code-completion-settings-for-the-editorbrowsable-attribute.png\" alt=\"Code completion settings for the [EditorBrowsable] attribute\" width=\"660\"/\u003e\n   \u003cfigcaption\u003eCode completion settings for the [EditorBrowsable] attribute\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003ch2\u003eOperation Priority Quick-Fixes\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn C#, certain operations, such as enum flag checks or nested ternary conditional expressions, may require extra parentheses to ensure correct priority and readability. Adding these parentheses manually can be cumbersome and disrupt your coding flow. To streamline this, weâ€™ve introduced a \u003cem\u003ePrioritize operation using parentheses\u003c/em\u003e quick-fix that automatically inserts any necessary parentheses in these common scenarios, allowing you to focus on more critical aspects of your code:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\n    \u003cimg src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/prioritizing-operations-using-parentheses.jpg\" data-gif-src=\"https://blog.jetbrains.com/wp-content/uploads/2024/11/prioritizing-operations-using-parentheses.gif\" alt=\"Prioritizing operations using parentheses\" width=\"660\"/\u003e\n    \u003cfigcaption\u003ePrioritizing operations using parentheses\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\n\n\n\u003cp\u003e.NET 9 and C# 13 bring powerful advancements in runtime and language. ReSharper and Rider are here to complement them with the best-in-class and most productive IDE experience! ðŸŽ¤ðŸ‘‹\u003c/p\u003e\n\n\n\n\u003cp\u003eAs alwaysâ€”make sure to use the comment section below to let us know about other features around .NET and C# youâ€™d like to see in your developer toolbox!\u003c/p\u003e\n                    \n                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to a monthly digest curated from the .NET Tools blog:\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "13 min read",
  "publishedTime": null,
  "modifiedTime": null
}
