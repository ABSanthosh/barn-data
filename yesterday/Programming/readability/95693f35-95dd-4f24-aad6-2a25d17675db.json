{
  "id": "95693f35-95dd-4f24-aad6-2a25d17675db",
  "title": "Gemini 2.0 Deep Dive: Code Execution",
  "link": "https://developers.googleblog.com/en/gemini-20-deep-dive-code-execution/",
  "description": "This blog post introduces Gemini's code execution feature, which allows the AI model to generate and run Python code for tasks like solving equations, data analysis, and creating visualizations.",
  "author": "",
  "published": "",
  "source": "http://feeds.feedburner.com/GDBcode",
  "categories": null,
  "byline": "Jason Stephen, Luciano Martins",
  "length": 4176,
  "excerpt": "This blog post introduces Gemini's code execution feature, which allows the AI model to generate and run Python code for tasks like solving equations, data analysis, and creating visualizations.",
  "siteName": "",
  "favicon": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/meta/apple-touch-icon.png",
  "text": "Code execution gives Gemini models access to a Python sandbox, allowing the models to run code and learn from the results. With code execution enabled, Gemini models can perform calculations, analyze complex data sets, and create visualizations on the fly - ultimately providing better answers to user queries. It is now generally available in both Google AI Studio and the Gemini API via the Gemini 2.0 models.Code execution as a toolYou can enable code execution via toggle in Google AI Studio’s “Tools” panel, or from the Gemini API as a tools variable (shown below). from google import genai from google.genai import types client = genai.Client(api_key=\"GEMINI_API_KEY\") response = client.models.generate_content( model='gemini-2.0-flash', contents=\"\"\" What is the sum of the first 50 prime numbers? Generate and run code for the calculation. \"\"\", config=types.GenerateContentConfig( tools=[types.Tool( code_execution=types.ToolCodeExecution )] ) ) When code execution is added as a tool, the model can access the code execution sandbox to run code for up to 30 seconds at a time, and up to 5 times without re-prompting. The code execution environment includes libraries like Numpy, Pandas, and Matplotlib (for graph rendering). The full list of available libraries can be found in our API docs and we are looking to expand the set of supported libraries soon.File IO and Graph OutputWith Gemini 2.0, we’ve updated our code execution tool to allow file input into the code execution sandbox, as well as graphs \u0026 chart output using Matplotlib. These updates lead to a broader set of use cases for code execution. With these updates you can now:Perform logical analysis to understand complex user-uploaded files.Visualize data with charts and graphs supported by Matplotlib.Debug local code files.[Experimental] Unlock code execution's real-time capabilities with the Multimodal Live API.[Experimental] Combine code execution with tools like Grounding with Google Search.[Experimental] Leverage code execution from Gemini 2.0 Thinking Mode.And more...Let's look at two practical examples of code execution in action:Real-time data analysis and visualization with Gemini modelsBy combining the Multimodal Live API and code execution, this demo demonstrates a live conversation with the Gemini model, utilizing both voice input and code execution. We ask Gemini models to provide a list of Tom Cruise movies, rank them by runtime, and then create a bar chart visualizing this data using Matplotlib. Gemini models generate the Python code to perform these tasks and update the chart based on our further requests (changing bar colors). Sorry, your browser doesn't support playback for this video (Right-click and open video in new window to hear audio) Combining Thinking model and code execution to solve complex problemsThis demo uses the Gemini 2.0 Flash Thinking Experimental model and code execution to solve a classic optimization challenge. We ask Gemini to find the shortest route for a salesperson visiting five Spanish cities and returning to their starting point. Gemini generates Python code, debugs it iteratively (correcting an initial library error), calculates distances, and ultimately visualizes the optimal route on a Matplotlib graph. Sorry, your browser doesn't support playback for this video (Right-click and open video in new window to hear audio) Get started with Gemini 2.0 Code ExecutionWant to try yourself? Check out the GitHub to get hands-on with code execution. For further examples and demos please visit the Gemini API docs, where you can explore scenarios of code execution being used and more.We welcome you to join the Gemini API Developer forum to share your use cases and feedback on how we can improve code execution for you. In the short term, we are exploring expanded library support, supporting other input modalities like PDFs, and supporting multi-tool use. Happy building!",
  "image": "https://storage.googleapis.com/gweb-developer-goog-blog-assets/images/code-execution-gemini-api.2e16d0ba.fill-1200x600.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n    \n      \n    \n\n    \n\n    \n\n    \n\n    \n    \u003cdiv\u003e\n          \n\n\u003cdiv\u003e\n    \u003cp data-block-key=\"tdet7\"\u003eCode execution gives Gemini models access to a Python sandbox, allowing the models to run code and learn from the results. With code execution enabled, Gemini models can perform calculations, analyze complex data sets, and create visualizations on the fly - ultimately providing better answers to user queries. It is now generally available in both \u003ca href=\"https://aistudio.google.com/\"\u003eGoogle AI Studio\u003c/a\u003e and the \u003ca href=\"https://ai.google.dev/gemini-api/docs/code-execution\"\u003eGemini API\u003c/a\u003e via the Gemini 2.0 models.\u003c/p\u003e\u003ch2 data-block-key=\"7rqrt\"\u003e\u003cb\u003e\u003cbr/\u003e\u003c/b\u003eCode execution as a tool\u003c/h2\u003e\u003cp data-block-key=\"8grd8\"\u003eYou can enable code execution via toggle in Google AI Studio’s “Tools” panel, or from the Gemini API as a tools variable (shown below).\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003egoogle\u003c/span\u003e \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003egenai\u003c/span\u003e\n\u003cspan\u003efrom\u003c/span\u003e \u003cspan\u003egoogle.genai\u003c/span\u003e \u003cspan\u003eimport\u003c/span\u003e \u003cspan\u003etypes\u003c/span\u003e\n\n\u003cspan\u003eclient\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003egenai\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eClient\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eapi_key\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;GEMINI_API_KEY\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\n\u003cspan\u003eresponse\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eclient\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emodels\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egenerate_content\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n  \u003cspan\u003emodel\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#39;gemini-2.0-flash\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003econtents\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003cspan\u003e     What is the sum of the first 50 prime numbers?\u003c/span\u003e\n\u003cspan\u003e     Generate and run code for the calculation.\u003c/span\u003e\n\u003cspan\u003e  \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n  \u003cspan\u003econfig\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003etypes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eGenerateContentConfig\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003etools\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003etypes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eTool\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n      \u003cspan\u003ecode_execution\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003etypes\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eToolCodeExecution\u003c/span\u003e\n    \u003cspan\u003e)]\u003c/span\u003e\n  \u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e  \u003cdiv\u003e\n    \u003cp data-block-key=\"tdet7\"\u003eWhen code execution is added as a tool, the model can access the code execution sandbox to run code for up to 30 seconds at a time, and up to 5 times without re-prompting. The code execution environment includes libraries like Numpy, Pandas, and Matplotlib (for graph rendering). The full list of available libraries can be found in our \u003ca href=\"https://ai.google.dev/gemini-api/docs/code-execution?lang=python\"\u003eAPI docs\u003c/a\u003e and we are looking to expand the set of supported libraries soon.\u003c/p\u003e\u003ch2 data-block-key=\"33u0s\"\u003e\u003cb\u003e\u003cbr/\u003e\u003c/b\u003eFile IO and Graph Output\u003c/h2\u003e\u003cp data-block-key=\"6r73u\"\u003eWith Gemini 2.0, we’ve updated our code execution tool to allow file input into the code execution sandbox, as well as graphs \u0026amp; chart output using Matplotlib. These updates lead to a broader set of use cases for code execution. With these updates you can now:\u003c/p\u003e\u003cul\u003e\u003cli data-block-key=\"3s6em\"\u003ePerform logical analysis to understand complex user-uploaded files.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"9mjpt\"\u003eVisualize data with charts and graphs supported by Matplotlib.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"6aco3\"\u003eDebug local code files.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"981ba\"\u003e[Experimental] Unlock code execution\u0026#39;s real-time capabilities with the Multimodal Live API.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"5i0qn\"\u003e[Experimental] Combine code execution with tools like Grounding with Google Search.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"a41uo\"\u003e[Experimental] Leverage code execution from Gemini 2.0 Thinking Mode.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\u003cli data-block-key=\"4olu5\"\u003eAnd more...\u003c/li\u003e\u003c/ul\u003e\u003cp data-block-key=\"cu8s4\"\u003eLet\u0026#39;s look at two practical examples of code execution in action:\u003c/p\u003e\u003ch3 data-block-key=\"45l2g\"\u003e\u003cb\u003e\u003cbr/\u003eReal-time data analysis and visualization with Gemini models\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"9vk63\"\u003eBy combining the \u003ca href=\"https://ai.google.dev/gemini-api/docs/multimodal-live\"\u003eMultimodal Live API\u003c/a\u003e and code execution, this demo demonstrates a live conversation with the Gemini model, utilizing both voice input and code execution. We ask Gemini models to provide a list of Tom Cruise movies, rank them by runtime, and then create a bar chart visualizing this data using Matplotlib. Gemini models generate the Python code to perform these tasks and update the chart based on our further requests (changing bar colors).\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \n        \u003cvideo autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" poster=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/wagtailvideo-krjqnecb_thumb.jpg\"\u003e\n\u003csource src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/demo-gemini-flash-lite-google-ai-studio-tom-cruise.mp4\" type=\"video/mp4\"/\u003e\n\u003cp\u003eSorry, your browser doesn\u0026#39;t support playback for this video\u003c/p\u003e\n\n\u003c/video\u003e\n    \n    \n        \n            \u003cp\u003e\n                (Right-click and open video in new window to hear audio)\n            \u003c/p\u003e\n        \n    \n\u003c/div\u003e  \u003cdiv\u003e\n    \u003ch3 data-block-key=\"tdet7\"\u003e\u003cb\u003eCombining Thinking model and code execution to solve complex problems\u003c/b\u003e\u003c/h3\u003e\u003cp data-block-key=\"f45ol\"\u003eThis demo uses the Gemini 2.0 Flash Thinking Experimental model and code execution to solve a classic optimization challenge. We ask Gemini to find the shortest route for a salesperson visiting five Spanish cities and returning to their starting point. Gemini generates Python code, debugs it iteratively (correcting an initial library error), calculates distances, and ultimately visualizes the optimal route on a Matplotlib graph.\u003c/p\u003e\n\u003c/div\u003e   \n\n\u003cdiv\u003e\n    \n        \u003cvideo autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" poster=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/wagtailvideo-ig_s23p3_thumb.jpg\"\u003e\n\u003csource src=\"https://storage.googleapis.com/gweb-developer-goog-blog-assets/original_videos/demo-gemini-flash-lite-google-ai-studio_3.mp4\" type=\"video/mp4\"/\u003e\n\u003cp\u003eSorry, your browser doesn\u0026#39;t support playback for this video\u003c/p\u003e\n\n\u003c/video\u003e\n    \n    \n        \n            \u003cp\u003e\n                (Right-click and open video in new window to hear audio)\n            \u003c/p\u003e\n        \n    \n\u003c/div\u003e  \u003cdiv\u003e\n    \u003ch2 data-block-key=\"tdet7\"\u003eGet started with Gemini 2.0 Code Execution\u003c/h2\u003e\u003cp data-block-key=\"ksfi\"\u003eWant to try yourself? Check out \u003ca href=\"https://github.com/google-gemini/cookbook/blob/main/quickstarts/Code_Execution.ipynb\"\u003ethe GitHub\u003c/a\u003e to get hands-on with code execution. For further examples and demos please visit the \u003ca href=\"https://ai.google.dev/gemini-api/docs/code-execution\"\u003eGemini API docs\u003c/a\u003e, where you can explore scenarios of code execution being used and more.\u003c/p\u003e\u003cp data-block-key=\"1dp63\"\u003e\u003cbr/\u003eWe welcome you to join the \u003ca href=\"https://discuss.ai.google.dev/c/gemini-api/4\"\u003eGemini API Developer forum\u003c/a\u003e to share your use cases and feedback on how we can improve code execution for you. In the short term, we are exploring expanded library support, supporting other input modalities like PDFs, and supporting multi-tool use. Happy building!\u003c/p\u003e\n\u003c/div\u003e \n      \u003c/div\u003e\n    \n\n    \n\n    \n    \n    \n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-03-06T00:00:00Z",
  "modifiedTime": null
}
