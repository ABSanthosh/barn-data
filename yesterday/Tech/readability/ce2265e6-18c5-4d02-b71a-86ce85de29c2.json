{
  "id": "ce2265e6-18c5-4d02-b71a-86ce85de29c2",
  "title": "1 bug, $50k in bounties, a Zendesk backdoor",
  "link": "https://gist.github.com/hackermondev/68ec8ed145fcee49d2f5e2b9d2cf2e52",
  "description": "Comments",
  "author": "",
  "published": "Sat, 12 Oct 2024 11:55:12 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "hackermondev",
  "length": 13178,
  "excerpt": "1 bug, $50,000+ in bounties, how Zendesk intentionally left a backdoor in hundreds of Fortune 500 companies - zendesk.md",
  "siteName": "Gist",
  "favicon": "https://github.githubassets.com/assets/apple-touch-icon-180x180-a80b8e11abe2.png",
  "text": "1 bug, $50,000+ in bounties, how Zendesk intentionally left a backdoor in hundreds of Fortune 500 companies hi, i'm daniel. i'm a 15-year-old with some programming experience and i do a little bug hunting in my free time. here's the insane story of how I found a single bug that affected over half of all Fortune 500 companies: say hello to zendesk If you've spent some time online, you’ve probably come across Zendesk. Zendesk is a customer service tool used by some of the world’s top companies. It’s easy to set up: you link it to your company’s support email (like support@company.com), and Zendesk starts managing incoming emails and creating tickets. You can handle these tickets yourself or have a support team do it for you. Zendesk is a billion-dollar company, trusted by big names like Cloudflare. Personally, I’ve always found it surprising that these massive companies, worth billions, rely on third-party tools like Zendesk instead of building their own in-house ticketing systems. your weakest link As the saying goes, “You’re only as strong as your weakest link.” Since Zendesk is just seen as a basic ticketing tool, companies often set it up without much thought. The most common setup I've seen is is forwarding all emails from support@company.com to Zendesk. Why is that dangerous? Many companies use their @company.com domain for Single Sign-On (SSO), which lets employees quickly log in to internal tools. By connecting Zendesk to the same domain, companies unknowingly create a potential security gap. Zendesk handles all emails for the domain it’s configured for, which means if your SSO system doesn’t properly validate email addresses, anyone who gains access to your Zendesk could potentially exploit this and access your internal systems. (I’ll explain more on this later.) email spoofing At the beginning of the year, I discovered a serious vulnerability in Zendesk that allowed attackers to read customer support tickets from any company using Zendesk. All they had to do was sent a crafted email to a Support email handled by Zendesk. The shocking part? Zendesk didn’t seem to care. The bug itself was surprisingly simple. Zendesk had no effective protection against email spoofing, and this oversight made it possible to exploit their email collaboration feature to gain access to others’ tickets. Here’s how it worked: When you send an email to a company’s Zendesk support portal (e.g., support@company.com), Zendesk creates a new support ticket. To keep track of the email thread, Zendesk automatically generates a reply-to address, which looks like this: support+id{id}@company.com, where {id} is the unique ticket number. This address ensures that any future replies you send go directly to the same ticket. Zendesk also has a feature for ticket collaboration. If you CC someone on one of your email replies, Zendesk automatically adds them to the ticket, allowing them to see the full ticket history in the support portal. The exploit was simple: if an attacker knew the support email address and the ticket ID (which are usually easy to guess since ticket IDs are incremental), they could use email spoofing to impersonate the original sender. By sending a fake email to support+id{id}@company.com from the requestor’s email address and CCing their own email, Zendesk would think the email was legitimate. It would then add the attacker’s email to the ticket, giving them full access to the entire ticket history. This meant an attacker could effectively join any ongoing support conversation, and read sensitive information—all because Zendesk didn’t have proper safeguards against email spoofing. Bug Prerequisites: Requestor's email The ticket ID (since Zendesk ticket IDs are incremental, an attacker could brute-force or estimate it) Access to a public support portal \"out of scope,\" said no attacker ever As soon as I discovered this vulnerability, I reported it through Zendesk’s bug bounty program, fully expecting it to be taken seriously and fixed quickly. A week later, I was hit with a disappointing response: Because my bug relied on email spoofing, which was considered \"out of scope\" for their HackerOne program, they rejected my report. It was unbelievable. This response wasn’t even from an actual Zendesk team member. Many companies, like Zendesk, use a HackerOne service to triage reports so their own team can focus on fixing bugs instead of verifying submissions. Realizing this, I asked for the report to be forwarded to an actual Zendesk staff member for review. A few days later, I got another frustrating reply: Zendesk refused to reconsider. Despite the security risk, they wouldn’t act on the report because it fell outside their program’s scope. Of course, they’d change their minds in a few weeks—but more on that later. escalating this to a full Slack takeover I could have reported the email spoofing bug to individual companies that were affected by it, as it was possible to patch individual instances by disabling email collaboration, prevent attackers from adding themselves to tickets. But I wanted to make a bigger impact. That's when I came across TICKETTRICK, a blog post from 2017. In it, security researcher Inti De Ceukelaire detailed how he exploited Zendesk to infiltrate the private Slack workspaces of hundreds of companies. Since many companies use Slack SSO on the same domain as Zendesk, the researcher figured out he could complete email verifications through a support@company.com email, and gain access to private Slack channels. Back then, Zendesk wasn't as big and there were some bugs that allowed anyone to view your tickets if they had your email. I realized that I could replicate his exploit using my bug, but with a few challenges to overcome. Enter OAuth After his disclosure (this was years ago!), Slack changed their email verification system to include a random token in email addresses. Inti's exploit (like mine) required the attacker to know the sending email address of the verification code. Slack added random tokens to their email addresses to combat similar attacks in the future. It was impossible to know what email they would send the verification email from (which is one of the prerequisites required for my exploit) as they generated a random token everytime. Unless... While Slack used a random email token when sending email verification, neither Google or Apple did. Slack supported both methods for OAuth login. It was the most simple bypass. Slack intoduced OAuth login just a few years ago and must have completely forgotten about their protections against this type of attacks. So now the exploit was simple, create a Google account with a support@company.com email, request verification code, use my bug to access the ticket Zendesk automatically creates when it arrives, verify Google account, login with Google to Slack. This was perfect...except it wouldn't work with Google. Google sent verification email from noreply@google.com and Zendesk had started blocking emails from noreply@ addresses from being automatically created as tickets (probably after the TICKETTRICK disclosure too) which meant we wouldn't be able to recieve it. Apple didn't do this though, Apple sent verification emails from appleid@ address, jackpot. reproduction steps, apple -\u003e zendesk -\u003e slack The steps to execute the attack now were simple: Create an Apple account with support@company.com email and request a verification code, Apple sends verification code from appleid@id.apple.com to support@company.com and Zendesk automatically creates a ticket At the same time, create a ticket on company.com support portal from my own email address, this allows me to keep track of a ID range Use the email spoofing bug I mentioned earlier to attempt to add yourself to every ticket within the range from earlier const sendmail = require('sendmail')(); // Assuming the ticket you created in step #2 was assigned a ticket ID of #453 // verification email landed somewhere near there const range = [448, 457]; for (let i = range[0]; i \u003c range[1]; i++) { // Send spoofed emails from Apple to Zendesk sendmail({ from: 'appleid@id.apple.com', to: `support+id${i}@company.com`, cc: 'daniel@wearehackerone.com', subject: '', html: 'comment body', }, function (err, reply) { console.log(err \u0026\u0026 err.stack) console.dir(reply) }); }; Login to a company.com support portal (usually at support.company.com) from your account (daniel@wearehackerone.com) and view your CCed tickets. Enter the verification code in Apple Use Slack's \"Login with Apple\" feature and log in with the Apple account connected to company.com's email I replicated this 6-step reproduction steps across hundreds of vulnerable Zendesk and Slack instances. After getting everything ready, I started individually reporting the bug to companies using Zendesk. aftermath I spent about a week reporting the vulnerability to individual companies, some of them took immediate action and patched their instances, while others argued that it was a Zendesk issue. Then, something interesting happened—a comment appeared on my original HackerOne report: I couldn’t help but find it amusing—they were now asking me to keep the report confidential, despite having initially dismissed it as out of scope. Some companies must have contacted Zendesk after recieving my report and the pressure from this issue had essentially forced Zendesk’s hand. I hadn’t mentioned the Slack exploit in my original report to them because I hadn’t discovered it at that point, now they wanted full detailed reproduction steps for the Slack takeover. I provided the proof of concept for the Slack vulnerability, and they confirmed the issue. Though they claimed they had \"started working\" on a fix, it would actually take them over two months to resolve it. Once companies vulnerable to this were alerted to the issue, many of them quickly disabled Zendesk’s email collaboration feature to protect their instances. Over the course of my reporting, I earned more than $50,000 in bounties from individual companies on HackerOne and other platforms. Unsurprisingly, Zendesk didn’t come out of this looking good. At least one or two companies reportedly cut ties with Zendesk after my disclosure, canceling their agreements altogether. zendesk's fix (and my $0 bounty) On July 2, 2024—two months after I submitted the report—Zendesk finally confirmed that they had fixed the issue. Here’s a statement from their Offensive Security Leader: In most cases, when an end user submits a support request by email, the email becomes a new ticket or adds a comment to an existing ticket. However, in certain cases, the email may be suspended. Suspending an email means putting it aside for further review. It's not necessarily spam. It's just not a ticket in Zendesk Support yet. It remains in limbo until somebody reviews it and decides whether to accept or reject it. We use two spam filters, Cloudmark and Rspamd EAP to help determine suspicious characteristics in messages. Depending on the score received by these tools, messages may be suspended. If you are curious, we publish a full list of causes for ticket suspension. In the attack scenario explained here, Cloudmark had very low spam scores of while RSpamD had very high spam scores; unfortunately we weren’t using the RSpamD score in this case, otherwise many of the emails would have been suspended and limited the ability to add CCs at all. The first fix we implemented was to Automatically switch to RSPAMD spam analysis when: Our automatic ticket threading is triggered to thread an new email into a existing ticket and; We haven’t previously suspended the message due to the Cloudmark score. In addition to this, we also implemented filters to automatically suspend the following classes of emails: User verification emails sent by Apple based on the Reply-To and Message-Id header values Non-transactional emails from from googleworkspace-noreply@google.com Over the coming months, we will continue to look into opportunities to strengthen our Sender Authentication functionality and provide customers with more gradual and advanced security controls over the types of emails that get suspended or rejected. Despite fixing the issue, Zendesk ultimately chose not to award a bounty for my report. Their reasoning? I had broken HackerOne's disclosure guidelines by sharing the vulnerability with affected companies. I didn’t bother to argue :) conclusion What started as a small email bug turned into an exploit that allowed me to infiltrate the internal systems of some of the world’s largest companies. While Zendesk eventually fixed the vulnerability, the journey to get there was a frustrating mix of rejections, slow responses, and ultimately no recognition for the report. But that’s the reality of bug hunting—sometimes you win, sometimes you don’t. If you enjoyed this write-up and want to stay updated on more of my bug hunting adventures, follow me on Twitter/X @hackermondev for future blog posts and insights. read next? how I stumbled upon a Discord server and left with a $4000 bounty",
  "image": "https://github.githubassets.com/assets/gist-og-image-54fd7dc0713e.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n    1 bug, $50,000+ in bounties, how Zendesk intentionally left a backdoor in hundreds of Fortune 500 companies\n  \u003c/p\u003e\u003cdiv id=\"file-zendesk-md\"\u003e\n    \u003carticle itemprop=\"text\"\u003e\u003cp dir=\"auto\"\u003ehi, i\u0026#39;m daniel. i\u0026#39;m a 15-year-old with some programming experience and i do a little bug hunting in my free time. here\u0026#39;s the insane story of how I found a single bug that affected over half of all Fortune 500 companies:\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003esay hello to zendesk\u003c/h2\u003e\u003ca id=\"user-content-say-hello-to-zendesk\" aria-label=\"Permalink: say hello to zendesk\" href=\"#say-hello-to-zendesk\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you\u0026#39;ve spent some time online, you’ve probably come across Zendesk.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eZendesk is a customer service tool used by some of the world’s top companies. It’s easy to set up: you link it to your company’s support email (like \u003ca href=\"mailto:support@company.com\"\u003esupport@company.com\u003c/a\u003e), and Zendesk starts managing incoming emails and creating tickets. You can handle these tickets yourself or have a support team do it for you. Zendesk is a billion-dollar company, trusted by big names like Cloudflare.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003ePersonally, I’ve always found it surprising that these massive companies, worth billions, rely on third-party tools like Zendesk instead of building their own in-house ticketing systems.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eyour weakest link\u003c/h2\u003e\u003ca id=\"user-content-your-weakest-link\" aria-label=\"Permalink: your weakest link\" href=\"#your-weakest-link\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAs the saying goes, “You’re only as strong as your weakest link.” Since Zendesk is just seen as a basic ticketing tool, companies often set it up without much thought. The most common setup I\u0026#39;ve seen is is forwarding all emails from \u003ccode\u003esupport@company.com\u003c/code\u003e to Zendesk.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhy is that dangerous? Many companies use their @company.com domain for Single Sign-On (SSO), which lets employees quickly log in to internal tools. By connecting Zendesk to the same domain, companies unknowingly create a potential security gap. Zendesk handles all emails for the domain it’s configured for, which means if your SSO system doesn’t properly validate email addresses, anyone who gains access to your Zendesk could potentially exploit this and access your internal systems. (I’ll explain more on this later.)\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eemail spoofing\u003c/h2\u003e\u003ca id=\"user-content-email-spoofing\" aria-label=\"Permalink: email spoofing\" href=\"#email-spoofing\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAt the beginning of the year, I discovered a serious vulnerability in Zendesk that allowed attackers to read customer support tickets from any company using Zendesk. All they had to do was sent a crafted email to a Support email handled by Zendesk. The shocking part? Zendesk didn’t seem to care.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe bug itself was surprisingly simple. Zendesk had no effective protection against email spoofing, and this oversight made it possible to exploit their email collaboration feature to gain access to others’ tickets.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eHere’s how it worked: When you send an email to a company’s Zendesk support portal (e.g., \u003ccode\u003esupport@company.com\u003c/code\u003e), Zendesk creates a new support ticket. To keep track of the email thread, Zendesk automatically generates a reply-to address, which looks like this: \u003ccode\u003esupport+id{id}@company.com\u003c/code\u003e, where \u003ccode\u003e{id}\u003c/code\u003e is the unique ticket number. This address ensures that any future replies you send go directly to the same ticket.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eZendesk also has a feature for ticket collaboration. If you CC someone on one of your email replies, Zendesk automatically adds them to the ticket, allowing them to see the full ticket history in the support portal.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe exploit was simple: if an attacker knew the support email address and the ticket ID (which are usually easy to guess since ticket IDs are incremental), they could use email spoofing to impersonate the original sender. By sending a fake email to \u003ccode\u003esupport+id{id}@company.com\u003c/code\u003e from the requestor’s email address and CCing their own email, Zendesk would think the email was legitimate. It would then add the attacker’s email to the ticket, giving them full access to the entire ticket history.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis meant an attacker could effectively join any ongoing support conversation, and read sensitive information—all because Zendesk didn’t have proper safeguards against email spoofing.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBug Prerequisites:\u003c/p\u003e\n\u003cul dir=\"auto\"\u003e\n\u003cli\u003eRequestor\u0026#39;s email\u003c/li\u003e\n\u003cli\u003eThe ticket ID (since Zendesk ticket IDs are incremental, an attacker could brute-force or estimate it)\u003c/li\u003e\n\u003cli\u003eAccess to a public support portal\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003e\u0026#34;out of scope,\u0026#34; said no attacker ever\u003c/h2\u003e\u003ca id=\"user-content-out-of-scope-said-no-attacker-ever\" aria-label=\"Permalink: \u0026#34;out of scope,\u0026#34; said no attacker ever\" href=\"#out-of-scope-said-no-attacker-ever\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAs soon as I discovered this vulnerability, I reported it through Zendesk’s bug bounty program, fully expecting it to be taken seriously and fixed quickly. A week later, I was hit with a disappointing response:\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/60828015/375600604-ac8f16ef-97a5-4519-a6fd-d49c0ac0c7fe.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDA2MDQtYWM4ZjE2ZWYtOTdhNS00NTE5LWE2ZmQtZDQ5YzBhYzBjN2ZlLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWMyMGQ4YTAwN2VjMDZhMDE1M2MzZWFkMzFhZDkyOGI4MDA2YTA0YWFjNjI3MjZmZDE0YjhmZWRiM2ExNjQ2NTQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.CQKFE1D9pjvEnT-1DBIyKeSgWxEkqvM8YZFhpQBxsfo\"\u003e\u003cimg width=\"782\" alt=\"image\" src=\"https://private-user-images.githubusercontent.com/60828015/375600604-ac8f16ef-97a5-4519-a6fd-d49c0ac0c7fe.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDA2MDQtYWM4ZjE2ZWYtOTdhNS00NTE5LWE2ZmQtZDQ5YzBhYzBjN2ZlLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWMyMGQ4YTAwN2VjMDZhMDE1M2MzZWFkMzFhZDkyOGI4MDA2YTA0YWFjNjI3MjZmZDE0YjhmZWRiM2ExNjQ2NTQmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.CQKFE1D9pjvEnT-1DBIyKeSgWxEkqvM8YZFhpQBxsfo\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eBecause my bug relied on email spoofing, which was considered \u0026#34;out of scope\u0026#34; for their HackerOne program, they rejected my report. It was unbelievable.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis response wasn’t even from an actual Zendesk team member. Many companies, like Zendesk, use a HackerOne service to triage reports so their own team can focus on fixing bugs instead of verifying submissions. Realizing this, I asked for the report to be forwarded to an actual Zendesk staff member for review. A few days later, I got another frustrating reply:\u003c/p\u003e\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/60828015/375601586-ffd6f4e7-d772-4f53-b4f3-4e32a43d3905.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDE1ODYtZmZkNmY0ZTctZDc3Mi00ZjUzLWI0ZjMtNGUzMmE0M2QzOTA1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg1MzNlMTMzYjc2MWQ0MjlkNDRmZGNiOWMwZTViZDRmMDc0MDBjMzdhNGU0YmZiNzliODNmZDdmNzgzYjA0NDgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.mmLegK5xsE6f6MlSoOHp0-yVxeIOUJK2-29n3axbhXo\"\u003e\u003cimg width=\"949\" alt=\"image\" src=\"https://private-user-images.githubusercontent.com/60828015/375601586-ffd6f4e7-d772-4f53-b4f3-4e32a43d3905.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDE1ODYtZmZkNmY0ZTctZDc3Mi00ZjUzLWI0ZjMtNGUzMmE0M2QzOTA1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg1MzNlMTMzYjc2MWQ0MjlkNDRmZGNiOWMwZTViZDRmMDc0MDBjMzdhNGU0YmZiNzliODNmZDdmNzgzYjA0NDgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.mmLegK5xsE6f6MlSoOHp0-yVxeIOUJK2-29n3axbhXo\"/\u003e\u003c/a\u003e\n\u003cp dir=\"auto\"\u003eZendesk refused to reconsider. Despite the security risk, they wouldn’t act on the report because it fell outside their program’s scope. Of course, they’d change their minds in a few weeks—but more on that later.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eescalating this to a full Slack takeover\u003c/h2\u003e\u003ca id=\"user-content-escalating-this-to-a-full-slack-takeover\" aria-label=\"Permalink: escalating this to a full Slack takeover\" href=\"#escalating-this-to-a-full-slack-takeover\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eI could have reported the email spoofing bug to individual companies that were affected by it, as it was possible to patch individual instances by disabling email collaboration, prevent attackers from adding themselves to tickets. But I wanted to make a bigger impact.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThat\u0026#39;s when I came across \u003ca href=\"https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c\" rel=\"nofollow\"\u003eTICKETTRICK\u003c/a\u003e, a blog post from 2017. In it, security researcher Inti De Ceukelaire detailed how he exploited Zendesk to infiltrate the private Slack workspaces of hundreds of companies. Since many companies use Slack SSO on the same domain as Zendesk, the researcher figured out he could complete email verifications through a \u003ccode\u003esupport@company.com\u003c/code\u003e email, and gain access to private Slack channels. Back then, Zendesk wasn\u0026#39;t as big and there were some bugs that allowed anyone to view your tickets if they had your email.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eI realized that I could replicate his exploit using my bug, but with a few challenges to overcome.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch3 dir=\"auto\"\u003eEnter OAuth\u003c/h3\u003e\u003ca id=\"user-content-enter-oauth\" aria-label=\"Permalink: Enter OAuth\" href=\"#enter-oauth\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eAfter his disclosure (this was years ago!), Slack changed their email verification system to include a random token in email addresses.\u003c/p\u003e\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/60828015/375606032-eb140eaa-541e-4546-bd8e-fd675b6ab43e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDYwMzItZWIxNDBlYWEtNTQxZS00NTQ2LWJkOGUtZmQ2NzViNmFiNDNlLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTFlMmIxNTQxMTJlZGM0NDBkOTcwZGIzZWQzMGUxOGQ3M2RkZGVhMmYxYTQ1MDRjODdiYjlhY2Y2NTRkMjgwMTgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.jFXPNOgzBgPYO6x2dss9cVYYyhthnNfIlm_3g6BGkks\"\u003e\u003cimg width=\"327\" alt=\"image\" src=\"https://private-user-images.githubusercontent.com/60828015/375606032-eb140eaa-541e-4546-bd8e-fd675b6ab43e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDYwMzItZWIxNDBlYWEtNTQxZS00NTQ2LWJkOGUtZmQ2NzViNmFiNDNlLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTFlMmIxNTQxMTJlZGM0NDBkOTcwZGIzZWQzMGUxOGQ3M2RkZGVhMmYxYTQ1MDRjODdiYjlhY2Y2NTRkMjgwMTgmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.jFXPNOgzBgPYO6x2dss9cVYYyhthnNfIlm_3g6BGkks\"/\u003e\u003c/a\u003e\n\u003cp dir=\"auto\"\u003eInti\u0026#39;s exploit (like mine) required the attacker to know the sending email address of the verification code. Slack added random tokens to their email addresses to combat similar attacks in the future. It was impossible to know what email they would send the verification email from (which is one of the prerequisites required for my exploit) as they generated a random token everytime. Unless...\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhile Slack used a random email token when sending email verification, neither Google or Apple did. Slack supported both methods for OAuth login.\u003c/p\u003e\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/60828015/375606552-fa1760ab-8ae0-4b1b-a172-6d4ba2463b95.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDY1NTItZmExNzYwYWItOGFlMC00YjFiLWExNzItNmQ0YmEyNDYzYjk1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWI5ZmRhZDk4ODU0NTNmNGEyZjNkOWQzMmQxNTFiMjNkMTMxMDkxZjkwYjljZWNhMzMzOTBjODI3ZjI0NmI3MjAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.l9-lay3yKQkrOtkay0_gDCE-AEOwi7T2iC31gwsGWnc\"\u003e\u003cimg width=\"477\" alt=\"image\" src=\"https://private-user-images.githubusercontent.com/60828015/375606552-fa1760ab-8ae0-4b1b-a172-6d4ba2463b95.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDY1NTItZmExNzYwYWItOGFlMC00YjFiLWExNzItNmQ0YmEyNDYzYjk1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWI5ZmRhZDk4ODU0NTNmNGEyZjNkOWQzMmQxNTFiMjNkMTMxMDkxZjkwYjljZWNhMzMzOTBjODI3ZjI0NmI3MjAmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.l9-lay3yKQkrOtkay0_gDCE-AEOwi7T2iC31gwsGWnc\"/\u003e\u003c/a\u003e\n\u003cp dir=\"auto\"\u003eIt was the most simple bypass. Slack intoduced OAuth login just a few years ago and must have completely forgotten about their protections against this type of attacks.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSo now the exploit was simple, create a Google account with a \u003ccode\u003esupport@company.com\u003c/code\u003e email, request verification code, use my bug to access the ticket Zendesk automatically creates when it arrives, verify Google account, login with Google to Slack.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThis was perfect...except it wouldn\u0026#39;t work with Google. Google sent verification email from \u003ccode\u003enoreply@google.com\u003c/code\u003e and Zendesk had started blocking emails from \u003ccode\u003enoreply@\u003c/code\u003e addresses from being automatically created as tickets (probably after the TICKETTRICK disclosure too) which meant we wouldn\u0026#39;t be able to recieve it.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eApple didn\u0026#39;t do this though, Apple sent verification emails from \u003ccode\u003eappleid@\u003c/code\u003e address, jackpot.\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/60828015/375607789-92f473e1-4aef-4e50-a92c-d486480b842d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDc3ODktOTJmNDczZTEtNGFlZi00ZTUwLWE5MmMtZDQ4NjQ4MGI4NDJkLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZmODI3ZWM1NWFlYjI1MjliMzYyOTNmMWE5NTMyZmY5MWJjNWJkNGZmZGY3NzZlNjY2OWIxZTM2YzM3YmIyYjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.j1sbBgwDuBJjGbw8lMmY5qaoWM3rzZ_yNmSygbE_yNI\"\u003e\u003cimg width=\"336\" alt=\"image\" src=\"https://private-user-images.githubusercontent.com/60828015/375607789-92f473e1-4aef-4e50-a92c-d486480b842d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MDc3ODktOTJmNDczZTEtNGFlZi00ZTUwLWE5MmMtZDQ4NjQ4MGI4NDJkLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWZmODI3ZWM1NWFlYjI1MjliMzYyOTNmMWE5NTMyZmY5MWJjNWJkNGZmZGY3NzZlNjY2OWIxZTM2YzM3YmIyYjYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.j1sbBgwDuBJjGbw8lMmY5qaoWM3rzZ_yNmSygbE_yNI\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003ereproduction steps, apple -\u0026gt; zendesk -\u0026gt; slack\u003c/h2\u003e\u003ca id=\"user-content-reproduction-steps-apple---zendesk---slack\" aria-label=\"Permalink: reproduction steps, apple -\u0026gt; zendesk -\u0026gt; slack\" href=\"#reproduction-steps-apple---zendesk---slack\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eThe steps to execute the attack now were simple:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003eCreate an Apple account with \u003ccode\u003esupport@company.com\u003c/code\u003e email and request a verification code, Apple sends verification code from \u003ccode\u003eappleid@id.apple.com\u003c/code\u003e to \u003ccode\u003esupport@company.com\u003c/code\u003e and Zendesk automatically creates a ticket\u003c/li\u003e\n\u003cli\u003eAt the same time, create a ticket on \u003ccode\u003ecompany.com\u003c/code\u003e support portal from my own email address, this allows me to keep track of a ID range\u003c/li\u003e\n\u003cli\u003eUse the email spoofing bug I mentioned earlier to attempt to add yourself to every ticket within the range from earlier\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv dir=\"auto\"\u003e\u003cpre\u003e\u003cspan\u003econst\u003c/span\u003e \u003cspan\u003esendmail\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erequire\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;sendmail\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\n\u003cspan\u003e// Assuming the ticket you created in step #2 was assigned a ticket ID of #453 \u003c/span\u003e\n\u003cspan\u003e// verification email landed somewhere near there\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e \u003cspan\u003erange\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e448\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003e457\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003efor\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e \u003cspan\u003ei\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003erange\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003ei\u003c/span\u003e \u003cspan\u003e\u0026lt;\u003c/span\u003e \u003cspan\u003erange\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e]\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e \u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e++\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003e// Send spoofed emails from Apple to Zendesk\u003c/span\u003e\n    \u003cspan\u003esendmail\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003efrom\u003c/span\u003e: \u003cspan\u003e\u0026#39;appleid@id.apple.com\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003eto\u003c/span\u003e: \u003cspan\u003e`support+id\u003cspan\u003e\u003cspan\u003e${\u003c/span\u003e\u003cspan\u003ei\u003c/span\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e@company.com`\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003ecc\u003c/span\u003e: \u003cspan\u003e\u0026#39;daniel@wearehackerone.com\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003esubject\u003c/span\u003e: \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n        \u003cspan\u003ehtml\u003c/span\u003e: \u003cspan\u003e\u0026#39;comment body\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eerr\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e \u003cspan\u003ereply\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eerr\u003c/span\u003e \u003cspan\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan\u003eerr\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003estack\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edir\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereply\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\u003cspan\u003e;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003col start=\"4\" dir=\"auto\"\u003e\n\u003cli\u003eLogin to a company.com support portal (usually at support.company.com) from your account (\u003ccode\u003edaniel@wearehackerone.com\u003c/code\u003e) and view your CCed tickets.\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/60828015/375897466-267284d0-af09-456a-90f1-fa89d93588ab.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU4OTc0NjYtMjY3Mjg0ZDAtYWYwOS00NTZhLTkwZjEtZmE4OWQ5MzU4OGFiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThiMzdmOWVkN2Y2OTk1NzM5YzhlNGFjNGEyM2M0YmZlZjVhMzhiNjExZWUzMmNkNDBmZGI1M2FiYjM3MGVmYWYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.4MZ0PAniT0GT5GcEgeD_YVgxFsVpbk4oThd1bbg5qt0\"\u003e\u003cimg width=\"307\" alt=\"image\" src=\"https://private-user-images.githubusercontent.com/60828015/375897466-267284d0-af09-456a-90f1-fa89d93588ab.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU4OTc0NjYtMjY3Mjg0ZDAtYWYwOS00NTZhLTkwZjEtZmE4OWQ5MzU4OGFiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThiMzdmOWVkN2Y2OTk1NzM5YzhlNGFjNGEyM2M0YmZlZjVhMzhiNjExZWUzMmNkNDBmZGI1M2FiYjM3MGVmYWYmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.4MZ0PAniT0GT5GcEgeD_YVgxFsVpbk4oThd1bbg5qt0\"/\u003e\u003c/a\u003e\n\u003cp dir=\"auto\"\u003e\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/60828015/375620769-aee5ce24-d805-4f43-bbc3-c57a0454a2c5.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MjA3NjktYWVlNWNlMjQtZDgwNS00ZjQzLWJiYzMtYzU3YTA0NTRhMmM1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWY4ODg4MDQ5YzQ1ZDg2ZTIwOGVkNDhjYWM5OWI0N2Q3NzczNzVlNWY1MDUyOTJlMjcwY2UzNzZiNjI1MmJlNTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.xYl71rC7GDA8sP05bUVwQ_Sk1plS7d2Zb5DmX1QduqE\"\u003e\u003cimg src=\"https://private-user-images.githubusercontent.com/60828015/375620769-aee5ce24-d805-4f43-bbc3-c57a0454a2c5.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MjA3NjktYWVlNWNlMjQtZDgwNS00ZjQzLWJiYzMtYzU3YTA0NTRhMmM1LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWY4ODg4MDQ5YzQ1ZDg2ZTIwOGVkNDhjYWM5OWI0N2Q3NzczNzVlNWY1MDUyOTJlMjcwY2UzNzZiNjI1MmJlNTkmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.xYl71rC7GDA8sP05bUVwQ_Sk1plS7d2Zb5DmX1QduqE\" alt=\"image\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003col start=\"5\" dir=\"auto\"\u003e\n\u003cli\u003eEnter the verification code in Apple\u003c/li\u003e\n\u003cli\u003eUse Slack\u0026#39;s \u0026#34;Login with Apple\u0026#34; feature and log in with the Apple account connected to company.com\u0026#39;s email\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp dir=\"auto\"\u003eI replicated this 6-step reproduction steps across hundreds of vulnerable Zendesk and Slack instances. After getting everything ready, I started individually reporting the bug to companies using Zendesk.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003eaftermath\u003c/h2\u003e\u003ca id=\"user-content-aftermath\" aria-label=\"Permalink: aftermath\" href=\"#aftermath\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eI spent about a week reporting the vulnerability to individual companies, some of them took immediate action and patched their instances, while others argued that it was a Zendesk issue. Then, something interesting happened—a comment appeared on my original HackerOne report:\u003c/p\u003e\n\u003ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/60828015/375613130-2a887c2c-4d8d-4dc7-b0fe-fb44922a629e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MTMxMzAtMmE4ODdjMmMtNGQ4ZC00ZGM3LWIwZmUtZmI0NDkyMmE2MjllLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQyOGU4ZTcwMDgzZGUwNzk1NGUwNDBmOWNlOWQzZTM2Nzc0Y2VjZWQ0NDExMGQ2ZjU4MDNmZTcxNWFkNDQ4YWMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.pTnTvv-FscgoV9-PC6JQ5umXHJCAio3MQ8AbSO4eepY\"\u003e\u003cimg width=\"786\" alt=\"image\" src=\"https://private-user-images.githubusercontent.com/60828015/375613130-2a887c2c-4d8d-4dc7-b0fe-fb44922a629e.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3Mjg3ODcwODQsIm5iZiI6MTcyODc4Njc4NCwicGF0aCI6Ii82MDgyODAxNS8zNzU2MTMxMzAtMmE4ODdjMmMtNGQ4ZC00ZGM3LWIwZmUtZmI0NDkyMmE2MjllLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDEwMTMlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMDEzVDAyMzMwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTQyOGU4ZTcwMDgzZGUwNzk1NGUwNDBmOWNlOWQzZTM2Nzc0Y2VjZWQ0NDExMGQ2ZjU4MDNmZTcxNWFkNDQ4YWMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.pTnTvv-FscgoV9-PC6JQ5umXHJCAio3MQ8AbSO4eepY\"/\u003e\u003c/a\u003e\n\u003cp dir=\"auto\"\u003eI couldn’t help but find it amusing—they were now asking me to keep the report confidential, despite having initially dismissed it as out of scope.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eSome companies must have contacted Zendesk after recieving my report and the pressure from this issue had essentially forced Zendesk’s hand. I hadn’t mentioned the Slack exploit in my original report to them because I hadn’t discovered it at that point, now they wanted full detailed reproduction steps for the Slack takeover.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eI provided the proof of concept for the Slack vulnerability, and they confirmed the issue. Though they claimed they had \u0026#34;started working\u0026#34; on a fix, it would actually take them over two months to resolve it.\u003c/p\u003e\n\n\u003cp dir=\"auto\"\u003eOnce companies vulnerable to this were alerted to the issue, many of them quickly disabled Zendesk’s email collaboration feature to protect their instances. Over the course of my reporting, I earned more than $50,000 in bounties from individual companies on HackerOne and other platforms.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eUnsurprisingly, Zendesk didn’t come out of this looking good. At least one or two companies reportedly cut ties with Zendesk after my disclosure, canceling their agreements altogether.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003ezendesk\u0026#39;s fix (and my $0 bounty)\u003c/h2\u003e\u003ca id=\"user-content-zendesks-fix-and-my-0-bounty\" aria-label=\"Permalink: zendesk\u0026#39;s fix (and my $0 bounty)\" href=\"#zendesks-fix-and-my-0-bounty\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eOn July 2, 2024—two months after I submitted the report—Zendesk finally confirmed that they had fixed the issue. Here’s a statement from their Offensive Security Leader:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp dir=\"auto\"\u003eIn most cases, when an end user submits a support request by email, the email becomes a new ticket or adds a comment to an existing ticket. However, in certain cases, the email may be suspended. Suspending an email means putting it aside for further review. It\u0026#39;s not necessarily spam. It\u0026#39;s just not a ticket in Zendesk Support yet. It remains in limbo until somebody reviews it and decides whether to accept or reject it.\nWe use two spam filters, Cloudmark and Rspamd EAP to help determine suspicious characteristics in messages. Depending on the score received by these tools, messages may be suspended. If you are curious, we publish a full list of causes for ticket suspension.\nIn the attack scenario explained here, Cloudmark had very low spam scores of while RSpamD had very high spam scores; unfortunately we weren’t using the RSpamD score in this case, otherwise many of the emails would have been suspended and limited the ability to add CCs at all. The first fix we implemented was to Automatically switch to RSPAMD spam analysis when:\u003c/p\u003e\n\u003col dir=\"auto\"\u003e\n\u003cli\u003eOur automatic ticket threading is triggered to thread an new email into a existing ticket and;\u003c/li\u003e\n\u003cli\u003eWe haven’t previously suspended the message due to the Cloudmark score.\nIn addition to this, we also implemented filters to automatically suspend the following classes of emails:\nUser verification emails sent by Apple based on the Reply-To and Message-Id header values\nNon-transactional emails from from \u003ca href=\"mailto:googleworkspace-noreply@google.com\"\u003egoogleworkspace-noreply@google.com\u003c/a\u003e\nOver the coming months, we will continue to look into opportunities to strengthen our Sender Authentication functionality and provide customers with more gradual and advanced security controls over the types of emails that get suspended or rejected.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/blockquote\u003e\n\u003cp dir=\"auto\"\u003eDespite fixing the issue, Zendesk ultimately chose not to award a bounty for my report. Their reasoning? I had broken HackerOne\u0026#39;s disclosure guidelines by sharing the vulnerability with affected companies. I didn’t bother to argue :)\u003c/p\u003e\n\u003cp dir=\"auto\"\u003e\u003ch2 dir=\"auto\"\u003econclusion\u003c/h2\u003e\u003ca id=\"user-content-conclusion\" aria-label=\"Permalink: conclusion\" href=\"#conclusion\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eWhat started as a small email bug turned into an exploit that allowed me to infiltrate the internal systems of some of the world’s largest companies. While Zendesk eventually fixed the vulnerability, the journey to get there was a frustrating mix of rejections, slow responses, and ultimately no recognition for the report. But that’s the reality of bug hunting—sometimes you win, sometimes you don’t.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eIf you enjoyed this write-up and want to stay updated on more of my bug hunting adventures, follow me on Twitter/X \u003ca href=\"https://x.com/hackermondev\" rel=\"nofollow\"\u003e@hackermondev\u003c/a\u003e for future blog posts and insights.\u003c/p\u003e\n\u003cp dir=\"auto\"\u003eread next? \u003ca href=\"https://x.com/hackermondev/status/1816625357052588539\" rel=\"nofollow\"\u003ehow I stumbled upon a Discord server and left with a $4000 bounty\u003c/a\u003e\u003c/p\u003e\n\u003c/article\u003e\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
