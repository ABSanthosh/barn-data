{
  "id": "5e2894be-3168-459a-93b8-9f4248675f6e",
  "title": "Show HN: I Made an Open-Source Laptop from Scratch",
  "link": "https://www.byran.ee/posts/creation/",
  "description": "Comments",
  "author": "",
  "published": "Wed, 22 Jan 2025 20:41:52 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 12190,
  "excerpt": "Creating a highly-integrated open-source laptop from scratch. Power in your hands.",
  "siteName": "",
  "favicon": "https://www.byran.ee/apple-touch-icon.png",
  "text": "I do not think there is any thrill that can go through the human heart like that felt by the inventor as he sees some creation of the brain unfolding to success – Nikola Tesla It’s got a 4K AMOLED display, a Cherry MX mechanical keyboard, plays Minecraft at 4K, runs +7B LLMs, surfs the web, and has ~7h battery life. All open-source. Video How I Made A Laptop From Scratch (YouTube.com). Demo at 22:14. The writeup below pretty much abridges the video above. See the progression updates from the development journey here. Imagine a skill-chart of qualities of technology: screen, audio, performance, build, tactility, touch-interaction, efficiency, size, and so many more. At the balancing point of all these qualities is the laptop. To that end, let’s build a laptop that hits as many qualities of a modern commercial thin \u0026 light laptop—while trying to do as much from scratch as possible. Booting and inserting magnetically attached keyboard Epic Hypixel Bedwars gaming Finding an electron in a cloud I first made a mental map and transferred it into Obsidian: Boiling it down, it landed me with a lofty list of goals: RK3588 SoC Motherboard CM3588-based USB-C USB3.1 Gen 1 PCIe Wi-Fi/BT + SSD Powertrain ESP32-S3 embedded controller ~60Wh Li-ion battery pack Peripherals Wireless mechanical keyboard Glass-topped multi-touch trackpad 4K AMOLED 13.3” display Anodized aluminum CNC chassis General system overview Fermionic Analysis Choosing the chip I looked towards single-board computer SoCs, as board manufacturers commonly release schematics for reference. In many aspects, the Rockchip RK3588 is the fastest consumer-procurable chip on the market. Despite the spotty software support, the hardware documentation has lots of developer resources and reference schematics from SBC manufacturers. Some quick specs: Quad core A76 and quad core A55 Mali-G10 GPU 6TOPs NPU 8K@60FPS decoder I/O: 8K display, dual USB3.1, PCIe 3.0 x 4, HDMI2.1/eDP 1.4, etc. With only a few months to work on this project, an SoM (system on module) like the Raspberry Pi CM5 presented the best option for its hardware compatibility and a high likelihood of a snug integration. Choosing an SoM also alleviates memory and other high-speed signaling concerns. Looking around for a RK3588 SoM, I came across the CM3588 by FriendlyElec. Cheap, well-documented, and easily procurable. Sounds good! FriendlyElec CM3588 SoM Display I hopped on panelook.com and filtered by size and resolution. I’ve always been a sucker for high pixel density, so I went with a 4K AMOLED 13.3” display. Cross referencing stock availability on Taobao (Chinese domestic Aliexpress), the ATNA33TP11 seemed to be the one with most brand-new stock since OLED risked burn-in. A highlight: during display evaluation, switching out a connector and shortening the board by 2mm improved signal integrity just enough for the 1.5GHz x 4 signals go pass through. Getting the display running on Linux meant finding system logs from Asus laptops that have this display, reverse-engineering the values, and tuning the power-on timings amongst other things just right. TLDR; getting a 4K AMOLED eDP display running on non-mainline Linux was a heck of a journey, so read this if you’re interested (coming soon). ATNA33TP11 working with display evaluation board V2 short Powertrain The cells had to be 6mm thin and four packs lined up should take roughly half of the entire chassis volume. Chinese manufacturers don’t stock batteries readily, and shipping them to the US would be a pain. Thus, I looked on the American side. I stumbled upon with these batteries from AA Portable Power Corp. or batteryspace.com. or Powerizer. Doing the power calculations, we get: 4.250Ah 3.7V 4S = 62.9 Wh with max 8A (so max 134.4W discharge)! Solid. The total voltage is 4.2V (peak) * 4S = 16.8V. The system’s designed for up to 20V USB-C (AKA 100W) and passed into the BQ25713 charging IC. The batteries are balanced with the BQ77915 to ensure safe charging, and the power is tracked with an LTC2943 to calculate a state-of-charge percentage. I popped in an ESP32-S3 module as the controller for everything, and set it to production. After writing drivers and sitting on the undecipherable datasheets for days, I had the batteries charging. I successfully load tested it to around 5A and powered the full system. There’s still a lot of quiescent current (about ~50mA), but I haven’t had the time to optimize the firmware. The USB of the ESP32 connects to the internal USB on the motherboard to feed the power telemetry over UART. A Python script and kernel module in the OS forwards it to the battery service in the kernel to display it natively. Powertrain V0.2 inside laptop In settings, tick “Align controls with KiCad” for mouse pan/zoom/scroll Powertrain V0.2 KiCanvas Full Link Mainboard With those decisions made up, I aimed for \u003e90mm motherboard width based on a prelim CAD from the batteries and display dimensions. On the physical I/O side, I settled on dual USB3.1 Type-C ports, a USB2.0 Type-A port, a headphone jack, and a microSD card slot. Internally, the M.2 E-key connects to an RTL8852BE WiFi 6 (802.11ax) + BT5.2 wireless card and the M.2 M-key accommodates up to an 2242-sized NVMe SSD. A full size NVMe SSD can fit with some modifications of the chassis too. Tangent over, this leaves me with around ~90mm of board height. Implementing all the features on the final mainboard would stretch this writeup too long, so read this if you’re interested (coming soon). In settings, tick “Align controls with KiCad” for mouse pan/zoom/scroll Motherboard V1.0 KiCanvas Full Link Mainboard B-roll shot Detailed hardware overview Operating on a System Joshua Riek’s ubuntu-rockchip kernel/distro combined an out-of-the-box experience with lots of optimizations. Using Armbian’s kernel (I believe it’s still off Rockchip’s kernel) meant that it offered nearly all the features of the RK3588 on a developer-ready kernel configuration. Since nearly all the work I needed to do was abstracted in the DeviceTree (DTS) hardware configuration language implemented with U-boot, the bootloader, I took advantage of their system-agnostic nature to speed up my trial-and-error process having never done any Linux work. Instead of developing and compiling code on the RK3588 itself, I used my daily driver MacBook and Visual Studio Code. Once I made a change in the DTS, I’d use Orbstack (virtualization software) running Ubuntu 24.04 (shared filesystem and kernel with macOS) and compile the DeviceTree there. DTSI, DTS, and DTS Overlay Files (some for SoC, some for other ICs, etc.) -\u003e dtcpp binary (preprocessing \u0026 linking various DeviceTree definitions) -\u003e dtc binary (DeviceTree compilation) -\u003e anyon_e.dtb (compiled DeviceTree binary!) Pointing U-Boot to a custom compiled DTB (devicetree binary), I scp’ed the compiled anyon_e.dtb to the OS. A u-boot-update regenerates the bootloader configurations, and a reboot updates the changes. That’s how I did the hardware bringup—display configurations, PCIe, USB, and other low-level system tweaks. The rest is just a standard install of Ubuntu 24.04 LTS with Linux Kernel 6.1. Testing batteries and writing DTS In-depth software overview Peripherals Imagine being able to just pull out your laptop’s keyboard and use it as just another wireless keyboard for literally anything! Just me? Maybe. Being a mechanical keyboard addict with quite a few ZMK keyboards designed, I chose the Cherry MX ULP mechanical switches for the best feel. Of course, a battery and fully mechanical switches add a lot of height. I used a 1mm thin 200mAh battery and a custom battery protection board that sticks up between two rows of keys to cut down on ~1.6mm (PCB height). The nRF52840 SoC running ZMK Firmware is right underneath the spacebar. A sandwich of PLA and 6061 aluminum from Fabworks crammed everything under ~7mm. Since the keycaps aren’t easily procurable, I got a 0.15mm nozzle for my Bambu Lab X1C and printed them with PLA. It got me down a rabbit hole of tungsten nozzles, and I got quoted ~$400 for 20x 0.15mm nozzles. I’ve been thinking of trying that out too. But alas, printing out all the keycaps and assembling for the last time, the keyboard was done. Moving on to the trackpad, it was quite quick. I knew from the start that I wanted a good trackpad, so making my own with zero capacitive tracking experience is a no-go. Searching online, I came across the Azoteq PXM0057-401 evaluation module on Mouser. It had it all—glass surface, multi-touch, and worked over USB. And, it was only 35 bucks or so. However, the trackpad has ceased production without many alternatives. With the keyboard and trackpad working, it was time to put on the finishing touches. In settings, tick “Align controls with KiCad” for mouse pan/zoom/scroll Keyboard V1.0 KiCanvas Full Link *Counterclockwise from top left: keyboard side profile, typing on keyboard, trackpad, 1mm battery on back, nRF52840 SoC area OnShape wireframe exploded view Mechanical Roughly the same time I began the system design, I sent a few CNC aluminum blocks off to JLC for evaluation with different anodization finishes. The dark gray anodization felt “best”, but I preferred the look of the matte black, so I settled on that. Using PTC OnShape, I (attempted) CAD’ed a robust and minimalistic look and a blend of my two favorite laptop lineup designs, the Razer Blade and the MacBook Pro. Because of the removable keyboard, the bottom has no screws. Instead, the palm rest screws into the bottom chassis. CAD Link here. The hardest part about the chassis was the hinge. I used Framework’s 13.3” hinge because it has a 3D model. I constrained it in OnShape so I can see the exact closing angles. The chassis layout is fairly simple: batteries on the bottom, the power board on the right, motherboard on the left, and the hinge mechanism on top. Oh, and a transparent PETG FDM printed power button that lights up on a custom PCB. To balance out the asymmetric hinge (caused by the mainboard being too wide), a little carbon fiber rod lines up on the left side too. Chassis test fitting It was a battle to get the screen assembly to not hit anything while also covering Although I started considering thermals way in advance, hence the gap here for the heatpipe to go through, I still had difficulty fitting everything in. The distance between the bottom of the keyboard and the top of the heatsink is less than a half a millimeter. The cooling system is really constrained because I don’t have the resources to make a custom heatpipe and fin solution. So, I made a full copper CNC heatsink (from JLCCNC) and a heatpipe connected to a fan. It’s all connected with PTM7950. I also added these PUI audio speakers on either side. The audio from the CM3588’s DAC didn’t work and I ran out of debugging time, so I made a USB to audio converter board separately and shot it through an Class-D amplifier. I would’ve also made the amp, but I ran out of time. As I reached final assembly, I used a mix of JLC’s selective laser sintering (SLS) of nylon powder and FDM printed PA6-CF for smaller structural parts. Putting it all together with the matte black CNC aluminum chassis, I finally had my laptop. Inside full laptop assembly Reflection The hardest class I’ve taken so far was quantum mechanics in my junior spring term. A few months before spending hours solving time-independent and dependent Schrödinger equations, I was on the squash bus (the sport, not the vegetable). My friend suggested I make a laptop for my senior project—and that was all. I came up with the name anyon_e in June, after I finished the quantum course. Making this laptop was hard. Mentally pressured with a deadline, and a constant inter-disciplinary challenge across electrical, software, and mechanical systems. Summing up everything I’ve ever done. It took up most of my mind from May until now. Inspired by open-source projects like ZMK, KiCAD, Blender, and countless OSHW projects, I want to do my own little part. To put power in people’s hands in creation, innovation, imagination, or whatever else. To attempt the impossible. Sincerely, Byran",
  "image": "https://byran.ee/open-graph.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e \n\u003cblockquote\u003e\n\u003cp\u003eI do not think there is any thrill that can go through the human heart like that felt by the inventor as he sees some creation of the brain unfolding to success\n– \u003ca href=\"https://en.wikipedia.org/wiki/Nikola_Tesla\" target=\"_blank\"\u003eNikola Tesla\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eIt’s got a 4K AMOLED display, a Cherry MX mechanical keyboard, plays Minecraft at 4K, runs +7B LLMs, surfs the web, and has ~7h battery life. All open-source.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"video\"\u003eVideo\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://youtu.be/fks3PBodyiE\" target=\"_blank\"\u003e\u003cimg src=\"https://www.byran.ee/img/thumbnail.jpg\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHow I Made A Laptop From Scratch (YouTube.com). Demo at 22:14.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe writeup below pretty much abridges the video above.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003e\u003ca href=\"https://www.byran.ee/progress\"\u003eSee the progression updates from the development journey here.\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eImagine a skill-chart of qualities of technology: screen, audio, performance, build, tactility, touch-interaction, efficiency, size, and so many more. At the balancing point of all these qualities is the laptop. To that end, let’s build a laptop that hits as many qualities of a modern commercial thin \u0026amp; light laptop—while trying to do as much from scratch as possible.\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/photo.jpg\"/\u003e\n\u003cp\u003e\u003cem\u003eBooting and inserting magnetically attached keyboard\u003c/em\u003e\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/minecraft.jpg\"/\u003e\n\u003cp\u003e\u003cem\u003eEpic Hypixel Bedwars gaming\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"finding-an-electron-in-a-cloud\"\u003eFinding an electron in a cloud\u003c/h2\u003e\n\u003cp\u003eI first made a mental map and transferred it into Obsidian:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.byran.ee/img/map.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eBoiling it down, it landed me with a lofty list of goals:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.rock-chips.com/uploads/pdf/2022.8.26/192/RK3588%20Brief%20Datasheet.pdf\" target=\"_blank\"\u003eRK3588\u003c/a\u003e SoC Motherboard\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://wiki.friendlyelec.com/wiki/index.php/CM3588\" target=\"_blank\"\u003eCM3588\u003c/a\u003e-based\u003c/li\u003e\n\u003cli\u003eUSB-C USB3.1 Gen 1\u003c/li\u003e\n\u003cli\u003ePCIe Wi-Fi/BT + SSD\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePowertrain\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.espressif.com/sites/default/files/documentation/esp32-s3-mini-1_mini-1u_datasheet_en.pdf\" target=\"_blank\"\u003eESP32-S3\u003c/a\u003e embedded controller\u003c/li\u003e\n\u003cli\u003e~60Wh Li-ion battery pack\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ePeripherals\n\u003cul\u003e\n\u003cli\u003eWireless mechanical keyboard\u003c/li\u003e\n\u003cli\u003eGlass-topped multi-touch trackpad\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e4K AMOLED 13.3” display\u003c/li\u003e\n\u003cli\u003eAnodized aluminum CNC chassis\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://www.byran.ee/img/general.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eGeneral system overview\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"fermionic-analysis\"\u003eFermionic Analysis\u003c/h2\u003e\n\u003ch3 id=\"choosing-the-chip\"\u003eChoosing \u003cem\u003ethe\u003c/em\u003e chip\u003c/h3\u003e\n\u003cp\u003eI looked towards single-board computer SoCs, as board manufacturers commonly release schematics for reference. In many aspects, the Rockchip RK3588 is the fastest consumer-procurable chip on the market. Despite the spotty software support, the hardware documentation has lots of developer resources and \u003ca href=\"https://wiki.friendlyelec.com/wiki/images/1/15/CM3588_NAS_SDK_2309_SCH.PDF\" target=\"_blank\"\u003ereference schematics\u003c/a\u003e from SBC manufacturers.\u003c/p\u003e\n\u003cp\u003eSome quick specs:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eQuad core A76 and quad core A55\u003c/li\u003e\n\u003cli\u003eMali-G10 GPU\u003c/li\u003e\n\u003cli\u003e6TOPs NPU\u003c/li\u003e\n\u003cli\u003e8K@60FPS decoder\u003c/li\u003e\n\u003cli\u003eI/O: 8K display, dual USB3.1, PCIe 3.0 x 4, HDMI2.1/eDP 1.4, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWith only a few months to work on this project, an SoM (system on module) like the Raspberry Pi CM5 presented the best option for its hardware compatibility and a high likelihood of a snug integration. Choosing an SoM also alleviates memory and other high-speed signaling concerns. Looking around for a RK3588 SoM, I came across the CM3588 by FriendlyElec. Cheap, well-documented, and easily procurable. Sounds good!\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/cm3588.jpg\"/\u003e\n\u003cp\u003e\u003cem\u003eFriendlyElec CM3588 SoM\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"display\"\u003eDisplay\u003c/h3\u003e\n\u003cp\u003eI hopped on \u003ca href=\"https://www.panelook.com\" target=\"_blank\"\u003epanelook.com\u003c/a\u003e and filtered by size and resolution. I’ve always been a sucker for high pixel density, so I went with a 4K AMOLED 13.3” display. Cross referencing stock availability on Taobao (Chinese domestic Aliexpress), the \u003ca href=\"https://www.panelook.com/ATNA33TP11_Samsung_13.3_OLED_parameter_59424.html\" target=\"_blank\"\u003eATNA33TP11\u003c/a\u003e seemed to be the one with most \u003cem\u003ebrand-new\u003c/em\u003e stock since OLED risked burn-in.\u003c/p\u003e\n\u003cp\u003eA highlight: during display evaluation, switching out a connector and shortening the board by 2mm improved signal integrity \u003cem\u003ejust enough\u003c/em\u003e for the 1.5GHz x 4 signals go pass through. Getting the display running on Linux meant finding system logs from Asus laptops that have this display, reverse-engineering the values, and tuning the power-on timings amongst other things \u003cem\u003ejust right\u003c/em\u003e. TLDR; getting a 4K AMOLED eDP display running on non-mainline Linux was a heck of a journey, so read \u003ca href=\"\"\u003ethis if you’re interested\u003c/a\u003e (coming soon).\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/screen.jpg\"/\u003e\n\u003cp\u003e\u003cem\u003eATNA33TP11 working with display evaluation board V2 short\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"powertrain\"\u003ePowertrain\u003c/h3\u003e\n\u003cp\u003eThe cells had to be 6mm thin and four packs lined up should take roughly half of the entire chassis volume. Chinese manufacturers don’t stock batteries readily, and shipping them to the US would be a pain. Thus, I looked on the American side. I stumbled upon with \u003ca href=\"https://www.batteryspace.com/polymerli-ionmodule37v4250mah157wh85arate-prewiredwithpcbpl5467100.aspx\" target=\"_blank\"\u003ethese batteries\u003c/a\u003e from AA Portable Power Corp. or batteryspace.com. or Powerizer. Doing the power calculations, we get: 4.250Ah \u003cem\u003e3.7V\u003c/em\u003e 4S = 62.9 Wh with max 8A (so max 134.4W discharge)! Solid.\u003c/p\u003e\n\u003cp\u003eThe total voltage is 4.2V (peak) * 4S = 16.8V. The system’s designed for up to 20V USB-C (AKA 100W) and passed into the \u003ca href=\"https://www.ti.com/product/BQ25713\" target=\"_blank\"\u003eBQ25713\u003c/a\u003e charging IC. The batteries are balanced with the \u003ca href=\"https://www.ti.com/product/BQ77915\" target=\"_blank\"\u003eBQ77915\u003c/a\u003e to ensure safe charging, and the power is tracked with an \u003ca href=\"https://www.analog.com/en/products/ltc2943.html\" target=\"_blank\"\u003eLTC2943\u003c/a\u003e to calculate a state-of-charge percentage. I popped in an ESP32-S3 module as the controller for everything, and set it to production.\u003c/p\u003e\n\u003cp\u003eAfter writing drivers and sitting on the undecipherable datasheets for days, I had the batteries charging. I successfully \u003ca href=\"https://a.co/d/3b8R9mN\" target=\"_blank\"\u003eload tested\u003c/a\u003e it to around 5A and powered the full system. There’s still a lot of quiescent current (about ~50mA), but I haven’t had the time to optimize the firmware.\u003c/p\u003e\n\u003cp\u003eThe USB of the ESP32 connects to the internal USB on the motherboard to feed the power telemetry over UART. A Python script and kernel module in the OS forwards it to the battery service in the kernel to display it natively.\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/powertrain.jpg\"/\u003e\n\u003cp\u003e\u003cem\u003ePowertrain V0.2 inside laptop\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003eIn settings, tick “Align controls with KiCad” for mouse pan/zoom/scroll\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://kicanvas.org/?github=https%3A%2F%2Fgithub.com%2FHello9999901%2Flaptop%2Ftree%2Fmain%2Fpower\" target=\"_blank\"\u003ePowertrain V0.2 KiCanvas Full Link\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"mainboard\"\u003eMainboard\u003c/h3\u003e\n\u003cp\u003eWith those decisions made up, I aimed for \u0026gt;90mm motherboard width based on a prelim CAD from the batteries and display dimensions.\u003c/p\u003e\n\u003cp\u003eOn the physical I/O side, I settled on dual USB3.1 Type-C ports, a USB2.0 Type-A port, a headphone jack, and a microSD card slot. Internally, the M.2 E-key connects to an \u003ca href=\"https://a.co/d/4lJDnwX\" target=\"_blank\"\u003eRTL8852BE\u003c/a\u003e WiFi 6 (802.11ax) + BT5.2 wireless card and the M.2 M-key accommodates up to an 2242-sized NVMe SSD. A full size NVMe SSD can fit with some modifications of the chassis too.\u003c/p\u003e\n\u003cp\u003eTangent over, this leaves me with around ~90mm of board height. Implementing all the features on the final mainboard would stretch this writeup too long, so read \u003ca href=\"\"\u003ethis if you’re interested\u003c/a\u003e (coming soon).\u003c/p\u003e\n\n\u003cp\u003eIn settings, tick “Align controls with KiCad” for mouse pan/zoom/scroll\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://kicanvas.org/?github=https%3A%2F%2Fgithub.com%2FHello9999901%2Flaptop%2Ftree%2Fmain%2Fmotherboard\" target=\"_blank\"\u003eMotherboard V1.0 KiCanvas Full Link\u003c/a\u003e\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/mainboard.jpg\"/\u003e\n\u003cp\u003e\u003cem\u003eMainboard B-roll shot\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.byran.ee/img/hardware.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDetailed hardware overview\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"operating-on-a-system\"\u003eOperating on a System\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/Joshua-Riek/ubuntu-rockchip\" target=\"_blank\"\u003eJoshua Riek’s ubuntu-rockchip\u003c/a\u003e kernel/distro combined an out-of-the-box experience with lots of optimizations. Using Armbian’s kernel (I believe it’s still off Rockchip’s kernel) meant that it offered nearly all the features of the RK3588 on a developer-ready kernel configuration.\u003c/p\u003e\n\u003cp\u003eSince nearly all the work I needed to do was abstracted in the DeviceTree (DTS) hardware configuration language implemented with U-boot, the bootloader, I took advantage of their system-agnostic nature to speed up my trial-and-error process having never done any Linux work.\u003c/p\u003e\n\u003cp\u003eInstead of developing and compiling code on the RK3588 itself, I used my daily driver MacBook and Visual Studio Code. Once I made a change in the DTS, I’d use Orbstack (virtualization software) running Ubuntu 24.04 (shared filesystem and kernel with macOS) and compile the DeviceTree there.\u003c/p\u003e\n\u003cpre tabindex=\"0\" data-language=\"txt\"\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eDTSI, DTS, and DTS Overlay Files (some for SoC, some for other ICs, etc.) -\u0026gt; dtcpp binary (preprocessing \u0026amp; linking various DeviceTree definitions) -\u0026gt; dtc binary (DeviceTree compilation) -\u0026gt; anyon_e.dtb (compiled DeviceTree binary!)\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePointing U-Boot to a custom compiled DTB (devicetree binary), I \u003ccode\u003escp\u003c/code\u003e’ed the compiled \u003ccode\u003eanyon_e.dtb\u003c/code\u003e to the OS. A \u003ccode\u003eu-boot-update\u003c/code\u003e regenerates the bootloader configurations, and a reboot updates the changes.\u003c/p\u003e\n\u003cp\u003eThat’s how I did the hardware bringup—display configurations, PCIe, USB, and other low-level system tweaks. The rest is just a standard install of Ubuntu 24.04 LTS with Linux Kernel 6.1.\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/working.jpg\"/\u003e\n\u003cp\u003e\u003cem\u003eTesting batteries and writing DTS\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.byran.ee/img/software.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIn-depth software overview\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"peripherals\"\u003ePeripherals\u003c/h3\u003e\n\u003cp\u003eImagine being able to just pull out your laptop’s keyboard and use it as just another wireless keyboard for literally anything! Just me? Maybe.\u003c/p\u003e\n\u003cp\u003eBeing a mechanical keyboard addict with quite a few \u003ca href=\"https://zmk.dev\" target=\"_blank\"\u003eZMK keyboards\u003c/a\u003e designed, I chose the \u003ca href=\"https://github.com/pashutk/Cherry_MX_ULP\" target=\"_blank\"\u003eCherry MX ULP mechanical switches\u003c/a\u003e for the best feel. Of course, a battery and fully mechanical switches add \u003cem\u003ea lot\u003c/em\u003e of height. I used a 1mm thin \u003ca href=\"https://www.powerstream.com/thin-lithium-ion.htm\" target=\"_blank\"\u003e200mAh battery\u003c/a\u003e and a custom battery protection board that sticks up between two rows of keys to cut down on ~1.6mm (PCB height). The nRF52840 SoC running ZMK Firmware is right underneath the spacebar. A sandwich of PLA and 6061 aluminum from Fabworks crammed everything under ~7mm.\u003c/p\u003e\n\u003cp\u003eSince the keycaps aren’t easily procurable, I got a \u003ca href=\"https://www.printedsolid.com/products/e3d-revo-nozzles?srsltid=AfmBOopKMJDs7gFpzrJg3kHQ-aJLDFTjeFO0ZJAYf1hADzy5iurNlkLB\" target=\"_blank\"\u003e0.15mm nozzle\u003c/a\u003e for my Bambu Lab X1C and printed them with PLA. It got me down a rabbit hole of tungsten nozzles, and I got quoted ~$400 for 20x 0.15mm nozzles. I’ve been thinking of trying that out too. But alas, printing out all the keycaps and assembling for the last time, the keyboard was done.\u003c/p\u003e\n\u003cp\u003eMoving on to the trackpad, it was quite quick. I knew from the start that I wanted a good trackpad, so making my own with zero capacitive tracking experience is a no-go. Searching online, I came across the Azoteq \u003ca href=\"https://www.mouser.com/ProductDetail/Azoteq/PXM0057-401-S?qs=t7xnP681wgVkp9ZZYy6TPA%3D%3D\" target=\"_blank\"\u003ePXM0057-401\u003c/a\u003e evaluation module on Mouser. It had it all—glass surface, multi-touch, and worked over USB. And, it was only 35 bucks or so. However, the trackpad has ceased production without many alternatives.\u003c/p\u003e\n\u003cp\u003eWith the keyboard and trackpad working, it was time to put on the finishing touches.\u003c/p\u003e\n\n\u003cp\u003eIn settings, tick “Align controls with KiCad” for mouse pan/zoom/scroll\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://kicanvas.org/?github=https%3A%2F%2Fgithub.com%2FHello9999901%2Flaptop%2Ftree%2Fmain%2Fkeyboard\" target=\"_blank\"\u003eKeyboard V1.0 KiCanvas Full Link\u003c/a\u003e\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/peripherals.jpg\"/\u003e\n\u003cp\u003e*Counterclockwise from top left: keyboard side profile, typing on keyboard, trackpad, 1mm battery on back, nRF52840 SoC area\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://www.byran.ee/img/wireframe_exploded.jpg\"/\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eOnShape wireframe exploded view\u003c/em\u003e\u003c/p\u003e\n\u003ch3 id=\"mechanical\"\u003eMechanical\u003c/h3\u003e\n\u003cp\u003eRoughly the same time I began the system design, I sent a few CNC aluminum blocks off to JLC for evaluation with different anodization finishes. The dark gray anodization felt “best”, but I preferred the look of the matte black, so I settled on that.\nUsing PTC OnShape, I (attempted) CAD’ed a robust and minimalistic look and a blend of my two favorite laptop lineup designs, the Razer Blade and the MacBook Pro. Because of the removable keyboard, the bottom has no screws. Instead, the palm rest screws into the bottom chassis. \u003ca href=\"https://cad.onshape.com/documents/a18bb6df7dbba66df24a7ec8/w/967d921e60c207e3b6f5cf7b/e/1f78a9387b17c2d178742295?renderMode=0\u0026amp;uiState=678da20d5bee0d1ad2dd55f1\" target=\"_blank\"\u003eCAD Link here.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe hardest part about the chassis was the hinge. I used \u003ca href=\"https://frame.work/products/display-hinge-kit?v=FRANFB0001\" target=\"_blank\"\u003eFramework’s 13.3” hinge\u003c/a\u003e because it has a 3D model. I constrained it in OnShape so I can see the exact closing angles.\u003c/p\u003e\n\u003cp\u003eThe chassis layout is fairly simple: batteries on the bottom, the power board on the right, motherboard on the left, and the hinge mechanism on top. Oh, and a transparent PETG FDM printed power button that lights up on a custom PCB. To balance out the asymmetric hinge (caused by the mainboard being too wide), a little \u003ca href=\"https://www.mcmaster.com/2153T11/\" target=\"_blank\"\u003ecarbon fiber rod\u003c/a\u003e lines up on the left side too.\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/chassis_empty.jpg\"/\u003e\n\u003cp\u003e\u003cem\u003eChassis test fitting\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIt was a battle to get the screen assembly to not hit anything while also covering\nAlthough I started considering thermals way in advance, hence the gap here for the heatpipe to go through, I still had difficulty fitting everything in. The distance between the bottom of the keyboard and the top of the heatsink is less than a half a millimeter. The cooling system is really constrained because I don’t have the resources to make a custom heatpipe and fin solution. So, I made a full copper CNC heatsink (from JLCCNC) and a heatpipe connected to a fan. It’s all connected with \u003ca href=\"https://www.lttstore.com/products/ptm7950-phase-change-thermal-pad\" target=\"_blank\"\u003ePTM7950\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI also added \u003ca href=\"https://puiaudio.com/product/speakers-and-receivers/as04004mo-sp40\" target=\"_blank\"\u003ethese\u003c/a\u003e PUI audio speakers on either side. The audio from the CM3588’s DAC didn’t work and I ran out of debugging time, so I made a USB to audio converter board separately and shot it through an Class-D amplifier. I would’ve also made the amp, but I ran out of time.\u003c/p\u003e\n\u003cp\u003eAs I reached final assembly, I used a mix of JLC’s selective laser sintering (SLS) of nylon powder and FDM printed PA6-CF for smaller structural parts. Putting it all together with the matte black CNC aluminum chassis, I finally had my laptop.\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/inside.jpg\"/\u003e\n\u003cp\u003e\u003cem\u003eInside full laptop assembly\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"reflection\"\u003eReflection\u003c/h2\u003e\n\u003cp\u003eThe hardest class I’ve taken so far was quantum mechanics in my junior spring term. A few months before spending hours solving time-independent and dependent Schrödinger equations, I was on the squash bus (the sport, not the vegetable). My friend suggested I make a laptop for my senior project—and that was all.\nI came up with the name anyon_e in June, after I finished the quantum course.\u003c/p\u003e\n\u003cp\u003eMaking this laptop was hard. Mentally pressured with a deadline, and a constant inter-disciplinary challenge across electrical, software, and mechanical systems. Summing up everything I’ve ever done. It took up most of my mind from May until now.\u003c/p\u003e\n\u003cp\u003eInspired by open-source projects like \u003ca href=\"https://zmk.dev\" target=\"_blank\"\u003eZMK\u003c/a\u003e, \u003ca href=\"https://www.kicad.org\" target=\"_blank\"\u003eKiCAD\u003c/a\u003e, \u003ca href=\"https://www.blender.org\" target=\"_blank\"\u003eBlender\u003c/a\u003e, and countless \u003ca href=\"https://certification.oshwa.org/basics.html\" target=\"_blank\"\u003eOSHW\u003c/a\u003e projects, I want to do my own little part. To put power in people’s hands in creation, innovation, imagination, or whatever else. To attempt the impossible.\u003c/p\u003e\n\u003cimg src=\"https://www.byran.ee/img/conclusion.jpg\"/\u003e\n\u003cp\u003eSincerely,\u003cbr/\u003e\n\u003cem\u003eByran\u003c/em\u003e\u003c/p\u003e \u003c/article\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": null,
  "modifiedTime": null
}
