{
  "id": "71df94f1-f7ea-4451-8d70-a171222a147b",
  "title": "I Went to SQL Injection Court",
  "link": "https://sockpuppet.org/blog/2025/02/09/fixing-illinois-foia/",
  "description": "Comments",
  "author": "",
  "published": "Tue, 25 Feb 2025 18:39:10 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "Quarrelsome",
  "length": 16907,
  "excerpt": "Should public bodies in Illinois, like cities and school districts and sheriff’s departments, be allowed to hide information from Freedom of Information requests by keeping them in databases? That question is before the 104th Illinois General Assembly, thanks to a bill sponsored by Donald P. DeWitte, elected state senator by the wise citizens of Batavia and Elgin (motto: “The City In The Suburbs”; indeed), and prompted in part by my friend Matt Chapman.",
  "siteName": "",
  "favicon": "",
  "text": "Should public bodies in Illinois, like cities and school districts and sheriff’s departments, be allowed to hide information from Freedom of Information requests by keeping them in databases? That question is before the 104th Illinois General Assembly, thanks to a bill sponsored by Donald P. DeWitte, elected state senator by the wise citizens of Batavia and Elgin (motto: “The City In The Suburbs”; indeed), and prompted in part by my friend Matt Chapman. I play a very small part in this story, so I get to tell it. Background Illinois has an excellent, toothy FOIA statute. With very few exceptions, any information collected by an Illinois public body is public property. Anybody is entitled to ask for it. You can’t generally be charged for asking. Public bodies can’t really limit the number of requests you make. They get just 5 days to respond, with 5 additional extension days if requested in writing. Improper denials can get you legal fee recovery if you sue over them, so there are lawyers that will take these cases on contingency. It’s pretty neat! I think people are too shy about making FOIA requests. It’s easier than it looks! You just need to send an email to the public body you want information from. Put “FOIA” in the subject line. By law, there’s no more ceremony to it than that. And you’ll find that the people responding to those emails are generally kind and happy to help. The one big limitation of Illinois FOIA (with FOIA laws everywhere, really) is that you can’t use them to compel public bodies to create new records. Often, what you’ll be looking for is some kind of report about some issue of public policy. If that exact report exists, you’re golden. But if it doesn’t, you have to find and request the raw data for that report, and you have to assemble it yourself. This limitation is about to matter a lot. To understand what’s happening in this story, I’m going to have to explain a technical concept: the idea of a “database schema”. More and more of the information tracked by public bodies now lives in databases, rather than filing cabinets or shared drives. Databases are organized according to schemas. Think of a modern database as a huge Excel spreadsheet file, with many dozens of tabs. Each tab has a name; under each of those tabs is a separate spreadsheet. Each spreadsheet has a header row, labeling the columns, like “price” and “quantity” and “name”. A database schema is simply the names of all the tabs, and each of those header rows. Congratulations! You now understand databases. Matt Chapman vs. City of Chicago My friend Matt is a self-styled “civic hacker” and a national expert at performing data journalism with large-scale FOIA requests. Matt’s love language is pushing FOIA statutes to their limits, sniffing out buried data and bulk-extracting it with clever requests. A good example of the kind of stuff Matt does is this ProPublica collaboration about how Chicago issues parking tickets. After Matt was towed over a facially bogus ticket and successfully took the city to court over it, he got curious about the patterns of towing for things like compliance violations. As it turns out, parking tickets have pushed thousands of Illinoisans into bankruptcy, and, once you get your hands on the ticket data, it turns out there’s a very clear pattern of majority-Black neighborhoods being systematically targeted for higher enforcement. In the course of this reporting work, Matt learned about a system Chicago operates called CANVAS. CANVAS is the central repository for all parking ticket data in the city. It’s a giant database, and Matt would very much like to know what’s in it. So he filed a FOIA request for the CANVAS database schema. The city flatly refused. To do so, they relied on a specific exemption in the statute: “(o) Administrative or technical information associated with automated data processing operations, including but not limited to software, operating protocols, computer program abstracts, file layouts, source listings, object modules, load modules, user guides, documentation pertaining to all logical and physical design of computerized systems, employee manuals, and any other information that, if disclosed, would jeopardize the security of the system or its data or the security of materials exempt under this Section.” In plain English, this exemption says that public bodies aren’t required to reveal information that might jeopardize the security of their systems. You obviously can’t FOIA logins and passwords. You also generally can’t FOIA the source code of programs they run. Chicago claimed that Matt was a “hacker”, and that the CANVAS schema could in the wrong hands put the city at risk. With the help of Merrick Wayne and Matt Topic of Loevy and Loevy, Matt sued the city. Here’s where I come in. They Put Me On The Stand Is the CANVAS schema too scary to give Matt Chapman? To decide that, we have to answer a bunch of questions: Does disclosure of a database schema really jeopardize the security of the system? How plausible or likely does that jeopardy need to be? Does a database schema constitute “source code”? Is a SQL schema a “file format”? And, finally, does the “would jeopardize” language apply to everything in the exemption, or just to the nearest noun “any other information”? I’ve spent the last 25 years of my life doing software vulnerability research, which is a stuffy way of saying that I’m a software developer who looks for bugs in software that would let people do scary things. Matt retained me as his expert witness for his trial, which took place in Cook County Chancery Court. Lined up against me was Bruce Coffing, the Chief Information Security Officer of the City of Chicago. The trial would revolve mostly around questions 1-3. At this point, I need to read you in to another technical concept: “SQL Injection”. “SQL” is the language most programs use to talk to databases. “SQL Injection” is a security vulnerability that programs that use SQL can have. It’s the primary way databases get attacked, and it’s straightforward to explain. Applications that use databases include in their code “SQL queries”, which are form-letter templates of questions they might need to ask the database; for instance: Retrieve the dates of every parking ticket issued to ‘[INSERT NAME]’ Now, let's say it comes time to pull tickets for “Dave Arnold”. Simple: stick his name in the template: Retrieve the dates of every parking ticket issued to ‘Dave Arnold’ But now imagine we need to look up “Bob O’Connor”: Retrieve the dates of every parking ticket issued to ‘Bob O’Connor’ We’ve confused the database: the name in our query is surrounded by quotes, but our name includes a quote. Normally, when your program has this bug, it just generates an error message. But attackers look for this bug, and do things like: Retrieve the data of every parking ticket issued to ‘Bob O’ and also all the rest of the information in the database including everyone’s passwords. This works because the quote the attacker supplied cuts off the text placeholder in the template; all the rest of the attacker’s input gets interpreted as code, which the database executes. Most of the people who will read this post are annoyed with me for taking the time to explain SQL injection. But that is the experience of getting on the stand in Chancery Court and making an argument that the CISO of Chicago was wrong about database vulnerabilities: trying to ensure that a judge shares your understanding of how software vulnerabilities work. On the other hand, if you’re one of my non-nerd readers, congratulations, you now know how to hack the Internets. If anybody asks, I didn’t tell you any of this. The bench trial for Matt’s case came down to the question of whether releasing the CANVAS schema would enable this attack. Specifically, Bruce Coffing argued: The schema makes it possible to spot vulnerabilities. Further, it makes it easier for attackers to be sneaky about probing for vulnerabilities. Finally, it helps attackers pick which applications are most profitable to attack. Coffing seems like a perfectly lovely and well-qualified person. But no, no to all of this. To Coffing’s first point: you don’t find SQL injection vulnerabilities by reading database schemas. You find them instead in the application’s source code, where those database template queries live. Matt isn’t asking for source code. He just wants the header rows from the tables. Here I want to point out that I fucked up in multiple ways expert-witnessing for Matt. For example, in my affidavit, I wrote that SQL schemas would provide “only marginal value” to an attacker. Big mistake. Chicago jumped on those words and said “see, you yourself agree that a schema is of some value to an attacker.” Of course, I don’t really believe that; “only marginal value” is just self-important message-board hedging. I also claimed on the stand that “only an incompetently built application” could be attacked with nothing but it’s schema. Even I don’t know what I meant by that. I recovered my footing when I came up with this argument: “Attackers like me use SQL injection attacks to recover SQL schemas. The schema is the product of an attack, not one of its predicates”. This, too, is self-important puffery. But I’ll tell you who loves “products” and “predicates”, especially used in relation to each other in a single sentence: a Chicago Chancery Court judge. To Coffing’s second argument, about the schema helping attackers stay off his radar when they try attacks, the problem is that every computer system connected to the Internet is being attacked every minute of every day. The noise is deafening. Thousands of people have built scanner bot programs that probe every computer system they can find and fire batteries of well-known attacks (almost none of them ever work, but bots don’t get bored and give up, and eventually the teenager in Malaysia who launched the bot gets lucky). Chicago has no operational response to people turning the doorknobs of their various applications. They can’t; if they did, they’d spend all their time responding to kids in Kuala Lumpur goofing around. Finally, Coffing argued that having the schema might help an attacker decide whether or not an attack would be profitable. A schema might tell you, for instance, that an application deals in credit card data. The thing is, CANVAS already tells you it’s dealing in sensitive information: it’s the backend for processing parking tickets. You don’t need a schema to know that CANVAS is interesting to attackers. The judge bought my arguments. I think my attire gave me salt-of-the-earth credibility; Coffing wore a suit. Providing testimony was a lot of fun. I’d like to do it again sometime. Litigation is super fascinating to watch! For example: we wanted me to testify after Bruce Coffing, so we’d have some idea of what arguments we needed to rebut. But we brought the FOIA case, so the burden was ostensibly on us, and our witnesses went first. But, a-ha! Invoking an exemption in Illinois FOIA is an affirmative defense, and the burden of those arguments shifts to the defendant. But wait: to get fee recovery under the law, we want to assert a willful violation of FOIA; to make that claim, Chicago argues, the burden shifts back to us. Ultimately, Matt Topic and Chicago compromised; Topic dropped “wilfullness” and we got to go second. I’m not saying this is the most interesting thing ever to have happened, but only that if someone works out a way to use AI to make a home version of Chancery Court trials that you can play on a Playstation, I will rack up 10,000 hours playing that game easily. We won. But Chicago immediately appealed. Matt Chapman didn’t get the CANVAS schema. Two years later, the case came before the First District Appellate Court. The basic idea of the appeals court is that the original trial court is the primary “trier of fact”. You appeal legal conclusions, but the facts determined in the original case generally stand. Our bench trial took care of questions 1 and 3. That left 2, 4, and 5. Here’s what the appeals court found: In considering the danger of disclosing information under FOIA, how likely does an attack need to be? Answer: it has to be very likely.The statute says “information that, if disclosed, would jeopardize”. Believe it or not, there’s case law on “would” versus “could” with respect to safety. “Could” means you could imagine something happening. But the legal standard for “would” is “clear evidence of harm leaving no reasonable doubt to the judge”. The statute set the bar for me very low and I managed to clear it. Doesn’t this just make you want to immediately drop everything and become a litigator? I want to litigate! Is a SQL schema a “file layout”? If a schema isn’t source code and it isn’t a file layout, the exemption doesn’t appear to apply at all. The verdict: “shrug emoji”. The appeals court didn’t reach this question, because: Does the “would jeopardize” language in the statute apply to everything in the exemption, or just to the nearest noun “any other information”? Ladies and gentlemen it is time for some legal mumbo-jumbo. Here’s the FOIA exemption Chicago relies on: To what does the qualifying language at point (4) in this text refer? Is it “any other information” (3)? Os is it “Administrative or technical information”, meaning everything in the exemption? If it’s the former, “any other information”, Matt has a problem. That interpretation means things like file layouts (and employee manuals and “load modules”, whatever those are) are per se exempt; that the Illinois legislature meant them as examples of things that would jeopardize security. If it’s the latter, Matt has already won: whether or not a SQL schema is a “software” or a “file layout” or a “load module”, we’ve already proven that it won’t jeopardize security. The court decides it’s the latter. Also, that I am very charming. We win on appeal. Chicago immediately appeals again. Whatever’s in CANVAS, they really don’t want you and I to know about it. A year and change later, the case is decided before the Illinois Supreme Court. And, on the question of how to read the FOIA statute, the Supreme Court disagrees with the appeals court. The qualifying language in the statute applies only to “any other information”. Everything else is “per se” exempt. We started this legal process, of challenging Chicago’s attempt to exempt CANVAS from FOIA, with 5 questions. What happens now is that the 4th question, of whether a schema is a “file layout”, finally becomes very important. The Illinois Supremes have just decided that “file layouts” are per se exempt under Illinois FOIA. Is a SQL schema a file layout? Of course not. The same SQL schema can be used by multiple database engines, and each will use a different underlying file layout to manage the resulting data. The McGraw-Hill Dictionary of Scientific \u0026 Technical Terms, 6E — which the Illinois Supreme Court cites — describes a “file layout” as “A description of the arrangement of the data in a file.” A SQL schema is almost the exact opposite thing: it’s an abstraction of the data in a file, invented specifically so you don’t have to think about how the data is actually arranged. Checkmate! Unfortunately, the Illinois Supreme Court had at their disposal a second dictionary. In the Merriam-Webster Online Dictionary, a “schema” is defined as “a structured framework or plan: outline”. “This is a difference in name only”, said the court. Argh. Schemas are now file layouts. We lose. Where This Leaves Us Obviously, we should have won on appeal to the Illinois Supremes. If you sit on that court, call me, we can straighten this out. That said: today, Illinois public bodies can refuse to divulge database schemas. This is problematic, because more and more data is finding its way out of file cabinets and shared drives and Word documents and into specialized applications, where the only way to get at the underlying data is to FOIA a database query. Databases shouldn’t be a safe harbor for municipalities to conceal information from the public. But, thanks to the good people of Elgin, and also Crystal Lake (motto: “No, Not The One From Friday the 13th”), the Illinois legislature has an opportunity to fix this. SB0226 would add the following language to the statute: [Public bodies] shall provide a sufficient description of the structures of all databases under the control of the public body to allow a requester to request the public body to perform specific database queries. ⚡️Hell yes.⚡️ My understanding is that this bill was proposed in no small part because Matt Chapman has steadfastly refused to shut up about this issue, and so I’ll conclude this long piece by saying (1) obviously the bill should pass, and (2) it should be called “The Chapman Act”. Call your reps!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n\n\u003cp\u003eShould public bodies in Illinois, like cities and school districts\nand sheriff’s departments, be allowed to hide information from Freedom\nof Information requests by keeping them in databases? That question is\nbefore the 104th Illinois General Assembly, thanks to a bill sponsored\nby Donald P. DeWitte, elected state senator by the wise citizens of\nBatavia and Elgin (motto: “The City In The Suburbs”; indeed), and\nprompted in part by my friend Matt Chapman.\u003c/p\u003e\n\u003cp\u003eI play a very small part in this story, so I get to tell it.\u003c/p\u003e\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003eIllinois has an \u003ca href=\"https://www.ilga.gov/legislation/ilcs/ilcs3.asp?ActID=85\"\u003eexcellent,\ntoothy FOIA statute\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWith \u003ca href=\"https://casetext.com/statute/illinois-compiled-statutes/government/chapter-5-general-provisions/subchapter-freedom-of-information/act-140-freedom-of-information-act/section-5-ilcs-1407-exemptions\"\u003every\nfew exceptions\u003c/a\u003e, any information collected by an Illinois public body\nis public property. Anybody is entitled to ask for it. You can’t\ngenerally be charged for asking. Public bodies can’t really limit the\nnumber of requests you make. They get just 5 days to respond, with 5\nadditional extension days if requested in writing. Improper denials can\nget you legal fee recovery if you sue over them, so there are lawyers\nthat will take these cases on contingency. It’s pretty neat!\u003c/p\u003e\n\u003cp\u003eI think people are too shy about making FOIA requests. It’s easier\nthan it looks! You just need to send an email to the public body you\nwant information from. Put “FOIA” in the subject line. By law, there’s\nno more ceremony to it than that. And you’ll find that the people\nresponding to those emails are generally kind and happy to help.\u003c/p\u003e\n\u003cp\u003eThe one big limitation of Illinois FOIA (with FOIA laws everywhere, really)\nis that you can’t use them to compel public bodies to create new\nrecords. Often, what you’ll be looking for is some kind of report about\nsome issue of public policy. If that exact report exists, you’re golden.\nBut if it doesn’t, you have to find and request the raw data for that\nreport, and you have to assemble it yourself. This limitation is about\nto matter a lot.\u003c/p\u003e\n\u003cp\u003eTo understand what’s happening in this story, I’m going to have to\nexplain a technical concept: the idea of a “database schema”. More and\nmore of the information tracked by public bodies now lives in databases,\nrather than filing cabinets or shared drives. Databases are organized\naccording to schemas.\u003c/p\u003e\n\u003cp\u003eThink of a modern database as a huge Excel spreadsheet file, with\nmany dozens of tabs. Each tab has a name; under each of those tabs is a\nseparate spreadsheet. Each spreadsheet has a header row, labeling the\ncolumns, like “price” and “quantity” and “name”. A database schema is\nsimply the names of all the tabs, and each of those header rows.\u003c/p\u003e\n\u003cp\u003eCongratulations! You now understand databases. \n\n\u003c/p\u003e\u003ch2\u003eMatt Chapman vs. City of Chicago\u003c/h2\u003e\n\u003cp\u003eMy friend Matt is a self-styled “\u003ca href=\"https://mchap.io/\"\u003ecivic\nhacker\u003c/a\u003e” and a national expert at performing data journalism with\nlarge-scale FOIA requests. Matt’s love language is pushing FOIA statutes\nto their limits, sniffing out buried data and bulk-extracting it with\nclever requests.\u003c/p\u003e\n\u003cp\u003eA good example of the kind of stuff Matt does is this \u003ca href=\"https://www.propublica.org/article/chicago-ticket-data-chi-hack-night\"\u003eProPublica\ncollaboration\u003c/a\u003e about how Chicago issues parking tickets. After Matt\nwas towed over a facially bogus ticket and successfully took the city to\ncourt over it, he got curious about the patterns of towing for things\nlike compliance violations. As it turns out, parking tickets have pushed\nthousands of Illinoisans into bankruptcy, and, once you \u003ca href=\"https://mchap.io/parking-ticket-visualization-in-chicago.html\"\u003eget\nyour hands on the ticket data\u003c/a\u003e, it turns out there’s a very clear\npattern of majority-Black neighborhoods being systematically targeted\nfor higher enforcement.\u003c/p\u003e\n\u003cp\u003eIn the course of this reporting work, Matt learned about a system\nChicago operates called CANVAS. CANVAS is the central repository for all\nparking ticket data in the city. It’s a giant database, and Matt would\nvery much like to know what’s in it. So he filed a FOIA request for the\nCANVAS database schema.\u003c/p\u003e\n\u003cp\u003eThe city flatly refused. To do so, they relied on a specific\nexemption in the statute:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“(o) Administrative or technical information associated with\nautomated data processing operations, including but not limited to\nsoftware, operating protocols, computer program abstracts, file layouts,\nsource listings, object modules, load modules, user guides,\ndocumentation pertaining to all logical and physical design of\ncomputerized systems, employee manuals, and any other information that,\nif disclosed, would jeopardize the security of the system or its data or\nthe security of materials exempt under this Section.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn plain English, this exemption says that public bodies aren’t\nrequired to reveal information that might jeopardize the security of\ntheir systems. You obviously can’t FOIA logins and passwords. You also\ngenerally can’t FOIA the source code of programs they run. Chicago\nclaimed that Matt was a “hacker”, and that the CANVAS schema could in\nthe wrong hands put the city at risk.\u003c/p\u003e\n\u003cp\u003eWith the help of Merrick Wayne and Matt Topic of Loevy and Loevy,\nMatt sued the city. Here’s where I come in.\u003c/p\u003e\n\u003ch2 id=\"they-put-me-on-the-stand\"\u003eThey Put Me On The Stand\u003c/h2\u003e\n\u003cp\u003e\u003cimg src=\"https://sockpuppet.org/blog/2025/02/09/fixing-illinois-foia/dresscode.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eIs the CANVAS schema too scary to give Matt Chapman? To decide that,\nwe have to answer a bunch of questions:\u003c/p\u003e\n\u003col type=\"1\"\u003e\n\u003cli\u003eDoes disclosure of a database schema really jeopardize the security\nof the system?\u003c/li\u003e\n\u003cli\u003eHow plausible or likely does that jeopardy need to be?\u003c/li\u003e\n\u003cli\u003eDoes a database schema constitute “source code”?\u003c/li\u003e\n\u003cli\u003eIs a SQL schema a “file format”?\u003c/li\u003e\n\u003cli\u003eAnd, finally, does the “would jeopardize” language apply to\neverything in the exemption, or just to the nearest noun “any other\ninformation”?\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI’ve spent the last 25 years of my life doing software vulnerability\nresearch, which is a stuffy way of saying that I’m a software developer\nwho looks for bugs in software that would let people do scary things.\nMatt retained me as his expert witness for his trial, which took place\nin Cook County Chancery Court. Lined up against me was Bruce Coffing, the\nChief Information Security Officer of the City of Chicago.\u003c/p\u003e\u003cp\u003e The trial\nwould revolve mostly around questions 1-3.\u003c/p\u003e\n\u003cp\u003eAt this point, I need to read you in to another technical concept:\n“SQL Injection”. “SQL” is the language most programs use to talk to\ndatabases. “SQL Injection” is a security vulnerability that programs\nthat use SQL can have. It’s the primary way databases get attacked, and it’s\nstraightforward to explain.\u003c/p\u003e\n\u003cp\u003eApplications that use databases include in their code “SQL queries”,\nwhich are form-letter templates of questions they might need to ask the\ndatabase; for instance:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRetrieve the dates of every parking ticket issued to \u003cspan\u003e‘[INSERT\nNAME]’\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eNow, let\u0026#39;s say it comes time to pull tickets for “Dave Arnold”. Simple: stick\nhis name in the template:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRetrieve the dates of every parking ticket issued to \u003cspan\u003e‘Dave\nArnold’\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eBut now imagine we need to look up “Bob O’Connor”:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRetrieve the dates of every parking ticket issued to \u003cspan\u003e‘Bob\nO’\u003c/span\u003e\u003cspan\u003eConnor’\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWe’ve confused the database: the name in our query is surrounded by\nquotes, but our name includes a quote. Normally, when your program has\nthis bug, it just generates an error message. But attackers look for\nthis bug, and do things like:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRetrieve the data of every parking ticket issued to \u003cspan\u003e‘Bob O’\u003c/span\u003e\u003cspan\u003e and also\nall the rest of the information in the database including everyone’s\npasswords.\u003c/span\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis works because the quote the attacker supplied cuts off the text\nplaceholder in the template; all the rest of the attacker’s input gets\ninterpreted as code, which the database executes.\u003c/p\u003e\n\u003cp\u003eMost of the people who will read this post are annoyed with me for\ntaking the time to explain SQL injection. But that is the experience of\ngetting on the stand in Chancery Court and making an argument that the\nCISO of Chicago was wrong about database vulnerabilities: trying to\nensure that a judge shares your understanding of how software\nvulnerabilities work.\u003c/p\u003e\n\u003cp\u003eOn the other hand, if you’re one of my non-nerd readers,\ncongratulations, you now know how to hack the Internets. If anybody\nasks, I didn’t tell you any of this.\u003c/p\u003e\n\u003cp\u003eThe bench trial for Matt’s case came down to the question of whether\nreleasing the CANVAS schema would enable this attack. Specifically,\nBruce Coffing argued: \u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eThe schema makes it possible to spot\nvulnerabilities.\u003c/li\u003e\n\u003cli\u003eFurther, it makes it easier for attackers to be\nsneaky about probing for vulnerabilities.\u003c/li\u003e\n\u003cli\u003eFinally, it helps attackers\npick which applications are most profitable to attack.\u003c/li\u003e\u003c/ol\u003e\n\u003cp\u003eCoffing seems like a perfectly lovely and well-qualified person. \u003cstrong\u003eBut\nno, no to all of this.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://sockpuppet.org/blog/2025/02/09/fixing-illinois-foia/slowdown.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eTo Coffing’s first point: you don’t find SQL injection\nvulnerabilities by reading database schemas. You find them instead in\nthe application’s source code, where those database template queries\nlive. Matt isn’t asking for source code. He just wants the header rows\nfrom the tables.\u003c/p\u003e\n\u003cp\u003eHere I want to point out that \u003ca href=\"https://www.documentcloud.org/documents/6746618-Matt-Chapman-v-Department-of-Finance-XX-1092020/?q=file+layout\u0026amp;mode=document#document/p131\"\u003eI\nfucked up in multiple ways\u003c/a\u003e expert-witnessing for Matt. For example,\nin \u003ca href=\"https://youtu.be/pPC9Bntrsew?feature=shared\u0026amp;t=28\"\u003emy affidavit\u003c/a\u003e, I wrote that SQL schemas would provide “only marginal\nvalue” to an attacker. Big mistake. Chicago jumped on those words and\nsaid “see, you yourself agree that a schema is of some value to an\nattacker.” Of course, I don’t really believe that; “only marginal value”\nis just self-important message-board hedging. I also claimed on the\nstand that “only an incompetently built application” could be attacked\nwith nothing but it’s schema. Even I don’t know what I meant by\nthat.\u003c/p\u003e\n\u003cp\u003eI recovered my footing when I came up with this argument: “Attackers\nlike me use SQL injection attacks to recover SQL schemas. The schema is\nthe product of an attack, not one of its predicates”. This, too, is\nself-important puffery. But I’ll tell you who loves “products” and\n“predicates”, especially used in relation to each other in a single\nsentence: a Chicago Chancery Court judge.\u003c/p\u003e\n\u003cp\u003eTo Coffing’s second argument, about the schema helping attackers stay\noff his radar when they try attacks, the problem is that every computer\nsystem connected to the Internet is being attacked every minute of every\nday. The noise is deafening.\u003c/p\u003e\n\u003cp\u003eThousands of people have built scanner bot programs that probe every\ncomputer system they can find and fire batteries of well-known attacks\n(almost none of them ever work, but bots don’t get bored and give up,\nand eventually the teenager in Malaysia who launched the bot gets\nlucky). Chicago has no operational response to people turning the\ndoorknobs of their various applications. They can’t; if they did, they’d\nspend all their time responding to kids in Kuala Lumpur goofing\naround.\u003c/p\u003e\n\u003cp\u003eFinally, Coffing argued that having the schema might help an attacker\ndecide whether or not an attack would be profitable. A schema might tell\nyou, for instance, that an application deals in credit card data. The\nthing is, CANVAS already tells you it’s dealing in sensitive\ninformation: it’s the backend for processing parking tickets. You don’t\nneed a schema to know that CANVAS is interesting to attackers.\u003c/p\u003e\n\u003cp\u003eThe judge bought my arguments. I think my attire gave me\nsalt-of-the-earth credibility; Coffing wore a suit.\u003c/p\u003e\n\u003cp\u003eProviding testimony was a lot of fun. I’d like to do it again\nsometime. Litigation is super fascinating to watch! For example: we\nwanted me to testify after Bruce Coffing, so we’d have some idea of what\narguments we needed to rebut. But we brought the FOIA case, so the\nburden was ostensibly on us, and our witnesses went first. But, a-ha!\nInvoking an exemption in Illinois FOIA is an affirmative defense, and\nthe burden of those arguments shifts to the defendant. But wait: to get\nfee recovery under the law, we want to assert a willful violation of\nFOIA; to make that claim, Chicago argues, the burden shifts back to us.\nUltimately, Matt Topic and Chicago compromised; Topic dropped\n“wilfullness” and we got to go second.\u003c/p\u003e\n\u003cp\u003eI’m not saying this is the most interesting thing ever to have\nhappened, but only that if someone works out a way to use AI to make a\nhome version of Chancery Court trials that you can play on a\nPlaystation, I will rack up 10,000 hours playing that game easily.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://sockpuppet.org/blog/2025/02/09/fixing-illinois-foia/iwin.png\"/\u003e\u003c/p\u003e\n\u003cp\u003eWe won. But Chicago immediately appealed. Matt Chapman didn’t get the\nCANVAS schema. Two years later, \u003ca href=\"https://ilcourtsaudio.blob.core.windows.net/antilles-resources/resources/5ff80f52-17df-4b2a-ba91-4b977f150c6f/Chapman%20v.%20Chicago%20Department%20of%20Finance,%202022%20IL%20App%20%281st%29%20200547.pdf\"\u003ethe\ncase came before the First District Appellate Court\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe basic idea of the appeals court is that the original trial court\nis the primary “trier of fact”. You appeal legal conclusions, but the\nfacts determined in the original case generally stand. Our bench trial\ntook care of questions 1 and 3. That left 2, 4, and 5. Here’s what the\nappeals court found:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIn considering the danger of disclosing information under FOIA,\nhow likely does an attack need to be?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e Answer: it has to be very\nlikely.\u003c/p\u003e\u003cp\u003eThe statute says “information that, if disclosed, would\njeopardize”.\u003c/p\u003e\u003cp\u003e Believe it or not, there’s case law on “would” versus\n“could” with respect to safety. “Could” means you could imagine\nsomething happening. But the legal standard for “would” is “clear\nevidence of harm leaving no reasonable doubt to the judge”. The statute\nset the bar for me very low and I managed to clear it.\u003c/p\u003e\u003cp\u003e Doesn’t this just\nmake you want to immediately drop everything and become a litigator? I\nwant to litigate!\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eIs a SQL schema a “file layout”?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\nIf a schema isn’t source code and it isn’t a file layout, the exemption\ndoesn’t appear to apply at all. The verdict: “shrug emoji”. The appeals\ncourt didn’t reach this question, because:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eDoes the “would jeopardize” language in the statute apply to\neverything in the exemption, or just to the nearest noun “any other\ninformation”?\u003c/em\u003e\u003c/p\u003e\u003cp\u003e Ladies and gentlemen it is time for some legal\nmumbo-jumbo.\u003c/p\u003e\n\u003cp\u003eHere’s the FOIA exemption Chicago relies on: \u003cimg src=\"https://sockpuppet.org/blog/2025/02/09/fixing-illinois-foia/statute.png\"/\u003e To what does\nthe qualifying language at point (4) in this text refer? Is it “any\nother information” (3)? Os is it “Administrative or technical\ninformation”, meaning everything in the exemption?\u003c/p\u003e\n\u003cp\u003eIf it’s the former, “any other information”, Matt has a problem. That\ninterpretation means things like file layouts (and\nemployee manuals and “load modules”, whatever those are) are \u003cem\u003eper\nse\u003c/em\u003e exempt; that the Illinois legislature meant them as examples of\nthings that would jeopardize security.\u003c/p\u003e\u003cp\u003e If it’s the latter, Matt has\nalready won: whether or not a SQL schema is a “software” or a “file\nlayout” or a “load module”, we’ve already proven that it won’t\njeopardize security.\u003c/p\u003e\n\u003cp\u003eThe court decides it’s the latter. Also, that I am very charming. We\nwin on appeal. Chicago immediately appeals again. Whatever’s in CANVAS,\nthey really don’t want you and I to know about it.\u003c/p\u003e\n\u003cp\u003eA year and change later, \u003ca href=\"https://caselaw.findlaw.com/court/il-supreme-court/2201134.html\"\u003ethe\ncase is decided before the Illinois Supreme Court\u003c/a\u003e. And, on the\nquestion of how to read the FOIA statute, the Supreme Court disagrees\nwith the appeals court. The qualifying language in the statute applies\nonly to “any other information”. Everything else is “per se” exempt.\u003c/p\u003e\n\u003cp\u003eWe started this legal process, of challenging Chicago’s attempt to\nexempt CANVAS from FOIA, with 5 questions. What happens now is that the\n4th question, of whether a schema is a “file layout”, finally becomes\nvery important. The Illinois Supremes have just decided that “file\nlayouts” are \u003cem\u003eper se\u003c/em\u003e exempt under Illinois FOIA.\u003c/p\u003e\n\u003cp\u003eIs a SQL schema a file layout? Of course not. The same SQL schema can\nbe used by multiple database engines, and each will use a different\nunderlying file layout to manage the resulting data.\u003c/p\u003e\n\u003cp\u003eThe McGraw-Hill Dictionary of Scientific \u0026amp; Technical Terms, 6E —\nwhich the Illinois Supreme Court cites — describes a “file layout” as “A\ndescription of the arrangement of the data in a file.” \u003cstrong\u003eA SQL schema is\nalmost the exact opposite thing: it’s an abstraction of the data in a\nfile, invented specifically so you don’t have to think about how the\ndata is actually arranged.\u003c/strong\u003e Checkmate!\u003c/p\u003e\n\u003cp\u003eUnfortunately, the Illinois Supreme Court had at their disposal a\nsecond dictionary. In the Merriam-Webster Online Dictionary, a “schema”\nis defined as “a structured framework or plan: outline”. “This is a\ndifference in name only”, said the court. Argh. Schemas are now file\nlayouts. We lose.\u003c/p\u003e\n\u003ch3 id=\"where-this-leaves-us\"\u003eWhere This Leaves Us\u003c/h3\u003e\n\u003cp\u003eObviously, \u003ca href=\"https://www.bettergov.org/2023/05/19/better-government-association-statement-supreme-court-foia-ruling-limits-transparency-significantly-broadens-exemptions-to-foia/\"\u003ewe\nshould have won on appeal to the Illinois Supremes\u003c/a\u003e. If you sit on\nthat court, call me, we can straighten this out.\u003c/p\u003e\n\u003cp\u003eThat said: today, Illinois public bodies can refuse to divulge\ndatabase schemas.\u003c/p\u003e\n\u003cp\u003eThis is problematic, because more and more data is finding its way\nout of file cabinets and shared drives and Word documents and into\nspecialized applications, where the only way to get at the underlying\ndata is to FOIA a database query.\u003c/p\u003e\n\u003cp\u003eDatabases shouldn’t be a safe harbor for municipalities to conceal\ninformation from the public.\u003c/p\u003e\n\u003cp\u003eBut, thanks to the good people of Elgin, and also Crystal Lake\n(motto: “No, Not The One From Friday the 13th”), the Illinois\nlegislature has an opportunity to fix this. \u003ca href=\"https://www.ilga.gov/legislation/fulltext.asp?DocName=\u0026amp;SessionId=114\u0026amp;GA=104\u0026amp;DocTypeId=SB\u0026amp;DocNum=226\u0026amp;GAID=18\u0026amp;LegID=157537\u0026amp;SpecSess=\u0026amp;Session=\"\u003eSB0226\u003c/a\u003e\nwould add the following language to the statute:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e[Public bodies] shall provide a sufficient description of the\nstructures of all databases under the control of the public body to\nallow a requester to request the public body to perform specific\ndatabase queries.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e⚡️\u003cstrong\u003eHell yes\u003c/strong\u003e.⚡️\u003c/p\u003e\n\u003cp\u003eMy understanding is that this bill was proposed in no small part\nbecause Matt Chapman has steadfastly refused to shut up about this\nissue, and so I’ll conclude this long piece by saying (1) obviously the\nbill should pass, and (2) it should be called “The Chapman Act”.\u003c/p\u003e\n\u003cp\u003eCall your reps!\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "18 min read",
  "publishedTime": null,
  "modifiedTime": null
}
