{
  "id": "088e29a9-07e9-42fa-8ad7-3860559b5db8",
  "title": "RDNA 4's “Out-of-Order” Memory Accesses",
  "link": "https://chipsandcheese.com/p/rdna-4s-out-of-order-memory-accesses",
  "description": "Comments",
  "author": "",
  "published": "Sun, 23 Mar 2025 22:18:29 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "Chester Lam",
  "length": 12362,
  "excerpt": "Examining RDNA 4's out-of-order memory accesses in detail, and investigating with testing",
  "siteName": "Chips and Cheese",
  "favicon": "https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6d6ceac7-3196-46ce-837d-21e5b40021ae%2Fapple-touch-icon-1024x1024.png",
  "text": "AMD's RDNA 4 brings a variety of memory subsystem enhancements. Among those, one slide stood out because it dealt with out-of-order memory accesses. According to the slide, RDNA 4 allows requests from different shaders to be satisfied out-of-order, and adds new out-of-order queues for memory requests.AMD apparently had a false dependency case in the memory subsystem prior to RDNA 4. One wave could wait for a memory loads made by another wave. A \"wavefront\", \"wave\", or \"warp\" on a GPU is the rough equivalent of a CPU thread. It has its own register state, and can run out of sync with other waves. Each wave's instructions are independent from those in other waves with very few exceptions (like atomic operations).In RDNA 3, there was a strict ordering on the return of data, such that effectively a request that was made later in time was not permitted to pass a request made earlier in time, even if the data for it was ready much sooner.Navi 4 Architecture Deep Dive, Andrew Pomianowski, CVP, Silicon Design Engineering (AMD)A fundamental tenet of multithreaded programming is that you get no ordering guarantees between threads unless you make it happen via locks or other mechanisms. That's what makes multithreaded performance scaling work. AMD's slide took me by surprise because there's no reason memory reads should be an exception. I re-watched the video several times and stared at the slide for a while to see if that's really what they meant. They clearly meant it, but I still didn't believe my eyes and ears. So I took time to craft a test for it.AMD's slide describes a scenario where one wave's cache misses prevent another wave from quickly consuming data from cache hits. Causing cache misses is easy. I can pointer chase through a large array with a random pattern (\"wave Y\"). Similarly, I can keep accesses within a small memory footprint to get cache hits (\"wave X\"). But doing both at the same time is problematic. Wave Y may evict data used by wave X, causing cache misses on wave X.Focusing on this scenario, and trying to create a Wave X and Wave Y that might hold each other upInstead of going for cache hits and misses, I tested by seeing whether waiting on memory accesses in one wave would falsely wait in on memory accesses made by another. My \"wave Y\" is basically a memory latency test, and makes a fixed number of accesses. Each access depends on the previous one's result, and I have the wave pointer chase through a 1 GB array to ensure cache misses. My \"wave X\" makes four independent memory accesses per loop iteration. It then consumes the load data, which means waiting for data to arrive from memory.Once wave Y completes all of its accesses, it sets a flag in local memory. Wave X makes as many memory accesses as it can until it sees the flag set, after which it writes out its “score” and terminates. I run both waves in the same workgroup to ensure they share a WGP, and therefore share as much of the memory subsystem as possible. Keeping both waves in the same workgroup also lets me place the “finished” flag in local memory. Wave X has to check that flag every iteration, and it’s best to have flag checks not go through the same caches that wave Y is busy contaminating.If each wave X access gets delayed by a wave Y one, I should see approximately the same number of accesses from both. Instead on RDNA 3, I see wave X make more accesses than wave Y by exactly the loop unroll factor on wave X. AMD's compiler statically schedules instructions and sends out all four accesses before waiting on data. It then waits on load completion with s_waitcnt vmcnt(...) instructions.Annotated RDNA 3 assembly generated by AMD's compiler for wave X. Note that unrolling the loop to use four memory accesses per iteration lets the compiler issue those four accesses before waiting on themAccesses tracked by vmcnt always return in-order, letting the compiler wait on specific accesses by waiting until vmcnt decrements to a certain value or lower. In wave Y, I make all accesses dependent so the compiler only waits for vmcnt to reach 0.Annotated RDNA 3 assembly for wave y, for completenessOn RDNA 3, s_waitcnt vmcnt(...) seems to wait for requests to complete not only from its wave, but from other waves too. That explains why wave X makes exactly four accesses for each access that wave Y makes. If I unroll the loop more, letting the compiler schedule more independent accesses before waiting, the ratio goes up to match the unroll factor.On RDNA 4, the two waves don’t care what the other is doing. That’s the way it should be. RDNA 4 also displays more run-to-run variation, which is also expected because cache behavior is highly unpredictable in this test. I’m surprised by the results, but it’s convincing evidence that AMD indeed had false cross-wave memory delays on RDNA 3 and older GPU architectures. I also tested on Renoir’s Vega iGPU, and saw the same behavior as RDNA 3.At a simplistic level, you can imagine that requests from the shaders go into a queue to be serviced, and many of those requests can be in flightNavi 4 Architecture Deep Dive, Andrew Pomianowski, CVP, Silicon Design Engineering (AMD)AMD's presentation hints that RDNA 3 and older GPUs had multiple waves sharing a memory access queue. As mentioned above, AMD GPUs since GCN handle memory dependencies with hardware counters that software waits on. By keeping vmcnt returns in-order, the compiler can wait on the specific load that produces data needed by the next instruction, without also waiting on every other load the wave has pending. RDNA 3 and prior AMD GPUs possibly had a shared memory access queue, with each entry tagged with its wave's ID. As each memory access leaves the queue in-order, hardware decrements the counter for its wave.Perhaps RDNA 4 divides the shared queue into per-thread queues. That would align with the point on AMD's slide saying RDNA 4 introduces \"additional out-of-order queues\" for memory requests. Or perhaps RDNA 4 retains a shared queue, but can drain entries out-of-order. That would require tracking extra info, like whether a memory access is the oldest one for its wave.Sharing a memory access queue and returning data in-order seems like a natural hardware simplification. That raises the question of whether GPU architectures from Intel and Nvidia had similar limitations.Intel's Xe-LPG does not have false cross-wave memory dependencies. Running the same test on Meteor Lake's iGPU shows variation depending on where the two waves end up. If wave X and wave Y run on XVEs with shared instruction control logic, wave X's performance is lower than in other cases. Regardless, it's clear Xe-LPG doesn't force a wave to wait on another's accesses. Intel's subsequent Battlemage (Xe2) architecture shows similar behavior, and the same applies to Intel's Gen 9 (Skylake) graphics from a while ago.I also checked generated assembly to ensure Intel's compiler wasn't unrolling the loop further.Generated assembly on Meteor Lake's iGPU for Wave X. UGM = untyped global memory, SLM = shared local memory. The rest is trivial, just remember that Intel GPUs have registers that are full of registers...never mindNvidia's Pascal has varying behavior depending on where waves are located within a SM. Each Pascal SM has four partitions, which are arranged in pairs that share a texture unit and a 24 KB texture cache. Waves are assigned to partitions within a pair first. It's as if the partitions are numbered [0,1]-\u003e tex, [2,3]-\u003e tex. Waves in the same sub-partition pair have the false dependency issue. Evidently they share some general load/store logic besides the texture unit, because I don't touch textures in this test.If a wave is not offset from another one by a multiple of four or multiple of 4 plus one, it doesn't have the false dependency problem. Turing, as tested on the GTX 1660 Ti, doesn't have a problem either.Besides removing false cross-wave delays, AMD also improved memory request handling within a wave. Much like in-order CPU cores, like Arm's Cortex A510, GPUs can execute independent instructions while waiting on memory access. A thread only stalls when it tries to use the memory access's result. GPUs have done this for decades, though the implementation details differ. Intel and Nvidia's GPUs use a software managed scoreboard. AMD used pending request counters from GCN onward.RDNA 4 uses the same scheme but splits out the vmcnt category into several counters. A thread can interleave global memory, texture sampling, and raytracing intersection test requests, and wait on them separately. That gives the compiler more flexibility to move work ahead of a wait for memory access completion. Another interpretation of AMD's slide is that the each counter corresponds to a separate queue, each of which has out-of-order behavior across waves (but may have in-order behavior within a wave).Example of RDNA 4 assembly from 3DMark's raytracing feature test, showing a basic block separately waiting on global memory loads and texture sampling requests issued by other basic blocksSimilarly, lgkmcnt gets separated into kmcnt for scalar memory loads and dscnt for LDS accesses. Scalar memory loads are out-of-order, which means the compiler must wait for all scalar memory loads to complete (kmcnt=0 or lgmkcnt=0) before using results from any pending scalar memory load. On RDNA 4, the compiler can interleave scalar memory and LDS accesses without having to wait for lgkmcnt=0.Intel and Nvidia's GPUs use software managed scoreboards. A scoreboard entry can be set or and waited on by any instruction, regardless of memory access type. Therefore RDNA 4's optimization isn't applicable to those other GPU architectures. A cost to Intel/Nvidia's approach is that utilizing a big memory request queue would require a correspondingly large scoreboard. AMD can extend a counter by one bit and double the number of queue entries a wave can use.RDNA 4's memory subsystem enhancements are exciting and improve performance across a variety of workloads compared to RDNA 3. AMD specifically calls out benefits in raytracing workloads, where traversal and result handling may occur simultaneously on the same WGP. Traversal involves pointer chasing, while result handling might involve more cache friendly data lookups and texture sampling. Breaking cross-wave memory dependencies would prevent different memory access patterns in those tasks from delaying each other.Likely this wasn't an issue with rasterization because waves assigned to a WGP probably work on pixels in close proximity. Those waves may sample the same textures, and even take samples in close proximity to each other within the same texture. If one wave misses in cache, the others likely do too.Breaking up vmcnt and lgmkcnt probably helps raytracing too. Raytracing shaders make BVH intersection and LDS stack management requests during traversal. Then they might sample textures or access global memory buffers during result handling. Giving the compiler flexibility to interleave those request types and still wait on a specific request is a good thing.Radeon logo on the RX 9070 graciously provided by AMD for reviewBut RDNA 4's scheme for handling memory dependencies isn't fundamentally different from that of GCN many years ago. While the implementation details differ, RDNA 4, GCN, and Intel and Nvidia's GPUs can all absorb cache misses without immediately stalling a thread. Each GPU maker has improved their ability to do so, whether it's with more scoreboard tokens or more counters. RDNA 4 indeed can do Cortex A510 style nonblocking loads, but it's far from a new feature in the world of GPUs.Resolving false cross-wave dependencies isn't new either. Nvidia had \"out-of-order\" cross-wave memory access handling in Turing, and presumably their newer architectures too. Intel had the same at least as far back as Gen 9 (Skylake) graphics. Therefore RDNA 4's \"out-of-order\" memory subsystem enhancements are best seen as generational tweaks, rather than new game changing techniques. Still, AMD's engineers deserve credit for making them happen. RDNA 4’s arguably makes the most significant change to AMD’s GPU memory subsystem since RDNA launched in 2019. I'm glad to see the company continue to improve their GPU architecture and make it better suited to emerging workloads like raytracing.",
  "image": "https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv dir=\"auto\"\u003e\u003cp\u003eAMD\u0026#39;s RDNA 4 brings a variety of memory subsystem enhancements. Among those, one slide stood out because it dealt with out-of-order memory accesses. According to the slide, RDNA 4 allows requests from different shaders to be satisfied out-of-order, and adds new out-of-order queues for memory requests.\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png\" width=\"1279\" height=\"719\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/594baab5-718d-47d7-a578-284a1981bffb_1279x719.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:719,\u0026#34;width\u0026#34;:1279,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:208782,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:false,\u0026#34;topImage\u0026#34;:true,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F594baab5-718d-47d7-a578-284a1981bffb_1279x719.png 1456w\" sizes=\"100vw\" fetchpriority=\"high\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eAMD apparently had a false dependency case in the memory subsystem prior to RDNA 4. One wave could wait for a memory loads made by another wave. A \u0026#34;wavefront\u0026#34;, \u0026#34;wave\u0026#34;, or \u0026#34;warp\u0026#34; on a GPU is the rough equivalent of a CPU thread. It has its own register state, and can run out of sync with other waves. Each wave\u0026#39;s instructions are independent from those in other waves with very few exceptions (like atomic operations).\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIn RDNA 3, there was a strict ordering on the return of data, such that effectively a request that was made later in time was not permitted to pass a request made earlier in time, even if the data for it was ready much sooner.\u003c/p\u003e\u003cp\u003eNavi 4 Architecture Deep Dive, Andrew Pomianowski, CVP, Silicon Design Engineering (AMD)\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eA fundamental tenet of multithreaded programming is that you get no ordering guarantees between threads unless you make it happen via locks or other mechanisms. That\u0026#39;s what makes multithreaded performance scaling work. AMD\u0026#39;s slide took me by surprise because there\u0026#39;s no reason memory reads should be an exception. I re-watched the video several times and stared at the slide for a while to see if that\u0026#39;s really what they meant. They clearly meant it, but I still didn\u0026#39;t believe my eyes and ears. So I took time to craft a test for it.\u003c/p\u003e\u003cp\u003eAMD\u0026#39;s slide describes a scenario where one wave\u0026#39;s cache misses prevent another wave from quickly consuming data from cache hits. Causing cache misses is easy. I can pointer chase through a large array with a random pattern (\u0026#34;wave Y\u0026#34;). Similarly, I can keep accesses within a small memory footprint to get cache hits (\u0026#34;wave X\u0026#34;). But doing both at the same time is problematic. Wave Y may evict data used by wave X, causing cache misses on wave X.\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png\" width=\"1276\" height=\"716\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:716,\u0026#34;width\u0026#34;:1276,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:184441,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:false,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F37cebe98-6193-441d-9614-41ae0bd308f8_1276x716.png 1456w\" sizes=\"100vw\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003eFocusing on this scenario, and trying to create a Wave X and Wave Y that might hold each other up\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eInstead of going for cache hits and misses, I tested by seeing whether waiting on memory accesses in one wave would falsely wait in on memory accesses made by another. My \u0026#34;wave Y\u0026#34; is basically a memory latency test, and makes a fixed number of accesses. Each access depends on the previous one\u0026#39;s result, and I have the wave pointer chase through a 1 GB array to ensure cache misses. My \u0026#34;wave X\u0026#34; makes four independent memory accesses per loop iteration. It then consumes the load data, which means waiting for data to arrive from memory.\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png\" width=\"581\" height=\"512\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:512,\u0026#34;width\u0026#34;:581,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:33717,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F019d5043-43b7-4c69-a802-fe11965cf3c6_581x512.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eOnce wave Y completes all of its accesses, it sets a flag in local memory. Wave X makes as many memory accesses as it can until it sees the flag set, after which it writes out its “score” and terminates. I run both waves in the same workgroup to ensure they share a WGP, and therefore share as much of the memory subsystem as possible. Keeping both waves in the same workgroup also lets me place the “finished” flag in local memory. Wave X has to check that flag every iteration, and it’s best to have flag checks not go through the same caches that wave Y is busy contaminating.\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png\" width=\"1277\" height=\"455\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/fcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:455,\u0026#34;width\u0026#34;:1277,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:68745,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ffcb15806-3761-403f-b44f-9bcbfb093090_1277x455.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eIf each wave X access gets delayed by a wave Y one, I should see approximately the same number of accesses from both. Instead on RDNA 3, I see wave X make more accesses than wave Y by exactly the loop unroll factor on wave X. AMD\u0026#39;s compiler statically schedules instructions and sends out all four accesses before waiting on data. It then waits on load completion with \u003c/span\u003e\u003ccode\u003es_waitcnt vmcnt(...)\u003c/code\u003e\u003cspan\u003e instructions.\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png\" width=\"658\" height=\"409\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/55d96b98-8322-49fa-80d4-a11068559b60_658x409.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:409,\u0026#34;width\u0026#34;:658,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:42922,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55d96b98-8322-49fa-80d4-a11068559b60_658x409.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003eAnnotated RDNA 3 assembly generated by AMD\u0026#39;s compiler for wave X. Note that unrolling the loop to use four memory accesses per iteration lets the compiler issue those four accesses before waiting on them\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eAccesses tracked by \u003c/span\u003e\u003ccode\u003evmcnt\u003c/code\u003e\u003cspan\u003e always return in-order, letting the compiler wait on specific accesses by waiting until \u003c/span\u003e\u003ccode\u003evmcnt\u003c/code\u003e\u003cspan\u003e decrements to a certain value or lower. In wave Y, I make all accesses dependent so the compiler only waits for \u003c/span\u003e\u003ccode\u003evmcnt\u003c/code\u003e\u003cspan\u003e to reach 0.\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png\" width=\"702\" height=\"333\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:333,\u0026#34;width\u0026#34;:702,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:42222,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3375a846-7bdf-46b7-b5dc-ec30340c2474_702x333.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003eAnnotated RDNA 3 assembly for wave y, for completeness\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eOn RDNA 3, \u003c/span\u003e\u003ccode\u003es_waitcnt vmcnt(...)\u003c/code\u003e\u003cspan\u003e seems to wait for requests to complete not only from its wave, but from other waves too. That explains why wave X makes exactly four accesses for each access that wave Y makes. If I unroll the loop more, letting the compiler schedule more independent accesses before waiting, the ratio goes up to match the unroll factor.\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png\" width=\"611\" height=\"310\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:310,\u0026#34;width\u0026#34;:611,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:11814,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F516be48c-a8d4-4a4b-8e50-ada8be8ae551_611x310.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eOn RDNA 4, the two waves don’t care what the other is doing. That’s the way it should be. RDNA 4 also displays more run-to-run variation, which is also expected because cache behavior is highly unpredictable in this test. I’m surprised by the results, but it’s convincing evidence that AMD indeed had false cross-wave memory delays on RDNA 3 and older GPU architectures. I also tested on Renoir’s Vega iGPU, and saw the same behavior as RDNA 3.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eAt a simplistic level, you can imagine that requests from the shaders go into a queue to be serviced, and many of those requests can be in flight\u003c/p\u003e\u003cp\u003eNavi 4 Architecture Deep Dive, Andrew Pomianowski, CVP, Silicon Design Engineering (AMD)\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003e\u003cspan\u003eAMD\u0026#39;s presentation hints that RDNA 3 and older GPUs had multiple waves sharing a memory access queue. As mentioned above, AMD GPUs since GCN handle memory dependencies with hardware counters that software waits on. By keeping \u003c/span\u003e\u003ccode\u003evmcnt\u003c/code\u003e\u003cspan\u003e returns in-order, the compiler can wait on the specific load that produces data needed by the next instruction, without also waiting on every other load the wave has pending. RDNA 3 and prior AMD GPUs possibly had a shared memory access queue, with each entry tagged with its wave\u0026#39;s ID. As each memory access leaves the queue in-order, hardware decrements the counter for its wave.\u003c/span\u003e\u003c/p\u003e\u003cp\u003ePerhaps RDNA 4 divides the shared queue into per-thread queues. That would align with the point on AMD\u0026#39;s slide saying RDNA 4 introduces \u0026#34;additional out-of-order queues\u0026#34; for memory requests. Or perhaps RDNA 4 retains a shared queue, but can drain entries out-of-order. That would require tracking extra info, like whether a memory access is the oldest one for its wave.\u003c/p\u003e\u003cp\u003eSharing a memory access queue and returning data in-order seems like a natural hardware simplification. That raises the question of whether GPU architectures from Intel and Nvidia had similar limitations.\u003c/p\u003e\u003cp\u003eIntel\u0026#39;s Xe-LPG does not have false cross-wave memory dependencies. Running the same test on Meteor Lake\u0026#39;s iGPU shows variation depending on where the two waves end up. If wave X and wave Y run on XVEs with shared instruction control logic, wave X\u0026#39;s performance is lower than in other cases. Regardless, it\u0026#39;s clear Xe-LPG doesn\u0026#39;t force a wave to wait on another\u0026#39;s accesses. Intel\u0026#39;s subsequent Battlemage (Xe2) architecture shows similar behavior, and the same applies to Intel\u0026#39;s Gen 9 (Skylake) graphics from a while ago.\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png\" width=\"734\" height=\"284\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/e8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:284,\u0026#34;width\u0026#34;:734,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:8567,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe8a002f4-5a21-41f5-a10a-387df953cdee_734x284.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eI also checked generated assembly to ensure Intel\u0026#39;s compiler wasn\u0026#39;t unrolling the loop further.\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png\" width=\"1456\" height=\"619\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:619,\u0026#34;width\u0026#34;:1456,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:231765,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F08af80c4-bb02-4846-b487-7cf0c83bd4fc_1798x764.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003eGenerated assembly on Meteor Lake\u0026#39;s iGPU for Wave X. UGM = untyped global memory, SLM = shared local memory. The rest is trivial, just remember that Intel GPUs have registers that are full of registers...never mind\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eNvidia\u0026#39;s Pascal has varying behavior depending on where waves are located within a SM. Each Pascal SM has four partitions, which are arranged in pairs that share a texture unit and a 24 KB texture cache. Waves are assigned to partitions within a pair first. It\u0026#39;s as if the partitions are numbered [0,1]-\u0026gt; tex, [2,3]-\u0026gt; tex. Waves in the same sub-partition pair have the false dependency issue. Evidently they share some general load/store logic besides the texture unit, because I don\u0026#39;t touch textures in this test.\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png\" width=\"776\" height=\"398\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:398,\u0026#34;width\u0026#34;:776,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:13894,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F55fe64cb-268f-44a6-8372-c3887ad270e2_776x398.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eIf a wave is not offset from another one by a multiple of four or multiple of 4 plus one, it doesn\u0026#39;t have the false dependency problem. Turing, as tested on the GTX 1660 Ti, doesn\u0026#39;t have a problem either.\u003c/p\u003e\u003cp\u003eBesides removing false cross-wave delays, AMD also improved memory request handling within a wave. Much like in-order CPU cores, like Arm\u0026#39;s Cortex A510, GPUs can execute independent instructions while waiting on memory access. A thread only stalls when it tries to use the memory access\u0026#39;s result. GPUs have done this for decades, though the implementation details differ. Intel and Nvidia\u0026#39;s GPUs use a software managed scoreboard. AMD used pending request counters from GCN onward.\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png\" width=\"677\" height=\"554\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/f5e25433-5766-49eb-b0e5-307e66907161_677x554.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:554,\u0026#34;width\u0026#34;:677,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:60920,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Ff5e25433-5766-49eb-b0e5-307e66907161_677x554.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eRDNA 4 uses the same scheme but splits out the \u003c/span\u003e\u003ccode\u003evmcnt\u003c/code\u003e\u003cspan\u003e category into several counters. A thread can interleave global memory, texture sampling, and raytracing intersection test requests, and wait on them separately. That gives the compiler more flexibility to move work ahead of a wait for memory access completion. Another interpretation of AMD\u0026#39;s slide is that the each counter corresponds to a separate queue, each of which has out-of-order behavior across waves (but may have in-order behavior within a wave).\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png\" width=\"1151\" height=\"469\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:469,\u0026#34;width\u0026#34;:1151,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:50191,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F286f48de-b6b1-49ae-89af-13b71be3bb2f_1151x469.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003eExample of RDNA 4 assembly from 3DMark\u0026#39;s raytracing feature test, showing a basic block separately waiting on global memory loads and texture sampling requests issued by other basic blocks\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eSimilarly, \u003c/span\u003e\u003ccode\u003elgkmcnt\u003c/code\u003e\u003cspan\u003e gets separated into \u003c/span\u003e\u003ccode\u003ekmcnt\u003c/code\u003e\u003cspan\u003e for scalar memory loads and \u003c/span\u003e\u003ccode\u003edscnt\u003c/code\u003e\u003cspan\u003e for LDS accesses. Scalar memory loads are out-of-order, which means the compiler must wait for all scalar memory loads to complete (\u003c/span\u003e\u003ccode\u003ekmcnt=0\u003c/code\u003e\u003cspan\u003e or \u003c/span\u003e\u003ccode\u003elgmkcnt=0\u003c/code\u003e\u003cspan\u003e) before using results from any pending scalar memory load. On RDNA 4, the compiler can interleave scalar memory and LDS accesses without having to wait for \u003c/span\u003e\u003ccode\u003elgkmcnt=0\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eIntel and Nvidia\u0026#39;s GPUs use software managed scoreboards. A scoreboard entry can be set or and waited on by any instruction, regardless of memory access type. Therefore RDNA 4\u0026#39;s optimization isn\u0026#39;t applicable to those other GPU architectures. A cost to Intel/Nvidia\u0026#39;s approach is that utilizing a big memory request queue would require a correspondingly large scoreboard. AMD can extend a counter by one bit and double the number of queue entries a wave can use.\u003c/p\u003e\u003cp\u003eRDNA 4\u0026#39;s memory subsystem enhancements are exciting and improve performance across a variety of workloads compared to RDNA 3. AMD specifically calls out benefits in raytracing workloads, where traversal and result handling may occur simultaneously on the same WGP. Traversal involves pointer chasing, while result handling might involve more cache friendly data lookups and texture sampling. Breaking cross-wave memory dependencies would prevent different memory access patterns in those tasks from delaying each other.\u003c/p\u003e\u003cp\u003eLikely this wasn\u0026#39;t an issue with rasterization because waves assigned to a WGP probably work on pixels in close proximity. Those waves may sample the same textures, and even take samples in close proximity to each other within the same texture. If one wave misses in cache, the others likely do too.\u003c/p\u003e\u003cp\u003e\u003cspan\u003eBreaking up \u003c/span\u003e\u003ccode\u003evmcnt\u003c/code\u003e\u003cspan\u003e and \u003c/span\u003e\u003ccode\u003elgmkcnt\u003c/code\u003e\u003cspan\u003e probably helps raytracing too. Raytracing shaders make BVH intersection and LDS stack management requests during traversal. Then they might sample textures or access global memory buffers during result handling. Giving the compiler flexibility to interleave those request types and still wait on a specific request is a good thing.\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg\" width=\"1456\" height=\"969\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/ef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:969,\u0026#34;width\u0026#34;:1456,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:8099343,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/jpeg\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://chipsandcheese.com/i/159664006?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg\u0026#34;,\u0026#34;isProcessing\u0026#34;:false}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fef664cd8-175d-4819-9870-42967d928aef_8280x5512.jpeg 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003eRadeon logo on the RX 9070 graciously provided by AMD for review\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eBut RDNA 4\u0026#39;s scheme for handling memory dependencies isn\u0026#39;t fundamentally different from that of GCN many years ago. While the implementation details differ, RDNA 4, GCN, and Intel and Nvidia\u0026#39;s GPUs can all absorb cache misses without immediately stalling a thread. Each GPU maker has improved their ability to do so, whether it\u0026#39;s with more scoreboard tokens or more counters. RDNA 4 indeed can do Cortex A510 style nonblocking loads, but it\u0026#39;s far from a new feature in the world of GPUs.\u003c/p\u003e\u003cp\u003eResolving false cross-wave dependencies isn\u0026#39;t new either. Nvidia had \u0026#34;out-of-order\u0026#34; cross-wave memory access handling in Turing, and presumably their newer architectures too. Intel had the same at least as far back as Gen 9 (Skylake) graphics. Therefore RDNA 4\u0026#39;s \u0026#34;out-of-order\u0026#34; memory subsystem enhancements are best seen as generational tweaks, rather than new game changing techniques. \u003c/p\u003e\u003cp\u003eStill, AMD\u0026#39;s engineers deserve credit for making them happen. RDNA 4’s  arguably makes the most significant change to AMD’s GPU memory subsystem since RDNA launched in 2019. I\u0026#39;m glad to see the company continue to improve their GPU architecture and make it better suited to emerging workloads like raytracing.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "14 min read",
  "publishedTime": "2025-03-23T21:58:01Z",
  "modifiedTime": null
}
