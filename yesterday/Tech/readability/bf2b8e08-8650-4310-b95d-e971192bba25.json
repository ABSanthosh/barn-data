{
  "id": "bf2b8e08-8650-4310-b95d-e971192bba25",
  "title": "Trying out Zed after more than a decade of Vim/Neovim",
  "link": "https://sgoel.dev/posts/trying-out-zed-after-more-than-a-decade-of-vim-neovim/",
  "description": "Comments",
  "author": "",
  "published": "Fri, 24 Jan 2025 21:53:00 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "Siddhant Goel",
  "length": 6605,
  "excerpt": "After 15 years with Neovim, I'm trying out Zed as my daily driver text editor. In this post, I share why I'm switching and what my initial impressions are.",
  "siteName": "",
  "favicon": "https://sgoel.dev/images/icons/apple-touch-icon.png",
  "text": "I'm currently drafting this blog post in Zed. After using Vim/Neovim for more than 15 years, I recently decided to try out something new. I don't know if this little experiment will work, or if I'll run back to my trusty Neovim, but hey, what I do know is that I'd like to find out. Why try something else? Why though? If you've used a specific tool for that long, why (try to) switch to something else anyway? Everyone has their own reasons. I have two. 1. The desire to use something that just works Lately, I've been drifting towards things that \"just work\". I love (Neo)Vim. Like I wrote earlier, it's been my primary editor for the past 15 years. What I don't love is all the configuration that goes into it before I can use it to start writing code. When I first started using Vim (in 2009!), my configuration was a tiny .vimrc file that was handed over to me by my internship supervisor at that time. I had no idea what it did, but it worked. Over time, as I felt the need to customize things, my .vimrc started accumulating increasingly more code copied from StackOverflow that I didn't understand. At some point Neovim came out, and with it, the ability to configure things using Lua. This was a huge step up, because I could at least understand what I was configuring. Either way, it's still configuration. What changed was just how that configuration was done. The combination of configuring the base editor and installing a set of plugins (and making sure that they play nice with each other) isn't really something that I would like to spend my time on, going forward. One recent example that highlights this problem: my workflow consists of switching back and forth between a terminal window and an editor window. At any time, I have multiple projects open in both. On macOS, it's been difficult to find a solution that \"just works\". The most popular Neovim GUI clients on macOS include Vimr and Neovide, which are both excellent projects. Neovide though, does not support multiple windows, which is integral to my workflow and hence requires me to implement workarounds, which actually broke last week after I ran :PackerUpdate. And while Vimr does support multiple windows, it is not able to render icons in nvim-tree, which is less than ideal. ü§∑üèª‚Äç‚ôÇÔ∏è 2. Deeper and native LLM integration LLMs are happening, whether we like it or not. And no, the fact that they aren't 100% correct all the time is not a reason to discard them entirely. I understand why some people don't want to use them. And I respect that. I personally find them useful and would like to integrate them more into my daily workflow. The Neovim ecosystem has a bunch of plugins for using LLMs. But as I wrote in the previous section, I'd like to avoid plugins when possible. Installing plugins means updating them, which inevitably breaks things. One example where I find LLMs useful when coding is handling boilerplate stuff. In my current Neovim setup, I have the the Codeium extension installed, which offers code suggestions that are like an autocomplete on steroids. Often, I can write a function name and what parameters it's expecting, and the LLM writes out the function for me. This is particularly helpful when writing small functions or test cases. I'd like to be able to do more of such things in my editor. I'm not entirely sold on the idea of agentic editors, as I'd like to keep at least some agency over the code that's going in, but that's a different topic. Another example of where I find LLMs useful: I'm not a native English speaker and often struggle to find the right sentence framing that is both concise and catchy. LLMs are excellent at this! I can scribble my initial thoughts, throw it at an LLM and ask it to reframe the whole thing, which is great! Generally, it feels like the way we're writing code is changing with the introduction of this extremely powerful tool, and I'd like to move with the times. Why Zed? So yeah, those are the two reasons why I've been looking to try out something else lately. What made me go for Zed? 1. Vim mode Yep, that's literally the first reason. After using Vim for 15 years, my fingers have built up enough muscle memory that not using Vim keybindings when writing code is downright impossible. Zed's Vim mode is surprisingly solid! So far, I feel right at home. Almost all Vim keybindings that I'm used to work just as expected. The one or two bindings that don't work, are something that I can make my peace with and retrain my fingers on. Everything else works excellent. It also looks like they're doubling down on their Vim mode support in 2025, which is a great sign! 2. It just works When you fire up Zed, the editor is fully functional without having to write a single line of configuration. That's awesome. The editor may prompt you every now and then to install support for specific languages. But that's usually just one button click. 3. JSON Configuration Lua is great, but one JSON file is even better. Zed uses JSON as the configuration syntax and so far it feels a lot simpler than what I've worked with so far. 4. Configuration autocomplete I had no idea I needed this until I had it! While editing the Zed configuration file, I found it really helpful how the editor suggests configuration keys and their potential values. This feature felt really thoughtful when I first saw it and I could imagine that it goes a long way in getting new users up to speed quicker. 5. Native LLM integration I know some people have been turned off by this, but I actually like this feature. Zed has a feature called Assistant, which is a tool to, well, assist you, using a large language model of your choice. A few popular LLM providers are supported. Once set up, you can open up the Assistant panel to work together with the language model you've chosen. For instance, it's pretty easy to type in questions in the panel window and then paste text from your open file buffers into it to give the LLM more context. There's a lot more to this feature that I haven't used yet, but I'll probably get to it the more I use it. Overall, the integration feels very native and very useful. 6. Fast! Last but definitely not the least is speed! Zed is very fast. Everything feels very snappy, and it's clear that the team has put a lot of effort into making everything fast. Conclusion It's only been a day since I really started using Zed instead of Neovim as my daily driver. And so far the experience has been quite nice. Like I wrote earlier, this is an experiment. We'll see how things turn out. That being said though, the first impression looks very good.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n            \n\u003carticle\u003e\n    \u003cp\u003eI\u0026#39;m currently drafting this blog post in \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://zed.dev\"\u003eZed\u003c/a\u003e. After using Vim/Neovim for more than 15\nyears, I recently decided to try out something new. I don\u0026#39;t know if this little\nexperiment will work, or if I\u0026#39;ll run back to my trusty Neovim, but hey, what I do know\nis that I\u0026#39;d like to find out.\u003c/p\u003e\n\u003ch2 id=\"why-try-something-else\"\u003eWhy try something else?\u003c/h2\u003e\n\u003cp\u003eWhy though? If you\u0026#39;ve used a specific tool for that long, why (try to) switch to\nsomething else anyway? Everyone has their own reasons. I have two.\u003c/p\u003e\n\u003ch3 id=\"1-the-desire-to-use-something-that-just-works\"\u003e1. The desire to use something that just works\u003c/h3\u003e\n\u003cp\u003eLately, I\u0026#39;ve been drifting towards things that \u0026#34;just work\u0026#34;.\u003c/p\u003e\n\u003cp\u003eI love (Neo)Vim. Like I wrote earlier, it\u0026#39;s been my primary editor for the past 15\nyears. What I don\u0026#39;t love is all the configuration that goes into it before I can use it\nto start writing code.\u003c/p\u003e\n\u003cp\u003eWhen I first started using Vim (in 2009!), my configuration was a tiny \u003ccode\u003e.vimrc\u003c/code\u003e file\nthat was handed over to me by my internship supervisor at that time. I had no idea what\nit did, but it worked. Over time, as I felt the need to customize things, my \u003ccode\u003e.vimrc\u003c/code\u003e\nstarted accumulating increasingly more code copied from StackOverflow that I didn\u0026#39;t\nunderstand.\u003c/p\u003e\n\u003cp\u003eAt some point Neovim came out, and with it, the ability to configure things using Lua.\nThis was a huge step up, because I could at least understand what I was configuring.\u003c/p\u003e\n\u003cp\u003eEither way, it\u0026#39;s still configuration. What changed was just \u003cem\u003ehow\u003c/em\u003e that configuration was\ndone. The combination of configuring the base editor and installing a set of plugins\n(and making sure that they play nice with each other) isn\u0026#39;t really something that I\nwould like to spend my time on, going forward.\u003c/p\u003e\n\u003cp\u003eOne recent example that highlights this problem: my workflow consists of switching\nback and forth between a terminal window and an editor window. At any time, I have\nmultiple projects open in both. On macOS, it\u0026#39;s been difficult to find a solution that\n\u0026#34;just works\u0026#34;. The most popular Neovim GUI clients on macOS include \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://github.com/qvacua/vimr\"\u003eVimr\u003c/a\u003e and \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://neovide.dev/\"\u003eNeovide\u003c/a\u003e,\nwhich are both excellent projects. Neovide though, \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://github.com/neovide/neovide/issues/1332\"\u003edoes not support multiple windows\u003c/a\u003e,\nwhich is integral to my workflow and hence requires me to implement \u003ca href=\"https://sgoel.dev/posts/switching-between-projects-in-neovim/\"\u003eworkarounds\u003c/a\u003e, which\nactually broke last week after I ran \u003ccode\u003e:PackerUpdate\u003c/code\u003e. And while Vimr does support\nmultiple windows, it is \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://github.com/qvacua/vimr/issues/887\"\u003enot able to render icons in nvim-tree\u003c/a\u003e, which is less than\nideal. ü§∑üèª‚Äç‚ôÇÔ∏è\u003c/p\u003e\n\u003ch3 id=\"2-deeper-and-native-llm-integration\"\u003e2. Deeper and native LLM integration\u003c/h3\u003e\n\u003cp\u003eLLMs are happening, whether we like it or not. And no, the fact that they aren\u0026#39;t 100%\ncorrect all the time is not a reason to discard them entirely. I understand why some\npeople don\u0026#39;t want to use them. And I respect that. I personally find them useful and\nwould like to integrate them more into my daily workflow.\u003c/p\u003e\n\u003cp\u003eThe Neovim ecosystem has a bunch of plugins for using LLMs. But as I wrote in the\nprevious section, I\u0026#39;d like to avoid plugins when possible. Installing plugins means\nupdating them, which inevitably breaks things.\u003c/p\u003e\n\u003cp\u003eOne example where I find LLMs useful when coding is handling boilerplate stuff. In my\ncurrent Neovim setup, I have the the \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://github.com/Exafunction/codeium.nvim\"\u003eCodeium extension\u003c/a\u003e installed, which offers code\nsuggestions that are like an autocomplete on steroids. Often, I can write a function\nname and what parameters it\u0026#39;s expecting, and the LLM writes out the function for me.\nThis is particularly helpful when writing small functions or test cases.\u003c/p\u003e\n\u003cp\u003eI\u0026#39;d like to be able to do more of such things in my editor. I\u0026#39;m not entirely sold on the\nidea of agentic editors, as I\u0026#39;d like to keep at least \u003cem\u003esome\u003c/em\u003e agency over the code that\u0026#39;s\ngoing in, but that\u0026#39;s a different topic.\u003c/p\u003e\n\u003cp\u003eAnother example of where I find LLMs useful: I\u0026#39;m not a native English speaker and often\nstruggle to find the right sentence framing that is both concise and catchy. LLMs are\nexcellent at this! I can scribble my initial thoughts, throw it at an LLM and ask it to\nreframe the whole thing, which is great!\u003c/p\u003e\n\u003cp\u003eGenerally, it feels like the way we\u0026#39;re writing code is changing with the introduction of\nthis extremely powerful tool, and I\u0026#39;d like to move with the times.\u003c/p\u003e\n\u003ch2 id=\"why-zed\"\u003eWhy Zed?\u003c/h2\u003e\n\u003cp\u003eSo yeah, those are the two reasons why I\u0026#39;ve been looking to try out something else\nlately. What made me go for Zed?\u003c/p\u003e\n\u003ch3 id=\"1-vim-mode\"\u003e1. Vim mode\u003c/h3\u003e\n\u003cp\u003eYep, that\u0026#39;s literally the first reason. After using Vim for 15 years, my fingers have\nbuilt up enough muscle memory that not using Vim keybindings when writing code is\ndownright impossible.\u003c/p\u003e\n\u003cp\u003eZed\u0026#39;s \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://zed.dev/docs/vim\"\u003eVim mode\u003c/a\u003e is surprisingly solid! So far, I feel right at home. Almost all Vim\nkeybindings that I\u0026#39;m used to work just as expected. The one or two bindings that don\u0026#39;t\nwork, are something that I can make my peace with and retrain my fingers on. Everything\nelse works excellent. It also looks like they\u0026#39;re \u003ca rel=\"noopener\" target=\"_blank\" href=\"https://zed.dev/blog/vim-2025\"\u003edoubling down on their Vim mode\u003c/a\u003e\nsupport in 2025, which is a great sign!\u003c/p\u003e\n\u003ch3 id=\"2-it-just-works\"\u003e2. It just works\u003c/h3\u003e\n\u003cp\u003eWhen you fire up Zed, the editor is fully functional without having to write a single\nline of configuration. That\u0026#39;s awesome. The editor may prompt you every now and then to\ninstall support for specific languages. But that\u0026#39;s usually just one button click.\u003c/p\u003e\n\u003ch3 id=\"3-json-configuration\"\u003e3. JSON Configuration\u003c/h3\u003e\n\u003cp\u003eLua is great, but one JSON file is even better. Zed uses JSON as the configuration\nsyntax and so far it feels a lot simpler than what I\u0026#39;ve worked with so far.\u003c/p\u003e\n\u003ch3 id=\"4-configuration-autocomplete\"\u003e4. Configuration autocomplete\u003c/h3\u003e\n\u003cp\u003eI had no idea I needed this until I had it!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://sgoel.dev/posts/trying-out-zed-after-more-than-a-decade-of-vim-neovim/zed-configuration-autocomplete.png\" alt=\"\"/\u003e\u003c/p\u003e\n\u003cp\u003eWhile editing the Zed configuration file, I found it really helpful how the editor\nsuggests configuration keys and their potential values. This feature felt really\nthoughtful when I first saw it and I could imagine that it goes a long way in getting\nnew users up to speed quicker.\u003c/p\u003e\n\u003ch3 id=\"5-native-llm-integration\"\u003e5. Native LLM integration\u003c/h3\u003e\n\u003cp\u003eI know some people have been turned off by this, but I actually like this feature.\u003c/p\u003e\n\u003cp\u003eZed has a feature called Assistant, which is a tool to, well, assist you, using a large\nlanguage model of your choice. A few popular LLM providers are supported. Once set up,\nyou can open up the Assistant panel to work together with the language model you\u0026#39;ve\nchosen. For instance, it\u0026#39;s pretty easy to type in questions in the panel window and then\npaste text from your open file buffers into it to give the LLM more context. There\u0026#39;s a\nlot more to this feature that I haven\u0026#39;t used yet, but I\u0026#39;ll probably get to it the more I\nuse it.\u003c/p\u003e\n\u003cp\u003eOverall, the integration feels very native and very useful.\u003c/p\u003e\n\u003ch3 id=\"6-fast\"\u003e6. Fast!\u003c/h3\u003e\n\u003cp\u003eLast but definitely not the least is speed! Zed is \u003cem\u003every\u003c/em\u003e fast. Everything feels very\nsnappy, and it\u0026#39;s clear that the team has put a lot of effort into making everything\nfast.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eIt\u0026#39;s only been a day since I really started using Zed instead of Neovim as my daily\ndriver. And so far the experience has been quite nice.\u003c/p\u003e\n\u003cp\u003eLike I wrote earlier, this is an experiment. We\u0026#39;ll see how things turn out. That being\nsaid though, the first impression looks \u003cstrong\u003every\u003c/strong\u003e good.\u003c/p\u003e\n\n\u003c/article\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
