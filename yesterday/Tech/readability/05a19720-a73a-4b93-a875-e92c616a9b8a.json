{
  "id": "05a19720-a73a-4b93-a875-e92c616a9b8a",
  "title": "Is AI-Driven 0-Day Detection Here?",
  "link": "https://it.slashdot.org/story/24/11/02/2150233/is-ai-driven-0-day-detection-here?utm_source=rss1.0mainlinkanon\u0026utm_medium=feed",
  "description": "\"AI-driven 0-day detection is here,\" argues a new blog post from ZeroPath, makers of a GitHub app that \"detects, verifies, and issues pull requests for security vulnerabilities in your code.\" They write that AI-assisted security research \"has been quietly advancing\" since early 2023, when researchers at the DARPA and ARPA-H's Artificial Intelligence Cyber Challenge demonstrated the first practical applications of LLM-powered vulnerability detection — with new advances continuing. \"Since July 2024, ZeroPath's tool has uncovered critical zero-day vulnerabilities — including remote code execution, authentication bypasses, and insecure direct object references — in popular AI platforms and open-source projects.\" And they ultimately identified security flaws in projects owned by Netflix, Salesforce, and Hulu by \"taking a novel approach combining deep program analysis with adversarial AI agents for validation. Our methodology has uncovered numerous critical vulnerabilities in production systems, including several that traditional Static Application Security Testing tools were ill-equipped to find...\" TL;DR — most of these bugs are simple and could have been found with a code review from a security researcher or, in some cases, scanners. The historical issue, however, with automating the discovery of these bugs is that traditional SAST tools rely on pattern matching and predefined rules, and miss complex vulnerabilities that do not fit known patterns (i.e. business logic problems, broken authentication flaws, or non-traditional sinks such as from dependencies). They also generate a high rate of false positives. The beauty of LLMs is that they can reduce ambiguity in most of the situations that caused scanners to be either unusable or produce few findings when mass-scanning open source repositories... To do this well, you need to combine deep program analysis with an adversarial agents that test the plausibility of vulnerabilties at each step. The solution ends up mirroring the traditional phases of a pentest — recon, analysis, exploitation (and remediation which is not mentioned in this post)... AI-driven vulnerability detection is moving fast... What's intriguing is that many of these vulnerabilities are pretty straightforward — they could've been spotted with a solid code review or standard scanning tools. But conventional methods often miss them because they don't fit neatly into known patterns. That's where AI comes in, helping us catch issues that might slip through the cracks. \"Many vulnerabilities remain undisclosed due to ongoing remediation efforts or pending responsible disclosure processes,\" according to the blog post, which includes a pie chart showing the biggest categories of vulnerabilities found: 53%: Authorization flaws, including roken access control in API endpoints and unauthorized Redis access and configuration exposure. (\"Impact: Unauthorized access, data leakage, and resource manipulation across tenant boundaries.\") 26%: File operation issues, including directory traversal in configuration loading and unsafe file handling in upload features. (\"Impact: Unauthorized file access, sensitive data exposure, and potential system compromise.\") 16%: Code execution vulnerabilities, including command injection in file processing and unsanitized input in system commands. (\"Impact: Remote code execution, system command execution, and potential full system compromise.\") The company's CIO/cofounder was \"former Red Team at Tesla,\" according to the startup's profile at YCombinator, and earned over $100,000 as a bug-bounty hunter. (And another co-founded is a former Google security engineer.) Thanks to Slashdot reader Mirnotoriety for sharing the article. Read more of this story at Slashdot.",
  "author": "EditorDavid",
  "published": "2024-11-02T21:52:00+00:00",
  "source": "http://rss.slashdot.org/Slashdot/slashdotMain",
  "categories": [
    "security"
  ],
  "byline": "",
  "length": 3749,
  "excerpt": "\"AI-driven 0-day detection is here,\" argues a new blog post from ZeroPath, makers of a GitHub app that \"detects, verifies, and issues pull requests for security vulnerabilities in your code.\" They write that AI-assisted security research \"has been quietly advancing\" since early 2023, when research...",
  "siteName": "",
  "favicon": "",
  "text": "\"AI-driven 0-day detection is here,\" argues a new blog post from ZeroPath, makers of a GitHub app that \"detects, verifies, and issues pull requests for security vulnerabilities in your code.\" They write that AI-assisted security research \"has been quietly advancing\" since early 2023, when researchers at the DARPA and ARPA-H's Artificial Intelligence Cyber Challenge demonstrated the first practical applications of LLM-powered vulnerability detection — with new advances continuing. \"Since July 2024, ZeroPath's tool has uncovered critical zero-day vulnerabilities — including remote code execution, authentication bypasses, and insecure direct object references — in popular AI platforms and open-source projects.\" And they ultimately identified security flaws in projects owned by Netflix, Salesforce, and Hulu by \"taking a novel approach combining deep program analysis with adversarial AI agents for validation. Our methodology has uncovered numerous critical vulnerabilities in production systems, including several that traditional Static Application Security Testing tools were ill-equipped to find...\" TL;DR — most of these bugs are simple and could have been found with a code review from a security researcher or, in some cases, scanners. The historical issue, however, with automating the discovery of these bugs is that traditional SAST tools rely on pattern matching and predefined rules, and miss complex vulnerabilities that do not fit known patterns (i.e. business logic problems, broken authentication flaws, or non-traditional sinks such as from dependencies). They also generate a high rate of false positives. The beauty of LLMs is that they can reduce ambiguity in most of the situations that caused scanners to be either unusable or produce few findings when mass-scanning open source repositories... To do this well, you need to combine deep program analysis with an adversarial agents that test the plausibility of vulnerabilties at each step. The solution ends up mirroring the traditional phases of a pentest — recon, analysis, exploitation (and remediation which is not mentioned in this post)... AI-driven vulnerability detection is moving fast... What's intriguing is that many of these vulnerabilities are pretty straightforward — they could've been spotted with a solid code review or standard scanning tools. But conventional methods often miss them because they don't fit neatly into known patterns. That's where AI comes in, helping us catch issues that might slip through the cracks. \"Many vulnerabilities remain undisclosed due to ongoing remediation efforts or pending responsible disclosure processes,\" according to the blog post, which includes a pie chart showing the biggest categories of vulnerabilities found: 53%: Authorization flaws, including roken access control in API endpoints and unauthorized Redis access and configuration exposure. (\"Impact: Unauthorized access, data leakage, and resource manipulation across tenant boundaries.\") 26%: File operation issues, including directory traversal in configuration loading and unsafe file handling in upload features. (\"Impact: Unauthorized file access, sensitive data exposure, and potential system compromise.\") 16%: Code execution vulnerabilities, including command injection in file processing and unsanitized input in system commands. (\"Impact: Remote code execution, system command execution, and potential full system compromise.\") The company's CIO/cofounder was \"former Red Team at Tesla,\" according to the startup's profile at YCombinator, and earned over $100,000 as a bug-bounty hunter. (And another co-founded is a former Google security engineer.) Thanks to Slashdot reader Mirnotoriety for sharing the article.",
  "image": "https://a.fsdn.com/sd/topics/security_64.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"fhbody-175382793\"\u003e\u003cp\u003e\n\t\t\t\n\t\t \t\n\t\t\t\t\u0026#34;AI-driven 0-day detection is here,\u0026#34; argues \u003ca href=\"https://zeropath.com/blog/0day-discoveries\"\u003ea new blog post from ZeroPath\u003c/a\u003e, makers of \u003ca href=\"https://www.ycombinator.com/launches/LOk-zeropath-autonomous-vulnerability-patching\"\u003ea GitHub app\u003c/a\u003e that \u0026#34;detects, verifies, and issues pull requests for security vulnerabilities in your code.\u0026#34;\u003c/p\u003e\u003cp\u003e \n\nThey write that AI-assisted security research \u0026#34;has been quietly advancing\u0026#34; since early 2023, when researchers at the DARPA and ARPA-H\u0026#39;s \u003ca href=\"https://aicyberchallenge.com/\"\u003eArtificial Intelligence Cyber Challenge\u003c/a\u003e demonstrated the first practical applications of LLM-powered vulnerability detection — with new advances continuing.    \u0026#34;Since July 2024, ZeroPath\u0026#39;s tool has uncovered critical zero-day vulnerabilities — including remote code execution, authentication bypasses, and insecure direct object references — in popular AI platforms and open-source projects.\u0026#34;  And they ultimately identified security flaws in projects owned by Netflix, Salesforce, and Hulu by \u0026#34;taking a novel approach combining deep program analysis with adversarial AI agents for validation. Our methodology has uncovered numerous critical vulnerabilities in production systems, including several that traditional Static Application Security Testing tools were ill-equipped to find...\u0026#34;\n\n\n\n\u003ci\u003eTL;DR — most of these bugs are simple and could have been found with a code review from a security researcher or, in some cases, scanners. The historical issue, however, with automating the discovery of these bugs is that traditional SAST tools rely on pattern matching and predefined rules, and miss complex vulnerabilities that do not fit known patterns (i.e. business logic problems, broken authentication flaws, or non-traditional sinks such as from dependencies). They also generate a high rate of false positives.\u003cp\u003e \n\nThe beauty of LLMs is that they can reduce ambiguity in most of the situations that caused scanners to be either unusable or produce few findings when mass-scanning open source repositories...  To do this well, you need to combine deep program analysis with an adversarial agents that test the plausibility of vulnerabilties at each step. The solution ends up mirroring the traditional phases of a pentest — recon, analysis, exploitation (and remediation which is not mentioned in this post)...\u003c/p\u003e\u003cp\u003e \n\nAI-driven vulnerability detection is moving fast...  What\u0026#39;s intriguing is that many of these vulnerabilities are pretty straightforward — they could\u0026#39;ve been spotted with a solid code review or standard scanning tools. But conventional methods often miss them because they don\u0026#39;t fit neatly into known patterns. That\u0026#39;s where AI comes in, helping us catch issues that might slip through the cracks.\u003c/p\u003e\u003c/i\u003e \u003cbr/\u003e\n\u0026#34;Many vulnerabilities remain undisclosed due to ongoing remediation efforts or pending responsible disclosure processes,\u0026#34; according to the blog post, which includes a pie chart showing the biggest categories of vulnerabilities found:\n\u003c/p\u003e\u003cul\u003e\n\u003cli\u003e53%: Authorization flaws, including roken access control in API endpoints and unauthorized Redis access and configuration exposure.  (\u0026#34;Impact: Unauthorized access, data leakage, and resource manipulation across tenant boundaries.\u0026#34;)\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e26%: File operation issues, including directory traversal in configuration loading and unsafe file handling in upload features.   (\u0026#34;Impact: Unauthorized file access, sensitive data exposure, and potential system compromise.\u0026#34;)\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e16%: Code execution vulnerabilities, including command injection in file processing and unsanitized input in system commands. (\u0026#34;Impact: Remote code execution, system command execution, and potential full system compromise.\u0026#34;)\u003c/li\u003e\n\u003c/ul\u003e\u003cdiv\u003e\u003cp\u003e\n\n\nThe company\u0026#39;s CIO/cofounder was \u0026#34;former Red Team at Tesla,\u0026#34; according to the \u003ca href=\"https://www.ycombinator.com/companies/zeropath\"\u003estartup\u0026#39;s profile\u003c/a\u003e at YCombinator, and earned over $100,000 as a bug-bounty hunter.   (And another co-founded is a former Google security engineer.) \u003c/p\u003e\u003cp\u003e \n\n\u003cem\u003eThanks to Slashdot reader \u003ca href=\"https://www.slashdot.org/~Mirnotoriety\"\u003eMirnotoriety\u003c/a\u003e for sharing the article.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003cbr/\u003e\n\t\t \t\n\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
