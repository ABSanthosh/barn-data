{
  "id": "5cc02b21-022e-4f9f-9e4e-0a75ebb53fda",
  "title": "Started a guide to writing FUSE filesystems in Python",
  "link": "https://gwolf.org/2024/10/started-a-guide-to-writing-fuse-filesystems-in-python.html",
  "description": "Comments",
  "author": "",
  "published": "Fri, 11 Oct 2024 18:29:40 +0000",
  "source": "https://news.ycombinator.com/rss",
  "categories": null,
  "byline": "",
  "length": 4570,
  "excerpt": "As DebConf22 was coming to an end, in Kosovo, talking with Eeveelweezel they invited me to prepare a talk to give for the Chicago Python User Group. I replied that I‚Äôm not really that much of a Python guy‚Ä¶ But would think about a topic. Two years passed. I meet Eeveelweezel again for DebConf24 in Busan, South Korea. And the topic came up again. I had thought of some ideas, but none really pleased me. Again, I do write some Python when needed, and I teach using Python, as it‚Äôs the language I find my students can best cope with. But delivering a talk to ChiPy?",
  "siteName": "",
  "favicon": "https://gwolf.org/favicon.png",
  "text": "As DebConf22 was coming to an end, in Kosovo, talking with Eeveelweezel they invited me to prepare a talk to give for the Chicago Python User Group. I replied that I‚Äôm not really that much of a Python guy‚Ä¶ But would think about a topic. Two years passed. I meet Eeveelweezel again for DebConf24 in Busan, South Korea. And the topic came up again. I had thought of some ideas, but none really pleased me. Again, I do write some Python when needed, and I teach using Python, as it‚Äôs the language I find my students can best cope with. But delivering a talk to ChiPy? On the other hand, I have long used a very simplistic and limited filesystem I‚Äôve designed as an implementation project at class: FIUnamFS (for ‚ÄúFacultad de Ingenier√≠a, Universidad Nacional Aut√≥noma de M√©xico‚Äù: the Engineering Faculty for Mexico‚Äôs National University, where I teach. Sorry, the link is in Spanish ‚Äî but you will find several implementations of it from the students üòâ). It is a toy filesystem, with as many bad characteristics you can think of, but easy to specify and implement. It is based on contiguous file allocation, has no support for sub-directories, and is often limited to the size of a 1.44MB floppy disk. As I give this filesystem as a project to my students (and not as a mere homework), I always ask them to try and provide a good, polished, professional interface, not just the simplistic menu I often get. And I tell them the best possible interface would be if they provide support for FIUnamFS transparently, usable by the user without thinking too much about it. With high probability, that would mean: Use FUSE. But, in the six semesters I‚Äôve used this project (with 30-40 students per semester group), only one student has bitten the bullet and presented a FUSE implementation. Maybe this is because it‚Äôs not easy to understand how to build a FUSE-based filesystem from a high-level language such as Python? Yes, I‚Äôve seen several implementation examples and even nice web pages (i.e. the examples shipped with thepython-fuse module Stavros‚Äô passthrough filesystem, Dave Filesystem based upon, and further explaining, Stavros‚Äô, and several others) explaining how to provide basic functionality. I found a particularly useful presentation by Matteo Bertozzi presented ~15 years ago at PyCon4‚Ä¶ But none of those is IMO followable enough by itself. Also, most of them are very old (maybe the world is telling me something that I refuse to understand?). And of course, there isn‚Äôt a single interface to work from. In Python only, we can find python-fuse, Pyfuse, Fusepy‚Ä¶ Where to start from? ‚Ä¶So I setup to try and help. Over the past couple of weeks, I have been slowly working on my own version, and presenting it as a progressive set of tasks, adding filesystem calls, and being careful to thoroughly document what I write (but‚Ä¶ maybe my documentation ends up obfuscating the intent? I hope not ‚Äî and, read on, I‚Äôve provided some remediation). I registered a GitLab project for a hand-holding guide to writing FUSE-based filesystems in Python. This is a project where I present several working FUSE filesystem implementations, some of them RAM-based, some passthrough-based, and I intend to add to this also filesystems backed on pseudo-block-devices (for implementations such as my FIUnamFS). So far, I have added five stepwise pieces, starting from the barest possible empty filesystem, and adding system calls (and functionality) until (so far) either a read-write filesystem in RAM with basicstat() support or a read-only passthrough filesystem. I think providing fun or useful examples is also a good way to get students to use what I‚Äôm teaching, so I‚Äôve added some ideas I‚Äôve had: DNS Filesystem, on-the-fly markdown compiling filesystem, unzip filesystem and uncomment filesystem. They all provide something that could be seen as useful, in a way that‚Äôs easy to teach, in just some tens of lines. And, in case my comments/documentation are too long to read, uncommentfs will happily strip all comments and whitespace automatically! üòâ So‚Ä¶ I will be delivering my talk tomorrow (2024.10.10, 18:30 GMT-6) at ChiPy (virtually). I am also presenting this talk virtually at Jornadas Regionales de Software Libre in Santa Fe, Argentina, next week (virtually as well). And also in November, in person, at nerdear.la, that will be held in Mexico City for the first time. Of course, I will also share this project with my students in the next couple of weeks‚Ä¶ And hope it manages to lure them into implementing FUSE in Python. At some point, I shall report!",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"content\"\u003e\n\t\n\t\n\n\n\u003cp\u003eAs DebConf22 was coming to an end, in Kosovo, talking with \u003cem\u003eEeveelweezel\u003c/em\u003e they\ninvited me to prepare a talk to give for the \u003ca href=\"https://chipy.org\"\u003eChicago Python User\nGroup\u003c/a\u003e. I replied that I‚Äôm not really that much of a Python\nguy‚Ä¶ But would think about a topic. Two years passed. I meet \u003cem\u003eEeveelweezel\u003c/em\u003e\nagain for DebConf24 in Busan, South Korea. And the topic came up again. I had\nthought of some ideas, but none really pleased me. Again, I do write some Python\nwhen needed, and I \u003cem\u003eteach\u003c/em\u003e using Python, as it‚Äôs the language I find my students\ncan best cope with. But \u003cem\u003edelivering a talk\u003c/em\u003e to ChiPy?\u003c/p\u003e\n\n\u003cp\u003eOn the other hand, I have long used a very simplistic and limited filesystem\nI‚Äôve designed as an implementation project at class:\n\u003ca href=\"https://github.com/unamfi/sistop-2024-2/blob/main/proyectos/1/README.org\"\u003eFIUnamFS\u003c/a\u003e\n(for ‚ÄúFacultad de Ingenier√≠a, Universidad Nacional Aut√≥noma de M√©xico‚Äù: the\nEngineering Faculty for Mexico‚Äôs National University, where I teach. Sorry, the\nlink is in Spanish ‚Äî but you will find several implementations of it from the\nstudents üòâ). It is a toy filesystem, with as many bad characteristics you can\nthink of, but easy to specify and implement. It is based on contiguous file\nallocation, has no support for sub-directories, and is often limited to the size\nof a 1.44MB floppy disk.\u003c/p\u003e\n\n\u003cp\u003eAs I give this filesystem as a \u003cem\u003eproject\u003c/em\u003e to my students (and not as a mere\n\u003cem\u003ehomework\u003c/em\u003e), I always ask them to try and provide a good, polished, professional\ninterface, not just the simplistic menu I often get. And I tell them the best\npossible interface would be if they provide support for FIUnamFS transparently,\nusable by the user without thinking too much about it. With high probability,\nthat would mean: Use FUSE.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://gwolf.org/files/2024-10/python-fuse.png\"\u003e\u003cimg src=\"https://gwolf.org/files/2024-10/python-fuse.400.png\" alt=\"Python FUSE\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eBut, in the six semesters I‚Äôve used this project (with 30-40 students per\nsemester group), \u003cem\u003eonly one student\u003c/em\u003e has bitten the bullet and presented a FUSE\nimplementation.\u003c/p\u003e\n\n\u003cp\u003eMaybe this is because it‚Äôs not easy to understand how to build a FUSE-based\nfilesystem from a high-level language such as Python? Yes, I‚Äôve seen several\nimplementation examples and even nice web pages (i.e. \u003ca href=\"https://github.com/libfuse/python-fuse/tree/master/example\"\u003ethe examples shipped with\nthe\u003ccode\u003epython-fuse\u003c/code\u003e\nmodule\u003c/a\u003e \u003ca href=\"https://www.stavros.io/posts/python-fuse-filesystem/\"\u003eStavros‚Äô\npassthrough filesystem\u003c/a\u003e,\n\u003ca href=\"https://thepythoncorner.com/posts/2017-02-27-writing-a-fuse-filesystem-in-python/\"\u003eDave Filesystem based upon, and further explaining,\nStavros‚Äô\u003c/a\u003e,\nand several others) explaining how to provide basic functionality. I found a\n\u003ca href=\"https://speakerdeck.com/matteobertozzi/python-fuse-pycon4\"\u003eparticularly useful presentation by Matteo\nBertozzi\u003c/a\u003e presented\n~15 years ago at PyCon4‚Ä¶ But none of those is IMO followable enough by\nitself. Also, most of them are \u003cem\u003every\u003c/em\u003e old (maybe the world is telling me\nsomething that I refuse to understand?).\u003c/p\u003e\n\n\u003cp\u003eAnd of course, there isn‚Äôt a single interface to work from. In Python only, we\ncan find\n\u003ca href=\"https://github.com/libfuse/python-fuse/tree/master/example\"\u003epython-fuse\u003c/a\u003e,\n\u003ca href=\"https://github.com/nrclark/pyfuse\"\u003ePyfuse\u003c/a\u003e,\n\u003ca href=\"https://github.com/fusepy/fusepy\"\u003eFusepy\u003c/a\u003e‚Ä¶ Where to start from?\u003c/p\u003e\n\n\u003cp\u003e‚Ä¶So I setup to try and help.\u003c/p\u003e\n\n\u003cp\u003eOver the past couple of weeks, I have been slowly working on my own version, and\npresenting it as a \u003cem\u003eprogressive set of tasks\u003c/em\u003e, adding filesystem calls, and\nbeing careful to thoroughly document what I write (but‚Ä¶ maybe my documentation\nends up \u003cem\u003eobfuscating\u003c/em\u003e the intent? I hope not ‚Äî and, read on, I‚Äôve provided some\nremediation).\u003c/p\u003e\n\n\u003cp\u003eI registered a GitLab project for \u003ca href=\"https://gitlab.com/gunnarwolf/fuse_in_python_guide\"\u003ea hand-holding guide to writing FUSE-based\nfilesystems in Python\u003c/a\u003e. This\nis a project where I present several working FUSE filesystem implementations,\nsome of them RAM-based, some passthrough-based, and I intend to add to this also\nfilesystems backed on pseudo-block-devices (for implementations such as my\nFIUnamFS).\u003c/p\u003e\n\n\u003cp\u003eSo far, I have added five stepwise pieces, starting from the barest possible\n\u003ca href=\"https://gitlab.com/gunnarwolf/fuse_in_python_guide/-/blob/main/1._emptyfs.py\"\u003eempty\nfilesystem\u003c/a\u003e,\nand adding system calls (and functionality) until (so far) either a \u003ca href=\"https://gitlab.com/gunnarwolf/fuse_in_python_guide/-/blob/main/4._basic_stat_info.py\"\u003eread-write\nfilesystem in RAM with basic\u003ccode\u003estat()\u003c/code\u003e\nsupport\u003c/a\u003e\nor a \u003ca href=\"https://gitlab.com/gunnarwolf/fuse_in_python_guide/-/blob/main/5._read_only_passthrough.py\"\u003eread-only passthrough\nfilesystem\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eI think providing fun or useful examples is also a good way to get students to\nuse what I‚Äôm teaching, so I‚Äôve added some ideas I‚Äôve had: \u003ca href=\"https://gitlab.com/gunnarwolf/fuse_in_python_guide/-/blob/main/useful/dnsfs.py\"\u003eDNS\nFilesystem\u003c/a\u003e,\n\u003ca href=\"https://gitlab.com/gunnarwolf/fuse_in_python_guide/-/blob/main/useful/markdown_compiling_fs.py\"\u003eon-the-fly markdown compiling\nfilesystem\u003c/a\u003e,\n\u003ca href=\"https://gitlab.com/gunnarwolf/fuse_in_python_guide/-/blob/main/useful/unzipfs.py\"\u003eunzip\nfilesystem\u003c/a\u003e\nand \u003ca href=\"https://gitlab.com/gunnarwolf/fuse_in_python_guide/-/blob/main/useful/uncommentfs.py\"\u003euncomment\nfilesystem\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThey all provide something that could be seen as useful, in a way that‚Äôs easy to\nteach, in just some tens of lines. And, in case my comments/documentation are\ntoo long to read, \u003ccode\u003euncommentfs\u003c/code\u003e will happily strip all comments and whitespace\nautomatically! üòâ\u003c/p\u003e\n\n\u003cp\u003eSo‚Ä¶ I will be delivering my talk \u003ca href=\"https://www.chipy.org/meetings/288/\"\u003etomorrow (2024.10.10, 18:30 GMT-6) at\nChiPy\u003c/a\u003e (virtually). I am also presenting\nthis talk virtually at \u003ca href=\"https://eventol.flisol.org.ar/events/jrsl-2024-santa-fe/\"\u003eJornadas Regionales de Software\nLibre\u003c/a\u003e in Santa Fe,\nArgentina, next week (virtually as well). And also in November, in person, at\n\u003ca href=\"https://nerdear.la/\"\u003enerdear.la\u003c/a\u003e, that will be held in Mexico City for the\nfirst time.\u003c/p\u003e\n\n\u003cp\u003eOf course, I will also share this project with my students in the next couple of\nweeks‚Ä¶ And hope it manages to lure them into implementing FUSE in Python. At\nsome point, I shall report!\u003c/p\u003e\n\n\n\n\n      \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
