{
  "id": "160aa997-3cab-47be-9a32-1e111ebd8974",
  "title": "A Practical Guide to Jetpack Compose for XR Development",
  "link": "https://proandroiddev.com/first-xr-app-with-jetpack-compose-for-xr-c23d5ef01ec2?source=rss----c72404660798---4",
  "description": "",
  "author": "Veronica Putri Anggraini",
  "published": "Thu, 05 Jun 2025 16:02:48 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "xr",
    "oculus",
    "jetpack-compose",
    "kotlin",
    "android"
  ],
  "byline": "Veronica Putri Anggraini",
  "length": 25613,
  "excerpt": "Hello folks, have you seen how cool XR (Extended Reality) is getting. Currently Extended Reality(XR) is hot topic to discuss and kind of the next big wave in tech, it’s transforming everything from…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Generated by GeminiExtended Reality IntroductionHello folks, have you seen how cool XR (Extended Reality) is getting. Currently Extended Reality(XR) is hot topic to discuss and kind of the next big wave in tech, it’s transforming everything from how we work, and learn to how we play. XR actively blends our real world with digital magic!Generated by VeoThere are three main form when we explore this existing frontier:Virtual Reality (VR), We will completely immersed in a new digital world, often with a headset that transports our senses.Augmented Reality (AR), simply later digital information directly onto real world view, often through a phone or table screen.Mixed Reality (MR), which makes digital objects not just appear, but actually interact with your physical surroundings.Essentially, XR is all about extending our reality, incredibly engaging and immersive experiences unlike anything else, pushing the boundaries of what’s possible with technology.And here’s the cool part as Android devs with the new Jetpack Compose SDK for XR, we can leverage our existing skills to jump right into this exciting future. So, learning XR isn’t just about picking up a new skill, it’s about positioning ourself at the forefront of innovation and unlocking a whole new world of creative and professional possibilities.To build an XR app, we have a few good options. Such as, OpenXR SDK offers a universal standard for broad device compatibility. Or, if we are focusing on Meta's devices, the Meta Spatial SDK is a strong contender. But for Android developers, the Jetpack XR SDK, especially with Jetpack Compose for XR, is a fantastic new way to leverage our existing skills and build immersive experiences. This article will explain step by step to start create XR App using Jetpack XR SDK.Jetpack XR SDKBasically, this SDK kind of taken all those familiar Android Jetpack libraries, we already use for our regular apps and tweaked them for virtual and augmented reality. That means if we already comfy with Kotlin and Jetpack Compose, we will feel right at home building immersive experiences. It really makes diving into XR so much easier for us as android developer.One of the coolest parts is Jetpack Compose for XR. This lets us build user interfaces that actually float in 3D space, instead of just flat on a screen. Imagine using our usual Compose rows and columns, but now they’re on spatial panels that can place all around the user.Plus, the SDK brings in helpers like Jetpack SceneCore for dropping in 3D models and ARCore for Jetpack XR for features like hand tracking. It even helps spatialize our existing 2D Android apps so they look great in an XR headset.Ultimately, the Jetpack XR SDK empowers us as Android developers to create rich, interactive, and truly spatial XR experiences using the tools we already know and love. It’s a huge step towards making XR development way more accessible and integrated with the Android ecosystem.Let’s Prepare the Tools!Currently, for a little heads-up on getting started with the Jetpack XR SDK, we need to use Android Studio Preview Narwhal version. So make sure we’ve got that specific preview version ready to roll when we are ready to dive in.Create new XR project using Basic Headset Activity.Please check the libraries file there are some of compose for XR library like the code below.[versions]compose = \"1.0.0-alpha01\"runtimeVersion = \"1.0.0-alpha01\"scenecore = \"1.0.0-alpha01\"[libraries]androidx-compose = { group = \"androidx.xr.compose\", name = \"compose\", version.ref = \"compose\" }runtime = { group = \"androidx.xr.runtime\", name = \"runtime\", version.ref = \"runtimeVersion\" }androidx-scenecore = { group = \"androidx.xr.scenecore\", name = \"scenecore\", version.ref = \"scenecore\" }To test the app we can use XR emulator, create XR emulator with Click Device Manager → Create Virtual Device → Choose XR DeviceRun the XR App template on the emulator, like the image bellow.We’ve found that the XR emulator runs surprisingly smoothly. It’s truly a testament to the advancements in the Android XR platform, making our development journey into this exciting new world much more enjoyable and efficient.Let’s Build Simple App!Hold up! Before we dive headfirst into crafting our XR app, we’ve got a few crucial things to nail down. Basically there are two type of space in XR, home space and full space. Think of them like different rooms our app can be in:Home Space, imagine this as our XR device’s desktop or multitasking hub. In Home Space, our app lives alongside other apps, just like multiple windows on a computer screen. We can have several apps running side-by-side, allowing for multitasking. This is great for quick glances at information, social media, or even a 2D app that hasn’t been specifically designed for immersive XR. By default, most apps will launch in Home Space.Full Space, where our app truly takes center stage and unlocks its full immersive potential. In Full Space, our app becomes the sole focus, taking over the entire view and giving us complete access to the device’s spatial and 3D capabilities. This is where we build truly immersive virtual worlds, interactive 3D experiences, or full-screen augmented reality scenarios. All other apps are hidden away, letting our experience shine without distractions.Now let’s check the home and full space from the code. override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) enableEdgeToEdge() setContent { XRExplorationTheme { val session = LocalSession.current if (LocalSpatialCapabilities.current.isSpatialUiEnabled) { Subspace { MySpatialContent(onRequestHomeSpaceMode = { session?.requestHomeSpaceMode() }) } } else { My2DContent(onRequestFullSpaceMode = { session?.requestFullSpaceMode() }) } } } }The code above is onCreate function from MainActivity.kt. Let’s break each line :val session = LocalSession.current, a crucial line code for XR, because LocalSession.current gives us access to the current XR session. This session object is like our app’s direct line to the XR system, allowing us to do things like request different display modes.if (LocalSpatialCapabilities.current.isSpatialUiEnabled) { … } else { … }, where our app smartly adapts to the XR environment. LocalSpatialCapabilities.current.isSpatialUiEnabled checks if the device of our app is running on XR headset like Occullus, actually supports Spatial UI. Spatial UI means it can render user interfaces that exist in 3D space, not just on a flat screen.If isSpatialUiEnabled is true, We enter the Subspace { … }. Think of Subspace as the special composable that tells our app. Inside it, we call MySpatialContent(), which is where we define all the cool 3D UI elements and immersive content. The onRequestHomeSpaceMode part is a way for to ask the XR system to return to a home or default spatial view if needed.If isSpatialUiEnabled is false, the device might not support full 3D spatial UI, or perhaps it's running in a more limited mode. In this case, we gracefully fall back to My2DContent(). This is where we show a more traditional 2D Android UI, ensuring our app still works even if the full XR features aren't available. The onRequestFullSpaceMode here might be used to request a more immersive flat-screen mode if available.After learning about the differences between home and full space, let’s make the simple news app.Make data class with Articles.ktdata class Articles( val id: Int, val title: String, val summary: String, val fullContent: String)2. Put the dummy data inside the project, through ArticlesData.ktpackage com.veroanggra.xrexploration.datafun getDummyNewsArticles(): List\u003cArticles\u003e { return listOf( Articles( 1, \"XR Breakthrough: New Display Tech\", \"Researchers unveil a revolutionary display doubling pixel density for XR headsets.\", \"Full content about the amazing new display technology that will change how we see virtual worlds. This technology promises higher refresh rates, wider field of view, and significantly reduced screen-door effect, paving the way for truly immersive experiences.\" ), Articles( 2, \"Spatial Computing Hits Mainstream\", \"Major tech companies heavily invest in spatial computing for everyday use.\", \"Detailed report on how spatial computing is no longer a niche and is being adopted by various industries including retail, education, healthcare, and entertainment. New SDKs and hardware platforms are making it easier for developers to create compelling spatial applications.\" ), Articles( 3, \"Future of Work: Remote VR Collaboration\", \"Study shows significant productivity gains for teams using VR for remote meetings.\", \"In-depth analysis of the study, its methodology, and implications for the future of work. Companies are exploring VR for onboarding, training, and collaborative design sessions, offering a sense of presence that video calls cannot match.\" ), Articles( 4, \"AI and XR: A Perfect Match?\", \"Exploring synergies between AI and Extended Reality for immersive experiences.\", \"Discussion on various AI techniques like NLP, computer vision, and machine learning enhancing XR. This includes smarter virtual assistants, realistic NPC behavior, environment understanding, and personalized content generation within XR environments.\" ), Articles( 5, \"Ethical Considerations in the Metaverse\", \"Experts raise questions about privacy, security, and digital ownership as metaverse develops.\", \"A comprehensive look at the ethical challenges and potential solutions for a responsible metaverse. Topics include data governance, user identity, prevention of harassment, and the digital divide in accessing these new virtual spaces.\" ), Articles( 6, \"Haptic Feedback Gets Real: New Suits Deliver True Touch\", \"Next-generation haptic suits offer unprecedented realism for virtual interactions.\", \"Exploration of the latest advancements in haptic technology, focusing on full-body suits that can simulate various textures, temperatures, and pressures. This breakthrough promises to revolutionize gaming, training simulations, and remote surgery by providing a true sense of touch within virtual environments.\" ), Articles( 7, \"Metaverse Economies Emerge: Digital Goods and Services Boom\", \"Report details the rapid growth of virtual economies and marketplaces within the metaverse.\", \"An analysis of the burgeoning digital economies, including the trade of NFTs, virtual real estate, and in-metaverse services. This article examines the economic models, the role of blockchain, and the potential impact on traditional financial systems as more value is created and exchanged in virtual worlds.\" ), Articles( 8, \"Brain-Computer Interfaces \u0026 XR: The Ultimate Immersion?\", \"Early trials show promising results for controlling XR experiences directly with thought.\", \"Detailed review of the current state of brain-computer interface (BCI) technology and its integration with XR. This includes non-invasive and invasive approaches, their potential for enhanced control, reduced latency, and the ethical implications of direct neural interaction with virtual worlds.\" ), Articles( 9, \"AR in Education: Transforming Learning Experiences\", \"Schools adopt Augmented Reality apps for interactive and engaging educational content.\", \"Case studies and examples of how Augmented Reality (AR) is being used to revolutionize education, from interactive textbooks and anatomical models to virtual field trips and hands-on simulations. This highlights the benefits for student engagement, comprehension, and accessibility in learning.\" ), Articles( 10, \"The Green Metaverse: Sustainable XR Development\", \"Focus on energy efficiency and eco-friendly practices in building virtual worlds and hardware.\", \"Discussion on the environmental impact of the growing XR industry, addressing concerns about energy consumption for rendering, data storage, and hardware manufacturing. This article explores initiatives and technological advancements aimed at creating a more sustainable metaverse, including optimized algorithms and recyclable materials.\" ) )}3. Create the item for list article, ArticleCardItem.kt.@Composablefun ArticleCardItem(article: Articles, onClick: () -\u003e Unit, modifier: Modifier = Modifier) { Row( modifier = modifier .fillMaxWidth() .clickable(onClick = onClick) .padding(16.dp) ) { Column { Text( text = article.title, style = MaterialTheme.typography.titleLarge, color = MaterialTheme.colorScheme.onSurface, fontWeight = FontWeight.Bold, ) Text( text = article.summary, style = MaterialTheme.typography.headlineMedium, maxLines = 2, overflow = TextOverflow.Ellipsis, color = MaterialTheme.colorScheme.onSurface ) } }}The function above, as a reusable blueprint for displaying a single article. When we call it, we provide the article data (which includes its title and summary) and an onClick action, telling it what to do when a user taps on the card.Inside the function, we use a Row to lay out the content horizontally. We make this entire Row fill the available width, add some neat padding, and crucially, make the whole area clickable.Within that Row, a Column vertically stacks our text elements:The article’s title appears first, styled with a bold font and a larger size from our MaterialTheme.typography system, ensuring it grabs attention.Below that, we display the article’s summary. We limit it to maxLines = 2 and use TextOverflow.Ellipsis to gracefully add “...” if the summary runs too long, keeping our UI clean.4. Create list component for articles data with ArticleListScreen.kt@Composablefun ArticleListScreen( articles: List\u003cArticles\u003e, onArticleClick: (Articles) -\u003e Unit, modifier: Modifier = Modifier) { LazyColumn(modifier = modifier.pointerInput(Unit) { awaitPointerEventScope { while (true) { val event = awaitPointerEvent() } } }) { items(articles) { article -\u003e ArticleCardItem( article = article, onClick = { onArticleClick(article) } ) } }}To show list of the article we need to create the function above. Here some explanation from the code above:articles: List\u003cArticles\u003e, the actual list of articles to show, each containing its own details.onArticleClick: (Articles) -\u003e Unit, this parameter is a special instruction like “When an article is tapped, run this code! To open the full article view or detail page”.LazyColumn(…), this is the core of the list. It's a super-efficient vertical scrolling list that only draws articles currently visible on the screen. This keeps app fast and smooth, even with hundreds of articles.modifier = modifier.pointerInput(Unit) { … }, this part is for advanced touch detection on the entire list. While typical article clicks are handled by individual items, this allows for more complex gestures or custom interactions across the whole list, is fit for XR environment.items(articles) { article -\u003e ArticleCardItem(…) }, for each article in the list, the LazyColumn creates an ArticleCardItem. This is another UI component that already created before to displays the article's title and summary, and crucially, has its own onClick that triggers our onArticleClick function when tapped.5. After create the list, next step is Detail Screen for article. Create the new file and composable fun DetailArticleScreen.@Composablefun ArticleDetailScreen(articles: Articles, onBack: () -\u003e Unit, modifier: Modifier = Modifier) { Column( modifier = modifier .fillMaxSize() .verticalScroll(rememberScrollState()) ) { Button(onClick = onBack, modifier = Modifier.padding(bottom = 16.dp)) { Text(\"Back to List\") } Text( text = articles.title, style = MaterialTheme.typography.headlineMedium, fontWeight = FontWeight.Bold, modifier = Modifier.padding(bottom = 8.dp), color = MaterialTheme.colorScheme.onSurface ) Text( text = articles.fullContent, style = MaterialTheme.typography.bodyLarge, color = MaterialTheme.colorScheme.onSurface ) }}The code above to builds the dedicated screen where users can read the full content of a single article. It takes an Articles object (containing the title and full text) and displays it within a vertically scrollable column, ensuring even very long articles are easily readable. A prominent Back to List button is also included, providing a simple way for users to navigate back to the previous screen, making for a smooth and intuitive reading experience.6. Now, think of the MainContent code in MainActivity file and modified it.@Composablefun MainContent(modifier: Modifier = Modifier) { var selectedArticle by remember { mutableStateOf\u003cArticles?\u003e(null) } val articles = remember { getDummyNewsArticles() } if (selectedArticle == null) { ArticleListScreen( articles = articles, onArticleClick = { article -\u003e selectedArticle = article }, modifier = modifier ) } else { ArticleDetailScreen( articles = selectedArticle!!, onBack = { selectedArticle = null }, modifier = modifier ) }}In the code above there is selectedArticle, to remember the value of article selected. If that value is empty, it happily shows the big list of all articles. But the moment if we tap on one of those articles, MainContent updates its variable, and poof! It instantly swaps the screen to show the full of detailed story.7. After modified the MainContent, now let’s make the panel fit for list article and when we tap the item list the panel will split it into two panel. Modified MySpatialContent like the code below :Just imagine when the app is no longer just a rectangle on a phone, but a set of floating, interactive panels wecan move around in our physical environment. This code sets up two such panels: one for our article list and one for the article details.@SuppressLint(\"RestrictedApi\")@Composablefun MySpatialContent(onRequestHomeSpaceMode: () -\u003e Unit) { var selectedArticle by remember { mutableStateOf\u003cArticles?\u003e(null) } val articles = remember { getDummyNewsArticles() } SpatialPanel( SubspaceModifier .width(if (selectedArticle == null) 1280.dp else 640.dp) .height(800.dp) .resizable() .movable() ) { Surface(modifier = Modifier.fillMaxSize(), color = Color.Transparent) { ArticleListScreen( articles = articles, onArticleClick = { article -\u003e selectedArticle = article }, modifier = Modifier .fillMaxSize() ) } Orbiter( position = OrbiterEdge.Top, offset = EdgeOffset.inner(offset = 20.dp), alignment = Alignment.End, shape = SpatialRoundedCornerShape(CornerSize(28.dp)) ) { HomeSpaceModeIconButton( onClick = onRequestHomeSpaceMode, modifier = Modifier.size(56.dp) ) } } selectedArticle?.let { currentArticle -\u003e SpatialPanel( SubspaceModifier .width(640.dp) .height(800.dp) .resizable() .movable() .offset(x = 650.dp) ) { Surface(modifier = Modifier.fillMaxSize(), color = Color.Transparent) { ArticleDetailScreen( articles = currentArticle, onBack = { selectedArticle = null }, modifier = Modifier .fillMaxSize() .padding(48.dp) ) } Orbiter( position = OrbiterEdge.Top, offset = EdgeOffset.inner(offset = 20.dp), alignment = Alignment.Start, shape = SpatialRoundedCornerShape(CornerSize(28.dp)) ) { FilledTonalIconButton( onClick = { selectedArticle = null }, modifier = Modifier.size(56.dp) ) { Icon( painter = painterResource(id = R.drawable.baseline_arrow_back_24), contentDescription = \"Back to list\" ) } } } }}Just like before, selectedArticle is variable that remembers which article we've tapped on (or if we haven't tapped any yet).articles is a collection of all the news stories to show.SubspaceModifier is what makes the panel spatial (floating screen that appears in 3D space). It lets us define how big the panel is, whether we can resize it, and if we can move it around in our virtual environment.Notice the width(if (selectedArticle == null) 1280.dp else 640.dp). This is best thing to make dynamic width. If we're just looking at the article list, the panel is wider (1280.dp). But if we've selected an article (and its detail panel pops up next to it), this list panel shrinks to 640.dp, making room. And for height height(800.dp), It's always 800 units tall..resizable() and .movable(), make we can grab and move this panel around, and change its size, just like a window on a computer desktop but in 3D.Surface(modifier = Modifier.fillMaxSize(), color = Color.Transparent) { … }, is the actual content area inside the floating panel. It's transparent so we only see what's drawn inside.ArticleListScreen(…), inside this panel, we place our familiar article list screen. It displays all our articles, and crucially, when we click an article, it updates selectedArticle, signaling a change.Orbiter(…) { HomeSpaceModeIconButton(…) }, An Orbiter is a neat little UI element that orbits around the edge of our SpatialPanel. Imagine a little button floating near the corner of our main panel.HomeSpaceModeIconButton, this specific button is designed to request Home Space Mode. If our app is running in a fully immersive Full Space (VR) mode, tapping this button would try to bring us back to our physical environment (Home Space) while still showing our app's content.8. The last step need to do is modifying My2DContent and the code like below. The My2DContent code sets up our app's familiar standard screen view for devices like phones or tablets. It essentially creates a clean layout where our MainContent (which switches between the article list and detail views) takes center stage. Here is that it also includes a button to jump into a more immersive Full Space mode, but only if the device actually supports those advanced spatial features. This ensures our app offers a great 2D experience while being ready to transition to a full XR environment when available.@SuppressLint(\"RestrictedApi\")@Composablefun My2DContent(onRequestFullSpaceMode: () -\u003e Unit) { Surface(modifier = Modifier.fillMaxSize(), color = Color.Transparent) { // Or your app's background color Row( modifier = Modifier.fillMaxSize(), horizontalArrangement = Arrangement.SpaceBetween ) { MainContent(modifier = Modifier.weight(1f).padding(start = 48.dp, top = 48.dp, bottom = 48.dp)) // Allow MainContent to take available space if (LocalHasXrSpatialFeature.current) { FullSpaceModeIconButton( onClick = onRequestFullSpaceMode, modifier = Modifier.padding(top = 32.dp, end = 32.dp) // Adjusted padding ) } } }}9. Try to run the app using XR Emulator and the result it will like this.Lastly, we already covered setting up the environment with Android Studio Preview Narwhal and the XR emulator, distinguishing between Home Space and Full Space modes. Through building a simple news app, we detailed the core components like Articles, ArticleCardItem, ArticleListScreen, and ArticleDetailScreen. Crucially, MainContent orchestrates screen switching, while MySpatialContent creates dynamic, floating 3D panels for XR environments, and My2DContent ensures seamless functionality on standard devices, highlighting how Jetpack Compose for XR enables adaptive and engaging experiences. If you want to check more about the code check on my github repository below.If you found this article helpful, please consider giving it a clap to show your support! Don’t forget to follow my account for more engaging insights about Android Technology. You can also connect with me on social media through the links Instagram, LinkedIn, X. I’d love to connect, hear your thoughts and see what amazing things you build!Stay curious, and happy coding ! 😃",
  "image": "https://miro.medium.com/v2/resize:fit:1024/1*oIIsgoR_2tuSkbLQVol2gA.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://veroanggra.medium.com/?source=post_page---byline--c23d5ef01ec2---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Veronica Putri Anggraini\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*zTy2UEZ17txRnZEyhgugTw.jpeg\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eGenerated by Gemini\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"c85f\"\u003eExtended Reality Introduction\u003c/h2\u003e\u003cp id=\"6be7\"\u003eHello folks, have you seen how cool XR (Extended Reality) is getting. Currently Extended Reality(XR) is hot topic to discuss and kind of the next big wave in tech, it’s transforming everything from how we work, and learn to how we play. XR actively blends our real world with digital magic!\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eGenerated by Veo\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"6c16\"\u003eThere are three main form when we explore this existing frontier:\u003c/p\u003e\u003cul\u003e\u003cli id=\"b061\"\u003e\u003cstrong\u003eVirtual Reality (VR), \u003c/strong\u003eWe will completely immersed in a new digital world, often with a headset that transports our senses.\u003c/li\u003e\u003cli id=\"9223\"\u003e\u003cstrong\u003eAugmented Reality (AR), \u003c/strong\u003esimply later digital information directly onto real world view, often through a phone or table screen.\u003c/li\u003e\u003cli id=\"a7e0\"\u003e\u003cstrong\u003eMixed Reality (MR), \u003c/strong\u003ewhich makes digital objects not just appear, but actually interact with your physical surroundings.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"6853\"\u003eEssentially, XR is all about extending our reality, incredibly engaging and immersive experiences unlike anything else, pushing the boundaries of what’s possible with technology.\u003c/p\u003e\u003cp id=\"70a2\"\u003eAnd here’s the cool part as Android devs with the new \u003cstrong\u003eJetpack Compose SDK for XR\u003c/strong\u003e, we can leverage our existing skills to jump right into this exciting future. So, learning XR isn’t just about picking up a new skill, it’s about positioning ourself at the forefront of innovation and unlocking a whole new world of creative and professional possibilities.\u003c/p\u003e\u003cp id=\"26d1\"\u003eTo build an XR app, we have a few good options. Such as, \u003cstrong\u003eOpenXR SDK\u003c/strong\u003e offers a universal standard for broad device compatibility. Or, if we are focusing on Meta\u0026#39;s devices, the \u003cstrong\u003eMeta Spatial SDK\u003c/strong\u003e is a strong contender. But for Android developers, the J\u003cstrong\u003eetpack XR SDK\u003c/strong\u003e, especially with\u003cstrong\u003e Jetpack Compose for XR\u003c/strong\u003e, is a fantastic new way to leverage our existing skills and build immersive experiences. This article will explain step by step to start create XR App using Jetpack XR SDK.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"a1bb\"\u003e\u003cstrong\u003eJetpack XR SDK\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"3752\"\u003eBasically, this SDK kind of taken all those familiar Android Jetpack libraries, we already use for our regular apps and tweaked them for virtual and augmented reality. That means if we already comfy with Kotlin and Jetpack Compose, we will feel right at home building immersive experiences. It really makes diving into XR so much easier for us as android developer.\u003c/p\u003e\u003cp id=\"7031\"\u003eOne of the coolest parts is Jetpack Compose for XR. This lets us build user interfaces that actually float in \u003ca href=\"https://developer.android.com/develop/xr/jetpack-xr-sdk/add-3d-models\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003e3D space\u003c/strong\u003e\u003c/a\u003e, instead of just flat on a screen. Imagine using our usual Compose rows and columns, but now they’re on spatial panels that can place all around the user.\u003c/p\u003e\u003cp id=\"bae2\"\u003ePlus, the SDK brings in helpers like \u003ca href=\"https://developer.android.com/develop/xr/jetpack-xr-sdk#jetpack-scenecore\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eJetpack SceneCore\u003c/strong\u003e\u003c/a\u003e for dropping in 3D models and \u003ca href=\"https://developer.android.com/develop/xr/jetpack-xr-sdk/arcore\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eARCore for Jetpack XR\u003c/strong\u003e\u003c/a\u003e for features like hand tracking. It even helps spatialize our existing 2D Android apps so they look great in an XR headset.\u003c/p\u003e\u003cp id=\"eac7\"\u003eUltimately, the Jetpack XR SDK empowers us as Android developers to create rich, interactive, and truly spatial XR experiences using the tools we already know and love. It’s a huge step towards making XR development way more accessible and integrated with the Android ecosystem.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"662f\"\u003eLet’s Prepare the Tools!\u003c/h2\u003e\u003cp id=\"aac0\"\u003eCurrently, for a little heads-up on getting started with the Jetpack XR SDK, we need to use \u003ca href=\"https://developer.android.com/studio/preview\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eAndroid Studio Preview Narwhal\u003c/strong\u003e\u003c/a\u003e version. So make sure we’ve got that specific preview version ready to roll when we are ready to dive in.\u003c/p\u003e\u003cul\u003e\u003cli id=\"ed69\"\u003eCreate new XR project using Basic Headset Activity.\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cul\u003e\u003cli id=\"1bb2\"\u003ePlease check the libraries file there are some of compose for XR library like the code below.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"8ea2\"\u003e\u003cbr/\u003e[versions]\u003cbr/\u003ecompose = \u0026#34;1.0.0-alpha01\u0026#34;\u003cbr/\u003eruntimeVersion = \u0026#34;1.0.0-alpha01\u0026#34;\u003cbr/\u003escenecore = \u0026#34;1.0.0-alpha01\u0026#34;\u003cp\u003e[libraries]\u003cbr/\u003eandroidx-compose = { group = \u0026#34;androidx.xr.compose\u0026#34;, name = \u0026#34;compose\u0026#34;, version.ref = \u0026#34;compose\u0026#34; }\u003cbr/\u003eruntime = { group = \u0026#34;androidx.xr.runtime\u0026#34;, name = \u0026#34;runtime\u0026#34;, version.ref = \u0026#34;runtimeVersion\u0026#34; }\u003cbr/\u003eandroidx-scenecore = { group = \u0026#34;androidx.xr.scenecore\u0026#34;, name = \u0026#34;scenecore\u0026#34;, version.ref = \u0026#34;scenecore\u0026#34; }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"046f\"\u003eTo test the app we can use XR emulator, create XR emulator with \u003cstrong\u003e\u003cem\u003eClick Device Manager → Create Virtual Device → Choose XR Device\u003c/em\u003e\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cul\u003e\u003cli id=\"e735\"\u003eRun the XR App template on the emulator, like the image bellow.\u003c/li\u003e\u003c/ul\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"f48c\"\u003eWe’ve found that the XR emulator runs surprisingly smoothly. It’s truly a testament to the advancements in the Android XR platform, making our development journey into this exciting new world much more enjoyable and efficient.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"43d1\"\u003eLet’s Build Simple App!\u003c/h2\u003e\u003cp id=\"d358\"\u003eHold up! Before we dive headfirst into crafting our XR app, we’ve got a few crucial things to nail down. Basically there are two type of space in XR, home space and full space. Think of them like different rooms our app can be in:\u003c/p\u003e\u003cul\u003e\u003cli id=\"d81e\"\u003e\u003cstrong\u003eHome Space, \u003c/strong\u003eimagine this as our XR device’s desktop or multitasking hub. In Home Space, our app lives alongside other apps, just like multiple windows on a computer screen. We can have several apps running side-by-side, allowing for multitasking. This is great for quick glances at information, social media, or even a 2D app that hasn’t been specifically designed for immersive XR. By default, most apps will launch in Home Space.\u003c/li\u003e\u003cli id=\"4442\"\u003e\u003cstrong\u003eFull Space, \u003c/strong\u003ewhere our app truly takes center stage and unlocks its full immersive potential. In Full Space, our app becomes the sole focus, taking over the entire view and giving us complete access to the device’s spatial and 3D capabilities. This is where we build truly immersive virtual worlds, interactive 3D experiences, or full-screen augmented reality scenarios. All other apps are hidden away, letting our experience shine without distractions.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"be40\"\u003eNow let’s check the home and full space from the code.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"dc0b\"\u003e    override fun onCreate(savedInstanceState: Bundle?) {\u003cbr/\u003e        super.onCreate(savedInstanceState)\u003cbr/\u003e        enableEdgeToEdge()\u003cp\u003e        setContent {\u003cbr/\u003e            XRExplorationTheme {\u003cbr/\u003e                val session = LocalSession.current\u003cbr/\u003e                if (LocalSpatialCapabilities.current.isSpatialUiEnabled) {\u003cbr/\u003e                    Subspace {\u003cbr/\u003e                        MySpatialContent(onRequestHomeSpaceMode = { session?.requestHomeSpaceMode() })\u003cbr/\u003e                    }\u003cbr/\u003e                } else {\u003cbr/\u003e                    My2DContent(onRequestFullSpaceMode = { session?.requestFullSpaceMode() })\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a478\"\u003eThe code above is onCreate function from \u003cstrong\u003eMainActivity.kt. \u003c/strong\u003eLet’s break each line :\u003c/p\u003e\u003cul\u003e\u003cli id=\"46f3\"\u003e\u003cstrong\u003e\u003cem\u003eval session = LocalSession.current\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e, \u003c/em\u003ea crucial line code for XR, because \u003cstrong\u003e\u003cem\u003eLocalSession.current\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e \u003c/em\u003egives us access to the current XR session. This \u003cstrong\u003e\u003cem\u003esession\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e \u003c/em\u003eobject is like our app’s direct line to the XR system, allowing us to do things like request different display modes.\u003c/li\u003e\u003cli id=\"4225\"\u003e\u003cstrong\u003e\u003cem\u003eif (LocalSpatialCapabilities.current.isSpatialUiEnabled) { … } else { … }, \u003c/em\u003e\u003c/strong\u003ewhere our app smartly adapts to the XR environment. \u003cstrong\u003e\u003cem\u003eLocalSpatialCapabilities.current.isSpatialUiEnabled \u003c/em\u003e\u003c/strong\u003echecks if the device of our app is running on XR headset like Occullus, actually supports Spatial UI. Spatial UI means it can render user interfaces that exist in 3D space, not just on a flat screen.\u003c/li\u003e\u003cli id=\"d7d6\"\u003eIf\u003cem\u003e \u003c/em\u003e\u003cstrong\u003e\u003cem\u003eisSpatialUiEnabled \u003c/em\u003e\u003c/strong\u003eis\u003cstrong\u003e \u003c/strong\u003etrue,\u003cstrong\u003e \u003c/strong\u003eWe enter the \u003cstrong\u003e\u003cem\u003eSubspace { … }\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e.\u003c/em\u003e Think of \u003cstrong\u003e\u003cem\u003eSubspace\u003c/em\u003e\u003c/strong\u003e as the special composable that tells our app. Inside it, we call \u003cstrong\u003e\u003cem\u003eMySpatialContent()\u003c/em\u003e\u003c/strong\u003e, which is where we define all the cool 3D UI elements and immersive content. The \u003cstrong\u003e\u003cem\u003eonRequestHomeSpaceMode\u003c/em\u003e\u003c/strong\u003e part is a way for to ask the XR system to return to a \u003cstrong\u003ehome\u003c/strong\u003e or default spatial view if needed.\u003c/li\u003e\u003cli id=\"24e0\"\u003eIf \u003cstrong\u003e\u003cem\u003eisSpatialUiEnabled\u003c/em\u003e\u003c/strong\u003e is false, the device might not support full 3D spatial UI, or perhaps it\u0026#39;s running in a more limited mode. In this case, we gracefully fall back to \u003cstrong\u003e\u003cem\u003eMy2DContent()\u003c/em\u003e\u003c/strong\u003e. This is where we show a more traditional 2D Android UI, ensuring our app still works even if the full XR features aren\u0026#39;t available. The \u003cstrong\u003e\u003cem\u003eonRequestFullSpaceMode \u003c/em\u003e\u003c/strong\u003ehere might be used to request a more immersive \u003cem\u003eflat-screen\u003c/em\u003e mode if available.\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"4cb5\"\u003eAfter learning about the differences between home and full space, let’s make the simple news app.\u003c/p\u003e\u003col\u003e\u003cli id=\"af87\"\u003eMake data class with\u003cstrong\u003e Articles.kt\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003cspan id=\"b8fe\"\u003edata class Articles(\u003cbr/\u003e    val id: Int,\u003cbr/\u003e    val title: String,\u003cbr/\u003e    val summary: String,\u003cbr/\u003e    val fullContent: String\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"42f8\"\u003e2. Put the dummy data inside the project, through \u003cstrong\u003eArticlesData.kt\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2057\"\u003epackage com.veroanggra.xrexploration.data\u003cp\u003efun getDummyNewsArticles(): List\u0026lt;Articles\u0026gt; {\u003cbr/\u003e    return listOf(\u003cbr/\u003e        Articles(\u003cbr/\u003e            1,\u003cbr/\u003e            \u0026#34;XR Breakthrough: New Display Tech\u0026#34;,\u003cbr/\u003e            \u0026#34;Researchers unveil a revolutionary display doubling pixel density for XR headsets.\u0026#34;,\u003cbr/\u003e            \u0026#34;Full content about the amazing new display technology that will change how we see virtual worlds. This technology promises higher refresh rates, wider field of view, and significantly reduced screen-door effect, paving the way for truly immersive experiences.\u0026#34;\u003cbr/\u003e        ),\u003cbr/\u003e        Articles(\u003cbr/\u003e            2,\u003cbr/\u003e            \u0026#34;Spatial Computing Hits Mainstream\u0026#34;,\u003cbr/\u003e            \u0026#34;Major tech companies heavily invest in spatial computing for everyday use.\u0026#34;,\u003cbr/\u003e            \u0026#34;Detailed report on how spatial computing is no longer a niche and is being adopted by various industries including retail, education, healthcare, and entertainment. New SDKs and hardware platforms are making it easier for developers to create compelling spatial applications.\u0026#34;\u003cbr/\u003e        ),\u003cbr/\u003e        Articles(\u003cbr/\u003e            3,\u003cbr/\u003e            \u0026#34;Future of Work: Remote VR Collaboration\u0026#34;,\u003cbr/\u003e            \u0026#34;Study shows significant productivity gains for teams using VR for remote meetings.\u0026#34;,\u003cbr/\u003e            \u0026#34;In-depth analysis of the study, its methodology, and implications for the future of work. Companies are exploring VR for onboarding, training, and collaborative design sessions, offering a sense of presence that video calls cannot match.\u0026#34;\u003cbr/\u003e        ),\u003cbr/\u003e        Articles(\u003cbr/\u003e            4,\u003cbr/\u003e            \u0026#34;AI and XR: A Perfect Match?\u0026#34;,\u003cbr/\u003e            \u0026#34;Exploring synergies between AI and Extended Reality for immersive experiences.\u0026#34;,\u003cbr/\u003e            \u0026#34;Discussion on various AI techniques like NLP, computer vision, and machine learning enhancing XR. This includes smarter virtual assistants, realistic NPC behavior, environment understanding, and personalized content generation within XR environments.\u0026#34;\u003cbr/\u003e        ),\u003cbr/\u003e        Articles(\u003cbr/\u003e            5,\u003cbr/\u003e            \u0026#34;Ethical Considerations in the Metaverse\u0026#34;,\u003cbr/\u003e            \u0026#34;Experts raise questions about privacy, security, and digital ownership as metaverse develops.\u0026#34;,\u003cbr/\u003e            \u0026#34;A comprehensive look at the ethical challenges and potential solutions for a responsible metaverse. Topics include data governance, user identity, prevention of harassment, and the digital divide in accessing these new virtual spaces.\u0026#34;\u003cbr/\u003e        ),\u003cbr/\u003e        Articles(\u003cbr/\u003e            6,\u003cbr/\u003e            \u0026#34;Haptic Feedback Gets Real: New Suits Deliver True Touch\u0026#34;,\u003cbr/\u003e            \u0026#34;Next-generation haptic suits offer unprecedented realism for virtual interactions.\u0026#34;,\u003cbr/\u003e            \u0026#34;Exploration of the latest advancements in haptic technology, focusing on full-body suits that can simulate various textures, temperatures, and pressures. This breakthrough promises to revolutionize gaming, training simulations, and remote surgery by providing a true sense of touch within virtual environments.\u0026#34;\u003cbr/\u003e        ),\u003cbr/\u003e        Articles(\u003cbr/\u003e            7,\u003cbr/\u003e            \u0026#34;Metaverse Economies Emerge: Digital Goods and Services Boom\u0026#34;,\u003cbr/\u003e            \u0026#34;Report details the rapid growth of virtual economies and marketplaces within the metaverse.\u0026#34;,\u003cbr/\u003e            \u0026#34;An analysis of the burgeoning digital economies, including the trade of NFTs, virtual real estate, and in-metaverse services. This article examines the economic models, the role of blockchain, and the potential impact on traditional financial systems as more value is created and exchanged in virtual worlds.\u0026#34;\u003cbr/\u003e        ),\u003cbr/\u003e        Articles(\u003cbr/\u003e            8,\u003cbr/\u003e            \u0026#34;Brain-Computer Interfaces \u0026amp; XR: The Ultimate Immersion?\u0026#34;,\u003cbr/\u003e            \u0026#34;Early trials show promising results for controlling XR experiences directly with thought.\u0026#34;,\u003cbr/\u003e            \u0026#34;Detailed review of the current state of brain-computer interface (BCI) technology and its integration with XR. This includes non-invasive and invasive approaches, their potential for enhanced control, reduced latency, and the ethical implications of direct neural interaction with virtual worlds.\u0026#34;\u003cbr/\u003e        ),\u003cbr/\u003e        Articles(\u003cbr/\u003e            9,\u003cbr/\u003e            \u0026#34;AR in Education: Transforming Learning Experiences\u0026#34;,\u003cbr/\u003e            \u0026#34;Schools adopt Augmented Reality apps for interactive and engaging educational content.\u0026#34;,\u003cbr/\u003e            \u0026#34;Case studies and examples of how Augmented Reality (AR) is being used to revolutionize education, from interactive textbooks and anatomical models to virtual field trips and hands-on simulations. This highlights the benefits for student engagement, comprehension, and accessibility in learning.\u0026#34;\u003cbr/\u003e        ),\u003cbr/\u003e        Articles(\u003cbr/\u003e            10,\u003cbr/\u003e            \u0026#34;The Green Metaverse: Sustainable XR Development\u0026#34;,\u003cbr/\u003e            \u0026#34;Focus on energy efficiency and eco-friendly practices in building virtual worlds and hardware.\u0026#34;,\u003cbr/\u003e            \u0026#34;Discussion on the environmental impact of the growing XR industry, addressing concerns about energy consumption for rendering, data storage, and hardware manufacturing. This article explores initiatives and technological advancements aimed at creating a more sustainable metaverse, including optimized algorithms and recyclable materials.\u0026#34;\u003cbr/\u003e        )\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"3911\"\u003e3. Create the item for list article, ArticleCardItem.kt.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6ab0\"\u003e\u003cbr/\u003e@Composable\u003cbr/\u003efun ArticleCardItem(article: Articles, onClick: () -\u0026gt; Unit, modifier: Modifier = Modifier) {\u003cbr/\u003e    Row(\u003cbr/\u003e        modifier = modifier\u003cbr/\u003e            .fillMaxWidth()\u003cbr/\u003e            .clickable(onClick = onClick)\u003cbr/\u003e            .padding(16.dp)\u003cbr/\u003e    ) {\u003cbr/\u003e        Column {\u003cbr/\u003e            Text(\u003cbr/\u003e                text = article.title,\u003cbr/\u003e                style = MaterialTheme.typography.titleLarge,\u003cbr/\u003e                color = MaterialTheme.colorScheme.onSurface,\u003cbr/\u003e                fontWeight = FontWeight.Bold,\u003cbr/\u003e            )\u003cbr/\u003e            Text(\u003cbr/\u003e                text = article.summary,\u003cbr/\u003e                style = MaterialTheme.typography.headlineMedium,\u003cbr/\u003e                maxLines = 2,\u003cbr/\u003e                overflow = TextOverflow.Ellipsis,\u003cbr/\u003e                color = MaterialTheme.colorScheme.onSurface\u003cbr/\u003e            )\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"be3b\"\u003eThe function above, as a reusable blueprint for displaying a single article. When we call it, we provide the\u003cstrong\u003e\u003cem\u003e article \u003c/em\u003e\u003c/strong\u003edata (which includes its title and summary) and an \u003cstrong\u003e\u003cem\u003eonClick \u003c/em\u003e\u003c/strong\u003eaction, telling it what to do when a user taps on the card.\u003c/p\u003e\u003cp id=\"3563\"\u003eInside the function, we use a \u003cstrong\u003e\u003cem\u003eRow\u003c/em\u003e\u003c/strong\u003e to lay out the content horizontally. We make this entire \u003cstrong\u003e\u003cem\u003eRow\u003c/em\u003e\u003c/strong\u003e fill the available width, add some neat padding, and crucially, make the whole area \u003cstrong\u003e\u003cem\u003eclickable\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"ee48\"\u003eWithin that \u003cem\u003eRow\u003c/em\u003e, a \u003cem\u003eColumn\u003c/em\u003e vertically stacks our text elements:\u003c/p\u003e\u003cul\u003e\u003cli id=\"2191\"\u003eThe \u003cstrong\u003earticle’s title\u003c/strong\u003e appears first, styled with a bold font and a larger size from our \u003cstrong\u003e\u003cem\u003eMaterialTheme.typography \u003c/em\u003e\u003c/strong\u003esystem, ensuring it grabs attention.\u003c/li\u003e\u003cli id=\"2149\"\u003eBelow that, we display the \u003cstrong\u003earticle’s summary\u003c/strong\u003e. We limit it to \u003cstrong\u003e\u003cem\u003emaxLines = 2\u003c/em\u003e\u003c/strong\u003e and use \u003cstrong\u003e\u003cem\u003eTextOverflow.Ellipsis\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e \u003c/em\u003eto gracefully add “...” if the summary runs too long, keeping our UI clean.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"60b6\"\u003e4. Create list component for articles data with \u003cstrong\u003e\u003cem\u003eArticleListScreen.kt\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"f9c1\"\u003e@Composable\u003cbr/\u003efun ArticleListScreen(\u003cbr/\u003e    articles: List\u0026lt;Articles\u0026gt;,\u003cbr/\u003e    onArticleClick: (Articles) -\u0026gt; Unit,\u003cbr/\u003e    modifier: Modifier = Modifier\u003cbr/\u003e) {\u003cbr/\u003e    LazyColumn(modifier = modifier.pointerInput(Unit) {\u003cbr/\u003e        awaitPointerEventScope {\u003cbr/\u003e            while (true) {\u003cbr/\u003e                val event = awaitPointerEvent()\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }) {\u003cbr/\u003e        items(articles) { article -\u0026gt;\u003cbr/\u003e            ArticleCardItem(\u003cbr/\u003e                article = article,\u003cbr/\u003e                onClick = { onArticleClick(article) }\u003cbr/\u003e            )\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9023\"\u003eTo show list of the article we need to create the function above. Here some explanation from the code above:\u003c/p\u003e\u003cul\u003e\u003cli id=\"6fc2\"\u003e\u003cstrong\u003e\u003cem\u003earticles: List\u0026lt;Articles\u0026gt;\u003c/em\u003e\u003c/strong\u003e, the actual list of articles to show, each containing its own details.\u003c/li\u003e\u003cli id=\"ccfb\"\u003e\u003cstrong\u003e\u003cem\u003eonArticleClick: (Articles) -\u0026gt; Unit\u003c/em\u003e\u003c/strong\u003e, this parameter is a special instruction like “\u003cem\u003eWhen an article is tapped, run this code! To open the full article view or detail page\u003c/em\u003e”.\u003c/li\u003e\u003cli id=\"92ed\"\u003e\u003cstrong\u003e\u003cem\u003eLazyColumn(…)\u003c/em\u003e\u003c/strong\u003e, this is the core of the list. It\u0026#39;s a super-efficient vertical scrolling list that only draws articles currently visible on the screen. This keeps app fast and smooth, even with hundreds of articles.\u003c/li\u003e\u003cli id=\"be5c\"\u003e\u003cstrong\u003e\u003cem\u003emodifier = modifier.pointerInput(Unit) { … },\u003c/em\u003e\u003c/strong\u003e this part is for advanced touch detection on the entire list. While typical article clicks are handled by individual items, this allows for more complex gestures or custom interactions across the whole list, is fit for XR environment.\u003c/li\u003e\u003cli id=\"8a0f\"\u003e\u003cstrong\u003e\u003cem\u003eitems(articles) { article -\u0026gt; ArticleCardItem(…) }\u003c/em\u003e\u003c/strong\u003e, for each article in the list, the\u003cstrong\u003e\u003cem\u003e LazyColumn\u003c/em\u003e\u003c/strong\u003e creates an \u003cstrong\u003e\u003cem\u003eArticleCardItem\u003c/em\u003e\u003c/strong\u003e. This is another UI component that already created before to displays the article\u0026#39;s title and summary, and crucially, has its own \u003cstrong\u003e\u003cem\u003eonClick\u003c/em\u003e\u003c/strong\u003e that triggers our \u003cstrong\u003e\u003cem\u003eonArticleClick\u003c/em\u003e\u003c/strong\u003e function when tapped.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"c120\"\u003e5. After create the list, next step is Detail Screen for article. Create the new file and composable fun \u003cstrong\u003e\u003cem\u003eDetailArticleScreen\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0221\"\u003e@Composable\u003cbr/\u003efun ArticleDetailScreen(articles: Articles, onBack: () -\u0026gt; Unit, modifier: Modifier = Modifier) {\u003cbr/\u003e    Column(\u003cbr/\u003e        modifier = modifier\u003cbr/\u003e            .fillMaxSize()\u003cbr/\u003e            .verticalScroll(rememberScrollState())\u003cbr/\u003e    ) {\u003cbr/\u003e        Button(onClick = onBack, modifier = Modifier.padding(bottom = 16.dp)) {\u003cbr/\u003e            Text(\u0026#34;Back to List\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e        Text(\u003cbr/\u003e            text = articles.title,\u003cbr/\u003e            style = MaterialTheme.typography.headlineMedium,\u003cbr/\u003e            fontWeight = FontWeight.Bold,\u003cbr/\u003e            modifier = Modifier.padding(bottom = 8.dp),\u003cbr/\u003e            color = MaterialTheme.colorScheme.onSurface\u003cbr/\u003e        )\u003cbr/\u003e        Text(\u003cbr/\u003e            text = articles.fullContent,\u003cbr/\u003e            style = MaterialTheme.typography.bodyLarge,\u003cbr/\u003e            color = MaterialTheme.colorScheme.onSurface\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5b1d\"\u003eThe code above to builds the dedicated screen where users can read the full content of a single article. It takes an Articles object (containing the title and full text) and displays it within a vertically scrollable column, ensuring even very long articles are easily readable. A prominent \u003cstrong\u003e\u003cem\u003eBack to List\u003c/em\u003e\u003c/strong\u003e button is also included, providing a simple way for users to navigate back to the previous screen, making for a smooth and intuitive reading experience.\u003c/p\u003e\u003cp id=\"4fb0\"\u003e6. Now, think of the \u003cstrong\u003e\u003cem\u003eMainContent\u003c/em\u003e\u003c/strong\u003e code in \u003cstrong\u003e\u003cem\u003eMainActivity\u003c/em\u003e\u003c/strong\u003e file and modified it.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2dd9\"\u003e@Composable\u003cbr/\u003efun MainContent(modifier: Modifier = Modifier) {\u003cbr/\u003e    var selectedArticle by remember { mutableStateOf\u0026lt;Articles?\u0026gt;(null) }\u003cbr/\u003e    val articles = remember { getDummyNewsArticles() }\u003cp\u003e    if (selectedArticle == null) {\u003cbr/\u003e        ArticleListScreen(\u003cbr/\u003e            articles = articles,\u003cbr/\u003e            onArticleClick = { article -\u0026gt; selectedArticle = article },\u003cbr/\u003e            modifier = modifier\u003cbr/\u003e        )\u003cbr/\u003e    } else {\u003cbr/\u003e        ArticleDetailScreen(\u003cbr/\u003e            articles = selectedArticle!!,\u003cbr/\u003e            onBack = { selectedArticle = null },\u003cbr/\u003e            modifier = modifier\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"f85f\"\u003eIn the code above there is \u003cstrong\u003e\u003cem\u003eselectedArticle\u003c/em\u003e\u003c/strong\u003e, to remember the value of article selected. If that value is empty, it happily shows the big list of all articles. But the moment if we tap on one of those articles, \u003cstrong\u003e\u003cem\u003eMainContent\u003c/em\u003e\u003c/strong\u003e updates its variable, and \u003cem\u003epoof!\u003c/em\u003e It instantly swaps the screen to show the full of detailed story.\u003c/p\u003e\u003cp id=\"dd62\"\u003e7. After modified the MainContent, now let’s make the panel fit for list article and when we tap the item list the panel will split it into two panel. Modified \u003cstrong\u003e\u003cem\u003eMySpatialContent \u003c/em\u003e\u003c/strong\u003elike the code below :\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"a73c\"\u003eJust imagine when the app is no longer just a rectangle on a phone, but a set of floating, interactive panels wecan move around in our physical environment. This code sets up two such panels: one for our article list and one for the article details.\u003c/p\u003e\u003c/blockquote\u003e\u003cpre\u003e\u003cspan id=\"ec59\"\u003e@SuppressLint(\u0026#34;RestrictedApi\u0026#34;)\u003cbr/\u003e@Composable\u003cbr/\u003efun MySpatialContent(onRequestHomeSpaceMode: () -\u0026gt; Unit) {\u003cbr/\u003e    var selectedArticle by remember { mutableStateOf\u0026lt;Articles?\u0026gt;(null) }\u003cbr/\u003e    val articles = remember { getDummyNewsArticles() }\u003cp\u003e    SpatialPanel(\u003cbr/\u003e        SubspaceModifier\u003cbr/\u003e            .width(if (selectedArticle == null) 1280.dp else 640.dp)\u003cbr/\u003e            .height(800.dp)\u003cbr/\u003e            .resizable()\u003cbr/\u003e            .movable()\u003cbr/\u003e    ) {\u003cbr/\u003e        Surface(modifier = Modifier.fillMaxSize(), color = Color.Transparent) {\u003cbr/\u003e            ArticleListScreen(\u003cbr/\u003e                articles = articles,\u003cbr/\u003e                onArticleClick = { article -\u0026gt; selectedArticle = article },\u003cbr/\u003e                modifier = Modifier\u003cbr/\u003e                    .fillMaxSize()\u003cbr/\u003e            )\u003cbr/\u003e        }\u003cbr/\u003e        Orbiter(\u003cbr/\u003e            position = OrbiterEdge.Top,\u003cbr/\u003e            offset = EdgeOffset.inner(offset = 20.dp),\u003cbr/\u003e            alignment = Alignment.End,\u003cbr/\u003e            shape = SpatialRoundedCornerShape(CornerSize(28.dp))\u003cbr/\u003e        ) {\u003cbr/\u003e            HomeSpaceModeIconButton(\u003cbr/\u003e                onClick = onRequestHomeSpaceMode, modifier = Modifier.size(56.dp)\u003cbr/\u003e            )\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    selectedArticle?.let { currentArticle -\u0026gt;\u003cbr/\u003e        SpatialPanel(\u003cbr/\u003e            SubspaceModifier\u003cbr/\u003e                .width(640.dp)\u003cbr/\u003e                .height(800.dp)\u003cbr/\u003e                .resizable()\u003cbr/\u003e                .movable()\u003cbr/\u003e                .offset(x = 650.dp)\u003cbr/\u003e        ) {\u003cbr/\u003e            Surface(modifier = Modifier.fillMaxSize(), color = Color.Transparent) {\u003cbr/\u003e                ArticleDetailScreen(\u003cbr/\u003e                    articles = currentArticle,\u003cbr/\u003e                    onBack = { selectedArticle = null },\u003cbr/\u003e                    modifier = Modifier\u003cbr/\u003e                        .fillMaxSize()\u003cbr/\u003e                        .padding(48.dp)\u003cbr/\u003e                )\u003cbr/\u003e            }\u003cbr/\u003e            Orbiter(\u003cbr/\u003e                position = OrbiterEdge.Top,\u003cbr/\u003e                offset = EdgeOffset.inner(offset = 20.dp),\u003cbr/\u003e                alignment = Alignment.Start,\u003cbr/\u003e                shape = SpatialRoundedCornerShape(CornerSize(28.dp))\u003cbr/\u003e            ) {\u003cbr/\u003e                FilledTonalIconButton(\u003cbr/\u003e                    onClick = { selectedArticle = null },\u003cbr/\u003e                    modifier = Modifier.size(56.dp)\u003cbr/\u003e                ) {\u003cbr/\u003e                    Icon(\u003cbr/\u003e                        painter = painterResource(id = R.drawable.baseline_arrow_back_24),\u003cbr/\u003e                        contentDescription = \u0026#34;Back to list\u0026#34;\u003cbr/\u003e                    )\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"a95e\"\u003eJust like before, \u003cstrong\u003e\u003cem\u003eselectedArticle \u003c/em\u003e\u003c/strong\u003eis variable that remembers which article we\u0026#39;ve tapped on (or if we haven\u0026#39;t tapped any yet).\u003c/li\u003e\u003cli id=\"62b2\"\u003e\u003cstrong\u003e\u003cem\u003earticles\u003c/em\u003e\u003c/strong\u003e is a collection of all the news stories to show.\u003c/li\u003e\u003cli id=\"b93c\"\u003e\u003cstrong\u003e\u003cem\u003eSubspaceModifier\u003c/em\u003e\u003c/strong\u003e is what makes the panel \u003cstrong\u003e\u003cem\u003espatial \u003c/em\u003e\u003c/strong\u003e(floating screen that appears in 3D space\u003cstrong\u003e\u003cem\u003e)\u003c/em\u003e\u003c/strong\u003e. It lets us define how big the panel is, whether we can \u003cstrong\u003eresize\u003c/strong\u003e it, and if we can \u003cstrong\u003emove\u003c/strong\u003e it around in our virtual environment.\u003c/li\u003e\u003cli id=\"c9ec\"\u003eNotice the \u003cstrong\u003e\u003cem\u003ewidth(if (selectedArticle == null) 1280.dp else 640.dp)\u003c/em\u003e\u003c/strong\u003e. This is best thing to make d\u003cstrong\u003eynamic width.\u003c/strong\u003e If we\u0026#39;re just looking at the article list, the panel is wider (\u003cstrong\u003e\u003cem\u003e1280.dp\u003c/em\u003e\u003c/strong\u003e). But if we\u0026#39;ve selected an article (and its detail panel pops up next to it), this list panel shrinks to \u003cstrong\u003e\u003cem\u003e640.dp\u003c/em\u003e\u003c/strong\u003e, making room. And for height \u003cstrong\u003e\u003cem\u003eheight(800.dp),\u003c/em\u003e\u003c/strong\u003e It\u0026#39;s always 800 units tall.\u003c/li\u003e\u003cli id=\"5a5b\"\u003e\u003cstrong\u003e\u003cem\u003e.resizable()\u003c/em\u003e\u003c/strong\u003e and\u003cstrong\u003e\u003cem\u003e .movable(), \u003c/em\u003e\u003c/strong\u003emake\u003cstrong\u003e\u003cem\u003e \u003c/em\u003e\u003c/strong\u003ewe can grab and move this panel around, and change its size, just like a window on a computer desktop but in 3D.\u003c/li\u003e\u003cli id=\"7dcc\"\u003e\u003cem\u003eSurface(modifier = Modifier.fillMaxSize(), color = Color.Transparent) { … }, \u003c/em\u003eis the actual content area inside the floating panel. It\u0026#39;s transparent so we only see what\u0026#39;s drawn inside.\u003c/li\u003e\u003cli id=\"7ab2\"\u003e\u003cstrong\u003e\u003cem\u003eArticleListScreen(…)\u003c/em\u003e\u003c/strong\u003e, inside this panel, we place our familiar \u003cstrong\u003earticle list screen\u003c/strong\u003e. It displays all our articles, and crucially, when we click an article, it updates \u003cstrong\u003e\u003cem\u003eselectedArticle\u003c/em\u003e\u003c/strong\u003e, signaling a change.\u003c/li\u003e\u003cli id=\"2c7d\"\u003e\u003cstrong\u003e\u003cem\u003eOrbiter(…) { HomeSpaceModeIconButton(…) }, \u003c/em\u003e\u003c/strong\u003eAn \u003cstrong\u003e\u003cem\u003eOrbiter \u003c/em\u003e\u003c/strong\u003eis a neat little UI element that \u003cstrong\u003e\u003cem\u003eorbits \u003c/em\u003e\u003c/strong\u003earound the edge of our \u003cstrong\u003e\u003cem\u003eSpatialPanel\u003c/em\u003e\u003c/strong\u003e. Imagine a little button floating near the corner of our main panel.\u003c/li\u003e\u003cli id=\"1789\"\u003e\u003cstrong\u003e\u003cem\u003eHomeSpaceModeIconButton, \u003c/em\u003e\u003c/strong\u003ethis specific button is designed to \u003cstrong\u003erequest Home Space Mode\u003c/strong\u003e. If our app is running in a fully immersive \u003cem\u003eFull Space\u003c/em\u003e (VR) mode, tapping this button would try to bring us back to our physical environment (Home Space) while still showing our app\u0026#39;s content.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"b146\"\u003e8. The last step need to do is modifying My2DContent and the code like below. The \u003cstrong\u003e\u003cem\u003eMy2DContent\u003c/em\u003e\u003c/strong\u003e code sets up our app\u0026#39;s familiar \u003cstrong\u003estandard screen view\u003c/strong\u003e for devices like phones or tablets. It essentially creates a clean layout where our MainContent (which switches between the article list and detail views) takes center stage. Here is that it also includes a button to jump into a more immersive\u003cstrong\u003e \u003cem\u003eFull Space mode\u003c/em\u003e\u003c/strong\u003e, but only if the device actually supports those advanced spatial features. This ensures our app offers a great 2D experience while being ready to transition to a full XR environment when available.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6a87\"\u003e@SuppressLint(\u0026#34;RestrictedApi\u0026#34;)\u003cbr/\u003e@Composable\u003cbr/\u003efun My2DContent(onRequestFullSpaceMode: () -\u0026gt; Unit) {\u003cbr/\u003e    Surface(modifier = Modifier.fillMaxSize(), color = Color.Transparent) { // Or your app\u0026#39;s background color\u003cbr/\u003e        Row(\u003cbr/\u003e            modifier = Modifier.fillMaxSize(),\u003cbr/\u003e            horizontalArrangement = Arrangement.SpaceBetween\u003cbr/\u003e        ) {\u003cbr/\u003e            MainContent(modifier = Modifier.weight(1f).padding(start = 48.dp, top = 48.dp, bottom = 48.dp)) // Allow MainContent to take available space\u003cbr/\u003e            if (LocalHasXrSpatialFeature.current) {\u003cbr/\u003e                FullSpaceModeIconButton(\u003cbr/\u003e                    onClick = onRequestFullSpaceMode,\u003cbr/\u003e                    modifier = Modifier.padding(top = 32.dp, end = 32.dp) // Adjusted padding\u003cbr/\u003e                )\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"91fd\"\u003e9. Try to run the app using XR Emulator and the result it will like this.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"9ad7\"\u003eLastly, we already covered setting up the environment with Android Studio Preview Narwhal and the XR emulator, distinguishing between Home Space and Full Space modes. Through building a simple news app, we detailed the core components like Articles, ArticleCardItem, ArticleListScreen, and ArticleDetailScreen. Crucially, MainContent orchestrates screen switching, while MySpatialContent creates dynamic, floating 3D panels for XR environments, and My2DContent ensures seamless functionality on standard devices, highlighting how Jetpack Compose for XR enables adaptive and engaging experiences. If you want to check more about the code check on my github repository below.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"e049\"\u003eIf you found this article helpful, please consider giving it a \u003cstrong\u003eclap\u003c/strong\u003e to show your support! Don’t forget to \u003cstrong\u003efollow my account\u003c/strong\u003e for more engaging insights about Android Technology. You can also connect with me on social media through the links \u003ca href=\"https://www.instagram.com/veroanggra/?hl=en\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eInstagram\u003c/a\u003e, \u003ca href=\"https://www.linkedin.com/in/veroanggra/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLinkedIn\u003c/a\u003e, \u003ca href=\"https://x.com/veroanggrafyi\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eX\u003c/a\u003e. I’d love to connect, hear your thoughts and see what amazing things you build!\u003c/p\u003e\u003cp id=\"27c2\"\u003eStay curious, and happy coding ! 😃\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "27 min read",
  "publishedTime": "2025-06-01T12:28:40.1Z",
  "modifiedTime": null
}
