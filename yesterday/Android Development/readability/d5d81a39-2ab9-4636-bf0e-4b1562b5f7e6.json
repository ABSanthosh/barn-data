{
  "id": "d5d81a39-2ab9-4636-bf0e-4b1562b5f7e6",
  "title": "Timeline update: third-party autofill services support on Chrome on Android",
  "link": "http://android-developers.googleblog.com/2025/02/chrome-3p-autofill-services-update.html",
  "description": "",
  "author": "Android Developers",
  "published": "2025-02-07T09:00:00.000-08:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "#autofill-services",
    "Autofill Services",
    "chrome",
    "Identity",
    "Password Manager"
  ],
  "byline": "",
  "length": 4780,
  "excerpt": "The timeline for Chrome on Android to allow third-party autofill services, like password managers, to natively autofill forms, has been updated.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Eiji Kitamura – Developer Advocate (@agektmr) In October 2024, we announced that Chrome 131 will allow third-party autofill services on Android (like password managers) to natively autofill forms on websites. Reflecting on feedback from autofill service developers, we've decided to shift the schedule and allow the third-party autofill services from Chrome 135. Native Chrome support for third-party autofill services on Android means that users will be able to use their preferred password manager or autofill service directly in Chrome, without having to rely on workarounds or extensions. This change is expected to improve the user experience and security for Android users who use third-party autofill services. Based on developer feedback, we've fixed bugs, and have been working to make the new setting easier to discover. To support those goals, we've added the following capabilities: An ability to query Chrome settings and learn whether the user wishes to use a third party autofill service An ability to deep link to the Chrome settings page where users can enable third-party autofill services. Read Chrome settings Any app can read whether Chrome uses the 3P autofill mode that allows it to use Android Autofill. Chrome uses Android's ContentProvider to communicate that information. Declare in your Android manifest which channels you want to read settings from, e.g.: \u003cuses-permission android:name=\"android.permission.READ_USER_DICTIONARY\"/\u003e \u003cqueries\u003e \u003c!-- To Query Chrome Beta: --\u003e \u003cpackage android:name=\"com.chrome.beta\" /\u003e \u003c!-- To Query Chrome Stable: --\u003e \u003cpackage android:name=\"com.android.chrome\" /\u003e \u003c/queries\u003e Then, use Android's ContentResolver to request that information by building the content URI as in this example code: final String CHROME_CHANNEL_PACKAGE = \"com.android.chrome\"; // Chrome Stable. final String CONTENT_PROVIDER_NAME = \".AutofillThirdPartyModeContentProvider\"; final String THIRD_PARTY_MODE_COLUMN = \"autofill_third_party_state\"; final String THIRD_PARTY_MODE_ACTIONS_URI_PATH = \"autofill_third_party_mode\"; final Uri uri = new Uri.Builder() .scheme(ContentResolver.SCHEME_CONTENT) .authority(CHROME_CHANNEL_PACKAGE + CONTENT_PROVIDER_NAME) .path(THIRD_PARTY_MODE_ACTIONS_URI_PATH) .build(); final Cursor cursor = getContentResolver().query( uri, /*projection=*/new String[] {THIRD_PARTY_MODE_COLUMN}, /*selection=*/ null, /*selectionArgs=*/ null, /*sortOrder=*/ null); cursor.moveToFirst(); // Retrieve the result; int index = cursor.getColumnIndex(THIRD_PARTY_MODE_COLUMN); if (0 == cursor.getInt(index)) { // 0 means that the third party mode is turned off. Chrome uses its built-in // password manager. This is the default for new users. } else { // 1 means that the third party mode is turned on. Chrome uses forwards all // autofill requests to Android Autofill. Users have to opt-in for this. } Deep-link to Chrome settings To deep-link to the Chrome settings page where users can enable third-party autofill services, use an Android Intent. Ensure to configure the action and categories exactly as in this example code: Intent autofillSettingsIntent = new Intent(Intent.ACTION_APPLICATION_PREFERENCES); autofillSettingsIntent.addCategory(Intent.CATEGORY_DEFAULT); autofillSettingsIntent.addCategory(Intent.CATEGORY_APP_BROWSER); autofillSettingsIntent.addCategory(Intent.CATEGORY_PREFERENCE); // Invoking the intent with a chooser allows users to select the channel they want to // configure. If only one browser reacts to the intent, the chooser is skipped. Intent chooser = Intent.createChooser(autofillSettingsIntent, \"Pick Chrome Channel\"); startActivity(chooser); // If the caller knows which Chrome channel they want to configure, // they can instead add a package hint to the intent, e.g. autofillSettingsIntent.setPackage(\"com.android.chrome\"); startActivity(autofillSettingsInstent); Updated timeline To reflect the feedback and to leave time for autofill service developers to make relevant changes, we are shifting the plan. Users must select Autofill using another service in Chrome settings to ensure their autofill experience is unaffected. The new setting will become available in Chrome 135. Autofill services should encourage their users to toggle the setting, to ensure they have the best autofill experience possible with their service and Chrome on Android. Chrome plans to stop supporting the compatibility mode in summer 2025. March 5th, 2025: Chrome 135 beta is available April 1st, 2025: Chrome 135 is in stable Summer 2025: Compatibility mode will no longer be available on Chrome",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjrl0yN_MTlkO-U4qpVxVZRnuXRRGUaGFi0hF57vw1mcasqA0_81cu_YMEP4AOBA1dILG06B9Je_IgYjmx7UnefISwmzc9J72iQh0RdDfNbKsvAqvZMIAL4D1VwnqmYv7sGGGj7vc9obf7qT1N_rLt68GVxEpVf3xmswjzU6kLPhs0o7tstZwBR6FtA4Ao/w1200-h630-p-k-no-nu/Android-Android-Passkeys-UX-guidelines-Social.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjrl0yN_MTlkO-U4qpVxVZRnuXRRGUaGFi0hF57vw1mcasqA0_81cu_YMEP4AOBA1dILG06B9Je_IgYjmx7UnefISwmzc9J72iQh0RdDfNbKsvAqvZMIAL4D1VwnqmYv7sGGGj7vc9obf7qT1N_rLt68GVxEpVf3xmswjzU6kLPhs0o7tstZwBR6FtA4Ao/s1600/Android-Android-Passkeys-UX-guidelines-Social.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by \u003cauthor\u003eEiji Kitamura\u003c/author\u003e – Developer Advocate (@agektmr)\u003c/em\u003e\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEx3ky74ph5RIUTOl5VTYdmXuprItCGFxkRPI6w4UqaBOhAtqyEIEMZ_vsFMvIJizSNqc1kX4gL3MrVYNancuOBcen-tgoVfnRCOxoJYtZAS0Dk5oaAEF6VyfX7la0zvOeu_ryGUNguXIwqoM5uPleK50B-S0DsbW5INRE2d_F6pcSBsqE_yq-4sYQsZc/s1600/Android-Android-Passkeys-UX-guidelines-Banner.png\"\u003e\u003cimg data-original-height=\"800\" data-original-width=\"100%\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgEx3ky74ph5RIUTOl5VTYdmXuprItCGFxkRPI6w4UqaBOhAtqyEIEMZ_vsFMvIJizSNqc1kX4gL3MrVYNancuOBcen-tgoVfnRCOxoJYtZAS0Dk5oaAEF6VyfX7la0zvOeu_ryGUNguXIwqoM5uPleK50B-S0DsbW5INRE2d_F6pcSBsqE_yq-4sYQsZc/s1600/Android-Android-Passkeys-UX-guidelines-Banner.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003eIn October 2024, we announced that Chrome 131 will allow third-party autofill services on Android (like password managers) to \u003ca href=\"https://android-developers.googleblog.com/2024/10/chrome-3p-autofill-services.html\" target=\"_blank\"\u003enatively autofill forms on websites\u003c/a\u003e. Reflecting on feedback from autofill service developers, we\u0026#39;ve decided to shift the schedule and allow the third-party autofill services from Chrome 135.\u003c/p\u003e\n\n\u003cp\u003eNative Chrome support for third-party autofill services on Android means that users will be able to use their preferred password manager or autofill service directly in Chrome, without having to rely on workarounds or extensions. This change is expected to improve the user experience and security for Android users who use third-party autofill services.\u003c/p\u003e\n\n\u003cp\u003eBased on developer feedback, we\u0026#39;ve fixed bugs, and have been working to make the new setting easier to discover. To support those goals, we\u0026#39;ve added the following capabilities:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003eAn ability to query Chrome settings and learn whether the user wishes to use a third party autofill service\u003c/li\u003e\n\u003cli\u003eAn ability to deep link to the Chrome settings page where users can enable third-party autofill services.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n  \n\u003ch3\u003eRead Chrome settings\u003c/h3\u003e\n  \n\u003cp\u003eAny app can read whether Chrome uses the 3P autofill mode that allows it to use Android Autofill. Chrome uses Android\u0026#39;s \u003ca href=\"https://developer.android.com/reference/android/content/ContentProvider\" target=\"_blank\"\u003e\u003cspan\u003eContentProvider\u003c/span\u003e\u003c/a\u003e to communicate that information. Declare in your Android manifest which channels you want to read settings from, e.g.:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre\u003e\u0026lt;uses-permission android:name=\u003cspan\u003e\u0026#34;android.permission.READ_USER_DICTIONARY\u0026#34;\u003c/span\u003e/\u0026gt;\n\u0026lt;queries\u0026gt;\n \u0026lt;!-- To Query Chrome Beta: --\u0026gt;\n \u0026lt;\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e:name=\u003cspan\u003e\u0026#34;com.chrome.beta\u0026#34;\u003c/span\u003e /\u0026gt;\n\n \u0026lt;!-- To Query Chrome Stable: --\u0026gt;\n \u0026lt;\u003cspan\u003epackage\u003c/span\u003e \u003cspan\u003eandroid\u003c/span\u003e:name=\u003cspan\u003e\u0026#34;com.android.chrome\u0026#34;\u003c/span\u003e /\u0026gt;\n\u0026lt;/queries\u0026gt;\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThen, use Android\u0026#39;s \u003cspan\u003e\u003ca href=\"http://go/android-dev/reference/android/content/ContentResolver\" target=\"_blank\"\u003eContentResolver\u003c/a\u003e\u003c/span\u003e to request that information by building the content URI as in this example code:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre\u003efinal String CHROME_CHANNEL_PACKAGE = \u003cspan\u003e\u0026#34;com.android.chrome\u0026#34;\u003c/span\u003e;  \u003cspan\u003e// Chrome Stable.\u003c/span\u003e\nfinal String CONTENT_PROVIDER_NAME = \u003cspan\u003e\u0026#34;.AutofillThirdPartyModeContentProvider\u0026#34;\u003c/span\u003e;\nfinal String THIRD_PARTY_MODE_COLUMN = \u003cspan\u003e\u0026#34;autofill_third_party_state\u0026#34;\u003c/span\u003e;\nfinal String THIRD_PARTY_MODE_ACTIONS_URI_PATH = \u003cspan\u003e\u0026#34;autofill_third_party_mode\u0026#34;\u003c/span\u003e;\n\nfinal Uri uri = \u003cspan\u003enew\u003c/span\u003e Uri.Builder()\n                  .scheme(ContentResolver.SCHEME_CONTENT)\n                  .authority(CHROME_CHANNEL_PACKAGE + CONTENT_PROVIDER_NAME)\n                  .path(THIRD_PARTY_MODE_ACTIONS_URI_PATH)\n                  .build();\n\nfinal Cursor cursor = getContentResolver().query(\n                  uri,\n                  \u003cspan\u003e/*projection=*/\u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e String[] {THIRD_PARTY_MODE_COLUMN},\n                  \u003cspan\u003e/*selection=*/\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e,\n                  \u003cspan\u003e/*selectionArgs=*/\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e,\n                  \u003cspan\u003e/*sortOrder=*/\u003c/span\u003e \u003cspan\u003enull\u003c/span\u003e);\n\ncursor.moveToFirst(); \u003cspan\u003e// Retrieve the result;\u003c/span\u003e\n\n\u003cspan\u003eint\u003c/span\u003e index = cursor.getColumnIndex(THIRD_PARTY_MODE_COLUMN);\n\n\u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003e0\u003c/span\u003e == cursor.getInt(index)) {\n  \u003cspan\u003e// 0 means that the third party mode is turned off. Chrome uses its built-in\u003c/span\u003e\n  \u003cspan\u003e// password manager. This is the default for new users.\u003c/span\u003e\n} \u003cspan\u003eelse\u003c/span\u003e {\n  \u003cspan\u003e// 1 means that the third party mode is turned on. Chrome uses forwards all\u003c/span\u003e\n  \u003cspan\u003e// autofill requests to Android Autofill. Users have to opt-in for this.\u003c/span\u003e\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3\u003eDeep-link to Chrome settings\u003c/h3\u003e\n\n\u003cp\u003eTo deep-link to the Chrome settings page where users can enable third-party autofill services, use an Android Intent. Ensure to configure the action and categories exactly as in this example code:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003eIntent autofillSettingsIntent = \u003cspan\u003enew\u003c/span\u003e Intent(Intent.ACTION_APPLICATION_PREFERENCES);\nautofillSettingsIntent.addCategory(Intent.CATEGORY_DEFAULT);\nautofillSettingsIntent.addCategory(Intent.CATEGORY_APP_BROWSER);\nautofillSettingsIntent.addCategory(Intent.CATEGORY_PREFERENCE);\n\n\u003cspan\u003e// Invoking the intent with a chooser allows users to select the channel they want to \u003c/span\u003e\n\u003cspan\u003e// configure. If only one browser reacts to the intent, the chooser is skipped.\u003c/span\u003e\nIntent chooser = Intent.createChooser(autofillSettingsIntent, \u003cspan\u003e\u0026#34;Pick Chrome Channel\u0026#34;\u003c/span\u003e);\nstartActivity(chooser);\n\n\u003cspan\u003e// If the caller knows which Chrome channel they want to configure, \u003c/span\u003e\n\u003cspan\u003e// they can instead add a package hint to the intent, e.g.\u003c/span\u003e\nautofillSettingsIntent.setPackage(\u003cspan\u003e\u0026#34;com.android.chrome\u0026#34;\u003c/span\u003e);\nstartActivity(autofillSettingsInstent);\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003ch3\u003eUpdated timeline\u003c/h3\u003e\n\n\u003cp\u003eTo reflect the feedback and to leave time for autofill service developers to make relevant changes, we are shifting the plan. Users must select Autofill using another service in Chrome settings to ensure their autofill experience is unaffected. The new setting will become available in Chrome 135. Autofill services should encourage their users to toggle the setting, to ensure they have the best autofill experience possible with their service and Chrome on Android. Chrome plans to stop supporting the compatibility mode in summer 2025.\u003c/p\u003e\n\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003e\u003cb\u003eMarch 5th, 2025:\u003c/b\u003e Chrome 135 beta is available\u003c/li\u003e\n\u003cli\u003e\u003cb\u003eApril 1st, 2025:\u003c/b\u003e Chrome 135 is in stable\u003c/li\u003e\n\u003cli\u003e\u003cb\u003eSummer 2025:\u003c/b\u003e Compatibility mode will no longer be available on Chrome\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\u003c/div\u003e\n\u003chr/\u003e\n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
