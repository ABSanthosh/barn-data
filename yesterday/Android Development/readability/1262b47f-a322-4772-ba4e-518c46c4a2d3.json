{
  "id": "1262b47f-a322-4772-ba4e-518c46c4a2d3",
  "title": "Jetpack compose: What Scaffold have and have not",
  "link": "https://proandroiddev.com/jetpack-compose-what-scaffold-have-and-have-not-f06492eeb63b?source=rss----c72404660798---4",
  "description": "",
  "author": "Dobri Kostadinov",
  "published": "Tue, 08 Oct 2024 16:37:37 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android",
    "jetpack-compose",
    "androiddev",
    "android-app-development",
    "mobile-app-development"
  ],
  "byline": "Dobri Kostadinov",
  "length": 7429,
  "excerpt": "Jetpack Compose has revolutionized Android UI development by providing a declarative and reactive approach to building user interfaces. One of its most powerful and commonly used layout components is…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Unlocking the Power of Scaffold: What It Can and Can’t Do in Jetpack ComposeThis image was generated with the assistance of AIIntroductionJetpack Compose has revolutionized Android UI development by providing a declarative and reactive approach to building user interfaces. One of its most powerful and commonly used layout components is Scaffold. It simplifies setting up standard app layouts by offering ready-to-use slots for placing items like a TopBar, BottomBar, FloatingActionButton, and more.In this article, we will explore what Scaffold is, what it provides, and also what it doesn’t, helping you understand how and when to use it effectively in your Jetpack Compose projects.What is Scaffold in Jetpack Compose?At its core, Scaffold is a composable that provides a structured layout, designed to handle the basic layout patterns that are commonly used in Android apps. It allows developers to place key components such as an app bar, a bottom navigation bar, and floating action buttons with ease, while also giving full control over the main content of the screen.Here’s a breakdown of the main components that Scaffold provides:TopBar: For placing a toolbar or custom top app bar.BottomBar: For a bottom navigation bar or similar UI elements.FloatingActionButton (FAB): For an action button that floats above the content.Drawer: To add navigation drawers.Snackbar: For showing snackbars when user feedback is required.Content: The main area where most of the app’s UI will live.Let’s dive deeper into these individual capabilities.Capabilities of ScaffoldTopBarThe TopBar slot is a convenient place to add a TopAppBar, which is commonly used to display the app’s title, navigation icons, and actions. Here’s how you can add a TopAppBar to a Scaffold:Scaffold( topBar = { TopAppBar( title = { Text(\"My App\") }, navigationIcon = { IconButton(onClick = { /* Handle navigation */ }) { Icon(Icons.Filled.Menu, contentDescription = \"Menu\") } }, actions = { IconButton(onClick = { /* Handle action */ }) { Icon(Icons.Filled.Favorite, contentDescription = \"Favorite\") } } ) }, content = { /* Content here */ })BottomBarA BottomBar can be used for navigation or displaying key actions. Below is an example of how to add a simple BottomAppBar inside the Scaffold:Scaffold( bottomBar = { BottomAppBar { IconButton(onClick = { /* Handle home */ }) { Icon(Icons.Filled.Home, contentDescription = \"Home\") } Spacer(Modifier.weight(1f, true)) // Push the next icon to the end IconButton(onClick = { /* Handle profile */ }) { Icon(Icons.Filled.Person, contentDescription = \"Profile\") } } }, content = { /* Content here */ })FloatingActionButton (FAB)One of the most iconic elements in Android apps, the FAB, is easy to integrate with Scaffold:Scaffold( floatingActionButton = { FloatingActionButton(onClick = { /* Handle FAB click */ }) { Icon(Icons.Filled.Add, contentDescription = \"Add\") } }, content = { /* Content here */ })DrawerContentIf you need a navigation drawer, Scaffold makes it easy to add one using the drawerContent parameter. This allows users to swipe from the side to reveal a drawer with navigation or other options.Scaffold( drawerContent = { Column { Text(\"Home\") Text(\"Profile\") Text(\"Settings\") } }, content = { /* Content here */ })SnackbarStay tuned for upcoming articles where I’ll dive into customizing snackbars. For now, let’s keep it simple.Snackbars are essential for showing brief messages to the user. You can trigger them using the ScaffoldState, which is tied to the Scaffold:val scaffoldState = rememberScaffoldState()val scope = rememberCoroutineScope()Scaffold( scaffoldState = scaffoldState, content = { /* Content here */ }, floatingActionButton = { FloatingActionButton(onClick = { scope.launch { scaffoldState.snackbarHostState.showSnackbar(\"This is a Snackbar\") } }) { Icon(Icons.Filled.Info, contentDescription = \"Show Snackbar\") } })Content SlotThe content slot is where most of the app’s layout will reside. This is where you define your custom UI, such as a LazyColumn, Box, or any other Compose component.Scaffold( topBar = { /* TopAppBar */ }, content = { padding -\u003e LazyColumn( contentPadding = padding ) { items(100) { Text(\"Item #$it\", Modifier.padding(16.dp)) } } })What Scaffold Does Not HaveWhile Scaffold provides many useful features, it’s not a one-size-fits-all solution. Here are a few things it doesn’t provide:Multi-layered LayoutsScaffold works well for simple layouts, but if your UI requires complex nested scaffolds or multiple layers of drawers or toolbars, you’ll need to manage those layouts manually.Custom AnimationsWhile Compose supports animations, Scaffold doesn’t provide built-in transitions for elements like showing and hiding the FAB or BottomBar. You’ll need to manually manage these animations.Built-in State ManagementScaffold focuses on UI structure, and it doesn’t manage state like whether a drawer is open or closed. That’s up to you to manage using ScaffoldState and rememberCoroutineScope.Advanced Drawer BehaviorFor more advanced navigation drawer patterns (like multi-step drawers), you’ll need to implement custom logic or use other Compose features to handle the complexity.Combining Scaffold with Other Compose ComponentsScaffold is highly flexible, and one of its strengths is its ability to integrate seamlessly with other composables. Here’s an example of how you can combine Scaffold with a LazyColumn to create a scrollable list:Scaffold( topBar = { /* TopAppBar */ }, content = { padding -\u003e LazyColumn( contentPadding = padding ) { items(50) { index -\u003e Text(\"Item $index\", Modifier.padding(16.dp)) } } })You can also easily integrate bottom sheets, dialogs, and more into your Scaffold layout, making it the perfect foundation for your app’s UI.Performance and Usability ConsiderationsWhen working with Scaffold, it's important to be aware of potential performance issues. Overusing nesting or placing too many heavy elements inside a Scaffold can slow down your app, especially on low-end devices. Keep the layout lightweight and avoid unnecessary recompositions to ensure smooth performance.ConclusionScaffold in Jetpack Compose is a powerful and flexible tool for laying out the basic structure of your Android UI. It simplifies the integration of standard components like app bars, FABs, and drawers, while also providing a customizable content area where your app’s main interface will live.However, it’s not without limitations. More complex layouts and advanced animations will require additional handling. But when used correctly, Scaffold can help you rapidly develop polished and intuitive interfaces.Explore the power of Scaffold in your next Jetpack Compose project and build layouts with ease!Dobri KostadinovAndroid Consultant | TrainerEmail me | Follow me on LinkedIn | Follow me on Medium | Buy me a coffee",
  "image": "https://miro.medium.com/v2/resize:fit:1024/1*J1YDs7Gc77TshLLZvlZ1Xw.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"7edd\"\u003eUnlocking the Power of Scaffold: What It Can and Can’t Do in Jetpack Compose\u003c/h2\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@dobri.kostadinov?source=post_page-----f06492eeb63b--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Dobri Kostadinov\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*PDWUz7RmoqP9kmFnZzGPUg.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page-----f06492eeb63b--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eThis image was generated with the assistance of AI\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"b694\"\u003eIntroduction\u003c/h2\u003e\u003cp id=\"5745\"\u003eJetpack Compose has revolutionized Android UI development by providing a declarative and reactive approach to building user interfaces. One of its most powerful and commonly used layout components is \u003ccode\u003eScaffold\u003c/code\u003e. It simplifies setting up standard app layouts by offering ready-to-use slots for placing items like a \u003ccode\u003eTopBar\u003c/code\u003e, \u003ccode\u003eBottomBar\u003c/code\u003e, \u003ccode\u003eFloatingActionButton\u003c/code\u003e, and more.\u003c/p\u003e\u003cp id=\"3bc0\"\u003eIn this article, we will explore what \u003ccode\u003eScaffold\u003c/code\u003e is, what it provides, and also what it doesn’t, helping you understand how and when to use it effectively in your Jetpack Compose projects.\u003c/p\u003e\u003ch2 id=\"8ac7\"\u003eWhat is Scaffold in Jetpack Compose?\u003c/h2\u003e\u003cp id=\"bee7\"\u003eAt its core, \u003ccode\u003eScaffold\u003c/code\u003e is a composable that provides a structured layout, designed to handle the basic layout patterns that are commonly used in Android apps. It allows developers to place key components such as an app bar, a bottom navigation bar, and floating action buttons with ease, while also giving full control over the main content of the screen.\u003c/p\u003e\u003cp id=\"7f0b\"\u003eHere’s a breakdown of the main components that \u003ccode\u003eScaffold\u003c/code\u003e provides:\u003c/p\u003e\u003cul\u003e\u003cli id=\"6ff7\"\u003e\u003cstrong\u003eTopBar\u003c/strong\u003e: For placing a toolbar or custom top app bar.\u003c/li\u003e\u003cli id=\"1acb\"\u003e\u003cstrong\u003eBottomBar\u003c/strong\u003e: For a bottom navigation bar or similar UI elements.\u003c/li\u003e\u003cli id=\"6b78\"\u003e\u003cstrong\u003eFloatingActionButton (FAB)\u003c/strong\u003e: For an action button that floats above the content.\u003c/li\u003e\u003cli id=\"578f\"\u003e\u003cstrong\u003eDrawer\u003c/strong\u003e: To add navigation drawers.\u003c/li\u003e\u003cli id=\"5086\"\u003e\u003cstrong\u003eSnackbar\u003c/strong\u003e: For showing snackbars when user feedback is required.\u003c/li\u003e\u003cli id=\"d13a\"\u003e\u003cstrong\u003eContent\u003c/strong\u003e: The main area where most of the app’s UI will live.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"280b\"\u003eLet’s dive deeper into these individual capabilities.\u003c/p\u003e\u003ch2 id=\"f8f5\"\u003eCapabilities of Scaffold\u003c/h2\u003e\u003ch2 id=\"16eb\"\u003eTopBar\u003c/h2\u003e\u003cp id=\"71e0\"\u003eThe \u003ccode\u003eTopBar\u003c/code\u003e slot is a convenient place to add a \u003ccode\u003eTopAppBar\u003c/code\u003e, which is commonly used to display the app’s title, navigation icons, and actions. Here’s how you can add a \u003ccode\u003eTopAppBar\u003c/code\u003e to a Scaffold:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"bf5b\"\u003eScaffold(\u003cbr/\u003e    topBar = {\u003cbr/\u003e        TopAppBar(\u003cbr/\u003e            title = { Text(\u0026#34;My App\u0026#34;) },\u003cbr/\u003e            navigationIcon = {\u003cbr/\u003e                IconButton(onClick = { /* Handle navigation */ }) {\u003cbr/\u003e                    Icon(Icons.Filled.Menu, contentDescription = \u0026#34;Menu\u0026#34;)\u003cbr/\u003e                }\u003cbr/\u003e            },\u003cbr/\u003e            actions = {\u003cbr/\u003e                IconButton(onClick = { /* Handle action */ }) {\u003cbr/\u003e                    Icon(Icons.Filled.Favorite, contentDescription = \u0026#34;Favorite\u0026#34;)\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        )\u003cbr/\u003e    },\u003cbr/\u003e    content = { /* Content here */ }\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"4936\"\u003eBottomBar\u003c/h2\u003e\u003cp id=\"282d\"\u003eA \u003ccode\u003eBottomBar\u003c/code\u003e can be used for navigation or displaying key actions. Below is an example of how to add a simple \u003ccode\u003eBottomAppBar\u003c/code\u003e inside the \u003ccode\u003eScaffold\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"e534\"\u003eScaffold(\u003cbr/\u003e    bottomBar = {\u003cbr/\u003e        BottomAppBar {\u003cbr/\u003e            IconButton(onClick = { /* Handle home */ }) {\u003cbr/\u003e                Icon(Icons.Filled.Home, contentDescription = \u0026#34;Home\u0026#34;)\u003cbr/\u003e            }\u003cbr/\u003e            Spacer(Modifier.weight(1f, true)) // Push the next icon to the end\u003cbr/\u003e            IconButton(onClick = { /* Handle profile */ }) {\u003cbr/\u003e                Icon(Icons.Filled.Person, contentDescription = \u0026#34;Profile\u0026#34;)\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    },\u003cbr/\u003e    content = { /* Content here */ }\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"7d88\"\u003eFloatingActionButton (FAB)\u003c/h2\u003e\u003cp id=\"8b00\"\u003eOne of the most iconic elements in Android apps, the FAB, is easy to integrate with \u003ccode\u003eScaffold\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"29f0\"\u003eScaffold(\u003cbr/\u003e    floatingActionButton = {\u003cbr/\u003e        FloatingActionButton(onClick = { /* Handle FAB click */ }) {\u003cbr/\u003e            Icon(Icons.Filled.Add, contentDescription = \u0026#34;Add\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e    },\u003cbr/\u003e    content = { /* Content here */ }\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"6beb\"\u003eDrawerContent\u003c/h2\u003e\u003cp id=\"dbb2\"\u003eIf you need a navigation drawer, \u003ccode\u003eScaffold\u003c/code\u003e makes it easy to add one using the \u003ccode\u003edrawerContent\u003c/code\u003e parameter. This allows users to swipe from the side to reveal a drawer with navigation or other options.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"926c\"\u003eScaffold(\u003cbr/\u003e    drawerContent = {\u003cbr/\u003e        Column {\u003cbr/\u003e            Text(\u0026#34;Home\u0026#34;)\u003cbr/\u003e            Text(\u0026#34;Profile\u0026#34;)\u003cbr/\u003e            Text(\u0026#34;Settings\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e    },\u003cbr/\u003e    content = { /* Content here */ }\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"70b9\"\u003eSnackbar\u003c/h2\u003e\u003cp id=\"6042\"\u003eStay tuned for upcoming articles where I’ll dive into customizing snackbars. For now, let’s keep it simple.\u003c/p\u003e\u003cp id=\"5679\"\u003eSnackbars are essential for showing brief messages to the user. You can trigger them using the \u003ccode\u003eScaffoldState\u003c/code\u003e, which is tied to the \u003ccode\u003eScaffold\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"55f2\"\u003eval scaffoldState = rememberScaffoldState()\u003cbr/\u003eval scope = rememberCoroutineScope()\u003cp\u003eScaffold(\u003cbr/\u003e    scaffoldState = scaffoldState,\u003cbr/\u003e    content = { /* Content here */ },\u003cbr/\u003e    floatingActionButton = {\u003cbr/\u003e        FloatingActionButton(onClick = {\u003cbr/\u003e            scope.launch {\u003cbr/\u003e                scaffoldState.snackbarHostState.showSnackbar(\u0026#34;This is a Snackbar\u0026#34;)\u003cbr/\u003e            }\u003cbr/\u003e        }) {\u003cbr/\u003e            Icon(Icons.Filled.Info, contentDescription = \u0026#34;Show Snackbar\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"a4cd\"\u003eContent Slot\u003c/h2\u003e\u003cp id=\"b419\"\u003eThe \u003ccode\u003econtent\u003c/code\u003e slot is where most of the app’s layout will reside. This is where you define your custom UI, such as a \u003ccode\u003eLazyColumn\u003c/code\u003e, \u003ccode\u003eBox\u003c/code\u003e, or any other Compose component.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7cf5\"\u003eScaffold(\u003cbr/\u003e    topBar = { /* TopAppBar */ },\u003cbr/\u003e    content = { padding -\u0026gt;\u003cbr/\u003e        LazyColumn(\u003cbr/\u003e            contentPadding = padding\u003cbr/\u003e        ) {\u003cbr/\u003e            items(100) {\u003cbr/\u003e                Text(\u0026#34;Item #$it\u0026#34;, Modifier.padding(16.dp))\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"3f96\"\u003eWhat Scaffold Does Not Have\u003c/h2\u003e\u003cp id=\"d29d\"\u003eWhile \u003ccode\u003eScaffold\u003c/code\u003e provides many useful features, it’s not a one-size-fits-all solution. Here are a few things it doesn’t provide:\u003c/p\u003e\u003ch2 id=\"7dff\"\u003eMulti-layered Layouts\u003c/h2\u003e\u003cp id=\"71f4\"\u003e\u003ccode\u003eScaffold\u003c/code\u003e works well for simple layouts, but if your UI requires complex nested scaffolds or multiple layers of drawers or toolbars, you’ll need to manage those layouts manually.\u003c/p\u003e\u003ch2 id=\"3eae\"\u003eCustom Animations\u003c/h2\u003e\u003cp id=\"801e\"\u003eWhile Compose supports animations, \u003ccode\u003eScaffold\u003c/code\u003e doesn’t provide built-in transitions for elements like showing and hiding the FAB or BottomBar. You’ll need to manually manage these animations.\u003c/p\u003e\u003ch2 id=\"fae3\"\u003eBuilt-in State Management\u003c/h2\u003e\u003cp id=\"4ad9\"\u003e\u003ccode\u003eScaffold\u003c/code\u003e focuses on UI structure, and it doesn’t manage state like whether a drawer is open or closed. That’s up to you to manage using \u003ccode\u003eScaffoldState\u003c/code\u003e and \u003ccode\u003erememberCoroutineScope\u003c/code\u003e.\u003c/p\u003e\u003ch2 id=\"760c\"\u003eAdvanced Drawer Behavior\u003c/h2\u003e\u003cp id=\"e04b\"\u003eFor more advanced navigation drawer patterns (like multi-step drawers), you’ll need to implement custom logic or use other Compose features to handle the complexity.\u003c/p\u003e\u003ch2 id=\"4dd8\"\u003eCombining Scaffold with Other Compose Components\u003c/h2\u003e\u003cp id=\"9e2e\"\u003e\u003ccode\u003eScaffold\u003c/code\u003e is highly flexible, and one of its strengths is its ability to integrate seamlessly with other composables. Here’s an example of how you can combine \u003ccode\u003eScaffold\u003c/code\u003e with a \u003ccode\u003eLazyColumn\u003c/code\u003e to create a scrollable list:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"d50e\"\u003eScaffold(\u003cbr/\u003e    topBar = { /* TopAppBar */ },\u003cbr/\u003e    content = { padding -\u0026gt;\u003cbr/\u003e        LazyColumn(\u003cbr/\u003e            contentPadding = padding\u003cbr/\u003e        ) {\u003cbr/\u003e            items(50) { index -\u0026gt;\u003cbr/\u003e                Text(\u0026#34;Item $index\u0026#34;, Modifier.padding(16.dp))\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"6572\"\u003eYou can also easily integrate bottom sheets, dialogs, and more into your \u003ccode\u003eScaffold\u003c/code\u003e layout, making it the perfect foundation for your app’s UI.\u003c/p\u003e\u003ch2 id=\"8d9f\"\u003ePerformance and Usability Considerations\u003c/h2\u003e\u003cp id=\"6d55\"\u003eWhen working with \u003ccode\u003eScaffold\u003c/code\u003e, it\u0026#39;s important to be aware of potential performance issues. Overusing nesting or placing too many heavy elements inside a \u003ccode\u003eScaffold\u003c/code\u003e can slow down your app, especially on low-end devices. Keep the layout lightweight and avoid unnecessary recompositions to ensure smooth performance.\u003c/p\u003e\u003ch2 id=\"67ba\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"e098\"\u003e\u003ccode\u003eScaffold\u003c/code\u003e in Jetpack Compose is a powerful and flexible tool for laying out the basic structure of your Android UI. It simplifies the integration of standard components like app bars, FABs, and drawers, while also providing a customizable content area where your app’s main interface will live.\u003c/p\u003e\u003cp id=\"34aa\"\u003eHowever, it’s not without limitations. More complex layouts and advanced animations will require additional handling. But when used correctly, \u003ccode\u003eScaffold\u003c/code\u003e can help you rapidly develop polished and intuitive interfaces.\u003c/p\u003e\u003cp id=\"471c\"\u003eExplore the power of \u003ccode\u003eScaffold\u003c/code\u003e in your next Jetpack Compose project and build layouts with ease!\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"dbe7\"\u003e\u003cem\u003eDobri Kostadinov\u003c/em\u003e\u003cbr/\u003eAndroid Consultant | Trainer\u003cbr/\u003e\u003ca href=\"mailto:dobri.kostadinov@gmail.com\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eEmail me\u003c/a\u003e | \u003ca href=\"https://www.linkedin.com/in/dobrikostadinov/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFollow me on LinkedIn\u003c/a\u003e | \u003ca href=\"https://medium.com/@dobri.kostadinov\" rel=\"noopener\"\u003eFollow me on Medium\u003c/a\u003e | \u003ca href=\"https://www.buymeacoffee.com/dobri.kostadinov\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBuy me a coffee\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-10-08T16:37:37.177Z",
  "modifiedTime": null
}
