{
  "id": "24027e24-4265-45af-8ab9-48c17f9804c4",
  "title": "Production-ready generative AI on Android with Vertex AI in Firebase",
  "link": "http://android-developers.googleblog.com/2025/01/production-ready-generative-ai-on-android-with-vertex-ai-firebase-.html",
  "description": "",
  "author": "Android Developers",
  "published": "2025-01-29T09:00:00.000-08:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "#AndroidAI",
    "#Gemini",
    "#GenerativeAI"
  ],
  "byline": "",
  "length": 5865,
  "excerpt": "Best practices to prep your Gemini feature for production such as implementing App Check, using Remote Config, gathering user feedback, and more.",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Thomas Ezan – Sr. Developer Relation Engineer (@lethargicpanda) Gemini can help you build and launch new user features that will boost engagement and create personalized experiences for your users. The Vertex AI in Firebase SDK lets you access Google’s Gemini Cloud models (like Gemini 1.5 Flash and Gemini 1.5 Pro) and add GenAI capabilities to your Android app. It became generally available last October which means it's now ready for production and it is already used by many apps in Google Play. Here are tips for a successful deployment to production. Implement App Check to prevent API abuse When using the Vertex AI in Firebase API it is crucial to implement robust security measures to prevent unauthorized access and misuse. Firebase App Check helps protect backend resources (like Vertex AI in Firebase, Cloud Functions for Firebase, or even your own custom backend) from abuse. It does this by attesting that incoming traffic is coming from your authentic app running on an authentic and untampered Android device. Firebase App Check ensures that only legitimate users access your backend resources To get started, add Firebase to your Android project and enable the Play Integrity API for your app in the Google Play console. Back in the Firebase console, go to the App Check section of your Firebase project to register your app by providing its SHA-256 fingerprint. Then, update your Android project’s Gradle dependencies with the App Check library for Android: dependencies { // BoM for the Firebase platform implementation(platform(\"com.google.firebase:firebase-bom:33.7.0\")) // Dependency for App Check implementation(\"com.google.firebase:firebase-appcheck-playintegrity\") } Finally, in your Kotlin code, initialize App Check before using any other Firebase SDK: Firebase.initialize(context) Firebase.appCheck.installAppCheckProviderFactory( PlayIntegrityAppCheckProviderFactory.getInstance(), ) To enhance the security of your generative AI feature, you should implement and enforce App Check before releasing your app to production. Additionally, if your app utilizes other Firebase services like Firebase Authentication, Firestore, or Cloud Functions, App Check provides an extra layer of protection for those resources as well. Once App Check is enforced, you’ll be able to monitor your app’s requests in the Firebase console. App Check metrics page in the Firebase console You can learn more about App Check on Android in the Firebase documentation. Use Remote Config for server-controlled configuration The generative AI landscape evolves quickly. Every few months, new Gemini model iterations become available and some models are removed. See the Vertex AI in Firebase Gemini models page for details. Because of this, instead of hardcoding the model name in your app, we recommend using a server-controlled variable using Firebase Remote Config. This allows you to dynamically update the model your app uses without having to deploy a new version of your app or require your users to pick up a new version. You define parameters that you want to control (like model name) using the Firebase console. Then, you add these parameters into your app, along with default \"fallback\" values for each parameter. Back in the Firebase console, you can change the value of these parameters at any time. Your app will automatically fetch the new value. Here's how to implement Remote Config in your app: // Initialize the remote configuration by defining the refresh time val remoteConfig: FirebaseRemoteConfig = Firebase.remoteConfig val configSettings = remoteConfigSettings { minimumFetchIntervalInSeconds = 3600 } remoteConfig.setConfigSettingsAsync(configSettings) // Set default values defined in your app resources remoteConfig.setDefaultsAsync(R.xml.remote_config_defaults) // Load the model name val modelName = remoteConfig.getString(\"model_name\") Read more about using Remote Config with Vertex AI in Firebase. Gather user feedback to evaluate impact As you roll out your AI-enabled feature to production, it's critical to build feedback mechanisms into your product and allow users to easily signal whether the AI output was helpful, accurate, or relevant. For example, you can incorporate interactive elements such as thumb-up and thumb-down buttons and detailed feedback forms within the user interface. The Material Icons in Compose package provides ready to use icons to help you implement it. You can easily track the user interaction with these elements as custom analytics events by using Google Analytics logEvent() function: Row { Button ( onClick = { firebaseAnalytics.logEvent(\"model_response_feedback\") { param(\"feedback\", \"thumb_up\") } } ) { Icon(Icons.Default.ThumbUp, contentDescription = \"Thumb up\") }, Button ( onClick = { firebaseAnalytics.logEvent(\"model_response_feedback\") { param(\"feedback\", \"thumb_down\") } } ) { Icon(Icons.Default.ThumbDown, contentDescription = \"Thumb down\") } } Learn more about Google Analytics and its event logging capabilities in the Firebase documentation. User privacy and responsible AI When you use Vertex AI in Firebase for inference, you have the guarantee that the data sent to Google won’t be used by Google to train AI models (see Vertex AI documentation for details). It's also important to be transparent with your users when they're engaging with generative AI technology. You should highlight the possibility of unexpected model behavior. Finally, users should have control within your app over how their activity related to AI model interactions is stored and deleted. You can learn more about how Google is approaching Generative AI responsibly in the Google Cloud documentation.",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgxutgVcuY1fxk1tNiS-78vKbC_swceezRTpeoj7hNrR1_-xUa5OblQmOVV0RT3wDXMIiLsp5w28krwGBAii1QreRbxn40uVmp1xXghJ625u-qY1ec1a_SJxo7sB6kpPT2PuxUUEezTTijF9-he4gKBBgiE_cbVKXcnJ6CGle-WMRN5GSLzJVHIYi32fjA/w1200-h630-p-k-no-nu/Gemini-Nano-on-Android-Social.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgxutgVcuY1fxk1tNiS-78vKbC_swceezRTpeoj7hNrR1_-xUa5OblQmOVV0RT3wDXMIiLsp5w28krwGBAii1QreRbxn40uVmp1xXghJ625u-qY1ec1a_SJxo7sB6kpPT2PuxUUEezTTijF9-he4gKBBgiE_cbVKXcnJ6CGle-WMRN5GSLzJVHIYi32fjA/s1600/Gemini-Nano-on-Android-Social.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by \u003cauthor\u003eThomas Ezan – Sr. Developer Relation Engineer (@lethargicpanda)\u003c/author\u003e\u003c/em\u003e\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjW_v6PdEkcKdIYGcJlt3Pj-xuMxwd8uDJA7LrrsxKLk5Bf-b2_cMs-H6pIp_rhA1ESVeIyVqfHJr0-fG8rrmQg51p5Ep6qmmsrYnjJ05fHqllzf7GB1AudjmtZ1xo8Tde49lIn174-5laJq0yW8mJR2eFoQrRjI4arvggUe7buzn7cF672Wo-mujhDFuk/s1600/AI-on-Android-Google-AI-Edge%20%286%29.png\"\u003e\u003cimg data-original-height=\"800\" data-original-width=\"100%\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjW_v6PdEkcKdIYGcJlt3Pj-xuMxwd8uDJA7LrrsxKLk5Bf-b2_cMs-H6pIp_rhA1ESVeIyVqfHJr0-fG8rrmQg51p5Ep6qmmsrYnjJ05fHqllzf7GB1AudjmtZ1xo8Tde49lIn174-5laJq0yW8mJR2eFoQrRjI4arvggUe7buzn7cF672Wo-mujhDFuk/s1600/AI-on-Android-Google-AI-Edge%20%286%29.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eGemini can help you  build and launch new user features that will boost engagement and create personalized experiences for your users.\u003c/p\u003e\n\n\u003cp\u003eThe Vertex AI in Firebase SDK lets you access Google’s Gemini Cloud models (like Gemini 1.5 Flash and Gemini 1.5 Pro) and add GenAI capabilities to your Android app. It became generally available last October which means it\u0026#39;s now ready for production and it is already used by \u003ca href=\"https://android-developers.googleblog.com/2024/10/gemini-api-showcase-of-innovative-android-apps.html\" target=\"_blank\"\u003emany apps in Google Play\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere are tips for a successful deployment to production.\u003c/p\u003e\n\n\u003ch3\u003eImplement App Check to prevent API abuse\u003c/h3\u003e\n\n\u003cp\u003eWhen using the Vertex AI in Firebase API it is crucial to implement robust security measures to prevent unauthorized access and misuse.\u003c/p\u003e\n\n\u003cp\u003eFirebase App Check helps protect backend resources (like Vertex AI in Firebase, Cloud Functions for Firebase, or even your own custom backend) from abuse. It does this by attesting that incoming traffic is coming from your authentic app running on an authentic and untampered Android device.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"A flow diagram illustrating App Check, with green lines depicting \u0026#39;User Request\u0026#39; going through App Check to \u0026#39;Backend\u0026#39;. A red line depicting \u0026#39;Bad Request\u0026#39; is being blocked by App Check.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjBEmVpndsWYei5SO0HXPb6WWPILxMscIK4WfXbHXT3x2R3HcGq4fKwYTC1TuABK12FBMSIfnta8Z5z5lNjHWfXudXvxAc9DCImSw0bIOdL7NrWwgEABdXId3pb-cPXQiDgIupe8dF9FjZNq774DrWUupGZAWbExFrSOzzbbH9eCSKsRViOhFxgz2eXsR0/s1600/image3.png\" width=\"65%\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003eFirebase App Check ensures that only legitimate \nusers access your backend resources\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\u003cp\u003eTo get started, \u003ca href=\"https://firebase.google.com/docs/android/setup\" target=\"_blank\"\u003eadd Firebase to your Android project\u003c/a\u003e and enable the \u003ca href=\"https://play.google.com/console/developers\" target=\"_blank\"\u003ePlay Integrity API\u003c/a\u003e for your app in the Google Play console. Back in the Firebase console, go to the App Check section of your Firebase project to register your app by providing its \u003ca href=\"https://developers.google.com/android/guides/client-auth\" target=\"_blank\"\u003eSHA-256 fingerprint\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen, update your Android project’s Gradle dependencies with the App Check library for Android:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003edependencies {\n    \u003cspan\u003e// BoM for the Firebase platform\u003c/span\u003e\n   implementation(platform(\u003cspan\u003e\u0026#34;com.google.firebase:firebase-bom:33.7.0\u0026#34;\u003c/span\u003e))\n\n    \u003cspan\u003e// Dependency for App Check\u003c/span\u003e\n    implementation(\u003cspan\u003e\u0026#34;com.google.firebase:firebase-appcheck-playintegrity\u0026#34;\u003c/span\u003e)\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eFinally, in your Kotlin code, initialize App Check before using any other Firebase SDK:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003eFirebase.initialize(context)\nFirebase.appCheck.installAppCheckProviderFactory(\n    PlayIntegrityAppCheckProviderFactory.getInstance(),\n)\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eTo enhance the security of your generative AI feature, you should implement and enforce App Check before releasing your app to production. Additionally, if your app utilizes other Firebase services like Firebase Authentication, Firestore, or Cloud Functions, App Check provides an extra layer of protection for those resources as well.\u003c/p\u003e\n\n\n\u003cp\u003eOnce App Check is enforced, you’ll be able to monitor your app’s requests in the Firebase console.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"An area chart of the Apps Check metrics page in Firebase console, showing the percentages of verified and unverified requests over several days. Numerical breakdowns of verified (51%) and unverified requests (49%) are shown.\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhVVLy95XmqxX2WgBXmEc2URFkBVlE8NFBn_7IOZ0ApoLGohZxS1cDDU-gEidnzac4gR9sFgPjkgRkDi7mMTVcwJS14Qz3GIBdS67IPXA-02fgj8G_VV9cw_ELVfUWl5kJtFbdnD5418OF5-Fw0DK2_42-NgTyRINI3MwTIDaNa_67dSmrNcriP-Q4YhjM/s1600/image2.png\" width=\"640\"/\u003e\u003c/p\u003e\u003cimgcaption\u003e\u003ccenter\u003e\u003cem\u003e App Check metrics page in the Firebase console\n\u003c/em\u003e\u003c/center\u003e\u003c/imgcaption\u003e\n\n\u003cp\u003eYou can learn more about App Check on Android in the \u003ca href=\"http://firebase.google.com/products/app-check\" target=\"_blank\"\u003eFirebase documentation\u003c/a\u003e.\n\n\n\u003c/p\u003e\u003ch3\u003eUse Remote Config for server-controlled configuration\u003c/h3\u003e\n\n\u003cp\u003eThe generative AI landscape evolves quickly. Every few months, new Gemini model iterations become available and some models are removed. See the Vertex AI in Firebase \u003ca href=\"https://firebase.google.com/docs/vertex-ai/gemini-models#available-model-names\" target=\"_blank\"\u003eGemini models page\u003c/a\u003e for details.\u003c/p\u003e\n\n\u003cp\u003eBecause of this, instead of hardcoding the model name in your app, we recommend using a server-controlled variable using \u003ca href=\"https://firebase.google.com/docs/remote-config/get-started?platform=android\" target=\"_blank\"\u003eFirebase Remote Config\u003c/a\u003e. This allows you to dynamically update the model your app uses without having to deploy a new version of your app or require your users to pick up a new version.\u003c/p\u003e\n\n\u003cp\u003eYou define parameters that you want to control (like model name) using the Firebase console. Then, you add these parameters into your app, along with default \u0026#34;fallback\u0026#34; values for each parameter. Back in the Firebase console, you can change the value of these parameters at any time. Your app will automatically fetch the new value.\u003c/p\u003e\n\n\u003cp\u003eHere\u0026#39;s how to implement Remote Config in your app:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003e// Initialize the remote configuration by defining the refresh time\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e remoteConfig: FirebaseRemoteConfig = Firebase.remoteConfig\n\u003cspan\u003eval\u003c/span\u003e configSettings = remoteConfigSettings {\n    minimumFetchIntervalInSeconds = \u003cspan\u003e3600\u003c/span\u003e\n}\nremoteConfig.setConfigSettingsAsync(configSettings)\n\n\u003cspan\u003e// Set default values defined in your app resources \u003c/span\u003e\nremoteConfig.setDefaultsAsync(R.xml.remote_config_defaults)\n\n\u003cspan\u003e// Load the model name\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e modelName = remoteConfig.getString(\u0026#34;model_name\u0026#34;)\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eRead more about \u003ca href=\"https://firebase.google.com/docs/vertex-ai/solutions/remote-config?platform=android\" target=\"_blank\"\u003eusing Remote Config with Vertex AI in Firebase\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch3\u003eGather user feedback to evaluate impact\u003c/h3\u003e\n\n\u003cp\u003eAs you roll out your AI-enabled feature to production, it\u0026#39;s critical to build feedback mechanisms into your product and allow users to easily signal whether the AI output was helpful, accurate, or relevant. For example, you can incorporate interactive elements such as thumb-up and thumb-down buttons and detailed feedback forms within the user interface. The \u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/material/icons/package-summary\" target=\"_blank\"\u003eMaterial Icons in Compose\u003c/a\u003e package provides ready to use icons to help you implement it.\u003c/p\u003e\n\n\u003cp\u003eYou can easily track the user interaction with these elements as custom analytics events by using Google Analytics \u003cspan\u003elogEvent()\u003c/span\u003e function:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre\u003eRow {\n   Button (\n      onClick = {\n         firebaseAnalytics.logEvent(\u003cspan\u003e\u0026#34;model_response_feedback\u0026#34;\u003c/span\u003e) {\n            param(\u003cspan\u003e\u0026#34;feedback\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;thumb_up\u0026#34;\u003c/span\u003e)\n         }\n      }\n   ) {\n      Icon(Icons.Default.ThumbUp, contentDescription = \u003cspan\u003e\u0026#34;Thumb up\u0026#34;\u003c/span\u003e)\n   },\n   Button (\n      onClick = {\n         firebaseAnalytics.logEvent(\u003cspan\u003e\u0026#34;model_response_feedback\u0026#34;\u003c/span\u003e) {\n            param(\u003cspan\u003e\u0026#34;feedback\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;thumb_down\u0026#34;\u003c/span\u003e)\n         }\n      }\n   ) {\n      Icon(Icons.Default.ThumbDown, contentDescription = \u003cspan\u003e\u0026#34;Thumb down\u0026#34;\u003c/span\u003e)\n   }\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eLearn more about Google Analytics and its \u003ca href=\"https://firebase.google.com/docs/analytics/events?platform=android\" target=\"_blank\"\u003eevent logging capabilities\u003c/a\u003e in the Firebase documentation.\u003c/p\u003e\n\n\u003ch3\u003eUser privacy and responsible AI\u003c/h3\u003e\n\n\u003cp\u003eWhen you use Vertex AI in Firebase for inference, you have the guarantee that the data sent to Google won’t be used by Google to train AI models (see \u003ca href=\"https://cloud.google.com/vertex-ai/generative-ai/docs/data-governance\" target=\"_blank\"\u003eVertex AI documentation\u003c/a\u003e for details).\u003c/p\u003e\n\n\n\u003cp\u003eIt\u0026#39;s also important to be transparent with your users when they\u0026#39;re engaging with generative AI technology. You should highlight the possibility of unexpected model behavior.\u003c/p\u003e\n\n\n\u003cp\u003eFinally, users should have control within your app over how their activity related to AI model interactions is stored and deleted.\u003c/p\u003e\n\n\u003cp\u003eYou can learn more about how Google is approaching Generative AI responsibly in the \u003ca href=\"https://cloud.google.com/responsible-ai\" target=\"_blank\"\u003eGoogle Cloud documentation\u003c/a\u003e.\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": null,
  "modifiedTime": null
}
