{
  "id": "a2f8ac22-da62-4f41-bef2-db4d4b0eef7b",
  "title": "How to Show Toasts in Compose Multiplatform (Android, iOS, Desktop) with expect/actual",
  "link": "https://proandroiddev.com/how-to-show-toasts-in-compose-multiplatform-android-ios-desktop-with-expect-actual-85c630d46d06?source=rss----c72404660798---4",
  "description": "",
  "author": "Meet",
  "published": "Fri, 20 Jun 2025 00:24:16 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "androiddev",
    "android-app-development",
    "kotlin-multiplatform",
    "compose-multiplatform",
    "android"
  ],
  "byline": "Meet",
  "length": 13531,
  "excerpt": "Toast notifications are a simple and effective way to show short messages to users — think of them as lightweight popups for feedback, errors, or quick tips. While implementing toasts is…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Toast notifications are a simple and effective way to show short messages to users — think of them as lightweight popups for feedback, errors, or quick tips. While implementing toasts is straightforward in native Android, things get tricky when you want the same feature across Android, iOS, and Desktop using Compose Multiplatform.In this article, you’ll learn how to build a ToastManager using Kotlin’s expect/actual mechanism. We’ll walk through step-by-step implementations for Android, Desktop, and iOS—so you can display toast messages from your shared Compose codebase with minimal hassle.Let’s get started!Project SetupIf you haven’t already created a Compose Multiplatform project, head over to the Kotlin Multiplatform Wizard website.Select the platforms: Android, iOS, and Desktop.Make sure that the Share UI option is selected for iOS.(This ensures your Compose UI code is reused across all platforms.)Project Name: You can set this to ToastCMPApp (or any name you like)Project ID: You can use org.example.project (or customize as needed)After configuring your options, download the generated project template.Once downloaded, open the project in Android Studio or IntelliJ IDEA. Now you’re ready to implement cross-platform toast notifications!Step 1: Create ToastDurationType Enum \u0026 ToastManager in commonMainFirst, create an enum for toast duration// composeApp/src/commonMain/kotlin/your_package_name/ToastDurationType.ktenum class ToastDurationType { SHORT, LONG}and declare an expect class in your commonMain source set.This class will define a common API that platform-specific code will implement.// composeApp/src/commonMain/kotlin/your_package_name/ToastManager.ktexpect open class ToastManager() { fun showToast(message: String, toastDurationType: ToastDurationType)}Now, you can control the toast duration on all platforms using the same API!expect means: \"There will be an actual implementation for every platform (Android, iOS, Desktop).\"Step 2: Add actual Implementations for Each PlatformAfter you declare the expect class, your IDE (IntelliJ IDEA/Android Studio) will show a warning like:Expected class ‘ToastManager’ has no actual declaration in module JVM/Native…You will see a lightbulb or a popup with the option: “Add missing actual declarations”Hover over ToastManager or the warning to see this popup:IDE warning: “Expected class ‘ToastManager’ has no actual declaration…”2. Click on “Add missing actual declarations.” A new dialog will open where you can select the source sets:Select the source sets (desktopMain, androidMain, iosMain) for your actual implementations and click OK.After this, the IDE will create platform-specific actual class stubs where you’ll add the real toast code for Android, iOS, and Desktop.Step 3: Android Implementation — Toast Needs Context!On Android, Toast requires a Context (usually an Activity). To access the current activity from anywhere, we can use an Activity Provider approach.1. Create an Activity ProviderDefine a provider function in your Android source set. This lets you set the current activity whenever it’s available:// composeApp/src/androidMain/kotlin/your_package_name/ToastManager.ktimport android.app.Activityprivate var activityProvider: () -\u003e Activity? = { null}fun setActivityProvider(provider: () -\u003e Activity?) { activityProvider = provider}2. Set the Provider in Your MainActivityCall setActivityProvider from your MainActivity, so the ToastManager can always access the activity context.// composeApp/src/androidMain/kotlin/your_package_name/MainActivity.ktclass MainActivity : ComponentActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setActivityProvider { this } setContent { App() } }}3. Implement the actual ToastManager for AndroidUse the provider to get the current Activity and show a toast. Map your ToastDurationType to Android’s Toast.LENGTH_SHORT or Toast.LENGTH_LONG like this:// composeApp/src/androidMain/kotlin/your_package_name/ToastManager.ktimport android.app.Activityimport android.widget.Toastactual open class ToastManager actual constructor() { actual fun showToast(message: String, toastDurationType: ToastDurationType) { val context = activityProvider.invoke() val duration = when (toastDurationType) { ToastDurationType.SHORT -\u003e Toast.LENGTH_SHORT ToastDurationType.LONG -\u003e Toast.LENGTH_LONG } Toast.makeText(context, message, duration).show() }}Step 4: Desktop Implementation — Showing Toast Using ComposeWindowOn Desktop, to display a toast-like popup, you need a reference to the current ComposeWindow.We use a window provider, similar to Android’s activity provider, to access the window.1. Create a ComposeWindow ProviderDefine a provider in your desktop code:// composeApp/src/desktopMain/kotlin/your_package_name/ToastManager.ktimport androidx.compose.ui.awt.ComposeWindowprivate var composeWindowProvider: () -\u003e ComposeWindow? = { null}fun setComposeWindowProvider(provider: () -\u003e ComposeWindow) { composeWindowProvider = provider}2. Set the Provider in Your main.ktPass the Compose window instance when you launch your desktop app:// composeApp/src/desktopMain/kotlin/your_package_name/main.ktfun main() = application { Window( onCloseRequest = ::exitApplication, ) { setComposeWindowProvider { window } App() }}3. Implement the actual ToastManager for DesktopThis implementation uses a custom JWindow and a rounded panel for a “toast” effect.It positions the toast at the bottom center of the parent window and auto-closes after a duration.// composeApp/src/desktopMain/kotlin/your_package_name/ToastManager.ktimport androidx.compose.ui.awt.ComposeWindowimport java.awt.*import java.awt.geom.RoundRectangle2Dimport javax.swing.*actual open class ToastManager actual constructor() { actual fun showToast(message: String, toastDurationType: ToastDurationType) { val parent = composeWindowProvider.invoke() val durationType = when (toastDurationType) { ToastDurationType.SHORT -\u003e 2000 ToastDurationType.LONG -\u003e 5000 } if (parent != null) { val toast = JWindow(parent) toast.background = Color(0, 0, 0, 0) // Transparent window val panel = RoundedPanel(arcWidth = 28, arcHeight = 28) val label = JLabel(message) label.foreground = Color.WHITE label.background = Color.BLACK label.isOpaque = false label.border = BorderFactory.createEmptyBorder(10, 24, 10, 24) panel.add(label) toast.contentPane.add(panel) toast.pack() // Position at bottom center inside the parent window val parentBounds = parent.bounds val x = parentBounds.x + (parentBounds.width - toast.width) / 2 val y = parentBounds.y + parentBounds.height - toast.height - 40 toast.setLocation(x, y) toast.isVisible = true Timer(durationType) { toast.dispose() }.start() } else { // Fallback: show dialog if window reference is missing JOptionPane.showMessageDialog(null, message) } }}// Utility class for rounded toast backgroundclass RoundedPanel( private val arcWidth: Int = 24, private val arcHeight: Int = 24, private val bgColor: Color = Color(50, 50, 50, 220)) : JPanel() { init { isOpaque = false // Allow transparency layout = FlowLayout() } override fun paintComponent(g: Graphics) { val g2 = g as Graphics2D g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON) g2.color = bgColor g2.fill( RoundRectangle2D.Float( 0f, 0f, width.toFloat(), height.toFloat(), arcWidth.toFloat(), arcHeight.toFloat() ) ) super.paintComponent(g) }}Step 5: iOS Implementation — Custom Toast Using UIKitOn iOS, there is no built-in “Toast” like Android, so we need to make our own using UILabel and animate its appearance/disappearance.Here’s a simple way to show a toast message using UIKit:// composeApp/src/iosMain/kotlin/your_package_name/ToastManager.ktimport platform.UIKit.*import platform.CoreGraphics.*import kotlinx.cinterop.ExperimentalForeignApiactual open class ToastManager actual constructor() { @OptIn(ExperimentalForeignApi::class) actual fun showToast(message: String, toastDurationType: ToastDurationType) { val duration = when (toastDurationType) { ToastDurationType.SHORT -\u003e 2.0 ToastDurationType.LONG -\u003e 5.0 } val rootViewController = UIApplication.sharedApplication.keyWindow?.rootViewController val toastLabel = UILabel( frame = CGRectMake( 0.0, 0.0, UIScreen.mainScreen.bounds.useContents { size.width } - 40, 35.0 ) ) toastLabel.center = CGPointMake( UIScreen.mainScreen.bounds.useContents { size.width } / 2, UIScreen.mainScreen.bounds.useContents { size.height } - 100.0 ) toastLabel.textAlignment = NSTextAlignmentCenter toastLabel.backgroundColor = UIColor.blackColor.colorWithAlphaComponent(0.6) toastLabel.textColor = UIColor.whiteColor toastLabel.text = message toastLabel.alpha = 1.0 toastLabel.layer.cornerRadius = 15.0 toastLabel.clipsToBounds = true rootViewController?.view?.addSubview(toastLabel) UIView.animateWithDuration( duration = duration, delay = 0.1, options = UIViewAnimationOptionCurveEaseOut, animations = { toastLabel.alpha = 0.0 }, completion = { if (it) toastLabel.removeFromSuperview() }) }}Step 6: How to Use ToastManager in Your Compose Multiplatform AppNow that you’ve implemented ToastManager for all platforms, using it in your Compose UI is simple.Just create an instance of ToastManager in your composable and call showToast() as needed.Here’s a sample usage:// composeApp/src/commonMain/kotlin/your_package_name/App.ktimport androidx.compose.foundation.layout.*import androidx.compose.material3.*import androidx.compose.runtime.*import androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport org.jetbrains.compose.ui.tooling.preview.Preview@Composable@Previewfun App() { MaterialTheme { Column( modifier = Modifier.fillMaxSize(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally ) { val toastManager by remember { mutableStateOf(ToastManager()) } Button(onClick = { toastManager.showToast( \"Hello World!! with Short Duration\", ToastDurationType.SHORT ) }) { Text(\"Show Toast with Short Duration\") } Button(onClick = { toastManager.showToast( \"Hello World!! with Long Duration\", ToastDurationType.LONG ) }) { Text(\"Show Toast with Long Duration\") } } }}That’s it!Now, clicking these buttons will show a toast message on all platforms — Android, iOS, and Desktop — using your unified ToastManager implementation.ConclusionYou’ve successfully integrated toast notifications in Compose Multiplatform using the expect/actual pattern. Now, you can run your app on each supported platform — Android, iOS, macOS, Linux, and Windows — to ensure that your toast implementation works seamlessly everywhere.If you’re interested in learning more about Kotlin Multiplatform and Compose Multiplatform, check out my playlist on YouTube Channel:Kotlin Multiplatform \u0026 Compose MultiplatformThank you for reading! 🙌🙏✌ I hope you found this guide useful.Don’t forget to clap 👏 to support me and follow for more insightful articles about Android Development, Kotlin, and KMP. If you need any help related to Android, Kotlin, and KMP, I’m always happy to assist.Explore More ProjectsIf you’re interested in seeing full applications built with Kotlin Multiplatform and Jetpack Compose, check out these open-source projects:News Kotlin Multiplatform App (Supports Android, iOS, Windows, macOS, Linux):News KMP App is a Kotlin Compose Multiplatform (KMP) project that aims to provide a consistent news reading experience across multiple platforms, including Android, iOS, Windows, macOS, and Linux. This project leverages Kotlin’s multiplatform capabilities to share code and logic while using Compose for UI, ensuring a seamless and native experience on each platform.GitHub Repository: News-KMP-AppGemini AI Kotlin Multiplatform App (Supports Android, iOS, Windows, macOS, Linux, and Web):Gemini AI KMP App is a Kotlin Compose Multiplatform project designed by Gemini AI where you can retrieve information from text and images in a conversational format. Additionally, it allows storing chats group-wise using SQLDelight and KStore, and facilitates changing the Gemini API key.GitHub Repository: Gemini-AI-KMP-AppFollow me onMy Portfolio Website , YouTube , GitHub , Instagram , LinkedIn , Buy Me a Coffee , Twitter , DM Me For Freelancing Project",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*C2ytgvFsycfDZvELez2F7A.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@meet26?source=post_page---byline--85c630d46d06---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Meet\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*kyarwWs9afYOsHx9TKScyw.png\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"3e08\"\u003e\u003cspan\u003eT\u003c/span\u003eoast notifications are a simple and effective way to show short messages to users — think of them as lightweight popups for feedback, errors, or quick tips. While implementing toasts is straightforward in native Android, things get tricky when you want the same feature across Android, iOS, and Desktop using Compose Multiplatform.\u003c/p\u003e\u003cp id=\"d8ec\"\u003eIn this article, you’ll learn how to build a \u003cstrong\u003eToastManager\u003c/strong\u003e using Kotlin’s \u003ccode\u003e\u003cstrong\u003eexpect\u003c/strong\u003e\u003c/code\u003e/\u003ccode\u003e\u003cstrong\u003eactual\u003c/strong\u003e\u003c/code\u003e mechanism. We’ll walk through step-by-step implementations for Android, Desktop, and iOS—so you can display toast messages from your shared Compose codebase with minimal hassle.\u003c/p\u003e\u003cp id=\"0de5\"\u003eLet’s get started!\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"c0ed\"\u003e\u003cstrong\u003eProject Setup\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"47bf\"\u003eIf you haven’t already created a Compose Multiplatform project, head over to the \u003ca href=\"https://kmp.jetbrains.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKotlin Multiplatform Wizard website\u003c/a\u003e.\u003c/p\u003e\u003cul\u003e\u003cli id=\"957d\"\u003e\u003cstrong\u003eSelect\u003c/strong\u003e the platforms: \u003cstrong\u003eAndroid\u003c/strong\u003e, \u003cstrong\u003eiOS\u003c/strong\u003e, and \u003cstrong\u003eDesktop\u003c/strong\u003e.\u003c/li\u003e\u003cli id=\"ad45\"\u003e\u003cstrong\u003eMake sure\u003c/strong\u003e that the \u003cstrong\u003eShare UI\u003c/strong\u003e option is selected for iOS.\u003cbr/\u003e(This ensures your Compose UI code is reused across all platforms.)\u003c/li\u003e\u003cli id=\"8816\"\u003e\u003cstrong\u003eProject Name:\u003c/strong\u003e You can set this to \u003ccode\u003e\u003cstrong\u003eToastCMPApp\u003c/strong\u003e\u003c/code\u003e (or any name you like)\u003c/li\u003e\u003cli id=\"a490\"\u003e\u003cstrong\u003eProject ID:\u003c/strong\u003e You can use \u003ccode\u003e\u003cstrong\u003eorg.example.project\u003c/strong\u003e\u003c/code\u003e (or customize as needed)\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"4d52\"\u003eAfter configuring your options, \u003cstrong\u003edownload the generated project template\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"2252\"\u003eOnce downloaded, open the project in \u003cstrong\u003eAndroid Studio\u003c/strong\u003e or \u003cstrong\u003eIntelliJ IDEA\u003c/strong\u003e.\u003cbr/\u003e Now you’re ready to implement cross-platform toast notifications!\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"110d\"\u003e\u003cstrong\u003eStep 1: Create \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eToastDurationType\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e Enum \u0026amp; \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eToastManager\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e in commonMain\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"7b4c\"\u003eFirst, create an enum for toast duration\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4b6f\"\u003e// composeApp/src/commonMain/kotlin/your_package_name/ToastDurationType.kt\u003cp\u003eenum class ToastDurationType {\u003cbr/\u003e    SHORT,\u003cbr/\u003e    LONG\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"24d3\"\u003eand declare an \u003ccode\u003e\u003cstrong\u003eexpect\u003c/strong\u003e\u003c/code\u003e class in your \u003ccode\u003e\u003cstrong\u003ecommonMain\u003c/strong\u003e\u003c/code\u003e source set.\u003cbr/\u003eThis class will define a common API that platform-specific code will implement.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3383\"\u003e// composeApp/src/commonMain/kotlin/your_package_name/ToastManager.kt\u003cbr/\u003eexpect open class ToastManager() {\u003cbr/\u003e    fun showToast(message: String, toastDurationType: ToastDurationType)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9287\"\u003eNow, you can control the toast duration on all platforms using the same API!\u003c/p\u003e\u003cp id=\"d07f\"\u003e\u003ccode\u003e\u003cstrong\u003eexpect\u003c/strong\u003e\u003c/code\u003e means: \u0026#34;There will be an \u003ccode\u003e\u003cstrong\u003eactual\u003c/strong\u003e\u003c/code\u003e implementation for every platform (Android, iOS, Desktop).\u0026#34;\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"d992\"\u003e\u003cstrong\u003eStep 2: Add \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eactual\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e Implementations for Each Platform\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"d25f\"\u003eAfter you declare the \u003ccode\u003e\u003cstrong\u003eexpect\u003c/strong\u003e\u003c/code\u003e class, your IDE (IntelliJ IDEA/Android Studio) will show a warning like:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"689c\"\u003e\u003cstrong\u003e\u003cem\u003eExpected class ‘ToastManager’ has no actual declaration in module JVM/Native…\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"7e03\"\u003eYou will see a lightbulb or a popup with the option:\u003cbr/\u003e \u003cstrong\u003e“Add missing actual declarations”\u003c/strong\u003e\u003c/p\u003e\u003col\u003e\u003cli id=\"a893\"\u003e\u003cstrong\u003eHover over \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003eToastManager\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e or the warning\u003c/strong\u003e to see this popup:\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"a5c5\"\u003e\u003cem\u003eIDE warning: “Expected class ‘ToastManager’ has no actual declaration…”\u003c/em\u003e\u003c/p\u003e\u003cp id=\"5f33\"\u003e\u003cstrong\u003e2. Click on “Add missing actual declarations.”\u003c/strong\u003e\u003cbr/\u003e A new dialog will open where you can select the source sets:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"faf4\"\u003e\u003cem\u003eSelect the source sets (\u003c/em\u003e\u003ccode\u003e\u003cstrong\u003e\u003cem\u003edesktopMain\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003e\u003cem\u003e, \u003c/em\u003e\u003ccode\u003e\u003cstrong\u003e\u003cem\u003eandroidMain\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003e\u003cem\u003e, \u003c/em\u003e\u003ccode\u003e\u003cstrong\u003e\u003cem\u003eiosMain\u003c/em\u003e\u003c/strong\u003e\u003c/code\u003e\u003cem\u003e) for your actual implementations and click OK.\u003c/em\u003e\u003c/p\u003e\u003cp id=\"b59c\"\u003eAfter this, the IDE will create platform-specific \u003ccode\u003e\u003cstrong\u003eactual\u003c/strong\u003e\u003c/code\u003e class stubs where you’ll add the real toast code for Android, iOS, and Desktop.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"1c84\"\u003e\u003cstrong\u003eStep 3: Android Implementation — Toast Needs Context!\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"b71f\"\u003eOn Android, \u003ccode\u003e\u003cstrong\u003eToast\u003c/strong\u003e\u003c/code\u003e requires a \u003ccode\u003e\u003cstrong\u003eContext\u003c/strong\u003e\u003c/code\u003e (usually an \u003ccode\u003e\u003cstrong\u003eActivity\u003c/strong\u003e\u003c/code\u003e). To access the current activity from anywhere, we can use an \u003cstrong\u003eActivity Provider\u003c/strong\u003e approach.\u003c/p\u003e\u003ch2 id=\"3854\"\u003e1. Create an Activity Provider\u003c/h2\u003e\u003cp id=\"2cec\"\u003eDefine a provider function in your Android source set. This lets you set the current activity whenever it’s available:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c33d\"\u003e// composeApp/src/androidMain/kotlin/your_package_name/ToastManager.kt\u003cp\u003eimport android.app.Activity\u003c/p\u003e\u003cp\u003eprivate var activityProvider: () -\u0026gt; Activity? = {\u003cbr/\u003e    null\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003efun setActivityProvider(provider: () -\u0026gt; Activity?) {\u003cbr/\u003e    activityProvider = provider\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"1402\"\u003e2. Set the Provider in Your MainActivity\u003c/h2\u003e\u003cp id=\"451e\"\u003eCall \u003ccode\u003e\u003cstrong\u003esetActivityProvider\u003c/strong\u003e\u003c/code\u003e from your \u003ccode\u003e\u003cstrong\u003eMainActivity\u003c/strong\u003e\u003c/code\u003e, so the ToastManager can always access the activity context.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"379c\"\u003e// composeApp/src/androidMain/kotlin/your_package_name/MainActivity.kt\u003cp\u003eclass MainActivity : ComponentActivity() {\u003cbr/\u003e    override fun onCreate(savedInstanceState: Bundle?) {\u003cbr/\u003e        super.onCreate(savedInstanceState)\u003cbr/\u003e        setActivityProvider { this }\u003cbr/\u003e        setContent {\u003cbr/\u003e            App()\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"069a\"\u003e3. Implement the \u003ccode\u003eactual\u003c/code\u003e ToastManager for Android\u003c/h2\u003e\u003cp id=\"6386\"\u003eUse the provider to get the current \u003ccode\u003e\u003cstrong\u003eActivity\u003c/strong\u003e\u003c/code\u003e and show a toast. Map your \u003ccode\u003e\u003cstrong\u003eToastDurationType\u003c/strong\u003e\u003c/code\u003e to Android’s \u003ccode\u003e\u003cstrong\u003eToast.LENGTH_SHORT\u003c/strong\u003e\u003c/code\u003e or \u003ccode\u003e\u003cstrong\u003eToast.LENGTH_LONG\u003c/strong\u003e\u003c/code\u003e like this:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"329d\"\u003e// composeApp/src/androidMain/kotlin/your_package_name/ToastManager.kt\u003cp\u003eimport android.app.Activity\u003cbr/\u003eimport android.widget.Toast\u003c/p\u003e\u003cp\u003eactual open class ToastManager actual constructor() {\u003cbr/\u003e    actual fun showToast(message: String, toastDurationType: ToastDurationType) {\u003cbr/\u003e        val context = activityProvider.invoke()\u003cbr/\u003e        val duration = when (toastDurationType) {\u003cbr/\u003e            ToastDurationType.SHORT -\u0026gt; Toast.LENGTH_SHORT\u003cbr/\u003e            ToastDurationType.LONG -\u0026gt; Toast.LENGTH_LONG\u003cbr/\u003e        }\u003cbr/\u003e        Toast.makeText(context, message, duration).show()\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"fc1b\"\u003e\u003cstrong\u003eStep 4: Desktop Implementation — Showing Toast Using ComposeWindow\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"9d8f\"\u003eOn \u003cstrong\u003eDesktop\u003c/strong\u003e, to display a toast-like popup, you need a reference to the current \u003ccode\u003e\u003cstrong\u003eComposeWindow\u003c/strong\u003e\u003c/code\u003e.\u003cbr/\u003eWe use a \u003cstrong\u003ewindow provider\u003c/strong\u003e, similar to Android’s activity provider, to access the window.\u003c/p\u003e\u003ch2 id=\"6d8d\"\u003e1. Create a ComposeWindow Provider\u003c/h2\u003e\u003cp id=\"3016\"\u003eDefine a provider in your desktop code:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4832\"\u003e// composeApp/src/desktopMain/kotlin/your_package_name/ToastManager.kt\u003cp\u003eimport androidx.compose.ui.awt.ComposeWindow\u003c/p\u003e\u003cp\u003eprivate var composeWindowProvider: () -\u0026gt; ComposeWindow? = {\u003cbr/\u003e    null\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003efun setComposeWindowProvider(provider: () -\u0026gt; ComposeWindow) {\u003cbr/\u003e    composeWindowProvider = provider\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"088a\"\u003e2. Set the Provider in Your \u003ccode\u003emain.kt\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"9cce\"\u003ePass the Compose window instance when you launch your desktop app:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2ec9\"\u003e// composeApp/src/desktopMain/kotlin/your_package_name/main.kt\u003cp\u003efun main() = application {\u003cbr/\u003e    Window(\u003cbr/\u003e        onCloseRequest = ::exitApplication,\u003cbr/\u003e    ) {\u003cbr/\u003e        setComposeWindowProvider {\u003cbr/\u003e            window\u003cbr/\u003e        }\u003cbr/\u003e        App()\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"ad11\"\u003e3. Implement the \u003ccode\u003eactual\u003c/code\u003e ToastManager for Desktop\u003c/h2\u003e\u003cp id=\"27ee\"\u003eThis implementation uses a custom \u003ccode\u003e\u003cstrong\u003eJWindow\u003c/strong\u003e\u003c/code\u003e and a rounded panel for a “toast” effect.\u003cbr/\u003eIt positions the toast at the bottom center of the parent window and auto-closes after a duration.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"fa7f\"\u003e// composeApp/src/desktopMain/kotlin/your_package_name/ToastManager.kt\u003cp\u003eimport androidx.compose.ui.awt.ComposeWindow\u003cbr/\u003eimport java.awt.*\u003cbr/\u003eimport java.awt.geom.RoundRectangle2D\u003cbr/\u003eimport javax.swing.*\u003c/p\u003e\u003cp\u003eactual open class ToastManager actual constructor() {\u003cbr/\u003e    actual fun showToast(message: String, toastDurationType: ToastDurationType) {\u003cbr/\u003e        val parent = composeWindowProvider.invoke()\u003cbr/\u003e        val durationType = when (toastDurationType) {\u003cbr/\u003e            ToastDurationType.SHORT -\u0026gt; 2000\u003cbr/\u003e            ToastDurationType.LONG -\u0026gt; 5000\u003cbr/\u003e        }\u003cbr/\u003e        if (parent != null) {\u003cbr/\u003e            val toast = JWindow(parent)\u003cbr/\u003e            toast.background = Color(0, 0, 0, 0) // Transparent window\u003c/p\u003e\u003cp\u003e            val panel = RoundedPanel(arcWidth = 28, arcHeight = 28)\u003cbr/\u003e            val label = JLabel(message)\u003cbr/\u003e            label.foreground = Color.WHITE\u003cbr/\u003e            label.background = Color.BLACK\u003cbr/\u003e            label.isOpaque = false\u003cbr/\u003e            label.border = BorderFactory.createEmptyBorder(10, 24, 10, 24)\u003cbr/\u003e            panel.add(label)\u003cbr/\u003e            toast.contentPane.add(panel)\u003cbr/\u003e            toast.pack()\u003c/p\u003e\u003cp\u003e            // Position at bottom center inside the parent window\u003cbr/\u003e            val parentBounds = parent.bounds\u003cbr/\u003e            val x = parentBounds.x + (parentBounds.width - toast.width) / 2\u003cbr/\u003e            val y = parentBounds.y + parentBounds.height - toast.height - 40\u003cbr/\u003e            toast.setLocation(x, y)\u003cbr/\u003e            toast.isVisible = true\u003c/p\u003e\u003cp\u003e            Timer(durationType) { toast.dispose() }.start()\u003cbr/\u003e        } else {\u003cbr/\u003e            // Fallback: show dialog if window reference is missing\u003cbr/\u003e            JOptionPane.showMessageDialog(null, message)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003e// Utility class for rounded toast background\u003cbr/\u003eclass RoundedPanel(\u003cbr/\u003e    private val arcWidth: Int = 24,\u003cbr/\u003e    private val arcHeight: Int = 24,\u003cbr/\u003e    private val bgColor: Color = Color(50, 50, 50, 220)\u003cbr/\u003e) : JPanel() {\u003cbr/\u003e    init {\u003cbr/\u003e        isOpaque = false // Allow transparency\u003cbr/\u003e        layout = FlowLayout()\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    override fun paintComponent(g: Graphics) {\u003cbr/\u003e        val g2 = g as Graphics2D\u003cbr/\u003e        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)\u003cbr/\u003e        g2.color = bgColor\u003cbr/\u003e        g2.fill(\u003cbr/\u003e            RoundRectangle2D.Float(\u003cbr/\u003e                0f,\u003cbr/\u003e                0f,\u003cbr/\u003e                width.toFloat(),\u003cbr/\u003e                height.toFloat(),\u003cbr/\u003e                arcWidth.toFloat(),\u003cbr/\u003e                arcHeight.toFloat()\u003cbr/\u003e            )\u003cbr/\u003e        )\u003cbr/\u003e        super.paintComponent(g)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"8612\"\u003e\u003cstrong\u003eStep 5: iOS Implementation — Custom Toast Using UIKit\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"c193\"\u003eOn \u003cstrong\u003eiOS\u003c/strong\u003e, there is no built-in “Toast” like Android, so we need to make our own using \u003ccode\u003e\u003cstrong\u003eUILabel\u003c/strong\u003e\u003c/code\u003e and animate its appearance/disappearance.\u003c/p\u003e\u003cp id=\"2c3d\"\u003eHere’s a simple way to show a toast message using UIKit:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c5b7\"\u003e// composeApp/src/iosMain/kotlin/your_package_name/ToastManager.kt\u003cp\u003eimport platform.UIKit.*\u003cbr/\u003eimport platform.CoreGraphics.*\u003cbr/\u003eimport kotlinx.cinterop.ExperimentalForeignApi\u003c/p\u003e\u003cp\u003eactual open class ToastManager actual constructor() {\u003cbr/\u003e    @OptIn(ExperimentalForeignApi::class)\u003cbr/\u003e    actual fun showToast(message: String, toastDurationType: ToastDurationType) {\u003c/p\u003e\u003cp\u003e        val duration = when (toastDurationType) {\u003cbr/\u003e            ToastDurationType.SHORT -\u0026gt; 2.0\u003cbr/\u003e            ToastDurationType.LONG -\u0026gt; 5.0\u003cbr/\u003e        }\u003c/p\u003e\u003cp\u003e        val rootViewController = UIApplication.sharedApplication.keyWindow?.rootViewController\u003cbr/\u003e        val toastLabel = UILabel(\u003cbr/\u003e            frame = CGRectMake(\u003cbr/\u003e                0.0,\u003cbr/\u003e                0.0,\u003cbr/\u003e                UIScreen.mainScreen.bounds.useContents { size.width } - 40,\u003cbr/\u003e                35.0\u003cbr/\u003e            )\u003cbr/\u003e        )\u003cbr/\u003e        toastLabel.center = CGPointMake(\u003cbr/\u003e            UIScreen.mainScreen.bounds.useContents { size.width } / 2,\u003cbr/\u003e            UIScreen.mainScreen.bounds.useContents { size.height } - 100.0\u003cbr/\u003e        )\u003cbr/\u003e        toastLabel.textAlignment = NSTextAlignmentCenter\u003cbr/\u003e        toastLabel.backgroundColor = UIColor.blackColor.colorWithAlphaComponent(0.6)\u003cbr/\u003e        toastLabel.textColor = UIColor.whiteColor\u003cbr/\u003e        toastLabel.text = message\u003cbr/\u003e        toastLabel.alpha = 1.0\u003cbr/\u003e        toastLabel.layer.cornerRadius = 15.0\u003cbr/\u003e        toastLabel.clipsToBounds = true\u003cbr/\u003e        rootViewController?.view?.addSubview(toastLabel)\u003c/p\u003e\u003cp\u003e        UIView.animateWithDuration(\u003cbr/\u003e            duration = duration,\u003cbr/\u003e            delay = 0.1,\u003cbr/\u003e            options = UIViewAnimationOptionCurveEaseOut,\u003cbr/\u003e            animations = {\u003cbr/\u003e                toastLabel.alpha = 0.0\u003cbr/\u003e            },\u003cbr/\u003e            completion = {\u003cbr/\u003e                if (it)\u003cbr/\u003e                    toastLabel.removeFromSuperview()\u003cbr/\u003e            })\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cblockquote\u003e\u003cp id=\"fb36\"\u003e\u003cstrong\u003eStep 6: How to Use ToastManager in Your Compose Multiplatform App\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"988a\"\u003eNow that you’ve implemented \u003ccode\u003e\u003cstrong\u003eToastManager\u003c/strong\u003e\u003c/code\u003e for all platforms, using it in your Compose UI is simple.\u003cbr/\u003eJust create an instance of \u003ccode\u003e\u003cstrong\u003eToastManager\u003c/strong\u003e\u003c/code\u003e in your composable and call \u003ccode\u003e\u003cstrong\u003eshowToast()\u003c/strong\u003e\u003c/code\u003e as needed.\u003c/p\u003e\u003cp id=\"cc48\"\u003eHere’s a sample usage:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"67d8\"\u003e// composeApp/src/commonMain/kotlin/your_package_name/App.kt\u003cp\u003eimport androidx.compose.foundation.layout.*\u003cbr/\u003eimport androidx.compose.material3.*\u003cbr/\u003eimport androidx.compose.runtime.*\u003cbr/\u003eimport androidx.compose.ui.Alignment\u003cbr/\u003eimport androidx.compose.ui.Modifier\u003cbr/\u003eimport org.jetbrains.compose.ui.tooling.preview.Preview\u003c/p\u003e\u003cp\u003e@Composable\u003cbr/\u003e@Preview\u003cbr/\u003efun App() {\u003cbr/\u003e    MaterialTheme {\u003cbr/\u003e        Column(\u003cbr/\u003e            modifier = Modifier.fillMaxSize(),\u003cbr/\u003e            verticalArrangement = Arrangement.Center,\u003cbr/\u003e            horizontalAlignment = Alignment.CenterHorizontally\u003cbr/\u003e        ) {\u003cbr/\u003e            val toastManager by remember { mutableStateOf(ToastManager()) }\u003c/p\u003e\u003cp\u003e            Button(onClick = {\u003cbr/\u003e                toastManager.showToast(\u003cbr/\u003e                    \u0026#34;Hello World!! with Short Duration\u0026#34;,\u003cbr/\u003e                    ToastDurationType.SHORT\u003cbr/\u003e                )\u003cbr/\u003e            }) {\u003cbr/\u003e                Text(\u0026#34;Show Toast with Short Duration\u0026#34;)\u003cbr/\u003e            }\u003c/p\u003e\u003cp\u003e            Button(onClick = {\u003cbr/\u003e                toastManager.showToast(\u003cbr/\u003e                    \u0026#34;Hello World!! with Long Duration\u0026#34;,\u003cbr/\u003e                    ToastDurationType.LONG\u003cbr/\u003e                )\u003cbr/\u003e            }) {\u003cbr/\u003e                Text(\u0026#34;Show Toast with Long Duration\u0026#34;)\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"eca1\"\u003e\u003cstrong\u003eThat’s it!\u003c/strong\u003e\u003cbr/\u003eNow, clicking these buttons will show a toast message on all platforms — Android, iOS, and Desktop — using your unified \u003ccode\u003e\u003cstrong\u003eToastManager\u003c/strong\u003e\u003c/code\u003e implementation.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"80c5\"\u003e\u003cstrong\u003eConclusion\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"aca7\"\u003eYou’ve successfully integrated toast notifications in \u003cstrong\u003eCompose Multiplatform\u003c/strong\u003e using the \u003cstrong\u003eexpect/actual\u003c/strong\u003e pattern. Now, you can run your app on each supported platform —\u003cstrong\u003e Android, iOS, macOS, Linux, and Windows\u003c/strong\u003e — to ensure that your toast implementation works seamlessly everywhere.\u003c/p\u003e\u003cp id=\"ed5f\"\u003eIf you’re interested in learning more about \u003cstrong\u003eKotlin Multiplatform\u003c/strong\u003e and \u003cstrong\u003eCompose Multiplatform\u003c/strong\u003e, check out my playlist on YouTube Channel:\u003cbr/\u003e\u003ca href=\"https://youtube.com/playlist?list=PLlSuJy9SfzvEiYH59pDDNvFJjHoYLV0MM\u0026amp;si=VR1irW3wUJchQ7iz\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKotlin Multiplatform \u0026amp; Compose Multiplatform\u003c/a\u003e\u003c/p\u003e\u003cp id=\"c877\"\u003eThank you for reading! 🙌🙏✌ I hope you found this guide useful.\u003c/p\u003e\u003cp id=\"3b4f\"\u003eDon’t forget to clap 👏 to support me and follow for more insightful articles about Android Development, Kotlin, and KMP. If you need any help related to Android, Kotlin, and KMP, I’m always happy to assist.\u003c/p\u003e\u003ch2 id=\"3573\"\u003eExplore More Projects\u003c/h2\u003e\u003cp id=\"eb3a\"\u003eIf you’re interested in seeing full applications built with Kotlin Multiplatform and Jetpack Compose, check out these open-source projects:\u003c/p\u003e\u003cul\u003e\u003cli id=\"0b68\"\u003e\u003cstrong\u003eNews Kotlin Multiplatform App\u003c/strong\u003e (Supports Android, iOS, Windows, macOS, Linux):\u003cbr/\u003eNews KMP App is a Kotlin Compose Multiplatform (KMP) project that aims to provide a consistent news reading experience across multiple platforms, including Android, iOS, Windows, macOS, and Linux. This project leverages Kotlin’s multiplatform capabilities to share code and logic while using Compose for UI, ensuring a seamless and native experience on each platform.\u003cbr/\u003eGitHub Repository: \u003ca href=\"https://github.com/Coding-Meet/News-KMP-App\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eNews-KMP-App\u003c/a\u003e\u003c/li\u003e\u003cli id=\"774e\"\u003e\u003cstrong\u003eGemini AI Kotlin Multiplatform App\u003c/strong\u003e (Supports Android, iOS, Windows, macOS, Linux, and Web):\u003cbr/\u003eGemini AI KMP App is a Kotlin Compose Multiplatform project designed by Gemini AI where you can retrieve information from text and images in a conversational format. Additionally, it allows storing chats group-wise using SQLDelight and KStore, and facilitates changing the Gemini API key.\u003cbr/\u003eGitHub Repository: \u003ca href=\"https://github.com/Coding-Meet/Gemini-AI-KMP-App\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGemini-AI-KMP-App\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"cd46\"\u003eFollow me on\u003c/h2\u003e\u003cp id=\"37c4\"\u003e\u003ca href=\"https://www.codingmeet.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMy Portfolio Website\u003c/a\u003e , \u003ca href=\"https://youtube.com/@codingmeet26\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eYouTube\u003c/a\u003e , \u003ca href=\"https://github.com/Coding-Meet\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGitHub\u003c/a\u003e , \u003ca href=\"https://www.instagram.com/codingmeet26/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eInstagram\u003c/a\u003e , \u003ca href=\"https://www.linkedin.com/in/coding-meet\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLinkedIn\u003c/a\u003e , \u003ca href=\"https://www.buymeacoffee.com/CodingMeet\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBuy Me a Coffee\u003c/a\u003e , \u003ca href=\"https://twitter.com/CodingMeet\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eTwitter\u003c/a\u003e , \u003ca href=\"https://telegram.me/Meetb26\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eDM Me For Freelancing Project\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-06-19T07:41:26.982Z",
  "modifiedTime": null
}
