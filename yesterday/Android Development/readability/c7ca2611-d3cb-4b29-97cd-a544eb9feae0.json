{
  "id": "c7ca2611-d3cb-4b29-97cd-a544eb9feae0",
  "title": "Google Sign in — Kotlin / JS",
  "link": "https://proandroiddev.com/google-sign-in-kotlin-js-f87a542e6090?source=rss----c72404660798---4",
  "description": "",
  "author": "Tomislav Mladenov",
  "published": "Mon, 23 Dec 2024 19:10:02 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "compose-multiplatform",
    "kotlin-multiplatform",
    "google-sign-in",
    "kotlin",
    "kotlin-js"
  ],
  "byline": "Tomislav Mladenov",
  "length": 2954,
  "excerpt": "Google Sign in is reliable, popular, and seemingly everywhere. So, when I had to implement it for a Kotlin Multiplatform (KMP) project using JavaScript, I thought, ‘This should be easy!’ Spoiler…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Google Sign in is reliable, popular, and seemingly everywhere. So, when I had to implement it for a Kotlin Multiplatform (KMP) project using JavaScript, I thought, ‘This should be easy!’ Spoiler alert: it wasn’t. I swum through a sea of fragmented documentation, snippets, and half-baked guides, only to find myself piecing together a puzzle that should’ve come with a manual. Since Google Sign-In is a staple of modern apps, I was surprised there wasn’t a straightforward guide. That’s where this post comes in — to save you the time and confusion.There are a few ways to achieve it, but the simplest is using the Firebase-Kotlin-SDK. It’s a well-supported wrapper with Kotlin-first design in mind— what’s not to love? Well, the lack of documentation. If you’re new to this library, I’ll quickly walk you through the setup process. And for those already familiar, feel free to skip ahead to essential part.First things first, you need to have a Firebase project and a Web App configured. If don’t have one yet it’s quick to set up. Navigate to Project Settings, select Web application and you’ll find the `firebaseConfig` object there. You can replace the corresponding values with the firebaseOptions in the library and then initialize it in the entry point (preferably).fun main() { onWasmReady { CanvasBasedWindow(\"App Title\") { initializeFirebase() AppRouter() } }}fun initializeFirebase() { Firebase.initialize( null, options = FirebaseOptions( applicationId = \"your-app-id\", apiKey = \"apiKey\", authDomain = \"authDomain\", projectId = \"projectId\", storageBucket = \"storageBucket\", gcmSenderId = \"gcmSenderId\", gaTrackingId = \"gaTrackingId\" ) )}Something like this is the minimum requirement.Long story short, Firebase offers a way to authenticate with Google for Java Script using signInWithPopup.If you check the library you’ll notice that this function was added to the `externals.auth.kt` This is the place bridging the gap between Kotlin/JS and external JavaScript modules — pretty neat!However, the function was not included in the actual implementation for Firebase.auth in the `auth.kt`. While it’s not exposed for direct usage, this is not a problem we cannot overcome.fun signInWithGoogle(onSuccess: (User) -\u003e Unit, onFailure: (Throwable) -\u003e Unit) { val auth = getAuth() val provider = GoogleAuthProvider() signInWithPopup(auth, provider).then { userCredential -\u003e onSuccess(userCredential.user) }.catch { error -\u003e onFailure(error) }}We can create a function to handle this, and voilà — you’ll be able to call it from anywhere and await the results. For a more robust implementation, consider checking for possible error cases and handling them gracefully.Big shoutout to GitLive for creating and supporting the Firebase-Kotlin-SDK.",
  "image": "https://miro.medium.com/v2/resize:fit:1024/1*FhPDjmYuHQlKDScTW9dbzA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@tomislavmladenov1?source=post_page---byline--f87a542e6090--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Tomislav Mladenov\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*n5P40dLkzYALEwe64K2gdQ.png\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--f87a542e6090--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"17d8\"\u003eGoogle Sign in is reliable, popular, and seemingly everywhere. So, when I had to implement it for a Kotlin Multiplatform (KMP) project using JavaScript, I thought, ‘This should be easy!’ Spoiler alert: it wasn’t. I swum through a sea of fragmented documentation, snippets, and half-baked guides, only to find myself piecing together a puzzle that \u003cstrong\u003eshould’ve\u003c/strong\u003e come with a manual. Since Google Sign-In is a staple of modern apps, I was surprised there wasn’t a straightforward guide. That’s where this post comes in — to save you the time and confusion.\u003c/p\u003e\u003cp id=\"8660\"\u003eThere are a few ways to achieve it, but the simplest is using the \u003ca href=\"https://github.com/GitLiveApp/firebase-kotlin-sdk\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFirebase-Kotlin-SDK\u003c/a\u003e. It’s a well-supported wrapper with Kotlin-first design in mind— what’s not to love? Well, the lack of documentation. If you’re new to this library, I’ll quickly walk you through the setup process. And for those already familiar, feel free to skip ahead to essential part.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"d863\"\u003eFirst things first, you need to have a Firebase project and a Web App configured. If don’t have one yet it’s quick to set up. Navigate to \u003ccode\u003eProject Settings\u003c/code\u003e, select Web application and you’ll find the `\u003cem\u003efirebaseConfig\u003c/em\u003e` object there. You can replace the corresponding values with the \u003ccode\u003efirebaseOptions\u003c/code\u003e in the library and then initialize it in the entry point (preferably).\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"592e\"\u003efun main() {\u003cbr/\u003e  onWasmReady {\u003cbr/\u003e      CanvasBasedWindow(\u0026#34;App Title\u0026#34;) {\u003cbr/\u003e          initializeFirebase()\u003cbr/\u003e          AppRouter()\u003cbr/\u003e      }\u003cbr/\u003e  }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cpre\u003e\u003cspan id=\"62d6\"\u003efun initializeFirebase() {\u003cbr/\u003e    Firebase.initialize(\u003cbr/\u003e            null,\u003cbr/\u003e            options = FirebaseOptions(\u003cbr/\u003e                applicationId = \u0026#34;your-app-id\u0026#34;,\u003cbr/\u003e                apiKey = \u0026#34;apiKey\u0026#34;,\u003cbr/\u003e                authDomain = \u0026#34;authDomain\u0026#34;,\u003cbr/\u003e                projectId = \u0026#34;projectId\u0026#34;,\u003cbr/\u003e                storageBucket = \u0026#34;storageBucket\u0026#34;,\u003cbr/\u003e                gcmSenderId = \u0026#34;gcmSenderId\u0026#34;,\u003cbr/\u003e                gaTrackingId = \u0026#34;gaTrackingId\u0026#34;\u003cbr/\u003e            )\u003cbr/\u003e        )\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"d7bb\"\u003eSomething like this is the minimum requirement.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"e8ca\"\u003eLong story short, \u003ca href=\"https://firebase.google.com/docs/auth/web/google-signin\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eFirebase\u003c/a\u003e offers a way to authenticate with Google for Java Script using \u003cstrong\u003e\u003cem\u003esignInWithPopup.\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"3ed2\"\u003eIf you check the library you’ll notice that this function was added to the `\u003cstrong\u003e\u003cem\u003eexternals.auth.kt\u003c/em\u003e\u003c/strong\u003e` This is the place bridging the gap between Kotlin/JS and external JavaScript modules — pretty neat!\u003c/p\u003e\u003cp id=\"7167\"\u003eHowever, the function was not included in the actual implementation for \u003cstrong\u003e\u003cem\u003eFirebase.auth \u003c/em\u003e\u003c/strong\u003ein the `\u003cstrong\u003e\u003cem\u003eauth.kt\u003c/em\u003e\u003c/strong\u003e`. While it’s not exposed for direct usage, this is not a problem we cannot overcome.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"e8eb\"\u003efun signInWithGoogle(onSuccess: (User) -\u0026gt; Unit, onFailure: (Throwable) -\u0026gt; Unit) {\u003cbr/\u003e    val auth = getAuth()\u003cbr/\u003e    val provider = GoogleAuthProvider()\u003cbr/\u003e     signInWithPopup(auth, provider).then { userCredential -\u0026gt;\u003cbr/\u003e        onSuccess(userCredential.user) \u003cbr/\u003e    }.catch { error -\u0026gt;\u003cbr/\u003e        onFailure(error)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9f06\"\u003eWe can create a function to handle this, and voilà — you’ll be able to call it from anywhere and await the results. For a more robust implementation, consider checking for possible error cases and handling them gracefully.\u003c/p\u003e\u003cp id=\"215a\"\u003eBig shoutout to GitLive for creating and supporting the Firebase-Kotlin-SDK.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-12-16T19:06:44.14Z",
  "modifiedTime": null
}
