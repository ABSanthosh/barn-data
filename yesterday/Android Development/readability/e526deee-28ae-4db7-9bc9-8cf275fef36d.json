{
  "id": "e526deee-28ae-4db7-9bc9-8cf275fef36d",
  "title": "Material 3 Expressive Button Toggles",
  "link": "https://proandroiddev.com/material-3-expressive-button-toggles-c670f8df6053?source=rss----c72404660798---4",
  "description": "",
  "author": "Robert Levonyan",
  "published": "Thu, 22 May 2025 03:01:08 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "material-3-expressive",
    "android-app-development",
    "material-design",
    "androiddev",
    "compose"
  ],
  "byline": "Robert Levonyan",
  "length": 3041,
  "excerpt": "Recently, Google announced the next iteration of its Material Design language - The Material 3 Expressive. As Google explains, they want to bring personality and emotion to otherwise boring app UIsâ€¦",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Expressive Animations for EveryoneRecently, Google announced the next iteration of its Material Design language - The Material 3 Expressive.As Google explains, they want to bring personality and emotion to otherwise boring app UIs, helping users feel more connected to their smartphones â€” which, according to Google, are no longer just simple tools, but extensions of ourselves.Image from Dribbble (https://dribbble.com/shots/22986605-Emotions)With the new version of Material 3 Expressive, Google introduces a new motion-physics system designed to make app UIs feel more alive, fluid, and natural.Image from material.ioAs I explore the capabilities of Material 3 Expressive, one of the first components Iâ€™m implementing is button toggles. With the new expressive motion and visual system, Iâ€™m excited to see how these toggles can feel more dynamic, fluid, and emotionally engaging â€” moving beyond static UI elements to something that truly responds to user interaction.Letâ€™s start!First, Letâ€™s create 3 buttons as in the Googleâ€™s preview, but letâ€™s do it step by step.var selectedIndex by remember { mutableIntStateOf(-1) }val selectedColor = Color(0xFF554F6E)val unselectedColor = Color(0xFFEAE5FF)val icons = listOf(Icons.Outlined.Alarm, Icons.Outlined.LinkOff, Icons.Outlined.Wifi)val iconSize = 60.dpRow(Modifier.padding(horizontal = 8.dp),) { icons.forEachIndexed { index, icon -\u003e FloatingActionButton( modifier = Modifier .padding(4.dp) .width( when (index) { 1 -\u003e iconSize / 1.5f 2 -\u003e iconSize * 1.5f else -\u003e iconSize } ) .height(iconSize), elevation = FloatingActionButtonDefaults.elevation( defaultElevation = 0.dp, pressedElevation = 0.dp ), containerColor = if (selectedIndex == index) { selectedColor } else { unselectedColor }, contentColor = if (selectedIndex == index) { unselectedColor } else { selectedColor }, onClick = { selectedIndex = index }, ) { Icon( imageVector = icon, contentDescription = null, ) } }}This is what weâ€™ll get as a result. Letâ€™s make this match the Googleâ€™s example with changing itâ€™s sizes by just using regular Floating Action Button size.Image from code example aboveWe have all we need now and thereâ€™s only one thing which is missing. Letâ€™s add some animations and make it alive ðŸª„.I have changed the fixed item width with weights, so the UI will have same proportions on all screen sizes.And here is the final result:Image from code example aboveI decided to write all of this myself, so youâ€™re free to use and customize it however you like.If youâ€™d rather not deal with the custom animations manually, you can use ButtonGroup, which already supports all the new animations. However, keep in mind that itâ€™s currently in alpha â€” meaning the API is still unstable and subject to change in future releases â€” and its functionality is still quite limited.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*Nu6xwcaivKEKrS0pjtR-6Q.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"b6e6\" data-testid=\"storyTitle\"\u003eExpressive Animations for Everyone\u003c/h2\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://robertlevonyan.medium.com/?source=post_page---byline--c670f8df6053---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Robert Levonyan\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*BB-2wM2qdMxqZFUYxfg-fw.jpeg\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"325c\"\u003eRecently, Google announced the next iteration of its Material Design language - The Material 3 Expressive.\u003c/p\u003e\u003cp id=\"3c54\"\u003eAs Google explains, they want to bring personality and emotion to otherwise boring app UIs, helping users feel more connected to their smartphones â€” which, according to Google, are no longer just simple tools, but \u003ca href=\"https://m3.material.io/blog/building-with-m3-expressive#what-rsquo-s-material-3-expressive\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eextensions of ourselves\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eImage from Dribbble (\u003ca href=\"https://dribbble.com/shots/22986605-Emotions\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://dribbble.com/shots/22986605-Emotions\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"83bd\"\u003eWith the new version of Material 3 Expressive, Google introduces a new motion-physics system designed to make app UIs feel more alive, fluid, and natural.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eImage from material.io\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"3db4\"\u003eAs I explore the capabilities of Material 3 Expressive, one of the first components Iâ€™m implementing is \u003cstrong\u003ebutton toggles\u003c/strong\u003e. With the new expressive motion and visual system, Iâ€™m excited to see how these toggles can feel more dynamic, fluid, and emotionally engaging â€” moving beyond static UI elements to something that truly responds to user interaction.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"0cc3\"\u003eLetâ€™s start!\u003c/p\u003e\u003cp id=\"fe59\"\u003eFirst, Letâ€™s create 3 buttons as in the Googleâ€™s preview, but letâ€™s do it step by step.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6bec\"\u003evar selectedIndex by remember { mutableIntStateOf(-1) }\u003cbr/\u003eval selectedColor = Color(0xFF554F6E)\u003cbr/\u003eval unselectedColor = Color(0xFFEAE5FF)\u003cbr/\u003eval icons = listOf(Icons.Outlined.Alarm, Icons.Outlined.LinkOff, Icons.Outlined.Wifi)\u003cbr/\u003eval iconSize = 60.dp\u003cp\u003eRow(Modifier.padding(horizontal = 8.dp),) {\u003cbr/\u003e  icons.forEachIndexed { index, icon -\u0026gt;\u003cbr/\u003e    FloatingActionButton(\u003cbr/\u003e      modifier = Modifier\u003cbr/\u003e          .padding(4.dp)\u003cbr/\u003e          .width(\u003cbr/\u003e            when (index) {\u003cbr/\u003e              1 -\u0026gt; iconSize / 1.5f\u003cbr/\u003e              2 -\u0026gt; iconSize * 1.5f\u003cbr/\u003e              else -\u0026gt; iconSize\u003cbr/\u003e            }\u003cbr/\u003e          )\u003cbr/\u003e          .height(iconSize),\u003cbr/\u003e      elevation = FloatingActionButtonDefaults.elevation(\u003cbr/\u003e        defaultElevation = 0.dp,\u003cbr/\u003e        pressedElevation = 0.dp\u003cbr/\u003e       ),\u003cbr/\u003e       containerColor = if (selectedIndex == index) {\u003cbr/\u003e         selectedColor\u003cbr/\u003e       } else {\u003cbr/\u003e         unselectedColor\u003cbr/\u003e       },\u003cbr/\u003e       contentColor = if (selectedIndex == index) {\u003cbr/\u003e         unselectedColor\u003cbr/\u003e       } else {\u003cbr/\u003e         selectedColor\u003cbr/\u003e       },\u003cbr/\u003e       onClick = { selectedIndex = index },\u003cbr/\u003e     ) {\u003cbr/\u003e        Icon(\u003cbr/\u003e          imageVector = icon,\u003cbr/\u003e          contentDescription = null,\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e  }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ea67\"\u003eThis is what weâ€™ll get as a result. Letâ€™s make this match the Googleâ€™s example with changing itâ€™s sizes by just using regular Floating Action Button size.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eImage from code example above\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"4c30\"\u003eWe have all we need now and thereâ€™s only one thing which is missing. Letâ€™s add some animations and make it alive ðŸª„.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"5e76\"\u003eI have changed the fixed item width with weights, so the UI will have same proportions on all screen sizes.\u003c/p\u003e\u003cp id=\"c9d3\"\u003eAnd here is the final result:\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eImage from code example above\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"d94e\"\u003eI decided to write all of this myself, so youâ€™re free to use and customize it however you like.\u003c/p\u003e\u003cp id=\"4b05\"\u003eIf youâ€™d rather not deal with the custom animations manually, you can use \u003cem\u003eButtonGroup\u003c/em\u003e, which already supports all the new animations. However, keep in mind that itâ€™s currently in \u003cstrong\u003ealpha\u003c/strong\u003e â€” meaning the API is still unstable and subject to change in future releases â€” and its functionality is still quite limited.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-05-22T03:01:08.727Z",
  "modifiedTime": null
}
