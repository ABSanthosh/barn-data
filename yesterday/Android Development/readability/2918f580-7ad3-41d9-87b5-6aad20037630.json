{
  "id": "2918f580-7ad3-41d9-87b5-6aad20037630",
  "title": "Automating UI change verification with Android Compose Screenshot Testing â€” Part2",
  "link": "https://proandroiddev.com/automating-ui-change-verification-with-android-compose-screenshot-testing-part2-485784639546?source=rss----c72404660798---4",
  "description": "",
  "author": "Isaac",
  "published": "Sun, 09 Feb 2025 20:49:27 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "androiddev",
    "jetpack-compose",
    "screenshot-testing",
    "android-app-development",
    "android"
  ],
  "byline": "Isaac",
  "length": 8680,
  "excerpt": "In Part 1, we explored how Compose Screenshot Testing works. However, running screenshot tests manually in a local environment can be inefficient and time-consuming, especially for teams handlingâ€¦",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "IntroductionIn Part 1, we explored how Compose Screenshot Testing works. However, running screenshot tests manually in a local environment can be inefficient and time-consuming, especially for teams handling frequent UI changes. Automating this process helps catch visual regressions early without manual effort.In this guide, we will set up GitHub Actions to automatically run screenshot tests when a PR is submitted and display the results as comments. The final output will look similar to the image below, providing clear visibility into UI changes directly within the pull request. Additionally, all code links will be provided at the bottom of the post!Workflow OverviewThe automation follows these steps:A PR is created.GitHub Actions detects the PR and runs validation.If validation fails, images are uploaded to a temporary branch.GitHub Actions posts a comment with markdown-formatted test results, including images.Developers review the changes and merge the PR.Once merged, the temporary branch is deleted.Screenshot expectations are updated based on the main branch.To implement this, we will create three workflow files:screenshot-validate.yml: Runs screenshot validation when a PR is created.screenshot-delete-companion-branch.yml: Deletes temporary branches after merging.screenshot-update.yml: Updates screenshot expectations upon merging into the main branch.1. Validating Screenshots (screenshot-validate.yml)First, we run the screenshot validation process. If the validation fails, an exception is thrown. However, we need to ensure that the GitHub Action does not stop execution, so we use continue-on-error: true.- name: Run screenshot validation run: ./gradlew validateDemoScreenshotTest continue-on-error: trueIf differences are found, the test results are stored in the rendered/ and diffs/ directories. We extract these images into text files (rendered_results.txt and diffs_results.txt) and set a boolean flag to indicate whether changes were detected.- name: Find all screenshot test results id: find_results run: | find . -type f -iname \"*.png\" -path \"*/rendered/*\" \u003e rendered_results.txt find . -type f -iname \"*.png\" -path \"*/diffs/*\" \u003e diffs_results.txt echo \"rendered_results : $(cat rendered_results.txt)\" echo \"diffs_results : $(cat diffs_results.txt)\" if [ -s rendered_results.txt ]; then echo \"results_found=true\" \u003e\u003e $GITHUB_ENV else echo \"results_found=false\" \u003e\u003e $GITHUB_ENV fiIf differences are detected, we create a temporary branch from the PR branch to store the images. This branch is solely used for image uploads and does not affect any other processes. If you have an alternative CDN for image storage, you can use that instead of creating a temporary branch. After the temporary branch is created, the images identified in rendered_results.txt and diffs_results.txt are uploaded to this branch. These uploaded images will later be referenced in the PR comment. - name: Create companion branch and push images if: env.results_found == 'true' run: | BRANCH_NAME=\"companion_${{ github.event.pull_request.head.ref }}\" BRANCH_NAME=$(echo \"$BRANCH_NAME\" | sed 's/[^a-zA-Z0-9_-]/_/g') echo \"Creating branch: $BRANCH_NAME\" git branch -D \"$BRANCH_NAME\" || true git checkout --orphan \"$BRANCH_NAME\" git rm -rf .Next, we generate a markdown-formatted table displaying the test results and images. To do this, we iterate over rendered_results.txt, extract the file names and construct their URLs. The images need to have ?raw=true appended to the URL to be displayed correctly in the PR comment. Once extracted, we format the results into a markdown table. - id: generate-diff-reports name: Generate diff reports if: env.results_found == 'true' run: | delimiter=\"$(openssl rand -hex 8)\" rendered_results=$(cat rendered_results.txt) diffs_results=$(cat diffs_results.txt) rendered_array=($rendered_results) diffs_array=($diffs_results) echo \"diffs_array: ${diffs_array[@]}\" echo \"Generating markdown table for paired results:\" echo \"Rendered results:\" echo \"$rendered_results\" echo \"Diff results:\" echo \"$diffs_results\" { echo \"markdown_table\u003c\u003c${delimiter}\" echo \"| Rendered File | Rendered Image | Diff Image |\" echo \"|---------------|----------------|------------|\" for i in \"${!rendered_array[@]}\"; do rendered_file=\"${rendered_array[$i]}\" diff_file=\"${diffs_array[$i]:-}\" rendered_file_name=$(basename \"$rendered_file\" | sed -r 's/(.{20})/\\\\1\u003cbr\u003e/g') rendered_url_part=\"companion_${{ github.event.pull_request.head.ref }}/${rendered_file//#/%23}\" diff_file_name=\"\" diff_url_part=\"\" if [ -n \"$diff_file\" ]; then diff_file_name=$(basename \"$diff_file\" | sed -r 's/(.{20})/\\\\1\u003cbr\u003e/g') diff_url_part=\"companion_${{ github.event.pull_request.head.ref }}/${diff_file//#/%23}\" fi echo \"| [$rendered_file_name](\u003chttps://github.com/$\u003e{{ github.repository }}/blob/$rendered_url_part) | ![](\u003chttps://github.com/$\u003e{{ github.repository }}/blob/$rendered_url_part?raw=true) | ![](\u003chttps://github.com/$\u003e{{ github.repository }}/blob/$diff_url_part?raw=true) |\" done echo \"${delimiter}\" } \u003e\u003e \"$GITHUB_OUTPUT\" echo \"Markdown table generated successfully.\"Finally, we post the generated table as a comment on the PR. - name: Post comment to Pull Request if: env.results_found == 'true' run: | markdown_table=\"${{ steps.generate-diff-reports.outputs.markdown_table }}\" echo \"Posting the following markdown table as a comment:\" echo \"$markdown_table\" body=\"**Screenshot Test Results**\"$'\\\\n'\"$markdown_table\" curl -X POST \\\\ -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\\ -H \"Content-Type: application/json\" \\\\ -d \"$(jq -n --arg body \"$body\" '{ body: $body }')\" \\\\ ${{ github.event.pull_request.comments_url }}2. Deleting the Temporary Branch (screenshot-delete-companion-branch.yml)Once the PR is merged, we need to delete the temporary branch used for storing uploaded images. However, deleting the branch will also remove the images from the PR comment. If this is an issue, you might consider scheduling periodic deletions instead. Alternatively, using an external CDN instead of a GitHub branch will prevent images from being lost.This workflow requires contents: write permission.permissions: contents: writeExtract the PR branch name and append companion_ to identify the temporary branch. - name: Extract branch name run: | BRANCH_NAME=\"companion_${{ github.event.pull_request.head.ref }}\" BRANCH_NAME=$(echo \"$BRANCH_NAME\" | sed 's/[^a-zA-Z0-9_-]/_/g') echo \"TARGET_BRANCH=$BRANCH_NAME\" \u003e\u003e $GITHUB_ENVDelete the branch if it exists. - name: Delete companion branch run: | if git ls-remote --exit-code --heads origin \"$TARGET_BRANCH\"; then echo \"Deleting branch: $TARGET_BRANCH\" git push origin --delete \"$TARGET_BRANCH\" else echo \"Branch $TARGET_BRANCH does not exist. Skipping deletion.\" fi3. Updating Screenshot Expectations (screenshot-update.yml)Once a PR is merged into the main branch, we need to update the expected screenshot values. This ensures that future PRs have an up-to-date baseline for comparison.This process also requires contents: write permission.permissions: contents: writeWe then update the screenshot references so that future comparisons use the latest approved visuals. - name: Run update screenshot run: ./gradlew updateDemoScreenshotTestFinally, we commit and push the updated screenshots to main, completing the update cycle. - name: Configure git for push run: | git config --global user.name \"github-actions[bot]\" git config --global user.email \"github-actions[bot]@users.noreply.github.com\" git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/WonJoongLee/FridayMovie.git - name: Push screenshot run: | git add . git commit -m \"ðŸ¤– Update Screenshot\" git push origin $(git branch --show-current)",
  "image": "https://miro.medium.com/v2/resize:fit:908/1*zI4N86qCf1pGMU4eA0UW5g.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@.isaac?source=post_page---byline--485784639546--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Isaac\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*qItVpOz7dR4uxuWKNMcO9Q.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--485784639546--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2 id=\"781b\"\u003eIntroduction\u003c/h2\u003e\u003cp id=\"01b7\"\u003e\u003cspan\u003eIn\u003c/span\u003e \u003ca href=\"https://medium.com/@.isaac/ui-change-verification-with-android-compose-screenshot-testing-part-1-172b8b4bc3fe\" rel=\"noopener\"\u003ePart 1\u003c/a\u003e, we explored how Compose Screenshot Testing works. However, running screenshot tests manually in a local environment can be inefficient and time-consuming, especially for teams handling frequent UI changes. Automating this process helps catch visual regressions early without manual effort.\u003c/p\u003e\u003cp id=\"512c\"\u003eIn this guide, we will set up GitHub Actions to automatically run screenshot tests when a PR is submitted and display the results as comments. The final output will look similar to the image below, providing clear visibility into UI changes directly within the pull request. Additionally, all code links will be provided at the bottom of the post!\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"a5c9\"\u003eWorkflow Overview\u003c/h2\u003e\u003cp id=\"e8d8\"\u003eThe automation follows these steps:\u003c/p\u003e\u003col\u003e\u003cli id=\"333a\"\u003eA PR is created.\u003c/li\u003e\u003cli id=\"f162\"\u003eGitHub Actions detects the PR and runs validation.\u003c/li\u003e\u003cli id=\"e04b\"\u003eIf validation fails, images are uploaded to a temporary branch.\u003c/li\u003e\u003cli id=\"d21a\"\u003eGitHub Actions posts a comment with markdown-formatted test results, including images.\u003c/li\u003e\u003cli id=\"bad1\"\u003eDevelopers review the changes and merge the PR.\u003c/li\u003e\u003cli id=\"5bf6\"\u003eOnce merged, the temporary branch is deleted.\u003c/li\u003e\u003cli id=\"8cc7\"\u003eScreenshot expectations are updated based on the main branch.\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"7de9\"\u003eTo implement this, we will create three workflow files:\u003c/p\u003e\u003cul\u003e\u003cli id=\"71cb\"\u003e\u003ccode\u003e\u003cstrong\u003escreenshot-validate.yml\u003c/strong\u003e\u003c/code\u003e: Runs screenshot validation when a PR is created.\u003c/li\u003e\u003cli id=\"339c\"\u003e\u003ccode\u003e\u003cstrong\u003escreenshot-delete-companion-branch.yml\u003c/strong\u003e\u003c/code\u003e: Deletes temporary branches after merging.\u003c/li\u003e\u003cli id=\"c83d\"\u003e\u003ccode\u003e\u003cstrong\u003escreenshot-update.yml\u003c/strong\u003e\u003c/code\u003e: Updates screenshot expectations upon merging into the main branch.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"51a7\"\u003e1. Validating Screenshots (screenshot-validate.yml)\u003c/h2\u003e\u003cp id=\"4098\"\u003eFirst, we run the screenshot validation process. If the validation fails, an exception is thrown. However, we need to ensure that the GitHub Action does not stop execution, so we use \u003ccode\u003econtinue-on-error: true\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1d79\"\u003e- name: Run screenshot validation\u003cbr/\u003e        run: ./gradlew validateDemoScreenshotTest\u003cbr/\u003e        continue-on-error: true\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"f19c\"\u003eIf differences are found, the test results are stored in the \u003ccode\u003erendered/\u003c/code\u003e and \u003ccode\u003ediffs/\u003c/code\u003e directories. We extract these images into text files (\u003ccode\u003erendered_results.txt\u003c/code\u003e and \u003ccode\u003ediffs_results.txt\u003c/code\u003e) and set a boolean flag to indicate whether changes were detected.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1ac7\"\u003e- name: Find all screenshot test results\u003cbr/\u003e        id: find_results\u003cbr/\u003e        run: |\u003cbr/\u003e          find . -type f -iname \u0026#34;*.png\u0026#34; -path \u0026#34;*/rendered/*\u0026#34; \u0026gt; rendered_results.txt\u003cbr/\u003e          find . -type f -iname \u0026#34;*.png\u0026#34; -path \u0026#34;*/diffs/*\u0026#34; \u0026gt; diffs_results.txt\u003cbr/\u003e          echo \u0026#34;rendered_results : $(cat rendered_results.txt)\u0026#34;\u003cbr/\u003e          echo \u0026#34;diffs_results : $(cat diffs_results.txt)\u0026#34;\u003cbr/\u003e          if [ -s rendered_results.txt ]; then\u003cbr/\u003e            echo \u0026#34;results_found=true\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV\u003cbr/\u003e          else\u003cbr/\u003e            echo \u0026#34;results_found=false\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV\u003cbr/\u003e          fi\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"4726\"\u003eIf differences are detected, we create a temporary branch from the PR branch to store the images. This branch is solely used for image uploads and does not affect any other processes. If you have an alternative CDN for image storage, you can use that instead of creating a temporary branch. After the temporary branch is created, the images identified in \u003ccode\u003erendered_results.txt\u003c/code\u003e and \u003ccode\u003ediffs_results.txt\u003c/code\u003e are uploaded to this branch. These uploaded images will later be referenced in the PR comment.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"00b0\"\u003e      - name: Create companion branch and push images\u003cbr/\u003e        if: env.results_found == \u0026#39;true\u0026#39;\u003cbr/\u003e        run: |\u003cbr/\u003e          BRANCH_NAME=\u0026#34;companion_${{ github.event.pull_request.head.ref }}\u0026#34;\u003cbr/\u003e          BRANCH_NAME=$(echo \u0026#34;$BRANCH_NAME\u0026#34; | sed \u0026#39;s/[^a-zA-Z0-9_-]/_/g\u0026#39;)\u003cbr/\u003e          echo \u0026#34;Creating branch: $BRANCH_NAME\u0026#34;\u003cp\u003e                    git branch -D \u0026#34;$BRANCH_NAME\u0026#34; || true\u003cbr/\u003e          git checkout --orphan \u0026#34;$BRANCH_NAME\u0026#34;\u003cbr/\u003e          git rm -rf .\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"7e50\"\u003eNext, we generate a markdown-formatted table displaying the test results and images. To do this, we iterate over \u003ccode\u003erendered_results.txt\u003c/code\u003e, extract the file names and construct their URLs. The images need to have \u003ccode\u003e?raw=true\u003c/code\u003e appended to the URL to be displayed correctly in the PR comment. Once extracted, we format the results into a markdown table.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1a59\"\u003e      - id: generate-diff-reports\u003cbr/\u003e        name: Generate diff reports\u003cbr/\u003e        if: env.results_found == \u0026#39;true\u0026#39;\u003cbr/\u003e        run: |\u003cbr/\u003e          delimiter=\u0026#34;$(openssl rand -hex 8)\u0026#34;\u003cp\u003e                    rendered_results=$(cat rendered_results.txt)\u003cbr/\u003e          diffs_results=$(cat diffs_results.txt)\u003c/p\u003e\u003cp\u003e                    rendered_array=($rendered_results)\u003cbr/\u003e          diffs_array=($diffs_results)\u003cbr/\u003e          echo \u0026#34;diffs_array: ${diffs_array[@]}\u0026#34;\u003c/p\u003e\u003cp\u003e                    echo \u0026#34;Generating markdown table for paired results:\u0026#34;\u003cbr/\u003e          echo \u0026#34;Rendered results:\u0026#34;\u003cbr/\u003e          echo \u0026#34;$rendered_results\u0026#34;\u003cbr/\u003e          echo \u0026#34;Diff results:\u0026#34;\u003cbr/\u003e          echo \u0026#34;$diffs_results\u0026#34;\u003c/p\u003e\u003cp\u003e                    {\u003cbr/\u003e            echo \u0026#34;markdown_table\u0026lt;\u0026lt;${delimiter}\u0026#34;\u003c/p\u003e\u003cp\u003e                      echo \u0026#34;| Rendered File | Rendered Image | Diff Image |\u0026#34;\u003cbr/\u003e            echo \u0026#34;|---------------|----------------|------------|\u0026#34;\u003c/p\u003e\u003cp\u003e                      for i in \u0026#34;${!rendered_array[@]}\u0026#34;; do\u003cbr/\u003e              rendered_file=\u0026#34;${rendered_array[$i]}\u0026#34;\u003cbr/\u003e              diff_file=\u0026#34;${diffs_array[$i]:-}\u0026#34;\u003c/p\u003e\u003cp\u003e                        rendered_file_name=$(basename \u0026#34;$rendered_file\u0026#34; | sed -r \u0026#39;s/(.{20})/\\\\1\u0026lt;br\u0026gt;/g\u0026#39;)\u003cbr/\u003e              rendered_url_part=\u0026#34;companion_${{ github.event.pull_request.head.ref }}/${rendered_file//#/%23}\u0026#34;\u003c/p\u003e\u003cp\u003e                        diff_file_name=\u0026#34;\u0026#34;\u003cbr/\u003e              diff_url_part=\u0026#34;\u0026#34;\u003cbr/\u003e              if [ -n \u0026#34;$diff_file\u0026#34; ]; then\u003cbr/\u003e                diff_file_name=$(basename \u0026#34;$diff_file\u0026#34; | sed -r \u0026#39;s/(.{20})/\\\\1\u0026lt;br\u0026gt;/g\u0026#39;)\u003cbr/\u003e                diff_url_part=\u0026#34;companion_${{ github.event.pull_request.head.ref }}/${diff_file//#/%23}\u0026#34;\u003cbr/\u003e              fi\u003c/p\u003e\u003cp\u003e                        echo \u0026#34;| [$rendered_file_name](\u0026lt;https://github.com/$\u0026gt;{{ github.repository }}/blob/$rendered_url_part) | ![](\u0026lt;https://github.com/$\u0026gt;{{ github.repository }}/blob/$rendered_url_part?raw=true) | ![](\u0026lt;https://github.com/$\u0026gt;{{ github.repository }}/blob/$diff_url_part?raw=true) |\u0026#34;\u003cbr/\u003e            done\u003c/p\u003e\u003cp\u003e                      echo \u0026#34;${delimiter}\u0026#34;\u003cbr/\u003e          } \u0026gt;\u0026gt; \u0026#34;$GITHUB_OUTPUT\u0026#34;\u003cbr/\u003e          echo \u0026#34;Markdown table generated successfully.\u0026#34;\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"41a2\"\u003eFinally, we post the generated table as a comment on the PR.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2a3f\"\u003e      - name: Post comment to Pull Request\u003cbr/\u003e        if: env.results_found == \u0026#39;true\u0026#39;\u003cbr/\u003e        run: |\u003cbr/\u003e          markdown_table=\u0026#34;${{ steps.generate-diff-reports.outputs.markdown_table }}\u0026#34;\u003cbr/\u003e          echo \u0026#34;Posting the following markdown table as a comment:\u0026#34;\u003cbr/\u003e          echo \u0026#34;$markdown_table\u0026#34;\u003cp\u003e                    body=\u0026#34;**Screenshot Test Results**\u0026#34;$\u0026#39;\\\\n\u0026#39;\u0026#34;$markdown_table\u0026#34;\u003cbr/\u003e          curl -X POST \\\\\u003cbr/\u003e            -H \u0026#34;Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\u0026#34; \\\\\u003cbr/\u003e            -H \u0026#34;Content-Type: application/json\u0026#34; \\\\\u003cbr/\u003e            -d \u0026#34;$(jq -n --arg body \u0026#34;$body\u0026#34; \u0026#39;{ body: $body }\u0026#39;)\u0026#34; \\\\\u003cbr/\u003e            ${{ github.event.pull_request.comments_url }}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"29a7\"\u003e2. Deleting the Temporary Branch (screenshot-delete-companion-branch.yml)\u003c/h2\u003e\u003cp id=\"ec79\"\u003eOnce the PR is merged, we need to delete the temporary branch used for storing uploaded images. However, deleting the branch will also remove the images from the PR comment. If this is an issue, you might consider scheduling periodic deletions instead. Alternatively, using an external CDN instead of a GitHub branch will prevent images from being lost.\u003c/p\u003e\u003cp id=\"aebd\"\u003eThis workflow requires \u003ccode\u003econtents: write\u003c/code\u003e permission.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0edf\"\u003epermissions:\u003cbr/\u003e  contents: write\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"cf0d\"\u003eExtract the PR branch name and append \u003ccode\u003ecompanion_\u003c/code\u003e to identify the temporary branch.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2ad4\"\u003e      - name: Extract branch name\u003cbr/\u003e        run: |\u003cbr/\u003e          BRANCH_NAME=\u0026#34;companion_${{ github.event.pull_request.head.ref }}\u0026#34;\u003cbr/\u003e          BRANCH_NAME=$(echo \u0026#34;$BRANCH_NAME\u0026#34; | sed \u0026#39;s/[^a-zA-Z0-9_-]/_/g\u0026#39;)\u003cbr/\u003e          echo \u0026#34;TARGET_BRANCH=$BRANCH_NAME\u0026#34; \u0026gt;\u0026gt; $GITHUB_ENV\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"1dfb\"\u003eDelete the branch if it exists.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3c8b\"\u003e      - name: Delete companion branch\u003cbr/\u003e        run: |\u003cbr/\u003e          if git ls-remote --exit-code --heads origin \u0026#34;$TARGET_BRANCH\u0026#34;; then\u003cbr/\u003e            echo \u0026#34;Deleting branch: $TARGET_BRANCH\u0026#34;\u003cbr/\u003e            git push origin --delete \u0026#34;$TARGET_BRANCH\u0026#34;\u003cbr/\u003e          else\u003cbr/\u003e            echo \u0026#34;Branch $TARGET_BRANCH does not exist. Skipping deletion.\u0026#34;\u003cbr/\u003e          fi\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"c0db\"\u003e3. Updating Screenshot Expectations (screenshot-update.yml)\u003c/h2\u003e\u003cp id=\"b152\"\u003eOnce a PR is merged into the \u003ccode\u003emain\u003c/code\u003e branch, we need to update the expected screenshot values. This ensures that future PRs have an up-to-date baseline for comparison.\u003c/p\u003e\u003cp id=\"0f5b\"\u003eThis process also requires \u003ccode\u003econtents: write\u003c/code\u003e permission.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"abed\"\u003epermissions:\u003cbr/\u003e  contents: write\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"fc8d\"\u003eWe then update the screenshot references so that future comparisons use the latest approved visuals.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"6049\"\u003e      - name: Run update screenshot\u003cbr/\u003e        run: ./gradlew updateDemoScreenshotTest\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"d83a\"\u003eFinally, we commit and push the updated screenshots to \u003ccode\u003emain\u003c/code\u003e, completing the update cycle.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1401\"\u003e      - name: Configure git for push\u003cbr/\u003e        run: |\u003cbr/\u003e          git config --global user.name \u0026#34;github-actions[bot]\u0026#34;\u003cbr/\u003e          git config --global user.email \u0026#34;github-actions[bot]@users.noreply.github.com\u0026#34;\u003cbr/\u003e          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/WonJoongLee/FridayMovie.git\u003cp\u003e      - name: Push screenshot\u003cbr/\u003e        run: |\u003cbr/\u003e          git add .\u003cbr/\u003e          git commit -m \u0026#34;ðŸ¤– Update Screenshot\u0026#34;\u003cbr/\u003e          git push origin $(git branch --show-current)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-02-04T04:53:31.75Z",
  "modifiedTime": null
}
