{
  "id": "f53b9086-7756-4ffb-b2e4-5d441ed957f9",
  "title": "Tooltips in Compose Material 3",
  "link": "https://proandroiddev.com/tooltips-in-compose-material-3-14b49cbaf4dd?source=rss----c72404660798---4",
  "description": "",
  "author": "Domen Lanišnik",
  "published": "Sat, 26 Apr 2025 19:36:32 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android-app-development",
    "kotlin-multiplatform",
    "jetpack-compose",
    "android",
    "androiddev"
  ],
  "byline": "Domen Lanišnik",
  "length": 13819,
  "excerpt": "The Material Design 3 library in Compose provides an out-of-the-box API to display tooltips in apps.",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Tooltips in Compose Material 3The Material Design 3 library in Compose provides an out-of-the-box API for displaying tooltips in apps. We’ll examine how to use it in the stable 1.3.2 version and the latest 1.4.0-alpha version.Note: all of the mentioned composables are currently still in experimental state, meaning that their API could change in the future.Example of a custom rich tooltip.Pre-requisitesBefore we can use the Tooltip API in Compose, we have to add the Compose Material 3 library to our project.If we use Compose BOM, then we are using the latest stable version, which at the time of writing this is 1.3.2. If we want to use the latest alpha version, we have to manually specify the version number, which is 1.4.0-alpha13.The Tooltip API has changed slightly in the 1.4.0-alpha versions, with some additional new features being added. The samples in this article will be based on the 1.3.2 API. However, we will list all the differences in the 1.4.0 version at the end, so you’ll be able to use both.Types of tooltipsThere are two main types of supported tooltips: plain and rich.Plain tooltips usually display a simple text and are used for notifying the user about certain actions or on-screen elements.Simple plain tooltip.Rich tooltips are bigger and able to display more content. They have a dedicated title and description, along with a custom action that can be used to display buttons to trigger some logic.Simple rich tooltip.Both types of tooltips can be displayed either automatically when user long presses on a compontent or manually from the code. They are dismissed either automatically after 1500 milliseconds, or after the user touches any part of the screen, or manually from the code.Tooltips can also have an optional caret, which is the arrow at the bottom of the tooltip pointing to the anchor component.Tooltip APIThe main composable is the TooltipBox, which acts as a wrapper around our composable, above which we want to display the tooltip. It contains logic to calculate the position of the tooltip to place it above the content composable.It accepts the following arguments:positionProvider: PopupPositionProvider: used to place the tooltip relative to the anchor content,tooltip: @Composable TooltipScope.() -\u003e Unit: the composable that will be used to populate the tooltip’s content,state: TooltipState: controls the state of the tooltip’s visibility,modifier: Modifier: standard composable modifier,focusable: Boolean: determines if the tooltip is focusable, affecting accessibility,enableUserInput: Boolean: determines if this TooltipBox will handle long press and mouse hover to trigger the tooltip through the state provider,content: @Composable () -\u003e Unit: the composable that the tooltip will anchor to. Basically, the content we want to show by default, and above which the tooltip will be displayed when triggered.@Composable@ExperimentalMaterial3Apifun TooltipBox( positionProvider: PopupPositionProvider, tooltip: @Composable TooltipScope.() -\u003e Unit, state: TooltipState, modifier: Modifier = Modifier, focusable: Boolean = true, enableUserInput: Boolean = true, content: @Composable () -\u003e Unit,) Plain TooltipWe have a simple button above which we want to display the tooltip. To do that, we wrap our content with TooltipBox:TooltipBox( positionProvider = TooltipDefaults.rememberPlainTooltipPositionProvider(), tooltip = { PlainTooltip { Text(\"This is a simple plain tooltip\") } }, state = rememberTooltipState()) { Button(onClick = {}) { Text(text = \"Show Plain Tooltip on Long Press\") }}We are using TooltipDefaults.rememberPlainTooltipPositionProvider to let the API handle positioning. The tooltip is created by using the PlainTooltip composable.@Composable@ExperimentalMaterial3Apiexpect fun TooltipScope.PlainTooltip( modifier: Modifier = Modifier, caretSize: DpSize = DpSize.Unspecified, shape: Shape = TooltipDefaults.plainTooltipContainerShape, contentColor: Color = TooltipDefaults.plainTooltipContentColor, containerColor: Color = TooltipDefaults.plainTooltipContainerColor, tonalElevation: Dp = 0.dp, shadowElevation: Dp = 0.dp, content: @Composable () -\u003e Unit)We can customize the following elements of the tooltip:caretSize: DpSize: size of the caret (bottom arrow), which is hidden by defaultshape: Shape: shape to apply to the tooltip container, can be used to customize the corners, for examplecontentColor: Color: color of the content (i.e., text) inside the tooltipcontainerColor: Color: color of the tooltip container/backgroundPassing the rememberTooltipState to the TooltipBox means that the tooltip will automatically show up when we long-press on the content. It will also dismiss automatically after a short time.Simple tooltip that displays on a long pressing the button.Rich TooltipWe want to display a tooltip with a title and description when we click on the button. The tooltip should remain displayed until we either click the dismiss button on the tooltip or anywhere outside of the tooltip.Rich tooltip that displays on button click.We are again using the TooltipBox with two changes to support the Rich Tooltip: we’re passing in a TooltipDefaults.rememberRichTooltipPositionProvider for the positionProvider, and using the RichTooltip composable to create a different style of the tooltip.val tooltipState = rememberTooltipState(isPersistent = true)val scope = rememberCoroutineScope()TooltipBox( positionProvider = TooltipDefaults.rememberRichTooltipPositionProvider(8.dp), tooltip = { RichTooltip( caretSize = TooltipDefaults.caretSize, title = { Text(\"Title of the tooltip\") }, action = { TextButton( onClick = { scope.launch { tooltipState.dismiss() } } ) { Text(\"Dismiss\") } } ) { Text(\"This is the main content of the rich tooltip\") } }, state = tooltipState) { Button(onClick = { scope.launch { tooltipState.show() } }) { Text(text = \"Show Rich Tooltip on Click\") }}Since we want the tooltip to show up only when we click the button and remain visible until we click somewhere on the screen, we’re creating and saving an instance of the TooltipState and passing in isPersistent = true.We then use this stored state to call tooltipState.show() to show the tooltip and tooltipState.dismiss() to dismiss it. Note that both are suspending functions, and they need to be called within a coroutine scope.@Composable@ExperimentalMaterial3Apiexpect fun TooltipScope.RichTooltip( modifier: Modifier = Modifier, title: (@Composable () -\u003e Unit)? = null, action: (@Composable () -\u003e Unit)? = null, caretSize: DpSize = DpSize.Unspecified, shape: Shape = TooltipDefaults.richTooltipContainerShape, colors: RichTooltipColors = TooltipDefaults.richTooltipColors(), tonalElevation: Dp = ElevationTokens.Level0, shadowElevation: Dp = RichTooltipTokens.ContainerElevation, text: @Composable () -\u003e Unit)The API of the RichTooltip composable function is similar to the PlainTooltip with the main difference that there are three composable functions that we can pass in:text: @Composable () -\u003e Unit: the mandatory content that represents the main message of the tooltiptitle: (@Composable () -\u003e Unit)?: an optional content for the title of the tooltip, shown above the mandatory messageaction: (@Composable () -\u003e Unit)?: an optional content for an action to display on the tooltip, typically a TextButtonCustomizing the tooltipsBoth types of tooltips offer a lot of customization. Let’s take a look at how we can use the different parameters to customize the tooltip layout.The following snippet will create a plain tooltip with a gray background, custom rounded corners, a larger caret, and custom content with yellow yellow-tinted icon and text.TooltipBox( positionProvider = TooltipDefaults.rememberPlainTooltipPositionProvider(16.dp), tooltip = { PlainTooltip( caretSize = DpSize(32.dp, 16.dp), contentColor = Color.Yellow, containerColor = Color.DarkGray, shadowElevation = 4.dp, tonalElevation = 12.dp, shape = RoundedCornerShape(16.dp) ) { Column( modifier = Modifier .padding(8.dp) .clip( RoundedCornerShape(16.dp) ) .background(Color.Gray) .padding(8.dp) ) { Icon(Icons.Default.AccountCircle, contentDescription = null) Spacer(modifier = Modifier.height(4.dp)) Text(\"This is a simple customized plain tooltip\") Spacer(modifier = Modifier.height(4.dp)) Text(\"This is a second Text in the tooltip\") } } }, state = tooltipState)Here is the result. From this, we can see that it’s possible to highly customize the content and style of the tooltip.Customized plain tooltip.Similarly, we can customize the Rich tooltip. Here is a snippet that creates a tooltip without rounded corners and custom colors.RichTooltip( caretSize = TooltipDefaults.caretSize, colors = TooltipDefaults.richTooltipColors( containerColor = Color.Black.copy(alpha = 0.9f), titleContentColor = Color.Green, contentColor = Color.White, ), shape = RectangleShape, title = { Row { Icon(Icons.Default.CheckCircle, contentDescription = null) Spacer(modifier = Modifier.width(4.dp)) Text(\"Awesome!\") } }, action = { Row { TextButton( onClick = { scope.launch { tooltipState.dismiss() } } ) { Text(\"Dismiss\") } TextButton( onClick = { scope.launch { tooltipState.dismiss() } } ) { Text(\"Next\") } } }) { Text(\"You've successfully opened a rich tooltip! 🎉\")}And this is the result.Customized rich tooltip.API changes in the latest 1.4.0-alpha versionsWhile the code above is based on the stable 1.3.2 version of the Material 3 Compose library, there have been some non-breaking changes to the Tooltip API in the 1.4.0 alpha versions. This includes:rememberPlainTooltipPositionProvider has been deprecated in favor of rememberTooltipPositionProviderrememberRichTooltipPositionProvider has been deprecated in favor of rememberTooltipPositionProviderTooltipBox has a new onDismissRequest: (() -\u003e Unit)? = null callback that is called when the user clicks outside of the tooltipPlainTooltip and RichTooltip have a new maxWidth: Dp parameter that controls how wide the tooltip can be. It defaults to the design spec of 200 dp for plain tooltips and 320 dp for rich tooltips.rememberTooltipState now contains a new constructor parameter initialIsVisible: Boolean that controls the initial visibility of the tooltip. This is useful if you want the tooltip to be shown immediately when the screen is drawn, or displayed for non-interactive elements. The default is false, meaning the tooltip is hidden until requested.val tooltipState = rememberTooltipState(isPersistent = true, initialIsVisible = false)val scope = rememberCoroutineScope()Column(horizontalAlignment = Alignment.CenterHorizontally) { TooltipBox( positionProvider = TooltipDefaults.rememberTooltipPositionProvider(), onDismissRequest = { // This is called when the tooltip is dismissed tooltipState.dismiss() }, tooltip = { PlainTooltip(maxWidth = 100.dp) { Text(\"This is a simple plain tooltip\") } }, state = tooltipState ) { Button(onClick = { scope.launch { tooltipState.show() } }) { Text(text = \"Show Plain Tooltip on Click\") } }}This is an example that uses the new dismiss callback to manually hide the tooltip. It also sets the width of the tooltip to 100.dp, causing it to wrap the text in multiple lines.Plain tooltip with 100.dp max width.You can find the full implementation in the alpha branch of this repository:Showing more than one tooltip at a timeIf we try to display multiple tooltips at once, we’re going to see that it’s not possible. This is because the Tooltip API has a global logic that only a single tooltip can be displayed at a time. The rememberTooltipState() function accepts a mutatorMutex: MutatorMutex parameter used to sync the tooltips. It defaults to BasicTooltipDefaults.GlobalMutatorMutex which is a static instance and therefore the same across all tooltips.If we want to show two (or more) tooltips at once, we have to pass our instance of MutatorMutex to rememberTooltipState().val tooltipState1 = rememberTooltipState(isPersistent = true)val tooltipState2 = rememberTooltipState( isPersistent = true, mutatorMutex = MutatorMutex())We can then call tooltipState1.show() and tooltipState2.show() on a button click for example to display both tooltips at the same time.Showing two tooltips at once.ConclusionThe Material Design 3 library in Compose provides out-of-the-box support for displaying tooltips. The API is easy to use and allows a fair level of customization in terms of the design and behavior.We’ve taken a look at how to use the API and various changes in the latest alpha version of the library. You should now be able to use tooltips in your apps without needing an external library.",
  "image": "https://miro.medium.com/v2/resize:fit:522/1*CVTJ9YTJRoa9nXKTxY74-Q.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"d670\" data-testid=\"storyTitle\"\u003eTooltips in Compose Material 3\u003c/h2\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@domen.lanisnik?source=post_page---byline--14b49cbaf4dd---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Domen Lanišnik\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*CHMrHH5mrrGDp0Vsm-UtKw.png\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"af8d\"\u003eThe Material Design 3 library in Compose provides an out-of-the-box API for displaying tooltips in apps. We’ll examine how to use it in the stable 1.3.2 version and the latest 1.4.0-alpha version.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"a23b\"\u003eNote: all of the mentioned composables are currently still in experimental state, meaning that their API could change in the future.\u003c/p\u003e\u003c/blockquote\u003e\u003cfigure\u003e\u003cfigcaption\u003eExample of a custom rich tooltip.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"de5b\"\u003ePre-requisites\u003c/h2\u003e\u003cp id=\"4f47\"\u003eBefore we can use the Tooltip API in Compose, we have to add the Compose Material 3 library to our project.\u003c/p\u003e\u003cp id=\"7521\"\u003eIf we use \u003ca href=\"https://developer.android.com/develop/ui/compose/bom/bom-mapping\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompose BOM\u003c/a\u003e, then we are using the latest stable version, which at the time of writing this is \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-material3#1.3.2\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e1.3.2\u003c/a\u003e. If we want to use the latest alpha version, we have to manually specify the version number, which is \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose-material3#1.4.0-alpha13\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e1.4.0-alpha13\u003c/a\u003e.\u003c/p\u003e\u003cp id=\"1233\"\u003eThe Tooltip API has changed slightly in the 1.4.0-alpha versions, with some additional new features being added. The samples in this article will be based on the 1.3.2 API. However, we will list all the differences in the 1.4.0 version at the end, so you’ll be able to use both.\u003c/p\u003e\u003ch2 id=\"ee56\"\u003eTypes of tooltips\u003c/h2\u003e\u003cp id=\"0cc1\"\u003eThere are two main types of supported tooltips: plain and rich.\u003c/p\u003e\u003cp id=\"bad0\"\u003ePlain tooltips usually display a simple text and are used for notifying the user about certain actions or on-screen elements.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSimple plain tooltip.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"6b4e\"\u003eRich tooltips are bigger and able to display more content. They have a dedicated title and description, along with a custom action that can be used to display buttons to trigger some logic.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSimple rich tooltip.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"29cf\"\u003eBoth types of tooltips can be displayed either automatically when user long presses on a compontent or manually from the code. They are dismissed either automatically after 1500 milliseconds, or after the user touches any part of the screen, or manually from the code.\u003c/p\u003e\u003cp id=\"f8cf\"\u003eTooltips can also have an optional caret, which is the arrow at the bottom of the tooltip pointing to the anchor component.\u003c/p\u003e\u003ch2 id=\"cff7\"\u003eTooltip API\u003c/h2\u003e\u003cp id=\"f5a9\"\u003eThe main composable is the \u003ccode\u003eTooltipBox\u003c/code\u003e, which acts as a wrapper around our composable, above which we want to display the tooltip. It contains logic to calculate the position of the tooltip to place it above the content composable.\u003c/p\u003e\u003cp id=\"4096\"\u003eIt accepts the following arguments:\u003c/p\u003e\u003cul\u003e\u003cli id=\"590b\"\u003e\u003ccode\u003epositionProvider: PopupPositionProvider\u003c/code\u003e: used to place the tooltip relative to the anchor content,\u003c/li\u003e\u003cli id=\"f2c6\"\u003e\u003ccode\u003etooltip: @Composable TooltipScope.() -\u0026gt; Unit\u003c/code\u003e: the composable that will be used to populate the tooltip’s content,\u003c/li\u003e\u003cli id=\"0ba4\"\u003e\u003ccode\u003estate: TooltipState\u003c/code\u003e: controls the state of the tooltip’s visibility,\u003c/li\u003e\u003cli id=\"5954\"\u003e\u003ccode\u003emodifier: Modifier\u003c/code\u003e: standard composable modifier,\u003c/li\u003e\u003cli id=\"c88f\"\u003e\u003ccode\u003efocusable: Boolean\u003c/code\u003e: determines if the tooltip is focusable, affecting accessibility,\u003c/li\u003e\u003cli id=\"c90a\"\u003e\u003ccode\u003eenableUserInput: Boolean\u003c/code\u003e: determines if this \u003ccode\u003eTooltipBox\u003c/code\u003e will handle long press and mouse hover to trigger the tooltip through the state provider,\u003c/li\u003e\u003cli id=\"5c9b\"\u003e\u003ccode\u003econtent: @Composable () -\u0026gt; Unit\u003c/code\u003e: the composable that the tooltip will anchor to. Basically, the content we want to show by default, and above which the tooltip will be displayed when triggered.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"247a\"\u003e@Composable\u003cbr/\u003e@ExperimentalMaterial3Api\u003cbr/\u003efun TooltipBox(\u003cbr/\u003e    positionProvider: PopupPositionProvider,\u003cbr/\u003e    tooltip: @Composable TooltipScope.() -\u0026gt; Unit,\u003cbr/\u003e    state: TooltipState,\u003cbr/\u003e    modifier: Modifier = Modifier,\u003cbr/\u003e    focusable: Boolean = true,\u003cbr/\u003e    enableUserInput: Boolean = true,\u003cbr/\u003e    content: @Composable () -\u0026gt; Unit,\u003cbr/\u003e) \u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"306e\"\u003ePlain Tooltip\u003c/h2\u003e\u003cp id=\"6385\"\u003eWe have a simple button above which we want to display the tooltip. To do that, we wrap our content with \u003ccode\u003eTooltipBox\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"31a2\"\u003eTooltipBox(\u003cbr/\u003e    positionProvider = TooltipDefaults.rememberPlainTooltipPositionProvider(),\u003cbr/\u003e    tooltip = { PlainTooltip { Text(\u0026#34;This is a simple plain tooltip\u0026#34;) } },\u003cbr/\u003e    state = rememberTooltipState()\u003cbr/\u003e) {\u003cbr/\u003e    Button(onClick = {}) {\u003cbr/\u003e        Text(text = \u0026#34;Show Plain Tooltip on Long Press\u0026#34;)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"194f\"\u003eWe are using \u003ccode\u003eTooltipDefaults.rememberPlainTooltipPositionProvider\u003c/code\u003e to let the API handle positioning. The tooltip is created by using the \u003ccode\u003ePlainTooltip\u003c/code\u003e composable.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"61b6\"\u003e@Composable\u003cbr/\u003e@ExperimentalMaterial3Api\u003cbr/\u003eexpect fun TooltipScope.PlainTooltip(\u003cbr/\u003e    modifier: Modifier = Modifier,\u003cbr/\u003e    caretSize: DpSize = DpSize.Unspecified,\u003cbr/\u003e    shape: Shape = TooltipDefaults.plainTooltipContainerShape,\u003cbr/\u003e    contentColor: Color = TooltipDefaults.plainTooltipContentColor,\u003cbr/\u003e    containerColor: Color = TooltipDefaults.plainTooltipContainerColor,\u003cbr/\u003e    tonalElevation: Dp = 0.dp,\u003cbr/\u003e    shadowElevation: Dp = 0.dp,\u003cbr/\u003e    content: @Composable () -\u0026gt; Unit\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"8023\"\u003eWe can customize the following elements of the tooltip:\u003c/p\u003e\u003cul\u003e\u003cli id=\"726e\"\u003e\u003ccode\u003ecaretSize: DpSize\u003c/code\u003e: size of the caret (bottom arrow), which is hidden by default\u003c/li\u003e\u003cli id=\"91c0\"\u003e\u003ccode\u003eshape: Shape\u003c/code\u003e: shape to apply to the tooltip container, can be used to customize the corners, for example\u003c/li\u003e\u003cli id=\"251a\"\u003e\u003ccode\u003econtentColor: Color\u003c/code\u003e: color of the content (i.e., text) inside the tooltip\u003c/li\u003e\u003cli id=\"1e35\"\u003e\u003ccode\u003econtainerColor: Color\u003c/code\u003e: color of the tooltip container/background\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"df02\"\u003ePassing the \u003ccode\u003erememberTooltipState\u003c/code\u003e to the \u003ccode\u003eTooltipBox\u003c/code\u003e means that the tooltip will automatically show up when we long-press on the content. It will also dismiss automatically after a short time.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eSimple tooltip that displays on a long pressing the button.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"0d1e\"\u003eRich Tooltip\u003c/h2\u003e\u003cp id=\"5187\"\u003eWe want to display a tooltip with a title and description when we click on the button. The tooltip should remain displayed until we either click the dismiss button on the tooltip or anywhere outside of the tooltip.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eRich tooltip that displays on button click.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"c86a\"\u003eWe are again using the \u003ccode\u003eTooltipBox\u003c/code\u003e with two changes to support the Rich Tooltip: we’re passing in a \u003ccode\u003eTooltipDefaults.rememberRichTooltipPositionProvider\u003c/code\u003e for the \u003ccode\u003epositionProvider\u003c/code\u003e, and using the \u003ccode\u003eRichTooltip\u003c/code\u003e composable to create a different style of the tooltip.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9a4a\"\u003eval tooltipState = rememberTooltipState(isPersistent = true)\u003cbr/\u003eval scope = rememberCoroutineScope()\u003cbr/\u003eTooltipBox(\u003cbr/\u003e    positionProvider = TooltipDefaults.rememberRichTooltipPositionProvider(8.dp),\u003cbr/\u003e    tooltip = {\u003cbr/\u003e        RichTooltip(\u003cbr/\u003e            caretSize = TooltipDefaults.caretSize,\u003cbr/\u003e            title = { Text(\u0026#34;Title of the tooltip\u0026#34;) },\u003cbr/\u003e            action = {\u003cbr/\u003e                TextButton(\u003cbr/\u003e                    onClick = { \u003cbr/\u003e                        scope.launch { \u003cbr/\u003e                            tooltipState.dismiss() \u003cbr/\u003e                        } \u003cbr/\u003e                    }\u003cbr/\u003e                ) {\u003cbr/\u003e                    Text(\u0026#34;Dismiss\u0026#34;)\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        ) {\u003cbr/\u003e            Text(\u0026#34;This is the main content of the rich tooltip\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e    },\u003cbr/\u003e    state = tooltipState\u003cbr/\u003e) {\u003cbr/\u003e    Button(onClick = {\u003cbr/\u003e        scope.launch {\u003cbr/\u003e            tooltipState.show()\u003cbr/\u003e        }\u003cbr/\u003e    }) {\u003cbr/\u003e        Text(text = \u0026#34;Show Rich Tooltip on Click\u0026#34;)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5712\"\u003eSince we want the tooltip to show up only when we click the button and remain visible until we click somewhere on the screen, we’re creating and saving an instance of the \u003ccode\u003eTooltipState\u003c/code\u003e and passing in \u003ccode\u003eisPersistent = true\u003c/code\u003e.\u003c/p\u003e\u003cp id=\"a628\"\u003eWe then use this stored state to call \u003ccode\u003etooltipState.show()\u003c/code\u003e to show the tooltip and \u003ccode\u003etooltipState.dismiss()\u003c/code\u003e to dismiss it. Note that both are suspending functions, and they need to be called within a coroutine scope.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a64b\"\u003e@Composable\u003cbr/\u003e@ExperimentalMaterial3Api\u003cbr/\u003eexpect fun TooltipScope.RichTooltip(\u003cbr/\u003e    modifier: Modifier = Modifier,\u003cbr/\u003e    title: (@Composable () -\u0026gt; Unit)? = null,\u003cbr/\u003e    action: (@Composable () -\u0026gt; Unit)? = null,\u003cbr/\u003e    caretSize: DpSize = DpSize.Unspecified,\u003cbr/\u003e    shape: Shape = TooltipDefaults.richTooltipContainerShape,\u003cbr/\u003e    colors: RichTooltipColors = TooltipDefaults.richTooltipColors(),\u003cbr/\u003e    tonalElevation: Dp = ElevationTokens.Level0,\u003cbr/\u003e    shadowElevation: Dp = RichTooltipTokens.ContainerElevation,\u003cbr/\u003e    text: @Composable () -\u0026gt; Unit\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9baa\"\u003eThe API of the \u003ccode\u003eRichTooltip\u003c/code\u003e composable function is similar to the \u003ccode\u003ePlainTooltip\u003c/code\u003e with the main difference that there are three composable functions that we can pass in:\u003c/p\u003e\u003cul\u003e\u003cli id=\"d63d\"\u003e\u003ccode\u003etext: @Composable () -\u0026gt; Unit\u003c/code\u003e: the mandatory content that represents the main message of the tooltip\u003c/li\u003e\u003cli id=\"fe78\"\u003e\u003ccode\u003etitle: (@Composable () -\u0026gt; Unit)?\u003c/code\u003e: an optional content for the title of the tooltip, shown above the mandatory message\u003c/li\u003e\u003cli id=\"6980\"\u003e\u003ccode\u003eaction: (@Composable () -\u0026gt; Unit)?\u003c/code\u003e: an optional content for an action to display on the tooltip, typically a \u003ccode\u003eTextButton\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"65b7\"\u003eCustomizing the tooltips\u003c/h2\u003e\u003cp id=\"e901\"\u003eBoth types of tooltips offer a lot of customization. Let’s take a look at how we can use the different parameters to customize the tooltip layout.\u003c/p\u003e\u003cp id=\"fb15\"\u003eThe following snippet will create a plain tooltip with a gray background, custom rounded corners, a larger caret, and custom content with yellow yellow-tinted icon and text.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"995f\"\u003eTooltipBox(\u003cbr/\u003e    positionProvider = TooltipDefaults.rememberPlainTooltipPositionProvider(16.dp),\u003cbr/\u003e    tooltip = {\u003cbr/\u003e        PlainTooltip(\u003cbr/\u003e            caretSize = DpSize(32.dp, 16.dp),\u003cbr/\u003e            contentColor = Color.Yellow,\u003cbr/\u003e            containerColor = Color.DarkGray,\u003cbr/\u003e            shadowElevation = 4.dp,\u003cbr/\u003e            tonalElevation = 12.dp,\u003cbr/\u003e            shape = RoundedCornerShape(16.dp)\u003cbr/\u003e        ) {\u003cbr/\u003e            Column(\u003cbr/\u003e                modifier = Modifier\u003cbr/\u003e                    .padding(8.dp)\u003cbr/\u003e                    .clip(\u003cbr/\u003e                        RoundedCornerShape(16.dp)\u003cbr/\u003e                    )\u003cbr/\u003e                    .background(Color.Gray)\u003cbr/\u003e                    .padding(8.dp)\u003cbr/\u003e            ) {\u003cbr/\u003e                Icon(Icons.Default.AccountCircle, contentDescription = null)\u003cbr/\u003e                Spacer(modifier = Modifier.height(4.dp))\u003cbr/\u003e                Text(\u0026#34;This is a simple customized plain tooltip\u0026#34;)\u003cbr/\u003e                Spacer(modifier = Modifier.height(4.dp))\u003cbr/\u003e                Text(\u0026#34;This is a second Text in the tooltip\u0026#34;)\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    },\u003cbr/\u003e    state = tooltipState\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"392d\"\u003eHere is the result. From this, we can see that it’s possible to highly customize the content and style of the tooltip.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCustomized plain tooltip.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"3b0d\"\u003eSimilarly, we can customize the Rich tooltip. Here is a snippet that creates a tooltip without rounded corners and custom colors.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9b0f\"\u003eRichTooltip(\u003cbr/\u003e    caretSize = TooltipDefaults.caretSize,\u003cbr/\u003e    colors = TooltipDefaults.richTooltipColors(\u003cbr/\u003e        containerColor = Color.Black.copy(alpha = 0.9f),\u003cbr/\u003e        titleContentColor = Color.Green,\u003cbr/\u003e        contentColor = Color.White,\u003cbr/\u003e    ),\u003cbr/\u003e    shape = RectangleShape,\u003cbr/\u003e    title = {\u003cbr/\u003e        Row {\u003cbr/\u003e            Icon(Icons.Default.CheckCircle, contentDescription = null)\u003cbr/\u003e            Spacer(modifier = Modifier.width(4.dp))\u003cbr/\u003e            Text(\u0026#34;Awesome!\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e            },\u003cbr/\u003e    action = {\u003cbr/\u003e        Row {\u003cbr/\u003e            TextButton(\u003cbr/\u003e                onClick = {\u003cbr/\u003e                    scope.launch {\u003cbr/\u003e                        tooltipState.dismiss()\u003cbr/\u003e                    }\u003cbr/\u003e                }\u003cbr/\u003e            ) {\u003cbr/\u003e                Text(\u0026#34;Dismiss\u0026#34;)\u003cbr/\u003e            }\u003cp\u003e            TextButton(\u003cbr/\u003e                onClick = {\u003cbr/\u003e                    scope.launch {\u003cbr/\u003e                        tooltipState.dismiss()\u003cbr/\u003e                    }\u003cbr/\u003e                }\u003cbr/\u003e            ) {\u003cbr/\u003e                Text(\u0026#34;Next\u0026#34;)\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e) {\u003cbr/\u003e    Text(\u0026#34;You\u0026#39;ve successfully opened a rich tooltip! 🎉\u0026#34;)\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5aec\"\u003eAnd this is the result.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eCustomized rich tooltip.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"da7e\"\u003eAPI changes in the latest 1.4.0-alpha versions\u003c/h2\u003e\u003cp id=\"0579\"\u003eWhile the code above is based on the stable 1.3.2 version of the Material 3 Compose library, there have been some non-breaking changes to the Tooltip API in the 1.4.0 alpha versions. This includes:\u003c/p\u003e\u003cul\u003e\u003cli id=\"2020\"\u003e\u003ccode\u003erememberPlainTooltipPositionProvider\u003c/code\u003e has been deprecated in favor of \u003ccode\u003erememberTooltipPositionProvider\u003c/code\u003e\u003c/li\u003e\u003cli id=\"daed\"\u003e\u003ccode\u003erememberRichTooltipPositionProvider\u003c/code\u003e has been deprecated in favor of \u003ccode\u003erememberTooltipPositionProvider\u003c/code\u003e\u003c/li\u003e\u003cli id=\"1db4\"\u003e\u003ccode\u003eTooltipBox\u003c/code\u003e has a new \u003ccode\u003eonDismissRequest: (() -\u0026gt; Unit)? = null\u003c/code\u003e callback that is called when the user clicks outside of the tooltip\u003c/li\u003e\u003cli id=\"0a64\"\u003e\u003ccode\u003ePlainTooltip\u003c/code\u003e and \u003ccode\u003eRichTooltip\u003c/code\u003e have a new \u003ccode\u003emaxWidth: Dp\u003c/code\u003e parameter that controls how wide the tooltip can be. It defaults to the design spec of 200 dp for plain tooltips and 320 dp for rich tooltips.\u003c/li\u003e\u003cli id=\"4b50\"\u003e\u003ccode\u003erememberTooltipState\u003c/code\u003e now contains a new constructor parameter \u003ccode\u003einitialIsVisible: Boolean\u003c/code\u003e that controls the initial visibility of the tooltip. This is useful if you want the tooltip to be shown immediately when the screen is drawn, or displayed for non-interactive elements. The default is \u003ccode\u003efalse\u003c/code\u003e, meaning the tooltip is hidden until requested.\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"ec11\"\u003eval tooltipState = rememberTooltipState(isPersistent = true, initialIsVisible = false)\u003cbr/\u003eval scope = rememberCoroutineScope()\u003cbr/\u003eColumn(horizontalAlignment = Alignment.CenterHorizontally) {\u003cbr/\u003e    TooltipBox(\u003cbr/\u003e        positionProvider = TooltipDefaults.rememberTooltipPositionProvider(),\u003cbr/\u003e        onDismissRequest = {\u003cbr/\u003e            // This is called when the tooltip is dismissed\u003cbr/\u003e            tooltipState.dismiss()\u003cbr/\u003e        },\u003cbr/\u003e        tooltip = { PlainTooltip(maxWidth = 100.dp) { Text(\u0026#34;This is a simple plain tooltip\u0026#34;) } },\u003cbr/\u003e        state = tooltipState\u003cbr/\u003e    ) {\u003cbr/\u003e        Button(onClick = {\u003cbr/\u003e            scope.launch {\u003cbr/\u003e                tooltipState.show()\u003cbr/\u003e            }\u003cbr/\u003e        }) {\u003cbr/\u003e            Text(text = \u0026#34;Show Plain Tooltip on Click\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"2f22\"\u003eThis is an example that uses the new dismiss callback to manually hide the tooltip. It also sets the width of the tooltip to \u003ccode\u003e100.dp\u003c/code\u003e, causing it to wrap the text in multiple lines.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003ePlain tooltip with 100.dp max width.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"95a4\"\u003eYou can find the full implementation in the \u003ccode\u003ealpha\u003c/code\u003e branch of this repository:\u003c/p\u003e\u003ch2 id=\"15b9\"\u003eShowing more than one tooltip at a time\u003c/h2\u003e\u003cp id=\"c345\"\u003eIf we try to display multiple tooltips at once, we’re going to see that it’s not possible. This is because the Tooltip API has a global logic that only a single tooltip can be displayed at a time. The \u003ccode\u003erememberTooltipState()\u003c/code\u003e function accepts a \u003ccode\u003emutatorMutex: MutatorMutex\u003c/code\u003e parameter used to sync the tooltips. It defaults to \u003ccode\u003eBasicTooltipDefaults.GlobalMutatorMutex\u003c/code\u003e which is a static instance and therefore the same across all tooltips.\u003c/p\u003e\u003cp id=\"793a\"\u003eIf we want to show two (or more) tooltips at once, we have to pass our instance of \u003ccode\u003eMutatorMutex\u003c/code\u003e to \u003ccode\u003erememberTooltipState()\u003c/code\u003e.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c46b\"\u003eval tooltipState1 = rememberTooltipState(isPersistent = true)\u003cbr/\u003eval tooltipState2 = rememberTooltipState(\u003cbr/\u003e    isPersistent = true,\u003cbr/\u003e    mutatorMutex = MutatorMutex()\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"e8b4\"\u003eWe can then call \u003ccode\u003etooltipState1.show()\u003c/code\u003e and \u003ccode\u003etooltipState2.show()\u003c/code\u003e on a button click for example to display both tooltips at the same time.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eShowing two tooltips at once.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"8c88\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"bcb8\"\u003eThe Material Design 3 library in Compose provides out-of-the-box support for displaying tooltips. The API is easy to use and allows a fair level of customization in terms of the design and behavior.\u003c/p\u003e\u003cp id=\"7f17\"\u003eWe’ve taken a look at how to use the API and various changes in the latest alpha version of the library. You should now be able to use tooltips in your apps without needing an external library.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": "2025-04-26T05:39:37.071Z",
  "modifiedTime": null
}
