{
  "id": "d79a8d3f-7572-4090-806c-565e9d765b22",
  "title": "Gradle Footguns: Don't add potentially-empty providers to collection properties",
  "link": "https://www.zacsweers.dev/gradle-footgun-adding-empty-providers-to-collection-properties/",
  "description": "After pairing with Tony Robalik on a recent weird behavior I was seeing in Gradle, we encountered a deliciously evil bug in Gradle. It's documented a little in Gradle 8.7's release notes (see Better API for updating collection properties), but the basic premise is",
  "author": "Zac Sweers",
  "published": "Wed, 11 Sep 2024 17:33:13 GMT",
  "source": "https://www.zacsweers.dev/rss/",
  "categories": [
    "Gradle"
  ],
  "byline": "Zac Sweers",
  "length": 1729,
  "excerpt": "After pairing with Tony Robalik on a recent weird behavior I was seeing in Gradle, we encountered a deliciously evil bug in Gradle. It's documented a little in Gradle 8.7's release notes (see Better API for updating collection properties), but the basic premise is below. abstract class MyTask : DefaultTask() { @get:Input abstract val listProperty: ListProperty\u003cString\u003e } listProperty.add(\"one\") listProperty.add(providers.gradleProperty(\"hi\")) listProperty will be \"empty\" if there is no \"hi",
  "siteName": "Zac Sweers",
  "favicon": "",
  "text": "After pairing with Tony Robalik on a recent weird behavior I was seeing in Gradle, we encountered a deliciously evil bug in Gradle. It's documented a little in Gradle 8.7's release notes (see Better API for updating collection properties), but the basic premise is below.abstract class MyTask : DefaultTask() { @get:Input abstract val listProperty: ListProperty\u003cString\u003e } listProperty.add(\"one\") listProperty.add(providers.gradleProperty(\"hi\"))listProperty will be \"empty\" if there is no \"hi\" Gradle property, clearing the previously added elements.Where this gets worse is that Gradle's docs kinda regularly conflate empty and absent when dealing with collections, so my understanding was that it just cleared the elements. Turns out, it actually clears the value entirely.So - doing this...listProperty .add(\"one\") .add(providers.gradleProperty(\"hi\")) .get()... actually throws a MissingValueException!Even better, it also completely destroys your conventionslistProperty .convention(emptyList()) .add(\"one\") .add(providers.gradleProperty(\"hi\")) .get()... also throws an exception!Finally, if you hide it behind a non-managed-property type like the Kotlin Gradle plugin does in its legacy API, you get something like this later.kotlinOptions.freeCompilerArgs += listOf(\"hi\")This quietly becomes an inert action later if the underlying provider was added to with an absent provider, and the property is rendered unusable unless you call set() on it again with a fresh collection.TL;DR don't add providers to collections without also using orElse()listProperty .convention(emptyList()) .add(\"one\") .add( providers.gradleProperty(\"hi\") .map { listOf(it) } .orElse(emptyList()) ) .get()",
  "image": "https://www.zacsweers.dev/content/images/2024/09/DALL-E-2024-09-11-13.37.53---A-cute-cartoon-elephant-looking-slightly-nervous-as-it-carefully-watches-its-step--lifting-one-foot-cautiously-while-looking-down-at-the-ground.-The-e.webp",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n    \u003cp\u003eAfter pairing with \u003ca href=\"https://mstdn.social/@autonomousapps?ref=zacsweers.dev\"\u003eTony Robalik\u003c/a\u003e on a recent weird behavior I was seeing in Gradle, we encountered a deliciously evil bug in Gradle. It\u0026#39;s documented a little in \u003ca href=\"https://docs.gradle.org/8.7/release-notes.html?ref=zacsweers.dev#build-authoring-improvements\"\u003eGradle 8.7\u0026#39;s release notes\u003c/a\u003e (see \u003cem\u003eBetter API for updating collection properties\u003c/em\u003e), but the basic premise is below.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eabstract class MyTask : DefaultTask() {\n  @get:Input\n  abstract val listProperty: ListProperty\u0026lt;String\u0026gt;\n}\n\nlistProperty.add(\u0026#34;one\u0026#34;)\nlistProperty.add(providers.gradleProperty(\u0026#34;hi\u0026#34;))\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003elistProperty\u003c/code\u003e will be \u0026#34;empty\u0026#34; if there is no \u003ccode\u003e\u0026#34;hi\u0026#34;\u003c/code\u003e Gradle property, \u003cstrong\u003e\u003cem\u003eclearing\u003c/em\u003e\u003c/strong\u003e the previously added elements.Where this gets worse is that Gradle\u0026#39;s docs kinda regularly conflate empty and absent when dealing with collections, so my understanding was that it just cleared the elements. Turns out, it actually \u003cstrong\u003e\u003cem\u003eclears the value entirely\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\u003cp\u003eSo - doing this...\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elistProperty\n  .add(\u0026#34;one\u0026#34;)\n  .add(providers.gradleProperty(\u0026#34;hi\u0026#34;))\n  .get()\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e... actually throws a \u003ccode\u003eMissingValueException\u003c/code\u003e!\u003c/p\u003e\u003cp\u003eEven better, it also completely destroys your conventions\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elistProperty\n  .convention(emptyList())\n  .add(\u0026#34;one\u0026#34;)\n  .add(providers.gradleProperty(\u0026#34;hi\u0026#34;))\n  .get()\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e... also throws an exception!\u003c/p\u003e\u003cp\u003eFinally, if you hide it behind a non-managed-property type like the Kotlin Gradle plugin does in its legacy API, you get something like this later.\u003c/p\u003e\u003cpre\u003e\u003ccode\u003ekotlinOptions.freeCompilerArgs += listOf(\u0026#34;hi\u0026#34;)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis quietly becomes an inert action later if the underlying provider was added to with an absent provider, and the property is rendered unusable unless you call \u003ccode\u003eset()\u003c/code\u003e on it again with a fresh collection.\u003c/p\u003e\u003cp\u003eTL;DR don\u0026#39;t add providers to collections without also using \u003ccode\u003eorElse()\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003elistProperty\n  .convention(emptyList())\n  .add(\u0026#34;one\u0026#34;)\n  .add(\n    providers.gradleProperty(\u0026#34;hi\u0026#34;)\n      .map { listOf(it) }\n      .orElse(emptyList())\n  )\n  .get()\u003c/code\u003e\u003c/pre\u003e\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-09-11T17:33:13Z",
  "modifiedTime": "2024-09-11T17:38:11Z"
}
