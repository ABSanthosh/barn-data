{
  "id": "3a1e64c7-bab1-45a7-a913-1985a9382141",
  "title": "Which Local Database Should You Choose in 2025? Comparing Realm, SQLDelight, and Room.",
  "link": "https://proandroiddev.com/which-local-database-should-you-choose-in-2025-comparing-realm-sqldelight-and-room-4221b354c899?source=rss----c72404660798---4",
  "description": "",
  "author": "Tosin Onikute",
  "published": "Thu, 02 Jan 2025 15:42:52 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "androiddev",
    "database",
    "android-app-development",
    "kotlin-multiplatform",
    "android"
  ],
  "byline": "Tosin Onikute",
  "length": 7759,
  "excerpt": "If you’re starting a Greenfield project, one of the key decisions you’ll face is selecting the right local database. Over the years, these databases have evolved significantly, with new features…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "If you’re starting a Greenfield project, one of the key decisions you’ll face is selecting the right local database. Over the years, these databases have evolved significantly, with new features, improvements and some feature deprecations that could impact your choice.Photo by Oladimeji Ajegbile on Pixels.comIf you’ve worked with databases before, whether on Android/iOS platforms using Kotlin or Swift, or through backend experience with SQL or NoSQL databases, you’ll find this comparison of the latest features insightful. I’ll also share my recommendations to help you choose the best local database for your new project.What is Realm exceptionally known for?Simplicity over complexity, Realm operates directly on the stored data which makes it faster with no intermediate mapping step. Realm handles complexity of concurrency when something changes in the database, the view is easily updated. It’s simple to use because you work with objects directly in your code instead of writing SQL. It’s also fast and supports automatic updates to data.— What has Realm changed over the years?Realm’s db size can reach 4MB which in-turn increases the APK size, so that hasn’t changed over the years.You can reduce the APK size by doing APK Splitting or preferably using app bundles on Google Play to implement the splitting and manage the versioning altogether.Realm Studio remains the only way to browse your db, that hasn’t changed.MongoDB acquired Realm.In Spring 2019, MongoDB acquired Realm to unify platform for backend and mobile app development, MongoDB’s cloud database (MongoDB Atlas)On September 2024, MongoDB deprecated Native Sync-support (Atlas Device Sync — as named by MongoDB) to be removed by September 2025. This feature used to allow automatic syncing of data with other devices. Now developers need to come up with a sync strategy on their own.Realm still supports Kotlin Multiplatform (KMP) till date.Changes to the schema still requires a migration, providing utility methods like addField, removeField, and renameField to simplify schema updates.Pagination still through its RealmResults object, which supports lazy loading and allows you to load subsets of data in chunk using methods like subList() or limit(), you can also implement Android Paging with Realm.Still supports Swift databases (for iOS \u0026 macOS) apps, Flutter \u0026 React Native for Cross Platforms. For those who want to maintain same db across their Android \u0026 iOS teams.What is SQLDelight exceptionally good at?SQLDelight adopts an SQL-first approach, eliminating the traditional limitations of ORMs. A major advantage where precise SQL control is necessary: You want full control over queries for performance tuning. It provides IDE features like autocomplete and refactoring which make writing and maintaining SQL simple.— What has SQLDelight changed over the years?Maintains support for Kotlin Multiplatform (KMP) till date.On July 26, 2023 the release SQLDelight 2.0 was announced, the package name changed, and the IDE plugin improved dramatically. The package name transitioned from com.squareup.sqldelight to app.cash.sqldelightIntroduced Dialect support from 1.3.0 \u0026 above, which is being able to support MySQL \u0026 Postgres syntax \u0026 conventions.According to the announcement, SQLDelight is switching its primary focus to server development but while Android and multiplatform development will continue to receive attention and improvements, there would be no fundamental changes to how SQLDelight functions on mobile platforms.Since SQLDelight databases in Android apps are stored as SQLite databases. You can still access them using ADB or download the data \u0026 browse them using SQLite client like DB Browser for SQLite.Provides extension for Rxjava, Coroutines \u0026 Android Pagination.What is Room exceptionally good at?Room is well-suited where ease of integration with the Android Jetpack ecosystem is essential. Abstracting SQLite \u0026 supports writing SQL queries if needed, providing annotations for defining schemas and managing migrations with minimal effort.Its ability to seamlessly work with LiveData and Flow for reactive programming. Great for apps requiring a well-supported ORM tailored to Android development. Room does compile time validation, validates your whole schema \u0026 queries before you can even run your app. So, you can be sure it is syntactically correct when it compiles.— What has Room changed over the years?Still offers built-in support for migrations. Room automatically validates migrations, but manual intervention may be required for complex schema changes.Room now supports Kotlin Multiplatform (KMP) starting from version 2.7.0-alpha01.Android released Room version 2.7.0-alpha01 on May 1, 2024, which supports Kotlin Multiplatform (KMP)Supports pagination, Room paging library now available for KMP on September 18, 2024 Version 2.7.0-alpha08.Still maintains great native support for Kotlin Coroutines for asynchronous database operations and UI updates.There are other numerous changes to both Realm, SQLDelight \u0026 Room that was not mentioned here, I choose to focus on the major changes.Notable mentions: ObjectBoxObjectBox is a NoSQL Java database designed for local data storage on resource-restricted devices, prioritising offline-first functionality. As written on ObjectBox’s Github page, it outperform SQLite, Room \u0026 Realm across all CRUD operations. Supports Swift Databases (for iOS \u0026 macOS) apps, Go, C++ \u0026 Dart/Flutter.ObjectBox Sync does keeps data in sync between devices and servers, therefore for devs having troubles with deprecated MongoDB Atlas Device sync (Realm native sync), they can migrate to ObjectBox for this feature.ObjectBox currently does not support Kotlin Multiplatform (KMP).PerformanceRealm’s performance has always had an edge from inception as Realm utilizes an object-oriented approach where database entities are modeled as objects. Realm implements a zero-copy architecture which means data is read straight from memory without creating additional object copies. This method delivers faster performance for CRUD operations compared to relational ORM mapping system.Which one easily Integrates with Android Architecture Components?Realm has its own set of APIs and is not tightly integrated with Jetpack components. While SQLDelight is not a part of Jetpack but integrates well with Kotlin and provides a clean API to work with SQL.Room is part of the Android Jetpack suite. It integrates well with LiveData, ViewModel, and other architecture components, making it a good choice for modern Android development.Comparison tableLet’s put together a table outlining the features and key figures to guide you in reaching your final decision.ConclusionGoing by the comparison table, If performance is crucial, and you prefer to avoid SQL queries or complex SQL joins, Realm is an excellent choice. For type safety and Kotlin-first integration with SQL, SQLDelight stands out. If you prefer a traditional SQL-based database with strong Android integration, Room is a reliable option.For recommendations, I personally recommend Room. Google’s active support over the years inspires confidence in its longevity. Room provides the flexibility of SQL while abstracting queries for simplicity. It supports custom SQL queries, allowing developers to leverage existing SQL knowledge.Additionally, it simplifies migration management, which can otherwise be challenging in complex scenarios. Room works seamlessly with Kotlin Coroutines and more importantly, now supports Kotlin Multiplatform (KMP), making it a future-proof choice for cross-platform development.References:MongoDB Atlas Device-sync deprecationRoom version Version 2.7.0-alpha08 releaseSQLDelight 2.0 announcementSQLDelight extensions Android Paging",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*2ZX7X0AUdRwdsp15nIxV7g.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@tosinmath007?source=post_page---byline--4221b354c899--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Tosin Onikute\" src=\"https://miro.medium.com/v2/resize:fill:88:88/2*ItnQrfHifWFRuc9dHLPjYQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--4221b354c899--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"7026\"\u003eIf you’re starting a Greenfield project, one of the key decisions you’ll face is selecting the right local database. Over the years, these databases have evolved significantly, with new features, improvements and some feature deprecations that could impact your choice.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003ePhoto by \u003ca href=\"https://www.pexels.com/@diimejii/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eOladimeji Ajegbile\u003c/a\u003e on \u003ca href=\"https://www.pexels.com/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ePixels.com\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"bda2\"\u003eIf you’ve worked with databases before, whether on Android/iOS platforms using Kotlin or Swift, or through backend experience with SQL or NoSQL databases, you’ll find this comparison of the latest features insightful. I’ll also share my recommendations to help you choose the best local database for your new project.\u003c/p\u003e\u003ch2 id=\"38a7\"\u003eWhat is Realm exceptionally known for?\u003c/h2\u003e\u003cp id=\"a0dc\"\u003eSimplicity over complexity, Realm operates directly on the stored data which makes it faster with no intermediate mapping step. Realm handles complexity of concurrency when something changes in the database, the view is easily updated. It’s simple to use because you work with objects directly in your code instead of writing SQL. It’s also fast and supports automatic updates to data.\u003c/p\u003e\u003ch2 id=\"c871\"\u003e— What has Realm changed over the years?\u003c/h2\u003e\u003cul\u003e\u003cli id=\"68c3\"\u003eRealm’s db size can reach 4MB which in-turn increases the APK size, so that hasn’t changed over the years.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp id=\"6668\"\u003eYou can reduce the APK size by doing APK Splitting or preferably using app bundles on Google Play to implement the splitting and manage the versioning altogether.\u003c/p\u003e\u003c/blockquote\u003e\u003cul\u003e\u003cli id=\"d11e\"\u003eRealm Studio remains the only way to browse your db, that hasn’t changed.\u003c/li\u003e\u003cli id=\"eae8\"\u003eMongoDB acquired Realm.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp id=\"2481\"\u003eIn Spring 2019, \u003ca href=\"https://en.wikipedia.org/wiki/MongoDB\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMongoDB\u003c/a\u003e acquired Realm to unify platform for backend and mobile app development, MongoDB’s cloud database (MongoDB Atlas)\u003c/p\u003e\u003c/blockquote\u003e\u003cul\u003e\u003cli id=\"45ca\"\u003eOn September 2024, MongoDB deprecated Native Sync-support (Atlas Device Sync — as named by MongoDB) to be removed by September 2025. This feature used to allow automatic syncing of data with other devices. Now developers need to come up with a sync strategy on their own.\u003c/li\u003e\u003cli id=\"ef94\"\u003eRealm still supports Kotlin Multiplatform (KMP) till date.\u003c/li\u003e\u003cli id=\"07f2\"\u003eChanges to the schema still requires a migration, providing utility methods like \u003cem\u003eaddField\u003c/em\u003e, \u003cem\u003eremoveField\u003c/em\u003e, and \u003cem\u003erenameField \u003c/em\u003eto simplify schema updates.\u003c/li\u003e\u003cli id=\"fc16\"\u003ePagination still through its \u003cem\u003eRealmResults \u003c/em\u003eobject, which supports lazy loading and allows you to load subsets of data in chunk using methods like \u003cem\u003esubList()\u003c/em\u003e or \u003cem\u003elimit(), \u003c/em\u003eyou can also implement Android Paging with Realm.\u003c/li\u003e\u003cli id=\"9cfb\"\u003eStill supports Swift databases (for iOS \u0026amp; macOS) apps, Flutter \u0026amp; React Native for Cross Platforms. For those who want to maintain same db across their Android \u0026amp; iOS teams.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"098b\"\u003eWhat is SQLDelight exceptionally good at?\u003c/h2\u003e\u003cp id=\"1dde\"\u003eSQLDelight adopts an SQL-first approach, eliminating the traditional limitations of ORMs. A major advantage where \u003cstrong\u003eprecise SQL control\u003c/strong\u003e is necessary: You want full control over queries for performance tuning. It provides IDE features like autocomplete and refactoring which make writing and maintaining SQL simple.\u003c/p\u003e\u003ch2 id=\"a0c4\"\u003e— What has SQLDelight changed over the years?\u003c/h2\u003e\u003cul\u003e\u003cli id=\"cb7a\"\u003eMaintains support for Kotlin Multiplatform (KMP) till date.\u003c/li\u003e\u003cli id=\"4afb\"\u003eOn July 26, 2023 the release SQLDelight 2.0 was announced, the package name changed, and the IDE plugin improved dramatically. The package name transitioned from \u003cem\u003ecom.squareup.sqldelight\u003c/em\u003e to \u003cem\u003eapp.cash.sqldelight\u003c/em\u003e\u003c/li\u003e\u003cli id=\"9cb5\"\u003eIntroduced Dialect support from 1.3.0 \u0026amp; above, which is being able to support MySQL \u0026amp; Postgres syntax \u0026amp; conventions.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp id=\"d329\"\u003eAccording to the announcement, SQLDelight is switching its primary focus to server development but while Android and multiplatform development will continue to receive attention and improvements, there would be no fundamental changes to how SQLDelight functions on mobile platforms.\u003c/p\u003e\u003c/blockquote\u003e\u003cul\u003e\u003cli id=\"8856\"\u003eSince SQLDelight databases in Android apps are stored as SQLite databases. You can still access them using ADB or download the data \u0026amp; browse them using SQLite client like DB Browser for SQLite.\u003c/li\u003e\u003cli id=\"2e2e\"\u003eProvides extension for Rxjava, Coroutines \u0026amp; Android Pagination.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"7d7f\"\u003eWhat is Room exceptionally good at?\u003c/h2\u003e\u003cp id=\"9ecd\"\u003eRoom is well-suited where ease of integration with the Android Jetpack ecosystem is essential. Abstracting SQLite \u0026amp; supports writing SQL queries if needed, providing annotations for defining schemas and managing migrations with minimal effort.\u003c/p\u003e\u003cp id=\"f694\"\u003eIts ability to seamlessly work with LiveData and Flow for reactive programming. Great for apps requiring a well-supported ORM tailored to Android development. Room does compile time validation, validates your whole schema \u0026amp; queries before you can even run your app. So, you can be sure it is syntactically correct when it compiles.\u003c/p\u003e\u003ch2 id=\"4974\"\u003e— What has Room changed over the years?\u003c/h2\u003e\u003cul\u003e\u003cli id=\"56bb\"\u003eStill offers built-in support for migrations. Room automatically validates migrations, but manual intervention may be required for complex schema changes.\u003c/li\u003e\u003cli id=\"0254\"\u003eRoom now supports Kotlin Multiplatform (KMP) starting from version 2.7.0-alpha01.\u003c/li\u003e\u003c/ul\u003e\u003cblockquote\u003e\u003cp id=\"7b45\"\u003eAndroid released Room version 2.7.0-alpha01 on May 1, 2024, which supports Kotlin Multiplatform (KMP)\u003c/p\u003e\u003c/blockquote\u003e\u003cul\u003e\u003cli id=\"5cf6\"\u003eSupports pagination, Room paging library now available for KMP on September 18, 2024 Version 2.7.0-alpha08.\u003c/li\u003e\u003cli id=\"dd92\"\u003eStill maintains great native support for Kotlin Coroutines for asynchronous database operations and UI updates.\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"bf2d\"\u003eThere are other numerous changes to both Realm, SQLDelight \u0026amp; Room that was not mentioned here, I choose to focus on the major changes.\u003c/p\u003e\u003ch2 id=\"e865\"\u003eNotable mentions: ObjectBox\u003c/h2\u003e\u003cp id=\"8b25\"\u003eObjectBox is a NoSQL Java database designed for local data storage on resource-restricted devices, prioritising offline-first functionality. As written on ObjectBox’s Github page, it outperform SQLite, Room \u0026amp; Realm across all CRUD operations. Supports Swift Databases (for iOS \u0026amp; macOS) apps, Go, C++ \u0026amp; Dart/Flutter.\u003c/p\u003e\u003cp id=\"6d4b\"\u003eObjectBox Sync does keeps data in sync between devices and servers, therefore for devs having troubles with deprecated MongoDB Atlas Device sync (Realm native sync), they can migrate to ObjectBox for this feature.\u003c/p\u003e\u003cp id=\"8b8b\"\u003eObjectBox currently does not support Kotlin Multiplatform (KMP).\u003c/p\u003e\u003ch2 id=\"413f\"\u003ePerformance\u003c/h2\u003e\u003cp id=\"e9b4\"\u003eRealm’s performance has always had an edge from inception as Realm utilizes an object-oriented approach where database entities are modeled as objects. Realm implements a zero-copy architecture which means data is read straight from memory without creating additional object copies. This method delivers faster performance for CRUD operations compared to relational ORM mapping system.\u003c/p\u003e\u003ch2 id=\"630d\"\u003eWhich one easily Integrates with Android Architecture Components?\u003c/h2\u003e\u003cp id=\"9444\"\u003e\u003cstrong\u003eRealm \u003c/strong\u003ehas its own set of APIs and is not tightly integrated with Jetpack components. While \u003cstrong\u003eSQLDelight \u003c/strong\u003eis\u003cstrong\u003e \u003c/strong\u003enot a part of Jetpack but integrates well with Kotlin and provides a clean API to work with SQL.\u003c/p\u003e\u003cp id=\"65c2\"\u003e\u003cstrong\u003eRoom \u003c/strong\u003eis\u003cstrong\u003e \u003c/strong\u003epart of the Android Jetpack suite. It integrates well with LiveData, ViewModel, and other architecture components, making it a good choice for modern Android development.\u003c/p\u003e\u003ch2 id=\"8422\"\u003eComparison table\u003c/h2\u003e\u003cp id=\"ed83\"\u003eLet’s put together a table outlining the features and key figures to guide you in reaching your final decision.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"e8b3\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"85b8\"\u003eGoing by the comparison table, If performance is crucial, and you prefer to avoid SQL queries or complex SQL joins, Realm is an excellent choice. For type safety and Kotlin-first integration with SQL, SQLDelight stands out. If you prefer a traditional SQL-based database with strong Android integration, Room is a reliable option.\u003c/p\u003e\u003cp id=\"5428\"\u003e\u003cstrong\u003eFor recommendations\u003c/strong\u003e, I personally recommend Room. Google’s active support over the years inspires confidence in its longevity. Room provides the flexibility of SQL while abstracting queries for simplicity. It supports custom SQL queries, allowing developers to leverage existing SQL knowledge.\u003c/p\u003e\u003cp id=\"e44a\"\u003eAdditionally, it simplifies migration management, which can otherwise be challenging in complex scenarios. Room works seamlessly with Kotlin Coroutines and more importantly, now supports Kotlin Multiplatform (KMP), making it a future-proof choice for cross-platform development.\u003c/p\u003e\u003ch2 id=\"8848\"\u003eReferences:\u003c/h2\u003e\u003cul\u003e\u003cli id=\"4612\"\u003e\u003ca href=\"https://www.mongodb.com/docs/atlas/device-sdks/deprecation/#std-label-device-sdks-deprecation\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMongoDB Atlas Device-sync deprecation\u003c/a\u003e\u003c/li\u003e\u003cli id=\"fe23\"\u003e\u003ca href=\"https://developer.android.com/jetpack/androidx/releases/room#2.7.0-alpha08\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eRoom version Version 2.7.0-alpha08 release\u003c/a\u003e\u003c/li\u003e\u003cli id=\"c2c1\"\u003e\u003ca href=\"https://code.cash.app/sqldelight-2-0\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSQLDelight 2.0 announcement\u003c/a\u003e\u003c/li\u003e\u003cli id=\"6f89\"\u003e\u003ca href=\"https://code.cash.app/sqldelight-2-0\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSQLDelight extensions Android Paging\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "9 min read",
  "publishedTime": "2025-01-02T15:42:51.984Z",
  "modifiedTime": null
}
