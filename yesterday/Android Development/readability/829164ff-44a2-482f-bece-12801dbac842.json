{
  "id": "829164ff-44a2-482f-bece-12801dbac842",
  "title": "Google Maps in Jetpack Compose: Polygons",
  "link": "https://joebirch.co/android/google-maps-in-jetpack-compose-polygons/",
  "description": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this... Continue reading â†’",
  "author": "hitherejoe",
  "published": "Sat, 14 Dec 2024 15:31:16 +0000",
  "source": "https://joebirch.co/feed",
  "categories": [
    "Android",
    "Jetpack Compose"
  ],
  "byline": "by hitherejoe",
  "length": 6423,
  "excerpt": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In th",
  "siteName": "Joe Birch",
  "favicon": "",
  "text": "In a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the Compose mapping package. Now that we have theÂ basics down from aÂ previous post, weâ€™re going to dive into the Polygon composable and learn how we can draw coordinate-based shapes on our map. Looking to learn more Jetpack Compose? The video course forÂ Practical Jetpack ComposeÂ is now available ðŸš€ The Polygon Composable In theÂ previous postÂ we looked at the Polyline composable, which is used to draw lines and indicate contextual information on maps. When it comes to the Polygon composable, we can use this to display information on how areas are connected within a map. The Polygon is a simple composable, taking a list ofÂ LatLngÂ instance and drawing a line to connect the coordinates within a shaped area. Â Itâ€™s important to note the @GoogleMapComposable annotation â€“ we covered in the previous post that the GoogleMap composable only supports children using this annotation. @Composable fun Polygon( points: List\u003cLatLng\u003e, clickable: Boolean = false, fillColor: Color = Color.Black, geodesic: Boolean = false, holes: List\u003cList\u003cLatLng\u003e\u003e = emptyList(), strokeColor: Color = Color.Black, strokeJointType: Int = JointType.DEFAULT, strokePattern: List\u003cPatternItem\u003e? = null, strokeWidth: Float = 10.0f, tag: Any? = null, visible: Boolean = true, zIndex: Float = 0.0f, onClick: (Polygon) -\u003e Unit = {} ) As we can see from this composable, there is a collection of arguments that allow us to customise our Polygon. To start with, there is the requiredÂ pointsÂ argument â€“ this must be provided so that a shape can be drawn around the provided coordinates. To be able to satisfy this argument, letâ€™s start by defining a collection ofÂ LatLngÂ references. val areaCoordinates = listOf( LatLng(53.3811, -1.4701), LatLng(52.5868, -2.5257), LatLng(51.8994, -2.0783), LatLng(51.4551, -0.9787) ) With this in place, we can go ahead and compose a Polygon inside of ourÂ GoogleMapÂ instance. Polygon( points = routeCoordinates ) With this in place, weâ€™ll now be able to see a Polygon displayed on our map. Using the provided coordinates, a shape is being drawn to connect these four different points. By default, theÂ strokeColorÂ argument of the Polygon will default to Black when not provided. For the current theme of our map, this isnâ€™t very visible. To improve things here, weâ€™ll go ahead and override this color. Polygon( points = areaCoordinates, strokeColor = Color.White ) With this in place, we can now see that our line has greater visibility on our map. If we wish to increase this visibility further, we can utilise theÂ strokeWidthÂ argument to increase the width use when drawing the stroke around this shape. In some cases where there is a lot of information or existing drawing details on a map, a thicker line can help to increase the visibility of the shape bounds. Polygon( points = areaCoordinates, strokeColor = Color.White, strokeWidth = 15f ) Alongside this, we also have the ability to create empty spaces within our shape, which allows us to bring focus onto specific areas of the map. For this, the holes argument is used which takes a list of LatLng collections, which will be represented as empty spaces within the shape. For example, we can pass in a reference to our areaCoordinates collection. Polygon( points = areaCoordinates, strokeColor = Color.White, strokeWidth = 15f, holes = listOf(areaCoordinates) ) Here we can see how our shape no appears completely empty other than the stroke used to outline it. In some cases, the default drawing style of the stroke may not match our requirements. When it comes to how this line is represented on our map, we can use theÂ patternÂ argument to define how the line is to be drawn. This is done by providing a list of PatternItemÂ instancesÂ â€“ so for example, we can draw a dashed line by using the following code: Polygon( points = areaCoordinates, strokeColor = Color.White, strokeWidth = 15f, holes = listOf(areaCoordinates), strokePattern = listOf( Dash(15f), Gap(15f) ) ) Now that we have this pattern defined, we can see the pattern being applied when drawing the Polygon on our map. When connecting the bounds of the shape on a map, differently styled lines can help to portray different information such as availability or preference. While we previously had a block of colour to fill our shape, we might want something that is inbetween this empty space and the default black fill. We can use the fillColor argument to provide a color to be used for filling the shape. Polygon( points = areaCoordinates, strokeColor = Color.White, strokeWidth = 15f, fillColor = Color.Black.copy(alpha = 0.5f), ... ) Here, we can now see a focused area on our map â€“ clearly outlined and then filled with a transparent color. This gives us focus on the contents of our shape without creating such visual block within our map. Aside from controlling the visual constraints of our Polygon, we can also listen for click events on the shape â€“ this could be useful in case where we want to show further information for the clicked area. To enable this we need to enable the interaction by using theÂ clickableÂ argument, followed by handling the click interaction via theÂ onClickÂ lambda. Polygon( points = areaCoordinates, clickable = true, onClick = { shape -\u003e } ) In this blog post weâ€™ve taken a quick look at the Polygon composable, a simple composable which is can be used to draw coordinate-based shapes on a map. Weâ€™ve not only learnt how we can style this composable to adhere to the required look/feel of our application, but also how we can enable click events to show further context on the selected line. In the following posts, weâ€™ll continue to look at customising our map further through other composables that are supported through theÂ GoogleMapComposableÂ content scope.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\t\t\t\t\t\t\t\t\t\n\u003cp\u003eIn a few recent projects, Iâ€™ve needed to utilise Google Maps within environments utilising Jetpack Compose. In the early days of Compose this felt light a sought-after piece of functionality â€“ even though it is still being built on, it now seems to be in a place where I can confidently use it. In this series of blog posts, Iâ€™ll share how we can use the different parts of the Compose mapping package.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow that we have theÂ \u003ca rel=\"noreferrer noopener\" href=\"https://joebirch.co/android/google-maps-in-jetpack-compose-getting-started/\" target=\"_blank\"\u003ebasics down from aÂ previous post\u003c/a\u003e, weâ€™re going to dive into the Polygon composable and learn how we can draw coordinate-based shapes on our map.\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eLooking to learn more Jetpack Compose? The video course forÂ \u003ca href=\"https://practicaljetpackcompose.com/\"\u003ePractical Jetpack Compose\u003c/a\u003eÂ is now available ðŸš€\u003c/p\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003ch2\u003eThe Polygon Composable\u003c/h2\u003e\n\n\n\n\u003cp\u003eIn theÂ \u003ca rel=\"noreferrer noopener\" href=\"https://joebirch.co/android/google-maps-in-jetpack-compose-polylines/\" target=\"_blank\"\u003eprevious post\u003c/a\u003eÂ we looked at the Polyline composable, which is used to draw lines and indicate contextual information on maps. When it comes to the Polygon composable, we can use this to display information on how areas are connected within a map. The Polygon is a simple composable, taking a list ofÂ \u003cstrong\u003eLatLng\u003c/strong\u003eÂ instance and drawing a line to connect the coordinates within a shaped area. Â Itâ€™s important to note the @GoogleMapComposable annotation â€“ we covered in the previous post that the GoogleMap composable only supports children using this annotation.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003e@Composable\nfun Polygon(\n    points: List\u0026lt;LatLng\u0026gt;, \n    clickable: Boolean = false, \n    fillColor: Color = Color.Black, \n    geodesic: Boolean = false, \n    holes: List\u0026lt;List\u0026lt;LatLng\u0026gt;\u0026gt; = emptyList(), \n    strokeColor: Color = Color.Black, \n    strokeJointType: Int = JointType.DEFAULT, \n    strokePattern: List\u0026lt;PatternItem\u0026gt;? = null, \n    strokeWidth: Float = 10.0f, \n    tag: Any? = null, \n    visible: Boolean = true, \n    zIndex: Float = 0.0f, \n    onClick: (Polygon) -\u0026gt; Unit = {}\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAs we can see from this composable, there is a collection of arguments that allow us to customise our Polygon. To start with, there is the requiredÂ \u003cstrong\u003epoints\u003c/strong\u003eÂ argument â€“ this must be provided so that a shape can be drawn around the provided coordinates. To be able to satisfy this argument, letâ€™s start by defining a collection ofÂ \u003cstrong\u003eLatLng\u003c/strong\u003eÂ references.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003eval areaCoordinates = listOf(\n    LatLng(53.3811, -1.4701),\n    LatLng(52.5868, -2.5257),\n    LatLng(51.8994, -2.0783),\n    LatLng(51.4551, -0.9787)\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, we can go ahead and compose a Polygon inside of ourÂ \u003cstrong\u003eGoogleMap\u003c/strong\u003eÂ instance.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolygon(\n    points = routeCoordinates\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, weâ€™ll now be able to see a Polygon displayed on our map. Using the provided coordinates, a shape is being drawn to connect these four different points.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" src=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-513x1024.png\" alt=\"\" width=\"385\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-513x1024.png 513w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-150x299.png 150w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-768x1532.png 768w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-770x1536.png 770w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-1027x2048.png 1027w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-500x997.png 500w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-400x798.png 400w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-800x1596.png 800w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110-200x399.png 200w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112110.png 1080w\" sizes=\"(max-width: 385px) 100vw, 385px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eBy default, theÂ \u003cstrong\u003estrokeColor\u003c/strong\u003eÂ argument of the Polygon will default to Black when not provided. For the current theme of our map, this isnâ€™t very visible. To improve things here, weâ€™ll go ahead and override this color.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolygon(\n    points = areaCoordinates,\n    strokeColor = Color.White\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith this in place, we can now see that our line has greater visibility on our map.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-516x1024.png\" alt=\"\" width=\"387\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-516x1024.png 516w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-151x300.png 151w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-768x1523.png 768w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-774x1536.png 774w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-1033x2048.png 1033w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-500x992.png 500w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-150x298.png 150w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-400x793.png 400w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-800x1587.png 800w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251-200x397.png 200w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112251.png 1080w\" sizes=\"(max-width: 387px) 100vw, 387px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eIf we wish to increase this visibility further, we can utilise theÂ \u003cstrong\u003estrokeWidth\u003c/strong\u003eÂ argument to increase the width use when drawing the stroke around this shape. In some cases where there is a lot of information or existing drawing details on a map, a thicker line can help to increase the visibility of the shape bounds.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolygon(\n    points = areaCoordinates,\n    strokeColor = Color.White,\n    strokeWidth = 15f\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-519x1024.png\" alt=\"\" width=\"389\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-519x1024.png 519w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-152x300.png 152w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-768x1516.png 768w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-778x1536.png 778w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-1037x2048.png 1037w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-500x987.png 500w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-150x296.png 150w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-400x790.png 400w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-800x1579.png 800w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308-200x395.png 200w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_112308.png 1080w\" sizes=\"(max-width: 389px) 100vw, 389px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAlongside this, we also have the ability to create empty spaces within our shape, which allows us to bring focus onto specific areas of the map. For this, the \u003cstrong\u003eholes\u003c/strong\u003e argument is used which takes a list of \u003cstrong\u003eLatLng\u003c/strong\u003e collections, which will be represented as empty spaces within the shape. For example, we can pass in a reference to our \u003cstrong\u003eareaCoordinates\u003c/strong\u003e collection.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolygon(\n    points = areaCoordinates,\n    strokeColor = Color.White,\n    strokeWidth = 15f,\n    holes = listOf(areaCoordinates)\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHere we can see how our shape no appears completely empty other than the stroke used to outline it.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234-512x1024.png\" alt=\"\" width=\"384\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234-512x1024.png 512w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234-150x300.png 150w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234-768x1536.png 768w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234-1024x2048.png 1024w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234-500x1000.png 500w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234-400x800.png 400w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234-800x1600.png 800w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234-200x400.png 200w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125234.png 1080w\" sizes=\"(max-width: 384px) 100vw, 384px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eIn some cases, the default drawing style of the stroke may not match our requirements. When it comes to how this line is represented on our map, we can use theÂ \u003cstrong\u003epattern\u003c/strong\u003eÂ argument to define how the line is to be drawn. This is done by providing a list of PatternItemÂ \u003cstrong\u003einstances\u003c/strong\u003eÂ â€“ so for example, we can draw a dashed line by using the following code:\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolygon(\n    points = areaCoordinates,\n    strokeColor = Color.White,\n    strokeWidth = 15f,\n    holes = listOf(areaCoordinates),\n    strokePattern = listOf(\n        Dash(15f),\n        Gap(15f)\n    )\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow that we have this pattern defined, we can see the pattern being applied when drawing the Polygon on our map. When connecting the bounds of the shape on a map, differently styled lines can help to portray different information such as availability or preference.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-512x1024.png\" alt=\"\" width=\"384\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-512x1024.png 512w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-150x300.png 150w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-768x1537.png 768w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-767x1536.png 767w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-1023x2048.png 1023w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-500x1001.png 500w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-400x801.png 400w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-800x1601.png 800w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1-200x400.png 200w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241213_125320-1.png 1080w\" sizes=\"(max-width: 384px) 100vw, 384px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eWhile we previously had a block of colour to fill our shape, we might want something that is inbetween this empty space and the default black fill. We can use the \u003cstrong\u003efillColor\u003c/strong\u003e argument to provide a color to be used for filling the shape.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolygon(\n    points = areaCoordinates,\n    strokeColor = Color.White,\n    strokeWidth = 15f,\n    fillColor = Color.Black.copy(alpha = 0.5f),\n    ...\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHere, we can now see a focused area on our map â€“ clearly outlined and then filled with a transparent color. This gives us focus on the contents of our shape without creating such visual block within our map.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" src=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-528x1024.png\" alt=\"\" width=\"396\" height=\"768\" srcset=\"https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-528x1024.png 528w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-155x300.png 155w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-768x1490.png 768w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-791x1536.png 791w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-1055x2048.png 1055w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-500x970.png 500w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-150x291.png 150w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-400x776.png 400w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-800x1553.png 800w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052-200x388.png 200w, https://joebirch.co/wp-content/uploads/2024/12/Screenshot_20241214_152052.png 1080w\" sizes=\"(max-width: 396px) 100vw, 396px\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAside from controlling the visual constraints of our Polygon, we can also listen for click events on the shape â€“ this could be useful in case where we want to show further information for the clicked area. To enable this we need to enable the interaction by using theÂ \u003cstrong\u003eclickable\u003c/strong\u003eÂ argument, followed by handling the click interaction via theÂ \u003cstrong\u003eonClick\u003c/strong\u003eÂ lambda.\u003c/p\u003e\n\n\n\n\u003cpre\u003e\u003ccode lang=\"kotlin\"\u003ePolygon(\n    points = areaCoordinates,\n    clickable = true,\n    onClick = { shape -\u0026gt;\n                    \n    }\n)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eIn this blog post weâ€™ve taken a quick look at the Polygon composable, a simple composable which is can be used to draw coordinate-based shapes on a map. Weâ€™ve not only learnt how we can style this composable to adhere to the required look/feel of our application, but also how we can enable click events to show further context on the selected line. In the following posts, weâ€™ll continue to look at customising our map further through other composables that are supported through theÂ \u003cstrong\u003eGoogleMapComposable\u003c/strong\u003eÂ content scope.\u003c/p\u003e\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2024-12-14T15:31:16Z",
  "modifiedTime": "2024-12-14T15:31:17Z"
}
