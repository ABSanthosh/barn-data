{
  "id": "5f19890b-29ad-469d-b00b-0e6209e545ff",
  "title": "Building Accessible Android UIs with Jetpack Compose",
  "link": "https://proandroiddev.com/building-accessible-android-uis-with-jetpack-compose-b59438fc6a03?source=rss----c72404660798---4",
  "description": "",
  "author": "Mubarak Basha",
  "published": "Mon, 26 May 2025 08:35:52 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "jetpack-compose",
    "accessibility",
    "android",
    "android-app-development",
    "kotlin"
  ],
  "byline": "Mubarak Basha",
  "length": 4637,
  "excerpt": "More than a billion, or 1 in 6 of us people live with some form of disability. Accessible apps support: Compose brings built-in support for accessibility with testing using various API‚Äôs, like‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "IMG Credit (Mubarak Basha)In this blog, we are going to learn the importance of accessible UI and practical ways to make your app accessible in Compose for users with disabilities, with complete, real code examples. Let‚Äôs Begin.Why Accessibility MattersMore than a billion, or 1 in 6 of us people live with some form of disability. Accessible apps support:Screen reader users (TalkBack)Motor-impaired users (who use switch devices)Color blind and low-vision usersCompose brings built-in support for accessibility with testing using various API‚Äôs, like Semantics, TalkBack, making this faster and seamless.Semantics: Providing Meaning to UI ElementsAccessibility services such as screen readers rely on semantic information to interpret UI components correctly. It is important to provide meaningful descriptions rather than relying solely on visual things.Icon( imageVector = Icons.Default.Home, contentDescription = \"Navigate to home screen\")SettingcontentDescription to `null` to interactive elements (unless they are purely decorative items) leaves assistive technologies without contextual information, impairing the experience of users with disabilities.Note: Most of the Material Compose Components like Checkbox, RadioButton, Switch, Slider, and Surface implement accessibility by default and come with the built-in semantics, but based on our use case, we might want to do it manually. Even for that, compose has a range of useful API‚ÄôsCustom Composables and Accessibility RolesWhen creating custom interactive UI components, explicitly define their semantic roles (UI Meanings) and content descriptions to ensure they are announced properly. Jetpack Compose‚Äôs semantics modifier is key here (see merging and clearing semantics).Box( modifier = Modifier .clickable { /* Handle upload action */ } .semantics { contentDescription = \"Upload file\" role = Role.Button } .padding(16.dp)) { Icon(Icons.Default.CloudUpload, contentDescription = null) Text(\"Upload\")}This approach allows TalkBack and similar tools to identify the composable as a button with the specified action.Adequate Touch Target SizeIMG Credit: (Developer Docs) Touch Target SizeEnsure touch targets meet the recommended minimum size of 48x48dp for comfortable interaction, following Android accessibility design guidelines (Material Accessible Design).Button( onClick = { /* Handle click */ }, modifier = Modifier.sizeIn(minWidth = 48.dp, minHeight = 48.dp)) { Icon(Icons.Default.Favorite, contentDescription = \"Like\")}This improves accessibility for users with motor impairments.Managing Focus with Keyboard and Assistive DevicesNot all users interact via touch. Keyboard navigation and switches require explicit focus order management, which Compose supports via focusRequesterand focusOrder (detailed in the focus traversal order docs).val focusRequester1 = remember { FocusRequester() }val focusRequester2 = remember { FocusRequester() }TextField( value = username, onValueChange = { username = it }, label = { Text(\"Username\") }, modifier = Modifier .focusRequester(focusRequester1) .focusOrder { next = focusRequester2 })TextField( value = password, onValueChange = { password = it }, label = { Text(\"Password\") }, modifier = Modifier.focusRequester(focusRequester2))This code ensures a logical order of focus between inputs.Maintaining Adequate Color ContrastIMG Credit: (Developer Docs) Increase text visibilityUsing your theme‚Äôs color scheme to maintain appropriate contrast ratios in both light and dark modes, as emphasized by Material Design accessibility standards.Text( text = \"Welcome\", style = MaterialTheme.typography.titleLarge, color = MaterialTheme.colorScheme.onBackground)Proper contrast improves readability for users with visual impairments.Testing AccessibilityUse both automated checks and manual tools for testing accessibility:Automated Compose test@get:Ruleval composeTestRule = createComposeRule()@Beforefun setup() { AccessibilityChecks.enable()}Manual testing tools:TalkBack2. Accessibility Scanner3. Switch AccessReferenceCompose Accessibility OverviewMaterial Design: Accessible DesignAccessibility in Jetpack Compose codelabConclusionIn this quick blog, we learned the importance of accessible UI and also learned its practical uses with an example. I hope you will like this article. If so, please likeüëè this story and share it with your friends and family, don‚Äôt forget to follow me. And I will see you in the next upcoming article with an interesting topic.Signing off, Mubarak BashaLinkedIn, GitHub, X",
  "image": "https://miro.medium.com/v2/resize:fit:1100/1*Wd1XPGZni3VojFyKZyoj2A.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003eIMG Credit (Mubarak Basha)\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://mubaraknative.medium.com/?source=post_page---byline--b59438fc6a03---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Mubarak Basha\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*hBJOup7nWy-DG751hQWMig.png\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cblockquote\u003e\u003cp id=\"9e1b\"\u003eIn this blog, we are going to learn the importance of accessible UI and practical ways to make your app accessible in Compose for users with disabilities, with complete, real code examples. Let‚Äôs Begin.\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"13b5\"\u003eWhy Accessibility Matters\u003c/h2\u003e\u003cp id=\"d0be\"\u003eMore than a billion, or 1 in 6 of us\u003cstrong\u003e \u003c/strong\u003epeople live with some form of disability. Accessible apps support:\u003c/p\u003e\u003cul\u003e\u003cli id=\"5c4a\"\u003eScreen reader users (\u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/testing#talkback\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eTalkBack\u003c/a\u003e)\u003c/li\u003e\u003cli id=\"9ca7\"\u003eMotor-impaired users (who use switch devices)\u003c/li\u003e\u003cli id=\"0bff\"\u003eColor blind and low-vision users\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"4598\"\u003eCompose brings built-in support for accessibility with testing using various API‚Äôs, like Semantics, TalkBack, making this faster and seamless.\u003c/p\u003e\u003ch2 id=\"0a44\"\u003eSemantics: Providing Meaning to UI Elements\u003c/h2\u003e\u003cp id=\"e53f\"\u003eAccessibility services such as screen readers rely on \u003ca href=\"https://developer.android.com/develop/ui/compose/accessibility/semantics#properties\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003esemantic information\u003c/a\u003e to interpret UI components correctly. It is important to provide meaningful descriptions rather than relying solely on visual things.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3722\"\u003eIcon(\u003cbr/\u003e    imageVector = Icons.Default.Home,\u003cbr/\u003e    contentDescription = \u0026#34;Navigate to home screen\u0026#34;\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"0b33\"\u003eSetting\u003ccode\u003econtentDescription\u003c/code\u003e to `null` to interactive elements (unless they are purely decorative items) leaves assistive technologies without contextual information, impairing the experience of users with disabilities.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"fe46\"\u003e\u003cstrong\u003e\u003cem\u003eNote:\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e \u003c/em\u003e\u003cstrong\u003e\u003cem\u003eMost of the Material Compose Components like \u003c/em\u003eCheckbox\u003cem\u003e, \u003c/em\u003eRadioButton\u003cem\u003e, \u003c/em\u003eSwitch\u003cem\u003e, \u003c/em\u003eSlider\u003cem\u003e, and \u003c/em\u003eSurface \u003cem\u003eimplement accessibility by default\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e and come with the built-in semantics, but based on our use case, we might want to do it manually. Even for that, compose has a range of useful API‚Äôs\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch2 id=\"eeab\"\u003eCustom Composables and Accessibility Roles\u003c/h2\u003e\u003cp id=\"8f2c\"\u003eWhen creating custom interactive UI components, explicitly define their semantic roles (UI Meanings) and content descriptions to ensure they are announced properly. Jetpack Compose‚Äôs \u003ccode\u003esemantics\u003c/code\u003e modifier is key here (see \u003ca href=\"https://developer.android.com/develop/ui/compose/accessibility/merging-clearing\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003emerging and clearing semantics\u003c/a\u003e).\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1f64\"\u003eBox(\u003cbr/\u003e    modifier = Modifier\u003cbr/\u003e        .clickable { /* Handle upload action */ }\u003cbr/\u003e        .semantics {\u003cbr/\u003e            contentDescription = \u0026#34;Upload file\u0026#34;\u003cbr/\u003e            role = Role.Button\u003cbr/\u003e        }\u003cbr/\u003e        .padding(16.dp)\u003cbr/\u003e) {\u003cbr/\u003e    Icon(Icons.Default.CloudUpload, contentDescription = null)\u003cbr/\u003e    Text(\u0026#34;Upload\u0026#34;)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a361\"\u003eThis approach allows TalkBack and similar tools to identify the composable as a button with the specified action.\u003c/p\u003e\u003ch2 id=\"c023\"\u003eAdequate Touch Target Size\u003c/h2\u003e\u003cfigure\u003e\u003cfigcaption\u003eIMG Credit: (Developer Docs) \u003ca href=\"https://developer.android.com/develop/ui/compose/accessibility/api-defaults#minimum-target-sizes\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eTouch Target Size\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"0767\"\u003eEnsure touch targets meet the recommended minimum size of \u003cstrong\u003e48x48dp\u003c/strong\u003e for comfortable interaction, following Android accessibility design guidelines (\u003ca href=\"https://m3.material.io/foundations/overview/assistive-technology\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMaterial Accessible Design\u003c/a\u003e).\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"fe67\"\u003eButton(\u003cbr/\u003e    onClick = { /* Handle click */ },\u003cbr/\u003e    modifier = Modifier.sizeIn(minWidth = 48.dp, minHeight = 48.dp)\u003cbr/\u003e) {\u003cbr/\u003e    Icon(Icons.Default.Favorite, contentDescription = \u0026#34;Like\u0026#34;)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a0db\"\u003eThis improves accessibility for users with motor impairments.\u003c/p\u003e\u003ch2 id=\"a3f1\"\u003eManaging Focus with Keyboard and Assistive Devices\u003c/h2\u003e\u003cp id=\"3f3d\"\u003eNot all users interact via touch. Keyboard navigation and switches require explicit focus order management, which Compose supports via \u003ccode\u003efocusRequester\u003c/code\u003eand \u003ccode\u003efocusOrder\u003c/code\u003e (detailed in the \u003ca href=\"https://developer.android.com/develop/ui/compose/touch-input/focus/change-focus-traversal-order\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003efocus traversal order docs\u003c/a\u003e).\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9761\"\u003eval focusRequester1 = remember { FocusRequester() }\u003cbr/\u003eval focusRequester2 = remember { FocusRequester() }\u003cp\u003eTextField(\u003cbr/\u003e    value = username,\u003cbr/\u003e    onValueChange = { username = it },\u003cbr/\u003e    label = { Text(\u0026#34;Username\u0026#34;) },\u003cbr/\u003e    modifier = Modifier\u003cbr/\u003e        .focusRequester(focusRequester1)\u003cbr/\u003e        .focusOrder { next = focusRequester2 }\u003cbr/\u003e)\u003c/p\u003e\u003cp\u003eTextField(\u003cbr/\u003e    value = password,\u003cbr/\u003e    onValueChange = { password = it },\u003cbr/\u003e    label = { Text(\u0026#34;Password\u0026#34;) },\u003cbr/\u003e    modifier = Modifier.focusRequester(focusRequester2)\u003cbr/\u003e)\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a40a\"\u003eThis code ensures a logical order of focus between inputs.\u003c/p\u003e\u003ch2 id=\"209b\"\u003eMaintaining Adequate Color Contrast\u003c/h2\u003e\u003cfigure\u003e\u003cfigcaption\u003eIMG Credit: (Developer Docs) \u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/apps#text-visibility\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eIncrease text visibility\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"ff2e\"\u003eUsing your theme‚Äôs color scheme to maintain appropriate contrast ratios in both light and dark modes, as emphasized by \u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/apps#text-visibility\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMaterial Design accessibility standards.\u003c/a\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"95ec\"\u003eText(\u003cbr/\u003e    text = \u0026#34;Welcome\u0026#34;,\u003cbr/\u003e    style = MaterialTheme.typography.titleLarge,\u003cbr/\u003e    color = MaterialTheme.colorScheme.onBackground\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a778\"\u003eProper contrast improves readability for users with visual impairments.\u003c/p\u003e\u003ch2 id=\"7d7b\"\u003eTesting Accessibility\u003c/h2\u003e\u003cp id=\"0de4\"\u003eUse both automated checks and manual tools for testing accessibility:\u003c/p\u003e\u003cul\u003e\u003cli id=\"82d5\"\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/testing\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAutomated Compose test\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e\u003cspan id=\"1931\"\u003e@get:Rule\u003cbr/\u003eval composeTestRule = createComposeRule()\u003cp\u003e@Before\u003cbr/\u003efun setup() {\u003cbr/\u003e    AccessibilityChecks.enable()\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"d4c4\"\u003eManual testing tools:\u003c/li\u003e\u003c/ul\u003e\u003col\u003e\u003cli id=\"9f0d\"\u003eTalkBack\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"299e\"\u003e2. \u003ca href=\"https://support.google.com/accessibility/android/answer/6376570?hl=en\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAccessibility Scanner\u003c/a\u003e\u003c/p\u003e\u003cp id=\"3b84\"\u003e3. \u003ca href=\"https://developer.android.com/guide/topics/ui/accessibility/testing#switch-access\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eSwitch Access\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"19cc\"\u003eReference\u003c/h2\u003e\u003cul\u003e\u003cli id=\"373b\"\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/accessibility\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCompose Accessibility Overview\u003c/a\u003e\u003c/li\u003e\u003cli id=\"fe3f\"\u003e\u003ca href=\"https://m3.material.io/foundations/accessible-design/overview\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMaterial Design: Accessible Design\u003c/a\u003e\u003c/li\u003e\u003cli id=\"6ec9\"\u003e\u003ca href=\"https://developer.android.com/codelabs/jetpack-compose-accessibility\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAccessibility in Jetpack Compose codelab\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"1eb5\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"2771\"\u003eIn this quick blog, we learned the importance of accessible UI and also learned its practical uses with an example\u003cem\u003e.\u003c/em\u003e I hope you will like this article. If so, please likeüëè this story and share it with your friends and family, don‚Äôt forget to follow me. And I will see you in the next upcoming article with an interesting topic.\u003c/p\u003e\u003cp id=\"e870\"\u003eSigning off, \u003ca href=\"https://mubaraknative.github.io\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMubarak Basha\u003c/a\u003e\u003c/p\u003e\u003cp id=\"b2f6\"\u003e\u003ca href=\"https://www.linkedin.com/in/mubaraknative/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eLinkedIn\u003c/a\u003e, \u003ca href=\"https://github.com/MubarakNative/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGitHub\u003c/a\u003e, \u003ca href=\"https://github.com/MubarakNative/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eX\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-05-25T09:57:29.547Z",
  "modifiedTime": null
}
