{
  "id": "1657740a-f68d-4733-bf4c-0f52efc6eabc",
  "title": "Integrating AdMob in Kotlin Multiplatform: A Complete Guide",
  "link": "https://proandroiddev.com/integrating-admob-in-kotlin-multiplatform-a-complete-guide-cc450e6d6c0c?source=rss----c72404660798---4",
  "description": "",
  "author": "Andres Sandoval",
  "published": "Sun, 05 Jan 2025 16:24:44 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "androiddev",
    "admob",
    "kotlin-multiplatform",
    "android-app-development",
    "android"
  ],
  "byline": "Andres Sandoval",
  "length": 10994,
  "excerpt": "Kotlin Multiplatform (KMP) allows developers to share code between iOS and Android platforms while maintaining native performance and user experience. In this guide, we’ll walk through the process of…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "AdMob Ad BannerKotlin Multiplatform (KMP) allows developers to share code between iOS and Android platforms while maintaining native performance and user experience. In this guide, we’ll walk through the process of integrating Google AdMob Ads into a KMP project, covering both iOS and Android implementations.PrerequisitesBefore we begin, make sure you have:A Kotlin Multiplatform project set upAn AdMob account with ad unit IDs for both platformsBasic knowledge of iOS Xcode (requires an Apple Mac computer) and Android Studio developmentProject StructureWe’ll start by creating a shared AdMob banner component that can be used across both platforms. Here’s the basic structure:Create a new file AdMobBanner.kt and add the below code.// common/AdMobBanner.kt@Composableexpect fun AdMobBanner(modifier: Modifier = Modifier)Now Android Studio is going to give you an error AdMobBanner , right click on the error icon and select “Add missing Actual Declaration”. Android Studio automatically generates the classes for iOS AdMobBanner.ios.kt and for Android AdMobBanner.android.kt. Below we will add code to the new files.iOS ImplementationCreate an AdMob account https://developers.google.com/admob/android/quick-start1. Setting up CocoaPodsFirst, install CocoaPods if you haven’t already:sudo gem install cocoapodsInside the Android Studio terminal, enter the following commands. The command creates a Pods directory “iosApp/Pods/Podfile” in your iOS project.cd iOSApppod initAndroid Studio terminal from my laptopImport the Mobile Ads SDKThe simplest way to import the SDK into an iOS project is to use CocoaPods. Open your project’s Pods/Podfile and add this line to your app’s target.pod 'Google-Mobile-Ads-SDK'Also add below to Podfiletarget 'iosApp' do use_frameworks! pod 'Google-Mobile-Ads-SDK'endpost_install do |installer| installer.pods_project.targets.each do |target| target.build_configurations.each do |config| config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0' config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64' end endendInstall the dependencies:pod install --repo-updateAdd the AdMob library framework to you iOS project.Option 1: Use the cocoapods IntelliJ Plugin org.jetbrains.kotlin.native.cocoapods[read blog post]Option 2: Open the file iosApp.xcworkspace (right click open with Xcode). Go to iosApp -\u003e Build Settings -\u003e Link Binary with Libraries -\u003e click add button ‘+’ -\u003e search for GoogleMobileAds.xcframework.XCode from my laptop2. iOS Banner ImplementationCreate the iOS-specific implementation: codeNow let’s add code the file created AdMobBanner.ios.kt// iosMain/AdMobBanner.ios.ktimport androidx.compose.foundation.layout.defaultMinSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.unit.dpimport androidx.compose.ui.viewinterop.UIKitInteropPropertiesimport androidx.compose.ui.viewinterop.UIKitView@Composableactual fun AdMobBanner(modifier: Modifier) { UIKitView( factory = { generateIOSBanner().view }, modifier = modifier .fillMaxWidth() .defaultMinSize(minHeight = 50.dp) .height(50.dp), update = { }, properties = UIKitInteropProperties( isInteractive = true, isNativeAccessibilityEnabled = true ) )}3. Configure iOS AppAdd the necessary Swift files:Create a new file AppDelegate.swift and add the code below// iosApp/AppDelegate.swiftimport Foundationimport SwiftUIimport GoogleMobileAdsclass AppDelegate: UIResponder, UIApplicationDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u003e Bool { // initialize AdMob iOS Ads SDK GADMobileAds.sharedInstance().start(completionHandler: nil) return true }}Create the file BannerAdView.swift and add the code below// iosApp/BannerAdView.swiftimport Foundationimport SwiftUIimport GoogleMobileAdsimport UIKitimport SwiftUIstruct BannerAdView: UIViewRepresentable { func makeUIView(context: Context) -\u003e GADBannerView { let bannerView = GADBannerView() bannerView.adUnitID = \"ca-app-pub-3940256099942544/2435281174\" // Replace with your ad unit ID if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene, let rootViewController = windowScene.windows.first?.rootViewController { bannerView.rootViewController = rootViewController } let request = GADRequest() bannerView.load(request) return bannerView } func updateUIView(_ uiView: GADBannerView, context: Context) {}}Update ContentView.swift file// iosApp/ComposeView.swiftimport UIKitimport SwiftUIimport ComposeAppimport GoogleMobileAdsstruct ComposeView: UIViewControllerRepresentable { init() { MainViewControllerKt.IOSBanner = { let adBannerView = VStack { BannerAdView() } return UIHostingController(rootView: adBannerView) } } func makeUIViewController(context: Context) -\u003e UIViewController { MainViewControllerKt.MainViewController() } func updateUIViewController(_ uiViewController: UIViewController, context: Context) {}}struct ContentView: View { var body: some View { ComposeView() .ignoresSafeArea(.keyboard) // Compose has own keyboard handler }}Update iOSApp.swift file// iosApp/iOSApp.swiftimport SwiftUI@mainstruct iOSApp: App { @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate var body: some Scene { WindowGroup { ContentView() } }}3. Update MainViewControllerUpdate the file MainViewController.kt in your iOS main source set:// iosMain/MainViewController.ktimport androidx.compose.ui.window.ComposeUIViewControllerimport platform.UIKit.UIViewControllerlateinit var IOSBanner: () -\u003e UIViewControllerfun generateIOSBanner(): UIViewController { return IOSBanner()}fun MainViewController() = ComposeUIViewController( configure = { enforceStrictPlistSanityCheck = false }) { App()}4. Update Info.plistAdd the required AdMob configuration the AdMob app id and the SKAdNetworkIdentifier.Update the file Info.plist using Xcode or Android Studio.Xcode: Open the file iosApp.xcworkspace (right click open with Xcode) -\u003e Info.plist.XCode from my laptopAndroid Studio: Open the file Info.plistXCode from my laptopAdd GADApplicationIdentifier key with a string value of your AdMob app ID found in the AdMob UI. Using test admob app id.\u003ckey\u003eGADApplicationIdentifier\u003c/key\u003e \u003cstring\u003eca-app-pub-3940256099942544~1458002511\u003c/string\u003eAdd SKAdNetworkItems key with SKAdNetworkIdentifier values for Google (cstr6suwn9.skadnetwork) and select third-party buyers who have provided these values to Google. Complete list of third-party buyers: skadnetwork\u003carray\u003e \u003cdict\u003e \u003ckey\u003eSKAdNetworkIdentifier\u003c/key\u003e \u003cstring\u003ecstr6suwn9.skadnetwork\u003c/string\u003e \u003c/dict\u003e \u003c!-- Add other SKAdNetwork identifiers as needed --\u003e\u003c/array\u003eAndroid ImplementationCreate an AdMob account https://developers.google.com/admob/android/quick-start1. Add Gradle DependenciesFirst, add the Google AdMob dependency to your Android app’s build.gradle file:sourceSets { androidMain.dependencies { implementation(\"com.google.android.gms:play-services-ads:23.6.0\") }}2. Android Banner ImplementationCreate the Android-specific implementation: codeNow let’s add code the file created AdMobBanner.android.kt// androidMain/AdMobBanner.android.ktimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.runtime.Composableimport androidx.compose.ui.Modifierimport androidx.compose.ui.viewinterop.AndroidViewimport com.google.android.gms.ads.AdRequestimport com.google.android.gms.ads.AdSizeimport com.google.android.gms.ads.AdView@Composableactual fun AdMobBanner(modifier: Modifier) { AndroidView( modifier = modifier.fillMaxWidth(), factory = { context -\u003e AdView(context).apply { setAdSize(AdSize.FULL_BANNER) adUnitId = \"ca-app-pub-3940256099942544/9214589741\" // Replace with your ad unit ID loadAd(AdRequest.Builder().build()) } } )}2. Update MainActivityInitialize AdMob in your MainActivity:class MainActivity : ComponentActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) MobileAds.initialize(this) // initialize AdMob Android Ads SDK setContent { App() } }}3. Update Android ManifestInside the file AndroidManifext.xml add necessary permissions and metadata:\u003cuses-permission android:name=\"android.permission.INTERNET\" /\u003e\u003cuses-permission android:name=\"com.google.android.gms.permission.AD_ID\"/\u003e\u003capplication\u003e \u003cmeta-data android:name=\"com.google.android.gms.ads.APPLICATION_ID\" android:value=\"ca-app-pub-3940256099942544~3347511713\"/\u003e\u003c/application\u003eBest Practices and TipsTest Ads: Always use test ad unit IDs during development to avoid violating AdMob policies.Error Handling: Implement proper error handling for ad loading failures.Responsive Design: Ensure your banner ads adapt well to different screen sizes.Privacy: Follow platform-specific privacy guidelines and implement necessary consent mechanisms.Common Issues and SolutionsiOS Simulator Issues: If ads don’t show in the iOS simulator, ensure you’ve properly configured the excluded architectures in your PodfileiOS Pods errors://Remove the framework from your projectpod deintegrate //if using CocoaPodspod install //to reinstall dependenciesAndroid Manifest Conflicts: Make sure your application ID matches the one registered in AdMobLayout Problems: Use appropriate modifiers to handle ad container sizing and positioningConclusionIntegrating Google AdMob ads into a Kotlin Multiplatform project requires platform-specific implementations but allows for a shared interface in your common code. This approach maintains the benefits of code sharing while leveraging platform-specific ad implementations for optimal performance and user experience.Remember to replace the test ad unit IDs with your actual AdMob ad unit IDs before releasing your app to production.Thank you for readingHope you learn something new. 🙌🙏✌Don’t forget to clap 👏 50 times to support me and follow me for more such useful articles about Android Development, Gemini AI, Kotlin \u0026 KMP.If you need any help related to Android, Kotlin and KMP. I’m always happy to help you.If you enjoyed this, please follow me on MediumBuy me a coffeeFollow me on:Medium, LinkedIn, GitHub, Google developerThank you for taking the time to read this. I welcome your feedback on how I can improve or if you have any questions.— Andres 🙌🏻Android appiOS App",
  "image": "https://miro.medium.com/v2/resize:fit:868/1*usd_KtsQ00DF73raSouFtw.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://andresand.medium.com/?source=post_page---byline--cc450e6d6c0c--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Andres Sandoval\" src=\"https://miro.medium.com/v2/resize:fill:88:88/2*DZkrhk5v_W0SCPN2XKbtSw.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--cc450e6d6c0c--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eAdMob Ad Banner\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"e065\"\u003e\u003ca href=\"https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-samples.html\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKotlin Multiplatform (KMP)\u003c/a\u003e allows developers to share code between iOS and Android platforms while maintaining native performance and user experience. In this guide, we’ll walk through the process of integrating Google AdMob Ads into a KMP project, covering both iOS and Android implementations.\u003c/p\u003e\u003ch2 id=\"e7b6\"\u003ePrerequisites\u003c/h2\u003e\u003cp id=\"ae64\"\u003eBefore we begin, make sure you have:\u003c/p\u003e\u003cul\u003e\u003cli id=\"e32d\"\u003eA \u003ca href=\"https://kmp.jetbrains.com/?_gl=1*1eie3j8*_gcl_au*MjAyNDU3NDI1MS4xNzMzOTczNzI5*FPAU*MjAyNDU3NDI1MS4xNzMzOTczNzI5*_ga*MTgxNzgwNjAwNi4xNzIzNTg4NDE1*_ga_9J976DJZ68*MTczNjExODAzOS4xNy4xLjE3MzYxMTgwNTguNDEuMC4w\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eKotlin Multiplatform\u003c/a\u003e project set up\u003c/li\u003e\u003cli id=\"ea9f\"\u003eAn \u003ca href=\"https://developers.google.com/admob\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAdMob\u003c/a\u003e account with ad unit IDs for both platforms\u003c/li\u003e\u003cli id=\"c5f4\"\u003eBasic knowledge of iOS \u003ca href=\"https://developer.apple.com/xcode/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eXcode\u003c/a\u003e (requires an Apple Mac computer) and \u003ca href=\"https://developer.android.com/studio\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid Studio\u003c/a\u003e development\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"77da\"\u003eProject Structure\u003c/h2\u003e\u003cp id=\"2d8e\"\u003eWe’ll start by creating a shared AdMob banner component that can be used across both platforms. Here’s the basic structure:\u003c/p\u003e\u003cp id=\"f6d8\"\u003eCreate a new file AdMobBanner.kt and add the below code.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"882e\"\u003e// common/AdMobBanner.kt\u003cbr/\u003e@Composable\u003cbr/\u003eexpect fun AdMobBanner(modifier: Modifier = Modifier)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"54c9\"\u003eNow Android Studio is going to give you an error \u003ccode\u003eAdMobBanner\u003c/code\u003e , right click on the error icon and select “Add missing Actual Declaration”. Android Studio automatically generates the classes for iOS \u003ccode\u003eAdMobBanner.ios.kt\u003c/code\u003e and for Android \u003ccode\u003eAdMobBanner.android.kt\u003c/code\u003e. Below we will add code to the new files.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"bc2c\"\u003eiOS Implementation\u003c/h2\u003e\u003cp id=\"7d12\"\u003eCreate an AdMob account \u003ca href=\"https://developers.google.com/admob/ios/quick-start\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://developers.google.com/admob/android/quick-start\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"a67e\"\u003e1. Setting up CocoaPods\u003c/h2\u003e\u003cp id=\"e280\"\u003eFirst, install \u003ca href=\"https://kotlinlang.org/docs/native-cocoapods.html#cocoapods-installation\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCocoaPods\u003c/a\u003e if you haven’t already:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"49a5\"\u003esudo gem install cocoapods\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"4536\"\u003eInside the Android Studio terminal, enter the following commands. The command creates a Pods directory “iosApp/Pods/Podfile” in your iOS project.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ee97\"\u003ecd iOSApp\u003cbr/\u003epod init\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003cfigcaption\u003eAndroid Studio terminal from my laptop\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"5211\"\u003e\u003ca href=\"https://developers.google.com/admob/ios/quick-start#initialize_the_mobile_ads_sdk\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eImport the Mobile Ads SDK\u003c/a\u003e\u003c/h2\u003e\u003cp id=\"c812\"\u003eThe simplest way to import the SDK into an iOS project is to use \u003ca href=\"https://guides.cocoapods.org/using/getting-started\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eCocoaPods\u003c/a\u003e. Open your project’s Pods/Podfile and add this line to your app’s target.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"f829\"\u003epod \u0026#39;Google-Mobile-Ads-SDK\u0026#39;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"42d6\"\u003eAlso add below to Podfile\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8e4f\"\u003etarget \u0026#39;iosApp\u0026#39; do\u003cbr/\u003e  use_frameworks!\u003cp\u003e  pod \u0026#39;Google-Mobile-Ads-SDK\u0026#39;\u003c/p\u003e\u003cp\u003eend\u003c/p\u003e\u003cp\u003epost_install do |installer|\u003cbr/\u003e  installer.pods_project.targets.each do |target|\u003cbr/\u003e    target.build_configurations.each do |config|\u003cbr/\u003e      config.build_settings[\u0026#39;IPHONEOS_DEPLOYMENT_TARGET\u0026#39;] = \u0026#39;13.0\u0026#39;\u003cbr/\u003e      config.build_settings[\u0026#39;EXCLUDED_ARCHS[sdk=iphonesimulator*]\u0026#39;] = \u0026#39;arm64\u0026#39;\u003cbr/\u003e    end\u003cbr/\u003e  end\u003cbr/\u003eend\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"335f\"\u003eInstall the dependencies:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"de13\"\u003epod install --repo-update\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"e883\"\u003eAdd the AdMob library framework to you iOS project.\u003c/p\u003e\u003cp id=\"e801\"\u003eOption 1: Use the \u003ca href=\"https://kotlinlang.org/docs/native-cocoapods.html#using-web-wizard\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ecocoapods IntelliJ Plugin\u003c/a\u003e \u003ccode\u003eorg.jetbrains.kotlin.native.cocoapods\u003c/code\u003e[\u003ca href=\"https://andresand.medium.com/kmp-cocoapods-intellij-plugin-org-jetbrains-kotlin-native-cocoapods-4c3a8bf0578e\" rel=\"noopener\"\u003eread blog post\u003c/a\u003e]\u003c/p\u003e\u003cp id=\"e2dd\"\u003eOption 2: Open the file \u003cstrong\u003eiosApp.xcworkspace \u003c/strong\u003e(right click open with Xcode). Go to iosApp -\u0026gt; Build Settings -\u0026gt; Link Binary with Libraries -\u0026gt; click add button ‘+’ -\u0026gt; search for GoogleMobileAds.xcframework.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eXCode from my laptop\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"fd62\"\u003e2. iOS Banner Implementation\u003c/h2\u003e\u003cp id=\"481c\"\u003eCreate the iOS-specific implementation: \u003ca href=\"https://github.com/AndreSand/ads-kmp/commit/510af74df6c978a43c0d31a65fe97c53f3819886\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ecode\u003c/a\u003e\u003c/p\u003e\u003cp id=\"003e\"\u003eNow let’s add code the file created \u003ccode\u003eAdMobBanner.ios.kt\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1006\"\u003e// iosMain/AdMobBanner.ios.kt\u003cbr/\u003eimport androidx.compose.foundation.layout.defaultMinSize\u003cbr/\u003eimport androidx.compose.foundation.layout.fillMaxWidth\u003cbr/\u003eimport androidx.compose.foundation.layout.height\u003cbr/\u003eimport androidx.compose.runtime.Composable\u003cbr/\u003eimport androidx.compose.ui.Modifier\u003cbr/\u003eimport androidx.compose.ui.unit.dp\u003cbr/\u003eimport androidx.compose.ui.viewinterop.UIKitInteropProperties\u003cbr/\u003eimport androidx.compose.ui.viewinterop.UIKitView\u003cp\u003e@Composable\u003cbr/\u003eactual fun AdMobBanner(modifier: Modifier) {\u003cbr/\u003e    UIKitView(\u003cbr/\u003e        factory = {\u003cbr/\u003e            generateIOSBanner().view\u003cbr/\u003e        },\u003cbr/\u003e        modifier = modifier\u003cbr/\u003e            .fillMaxWidth()\u003cbr/\u003e            .defaultMinSize(minHeight = 50.dp)\u003cbr/\u003e            .height(50.dp),\u003cbr/\u003e        update = { },\u003cbr/\u003e        properties = UIKitInteropProperties(\u003cbr/\u003e            isInteractive = true,\u003cbr/\u003e            isNativeAccessibilityEnabled = true\u003cbr/\u003e        )\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"d1f3\"\u003e3. Configure iOS App\u003c/h2\u003e\u003cp id=\"62bd\"\u003eAdd the necessary Swift files:\u003c/p\u003e\u003cp id=\"cfcd\"\u003eCreate a new file AppDelegate.swift and add the code below\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"dc0b\"\u003e// iosApp/AppDelegate.swift\u003cbr/\u003eimport Foundation\u003cbr/\u003eimport SwiftUI\u003cbr/\u003eimport GoogleMobileAds\u003cp\u003eclass AppDelegate: UIResponder, UIApplicationDelegate {\u003cbr/\u003e    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -\u0026gt; Bool {\u003c/p\u003e\u003cp\u003e                // initialize AdMob iOS Ads SDK\u003cbr/\u003e        GADMobileAds.sharedInstance().start(completionHandler: nil)\u003c/p\u003e\u003cp\u003e        return true\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a1e4\"\u003eCreate the file BannerAdView.swift and add the code below\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1a54\"\u003e// iosApp/BannerAdView.swift\u003cbr/\u003eimport Foundation\u003cbr/\u003eimport SwiftUI\u003cbr/\u003eimport GoogleMobileAds\u003cbr/\u003eimport UIKit\u003cbr/\u003eimport SwiftUI\u003cp\u003estruct BannerAdView: UIViewRepresentable {\u003cbr/\u003e    func makeUIView(context: Context) -\u0026gt; GADBannerView {\u003c/p\u003e\u003cp\u003e               let bannerView = GADBannerView()\u003cbr/\u003e        bannerView.adUnitID = \u0026#34;ca-app-pub-3940256099942544/2435281174\u0026#34; // Replace with your ad unit ID\u003c/p\u003e\u003cp\u003e                if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,\u003cbr/\u003e           let rootViewController = windowScene.windows.first?.rootViewController {\u003cbr/\u003e            bannerView.rootViewController = rootViewController\u003cbr/\u003e        }\u003c/p\u003e\u003cp\u003e                let request = GADRequest()\u003cbr/\u003e        bannerView.load(request)\u003cbr/\u003e        return bannerView\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e        func updateUIView(_ uiView: GADBannerView, context: Context) {}\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"c1da\"\u003eUpdate ContentView.swift file\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"ad1b\"\u003e// iosApp/ComposeView.swift\u003cbr/\u003eimport UIKit\u003cbr/\u003eimport SwiftUI\u003cbr/\u003eimport ComposeApp\u003cbr/\u003eimport GoogleMobileAds\u003cp\u003estruct ComposeView: UIViewControllerRepresentable {\u003cbr/\u003e   init() {\u003cbr/\u003e          MainViewControllerKt.IOSBanner = {\u003cbr/\u003e              let adBannerView = VStack {\u003cbr/\u003e                  BannerAdView()\u003cbr/\u003e              }\u003cbr/\u003e              return UIHostingController(rootView: adBannerView)\u003cbr/\u003e          }\u003cbr/\u003e      }\u003c/p\u003e\u003cp\u003e    func makeUIViewController(context: Context) -\u0026gt; UIViewController {\u003cbr/\u003e        MainViewControllerKt.MainViewController()\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    func updateUIViewController(_ uiViewController: UIViewController, context: Context) {}\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003estruct ContentView: View {\u003cbr/\u003e    var body: some View {\u003cbr/\u003e        ComposeView()\u003cbr/\u003e                .ignoresSafeArea(.keyboard) // Compose has own keyboard handler\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"d118\"\u003eUpdate iOSApp.swift file\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"8f28\"\u003e// iosApp/iOSApp.swift\u003cp\u003eimport SwiftUI\u003c/p\u003e\u003cp\u003e@main\u003cbr/\u003estruct iOSApp: App {\u003cbr/\u003e    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate\u003c/p\u003e\u003cp\u003e        var body: some Scene {\u003cbr/\u003e        WindowGroup {\u003cbr/\u003e            ContentView()\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"c54a\"\u003e3. Update MainViewController\u003c/h2\u003e\u003cp id=\"4303\"\u003eUpdate the file \u003ccode\u003eMainViewController.kt\u003c/code\u003e in your iOS main source set:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"23a5\"\u003e// iosMain/MainViewController.kt\u003cp\u003eimport androidx.compose.ui.window.ComposeUIViewController\u003cbr/\u003eimport platform.UIKit.UIViewController\u003c/p\u003e\u003cp\u003elateinit var IOSBanner: () -\u0026gt; UIViewController\u003c/p\u003e\u003cp\u003efun generateIOSBanner(): UIViewController {\u003cbr/\u003e    return IOSBanner()\u003cbr/\u003e}\u003c/p\u003e\u003cp\u003efun MainViewController() = ComposeUIViewController(\u003cbr/\u003e    configure = {\u003cbr/\u003e        enforceStrictPlistSanityCheck = false\u003cbr/\u003e    }\u003cbr/\u003e) {\u003cbr/\u003e    App()\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"0b38\"\u003e4. Update Info.plist\u003c/h2\u003e\u003cp id=\"fcae\"\u003eAdd the required AdMob configuration the AdMob app id and the SKAdNetworkIdentifier.\u003c/p\u003e\u003cp id=\"85d4\"\u003eUpdate the file Info.plist using Xcode or Android Studio.\u003c/p\u003e\u003cp id=\"cdeb\"\u003e\u003cstrong\u003eXcode:\u003c/strong\u003e Open the file \u003cstrong\u003eiosApp.xcworkspace \u003c/strong\u003e(right click open with Xcode) -\u0026gt; Info.plist.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eXCode from my laptop\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"a4db\"\u003e\u003cstrong\u003eAndroid Studio:\u003c/strong\u003e Open the file Info.plist\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eXCode from my laptop\u003c/figcaption\u003e\u003c/figure\u003e\u003col\u003e\u003cli id=\"1c02\"\u003eAdd GADApplicationIdentifier key with a string value of your AdMob app ID found in the AdMob UI. Using test admob app id.\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003cspan id=\"0e90\"\u003e\u0026lt;key\u0026gt;GADApplicationIdentifier\u0026lt;/key\u0026gt;\u003cbr/\u003e \u0026lt;string\u0026gt;ca-app-pub-3940256099942544~1458002511\u0026lt;/string\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003col\u003e\u003cli id=\"5b0e\"\u003eAdd SKAdNetworkItems key with SKAdNetworkIdentifier values for Google (cstr6suwn9.skadnetwork) and select third-party buyers who have provided these values to Google. Complete list of third-party buyers: \u003ca href=\"https://developers.google.com/admob/ios/privacy/strategies#skadnetwork\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eskadnetwork\u003c/a\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003cspan id=\"a1a8\"\u003e\u0026lt;array\u0026gt;\u003cbr/\u003e    \u0026lt;dict\u0026gt;\u003cbr/\u003e        \u0026lt;key\u0026gt;SKAdNetworkIdentifier\u0026lt;/key\u0026gt;\u003cbr/\u003e        \u0026lt;string\u0026gt;cstr6suwn9.skadnetwork\u0026lt;/string\u0026gt;\u003cbr/\u003e    \u0026lt;/dict\u0026gt;\u003cbr/\u003e    \u0026lt;!-- Add other SKAdNetwork identifiers as needed --\u0026gt;\u003cbr/\u003e\u0026lt;/array\u0026gt;\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"e61c\"\u003eAndroid Implementation\u003c/h2\u003e\u003cp id=\"ec7e\"\u003eCreate an AdMob account \u003ca href=\"https://developers.google.com/admob/android/quick-start\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://developers.google.com/admob/android/quick-start\u003c/a\u003e\u003c/p\u003e\u003ch2 id=\"f91d\"\u003e1. Add Gradle Dependencies\u003c/h2\u003e\u003cp id=\"1eac\"\u003eFirst, add the Google AdMob dependency to your Android app’s build.gradle file:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7f55\"\u003esourceSets {\u003cbr/\u003e  androidMain.dependencies {\u003cbr/\u003e    implementation(\u0026#34;com.google.android.gms:play-services-ads:23.6.0\u0026#34;)\u003cbr/\u003e     }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"85d7\"\u003e2. Android Banner Implementation\u003c/h2\u003e\u003cp id=\"1673\"\u003eCreate the Android-specific implementation: \u003ca href=\"https://github.com/AndreSand/ads-kmp/commit/8b605a2e3fb1446bc30ba73f7df0053dae4fe804\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ecode\u003c/a\u003e\u003c/p\u003e\u003cp id=\"e106\"\u003eNow let’s add code the file created \u003ccode\u003eAdMobBanner.android.kt\u003c/code\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"777a\"\u003e// androidMain/AdMobBanner.android.kt\u003cbr/\u003eimport androidx.compose.foundation.layout.fillMaxWidth\u003cbr/\u003eimport androidx.compose.runtime.Composable\u003cbr/\u003eimport androidx.compose.ui.Modifier\u003cbr/\u003eimport androidx.compose.ui.viewinterop.AndroidView\u003cbr/\u003eimport com.google.android.gms.ads.AdRequest\u003cbr/\u003eimport com.google.android.gms.ads.AdSize\u003cbr/\u003eimport com.google.android.gms.ads.AdView\u003cp\u003e@Composable\u003cbr/\u003eactual fun AdMobBanner(modifier: Modifier) {\u003cbr/\u003e    AndroidView(\u003cbr/\u003e        modifier = modifier.fillMaxWidth(),\u003cbr/\u003e        factory = { context -\u0026gt;\u003cbr/\u003e            AdView(context).apply {\u003cbr/\u003e                setAdSize(AdSize.FULL_BANNER)\u003cbr/\u003e                adUnitId = \u0026#34;ca-app-pub-3940256099942544/9214589741\u0026#34; // Replace with your ad unit ID\u003cbr/\u003e                loadAd(AdRequest.Builder().build())\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"749f\"\u003e2. Update MainActivity\u003c/h2\u003e\u003cp id=\"47e1\"\u003eInitialize AdMob in your MainActivity:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"4830\"\u003eclass MainActivity : ComponentActivity() {\u003cbr/\u003e    override fun onCreate(savedInstanceState: Bundle?) {\u003cbr/\u003e        super.onCreate(savedInstanceState)\u003cp\u003e        MobileAds.initialize(this) // initialize AdMob Android Ads SDK\u003c/p\u003e\u003cp\u003e                setContent {\u003cbr/\u003e            App()\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"ec5c\"\u003e3. Update Android Manifest\u003c/h2\u003e\u003cp id=\"0c81\"\u003eInside the file AndroidManifext.xml add necessary permissions and metadata:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"69ec\"\u003e\u0026lt;uses-permission android:name=\u0026#34;android.permission.INTERNET\u0026#34; /\u0026gt;\u003cbr/\u003e\u0026lt;uses-permission android:name=\u0026#34;com.google.android.gms.permission.AD_ID\u0026#34;/\u0026gt;\u003cp\u003e\u0026lt;application\u0026gt;\u003cbr/\u003e    \u0026lt;meta-data\u003cbr/\u003e        android:name=\u0026#34;com.google.android.gms.ads.APPLICATION_ID\u0026#34;\u003cbr/\u003e        android:value=\u0026#34;ca-app-pub-3940256099942544~3347511713\u0026#34;/\u0026gt;\u003cbr/\u003e\u0026lt;/application\u0026gt;\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"79b2\"\u003eBest Practices and Tips\u003c/h2\u003e\u003col\u003e\u003cli id=\"8fe7\"\u003e\u003cstrong\u003eTest Ads\u003c/strong\u003e: Always use test ad unit IDs during development to avoid violating AdMob policies.\u003c/li\u003e\u003cli id=\"65dc\"\u003e\u003cstrong\u003eError Handling\u003c/strong\u003e: Implement proper error handling for ad loading failures.\u003c/li\u003e\u003cli id=\"f69c\"\u003e\u003cstrong\u003eResponsive Design\u003c/strong\u003e: Ensure your banner ads adapt well to different screen sizes.\u003c/li\u003e\u003cli id=\"9f41\"\u003e\u003cstrong\u003ePrivacy\u003c/strong\u003e: Follow platform-specific privacy guidelines and implement necessary consent mechanisms.\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"660a\"\u003eCommon Issues and Solutions\u003c/h2\u003e\u003col\u003e\u003cli id=\"699d\"\u003e\u003cstrong\u003eiOS Simulator Issues\u003c/strong\u003e: If ads don’t show in the iOS simulator, ensure you’ve properly configured the excluded architectures in your Podfile\u003c/li\u003e\u003cli id=\"dbba\"\u003e\u003cstrong\u003eiOS Pods errors:\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003cspan id=\"11c1\"\u003e//Remove the framework from your project\u003cbr/\u003epod deintegrate //if using CocoaPods\u003cbr/\u003epod install //to reinstall dependencies\u003c/span\u003e\u003c/pre\u003e\u003col\u003e\u003cli id=\"6418\"\u003e\u003cstrong\u003eAndroid Manifest Conflicts\u003c/strong\u003e: Make sure your application ID matches the one registered in AdMob\u003c/li\u003e\u003cli id=\"55c1\"\u003e\u003cstrong\u003eLayout Problems\u003c/strong\u003e: Use appropriate modifiers to handle ad container sizing and positioning\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"e419\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"863a\"\u003eIntegrating \u003ca href=\"https://admob.google.com/home/get-started/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGoogle AdMob ads \u003c/a\u003einto a Kotlin Multiplatform project requires platform-specific implementations but allows for a shared interface in your common code. This approach maintains the benefits of code sharing while leveraging platform-specific ad implementations for optimal performance and user experience.\u003c/p\u003e\u003cp id=\"7ae7\"\u003eRemember to replace the test ad unit IDs with your actual AdMob ad unit IDs before releasing your app to production.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"2762\"\u003eThank you for reading\u003c/h2\u003e\u003cp id=\"f7fb\"\u003eHope you learn something new. 🙌🙏✌\u003c/p\u003e\u003cp id=\"d6fc\"\u003eDon’t forget to clap 👏 50 times to support me and follow me for more such useful articles about Android Development, Gemini AI, Kotlin \u0026amp; KMP.\u003c/p\u003e\u003cp id=\"abd6\"\u003eIf you need any help related to Android, Kotlin and KMP. I’m always happy to help you.\u003c/p\u003e\u003cul\u003e\u003cli id=\"878b\"\u003eIf you enjoyed this, please \u003ca href=\"https://andresand.medium.com/\" rel=\"noopener\"\u003efollow me on Medium\u003c/a\u003e\u003c/li\u003e\u003cli id=\"b51e\"\u003e\u003ca href=\"https://buymeacoffee.com/andresand\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eBuy me a coffee\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"e06a\"\u003eFollow me on:\u003c/p\u003e\u003cp id=\"34ef\"\u003e\u003ca href=\"https://andresand.medium.com/\" rel=\"noopener\"\u003e\u003cstrong\u003eMedium\u003c/strong\u003e\u003c/a\u003e, \u003ca href=\"https://www.linkedin.com/in/andres-sandoval/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eLinkedIn\u003c/strong\u003e\u003c/a\u003e\u003cstrong\u003e, \u003c/strong\u003e\u003ca href=\"https://github.com/AndreSand\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eGitHub\u003c/strong\u003e\u003c/a\u003e, \u003ca href=\"https://g.dev/andres1\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eGoogle developer\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"56b0\"\u003eThank you for taking the time to read this. I welcome your feedback on how I can improve or if you have any questions.\u003c/p\u003e\u003cp id=\"2aff\"\u003e— Andres 🙌🏻\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eAndroid app\u003c/figcaption\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eiOS App\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "12 min read",
  "publishedTime": "2024-12-23T04:19:43.331Z",
  "modifiedTime": null
}
