{
  "id": "1c2648f8-a0bf-4a40-b4a2-02d4f8eaa0d1",
  "title": "Lint Revisit: Providing Alternatives üßô‚Äç‚ôÄÔ∏è",
  "link": "https://zarah.dev/2024/07/24/lintfix-alternatives.html",
  "description": "In my previous post, we updated our TODO Detector to be more flexible. It is also easily extensible so that if we want to include more parameters or perhaps add more checks, we can follow the existing pattern and modify it.",
  "author": "Zarah Dominguez",
  "published": "2024-07-24T00:00:00+00:00",
  "source": "https://zarah.dev/feed.xml",
  "categories": [
    "android",
    "lint"
  ],
  "byline": "",
  "length": 4570,
  "excerpt": "In my previous post, we updated our TODO Detector to be more flexible. It is also easily extensible so that if we want to include more parameters or perhaps ...",
  "siteName": "",
  "favicon": "https://zarah.dev/assets/images/apple-touch-icon.png",
  "text": "In my previous post, we updated our TODO Detector to be more flexible. It is also easily extensible so that if we want to include more parameters or perhaps add more checks, we can follow the existing pattern and modify it. For example, what if instead of the date being in parentheses, we want a reference to a JIRA ticket or a GitHub issue instead. Furthermore, what if we want to restrict these issues to a set of pre-defined project-specific prefixes? What if we want to surface those prefixes in the auto-fix options? Something like this maybe? A Lint rule with alternative fixes Super cool right? Let‚Äôs make it happen üë©‚Äçüç≥ Say we only allow tickets with an ABCD or XYZ prefix like in the example above. We first define an enum containing these prefixes: enum class VALID_TICKET_PREFIXES { ABCD, XYZ, ; companion object { fun allPrefixes() = VALID_TICKET_PREFIXES.entries.map { it.name } } } And use that to construct our RegEx pattern: // Only accept valid prefixes followed by a dash and one or more numbers val ticketPattern = VALID_TICKET_PREFIXES.allPrefixes() .joinToString(separator = \"|\") { prefix -\u003e \"$prefix-[0-9]+\" } val COMPLETE_PATTERN_REGEX = \"\"\".*TODO-(?\u003cMATCH_KEY_ASSIGNEE\u003e[^:\\(\\s-]+) \\((?\u003c$MATCH_KEY_TICKET\u003e$ticketPattern)\\):.*\"\"\".toRegex() We can still use the same checks as we do for the date: check if there is anything enclosed in parentheses, check if the value contained in MATCH_KEY_TICKET starts with any of the valid prefixes When we report the issue, we can then include the valid prefixes in the issue explanation to help users figure out what went wrong: Issue explanation Offering more help üõü However, to make our rule even more helpful, we can include available options in our LintFix: Alternatives as intentions This is done by adding alternatives() to our LintFix: // Create a fix with alternatives val ticketAlternatives = fix().alternatives() VALID_TICKET_PREFIXES.allPrefixes().forEach { prefix -\u003e val replacement = \"$prefix-\" // Create an individual fix suggesting each valid prefix val prefixFix = fix() .name(\"Add $prefix ticket\") .replace() .range(dateLocation) .select(\"($replacement)\") .with(replacement) .build() // Add this fix to our alternatives ticketAlternatives.add(prefixFix) } In addition to putting in the prefix, I wanted to put the cursor after the dash to make it even easier for users. This way, all that‚Äôs needed to be done is put in the actual ticket number. I cannot figure out how to do that though, so for now the newly-added prefix would be highlighted (similar to what would happen if you click and drag the cursor). Selecting a bunch of text can be done using, you guessed it, select() which expects a @RegExp. According to the documentation: Sets a pattern to select; if it contains parentheses, group(1) will be selected. To just set the caret, use an empty group. According to this I should be able to set the caret, but I cannot figure out how. I tried searching for more documentation and in the platform rules but was, alas, unsuccessful. Do you know how to do it? Let me know please! üôè Anyway, now we can use this fix when the Incident is reported: val incident = Incident() .issue(MISSING_OR_INVALID_PREFIX) .location(problemLocation) .message(message) .fix(ticketAlternatives.build()) context.report(incident) Isn‚Äôt it neat? üòç Testing alternatives üß™ And yes! It IS possible to test these alternatives! The syntax is similar to how we test a LintFix, but repeated for each alternative provided: .expectFixDiffs( \"\"\" Fix for src/test/pkg/TestClass1.kt line 3: Add ABCD ticket: @@ -3 +3 - // TODO-Zarah (): Some comments + // TODO-Zarah ([ABCD-]|): Some comments Fix for src/test/pkg/TestClass1.kt line 3: Add XYZ ticket: @@ -3 +3 - // TODO-Zarah (): Some comments + // TODO-Zarah ([XYZ-]|): Some comments \"\"\".trimIndent() ) The only weird-looking thing here is the syntax for testing the select() directive we included in the fix: // TODO-Zarah ([ABCD-]|): Some comments // TODO-Zarah ([XYZ-]|): Some comments What this means is that any matches to the @RegExp we pass into select() must be enclosed between [ and ]. I assumed the pipe (|) is meant to indicate where the caret is? Maybe? ü§î We‚Äôll leave this here for now, unless inspiration hits me and we can spiffify this rule even more. üëã",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\" aria-label=\"Content\"\u003e\n  \u003carticle\u003e\n    \n\n    \u003cdiv\u003e\n          \u003cp\u003eIn my \u003ca href=\"https://zarah.dev/2024/07/22/todo-detector-v2.html\"\u003eprevious post\u003c/a\u003e, we\nupdated our TODO Detector to be more flexible. It is also easily extensible\nso that if we want to include more parameters or perhaps add more checks,\nwe can follow the existing pattern and modify it.\u003c/p\u003e\n\n\u003cp\u003eFor example, what if instead of the date being in parentheses, we want a\nreference to a JIRA ticket or a GitHub issue instead. Furthermore, what if\nwe want to restrict these issues to a set of pre-defined project-specific\nprefixes? What if we want to surface those prefixes in the auto-fix options? \nSomething like this maybe?\u003c/p\u003e\n\n\u003cfigure\u003e\n\u003ca href=\"https://imgur.com/VTc8m4F\"\u003e\u003cimg src=\"https://i.imgur.com/VTc8m4F.gif\"/\u003e\u003c/a\u003e \n\u003cfigcaption\u003eA Lint rule with alternative fixes\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eSuper cool right?\u003c/p\u003e\n\n\u003ch3 id=\"lets-make-it-happen-\"\u003eLet‚Äôs make it happen üë©‚Äçüç≥\u003c/h3\u003e\n\n\u003cp\u003eSay we only allow tickets with an \u003ccode\u003eABCD\u003c/code\u003e or \u003ccode\u003eXYZ\u003c/code\u003e prefix like in the example above. \nWe first define an enum containing these prefixes:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eenum\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eVALID_TICKET_PREFIXES\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n    \u003cspan\u003eABCD\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003eXYZ\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\n    \u003cspan\u003e;\u003c/span\u003e\n    \u003cspan\u003ecompanion\u003c/span\u003e \u003cspan\u003eobject\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e\n        \u003cspan\u003efun\u003c/span\u003e \u003cspan\u003eallPrefixes\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eVALID_TICKET_PREFIXES\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eentries\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emap\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eit\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e \u003cspan\u003e}\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eAnd use that to construct our RegEx pattern:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Only accept valid prefixes followed by a dash and one or more numbers\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eticketPattern\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eVALID_TICKET_PREFIXES\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eallPrefixes\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejoinToString\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eseparator\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;|\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eprefix\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n        \u003cspan\u003e\u0026#34;$prefix-[0-9]+\u0026#34;\u003c/span\u003e\n    \u003cspan\u003e}\u003c/span\u003e\n    \n\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eCOMPLETE_PATTERN_REGEX\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;.*TODO-(?\u0026lt;MATCH_KEY_ASSIGNEE\u0026gt;[^:\\(\\s-]+) \\((?\u0026lt;$MATCH_KEY_TICKET\u0026gt;$ticketPattern)\\):.*\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etoRegex\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWe can still use the same checks as we do for the date:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003echeck if there is anything enclosed in parentheses,\u003c/li\u003e\n  \u003cli\u003echeck if the value contained in \u003ccode\u003eMATCH_KEY_TICKET\u003c/code\u003e starts with any of the valid prefixes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWhen we report the issue, we can then include the valid prefixes in the issue\nexplanation to help users figure out what went wrong:\u003c/p\u003e\n\n\u003cfigure\u003e\n\u003ca href=\"https://imgur.com/I9y0Vyy\"\u003e\u003cimg src=\"https://i.imgur.com/I9y0Vyy.png\" width=\"500\"/\u003e\u003c/a\u003e\n\u003cfigcaption\u003eIssue explanation\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003ch3 id=\"offering-more-help-\"\u003eOffering more help üõü\u003c/h3\u003e\n\n\u003cp\u003eHowever, to make our rule even more helpful, we can include available options in \nour \u003ccode\u003eLintFix\u003c/code\u003e:\u003c/p\u003e\n\n\u003cfigure\u003e\n\u003ca href=\"https://imgur.com/jF2CIQU\"\u003e\u003cimg src=\"https://i.imgur.com/jF2CIQU.png\" width=\"400\"/\u003e\u003c/a\u003e\n\u003cfigcaption\u003eAlternatives as intentions\u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eThis is done by adding \u003ca href=\"https://googlesamples.github.io/android-custom-lint-rules/api-guide.md.html#addingquickfixes/combiningfixes\"\u003e\u003ccode\u003ealternatives()\u003c/code\u003e\u003c/a\u003e \nto our \u003ccode\u003eLintFix\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// Create a fix with alternatives\u003c/span\u003e\n\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eticketAlternatives\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efix\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003ealternatives\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\n\u003cspan\u003eVALID_TICKET_PREFIXES\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eallPrefixes\u003c/span\u003e\u003cspan\u003e().\u003c/span\u003e\u003cspan\u003eforEach\u003c/span\u003e \u003cspan\u003e{\u003c/span\u003e \u003cspan\u003eprefix\u003c/span\u003e \u003cspan\u003e-\u0026gt;\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003ereplacement\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e\u0026#34;$prefix-\u0026#34;\u003c/span\u003e\n    \n    \u003cspan\u003e// Create an individual fix suggesting each valid prefix\u003c/span\u003e\n    \u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eprefixFix\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003efix\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;Add $prefix ticket\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereplace\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003erange\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003edateLocation\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eselect\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;($replacement)\u0026#34;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ewith\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ereplacement\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n        \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n        \n    \u003cspan\u003e// Add this fix to our alternatives\u003c/span\u003e\n    \u003cspan\u003eticketAlternatives\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eadd\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eprefixFix\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003cspan\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIn addition to putting in the prefix, I wanted to put the cursor after the dash\nto make it \u003cem\u003eeven easier\u003c/em\u003e for users. This way, all that‚Äôs needed to be done is\nput in the actual ticket number. I cannot figure out how to do that though, so\nfor now the newly-added prefix would be highlighted (similar to what would happen\nif you click and drag the cursor).\u003c/p\u003e\n\n\u003cp\u003eSelecting a bunch of text can be done using, you guessed it, \u003ccode\u003eselect()\u003c/code\u003e which \nexpects a \u003ccode\u003e@RegExp\u003c/code\u003e. According to the documentation:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eSets a pattern to select; if it contains parentheses, group(1) will be selected. To just set the caret, use an empty group.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAccording to this I should be able to set the caret, but I cannot figure out how. I\ntried searching for more documentation and in the platform rules but was, alas,\nunsuccessful. Do you know how to do it? Let me know please! üôè\u003c/p\u003e\n\n\u003cp\u003eAnyway, now we can use this fix when the \u003ccode\u003eIncident\u003c/code\u003e is reported:\u003c/p\u003e\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eval\u003c/span\u003e \u003cspan\u003eincident\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003eIncident\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eissue\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eMISSING_OR_INVALID_PREFIX\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elocation\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eproblemLocation\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003emessage\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n    \u003cspan\u003e.\u003c/span\u003e\u003cspan\u003efix\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eticketAlternatives\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ebuild\u003c/span\u003e\u003cspan\u003e())\u003c/span\u003e\n\u003cspan\u003econtext\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereport\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003eincident\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eIsn‚Äôt it neat? üòç\u003c/p\u003e\n\n\u003ch3 id=\"testing-alternatives-\"\u003eTesting alternatives üß™\u003c/h3\u003e\n\n\u003cp\u003eAnd yes! It IS possible to test these alternatives! The syntax is similar to\nhow we test a \u003ccode\u003eLintFix\u003c/code\u003e, but repeated for each alternative provided:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eexpectFixDiffs\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\n         Fix for src/test/pkg/TestClass1.kt line 3: Add ABCD ticket:\n         @@ -3 +3\n         -     // TODO-Zarah (): Some comments\n         +     // TODO-Zarah ([ABCD-]|): Some comments\n         Fix for src/test/pkg/TestClass1.kt line 3: Add XYZ ticket:\n         @@ -3 +3\n         -     // TODO-Zarah (): Some comments\n         +     // TODO-Zarah ([XYZ-]|): Some comments\n    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etrimIndent\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n\u003cspan\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eThe only weird-looking thing here is the syntax for testing the \u003ccode\u003eselect()\u003c/code\u003e directive\nwe included in the fix:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e// TODO-Zarah ([ABCD-]|): Some comments\u003c/span\u003e\n\n\u003cspan\u003e// TODO-Zarah ([XYZ-]|): Some comments\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eWhat this means is that any matches to the \u003ccode\u003e@RegExp\u003c/code\u003e we pass into \u003ccode\u003eselect()\u003c/code\u003e must\nbe enclosed between \u003ccode\u003e[\u003c/code\u003e and \u003ccode\u003e]\u003c/code\u003e. I assumed the pipe (\u003ccode\u003e|\u003c/code\u003e) is meant to indicate\nwhere the caret is? Maybe? ü§î\u003c/p\u003e\n\n\u003cp\u003eWe‚Äôll leave this here for now, unless inspiration hits me and we can spiffify this \nrule even more. üëã\u003c/p\u003e\n\n        \u003c/div\u003e\n  \u003c/article\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
