{
  "id": "4275bcfb-28eb-4a08-b1a3-7047ac200db5",
  "title": "Smooth Animated Bottom Sheet Header with Jetpack Compose",
  "link": "https://proandroiddev.com/smooth-animated-bottom-sheet-header-with-jetpack-compose-96e5495cafd4?source=rss----c72404660798---4",
  "description": "",
  "author": "Asha Mishra",
  "published": "Tue, 22 Jul 2025 14:39:54 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "kotlin",
    "mobile-app-development",
    "ui-ux",
    "jetpack-compose",
    "android-development"
  ],
  "byline": "Asha Mishra",
  "length": 5187,
  "excerpt": "Have you ever used a bottom sheet that just appears? It‚Äôs functional, sure, but doesn‚Äôt feel responsive or polished. Let‚Äôs fix that. What if your bottom sheet header scaled, lifted, and reshaped‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Zoom image will be displayedJetpack Compose: Creating a Responsive Bottom Sheet HeaderPart of the Android UI Series ‚Äî Jetpack Compose ComponentsHave you ever used a bottom sheet that just appears?It‚Äôs functional, sure, but doesn‚Äôt feel responsive or polished.Let‚Äôs fix that. What if your bottom sheet header scaled, lifted, and reshaped smoothly as the user swiped?That‚Äôs what we‚Äôre building today: a bottom sheet that feels alive, using BottomSheetScaffold and a few elegant animations in Jetpack Compose.What We‚Äôll BuildAn animated bottom sheet header that reacts to swipe progress:‚úÖ Built with BottomSheetScaffold‚úÖ Tracks swipe progress with scaffoldState.bottomSheetState.progress.fraction ‚úÖ Animates elevation, scale, and corner radius with animate*AsStateAs the sheet expands, the header:Lifts with a subtle shadowScales up smoothlyFlattens its rounded cornersSetting Up the ScaffoldWe start with a simple BottomSheetScaffold and a coroutine scope for programmatic toggling:@OptIn(ExperimentalMaterialApi::class)@Composablefun AnimatedHeaderBottomSheet() { val scaffoldState = rememberBottomSheetScaffoldState( bottomSheetState = rememberBottomSheetState(BottomSheetValue.Collapsed) ) val scope = rememberCoroutineScope()Tracking Sheet ProgressWe use progress.fraction to know how far the sheet is expanded (0 to 1), and animate our values accordingly:val progress = scaffoldState.bottomSheetState.progress.fraction val elevation by animateDpAsState(if (progress \u003e 0.5f) 8.dp else 0.dp) val scale by animateFloatAsState(lerp(0.8f, 1f, progress)) val cornerRadius by animateDpAsState(lerp(24.dp, 4.dp, progress))Animating Header PropertiesThe header reacts to the user‚Äôs swipe using Compose‚Äôs animation APIs. This is the magic:BottomSheetScaffold( scaffoldState = scaffoldState, sheetPeekHeight = 80.dp, sheetContent = { Box( Modifier .fillMaxWidth() .height(250.dp) .graphicsLayer { scaleX = scale scaleY = scale } .background( MaterialTheme.colorScheme.primaryContainer, shape = RoundedCornerShape(cornerRadius) ) .shadow(elevation, shape = RoundedCornerShape(cornerRadius)) .padding(16.dp), contentAlignment = Alignment.Center ) { Text( text = \"Animated Header\", style = MaterialTheme.typography.headlineSmall ) } },Toggle Button InteractionA simple button toggles the sheet state on tap ‚Äî great for onboarding flows or expanding menus:content = { Column(Modifier.fillMaxSize()) { Spacer(Modifier.height(16.dp)) Button( onClick = { scope.launch { if (scaffoldState.bottomSheetState.isCollapsed) scaffoldState.bottomSheetState.expand() else scaffoldState.bottomSheetState.collapse() } }, Modifier.align(Alignment.CenterHorizontally) ) { Text(\"Toggle Sheet\") } } } )}What‚Äôs Happening Behind the Scenes?We combine these simple tools:progress.fraction ‚Üí Tracks how much the sheet is openanimateDpAsState, animateFloatAsState ‚Üí Animate values smoothlyWe animate:Elevation ‚Üí subtle drop shadow for depthScale ‚Üí makes the sheet header ‚Äúgrow‚ÄùCorner radius ‚Üí goes from soft round to flatter lookThis makes the bottom sheet feel fluid and interactive, exactly what modern apps need.Bonus: Programmatic ToggleDo you need to open/close the sheet manually? You can do it like this:scope.launch { scaffoldState.bottomSheetState.expand() // or collapse()}Perfect for use cases like:Onboarding stepsNavigation drawersConditional UI flowsUse Cases for This PatternHere are a few ideas where this interaction shines:Note-taking apps with expanding detailsMusic players with animated album headersTask managers with dynamic status sheetsDesign systems with responsive bottom panelsFinal ThoughtsThis little animation packs a big punch. It‚Äôs a great example of why Jetpack Compose is so powerful: you get clean state separation, fluid animations, and less boilerplate.üôå Stay Tuned for MoreThis article is part of my Android UI Series. Upcoming articles will cover:Animated FABsSwipe-to-dismiss cardsSticky headersResponsive layouts for foldablesIf you liked this post:‚úÖ Follow for more Compose UI insights üí¨ Drop a comment if you want the GitHub repo üîÅ Share with dev friends who love slick UIs‚úçÔ∏è *About the Author*Asha Mishra is a Senior Android Developer with 9+ years of experience building secure, high-performance apps using Jetpack Compose, Kotlin, and Clean Architecture. She has led development at Visa, UOB Singapore, and Deutsche Bahn. Passionate about Compose internals, modern Android architecture, and developer productivity.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*d9SLxZD4TIESGa-AQQyujQ.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cdiv role=\"button\" tabindex=\"0\"\u003e\u003cp\u003e\u003cspan\u003eZoom image will be displayed\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003cfigcaption\u003eJetpack Compose: Creating a Responsive Bottom Sheet Header\u003c/figcaption\u003e\u003c/figure\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\" role=\"tooltip\"\u003e\u003ca href=\"https://medium.com/@ashatmishra?source=post_page---byline--96e5495cafd4---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Asha Mishra\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*5GQGpuo4vKlD4z6Lw4XAkw.jpeg\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cp id=\"0a83\"\u003e\u003cstrong\u003e\u003cem\u003ePart of the Android UI Series ‚Äî Jetpack Compose Components\u003c/em\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"34c9\"\u003eHave you ever used a bottom sheet that just appears?\u003cbr/\u003eIt‚Äôs functional, sure, but doesn‚Äôt feel \u003cstrong\u003eresponsive or polished\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"1762\"\u003eLet‚Äôs fix that. What if your \u003cstrong\u003ebottom sheet header scaled, lifted, and reshaped\u003c/strong\u003e smoothly as the user swiped?\u003c/p\u003e\u003cp id=\"5557\"\u003eThat‚Äôs what we‚Äôre building today: a bottom sheet that feels \u003cstrong\u003ealive\u003c/strong\u003e, using \u003ccode\u003eBottomSheetScaffold\u003c/code\u003e and a few elegant animations in \u003cstrong\u003eJetpack Compose\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"54cb\"\u003eWhat We‚Äôll Build\u003c/h2\u003e\u003cp id=\"f028\"\u003eAn \u003cstrong\u003eanimated bottom sheet header\u003c/strong\u003e that reacts to swipe progress:\u003c/p\u003e\u003cp id=\"4a7c\"\u003e‚úÖ Built with \u003ccode\u003eBottomSheetScaffold\u003c/code\u003e\u003cbr/\u003e‚úÖ Tracks swipe progress with \u003ccode\u003escaffoldState.bottomSheetState.progress.fraction\u003c/code\u003e\u003cbr/\u003e ‚úÖ Animates \u003cstrong\u003eelevation\u003c/strong\u003e, \u003cstrong\u003escale\u003c/strong\u003e, and \u003cstrong\u003ecorner radius\u003c/strong\u003e with \u003ccode\u003eanimate*AsState\u003c/code\u003e\u003c/p\u003e\u003cp id=\"e671\"\u003eAs the sheet expands, the header:\u003c/p\u003e\u003cul\u003e\u003cli id=\"5aa6\"\u003e\u003cstrong\u003eLifts\u003c/strong\u003e with a subtle shadow\u003c/li\u003e\u003cli id=\"a088\"\u003e\u003cstrong\u003eScales up\u003c/strong\u003e smoothly\u003c/li\u003e\u003cli id=\"8ff0\"\u003e\u003cstrong\u003eFlattens its rounded corners\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"a24c\"\u003eSetting Up the Scaffold\u003c/h2\u003e\u003cp id=\"04ec\"\u003eWe start with a simple \u003ccode\u003eBottomSheetScaffold\u003c/code\u003e and a coroutine scope for programmatic toggling:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c4f0\"\u003e@OptIn(ExperimentalMaterialApi::class)\u003cbr/\u003e@Composable\u003cbr/\u003efun AnimatedHeaderBottomSheet() {\u003cbr/\u003e    val scaffoldState = rememberBottomSheetScaffoldState(\u003cbr/\u003e        bottomSheetState = rememberBottomSheetState(BottomSheetValue.Collapsed)\u003cbr/\u003e    )\u003cbr/\u003e    val scope = rememberCoroutineScope()\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"bc87\"\u003eTracking Sheet Progress\u003c/h2\u003e\u003cp id=\"60d0\"\u003eWe use \u003ccode\u003eprogress.fraction\u003c/code\u003e to know how far the sheet is expanded (0 to 1), and animate our values accordingly:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b681\"\u003eval progress = scaffoldState.bottomSheetState.progress.fraction\u003cbr/\u003e    val elevation by animateDpAsState(if (progress \u0026gt; 0.5f) 8.dp else 0.dp)\u003cbr/\u003e    val scale by animateFloatAsState(lerp(0.8f, 1f, progress))\u003cbr/\u003e    val cornerRadius by animateDpAsState(lerp(24.dp, 4.dp, progress))\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"f7df\"\u003eAnimating Header Properties\u003c/h2\u003e\u003cp id=\"d22d\"\u003eThe header reacts to the user‚Äôs swipe using Compose‚Äôs animation APIs. This is the magic:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3a5d\"\u003eBottomSheetScaffold(\u003cbr/\u003e        scaffoldState = scaffoldState,\u003cbr/\u003e        sheetPeekHeight = 80.dp,\u003cbr/\u003e        sheetContent = {\u003cbr/\u003e            Box(\u003cbr/\u003e                Modifier\u003cbr/\u003e                    .fillMaxWidth()\u003cbr/\u003e                    .height(250.dp)\u003cbr/\u003e                    .graphicsLayer {\u003cbr/\u003e                        scaleX = scale\u003cbr/\u003e                        scaleY = scale\u003cbr/\u003e                    }\u003cbr/\u003e                    .background(\u003cbr/\u003e                        MaterialTheme.colorScheme.primaryContainer,\u003cbr/\u003e                        shape = RoundedCornerShape(cornerRadius)\u003cbr/\u003e                    )\u003cbr/\u003e                    .shadow(elevation, shape = RoundedCornerShape(cornerRadius))\u003cbr/\u003e                    .padding(16.dp),\u003cbr/\u003e                contentAlignment = Alignment.Center\u003cbr/\u003e            ) {\u003cbr/\u003e                Text(\u003cbr/\u003e                    text = \u0026#34;Animated Header\u0026#34;,\u003cbr/\u003e                    style = MaterialTheme.typography.headlineSmall\u003cbr/\u003e                )\u003cbr/\u003e            }\u003cbr/\u003e        },\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"2ff3\"\u003eToggle Button Interaction\u003c/h2\u003e\u003cp id=\"6a30\"\u003eA simple button toggles the sheet state on tap ‚Äî great for onboarding flows or expanding menus:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9dec\"\u003econtent = {\u003cbr/\u003e            Column(Modifier.fillMaxSize()) {\u003cbr/\u003e                Spacer(Modifier.height(16.dp))\u003cbr/\u003e                Button(\u003cbr/\u003e                    onClick = {\u003cbr/\u003e                        scope.launch {\u003cbr/\u003e                            if (scaffoldState.bottomSheetState.isCollapsed)\u003cbr/\u003e                                scaffoldState.bottomSheetState.expand()\u003cbr/\u003e                            else\u003cbr/\u003e                                scaffoldState.bottomSheetState.collapse()\u003cbr/\u003e                        }\u003cbr/\u003e                    },\u003cbr/\u003e                    Modifier.align(Alignment.CenterHorizontally)\u003cbr/\u003e                ) {\u003cbr/\u003e                    Text(\u0026#34;Toggle Sheet\u0026#34;)\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"8a26\"\u003eWhat‚Äôs Happening Behind the Scenes?\u003c/h2\u003e\u003cp id=\"11a9\"\u003eWe combine these simple tools:\u003c/p\u003e\u003cul\u003e\u003cli id=\"249e\"\u003e\u003ccode\u003eprogress.fraction\u003c/code\u003e ‚Üí Tracks how much the sheet is open\u003c/li\u003e\u003cli id=\"d33a\"\u003e\u003ccode\u003eanimateDpAsState\u003c/code\u003e, \u003ccode\u003eanimateFloatAsState\u003c/code\u003e ‚Üí Animate values smoothly\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"2cca\"\u003eWe animate:\u003c/p\u003e\u003cul\u003e\u003cli id=\"0fd3\"\u003e\u003cstrong\u003eElevation\u003c/strong\u003e ‚Üí subtle drop shadow for depth\u003c/li\u003e\u003cli id=\"0be3\"\u003e\u003cstrong\u003eScale\u003c/strong\u003e ‚Üí makes the sheet header ‚Äúgrow‚Äù\u003c/li\u003e\u003cli id=\"4d01\"\u003e\u003cstrong\u003eCorner radius\u003c/strong\u003e ‚Üí goes from soft round to flatter look\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"d973\"\u003eThis makes the bottom sheet feel \u003cstrong\u003efluid and interactive\u003c/strong\u003e, exactly what modern apps need.\u003c/p\u003e\u003ch2 id=\"89f5\"\u003eBonus: Programmatic Toggle\u003c/h2\u003e\u003cp id=\"de08\"\u003eDo you need to open/close the sheet manually? You can do it like this:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c314\"\u003escope.launch {\u003cbr/\u003e    scaffoldState.bottomSheetState.expand() // or collapse()\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"eb23\"\u003ePerfect for use cases like:\u003c/p\u003e\u003cul\u003e\u003cli id=\"0609\"\u003eOnboarding steps\u003c/li\u003e\u003cli id=\"2ca5\"\u003eNavigation drawers\u003c/li\u003e\u003cli id=\"5743\"\u003eConditional UI flows\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"fc4c\"\u003eUse Cases for This Pattern\u003c/h2\u003e\u003cp id=\"f6dc\"\u003eHere are a few ideas where this interaction shines:\u003c/p\u003e\u003cul\u003e\u003cli id=\"d102\"\u003eNote-taking apps with expanding details\u003c/li\u003e\u003cli id=\"fd18\"\u003eMusic players with animated album headers\u003c/li\u003e\u003cli id=\"1b44\"\u003eTask managers with dynamic status sheets\u003c/li\u003e\u003cli id=\"0701\"\u003eDesign systems with responsive bottom panels\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"417e\"\u003eFinal Thoughts\u003c/h2\u003e\u003cp id=\"f972\"\u003eThis little animation packs a big punch. It‚Äôs a great example of why \u003cstrong\u003eJetpack Compose\u003c/strong\u003e is so powerful: you get \u003cstrong\u003eclean state separation\u003c/strong\u003e, \u003cstrong\u003efluid animations\u003c/strong\u003e, and \u003cstrong\u003eless boilerplate\u003c/strong\u003e.\u003c/p\u003e\u003ch2 id=\"6ebf\"\u003eüôå Stay Tuned for More\u003c/h2\u003e\u003cp id=\"0a06\"\u003eThis article is part of my \u003cstrong\u003eAndroid UI Series\u003c/strong\u003e. Upcoming articles will cover:\u003c/p\u003e\u003cul\u003e\u003cli id=\"8870\"\u003eAnimated FABs\u003c/li\u003e\u003cli id=\"8bce\"\u003eSwipe-to-dismiss cards\u003c/li\u003e\u003cli id=\"c6c8\"\u003eSticky headers\u003c/li\u003e\u003cli id=\"ac80\"\u003eResponsive layouts for foldables\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"37f5\"\u003eIf you liked this post:\u003c/p\u003e\u003cp id=\"7cf5\"\u003e‚úÖ Follow for more Compose UI insights\u003cbr/\u003e üí¨ Drop a comment if you want the GitHub repo\u003cbr/\u003e üîÅ Share with dev friends who love slick UIs\u003c/p\u003e\u003cp id=\"d300\"\u003e\u003cstrong\u003e\u003cem\u003e‚úçÔ∏è *About the Author*\u003c/em\u003e\u003c/strong\u003e\u003cbr/\u003e\u003cem\u003eAsha Mishra is a Senior Android Developer with 9+ years of experience building secure, high-performance apps using Jetpack Compose, Kotlin, and Clean Architecture. She has led development at Visa, UOB Singapore, and Deutsche Bahn. Passionate about Compose internals, modern Android architecture, and developer productivity.\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-07-22T14:39:54.828Z",
  "modifiedTime": null
}
