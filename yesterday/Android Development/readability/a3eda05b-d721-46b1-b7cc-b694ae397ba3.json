{
  "id": "a3eda05b-d721-46b1-b7cc-b694ae397ba3",
  "title": "Using Renovate to update build JDK",
  "link": "https://jakewharton.com/using-renovate-to-update-build-jdk/",
  "description": "",
  "author": "",
  "published": "2025-01-08T00:00:00+00:00",
  "source": "https://jakewharton.com/atom.xml",
  "categories": null,
  "byline": "",
  "length": 1863,
  "excerpt": "08 January 2025",
  "siteName": "Jake Wharton",
  "favicon": "",
  "text": "Using Renovate to update build JDK 08 January 2025 You want to be using the latest JDK for development. Don’t use Gradle toolchains, they’ll needlessly force you to use old JDKs. You can still target and test on old JVM versions but develop with the latest and greatest. Java and the JDK are literally built for this. Locally this hasn’t been a problem. Homebrew (or your favorite equivalent) will keep your default JDK at the latest. Keeping my GitHub actions up-to-date, however, frequently slips my mind. I find projects using 19 or 20 simply because I haven’t touched the CI build in the two years since 19 or 20 was the latest. We’re already using Renovate to keep dependencies up to date. With a little extra programming in JSON (wince) we can have the JDK version updated to latest as well. First, migrate the existing build JDK version in your GitHub Action to a .github/.java-version file1. Next, change the setup-java action to use this file rather than a hard-coded version. - uses: actions/setup-java@v4 with: distribution: 'zulu' - java-version: 21 + java-version-file: .github/.java-version Finally, in your renovate.json52, add a custom manager to update this file3. ignorePresets: [ // Ensure we get the latest version and are not pinned to old versions. 'workarounds:javaLTSVersions', ], customManagers: [ // Update .java-version file with the latest JDK version. { customType: 'regex', fileMatch: [ '\\\\.java-version$', ], matchStrings: [ '(?\u003ccurrentValue\u003e.*)\\\\n', ], datasourceTemplate: 'java-version', depNameTemplate: 'java', // Only write the major version. extractVersionTemplate: '^(?\u003cversion\u003e\\\\d+)', }, ], Commit, push, and wait for Renovate to send you a PR4. Now your CI build automatically tracks the latest JDK. — Jake Wharton",
  "image": "https://jakewharton.com/static/default_image.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n      \u003ch2\u003eUsing Renovate to update build JDK\u003c/h2\u003e\n      \u003cp\u003e08 January 2025\u003c/p\u003e\n\n      \u003cp\u003eYou want to be using the latest JDK for development. \n\u003ca href=\"https://jakewharton.com/gradle-toolchains-are-rarely-a-good-idea/\"\u003eDon’t use Gradle toolchains\u003c/a\u003e, they’ll needlessly force you to use old JDKs.\nYou can still \u003ca href=\"https://jakewharton.com/build-on-latest-java-test-through-lowest-java/\"\u003etarget and test on old JVM versions\u003c/a\u003e but develop with the latest and greatest.\nJava and the JDK are literally built for this.\u003c/p\u003e\n\n\u003cp\u003eLocally this hasn’t been a problem.\nHomebrew (or your favorite equivalent) will keep your default JDK at the latest.\nKeeping my GitHub actions up-to-date, however, frequently slips my mind.\nI find projects using 19 or 20 simply because I haven’t touched the CI build in the two years since 19 or 20 was the latest.\u003c/p\u003e\n\n\u003cp\u003eWe’re already using Renovate to keep dependencies up to date.\nWith a little extra programming in JSON \u003cem\u003e(wince)\u003c/em\u003e we can have the JDK version updated to latest as well.\u003c/p\u003e\n\n\u003cp\u003eFirst, migrate the existing build JDK version in your GitHub Action to a \u003ccode\u003e.github/.java-version\u003c/code\u003e file\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\"\u003e1\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eNext, change the \u003ccode\u003esetup-java\u003c/code\u003e action to use this file rather than a hard-coded version.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003ccode\u003e - uses: actions/setup-java@v4\n   with:\n     distribution: \u0026#39;zulu\u0026#39;\n\u003cspan\u003e-    java-version: 21\n\u003c/span\u003e\u003cspan\u003e+    java-version-file: .github/.java-version\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003eFinally, in your \u003ccode\u003erenovate.json5\u003c/code\u003e\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\"\u003e2\u003c/a\u003e\u003c/sup\u003e, add a custom manager to update this file\u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\"\u003e3\u003c/a\u003e\u003c/sup\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eignorePresets: [\n  // Ensure we get the latest version and are not pinned to old versions.\n  \u0026#39;workarounds:javaLTSVersions\u0026#39;,\n],\ncustomManagers: [\n  // Update .java-version file with the latest JDK version.\n  {\n    customType: \u0026#39;regex\u0026#39;,\n    fileMatch: [\n      \u0026#39;\\\\.java-version$\u0026#39;,\n    ],\n    matchStrings: [\n      \u0026#39;(?\u0026lt;currentValue\u0026gt;.*)\\\\n\u0026#39;,\n    ],\n    datasourceTemplate: \u0026#39;java-version\u0026#39;,\n    depNameTemplate: \u0026#39;java\u0026#39;,\n    // Only write the major version.\n    extractVersionTemplate: \u0026#39;^(?\u0026lt;version\u0026gt;\\\\d+)\u0026#39;,\n  },\n],\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCommit, push, and wait for Renovate to send you a PR\u003csup id=\"fnref:4\"\u003e\u003ca href=\"#fn:4\"\u003e4\u003c/a\u003e\u003c/sup\u003e.\nNow your CI build automatically tracks the latest JDK.\u003c/p\u003e\n\n\n\n\n      \u003cp\u003e— Jake Wharton\u003c/p\u003e\n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-01-08T00:00:00Z",
  "modifiedTime": null
}
