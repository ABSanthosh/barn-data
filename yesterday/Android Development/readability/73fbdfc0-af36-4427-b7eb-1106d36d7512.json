{
  "id": "73fbdfc0-af36-4427-b7eb-1106d36d7512",
  "title": "Mastering Scroll in Jetpack Compose — PART 1",
  "link": "https://proandroiddev.com/mastering-scroll-in-jetpack-compose-part-1-7bacefce436e?source=rss----c72404660798---4",
  "description": "Scrolling is a fundamental element of any mobile app, and Jetpack Compose provides powerful tools to create smooth and efficient scrolling…Continue reading on ProAndroidDev »",
  "author": "Karishma Agrawal",
  "published": "Tue, 12 Nov 2024 15:06:40 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "androiddev",
    "android-app-development",
    "learnwithkarishma",
    "android",
    "jetpack-compose"
  ],
  "byline": "Karishma Agrawal",
  "length": 1298,
  "excerpt": "Scrolling is a fundamental element of any mobile app, and Jetpack Compose provides powerful tools to create smooth and efficient scrolling experiences. This article dives into the world of scroll in…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Scrolling is a fundamental element of any mobile app, and Jetpack Compose provides powerful tools to create smooth and efficient scrolling experiences. This article dives into the world of scroll in Compose, starting with the foundational concepts and gradually progressing towards more complex scenarios.Compose offers two workhorses for creating scrollable lists: LazyColumn for vertical scrolling and LazyRow for horizontal scrolling. They behave similarly to RecyclerView in XML, efficiently rendering only the visible items while maintaining excellent performance.Lazy Column@Composablefun LazyColumnExample() { val items = listOf(\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\", \"Item 6\", \"Item 7\", \"Item 8\", \"Item 9\", \"Item 10\",\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\", \"Item 6\", \"Item 7\", \"Item 8\", \"Item 9\", \"Item 10\") LazyColumn( modifier = Modifier .fillMaxSize() .background(Color.LightGray) ) { items(items.size) { item -\u003e Box( modifier = Modifier .fillMaxWidth() .padding(16.dp), contentAlignment = Alignment.Center ) { Text( text = items.get(item), color = Color.Black )…",
  "image": "https://miro.medium.com/v2/da:true/resize:fit:420/1*aCXgpKg8i9cUEggreqZMeQ.gif",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp id=\"e62c\"\u003eScrolling is a fundamental element of any mobile app, and Jetpack Compose provides powerful tools to create smooth and efficient scrolling experiences. This article dives into the world of scroll in Compose, starting with the foundational concepts and gradually progressing towards more complex scenarios.\u003c/p\u003e\u003cp id=\"0e5d\"\u003eCompose offers two workhorses for creating scrollable lists: \u003ccode\u003eLazyColumn\u003c/code\u003e for vertical scrolling and \u003ccode\u003eLazyRow\u003c/code\u003e for horizontal scrolling. They behave similarly to \u003ccode\u003eRecyclerView\u003c/code\u003e in XML, efficiently rendering only the visible items while maintaining excellent performance.\u003c/p\u003e\u003ch2 id=\"8412\"\u003eLazy Column\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"e792\"\u003e@Composable\u003cbr/\u003efun LazyColumnExample() {\u003cbr/\u003e    val items = listOf(\u0026#34;Item 1\u0026#34;, \u0026#34;Item 2\u0026#34;, \u0026#34;Item 3\u0026#34;, \u0026#34;Item 4\u0026#34;, \u0026#34;Item 5\u0026#34;, \u0026#34;Item 6\u0026#34;, \u0026#34;Item 7\u0026#34;, \u0026#34;Item 8\u0026#34;, \u0026#34;Item 9\u0026#34;, \u0026#34;Item 10\u0026#34;,\u0026#34;Item 1\u0026#34;, \u0026#34;Item 2\u0026#34;, \u0026#34;Item 3\u0026#34;, \u0026#34;Item 4\u0026#34;, \u0026#34;Item 5\u0026#34;, \u0026#34;Item 6\u0026#34;, \u0026#34;Item 7\u0026#34;, \u0026#34;Item 8\u0026#34;, \u0026#34;Item 9\u0026#34;, \u0026#34;Item 10\u0026#34;)\u003cp\u003e    LazyColumn(\u003cbr/\u003e        modifier = Modifier\u003cbr/\u003e            .fillMaxSize()\u003cbr/\u003e            .background(Color.LightGray)\u003cbr/\u003e    ) {\u003cbr/\u003e        items(items.size) { item -\u0026gt;\u003cbr/\u003e            Box(\u003cbr/\u003e                modifier = Modifier\u003cbr/\u003e                    .fillMaxWidth()\u003cbr/\u003e                    .padding(16.dp),\u003cbr/\u003e                contentAlignment = Alignment.Center\u003cbr/\u003e            ) {\u003cbr/\u003e                Text(\u003cbr/\u003e                    text = items.get(item),\u003cbr/\u003e                    color = Color.Black\u003cbr/\u003e                )…\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2024-11-09T07:33:08.217Z",
  "modifiedTime": null
}
