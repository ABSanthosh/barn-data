{
  "id": "913e9c62-6d24-481c-8226-8507a09947a8",
  "title": "Build Stunning Grids in Minutes with LazyVerticalGrid | |",
  "link": "https://proandroiddev.com/build-stunning-grids-in-minutes-with-lazyverticalgrid-17702887cccb?source=rss----c72404660798---4",
  "description": "",
  "author": "Raphael Cohen",
  "published": "Mon, 21 Oct 2024 12:27:30 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android",
    "android-app-development",
    "jetpack-compose",
    "kotlin",
    "androiddev"
  ],
  "byline": "Raphael Cohen",
  "length": 10287,
  "excerpt": "Want to create stunning grid layouts in your Jetpack Compose app? Look no further than LazyVerticalGrid. This powerful tool simplifies the process of designing and implementing efficient grid-based‚Ä¶",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Jetpack Compose LazyVerticalGrid in action in the NHL Hockey app on Google Play.Want to create stunning grid layouts in your Jetpack Compose app? Look no further than LazyVerticalGrid. This powerful tool simplifies the process of designing and implementing efficient grid-based interfaces. In this comprehensive tutorial, I‚Äôll share my insights and experience using LazyVerticalGrid in a real-world production app on Google Play. I‚Äôll explore its key features, best practices, and practical tips to help you create stunning grids that captivate your users. ü§ìTo populate the grid with player data, I make a network call to retrieve information for the selected season. Here‚Äôs how I have implemented that:// Wrapper for state managementsealed class PlayersUiState { data object Loading : PlayersUiState() data class Success(val players: List\u003cPlayer\u003e) : PlayersUiState() data class Error(val throwable: Throwable) : PlayersUiState()} private val _uiState = MutableStateFlow\u003cPlayersUiState\u003e(PlayersUiState.Loading) val uiState: StateFlow\u003cPlayersUiState\u003e = _uiState.asStateFlow() private val coroutineExceptionHandler = CoroutineExceptionHandler { _, throwable -\u003e viewModelScope.launch { _uiState.emit(PlayersUiState.Error(throwable = throwable)) } }suspend fun getSkatersAndGoalies(season: String) { viewModelScope.launch(context = ioDispatcher + coroutineExceptionHandler) { repository.getAllNhlPlayers(season) .catch { e -\u003e _uiState.emit(PlayersUiState.Error(Throwable(e.message ?: \"Unknown error\"))) } .collectLatest { players -\u003e val sortedPlayers = (players.forwards + players.defensemen + players.goalies).sortedBy { it.lastName.default } _uiState.emit(PlayersUiState.Success(sortedPlayers)) } }}Fetch player data: Use repository.getAllNhlPlayers(season) to retrieve player data for the specified season.Handle errors: Catch any exceptions that might occur during the network call and emit an error state to the UI.Sort players: Combine the forwards, defensemen, and goalies, then sort them by last name.Emit success: Emit a success state to the UI, including the sorted players and the transformed season string.UI Composable:Now I bring the state to life by connecting it to the UI components. Here‚Äôs how I‚Äôve implemented it:@Composablefun ShowLazyVerticalGridPlayers(uiState: PlayersUiState.Success, navController: NavController) { val players = uiState.players val scrollBehavior = TopAppBarDefaults.exitUntilCollapsedScrollBehavior(rememberTopAppBarState()) val isCollapsed by remember { derivedStateOf { scrollBehavior.state.collapsedFraction == 1f } } val title = if (!isCollapsed) \"ALL NHL\\nPLAYERS\" else \"PLAYERS\" Scaffold( modifier = Modifier.nestedScroll(scrollBehavior.nestedScrollConnection), topBar = { ParallaxToolBarV2( scrollBehavior = scrollBehavior, navController = navController, title = title, color = DefaultBlack, actions = { AsyncImage( model = ImageRequest.Builder(LocalContext.current) .data(DefaultNhlTeam.teamLogo) .decoderFactory(SvgDecoder.Factory()) .crossfade(true) .diskCachePolicy(CachePolicy.ENABLED) .build(), contentDescription = null, modifier = Modifier.padding(horizontal = 8.dp).size(60.dp) ) Spacer(modifier = Modifier.width(dimensionResource(R.dimen.margin_medium_large))) } ) }, bottomBar = { BottomAppBar(Modifier.fillMaxWidth()) { SetAdmobAdaptiveBanner() } }, ) { padding -\u003e LazyVerticalGrid( modifier = Modifier.padding(padding), columns = GridCells.Fixed(3), contentPadding = PaddingValues(start = 12.dp, top = 16.dp, end = 12.dp, bottom = 16.dp), content = { items(players.size) { index -\u003e PlayerCell(players[index], navController) } } ) }}The LazyVerticalGrid component creates a grid layout with 3 columns. It applies padding around the grid and its content, and populates the grid with PlayerCell components based on the players list.Compose Fun Fact:You should hoist UI state to the lowest common ancestor between all the composables that read and write it.Note: You shouldn‚Äôt pass ViewModel instances down to other composables. (You can‚Äôt build @Preview) ‚ùåüëÄ‚Äî Instead ‚ÄîUse: Property drilling‚ÄúProperty drilling‚Äù refers to passing data through several nested children components to the location where they‚Äôre read.The Cell:The PlayerCell composable displays each player's information in a simple card format. It includes the player's headshot, name, and a \"PROFILE\" button to navigate to their details. Here's how it's structured:@Composablefun PlayerCell(player: Player, navController: NavController) { val scope = rememberCoroutineScope() DisposableEffect(scope) { onDispose { scope.cancel() } } Card(modifier = Modifier.padding(4.dp).fillMaxWidth(), border = BorderStroke(1.dp, colorResource(R.color.whiteSmokeColor)), colors = CardDefaults.cardColors(containerColor = colorResource(R.color.whiteColor))) { Column(modifier = Modifier.fillMaxWidth(), verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally) { Spacer(Modifier.height(12.dp)) Box(Modifier.clip(CircleShape).size(74.dp).background(colorResource(R.color.offWhiteColor)) .border(shape = CircleShape, width = 1.dp, color = colorResource(R.color.whiteSmokeColor))) { AsyncImage(model = player.headshot, contentDescription = null, modifier = Modifier.clip(CircleShape)) } Spacer(Modifier.height(6.dp)) Text( text = player.firstName.default, style = TextStyle(platformStyle = PlatformTextStyle(includeFontPadding = false)), fontSize = 15.dp.value.sp, ) val lastName = player.lastName.default.takeIf { it.length \u003e 9 }?.substring(0, 9)?.plus(\"..\") ?: player.lastName.default Text( text = lastName, fontWeight = FontWeight.Bold, style = TextStyle(platformStyle = PlatformTextStyle(includeFontPadding = false)), fontSize = 15.dp.value.sp, ) Spacer(Modifier.height(6.dp)) Text( text = \"PROFILE\", textAlign = TextAlign.Center, fontSize = 12.dp.value.sp, fontWeight = FontWeight.SemiBold, style = TextStyle(platformStyle = PlatformTextStyle(includeFontPadding = false)), modifier = Modifier.border(shape = RoundedCornerShape(30.dp), width = 1.dp, color = Color.Black) .background(Color.Transparent).padding(horizontal = 16.dp, vertical = 2.dp) .clickable { scope.launch { navController.navigate(PlayerProfile.createRoute(id = player.id)) } } ) Spacer(Modifier.height(12.dp)) } }}@Preview the Grid in Android Studio:ShowLazyVerticalGridPlayersScreenPreview composable, allowing developers to visualize how the ShowLazyVerticalGridPlayersScreen component will look and behave without running the entire app. It uses a @Preview annotation to specify the preview configuration and provides a sample list of players to populate the grid.@RequiresApi(Build.VERSION_CODES.O)@Preview(showBackground = true, showSystemUi = true)@Composableprivate fun ShowLazyVerticalGridPlayersScreenPreview( @PreviewParameter(ShowLazyVerticalGridPlayersScreenPreviewParameterProvider::class) players: List\u003cPlayer\u003e) { Column { ShowLazyVerticalGridPlayers(PlayersUiState.Success(players, \"\"), rememberNavController()) }}private class ShowLazyVerticalGridPlayersScreenPreviewParameterProvider : PreviewParameterProvider\u003cList\u003cPlayer\u003e\u003e { override val values: Sequence\u003cList\u003cPlayer\u003e\u003e = sequenceOf( listOf( Player(firstName = Default(\"Connor\"), lastName = Default(\"McDavid\")), Player(firstName = Default(\"James\"), lastName = Default(\"van Riemsdyk\")), Player(firstName = Default(\"John\"), lastName = Default(\"Brackenborough\")), Player(firstName = Default(\"Sidney\"), lastName = Default(\"Crosby\")), Player(firstName = Default(\"Bobby\"), lastName = Default(\"Brink\")), Player(firstName = Default(\"Austin\"), lastName = Default(\"Matthews\")) ) )}LazyVerticalGrid Screen in Android StudioDON‚ÄôT FORGET TO TEST, TEST, TEST: üß™üß™üß™To ensure the getSkatersAndGoalies function is working correctly, I have written a unit test to verify its behavior. Here's a breakdown of the test:@Testfun `getSkatersAndGoalies() should emit list of skaters`() = runTest { // Given val goalie = Player(positionCode = \"G\") val skater = Player(positionCode = \"C\") val mockPlayers = Players(forwards = listOf(skater), goalies = listOf(goalie)) val mockSeason = \"20232024\" // When coEvery { mockDateUtilsRepository.getCurrentSeasonInYears() } returns mockSeason coEvery { mockRepository.getAllNhlPlayers(mockSeason) } returns flowOf(mockPlayers) viewModel.getSkatersAndGoalies(mockSeason) advanceUntilIdle() // Then val actualPlayers = (viewModel.uiState.value as? PlayersUiState.Success)?.players.orEmpty() assertEquals(2, actualPlayers.size)}Major tech companies (PayPal, Google, Meta, Salesforce‚Ä¶) value engineers who understand the significance of testing for building reliable and high-quality applications and may help you land that big bank jobby-job. ü§ûüèΩüòÉüí∞That‚Äôs a wrap! With LazyVerticalGrid, you‚Äôve unlocked the power to build stunning grid layouts in your Jetpack Compose app. Ready to see it in action? Download the NHL Hockey app on Google Play and experience the magic firsthand. Don‚Äôt forget to leave a review and let me know what you think!üó£Ô∏è: reach out on X or InstaBest,RC",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*L595ZfuVwNGgoBuPr5mzBQ.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ca href=\"https://medium.com/@cohen.n.raphael?source=post_page-----17702887cccb--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"Raphael Cohen\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*xhANrotyDl7RWXyQpNyZCQ.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page-----17702887cccb--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cfigure\u003e\u003cfigcaption\u003eJetpack Compose \u003ccode\u003eLazyVerticalGrid\u003c/code\u003e in action in the NHL Hockey app on Google Play.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"bbcb\"\u003eWant to create stunning grid layouts in your Jetpack Compose app? Look no further than \u003ccode\u003eLazyVerticalGrid\u003c/code\u003e. This powerful tool \u003cstrong\u003esimplifies\u003c/strong\u003e the process of designing and implementing efficient grid-based interfaces. In this comprehensive tutorial, I‚Äôll share my insights and experience using \u003ccode\u003eLazyVerticalGrid\u003c/code\u003e in a real-world \u003cstrong\u003eproduction\u003c/strong\u003e app on Google Play. I‚Äôll explore its key features, best practices, and practical tips to help you create stunning grids that captivate your users. ü§ì\u003c/p\u003e\u003cp id=\"fc48\"\u003e\u003cstrong\u003eTo populate the grid with player data, I make a network call to retrieve information for the selected season. \u003c/strong\u003eHere‚Äôs how I have implemented that:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ce83\"\u003e\u003cbr/\u003e// Wrapper for state management\u003cbr/\u003esealed class PlayersUiState {\u003cbr/\u003e    data object Loading : PlayersUiState()\u003cbr/\u003e    data class Success(val players: List\u0026lt;Player\u0026gt;) : PlayersUiState()\u003cbr/\u003e    data class Error(val throwable: Throwable) : PlayersUiState()\u003cbr/\u003e}\u003cp\u003e private val _uiState = MutableStateFlow\u0026lt;PlayersUiState\u0026gt;(PlayersUiState.Loading)\u003cbr/\u003e    val uiState: StateFlow\u0026lt;PlayersUiState\u0026gt; = _uiState.asStateFlow()\u003c/p\u003e\u003cp\u003e    private val coroutineExceptionHandler = CoroutineExceptionHandler { _, throwable -\u0026gt;\u003cbr/\u003e        viewModelScope.launch {\u003cbr/\u003e            _uiState.emit(PlayersUiState.Error(throwable = throwable))\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003esuspend fun getSkatersAndGoalies(season: String) {\u003cbr/\u003e    viewModelScope.launch(context = ioDispatcher + coroutineExceptionHandler) {\u003cbr/\u003e        repository.getAllNhlPlayers(season)\u003cbr/\u003e            .catch { e -\u0026gt;\u003cbr/\u003e                _uiState.emit(PlayersUiState.Error(Throwable(e.message ?: \u0026#34;Unknown error\u0026#34;)))\u003cbr/\u003e            }\u003cbr/\u003e            .collectLatest { players -\u0026gt;\u003cbr/\u003e                val sortedPlayers = (players.forwards + players.defensemen + players.goalies).sortedBy { it.lastName.default }\u003cbr/\u003e                _uiState.emit(PlayersUiState.Success(sortedPlayers))\u003cbr/\u003e            }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cul\u003e\u003cli id=\"687d\"\u003e\u003cstrong\u003eFetch player data:\u003c/strong\u003e Use \u003ccode\u003erepository.getAllNhlPlayers(season)\u003c/code\u003e to retrieve player data for the specified season.\u003c/li\u003e\u003cli id=\"baac\"\u003e\u003cstrong\u003eHandle errors:\u003c/strong\u003e Catch any exceptions that might occur during the network call and emit an error state to the UI.\u003c/li\u003e\u003cli id=\"0c49\"\u003e\u003cstrong\u003eSort players:\u003c/strong\u003e Combine the forwards, defensemen, and goalies, then sort them by last name.\u003c/li\u003e\u003cli id=\"2199\"\u003e\u003cstrong\u003eEmit success:\u003c/strong\u003e Emit a success state to the UI, including the sorted players and the transformed season string.\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"af80\"\u003eUI Composable:\u003c/h2\u003e\u003cp id=\"c956\"\u003e\u003cstrong\u003eNow I bring the state to life by connecting it to the UI components.\u003c/strong\u003e Here‚Äôs how I‚Äôve implemented it:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"c564\"\u003e@Composable\u003cbr/\u003efun ShowLazyVerticalGridPlayers(uiState: PlayersUiState.Success, navController: NavController) {\u003cbr/\u003e    val players = uiState.players\u003cbr/\u003e    val scrollBehavior = TopAppBarDefaults.exitUntilCollapsedScrollBehavior(rememberTopAppBarState())\u003cbr/\u003e    val isCollapsed by remember { derivedStateOf { scrollBehavior.state.collapsedFraction == 1f } }\u003cbr/\u003e    val title = if (!isCollapsed) \u0026#34;ALL NHL\\nPLAYERS\u0026#34; else \u0026#34;PLAYERS\u0026#34;\u003cbr/\u003e    Scaffold(\u003cbr/\u003e        modifier = Modifier.nestedScroll(scrollBehavior.nestedScrollConnection),\u003cbr/\u003e        topBar = {\u003cbr/\u003e            ParallaxToolBarV2(\u003cbr/\u003e                scrollBehavior = scrollBehavior,\u003cbr/\u003e                navController = navController,\u003cbr/\u003e                title = title,\u003cbr/\u003e                color = DefaultBlack,\u003cbr/\u003e                actions = {\u003cbr/\u003e                    AsyncImage(\u003cbr/\u003e                        model = ImageRequest.Builder(LocalContext.current)\u003cbr/\u003e                            .data(DefaultNhlTeam.teamLogo)\u003cbr/\u003e                            .decoderFactory(SvgDecoder.Factory())\u003cbr/\u003e                            .crossfade(true)\u003cbr/\u003e                            .diskCachePolicy(CachePolicy.ENABLED)\u003cbr/\u003e                            .build(),\u003cbr/\u003e                        contentDescription = null,\u003cbr/\u003e                        modifier = Modifier.padding(horizontal = 8.dp).size(60.dp)\u003cp\u003e                    )\u003cbr/\u003e                    Spacer(modifier = Modifier.width(dimensionResource(R.dimen.margin_medium_large)))\u003cbr/\u003e                }\u003cbr/\u003e            )\u003cbr/\u003e        },\u003cbr/\u003e        bottomBar = { BottomAppBar(Modifier.fillMaxWidth()) { SetAdmobAdaptiveBanner() } },\u003cbr/\u003e    ) { padding -\u0026gt;\u003cbr/\u003e        LazyVerticalGrid(\u003cbr/\u003e            modifier = Modifier.padding(padding),\u003cbr/\u003e            columns = GridCells.Fixed(3),\u003cbr/\u003e            contentPadding = PaddingValues(start = 12.dp, top = 16.dp, end = 12.dp, bottom = 16.dp),\u003cbr/\u003e            content = {\u003cbr/\u003e                items(players.size) { index -\u0026gt;\u003cbr/\u003e                    PlayerCell(players[index], navController)\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"c083\"\u003eThe \u003ccode\u003eLazyVerticalGrid\u003c/code\u003e component creates a grid layout with 3 columns. It applies padding around the grid and its content, and populates the grid with \u003ccode\u003ePlayerCell\u003c/code\u003e components based on the \u003ccode\u003eplayers\u003c/code\u003e list.\u003c/p\u003e\u003ch2 id=\"5c96\"\u003e\u003cstrong\u003eCompose Fun Fact:\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"86f5\"\u003e\u003cstrong\u003eYou should hoist UI state to the lowest common ancestor between all the composables that read and write it.\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"b4a4\"\u003eNote: You shouldn‚Äôt pass ViewModel instances down to other composables. (You can‚Äôt build \u003cstrong\u003e@Preview\u003c/strong\u003e) ‚ùåüëÄ\u003c/p\u003e\u003cp id=\"d61f\"\u003e‚Äî Instead ‚Äî\u003c/p\u003e\u003cp id=\"7ea8\"\u003eUse: \u003cstrong\u003eProperty drilling\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"4f8f\"\u003e‚ÄúProperty drilling‚Äù refers to passing data through several nested children components to the location where they‚Äôre read.\u003c/p\u003e\u003ch2 id=\"a8b7\"\u003e\u003cstrong\u003eThe Cell:\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"9f56\"\u003e\u003cstrong\u003eThe \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003ePlayerCell\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e composable displays each player\u0026#39;s information in a simple card format.\u003c/strong\u003e It includes the player\u0026#39;s headshot, name, and a \u0026#34;PROFILE\u0026#34; button to navigate to their details. Here\u0026#39;s how it\u0026#39;s structured:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2d53\"\u003e@Composable\u003cbr/\u003efun PlayerCell(player: Player, navController: NavController) {\u003cbr/\u003e    val scope = rememberCoroutineScope()\u003cbr/\u003e    DisposableEffect(scope) { onDispose { scope.cancel() } }\u003cbr/\u003e    Card(modifier = Modifier.padding(4.dp).fillMaxWidth(),\u003cbr/\u003e        border = BorderStroke(1.dp, colorResource(R.color.whiteSmokeColor)),\u003cbr/\u003e        colors = CardDefaults.cardColors(containerColor = colorResource(R.color.whiteColor))) {\u003cbr/\u003e        Column(modifier = Modifier.fillMaxWidth(),\u003cbr/\u003e            verticalArrangement = Arrangement.Center, horizontalAlignment = Alignment.CenterHorizontally) {\u003cbr/\u003e            Spacer(Modifier.height(12.dp))\u003cbr/\u003e            Box(Modifier.clip(CircleShape).size(74.dp).background(colorResource(R.color.offWhiteColor))\u003cbr/\u003e                .border(shape = CircleShape, width = 1.dp, color = colorResource(R.color.whiteSmokeColor))) {\u003cbr/\u003e                AsyncImage(model = player.headshot, contentDescription = null, modifier = Modifier.clip(CircleShape))\u003cbr/\u003e            }\u003cbr/\u003e            Spacer(Modifier.height(6.dp))\u003cbr/\u003e            Text(\u003cbr/\u003e                text = player.firstName.default,\u003cbr/\u003e                style = TextStyle(platformStyle = PlatformTextStyle(includeFontPadding = false)),\u003cbr/\u003e                fontSize = 15.dp.value.sp,\u003cbr/\u003e            )\u003cbr/\u003e            val lastName = player.lastName.default.takeIf { it.length \u0026gt; 9 }?.substring(0, 9)?.plus(\u0026#34;..\u0026#34;) ?: player.lastName.default\u003cbr/\u003e            Text(\u003cbr/\u003e                text = lastName,\u003cbr/\u003e                fontWeight = FontWeight.Bold,\u003cbr/\u003e                style = TextStyle(platformStyle = PlatformTextStyle(includeFontPadding = false)),\u003cbr/\u003e                fontSize = 15.dp.value.sp,\u003cbr/\u003e            )\u003cbr/\u003e            Spacer(Modifier.height(6.dp))\u003cbr/\u003e            Text(\u003cbr/\u003e                text = \u0026#34;PROFILE\u0026#34;,\u003cbr/\u003e                textAlign = TextAlign.Center,\u003cbr/\u003e                fontSize = 12.dp.value.sp,\u003cbr/\u003e                fontWeight = FontWeight.SemiBold,\u003cbr/\u003e                style = TextStyle(platformStyle = PlatformTextStyle(includeFontPadding = false)),\u003cbr/\u003e                modifier = Modifier.border(shape = RoundedCornerShape(30.dp), width = 1.dp, color = Color.Black)\u003cbr/\u003e                    .background(Color.Transparent).padding(horizontal = 16.dp, vertical = 2.dp)\u003cbr/\u003e                    .clickable { scope.launch { navController.navigate(PlayerProfile.createRoute(id = player.id)) } }\u003cbr/\u003e            )\u003cbr/\u003e            Spacer(Modifier.height(12.dp))\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"395d\"\u003e@Preview the Grid in Android Studio:\u003c/h2\u003e\u003cp id=\"15ae\"\u003e\u003ccode\u003eShowLazyVerticalGridPlayersScreenPreview\u003c/code\u003e composable, allowing developers to visualize how the \u003ccode\u003eShowLazyVerticalGridPlayersScreen\u003c/code\u003e component will look and behave without running the entire app. It uses a \u003ccode\u003e@Preview\u003c/code\u003e annotation to specify the preview configuration and provides a sample list of players to populate the grid.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0c8a\"\u003e@RequiresApi(Build.VERSION_CODES.O)\u003cbr/\u003e@Preview(showBackground = true, showSystemUi = true)\u003cbr/\u003e@Composable\u003cbr/\u003eprivate fun ShowLazyVerticalGridPlayersScreenPreview(\u003cbr/\u003e    @PreviewParameter(ShowLazyVerticalGridPlayersScreenPreviewParameterProvider::class) players: List\u0026lt;Player\u0026gt;\u003cbr/\u003e) {\u003cbr/\u003e    Column {\u003cbr/\u003e        ShowLazyVerticalGridPlayers(PlayersUiState.Success(players, \u0026#34;\u0026#34;), rememberNavController())\u003cbr/\u003e    }\u003cbr/\u003e}\u003cp\u003eprivate class ShowLazyVerticalGridPlayersScreenPreviewParameterProvider : PreviewParameterProvider\u0026lt;List\u0026lt;Player\u0026gt;\u0026gt; {\u003cbr/\u003e    override val values: Sequence\u0026lt;List\u0026lt;Player\u0026gt;\u0026gt; =\u003cbr/\u003e        sequenceOf(\u003cbr/\u003e            listOf(\u003cbr/\u003e                Player(firstName = Default(\u0026#34;Connor\u0026#34;), lastName = Default(\u0026#34;McDavid\u0026#34;)),\u003cbr/\u003e                Player(firstName = Default(\u0026#34;James\u0026#34;), lastName = Default(\u0026#34;van Riemsdyk\u0026#34;)),\u003cbr/\u003e                Player(firstName = Default(\u0026#34;John\u0026#34;), lastName = Default(\u0026#34;Brackenborough\u0026#34;)),\u003cbr/\u003e                Player(firstName = Default(\u0026#34;Sidney\u0026#34;), lastName = Default(\u0026#34;Crosby\u0026#34;)),\u003cbr/\u003e                Player(firstName = Default(\u0026#34;Bobby\u0026#34;), lastName = Default(\u0026#34;Brink\u0026#34;)),\u003cbr/\u003e                Player(firstName = Default(\u0026#34;Austin\u0026#34;), lastName = Default(\u0026#34;Matthews\u0026#34;))\u003cbr/\u003e            )\u003cbr/\u003e        )\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cfigcaption\u003e\u003ccode\u003eLazyVerticalGrid Screen in Android Studio\u003c/code\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"806b\"\u003e\u003cstrong\u003eDON‚ÄôT FORGET TO TEST, TEST, TEST: \u003c/strong\u003eüß™üß™üß™\u003c/h2\u003e\u003cp id=\"fa70\"\u003e\u003cstrong\u003eTo ensure the \u003c/strong\u003e\u003ccode\u003e\u003cstrong\u003egetSkatersAndGoalies\u003c/strong\u003e\u003c/code\u003e\u003cstrong\u003e function is working correctly, I have written a unit test to verify its behavior. \u003c/strong\u003eHere\u0026#39;s a breakdown of the test:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"91ad\"\u003e@Test\u003cbr/\u003efun `getSkatersAndGoalies() should emit list of skaters`() = runTest {\u003cbr/\u003e    // Given\u003cbr/\u003e    val goalie = Player(positionCode = \u0026#34;G\u0026#34;)\u003cbr/\u003e    val skater = Player(positionCode = \u0026#34;C\u0026#34;)\u003cbr/\u003e    val mockPlayers = Players(forwards = listOf(skater), goalies = listOf(goalie))\u003cbr/\u003e    val mockSeason = \u0026#34;20232024\u0026#34;\u003cbr/\u003e    // When\u003cbr/\u003e    coEvery { mockDateUtilsRepository.getCurrentSeasonInYears() } returns mockSeason\u003cbr/\u003e    coEvery { mockRepository.getAllNhlPlayers(mockSeason) } returns flowOf(mockPlayers)\u003cbr/\u003e    viewModel.getSkatersAndGoalies(mockSeason)\u003cbr/\u003e    advanceUntilIdle()\u003cbr/\u003e    // Then\u003cbr/\u003e    val actualPlayers = (viewModel.uiState.value as? PlayersUiState.Success)?.players.orEmpty()\u003cbr/\u003e    assertEquals(2, actualPlayers.size)\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"43be\"\u003eMajor tech companies (\u003cem\u003ePayPal, Google, Meta, Salesforce‚Ä¶\u003c/em\u003e) \u003cstrong\u003evalue engineers who understand the significance of testing\u003c/strong\u003e for building reliable and high-quality applications and may help you land that big bank jobby-job. ü§ûüèΩüòÉüí∞\u003c/p\u003e\u003cp id=\"87e3\"\u003e\u003cstrong\u003eThat‚Äôs a wrap!\u003c/strong\u003e With \u003ccode\u003eLazyVerticalGrid\u003c/code\u003e, you‚Äôve unlocked the power to build stunning grid layouts in your Jetpack Compose app. Ready to see it in action? \u003ca href=\"https://play.google.com/store/apps/dev?id=7614313297301862853\u0026amp;hl=en_US\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e\u003cstrong\u003eDownload the NHL Hockey app on Google Play\u003c/strong\u003e\u003c/a\u003e and experience the magic firsthand. Don‚Äôt forget to leave a review and let me know what you think!\u003c/p\u003e\u003cp id=\"275e\"\u003eüó£Ô∏è: reach out on \u003ca href=\"https://x.com/BrickyardApps\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eX\u003c/a\u003e or \u003ca href=\"https://www.instagram.com/brickyardmobile\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eInsta\u003c/a\u003e\u003c/p\u003e\u003cp id=\"d365\"\u003eBest,\u003cbr/\u003eRC\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2024-10-19T06:33:34.521Z",
  "modifiedTime": null
}
