{
  "id": "4b08104e-f1cb-4cca-aada-94c1e36ac426",
  "title": "XML to Compose in Production: An Android Journey — Part 2",
  "link": "https://proandroiddev.com/xml-to-compose-in-production-an-android-journey-part-2-eeb425ed971a?source=rss----c72404660798---4",
  "description": "",
  "author": "Iago Fucolo",
  "published": "Fri, 16 May 2025 06:12:26 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android-app-development",
    "kotlin",
    "androiddev",
    "jetpack-compose",
    "android"
  ],
  "byline": "Iago Fucolo",
  "length": 6474,
  "excerpt": "This part will be focused in the design of the implementation using compose in a scalable way. We will think through all the components and make them reusable, and eventually release the first…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "PrayersScreen:This is the feature/screen that I have migrated from xml to compose in the part 1, as there I just developed a temporary solution, now I will show how implement it in a more scalable way.I have 3 main things in this screen: SearchInput, Selectable Filter and Prayers List.SanctusSearchBar:I implemented it inside sanctus-components, to make it a reusable component, although it is probably the only case, for now, that has a search input.A simple wrapper around the SearchBar from the Material 3 Compose library.Here are some things worth paying attention to:BodyLargeText used as the component for the placeholder component, but where does it come from?I have created all Text components based on the SanctusAppTypography, and a GenericText component used in all text labels.GenericText:It is just a wrapper for Text component from compose library to concentrate any other changes I want to make.TextLabels:You can observe that for the style I’m using the SanctusAppTypography to define how the labels looks like.Coming back to SanctusSearchBar, a few things are worth mentioning:leadingIcon: I have used a default Search icon from the material library, and for the tint color MaterialTheme.colorScheme.primary, so it will always reflect the SanctusAppTheme that was defined and explained in the first article.trailingIcon: this icon only appears if there is a text in the search input, and if the icon is clicked it clears the input and triggers the onSearch listener to reset the search state.To finish this component, I used 4 parameters, but only one is mandatory: query. It represents the text typed by the user and is used for the search. The responsibility for handling it stays outside the component — in this case, it’s managed in the ViewModel as a StateFlow.Since the query is managed in the ViewModel using StateFlow, the data will survive configuration changes and persists until the ViewModel is destroyed.PrayersScreen using SanctusSearchBarWhy did I use collectAsStateWithLifecycle?Calling the selectedFilters StateFlow from the ViewModel using this extension function makes it a compose state, meaning it is now a lifecycle aware, so it will only collect the selectedFilters when the composable is an active lifecycle, preventing memory leaks.PrayersFilterComponent:The filters, which are selectable items, will reflect which types of prayers will be displayed in the list.I have created 2 main components in the sanctus-components module that represent the filter:SelectableItem:I have set the colors using the theme of the app, but if in the future I want to use others, I can simply pass them in the parameters.I created the SelectableItemData to be used as a selectable item in the component. Each item holds a SelectableType, which is a generic interface. This allows different parts of the app to implement their own type like: PrayerType, NovenaType and ChapletType, making this component completely independent of the feature that implements it.TagText: a text component with a tag style:TagTextAs you can see, I used another already created text component, to keep the app consistent.SelectableItemList:This is the list that contains all the selectable items and displays them inside a LazyRow. I am using dimensions from the application definition.PrayersFilterComponent:I created a SelectableFilterType that implements the SelectableType, which was mentioned in the SelectableItem. Three types were created and used in the component together with others specific attributes, like colors and text.It is important to observe that PrayersFilterComponent has 2 parameters: selectedFitlers, which comes from the viewModel and is the current filter state, and also the listener of each filter, which is also toggles the selected option in the viewModel.This is how the PrayersScreen calls this component in the end:Prayers List:I’m using LazyColumn for it, but here I will go further and start explaining the PrayerStates, which are all the states that can be displayed in the screen. It can be the list of prayers, but also Error, Empty or Loading.PrayerState:These are all the states that can come from the PrayerViewModel and read by the PrayersScreen.PrayerState.Empty:This shows the empty state, which is a generic component:EmptyScreen PreviewWhat It Shows: An optional icon, a title (always visible), an optional subtitle, Optional “Search: query” if search is enabled and an action button if a action is presented. Action button is present when an action is needed which is defined by the presence of actionText e onActionClick.PrayerState.Error:ErrorStateScreen previewWhat It Shows: an X icon that can be different if passed in the parameter, a title (always visible), subTitle, retryText and errorMessage when present, and if onRetry parameter is passed, shows a button to handle the function invocation.PrayerState.Loading:LoadingStateScreen PreviewWhat It Shows: a default loader and a loading text message.PrayerState.Success:What It Shows: the list of prayers is using a LazyColumn to avoid loading all items at once in the UI, as it is behaves similar to the old RecyclerView, so it only loads what is currently displayed on the screen.I have implemented 3 Items, but they are all using a common compose component inside:The only difference between them is the attributes that are being passed to the CardWithImage component, and of course the type of Prayer.ChapletCardItem — NovenaCardItem — PrayerCardItemCardWithImage:This CardWithImage composable displays a clickable card with a title, tag, and image. It supports both drawable and vector assets. The layout uses a row with text content on the left and an image on the right, with consistent spacing from a design system. It’s fully accessible and handles different image types through a sealed class.Finally the combination of all those things in the PrayersScreen:Finally the result of all components together, but you can obeserve that I developed 4 internal components: PrayerSearchBar PrayerFilters, PrayerContent and PrayerScaffold, in the same file of the PrayerScreen. Why? Because I want to apply the Slot API pattern, and for that I created the PrayerScaffold and passed all the compose components to it, making the screen very well structures and easy to read.One important detail is the usage of the koinViewModel to get the viewModel instance for the screen. Good architecture decisions in the past are now being paid off with the migration to compose.",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*khlNYVzxbrwPYBI9TLh3JA.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"d2af\"\u003e\u003cstrong\u003ePrayersScreen:\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"1d04\"\u003eThis is the \u003cstrong\u003efeature/screen\u003c/strong\u003e that I have migrated from \u003cstrong\u003exml\u003c/strong\u003e to \u003cstrong\u003ecompose\u003c/strong\u003e in the \u003ca href=\"https://medium.com/proandroiddev/xml-to-compose-in-production-an-android-journey-part-1-7f9a8369f868\" rel=\"noopener\"\u003e\u003cstrong\u003epart 1\u003c/strong\u003e\u003c/a\u003e, as there I just developed a temporary solution, now I will show how implement it in a more scalable way.\u003c/p\u003e\u003cp id=\"e799\"\u003eI have 3 main things in this screen: \u003cstrong\u003eSearchInput\u003c/strong\u003e, \u003cstrong\u003eSelectable Filter\u003c/strong\u003e and \u003cstrong\u003ePrayers List.\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"f3f7\"\u003e\u003cstrong\u003eSanctusSearchBar:\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"4f48\"\u003eI implemented it inside \u003cstrong\u003esanctus-components\u003c/strong\u003e, to make it a reusable component, although it is probably the only case, for now, that has a search input.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"5fa9\"\u003eA simple wrapper around the \u003cstrong\u003eSearchBar\u003c/strong\u003e from the \u003cstrong\u003eMaterial 3 Compose\u003c/strong\u003e library.\u003c/p\u003e\u003cp id=\"f4a4\"\u003eHere are some things worth paying attention to:\u003c/p\u003e\u003cp id=\"47f1\"\u003e\u003cstrong\u003eBodyLargeText \u003c/strong\u003eused as the component for the placeholder component, but where does it come from?\u003c/p\u003e\u003cp id=\"3799\"\u003eI have created all \u003cstrong\u003eText\u003c/strong\u003e components based on the \u003cstrong\u003eSanctusAppTypography,\u003c/strong\u003e and a \u003cstrong\u003eGenericText\u003c/strong\u003e component used in all text labels.\u003c/p\u003e\u003cp id=\"1259\"\u003e\u003cstrong\u003eGenericText:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0740\"\u003eIt is just a wrapper for \u003cstrong\u003eText\u003c/strong\u003e component from compose library to concentrate any other changes I want to make.\u003c/p\u003e\u003cp id=\"70ac\"\u003e\u003cstrong\u003eTextLabels:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"4088\"\u003eYou can observe that for the style I’m using the \u003cstrong\u003eSanctusAppTypography \u003c/strong\u003eto define how the labels looks like.\u003c/p\u003e\u003cp id=\"4728\"\u003eComing back to \u003cstrong\u003eSanctusSearchBar\u003c/strong\u003e, a few things are worth mentioning:\u003c/p\u003e\u003cp id=\"ced2\"\u003e\u003cstrong\u003eleadingIcon: \u003c/strong\u003eI have used a default \u003cstrong\u003eSearch\u003c/strong\u003e \u003cstrong\u003eicon\u003c/strong\u003e from the \u003cstrong\u003ematerial\u003c/strong\u003e \u003cstrong\u003elibrary\u003c/strong\u003e, and for the tint color \u003cstrong\u003eMaterialTheme.colorScheme.primary, \u003c/strong\u003eso it will always reflect the \u003cstrong\u003eSanctusAppTheme\u003c/strong\u003e that was defined and explained in the first article.\u003c/p\u003e\u003cp id=\"a28d\"\u003e\u003cstrong\u003etrailingIcon: \u003c/strong\u003ethis icon only appears if there is a text in the search input, and if the icon is clicked it clears the input and triggers the \u003cstrong\u003eonSearch\u003c/strong\u003e listener to reset the search \u003cstrong\u003estate\u003c/strong\u003e.\u003c/p\u003e\u003cp id=\"26af\"\u003eTo finish this component, I used 4 parameters, but only one is mandatory: \u003cstrong\u003equery\u003c/strong\u003e. It represents the text typed by the user and is used for the search. The responsibility for handling it stays outside the component — in this case, it’s managed in the \u003cstrong\u003eViewModel\u003c/strong\u003e as a \u003cstrong\u003eStateFlow\u003c/strong\u003e.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"be4e\"\u003eSince the \u003cstrong\u003equery\u003c/strong\u003e is managed in the \u003cstrong\u003eViewModel\u003c/strong\u003e using \u003cstrong\u003eStateFlow\u003c/strong\u003e, the data will survive configuration changes and persists until the \u003cstrong\u003eViewModel\u003c/strong\u003e is destroyed.\u003c/p\u003e\u003c/blockquote\u003e\u003cfigure\u003e\u003cfigcaption\u003ePrayersScreen using SanctusSearchBar\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"035a\"\u003eWhy did I use \u003cstrong\u003ecollectAsStateWithLifecycle?\u003c/strong\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"064e\"\u003eCalling the \u003cstrong\u003eselectedFilters\u003c/strong\u003e \u003cstrong\u003eStateFlow\u003c/strong\u003e from the \u003cstrong\u003eViewModel\u003c/strong\u003e using this extension function makes it a \u003cstrong\u003ecompose\u003c/strong\u003e \u003cstrong\u003estate\u003c/strong\u003e, meaning it is now a \u003cstrong\u003elifecycle awar\u003c/strong\u003ee, so it will only collect the \u003cstrong\u003eselectedFilters\u003c/strong\u003e when the composable is an active \u003cstrong\u003elifecycle\u003c/strong\u003e, preventing memory leaks.\u003c/p\u003e\u003ch2 id=\"f651\"\u003ePrayersFilterComponent:\u003c/h2\u003e\u003cp id=\"6978\"\u003eThe filters, which are selectable items, will reflect which types of prayers will be displayed in the list.\u003c/p\u003e\u003cp id=\"b328\"\u003eI have created 2 main components in the \u003cstrong\u003esanctus-components\u003c/strong\u003e module that represent the filter:\u003c/p\u003e\u003cp id=\"bdb8\"\u003e\u003cstrong\u003eSelectableItem:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"1247\"\u003eI have set the colors using the theme of the app, but if in the future I want to use others, I can simply pass them in the parameters.\u003c/p\u003e\u003cp id=\"5c64\"\u003eI created the \u003cstrong\u003eSelectableItemData\u003c/strong\u003e to be used as a selectable item in the component. Each item holds a \u003cstrong\u003eSelectableType\u003c/strong\u003e, which is a generic interface. This allows different parts of the app to implement their own type like: \u003cstrong\u003ePrayerType\u003c/strong\u003e, \u003cstrong\u003eNovenaType\u003c/strong\u003e and \u003cstrong\u003eChapletType\u003c/strong\u003e, making this component completely independent of the feature that implements it.\u003c/p\u003e\u003cp id=\"9ca9\"\u003e\u003cstrong\u003eTagText\u003c/strong\u003e: a text component with a tag style:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eTagText\u003c/figcaption\u003e\u003c/figure\u003e\u003cblockquote\u003e\u003cp id=\"6967\"\u003eAs you can see, I used another already created text component, to keep the app consistent.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"05c1\"\u003e\u003cstrong\u003eSelectableItemList:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"a408\"\u003eThis is the list that contains all the selectable items and displays them inside a \u003cstrong\u003eLazyRow\u003c/strong\u003e. I am using dimensions from the application definition.\u003c/p\u003e\u003cp id=\"dd29\"\u003e\u003cstrong\u003ePrayersFilterComponent:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"721a\"\u003eI created a \u003cstrong\u003eSelectableFilterType\u003c/strong\u003e that implements the \u003cstrong\u003eSelectableType\u003c/strong\u003e, which\u003cstrong\u003e \u003c/strong\u003ewas mentioned in the \u003cstrong\u003eSelectableItem\u003c/strong\u003e. Three\u003cstrong\u003e \u003c/strong\u003etypes were created and used in the component together with others specific attributes, like colors and text.\u003c/p\u003e\u003cp id=\"2157\"\u003eIt is important to observe that \u003cstrong\u003ePrayersFilterComponent \u003c/strong\u003ehas 2 parameters: \u003cstrong\u003eselectedFitlers, \u003c/strong\u003ewhich comes from the \u003cstrong\u003eviewModel \u003c/strong\u003eand is the current filter state, and also the listener of each filter, which is also toggles the selected option in the \u003cstrong\u003eviewModel.\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"e1b2\"\u003eThis is how the \u003cstrong\u003ePrayersScreen\u003c/strong\u003e calls this component in the end:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cdiv\u003e\u003ch2 id=\"6b82\"\u003ePrayers List:\u003c/h2\u003e\u003cp id=\"3f48\"\u003eI’m using \u003cstrong\u003eLazyColumn\u003c/strong\u003e for it, but here I will go further and start explaining the \u003cstrong\u003ePrayerStates, \u003c/strong\u003ewhich are all the states that can be displayed in the screen. It can be the list of prayers, but also \u003cstrong\u003eError, Empty \u003c/strong\u003eor\u003cstrong\u003e Loading\u003c/strong\u003e.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"9216\"\u003e\u003cstrong\u003ePrayerState:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"5666\"\u003eThese are all the states that can come from the \u003cstrong\u003ePrayerViewModel\u003c/strong\u003e and read by the \u003cstrong\u003ePrayersScreen.\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"06cb\"\u003e\u003cstrong\u003ePrayerState.Empty:\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"adbb\"\u003eThis shows the empty state, which is a generic component:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eEmptyScreen Preview\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"8723\"\u003e\u003cstrong\u003eWhat It Shows\u003c/strong\u003e: An optional \u003cstrong\u003eicon, \u003c/strong\u003ea\u003cstrong\u003e title\u003c/strong\u003e (always visible), an optional \u003cstrong\u003esubtitle, \u003c/strong\u003eOptional \u003cstrong\u003e“Search: query”\u003c/strong\u003e if search is enabled and an action button if a action is presented. Action button is present when an action is needed which is defined by the presence of \u003cstrong\u003eactionText\u003c/strong\u003e e \u003cstrong\u003eonActionClick.\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"75d7\"\u003e\u003cstrong\u003ePrayerState.Error:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eErrorStateScreen preview\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"1ab3\"\u003e\u003cstrong\u003eWhat It Shows\u003c/strong\u003e: an X \u003cstrong\u003eicon \u003c/strong\u003ethat can be different if passed in the parameter, a \u003cstrong\u003etitle (\u003c/strong\u003ealways visible), \u003cstrong\u003esubTitle, retryText and errorMessage \u003c/strong\u003ewhen present, and if \u003cstrong\u003eonRetry\u003c/strong\u003e parameter is passed, shows a button to handle the function invocation.\u003c/p\u003e\u003cp id=\"10fb\"\u003e\u003cstrong\u003ePrayerState.Loading:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cfigcaption\u003eLoadingStateScreen Preview\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"ca11\"\u003e\u003cstrong\u003eWhat It Shows\u003c/strong\u003e: a default \u003cstrong\u003eloader\u003c/strong\u003e and a loading \u003cstrong\u003etext\u003c/strong\u003e message.\u003c/p\u003e\u003cp id=\"0abb\"\u003e\u003cstrong\u003ePrayerState.Success:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"baf0\"\u003e\u003cstrong\u003eWhat It Shows\u003c/strong\u003e: the list of prayers is using a \u003cstrong\u003eLazyColumn\u003c/strong\u003e to avoid loading all items at once in the \u003cstrong\u003eUI\u003c/strong\u003e, as it is behaves similar to the old \u003cstrong\u003eRecyclerView\u003c/strong\u003e, so it only loads what is currently displayed on the screen.\u003c/p\u003e\u003cp id=\"a328\"\u003eI have implemented 3 Items, but they are all using a common \u003cstrong\u003ecompose\u003c/strong\u003e \u003cstrong\u003ecomponent\u003c/strong\u003e inside:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"5b9e\"\u003eThe only difference between them is the attributes that are being passed to the \u003cstrong\u003eCardWithImage\u003c/strong\u003e component, and of course the type of \u003cstrong\u003ePrayer\u003c/strong\u003e.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cpicture\u003e\u003csource srcset=\"https://miro.medium.com/v2/resize:fit:640/format:webp/1*sfBfeUQ8aw3JrvuDjdqZsw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*sfBfeUQ8aw3JrvuDjdqZsw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*sfBfeUQ8aw3JrvuDjdqZsw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*sfBfeUQ8aw3JrvuDjdqZsw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*sfBfeUQ8aw3JrvuDjdqZsw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*sfBfeUQ8aw3JrvuDjdqZsw.png 1100w, https://miro.medium.com/v2/resize:fit:644/format:webp/1*sfBfeUQ8aw3JrvuDjdqZsw.png 644w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 322px\" type=\"image/webp\"/\u003e\u003csource data-testid=\"og\" srcset=\"https://miro.medium.com/v2/resize:fit:640/1*sfBfeUQ8aw3JrvuDjdqZsw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*sfBfeUQ8aw3JrvuDjdqZsw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*sfBfeUQ8aw3JrvuDjdqZsw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*sfBfeUQ8aw3JrvuDjdqZsw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*sfBfeUQ8aw3JrvuDjdqZsw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*sfBfeUQ8aw3JrvuDjdqZsw.png 1100w, https://miro.medium.com/v2/resize:fit:644/1*sfBfeUQ8aw3JrvuDjdqZsw.png 644w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 322px\"/\u003e\u003c/picture\u003e\u003c/figure\u003e\u003cfigure\u003e\u003cpicture\u003e\u003csource srcset=\"https://miro.medium.com/v2/resize:fit:640/format:webp/1*umeRRbSiDqWOaAzVdZVkZA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*umeRRbSiDqWOaAzVdZVkZA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*umeRRbSiDqWOaAzVdZVkZA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*umeRRbSiDqWOaAzVdZVkZA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*umeRRbSiDqWOaAzVdZVkZA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*umeRRbSiDqWOaAzVdZVkZA.png 1100w, https://miro.medium.com/v2/resize:fit:674/format:webp/1*umeRRbSiDqWOaAzVdZVkZA.png 674w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 337px\" type=\"image/webp\"/\u003e\u003csource data-testid=\"og\" srcset=\"https://miro.medium.com/v2/resize:fit:640/1*umeRRbSiDqWOaAzVdZVkZA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*umeRRbSiDqWOaAzVdZVkZA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*umeRRbSiDqWOaAzVdZVkZA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*umeRRbSiDqWOaAzVdZVkZA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*umeRRbSiDqWOaAzVdZVkZA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*umeRRbSiDqWOaAzVdZVkZA.png 1100w, https://miro.medium.com/v2/resize:fit:674/1*umeRRbSiDqWOaAzVdZVkZA.png 674w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 337px\"/\u003e\u003c/picture\u003e\u003cfigcaption\u003eChapletCardItem — NovenaCardItem — PrayerCardItem\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"b9b4\"\u003e\u003cstrong\u003eCardWithImage:\u003c/strong\u003e\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"daeb\"\u003eThis \u003cstrong\u003eCardWithImage\u003c/strong\u003e composable displays a clickable card with a \u003cstrong\u003etitle\u003c/strong\u003e, \u003cstrong\u003etag\u003c/strong\u003e, and \u003cstrong\u003eimage\u003c/strong\u003e. It supports both \u003cstrong\u003edrawable\u003c/strong\u003e and \u003cstrong\u003evector\u003c/strong\u003e assets. The layout uses a \u003cstrong\u003erow\u003c/strong\u003e with text content on the left and an \u003cstrong\u003eimage\u003c/strong\u003e on the right, with consistent spacing from a \u003cstrong\u003edesign system\u003c/strong\u003e. It’s fully accessible and handles different \u003cstrong\u003eimage\u003c/strong\u003e types through a sealed class.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"290f\"\u003eFinally the combination of all those things in the \u003cstrong\u003ePrayersScreen\u003c/strong\u003e:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0cc5\"\u003eFinally the result of all components together, but you can obeserve that I developed \u003cstrong\u003e4 internal components: PrayerSearchBar PrayerFilters, PrayerContent \u003c/strong\u003eand \u003cstrong\u003ePrayerScaffold, \u003c/strong\u003ein the same file of the \u003cstrong\u003ePrayerScreen. \u003c/strong\u003eWhy? Because I want to apply the\u003cstrong\u003e Slot API pattern\u003c/strong\u003e, and for that I created the \u003cstrong\u003ePrayerScaffold\u003c/strong\u003e and passed all the compose components to it, making the screen very well structures and easy to read.\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"1b70\"\u003eOne important detail is the usage of the \u003cstrong\u003ekoinViewModel\u003c/strong\u003e to get the \u003cstrong\u003eviewModel\u003c/strong\u003e instance for the screen. Good architecture decisions in the past are now being paid off with the migration to \u003cstrong\u003ecompose\u003c/strong\u003e.\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2025-05-13T08:28:06.946Z",
  "modifiedTime": null
}
