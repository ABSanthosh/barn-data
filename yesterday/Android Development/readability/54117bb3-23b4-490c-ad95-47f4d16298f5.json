{
  "id": "54117bb3-23b4-490c-ad95-47f4d16298f5",
  "title": "Support Time to Take Action with Compose",
  "link": "https://proandroiddev.com/support-time-to-take-action-with-compose-87950e7e4466?source=rss----c72404660798---4",
  "description": "",
  "author": "Eevis Panula",
  "published": "Sat, 28 Dec 2024 16:07:21 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "jetpack-compose",
    "androiddev",
    "accessibility",
    "android",
    "android-app-development"
  ],
  "byline": "Eevis Panula",
  "length": 5486,
  "excerpt": "Let's discuss how to support Time to take action accessibility setting with Compose.",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "While working on my master’s thesis and the Android Accessibility Checklist, one of the answers to my survey mentioned an accessibility setting called time to take action. Since then, I’ve been curious about it and wanted to write a blog post as I feel it’s one of the undersupported accessibility settings and really useful for those who utilize it.So, what is time to take action, and why would someone use it? And why should we, as developers, care? Let’s talk about that first.Time to Take ActionTime to take action is a setting that controls the minimum time in which temporary messages asking a user to take action are shown. So, for example, when you press the volume buttons on your Android phone, you should see the volume controls next to the volume buttons, and this setting controls how long they’re visible.This setting has different options: Default, 10 seconds, 30 seconds, 1 minute and 2 minutes. You can find them from Settings -\u003e Accessibility Settings -\u003e Timing controls -\u003e Time to take action (Accessibility timeout). The screen looks something like this, depending on your phone’s version and manufacturer:And why would someone need this setting? Well, the source code and documentation for a method we’re going to use in a moment puts it pretty well:Some users may need extra time to review the controls, or to reach them, or to activate assistive technology to activate the controls automatically.Okay, now we’ve established what the time to take action is. However, the question of relevance remains: Why should we care as developers? Isn’t it something that the operating system handles automatically?The answer is yes and no. Most components on the operating system level and Material3 components respect this setting. However, when you’re building a custom component, it’s not automatically respected, and you’ll need to add support for it. That’s why the settings page mentions that not all apps support the setting. The thing is, developers usually don’t know about it.Let’s next talk about how to support time to take action-setting with a custom component.How to Respect Time to Take Action?For the sake of example, we’ll build a small tooltip component with a button to close it. The tooltip disappears after the minimum time to take action if the user does nothing. The default value, in our case, is set to 10 seconds.Before diving into code, here’s a video where the tooltip is first shown with the time to take action setting with a default value, and then it’s set to 30 seconds:This example doesn’t contain all the code (like the tooltip content), just the relevant parts. As seen in the video, the tooltip becomes visible after the user clicks an “Info”-button, then is visible for the required time, depending on the time to take action-setting, and finally, disappears. The tooltip contains a button to hide the tooltip faster.We’re adding the support for time to take action in two steps:Calculate the delay for hiding the tooltipHide the tooltip after the calculated time has passedThe first step is to calculate the delay, or tooltipTimeout, as we're calling it in the code:@Composablefun Tooltip( tooltipVisible: Boolean, hideTooltip: () -\u003e Unit, modifier: Modifier = Modifier) { val tooltipTimeout = LocalAccessibilityManager.current? .calculateRecommendedTimeoutMillis( originalTimeoutMillis = TOOLTIP_DEFAULT_TIMEOUT_MS, containsText = true, containsControls = true, ) ?: TOOLTIP_DEFAULT_TIMEOUT_MS ... TooltipContent(...)}// 10 secondsconst val TOOLTIP_DEFAULT_TIMEOUT_MS = 10000LocalAccessibilityManager composition local provides a neat function for calculating the timeout, so we use that. The first parameter for calculateRecommendedTimeoutMillis is the original timeout milliseconds, which applies when there are no accessibility timeout needs. The other parameters are a bunch of boolean values informing about the element's contents for which the timeout value is being calculated. These are about whether the element contains text, controls, or icons.The calculateRecommendedTimeoutMillis returns the recommended timeout time as Long. As the AccessibilityManager might not be available in some operating systems or OS versions and thus is nullable, we also need a default value. This value is the TOOLTIP_DEFAULT_TIMEOUT_MS in our code - the same one we use for the original timeout. In the example, the value is 10 seconds.Next, we’ll use the freshly calculated timeout:@Composablefun Tooltip(...) { ... LaunchedEffect(tooltipVisible) { if (tooltipVisible) { delay(tooltipTimeout) hideTooltip() } } TooltipContent(...)}So, what happens in the code snippet is that whenever the tooltipVisible-value changes, we check if the change was for making the tooltip visible, and if so, then we first delay for the number of milliseconds we calculated in the previous step and then hide the tooltip.This way, we can respect the user’s settings for elements that they might need more time to interact with.Wrapping UpIn this blog post, we’ve discussed the time to take action setting, what it is, why developers should know about it, and how to respect it. We’ve done this by building a tooltip component, which hides after a certain amount of time.Did you know about this setting? Have you ever implemented support for it? If so, what kind of UI components were they?Links in the Blog PostAndroid Accessibility Checklist",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*BFyleqji11Zw5FRp3P1Zrg.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@eevajonna?source=post_page---byline--87950e7e4466--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Eevis Panula\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*NhMD_9eOS1kF9_b3VomDEQ.png\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--87950e7e4466--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"bfdb\"\u003eWhile working on my master’s thesis and the \u003ca href=\"https://android-a11y-checks.netlify.app/checks\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid Accessibility Checklist\u003c/a\u003e, one of the answers to my survey mentioned an accessibility setting called time to take action. Since then, I’ve been curious about it and wanted to write a blog post as I feel it’s one of the undersupported accessibility settings and really useful for those who utilize it.\u003c/p\u003e\u003cp id=\"ba7b\"\u003eSo, what is time to take action, and why would someone use it? And why should we, as developers, care? Let’s talk about that first.\u003c/p\u003e\u003ch2 id=\"02fc\"\u003eTime to Take Action\u003c/h2\u003e\u003cp id=\"083c\"\u003eTime to take action is a setting that controls the minimum time in which temporary messages asking a user to take action are shown. So, for example, when you press the volume buttons on your Android phone, you should see the volume controls next to the volume buttons, and this setting controls how long they’re visible.\u003c/p\u003e\u003cp id=\"3e71\"\u003eThis setting has different options: Default, 10 seconds, 30 seconds, 1 minute and 2 minutes. You can find them from Settings -\u0026gt; Accessibility Settings -\u0026gt; Timing controls -\u0026gt; Time to take action (Accessibility timeout). The screen looks something like this, depending on your phone’s version and manufacturer:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"8704\"\u003eAnd why would someone need this setting? Well, the source code and documentation for a method we’re going to use in a moment puts it pretty well:\u003c/p\u003e\u003cblockquote\u003e\u003cp id=\"85c9\"\u003eSome users may need extra time to review the controls, or to reach them, or to activate assistive technology to activate the controls automatically.\u003c/p\u003e\u003c/blockquote\u003e\u003cp id=\"9d52\"\u003eOkay, now we’ve established what the time to take action is. However, the question of relevance remains: Why should we care as developers? Isn’t it something that the operating system handles automatically?\u003c/p\u003e\u003cp id=\"0311\"\u003eThe answer is yes and no. Most components on the operating system level and Material3 components respect this setting. However, when you’re building a custom component, it’s not automatically respected, and you’ll need to add support for it. That’s why the settings page mentions that not all apps support the setting. The thing is, developers usually don’t know about it.\u003c/p\u003e\u003cp id=\"c26b\"\u003eLet’s next talk about how to support time to take action-setting with a custom component.\u003c/p\u003e\u003ch2 id=\"7f11\"\u003eHow to Respect Time to Take Action?\u003c/h2\u003e\u003cp id=\"d33e\"\u003eFor the sake of example, we’ll build a small tooltip component with a button to close it. The tooltip disappears after the minimum time to take action if the user does nothing. The default value, in our case, is set to 10 seconds.\u003c/p\u003e\u003cp id=\"3963\"\u003eBefore diving into code, here’s a video where the tooltip is first shown with the time to take action setting with a default value, and then it’s set to 30 seconds:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"0a5b\"\u003eThis example doesn’t contain all the code (like the tooltip content), just the relevant parts. As seen in the video, the tooltip becomes visible after the user clicks an “Info”-button, then is visible for the required time, depending on the time to take action-setting, and finally, disappears. The tooltip contains a button to hide the tooltip faster.\u003c/p\u003e\u003cp id=\"3079\"\u003eWe’re adding the support for time to take action in two steps:\u003c/p\u003e\u003col\u003e\u003cli id=\"63e6\"\u003eCalculate the delay for hiding the tooltip\u003c/li\u003e\u003cli id=\"4a3a\"\u003eHide the tooltip after the calculated time has passed\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"aa4c\"\u003eThe first step is to calculate the delay, or \u003ccode\u003etooltipTimeout\u003c/code\u003e, as we\u0026#39;re calling it in the code:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"08ef\"\u003e@Composable\u003cbr/\u003efun Tooltip(\u003cbr/\u003e    tooltipVisible: Boolean,\u003cbr/\u003e    hideTooltip: () -\u0026gt; Unit,\u003cbr/\u003e    modifier: Modifier = Modifier\u003cbr/\u003e) {\u003cbr/\u003e    val tooltipTimeout = LocalAccessibilityManager.current?\u003cbr/\u003e        .calculateRecommendedTimeoutMillis(\u003cbr/\u003e             originalTimeoutMillis = TOOLTIP_DEFAULT_TIMEOUT_MS,\u003cbr/\u003e             containsText = true,\u003cbr/\u003e             containsControls = true,\u003cbr/\u003e         ) ?: TOOLTIP_DEFAULT_TIMEOUT_MS\u003cp\u003e    ...\u003c/p\u003e\u003cp\u003e    TooltipContent(...)\u003cbr/\u003e}\u003cbr/\u003e// 10 seconds\u003cbr/\u003econst val TOOLTIP_DEFAULT_TIMEOUT_MS = 10000\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a1f0\"\u003e\u003ccode\u003eLocalAccessibilityManager\u003c/code\u003e composition local provides a neat function for calculating the timeout, so we use that. The first parameter for \u003ccode\u003ecalculateRecommendedTimeoutMillis\u003c/code\u003e is the original timeout milliseconds, which applies when there are no accessibility timeout needs. The other parameters are a bunch of boolean values informing about the element\u0026#39;s contents for which the timeout value is being calculated. These are about whether the element contains text, controls, or icons.\u003c/p\u003e\u003cp id=\"7110\"\u003eThe \u003ccode\u003ecalculateRecommendedTimeoutMillis\u003c/code\u003e returns the recommended timeout time as \u003ccode\u003eLong\u003c/code\u003e. As the \u003ccode\u003eAccessibilityManager\u003c/code\u003e might not be available in some operating systems or OS versions and thus is nullable, we also need a default value. This value is the \u003ccode\u003eTOOLTIP_DEFAULT_TIMEOUT_MS\u003c/code\u003e in our code - the same one we use for the original timeout. In the example, the value is 10 seconds.\u003c/p\u003e\u003cp id=\"a1ad\"\u003eNext, we’ll use the freshly calculated timeout:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ac5a\"\u003e@Composable\u003cbr/\u003efun Tooltip(...) {\u003cbr/\u003e    ...\u003cp\u003e     LaunchedEffect(tooltipVisible) {\u003cbr/\u003e        if (tooltipVisible) {\u003cbr/\u003e            delay(tooltipTimeout)\u003cbr/\u003e            hideTooltip()\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    TooltipContent(...)\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"a19a\"\u003eSo, what happens in the code snippet is that whenever the \u003ccode\u003etooltipVisible\u003c/code\u003e-value changes, we check if the change was for making the tooltip visible, and if so, then we first delay for the number of milliseconds we calculated in the previous step and then hide the tooltip.\u003c/p\u003e\u003cp id=\"2a2f\"\u003eThis way, we can respect the user’s settings for elements that they might need more time to interact with.\u003c/p\u003e\u003ch2 id=\"3552\"\u003eWrapping Up\u003c/h2\u003e\u003cp id=\"114c\"\u003eIn this blog post, we’ve discussed the time to take action setting, what it is, why developers should know about it, and how to respect it. We’ve done this by building a tooltip component, which hides after a certain amount of time.\u003c/p\u003e\u003cp id=\"ed1c\"\u003eDid you know about this setting? Have you ever implemented support for it? If so, what kind of UI components were they?\u003c/p\u003e\u003ch2 id=\"0a8e\"\u003eLinks in the Blog Post\u003c/h2\u003e\u003cul\u003e\u003cli id=\"7359\"\u003e\u003ca href=\"https://android-a11y-checks.netlify.app/checks\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid Accessibility Checklist\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2024-12-28T10:46:33.167Z",
  "modifiedTime": null
}
