{
  "id": "37a3ba9b-30b4-44ae-ad0c-6a546cdad6fb",
  "title": "Building Your First Kotlin Multiplatform App: From Setup to iOS App Store with Compose…",
  "link": "https://blog.kotlin-academy.com/building-your-first-kotlin-multiplatform-app-from-setup-to-ios-app-store-with-compose-e4d3f4c6767c?source=rss----e57b304801ef---4",
  "description": "",
  "author": "Faisal Ahmed",
  "published": "Thu, 17 Jul 2025 10:25:37 GMT",
  "source": "https://blog.kotlin-academy.com/feed",
  "categories": [
    "kotlin-multiplatform",
    "mobile-app-development",
    "ios",
    "compose-multiplatform",
    "android"
  ],
  "byline": "Faisal Ahmed",
  "length": 23263,
  "excerpt": "With Compose Multiplatform for iOS now stable (May 2025), you can build truly native apps with 95% shared code. No more maintaining two codebases, no more feature parity issues, no more “it works on…",
  "siteName": "Kt. Academy",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*2grDGjzH0tfX8XiaF4Izaw.png",
  "text": "🎯 What You’ll Learn: Build a production-ready subscription tracker that runs natively on Android and iOS with 95% shared code, including database, business logic, and UI.⏱️ Time Investment: ~3–4 hours for complete implementation🎯 Target Audience: Android developers exploring KMP, iOS developers curious about Kotlin🎯 IntroductionRemember when building for both Android and iOS meant writing everything twice? Those days are over.With Compose Multiplatform for iOS now stable (May 2025), you can build truly native apps with 95% shared code. No more maintaining two codebases, no more feature parity issues, no more “it works on Android but breaks on iOS.”In this comprehensive guide, we’ll build Kyklos — a subscription management app that proves KMP is ready for production. We’ll tackle real challenges like cross-platform databases, Material Design on iOS, and the gotchas that can trip up new KMP developers.By the end of this tutorial, you’ll have created a fully functional app with:✅ Shared business logic and UI between Android and iOS✅ Clean Architecture with proper separation of concerns✅ Type-safe database using SQLDelight✅ Material Design 3 theming that works on iOS✅ Production-ready iOS support with real device testing🏗️ What We’re BuildingKyklos (Greek for “cycle”) is a subscription management app that helps users track their recurring payments. The app features:📱 Cross-platform native UI with shared Compose code💰 Subscription tracking with intelligent cost calculations🌍 Multi-currency support (USD, EUR, GBP, CAD, AUD, INR)📊 Monthly spending summaries and analytics🎨 Modern Material Design 3 interface🔄 Real-time sync across platforms🛠️ Setting Up the Development EnvironmentPrerequisitesAndroid Studio with the latest KMP pluginXcode 14+ (for iOS development and simulator)JDK 11+Kotlin 2.1.21+Creating the ProjectStart by creating a new Kotlin Multiplatform project:# Option 1: Using the KMP wizard (Recommended)# Visit: https://kmp.jetbrains.com/# Configure: Android + iOS + Compose Multiplatform# Option 2: Android Studio# New Project \u003e Kotlin Multiplatform \u003e Mobile Application🏗️ Architecture Decision: Why start with the official wizard? It sets up the proper expect/actual structure and configures Compose Multiplatform correctly for both platforms.📦 Dependencies and Project StructureCore DependenciesLet’s set up our gradle/libs.versions.toml with production-ready versions:[versions]kotlin = \"2.1.21\"composeMultiplatform = \"1.8.2\"sqlDelight = \"2.0.2\"kotlinx-datetime = \"0.6.0\"uuid = \"0.8.4\"[libraries]# SQLDelight for cross-platform databasesqlDelight-driver-android = { module = \"app.cash.sqldelight:android-driver\", version.ref = \"sqlDelight\" }sqlDelight-driver-native = { module = \"app.cash.sqldelight:native-driver\", version.ref = \"sqlDelight\" }sqlDelight-runtime = { module = \"app.cash.sqldelight:runtime\", version.ref = \"sqlDelight\" }sqlDelight-coroutines = { module = \"app.cash.sqldelight:coroutines-extensions\", version.ref = \"sqlDelight\" }# Cross-platform utilitieskotlinx-datetime = { module = \"org.jetbrains.kotlinx:kotlinx-datetime\", version.ref = \"kotlinx-datetime\" }uuid = { module = \"com.benasher44:uuid\", version.ref = \"uuid\" }[plugins]sqlDelight = { id = \"app.cash.sqldelight\", version.ref = \"sqlDelight\" }Project ArchitectureWe’ll implement Clean Architecture with clear layer separation:📱 Presentation Layer (UI)├── 🎨 components/ # Reusable UI components├── 📄 screens/ # Screen-level composables └── 🎭 theme/ # Material Design theme💼 Domain Layer (Business Logic)├── 📋 usecase/ # Business use cases└── 📄 repository/ # Repository interfaces💾 Data Layer (Data Management) ├── 🗄️ local/ # SQLDelight database├── 📊 repository/ # Repository implementations└── 🔄 model/ # Data models🏗️ Architecture Decision: Clean Architecture separates platform code from business logic, making testing easier and code more maintainable across Android and iOS.🗄️ Setting Up SQLDelight Database1. Configure SQLDelight in build.gradle.ktssqldelight { databases { create(\"KyklosDatabase\") { packageName.set(\"dev.faisalahmed.kyklos.db\") srcDirs(\"src/commonMain/sqldelight\") } }}2. Create Database SchemaCreate composeApp/src/commonMain/sqldelight/database/Subscription.sq:-- Subscription table with proper indexing for performanceCREATE TABLE subscription ( id TEXT NOT NULL PRIMARY KEY, name TEXT NOT NULL, cost REAL NOT NULL, currency_code TEXT NOT NULL, billing_cycle TEXT NOT NULL, next_payment_date INTEGER NOT NULL, is_active INTEGER NOT NULL DEFAULT 1, created_at INTEGER NOT NULL, updated_at INTEGER NOT NULL, notes TEXT, FOREIGN KEY (currency_code) REFERENCES currency(code));-- Performance indexes for common queriesCREATE INDEX idx_subscription_active ON subscription(is_active);CREATE INDEX idx_subscription_next_payment ON subscription(next_payment_date);-- Query: Get all subscriptions with currency infoselectAll:SELECT s.*, c.symbol AS currency_symbol, c.name AS currency_name, c.exchange_rate_to_usdFROM subscription sJOIN currency c ON s.currency_code = c.codeORDER BY s.next_payment_date ASC;-- Query: Get only active subscriptionsselectActive:SELECT s.*, c.symbol AS currency_symbol, c.name AS currency_name, c.exchange_rate_to_usdFROM subscription sJOIN currency c ON s.currency_code = c.codeWHERE s.is_active = 1ORDER BY s.next_payment_date ASC;-- Insert new subscriptioninsertSubscription:INSERT INTO subscription ( id, name, cost, currency_code, billing_cycle, next_payment_date, is_active, created_at, updated_at, notes) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);-- Analytics query for monthly cost calculationsselectTotalMonthlyCostByActive:SELECT s.currency_code, c.symbol AS currency_symbol, c.exchange_rate_to_usd, SUM( CASE WHEN s.billing_cycle = 'WEEKLY' THEN s.cost * 4.33 WHEN s.billing_cycle = 'MONTHLY' THEN s.cost WHEN s.billing_cycle = 'QUARTERLY' THEN s.cost / 3.0 WHEN s.billing_cycle = 'SEMI_ANNUALLY' THEN s.cost / 6.0 WHEN s.billing_cycle = 'ANNUALLY' THEN s.cost / 12.0 ELSE s.cost END ) AS monthly_costFROM subscription sJOIN currency c ON s.currency_code = c.codeWHERE s.is_active = ?GROUP BY s.currency_code, c.symbol, c.exchange_rate_to_usd;3. Cross-Platform Database DriversThe key to SQLDelight’s cross-platform magic is the expect/actual pattern:Common interface (commonMain/data/local/DatabaseDriverFactory.kt):import app.cash.sqldelight.db.SqlDriverexpect class DatabaseDriverFactory { fun createDriver(): SqlDriver}Android implementation (androidMain/data/local/DatabaseDriverFactory.android.kt):import android.content.Contextimport app.cash.sqldelight.db.SqlDriverimport app.cash.sqldelight.driver.android.AndroidSqliteDriverimport dev.faisalahmed.kyklos.db.KyklosDatabaseactual class DatabaseDriverFactory(private val context: Context) { actual fun createDriver(): SqlDriver { return AndroidSqliteDriver( schema = KyklosDatabase.Schema, context = context, name = \"kyklos.db\" ) }}iOS implementation (iosMain/data/local/DatabaseDriverFactory.ios.kt):import app.cash.sqldelight.db.SqlDriverimport app.cash.sqldelight.driver.native.NativeSqliteDriverimport dev.faisalahmed.kyklos.db.KyklosDatabaseactual class DatabaseDriverFactory { actual fun createDriver(): SqlDriver { return NativeSqliteDriver( schema = KyklosDatabase.Schema, name = \"kyklos.db\" ) }}🏛️ Implementing Clean Architecture1. Domain Layer — Business LogicRepository Interface (domain/repository/SubscriptionRepository.kt):import dev.faisalahmed.kyklos.data.model.Subscriptionimport kotlinx.coroutines.flow.Flowinterface SubscriptionRepository { fun getAllSubscriptions(): Flow\u003cList\u003cSubscription\u003e\u003e fun getActiveSubscriptions(): Flow\u003cList\u003cSubscription\u003e\u003e suspend fun getSubscriptionById(id: String): Subscription? suspend fun insertSubscription(subscription: Subscription) suspend fun updateSubscription(subscription: Subscription) suspend fun deleteSubscription(id: String) suspend fun toggleSubscriptionStatus(id: String)}Use Case Example (domain/usecase/GetSubscriptionsUseCase.kt):class GetSubscriptionsUseCase( private val repository: SubscriptionRepository) { operator fun invoke(activeOnly: Boolean = false): Flow\u003cList\u003cSubscription\u003e\u003e { return if (activeOnly) { repository.getActiveSubscriptions() } else { repository.getAllSubscriptions() } }}2. Data Layer — Repository Implementationclass SubscriptionRepositoryImpl( private val database: KyklosDatabase) : SubscriptionRepository {// Convert SQLDelight query results to domain models override fun getAllSubscriptions(): Flow\u003cList\u003cSubscription\u003e\u003e { return database.subscriptionQueries .selectAll() .asFlow() .mapToList(Dispatchers.IO) .map { rows -\u003e rows.map { row -\u003e row.toSubscription() } } } // Insert subscription with proper error handling override suspend fun insertSubscription(subscription: Subscription) { try { database.subscriptionQueries.insertSubscription( id = subscription.id, name = subscription.name, cost = subscription.cost, currency_code = subscription.currency.code, billing_cycle = subscription.billingCycle.name, next_payment_date = subscription.nextPaymentDate.toEpochMilliseconds(), is_active = if (subscription.isActive) 1L else 0L, created_at = subscription.createdAt.toEpochMilliseconds(), updated_at = subscription.updatedAt.toEpochMilliseconds(), notes = subscription.notes ) } catch (e: Exception) { // Handle database errors appropriately throw DatabaseException(\"Failed to insert subscription: ${e.message}\") } }}3. Data Models with Business Logicdata class Subscription( val id: String, val name: String, val cost: Double, val currency: Currency, val billingCycle: BillingCycle, val nextPaymentDate: Instant, val isActive: Boolean = true, val createdAt: Instant, val updatedAt: Instant, val notes: String? = null) { // Business logic: Calculate monthly cost based on billing cycle fun calculateMonthlyCost(): Double { return billingCycle.calculateMonthlyCost(cost) } // Business logic: Convert to USD for unified calculations fun calculateMonthlyCostInUsd(): Double { val monthlyCost = calculateMonthlyCost() return currency.convertToUsd(monthlyCost) } // Formatting for display fun formatCost(): String { return currency.formatAmount(cost) } companion object { // Factory method for creating new subscriptions fun create( name: String, cost: Double, currency: Currency, billingCycle: BillingCycle, nextPaymentDate: Instant, notes: String? = null, now: Instant = Clock.System.now() ): Subscription { val id = uuid4().toString() return Subscription( id = id, name = name, cost = cost, currency = currency, billingCycle = billingCycle, nextPaymentDate = nextPaymentDate, createdAt = now, updatedAt = now, notes = notes ) } }}🎨 Building the UI with Compose Multiplatform1. Material Design 3 Theme@Composablefun KyklosTheme( darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -\u003e Unit) { val colorScheme = if (darkTheme) { DarkColorScheme } else { LightColorScheme.copy( primary = KyklosColors.KyklosPrimary, onPrimary = KyklosColors.KyklosOnPrimary, primaryContainer = KyklosColors.KyklosPrimaryContainer, onPrimaryContainer = KyklosColors.KyklosOnPrimaryContainer, ) } // Modern rounded shapes that work well on both platforms val modernShapes = Shapes( extraSmall = RoundedCornerShape(8.dp), small = RoundedCornerShape(12.dp), medium = RoundedCornerShape(16.dp), large = RoundedCornerShape(24.dp), extraLarge = RoundedCornerShape(32.dp) ) MaterialTheme( colorScheme = colorScheme, shapes = modernShapes, typography = KyklosTypography, content = content )}2. Reusable UI ComponentsSubscription Card Component:@OptIn(ExperimentalMaterial3Api::class)@Composablefun SubscriptionCard( subscription: Subscription, onClick: () -\u003e Unit, modifier: Modifier = Modifier) { Card( onClick = onClick, modifier = modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(defaultElevation = 2.dp), colors = CardDefaults.cardColors( containerColor = MaterialTheme.colorScheme.surfaceVariant ) ) { Column( modifier = Modifier.padding(16.dp) ) { // Header row with name and cost Row( modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween, verticalAlignment = Alignment.CenterVertically ) { Text( text = subscription.name, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold, maxLines = 1, overflow = TextOverflow.Ellipsis, modifier = Modifier.weight(1f) ) Text( text = subscription.formatCost(), style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold, color = MaterialTheme.colorScheme.primary ) } Spacer(modifier = Modifier.height(8.dp)) // Footer row with next payment and billing cycle Row( modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween, verticalAlignment = Alignment.CenterVertically ) { Text( text = \"Next payment: ${subscription.nextPaymentDate.formatDate()}\", style = MaterialTheme.typography.bodyMedium, color = MaterialTheme.colorScheme.onSurfaceVariant ) Text( text = subscription.billingCycle.displayName, style = MaterialTheme.typography.labelMedium, color = MaterialTheme.colorScheme.secondary ) } } }}3. Screen-Level Composables@OptIn(ExperimentalMaterial3Api::class)@Composablefun SubscriptionListScreen( subscriptions: List\u003cSubscription\u003e = emptyList(), totalMonthlyCost: String = \"$0.00\", onAddSubscription: () -\u003e Unit = {}, onSubscriptionClick: (Subscription) -\u003e Unit = {}, modifier: Modifier = Modifier) { Scaffold( topBar = { TopAppBar( title = { Text( text = \"Kyklos\", style = MaterialTheme.typography.headlineMedium, fontWeight = FontWeight.Bold ) }, colors = TopAppBarDefaults.topAppBarColors( containerColor = MaterialTheme.colorScheme.primaryContainer, titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer ) ) }, floatingActionButton = { ExtendedFloatingActionButton( onClick = onAddSubscription, icon = { Icon( imageVector = Icons.Default.Add, contentDescription = null ) }, text = { Text(\"Add Subscription\") }, containerColor = MaterialTheme.colorScheme.primary, contentColor = MaterialTheme.colorScheme.onPrimary ) } ) { paddingValues -\u003e LazyColumn( modifier = modifier.padding(paddingValues), contentPadding = PaddingValues(16.dp), verticalArrangement = Arrangement.spacedBy(16.dp) ) { // Monthly summary card item { MonthlySummaryCard( totalMonthlyCost = totalMonthlyCost, subscriptionCount = subscriptions.size ) } // Subscription list items(subscriptions) { subscription -\u003e SubscriptionCard( subscription = subscription, onClick = { onSubscriptionClick(subscription) } ) } // Empty state if (subscriptions.isEmpty()) { item { EmptyStateComponent( message = \"No subscriptions yet\", actionText = \"Add your first subscription\", onActionClick = onAddSubscription ) } } } }}⚠️ iOS Compatibility: Critical GotchasWhen developing for iOS with Kotlin Multiplatform, there are several compatibility gotchas to watch out for:💡 Pro Tip: These gotchas cost me hours of debugging. Learning them upfront will save you significant development time.1. String Formatting❌ Don’t use:String.format(\"%.2f\", value) // Not available on iOS/KMP✅ Use instead:// Option 1: String templates for simple cases\"${currency.symbol}$cost\"// Option 2: Expect/actual pattern for complex formattingexpect fun Double.formatCurrency(symbol: String): String// Android actualactual fun Double.formatCurrency(symbol: String): String = \"$symbol%.2f\".format(this)// iOS actual (using NSString)actual fun Double.formatCurrency(symbol: String): String = NSString.init(format = \"$symbol%.2f\", this).toString()// Option 3: Manual precision handling (less preferred)fun Double.toCurrencyString(symbol: String): String { val rounded = (this * 100).toLong() / 100.0 return \"$symbol$rounded\"}2. UUID Generation❌ Don’t use:UUID.randomUUID() // Java UUID not available on iOS✅ Use instead:import com.benasher44.uuid.uuid4val id = uuid4().toString() // Cross-platform UUID🚀 Building and RunningBuild Commands# Android./gradlew compileDebugKotlinAndroid # Compile Android code./gradlew installDebug # Install on device/emulator# iOS (compilation check)./gradlew compileKotlinIosX64 # Compile iOS code./gradlew linkDebugFrameworkIosX64 # Link iOS framework# All platforms./gradlew build # Build all targets# SQLDelight./gradlew generateCommonMainKyklosDatabaseInterface# Clean build./gradlew clean build📱 Running on iOS SimulatorTo run your Kotlin Multiplatform app on the iOS Simulator:1. Generate iOS Framework# Build the iOS framework./gradlew linkDebugFrameworkIosX642. Open iOS Project in Xcode# Navigate to iOS app directorycd iosApp# Open in Xcodeopen iosApp.xcodeproj3. Configure and RunSelect Target Device:In Xcode, click on the device selection dropdownChoose your preferred iOS Simulator (e.g., iPhone 15, iPad Pro)2. Build and Run:Press Cmd + R or click the Run buttonXcode will build the project and launch the iOS Simulator4. Development WorkflowFor efficient development:Make Kotlin changes in your shared codeRebuild framework: ./gradlew linkDebugFrameworkIosX64Run from Xcode to test changes on iOS SimulatorUse Compose Hot Reload when available for UI changes5. Troubleshooting iOS IssuesCommon Issues:Framework Not Found:# Clean and rebuild framework./gradlew clean./gradlew linkDebugFrameworkIosX642. Simulator Not Starting:# Reset simulatorxcrun simctl erase allxcrun simctl boot \"iPhone 15\"3. Build Errors in Xcode:Ensure your iOS deployment target matches your KMP project settingsCheck that the framework is properly linked in Xcode project settingsVerify the framework search paths in Build Settings🎯 Advanced Features and Next StepsCurrent Implementation StatusBased on the current Kyklos codebase, we have successfully implemented:✅ Core Features:Cross-platform project setup with KMPSQLDelight database configurationMaterial Design 3 themingClean Architecture foundationBasic UI components and screensImmediate Next StepsComplete CRUD Operations — Full subscription managementState Management — Add StateFlow and ViewModel integrationDependency Injection — Implement Koin for DINavigation — Add Compose Navigation with type safetyError Handling — Comprehensive error states and recoveryFuture RoadmapNetworking — Add Ktor for API calls and syncTesting Suite — Comprehensive test coverage (planned for Part 5 of this series)CI/CD — GitHub Actions for automated builds and testingPlatform Expansion — Web and Desktop support with Compose Multiplatform📚 Key TakeawaysBuilding a Kotlin Multiplatform app teaches several valuable lessons:Architecture Matters — Clean Architecture provides excellent separation of concerns across platformsSQLDelight is Powerful — Type-safe SQL with excellent cross-platform support makes data management a breezeiOS Compatibility — Be mindful of platform-specific APIs and always test on both platforms early and oftenCompose Multiplatform — With iOS stable support, truly shared UI is now production-readyexpect/actual Pattern — Elegant solution for platform-specific implementations when needed🎯 ConclusionKotlin Multiplatform Mobile has matured into a production-ready solution for cross-platform development. With Compose Multiplatform for iOS now stable, developers can share both business logic and UI code while maintaining native performance and platform-specific optimizations.The Kyklos subscription management app demonstrates how to build a real-world application using modern KMP practices. By following Clean Architecture principles and leveraging powerful libraries like SQLDelight, you can create maintainable, testable, and scalable cross-platform applications.Ready to start your KMP journey? The complete source code for this tutorial is available on GitHub, showcasing the foundation we’ve built together. While we’re still implementing the full feature set, the architecture and setup demonstrate production-ready KMP practices you can use as a reference for your own projects.Coming Next in This Series:📝 Part 2: “KMP Reality Check: 5 Gotchas That Almost Killed My Project”📝 Part 3: “Material 3 on iOS: What Works, What Doesn’t, What’s Coming”📝 Part 4: “State Management in KMP: Beyond ViewModel”📝 Part 5: “Adding Comprehensive Testing to Your KMP Project”Follow me for updates on the Kyklos development journey!Have questions about Kotlin Multiplatform development? Found this tutorial helpful? Share your thoughts and experiences in the comments below!Tags: #KotlinMultiplatform #ComposeMultiplatform #AndroidDev #iOSDev #MobileDev #CrossPlatform #CleanArchitecture #SQLDelight",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*e0Jy6chNShlIOGzHcDCRbA.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cdiv tabindex=\"-1\" aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@faisalahmedwork1?source=post_page---byline--e4d3f4c6767c---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Faisal Ahmed\" src=\"https://miro.medium.com/v2/resize:fill:64:64/1*TcP30TpBDLAoXB17jMNRuw.jpeg\" width=\"32\" height=\"32\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cblockquote\u003e\u003cp id=\"0c50\"\u003e\u003cem\u003e🎯 \u003c/em\u003e\u003cstrong\u003e\u003cem\u003eWhat You’ll Learn\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e: Build a production-ready subscription tracker that runs natively on Android and iOS with 95% shared code, including database, business logic, and UI.\u003c/em\u003e\u003c/p\u003e\u003cp id=\"89a4\"\u003e\u003cem\u003e⏱️ \u003c/em\u003e\u003cstrong\u003e\u003cem\u003eTime Investment:\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e ~3–4 hours for complete implementation\u003c/em\u003e\u003c/p\u003e\u003cp id=\"abb0\"\u003e\u003cem\u003e🎯 \u003c/em\u003e\u003cstrong\u003e\u003cem\u003eTarget Audience:\u003c/em\u003e\u003c/strong\u003e\u003cem\u003e Android developers exploring KMP, iOS developers curious about Kotlin\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"2518\"\u003e🎯 Introduction\u003c/h2\u003e\u003cp id=\"0008\"\u003eRemember when building for both Android and iOS meant writing everything twice? Those days are over.\u003c/p\u003e\u003cp id=\"10ba\"\u003eWith Compose Multiplatform for iOS now stable (May 2025), you can build truly native apps with 95% shared code. No more maintaining two codebases, no more feature parity issues, no more “it works on Android but breaks on iOS.”\u003c/p\u003e\u003cp id=\"7393\"\u003eIn this comprehensive guide, we’ll build \u003cstrong\u003eKyklos\u003c/strong\u003e — a subscription management app that proves KMP is ready for production. We’ll tackle real challenges like cross-platform databases, Material Design on iOS, and the gotchas that can trip up new KMP developers.\u003c/p\u003e\u003cp id=\"ca42\"\u003eBy the end of this tutorial, you’ll have created a fully functional app with:\u003c/p\u003e\u003cul\u003e\u003cli id=\"ac5f\"\u003e✅ Shared business logic and UI between Android and iOS\u003c/li\u003e\u003cli id=\"3123\"\u003e✅ Clean Architecture with proper separation of concerns\u003c/li\u003e\u003cli id=\"9696\"\u003e✅ Type-safe database using SQLDelight\u003c/li\u003e\u003cli id=\"3909\"\u003e✅ Material Design 3 theming that works on iOS\u003c/li\u003e\u003cli id=\"6388\"\u003e✅ Production-ready iOS support with real device testing\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"72b8\"\u003e🏗️ What We’re Building\u003c/h2\u003e\u003cp id=\"4488\"\u003e\u003cstrong\u003eKyklos\u003c/strong\u003e (Greek for “cycle”) is a subscription management app that helps users track their recurring payments. The app features:\u003c/p\u003e\u003cul\u003e\u003cli id=\"294d\"\u003e📱 Cross-platform native UI with shared Compose code\u003c/li\u003e\u003cli id=\"7c63\"\u003e💰 Subscription tracking with intelligent cost calculations\u003c/li\u003e\u003cli id=\"2310\"\u003e🌍 Multi-currency support (USD, EUR, GBP, CAD, AUD, INR)\u003c/li\u003e\u003cli id=\"2c37\"\u003e📊 Monthly spending summaries and analytics\u003c/li\u003e\u003cli id=\"e925\"\u003e🎨 Modern Material Design 3 interface\u003c/li\u003e\u003cli id=\"54e5\"\u003e🔄 Real-time sync across platforms\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"a38f\"\u003e🛠️ Setting Up the Development Environment\u003c/h2\u003e\u003ch2 id=\"1e6a\"\u003ePrerequisites\u003c/h2\u003e\u003cul\u003e\u003cli id=\"c7f7\"\u003e\u003cstrong\u003eAndroid Studio\u003c/strong\u003e with the latest KMP plugin\u003c/li\u003e\u003cli id=\"2474\"\u003e\u003cstrong\u003eXcode 14+\u003c/strong\u003e (for iOS development and simulator)\u003c/li\u003e\u003cli id=\"9f55\"\u003e\u003cstrong\u003eJDK 11+\u003c/strong\u003e\u003c/li\u003e\u003cli id=\"87e2\"\u003e\u003cstrong\u003eKotlin 2.1.21+\u003c/strong\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"4316\"\u003eCreating the Project\u003c/h2\u003e\u003cp id=\"53ea\"\u003eStart by creating a new Kotlin Multiplatform project:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3a15\"\u003e# Option 1: Using the KMP wizard (Recommended)\u003cbr/\u003e# Visit: https://kmp.jetbrains.com/\u003cbr/\u003e# Configure: Android + iOS + Compose Multiplatform\u003cp\u003e# Option 2: Android Studio\u003cbr/\u003e# New Project \u0026gt; Kotlin Multiplatform \u0026gt; Mobile Application\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"2778\"\u003e\u003cstrong\u003e🏗️ Architecture Decision:\u003c/strong\u003e Why start with the official wizard? It sets up the proper expect/actual structure and configures Compose Multiplatform correctly for both platforms.\u003c/p\u003e\u003ch2 id=\"4ab3\"\u003e📦 Dependencies and Project Structure\u003c/h2\u003e\u003ch2 id=\"1e78\"\u003eCore Dependencies\u003c/h2\u003e\u003cp id=\"6b63\"\u003eLet’s set up our \u003ccode\u003egradle/libs.versions.toml\u003c/code\u003e with production-ready versions:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8533\"\u003e[versions]\u003cbr/\u003ekotlin = \u0026#34;2.1.21\u0026#34;\u003cbr/\u003ecomposeMultiplatform = \u0026#34;1.8.2\u0026#34;\u003cbr/\u003esqlDelight = \u0026#34;2.0.2\u0026#34;\u003cbr/\u003ekotlinx-datetime = \u0026#34;0.6.0\u0026#34;\u003cbr/\u003euuid = \u0026#34;0.8.4\u0026#34;\u003cp\u003e[libraries]\u003cbr/\u003e# SQLDelight for cross-platform database\u003cbr/\u003esqlDelight-driver-android = { module = \u0026#34;app.cash.sqldelight:android-driver\u0026#34;, version.ref = \u0026#34;sqlDelight\u0026#34; }\u003cbr/\u003esqlDelight-driver-native = { module = \u0026#34;app.cash.sqldelight:native-driver\u0026#34;, version.ref = \u0026#34;sqlDelight\u0026#34; }\u003cbr/\u003esqlDelight-runtime = { module = \u0026#34;app.cash.sqldelight:runtime\u0026#34;, version.ref = \u0026#34;sqlDelight\u0026#34; }\u003cbr/\u003esqlDelight-coroutines = { module = \u0026#34;app.cash.sqldelight:coroutines-extensions\u0026#34;, version.ref = \u0026#34;sqlDelight\u0026#34; }\u003c/p\u003e\u003cp\u003e# Cross-platform utilities\u003cbr/\u003ekotlinx-datetime = { module = \u0026#34;org.jetbrains.kotlinx:kotlinx-datetime\u0026#34;, version.ref = \u0026#34;kotlinx-datetime\u0026#34; }\u003cbr/\u003euuid = { module = \u0026#34;com.benasher44:uuid\u0026#34;, version.ref = \u0026#34;uuid\u0026#34; }\u003c/p\u003e\u003cp\u003e[plugins]\u003cbr/\u003esqlDelight = { id = \u0026#34;app.cash.sqldelight\u0026#34;, version.ref = \u0026#34;sqlDelight\u0026#34; }\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"8e22\"\u003eProject Architecture\u003c/h2\u003e\u003cp id=\"17c6\"\u003eWe’ll implement \u003cstrong\u003eClean Architecture\u003c/strong\u003e with clear layer separation:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"46c5\"\u003e📱 Presentation Layer (UI)\u003cbr/\u003e├── 🎨 components/     # Reusable UI components\u003cbr/\u003e├── 📄 screens/        # Screen-level composables  \u003cbr/\u003e└── 🎭 theme/          # Material Design theme\u003cp\u003e💼 Domain Layer (Business Logic)\u003cbr/\u003e├── 📋 usecase/        # Business use cases\u003cbr/\u003e└── 📄 repository/     # Repository interfaces\u003c/p\u003e\u003cp\u003e💾 Data Layer (Data Management)  \u003cbr/\u003e├── 🗄️ local/          # SQLDelight database\u003cbr/\u003e├── 📊 repository/     # Repository implementations\u003cbr/\u003e└── 🔄 model/          # Data models\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"d388\"\u003e\u003cstrong\u003e🏗️ Architecture Decision:\u003c/strong\u003e Clean Architecture separates platform code from business logic, making testing easier and code more maintainable across Android and iOS.\u003c/p\u003e\u003ch2 id=\"e0ac\"\u003e🗄️ Setting Up SQLDelight Database\u003c/h2\u003e\u003ch2 id=\"6307\"\u003e1. Configure SQLDelight in build.gradle.kts\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"b90a\"\u003esqldelight {\u003cbr/\u003e    databases {\u003cbr/\u003e        create(\u0026#34;KyklosDatabase\u0026#34;) {\u003cbr/\u003e            packageName.set(\u0026#34;dev.faisalahmed.kyklos.db\u0026#34;)\u003cbr/\u003e            srcDirs(\u0026#34;src/commonMain/sqldelight\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"b736\"\u003e2. Create Database Schema\u003c/h2\u003e\u003cp id=\"7b06\"\u003eCreate \u003ccode\u003ecomposeApp/src/commonMain/sqldelight/database/Subscription.sq\u003c/code\u003e:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"47d4\"\u003e-- Subscription table with proper indexing for performance\u003cbr/\u003eCREATE TABLE subscription (\u003cbr/\u003e    id TEXT NOT NULL PRIMARY KEY,\u003cbr/\u003e    name TEXT NOT NULL,\u003cbr/\u003e    cost REAL NOT NULL,\u003cbr/\u003e    currency_code TEXT NOT NULL,\u003cbr/\u003e    billing_cycle TEXT NOT NULL,\u003cbr/\u003e    next_payment_date INTEGER NOT NULL,\u003cbr/\u003e    is_active INTEGER NOT NULL DEFAULT 1,\u003cbr/\u003e    created_at INTEGER NOT NULL,\u003cbr/\u003e    updated_at INTEGER NOT NULL,\u003cbr/\u003e    notes TEXT,\u003cbr/\u003e    FOREIGN KEY (currency_code) REFERENCES currency(code)\u003cbr/\u003e);\u003cp\u003e-- Performance indexes for common queries\u003cbr/\u003eCREATE INDEX idx_subscription_active ON subscription(is_active);\u003cbr/\u003eCREATE INDEX idx_subscription_next_payment ON subscription(next_payment_date);\u003c/p\u003e\u003cp\u003e-- Query: Get all subscriptions with currency info\u003cbr/\u003eselectAll:\u003cbr/\u003eSELECT\u003cbr/\u003e    s.*,\u003cbr/\u003e    c.symbol AS currency_symbol,\u003cbr/\u003e    c.name AS currency_name,\u003cbr/\u003e    c.exchange_rate_to_usd\u003cbr/\u003eFROM subscription s\u003cbr/\u003eJOIN currency c ON s.currency_code = c.code\u003cbr/\u003eORDER BY s.next_payment_date ASC;\u003c/p\u003e\u003cp\u003e-- Query: Get only active subscriptions\u003cbr/\u003eselectActive:\u003cbr/\u003eSELECT\u003cbr/\u003e    s.*,\u003cbr/\u003e    c.symbol AS currency_symbol,\u003cbr/\u003e    c.name AS currency_name,\u003cbr/\u003e    c.exchange_rate_to_usd\u003cbr/\u003eFROM subscription s\u003cbr/\u003eJOIN currency c ON s.currency_code = c.code\u003cbr/\u003eWHERE s.is_active = 1\u003cbr/\u003eORDER BY s.next_payment_date ASC;\u003c/p\u003e\u003cp\u003e-- Insert new subscription\u003cbr/\u003einsertSubscription:\u003cbr/\u003eINSERT INTO subscription (\u003cbr/\u003e    id, name, cost, currency_code, billing_cycle,\u003cbr/\u003e    next_payment_date, is_active, created_at, updated_at, notes\u003cbr/\u003e) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);\u003c/p\u003e\u003cp\u003e-- Analytics query for monthly cost calculations\u003cbr/\u003eselectTotalMonthlyCostByActive:\u003cbr/\u003eSELECT\u003cbr/\u003e    s.currency_code,\u003cbr/\u003e    c.symbol AS currency_symbol,\u003cbr/\u003e    c.exchange_rate_to_usd,\u003cbr/\u003e    SUM(\u003cbr/\u003e        CASE\u003cbr/\u003e            WHEN s.billing_cycle = \u0026#39;WEEKLY\u0026#39; THEN s.cost * 4.33\u003cbr/\u003e            WHEN s.billing_cycle = \u0026#39;MONTHLY\u0026#39; THEN s.cost\u003cbr/\u003e            WHEN s.billing_cycle = \u0026#39;QUARTERLY\u0026#39; THEN s.cost / 3.0\u003cbr/\u003e            WHEN s.billing_cycle = \u0026#39;SEMI_ANNUALLY\u0026#39; THEN s.cost / 6.0\u003cbr/\u003e            WHEN s.billing_cycle = \u0026#39;ANNUALLY\u0026#39; THEN s.cost / 12.0\u003cbr/\u003e            ELSE s.cost\u003cbr/\u003e        END\u003cbr/\u003e    ) AS monthly_cost\u003cbr/\u003eFROM subscription s\u003cbr/\u003eJOIN currency c ON s.currency_code = c.code\u003cbr/\u003eWHERE s.is_active = ?\u003cbr/\u003eGROUP BY s.currency_code, c.symbol, c.exchange_rate_to_usd;\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"a884\"\u003e3. Cross-Platform Database Drivers\u003c/h2\u003e\u003cp id=\"f517\"\u003eThe key to SQLDelight’s cross-platform magic is the \u003cstrong\u003eexpect/actual\u003c/strong\u003e pattern:\u003c/p\u003e\u003cp id=\"4440\"\u003e\u003cstrong\u003eCommon interface\u003c/strong\u003e (\u003ccode\u003ecommonMain/data/local/DatabaseDriverFactory.kt\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0319\"\u003eimport app.cash.sqldelight.db.SqlDriver\u003cp\u003eexpect class DatabaseDriverFactory {\u003cbr/\u003e    fun createDriver(): SqlDriver\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"d034\"\u003e\u003cstrong\u003eAndroid implementation\u003c/strong\u003e (\u003ccode\u003eandroidMain/data/local/DatabaseDriverFactory.android.kt\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"89c2\"\u003eimport android.content.Context\u003cbr/\u003eimport app.cash.sqldelight.db.SqlDriver\u003cbr/\u003eimport app.cash.sqldelight.driver.android.AndroidSqliteDriver\u003cbr/\u003eimport dev.faisalahmed.kyklos.db.KyklosDatabase\u003cp\u003eactual class DatabaseDriverFactory(private val context: Context) {\u003cbr/\u003e    actual fun createDriver(): SqlDriver {\u003cbr/\u003e        return AndroidSqliteDriver(\u003cbr/\u003e            schema = KyklosDatabase.Schema,\u003cbr/\u003e            context = context,\u003cbr/\u003e            name = \u0026#34;kyklos.db\u0026#34;\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"46c8\"\u003e\u003cstrong\u003eiOS implementation\u003c/strong\u003e (\u003ccode\u003eiosMain/data/local/DatabaseDriverFactory.ios.kt\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"827f\"\u003eimport app.cash.sqldelight.db.SqlDriver\u003cbr/\u003eimport app.cash.sqldelight.driver.native.NativeSqliteDriver\u003cbr/\u003eimport dev.faisalahmed.kyklos.db.KyklosDatabase\u003cp\u003eactual class DatabaseDriverFactory {\u003cbr/\u003e    actual fun createDriver(): SqlDriver {\u003cbr/\u003e        return NativeSqliteDriver(\u003cbr/\u003e            schema = KyklosDatabase.Schema,\u003cbr/\u003e            name = \u0026#34;kyklos.db\u0026#34;\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"7a2a\"\u003e🏛️ Implementing Clean Architecture\u003c/h2\u003e\u003ch2 id=\"28b7\"\u003e1. Domain Layer — Business Logic\u003c/h2\u003e\u003cp id=\"4597\"\u003e\u003cstrong\u003eRepository Interface\u003c/strong\u003e (\u003ccode\u003edomain/repository/SubscriptionRepository.kt\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"44af\"\u003eimport dev.faisalahmed.kyklos.data.model.Subscription\u003cbr/\u003eimport kotlinx.coroutines.flow.Flow\u003cp\u003einterface SubscriptionRepository {\u003cbr/\u003e    fun getAllSubscriptions(): Flow\u0026lt;List\u0026lt;Subscription\u0026gt;\u0026gt;\u003cbr/\u003e    fun getActiveSubscriptions(): Flow\u0026lt;List\u0026lt;Subscription\u0026gt;\u0026gt;\u003cbr/\u003e    suspend fun getSubscriptionById(id: String): Subscription?\u003cbr/\u003e    suspend fun insertSubscription(subscription: Subscription)\u003cbr/\u003e    suspend fun updateSubscription(subscription: Subscription)\u003cbr/\u003e    suspend fun deleteSubscription(id: String)\u003cbr/\u003e    suspend fun toggleSubscriptionStatus(id: String)\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"14ed\"\u003e\u003cstrong\u003eUse Case Example\u003c/strong\u003e (\u003ccode\u003edomain/usecase/GetSubscriptionsUseCase.kt\u003c/code\u003e):\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"7a70\"\u003eclass GetSubscriptionsUseCase(\u003cbr/\u003e    private val repository: SubscriptionRepository\u003cbr/\u003e) {\u003cbr/\u003e    operator fun invoke(activeOnly: Boolean = false): Flow\u0026lt;List\u0026lt;Subscription\u0026gt;\u0026gt; {\u003cbr/\u003e        return if (activeOnly) {\u003cbr/\u003e            repository.getActiveSubscriptions()\u003cbr/\u003e        } else {\u003cbr/\u003e            repository.getAllSubscriptions()\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"8bd2\"\u003e2. Data Layer — Repository Implementation\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"b56c\"\u003eclass SubscriptionRepositoryImpl(\u003cbr/\u003e    private val database: KyklosDatabase\u003cbr/\u003e) : SubscriptionRepository {\u003cp\u003e// Convert SQLDelight query results to domain models\u003cbr/\u003e    override fun getAllSubscriptions(): Flow\u0026lt;List\u0026lt;Subscription\u0026gt;\u0026gt; {\u003cbr/\u003e        return database.subscriptionQueries\u003cbr/\u003e            .selectAll()\u003cbr/\u003e            .asFlow()\u003cbr/\u003e            .mapToList(Dispatchers.IO)\u003cbr/\u003e            .map { rows -\u0026gt;\u003cbr/\u003e                rows.map { row -\u0026gt; row.toSubscription() }\u003cbr/\u003e            }\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    // Insert subscription with proper error handling\u003cbr/\u003e    override suspend fun insertSubscription(subscription: Subscription) {\u003cbr/\u003e        try {\u003cbr/\u003e            database.subscriptionQueries.insertSubscription(\u003cbr/\u003e                id = subscription.id,\u003cbr/\u003e                name = subscription.name,\u003cbr/\u003e                cost = subscription.cost,\u003cbr/\u003e                currency_code = subscription.currency.code,\u003cbr/\u003e                billing_cycle = subscription.billingCycle.name,\u003cbr/\u003e                next_payment_date = subscription.nextPaymentDate.toEpochMilliseconds(),\u003cbr/\u003e                is_active = if (subscription.isActive) 1L else 0L,\u003cbr/\u003e                created_at = subscription.createdAt.toEpochMilliseconds(),\u003cbr/\u003e                updated_at = subscription.updatedAt.toEpochMilliseconds(),\u003cbr/\u003e                notes = subscription.notes\u003cbr/\u003e            )\u003cbr/\u003e        } catch (e: Exception) {\u003cbr/\u003e            // Handle database errors appropriately\u003cbr/\u003e            throw DatabaseException(\u0026#34;Failed to insert subscription: ${e.message}\u0026#34;)\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"7f29\"\u003e3. Data Models with Business Logic\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"6b38\"\u003edata class Subscription(\u003cbr/\u003e    val id: String,\u003cbr/\u003e    val name: String,\u003cbr/\u003e    val cost: Double,\u003cbr/\u003e    val currency: Currency,\u003cbr/\u003e    val billingCycle: BillingCycle,\u003cbr/\u003e    val nextPaymentDate: Instant,\u003cbr/\u003e    val isActive: Boolean = true,\u003cbr/\u003e    val createdAt: Instant,\u003cbr/\u003e    val updatedAt: Instant,\u003cbr/\u003e    val notes: String? = null\u003cbr/\u003e) {\u003cbr/\u003e    // Business logic: Calculate monthly cost based on billing cycle\u003cbr/\u003e    fun calculateMonthlyCost(): Double {\u003cbr/\u003e        return billingCycle.calculateMonthlyCost(cost)\u003cbr/\u003e    }\u003cp\u003e    // Business logic: Convert to USD for unified calculations\u003cbr/\u003e    fun calculateMonthlyCostInUsd(): Double {\u003cbr/\u003e        val monthlyCost = calculateMonthlyCost()\u003cbr/\u003e        return currency.convertToUsd(monthlyCost)\u003cbr/\u003e    }\u003c/p\u003e\u003cp\u003e    // Formatting for display\u003cbr/\u003e    fun formatCost(): String {\u003cbr/\u003e        return currency.formatAmount(cost)\u003cbr/\u003e    }\u003cbr/\u003e    companion object {\u003cbr/\u003e        // Factory method for creating new subscriptions\u003cbr/\u003e        fun create(\u003cbr/\u003e            name: String,\u003cbr/\u003e            cost: Double,\u003cbr/\u003e            currency: Currency,\u003cbr/\u003e            billingCycle: BillingCycle,\u003cbr/\u003e            nextPaymentDate: Instant,\u003cbr/\u003e            notes: String? = null,\u003cbr/\u003e            now: Instant = Clock.System.now()\u003cbr/\u003e        ): Subscription {\u003cbr/\u003e            val id = uuid4().toString()\u003cbr/\u003e            return Subscription(\u003cbr/\u003e                id = id,\u003cbr/\u003e                name = name,\u003cbr/\u003e                cost = cost,\u003cbr/\u003e                currency = currency,\u003cbr/\u003e                billingCycle = billingCycle,\u003cbr/\u003e                nextPaymentDate = nextPaymentDate,\u003cbr/\u003e                createdAt = now,\u003cbr/\u003e                updatedAt = now,\u003cbr/\u003e                notes = notes\u003cbr/\u003e            )\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"bb52\"\u003e🎨 Building the UI with Compose Multiplatform\u003c/h2\u003e\u003ch2 id=\"eece\"\u003e1. Material Design 3 Theme\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"3050\"\u003e@Composable\u003cbr/\u003efun KyklosTheme(\u003cbr/\u003e    darkTheme: Boolean = isSystemInDarkTheme(),\u003cbr/\u003e    content: @Composable () -\u0026gt; Unit\u003cbr/\u003e) {\u003cbr/\u003e    val colorScheme = if (darkTheme) {\u003cbr/\u003e        DarkColorScheme\u003cbr/\u003e    } else {\u003cbr/\u003e        LightColorScheme.copy(\u003cbr/\u003e            primary = KyklosColors.KyklosPrimary,\u003cbr/\u003e            onPrimary = KyklosColors.KyklosOnPrimary,\u003cbr/\u003e            primaryContainer = KyklosColors.KyklosPrimaryContainer,\u003cbr/\u003e            onPrimaryContainer = KyklosColors.KyklosOnPrimaryContainer,\u003cbr/\u003e        )\u003cbr/\u003e    }\u003cp\u003e    // Modern rounded shapes that work well on both platforms\u003cbr/\u003e    val modernShapes = Shapes(\u003cbr/\u003e        extraSmall = RoundedCornerShape(8.dp),\u003cbr/\u003e        small = RoundedCornerShape(12.dp),\u003cbr/\u003e        medium = RoundedCornerShape(16.dp),\u003cbr/\u003e        large = RoundedCornerShape(24.dp),\u003cbr/\u003e        extraLarge = RoundedCornerShape(32.dp)\u003cbr/\u003e    )\u003c/p\u003e\u003cp\u003e    MaterialTheme(\u003cbr/\u003e        colorScheme = colorScheme,\u003cbr/\u003e        shapes = modernShapes,\u003cbr/\u003e        typography = KyklosTypography,\u003cbr/\u003e        content = content\u003cbr/\u003e    )\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"906b\"\u003e2. Reusable UI Components\u003c/h2\u003e\u003cp id=\"afe0\"\u003e\u003cstrong\u003eSubscription Card Component:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"adde\"\u003e@OptIn(ExperimentalMaterial3Api::class)\u003cbr/\u003e@Composable\u003cbr/\u003efun SubscriptionCard(\u003cbr/\u003e    subscription: Subscription,\u003cbr/\u003e    onClick: () -\u0026gt; Unit,\u003cbr/\u003e    modifier: Modifier = Modifier\u003cbr/\u003e) {\u003cbr/\u003e    Card(\u003cbr/\u003e        onClick = onClick,\u003cbr/\u003e        modifier = modifier.fillMaxWidth(),\u003cbr/\u003e        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),\u003cbr/\u003e        colors = CardDefaults.cardColors(\u003cbr/\u003e            containerColor = MaterialTheme.colorScheme.surfaceVariant\u003cbr/\u003e        )\u003cbr/\u003e    ) {\u003cbr/\u003e        Column(\u003cbr/\u003e            modifier = Modifier.padding(16.dp)\u003cbr/\u003e        ) {\u003cbr/\u003e            // Header row with name and cost\u003cbr/\u003e            Row(\u003cbr/\u003e                modifier = Modifier.fillMaxWidth(),\u003cbr/\u003e                horizontalArrangement = Arrangement.SpaceBetween,\u003cbr/\u003e                verticalAlignment = Alignment.CenterVertically\u003cbr/\u003e            ) {\u003cbr/\u003e                Text(\u003cbr/\u003e                    text = subscription.name,\u003cbr/\u003e                    style = MaterialTheme.typography.titleMedium,\u003cbr/\u003e                    fontWeight = FontWeight.SemiBold,\u003cbr/\u003e                    maxLines = 1,\u003cbr/\u003e                    overflow = TextOverflow.Ellipsis,\u003cbr/\u003e                    modifier = Modifier.weight(1f)\u003cbr/\u003e                )\u003cp\u003e                Text(\u003cbr/\u003e                    text = subscription.formatCost(),\u003cbr/\u003e                    style = MaterialTheme.typography.titleMedium,\u003cbr/\u003e                    fontWeight = FontWeight.Bold,\u003cbr/\u003e                    color = MaterialTheme.colorScheme.primary\u003cbr/\u003e                )\u003cbr/\u003e            }\u003c/p\u003e\u003cp\u003e            Spacer(modifier = Modifier.height(8.dp))\u003c/p\u003e\u003cp\u003e            // Footer row with next payment and billing cycle\u003cbr/\u003e            Row(\u003cbr/\u003e                modifier = Modifier.fillMaxWidth(),\u003cbr/\u003e                horizontalArrangement = Arrangement.SpaceBetween,\u003cbr/\u003e                verticalAlignment = Alignment.CenterVertically\u003cbr/\u003e            ) {\u003cbr/\u003e                Text(\u003cbr/\u003e                    text = \u0026#34;Next payment: ${subscription.nextPaymentDate.formatDate()}\u0026#34;,\u003cbr/\u003e                    style = MaterialTheme.typography.bodyMedium,\u003cbr/\u003e                    color = MaterialTheme.colorScheme.onSurfaceVariant\u003cbr/\u003e                )\u003c/p\u003e\u003cp\u003e                Text(\u003cbr/\u003e                    text = subscription.billingCycle.displayName,\u003cbr/\u003e                    style = MaterialTheme.typography.labelMedium,\u003cbr/\u003e                    color = MaterialTheme.colorScheme.secondary\u003cbr/\u003e                )\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"bbcd\"\u003e3. Screen-Level Composables\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"f694\"\u003e@OptIn(ExperimentalMaterial3Api::class)\u003cbr/\u003e@Composable\u003cbr/\u003efun SubscriptionListScreen(\u003cbr/\u003e    subscriptions: List\u0026lt;Subscription\u0026gt; = emptyList(),\u003cbr/\u003e    totalMonthlyCost: String = \u0026#34;$0.00\u0026#34;,\u003cbr/\u003e    onAddSubscription: () -\u0026gt; Unit = {},\u003cbr/\u003e    onSubscriptionClick: (Subscription) -\u0026gt; Unit = {},\u003cbr/\u003e    modifier: Modifier = Modifier\u003cbr/\u003e) {\u003cbr/\u003e    Scaffold(\u003cbr/\u003e        topBar = {\u003cbr/\u003e            TopAppBar(\u003cbr/\u003e                title = {\u003cbr/\u003e                    Text(\u003cbr/\u003e                        text = \u0026#34;Kyklos\u0026#34;,\u003cbr/\u003e                        style = MaterialTheme.typography.headlineMedium,\u003cbr/\u003e                        fontWeight = FontWeight.Bold\u003cbr/\u003e                    )\u003cbr/\u003e                },\u003cbr/\u003e                colors = TopAppBarDefaults.topAppBarColors(\u003cbr/\u003e                    containerColor = MaterialTheme.colorScheme.primaryContainer,\u003cbr/\u003e                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer\u003cbr/\u003e                )\u003cbr/\u003e            )\u003cbr/\u003e        },\u003cbr/\u003e        floatingActionButton = {\u003cbr/\u003e            ExtendedFloatingActionButton(\u003cbr/\u003e                onClick = onAddSubscription,\u003cbr/\u003e                icon = {\u003cbr/\u003e                    Icon(\u003cbr/\u003e                        imageVector = Icons.Default.Add,\u003cbr/\u003e                        contentDescription = null\u003cbr/\u003e                    )\u003cbr/\u003e                },\u003cbr/\u003e                text = {\u003cbr/\u003e                    Text(\u0026#34;Add Subscription\u0026#34;)\u003cbr/\u003e                },\u003cbr/\u003e                containerColor = MaterialTheme.colorScheme.primary,\u003cbr/\u003e                contentColor = MaterialTheme.colorScheme.onPrimary\u003cbr/\u003e            )\u003cbr/\u003e        }\u003cbr/\u003e    ) { paddingValues -\u0026gt;\u003cbr/\u003e        LazyColumn(\u003cbr/\u003e            modifier = modifier.padding(paddingValues),\u003cbr/\u003e            contentPadding = PaddingValues(16.dp),\u003cbr/\u003e            verticalArrangement = Arrangement.spacedBy(16.dp)\u003cbr/\u003e        ) {\u003cbr/\u003e            // Monthly summary card\u003cbr/\u003e            item {\u003cbr/\u003e                MonthlySummaryCard(\u003cbr/\u003e                    totalMonthlyCost = totalMonthlyCost,\u003cbr/\u003e                    subscriptionCount = subscriptions.size\u003cbr/\u003e                )\u003cbr/\u003e            }\u003cp\u003e            // Subscription list\u003cbr/\u003e            items(subscriptions) { subscription -\u0026gt;\u003cbr/\u003e                SubscriptionCard(\u003cbr/\u003e                    subscription = subscription,\u003cbr/\u003e                    onClick = { onSubscriptionClick(subscription) }\u003cbr/\u003e                )\u003cbr/\u003e            }\u003c/p\u003e\u003cp\u003e            // Empty state\u003cbr/\u003e            if (subscriptions.isEmpty()) {\u003cbr/\u003e                item {\u003cbr/\u003e                    EmptyStateComponent(\u003cbr/\u003e                        message = \u0026#34;No subscriptions yet\u0026#34;,\u003cbr/\u003e                        actionText = \u0026#34;Add your first subscription\u0026#34;,\u003cbr/\u003e                        onActionClick = onAddSubscription\u003cbr/\u003e                    )\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"0ee5\"\u003e⚠️ iOS Compatibility: Critical Gotchas\u003c/h2\u003e\u003cp id=\"8323\"\u003eWhen developing for iOS with Kotlin Multiplatform, there are several compatibility gotchas to watch out for:\u003c/p\u003e\u003cp id=\"8bb2\"\u003e\u003cstrong\u003e💡 Pro Tip:\u003c/strong\u003e These gotchas cost me hours of debugging. Learning them upfront will save you significant development time.\u003c/p\u003e\u003ch2 id=\"49fe\"\u003e1. String Formatting\u003c/h2\u003e\u003cp id=\"1e0a\"\u003e❌ \u003cstrong\u003eDon’t use:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"2a97\"\u003eString.format(\u0026#34;%.2f\u0026#34;, value)  // Not available on iOS/KMP\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9d12\"\u003e✅ \u003cstrong\u003eUse instead:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b5a6\"\u003e// Option 1: String templates for simple cases\u003cbr/\u003e\u0026#34;${currency.symbol}$cost\u0026#34;\u003cp\u003e// Option 2: Expect/actual pattern for complex formatting\u003cbr/\u003eexpect fun Double.formatCurrency(symbol: String): String\u003c/p\u003e\u003cp\u003e// Android actual\u003cbr/\u003eactual fun Double.formatCurrency(symbol: String): String =\u003cbr/\u003e    \u0026#34;$symbol%.2f\u0026#34;.format(this)\u003c/p\u003e\u003cp\u003e// iOS actual (using NSString)\u003cbr/\u003eactual fun Double.formatCurrency(symbol: String): String =\u003cbr/\u003e    NSString.init(format = \u0026#34;$symbol%.2f\u0026#34;, this).toString()\u003c/p\u003e\u003cp\u003e// Option 3: Manual precision handling (less preferred)\u003cbr/\u003efun Double.toCurrencyString(symbol: String): String {\u003cbr/\u003e    val rounded = (this * 100).toLong() / 100.0\u003cbr/\u003e    return \u0026#34;$symbol$rounded\u0026#34;\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"bde2\"\u003e2. UUID Generation\u003c/h2\u003e\u003cp id=\"6088\"\u003e❌ \u003cstrong\u003eDon’t use:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b26f\"\u003eUUID.randomUUID()  // Java UUID not available on iOS\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ed34\"\u003e✅ \u003cstrong\u003eUse instead:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"719c\"\u003eimport com.benasher44.uuid.uuid4\u003cbr/\u003eval id = uuid4().toString()  // Cross-platform UUID\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"83d6\"\u003e🚀 Building and Running\u003c/h2\u003e\u003ch2 id=\"a3b8\"\u003eBuild Commands\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"62fb\"\u003e# Android\u003cbr/\u003e./gradlew compileDebugKotlinAndroid    # Compile Android code\u003cbr/\u003e./gradlew installDebug                 # Install on device/emulator\u003cp\u003e# iOS (compilation check)\u003cbr/\u003e./gradlew compileKotlinIosX64         # Compile iOS code\u003cbr/\u003e./gradlew linkDebugFrameworkIosX64    # Link iOS framework\u003c/p\u003e\u003cp\u003e# All platforms\u003cbr/\u003e./gradlew build                       # Build all targets\u003c/p\u003e\u003cp\u003e# SQLDelight\u003cbr/\u003e./gradlew generateCommonMainKyklosDatabaseInterface\u003c/p\u003e\u003cp\u003e# Clean build\u003cbr/\u003e./gradlew clean build\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"b5a2\"\u003e📱 Running on iOS Simulator\u003c/h2\u003e\u003cp id=\"06e5\"\u003eTo run your Kotlin Multiplatform app on the iOS Simulator:\u003c/p\u003e\u003ch2 id=\"e0b5\"\u003e1. Generate iOS Framework\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"85ff\"\u003e# Build the iOS framework\u003cbr/\u003e./gradlew linkDebugFrameworkIosX64\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"b00b\"\u003e2. Open iOS Project in Xcode\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"029c\"\u003e# Navigate to iOS app directory\u003cbr/\u003ecd iosApp\u003cp\u003e# Open in Xcode\u003cbr/\u003eopen iosApp.xcodeproj\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"bfe5\"\u003e3. Configure and Run\u003c/h2\u003e\u003col\u003e\u003cli id=\"f063\"\u003e\u003cstrong\u003eSelect Target Device:\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cul\u003e\u003cli id=\"c7bc\"\u003eIn Xcode, click on the device selection dropdown\u003c/li\u003e\u003cli id=\"01c9\"\u003eChoose your preferred iOS Simulator (e.g., iPhone 15, iPad Pro)\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"f5d6\"\u003e\u003cstrong\u003e2. Build and Run:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"28ff\"\u003ePress \u003ccode\u003eCmd + R\u003c/code\u003e or click the Run button\u003c/li\u003e\u003cli id=\"ac9e\"\u003eXcode will build the project and launch the iOS Simulator\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"5a50\"\u003e4. Development Workflow\u003c/h2\u003e\u003cp id=\"d2dd\"\u003eFor efficient development:\u003c/p\u003e\u003col\u003e\u003cli id=\"9302\"\u003eMake Kotlin changes in your shared code\u003c/li\u003e\u003cli id=\"774e\"\u003eRebuild framework: \u003ccode\u003e./gradlew linkDebugFrameworkIosX64\u003c/code\u003e\u003c/li\u003e\u003cli id=\"50f7\"\u003eRun from Xcode to test changes on iOS Simulator\u003c/li\u003e\u003cli id=\"2d01\"\u003eUse Compose Hot Reload when available for UI changes\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"d75d\"\u003e5. Troubleshooting iOS Issues\u003c/h2\u003e\u003cp id=\"185c\"\u003e\u003cstrong\u003eCommon Issues:\u003c/strong\u003e\u003c/p\u003e\u003col\u003e\u003cli id=\"5296\"\u003e\u003cstrong\u003eFramework Not Found:\u003c/strong\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre\u003e\u003cspan id=\"fdea\"\u003e# Clean and rebuild framework\u003cbr/\u003e./gradlew clean\u003cbr/\u003e./gradlew linkDebugFrameworkIosX64\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"3769\"\u003e\u003cstrong\u003e2. Simulator Not Starting:\u003c/strong\u003e\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8478\"\u003e# Reset simulator\u003cbr/\u003excrun simctl erase all\u003cbr/\u003excrun simctl boot \u0026#34;iPhone 15\u0026#34;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"8f48\"\u003e\u003cstrong\u003e3. Build Errors in Xcode:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"8bfa\"\u003eEnsure your iOS deployment target matches your KMP project settings\u003c/li\u003e\u003cli id=\"de08\"\u003eCheck that the framework is properly linked in Xcode project settings\u003c/li\u003e\u003cli id=\"787a\"\u003eVerify the framework search paths in Build Settings\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"f3dd\"\u003e🎯 Advanced Features and Next Steps\u003c/h2\u003e\u003ch2 id=\"8d53\"\u003eCurrent Implementation Status\u003c/h2\u003e\u003cp id=\"46d8\"\u003eBased on the current Kyklos codebase, we have successfully implemented:\u003c/p\u003e\u003cp id=\"cdbe\"\u003e✅\u003cstrong\u003e Core Features:\u003c/strong\u003e\u003c/p\u003e\u003cul\u003e\u003cli id=\"45a6\"\u003eCross-platform project setup with KMP\u003c/li\u003e\u003cli id=\"d1c8\"\u003eSQLDelight database configuration\u003c/li\u003e\u003cli id=\"4aec\"\u003eMaterial Design 3 theming\u003c/li\u003e\u003cli id=\"7085\"\u003eClean Architecture foundation\u003c/li\u003e\u003cli id=\"2e34\"\u003eBasic UI components and screens\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"213f\"\u003eImmediate Next Steps\u003c/h2\u003e\u003col\u003e\u003cli id=\"95bf\"\u003e\u003cstrong\u003eComplete CRUD Operations\u003c/strong\u003e — Full subscription management\u003c/li\u003e\u003cli id=\"250e\"\u003e\u003cstrong\u003eState Management\u003c/strong\u003e — Add StateFlow and ViewModel integration\u003c/li\u003e\u003cli id=\"7cf9\"\u003e\u003cstrong\u003eDependency Injection\u003c/strong\u003e — Implement Koin for DI\u003c/li\u003e\u003cli id=\"dcb1\"\u003e\u003cstrong\u003eNavigation\u003c/strong\u003e — Add Compose Navigation with type safety\u003c/li\u003e\u003cli id=\"53a1\"\u003e\u003cstrong\u003eError Handling\u003c/strong\u003e — Comprehensive error states and recovery\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"a4ce\"\u003eFuture Roadmap\u003c/h2\u003e\u003col\u003e\u003cli id=\"7e64\"\u003e\u003cstrong\u003eNetworking\u003c/strong\u003e — Add Ktor for API calls and sync\u003c/li\u003e\u003cli id=\"4c7d\"\u003e\u003cstrong\u003eTesting Suite\u003c/strong\u003e — Comprehensive test coverage (planned for Part 5 of this series)\u003c/li\u003e\u003cli id=\"fa5e\"\u003e\u003cstrong\u003eCI/CD\u003c/strong\u003e — GitHub Actions for automated builds and testing\u003c/li\u003e\u003cli id=\"f4fb\"\u003e\u003cstrong\u003ePlatform Expansion\u003c/strong\u003e — Web and Desktop support with Compose Multiplatform\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"7882\"\u003e📚 Key Takeaways\u003c/h2\u003e\u003cp id=\"f885\"\u003eBuilding a Kotlin Multiplatform app teaches several valuable lessons:\u003c/p\u003e\u003col\u003e\u003cli id=\"1576\"\u003e\u003cstrong\u003eArchitecture Matters\u003c/strong\u003e — Clean Architecture provides excellent separation of concerns across platforms\u003c/li\u003e\u003cli id=\"0f2c\"\u003e\u003cstrong\u003eSQLDelight is Powerful\u003c/strong\u003e — Type-safe SQL with excellent cross-platform support makes data management a breeze\u003c/li\u003e\u003cli id=\"dc22\"\u003e\u003cstrong\u003eiOS Compatibility\u003c/strong\u003e — Be mindful of platform-specific APIs and always test on both platforms early and often\u003c/li\u003e\u003cli id=\"1723\"\u003e\u003cstrong\u003eCompose Multiplatform\u003c/strong\u003e — With iOS stable support, truly shared UI is now production-ready\u003c/li\u003e\u003cli id=\"7df7\"\u003e\u003cstrong\u003eexpect/actual Pattern\u003c/strong\u003e — Elegant solution for platform-specific implementations when needed\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"80df\"\u003e🎯 Conclusion\u003c/h2\u003e\u003cp id=\"ebdc\"\u003eKotlin Multiplatform Mobile has matured into a production-ready solution for cross-platform development. With Compose Multiplatform for iOS now stable, developers can share both business logic and UI code while maintaining native performance and platform-specific optimizations.\u003c/p\u003e\u003cp id=\"1b0a\"\u003eThe \u003cstrong\u003eKyklos\u003c/strong\u003e subscription management app demonstrates how to build a real-world application using modern KMP practices. By following Clean Architecture principles and leveraging powerful libraries like SQLDelight, you can create maintainable, testable, and scalable cross-platform applications.\u003c/p\u003e\u003cp id=\"b860\"\u003e\u003cstrong\u003eReady to start your KMP journey?\u003c/strong\u003e The complete source code for this tutorial is available on \u003ca href=\"https://github.com/tomriddle25/kyklos\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eGitHub\u003c/a\u003e, showcasing the foundation we’ve built together. While we’re still implementing the full feature set, the architecture and setup demonstrate production-ready KMP practices you can use as a reference for your own projects.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"5e4e\"\u003eComing Next in This Series:\u003c/h2\u003e\u003cp id=\"76c2\"\u003e📝 \u003cstrong\u003ePart 2:\u003c/strong\u003e “KMP Reality Check: 5 Gotchas That Almost Killed My Project”\u003cbr/\u003e📝 \u003cstrong\u003ePart 3:\u003c/strong\u003e “Material 3 on iOS: What Works, What Doesn’t, What’s Coming”\u003cbr/\u003e📝 \u003cstrong\u003ePart 4:\u003c/strong\u003e “State Management in KMP: Beyond ViewModel”\u003cbr/\u003e📝 \u003cstrong\u003ePart 5:\u003c/strong\u003e “Adding Comprehensive Testing to Your KMP Project”\u003c/p\u003e\u003cp id=\"d51a\"\u003e\u003cstrong\u003eFollow me for updates on the Kyklos development journey!\u003c/strong\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp id=\"a152\"\u003e\u003cstrong\u003eHave questions about Kotlin Multiplatform development? Found this tutorial helpful? Share your thoughts and experiences in the comments below!\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"c782\"\u003e\u003cstrong\u003eTags:\u003c/strong\u003e #KotlinMultiplatform #ComposeMultiplatform #AndroidDev #iOSDev #MobileDev #CrossPlatform #CleanArchitecture #SQLDelight\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "25 min read",
  "publishedTime": "2025-06-26T21:16:45.176Z",
  "modifiedTime": null
}
