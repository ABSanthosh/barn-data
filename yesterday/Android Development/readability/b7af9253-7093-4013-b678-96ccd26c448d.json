{
  "id": "b7af9253-7093-4013-b678-96ccd26c448d",
  "title": "Integrating GraphQL in Compose Multiplatform project",
  "link": "https://proandroiddev.com/integrating-graphql-in-compose-multiplatform-project-f232cf824721?source=rss----c72404660798---4",
  "description": "",
  "author": "Abhiraj Khare",
  "published": "Mon, 24 Mar 2025 20:11:25 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "android",
    "kotlin",
    "multiplatform",
    "apps",
    "cross-platform"
  ],
  "byline": "Abhiraj Khare",
  "length": 4515,
  "excerpt": "GraphQL is a data query and manipulation language. It is server-side runtime for application programming interfaces (APIs) that allows specifying what data is to be retrieved or modified. GraphQL is…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "GraphQL is a data query and manipulation language. It is server-side runtime for application programming interfaces (APIs) that allows specifying what data is to be retrieved or modified. GraphQL is neither frontend nor backend, it is a language spoken between two to exchange information.GraphQL is not SQL as it uses resolver to retrieve or manipulate the data. GraphQL offers more flexible and efficient way of API development. Unlike REST, it has only 1 endpoint and data is handled by defining “query” and “mutation” in its schema. For more information you can refer : https://graphql.org/For this sample app, we will use Apollo GraphQL open API: https://studio.apollographql.com/public/countries/variant/current/schema/referenceThis page shows schema which will give us idea what kind of data we can get from this API.For example, if want to get continents details. Query will be:query ExampleQuery { continents { code name countries { name } }}Here query can be modified to get any one of the attribute, for example.query ExampleQuery { continents { name }}Similarly if we want to fetch all details of countries, query will be:query Countries { countries { code name native phone continent { code name } currency languages { rtl native name code } emoji emojiU states { code name } }}We can even try to execute this query in explorer to see results. https://studio.apollographql.com/public/countries/variant/current/explorerLet’s open build.gradle.kts of shared module to add plugin.// Add in libs.versions.tomlgraphql = \"4.0.1\"apolloGraphQl = { id = \"com.apollographql.apollo\", version.ref = \"graphql\" }// Add plugins { .... alias(libs.plugins.apolloGraphQl)}apollo { service(\"service\") { packageName.set(\"com.your.package.name\") }}Now we have to download graphql schema by following command. Don’t forget to change the correct package../gradlew shared:downloadApolloSchema --endpoint='https://countries.trevorblades.com/graphql' --schema=\"shared/src/commonMain/graphql/com/khareab/cmp/graphql\"Once executed we will get schema file “graphql.graphqls” under mentioned package. Now sync the projectInside same package we will create 2 queries file. One for fetching Country list and another country details.// For country listquery Countries { countries { name capital code emoji }}// For country detailsquery Country($country_code: ID!) { country(code: $country_code) { name capital code emoji currency languages { name } continent { name } }}Create Apollo client.val apolloClient = ApolloClient .Builder() .serverUrl(\"https://countries.trevorblades.com/graphql\") .build()Now we can access data using client and query created in previous steps.apolloClient .query(CountriesQuery()) .execute() .data ?.countries ?: emptyList()Once this is configured, we can use the fetched data to show on UI. We can create simple UI in composeApp-\u003ecommonMain/ Box(modifier = Modifier.fillMaxSize()) { if (state.isLoading) { // Loading indicator CircularProgressIndicator(modifier = Modifier.align(Alignment.Center)) } else { // List of countries LazyColumn( modifier = Modifier.fillMaxSize() ) { items(state.countries.size) { index -\u003e // Country Item CountryItem( country = state.countries[index], index = index ) { onSelectedCountry(state.countries[index].code) } } } GetScrollBars() } }Now use View Model to call GraphQL api client which we created in previous steps.You can also follow the sample project I uploaded on Github. This uses clean architecture where it is divided in data, domain and UI layer.Apollo client resides in data layer which gives fetched data to usecases in domain layer. Domain layer converts the data into domain model as well as apply sort operation (business logic). Response is then delivered to ViewModel in UI layer through which data is displayed on UI using compose state. You can find repository like at:Clone the project and then sync it. And then try to run it on different platforms.That’s all, happy coding.",
  "image": "https://miro.medium.com/v2/resize:fit:748/1*6skJZDvCaM6N39UgMciR_g.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp id=\"4968\"\u003eGraphQL is a data query and manipulation language. It is server-side runtime for application programming interfaces (APIs) that allows specifying what data is to be retrieved or modified. GraphQL is neither frontend nor backend, it is a language spoken between two to exchange information.\u003c/p\u003e\u003cp id=\"8eb5\"\u003eGraphQL is not SQL as it uses resolver to retrieve or manipulate the data. GraphQL offers more flexible and efficient way of API development. Unlike REST, it has only 1 endpoint and data is handled by defining “query” and “mutation” in its schema. For more information you can refer : \u003ca href=\"https://graphql.org/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://graphql.org/\u003c/a\u003e\u003c/p\u003e\u003cp id=\"4212\"\u003eFor this sample app, we will use Apollo GraphQL open API: \u003ca href=\"https://studio.apollographql.com/public/countries/variant/current/schema/reference\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://studio.apollographql.com/public/countries/variant/current/schema/reference\u003c/a\u003e\u003c/p\u003e\u003cp id=\"e856\"\u003eThis page shows schema which will give us idea what kind of data we can get from this API.\u003c/p\u003e\u003cp id=\"48c2\"\u003eFor example, if want to get continents details. Query will be:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0dcf\"\u003equery ExampleQuery {\u003cbr/\u003e  continents {\u003cbr/\u003e    code\u003cbr/\u003e    name\u003cbr/\u003e    countries {\u003cbr/\u003e      name\u003cbr/\u003e    }\u003cbr/\u003e  }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"8490\"\u003eHere query can be modified to get any one of the attribute, for example.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3b91\"\u003equery ExampleQuery {\u003cbr/\u003e  continents {\u003cbr/\u003e    name\u003cbr/\u003e  }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"d039\"\u003eSimilarly if we want to fetch all details of countries, query will be:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3a43\"\u003equery Countries {\u003cbr/\u003e  countries {\u003cbr/\u003e    code\u003cbr/\u003e    name\u003cbr/\u003e    native\u003cbr/\u003e    phone\u003cbr/\u003e    continent {\u003cbr/\u003e      code\u003cbr/\u003e      name\u003cbr/\u003e    }\u003cbr/\u003e    currency\u003cbr/\u003e    languages {\u003cbr/\u003e      rtl\u003cbr/\u003e      native\u003cbr/\u003e      name\u003cbr/\u003e      code\u003cbr/\u003e    }\u003cbr/\u003e    emoji\u003cbr/\u003e    emojiU\u003cbr/\u003e    states {\u003cbr/\u003e      code\u003cbr/\u003e      name\u003cbr/\u003e    }\u003cbr/\u003e  }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"e840\"\u003eWe can even try to execute this query in explorer to see results. \u003ca href=\"https://studio.apollographql.com/public/countries/variant/current/explorer\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://studio.apollographql.com/public/countries/variant/current/explorer\u003c/a\u003e\u003c/p\u003e\u003cp id=\"1813\"\u003eLet’s open build.gradle.kts of shared module to add plugin.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"df90\"\u003e// Add in libs.versions.toml\u003cbr/\u003egraphql = \u0026#34;4.0.1\u0026#34;\u003cbr/\u003eapolloGraphQl = { id = \u0026#34;com.apollographql.apollo\u0026#34;, version.ref = \u0026#34;graphql\u0026#34; }\u003cbr/\u003e// Add \u003cbr/\u003eplugins {\u003cbr/\u003e    ....\u003cbr/\u003e    alias(libs.plugins.apolloGraphQl)\u003cbr/\u003e}\u003cbr/\u003eapollo {\u003cbr/\u003e    service(\u0026#34;service\u0026#34;) {\u003cbr/\u003e        packageName.set(\u0026#34;com.your.package.name\u0026#34;)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ade2\"\u003eNow we have to download graphql schema by following command. Don’t forget to change the correct package.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"d116\"\u003e./gradlew shared:downloadApolloSchema --endpoint=\u0026#39;https://countries.trevorblades.com/graphql\u0026#39; --schema=\u0026#34;shared/src/commonMain/graphql/com/khareab/cmp/graphql\u0026#34;\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"654e\"\u003eOnce executed we will get schema file “graphql.graphqls” under mentioned package. Now sync the project\u003c/p\u003e\u003cp id=\"8ca3\"\u003eInside same package we will create 2 queries file. One for fetching Country list and another country details.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"697b\"\u003e// For country list\u003cbr/\u003equery Countries {\u003cbr/\u003e    countries {\u003cbr/\u003e        name\u003cbr/\u003e        capital\u003cbr/\u003e        code\u003cbr/\u003e        emoji\u003cbr/\u003e    }\u003cbr/\u003e}\u003cp\u003e// For country details\u003cbr/\u003equery Country($country_code: ID!) {\u003cbr/\u003e    country(code: $country_code) {\u003cbr/\u003e        name\u003cbr/\u003e        capital\u003cbr/\u003e        code\u003cbr/\u003e        emoji\u003cbr/\u003e        currency\u003cbr/\u003e        languages {\u003cbr/\u003e            name\u003cbr/\u003e        }\u003cbr/\u003e        continent {\u003cbr/\u003e            name\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"0e5b\"\u003eCreate Apollo client.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"0a6f\"\u003eval apolloClient = ApolloClient\u003cbr/\u003e    .Builder()\u003cbr/\u003e    .serverUrl(\u0026#34;https://countries.trevorblades.com/graphql\u0026#34;)\u003cbr/\u003e    .build()\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5caa\"\u003eNow we can access data using client and query created in previous steps.\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b0e6\"\u003eapolloClient\u003cbr/\u003e      .query(CountriesQuery())\u003cbr/\u003e      .execute()\u003cbr/\u003e      .data\u003cbr/\u003e      ?.countries\u003cbr/\u003e      ?: emptyList()\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"26e8\"\u003eOnce this is configured, we can use the fetched data to show on UI. We can create simple UI in composeApp-\u0026gt;commonMain/\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"55f5\"\u003e    Box(modifier = Modifier.fillMaxSize()) {\u003cbr/\u003e        if (state.isLoading) {\u003cbr/\u003e            // Loading indicator\u003cbr/\u003e            CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))\u003cbr/\u003e        } else {\u003cbr/\u003e            // List of countries\u003cbr/\u003e            LazyColumn(\u003cbr/\u003e                modifier = Modifier.fillMaxSize()\u003cbr/\u003e            ) {\u003cbr/\u003e                items(state.countries.size) { index -\u0026gt;\u003cbr/\u003e                    // Country Item\u003cbr/\u003e                    CountryItem(\u003cbr/\u003e                        country = state.countries[index],\u003cbr/\u003e                        index = index\u003cbr/\u003e                    ) {\u003cbr/\u003e                        onSelectedCountry(state.countries[index].code)\u003cbr/\u003e                    }\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e            GetScrollBars()\u003cbr/\u003e        }\u003cbr/\u003e    }\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"03a9\"\u003eNow use View Model to call GraphQL api client which we created in previous steps.\u003c/p\u003e\u003cp id=\"35b7\"\u003eYou can also follow the sample project I uploaded on Github. This uses clean architecture where it is divided in data, domain and UI layer.\u003c/p\u003e\u003cp id=\"74c9\"\u003eApollo client resides in data layer which gives fetched data to usecases in domain layer. Domain layer converts the data into domain model as well as apply sort operation (business logic). Response is then delivered to ViewModel in UI layer through which data is displayed on UI using compose state. You can find repository like at:\u003c/p\u003e\u003cp id=\"a905\"\u003eClone the project and then sync it. And then try to run it on different platforms.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"1dc3\"\u003eThat’s all, happy coding.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-03-22T11:42:41.965Z",
  "modifiedTime": null
}
