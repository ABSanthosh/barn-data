{
  "id": "44d590c5-a59f-470f-a936-83fd2983feb8",
  "title": "Not a Phase — Text with Compose and Canvas",
  "link": "https://proandroiddev.com/not-a-phase-text-with-compose-and-canvas-97cacc35a5f7?source=rss----c72404660798---4",
  "description": "",
  "author": "Eevis Panula",
  "published": "Mon, 11 Nov 2024 14:53:31 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "bisexual",
    "android",
    "android-app-development",
    "canvas",
    "jetpack-compose"
  ],
  "byline": "Eevis Panula",
  "length": 10236,
  "excerpt": "I’ve continued my journey with Compose and Canvas! After exploring drawing and animating shapes, I wanted to learn more about text. Bi-visibility Day was coming, so I drew a small animation to…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "I’ve continued my journey with Compose and Canvas! After exploring drawing and animating shapes, I wanted to learn more about text. Bi-visibility Day was coming, so I drew a small animation to publish on Instagram. The final animation looks like this:In this blog post, we will look at how to add text to Canvas and position and animate it. We’re also utilizing custom Google Fonts in the drawing.If you’re interested in reading the first two posts, here are the links:Paint the Stars — Drawing with Compose and CanvasFloating in Space — Animations with Compose and CanvasBefore We StartBefore we start drawing, I want to say a few words about the design. It has the moon in the waning crescent phase, with a dashed line to complete it to the full moon shape. The text says, “Not a phase”.Now, if you’re familiar with the discrimination and stereotypes bisexuals face, you probably already know what all of this means. But for those who are not, one of the stereotypes is that bisexuality is “just a phase on the way to being straight/gay”.But it’s not — it’s an (umbrella) term for people who feel attraction towards their own and other genders. And even if a bi person is in a monogamous relationship with a person from one gender, it doesn’t make them straight/gay. They’re still bi.So yeah, we’re here. We exist.Now, let’s get to the coding part.Drawing the TextMeasuringDrawing text on Canvas is a two-step process: First, measure the text and then draw it. To start with measuring, we’ll need a TextMeasurer, and with Compose-code, we have this neat remember-function we can use:val textMeasurer = rememberTextMeasurer()For measuring, TextMeasurer has a function measure, which takes in the text as either AnnotatedString or String, and a bunch of other (mainly) optional parameters that affect the size of the text. Things like density, layoutDirection, style, fontFamilyResolver, and others.We will divide the text into two strings, as we want to animate and position them a bit differently. As both of our texts are just simple strings with one style, we can use the String-version for both. The first version of the \"Not\"-text looks like this:val notText = textMeasurer.measure( text = \"Not\", style = MaterialTheme.typography.titleSmall.copy( brush = Brush.linearGradient( colors = Colors.biFlag ), ), )For the measure-function, we pass in the text and then styles. We want to use the theme typography here for straightforwardness, so we copy the small title styles and add a brush to have a linear gradient as the text color. Here, we're using the bi-flag colors pink, purple, and blue.The second text is pretty similar:val phaseText = textMeasurer.measure( text = \"a phase\", style = MaterialTheme.typography.titleLarge.copy( brush = Brush.linearGradient( colors = Colors.biFlag, ), fontSize = 30.sp, ), )For this text, we’re utilizing the large title styles from the theme. In addition to gradient colors, we’re setting the font size to 30 sp to make the text bigger.Alright, now we have everything we need from the measuring step. Next up is drawing the texts on canvas.DrawingCompose Canvas has a method called drawText for drawing text. It takes in a TextLayoutResult, which is the type that measure function returns. In addition, it takes other parameters meant for styling and positioning the text on Canvas.For the notText we defined in the previous subsection, the drawText would look like this:drawText( textLayoutResult = notText, topLeft = Offset( size.width * 0.25f, size.height * 0.6f, ),)We pass in the text layout result, and then we define the topLeft offset to position the text correctly.The other text is a bit different. We want to position it relative to the notText, so we use notText for calculating the correct position:drawText( textLayoutResult = phaseText, topLeft = Offset( x = size.width * 0.35f, y = (size.height * 0.6f + notText.size.height * 0.7f), ),)So here, we define the y-offset to be the same as for the notText, and then we add 70% of the height of the notText. This could be the whole height, but I wanted to keep less break between the texts.After these steps, our text looks like this:There is just one thing left for the drawing — using custom fonts. Let’s talk about that next.Adding FontsFor this animation, I wanted to have custom fonts. After playing around with Google Fonts, I decided that the two fonts I’m using are Poppins and Damion.Android documentation has a page about adding fonts to your project: Work with fonts. However, I accidentally found that Android Studio lets you add Google Fonts as XML files straightforwardly. Here’s how it happens:Go to Resource Manager and select the “Font”-tab.Click the “+” button to add new resource.Select “More Fonts…”.Find the Google Font you want to use, select weights, and press OK.Let Android Studio add everything needed, like the certification for fonts.However, previews don’t work correctly if you do it this way and don’t import the ttf-files for fonts. So, if you rely on previews when developing, importing those files should resolve the issue.After the font is available, the next thing to do is to use it in the styles. Here’s the code for the font families we’re going to use:val PoppinsFontFamily = FontFamily( Font(R.font.poppins_bold, FontWeight.Bold), )val DamionFontFamily = FontFamily( Font(R.font.damion, FontWeight.Normal), )Then we add the font families to both texts — Damion for the “Not” text and Poppins to the “a phase”-text:val notText = textMeasurer.measure( text = \"Not\", style = MaterialTheme.typography.titleSmall.copy( ... fontFamily = DamionFontFamily ), )Andval phaseText = textMeasurer.measure( text = \"a phase\", style = MaterialTheme.typography.titleLarge.copy( ... fontFamily = PoppinsFontFamily ), )After these changes, the drawing looks like this:Animating the TextThe last step we’ll need to take is animating the text. We will do that by animating colors and floats. To set things up, let’s define infiniteTransition, which we're going to use later:val infiniteTransition = rememberInfiniteTransition( label = \"infinite\")We also want to show the color animation first on the “not”-text and only after that on the “a phase”-text. One way to accomplish that is to define a helper float, based on which we use to animate the words. We’ll get back to the implementation later.We’ll define a variable called animationPosition, an infinitely transitioning float from 0f to 4f, which restarts from 0 when it reaches 4. These values could be anything, but after testing, I found that these values worked best when combined with other things in this drawing.The code for animationPosition could look like this:val animationPosition by infiniteTransition.animateFloat( initialValue = 0f, targetValue = 4f, animationSpec = infiniteRepeatable( tween( durationMillis = 10000, easing = EaseIn, ), RepeatMode.Restart, ), label = \"animationPosition\",)In addition, we will define a helper function for animating the colors. Let’s call it biColorsAnimated, define it to take in a Boolean parameter animated, and return a list of colors:@Composablefun biColorsAnimated(animated: Boolean): List\u003cColor\u003e { ....}Inside the function, we define our animated colors. We first create a list with the colors, and then map through it. For each color, we return animateColorAsState's value, which has the type Color, and finally, we return the list of colors:val colors = listOf( biFlag.pink, biFlag.purple, biFlag.blue)return colors.map { animateColorAsState( targetValue = if (animated) it else white, animationSpec = tween( durationMillis = 1000, easing = EaseInBounce, ), label = it.toString() ).value}This way, we have the bi flag’s colors as animated values and can use them with our text.Finally, we get to tie everything together. For both of the texts, we change the brush gradient’s color parameter to use this new function:val notText = textMeasurer.measure( text = \"Not\", style = MaterialTheme.typography.titleSmall.copy( brush = Brush.linearGradient( colors = biColorsAnimated( animated = animationPosition in 0.5f..1.5f ), ), ... ), )val phaseText = textMeasurer.measure( text = \"a phase\", style = MaterialTheme.typography.titleLarge.copy( brush = Brush.linearGradient( colors = biColorsAnimated( animated = animationPosition in 2f..3.5f ), ), ... ), )We use the animationPosition value to define if the colors for that text are animated. For the first text, we change the colors from white to the bi flag colors if the animationPosition is between 0.5f and 1.5f, and for the second, if the value is between 2f and 3.5f.These changes get us the animation you can see at the beginning of this blog post. You can find the complete code in this code snippet.Wrapping UpIn this blog post, we’ve looked into adding text to Canvas, using custom Google Fonts, and animating colors. There was a lot to cover, but the end result is pretty nice!I hope you’ve enjoyed this blog post and learned something. If you want to share your learnings, post on the social media of your choosing, or let me know in the comments!Links in the Blog PostPaint the Stars — Drawing with Compose and CanvasFloating in Space — Animations with Compose and CanvasWork with fontsThe complete code in this code snippet",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*pG4SZiLOj48ecZ7YtEa81A.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@eevajonna?source=post_page---byline--97cacc35a5f7--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Eevis Panula\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*NhMD_9eOS1kF9_b3VomDEQ.png\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--97cacc35a5f7--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"93ce\"\u003eI’ve continued my journey with Compose and Canvas! After exploring drawing and animating shapes, I wanted to learn more about text. Bi-visibility Day was coming, so I drew a small animation to publish on Instagram. The final animation looks like this:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"e48a\"\u003eIn this blog post, we will look at how to add text to Canvas and position and animate it. We’re also utilizing custom Google Fonts in the drawing.\u003c/p\u003e\u003cp id=\"968a\"\u003eIf you’re interested in reading the first two posts, here are the links:\u003c/p\u003e\u003cul\u003e\u003cli id=\"5edb\"\u003e\u003ca href=\"https://medium.com/proandroiddev/paint-the-stars-drawing-with-compose-and-canvas-6a4e719efe20\" rel=\"noopener\"\u003ePaint the Stars — Drawing with Compose and Canvas\u003c/a\u003e\u003c/li\u003e\u003cli id=\"d179\"\u003e\u003ca href=\"https://medium.com/@eevajonna/floating-in-space-animations-with-compose-and-canvas-7e2978629cd7\" rel=\"noopener\"\u003eFloating in Space — Animations with Compose and Canvas\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"8e62\"\u003eBefore We Start\u003c/h2\u003e\u003cp id=\"5e99\"\u003eBefore we start drawing, I want to say a few words about the design. It has the moon in the waning crescent phase, with a dashed line to complete it to the full moon shape. The text says, “Not a phase”.\u003c/p\u003e\u003cp id=\"55d4\"\u003eNow, if you’re familiar with the discrimination and stereotypes bisexuals face, you probably already know what all of this means. But for those who are not, one of the stereotypes is that bisexuality is “just a phase on the way to being straight/gay”.\u003c/p\u003e\u003cp id=\"61eb\"\u003eBut it’s not — it’s an (umbrella) term for people who feel attraction towards their own and other genders. And even if a bi person is in a monogamous relationship with a person from one gender, it doesn’t make them straight/gay. They’re still bi.\u003c/p\u003e\u003cp id=\"0671\"\u003eSo yeah, we’re here. We exist.\u003c/p\u003e\u003cp id=\"9048\"\u003eNow, let’s get to the coding part.\u003c/p\u003e\u003ch2 id=\"af28\"\u003eDrawing the Text\u003c/h2\u003e\u003ch2 id=\"2cd1\"\u003eMeasuring\u003c/h2\u003e\u003cp id=\"02ab\"\u003eDrawing text on Canvas is a two-step process: First, measure the text and then draw it. To start with measuring, we’ll need a \u003ccode\u003eTextMeasurer\u003c/code\u003e, and with Compose-code, we have this neat remember-function we can use:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"80a5\"\u003eval textMeasurer = rememberTextMeasurer()\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"d386\"\u003eFor measuring, \u003ccode\u003eTextMeasurer\u003c/code\u003e has a function \u003ccode\u003emeasure\u003c/code\u003e, which takes in the text as either \u003ccode\u003eAnnotatedString\u003c/code\u003e or \u003ccode\u003eString\u003c/code\u003e, and a bunch of other (mainly) optional parameters that affect the size of the text. Things like \u003ccode\u003edensity\u003c/code\u003e, \u003ccode\u003elayoutDirection\u003c/code\u003e, \u003ccode\u003estyle\u003c/code\u003e, \u003ccode\u003efontFamilyResolver\u003c/code\u003e, and others.\u003c/p\u003e\u003cp id=\"cd70\"\u003eWe will divide the text into two strings, as we want to animate and position them a bit differently. As both of our texts are just simple strings with one style, we can use the \u003ccode\u003eString\u003c/code\u003e-version for both. The first version of the \u0026#34;Not\u0026#34;-text looks like this:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"908a\"\u003eval notText =\u003cbr/\u003e    textMeasurer.measure(\u003cbr/\u003e        text = \u0026#34;Not\u0026#34;,\u003cbr/\u003e        style =\u003cbr/\u003e            MaterialTheme.typography.titleSmall.copy(\u003cbr/\u003e                brush = Brush.linearGradient(\u003cbr/\u003e                    colors = Colors.biFlag\u003cbr/\u003e                ),\u003cbr/\u003e            ),\u003cbr/\u003e    )\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"11c6\"\u003eFor the \u003ccode\u003emeasure\u003c/code\u003e-function, we pass in the text and then styles. We want to use the theme typography here for straightforwardness, so we copy the small title styles and add a brush to have a linear gradient as the text color. Here, we\u0026#39;re using the bi-flag colors pink, purple, and blue.\u003c/p\u003e\u003cp id=\"7caa\"\u003eThe second text is pretty similar:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"9643\"\u003eval phaseText =\u003cbr/\u003e    textMeasurer.measure(\u003cbr/\u003e        text = \u0026#34;a phase\u0026#34;,\u003cbr/\u003e        style =\u003cbr/\u003e            MaterialTheme.typography.titleLarge.copy(\u003cbr/\u003e                brush =\u003cbr/\u003e                    Brush.linearGradient(\u003cbr/\u003e                        colors = Colors.biFlag,\u003cbr/\u003e                    ),\u003cbr/\u003e                fontSize = 30.sp,\u003cbr/\u003e            ),\u003cbr/\u003e    )\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"e03d\"\u003eFor this text, we’re utilizing the large title styles from the theme. In addition to gradient colors, we’re setting the font size to 30 \u003ccode\u003esp\u003c/code\u003e to make the text bigger.\u003c/p\u003e\u003cp id=\"7427\"\u003eAlright, now we have everything we need from the measuring step. Next up is drawing the texts on canvas.\u003c/p\u003e\u003ch2 id=\"e900\"\u003eDrawing\u003c/h2\u003e\u003cp id=\"016e\"\u003eCompose Canvas has a method called \u003ccode\u003edrawText\u003c/code\u003e for drawing text. It takes in a \u003ccode\u003eTextLayoutResult\u003c/code\u003e, which is the type that \u003ccode\u003emeasure\u003c/code\u003e function returns. In addition, it takes other parameters meant for styling and positioning the text on Canvas.\u003c/p\u003e\u003cp id=\"63d5\"\u003eFor the \u003ccode\u003enotText\u003c/code\u003e we defined in the previous subsection, the \u003ccode\u003edrawText\u003c/code\u003e would look like this:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"f7bc\"\u003edrawText(\u003cbr/\u003e    textLayoutResult = notText,\u003cbr/\u003e    topLeft =\u003cbr/\u003e        Offset(\u003cbr/\u003e            size.width * 0.25f,\u003cbr/\u003e            size.height * 0.6f,\u003cbr/\u003e        ),\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"037f\"\u003eWe pass in the text layout result, and then we define the \u003ccode\u003etopLeft\u003c/code\u003e offset to position the text correctly.\u003c/p\u003e\u003cp id=\"c47f\"\u003eThe other text is a bit different. We want to position it relative to the \u003ccode\u003enotText\u003c/code\u003e, so we use \u003ccode\u003enotText\u003c/code\u003e for calculating the correct position:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"b0c1\"\u003edrawText(\u003cbr/\u003e    textLayoutResult = phaseText,\u003cbr/\u003e    topLeft =\u003cbr/\u003e        Offset(\u003cbr/\u003e            x = size.width * 0.35f,\u003cbr/\u003e            y = (size.height * 0.6f + notText.size.height * 0.7f),\u003cbr/\u003e        ),\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"b4d0\"\u003eSo here, we define the y-offset to be the same as for the \u003ccode\u003enotText\u003c/code\u003e, and then we add 70% of the height of the \u003ccode\u003enotText\u003c/code\u003e. This could be the whole height, but I wanted to keep less break between the texts.\u003c/p\u003e\u003cp id=\"e4cf\"\u003eAfter these steps, our text looks like this:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"db45\"\u003eThere is just one thing left for the drawing — using custom fonts. Let’s talk about that next.\u003c/p\u003e\u003ch2 id=\"cbd7\"\u003eAdding Fonts\u003c/h2\u003e\u003cp id=\"e67f\"\u003eFor this animation, I wanted to have custom fonts. After playing around with Google Fonts, I decided that the two fonts I’m using are Poppins and Damion.\u003c/p\u003e\u003cp id=\"2c5c\"\u003eAndroid documentation has a page about adding fonts to your project: \u003ca href=\"https://developer.android.com/develop/ui/compose/text/fonts#downloadable-fonts\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWork with fonts\u003c/a\u003e. However, I accidentally found that Android Studio lets you add Google Fonts as XML files straightforwardly. Here’s how it happens:\u003c/p\u003e\u003col\u003e\u003cli id=\"3dac\"\u003eGo to Resource Manager and select the “Font”-tab.\u003c/li\u003e\u003cli id=\"6abc\"\u003eClick the “+” button to add new resource.\u003c/li\u003e\u003cli id=\"9993\"\u003eSelect “More Fonts…”.\u003c/li\u003e\u003cli id=\"5267\"\u003eFind the Google Font you want to use, select weights, and press OK.\u003c/li\u003e\u003cli id=\"ca70\"\u003eLet Android Studio add everything needed, like the certification for fonts.\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"23f7\"\u003eHowever, previews don’t work correctly if you do it this way and don’t import the ttf-files for fonts. So, if you rely on previews when developing, importing those files should resolve the issue.\u003c/p\u003e\u003cp id=\"3e56\"\u003eAfter the font is available, the next thing to do is to use it in the styles. Here’s the code for the font families we’re going to use:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"f83a\"\u003eval PoppinsFontFamily =\u003cbr/\u003e    FontFamily(\u003cbr/\u003e        Font(R.font.poppins_bold, FontWeight.Bold),\u003cbr/\u003e    )\u003cp\u003eval DamionFontFamily =\u003cbr/\u003e    FontFamily(\u003cbr/\u003e        Font(R.font.damion, FontWeight.Normal),\u003cbr/\u003e    )\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"df01\"\u003eThen we add the font families to both texts — Damion for the “Not” text and Poppins to the “a phase”-text:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"49f3\"\u003eval notText =\u003cbr/\u003e    textMeasurer.measure(\u003cbr/\u003e        text = \u0026#34;Not\u0026#34;,\u003cbr/\u003e        style =\u003cbr/\u003e            MaterialTheme.typography.titleSmall.copy(\u003cbr/\u003e                ...\u003cbr/\u003e                fontFamily = DamionFontFamily\u003cbr/\u003e            ),\u003cbr/\u003e    )\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"1c33\"\u003eAnd\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"23b1\"\u003eval phaseText =\u003cbr/\u003e    textMeasurer.measure(\u003cbr/\u003e        text = \u0026#34;a phase\u0026#34;,\u003cbr/\u003e        style =\u003cbr/\u003e            MaterialTheme.typography.titleLarge.copy(\u003cbr/\u003e                ...\u003cbr/\u003e                fontFamily = PoppinsFontFamily\u003cbr/\u003e            ),\u003cbr/\u003e    )\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"f221\"\u003eAfter these changes, the drawing looks like this:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"8d06\"\u003eAnimating the Text\u003c/h2\u003e\u003cp id=\"ff19\"\u003eThe last step we’ll need to take is animating the text. We will do that by animating colors and floats. To set things up, let’s define \u003ccode\u003einfiniteTransition\u003c/code\u003e, which we\u0026#39;re going to use later:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"d22f\"\u003eval infiniteTransition = rememberInfiniteTransition(\u003cbr/\u003e    label = \u0026#34;infinite\u0026#34;\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"c27c\"\u003eWe also want to show the color animation first on the “not”-text and only after that on the “a phase”-text. One way to accomplish that is to define a helper float, based on which we use to animate the words. We’ll get back to the implementation later.\u003c/p\u003e\u003cp id=\"6392\"\u003eWe’ll define a variable called \u003ccode\u003eanimationPosition\u003c/code\u003e, an infinitely transitioning float from 0f to 4f, which restarts from 0 when it reaches 4. These values could be anything, but after testing, I found that these values worked best when combined with other things in this drawing.\u003c/p\u003e\u003cp id=\"ca7f\"\u003eThe code for \u003ccode\u003eanimationPosition\u003c/code\u003e could look like this:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"557f\"\u003eval animationPosition by infiniteTransition.animateFloat(\u003cbr/\u003e    initialValue = 0f,\u003cbr/\u003e    targetValue = 4f,\u003cbr/\u003e    animationSpec =\u003cbr/\u003e        infiniteRepeatable(\u003cbr/\u003e            tween(\u003cbr/\u003e                durationMillis = 10000,\u003cbr/\u003e                easing = EaseIn,\u003cbr/\u003e            ),\u003cbr/\u003e            RepeatMode.Restart,\u003cbr/\u003e        ),\u003cbr/\u003e    label = \u0026#34;animationPosition\u0026#34;,\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"d91c\"\u003eIn addition, we will define a helper function for animating the colors. Let’s call it \u003ccode\u003ebiColorsAnimated\u003c/code\u003e, define it to take in a Boolean parameter \u003ccode\u003eanimated\u003c/code\u003e, and return a list of colors:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"d0f5\"\u003e@Composable\u003cbr/\u003efun biColorsAnimated(animated: Boolean): List\u0026lt;Color\u0026gt; {\u003cbr/\u003e    ....\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"fd65\"\u003eInside the function, we define our animated colors. We first create a list with the colors, and then map through it. For each color, we return \u003ccode\u003eanimateColorAsState\u003c/code\u003e\u0026#39;s value, which has the type \u003ccode\u003eColor\u003c/code\u003e, and finally, we return the list of colors:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"dd99\"\u003eval colors = listOf(\u003cbr/\u003e    biFlag.pink,\u003cbr/\u003e    biFlag.purple,\u003cbr/\u003e    biFlag.blue\u003cbr/\u003e)\u003c/span\u003e\u003c/pre\u003e\u003cpre\u003e\u003cspan id=\"a665\"\u003ereturn colors.map {\u003cbr/\u003e    animateColorAsState(\u003cbr/\u003e        targetValue = if (animated) it else white,\u003cbr/\u003e        animationSpec =\u003cbr/\u003e            tween(\u003cbr/\u003e                durationMillis = 1000,\u003cbr/\u003e                easing = EaseInBounce,\u003cbr/\u003e            ),\u003cbr/\u003e        label = it.toString()\u003cbr/\u003e    ).value\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"ab07\"\u003eThis way, we have the bi flag’s colors as animated values and can use them with our text.\u003c/p\u003e\u003cp id=\"20ee\"\u003eFinally, we get to tie everything together. For both of the texts, we change the brush gradient’s color parameter to use this new function:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"53a0\"\u003eval notText =\u003cbr/\u003e    textMeasurer.measure(\u003cbr/\u003e        text = \u0026#34;Not\u0026#34;,\u003cbr/\u003e        style =\u003cbr/\u003e            MaterialTheme.typography.titleSmall.copy(\u003cbr/\u003e                brush =\u003cbr/\u003e                    Brush.linearGradient(\u003cbr/\u003e                        colors = biColorsAnimated(\u003cbr/\u003e                            animated = animationPosition in 0.5f..1.5f\u003cbr/\u003e                        ),\u003cbr/\u003e                    ),\u003cbr/\u003e            ...\u003cbr/\u003e            ),\u003cbr/\u003e    )\u003cp\u003eval phaseText =\u003cbr/\u003e    textMeasurer.measure(\u003cbr/\u003e        text = \u0026#34;a phase\u0026#34;,\u003cbr/\u003e        style =\u003cbr/\u003e            MaterialTheme.typography.titleLarge.copy(\u003cbr/\u003e                brush =\u003cbr/\u003e                    Brush.linearGradient(\u003cbr/\u003e                        colors = biColorsAnimated(\u003cbr/\u003e                            animated = animationPosition in 2f..3.5f\u003cbr/\u003e                        ),\u003cbr/\u003e                    ),\u003cbr/\u003e            ...\u003cbr/\u003e            ),\u003cbr/\u003e    )\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"b8dc\"\u003eWe use the \u003ccode\u003eanimationPosition\u003c/code\u003e value to define if the colors for that text are animated. For the first text, we change the colors from white to the bi flag colors if the \u003ccode\u003eanimationPosition\u003c/code\u003e is between 0.5f and 1.5f, and for the second, if the value is between 2f and 3.5f.\u003c/p\u003e\u003cp id=\"29eb\"\u003eThese changes get us the animation you can see at the beginning of this blog post. You can find \u003ca href=\"https://gist.github.com/eevajonnapanula/f47b5eab078cf903648555559ba50b2d\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ethe complete code in this code snippet\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"12cd\"\u003eWrapping Up\u003c/h2\u003e\u003cp id=\"e146\"\u003eIn this blog post, we’ve looked into adding text to Canvas, using custom Google Fonts, and animating colors. There was a lot to cover, but the end result is pretty nice!\u003c/p\u003e\u003cp id=\"cf9b\"\u003eI hope you’ve enjoyed this blog post and learned something. If you want to share your learnings, post on the social media of your choosing, or let me know in the comments!\u003c/p\u003e\u003ch2 id=\"6498\"\u003eLinks in the Blog Post\u003c/h2\u003e\u003cul\u003e\u003cli id=\"a62b\"\u003e\u003ca href=\"https://medium.com/proandroiddev/paint-the-stars-drawing-with-compose-and-canvas-6a4e719efe20\" rel=\"noopener\"\u003ePaint the Stars — Drawing with Compose and Canvas\u003c/a\u003e\u003c/li\u003e\u003cli id=\"2957\"\u003e\u003ca href=\"https://medium.com/@eevajonna/floating-in-space-animations-with-compose-and-canvas-7e2978629cd7\" rel=\"noopener\"\u003eFloating in Space — Animations with Compose and Canvas\u003c/a\u003e\u003c/li\u003e\u003cli id=\"c90f\"\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/text/fonts#downloadable-fonts\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eWork with fonts\u003c/a\u003e\u003c/li\u003e\u003cli id=\"8908\"\u003e\u003ca href=\"https://gist.github.com/eevajonnapanula/f47b5eab078cf903648555559ba50b2d\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eThe complete code in this code snippet\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "11 min read",
  "publishedTime": "2024-11-10T15:36:53.927Z",
  "modifiedTime": null
}
