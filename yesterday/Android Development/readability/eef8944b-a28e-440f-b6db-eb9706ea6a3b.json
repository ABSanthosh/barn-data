{
  "id": "eef8944b-a28e-440f-b6db-eb9706ea6a3b",
  "title": "UI change verification with Android Compose Screenshot Testing — Part 1",
  "link": "https://proandroiddev.com/ui-change-verification-with-android-compose-screenshot-testing-part-1-172b8b4bc3fe?source=rss----c72404660798---4",
  "description": "",
  "author": "Isaac",
  "published": "Sun, 09 Feb 2025 20:48:01 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "screenshot-testing",
    "androiddev",
    "jetpack-compose",
    "android",
    "android-app-development"
  ],
  "byline": "Isaac",
  "length": 5183,
  "excerpt": "When working on UI changes, Android developers typically modify the UI, create a pull request on GitHub and manually upload before-and-after screenshots to compare the changes. If a ‘before’…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "IntroductionWhen working on UI changes, Android developers typically modify the UI, create a pull request on GitHub and manually upload before-and-after screenshots to compare the changes. If a ‘before’ screenshot wasn’t taken earlier, they have to switch back to the parent branch, take a screenshot, and then return to the current branch. Additionally, each PR requires manually creating a Markdown table and embedding images to document the UI changes.Example of a GitHub PR DescriptionWhile this process isn’t overly time-consuming, it’s not entirely efficient either. Fortunately, we can automate parts of it using Android Compose Screenshot Testing. This two-part guide will introduce Compose Screenshot Testing in the first part and explain how to automate it with GitHub Actions in the second part.Setting up screenshot testing in Jetpack ComposeTo implement screenshot testing, follow these steps:1. Add Dependencies to the Version Catalog (libs.versions.toml)Add the following lines to your libs.versions.toml file:[versions]agp = \"8.5.0-beta01\"kotlin = \"1.9.20\"...screenshot = \"0.0.1-alpha07\" # \u003c- add this[libraries]# Add this if it's not already presentandroidx-compose-ui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\"}[plugins]...# add thisscreenshot = { id = \"com.android.compose.screenshot\", version.ref = \"screenshot\"}2. Update Module-Level build.gradle.ktsModify your module-level build.gradle.kts as follows:plugins { ... alias(libs.plugins.screenshot)}dependencies { screenshotTestImplementation(libs.androidx.compose.ui.tooling)}3. Enable Screenshot Testing in gradle.propertiesAdd the following line to your gradle.properties file:android.experimental.enableScreenshotTest=true4. Configure build.gradle.ktsUpdate the android block in build.gradle.kts to include:android { ... composeOptions { kotlinCompilerExtensionVersion = \"1.5.4\" } experimentalProperties[\"android.experimental.enableScreenshotTest\"] = true}If you’re using Kotlin 2.0.0 or higher, you don’t need to specify kotlinCompilerExtensionVeresion.Creating and Running Screenshot TestsWith the setup complete, you need to create a screenshotTest directry under the src folder of each module where you want to run screenshot tests.Once the directory is ready, define a standard Compose preview function for screenshot testing:class PopularMovieItemScreenShots { @OptIn(ExperimentalSharedTransitionApi::class) @Preview( showBackground = true ) @Composable fun PopularMovieItemScreenShotPreview() { val samplePopularMovie = PopularMovie( id = 1, title = \"Joker: Folie à Deux (2024)\", originalTitle = \"Joker: Folie à Deux (2024)\", voteAverage = 8.54, voteCount = 145, popularityScore = 0.0, overView = \"\", posterImageUrl = \"\", backDropImageUrl = \"\" ) FridayMovieTheme { SharedTransitionLayout { AnimatedContent( targetState = 100, label = \"\" ) { _ -\u003e PopularMovieItem( modifier = Modifier.width(100.dp), animatedVisibilityScope = this, movie = samplePopularMovie, onClick = { _, _, _ -\u003e } ) } } } }}Running screenshot testsIn unit testing, we compare the expected value with the actual result. Similarly, screenshot testing consists of two key operations:Updating the expected screenshotValidating the screenshot against expectationsUpdating expected screenshotsTo update the expected screenshots for all modules, run:./gradlew updateDebugScreenshotTestTo update screenshots for a specific module, use:./gradlew {:module:}update{Variant}ScreenshotTestFor example, to update the Demo variant screenshots in the feature:home module:./gradlew :feature:home:updateDemoScreenshotTestThe updated images are stored in the src/ directory, structured according to the variant.Validating screenshotsOnce the expected screenshots are updated, you need to validate them.To validate all modules:./gradlew validateDebugScreenshotTestTo validate a specific module:./gradlew {:module:}validate{Variant}ScreenshotTestFor example, to validate the Demo variant screenshots in the feature:home module:./gradlew :feature:home:validateDemoScreenshotTestViewing the resultsValidation results are saved in the following directory:{:module:}/build/outputs/screenshotTest-results/preview/The folder contains:diff/ – Highlights differences between reference and actual imagesrendered/ – Displays the actual preview outputAdditionally, an HTML report is generated at:build/reports/screenshotTest/preview/This report provides a visual comparison of reference and actual images, allowing developers to detect even subtle UI changes that might not be obvious to the human eye.Radius has been changed.ConclusionThis wraps up Part 1 of the guide to Android Compose Screenshot Testing. In Part 2, we’ll explore how to automate this process using GitHub Actions.You can find the complete code in this project.",
  "image": "https://miro.medium.com/v2/resize:fit:924/1*4RWSa6we3KP1F1TkdKrg3A.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003carticle\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@.isaac?source=post_page---byline--172b8b4bc3fe--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Isaac\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*qItVpOz7dR4uxuWKNMcO9Q.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--172b8b4bc3fe--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003ch2 id=\"5161\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"a520\"\u003e\u003cspan\u003eW\u003c/span\u003ehen working on UI changes, Android developers typically modify the UI, create a pull request on GitHub and manually upload before-and-after screenshots to compare the changes. If a ‘before’ screenshot wasn’t taken earlier, they have to switch back to the parent branch, take a screenshot, and then return to the current branch. Additionally, each PR requires manually creating a Markdown table and embedding images to document the UI changes.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eExample of a GitHub PR Description\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"9d35\"\u003eWhile this process isn’t overly time-consuming, it’s not entirely efficient either. Fortunately, we can automate parts of it using Android Compose Screenshot Testing. This two-part guide will introduce Compose Screenshot Testing in the first part and explain how to automate it with GitHub Actions in the \u003ca href=\"https://medium.com/@.isaac/automating-ui-change-verification-with-android-compose-screenshot-testing-part2-485784639546\" rel=\"noopener\"\u003esecond part\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"abf8\"\u003eSetting up screenshot testing in Jetpack Compose\u003c/h2\u003e\u003cp id=\"03aa\"\u003eTo implement screenshot testing, follow these steps:\u003c/p\u003e\u003cp id=\"a8ed\"\u003e\u003cstrong\u003e1. Add Dependencies to the Version Catalog (libs.versions.toml)\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"99e8\"\u003eAdd the following lines to your \u003ccode\u003elibs.versions.toml\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a97c\"\u003e[versions]\u003cbr/\u003eagp = \u0026#34;8.5.0-beta01\u0026#34;\u003cbr/\u003ekotlin = \u0026#34;1.9.20\u0026#34;\u003cbr/\u003e...\u003cbr/\u003escreenshot = \u0026#34;0.0.1-alpha07\u0026#34; # \u0026lt;- add this\u003cp\u003e[libraries]\u003cbr/\u003e# Add this if it\u0026#39;s not already present\u003cbr/\u003eandroidx-compose-ui-tooling = { group = \u0026#34;androidx.compose.ui\u0026#34;, name = \u0026#34;ui-tooling\u0026#34;}\u003c/p\u003e\u003cp\u003e[plugins]\u003cbr/\u003e...\u003cbr/\u003e# add this\u003cbr/\u003escreenshot = { id = \u0026#34;com.android.compose.screenshot\u0026#34;, version.ref = \u0026#34;screenshot\u0026#34;}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"cd0e\"\u003e\u003cstrong\u003e2. Update Module-Level build.gradle.kts\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"9a79\"\u003eModify your module-level \u003ccode\u003ebuild.gradle.kts\u003c/code\u003e as follows:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"75f1\"\u003eplugins {\u003cbr/\u003e    ...\u003cbr/\u003e    alias(libs.plugins.screenshot)\u003cbr/\u003e}\u003cp\u003edependencies {\u003cbr/\u003e  screenshotTestImplementation(libs.androidx.compose.ui.tooling)\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"309e\"\u003e\u003cstrong\u003e3. Enable Screenshot Testing in gradle.properties\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"2a61\"\u003eAdd the following line to your \u003ccode\u003egradle.properties\u003c/code\u003e file:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"3298\"\u003eandroid.experimental.enableScreenshotTest=true\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"edd2\"\u003e\u003cstrong\u003e4. Configure build.gradle.kts\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"6726\"\u003eUpdate the android block in build.gradle.kts to include:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"1509\"\u003eandroid {\u003cbr/\u003e    ...\u003cbr/\u003e    composeOptions {\u003cbr/\u003e        kotlinCompilerExtensionVersion = \u0026#34;1.5.4\u0026#34;\u003cbr/\u003e    }\u003cbr/\u003e    experimentalProperties[\u0026#34;android.experimental.enableScreenshotTest\u0026#34;] = true\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"fa1d\"\u003eIf you’re using Kotlin 2.0.0 or higher, you don’t need to specify \u003ccode\u003ekotlinCompilerExtensionVeresion\u003c/code\u003e.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"4082\"\u003eCreating and Running Screenshot Tests\u003c/h2\u003e\u003cp id=\"7fe1\"\u003eWith the setup complete, you need to create a \u003ccode\u003escreenshotTest\u003c/code\u003e directry under the \u003ccode\u003esrc\u003c/code\u003e folder of each module where you want to run screenshot tests.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"55af\"\u003eOnce the directory is ready, define a standard Compose preview function for screenshot testing:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"ebd4\"\u003eclass PopularMovieItemScreenShots {\u003cp\u003e    @OptIn(ExperimentalSharedTransitionApi::class)\u003cbr/\u003e    @Preview(\u003cbr/\u003e        showBackground = true\u003cbr/\u003e    )\u003cbr/\u003e    @Composable\u003cbr/\u003e    fun PopularMovieItemScreenShotPreview() {\u003cbr/\u003e        val samplePopularMovie = PopularMovie(\u003cbr/\u003e            id = 1,\u003cbr/\u003e            title = \u0026#34;Joker: Folie à Deux (2024)\u0026#34;,\u003cbr/\u003e            originalTitle = \u0026#34;Joker: Folie à Deux (2024)\u0026#34;,\u003cbr/\u003e            voteAverage = 8.54,\u003cbr/\u003e            voteCount = 145,\u003cbr/\u003e            popularityScore = 0.0,\u003cbr/\u003e            overView = \u0026#34;\u0026#34;,\u003cbr/\u003e            posterImageUrl = \u0026#34;\u0026#34;,\u003cbr/\u003e            backDropImageUrl = \u0026#34;\u0026#34;\u003cbr/\u003e        )\u003cbr/\u003e        FridayMovieTheme {\u003cbr/\u003e            SharedTransitionLayout {\u003cbr/\u003e                AnimatedContent(\u003cbr/\u003e                    targetState = 100,\u003cbr/\u003e                    label = \u0026#34;\u0026#34;\u003cbr/\u003e                ) { _ -\u0026gt;\u003cbr/\u003e                    PopularMovieItem(\u003cbr/\u003e                        modifier = Modifier.width(100.dp),\u003cbr/\u003e                        animatedVisibilityScope = this,\u003cbr/\u003e                        movie = samplePopularMovie,\u003cbr/\u003e                        onClick = { _, _, _ -\u0026gt; }\u003cbr/\u003e                    )\u003cbr/\u003e                }\u003cbr/\u003e            }\u003cbr/\u003e        }\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch2 id=\"d1b4\"\u003eRunning screenshot tests\u003c/h2\u003e\u003cp id=\"17b1\"\u003eIn unit testing, we compare the expected value with the actual result. Similarly, screenshot testing consists of two key operations:\u003c/p\u003e\u003cul\u003e\u003cli id=\"3b1c\"\u003eUpdating the expected screenshot\u003c/li\u003e\u003cli id=\"e405\"\u003eValidating the screenshot against expectations\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"ee1b\"\u003e\u003cstrong\u003eUpdating expected screenshots\u003c/strong\u003e\u003c/h2\u003e\u003cp id=\"ee63\"\u003eTo update the expected screenshots for all modules, run:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"40a8\"\u003e./gradlew updateDebugScreenshotTest\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"9aa2\"\u003eTo update screenshots for a specific module, use:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"cb22\"\u003e./gradlew {:module:}update{Variant}ScreenshotTest\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"2f31\"\u003eFor example, to update the \u003ccode\u003eDemo\u003c/code\u003e variant screenshots in the \u003ccode\u003efeature:home \u003c/code\u003emodule:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"adfb\"\u003e./gradlew :feature:home:updateDemoScreenshotTest\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"7ec0\"\u003eThe updated images are stored in the src/ directory, structured according to the variant.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"c930\"\u003eValidating screenshots\u003c/h2\u003e\u003cp id=\"bb8e\"\u003eOnce the expected screenshots are updated, you need to validate them.\u003c/p\u003e\u003cp id=\"d862\"\u003eTo validate all modules:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a671\"\u003e./gradlew validateDebugScreenshotTest\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"5d91\"\u003eTo validate a specific module:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"816d\"\u003e./gradlew {:module:}validate{Variant}ScreenshotTest\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"061d\"\u003eFor example, to validate the \u003ccode\u003eDemo\u003c/code\u003e variant screenshots in the \u003ccode\u003efeature:home\u003c/code\u003e module:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"8148\"\u003e./gradlew :feature:home:validateDemoScreenshotTest\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"904c\"\u003eViewing the results\u003c/h2\u003e\u003cp id=\"02a0\"\u003eValidation results are saved in the following directory:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"5a08\"\u003e{:module:}/build/outputs/screenshotTest-results/preview/\u003c/span\u003e\u003c/pre\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"7e17\"\u003eThe folder contains:\u003c/p\u003e\u003cul\u003e\u003cli id=\"f2e4\"\u003e\u003ccode\u003e\u003cstrong\u003ediff/\u003c/strong\u003e\u003c/code\u003e – Highlights differences between reference and actual images\u003c/li\u003e\u003cli id=\"a6c7\"\u003e\u003ccode\u003e\u003cstrong\u003erendered/\u003c/strong\u003e\u003c/code\u003e – Displays the actual preview output\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"e9a5\"\u003eAdditionally, an HTML report is generated at:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"08db\"\u003ebuild/reports/screenshotTest/preview/\u003c/span\u003e\u003c/pre\u003e\u003cp id=\"7456\"\u003eThis report provides a visual comparison of reference and actual images, allowing developers to detect even subtle UI changes that might not be obvious to the human eye.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eRadius has been changed.\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"2838\"\u003eConclusion\u003c/h2\u003e\u003cp id=\"46e0\"\u003eThis wraps up Part 1 of the guide to Android Compose Screenshot Testing. In \u003ca href=\"https://medium.com/@.isaac/automating-ui-change-verification-with-android-compose-screenshot-testing-part2-485784639546\" rel=\"noopener\"\u003ePart 2\u003c/a\u003e, we’ll explore how to automate this process using GitHub Actions.\u003c/p\u003e\u003cp id=\"73c7\"\u003eYou can find the complete code in \u003ca href=\"https://github.com/WonJoongLee/FridayMovie\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ethis project\u003c/a\u003e.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003c/article\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-02-04T04:28:32.8Z",
  "modifiedTime": null
}
