{
  "id": "3d713503-e567-43ac-881b-27d6fcf32845",
  "title": "A more flexible Checkbox in Material3",
  "link": "https://proandroiddev.com/a-more-flexible-checkbox-material3-378edc1f9aca?source=rss----c72404660798---4",
  "description": "",
  "author": "Nav Singh",
  "published": "Thu, 06 Feb 2025 14:38:08 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "jetpack-compose",
    "androiddev",
    "anroid-app-development",
    "material-design",
    "android"
  ],
  "byline": "Nav Singh",
  "length": 972,
  "excerpt": "Starting with version 1.4.0-alpha07 of compose.material3:material3 we get a new API for Checkbox, which provides us an option to customize the stroke of the checkmark and checkbox-outline.",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "New API implementation@Composablefun CheckboxWithRoundedStrokes() { val strokeWidthPx = with(LocalDensity.current) { floor(CheckboxDefaults.StrokeWidth.toPx()) } val checkmarkStroke = remember(strokeWidthPx) { Stroke( width = strokeWidthPx, cap = StrokeCap.Square, join = StrokeJoin.Round, pathEffect = PathEffect.dashPathEffect(floatArrayOf(2f, 6f)) ) } val outlineStroke = remember(strokeWidthPx) { Stroke(width = 8f) } val checkedState = remember { mutableStateOf(true) } Row( modifier = Modifier.fillMaxWidth(), verticalAlignment = androidx.compose.ui.Alignment.CenterVertically ) { Checkbox( checked = true, onCheckedChange = { }, // New properties checkmarkStroke = checkmarkStroke, outlineStroke = outlineStroke ) Text(text = \"New Checkbox API\") }}",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*CwviBMtZIwUrgykadkDXKg.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ch2 id=\"e5b3\"\u003eNew API implementation\u003c/h2\u003e\u003cpre\u003e\u003cspan id=\"f6be\"\u003e\u003cbr/\u003e@Composable\u003cbr/\u003efun CheckboxWithRoundedStrokes() {\u003cbr/\u003e    val strokeWidthPx = with(LocalDensity.current) { floor(CheckboxDefaults.StrokeWidth.toPx()) }\u003cbr/\u003e    val checkmarkStroke =\u003cbr/\u003e        remember(strokeWidthPx) {\u003cbr/\u003e            Stroke(\u003cbr/\u003e                width = strokeWidthPx,\u003cbr/\u003e                cap = StrokeCap.Square,\u003cbr/\u003e                join = StrokeJoin.Round,\u003cbr/\u003e                pathEffect = PathEffect.dashPathEffect(floatArrayOf(2f, 6f))\u003cbr/\u003e            )\u003cbr/\u003e        }\u003cbr/\u003e    val outlineStroke = remember(strokeWidthPx) {\u003cbr/\u003e        Stroke(width = 8f)\u003cbr/\u003e    }\u003cbr/\u003e    val checkedState = remember { mutableStateOf(true) }\u003cbr/\u003e    Row(\u003cbr/\u003e        modifier = Modifier.fillMaxWidth(),\u003cbr/\u003e        verticalAlignment = androidx.compose.ui.Alignment.CenterVertically\u003cbr/\u003e    ) {\u003cbr/\u003e        Checkbox(\u003cbr/\u003e            checked = true,\u003cbr/\u003e            onCheckedChange = { },\u003cbr/\u003e            // New properties\u003cbr/\u003e            checkmarkStroke = checkmarkStroke,\u003cbr/\u003e            outlineStroke = outlineStroke\u003cbr/\u003e        )\u003cp\u003e        Text(text = \u0026#34;New Checkbox API\u0026#34;)\u003cbr/\u003e    }\u003cbr/\u003e}\u003c/p\u003e\u003c/span\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-02-06T01:06:23.977Z",
  "modifiedTime": null
}
