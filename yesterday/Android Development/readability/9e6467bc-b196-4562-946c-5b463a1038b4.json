{
  "id": "9e6467bc-b196-4562-946c-5b463a1038b4",
  "title": "Material3 Color System Basics for Android Developers",
  "link": "https://proandroiddev.com/material3-color-system-basics-for-android-developers-2b0c73a58b2d?source=rss----c72404660798---4",
  "description": "",
  "author": "Matti Mäki-Kihniä",
  "published": "Mon, 17 Mar 2025 07:57:35 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "material-design",
    "jetpack-compose",
    "android",
    "colors",
    "material3"
  ],
  "byline": "Matti Mäki-Kihniä",
  "length": 4861,
  "excerpt": "Material3 is the newest iteration of Material Design, with dynamic theming, revised components and more… however, it can also be overwhelming with its over 200 different color variations and tens of…",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Material3 is the newest iteration of Material Design, with dynamic theming, revised components and more… however, it can also be overwhelming with its over 200 different color variations and tens of pages of documentation.The good thing is that in reality, it’s not all that complex and it can make developers’ lives much easier. And by easier, I mean the following:Automatic theming of all Material3 componentsDark and light color schemesCorrect colors for the various component states that you never thought of, like “hovered”Proper contrasts between colors for accessibility and UXA cleaner codebase!And more…In this article, I’ll explain how the Material3 Color System works and why you should implement it in your Android project.Understanding Material3 color rolesIn order to understand how colors are applied in your app, let’s recap a bit on how a color scheme is structured.The Material3 color scheme consists of three high level “color roles”: Primary, Secondary and Tertiary. These colors are applied on components based on their importance: a FAB or a “login” button would use a Primary color.The Primary color might be your brand’s main color and thus used for prominent components like primary buttons. The Secondary colors are used for accents, whereas the Tertiary ones are less common.Material color roles diagram. Source: https://m3.material.io/styles/color/rolesThe variations, like “On Primary” have rules on how they should be applied: if your “login” button uses the Primary color, then the text on it would use “On Primary”. Following these rules ensures that your app is readable and accessible.Button with a background of “Primary” and text with “On Primary”Why is this important to know? Well, each Component and each state has its own colors, as documented in the Material3 docs. A simple button has 7 states, each with various colors. You shouldn’t have to worry about memorizing each one!The various states and specs for a Filled Button. Source: Material3 Button-Filled specCreating a themeSo, how about declaring those +200 colors? Well, the good news here is that it happens pretty much automatically. You definitely don’t want to create a color scheme from scratch.There are two options: use the Material Theme Builder Figma plugin or use the online Material Theme Builder.Colors generated by the Material Theme BuilderBoth of the builders work similarly:Choose your source color, all the other colors will be automatically derived from itExport the generated .kt filesPlace the files in theui.theme package in your Compose projectRename AppTheme if you likeAnd that’s it! Now you have a full custom Material3 Color System applied in your project.But how does it work?Behind the scenesThe Theme.kt file you exported contains the following code snippet:Here, the pre-defined colorScheme is applied to the MaterialTheme composable. When you wrap Composables in your Theme, those composables gain access to the colorScheme. This is for example, how you apply theming to your @Previews.In the above code snippet, the AppTheme provides the defined colorScheme to the Button via CompositionLocal. This results in a fully themed Button, supporting both Light and Dark modes, without explicitly defining colors.Note that both the backgrounds as well as the text colors are different.If you look at the Material3 Button’s source, you’ll see that the default value for colors is ButtonDefaults.buttonColors() . The buttonColors() function gets those colors from your MaterialTheme:@Composable fun buttonColors() = MaterialTheme.colorScheme.defaultButtonColorsWhere do the colors apply?As you might guess, the colors are applied to all Material3 Components, and their states, from the simple Button to complex ones like the TimePicker.ThemingAs seen above, you’ll get colors for both dark and light themes, out of the box.The following piece of code thus results in a fully themed TimePicker component, for both Dark and Light themes.Resulting in the following PreviewsTimePicker in both light and dark themesStatesAnd the various states? Yep, the colors are also automatically applied based on composable states.An enabled and disabled button.The above change in color for both the Button background and the label are directly derived from the Button’s enabled property, as seen from the code snippet below:SummaryImplementing Material3 Color System can seem intimidating, but by using the Material Theme Builder and Material3 Compose components, you’ll find that the theming is far more simple and straightforward than without using them.And as all developers like, you’ll end up with a cleaned codebase and refined color scheme throughout your app.LinksIf you are interested in learning more, here are some useful linksIntroducing Material Theme BuilderMaterial3 color system documentationAndroid Developer documentation on Color schemes",
  "image": "https://miro.medium.com/v2/resize:fit:1200/1*QXa8AZm0Bo8Wn7D-6_7MVg.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@harmittaa?source=post_page---byline--2b0c73a58b2d---------------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Matti Mäki-Kihniä\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*2oiJ6ABvN9J2Zm3B_WAJ3Q.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--2b0c73a58b2d---------------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"f223\"\u003eMaterial3 is the newest iteration of Material Design, with dynamic theming, revised components and more… however, it can also be overwhelming with its over \u003cstrong\u003e200 different color variations\u003c/strong\u003e and tens of pages of documentation.\u003c/p\u003e\u003cp id=\"8d95\"\u003eThe good thing is that in reality, it’s not all that complex and it can make developers’ lives much easier. And by easier, I mean the following:\u003c/p\u003e\u003cul\u003e\u003cli id=\"4348\"\u003eAutomatic theming of all Material3 components\u003c/li\u003e\u003cli id=\"f8db\"\u003eDark and light color schemes\u003c/li\u003e\u003cli id=\"2ee8\"\u003eCorrect colors for the \u003cem\u003evarious \u003c/em\u003ecomponent states that you never thought of, like “hovered”\u003c/li\u003e\u003cli id=\"89d3\"\u003eProper contrasts between colors for accessibility and UX\u003c/li\u003e\u003cli id=\"36d9\"\u003eA cleaner codebase!\u003c/li\u003e\u003cli id=\"41b9\"\u003eAnd more…\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"8384\"\u003eIn this article, I’ll explain how the Material3 Color System works and why you should implement it in your Android project.\u003c/p\u003e\u003ch2 id=\"26ea\"\u003eUnderstanding Material3 color roles\u003c/h2\u003e\u003cp id=\"92ea\"\u003eIn order to understand how colors are applied in your app, let’s recap a bit on how a color scheme is structured.\u003c/p\u003e\u003cp id=\"5dbe\"\u003eThe Material3 color scheme consists of three high level \u003ca href=\"https://m3.material.io/styles/color/roles\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003e“\u003cstrong\u003ecolor roles\u003c/strong\u003e”\u003c/a\u003e: Primary, Secondary and Tertiary. These colors are applied on components based on their importance: a FAB or a “login” button would use a Primary color.\u003c/p\u003e\u003cp id=\"d711\"\u003eThe Primary color might be your brand’s main color and thus used for prominent components like primary buttons. The Secondary colors are used for accents, whereas the Tertiary ones are less common.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eMaterial color roles diagram. Source: \u003ca href=\"https://m3.material.io/styles/color/roles\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003ehttps://m3.material.io/styles/color/roles\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"4ad5\"\u003eThe variations, like “\u003cstrong\u003eOn Primary\u003c/strong\u003e” have rules on how they should be applied: if your “login” button uses the \u003cstrong\u003ePrimary\u003c/strong\u003e color, then the text on it would use “\u003cstrong\u003eOn Primary\u003c/strong\u003e”. Following these rules ensures that your app is readable and accessible.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eButton with a background of “Primary” and text with “On Primary”\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"69ec\"\u003eWhy is this important to know? Well, each Component and each state has its own colors, as \u003ca href=\"https://m3.material.io/components/buttons/specs#cbfd91a6-d688-4be7-9a69-672549de3ea9\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003edocumented in the Material3 docs\u003c/a\u003e. A simple button has 7 states, each with various colors. You shouldn’t have to worry about memorizing each one!\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eThe various states and specs for a Filled Button. Source: \u003ca href=\"https://m3.material.io/components/buttons/specs#cbfd91a6-d688-4be7-9a69-672549de3ea9\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMaterial3 Button-Filled spec\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"2b30\"\u003eCreating a theme\u003c/h2\u003e\u003cp id=\"fadb\"\u003eSo, how about declaring those +200 colors? Well, the good news here is that it happens pretty much automatically. You \u003cem\u003edefinitely\u003c/em\u003e don’t want to create a color scheme from scratch.\u003c/p\u003e\u003cp id=\"58ac\"\u003eThere are two options: use the \u003ca href=\"https://www.figma.com/community/plugin/1034969338659738588/material-theme-builder\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMaterial Theme Builder Figma plugin\u003c/a\u003e or use the online \u003ca href=\"https://material-foundation.github.io/material-theme-builder/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMaterial Theme Builder\u003c/a\u003e.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eColors generated by the Material Theme Builder\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"b2bd\"\u003eBoth of the builders work similarly:\u003c/p\u003e\u003col\u003e\u003cli id=\"ce17\"\u003eChoose your source color, all the other colors will be automatically derived from it\u003c/li\u003e\u003cli id=\"5751\"\u003eExport the generated \u003ccode\u003e.kt\u003c/code\u003e files\u003c/li\u003e\u003cli id=\"b736\"\u003ePlace the files in the\u003ccode\u003eui.theme\u003c/code\u003e package in your Compose project\u003c/li\u003e\u003cli id=\"367f\"\u003eRename \u003ccode\u003eAppTheme\u003c/code\u003e if you like\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"b9ec\"\u003eAnd that’s it! Now you have a full custom Material3 Color System applied in your project.\u003c/p\u003e\u003cp id=\"9a64\"\u003eBut how does it work?\u003c/p\u003e\u003ch2 id=\"cfc0\"\u003eBehind the scenes\u003c/h2\u003e\u003cp id=\"9f79\"\u003eThe \u003ccode\u003eTheme.kt\u003c/code\u003e file you exported contains the following code snippet:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"8196\"\u003eHere, the pre-defined \u003ccode\u003ecolorScheme\u003c/code\u003e is applied to the \u003ccode\u003eMaterialTheme\u003c/code\u003e composable. When you wrap Composables in your Theme, those composables gain access to the \u003ccode\u003ecolorScheme\u003c/code\u003e. This is for example, how you apply theming to your \u003ccode\u003e@Previews\u003c/code\u003e.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"9a57\"\u003eIn the above code snippet, the \u003ccode\u003eAppTheme\u003c/code\u003e provides the defined \u003ccode\u003ecolorScheme\u003c/code\u003e to the Button via CompositionLocal. This results in a fully themed Button, supporting both Light and Dark modes, without explicitly defining colors.\u003c/p\u003e\u003cp id=\"9d3b\"\u003eNote that both the backgrounds as well as the text colors are different.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"55b8\"\u003eIf you look at the Material3 Button’s source, you’ll see that the default value for \u003ccode\u003ecolors\u003c/code\u003e is \u003ccode\u003eButtonDefaults.buttonColors()\u003c/code\u003e . The \u003ccode\u003ebuttonColors()\u003c/code\u003e function gets those colors from your MaterialTheme:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"349f\"\u003e@Composable fun buttonColors() = MaterialTheme.colorScheme.defaultButtonColors\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"b7e8\"\u003eWhere do the colors apply?\u003c/h2\u003e\u003cp id=\"c2b3\"\u003eAs you might guess, the colors are applied to all Material3 Components, and their states, from the simple \u003cem\u003eButton\u003c/em\u003e to complex ones like the \u003cem\u003eTimePicker\u003c/em\u003e.\u003c/p\u003e\u003ch2 id=\"330b\"\u003eTheming\u003c/h2\u003e\u003cp id=\"981d\"\u003eAs seen above, you’ll get colors for both dark and light themes, out of the box.\u003c/p\u003e\u003cp id=\"8ad4\"\u003eThe following piece of code thus results in a fully themed \u003cem\u003eTimePicker\u003c/em\u003e component, for both Dark and Light themes.\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp id=\"4ba5\"\u003eResulting in the following Previews\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eTimePicker in both light and dark themes\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"b98d\"\u003eStates\u003c/h2\u003e\u003cp id=\"62e3\"\u003eAnd the various states? Yep, the colors are also automatically applied based on composable states.\u003c/p\u003e\u003cfigure\u003e\u003cfigcaption\u003eAn enabled and disabled button.\u003c/figcaption\u003e\u003c/figure\u003e\u003cp id=\"c296\"\u003eThe above change in color for both the Button background and the label are directly derived from the Button’s \u003ccode\u003eenabled\u003c/code\u003e property, as seen from the code snippet below:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003ch2 id=\"6c6e\"\u003eSummary\u003c/h2\u003e\u003cp id=\"8178\"\u003eImplementing Material3 Color System can seem intimidating, but by using the Material Theme Builder and Material3 Compose components, you’ll find that the theming is far more simple and straightforward than without using them.\u003c/p\u003e\u003cp id=\"1c28\"\u003eAnd as all developers like, you’ll end up with a cleaned codebase and refined color scheme throughout your app.\u003c/p\u003e\u003ch2 id=\"a41b\"\u003eLinks\u003c/h2\u003e\u003cp id=\"2da4\"\u003eIf you are interested in learning more, here are some useful links\u003c/p\u003e\u003cul\u003e\u003cli id=\"9adf\"\u003e\u003ca href=\"https://m3.material.io/blog/material-theme-builder\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eIntroducing Material Theme Builder\u003c/a\u003e\u003c/li\u003e\u003cli id=\"daa9\"\u003e\u003ca href=\"https://m3.material.io/styles/color/\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eMaterial3 color system documentation\u003c/a\u003e\u003c/li\u003e\u003cli id=\"bfb2\"\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/designsystems/material3#color-scheme\" rel=\"noopener ugc nofollow\" target=\"_blank\"\u003eAndroid Developer documentation on Color schemes\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-03-17T07:57:35.002Z",
  "modifiedTime": null
}
