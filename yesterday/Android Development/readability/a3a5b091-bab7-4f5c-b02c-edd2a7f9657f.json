{
  "id": "a3a5b091-bab7-4f5c-b02c-edd2a7f9657f",
  "title": "CLion and the Open-Source Community: Growing Together",
  "link": "https://blog.jetbrains.com/blog/2025/05/14/clion-and-the-open-source-community-growing-together/",
  "description": "From the beginning, CLion has been shaped by the needs of C and C++ developers around the world. Our cross-platform IDE was built to simplify development, boost productivity, and make working with C++ more enjoyable. We‚Äôre excited to take the next step in our ongoing collaboration with the community: CLion is now free for non-commercial [‚Ä¶]",
  "author": "Lena Morozova",
  "published": "Wed, 14 May 2025 10:00:00 +0000",
  "source": "https://blog.jetbrains.com/blog/feed",
  "categories": [
    "community",
    "clion",
    "community-support",
    "open-source-program",
    "oss-projects"
  ],
  "byline": "Lena Morozova",
  "length": 7125,
  "excerpt": "From the beginning, CLion has been shaped by the needs of C and C++ developers around the world. Our cross-platform IDE was built to simplify development, boost productivity, and make working with C++",
  "siteName": "The JetBrains Blog",
  "favicon": "https://blog.jetbrains.com/wp-content/uploads/2024/01/cropped-mstile-310x310-1-180x180.png",
  "text": "Community Read this post in other languages: From the beginning, CLion has been shaped by the needs of C and C++ developers around the world. Our cross-platform IDE was built to simplify development, boost productivity, and make working with C++ more enjoyable. We‚Äôre excited to take the next step in our ongoing collaboration with the community: CLion is now free for non-commercial use, including open-source development. If you‚Äôre contributing to an OSS project or starting your own, there‚Äôs never been a better time to try it out. Just look at the below open-source projects built with CLion ‚Äì powerful debuggers, reverse engineering tools, legendary file managers, and libraries used around the world. These are shining examples of what developers can do when they have the right tools. JSON for Modern C++ Created by: Niels Lohmann JetBrains tools used: CLion Created during a university project, JSON for Modern C++ started as a helper file for logging analytics data and then evolved into one of GitHub‚Äôs most popular C++ libraries with nearly 45,000 stars. ‚Äú‚Ä¶we needed to send some analytic information to a server. I started with a native printf statement, putting all the needed variables into a JSON object. Soon, the logging became more complex, so I moved all JSON-related functions into a header file. This then grew into a self-contained JSON library for C++.‚Äù The library offers an intuitive C++-style interface for JSON parsing and serialization. It‚Äôs widely used in industries ranging from game development to aerospace. ‚ÄúAs an open-source maintainer and contributor, I have limited time to work on my projects. CLion‚Äôs easy test execution, Git integration, and Clang-Tidy warnings help me stay productive and make the most of that time.‚Äù Future plans: Automate the manual release process. Optimize performance and clean up the architecture. Plan the roadmap for the next major release: 3.0.0. Midnight Commander Maintained by: Yury Zaytsev JetBrains tools used: CLion, PyCharm Midnight Commander (or mc) is a classic terminal file manager with a rich legacy. Originally inspired by Norton Commander from the early ‚Äô90s, it has since become widely used and loved in the Unix community for its visual interface, terminal-first design, and extensibility. Yury, who has been maintaining the project since 2015, recalls his early fascination: ‚ÄúI vividly remember being fascinated by the blue panes of Norton Commander when I was five. Years later, I rediscovered Unix systems, and the first program I installed was Midnight Commander. It brought that magic back ‚Äì and that‚Äôs when I began contributing.‚Äù Its dual-pane interface helped generations of users interact with Unix systems more efficiently. Despite challenges, development continues decades later. JetBrains tools help keep the aging codebase navigable: ‚ÄúCLion has completely changed how I write code. The refactoring and renaming tools, code navigation, and features like macro expansion support are invaluable for maintaining massive, decades-old codebases.‚Äù Future plans: Migrate to an event loop. Continue refactoring and modernizing the infrastructure to improve maintainability. Embed a lightweight scripting engine for extensibility. ImHex Created by: WerWolv JetBrains tools used: CLion, Rider, WebStorm ImHex started as a side project to explore programming language design and binary data structures. Creator Nikolaij S√§gesser built a custom language to define data types and overlay them on binary data. What began as a tool to visualize those definitions grew into a powerful, cross-platform hex editor for reverse engineers. ‚ÄúI started it during my Bachelor‚Äôs thesis ‚Äì I needed tools like this myself, and a few friends were really frustrated with what was already out there. That gave me the push to keep going.‚Äù ImHex now offers custom scripting, format definition, live parsing, and binary visualization, all in a sleek cross-platform GUI. ‚ÄúI‚Äôm mainly using CLion, and it‚Äôs been amazing. Being able to use GCC and Clang on all platforms, especially on Windows, where most things expect MSVC, is a game-changer. With CLion, I can use open source toolchains, debuggers, and build setups everywhere ‚Äì and it just works.‚Äù Future plans: Rewrite the custom programming language to use a VM for execution. Expand support for binary formats. Improve UI/UX and add more visualization tools. x64dbg Created by: Duncan Ogilvie JetBrains tools used: CLion x64dbg is a well-known debugger among reverse engineers, especially on Windows, where accessible debugging tools have historically lagged behind. Duncan started it as a high school graduation project to fill that gap, drawing inspiration from OllyDbg. ‚ÄúThere was nothing user-friendly for 64-bit debugging at the time, and I was naive enough to just start building one. üòÖ‚Äù Now with over four million downloads, x64dbg is used globally by a diverse range of individuals, from indie hackers to institutional researchers, and even the Vatican. The project recently migrated to CMake via cmkr, making development and contribution more straightforward. ‚ÄúWe moved from a complicated 10+ step build process to just opening the folder in CLion and hitting ‚Äòbuild.‚Äô The best is that the CMake and debug configurations can be done from a simple UI and do not require fiddling with JSON files.‚Äù Despite being well-established, x64dbg continues to evolve. While feature development has slowed due to limited time, key areas of active work include: Switching to the Visual Studio 2022 compiler for modern C++ support. Integrating Windows type support and AVX-512 support. Extracting UI components into a reusable cross-platform library. These projects, and the people behind them, represent the spirit of open source: solving hard problems, sharing knowledge, and building tools the world depends on. We believe that this work matters, and we are proud to support these efforts. Grab your free license and build your next great project with confidence, speed, and comfort. Subscribe to JetBrains Blog updates Discover more",
  "image": "https://blog.jetbrains.com/wp-content/uploads/2025/04/cl-social_share_blog_1280x720_en-1.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"main\"\u003e\n    \n                            \u003csection data-clarity-region=\"article\"\u003e\n                \u003cdiv\u003e\n                    \t\t\t\t\u003cp\u003e\u003ca href=\"https://blog.jetbrains.com/blog/category/community/\"\u003eCommunity\u003c/a\u003e\u003c/p\u003e                    \u003cdiv\u003e\u003cp data-nosnippet=\"\"\u003eRead this post in other languages:\u003c/p\u003e\u003c/div\u003e\n                    \n\u003cfigure\u003e\u003cimg decoding=\"async\" fetchpriority=\"high\" width=\"2560\" height=\"1440\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/04/cl-featured_blog_1280x720_en-1.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFrom the beginning, CLion has been shaped by the needs of C and C++ developers around the world. Our cross-platform IDE was built to simplify development, boost productivity, and make working with C++ more enjoyable.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe‚Äôre excited to take the next step in our ongoing collaboration with the community: \u003ca href=\"https://blog.jetbrains.com/clion/2025/05/clion-is-now-free-for-non-commercial-use/\"\u003eCLion is now free for non-commercial use\u003c/a\u003e, including open-source development. If you‚Äôre contributing to an OSS project or starting your own, there‚Äôs never been a better time to try it out.\u003c/p\u003e\n\n\n\n\u003cp\u003eJust look at the below open-source projects built with CLion ‚Äì powerful debuggers, reverse engineering tools, legendary file managers, and libraries used around the world. These are shining examples of what developers can do when they have the right tools.\u003c/p\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"460\" height=\"460\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/1.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003ch2\u003e\u003cstrong\u003eJSON for Modern C++\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eCreated by: \u003c/strong\u003e\u003ca href=\"https://github.com/nlohmann\" target=\"_blank\" rel=\"noopener\"\u003eNiels Lohmann\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eJetBrains tools used:\u003c/strong\u003e CLion\u003c/p\u003e\n\n\n\n\u003cp\u003eCreated during a university project, \u003ca href=\"https://github.com/nlohmann/json\" target=\"_blank\" rel=\"noopener\"\u003eJSON for Modern C++\u003c/a\u003e started as a helper file for logging analytics data and then evolved into one of GitHub‚Äôs most popular C++ libraries with nearly 45,000 stars.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e‚Äú‚Ä¶we needed to send some analytic information to a server. I started with a native printf statement, putting all the needed variables into a JSON object. Soon, the logging became more complex, so I moved all JSON-related functions into a header file. This then grew into a self-contained JSON library for C++.‚Äù\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThe library offers an intuitive C++-style interface for JSON parsing and serialization. It‚Äôs widely used in industries ranging from game development to aerospace.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e‚ÄúAs an open-source maintainer and contributor, I have limited time to work on my projects. CLion‚Äôs easy test execution, Git integration, and Clang-Tidy warnings help me stay productive and make the most of that time.‚Äù\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eFuture plans:\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eAutomate the manual release process.\u003c/li\u003e\n\n\n\n\u003cli\u003eOptimize performance and clean up the architecture.\u003c/li\u003e\n\n\n\n\u003cli\u003ePlan the roadmap for the next major release: 3.0.0.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" width=\"450\" height=\"450\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/2.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003ch2\u003e\u003cstrong\u003eMidnight Commander\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eMaintained by: \u003c/strong\u003e\u003ca href=\"https://github.com/zyv\" target=\"_blank\" rel=\"noopener\"\u003eYury Zaytsev\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eJetBrains tools used:\u003c/strong\u003e CLion, PyCharm\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/MidnightCommander/mc\" target=\"_blank\" rel=\"noopener\"\u003eMidnight Commander\u003c/a\u003e (or \u003ccode\u003emc\u003c/code\u003e) is a classic terminal file manager with a rich legacy. Originally inspired by Norton Commander from the early ‚Äô90s, it has since become widely used and loved in the Unix community for its visual interface, terminal-first design, and extensibility.\u003c/p\u003e\n\n\n\n\u003cp\u003eYury, who has been maintaining the project since 2015, recalls his early fascination:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e‚ÄúI vividly remember being fascinated by the blue panes of Norton Commander when I was five. Years later, I rediscovered Unix systems, and the first program I installed was Midnight Commander. It brought that magic back ‚Äì and that‚Äôs when I began contributing.‚Äù\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eIts dual-pane interface helped generations of users interact with Unix systems more efficiently. Despite challenges, development continues decades later. JetBrains tools help keep the aging codebase navigable:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e‚ÄúCLion has completely changed how I write code. The refactoring and renaming tools, code navigation, and features like macro expansion support are invaluable for maintaining massive, decades-old codebases.‚Äù\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eFuture plans:\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eMigrate to an event loop.\u003c/li\u003e\n\n\n\n\u003cli\u003eContinue refactoring and modernizing the infrastructure to improve maintainability.\u003c/li\u003e\n\n\n\n\u003cli\u003eEmbed a lightweight scripting engine for extensibility.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"598\" height=\"598\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/3-e1746019084496.jpg\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003ch2\u003e\u003cstrong\u003eImHex\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eCreated by: \u003c/strong\u003e\u003ca href=\"https://github.com/WerWolv\" target=\"_blank\" rel=\"noopener\"\u003eWerWolv\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eJetBrains tools used:\u003c/strong\u003e CLion, Rider, WebStorm\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/WerWolv/ImHex\" target=\"_blank\" rel=\"noopener\"\u003eImHex\u003c/a\u003e started as a side project to explore programming language design and binary data structures. Creator Nikolaij S√§gesser built a custom language to define data types and overlay them on binary data. What began as a tool to visualize those definitions grew into a powerful, cross-platform hex editor for reverse engineers.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e‚ÄúI started it during my Bachelor‚Äôs thesis ‚Äì I needed tools like this myself, and a few friends were really frustrated with what was already out there. That gave me the push to keep going.‚Äù\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eImHex now offers custom scripting, format definition, live parsing, and binary visualization, all in a sleek cross-platform GUI.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e‚ÄúI‚Äôm mainly using CLion, and it‚Äôs been amazing. Being able to use GCC and Clang on all platforms, especially on Windows, where most things expect MSVC, is a game-changer. With CLion, I can use open source toolchains, debuggers, and build setups everywhere ‚Äì and it just works.‚Äù\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eFuture plans:\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eRewrite the custom programming language to use a VM for execution.\u003c/li\u003e\n\n\n\n\u003cli\u003eExpand support for binary formats.\u003c/li\u003e\n\n\n\n\u003cli\u003eImprove UI/UX and add more visualization tools.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003cdiv\u003e\n\u003cfigure\u003e\u003cimg decoding=\"async\" loading=\"lazy\" width=\"305\" height=\"305\" src=\"https://blog.jetbrains.com/wp-content/uploads/2025/05/4-e1746019037585.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\u003c/div\u003e\n\n\n\u003ch2\u003e\u003cstrong\u003ex64dbg\u003c/strong\u003e\u003c/h2\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eCreated by: \u003c/strong\u003e\u003ca href=\"https://github.com/mrexodia\" target=\"_blank\" rel=\"noopener\"\u003eDuncan Ogilvie\u003c/a\u003e\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eJetBrains tools used:\u003c/strong\u003e CLion\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://github.com/x64dbg/x64dbg\" target=\"_blank\" rel=\"noopener\"\u003ex64dbg\u003c/a\u003e is a well-known debugger among reverse engineers, especially on Windows, where accessible debugging tools have historically lagged behind. Duncan started it as a high school graduation project to fill that gap, drawing inspiration from OllyDbg.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e‚ÄúThere was nothing user-friendly for 64-bit debugging at the time, and I was naive enough to just start building one. üòÖ‚Äù\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eNow with over four million downloads, x64dbg is used globally by a diverse range of individuals, from indie hackers to institutional researchers, and even the Vatican. The project recently migrated to CMake via \u003ccode\u003ecmkr\u003c/code\u003e, making development and contribution more straightforward.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003e‚ÄúWe moved from a complicated 10+ step build process to just opening the folder in CLion and hitting ‚Äòbuild.‚Äô The best is that the CMake and debug configurations can be done from a simple UI and do not require fiddling with JSON files.‚Äù\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eDespite being well-established, x64dbg continues to evolve. While feature development has slowed due to limited time, key areas of active work include:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eSwitching to the Visual Studio 2022 compiler for modern C++ support.\u003c/li\u003e\n\n\n\n\u003cli\u003eIntegrating Windows type support and AVX-512 support.\u003c/li\u003e\n\n\n\n\u003cli\u003eExtracting UI components into a reusable cross-platform library.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003chr/\u003e\n\n\n\n\u003cp\u003eThese projects, and the people behind them, represent the spirit of open source: solving hard problems, sharing knowledge, and building tools the world depends on. We believe that this work matters, and we are proud to support these efforts.\u003c/p\u003e\n\n\n\n\u003cp\u003eGrab your free license and build your next great project with confidence, speed, and comfort.\u003c/p\u003e\n\n\n    \n\n\n\n\n                    \n                                                                                                                                                                                                                            \u003cdiv\u003e\n                                \u003cdiv\u003e\n                                                                            \u003ch4\u003eSubscribe to JetBrains Blog updates\u003c/h4\u003e\n                                                                                                            \n                                \u003c/div\u003e\n                                \n                                \u003cp\u003e\u003cimg src=\"https://blog.jetbrains.com/wp-content/themes/jetbrains/assets/img/img-form.svg\" alt=\"image description\"/\u003e\n                                                                    \u003c/p\u003e\n                            \u003c/div\u003e\n                                                            \u003c/div\u003e\n                \u003ca href=\"#\"\u003e\u003c/a\u003e\n                \n                \n            \u003c/section\u003e\n                    \u003cdiv\u003e\n                \u003cp\u003e\n                    \u003ch2\u003eDiscover more\u003c/h2\u003e\n                \u003c/p\u003e\n                \n            \u003c/div\u003e\n                \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
