{
  "id": "5de390d9-0079-4bd1-a66f-ee6aa90d86e0",
  "title": "What’s new in the Jetpack Compose April ’25 release",
  "link": "http://android-developers.googleblog.com/2025/04/whats-new-in-jetpack-compose-april-25.html",
  "description": "",
  "author": "Android Developers",
  "published": "2025-04-23T14:00:00.000-07:00",
  "source": "http://feeds.feedburner.com/blogspot/hsDu",
  "categories": [
    "Android Development",
    "Android UI",
    "API stabilization",
    "autofill",
    "Compose 1.8",
    "Jetpack Compose",
    "Kotlin",
    "Text improvements",
    "UI Development",
    "Visibility tracking"
  ],
  "byline": "",
  "length": 6784,
  "excerpt": "Upgrade your Android UI development with Jetpack Compose 1.8: autofill integration, text enhancements, visibility tracking, stabilized APIs, and more",
  "siteName": "Android Developers Blog",
  "favicon": "",
  "text": "Posted by Jolanda Verhoef – Developer Relations Engineer Today, as part of the Compose April ‘25 Bill of Materials, we’re releasing version 1.8 of Jetpack Compose, Android's modern, native UI toolkit, used by many developers. This release contains new features like autofill, various text improvements, visibility tracking, and new ways to animate a composable's size and location. It also stabilizes many experimental APIs and fixes a number of bugs. To use today’s release, upgrade your Compose BOM version to 2025.04.01 : implementation(platform(\"androidx.compose:compose-bom:2025.04.01\")) Note: If you are not using the Bill of Materials, make sure to upgrade Compose Foundation and Compose UI at the same time. Otherwise, autofill will not work correctly. Autofill Autofill is a service that simplifies data entry. It enables users to fill out forms, login screens, and checkout processes without manually typing in every detail. Now, you can integrate this functionality into your Compose applications. Setting up Autofill in your Compose text fields is straightforward: 1. Set the contentType Semantics: Use Modifier.semantics and set the appropriate contentType for your text fields. For example: TextField( state = rememberTextFieldState(), modifier = Modifier.semantics { contentType = ContentType.Username } ) 2. Handle saving credentials (for new or updated information): a. Implicitly through navigation: If a user navigates away from the page, commit will be called automatically - no code needed! b. Explicitly through a button: To trigger saving credentials when the user submits a form (by tapping a button, for instance), retrieve the local AutofillManager and call commit(). For full details on how to implement autofill in your application, see the Autofill in Compose documentation. Text When placing text inside a container, you can now use the autoSize parameter in BasicText to let the text size automatically adapt to the container size: Box { BasicText( text = \"Hello World\", maxLines = 1, autoSize = TextAutoSize.StepBased() ) } You can customize sizing by setting a minimum and/or maximum font size and define a step size. Compose Foundation 1.8 contains this new BasicText overload, with Material 1.4 to follow soon with an updated Text overload. Furthermore, Compose 1.8 enhances text overflow handling with new TextOverflow.StartEllipsis or TextOverflow.MiddleEllipsis options, which allow you to display ellipses at the beginning or middle of a text line. val text = \"This is a long text that will overflow\" Column(Modifier.width(200.dp)) { Text(text, maxLines = 1, overflow = TextOverflow.Ellipsis) Text(text, maxLines = 1, overflow = TextOverflow.StartEllipsis) Text(text, maxLines = 1, overflow = TextOverflow.MiddleEllipsis) } And finally, we're expanding support for HTML formatting in AnnotatedString, with the addition of bulleted lists: Text( AnnotatedString.fromHtml( \"\"\" \u003ch1\u003eHTML content\u003c/h1\u003e \u003cul\u003e \u003cli\u003eHello,\u003c/li\u003e \u003cli\u003eWorld\u003c/li\u003e \u003c/ul\u003e \"\"\".trimIndent() ) ) Visibility tracking Compose UI 1.8 introduces a new modifier: onLayoutRectChanged. This API solves many use cases that the existing onGloballyPositioned modifier does; however, it does so with much less overhead. The onLayoutRectChanged modifier can debounce and throttle the callback per what the use case demands, which helps with performance when it’s added onto an item in LazyColumn or LazyRow. This new API unlocks features that depend on a composable's visibility on screen. Compose 1.9 will add higher-level abstractions to this low-level API to simplify common use cases. Animate composable bounds Last year we introduced shared element transitions, which smoothly animate content in your apps. The 1.8 Animation module graduates LookaheadScope to stable, includes numerous performance and stability improvements, and includes a new modifier, animateBounds. When used inside a LookaheadScope, this modifier automatically animates its composable's size and position on screen, when those change: Box( Modifier .width(if(expanded) 180.dp else 110.dp) .offset(x = if (expanded) 0.dp else 100.dp) .animateBounds(lookaheadScope = this@LookaheadScope) .background(Color.LightGray, shape = RoundedCornerShape(12.dp)) .height(50.dp) ) { Text(\"Layout Content\", Modifier.align(Alignment.Center)) } Increased API stability Jetpack Compose has utilized @Experimental annotations to mark APIs that are liable to change across releases, for features that require more than a library's alpha period to stabilize. We have heard your feedback that a number of features have been marked as experimental for some time with no changes, contributing to a sense of instability. We are actively looking at stabilizing existing experimental APIs—in the UI and Foundation modules, we have reduced the experimental APIs from 172 in the 1.7 release to 70 in the 1.8 release. We plan to continue this stabilization trend across modules in future releases. Deprecation of contextual flow rows and columns As part of the work to reduce experimental annotations, we identified APIs added in recent releases that are less than optimal solutions for their use cases. This has led to the decision to deprecate the experimental ContextualFlowRow and ContextualFlowColumn APIs, added in Foundation 1.7. If you need the deprecated functionality, our recommendation for now is to copy over the implementation and adapt it as needed, while we work on a plan for future components that can cover these functionalities better. The related APIs FlowRow and FlowColumn are now stable; however, the new overflow parameter that was added in the last release is now deprecated. Improvements and fixes for core features In response to developer feedback, we have shipped some particularly in-demand features and bug fixes in our core libraries: Accessibility checks in tests: Use enableAccessibilityChecks in your Espresso tests to automatically test for common accessibility issues in your app. Make dialogs go edge to edge: When displayed full screen, dialogs now take into account the full size of the screen and will draw behind system bars. Easier testing of ClickableText: Verify correct behavior when the user taps on a link with a new test assertion, performFirstLinkClick. Allow customizing overscroll: All lists now have new overloads, allowing you to pass an OverscrollEffect. Get started! We’re grateful for all of the bug reports and feature requests submitted to our issue tracker - they help us to improve Compose and build the APIs you need. Continue providing your feedback, and help us make Compose better. Happy composing!",
  "image": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgdOwvBYrmKW1rvffeHcnWS-uHo-QoapFTLsndqTmAv2Qaq77PABt76CKqWxX1q1lym-ZxzsPgV4nFypCbQ6qV3NFoPenaMVF5UCGa3-RUvnp9TOGwactsq8QZ61TEtgah-oom1s_KTKFxoJdz5ejzzl4iXxU0w-cHhmsWyAulSUrOVlEb2vEsyHTeA7ow/w1200-h630-p-k-no-nu/Jetpack-Compose-Release-April-25%20%282%29.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cmeta content=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgdOwvBYrmKW1rvffeHcnWS-uHo-QoapFTLsndqTmAv2Qaq77PABt76CKqWxX1q1lym-ZxzsPgV4nFypCbQ6qV3NFoPenaMVF5UCGa3-RUvnp9TOGwactsq8QZ61TEtgah-oom1s_KTKFxoJdz5ejzzl4iXxU0w-cHhmsWyAulSUrOVlEb2vEsyHTeA7ow/s1600/Jetpack-Compose-Release-April-25%20%282%29.png\" name=\"twitter:image\"/\u003e\n\u003cp\u003e\n\n\u003cem\u003ePosted by Jolanda Verhoef – Developer Relations Engineer\u003c/em\u003e\n\n\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEie6081b7Py81Eb2nVYWPOqVpcopbk5KZDcHudfVTYuxW-hdOIUNk03J7bVyCDsd1pE1POvEBntz52bRSqffg9dWCHRsAtha3IIrYlwz3JukW-xqbaxMfoKLfeqzOJFLDWSPTE_u4sZasqJUbL4-7ahkwvK28pp9LJiSs1vXNDIT9WZRLs42ttzIpc9nzI/s1600/Android%20-%20New%20Ways%20of%20Optimizing%20Stability%20in%20Jetpack%20Compose%20V2-01.png\"\u003e\u003cimg data-original-height=\"800\" data-original-width=\"100%\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEie6081b7Py81Eb2nVYWPOqVpcopbk5KZDcHudfVTYuxW-hdOIUNk03J7bVyCDsd1pE1POvEBntz52bRSqffg9dWCHRsAtha3IIrYlwz3JukW-xqbaxMfoKLfeqzOJFLDWSPTE_u4sZasqJUbL4-7ahkwvK28pp9LJiSs1vXNDIT9WZRLs42ttzIpc9nzI/s1600/Android%20-%20New%20Ways%20of%20Optimizing%20Stability%20in%20Jetpack%20Compose%20V2-01.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003eToday, as part of the \u003ca href=\"https://developer.android.com/jetpack/androidx/releases/compose\" target=\"_blank\"\u003eCompose April ‘25 Bill of Materials\u003c/a\u003e, we’re releasing version 1.8 of \u003ca href=\"https://d.android.com/compose\" target=\"_blank\"\u003eJetpack Compose\u003c/a\u003e, Android\u0026#39;s modern, native UI toolkit, \u003ca href=\"https://developer.android.com/compose#apps-built-with-compose\" target=\"_blank\"\u003eused by many developers\u003c/a\u003e. This release contains new features like autofill, various text improvements, visibility tracking, and new ways to animate a composable\u0026#39;s size and location. It also stabilizes many experimental APIs and fixes a number of bugs.\u003c/p\u003e\n\n\u003cp\u003eTo use today’s release, upgrade your Compose BOM version to \u003cspan\u003e2025.04.01\u003c/span\u003e :\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre\u003eimplementation(platform(\u003cspan\u003e\u0026#34;androidx.compose:compose-bom:2025.04.01\u0026#34;\u003c/span\u003e))\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cblockquote\u003e\u003cb\u003eNote: \u003c/b\u003eIf you are not using the Bill of Materials, make sure to upgrade Compose Foundation and Compose UI at the same time. Otherwise, autofill will not work correctly.\u003c/blockquote\u003e\n\n\u003ch2\u003e\u003cspan\u003eAutofill\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"https://developer.android.com/develop/ui/compose/text/autofill\" target=\"_blank\"\u003eAutofill\u003c/a\u003e is a service that simplifies data entry. It enables users to fill out forms, login screens, and checkout processes without manually typing in every detail. Now, you can integrate this functionality into your Compose applications.\u003c/p\u003e\n\n\u003cp\u003eSetting up Autofill in your Compose text fields is straightforward:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cp\u003e1. \u003cb\u003eSet the \u003cspan\u003econtentType\u003c/span\u003e Semantics\u003c/b\u003e: Use \u003cspan\u003eModifier.semantics\u003c/span\u003e and set the appropriate \u003cspan\u003econtentType\u003c/span\u003e for your text fields. For example:\u003c/p\u003e\n\n\u003c/ul\u003e\u003c/ul\u003e\n  \n\u003cdiv\u003e\u003cpre\u003eTextField(\n  state = rememberTextFieldState(),\n  modifier = Modifier.semantics {\n    contentType = ContentType.Username \n  }\n)\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cul\u003e\u003cul\u003e\n  \n\u003cp\u003e2. \u003cb\u003eHandle saving credentials (for new or updated information):\u003c/b\u003e\n\u003c/p\u003e\u003cul\u003e\u003cul\u003e\n\u003cp\u003ea. Implicitly through navigation: If a user navigates away from the page, commit will be called automatically - no code needed!\u003c/p\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cp\u003eb. Explicitly through a button: To trigger saving credentials when the user submits a form (by tapping a button, for instance), retrieve the local \u003cspan\u003eAutofillManager\u003c/span\u003e and call \u003cspan\u003ecommit()\u003c/span\u003e.\u003c/p\u003e\n\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\u003c/ul\u003e\n  \n\u003cp\u003eFor full details on how to implement autofill in your application, see the \u003ca href=\"https://developer.android.com/develop/ui/compose/text/autofill\" target=\"_blank\"\u003eAutofill in Compose documentation\u003c/a\u003e.\u003c/p\u003e\n  \n\u003ch2\u003e\u003cspan\u003eText\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eWhen placing text inside a container, you can now use the \u003cspan\u003eautoSize\u003c/span\u003e parameter in \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/text/package-summary#BasicText%28androidx.compose.ui.text.AnnotatedString,androidx.compose.ui.Modifier,androidx.compose.ui.text.TextStyle,kotlin.Function1,androidx.compose.ui.text.style.TextOverflow,kotlin.Boolean,kotlin.Int,kotlin.Int,kotlin.collections.Map,androidx.compose.ui.graphics.ColorProducer,androidx.compose.foundation.text.TextAutoSize%29\" target=\"_blank\"\u003eBasicText\u003c/a\u003e\u003c/span\u003e to let the text size automatically adapt to the container size:\u003c/p\u003e\n  \n\u003cdiv\u003e\u003cpre\u003eBox {\n    BasicText(\n        text = \u003cspan\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e,\n        maxLines = \u003cspan\u003e1\u003c/span\u003e,\n        autoSize = TextAutoSize.StepBased()\n    )\n}\n\u003c/pre\u003e\u003c/div\u003e\n  \n\u003cp\u003e\u003cimg alt=\"moving image of Hello World text inside a container\" height=\"320\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgZNR_Vyv757sb71bD4yNLcLxY-JuRaDtK-1vE8Hbxfe-nasbslviahELwDC8V_wntwKtuqmFL-DafdB_B4Jq_lLPAooAiQZKiUtU7uV2qFZCCOEC2h4jTqbZc3lRNfQwuVVqAguCOqvou1jvElCv2n42tzULYE9YbhgvbczY7cephNgc42gSgtwauujKY/w320-h320/helloworldautosize.gif\" width=\"320\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can \u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/text/TextAutoSize#StepBased%28androidx.compose.ui.unit.TextUnit,androidx.compose.ui.unit.TextUnit,androidx.compose.ui.unit.TextUnit%29\" target=\"_blank\"\u003ecustomize\u003c/a\u003e sizing by setting a minimum and/or maximum font size and define a step size. Compose Foundation 1.8 contains this new \u003cspan\u003eBasicText\u003c/span\u003e overload, with Material 1.4 to follow soon with an updated \u003cspan\u003eText\u003c/span\u003e overload.\u003c/p\u003e\n\n\u003cp\u003eFurthermore, Compose 1.8 enhances text overflow handling with new \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextOverflow#StartEllipsis%28%29\" target=\"_blank\"\u003eTextOverflow.StartEllipsis\u003c/a\u003e\u003c/span\u003e or \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/TextOverflow#MiddleEllipsis%28%29\" target=\"_blank\"\u003eTextOverflow.MiddleEllipsis\u003c/a\u003e\u003c/span\u003e options, which allow you to display ellipses at the beginning or middle of a text line.\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003e\u003cspan\u003eval\u003c/span\u003e text = \u003cspan\u003e\u0026#34;This is a long text that will overflow\u0026#34;\u003c/span\u003e\nColumn(Modifier.width(\u003cspan\u003e200.d\u003c/span\u003ep)) {\n  Text(text, maxLines = \u003cspan\u003e1\u003c/span\u003e, overflow = TextOverflow.Ellipsis)\n  Text(text, maxLines = \u003cspan\u003e1\u003c/span\u003e, overflow = TextOverflow.StartEllipsis)\n  Text(text, maxLines = \u003cspan\u003e1\u003c/span\u003e, overflow = TextOverflow.MiddleEllipsis)\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg alt=\"text overflow handling displaying ellipses at the beginning and middle of a text line\" height=\"320\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgAkIAiXl2TxwgZg05VNMykDJ0Vhoz7E2wwwJQU9eTkgpg55mpewUwk3ritRCFxHySUv9hwJvrmo9pYhCS7WORyvMsxSyDbCm3EfhDCLbzui9Ij9MIPafonxpCcJXA4_hKpEyQ3c_jFcmMVQMEqO9xmDOUFCk3OoTTC4CH3U2oH50Tf6yw7S7tVfzAHq-w/w320-h320/ellipses.png\" width=\"320\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd finally, we\u0026#39;re expanding support for HTML formatting in \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/text/AnnotatedString\" target=\"_blank\"\u003eAnnotatedString\u003c/a\u003e\u003c/span\u003e, with the addition of bulleted lists:\u003c/p\u003e\n\n\u003cdiv\u003e\u003cpre\u003eText(\n  AnnotatedString.fromHtml(\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    \u0026lt;h1\u0026gt;HTML content\u0026lt;/h1\u0026gt;\n    \u0026lt;ul\u0026gt;\n      \u0026lt;li\u0026gt;Hello,\u0026lt;/li\u0026gt;\n      \u0026lt;li\u0026gt;World\u0026lt;/li\u0026gt;\n    \u0026lt;/ul\u0026gt;\n    \u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;.trimIndent()\u003c/span\u003e\n  )\n)\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cimg alt=\"a bulleted list of two items\" height=\"183\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgxnkQObPtHF0UueDsHLrt_SmGNvCjw7ldC6n3f5Kk0n2DMXU66CASVyTTpr53ub6fACSLRW9Ee3mlJZVpZ_WLTmPXnkJZDbX6VqjHhTW48QQXEkyOkoQ7IYbO2hX83EPWc5_WaZ6PHZoYxmhuhH1aLsZejvQBNTqso6dBLuaOPO9kYMV2VtH1JsCyryCc/w320-h183/htmlcontent.png\" width=\"320\"/\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\u003ch2\u003e\u003cspan\u003eVisibility tracking\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eCompose UI 1.8 introduces a new modifier: \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/layout/package-summary#%28androidx.compose.ui.Modifier%29.onLayoutRectChanged%28kotlin.Long,kotlin.Long,kotlin.Function1%29\" target=\"_blank\"\u003eonLayoutRectChanged\u003c/a\u003e\u003c/span\u003e. This API solves many use cases that the existing \u003cspan\u003eonGloballyPositioned\u003c/span\u003e modifier does; however, it does so with much less overhead. The onLayoutRectChanged modifier can debounce and throttle the callback per what the use case demands, which helps with performance when it’s added onto an item in \u003cspan\u003eLazyColumn\u003c/span\u003e or \u003cspan\u003eLazyRow\u003c/span\u003e.\n\n\u003c/p\u003e\u003cp\u003eThis new API unlocks features that depend on a composable\u0026#39;s visibility on screen. Compose 1.9 will add higher-level abstractions to this low-level API to simplify common use cases.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eAnimate composable bounds\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eLast year we introduced \u003ca href=\"https://developer.android.com/develop/ui/compose/animation/shared-elements\" target=\"_blank\"\u003eshared element transitions\u003c/a\u003e, which smoothly animate content in your apps. The 1.8 Animation module graduates \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/layout/LookaheadScope\" target=\"_blank\"\u003eLookaheadScope\u003c/a\u003e\u003c/span\u003e to stable, includes numerous performance and stability improvements, and includes a new modifier, \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/animation/package-summary#%28androidx.compose.ui.Modifier%29.animateBounds%28androidx.compose.ui.layout.LookaheadScope,androidx.compose.ui.Modifier,androidx.compose.animation.BoundsTransform,kotlin.Boolean%29\" target=\"_blank\"\u003eanimateBounds\u003c/a\u003e\u003c/span\u003e. When used inside a \u003cspan\u003eLookaheadScope\u003c/span\u003e, this modifier automatically animates its composable\u0026#39;s size and position on screen, when those change:\u003c/p\u003e\n\n\n\u003cdiv\u003e\u003cpre\u003eBox(\n  Modifier\n    .width(\u003cspan\u003eif\u003c/span\u003e(expanded) \u003cspan\u003e180.d\u003c/span\u003ep \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e110.d\u003c/span\u003ep)\n    .offset(x = \u003cspan\u003eif\u003c/span\u003e (expanded) \u003cspan\u003e0.d\u003c/span\u003ep \u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003e100.d\u003c/span\u003ep)\n    .animateBounds(lookaheadScope = \u003cspan\u003ethis\u003c/span\u003e@LookaheadScope)\n    .background(Color.LightGray, shape = RoundedCornerShape(\u003cspan\u003e12.d\u003c/span\u003ep))\n    .height(\u003cspan\u003e50.d\u003c/span\u003ep)\n) {\n  Text(\u003cspan\u003e\u0026#34;Layout Content\u0026#34;\u003c/span\u003e, Modifier.align(Alignment.Center))\n}\n\u003c/pre\u003e\u003c/div\u003e\n\n\u003cp\u003e\u003cimg alt=\"a moving image depicting animate composable bounds\" height=\"148\" id=\"imgCaption\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjtH61MlXo8OPA8eMBhe73K3jYRCvyl9joO3pivOF_7se7FpN440zoa1a-UzHRnSaYPP1in2bh0klS3k_jA89nksYO8MwBL0L0JGnJ8sAxdss7sU05BLlXpQtrulexkQrpsV1oIRQMu2_HdyEitgWNq5Fm-UumiyFFbDJwwKjyMABG_HKFz9XQeqGoB5qQ/w320-h148/animatebounds.gif\" width=\"320\"/\u003e\u003c/p\u003e\u003cbr/\u003e\n\n\u003ch2\u003e\u003cspan\u003eIncreased API stability\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eJetpack Compose has utilized \u003cspan\u003e@Experimental\u003c/span\u003e annotations to mark APIs that are liable to change across releases, for features that require more than a library\u0026#39;s alpha period to stabilize. We have heard your feedback that a number of features have been marked as experimental for some time with no changes, contributing to a sense of instability. We are actively looking at stabilizing existing experimental APIs—in the UI and Foundation modules, we have reduced the experimental APIs from 172 in the 1.7 release to 70 in the 1.8 release. We plan to continue this stabilization trend across modules in future releases.\u003c/p\u003e\n\n\u003ch3\u003e\u003cspan\u003eDeprecation of contextual flow rows and columns\u003c/span\u003e\u003c/h3\u003e\n\n\u003cp\u003eAs part of the work to reduce experimental annotations, we identified APIs added in recent releases that are less than optimal solutions for their use cases. This has led to the decision to deprecate the experimental \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#ContextualFlowRow%28kotlin.Int,androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.layout.Arrangement.Vertical,kotlin.Int,kotlin.Int,androidx.compose.foundation.layout.ContextualFlowRowOverflow,kotlin.Function2%29\" target=\"_blank\"\u003eContextualFlowRow\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#ContextualFlowColumn%28kotlin.Int,androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.layout.Arrangement.Horizontal,kotlin.Int,kotlin.Int,androidx.compose.foundation.layout.ContextualFlowColumnOverflow,kotlin.Function2%29\" target=\"_blank\"\u003eContextualFlowColumn\u003c/a\u003e\u003c/span\u003e APIs, added in Foundation 1.7. If you need the deprecated functionality, our recommendation for now is to copy over the implementation and adapt it as needed, while we work on a plan for future components that can cover these functionalities better.\u003c/p\u003e \n\n\u003cp\u003eThe related APIs \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#FlowRow%28androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.foundation.layout.Arrangement.Vertical,kotlin.Int,kotlin.Function1%29\" target=\"_blank\"\u003eFlowRow\u003c/a\u003e\u003c/span\u003e and \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#FlowColumn%28androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.foundation.layout.Arrangement.Horizontal,kotlin.Int,kotlin.Function1%29\" target=\"_blank\"\u003eFlowColumn\u003c/a\u003e\u003c/span\u003e are now stable; however, the new \u003cspan\u003eoverflow\u003c/span\u003e parameter that was added in the last release is now deprecated.\u003c/p\u003e\n\n\u003ch2\u003e\u003cspan\u003eImprovements and fixes for core features\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eIn response to developer feedback, we have shipped some particularly in-demand features and bug fixes in our core libraries:\u003c/p\u003e\n\u003cul\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://issuetracker.google.com/198122348\" target=\"_blank\"\u003eAccessibility checks in tests\u003c/a\u003e: Use \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/test/accessibility/package-summary.html#%28androidx.compose.ui.test.ComposeUiTest%29.enableAccessibilityChecks%28com.google.android.apps.common.testing.accessibility.framework.integrations.espresso.AccessibilityValidator%29\" target=\"_blank\"\u003eenableAccessibilityChecks\u003c/a\u003e\u003c/span\u003e in your Espresso tests to automatically test for common accessibility issues in your app.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://issuetracker.google.com/246909281\" target=\"_blank\"\u003eMake dialogs go edge to edge\u003c/a\u003e: When displayed full screen, dialogs now take into account the full size of the screen and will draw behind system bars.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e \n\u003cli\u003e\u003ca href=\"https://issuetracker.google.com/207325144\" target=\"_blank\"\u003eEasier testing of \u003cspan\u003eClickableText\u003c/span\u003e\u003c/a\u003e: Verify correct behavior when the user taps on a link with a new test assertion, \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/ui/test/SemanticsNodeInteraction#%28androidx.compose.ui.test.SemanticsNodeInteraction%29.performFirstLinkClick%28kotlin.Function1%29%5C\" target=\"_blank\"\u003eperformFirstLinkClick\u003c/a\u003e\u003c/span\u003e.\u003c/li\u003e\u003c/ul\u003e\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://issuetracker.google.com/234274772\" target=\"_blank\"\u003eAllow customizing overscroll\u003c/a\u003e: All lists now have new overloads, allowing you to pass an \u003cspan\u003e\u003ca href=\"https://developer.android.com/reference/kotlin/androidx/compose/foundation/OverscrollEffect\" target=\"_blank\"\u003eOverscrollEffect\u003c/a\u003e\u003c/span\u003e.\u003c/li\u003e\n\u003c/ul\u003e\u003c/ul\u003e\n\n\u003ch2\u003e\u003cspan\u003eGet started!\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eWe’re grateful for all of the bug reports and feature requests submitted to our \u003ca href=\"http://goo.gle/compose-feedback\" target=\"_blank\"\u003eissue tracker\u003c/a\u003e - they help us to improve Compose and build the APIs you need. Continue providing your feedback, and help us make Compose better.\u003c/p\u003e\n\n\u003cp\u003eHappy composing!\u003c/p\u003e \n\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
