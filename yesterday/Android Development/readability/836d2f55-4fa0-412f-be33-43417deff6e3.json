{
  "id": "836d2f55-4fa0-412f-be33-43417deff6e3",
  "title": "Why you should never use !! in Kotlin",
  "link": "https://proandroiddev.com/why-you-should-never-use-in-kotlin-86018f28b17d?source=rss----c72404660798---4",
  "description": "",
  "author": "Michal Ankiersztajn",
  "published": "Tue, 10 Dec 2024 15:06:53 GMT",
  "source": "https://proandroiddev.com/feed",
  "categories": [
    "kotlin-good-practises",
    "clean-code",
    "kotlindev",
    "kotlin",
    "kotlin-requirenotnull"
  ],
  "byline": "Michal Ankiersztajn",
  "length": 2405,
  "excerpt": "One of the most dangerous operators in Kotlin is the !!, which causes many unnecessary crashes and hard-to-solve bugs, find better alternatives to it!",
  "siteName": "ProAndroidDev",
  "favicon": "https://miro.medium.com/v2/resize:fill:256:256/1*A8VytPZQhvUf_MG6hm_Dlw.png",
  "text": "Write better and more robust codeOne of Kotlin’s best features is its handling of nullability, one of the most common sources of bugs in Java and other programming languages. However, in Kotlin, you’re able to break this contract by using !! , which results in NullPointerException without details on why and what happened.Understanding !! OperatorIn short, it forcibly asserts that a given type is non-null. If our value is null, we’ll get a NPE . Here’s an example:val name: String? = nullval length = name!!.length // Throws NPE(NullPointerException)So why is it such a big deal?It’s unreadable, but it’s hard to maintain if a new programmer looks at a code with !! , they’ll ask themselves, “What the hell is happening here??” and there won’t be an answer.It’s a hack that will work for short scripts but not production-ready apps.It’s an unnecessary risk. There are multiple better ways to handle nullability in Kotlin with ?. , ?: , smart casting and even requireNotNull (which gives a representative message).Alternatives to !!1. Safe operator ?.If it’s okay for the value to be still null or avoid doing work if it’s null, then use the ?. :val name: String? = nullval length = name?.length // Safe, returns null if name is null2. Elvis operator ?:If you need to do something differently in case of the value being null, feel free to use Elvis ?: :val name: String? = nullval length = name?.length ?: 0 // Returns 0 if name is null3. Smart castingOne of the simplest ways to reduce nullability is to avoid it all. You can limit your methods not to accept nullable values:fun doSomething(name: String) { // name will always be non-nullable ...}4. requireNotNull with descriptive messageIf you cannot reduce the nullability and the value must be present, you might think it’s a good idea to use !! , but in Kotlin, you should use requireNotNull in such case, this way you’ll be able to have a descriptive message in your crash report instead of an NPE without much details on what happened (especially if it’s nested in a lambda):val name: String? = nullval length = requireNotNull(name) { \"Name cannot be null\" }.lengthSummaryUsing !! is a bad practice; multiple alternatives cover every other possible case. Using it is a hack and a shortcut that will backfire while not saving you much time at the time of writing using it. You shouldn’t use it unless you're writing a short personal script.",
  "image": "https://miro.medium.com/v2/resize:fit:1100/1*klDozJoj1sHcADaKV5SR3w.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cdiv\u003e\u003ch2 id=\"c96e\"\u003eWrite better and more robust code\u003c/h2\u003e\u003cdiv\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://medium.com/@michalankiersztajn?source=post_page---byline--86018f28b17d--------------------------------\" rel=\"noopener follow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"Michal Ankiersztajn\" src=\"https://miro.medium.com/v2/resize:fill:88:88/1*wqtk16v3lv_e1Cu_dPyT2w.jpeg\" width=\"44\" height=\"44\" loading=\"lazy\" data-testid=\"authorPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003cdiv aria-hidden=\"false\"\u003e\u003ca href=\"https://proandroiddev.com/?source=post_page---byline--86018f28b17d--------------------------------\" rel=\"noopener  ugc nofollow\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cimg alt=\"ProAndroidDev\" src=\"https://miro.medium.com/v2/resize:fill:48:48/1*XVtdl45m8YaYrPI4buJ5yQ.png\" width=\"24\" height=\"24\" loading=\"lazy\" data-testid=\"publicationPhoto\"/\u003e\u003c/p\u003e\u003c/div\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003cp id=\"b064\"\u003eOne of Kotlin’s best features is its handling of nullability, one of the most common sources of bugs in Java and other programming languages. However, in Kotlin, you’re able to break this contract by using \u003ccode\u003e!!\u003c/code\u003e , which results in \u003ccode\u003eNullPointerException\u003c/code\u003e without details on why and what happened.\u003c/p\u003e\u003ch2 id=\"b268\"\u003eUnderstanding \u003ccode\u003e!!\u003c/code\u003e Operator\u003c/h2\u003e\u003cp id=\"28bd\"\u003eIn short, it forcibly asserts that a given type is non-null. If our value is null, we’ll get a \u003ccode\u003eNPE\u003c/code\u003e . Here’s an example:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"22e2\"\u003eval name: String? = null\u003cbr/\u003eval length = name!!.length // Throws NPE(NullPointerException)\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"56ec\"\u003eSo why is it such a big deal?\u003c/h2\u003e\u003col\u003e\u003cli id=\"aead\"\u003eIt’s unreadable, but it’s hard to maintain if a new programmer looks at a code with \u003ccode\u003e!!\u003c/code\u003e , they’ll ask themselves, “What the hell is happening here??” and there won’t be an answer.\u003c/li\u003e\u003cli id=\"26e3\"\u003eIt’s a hack that will work for short scripts but not production-ready apps.\u003c/li\u003e\u003cli id=\"1365\"\u003eIt’s an unnecessary risk. There are multiple better ways to handle nullability in Kotlin with \u003ccode\u003e?.\u003c/code\u003e , \u003ccode\u003e?:\u003c/code\u003e , smart casting and even \u003ccode\u003erequireNotNull\u003c/code\u003e (which gives a representative message).\u003c/li\u003e\u003c/ol\u003e\u003ch2 id=\"c91f\"\u003eAlternatives to \u003ccode\u003e!!\u003c/code\u003e\u003c/h2\u003e\u003ch2 id=\"7eaa\"\u003e1. Safe operator \u003ccode\u003e?.\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"478b\"\u003eIf it’s okay for the value to be still null or avoid doing work if it’s null, then use the \u003ccode\u003e?.\u003c/code\u003e :\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"74e7\"\u003eval name: String? = null\u003cbr/\u003eval length = name?.length // Safe, returns null if name is null\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"4d1c\"\u003e2. Elvis operator \u003ccode\u003e?:\u003c/code\u003e\u003c/h2\u003e\u003cp id=\"ff5b\"\u003eIf you need to do something differently in case of the value being null, feel free to use Elvis \u003ccode\u003e?:\u003c/code\u003e :\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"a4d7\"\u003eval name: String? = null\u003cbr/\u003eval length = name?.length ?: 0 // Returns 0 if name is null\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"c22b\"\u003e3. Smart casting\u003c/h2\u003e\u003cp id=\"d741\"\u003eOne of the simplest ways to reduce nullability is to avoid it all. You can limit your methods not to accept nullable values:\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"e31d\"\u003efun doSomething(name: String) {\u003cbr/\u003e    // name will always be non-nullable\u003cbr/\u003e    ...\u003cbr/\u003e}\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"588b\"\u003e4. \u003ccode\u003erequireNotNull\u003c/code\u003e with descriptive message\u003c/h2\u003e\u003cp id=\"5ff9\"\u003eIf you cannot reduce the nullability and the value must be present, you might think it’s a good idea to use \u003ccode\u003e!!\u003c/code\u003e , but in Kotlin, you should use \u003ccode\u003erequireNotNull\u003c/code\u003e in such case, this way you’ll be able to have a descriptive message in your crash report instead of an \u003ccode\u003eNPE\u003c/code\u003e without much details on what happened (especially if it’s nested in a lambda):\u003c/p\u003e\u003cpre\u003e\u003cspan id=\"895c\"\u003eval name: String? = null\u003cbr/\u003eval length = requireNotNull(name) { \u0026#34;Name cannot be null\u0026#34; }.length\u003c/span\u003e\u003c/pre\u003e\u003ch2 id=\"16ac\"\u003eSummary\u003c/h2\u003e\u003cp id=\"816f\"\u003eUsing \u003ccode\u003e!!\u003c/code\u003e is a bad practice; multiple alternatives cover every other possible case. Using it is a hack and a shortcut that will backfire while not saving you much time at the time of writing using it. You shouldn’t use it unless you\u0026#39;re writing a short personal script.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-12-09T07:01:44.405Z",
  "modifiedTime": null
}
