{
  "id": "f170bc59-c2ab-460f-bc6f-a3c087e21beb",
  "title": "CodeSOD: A Second Date",
  "link": "https://thedailywtf.com/articles/a-second-date",
  "description": "Ah, bad date handling. We've all seen it. We all know it. So when Lorenzo sent us this C# function, we almost ignored it: private string GetTimeStamp(DateTime param) { string retDate = param.Year.ToString() + \"-\"; if (param.Month \u003c 10) retDate = retDate + \"0\" + param.Month.ToString() + \"-\"; else retDate = retDate + param.Month.ToString() + \"-\"; if (param.Day \u003c 10) retDate = retDate + \"0\" + param.Day.ToString() + \" \"; else retDate = retDate + param.Day.ToString() + \" \"; if (param.Hour \u003c 10) retDate = retDate + \"0\" + param.Hour.ToString() + \":\"; else retDate = retDate + param.Hour.ToString() + \":\"; if (param.Minute \u003c 10) retDate = retDate + \"0\" + param.Minute.ToString() + \":\"; else retDate = retDate + param.Minute.ToString() + \":\"; if (param.Second \u003c 10) retDate = retDate + \"0\" + param.Second.ToString() + \".\"; else retDate = retDate + param.Second.ToString() + \".\"; if (param.Millisecond \u003c 10) retDate = retDate + \"0\" + param.Millisecond.ToString(); else retDate = retDate + param.Millisecond.ToString(); return retDate; } Most of this function isn't terribly exciting. We've seen this kind of bad code before, but even when we see a repeat like this, there are still special treats in it. Look at the section for handling milliseconds: if the number is less than 10, they pad it with a leading zero. Just the one, though. One leading zero should be enough for everybody. But that's not the thing that makes this code special. You see, there's another function worth looking at: private string FileTimeStamp(DateTime param) { string retDate = param.Year.ToString() + \"-\"; if (param.Month \u003c 10) retDate = retDate + \"0\" + param.Month.ToString() + \"-\"; else retDate = retDate + param.Month.ToString() + \"-\"; if (param.Day \u003c 10) retDate = retDate + \"0\" + param.Day.ToString() + \" \"; else retDate = retDate + param.Day.ToString() + \" \"; if (param.Hour \u003c 10) retDate = retDate + \"0\" + param.Hour.ToString() + \":\"; else retDate = retDate + param.Hour.ToString() + \":\"; if (param.Minute \u003c 10) retDate = retDate + \"0\" + param.Minute.ToString() + \":\"; else retDate = retDate + param.Minute.ToString() + \":\"; if (param.Second \u003c 10) retDate = retDate + \"0\" + param.Second.ToString() + \".\"; else retDate = retDate + param.Second.ToString() + \".\"; if (param.Millisecond \u003c 10) retDate = retDate + \"0\" + param.Millisecond.ToString(); else retDate = retDate + param.Millisecond.ToString(); return retDate; } Not only did they fail to learn the built-in functions for formatting dates, they forgot about the functions they wrote for formatting dates, and just wrote (or realistically, copy/pasted?) the same function twice. At least both versions have the same bug with milliseconds. I don't know if I could handle it if they were inconsistent about that. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Tue, 17 Jun 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 3322,
  "excerpt": "Ah, bad date handling. We've all seen it. We all know it. So when Lorenzo sent us this C# function, we almost ignored it: private string GetTimeStamp(DateTime param) { string retDate = param.Year.ToString() + \"-\"; if (param.Month \u003c 10) retDate = retDate + \"0\" + param.Month.ToString() + \"-\"; else retDate = retDate + param.Month.ToString() + \"-\"; if (param.Day \u003c 10) retDate = retDate + \"0\" + param.Day.ToString() + \" \"; else retDate = retDate + param.Day.ToString() + \" \"; if (param.Hour \u003c 10) retDate = retDate + \"0\" + param.Hour.ToString() + \":\"; else retDate = retDate + param.Hour.ToString() + \":\"; if (param.Minute \u003c 10) retDate = retDate + \"0\" + param.Minute.ToString() + \":\"; else retDate = retDate + param.Minute.ToString() + \":\"; if (param.Second \u003c 10) retDate = retDate + \"0\" + param.Second.ToString() + \".\"; else retDate = retDate + param.Second.ToString() + \".\"; if (param.Millisecond \u003c 10) retDate = retDate + \"0\" + param.Millisecond.ToString(); else retDate = retDate + param.Millisecond.ToString(); return retDate; }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-06-17 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Ah, bad date handling. We've all seen it. We all know it. So when Lorenzo sent us this C# function, we almost ignored it: private string GetTimeStamp(DateTime param) { string retDate = param.Year.ToString() + \"-\"; if (param.Month \u003c 10) retDate = retDate + \"0\" + param.Month.ToString() + \"-\"; else retDate = retDate + param.Month.ToString() + \"-\"; if (param.Day \u003c 10) retDate = retDate + \"0\" + param.Day.ToString() + \" \"; else retDate = retDate + param.Day.ToString() + \" \"; if (param.Hour \u003c 10) retDate = retDate + \"0\" + param.Hour.ToString() + \":\"; else retDate = retDate + param.Hour.ToString() + \":\"; if (param.Minute \u003c 10) retDate = retDate + \"0\" + param.Minute.ToString() + \":\"; else retDate = retDate + param.Minute.ToString() + \":\"; if (param.Second \u003c 10) retDate = retDate + \"0\" + param.Second.ToString() + \".\"; else retDate = retDate + param.Second.ToString() + \".\"; if (param.Millisecond \u003c 10) retDate = retDate + \"0\" + param.Millisecond.ToString(); else retDate = retDate + param.Millisecond.ToString(); return retDate; } Most of this function isn't terribly exciting. We've seen this kind of bad code before, but even when we see a repeat like this, there are still special treats in it. Look at the section for handling milliseconds: if the number is less than 10, they pad it with a leading zero. Just the one, though. One leading zero should be enough for everybody. But that's not the thing that makes this code special. You see, there's another function worth looking at: private string FileTimeStamp(DateTime param) { string retDate = param.Year.ToString() + \"-\"; if (param.Month \u003c 10) retDate = retDate + \"0\" + param.Month.ToString() + \"-\"; else retDate = retDate + param.Month.ToString() + \"-\"; if (param.Day \u003c 10) retDate = retDate + \"0\" + param.Day.ToString() + \" \"; else retDate = retDate + param.Day.ToString() + \" \"; if (param.Hour \u003c 10) retDate = retDate + \"0\" + param.Hour.ToString() + \":\"; else retDate = retDate + param.Hour.ToString() + \":\"; if (param.Minute \u003c 10) retDate = retDate + \"0\" + param.Minute.ToString() + \":\"; else retDate = retDate + param.Minute.ToString() + \":\"; if (param.Second \u003c 10) retDate = retDate + \"0\" + param.Second.ToString() + \".\"; else retDate = retDate + param.Second.ToString() + \".\"; if (param.Millisecond \u003c 10) retDate = retDate + \"0\" + param.Millisecond.ToString(); else retDate = retDate + param.Millisecond.ToString(); return retDate; } Not only did they fail to learn the built-in functions for formatting dates, they forgot about the functions they wrote for formatting dates, and just wrote (or realistically, copy/pasted?) the same function twice. At least both versions have the same bug with milliseconds. I don't know if I could handle it if they were inconsistent about that.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-06-17\"\u003e2025-06-17\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10938\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eAh, bad date handling. We\u0026#39;ve all seen it. We all know it. So when \u003cstrong\u003eLorenzo\u003c/strong\u003e sent us this C# function, we almost ignored it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e \u003cspan\u003eGetTimeStamp\u003c/span\u003e(\u003cspan\u003eDateTime param\u003c/span\u003e)\u003c/span\u003e\n{\n    \u003cspan\u003estring\u003c/span\u003e retDate = param.Year.ToString() + \u003cspan\u003e\u0026#34;-\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eif\u003c/span\u003e (param.Month \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Month.ToString() + \u003cspan\u003e\u0026#34;-\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Month.ToString() + \u003cspan\u003e\u0026#34;-\u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Day \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Day.ToString() + \u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Day.ToString() + \u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Hour \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Hour.ToString() + \u003cspan\u003e\u0026#34;:\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Hour.ToString() + \u003cspan\u003e\u0026#34;:\u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Minute \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Minute.ToString() + \u003cspan\u003e\u0026#34;:\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Minute.ToString() + \u003cspan\u003e\u0026#34;:\u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Second \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Second.ToString() + \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Second.ToString() + \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Millisecond \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Millisecond.ToString();\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Millisecond.ToString();\n\n    \u003cspan\u003ereturn\u003c/span\u003e retDate;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMost of this function isn\u0026#39;t terribly exciting. We\u0026#39;ve seen this kind of bad code before, but even when we see a repeat like this, there are still special treats in it. Look at the section for handling milliseconds: if the number is less than 10, they pad it with a leading zero. Just the one, though. One leading zero should be enough for everybody.\u003c/p\u003e\n\u003cp\u003eBut that\u0026#39;s not the thing that makes this code special. You see, there\u0026#39;s another function worth looking at:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estring\u003c/span\u003e \u003cspan\u003eFileTimeStamp\u003c/span\u003e(\u003cspan\u003eDateTime param\u003c/span\u003e)\u003c/span\u003e\n{\n    \u003cspan\u003estring\u003c/span\u003e retDate = param.Year.ToString() + \u003cspan\u003e\u0026#34;-\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eif\u003c/span\u003e (param.Month \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Month.ToString() + \u003cspan\u003e\u0026#34;-\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Month.ToString() + \u003cspan\u003e\u0026#34;-\u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Day \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Day.ToString() + \u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Day.ToString() + \u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Hour \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Hour.ToString() + \u003cspan\u003e\u0026#34;:\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Hour.ToString() + \u003cspan\u003e\u0026#34;:\u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Minute \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Minute.ToString() + \u003cspan\u003e\u0026#34;:\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Minute.ToString() + \u003cspan\u003e\u0026#34;:\u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Second \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Second.ToString() + \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Second.ToString() + \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e;\n\n    \u003cspan\u003eif\u003c/span\u003e (param.Millisecond \u0026lt; \u003cspan\u003e10\u003c/span\u003e)\n        retDate = retDate + \u003cspan\u003e\u0026#34;0\u0026#34;\u003c/span\u003e + param.Millisecond.ToString();\n    \u003cspan\u003eelse\u003c/span\u003e\n        retDate = retDate + param.Millisecond.ToString();\n\n    \u003cspan\u003ereturn\u003c/span\u003e retDate;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNot only did they fail to learn the built-in functions for formatting dates, they forgot about the functions they wrote for formatting dates, and just wrote (or realistically, copy/pasted?) the same function twice.\u003c/p\u003e\n\u003cp\u003eAt least both versions have the same bug with milliseconds. I don\u0026#39;t know if I could handle it if they were inconsistent about that.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-06-17T06:30:00Z",
  "modifiedTime": null
}
