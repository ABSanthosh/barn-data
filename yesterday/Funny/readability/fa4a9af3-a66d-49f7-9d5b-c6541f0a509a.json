{
  "id": "fa4a9af3-a66d-49f7-9d5b-c6541f0a509a",
  "title": "The Sales Target",
  "link": "https://thedailywtf.com/articles/the-sales-target",
  "description": "The end of the quarter was approaching, and dark clouds were gathering in the C-suite. While they were trying to be tight lipped about it, the scuttlebutt was flowing freely. Initech had missed major sales targets, and not just by a few percentage points, but by an order of magnitude. Heads were going to roll. Except there was a problem: the master report that had kicked off this tizzy didn't seem to align with the department specific reports. For the C-suite, it was that report that was the document of record; they had been using it for years, and had great confidence in it. But something was wrong. Enter Jeff. Jeff had been hired to migrate their reports to a new system, and while this particular report had not yet been migrated, Jeff at least had familiarity, and was capable of answering the question: \"what was going on?\" Were the sales really that far off, and was everyone going to lose their jobs? Or could it possibly be that this ancient and well used report might be wrong? The core of the query was basically a series of subqueries. Each subquery followed this basic pattern: SELECT SUM(complex_subquery_A) as subtotal FROM complex_subquery_B None of this was particularly readable, mind you, and it took some digging just to get the shape of the individual queries understood. But none of the individual queries were the problem; it was the way they got stitched together: SELECT SUM(subtotal) FROM (SELECT SUM(complex_subquery_A) as subtotal FROM complex_subquery_B UNION SELECT SUM(complex_subquery_C) as subtotal FROM complex_subquery_D UNION SELECT SUM(complex_subquery_E) as subtotal FROM complex_subquery_F); The full query was filled with a longer chain of unions, but it was easy to understand what went wrong, and demonstrate it to management. The UNION operator does a set union- which means if there are any duplicate values, only one gets included in the output. So if \"Department A\" and \"Department C\" both have $1M in sales for the quarter, the total will just be $1M- not the expected $2M. The correct version of the query would use UNION ALL, which preserves duplicates. What stunned Jeff was that this report was old enough to be basically an antique, and this was the kind of business that would burn an entire forest down to find out why a single invoice was off by $0.15. It was sheer luck that this hadn't caused an explosion before- or maybe in the past it had, and someone had just written it off as a \"minor glitch\"? Unfortunately for Jeff, because the report was so important it required a huge number of approvals before the \"UNION ALL\" change could be deployed, which meant he was called upon to manually run a \"test\" version of the report containing the fix every time a C-suite executive wanted one, until the end of the following quarter, when he could finally integrate the fix. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Tue, 04 Mar 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Feature Articles"
  ],
  "byline": "Remy Porter",
  "length": 3100,
  "excerpt": "The end of the quarter was approaching, and dark clouds were gathering in the C-suite. While they were trying to be tight lipped about it, the scuttlebutt was flowing freely. Initech had missed major sales targets, and not just by a few percentage points, but by an order of magnitude. Heads were going to roll.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Feature Articles on 2025-03-04 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. The end of the quarter was approaching, and dark clouds were gathering in the C-suite. While they were trying to be tight lipped about it, the scuttlebutt was flowing freely. Initech had missed major sales targets, and not just by a few percentage points, but by an order of magnitude. Heads were going to roll. Except there was a problem: the master report that had kicked off this tizzy didn't seem to align with the department specific reports. For the C-suite, it was that report that was the document of record; they had been using it for years, and had great confidence in it. But something was wrong. Enter Jeff. Jeff had been hired to migrate their reports to a new system, and while this particular report had not yet been migrated, Jeff at least had familiarity, and was capable of answering the question: \"what was going on?\" Were the sales really that far off, and was everyone going to lose their jobs? Or could it possibly be that this ancient and well used report might be wrong? The core of the query was basically a series of subqueries. Each subquery followed this basic pattern: SELECT SUM(complex_subquery_A) as subtotal FROM complex_subquery_B None of this was particularly readable, mind you, and it took some digging just to get the shape of the individual queries understood. But none of the individual queries were the problem; it was the way they got stitched together: SELECT SUM(subtotal) FROM (SELECT SUM(complex_subquery_A) as subtotal FROM complex_subquery_B UNION SELECT SUM(complex_subquery_C) as subtotal FROM complex_subquery_D UNION SELECT SUM(complex_subquery_E) as subtotal FROM complex_subquery_F); The full query was filled with a longer chain of unions, but it was easy to understand what went wrong, and demonstrate it to management. The UNION operator does a set union- which means if there are any duplicate values, only one gets included in the output. So if \"Department A\" and \"Department C\" both have $1M in sales for the quarter, the total will just be $1M- not the expected $2M. The correct version of the query would use UNION ALL, which preserves duplicates. What stunned Jeff was that this report was old enough to be basically an antique, and this was the kind of business that would burn an entire forest down to find out why a single invoice was off by $0.15. It was sheer luck that this hadn't caused an explosion before- or maybe in the past it had, and someone had just written it off as a \"minor glitch\"? Unfortunately for Jeff, because the report was so important it required a huge number of approvals before the \"UNION ALL\" change could be deployed, which meant he was called upon to manually run a \"test\" version of the report containing the fix every time a C-suite executive wanted one, until the end of the following quarter, when he could finally integrate the fix.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/feature-articles\"\u003eFeature Articles\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-03-04\"\u003e2025-03-04\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10861\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eThe end of the quarter was approaching, and dark clouds were gathering in the C-suite. While they were trying to be tight lipped about it, the scuttlebutt was flowing freely. Initech had missed major sales targets, and not just by a few percentage points, but by an order of magnitude.\u003c/p\u003e\n\u003cp\u003eHeads were going to roll.\u003c/p\u003e\n\u003cp\u003eExcept there was a problem: the master report that had kicked off this tizzy didn\u0026#39;t seem to align with the department specific reports. For the C-suite, it was that report that was the document of record; they had been using it for years, and had great confidence in it. But \u003cem\u003esomething\u003c/em\u003e was wrong.\u003c/p\u003e\n\u003cp\u003eEnter \u003cstrong\u003eJeff\u003c/strong\u003e. Jeff had been hired to migrate their reports to a new system, and while this particular report had not yet been migrated, Jeff at least had familiarity, and was capable of answering the question: \u0026#34;what was going on?\u0026#34; Were the sales really that far off, and was everyone going to lose their jobs? Or could it possibly be that this ancient and well used report might be wrong?\u003c/p\u003e\n\u003cp\u003eThe core of the query was basically a series of subqueries. Each subquery followed this basic pattern:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eSELECT\u003c/span\u003e \u003cspan\u003eSUM\u003c/span\u003e(complex_subquery_A) \u003cspan\u003eas\u003c/span\u003e subtotal \u003cspan\u003eFROM\u003c/span\u003e complex_subquery_B\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNone of this was particularly readable, mind you, and it took some digging just to get the shape of the individual queries understood. But none of the individual queries were the problem; it was the way they got stitched together:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eSELECT\u003c/span\u003e \u003cspan\u003eSUM\u003c/span\u003e(subtotal)\n\u003cspan\u003eFROM\u003c/span\u003e\n(\u003cspan\u003eSELECT\u003c/span\u003e \u003cspan\u003eSUM\u003c/span\u003e(complex_subquery_A) \u003cspan\u003eas\u003c/span\u003e subtotal \u003cspan\u003eFROM\u003c/span\u003e complex_subquery_B\n\u003cspan\u003eUNION\u003c/span\u003e\n\u003cspan\u003eSELECT\u003c/span\u003e \u003cspan\u003eSUM\u003c/span\u003e(complex_subquery_C) \u003cspan\u003eas\u003c/span\u003e subtotal \u003cspan\u003eFROM\u003c/span\u003e complex_subquery_D\n\u003cspan\u003eUNION\u003c/span\u003e\n\u003cspan\u003eSELECT\u003c/span\u003e \u003cspan\u003eSUM\u003c/span\u003e(complex_subquery_E) \u003cspan\u003eas\u003c/span\u003e subtotal \u003cspan\u003eFROM\u003c/span\u003e complex_subquery_F);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe full query was filled with a longer chain of unions, but it was easy to understand what went wrong, and demonstrate it to management.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eUNION\u003c/code\u003e operator does a set union- which means if there are any duplicate values, only one gets included in the output. So if \u0026#34;Department A\u0026#34; and \u0026#34;Department C\u0026#34; both have $1M in sales for the quarter, the total will just be $1M- not the expected $2M.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003ecorrect\u003c/em\u003e version of the query would use \u003ccode\u003eUNION ALL\u003c/code\u003e, which preserves duplicates.\u003c/p\u003e\n\u003cp\u003eWhat stunned Jeff was that this report was old enough to be basically an antique, and this was the kind of business that would burn an entire forest down to find out why a single invoice was off by $0.15. It was sheer luck that this hadn\u0026#39;t caused an explosion before- or maybe in the past it had, and someone had just written it off as a \u0026#34;minor glitch\u0026#34;?\u003c/p\u003e\n\u003cp\u003eUnfortunately for Jeff, because the report was \u003cem\u003eso important\u003c/em\u003e it required a huge number of approvals before the \u0026#34;UNION ALL\u0026#34; change could be deployed, which meant he was called upon to manually run a \u0026#34;test\u0026#34; version of the report containing the fix every time a C-suite executive wanted one, until the end of the \u003cem\u003efollowing\u003c/em\u003e quarter, when he could finally integrate the fix.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-03-04T06:30:00Z",
  "modifiedTime": null
}
