{
  "id": "5d4fbdd0-f4ce-478c-a941-f1c7c38b1f0e",
  "title": "CodeSOD: Gridding My Teeth",
  "link": "https://thedailywtf.com/articles/gridding-my-teeth",
  "description": "Dan's co-workers like passing around TDWTF stories, mostly because seeing code worse than what they're writing makes them feel less bad about how often they end up hacking things together. One day, a co-worker told Dan: \"Hey, I think I found something for that website with the bad code stories!\" Dan's heart sank. He didn't really want to shame any of his co-workers. Fortunately, the source-control history put the blame squarely on someone who didn't work there any more, so he felt better about submitting it. This is another ASP .Net page, and this one made heavy use of GridView elements. GridView controls applied the logic of UI controls to generating a table. They had a page which contained six of these controls, defined like this: \u003casp:GridView ID=\"gvTaskMonth1\" runat=\"server\" CssClass=\"leadsGridView\" AutoGenerateColumns=\"False\" OnRowDataBound=\"gvTaskMonth1_RowDataBound\"\u003e ... asp:GridView\u003e \u003casp:GridView ID=\"gvTaskMonth2\" runat=\"server\" CssClass=\"leadsGridView\" AutoGenerateColumns=\"False\" OnRowDataBound=\"gvTaskMonth1_RowDataBound\"\u003e ... asp:GridView\u003e \u003casp:GridView ID=\"gvTaskMonth3\" runat=\"server\" CssClass=\"leadsGridView\" AutoGenerateColumns=\"False\" OnRowDataBound=\"gvTaskMonth1_RowDataBound\"\u003e ... asp:GridView\u003e The purpose of this screen was to display a roadmap of coming tasks, broken up by how many months in the future they were. The first thing that leaps out to me is that they all use the same event handler for binding data to the table, which isn't in-and-of-itself a problem, but the naming of it is certainly a recipe for confusion. Now, to bind these controls to the data, there needed to be some code in the code-behind of this view which handled that. That's where the WTF lurks: /// /// Create a roadmap for the selected client /// private void CreateRoadmap() { for (int i = 1; i \u003c 7; i++) { switch (i) { case 1: if (gvTaskMonth1.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth1, DateTime.Parse(txtDatePeriod1.Text), \"1\"); } break; case 2: if (gvTaskMonth2.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth2, DateTime.Parse(txtDatePeriod2.Text), \"2\"); } break; case 3: if (gvTaskMonth3.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth3, DateTime.Parse(txtDatePeriod3.Text), \"3\"); } break; case 4: if (gvTaskMonth4.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth4, DateTime.Parse(txtDatePeriod4.Text), \"4\"); } break; case 5: if (gvTaskMonth5.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth5, DateTime.Parse(txtDatePeriod5.Text), \"5\"); } break; case 6: if (gvTaskMonth6.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth6, DateTime.Parse(txtDatePeriod6.Text), \"6\"); } break; } } } Ah, the good old fashioned loop-switch sequence anti-pattern. I understand the motivation: \"I want to do the same thing for six different controls, so I should use a loop to not repeat myself,\" but then couldn't quite figure out how to do that, so they just repeated themselves, but inside of a loop. The \"fix\" was to replace all of this with something more compact: private void CreateRoadmap() { InsertTasks(gvTaskMonth1, DateTime.Parse(txtDatePeriod1.Text), \"1\"); InsertTasks(gvTaskMonth2, DateTime.Parse(txtDatePeriod2.Text), \"2\"); InsertTasks(gvTaskMonth3, DateTime.Parse(txtDatePeriod3.Text), \"3\"); InsertTasks(gvTaskMonth4, DateTime.Parse(txtDatePeriod4.Text), \"4\"); InsertTasks(gvTaskMonth5, DateTime.Parse(txtDatePeriod5.Text), \"5\"); InsertTasks(gvTaskMonth6, DateTime.Parse(txtDatePeriod6.Text), \"6\"); } That said, I'd recommend not trying to parse date times inside of a text box inside of this method, but that's just me. Bubbling up the inevitable FormatException that this will generate is going to be a giant nuisance. It's likely that they've got a validator somewhere, so it's probably fine- I just don't like it. .comment { border: none; } [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "author": "Remy Porter",
  "published": "Thu, 12 Jun 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 4007,
  "excerpt": "Dan's co-workers like passing around TDWTF stories, mostly because seeing code worse than what they're writing makes them feel less bad about how often they end up hacking things together. One day, a co-worker told Dan: \"Hey, I think I found something for that website with the bad code stories!\"",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Dan's co-workers like passing around TDWTF stories, mostly because seeing code worse than what they're writing makes them feel less bad about how often they end up hacking things together. One day, a co-worker told Dan: \"Hey, I think I found something for that website with the bad code stories!\" Dan's heart sank. He didn't really want to shame any of his co-workers. Fortunately, the source-control history put the blame squarely on someone who didn't work there any more, so he felt better about submitting it. This is another ASP .Net page, and this one made heavy use of GridView elements. GridView controls applied the logic of UI controls to generating a table. They had a page which contained six of these controls, defined like this: \u003casp:GridView ID=\"gvTaskMonth1\" runat=\"server\" CssClass=\"leadsGridView\" AutoGenerateColumns=\"False\" OnRowDataBound=\"gvTaskMonth1_RowDataBound\"\u003e ... \u003c/asp:GridView\u003e \u003casp:GridView ID=\"gvTaskMonth2\" runat=\"server\" CssClass=\"leadsGridView\" AutoGenerateColumns=\"False\" OnRowDataBound=\"gvTaskMonth1_RowDataBound\"\u003e ... \u003c/asp:GridView\u003e \u003casp:GridView ID=\"gvTaskMonth3\" runat=\"server\" CssClass=\"leadsGridView\" AutoGenerateColumns=\"False\" OnRowDataBound=\"gvTaskMonth1_RowDataBound\"\u003e ... \u003c/asp:GridView\u003e The purpose of this screen was to display a roadmap of coming tasks, broken up by how many months in the future they were. The first thing that leaps out to me is that they all use the same event handler for binding data to the table, which isn't in-and-of-itself a problem, but the naming of it is certainly a recipe for confusion. Now, to bind these controls to the data, there needed to be some code in the code-behind of this view which handled that. That's where the WTF lurks: /// \u003csummary\u003e /// Create a roadmap for the selected client /// \u003c/summary\u003e private void CreateRoadmap() { for (int i = 1; i \u003c 7; i++) { switch (i) { case 1: if (gvTaskMonth1.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth1, DateTime.Parse(txtDatePeriod1.Text), \"1\"); } break; case 2: if (gvTaskMonth2.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth2, DateTime.Parse(txtDatePeriod2.Text), \"2\"); } break; case 3: if (gvTaskMonth3.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth3, DateTime.Parse(txtDatePeriod3.Text), \"3\"); } break; case 4: if (gvTaskMonth4.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth4, DateTime.Parse(txtDatePeriod4.Text), \"4\"); } break; case 5: if (gvTaskMonth5.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth5, DateTime.Parse(txtDatePeriod5.Text), \"5\"); } break; case 6: if (gvTaskMonth6.Rows.Count \u003e 0) { InsertTasks(gvTaskMonth6, DateTime.Parse(txtDatePeriod6.Text), \"6\"); } break; } } } Ah, the good old fashioned loop-switch sequence anti-pattern. I understand the motivation: \"I want to do the same thing for six different controls, so I should use a loop to not repeat myself,\" but then couldn't quite figure out how to do that, so they just repeated themselves, but inside of a loop. The \"fix\" was to replace all of this with something more compact: private void CreateRoadmap() { InsertTasks(gvTaskMonth1, DateTime.Parse(txtDatePeriod1.Text), \"1\"); InsertTasks(gvTaskMonth2, DateTime.Parse(txtDatePeriod2.Text), \"2\"); InsertTasks(gvTaskMonth3, DateTime.Parse(txtDatePeriod3.Text), \"3\"); InsertTasks(gvTaskMonth4, DateTime.Parse(txtDatePeriod4.Text), \"4\"); InsertTasks(gvTaskMonth5, DateTime.Parse(txtDatePeriod5.Text), \"5\"); InsertTasks(gvTaskMonth6, DateTime.Parse(txtDatePeriod6.Text), \"6\"); } That said, I'd recommend not trying to parse date times inside of a text box inside of this method, but that's just me. Bubbling up the inevitable FormatException that this will generate is going to be a giant nuisance. It's likely that they've got a validator somewhere, so it's probably fine- I just don't like it. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eDan\u003c/strong\u003e\u0026#39;s co-workers like passing around TDWTF stories, mostly because seeing code worse than what they\u0026#39;re writing makes them feel less bad about how often they end up hacking things together.\u003c/p\u003e\n\u003cp\u003eOne day, a co-worker told Dan: \u0026#34;Hey, I think I found something for that website with the bad code stories!\u0026#34;\u003c/p\u003e\n\u003cp\u003eDan\u0026#39;s heart sank. He didn\u0026#39;t really want to shame any of his co-workers. Fortunately, the source-control history put the blame squarely on someone who didn\u0026#39;t work there any more, so he felt better about submitting it.\u003c/p\u003e\n\u003cp\u003eThis is another ASP .Net page, and this one made heavy use of \u003ccode\u003eGridView\u003c/code\u003e elements. \u003ccode\u003eGridView\u003c/code\u003e controls applied the logic of UI controls to generating a table. They had a page which contained six of these controls, defined like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003cspan\u003easp:GridView\u003c/span\u003e \u003cspan\u003eID\u003c/span\u003e=\u003cspan\u003e\u0026#34;gvTaskMonth1\u0026#34;\u003c/span\u003e \u003cspan\u003erunat\u003c/span\u003e=\u003cspan\u003e\u0026#34;server\u0026#34;\u003c/span\u003e \u003cspan\u003eCssClass\u003c/span\u003e=\u003cspan\u003e\u0026#34;leadsGridView\u0026#34;\u003c/span\u003e \u003cspan\u003eAutoGenerateColumns\u003c/span\u003e=\u003cspan\u003e\u0026#34;False\u0026#34;\u003c/span\u003e \u003cspan\u003eOnRowDataBound\u003c/span\u003e=\u003cspan\u003e\u0026#34;gvTaskMonth1_RowDataBound\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e ... \u003cspan\u003e\u0026lt;/\u003cspan\u003easp:GridView\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;\u003cspan\u003easp:GridView\u003c/span\u003e \u003cspan\u003eID\u003c/span\u003e=\u003cspan\u003e\u0026#34;gvTaskMonth2\u0026#34;\u003c/span\u003e \u003cspan\u003erunat\u003c/span\u003e=\u003cspan\u003e\u0026#34;server\u0026#34;\u003c/span\u003e \u003cspan\u003eCssClass\u003c/span\u003e=\u003cspan\u003e\u0026#34;leadsGridView\u0026#34;\u003c/span\u003e \u003cspan\u003eAutoGenerateColumns\u003c/span\u003e=\u003cspan\u003e\u0026#34;False\u0026#34;\u003c/span\u003e \u003cspan\u003eOnRowDataBound\u003c/span\u003e=\u003cspan\u003e\u0026#34;gvTaskMonth1_RowDataBound\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e ... \u003cspan\u003e\u0026lt;/\u003cspan\u003easp:GridView\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\n\u003cspan\u003e\u0026lt;\u003cspan\u003easp:GridView\u003c/span\u003e \u003cspan\u003eID\u003c/span\u003e=\u003cspan\u003e\u0026#34;gvTaskMonth3\u0026#34;\u003c/span\u003e \u003cspan\u003erunat\u003c/span\u003e=\u003cspan\u003e\u0026#34;server\u0026#34;\u003c/span\u003e \u003cspan\u003eCssClass\u003c/span\u003e=\u003cspan\u003e\u0026#34;leadsGridView\u0026#34;\u003c/span\u003e \u003cspan\u003eAutoGenerateColumns\u003c/span\u003e=\u003cspan\u003e\u0026#34;False\u0026#34;\u003c/span\u003e \u003cspan\u003eOnRowDataBound\u003c/span\u003e=\u003cspan\u003e\u0026#34;gvTaskMonth1_RowDataBound\u0026#34;\u003c/span\u003e\u0026gt;\u003c/span\u003e ... \u003cspan\u003e\u0026lt;/\u003cspan\u003easp:GridView\u003c/span\u003e\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe purpose of this screen was to display a roadmap of coming tasks, broken up by how many months in the future they were. The first thing that leaps out to me is that they all use the same event handler for binding data to the table, which isn\u0026#39;t in-and-of-itself a problem, but the \u003cem\u003enaming\u003c/em\u003e of it is certainly a recipe for confusion.\u003c/p\u003e\n\u003cp\u003eNow, to bind these controls to the data, there needed to be some code in the code-behind of this view which handled that. That\u0026#39;s where the WTF lurks:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;summary\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e Create a roadmap for the selected client\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e///\u003c/span\u003e \u003cspan\u003e\u0026lt;/summary\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\n\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003eCreateRoadmap\u003c/span\u003e()\u003c/span\u003e\n{\n\t\u003cspan\u003efor\u003c/span\u003e (\u003cspan\u003eint\u003c/span\u003e i = \u003cspan\u003e1\u003c/span\u003e; i \u0026lt; \u003cspan\u003e7\u003c/span\u003e; i++)\n\t{\n\t\t\u003cspan\u003eswitch\u003c/span\u003e (i)\n\t\t{\n\t\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e:\n\t\t\t\t\u003cspan\u003eif\u003c/span\u003e (gvTaskMonth1.Rows.Count \u0026gt; \u003cspan\u003e0\u003c/span\u003e)\n\t\t\t\t{\n\t\t\t\t\tInsertTasks(gvTaskMonth1, DateTime.Parse(txtDatePeriod1.Text), \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e);\n\t\t\t\t}\n\t\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e2\u003c/span\u003e:\n\t\t\t\t\u003cspan\u003eif\u003c/span\u003e (gvTaskMonth2.Rows.Count \u0026gt; \u003cspan\u003e0\u003c/span\u003e)\n\t\t\t\t{\n\t\t\t\t\tInsertTasks(gvTaskMonth2, DateTime.Parse(txtDatePeriod2.Text), \u003cspan\u003e\u0026#34;2\u0026#34;\u003c/span\u003e);\n\t\t\t\t}\n\t\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e3\u003c/span\u003e:\n\t\t\t\t\u003cspan\u003eif\u003c/span\u003e (gvTaskMonth3.Rows.Count \u0026gt; \u003cspan\u003e0\u003c/span\u003e)\n\t\t\t\t{\n\t\t\t\t\tInsertTasks(gvTaskMonth3, DateTime.Parse(txtDatePeriod3.Text), \u003cspan\u003e\u0026#34;3\u0026#34;\u003c/span\u003e);\n\t\t\t\t}\n\t\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e4\u003c/span\u003e:\n\t\t\t\t\u003cspan\u003eif\u003c/span\u003e (gvTaskMonth4.Rows.Count \u0026gt; \u003cspan\u003e0\u003c/span\u003e)\n\t\t\t\t{\n\t\t\t\t\tInsertTasks(gvTaskMonth4, DateTime.Parse(txtDatePeriod4.Text), \u003cspan\u003e\u0026#34;4\u0026#34;\u003c/span\u003e);\n\t\t\t\t}\n\t\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e5\u003c/span\u003e:\n\t\t\t\t\u003cspan\u003eif\u003c/span\u003e (gvTaskMonth5.Rows.Count \u0026gt; \u003cspan\u003e0\u003c/span\u003e)\n\t\t\t\t{\n\t\t\t\t\tInsertTasks(gvTaskMonth5, DateTime.Parse(txtDatePeriod5.Text), \u003cspan\u003e\u0026#34;5\u0026#34;\u003c/span\u003e);\n\t\t\t\t}\n\t\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\t\u003cspan\u003ecase\u003c/span\u003e \u003cspan\u003e6\u003c/span\u003e:\n\t\t\t\t\u003cspan\u003eif\u003c/span\u003e (gvTaskMonth6.Rows.Count \u0026gt; \u003cspan\u003e0\u003c/span\u003e)\n\t\t\t\t{\n\t\t\t\t\tInsertTasks(gvTaskMonth6, DateTime.Parse(txtDatePeriod6.Text), \u003cspan\u003e\u0026#34;6\u0026#34;\u003c/span\u003e);\n\t\t\t\t}\n\t\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t}\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAh, the good old fashioned \u003ca href=\"https://en.wikipedia.org/wiki/Loop-switch_sequence\"\u003eloop-switch sequence\u003c/a\u003e anti-pattern. I understand the motivation: \u0026#34;I want to do the same thing for six different controls, so I should use a loop to not repeat myself,\u0026#34; but then couldn\u0026#39;t quite figure out how to do that, so they just repeated themselves, but inside of a loop.\u003c/p\u003e\n\u003cp\u003eThe \u0026#34;fix\u0026#34; was to replace all of this with something more compact:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\t\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003eCreateRoadmap\u003c/span\u003e()\u003c/span\u003e\n\t{\n\t\tInsertTasks(gvTaskMonth1, DateTime.Parse(txtDatePeriod1.Text), \u003cspan\u003e\u0026#34;1\u0026#34;\u003c/span\u003e);\n\t\tInsertTasks(gvTaskMonth2, DateTime.Parse(txtDatePeriod2.Text), \u003cspan\u003e\u0026#34;2\u0026#34;\u003c/span\u003e);\n\t\tInsertTasks(gvTaskMonth3, DateTime.Parse(txtDatePeriod3.Text), \u003cspan\u003e\u0026#34;3\u0026#34;\u003c/span\u003e);\n\t\tInsertTasks(gvTaskMonth4, DateTime.Parse(txtDatePeriod4.Text), \u003cspan\u003e\u0026#34;4\u0026#34;\u003c/span\u003e);\n\t\tInsertTasks(gvTaskMonth5, DateTime.Parse(txtDatePeriod5.Text), \u003cspan\u003e\u0026#34;5\u0026#34;\u003c/span\u003e);\n\t\tInsertTasks(gvTaskMonth6, DateTime.Parse(txtDatePeriod6.Text), \u003cspan\u003e\u0026#34;6\u0026#34;\u003c/span\u003e); \n\t}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat said, \u003cem\u003eI\u0026#39;d\u003c/em\u003e recommend not trying to parse date times inside of a text box inside of this method, but that\u0026#39;s just me. Bubbling up the inevitable \u003ccode\u003eFormatException\u003c/code\u003e that this will generate is going to be a giant nuisance. It\u0026#39;s likely that they\u0026#39;ve got a validator somewhere, so it\u0026#39;s probably fine- I just don\u0026#39;t like it.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep the plebs out of prod. Restrict NuGet feed privileges with ProGet. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-06-12T06:30:00Z",
  "modifiedTime": null
}
