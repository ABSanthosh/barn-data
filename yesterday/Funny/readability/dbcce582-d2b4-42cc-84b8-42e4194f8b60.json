{
  "id": "dbcce582-d2b4-42cc-84b8-42e4194f8b60",
  "title": "CodeSOD: Uniquely Expressed",
  "link": "https://thedailywtf.com/articles/uniquely-expressed",
  "description": "Most of us, when generating a UUID, will reach for a library to do it. Even a UUIDv4, which is just a random number, presents challenges: doing randomness correctly is hard, and certain bits within the UUID are reserved for metadata about what kind of UUID we're generating. But Gretchen's co-worker didn't reach for a library. What they did reach for was… regular expressions? function uuidv4() { return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) { var r = (Math.random() * 16) | 0, v = c == \"x\" ? r : (r \u0026 0x3) | 0x8; return v.toString(16); }); } At a glance, this appears to be a riff on common answers on Stack Overflow. I won't pick on this code for not using crypto.randomUUID, the browser function for doing this, as that function only started showing up in browsers in 2021. But using a format string and filling it with random data instead of generating your 128-bits as a Uint8Buffer is less forgivable. This solution to generating UUIDs makes a common mistake: confusing the representation of the data with the reality of the data. A UUID is 128-bits of numerical data, with a few bits reserved for identification (annoyingly, how many bits are reserved depends on which format we're talking about). We render it as the dash-separated-hex-string, but it is not a dash-separated-hex-string. In the end, this code does work. Awkwardly and inefficiently and with a high probability of collisions due to bad randomness, but it works. I just hate it. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Mon, 24 Feb 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1890,
  "excerpt": "Most of us, when generating a UUID, will reach for a library to do it. Even a UUIDv4, which is just a random number, presents challenges: doing randomness correctly is hard, and certain bits within the UUID are reserved for metadata about what kind of UUID we're generating. But Gretchen's co-worker didn't reach for a library. What they did reach for was… regular expressions?",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-02-24 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Most of us, when generating a UUID, will reach for a library to do it. Even a UUIDv4, which is just a random number, presents challenges: doing randomness correctly is hard, and certain bits within the UUID are reserved for metadata about what kind of UUID we're generating. But Gretchen's co-worker didn't reach for a library. What they did reach for was… regular expressions? function uuidv4() { return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) { var r = (Math.random() * 16) | 0, v = c == \"x\" ? r : (r \u0026 0x3) | 0x8; return v.toString(16); }); } At a glance, this appears to be a riff on common answers on Stack Overflow. I won't pick on this code for not using crypto.randomUUID, the browser function for doing this, as that function only started showing up in browsers in 2021. But using a format string and filling it with random data instead of generating your 128-bits as a Uint8Buffer is less forgivable. This solution to generating UUIDs makes a common mistake: confusing the representation of the data with the reality of the data. A UUID is 128-bits of numerical data, with a few bits reserved for identification (annoyingly, how many bits are reserved depends on which format we're talking about). We render it as the dash-separated-hex-string, but it is not a dash-separated-hex-string. In the end, this code does work. Awkwardly and inefficiently and with a high probability of collisions due to bad randomness, but it works. I just hate it. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-02-24\"\u003e2025-02-24\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10855\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eMost of us, when generating a UUID, will reach for a library to do it. Even a UUIDv4, which is just a random number, presents challenges: doing randomness correctly is hard, and certain bits within the UUID are reserved for metadata about what kind of UUID we\u0026#39;re generating.\u003c/p\u003e\n\u003cp\u003eBut \u003cstrong\u003eGretchen\u003c/strong\u003e\u0026#39;s co-worker didn\u0026#39;t reach for a library. What they did reach for was… regular expressions?\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003euuidv4\u003c/span\u003e(\u003cspan\u003e\u003c/span\u003e) {\n  \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#34;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\u0026#34;\u003c/span\u003e.\u003cspan\u003ereplace\u003c/span\u003e(\u003cspan\u003e/[xy]/g\u003c/span\u003e, \u003cspan\u003efunction\u003c/span\u003e (\u003cspan\u003ec\u003c/span\u003e) {\n    \u003cspan\u003evar\u003c/span\u003e r = (\u003cspan\u003eMath\u003c/span\u003e.\u003cspan\u003erandom\u003c/span\u003e() * \u003cspan\u003e16\u003c/span\u003e) | \u003cspan\u003e0\u003c/span\u003e,\n      v = c == \u003cspan\u003e\u0026#34;x\u0026#34;\u003c/span\u003e ? r : (r \u0026amp; \u003cspan\u003e0x3\u003c/span\u003e) | \u003cspan\u003e0x8\u003c/span\u003e;\n    \u003cspan\u003ereturn\u003c/span\u003e v.\u003cspan\u003etoString\u003c/span\u003e(\u003cspan\u003e16\u003c/span\u003e);\n  });\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAt a glance, this appears to be a riff on common answers on \u003ca href=\"https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\"\u003eStack Overflow\u003c/a\u003e. I won\u0026#39;t pick on this code for not using \u003ccode\u003ecrypto.randomUUID\u003c/code\u003e, the browser function for doing this, as that function only started showing up in browsers in 2021. But using a format string and filling it with random data instead of generating your 128-bits as a \u003ccode\u003eUint8Buffer\u003c/code\u003e is less forgivable.\u003c/p\u003e\n\u003cp\u003eThis solution to generating UUIDs makes a common mistake: confusing the \u003cem\u003erepresentation of the data\u003c/em\u003e with the \u003cem\u003ereality of the data\u003c/em\u003e. A UUID is 128-bits of numerical data, with a few bits reserved for identification (annoyingly, how \u003cem\u003emany\u003c/em\u003e bits are reserved depends on which format we\u0026#39;re talking about). We render it as the dash-separated-hex-string, but it is \u003cem\u003enot\u003c/em\u003e a dash-separated-hex-string.\u003c/p\u003e\n\u003cp\u003eIn the end, this code \u003cem\u003edoes\u003c/em\u003e work. Awkwardly and inefficiently and with a high probability of collisions due to bad randomness, but it \u003cem\u003eworks\u003c/em\u003e. I just hate it.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-02-24T06:30:00Z",
  "modifiedTime": null
}
