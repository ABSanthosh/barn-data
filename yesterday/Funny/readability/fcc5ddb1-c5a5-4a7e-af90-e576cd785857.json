{
  "id": "fcc5ddb1-c5a5-4a7e-af90-e576cd785857",
  "title": "CodeSOD: Crossly Joined",
  "link": "https://thedailywtf.com/articles/crossly-joined",
  "description": "Antonio's team hired some very expensive contractors and consultants to help them build a Java based application. These contractors were very demure, very mindful, about how using ORMs could kill performance. So they implemented a tool that would let them know any time the Hibernate query generator attempted to perform a cross join. public class DB2390Dialect extends org.hibernate.dialect.DB2390Dialect { private Logger logger = LoggerFactory.getLogger(DB2390Dialect.class); @Override public String getCrossJoinSeparator() { try { Exception e = new Exception(); throw e; } catch (Exception xe) { logger.warn(\"cross join \", xe.getMessage()); } return \", \"; } } I'm going to call this one a near miss. I understand what they were trying to do. Hibernate uses a set of \"dialect\"s to convert logical operations in a query to literal syntax- as you can see here, this function turns a cross join operation into a \", \". What they wanted to do was detect where in the code this happened and log a message. They wanted the message to contain a stack trace, and that's why they threw an exception. Unfortunately, they logged, not the stack trace, but the message- a message which they're not actually setting. Thus, the logger would only ever log \"cross join \", but with no information to track down when or why it happened. That said, the standard way in Java of getting the stack trace skips the exception throwing: StackTraceElement[] st = new Throwable().getStackTrace(). Of course, that would have made them do some actual logging logic, and not just \"I dunno, drop the message in the output?\" The only remaining question is how much did this feature cost? Since these were \"expert consultants\", we can ballpark it as somewhere between \"a few thousand dollars\" to \"many thousands of dollars\".. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "author": "Remy Porter",
  "published": "Thu, 09 Jan 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2190,
  "excerpt": "Antonio's team hired some very expensive contractors and consultants to help them build a Java based application. These contractors were very demure, very mindful, about how using ORMs could kill performance. So they implemented a tool that would let them know any time the Hibernate query generator attempted to perform a cross join.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-01-09 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Antonio's team hired some very expensive contractors and consultants to help them build a Java based application. These contractors were very demure, very mindful, about how using ORMs could kill performance. So they implemented a tool that would let them know any time the Hibernate query generator attempted to perform a cross join. public class DB2390Dialect extends org.hibernate.dialect.DB2390Dialect { private Logger logger = LoggerFactory.getLogger(DB2390Dialect.class); @Override public String getCrossJoinSeparator() { try { Exception e = new Exception(); throw e; } catch (Exception xe) { logger.warn(\"cross join \", xe.getMessage()); } return \", \"; } } I'm going to call this one a near miss. I understand what they were trying to do. Hibernate uses a set of \"dialect\"s to convert logical operations in a query to literal syntax- as you can see here, this function turns a cross join operation into a \", \". What they wanted to do was detect where in the code this happened and log a message. They wanted the message to contain a stack trace, and that's why they threw an exception. Unfortunately, they logged, not the stack trace, but the message- a message which they're not actually setting. Thus, the logger would only ever log \"cross join \", but with no information to track down when or why it happened. That said, the standard way in Java of getting the stack trace skips the exception throwing: StackTraceElement[] st = new Throwable().getStackTrace(). Of course, that would have made them do some actual logging logic, and not just \"I dunno, drop the message in the output?\" The only remaining question is how much did this feature cost? Since these were \"expert consultants\", we can ballpark it as somewhere between \"a few thousand dollars\" to \"many thousands of dollars\".. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-01-09\"\u003e2025-01-09\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10823\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eAntonio\u003c/strong\u003e\u0026#39;s team hired some very expensive contractors and consultants to help them build a Java based application. These contractors were very demure, very mindful, about how using ORMs could kill performance.\u003c/p\u003e\n\u003cp\u003eSo they implemented a tool that would let them know any time the Hibernate query generator attempted to perform a cross join.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eDB2390Dialect\u003c/span\u003e \u003cspan\u003eextends\u003c/span\u003e \u003cspan\u003eorg\u003c/span\u003e.hibernate.dialect.DB2390Dialect\n{\n \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eLogger\u003c/span\u003e \u003cspan\u003elogger\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e LoggerFactory.getLogger(DB2390Dialect.class);\n\n \u003cspan\u003e@Override\u003c/span\u003e\n \u003cspan\u003epublic\u003c/span\u003e String \u003cspan\u003egetCrossJoinSeparator\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\n {\n  \u003cspan\u003etry\u003c/span\u003e\n  {\n   \u003cspan\u003eException\u003c/span\u003e \u003cspan\u003ee\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eException\u003c/span\u003e();\n   \u003cspan\u003ethrow\u003c/span\u003e e;\n  }\n  \u003cspan\u003ecatch\u003c/span\u003e (Exception xe)\n  {\n   logger.warn(\u003cspan\u003e\u0026#34;cross join \u0026#34;\u003c/span\u003e, xe.getMessage());\n  }\n  \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e\u0026#34;, \u0026#34;\u003c/span\u003e;\n }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI\u0026#39;m going to call this one a near miss. I understand what they were trying to do.\u003c/p\u003e\n\u003cp\u003eHibernate uses a set of \u0026#34;dialect\u0026#34;s to convert logical operations in a query to literal syntax- as you can see here, this function turns a cross join operation into a \u0026#34;, \u0026#34;.\u003c/p\u003e\n\u003cp\u003eWhat they wanted to do was detect where in the code this happened and log a message. They \u003cem\u003ewanted\u003c/em\u003e the message to contain a stack trace, and that\u0026#39;s why they threw an exception. Unfortunately, they logged, not the stack trace, but the message- a message which they\u0026#39;re not actually setting. Thus, the logger would only ever log \u0026#34;cross join \u0026#34;, but with no information to track down when or why it happened.\u003c/p\u003e\n\u003cp\u003eThat said, the standard way in Java of getting the stack trace skips the exception throwing: \u003ccode\u003eStackTraceElement[] st = new Throwable().getStackTrace()\u003c/code\u003e. Of course, that would have made them do some actual logging logic, and not just \u0026#34;I dunno, drop the message in the output?\u0026#34;\u003c/p\u003e\n\u003cp\u003eThe only remaining question is how much did this feature cost? Since these were \u0026#34;expert consultants\u0026#34;, we can ballpark it as somewhere between \u0026#34;a few thousand dollars\u0026#34; to \u0026#34;many thousands of dollars\u0026#34;..\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tProGet’s got you covered with security and access controls on your NuGet feeds. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=GotYouCoveredFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-01-09T06:30:00Z",
  "modifiedTime": null
}
