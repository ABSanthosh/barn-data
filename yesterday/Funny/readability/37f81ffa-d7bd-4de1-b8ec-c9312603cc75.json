{
  "id": "37f81ffa-d7bd-4de1-b8ec-c9312603cc75",
  "title": "Tracking Time",
  "link": "https://thedailywtf.com/articles/tracking-time",
  "description": "Mihail was excited when, many years ago, he was invited to work for a local company. At the time, he was in college, so getting real-world experience (and a real-world paycheck) sounded great. It was a small company, with only a handful of developers. The excitement didn't last long, as Mihail quickly learned what the project was: parsing commit messages in source control and generating a report of how many hours a developer worked on any given task. It was a timesheet tracking application, but built on commit messages. \"This… seems like a bad idea?\" Mihail told his supervisor. \"Couldn't we just do this in a timesheet tool? Or heck, a spreadsheet? Accounting would probably prefer a spreadsheet.\" \"If we did that, people could edit their numbers,\" the supervisor responded. Apparently they hadn't heard about amending commits. Or just… lying in the commit message? Now, Mihail wasn't allowed to start working. A design document needed to be crafted first. So several senior developers went into a room, and hammered out the design. Three weeks later, they had a basic structure of five classes: components, which were made up of milestones, which were made up of tickets, which had contributors, which made commits. It wasn't a complicated design, so it was mystifying as to why it took three weeks to write. More problematic- the project had only budgeted a month, so Mihail was left with a single week for implementation. One frantic week later, Mihail handed in his work. It was insufficiently tested, but more or less worked according to the design. He had to take a week off of work for exams, and when he returned from those exams, the senior devs had some good news and bad news. The good news: they were happy with his work! The bad news: during the week the design had been completely changed and needed to be rewritten. So the rewrite began, with a new design, and once again, too little time left to do the work. Tests went out the window first, but \"basic coding practices\" quickly followed. The second version was less reliable and usable than the first. Then the Big Boss sent down an edict: this whole system should get its data from their bug tracker, which had SQL integration options. Once again, it was all thrown away, and a new version began. Mihail started writing queries for the database, starting by joining the three key tables to produce the data they wanted. Then he read the new version of the design doc, published while he was working, and joined the five tables together they'd need. After combining the six tables the design doc called for, Mihail was starting to think the code he was writing was bad. The workflow that the design called for offered it's own challenges. After writing the query which joined eight tables together, with a nest of subqueries and summaries, the query itself weighed in at 2,000kb. And that was just for one report- there were a dozen reports that were part of the project, all similarly messy, and all subject to rapidly changing design documents. The queries were all hard-coded directly in a Python script, and the design was explicit: don't slow down developers by using prepared statements, just use string concatenation (aka SQL injection) because we can trust our inputs! This Python script would run its reporting queries, and then dump the results into tables in the application's database. Then a web UI would pick up the data from the tables and show it to the user. The only thing we can say about the results is that the web UI looked nice. The underlying horror that was the code was hidden. With the project finally done, it was time to show it off to upper management. Mihail's supervisor starts demoing their system, and after a minute, the Big Boss pipes up: \"Why do we need this?\" \"Oh, well, it's a more flexible-\" \"No. Why do we need this?\" \"Time tracking is fundamental to our billing-\" \"Right, but why do we need this? You know what, never mind. Do whatever you want with this, just make sure that all the data ends up in an Excel spreadsheet at the end of the month. That's what we send to accounting.\" All in all, Mihail spent six months working on this project. Once complete, it was never used by anyone. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Tue, 24 Dec 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Feature Articles"
  ],
  "byline": "Remy Porter",
  "length": 4368,
  "excerpt": "Mihail was excited when, many years ago, he was invited to work for a local company. At the time, he was in college, so getting real-world experience (and a real-world paycheck) sounded great. It was a small company, with only a handful of developers. The excitement didn't last long, as Mihail quickly learned what the project was: parsing commit messages in source control and generating a report of how many hours a developer worked on any given task. It was a timesheet tracking application, but built on commit messages.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Mihail was excited when, many years ago, he was invited to work for a local company. At the time, he was in college, so getting real-world experience (and a real-world paycheck) sounded great. It was a small company, with only a handful of developers. The excitement didn't last long, as Mihail quickly learned what the project was: parsing commit messages in source control and generating a report of how many hours a developer worked on any given task. It was a timesheet tracking application, but built on commit messages. \"This… seems like a bad idea?\" Mihail told his supervisor. \"Couldn't we just do this in a timesheet tool? Or heck, a spreadsheet? Accounting would probably prefer a spreadsheet.\" \"If we did that, people could edit their numbers,\" the supervisor responded. Apparently they hadn't heard about amending commits. Or just… lying in the commit message? Now, Mihail wasn't allowed to start working. A design document needed to be crafted first. So several senior developers went into a room, and hammered out the design. Three weeks later, they had a basic structure of five classes: components, which were made up of milestones, which were made up of tickets, which had contributors, which made commits. It wasn't a complicated design, so it was mystifying as to why it took three weeks to write. More problematic- the project had only budgeted a month, so Mihail was left with a single week for implementation. One frantic week later, Mihail handed in his work. It was insufficiently tested, but more or less worked according to the design. He had to take a week off of work for exams, and when he returned from those exams, the senior devs had some good news and bad news. The good news: they were happy with his work! The bad news: during the week the design had been completely changed and needed to be rewritten. So the rewrite began, with a new design, and once again, too little time left to do the work. Tests went out the window first, but \"basic coding practices\" quickly followed. The second version was less reliable and usable than the first. Then the Big Boss sent down an edict: this whole system should get its data from their bug tracker, which had SQL integration options. Once again, it was all thrown away, and a new version began. Mihail started writing queries for the database, starting by joining the three key tables to produce the data they wanted. Then he read the new version of the design doc, published while he was working, and joined the five tables together they'd need. After combining the six tables the design doc called for, Mihail was starting to think the code he was writing was bad. The workflow that the design called for offered it's own challenges. After writing the query which joined eight tables together, with a nest of subqueries and summaries, the query itself weighed in at 2,000kb. And that was just for one report- there were a dozen reports that were part of the project, all similarly messy, and all subject to rapidly changing design documents. The queries were all hard-coded directly in a Python script, and the design was explicit: don't slow down developers by using prepared statements, just use string concatenation (aka SQL injection) because we can trust our inputs! This Python script would run its reporting queries, and then dump the results into tables in the application's database. Then a web UI would pick up the data from the tables and show it to the user. The only thing we can say about the results is that the web UI looked nice. The underlying horror that was the code was hidden. With the project finally done, it was time to show it off to upper management. Mihail's supervisor starts demoing their system, and after a minute, the Big Boss pipes up: \"Why do we need this?\" \"Oh, well, it's a more flexible-\" \"No. Why do we need this?\" \"Time tracking is fundamental to our billing-\" \"Right, but why do we need this? You know what, never mind. Do whatever you want with this, just make sure that all the data ends up in an Excel spreadsheet at the end of the month. That's what we send to accounting.\" All in all, Mihail spent six months working on this project. Once complete, it was never used by anyone. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eMihail\u003c/strong\u003e was excited when, many years ago, he was invited to work for a local company. At the time, he was in college, so getting real-world experience (and a real-world paycheck) sounded great. It was a small company, with only a handful of developers.\u003c/p\u003e\n\u003cp\u003eThe excitement didn\u0026#39;t last long, as Mihail quickly learned what the project was: parsing commit messages in source control and generating a report of how many hours a developer worked on any given task. It was a timesheet tracking application, but built on commit messages.\u003c/p\u003e\n\u003cp\u003e\u0026#34;This… seems like a bad idea?\u0026#34; Mihail told his supervisor. \u0026#34;Couldn\u0026#39;t we just do this in a timesheet tool? Or heck, a spreadsheet? Accounting would probably prefer a spreadsheet.\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u0026#34;If we did that, people could edit their numbers,\u0026#34; the supervisor responded.\u003c/p\u003e\n\u003cp\u003eApparently they hadn\u0026#39;t heard about amending commits. Or just… lying in the commit message?\u003c/p\u003e\n\u003cp\u003eNow, Mihail wasn\u0026#39;t allowed to start working. A design document needed to be crafted first. So several senior developers went into a room, and hammered out the design. Three weeks later, they had a basic structure of five classes: components, which were made up of milestones, which were made up of tickets, which had contributors, which made commits. It wasn\u0026#39;t a complicated design, so it was mystifying as to why it took three weeks to write. More problematic- the project had only budgeted a month, so Mihail was left with a single week for implementation.\u003c/p\u003e\n\u003cp\u003eOne frantic week later, Mihail handed in his work. It was insufficiently tested, but more or less worked according to the design. He had to take a week off of work for exams, and when he returned from those exams, the senior devs had some good news and bad news. The good news: they were happy with his work! The bad news: during the week the design had been completely changed and needed to be rewritten.\u003c/p\u003e\n\u003cp\u003eSo the rewrite began, with a new design, and once again, too little time left to do the work. Tests went out the window first, but \u0026#34;basic coding practices\u0026#34; quickly followed. The second version was less reliable and usable than the first. Then the Big Boss sent down an edict: this whole system should get its data from their bug tracker, which had SQL integration options.\u003c/p\u003e\n\u003cp\u003eOnce again, it was all thrown away, and a new version began. Mihail started writing queries for the database, starting by joining the three key tables to produce the data they wanted. Then he read the new version of the design doc, published while he was working, and joined the five tables together they\u0026#39;d need. After combining the six tables the design doc called for, Mihail was starting to think the code he was writing was bad.\u003c/p\u003e\n\u003cp\u003eThe workflow that the design called for offered it\u0026#39;s own challenges. After writing the query which joined eight tables together, with a nest of subqueries and summaries, the query itself weighed in at 2,000kb. And that was just for one report- there were a dozen reports that were part of the project, all similarly messy, and all subject to rapidly changing design documents. The queries were all hard-coded directly in a Python script, and the design was explicit: don\u0026#39;t slow down developers by using prepared statements, just use string concatenation (aka SQL injection) because we can trust our inputs! This Python script would run its reporting queries, and then dump the results into tables in the application\u0026#39;s database. Then a web UI would pick up the data from the tables and show it to the user.\u003c/p\u003e\n\u003cp\u003eThe only thing we can say about the results is that the web UI looked nice. The underlying horror that was the code was hidden.\u003c/p\u003e\n\u003cp\u003eWith the project \u003cem\u003efinally\u003c/em\u003e done, it was time to show it off to upper management. Mihail\u0026#39;s supervisor starts demoing their system, and after a minute, the Big Boss pipes up: \u0026#34;Why do we need this?\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u0026#34;Oh, well, it\u0026#39;s a more flexible-\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u0026#34;No. Why do we need this?\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u0026#34;Time tracking is fundamental to our billing-\u0026#34;\u003c/p\u003e\n\u003cp\u003e\u0026#34;Right, but why do we need \u003cem\u003ethis\u003c/em\u003e? You know what, never mind. Do whatever you want with this, just make sure that all the data ends up in an Excel spreadsheet at the end of the month. That\u0026#39;s what we send to accounting.\u0026#34;\u003c/p\u003e\n\u003cp\u003eAll in all, Mihail spent six months working on this project. Once complete, it was never used by anyone.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-12-24T06:30:00Z",
  "modifiedTime": null
}
