{
  "id": "3584de8d-aea6-440e-b273-f2ce8eebd774",
  "title": "CodeSOD: A Trying Block",
  "link": "https://thedailywtf.com/articles/a-trying-block",
  "description": "Mark sends us a very simple Java function which has the job of parsing an integer from a string. Now, you might say, \"But Java has a built in for that, Integer.parseInt,\" and have I got good news for you: they actually used it. It's just everything else they did wrong. private int makeInteger(String s) { int i=0; try { Integer.parseInt(s); } catch (NumberFormatException e) { i=0; return i; } i=Integer.parseInt(s); return i; } This function is really the story of variable i, the most useless variable ever. It's doing its best, but there's just nothing for it to do here. We start by setting i to zero. Then we attempt to parse the integer, and do nothing with the result. If it fails, we set i to zero again, just for fun, and then return i. Why not just return 0? Because then what would poor i get to do? Assuming we didn't throw an exception, we parse the input again, storing its result in i, and then return i. Again, we treat i like a child who wants to help paint the living room: we give it a dry brush and a section of wall we're not planning to paint and let it go to town. Nothing it does matters, but it feels like a participant. Now, Mark went ahead and refactored this function basically right away, into a more terse and clear version: private int makeInteger(String s) { try { return Integer.parseInt(s); } catch (NumberFormatException e) { return 0; } } He went about his development work, and then a few days later came across makeInteger reverted back to its original version. For a moment, he wanted to be mad at someone for reverting his change, but no- this was in an entirely different class. With that information, Mark went and did a search for makeInteger in the code, only to find 39 copies of this function, with minor variations. There are an unknown number of copies of the function where the name is slightly different than makeInteger, but a search for Integer.parseInt implies that there may be many more. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "author": "Remy Porter",
  "published": "Thu, 22 May 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2532,
  "excerpt": "Mark sends us a very simple Java function which has the job of parsing an integer from a string. Now, you might say, \"But Java has a built in for that, Integer.parseInt,\" and have I got good news for you: they actually used it. It's just everything else they did wrong. private int makeInteger(String s) { int i=0; try { Integer.parseInt(s); } catch (NumberFormatException e) { i=0; return i; } i=Integer.parseInt(s); return i; }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-05-22 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Mark sends us a very simple Java function which has the job of parsing an integer from a string. Now, you might say, \"But Java has a built in for that, Integer.parseInt,\" and have I got good news for you: they actually used it. It's just everything else they did wrong. private int makeInteger(String s) { int i=0; try { Integer.parseInt(s); } catch (NumberFormatException e) { i=0; return i; } i=Integer.parseInt(s); return i; } This function is really the story of variable i, the most useless variable ever. It's doing its best, but there's just nothing for it to do here. We start by setting i to zero. Then we attempt to parse the integer, and do nothing with the result. If it fails, we set i to zero again, just for fun, and then return i. Why not just return 0? Because then what would poor i get to do? Assuming we didn't throw an exception, we parse the input again, storing its result in i, and then return i. Again, we treat i like a child who wants to help paint the living room: we give it a dry brush and a section of wall we're not planning to paint and let it go to town. Nothing it does matters, but it feels like a participant. Now, Mark went ahead and refactored this function basically right away, into a more terse and clear version: private int makeInteger(String s) { try { return Integer.parseInt(s); } catch (NumberFormatException e) { return 0; } } He went about his development work, and then a few days later came across makeInteger reverted back to its original version. For a moment, he wanted to be mad at someone for reverting his change, but no- this was in an entirely different class. With that information, Mark went and did a search for makeInteger in the code, only to find 39 copies of this function, with minor variations. There are an unknown number of copies of the function where the name is slightly different than makeInteger, but a search for Integer.parseInt implies that there may be many more. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-05-22\"\u003e2025-05-22\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10920\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eMark\u003c/strong\u003e sends us a very simple Java function which has the job of parsing an integer from a string. Now, you might say, \u0026#34;But Java has a built in for that, \u003ccode\u003eInteger.parseInt\u003c/code\u003e,\u0026#34; and have I got good news for you: \u003cem\u003ethey actually used it\u003c/em\u003e. It\u0026#39;s just everything else they did wrong.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003emakeInteger\u003c/span\u003e\u003cspan\u003e(String s)\u003c/span\u003e\n{\n  \u003cspan\u003eint\u003c/span\u003e i=\u003cspan\u003e0\u003c/span\u003e;\n  \u003cspan\u003etry\u003c/span\u003e\n  {\n    Integer.parseInt(s);\n  }\n  \u003cspan\u003ecatch\u003c/span\u003e (NumberFormatException e)\n  {\n    i=\u003cspan\u003e0\u003c/span\u003e;\n    \u003cspan\u003ereturn\u003c/span\u003e i;\n  }\n  i=Integer.parseInt(s);\n  \u003cspan\u003ereturn\u003c/span\u003e i;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis function is really the story of variable \u003ccode\u003ei\u003c/code\u003e, the most useless variable ever. It\u0026#39;s doing its best, but there\u0026#39;s just nothing for it to do here.\u003c/p\u003e\n\u003cp\u003eWe start by setting \u003ccode\u003ei\u003c/code\u003e to zero. Then we attempt to parse the integer, and do nothing with the result. If it fails, we set \u003ccode\u003ei\u003c/code\u003e to zero again, just for fun, and then return \u003ccode\u003ei\u003c/code\u003e. Why not just \u003ccode\u003ereturn 0\u003c/code\u003e? \u003cem\u003eBecause then what would poor \u003ccode\u003ei\u003c/code\u003e get to do?\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAssuming we didn\u0026#39;t throw an exception, we parse the input again, storing its result in \u003ccode\u003ei\u003c/code\u003e, and then \u003ccode\u003ereturn i\u003c/code\u003e. Again, we treat \u003ccode\u003ei\u003c/code\u003e like a child who wants to help paint the living room: we give it a dry brush and a section of wall we\u0026#39;re not planning to paint and let it go to town. Nothing it does matters, but it feels like a participant.\u003c/p\u003e\n\u003cp\u003eNow, Mark went ahead and refactored this function basically right away, into a more terse and clear version:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e \u003cspan\u003emakeInteger\u003c/span\u003e\u003cspan\u003e(String s)\u003c/span\u003e\n{\n  \u003cspan\u003etry\u003c/span\u003e\n  {\n    \u003cspan\u003ereturn\u003c/span\u003e Integer.parseInt(s);\n  }\n  \u003cspan\u003ecatch\u003c/span\u003e (NumberFormatException e)\n  {\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e0\u003c/span\u003e;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHe went about his development work, and then a few days later came across \u003ccode\u003emakeInteger\u003c/code\u003e reverted back to its original version. For a moment, he wanted to be mad at \u003cem\u003esomeone\u003c/em\u003e for reverting his change, but no- this was in an entirely different class. With that information, Mark went and did a search for \u003ccode\u003emakeInteger\u003c/code\u003e in the code, only to find 39 copies of this function, with minor variations.\u003c/p\u003e\n\u003cp\u003eThere are an unknown number of copies of the function where the name is slightly different than \u003ccode\u003emakeInteger\u003c/code\u003e, but a search for \u003ccode\u003eInteger.parseInt\u003c/code\u003e implies that there may be many more.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.\u003ca href=\"https://inedo.com/proget?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-05-22T06:30:00Z",
  "modifiedTime": null
}
