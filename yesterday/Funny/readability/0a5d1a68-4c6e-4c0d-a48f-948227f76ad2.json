{
  "id": "0a5d1a68-4c6e-4c0d-a48f-948227f76ad2",
  "title": "Representative Line: Generate JSON",
  "link": "https://thedailywtf.com/articles/generate-json",
  "description": "Today's anonymous submission is a delightfully simple line of JavaScript which really is an archetype of a representative line. $json = \"{\"; Now, I know you're thinking, \"I see a '$' sigil, this must be PHP or maybe Perl!\" No, this is JavaScript. And as you might be gathering from the code, this is the first line in a long block that constructs JSON through string concatenation. And yes, JavaScript has built in functions for this, which work better than this. While it's possible that they need to generate custom JSON to support a misbehaving parser on the other side, that's it's own WTF- and it isn't the case here. The developers responsible simply didn't know how to handle JSON in JavaScript. Do you know what else they couldn't understand? Source control and collaboration tools, so all of the JavaScript files were named things like david.js and lisa.js- each developer got their own JS file to work on, so they didn't conflict with anyone else. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Tue, 07 Jan 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Representative Line"
  ],
  "byline": "Remy Porter",
  "length": 1227,
  "excerpt": "Today's anonymous submission is a delightfully simple line of JavaScript which really is an archetype of a representative line. $json = \"{\";",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Representative Line on 2025-01-07 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Today's anonymous submission is a delightfully simple line of JavaScript which really is an archetype of a representative line. $json = \"{\"; Now, I know you're thinking, \"I see a '$' sigil, this must be PHP or maybe Perl!\" No, this is JavaScript. And as you might be gathering from the code, this is the first line in a long block that constructs JSON through string concatenation. And yes, JavaScript has built in functions for this, which work better than this. While it's possible that they need to generate custom JSON to support a misbehaving parser on the other side, that's it's own WTF- and it isn't the case here. The developers responsible simply didn't know how to handle JSON in JavaScript. Do you know what else they couldn't understand? Source control and collaboration tools, so all of the JavaScript files were named things like david.js and lisa.js- each developer got their own JS file to work on, so they didn't conflict with anyone else.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/representative-line\"\u003eRepresentative Line\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-01-07\"\u003e2025-01-07\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10821\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eToday\u0026#39;s anonymous submission is a delightfully simple line of JavaScript which really is an archetype of a representative line.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$json = \u003cspan\u003e\u0026#34;{\u0026#34;\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow, I know you\u0026#39;re thinking, \u0026#34;I see a \u0026#39;$\u0026#39; sigil, this must be PHP or maybe Perl!\u0026#34; No, this is JavaScript. And as you might be gathering from the code, this is the first line in a long block that constructs JSON through string concatenation.\u003c/p\u003e\n\u003cp\u003eAnd yes, JavaScript has built in functions for this, which work better than this. While it\u0026#39;s \u003cem\u003epossible\u003c/em\u003e that they need to generate custom JSON to support a misbehaving parser on the other side, that\u0026#39;s it\u0026#39;s own WTF- and it isn\u0026#39;t the case here. The developers responsible simply didn\u0026#39;t know how to handle JSON in JavaScript.\u003c/p\u003e\n\u003cp\u003eDo you know what else they couldn\u0026#39;t understand? Source control and collaboration tools, so all of the JavaScript files were named things like \u003ccode\u003edavid.js\u003c/code\u003e and \u003ccode\u003elisa.js\u003c/code\u003e- each developer got their own JS file to work on, so they didn\u0026#39;t conflict with anyone else.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-01-07T06:30:00Z",
  "modifiedTime": null
}
