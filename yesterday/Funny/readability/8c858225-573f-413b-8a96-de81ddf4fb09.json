{
  "id": "8c858225-573f-413b-8a96-de81ddf4fb09",
  "title": "CodeSOD: Trophy Bug Hunting",
  "link": "https://thedailywtf.com/articles/trophy-bug-hunting",
  "description": "Quality control is an important business function for any company. When your company is shipping devices with safety concerns, it's even more important. In some industries, a quality control failure is bound to be national headlines. When the quality control software tool stopped working, everyone panicked. At which point, GRH stepped in. Now, we've discussed this software and GRH before, but as a quick recap, it was: written by someone who is no longer employed with the company, as part of a project managed by someone who is no longer at the company, requested by an executive who is also no longer at the company. There are no documented requirements, very few tests, and a lot of \"don't touch this, it works\". And this was a quality control tool. So we're already in bad shape. It also had been unmaintained for years- a few of the QC engineers had tried to take it over, but weren't programmers, and it had essentially languished. Specifically, it was a quality control tool used to oversee the process by about 50 QC engineers. It automates a series of checks by wrapping around third party software tools, in a complex network of \"this device gets tested by generating output in program A, feeding it to program B, then combining the streams and sending them to the device, but this device gets tested using programs D, E, and F.\" The automated process using the tool has a shockingly low error rate. Without the tool, doing things manually, the error rate climbs to 1-2%. So unless everyone wanted to see terrifying headlines in the Boston Globe about their devices failing, GRH needed to fix the problem. GRH was given the code, in this case a a zip file on a shared drive. It did not, at the start, even build. After fighting with the project configuration to resolve that, GRH was free to start digging in deeper. Public Sub connect2PCdb() Dim cPath As String = Path.Combine(strConverterPath, \"c.pfx\") Dim strCN As String ' JES 12/6/2016: Modify the following line if MySQL server is changed to a different server. A dump file will be needed to re-create teh database in the new server. strCN = \"metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string='server=REDACTED;user id=REDACTED;database=REDACTED;sslmode=Required;certificatepassword=REDACTED;certificatefile=REDACTED\\c.pfx;password=REDACTED'\" strCN = Regex.Replace(strCN, \"certificatefile=.*?pfx\", \"certificatefile=\" \u0026 cPath) pcContext = New Entities(strCN) strCN = \"metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string='server=REDACTED;user id=REDACTED;persistsecurityinfo=True;database=REDACTED;password=REDACTED'\" strCN = Regex.Match(strCN, \".*'(.*)'\").Groups(1).Value Try strCN = pcContext.Database.Connection.ConnectionString cnPC.ConnectionString = \"server=REDACTED;user id=REDACTED;password=REDACTED;database=REDACTED;\" cnPC.Open() Catch ex As Exception End Try End Sub This is the code which connects to the backend database. The code is in the category of more of a trainwreck than a WTF. It's got a wonderful mix of nonsense in here, though- a hard-coded connection string which includes plaintext passwords, regex munging to modify the string, then hard-coding a string again, only to use regexes to extract a subset of the string. A subset we don't use. And then, for a bonus, the whole thing has a misleading comment- \"modify the following line\" if we move to a different server? We have to modify several lines, because we keep copy/pasting the string around. Oh, and of course, it uses the pattern of \"open a database connection at application startup, and just hold that connection forever,\" which is a great way to strain your database as your userbase grows. The good news about the hard-coded password is that it got GRH access to the database. With that, it was easy to see what the problem was: the database was full. The system was overly aggressive with logging, the logs went to database tables, the server was an antique with a rather small hard drive, and the database wasn't configured to even use all of that space anyway. Cleaning up old logs got the engineers working again. GRH kept working on the code, though, cleaning it up and modernizing it. Updating to latest version of the .NET Core framework modified the data access to be far simpler, and got rid of the need for hard-coded connection strings. Still, GRH left the method looking like this: Public Sub connect2PCdb() 'Dim cPath As String = Path.Combine(strConverterPath, \"c.pfx\") 'Dim strCN As String ' JES 12/6/2016: Modify the following line if MySQL server is changed to a different server. A dump file will be needed to re-create teh database in the new server. 'strCN = \"metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string='server=REDACTED;user id=REDACTED;database=REDACTED;sslmode=Required;certificatepassword=REDACTED;certificatefile=REDACTED\\c.pfx;password=REDACTED'\" 'strCN = Regex.Replace(strCN, \"certificatefile=.*?pfx\", \"certificatefile=\" \u0026 cPath) 'pcContext = New Entities(strCN) 'strCN = \"metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string='server=REDACTED;user id=REDACTED;persistsecurityinfo=True;database=REDACTED;password=REDACTED'\" 'strCN = Regex.Match(strCN, \".*'(.*)'\").Groups(1).Value 'GRH 2021-01-15. Connection information moved to App.Config 'GRH 2021-08-13. EF Core no longer supports App.Config method pcContext = New PcEntities Try ' GRH 2021-08-21 This variable no longer exists in .NET 5 'strCN = pcContext.Database.Connection.ConnectionString ' GRH 2021-08-20 Keeping the connection open causes EF Core to not work 'cnPC.ConnectionString = \"server=REDACTED;user id=REDACTED;password=REDACTED;database=REDACTED;SslMode=none\" 'cnPC.Open() Catch ex As Exception End Try End Sub It's now a one-line method, with most of the code commented out, instead of removed. Why on Earth is the method left like that? GRH explains: Yes, I could delete the function as it is functionally dead, but I keep it for the same reasons that a hunter mounts a deer's head above her mantle. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "author": "Remy Porter",
  "published": "Mon, 28 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 6787,
  "excerpt": "Quality control is an important business function for any company. When your company is shipping devices with safety concerns, it's even more important. In some industries, a quality control failure is bound to be national headlines. When the quality control software tool stopped working, everyone panicked. At which point, GRH stepped in.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "Quality control is an important business function for any company. When your company is shipping devices with safety concerns, it's even more important. In some industries, a quality control failure is bound to be national headlines. When the quality control software tool stopped working, everyone panicked. At which point, GRH stepped in. Now, we've discussed this software and GRH before, but as a quick recap, it was: written by someone who is no longer employed with the company, as part of a project managed by someone who is no longer at the company, requested by an executive who is also no longer at the company. There are no documented requirements, very few tests, and a lot of \"don't touch this, it works\". And this was a quality control tool. So we're already in bad shape. It also had been unmaintained for years- a few of the QC engineers had tried to take it over, but weren't programmers, and it had essentially languished. Specifically, it was a quality control tool used to oversee the process by about 50 QC engineers. It automates a series of checks by wrapping around third party software tools, in a complex network of \"this device gets tested by generating output in program A, feeding it to program B, then combining the streams and sending them to the device, but this device gets tested using programs D, E, and F.\" The automated process using the tool has a shockingly low error rate. Without the tool, doing things manually, the error rate climbs to 1-2%. So unless everyone wanted to see terrifying headlines in the Boston Globe about their devices failing, GRH needed to fix the problem. GRH was given the code, in this case a a zip file on a shared drive. It did not, at the start, even build. After fighting with the project configuration to resolve that, GRH was free to start digging in deeper. Public Sub connect2PCdb() Dim cPath As String = Path.Combine(strConverterPath, \"c.pfx\") Dim strCN As String ' JES 12/6/2016: Modify the following line if MySQL server is changed to a different server. A dump file will be needed to re-create teh database in the new server. strCN = \"metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string='server=REDACTED;user id=REDACTED;database=REDACTED;sslmode=Required;certificatepassword=REDACTED;certificatefile=REDACTED\\c.pfx;password=REDACTED'\" strCN = Regex.Replace(strCN, \"certificatefile=.*?pfx\", \"certificatefile=\" \u0026 cPath) pcContext = New Entities(strCN) strCN = \"metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string='server=REDACTED;user id=REDACTED;persistsecurityinfo=True;database=REDACTED;password=REDACTED'\" strCN = Regex.Match(strCN, \".*'(.*)'\").Groups(1).Value Try strCN = pcContext.Database.Connection.ConnectionString cnPC.ConnectionString = \"server=REDACTED;user id=REDACTED;password=REDACTED;database=REDACTED;\" cnPC.Open() Catch ex As Exception End Try End Sub This is the code which connects to the backend database. The code is in the category of more of a trainwreck than a WTF. It's got a wonderful mix of nonsense in here, though- a hard-coded connection string which includes plaintext passwords, regex munging to modify the string, then hard-coding a string again, only to use regexes to extract a subset of the string. A subset we don't use. And then, for a bonus, the whole thing has a misleading comment- \"modify the following line\" if we move to a different server? We have to modify several lines, because we keep copy/pasting the string around. Oh, and of course, it uses the pattern of \"open a database connection at application startup, and just hold that connection forever,\" which is a great way to strain your database as your userbase grows. The good news about the hard-coded password is that it got GRH access to the database. With that, it was easy to see what the problem was: the database was full. The system was overly aggressive with logging, the logs went to database tables, the server was an antique with a rather small hard drive, and the database wasn't configured to even use all of that space anyway. Cleaning up old logs got the engineers working again. GRH kept working on the code, though, cleaning it up and modernizing it. Updating to latest version of the .NET Core framework modified the data access to be far simpler, and got rid of the need for hard-coded connection strings. Still, GRH left the method looking like this: Public Sub connect2PCdb() 'Dim cPath As String = Path.Combine(strConverterPath, \"c.pfx\") 'Dim strCN As String ' JES 12/6/2016: Modify the following line if MySQL server is changed to a different server. A dump file will be needed to re-create teh database in the new server. 'strCN = \"metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string='server=REDACTED;user id=REDACTED;database=REDACTED;sslmode=Required;certificatepassword=REDACTED;certificatefile=REDACTED\\c.pfx;password=REDACTED'\" 'strCN = Regex.Replace(strCN, \"certificatefile=.*?pfx\", \"certificatefile=\" \u0026 cPath) 'pcContext = New Entities(strCN) 'strCN = \"metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string='server=REDACTED;user id=REDACTED;persistsecurityinfo=True;database=REDACTED;password=REDACTED'\" 'strCN = Regex.Match(strCN, \".*'(.*)'\").Groups(1).Value 'GRH 2021-01-15. Connection information moved to App.Config 'GRH 2021-08-13. EF Core no longer supports App.Config method pcContext = New PcEntities Try ' GRH 2021-08-21 This variable no longer exists in .NET 5 'strCN = pcContext.Database.Connection.ConnectionString ' GRH 2021-08-20 Keeping the connection open causes EF Core to not work 'cnPC.ConnectionString = \"server=REDACTED;user id=REDACTED;password=REDACTED;database=REDACTED;SslMode=none\" 'cnPC.Open() Catch ex As Exception End Try End Sub It's now a one-line method, with most of the code commented out, instead of removed. Why on Earth is the method left like that? GRH explains: Yes, I could delete the function as it is functionally dead, but I keep it for the same reasons that a hunter mounts a deer's head above her mantle. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eQuality control is an important business function for any company. When your company is shipping devices with safety concerns, it\u0026#39;s even more important. In some industries, a quality control failure is bound to be national headlines. \u003c/p\u003e\n\u003cp\u003eWhen the quality control software tool stopped working, everyone panicked. At which point, \u003cstrong\u003eGRH\u003c/strong\u003e stepped in.\u003c/p\u003e\n\u003cp\u003eNow, we\u0026#39;ve discussed this software and GRH \u003ca href=\"https://thedailywtf.com/articles/how-to-ruin-a-long-weekend\"\u003ebefore\u003c/a\u003e, but as a quick recap, it was:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ewritten by someone who is no longer employed with the company, as part of a project managed by someone who is no longer at the company, requested by an executive who is also no longer at the company. There are no documented requirements, very few tests, and a lot of \u0026#34;don\u0026#39;t touch this, it works\u0026#34;.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAnd this was a \u003cem\u003equality\u003c/em\u003e control tool. So we\u0026#39;re already in bad shape. It also had been unmaintained for years- a few of the QC engineers had tried to take it over, but weren\u0026#39;t programmers, and it had essentially languished.\u003c/p\u003e\n\u003cp\u003eSpecifically, it was a quality control tool used to oversee the process by about 50 QC engineers. It automates a series of checks by wrapping around third party software tools, in a complex network of \u0026#34;this device gets tested by generating output in program A, feeding it to program B, then combining the streams and sending them to the device, but \u003cem\u003ethis\u003c/em\u003e device gets tested using programs D, E, and F.\u0026#34;\u003c/p\u003e\n\u003cp\u003eThe automated process using the tool has a shockingly low error rate. Without the tool, doing things manually, the error rate climbs to 1-2%. So unless everyone wanted to see terrifying headlines in the Boston Globe about their devices failing, GRH needed to fix the problem.\u003c/p\u003e\n\u003cp\u003eGRH was given the code, in this case a a zip file on a shared drive. It did not, at the start, even build. After fighting with the project configuration to resolve that, GRH was free to start digging in deeper.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003ePublic\u003c/span\u003e \u003cspan\u003eSub\u003c/span\u003e connect2PCdb()\n        \u003cspan\u003eDim\u003c/span\u003e cPath As String = Path.Combine(strConverterPath, \u003cspan\u003e\u0026#34;c.pfx\u0026#34;\u003c/span\u003e)\n        \u003cspan\u003eDim\u003c/span\u003e strCN As String\n\n        \u003cspan\u003e\u0026#39; JES 12/6/2016: Modify the following line if MySQL server is changed to a different server.  A dump file will be needed to re-create teh database in the new server.\u003c/span\u003e\n        strCN = \u003cspan\u003e\u0026#34;metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string=\u0026#39;server=REDACTED;user id=REDACTED;database=REDACTED;sslmode=Required;certificatepassword=REDACTED;certificatefile=REDACTED\\c.pfx;password=REDACTED\u0026#39;\u0026#34;\u003c/span\u003e\n        strCN = Regex.\u003cspan\u003eReplace\u003c/span\u003e(strCN, \u003cspan\u003e\u0026#34;certificatefile=.*?pfx\u0026#34;\u003c/span\u003e, \u003cspan\u003e\u0026#34;certificatefile=\u0026#34;\u003c/span\u003e \u0026amp; cPath)\n        pcContext = \u003cspan\u003eNew\u003c/span\u003e Entities(strCN)\n        strCN = \u003cspan\u003e\u0026#34;metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string=\u0026#39;server=REDACTED;user id=REDACTED;persistsecurityinfo=True;database=REDACTED;password=REDACTED\u0026#39;\u0026#34;\u003c/span\u003e\n        strCN = Regex.Match(strCN, \u003cspan\u003e\u0026#34;.*\u0026#39;(.*)\u0026#39;\u0026#34;\u003c/span\u003e).Groups(\u003cspan\u003e1\u003c/span\u003e).Value\n\n        Try\n            strCN = pcContext.Database.Connection.ConnectionString\n            cnPC.ConnectionString = \u003cspan\u003e\u0026#34;server=REDACTED;user id=REDACTED;password=REDACTED;database=REDACTED;\u0026#34;\u003c/span\u003e\n            cnPC.Open()\n        Catch ex As Exception\n\n        \u003cspan\u003eEnd\u003c/span\u003e Try\n    \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eSub\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is the code which connects to the backend database. The code is in the category of more of a trainwreck than a WTF. It\u0026#39;s got a wonderful mix of nonsense in here, though- a hard-coded connection string which includes plaintext passwords, regex munging to modify the string, then hard-coding a string \u003cem\u003eagain\u003c/em\u003e, only to use regexes to extract a subset of the string. A subset we don\u0026#39;t use.\u003c/p\u003e\n\u003cp\u003eAnd then, for a bonus, the whole thing has a misleading comment- \u0026#34;modify the following line\u0026#34; if we move to a different server? We have to modify several lines, because we keep copy/pasting the string around.\u003c/p\u003e\n\u003cp\u003eOh, and of course, it uses the pattern of \u0026#34;open a database connection at application startup, and just hold that connection forever,\u0026#34; which is a great way to strain your database as your userbase grows.\u003c/p\u003e\n\u003cp\u003eThe good news about the hard-coded password is that it got GRH access to the database. With that, it was easy to see what the problem was: the database was full. The system was overly aggressive with logging, the logs went to database tables, the server was an antique with a rather small hard drive, and the database wasn\u0026#39;t configured to even use all of that space anyway.\u003c/p\u003e\n\u003cp\u003eCleaning up old logs got the engineers working again. GRH kept working on the code, though, cleaning it up and modernizing it. Updating to latest version of the .NET Core framework modified the data access to be far simpler, and got rid of the need for hard-coded connection strings. Still, GRH left the method looking like \u003cem\u003ethis\u003c/em\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003ePublic\u003c/span\u003e \u003cspan\u003eSub\u003c/span\u003e connect2PCdb()\n        \u003cspan\u003e\u0026#39;Dim cPath As String = Path.Combine(strConverterPath, \u0026#34;c.pfx\u0026#34;)\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;Dim strCN As String\u003c/span\u003e\n\n        \u003cspan\u003e\u0026#39; JES 12/6/2016: Modify the following line if MySQL server is changed to a different server.  A dump file will be needed to re-create teh database in the new server.\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;strCN = \u0026#34;metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string=\u0026#39;server=REDACTED;user id=REDACTED;database=REDACTED;sslmode=Required;certificatepassword=REDACTED;certificatefile=REDACTED\\c.pfx;password=REDACTED\u0026#39;\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;strCN = Regex.Replace(strCN, \u0026#34;certificatefile=.*?pfx\u0026#34;, \u0026#34;certificatefile=\u0026#34; \u0026amp; cPath)\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;pcContext = New Entities(strCN)\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;strCN = \u0026#34;metadata=res://*/Model1.csdl|res://*/Model1.ssdl|res://*/Model1.msl;provider=MySql.Data.MySqlClient;provider connection string=\u0026#39;server=REDACTED;user id=REDACTED;persistsecurityinfo=True;database=REDACTED;password=REDACTED\u0026#39;\u0026#34;\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;strCN = Regex.Match(strCN, \u0026#34;.*\u0026#39;(.*)\u0026#39;\u0026#34;).Groups(1).Value\u003c/span\u003e\n\n        \u003cspan\u003e\u0026#39;GRH 2021-01-15.  Connection information moved to App.Config\u003c/span\u003e\n        \u003cspan\u003e\u0026#39;GRH 2021-08-13.  EF Core no longer supports App.Config method\u003c/span\u003e\n        pcContext = \u003cspan\u003eNew\u003c/span\u003e PcEntities\n\n        Try\n            \u003cspan\u003e\u0026#39; GRH 2021-08-21  This variable no longer exists in .NET 5\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;strCN = pcContext.Database.Connection.ConnectionString\u003c/span\u003e\n            \u003cspan\u003e\u0026#39; GRH 2021-08-20  Keeping the connection open causes EF Core to not work\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;cnPC.ConnectionString = \u0026#34;server=REDACTED;user id=REDACTED;password=REDACTED;database=REDACTED;SslMode=none\u0026#34;\u003c/span\u003e\n            \u003cspan\u003e\u0026#39;cnPC.Open()\u003c/span\u003e\n        Catch ex As Exception\n\n        \u003cspan\u003eEnd\u003c/span\u003e Try\n    \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eSub\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt\u0026#39;s now a one-line method, with most of the code commented out, instead of removed. Why on Earth is the method left like that?\u003c/p\u003e\n\u003cp\u003eGRH explains:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYes, I could delete the function as it is functionally dead, but I keep it for the same reasons that a hunter mounts a deer\u0026#39;s head above her mantle.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n\t[Advertisement] \u003cb\u003ePlan Your .NET 9 Migration with Confidence\u003c/b\u003e\u003cbr/\u003eYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. \u003cb\u003e\u003ca href=\"https://inedo.com/support/whitepapers/dotnet-guide?utm_campaign=dotnet\u0026amp;utm_source=tdwtf-footer\"\u003eDownload Free Guide Now!\u003c/a\u003e\u003c/b\u003e\n\u003c/p\u003e\n\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": "2024-10-28T06:30:00Z",
  "modifiedTime": null
}
