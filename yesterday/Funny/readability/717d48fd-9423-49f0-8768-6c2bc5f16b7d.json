{
  "id": "717d48fd-9423-49f0-8768-6c2bc5f16b7d",
  "title": "CodeSOD: An Alerting Validation",
  "link": "https://thedailywtf.com/articles/an-alerting-validation",
  "description": "There are things which are true. Regular expressions frequently perform badly. They're hard to read. Email addresses are not actually regular languages, and thus can't truly be validated (in all their many possible forms) by a pure regex. These are true. It's also true that a simple regex can get you most of the way there. Lucas found this in their codebase, for validating emails. function echeck(str) { var at=\"@\"; var dot=\".\"; var lat=str.indexOf(at); var lstr=str.length; var ldot=str.indexOf(dot); if (str.indexOf(at)==-1){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(at)==-1 || str.indexOf(at)==0 || str.indexOf(at)==lstr){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(dot)==-1 || str.indexOf(dot)==0 || str.indexOf(dot)==lstr){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(at,(lat+1))!=-1){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.substring(lat-1,lat)==dot || str.substring(lat+1,lat+2)==dot){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(dot,(lat+2))==-1){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(\" \")!=-1){ alert(\"You must include an accurate email address for a response.\"); return false; } return true; } It checks that the string contains an \"@\", and the \"@\" is not at the beginning or end of the string. Then it does the same check for a \".\". Then it checks that there isn't a second \"@\". Then it checks that there are at least two non-\"@\" characters before the \".\". Then it checks that there's at least one \".\" after the \"@\". Then it checks that there are no spaces. Like a regex, I don't think this covers the entire space of valid and invalid email addresses, but that's just because the email address spec is complicated. It likely qualifies as \"good enough\", on that front. But it's the most awkward way to express that series of tests, especially since they create variables which might be useful, but never use them, thus calling str.indexOf many, many times. The awkwardness becomes more obvious with the way it outputs the same error message in multiple branches. Outputs them using alert I might add, which is the kind of choice that should send someone to the Special Hell™. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "author": "Remy Porter",
  "published": "Mon, 03 Mar 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 3098,
  "excerpt": "There are things which are true. Regular expressions frequently perform badly. They're hard to read. Email addresses are not actually regular languages, and thus can't truly be validated (in all their many possible forms) by a pure regex. These are true. It's also true that a simple regex can get you most of the way there.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-03-03 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. There are things which are true. Regular expressions frequently perform badly. They're hard to read. Email addresses are not actually regular languages, and thus can't truly be validated (in all their many possible forms) by a pure regex. These are true. It's also true that a simple regex can get you most of the way there. Lucas found this in their codebase, for validating emails. function echeck(str) { var at=\"@\"; var dot=\".\"; var lat=str.indexOf(at); var lstr=str.length; var ldot=str.indexOf(dot); if (str.indexOf(at)==-1){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(at)==-1 || str.indexOf(at)==0 || str.indexOf(at)==lstr){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(dot)==-1 || str.indexOf(dot)==0 || str.indexOf(dot)==lstr){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(at,(lat+1))!=-1){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.substring(lat-1,lat)==dot || str.substring(lat+1,lat+2)==dot){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(dot,(lat+2))==-1){ alert(\"You must include an accurate email address for a response.\"); return false; } if (str.indexOf(\" \")!=-1){ alert(\"You must include an accurate email address for a response.\"); return false; } return true; } It checks that the string contains an \"@\", and the \"@\" is not at the beginning or end of the string. Then it does the same check for a \".\". Then it checks that there isn't a second \"@\". Then it checks that there are at least two non-\"@\" characters before the \".\". Then it checks that there's at least one \".\" after the \"@\". Then it checks that there are no spaces. Like a regex, I don't think this covers the entire space of valid and invalid email addresses, but that's just because the email address spec is complicated. It likely qualifies as \"good enough\", on that front. But it's the most awkward way to express that series of tests, especially since they create variables which might be useful, but never use them, thus calling str.indexOf many, many times. The awkwardness becomes more obvious with the way it outputs the same error message in multiple branches. Outputs them using alert I might add, which is the kind of choice that should send someone to the Special Hell™. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-03-03\"\u003e2025-03-03\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10860\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eThere are things which are true. Regular expressions frequently perform badly. They\u0026#39;re hard to read. Email addresses are not actually regular languages, and thus can\u0026#39;t truly be validated (in all their many possible forms) by a pure regex.\u003c/p\u003e\n\u003cp\u003eThese are true. It\u0026#39;s also true that a simple regex can get you most of the way there.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLucas\u003c/strong\u003e found \u003cem\u003ethis\u003c/em\u003e in their codebase, for validating emails.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eecheck\u003c/span\u003e(\u003cspan\u003estr\u003c/span\u003e) {\n\n    \u003cspan\u003evar\u003c/span\u003e at=\u003cspan\u003e\u0026#34;@\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003evar\u003c/span\u003e dot=\u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e;\n    \u003cspan\u003evar\u003c/span\u003e lat=str.\u003cspan\u003eindexOf\u003c/span\u003e(at);\n    \u003cspan\u003evar\u003c/span\u003e lstr=str.\u003cspan\u003elength\u003c/span\u003e;\n    \u003cspan\u003evar\u003c/span\u003e ldot=str.\u003cspan\u003eindexOf\u003c/span\u003e(dot);\n    \u003cspan\u003eif\u003c/span\u003e (str.\u003cspan\u003eindexOf\u003c/span\u003e(at)==-\u003cspan\u003e1\u003c/span\u003e){\n        \u003cspan\u003ealert\u003c/span\u003e(\u003cspan\u003e\u0026#34;You must include an accurate email address for a response.\u0026#34;\u003c/span\u003e);\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n    }\n\n    \u003cspan\u003eif\u003c/span\u003e (str.\u003cspan\u003eindexOf\u003c/span\u003e(at)==-\u003cspan\u003e1\u003c/span\u003e || str.\u003cspan\u003eindexOf\u003c/span\u003e(at)==\u003cspan\u003e0\u003c/span\u003e || str.\u003cspan\u003eindexOf\u003c/span\u003e(at)==lstr){\n        \u003cspan\u003ealert\u003c/span\u003e(\u003cspan\u003e\u0026#34;You must include an accurate email address for a response.\u0026#34;\u003c/span\u003e);\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n    }\n\n    \u003cspan\u003eif\u003c/span\u003e (str.\u003cspan\u003eindexOf\u003c/span\u003e(dot)==-\u003cspan\u003e1\u003c/span\u003e || str.\u003cspan\u003eindexOf\u003c/span\u003e(dot)==\u003cspan\u003e0\u003c/span\u003e || str.\u003cspan\u003eindexOf\u003c/span\u003e(dot)==lstr){\n        \u003cspan\u003ealert\u003c/span\u003e(\u003cspan\u003e\u0026#34;You must include an accurate email address for a response.\u0026#34;\u003c/span\u003e);\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n    }\n\n    \u003cspan\u003eif\u003c/span\u003e (str.\u003cspan\u003eindexOf\u003c/span\u003e(at,(lat+\u003cspan\u003e1\u003c/span\u003e))!=-\u003cspan\u003e1\u003c/span\u003e){\n        \u003cspan\u003ealert\u003c/span\u003e(\u003cspan\u003e\u0026#34;You must include an accurate email address for a response.\u0026#34;\u003c/span\u003e);\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n    }\n\n    \u003cspan\u003eif\u003c/span\u003e (str.\u003cspan\u003esubstring\u003c/span\u003e(lat-\u003cspan\u003e1\u003c/span\u003e,lat)==dot || str.\u003cspan\u003esubstring\u003c/span\u003e(lat+\u003cspan\u003e1\u003c/span\u003e,lat+\u003cspan\u003e2\u003c/span\u003e)==dot){\n        \u003cspan\u003ealert\u003c/span\u003e(\u003cspan\u003e\u0026#34;You must include an accurate email address for a response.\u0026#34;\u003c/span\u003e);\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n    }\n\n    \u003cspan\u003eif\u003c/span\u003e (str.\u003cspan\u003eindexOf\u003c/span\u003e(dot,(lat+\u003cspan\u003e2\u003c/span\u003e))==-\u003cspan\u003e1\u003c/span\u003e){\n        \u003cspan\u003ealert\u003c/span\u003e(\u003cspan\u003e\u0026#34;You must include an accurate email address for a response.\u0026#34;\u003c/span\u003e);\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n    }\n\n    \u003cspan\u003eif\u003c/span\u003e (str.\u003cspan\u003eindexOf\u003c/span\u003e(\u003cspan\u003e\u0026#34; \u0026#34;\u003c/span\u003e)!=-\u003cspan\u003e1\u003c/span\u003e){\n        \u003cspan\u003ealert\u003c/span\u003e(\u003cspan\u003e\u0026#34;You must include an accurate email address for a response.\u0026#34;\u003c/span\u003e);\n        \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003efalse\u003c/span\u003e;\n    }\n\n    \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003etrue\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt checks that the string contains an \u0026#34;@\u0026#34;, and the \u0026#34;@\u0026#34; is not at the beginning or end of the string. Then it does the same check for a \u0026#34;.\u0026#34;. Then it checks that there isn\u0026#39;t a second \u0026#34;@\u0026#34;. Then it checks that there are at least two non-\u0026#34;@\u0026#34; characters before the \u0026#34;.\u0026#34;. Then it checks that there\u0026#39;s at least one \u0026#34;.\u0026#34; after the \u0026#34;@\u0026#34;. Then it checks that there are no spaces.\u003c/p\u003e\n\u003cp\u003eLike a regex, I don\u0026#39;t think this covers the entire space of valid and invalid email addresses, but that\u0026#39;s just because the email address spec is complicated. It likely qualifies as \u0026#34;good enough\u0026#34;, on that front. But it\u0026#39;s the most awkward way to express that series of tests, especially since they create variables which might be useful, but never use them, thus calling \u003ccode\u003estr.indexOf\u003c/code\u003e many, \u003cem\u003emany\u003c/em\u003e times. The awkwardness becomes more obvious with the way it outputs the same error message in multiple branches. Outputs them using \u003ccode\u003ealert\u003c/code\u003e I might add, which is the kind of choice that should send someone to the Special Hell™.\u003c/p\u003e\n\u003cp\u003e\n\t[Advertisement] \u003cb\u003ePlan Your .NET 9 Migration with Confidence\u003c/b\u003e\u003cbr/\u003eYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. \u003cb\u003e\u003ca href=\"https://inedo.com/support/whitepapers/dotnet-guide?utm_campaign=dotnet\u0026amp;utm_source=tdwtf-footer\"\u003eDownload Free Guide Now!\u003c/a\u003e\u003c/b\u003e\n\u003c/p\u003e\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-03-03T06:30:00Z",
  "modifiedTime": null
}
