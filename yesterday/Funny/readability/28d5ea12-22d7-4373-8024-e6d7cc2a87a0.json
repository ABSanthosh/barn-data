{
  "id": "28d5ea12-22d7-4373-8024-e6d7cc2a87a0",
  "title": "CodeSOD: Ready Xor Not",
  "link": "https://thedailywtf.com/articles/ready-xor-not",
  "description": "Phil's company hired a contractor. It was the typical overseas arrangement: bundle up a pile of work, send it off to another timezone, receive back terrible code, push back during code review, then the whole thing blows up when the contracting company pushes back about how while the code review is in the contract if you're going to be such sticklers about it, they'll never deliver, and then management steps in and says, \"Just keep the code review to style comments,\" and then it ends up not mattering anyway because the contractor assigned to the contract leaves for another contracting company, and management opts to use the remaining billable hours for a new feature instead of finishing the inflight work, so you inherit a half-finished pile of trash and somehow have to make it work. Like I said, pretty standard stuff. Phil found this construct scattered all over the codebase: if cond1 and cond2: pass elif cond1 or cond2: # do actual work I hesitate to post this, because what we're looking at is just an attempt at doing a xor operation. And it's not wrong- it's an if statement way of writing (not a and b) or (a and not b). And if we're being nit-picky, while Python has a xor operator, it's technically a bitwise xor, so I could see someone not connecting that they could use it in this case- cond1 ^ cond2 would work just fine, so long as both conditions are actual booleans. But Python often uses non-boolean comparisons, like: text = \"\" if text: print(\"This won't print.\") This is playing with truthiness, and the problem here is that you can't use a xor to chain these conditions together. if text ^ otherText: # do stuff That's a runtime error, as the ^ is only defined for integral types. You'd have to write: if bool(text) ^ bool(otherText): # do stuff So, would it have been better to use one of the logical equivalences for xor? Certainly. Would it have been even better to turn that equivalence into a function so you could actually call a xor function? Absolutely. But I also can't complain too much about this one. I hate it, don't get me wrong, but it's not a trainwreck. .comment { border: none; } [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "author": "Remy Porter",
  "published": "Thu, 12 Dec 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2534,
  "excerpt": "Phil's company hired a contractor. It was the typical overseas arrangement: bundle up a pile of work, send it off to another timezone, receive back terrible code, push back during code review, then the whole thing blows up when the contracting company pushes back about how while the code review is in the contract if you're going to be such sticklers about it, they'll never deliver, and then management steps in and says, \"Just keep the code review to style comments,\" and then it ends up not mattering anyway because the contractor assigned to the contract leaves for another contracting company, and management opts to use the remaining billable hours for a new feature instead of finishing the inflight work, so you inherit a half-finished pile of trash and somehow have to make it work. Like I said, pretty standard stuff.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-12-12 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Phil's company hired a contractor. It was the typical overseas arrangement: bundle up a pile of work, send it off to another timezone, receive back terrible code, push back during code review, then the whole thing blows up when the contracting company pushes back about how while the code review is in the contract if you're going to be such sticklers about it, they'll never deliver, and then management steps in and says, \"Just keep the code review to style comments,\" and then it ends up not mattering anyway because the contractor assigned to the contract leaves for another contracting company, and management opts to use the remaining billable hours for a new feature instead of finishing the inflight work, so you inherit a half-finished pile of trash and somehow have to make it work. Like I said, pretty standard stuff. Phil found this construct scattered all over the codebase: if cond1 and cond2: pass elif cond1 or cond2: # do actual work I hesitate to post this, because what we're looking at is just an attempt at doing a xor operation. And it's not wrong- it's an if statement way of writing (not a and b) or (a and not b). And if we're being nit-picky, while Python has a xor operator, it's technically a bitwise xor, so I could see someone not connecting that they could use it in this case- cond1 ^ cond2 would work just fine, so long as both conditions are actual booleans. But Python often uses non-boolean comparisons, like: text = \"\" if text: print(\"This won't print.\") This is playing with truthiness, and the problem here is that you can't use a xor to chain these conditions together. if text ^ otherText: # do stuff That's a runtime error, as the ^ is only defined for integral types. You'd have to write: if bool(text) ^ bool(otherText): # do stuff So, would it have been better to use one of the logical equivalences for xor? Certainly. Would it have been even better to turn that equivalence into a function so you could actually call a xor function? Absolutely. But I also can't complain too much about this one. I hate it, don't get me wrong, but it's not a trainwreck. [Advertisement] BuildMaster allows you to create a self-service release management platform that allows different teams to manage their applications. Explore how!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-12-12\"\u003e2024-12-12\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10802\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003ePhil\u003c/strong\u003e\u0026#39;s company hired a contractor. It was the typical overseas arrangement: bundle up a pile of work, send it off to another timezone, receive back terrible code, push back during code review, then the whole thing blows up when the contracting company pushes back about how while the code review is in the contract if you\u0026#39;re going to be such sticklers about it, they\u0026#39;ll never deliver, and then management steps in and says, \u0026#34;Just keep the code review to style comments,\u0026#34; and then it ends up not mattering \u003cem\u003eanyway\u003c/em\u003e because the contractor assigned to the contract leaves for another contracting company, and management opts to use the remaining billable hours for a new feature instead of finishing the inflight work, so you inherit a half-finished pile of trash and somehow have to make it work.\u003c/p\u003e\n\u003cp\u003eLike I said, pretty standard stuff.\u003c/p\u003e\n\u003cp\u003ePhil found this construct scattered all over the codebase:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e cond1 \u003cspan\u003eand\u003c/span\u003e cond2:\n\t\u003cspan\u003epass\u003c/span\u003e\n\u003cspan\u003eelif\u003c/span\u003e cond1 \u003cspan\u003eor\u003c/span\u003e cond2:\n\t\u003cspan\u003e# do actual work\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eI hesitate to post this, because what we\u0026#39;re looking at is just an attempt at doing a xor operation. And it\u0026#39;s not \u003cem\u003ewrong\u003c/em\u003e- it\u0026#39;s an \u003ccode\u003eif\u003c/code\u003e statement way of writing \u003ccode\u003e(not a and b) or (a and not b)\u003c/code\u003e. And if we\u0026#39;re being nit-picky, while Python has a xor operator, it\u0026#39;s technically a bitwise xor, so I could see someone not connecting that they could use it in this case- \u003ccode\u003econd1 ^ cond2\u003c/code\u003e would work just fine, so long as both conditions are actual \u003cem\u003ebooleans\u003c/em\u003e. But Python often uses non-boolean comparisons, like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etext = \u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003cspan\u003eif\u003c/span\u003e text:\n  \u003cspan\u003eprint\u003c/span\u003e(\u003cspan\u003e\u0026#34;This won\u0026#39;t print.\u0026#34;\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis is playing with truthiness, and the problem here is that you can\u0026#39;t use a xor to chain these conditions together.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e text ^ otherText:\n\t\u003cspan\u003e# do stuff\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThat\u0026#39;s a runtime error, as the \u003ccode\u003e^\u003c/code\u003e is only defined for integral types. You\u0026#39;d have to write:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e \u003cspan\u003ebool\u003c/span\u003e(text) ^ \u003cspan\u003ebool\u003c/span\u003e(otherText):\n\t\u003cspan\u003e# do stuff\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, would it have been better to use one of the logical equivalences for xor? Certainly. Would it have been even better to turn that equivalence into a function so you could actually call a \u003ccode\u003exor\u003c/code\u003e function? Absolutely.\u003c/p\u003e\n\u003cp\u003eBut I also can\u0026#39;t complain too much about this one. I hate it, don\u0026#39;t get me wrong, but it\u0026#39;s not a trainwreck.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eBuildMaster\u003c/a\u003e allows you to create a self-service release management platform that allows different teams to manage their applications. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Self_Service\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eExplore how!\u003c/a\u003e \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-12-12T06:30:00Z",
  "modifiedTime": null
}
