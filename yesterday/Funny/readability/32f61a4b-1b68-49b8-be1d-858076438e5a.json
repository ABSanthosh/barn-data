{
  "id": "32f61a4b-1b68-49b8-be1d-858076438e5a",
  "title": "Representative Line: Identifying the Representative",
  "link": "https://thedailywtf.com/articles/identifying-the-representative",
  "description": "Kate inherited a system where Java code generates JavaScript (by good old fashioned string concatenation) and embeds it into an output template. The Java code was written by someone who didn't fully understand Java, but JavaScript was also a language they didn't understand, and the resulting unholy mess was buggy and difficult to maintain. Why trying to debug the JavaScript, Kate had to dig through the generated code, which led to this little representative line: dojo.byId('html;------sites------fileadmin------en------fileadmin------index.html;;12').setAttribute('isLocked','true'); The byId function is an alias to the browser's document.getElementById function. The ID on display here is clearly generated by the Java code, resulting in an absolutely cursed ID for an element in the page. The semicolons are field separators, which means you can parse the ID to get other information about it. I have no idea what the 12 means, but it clearly means something. Then there's that long kebab-looking string. It seems like maybe some sort of hierarchy information? But maybe not, because fileadmin appears twice? Why are there so many dashes? If I got an answer to that question, would I survive it? Would I be able to navigate the world if I understood the dark secret of those dashes? Or would I have to give myself over to our Dark Lords and dedicate my life to bringing about the end of all things? Like all good representative lines, this one hints at darker, deeper evils in the codebase- the code that generates (or parses) this ID must be especially cursed. The only element which needs to have its isLocked attribute set to true is the developer responsible for this: they must be locked away before they harm the rest of us. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "author": "Remy Porter",
  "published": "Mon, 19 May 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "Representative Line"
  ],
  "byline": "Remy Porter",
  "length": 2119,
  "excerpt": "Kate inherited a system where Java code generates JavaScript (by good old fashioned string concatenation) and embeds it into an output template. The Java code was written by someone who didn't fully understand Java, but JavaScript was also a language they didn't understand, and the resulting unholy mess was buggy and difficult to maintain. Why trying to debug the JavaScript, Kate had to dig through the generated code, which led to this little representative line:",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in Representative Line on 2025-05-19 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Kate inherited a system where Java code generates JavaScript (by good old fashioned string concatenation) and embeds it into an output template. The Java code was written by someone who didn't fully understand Java, but JavaScript was also a language they didn't understand, and the resulting unholy mess was buggy and difficult to maintain. Why trying to debug the JavaScript, Kate had to dig through the generated code, which led to this little representative line: dojo.byId('html;------sites------fileadmin------en------fileadmin------index.html;;12').setAttribute('isLocked','true'); The byId function is an alias to the browser's document.getElementById function. The ID on display here is clearly generated by the Java code, resulting in an absolutely cursed ID for an element in the page. The semicolons are field separators, which means you can parse the ID to get other information about it. I have no idea what the 12 means, but it clearly means something. Then there's that long kebab-looking string. It seems like maybe some sort of hierarchy information? But maybe not, because fileadmin appears twice? Why are there so many dashes? If I got an answer to that question, would I survive it? Would I be able to navigate the world if I understood the dark secret of those dashes? Or would I have to give myself over to our Dark Lords and dedicate my life to bringing about the end of all things? Like all good representative lines, this one hints at darker, deeper evils in the codebase- the code that generates (or parses) this ID must be especially cursed. The only element which needs to have its isLocked attribute set to true is the developer responsible for this: they must be locked away before they harm the rest of us. [Advertisement] ProGet’s got you covered with security and access controls on your NuGet feeds. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/representative-line\"\u003eRepresentative Line\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-05-19\"\u003e2025-05-19\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10917\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eKate\u003c/strong\u003e inherited a system where Java code generates JavaScript (by good old fashioned string concatenation) and embeds it into an output template. The Java code was written by someone who didn\u0026#39;t fully understand Java, but JavaScript was \u003cem\u003ealso\u003c/em\u003e a language they didn\u0026#39;t understand, and the resulting unholy mess was buggy and difficult to maintain.\u003c/p\u003e\n\u003cp\u003eWhy trying to debug the JavaScript, Kate had to dig through the generated code, which led to this little representative line:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edojo.\u003cspan\u003ebyId\u003c/span\u003e(\u003cspan\u003e\u0026#39;html;------sites------fileadmin------en------fileadmin------index.html;;12\u0026#39;\u003c/span\u003e).\u003cspan\u003esetAttribute\u003c/span\u003e(\u003cspan\u003e\u0026#39;isLocked\u0026#39;\u003c/span\u003e,\u003cspan\u003e\u0026#39;true\u0026#39;\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ebyId\u003c/code\u003e function is an alias to the browser\u0026#39;s \u003ccode\u003edocument.getElementById\u003c/code\u003e function. The ID on display here is clearly generated by the Java code, resulting in an absolutely cursed ID for an element in the page. The semicolons are field separators, which means you can parse the ID to get other information about it. I have no idea what the \u003ccode\u003e12\u003c/code\u003e \u003cem\u003emeans\u003c/em\u003e, but it clearly means something. Then there\u0026#39;s that long kebab-looking string. It seems like maybe some sort of hierarchy information? But maybe not, because \u003ccode\u003efileadmin\u003c/code\u003e appears twice? Why are there so many dashes? If I got an answer to that question, would I survive it? Would I be able to navigate the world if I understood the dark secret of those dashes? Or would I have to give myself over to our Dark Lords and dedicate my life to bringing about the end of all things?\u003c/p\u003e\n\u003cp\u003eLike all good representative lines, this one hints at darker, deeper evils in the codebase- the code that generates (or parses) this ID must be especially cursed.\u003c/p\u003e\n\u003cp\u003eThe only element which needs to have its \u003ccode\u003eisLocked\u003c/code\u003e attribute set to true is the developer responsible for this: they must be locked away before they harm the rest of us.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tProGet’s got you covered with security and access controls on your NuGet feeds. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=GotYouCoveredFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-05-19T06:30:00Z",
  "modifiedTime": null
}
