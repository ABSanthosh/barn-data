{
  "id": "2f7743c6-5395-4ae5-9817-24c596ceb6a5",
  "title": "CodeSOD: Plugin Acrobatics",
  "link": "https://thedailywtf.com/articles/plugin-acrobatics",
  "description": "Once upon a time, web browsers weren't the one-stop-shop for all kinds of possible content that they are today. Aside from the most basic media types, your browser depended on content plugins to display different media types. Yes, there was an era where, if you wanted to watch a video in a web browser, you may need to have QuickTime or… (shudder) Real Player installed. As a web developer, you'd need to write code to check which plugins were installed. If they don't have Adobe Acrobat Reader installed, there's no point in serving them up a PDF file- you'll need instead to give them an install link. Which brings us to Ido's submission. This code is intended to find the Acrobat Reader plugin version. acrobatVersion: function GetAcrobatVersion() { // Check acrobat is Enabled or not and its version acrobatVersion = 0; if (navigator.plugins \u0026\u0026 navigator.plugins.length) { for (intLoop = 0; intLoop \u003c= 15; intLoop++) { if (navigator.plugins[intLoop] != -1) { acrobatVersion = parseFloat(navigator.plugins[intLoop].version); isAcrobatInstalled = true; break; } } } else {...} } So, we start by checking for the navigator.plugins array. This is a wildly outdated thing to do, as the MDN is quite emphatic about, but I'm not going to to get hung up on that- this code is likely old. But what I do want to pay attention to is that they check navigator.plugins.length. Then they loop across the set of plugins using a for loop. And don't use the length! They bound the loop at 15, arbitrarily. Why? No idea- I suspect it's for the same reason they named the variable intLoop and not i like a normal human. Then they check to ensure that the entry at plugins[intLoop] is not equal to -1. I'm not sure what the expected behavior was here- if you're accessing an array out of bounds in JavaScript, I'd expect it to return undefined. Perhaps some antique version of Internet Explorer did something differently? Sadly plausible. Okay, we've found something we believe to be a plugin, because it's not -1, we'll grab the version property off of it and… parseFloat. On a version number. Which ignores the fact that 1.1 and 1.10 are different versions. Version numbers, like phone numbers, are not actually numbers. We don't do arithmetic on them, treat them like text. That done, we can say isAcrobatInstalled is true- despite the fact that we didn't check to see if this plugin was actually an Acrobat plugin. It could have been Flash. Or QuickTime. Then we break out of the loop. A loop that, I strongly suspect, would only ever have one iteration, because undefined != -1. So there we have it: code that doesn't do what it intends to, and even if it did, is doing it the absolute wrong way, and is also epically deprecated. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "author": "Remy Porter",
  "published": "Wed, 20 Nov 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 3205,
  "excerpt": "Once upon a time, web browsers weren't the one-stop-shop for all kinds of possible content that they are today. Aside from the most basic media types, your browser depended on content plugins to display different media types. Yes, there was an era where, if you wanted to watch a video in a web browser, you may need to have QuickTime or… (shudder) Real Player installed. As a web developer, you'd need to write code to check which plugins were installed. If they don't have Adobe Acrobat Reader installed, there's no point in serving them up a PDF file- you'll need instead to give them an install link.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-11-20 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Once upon a time, web browsers weren't the one-stop-shop for all kinds of possible content that they are today. Aside from the most basic media types, your browser depended on content plugins to display different media types. Yes, there was an era where, if you wanted to watch a video in a web browser, you may need to have QuickTime or… (shudder) Real Player installed. As a web developer, you'd need to write code to check which plugins were installed. If they don't have Adobe Acrobat Reader installed, there's no point in serving them up a PDF file- you'll need instead to give them an install link. Which brings us to Ido's submission. This code is intended to find the Acrobat Reader plugin version. acrobatVersion: function GetAcrobatVersion() { // Check acrobat is Enabled or not and its version acrobatVersion = 0; if (navigator.plugins \u0026\u0026 navigator.plugins.length) { for (intLoop = 0; intLoop \u003c= 15; intLoop++) { if (navigator.plugins[intLoop] != -1) { acrobatVersion = parseFloat(navigator.plugins[intLoop].version); isAcrobatInstalled = true; break; } } } else {...} } So, we start by checking for the navigator.plugins array. This is a wildly outdated thing to do, as the MDN is quite emphatic about, but I'm not going to to get hung up on that- this code is likely old. But what I do want to pay attention to is that they check navigator.plugins.length. Then they loop across the set of plugins using a for loop. And don't use the length! They bound the loop at 15, arbitrarily. Why? No idea- I suspect it's for the same reason they named the variable intLoop and not i like a normal human. Then they check to ensure that the entry at plugins[intLoop] is not equal to -1. I'm not sure what the expected behavior was here- if you're accessing an array out of bounds in JavaScript, I'd expect it to return undefined. Perhaps some antique version of Internet Explorer did something differently? Sadly plausible. Okay, we've found something we believe to be a plugin, because it's not -1, we'll grab the version property off of it and… parseFloat. On a version number. Which ignores the fact that 1.1 and 1.10 are different versions. Version numbers, like phone numbers, are not actually numbers. We don't do arithmetic on them, treat them like text. That done, we can say isAcrobatInstalled is true- despite the fact that we didn't check to see if this plugin was actually an Acrobat plugin. It could have been Flash. Or QuickTime. Then we break out of the loop. A loop that, I strongly suspect, would only ever have one iteration, because undefined != -1. So there we have it: code that doesn't do what it intends to, and even if it did, is doing it the absolute wrong way, and is also epically deprecated. [Advertisement] Plan Your .NET 9 Migration with ConfidenceYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. Download Free Guide Now!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-11-20\"\u003e2024-11-20\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10785\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eOnce upon a time, web browsers weren\u0026#39;t the one-stop-shop for all kinds of possible content that they are today. Aside from the most basic media types, your browser depended on content plugins to display different media types. Yes, there was an era where, if you wanted to watch a video in a web browser, you may need to have QuickTime or… (shudder) \u003cem\u003eReal Player\u003c/em\u003e installed.\u003c/p\u003e\n\u003cp\u003eAs a web developer, you\u0026#39;d need to write code to check which plugins were installed. If they don\u0026#39;t have Adobe Acrobat Reader installed, there\u0026#39;s no point in serving them up a PDF file- you\u0026#39;ll need instead to give them an install link.\u003c/p\u003e\n\u003cp\u003eWhich brings us to \u003cstrong\u003eIdo\u003c/strong\u003e\u0026#39;s submission. This code is \u003cem\u003eintended\u003c/em\u003e to find the Acrobat Reader plugin version.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eacrobatVersion\u003c/span\u003e: \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eGetAcrobatVersion\u003c/span\u003e(\u003cspan\u003e\u003c/span\u003e) {\n\t\u003cspan\u003e// Check acrobat is Enabled or not and its version\u003c/span\u003e\n\tacrobatVersion = \u003cspan\u003e0\u003c/span\u003e;\n\t\u003cspan\u003eif\u003c/span\u003e (navigator.\u003cspan\u003eplugins\u003c/span\u003e \u0026amp;\u0026amp; navigator.\u003cspan\u003eplugins\u003c/span\u003e.\u003cspan\u003elength\u003c/span\u003e) {\n\t\t\u003cspan\u003efor\u003c/span\u003e (intLoop = \u003cspan\u003e0\u003c/span\u003e; intLoop \u0026lt;= \u003cspan\u003e15\u003c/span\u003e; intLoop++) {\n\t\t\t\u003cspan\u003eif\u003c/span\u003e (navigator.\u003cspan\u003eplugins\u003c/span\u003e[intLoop] != -\u003cspan\u003e1\u003c/span\u003e) {\n\t\t\t\tacrobatVersion = \u003cspan\u003eparseFloat\u003c/span\u003e(navigator.\u003cspan\u003eplugins\u003c/span\u003e[intLoop].\u003cspan\u003eversion\u003c/span\u003e);\n\t\t\t\tisAcrobatInstalled = \u003cspan\u003etrue\u003c/span\u003e;\n\t\t\t\t\u003cspan\u003ebreak\u003c/span\u003e;\n\t\t\t}\n\t\t}\n\t}\n\t\u003cspan\u003eelse\u003c/span\u003e {...}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, we start by checking for the \u003ccode\u003enavigator.plugins\u003c/code\u003e array. This is a wildly outdated thing to do, as \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/plugins\"\u003ethe MDN is quite emphatic about\u003c/a\u003e, but I\u0026#39;m not going to to get hung up on that- this code is likely old.\u003c/p\u003e\n\u003cp\u003eBut what I do want to pay attention to is that they check \u003ccode\u003enavigator.plugins.length\u003c/code\u003e. Then they loop across the set of plugins using a for loop. \u003cem\u003eAnd don\u0026#39;t use the length\u003c/em\u003e! They bound the loop at 15, arbitrarily. Why? No idea- I suspect it\u0026#39;s for the same reason they named the variable \u003ccode\u003eintLoop\u003c/code\u003e and not \u003ccode\u003ei\u003c/code\u003e like a normal human.\u003c/p\u003e\n\u003cp\u003eThen they check to ensure that the entry at \u003ccode\u003eplugins[intLoop]\u003c/code\u003e is not equal to -1. I\u0026#39;m not sure what the expected behavior was here- if you\u0026#39;re accessing an array out of bounds in JavaScript, I\u0026#39;d expect it to return \u003ccode\u003eundefined\u003c/code\u003e. Perhaps some antique version of Internet Explorer did something differently? Sadly plausible.\u003c/p\u003e\n\u003cp\u003eOkay, we\u0026#39;ve found something we believe to be a plugin, because it\u0026#39;s not -1, we\u0026#39;ll grab the \u003ccode\u003eversion\u003c/code\u003e property off of it and… \u003ccode\u003eparseFloat\u003c/code\u003e. On a version number. Which ignores the fact that \u003ccode\u003e1.1\u003c/code\u003e and \u003ccode\u003e1.10\u003c/code\u003e are \u003cem\u003edifferent versions\u003c/em\u003e. Version numbers, like phone numbers, are \u003cem\u003enot actually numbers\u003c/em\u003e. We don\u0026#39;t do arithmetic on them, treat them like text.\u003c/p\u003e\n\u003cp\u003eThat done, we can say \u003ccode\u003eisAcrobatInstalled\u003c/code\u003e is true- despite the fact that we didn\u0026#39;t check to see if this plugin was actually an Acrobat plugin. It could have been Flash. Or QuickTime.\u003c/p\u003e\n\u003cp\u003eThen we break out of the loop. A loop that, I strongly suspect, would only ever have one iteration, because \u003ccode\u003eundefined != -1\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo there we have it: code that doesn\u0026#39;t do what it intends to, and even if it did, is doing it the absolute wrong way, and is also epically deprecated.\u003c/p\u003e\n\u003cp\u003e\n\t[Advertisement] \u003cb\u003ePlan Your .NET 9 Migration with Confidence\u003c/b\u003e\u003cbr/\u003eYour journey to .NET 9 is more than just one decision.Avoid migration migraines with the advice in this free guide. \u003cb\u003e\u003ca href=\"https://inedo.com/support/whitepapers/dotnet-guide?utm_campaign=dotnet\u0026amp;utm_source=tdwtf-footer\"\u003eDownload Free Guide Now!\u003c/a\u003e\u003c/b\u003e\n\u003c/p\u003e\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-11-20T06:30:00Z",
  "modifiedTime": null
}
