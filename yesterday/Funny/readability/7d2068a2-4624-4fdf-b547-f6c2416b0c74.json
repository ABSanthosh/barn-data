{
  "id": "7d2068a2-4624-4fdf-b547-f6c2416b0c74",
  "title": "CodeSOD: The Last Last Name",
  "link": "https://thedailywtf.com/articles/the-last-last-name",
  "description": "Sometimes, you see some code which is perfectly harmless, but illustrates an incredibly dangerous person behind them. The code isn't good, but it isn't bad in any meaningful way, but it was written by a cocaine addled Pomeranian behind the controls of a bulldozer: it's full of energy, doesn't know exactly what's going on, and at some point, it's going to hit something important. Such is the code which Rom치n sends us. public static function registerUser($name, $lastName, $username, ...) { // 100% unmodified first lines, some comments removed $tsCreation = new DateTime(); $user = new User(); $name = $name; $lastname = $lastName; $username = $username; $user-\u003esetUsername($username); $user-\u003esetLastname($lastname); $user-\u003esetName($name); // And so on. } This creates a user object and populates its fields. It doesn't use a meaningful constructor, which is its own problem, but that's not why we're here. We're here because for some reason the developer behind this function assigns some of the parameters to themselves. Why? I don't know, but it's clearly the result of some underlying misunderstanding of how things work. But the real landmine is the $lastname variable- which is an entirely new variable which has slightly different capitalization from $lastName. And you've all heard this song many times, so sing along with the chorus: \"this particular pattern shows up all through the codebase,\" complete with inconsistent capitalization. .comment { border: none; } [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Thu, 03 Jul 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1886,
  "excerpt": "Sometimes, you see some code which is perfectly harmless, but illustrates an incredibly dangerous person behind them. The code isn't good, but it isn't bad in any meaningful way, but it was written by a cocaine addled Pomeranian behind the controls of a bulldozer: it's full of energy, doesn't know exactly what's going on, and at some point, it's going to hit something important. Such is the code which Rom치n sends us.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-07-03 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Sometimes, you see some code which is perfectly harmless, but illustrates an incredibly dangerous person behind them. The code isn't good, but it isn't bad in any meaningful way, but it was written by a cocaine addled Pomeranian behind the controls of a bulldozer: it's full of energy, doesn't know exactly what's going on, and at some point, it's going to hit something important. Such is the code which Rom치n sends us. public static function registerUser($name, $lastName, $username, ...) { // 100% unmodified first lines, some comments removed $tsCreation = new DateTime(); $user = new User(); $name = $name; $lastname = $lastName; $username = $username; $user-\u003esetUsername($username); $user-\u003esetLastname($lastname); $user-\u003esetName($name); // And so on. } This creates a user object and populates its fields. It doesn't use a meaningful constructor, which is its own problem, but that's not why we're here. We're here because for some reason the developer behind this function assigns some of the parameters to themselves. Why? I don't know, but it's clearly the result of some underlying misunderstanding of how things work. But the real landmine is the $lastname variable- which is an entirely new variable which has slightly different capitalization from $lastName. And you've all heard this song many times, so sing along with the chorus: \"this particular pattern shows up all through the codebase,\" complete with inconsistent capitalization. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-07-03\"\u003e2025-07-03\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10952\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eSometimes, you see some code which is perfectly harmless, but illustrates an incredibly dangerous person behind them. The code isn\u0026#39;t \u003cem\u003egood\u003c/em\u003e, but it isn\u0026#39;t \u003cem\u003ebad\u003c/em\u003e in any meaningful way, but it was written by a cocaine addled Pomeranian behind the controls of a bulldozer: it\u0026#39;s full of energy, doesn\u0026#39;t know exactly what\u0026#39;s going on, and at some point, it\u0026#39;s going to hit \u003cem\u003esomething\u003c/em\u003e important.\u003c/p\u003e\n\u003cp\u003eSuch is the code which \u003cstrong\u003eRom치n\u003c/strong\u003e sends us.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003eregisterUser\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$name\u003c/span\u003e, \u003cspan\u003e$lastName\u003c/span\u003e, \u003cspan\u003e$username\u003c/span\u003e, ...\u003c/span\u003e) \u003c/span\u003e{\n    \u003cspan\u003e// 100% unmodified first lines, some comments removed\u003c/span\u003e\n    \u003cspan\u003e$tsCreation\u003c/span\u003e = \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eDateTime\u003c/span\u003e();\n    \u003cspan\u003e$user\u003c/span\u003e = \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eUser\u003c/span\u003e();\n      \n    \u003cspan\u003e$name\u003c/span\u003e = \u003cspan\u003e$name\u003c/span\u003e;\n    \u003cspan\u003e$lastname\u003c/span\u003e = \u003cspan\u003e$lastName\u003c/span\u003e;\n    \u003cspan\u003e$username\u003c/span\u003e = \u003cspan\u003e$username\u003c/span\u003e;\n       \n    \u003cspan\u003e$user\u003c/span\u003e-\u0026gt;\u003cspan\u003esetUsername\u003c/span\u003e(\u003cspan\u003e$username\u003c/span\u003e);\n\t\u003cspan\u003e$user\u003c/span\u003e-\u0026gt;\u003cspan\u003esetLastname\u003c/span\u003e(\u003cspan\u003e$lastname\u003c/span\u003e);\n\t\u003cspan\u003e$user\u003c/span\u003e-\u0026gt;\u003cspan\u003esetName\u003c/span\u003e(\u003cspan\u003e$name\u003c/span\u003e);\n\t\u003cspan\u003e// And so on.\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis creates a user object and populates its fields. It doesn\u0026#39;t use a meaningful constructor, which is its own problem, but that\u0026#39;s not why we\u0026#39;re here. We\u0026#39;re here because for \u003cem\u003esome reason\u003c/em\u003e the developer behind this function assigns some of the parameters to themselves. Why? I don\u0026#39;t know, but it\u0026#39;s clearly the result of some underlying misunderstanding of how things work.\u003c/p\u003e\n\u003cp\u003eBut the real landmine is the \u003ccode\u003e$lastname\u003c/code\u003e variable- which is \u003cem\u003ean entirely new\u003c/em\u003e variable which has slightly different capitalization from \u003ccode\u003e$lastName\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAnd you\u0026#39;ve all heard this song many times, so sing along with the chorus: \u0026#34;this particular pattern shows up all through the codebase,\u0026#34; complete with inconsistent capitalization.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-07-03T06:30:00Z",
  "modifiedTime": null
}
