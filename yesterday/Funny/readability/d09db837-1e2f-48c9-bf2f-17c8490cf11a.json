{
  "id": "d09db837-1e2f-48c9-bf2f-17c8490cf11a",
  "title": "CodeSOD: Single or Mingle",
  "link": "https://thedailywtf.com/articles/single-or-mingle",
  "description": "Singletons is arguably the easiest to understand design pattern, and thus, one of the most frequently implemented design patterns, even- especially- when it isn't necessary. Its simplicity is its weakness. Bartłomiej inherited some code which implemented this pattern many, many times. None of them worked quite correctly, and all of them tried to create a singleton a different way. For example, this one: public class SystemMemorySettings { private static SystemMemorySettings _instance; public SystemMemorySettings() { if (_instance == null) { _instance = this; } } public static SystemMemorySettings GetInstance() { return _instance; } public void DoSomething() { ... // (this must only be done for singleton instance - not for working copy) if (this != _instance) { return; } ... } } The only thing they got correct was the static method which returns an instance, but everything else is wrong. They construct the instance in the constructor, meaning this isn't actually a singleton, since you can construct it multiple times. You just can't use it. And you can't use it because of the real \"magic\" here: DoSomething, which checks if the currently active instance is also the originally constructed instance. If it isn't, this function just fails silently and does nothing. A common critique of singletons is that they're simply \"global variables with extra steps,\" but this doesn't even succeed at that- it's just a failure, top to bottom. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "author": "Remy Porter",
  "published": "Wed, 09 Apr 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1945,
  "excerpt": "Singletons is arguably the easiest to understand design pattern, and thus, one of the most frequently implemented design patterns, even- especially- when it isn't necessary. Its simplicity is its weakness. Bartłomiej inherited some code which implemented this pattern many, many times. None of them worked quite correctly, and all of them tried to create a singleton a different way.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-04-09 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Singletons is arguably the easiest to understand design pattern, and thus, one of the most frequently implemented design patterns, even- especially- when it isn't necessary. Its simplicity is its weakness. Bartłomiej inherited some code which implemented this pattern many, many times. None of them worked quite correctly, and all of them tried to create a singleton a different way. For example, this one: public class SystemMemorySettings { private static SystemMemorySettings _instance; public SystemMemorySettings() { if (_instance == null) { _instance = this; } } public static SystemMemorySettings GetInstance() { return _instance; } public void DoSomething() { ... // (this must only be done for singleton instance - not for working copy) if (this != _instance) { return; } ... } } The only thing they got correct was the static method which returns an instance, but everything else is wrong. They construct the instance in the constructor, meaning this isn't actually a singleton, since you can construct it multiple times. You just can't use it. And you can't use it because of the real \"magic\" here: DoSomething, which checks if the currently active instance is also the originally constructed instance. If it isn't, this function just fails silently and does nothing. A common critique of singletons is that they're simply \"global variables with extra steps,\" but this doesn't even succeed at that- it's just a failure, top to bottom. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-04-09\"\u003e2025-04-09\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10888\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eSingletons is arguably the easiest to understand design pattern, and thus, one of the most frequently implemented design patterns, even- \u003cem\u003eespecially\u003c/em\u003e- when it isn\u0026#39;t necessary. Its simplicity is its weakness.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBartłomiej\u003c/strong\u003e inherited some code which implemented this pattern many, \u003cem\u003emany\u003c/em\u003e times. None of them worked quite correctly, and all of them tried to create a singleton a different way.\u003c/p\u003e\n\u003cp\u003eFor example, this one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eSystemMemorySettings\u003c/span\u003e\n{\n    \u003cspan\u003eprivate\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e SystemMemorySettings _instance;\n\n    \u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eSystemMemorySettings\u003c/span\u003e()\u003c/span\u003e\n    {\n        \u003cspan\u003eif\u003c/span\u003e (_instance == \u003cspan\u003enull\u003c/span\u003e)\n        {\n            _instance = \u003cspan\u003ethis\u003c/span\u003e;\n        }\n    }\n\n    \u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003estatic\u003c/span\u003e SystemMemorySettings \u003cspan\u003eGetInstance\u003c/span\u003e()\u003c/span\u003e\n    {\n        \u003cspan\u003ereturn\u003c/span\u003e _instance;\n    }\n\n    \u003cspan\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003evoid\u003c/span\u003e \u003cspan\u003eDoSomething\u003c/span\u003e()\u003c/span\u003e\n    {\n    ...\n        \u003cspan\u003e// (this must only be done for singleton instance - not for working copy)\u003c/span\u003e\n        \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003ethis\u003c/span\u003e != _instance)\n        {\n            \u003cspan\u003ereturn\u003c/span\u003e;\n        }\n    ...\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe only thing they got correct was the static method which returns an instance, but everything else is wrong. They construct the instance in the constructor, meaning this isn\u0026#39;t actually a singleton, since you can construct it multiple times. You just can\u0026#39;t \u003cem\u003euse\u003c/em\u003e it.\u003c/p\u003e\n\u003cp\u003eAnd you can\u0026#39;t use it because of the real \u0026#34;magic\u0026#34; here: \u003ccode\u003eDoSomething\u003c/code\u003e, which checks if the currently active instance is also the originally constructed instance. If it isn\u0026#39;t, this function just fails silently and does nothing.\u003c/p\u003e\n\u003cp\u003eA common critique of singletons is that they\u0026#39;re simply \u0026#34;global variables with extra steps,\u0026#34; but this doesn\u0026#39;t even succeed at that- it\u0026#39;s just a failure, top to bottom.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep the plebs out of prod. Restrict NuGet feed privileges with ProGet. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-04-09T06:30:00Z",
  "modifiedTime": null
}
