{
  "id": "e5496a4d-3254-4c95-83fa-e790ab54ac8a",
  "title": "CodeSOD: A Secure Item",
  "link": "https://thedailywtf.com/articles/a-secure-item",
  "description": "Kirill writes: I've worked in this small company for a year, and on a daily basis I've come across things that make my eyes sink back into their sockets in fear, but mostly I've been too busy fixing them to post anything. It being my last day however, here's a classic We'll take this one in parts. First, every element of the UI the user can navigate to is marked with an enum, defined thus: enum UiItem { SectionA, SectionB, SectionC,...SectionG } These names are not anonymized, so already I hate it. But it's the next enum that starts my skin crawling: enum SecurityUiItem { SectionA = UiItem.SectionA, SectionB = UiItem.SectionB, ... SectionG = UiItem.SectionG } A SecurityUiItem is a different type, but the values are identical to UiItem. These enums are used when trying to evaluate role-based permissions for access, and that code looks like this: if ((currentAccess.ContainsKey(SecurityUiItem.SectionA) \u0026\u0026 currentAccess[SecurityUiItem.SectionA] != AccessLevel.NoAccess)) return UiItem.SectionA; else if (!currentAccess.ContainsKey(SecurityUiItem.SectionB) || (currentAccess.ContainsKey(SecurityUiItem.SectionB) \u0026\u0026 currentAccess[SecurityUiItem.SectionB] != AccessLevel.NoAccess)) return UiItem.SectionB; else if (!currentAccess.ContainsKey(SecurityUiItem.SectionC) || (currentAccess.ContainsKey(SecurityUiItem.SectionC) \u0026\u0026 currentAccess[SecurityUiItem.SectionC] != AccessLevel.NoAccess)) return UiItem.SectionC; ..... else if (!currentAccess.ContainsKey(SecurityUiItem.SectionG) || (currentAccess.ContainsKey(SecurityUiItem.SectionG) \u0026\u0026 currentAccess[SecurityUiItem.SectionG] != AccessLevel.NoAccess)) return UiItem.SectionG; else return UiItem.Unknown; Honestly, I don't hate the idea of having one data type representing the actual UI objects and a separate data type which represents permissions, and having a function which can map between these two things. But this is a perfect example of a good idea executed poorly. I also have to wonder about the fall-through pattern. If I have access to SectionA, I only seem to get SectionA out of this function. Are these permissions hierarchical? I have no idea, but I suspect there's a WTF underpinning this whole thing. Congratulations on Kirill's last day. [Advertisement] Picking up NuGet is easy. Getting good at it takes time. Download our guide to learn the best practice of NuGet for the Enterprise.",
  "author": "Remy Porter",
  "published": "Thu, 27 Feb 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2549,
  "excerpt": "Kirill writes: I've worked in this small company for a year, and on a daily basis I've come across things that make my eyes sink back into their sockets in fear, but mostly I've been too busy fixing them to post anything. It being my last day however, here's a classic",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-02-27 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Kirill writes: I've worked in this small company for a year, and on a daily basis I've come across things that make my eyes sink back into their sockets in fear, but mostly I've been too busy fixing them to post anything. It being my last day however, here's a classic We'll take this one in parts. First, every element of the UI the user can navigate to is marked with an enum, defined thus: enum UiItem { SectionA, SectionB, SectionC,...SectionG } These names are not anonymized, so already I hate it. But it's the next enum that starts my skin crawling: enum SecurityUiItem { SectionA = UiItem.SectionA, SectionB = UiItem.SectionB, ... SectionG = UiItem.SectionG } A SecurityUiItem is a different type, but the values are identical to UiItem. These enums are used when trying to evaluate role-based permissions for access, and that code looks like this: if ((currentAccess.ContainsKey(SecurityUiItem.SectionA) \u0026\u0026 currentAccess[SecurityUiItem.SectionA] != AccessLevel.NoAccess)) return UiItem.SectionA; else if (!currentAccess.ContainsKey(SecurityUiItem.SectionB) || (currentAccess.ContainsKey(SecurityUiItem.SectionB) \u0026\u0026 currentAccess[SecurityUiItem.SectionB] != AccessLevel.NoAccess)) return UiItem.SectionB; else if (!currentAccess.ContainsKey(SecurityUiItem.SectionC) || (currentAccess.ContainsKey(SecurityUiItem.SectionC) \u0026\u0026 currentAccess[SecurityUiItem.SectionC] != AccessLevel.NoAccess)) return UiItem.SectionC; ..... else if (!currentAccess.ContainsKey(SecurityUiItem.SectionG) || (currentAccess.ContainsKey(SecurityUiItem.SectionG) \u0026\u0026 currentAccess[SecurityUiItem.SectionG] != AccessLevel.NoAccess)) return UiItem.SectionG; else return UiItem.Unknown; Honestly, I don't hate the idea of having one data type representing the actual UI objects and a separate data type which represents permissions, and having a function which can map between these two things. But this is a perfect example of a good idea executed poorly. I also have to wonder about the fall-through pattern. If I have access to SectionA, I only seem to get SectionA out of this function. Are these permissions hierarchical? I have no idea, but I suspect there's a WTF underpinning this whole thing. Congratulations on Kirill's last day.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-02-27\"\u003e2025-02-27\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10858\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eKirill\u003c/strong\u003e writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI\u0026#39;ve worked in this small company for a year, and on a daily basis I\u0026#39;ve come across things that make my eyes sink back into their sockets in fear, but mostly I\u0026#39;ve been too busy fixing them to post anything. It being my last day however, here\u0026#39;s a classic\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWe\u0026#39;ll take this one in parts. First, every element of the UI the user can navigate to is marked with an enum, defined thus:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eenum\u003c/span\u003e UiItem\n{ SectionA, SectionB, SectionC,...SectionG }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThese names are not anonymized, so already I hate it. But it\u0026#39;s the \u003cem\u003enext\u003c/em\u003e enum that starts my skin crawling:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eenum\u003c/span\u003e SecurityUiItem\n{\n  SectionA = UiItem.SectionA,\n  SectionB = UiItem.SectionB,\n  ...\n  SectionG = UiItem.SectionG\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA \u003ccode\u003eSecurityUiItem\u003c/code\u003e is a different type, but the values are identical to \u003ccode\u003eUiItem\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThese enums are used when trying to evaluate role-based permissions for access, and that code looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e ((currentAccess.ContainsKey(SecurityUiItem.SectionA) \u0026amp;\u0026amp; currentAccess[SecurityUiItem.SectionA] != AccessLevel.NoAccess))\n        \u003cspan\u003ereturn\u003c/span\u003e UiItem.SectionA;\n\u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e (!currentAccess.ContainsKey(SecurityUiItem.SectionB)\n        || (currentAccess.ContainsKey(SecurityUiItem.SectionB) \u0026amp;\u0026amp; currentAccess[SecurityUiItem.SectionB] != AccessLevel.NoAccess))\n        \u003cspan\u003ereturn\u003c/span\u003e UiItem.SectionB;\n\u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e (!currentAccess.ContainsKey(SecurityUiItem.SectionC)\n        || (currentAccess.ContainsKey(SecurityUiItem.SectionC) \u0026amp;\u0026amp; currentAccess[SecurityUiItem.SectionC] != AccessLevel.NoAccess))\n        \u003cspan\u003ereturn\u003c/span\u003e UiItem.SectionC;\n.....\n\u003cspan\u003eelse\u003c/span\u003e \u003cspan\u003eif\u003c/span\u003e (!currentAccess.ContainsKey(SecurityUiItem.SectionG)\n        || (currentAccess.ContainsKey(SecurityUiItem.SectionG) \u0026amp;\u0026amp; currentAccess[SecurityUiItem.SectionG] != AccessLevel.NoAccess))\n        \u003cspan\u003ereturn\u003c/span\u003e UiItem.SectionG;\n\u003cspan\u003eelse\u003c/span\u003e\n        \u003cspan\u003ereturn\u003c/span\u003e UiItem.Unknown;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHonestly, I don\u0026#39;t hate the idea of having one data type representing the actual UI objects and a separate data type which represents permissions, \u003cem\u003eand\u003c/em\u003e having a function which can map between these two things. But this is a perfect example of a good idea executed poorly.\u003c/p\u003e\n\u003cp\u003eI also have to wonder about the fall-through pattern. If I have access to \u003ccode\u003eSectionA\u003c/code\u003e, I only seem to get \u003ccode\u003eSectionA\u003c/code\u003e out of this function. Are these permissions hierarchical? I have no idea, but I suspect there\u0026#39;s a WTF underpinning this whole thing.\u003c/p\u003e\n\u003cp\u003eCongratulations on Kirill\u0026#39;s last day.\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-02-27T06:30:00Z",
  "modifiedTime": null
}
