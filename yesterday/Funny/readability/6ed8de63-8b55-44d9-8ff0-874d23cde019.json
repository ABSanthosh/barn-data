{
  "id": "6ed8de63-8b55-44d9-8ff0-874d23cde019",
  "title": "CodeSOD: A Set of Mistakes",
  "link": "https://thedailywtf.com/articles/a-set-of-mistakes",
  "description": "One of the long-tenured developers, Douglas at Patrick's company left, which meant Patrick was called upon to pick up that share of the work. The code left behind by Douglas the departing developer was, well… code. For example, this block of Java: private String[] getDomainId(Collection particularCase) { // Get all domainId Collection ids = new ArrayList(); for (ParticularCaseEntity case : particularCase) { ids.add(case.getDomainId()); } Set domainIdsWithoutRepeat = new HashSet(); domainIdsWithoutRepeat.addAll(ids); Collection domainIds = new ArrayList(); for (String domainId : domainIdsWithoutRepeat) { domainIds.add(domainId); } return domainIds.toArray(new String[0]); } The purpose of this code is to get a set of \"domain IDs\"- a set, specifically, because we want them without duplicates. And this code takes the long way around to do it. First, it returns a String[]- but logically, what it should return is a set. Maybe it's meant to comply with an external interface, but it's a private method- so I actually think this developer just didn't understand collection types at all. And I have more evidence for that, which is the rest of this code. We iterate across our ParticularCaseEntitys, and add each one to an array list. Then we create a hash set, and add all of those to a hash set. Then we create another array list, and add each entry in the set to the array list. Then we convert that array list into an array so we can return it. At most, we really only needed the HashSet. But this gives us a nice tour of all the wrong data structures to use for this problem, which is helpful. Speaking of helpful, it didn't take long for Patrick's employer to realize that having Patrick doing his job, and also picking up the work that Douglas used to do was bad. So they opened a new position, at a higher pay grade, hoping to induce a more senior developer to step in. And wouldn't you know, after 6 months, they found a perfect candidate, who had just finished a short six month stint at one of their competitors: Douglas! .comment { border: none; } [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Wed, 11 Dec 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2572,
  "excerpt": "One of the long-tenured developers, Douglas at Patrick's company left, which meant Patrick was called upon to pick up that share of the work. The code left behind by Douglas the departing developer was, well… code. For example, this block of Java:",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-12-11 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. One of the long-tenured developers, Douglas at Patrick's company left, which meant Patrick was called upon to pick up that share of the work. The code left behind by Douglas the departing developer was, well… code. For example, this block of Java: private String[] getDomainId(Collection\u003cParticularCaseEntity\u003e particularCase) { // Get all domainId Collection\u003cString\u003e ids = new ArrayList\u003cString\u003e(); for (ParticularCaseEntity case : particularCase) { ids.add(case.getDomainId()); } Set\u003cString\u003e domainIdsWithoutRepeat = new HashSet\u003cString\u003e(); domainIdsWithoutRepeat.addAll(ids); Collection\u003cString\u003e domainIds = new ArrayList\u003cString\u003e(); for (String domainId : domainIdsWithoutRepeat) { domainIds.add(domainId); } return domainIds.toArray(new String[0]); } The purpose of this code is to get a set of \"domain IDs\"- a set, specifically, because we want them without duplicates. And this code takes the long way around to do it. First, it returns a String[]- but logically, what it should return is a set. Maybe it's meant to comply with an external interface, but it's a private method- so I actually think this developer just didn't understand collection types at all. And I have more evidence for that, which is the rest of this code. We iterate across our ParticularCaseEntitys, and add each one to an array list. Then we create a hash set, and add all of those to a hash set. Then we create another array list, and add each entry in the set to the array list. Then we convert that array list into an array so we can return it. At most, we really only needed the HashSet. But this gives us a nice tour of all the wrong data structures to use for this problem, which is helpful. Speaking of helpful, it didn't take long for Patrick's employer to realize that having Patrick doing his job, and also picking up the work that Douglas used to do was bad. So they opened a new position, at a higher pay grade, hoping to induce a more senior developer to step in. And wouldn't you know, after 6 months, they found a perfect candidate, who had just finished a short six month stint at one of their competitors: Douglas! [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-12-11\"\u003e2024-12-11\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10801\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eOne of the long-tenured developers, Douglas at \u003cstrong\u003ePatrick\u003c/strong\u003e\u0026#39;s company left, which meant Patrick was called upon to pick up that share of the work. The code left behind by Douglas the departing developer was, well… code.\u003c/p\u003e\n\u003cp\u003eFor example, this block of Java: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eprivate\u003c/span\u003e String[] \u003cspan\u003egetDomainId\u003c/span\u003e(\u003cspan\u003eCollection\u0026lt;ParticularCaseEntity\u0026gt; particularCase\u003c/span\u003e)\u003c/span\u003e {\n       \n    \u003cspan\u003e// Get all domainId\u003c/span\u003e\n    Collection\u0026lt;String\u0026gt; ids = \u003cspan\u003enew\u003c/span\u003e ArrayList\u0026lt;String\u0026gt;();\n    \u003cspan\u003efor\u003c/span\u003e (ParticularCaseEntity \u003cspan\u003ecase\u003c/span\u003e : particularCase) {\n        ids.\u003cspan\u003eadd\u003c/span\u003e(\u003cspan\u003ecase\u003c/span\u003e.getDomainId());\n    }\n\n    Set\u0026lt;String\u0026gt; domainIdsWithoutRepeat = \u003cspan\u003enew\u003c/span\u003e HashSet\u0026lt;String\u0026gt;();\n    domainIdsWithoutRepeat.addAll(ids);\n\n    Collection\u0026lt;String\u0026gt; domainIds = \u003cspan\u003enew\u003c/span\u003e ArrayList\u0026lt;String\u0026gt;();\n    \u003cspan\u003efor\u003c/span\u003e (String domainId : domainIdsWithoutRepeat) {\n        domainIds.\u003cspan\u003eadd\u003c/span\u003e(domainId);\n    }\n    \u003cspan\u003ereturn\u003c/span\u003e domainIds.toArray(\u003cspan\u003enew\u003c/span\u003e String[\u003cspan\u003e0\u003c/span\u003e]);       \n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe purpose of this code is to get a set of \u0026#34;domain IDs\u0026#34;- a \u003cem\u003eset\u003c/em\u003e, specifically, because we want them without duplicates. And this code takes the long way around to do it.\u003c/p\u003e\n\u003cp\u003eFirst, it returns a \u003ccode\u003eString[]\u003c/code\u003e- but logically, what it should return is a set. Maybe it\u0026#39;s meant to comply with an external interface, but it\u0026#39;s a \u003ccode\u003eprivate\u003c/code\u003e method- so I actually think this developer just didn\u0026#39;t understand collection types at all.\u003c/p\u003e\n\u003cp\u003eAnd I have more evidence for that, which is the rest of this code.\u003c/p\u003e\n\u003cp\u003eWe iterate across our \u003ccode\u003eParticularCaseEntity\u003c/code\u003es, and add each one to an array list. Then we create a hash set, and add all of those to a hash set. Then we create \u003cem\u003eanother\u003c/em\u003e array list, and add each entry in the set to the array list. \u003cem\u003eThen\u003c/em\u003e we convert that array list into an array so we can return it.\u003c/p\u003e\n\u003cp\u003eAt most, we really only needed the \u003ccode\u003eHashSet\u003c/code\u003e. But this gives us a nice tour of all the wrong data structures to use for this problem, which is helpful.\u003c/p\u003e\n\u003cp\u003eSpeaking of helpful, it didn\u0026#39;t take long for Patrick\u0026#39;s employer to realize that having Patrick doing \u003cem\u003ehis\u003c/em\u003e job, and also picking up the work that Douglas used to do was bad. So they opened a new position, at a higher pay grade, hoping to induce a more senior developer to step in. And wouldn\u0026#39;t you know, after 6 months, they found a perfect candidate, who had just finished a short six month stint at one of their competitors: Douglas!\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-12-11T06:30:00Z",
  "modifiedTime": null
}
