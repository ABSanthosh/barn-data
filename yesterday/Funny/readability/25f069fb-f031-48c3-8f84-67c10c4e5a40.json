{
  "id": "25f069fb-f031-48c3-8f84-67c10c4e5a40",
  "title": "CodeSOD: Objectified",
  "link": "https://thedailywtf.com/articles/objectified",
  "description": "Simon recently found himself working alongside a \"very senior\" developer- who had a whopping 5 years of experience. This developer was also aggrieved that in recent years, Object Oriented programming had developed a bad reputation. \"Functional this, functional that, people really just don't understand how clean and clear objects make your code.\" For example, here are a few Java objects which they wrote to power a web scraping tool: class UrlHolder { private String url; public UrlHolder(String url) { this.url = url; } } class UrlDownloader { private UrlHolder url; public String downloadPage; public UrlDownLoader(String url) { this.url = new UrlHolder(Url); } } class UrlLinkExtractor { private UrlDownloader url; public UrlLinkExtractor(UrlDownloader url) { this.url = url; } public String[] extract() { String page = Url.downloadPage; ... } } UrlHolder is just a wrapper around string, but also makes that string private and provides no accessors. Anything shoved into an instance of that may as well be thrown into oblivion. UrlDownloader wraps a UrlHolder, again, as a private member with no accessors. It also has a random public string called downloadPage. UrlLinkExtractor wraps a UrlDownloader, and at least UrlLinkExtractor has a function- which presumably downloads the page. It uses UrlDownloader#downloadPage- the public string property. It doesn't use the UrlHolder, because of course it couldn't. The entire goal of this code is to pass a string to the extract function. I guess I don't understand object oriented programming. I thought I did, but after reading this code, I don't. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "author": "Remy Porter",
  "published": "Mon, 18 Nov 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2229,
  "excerpt": "Simon recently found himself working alongside a \"very senior\" developer- who had a whopping 5 years of experience. This developer was also aggrieved that in recent years, Object Oriented programming had developed a bad reputation. \"Functional this, functional that, people really just don't understand how clean and clear objects make your code.\" For example, here are a few Java objects which they wrote to power a web scraping tool:",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-11-18 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Simon recently found himself working alongside a \"very senior\" developer- who had a whopping 5 years of experience. This developer was also aggrieved that in recent years, Object Oriented programming had developed a bad reputation. \"Functional this, functional that, people really just don't understand how clean and clear objects make your code.\" For example, here are a few Java objects which they wrote to power a web scraping tool: class UrlHolder { private String url; public UrlHolder(String url) { this.url = url; } } class UrlDownloader { private UrlHolder url; public String downloadPage; public UrlDownLoader(String url) { this.url = new UrlHolder(Url); } } class UrlLinkExtractor { private UrlDownloader url; public UrlLinkExtractor(UrlDownloader url) { this.url = url; } public String[] extract() { String page = Url.downloadPage; ... } } UrlHolder is just a wrapper around string, but also makes that string private and provides no accessors. Anything shoved into an instance of that may as well be thrown into oblivion. UrlDownloader wraps a UrlHolder, again, as a private member with no accessors. It also has a random public string called downloadPage. UrlLinkExtractor wraps a UrlDownloader, and at least UrlLinkExtractor has a function- which presumably downloads the page. It uses UrlDownloader#downloadPage- the public string property. It doesn't use the UrlHolder, because of course it couldn't. The entire goal of this code is to pass a string to the extract function. I guess I don't understand object oriented programming. I thought I did, but after reading this code, I don't. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-11-18\"\u003e2024-11-18\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10783\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eSimon\u003c/strong\u003e recently found himself working alongside a \u0026#34;very senior\u0026#34; developer- who had a whopping 5 years of experience. This developer was also aggrieved that in recent years, Object Oriented programming had developed a bad reputation. \u0026#34;Functional this, functional that, people really just don\u0026#39;t understand how clean and clear objects make your code.\u0026#34;\u003c/p\u003e\n\u003cp\u003eFor example, here are a few Java objects which they wrote to power a web scraping tool:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eUrlHolder\u003c/span\u003e {\n\n    \u003cspan\u003eprivate\u003c/span\u003e String url;\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eUrlHolder\u003c/span\u003e\u003cspan\u003e(String url)\u003c/span\u003e {\n        \u003cspan\u003ethis\u003c/span\u003e.url = url;\n    }\n}\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eUrlDownloader\u003c/span\u003e {\n\n    \u003cspan\u003eprivate\u003c/span\u003e UrlHolder url;\n    \u003cspan\u003epublic\u003c/span\u003e String downloadPage;\n\n    \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eUrlDownLoader\u003c/span\u003e\u003cspan\u003e(String url)\u003c/span\u003e {\n        \u003cspan\u003ethis\u003c/span\u003e.url = \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eUrlHolder\u003c/span\u003e(Url);\n    }\n}\n\n\u003cspan\u003eclass\u003c/span\u003e \u003cspan\u003eUrlLinkExtractor\u003c/span\u003e {\n\n   \u003cspan\u003eprivate\u003c/span\u003e UrlDownloader url;\n\n   \u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003eUrlLinkExtractor\u003c/span\u003e\u003cspan\u003e(UrlDownloader url)\u003c/span\u003e {\n        \u003cspan\u003ethis\u003c/span\u003e.url = url;\n   }\n\n   \u003cspan\u003epublic\u003c/span\u003e String[] extract() {\n       \u003cspan\u003eString\u003c/span\u003e \u003cspan\u003epage\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e Url.downloadPage;\n       ...\n   }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eUrlHolder\u003c/code\u003e is just a wrapper around string, but also makes that string private and provides no accessors. Anything shoved into an instance of that may as well be thrown into oblivion.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eUrlDownloader\u003c/code\u003e wraps a \u003ccode\u003eUrlHolder\u003c/code\u003e, again, \u003cem\u003eas a private member with no accessors\u003c/em\u003e. It also has a random public string called \u003ccode\u003edownloadPage\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eUrlLinkExtractor\u003c/code\u003e wraps a \u003ccode\u003eUrlDownloader\u003c/code\u003e, and at least \u003ccode\u003eUrlLinkExtractor\u003c/code\u003e has a function- which presumably downloads the page. It uses \u003ccode\u003eUrlDownloader#downloadPage\u003c/code\u003e- the public string property. It doesn\u0026#39;t use the \u003ccode\u003eUrlHolder\u003c/code\u003e, because of course it couldn\u0026#39;t. The entire goal of this code is to pass a string to the \u003ccode\u003eextract\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003eI guess \u003cem\u003eI\u003c/em\u003e don\u0026#39;t understand object oriented programming. I thought I did, but after reading this code, I don\u0026#39;t.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.\u003ca href=\"https://inedo.com/proget?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2024-11-18T06:30:00Z",
  "modifiedTime": null
}
