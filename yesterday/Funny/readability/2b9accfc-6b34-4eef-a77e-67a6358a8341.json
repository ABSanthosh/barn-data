{
  "id": "2b9accfc-6b34-4eef-a77e-67a6358a8341",
  "title": "CodeSOD: Every Day",
  "link": "https://thedailywtf.com/articles/every-day",
  "description": "There are real advantages to taking a functional programming approach to expressing problems. Well, some problems, anyway. Kevin sends us this example of elegant, beautiful functional code in C#: //create a range of dates List dates = Enumerable.Range (0, 1 + settings.EndDate.Subtract (settings.BeginDate).Days).Select (offset =\u003e settings.BeginDate.AddDays(offset)).ToList(); foreach (DateTime procDate in dates) { /*.snip.*/ } If you're not sure what this code does, it's okay- Kevin rewrote it and \"ruined\" it: DateTime procDate = settings.BeginDate; while(procDate \u003c= settings.EndDate) { /*.snip.*/ procDate= procDate.AddDays(1); } The goal of this code is simply to do something for every day within a range of dates. These two approaches vary a bit in terms of readability though. I guess the loop in the functional version isn't mutating anything, I suppose. But honestly, I'm surprised that this didn't take the extra step of using the .ForEach function (which takes a lambda and applies it to each parameter). Heck, with that approach, they could have done this whole thing in a single statement. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "author": "Remy Porter",
  "published": "Thu, 20 Feb 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 1663,
  "excerpt": "There are real advantages to taking a functional programming approach to expressing problems. Well, some problems, anyway. Kevin sends us this example of elegant, beautiful functional code in C#:",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-02-20 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. There are real advantages to taking a functional programming approach to expressing problems. Well, some problems, anyway. Kevin sends us this example of elegant, beautiful functional code in C#: //create a range of dates List\u003cDateTime\u003e dates = Enumerable.Range (0, 1 + settings.EndDate.Subtract (settings.BeginDate).Days).Select (offset =\u003e settings.BeginDate.AddDays(offset)).ToList(); foreach (DateTime procDate in dates) { /*.snip.*/ } If you're not sure what this code does, it's okay- Kevin rewrote it and \"ruined\" it: DateTime procDate = settings.BeginDate; while(procDate \u003c= settings.EndDate) { /*.snip.*/ procDate= procDate.AddDays(1); } The goal of this code is simply to do something for every day within a range of dates. These two approaches vary a bit in terms of readability though. I guess the loop in the functional version isn't mutating anything, I suppose. But honestly, I'm surprised that this didn't take the extra step of using the .ForEach function (which takes a lambda and applies it to each parameter). Heck, with that approach, they could have done this whole thing in a single statement. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-02-20\"\u003e2025-02-20\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10853\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eThere are real advantages to taking a functional programming approach to expressing problems. Well, some problems, anyway.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eKevin\u003c/strong\u003e sends us this example of elegant, beautiful functional code in C#:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e//create a range of dates\u003c/span\u003e\nList\u0026lt;DateTime\u0026gt; dates = Enumerable.Range\n  (\u003cspan\u003e0\u003c/span\u003e, \u003cspan\u003e1\u003c/span\u003e + settings.EndDate.Subtract   \n  (settings.BeginDate).Days).Select\n  (offset =\u0026gt; settings.BeginDate.AddDays(offset)).ToList();\n\u003cspan\u003eforeach\u003c/span\u003e (DateTime procDate \u003cspan\u003ein\u003c/span\u003e dates)\n{\n\u003cspan\u003e/*.snip.*/\u003c/span\u003e\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you\u0026#39;re not sure what this code does, it\u0026#39;s okay- Kevin rewrote it and \u0026#34;ruined\u0026#34; it:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDateTime procDate = settings.BeginDate;\n\u003cspan\u003ewhile\u003c/span\u003e(procDate \u0026lt;= settings.EndDate)\n{\n\u003cspan\u003e/*.snip.*/\u003c/span\u003e\nprocDate= procDate.AddDays(\u003cspan\u003e1\u003c/span\u003e);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe goal of this code is simply to do something for every day within a range of dates. These two approaches vary a bit in terms of readability though.\u003c/p\u003e\n\u003cp\u003eI guess the loop in the functional version isn\u0026#39;t mutating anything, I suppose. But honestly, I\u0026#39;m surprised that this didn\u0026#39;t take the extra step of using the \u003ccode\u003e.ForEach\u003c/code\u003e function (which takes a lambda and applies it to each parameter). Heck, with that approach, they could have done this whole thing in a single statement.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.\u003ca href=\"https://inedo.com/proget?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-02-20T06:30:00Z",
  "modifiedTime": null
}
