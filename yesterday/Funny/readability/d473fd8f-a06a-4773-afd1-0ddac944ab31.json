{
  "id": "d473fd8f-a06a-4773-afd1-0ddac944ab31",
  "title": "CodeSOD: Join Our Naming",
  "link": "https://thedailywtf.com/articles/join-our-naming",
  "description": "As a general rule, if you're using an RDBMS and can solve your problem using SQL, you should solve your problem using SQL. It's how we avoid doing joins or sorts in our application code, which is always a good thing. But this is a general rule. And Jasmine sends us one where solving the problem as a query was a bad idea. ALTER FUNCTION [dbo].[GetName](@EntityID int) RETURNS varchar(200) AS BEGIN declare @Name varchar(200) select @Name = case E.EntityType when 'Application' then A.ApplicationName when 'Automation' then 'Automated Process' when 'Group' then G.GroupName when 'Organization' then O.OrgName when 'Person' then P.FirstName + ' ' + P.LastName when 'Resource' then R.ResourceName when 'Batch' then B.BatchComment end from Entities E left join AP_Applications A on E.EntityID = A.EntityID left join CN_Groups G on E.EntityID = G.EntityID left join CN_Organizations O on E.EntityID = O.EntityID left join CN_People P on E.EntityID = P.EntityID left join Resources R on E.EntityID = R.EntityID left join AR_PaymentBatches B on E.EntityID = B.EntityID where E.EntityID = @EntityID return @Name END The purpose of this function is to look up the name of an entity. Depending on the kind of entity we're talking about, we have to pull that name from a different table. This is a very common pattern in database normalization- a database equivalent of inheritance. All the common fields to all entities get stored in an Entities table, while specific classes of entity (like \"Applications\") get their own table which joins back to the Entities table. On the surface, this code doesn't even really look like a WTF. By the book, this is really how you'd write this kind of function- if we were going by the book. But the problem was that these tables were frequently very large, and even with indexes on the EntityID fields, it simply performed horribly. And since \"showing the name of the thing you're looking at\" was a common query, that performance hit added up. The fix was easy- write out seven unique functions- one for each entity type- and then re-write this function to use an IF statement to decide which one to execute. The code was simpler to understand and read, and performed much faster. In the end, perhaps not really a WTF, or perhaps the root WTF is some of the architectural decisions which allow this to exist (why a function for getting the name, and the name alone, which means we execute this query independently and not part of a more meaningful join?). But I think it's an interesting example of how \"this is the right way to do it\" can lead to some unusual outcomes. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Thu, 24 Oct 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 3083,
  "excerpt": "As a general rule, if you're using an RDBMS and can solve your problem using SQL, you should solve your problem using SQL. It's how we avoid doing joins or sorts in our application code, which is always a good thing. But this is a general rule. And Jasmine sends us one where solving the problem as a query was a bad idea.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-10-24 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. As a general rule, if you're using an RDBMS and can solve your problem using SQL, you should solve your problem using SQL. It's how we avoid doing joins or sorts in our application code, which is always a good thing. But this is a general rule. And Jasmine sends us one where solving the problem as a query was a bad idea. ALTER FUNCTION [dbo].[GetName](@EntityID int) RETURNS varchar(200) AS BEGIN declare @Name varchar(200) select @Name = case E.EntityType when 'Application' then A.ApplicationName when 'Automation' then 'Automated Process' when 'Group' then G.GroupName when 'Organization' then O.OrgName when 'Person' then P.FirstName + ' ' + P.LastName when 'Resource' then R.ResourceName when 'Batch' then B.BatchComment end from Entities E left join AP_Applications A on E.EntityID = A.EntityID left join CN_Groups G on E.EntityID = G.EntityID left join CN_Organizations O on E.EntityID = O.EntityID left join CN_People P on E.EntityID = P.EntityID left join Resources R on E.EntityID = R.EntityID left join AR_PaymentBatches B on E.EntityID = B.EntityID where E.EntityID = @EntityID return @Name END The purpose of this function is to look up the name of an entity. Depending on the kind of entity we're talking about, we have to pull that name from a different table. This is a very common pattern in database normalization- a database equivalent of inheritance. All the common fields to all entities get stored in an Entities table, while specific classes of entity (like \"Applications\") get their own table which joins back to the Entities table. On the surface, this code doesn't even really look like a WTF. By the book, this is really how you'd write this kind of function- if we were going by the book. But the problem was that these tables were frequently very large, and even with indexes on the EntityID fields, it simply performed horribly. And since \"showing the name of the thing you're looking at\" was a common query, that performance hit added up. The fix was easy- write out seven unique functions- one for each entity type- and then re-write this function to use an IF statement to decide which one to execute. The code was simpler to understand and read, and performed much faster. In the end, perhaps not really a WTF, or perhaps the root WTF is some of the architectural decisions which allow this to exist (why a function for getting the name, and the name alone, which means we execute this query independently and not part of a more meaningful join?). But I think it's an interesting example of how \"this is the right way to do it\" can lead to some unusual outcomes. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-10-24\"\u003e2024-10-24\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10766\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eAs a general rule, if you\u0026#39;re using an RDBMS and can solve your problem using SQL, you \u003cem\u003eshould\u003c/em\u003e solve your problem using SQL. It\u0026#39;s how we avoid doing joins or sorts in our application code, which is always a good thing.\u003c/p\u003e\n\u003cp\u003eBut this is a \u003cem\u003egeneral\u003c/em\u003e rule. And \u003cstrong\u003eJasmine\u003c/strong\u003e sends us one where solving the problem as a query was a bad idea.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eALTER\u003c/span\u003e   \u003cspan\u003eFUNCTION\u003c/span\u003e [dbo].[GetName](\u003cspan\u003e@EntityID\u003c/span\u003e \u003cspan\u003eint\u003c/span\u003e)\n\n\u003cspan\u003eRETURNS\u003c/span\u003e \u003cspan\u003evarchar\u003c/span\u003e(\u003cspan\u003e200\u003c/span\u003e)\n\n\u003cspan\u003eAS\u003c/span\u003e\n\n\u003cspan\u003eBEGIN\u003c/span\u003e\n\n\u003cspan\u003edeclare\u003c/span\u003e \u003cspan\u003e@Name\u003c/span\u003e \u003cspan\u003evarchar\u003c/span\u003e(\u003cspan\u003e200\u003c/span\u003e)\n\n\u003cspan\u003eselect\u003c/span\u003e \u003cspan\u003e@Name\u003c/span\u003e \u003cspan\u003e=\u003c/span\u003e\n  \u003cspan\u003ecase\u003c/span\u003e E.EntityType\n    \u003cspan\u003ewhen\u003c/span\u003e \u003cspan\u003e\u0026#39;Application\u0026#39;\u003c/span\u003e  \u003cspan\u003ethen\u003c/span\u003e A.ApplicationName\n    \u003cspan\u003ewhen\u003c/span\u003e \u003cspan\u003e\u0026#39;Automation\u0026#39;\u003c/span\u003e   \u003cspan\u003ethen\u003c/span\u003e \u003cspan\u003e\u0026#39;Automated Process\u0026#39;\u003c/span\u003e\n    \u003cspan\u003ewhen\u003c/span\u003e \u003cspan\u003e\u0026#39;Group\u0026#39;\u003c/span\u003e        \u003cspan\u003ethen\u003c/span\u003e G.GroupName\n    \u003cspan\u003ewhen\u003c/span\u003e \u003cspan\u003e\u0026#39;Organization\u0026#39;\u003c/span\u003e \u003cspan\u003ethen\u003c/span\u003e O.OrgName\n    \u003cspan\u003ewhen\u003c/span\u003e \u003cspan\u003e\u0026#39;Person\u0026#39;\u003c/span\u003e       \u003cspan\u003ethen\u003c/span\u003e P.FirstName \u003cspan\u003e+\u003c/span\u003e \u003cspan\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan\u003e+\u003c/span\u003e P.LastName\n    \u003cspan\u003ewhen\u003c/span\u003e \u003cspan\u003e\u0026#39;Resource\u0026#39;\u003c/span\u003e     \u003cspan\u003ethen\u003c/span\u003e R.ResourceName\n    \u003cspan\u003ewhen\u003c/span\u003e \u003cspan\u003e\u0026#39;Batch\u0026#39;\u003c/span\u003e        \u003cspan\u003ethen\u003c/span\u003e B.BatchComment\n  \u003cspan\u003eend\u003c/span\u003e\n\u003cspan\u003efrom\u003c/span\u003e Entities E\n\u003cspan\u003eleft\u003c/span\u003e \u003cspan\u003ejoin\u003c/span\u003e AP_Applications A   \u003cspan\u003eon\u003c/span\u003e E.EntityID \u003cspan\u003e=\u003c/span\u003e A.EntityID\n\u003cspan\u003eleft\u003c/span\u003e \u003cspan\u003ejoin\u003c/span\u003e CN_Groups G         \u003cspan\u003eon\u003c/span\u003e E.EntityID \u003cspan\u003e=\u003c/span\u003e G.EntityID\n\u003cspan\u003eleft\u003c/span\u003e \u003cspan\u003ejoin\u003c/span\u003e CN_Organizations O  \u003cspan\u003eon\u003c/span\u003e E.EntityID \u003cspan\u003e=\u003c/span\u003e O.EntityID\n\u003cspan\u003eleft\u003c/span\u003e \u003cspan\u003ejoin\u003c/span\u003e CN_People P         \u003cspan\u003eon\u003c/span\u003e E.EntityID \u003cspan\u003e=\u003c/span\u003e P.EntityID\n\u003cspan\u003eleft\u003c/span\u003e \u003cspan\u003ejoin\u003c/span\u003e Resources R         \u003cspan\u003eon\u003c/span\u003e E.EntityID \u003cspan\u003e=\u003c/span\u003e R.EntityID\n\u003cspan\u003eleft\u003c/span\u003e \u003cspan\u003ejoin\u003c/span\u003e AR_PaymentBatches B \u003cspan\u003eon\u003c/span\u003e E.EntityID \u003cspan\u003e=\u003c/span\u003e B.EntityID\n\u003cspan\u003ewhere\u003c/span\u003e E.EntityID \u003cspan\u003e=\u003c/span\u003e \u003cspan\u003e@EntityID\u003c/span\u003e\n\n\u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e@Name\u003c/span\u003e\n\n\u003cspan\u003eEND\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe purpose of this function is to look up the name of an entity. Depending on the kind of entity we\u0026#39;re talking about, we have to pull that name from a different table. This is a very common pattern in database normalization- a database equivalent of inheritance. All the common fields to all entities get stored in an \u003ccode\u003eEntities\u003c/code\u003e table, while specific classes of entity (like \u0026#34;Applications\u0026#34;) get their own table which joins back to the \u003ccode\u003eEntities\u003c/code\u003e table.\u003c/p\u003e\n\u003cp\u003eOn the surface, this code doesn\u0026#39;t even really look like a WTF. By the book, this is really how you\u0026#39;d write this kind of function- if we were going by the book.\u003c/p\u003e\n\u003cp\u003eBut the problem was that these tables were frequently very large, and even with indexes on the \u003ccode\u003eEntityID\u003c/code\u003e fields, it simply performed \u003cem\u003ehorribly\u003c/em\u003e. And since \u0026#34;showing the name of the thing you\u0026#39;re looking at\u0026#34; was a \u003cem\u003ecommon\u003c/em\u003e query, that performance hit added up.\u003c/p\u003e\n\u003cp\u003eThe fix was easy- write out seven unique functions- one for each entity type- and then re-write this function to use an \u003ccode\u003eIF\u003c/code\u003e statement to decide which one to execute. The code was simpler to understand and read, and performed much faster.\u003c/p\u003e\n\u003cp\u003eIn the end, perhaps not really a WTF, or perhaps the root WTF is some of the architectural decisions which allow this to exist (why a function for getting the name, and the name alone, which means we execute this query independently and not part of a more meaningful join?). But I think it\u0026#39;s an interesting example of how \u0026#34;this is the right way to do it\u0026#34; can lead to some unusual outcomes.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2024-10-24T06:30:00Z",
  "modifiedTime": null
}
