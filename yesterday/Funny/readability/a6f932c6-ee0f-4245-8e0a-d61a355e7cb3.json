{
  "id": "a6f932c6-ee0f-4245-8e0a-d61a355e7cb3",
  "title": "CodeSOD: The 5-Digit Session Identifier",
  "link": "https://thedailywtf.com/articles/the-5-digit-session-identifier",
  "description": "Sawyer was talking with a co-worker about how their unique session IDs got created. The concern was that they were only five characters long, which meant there could easily be collisions. They started by looking at the random number generation function. Public Function RandomNumberGenerator(ByVal min As Integer, ByVal max As Integer, Optional ByVal numDecimals As Integer = 0) As String '*** the generates a number as a string Dim strNum As New StringBuilder Dim rnd As New System.Random Dim i, x, n As Integer Try i = rnd.Next(min, max) If numDecimals \u003e 0 Then Try strNum.Append(\"9\", numDecimals) n = CType(strNum.ToString, Int32) x = rnd.Next(0, n) Catch ex As Exception x = 1 End Try End If strNum.Remove(0, strNum.Length) strNum.Append(i.ToString()) If numDecimals \u003e 0 Then strNum.Append(\".\") If numDecimals \u003e 99 Then numDecimals = 99 End If strNum.Append(x.ToString(\"D\" \u0026 numDecimals.ToString())) End If Return strNum.ToString Catch Return \"1.00\" End Try End Function You always know it's going to be bad when you see the random number generator returns a string. If numDecimals is zero, the code is bad, but vaguely sane. Generate a random number using the built in functions, then return it- as a string. It's the use of numDecimals which makes this weird. We start by appending \"9\"s to our string builder, converting it to an integer, and then generating a random number from zero to whatever number of nines we're using. This is the code of someone who hates and fears logarithms. Then we clear out our string builder because we're starting over with the actual number. Then we append a \".\", then we append our number, formatted with our number of decimals string, which we force to be no larger than 99. And this is where we get the special kind of weird. When we're generating our random decimal number, we do this: strNum.Append(\"9\", numDecimals). This is going to put numDecimals 9s on the string. E.g., if numDecimals is 9, this would set strNum to be 999999999. Thus, when we generate a random number, we generate one between 0 and 99999999. But, when we append that formatted value to the string, we do this: If numDecimals \u003e 99 Then numDecimals = 99 End If strNum.Append(x.ToString(\"D\" \u0026 numDecimals.ToString())) Here, we're treating numDecimals as a format string. We're only ever going to output two digits. The only good news is that while this random function was used everywhere, it wasn't used to generate their random IDs. The bad news, this is how their random IDs. Public Function RandomQueryStringGenerator() As String '*** the generates an alpha-numeric string 5 digits long such as aa7bb Dim strPwd As New StringBuilder Dim rnd As New System.Random Dim i As Integer Try For x As Integer = 1 To 5 Select Case x Case 1, 2, 4, 5, 8, 9 i = rnd.Next(97, 122) If i Mod 2 = 0 Then strPwd.Append(Chr(i).ToString().ToUpper()) Else strPwd.Append(Chr(i).ToString()) End If Case Else i = rnd.Next(0, 9) strPwd.Append(i.ToString()) End Select Next x Return strPwd.ToString() Catch Return String.Empty End Try End Function [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "author": "Remy Porter",
  "published": "Wed, 22 Jan 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 4209,
  "excerpt": "Sawyer was talking with a co-worker about how their unique session IDs got created. The concern was that they were only five characters long, which meant there could easily be collisions. They started by looking at the random number generation function.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-01-22 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Sawyer was talking with a co-worker about how their unique session IDs got created. The concern was that they were only five characters long, which meant there could easily be collisions. They started by looking at the random number generation function. Public Function RandomNumberGenerator(ByVal min As Integer, ByVal max As Integer, Optional ByVal numDecimals As Integer = 0) As String '*** the generates a number as a string Dim strNum As New StringBuilder Dim rnd As New System.Random Dim i, x, n As Integer Try i = rnd.Next(min, max) If numDecimals \u003e 0 Then Try strNum.Append(\"9\", numDecimals) n = CType(strNum.ToString, Int32) x = rnd.Next(0, n) Catch ex As Exception x = 1 End Try End If strNum.Remove(0, strNum.Length) strNum.Append(i.ToString()) If numDecimals \u003e 0 Then strNum.Append(\".\") If numDecimals \u003e 99 Then numDecimals = 99 End If strNum.Append(x.ToString(\"D\" \u0026 numDecimals.ToString())) End If Return strNum.ToString Catch Return \"1.00\" End Try End Function You always know it's going to be bad when you see the random number generator returns a string. If numDecimals is zero, the code is bad, but vaguely sane. Generate a random number using the built in functions, then return it- as a string. It's the use of numDecimals which makes this weird. We start by appending \"9\"s to our string builder, converting it to an integer, and then generating a random number from zero to whatever number of nines we're using. This is the code of someone who hates and fears logarithms. Then we clear out our string builder because we're starting over with the actual number. Then we append a \".\", then we append our number, formatted with our number of decimals string, which we force to be no larger than 99. And this is where we get the special kind of weird. When we're generating our random decimal number, we do this: strNum.Append(\"9\", numDecimals). This is going to put numDecimals 9s on the string. E.g., if numDecimals is 9, this would set strNum to be 999999999. Thus, when we generate a random number, we generate one between 0 and 99999999. But, when we append that formatted value to the string, we do this: If numDecimals \u003e 99 Then numDecimals = 99 End If strNum.Append(x.ToString(\"D\" \u0026 numDecimals.ToString())) Here, we're treating numDecimals as a format string. We're only ever going to output two digits. The only good news is that while this random function was used everywhere, it wasn't used to generate their random IDs. The bad news, this is how their random IDs. Public Function RandomQueryStringGenerator() As String '*** the generates an alpha-numeric string 5 digits long such as aa7bb Dim strPwd As New StringBuilder Dim rnd As New System.Random Dim i As Integer Try For x As Integer = 1 To 5 Select Case x Case 1, 2, 4, 5, 8, 9 i = rnd.Next(97, 122) If i Mod 2 = 0 Then strPwd.Append(Chr(i).ToString().ToUpper()) Else strPwd.Append(Chr(i).ToString()) End If Case Else i = rnd.Next(0, 9) strPwd.Append(i.ToString()) End Select Next x Return strPwd.ToString() Catch Return String.Empty End Try End Function [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-01-22\"\u003e2025-01-22\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10832\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eSawyer\u003c/strong\u003e was talking with a co-worker about how their unique session IDs got created. The concern was that they were only five characters long, which meant there could easily be collisions.\u003c/p\u003e\n\u003cp\u003eThey started by looking at the random number generation function.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003ePublic\u003c/span\u003e \u003cspan\u003eFunction\u003c/span\u003e RandomNumberGenerator(\u003cspan\u003eByVal\u003c/span\u003e min As Integer, \u003cspan\u003eByVal\u003c/span\u003e max As Integer, Optional \u003cspan\u003eByVal\u003c/span\u003e numDecimals As Integer = \u003cspan\u003e0\u003c/span\u003e) As String\n        \u003cspan\u003e\u0026#39;*** the generates a number as a string\u003c/span\u003e\n        \u003cspan\u003eDim\u003c/span\u003e strNum As \u003cspan\u003eNew\u003c/span\u003e StringBuilder\n        \u003cspan\u003eDim\u003c/span\u003e rnd As \u003cspan\u003eNew\u003c/span\u003e System.Random\n        \u003cspan\u003eDim\u003c/span\u003e i, x, n As Integer\n\n        Try\n            i = rnd.\u003cspan\u003eNext\u003c/span\u003e(min, max)\n\n            \u003cspan\u003eIf\u003c/span\u003e numDecimals \u0026gt; \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003eThen\u003c/span\u003e\n                Try\n                    strNum.Append(\u003cspan\u003e\u0026#34;9\u0026#34;\u003c/span\u003e, numDecimals)\n                    n = CType(strNum.ToString, Int32)\n                    x = rnd.\u003cspan\u003eNext\u003c/span\u003e(\u003cspan\u003e0\u003c/span\u003e, n)\n                Catch ex As Exception\n                    x = \u003cspan\u003e1\u003c/span\u003e\n                \u003cspan\u003eEnd\u003c/span\u003e Try\n            \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eIf\u003c/span\u003e\n\n            strNum.Remove(\u003cspan\u003e0\u003c/span\u003e, strNum.Length)\n            strNum.Append(i.\u003cspan\u003eTo\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e())\n\n            \u003cspan\u003eIf\u003c/span\u003e numDecimals \u0026gt; \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003eThen\u003c/span\u003e\n                strNum.Append(\u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)\n                \u003cspan\u003eIf\u003c/span\u003e numDecimals \u0026gt; \u003cspan\u003e99\u003c/span\u003e \u003cspan\u003eThen\u003c/span\u003e\n                    numDecimals = \u003cspan\u003e99\u003c/span\u003e\n                \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eIf\u003c/span\u003e\n                strNum.Append(x.\u003cspan\u003eTo\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e(\u003cspan\u003e\u0026#34;D\u0026#34;\u003c/span\u003e \u0026amp; numDecimals.\u003cspan\u003eTo\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e()))\n            \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eIf\u003c/span\u003e\n\n            Return strNum.ToString\n        Catch\n            Return \u003cspan\u003e\u0026#34;1.00\u0026#34;\u003c/span\u003e\n        \u003cspan\u003eEnd\u003c/span\u003e Try\n    \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eFunction\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou always know it\u0026#39;s going to be bad when you see the random number generator returns a string.\u003c/p\u003e\n\u003cp\u003eIf \u003ccode\u003enumDecimals\u003c/code\u003e is zero, the code is bad, but vaguely sane. Generate a random number using the built in functions, then return it- \u003cem\u003eas a string\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eIt\u0026#39;s the use of \u003ccode\u003enumDecimals\u003c/code\u003e which makes this weird. We start by appending \u0026#34;9\u0026#34;s to our string builder, converting it to an integer, and then generating a random number from zero to whatever number of nines we\u0026#39;re using. This is the code of someone who hates and fears logarithms.\u003c/p\u003e\n\u003cp\u003eThen we clear out our string builder because we\u0026#39;re starting over with the actual number. Then we append a \u0026#34;.\u0026#34;, then we append our number, formatted with our number of decimals string, which we force to be no larger than 99. And this is where we get the special kind of weird.\u003c/p\u003e\n\u003cp\u003eWhen we\u0026#39;re generating our random decimal number, we do this: \u003ccode\u003estrNum.Append(\u0026#34;9\u0026#34;, numDecimals)\u003c/code\u003e. This is going to put \u003ccode\u003enumDecimals\u003c/code\u003e \u003ccode\u003e9\u003c/code\u003es on the string. E.g., if \u003ccode\u003enumDecimals\u003c/code\u003e is \u003ccode\u003e9\u003c/code\u003e, this would set \u003ccode\u003estrNum\u003c/code\u003e to be \u003ccode\u003e999999999\u003c/code\u003e. Thus, when we generate a random number, we generate one between 0 and 99999999.\u003c/p\u003e\n\u003cp\u003eBut, when we append that formatted value to the string, we do this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eIf\u003c/span\u003e numDecimals \u0026gt; \u003cspan\u003e99\u003c/span\u003e \u003cspan\u003eThen\u003c/span\u003e\n    numDecimals = \u003cspan\u003e99\u003c/span\u003e\n\u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eIf\u003c/span\u003e\nstrNum.Append(x.\u003cspan\u003eTo\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e(\u003cspan\u003e\u0026#34;D\u0026#34;\u003c/span\u003e \u0026amp; numDecimals.\u003cspan\u003eTo\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e()))\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, we\u0026#39;re treating \u003ccode\u003enumDecimals\u003c/code\u003e as a format string. We\u0026#39;re only ever going to output two digits.\u003c/p\u003e\n\u003cp\u003eThe only good news is that while this random function was used everywhere, it \u003cem\u003ewasn\u0026#39;t\u003c/em\u003e used to generate their random IDs. The bad news, this is how their random IDs.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    \u003cspan\u003ePublic\u003c/span\u003e \u003cspan\u003eFunction\u003c/span\u003e RandomQueryStringGenerator() As String\n        \u003cspan\u003e\u0026#39;*** the generates an alpha-numeric string 5 digits long such as aa7bb\u003c/span\u003e\n        \u003cspan\u003eDim\u003c/span\u003e strPwd As \u003cspan\u003eNew\u003c/span\u003e StringBuilder\n        \u003cspan\u003eDim\u003c/span\u003e rnd As \u003cspan\u003eNew\u003c/span\u003e System.Random\n        \u003cspan\u003eDim\u003c/span\u003e i As Integer\n\n        Try\n            \u003cspan\u003eFor\u003c/span\u003e x As Integer = \u003cspan\u003e1\u003c/span\u003e \u003cspan\u003eTo\u003c/span\u003e \u003cspan\u003e5\u003c/span\u003e\n                \u003cspan\u003eSelect\u003c/span\u003e \u003cspan\u003eCase\u003c/span\u003e x\n                    \u003cspan\u003eCase\u003c/span\u003e \u003cspan\u003e1\u003c/span\u003e, \u003cspan\u003e2\u003c/span\u003e, \u003cspan\u003e4\u003c/span\u003e, \u003cspan\u003e5\u003c/span\u003e, \u003cspan\u003e8\u003c/span\u003e, \u003cspan\u003e9\u003c/span\u003e\n                        i = rnd.\u003cspan\u003eNext\u003c/span\u003e(\u003cspan\u003e97\u003c/span\u003e, \u003cspan\u003e122\u003c/span\u003e)\n                        \u003cspan\u003eIf\u003c/span\u003e i Mod \u003cspan\u003e2\u003c/span\u003e = \u003cspan\u003e0\u003c/span\u003e \u003cspan\u003eThen\u003c/span\u003e\n                            strPwd.Append(\u003cspan\u003eChr\u003c/span\u003e(i).\u003cspan\u003eTo\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e().ToUpper())\n                        \u003cspan\u003eElse\u003c/span\u003e\n                            strPwd.Append(\u003cspan\u003eChr\u003c/span\u003e(i).\u003cspan\u003eTo\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e())\n                        \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eIf\u003c/span\u003e\n                    \u003cspan\u003eCase\u003c/span\u003e \u003cspan\u003eElse\u003c/span\u003e\n                        i = rnd.\u003cspan\u003eNext\u003c/span\u003e(\u003cspan\u003e0\u003c/span\u003e, \u003cspan\u003e9\u003c/span\u003e)\n                        strPwd.Append(i.\u003cspan\u003eTo\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e())\n                \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eSelect\u003c/span\u003e\n            \u003cspan\u003eNext\u003c/span\u003e x\n            Return strPwd.\u003cspan\u003eTo\u003c/span\u003e\u003cspan\u003eString\u003c/span\u003e()\n        Catch\n            Return String.\u003cspan\u003eEmpty\u003c/span\u003e\n        \u003cspan\u003eEnd\u003c/span\u003e Try\n    \u003cspan\u003eEnd\u003c/span\u003e \u003cspan\u003eFunction\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/buildmaster-icon.png\"/\u003e [Advertisement] \n\t\u003ca href=\"https://inedo.com/BuildMaster?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eUtilize BuildMaster\u003c/a\u003e to release your software with confidence, at the pace your business demands. \u003ca href=\"https://inedo.com/BuildMaster/download?utm_source=tdwtf\u0026amp;utm_medium=footerad\u0026amp;utm_term=2018\u0026amp;utm_content=Confidence\u0026amp;utm_campaign=Buildmaster_Footer\"\u003eDownload\u003c/a\u003e today!  \n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-01-22T06:30:00Z",
  "modifiedTime": null
}
