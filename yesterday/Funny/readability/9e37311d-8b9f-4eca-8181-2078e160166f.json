{
  "id": "9e37311d-8b9f-4eca-8181-2078e160166f",
  "title": "CodeSOD: A Double Date",
  "link": "https://thedailywtf.com/articles/a-double-date",
  "description": "Alice picked up a ticket about a broken date calculation in a React application, and dropped into the code to take a look. There, she found this: export function calcYears(date) { return date \u0026\u0026 Math.floor((new Date() - new Date(date).getTime()) / 3.15576e10) } She stared at it for awhile, trying to understand what the hell this was doing, and why it was dividing by three billion. Also, why there was a \u0026\u0026 in there. But after staring at it for a few minutes, the sick logic of the code makes sense. getTime returns a timestamp in milliseconds. 3.15576e10 is the number of milliseconds in a year. So the Math.floor() expression just gets the difference between two dates as a number of years. The \u0026\u0026 is just a coalescing operator- the last truthy value gets returned, so if for some reason we can't calculate the number of years (because of bad input, perhaps?), we just return the original input date, because that's a brillant way to handle errors. As bizarre as this code is, this isn't the code that was causing problems. It works just fine. So why did Alice get a ticket? She spent some more time puzzling over that, while reading through the code, only to discover that this calcYears function was used almost everywhere in the code- but in one spot, someone decided to write their own. if (birthday) { let year = birthday?.split('-', 1) if (year[0] != '') { let years = new Date().getFullYear() - year[0] return years } } So, this function also works, and is maybe a bit more clear about what it's doing than the calcYears. But note the use of split- this assumes a lot about the input format of the date, and that assumption isn't always reliable. While calcYears still does unexpected things if you fail to give it good input, its accepted range of inputs is broader. Here, if we're not in a date format which starts with \"YYYY-\", this blows up. After spending hours puzzling over this, Alice writes: I HATE HOW NO ONE KNOWS HOW TO CODE [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "author": "Remy Porter",
  "published": "Mon, 05 May 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 2347,
  "excerpt": "Alice picked up a ticket about a broken date calculation in a React application, and dropped into the code to take a look. There, she found this: export function calcYears(date) { return date \u0026\u0026 Math.floor((new Date() - new Date(date).getTime()) / 3.15576e10) }",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-05-05 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Alice picked up a ticket about a broken date calculation in a React application, and dropped into the code to take a look. There, she found this: export function calcYears(date) { return date \u0026\u0026 Math.floor((new Date() - new Date(date).getTime()) / 3.15576e10) } She stared at it for awhile, trying to understand what the hell this was doing, and why it was dividing by three billion. Also, why there was a \u0026\u0026 in there. But after staring at it for a few minutes, the sick logic of the code makes sense. getTime returns a timestamp in milliseconds. 3.15576e10 is the number of milliseconds in a year. So the Math.floor() expression just gets the difference between two dates as a number of years. The \u0026\u0026 is just a coalescing operator- the last truthy value gets returned, so if for some reason we can't calculate the number of years (because of bad input, perhaps?), we just return the original input date, because that's a brillant way to handle errors. As bizarre as this code is, this isn't the code that was causing problems. It works just fine. So why did Alice get a ticket? She spent some more time puzzling over that, while reading through the code, only to discover that this calcYears function was used almost everywhere in the code- but in one spot, someone decided to write their own. if (birthday) { let year = birthday?.split('-', 1) if (year[0] != '') { let years = new Date().getFullYear() - year[0] return years } } So, this function also works, and is maybe a bit more clear about what it's doing than the calcYears. But note the use of split- this assumes a lot about the input format of the date, and that assumption isn't always reliable. While calcYears still does unexpected things if you fail to give it good input, its accepted range of inputs is broader. Here, if we're not in a date format which starts with \"YYYY-\", this blows up. After spending hours puzzling over this, Alice writes: I HATE HOW NO ONE KNOWS HOW TO CODE [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-05-05\"\u003e2025-05-05\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10906\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eAlice\u003c/strong\u003e picked up a ticket about a broken date calculation in a React application, and dropped into the code to take a look. There, she found this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eexport\u003c/span\u003e \u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003ecalcYears\u003c/span\u003e(\u003cspan\u003edate\u003c/span\u003e) {\n  \u003cspan\u003ereturn\u003c/span\u003e date \u0026amp;\u0026amp; \u003cspan\u003eMath\u003c/span\u003e.\u003cspan\u003efloor\u003c/span\u003e((\u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e() - \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e(date).\u003cspan\u003egetTime\u003c/span\u003e()) / \u003cspan\u003e3.15576e10\u003c/span\u003e)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eShe stared at it for awhile, trying to understand what the hell this was doing, and why it was dividing by three billion. Also, why there was a \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e in there. But after staring at it for a few minutes, the sick logic of the code makes sense. \u003ccode\u003egetTime\u003c/code\u003e returns a timestamp in milliseconds. \u003ccode\u003e3.15576e10\u003c/code\u003e is the number of milliseconds in a year. So the \u003ccode\u003eMath.floor()\u003c/code\u003e expression just gets the difference between two dates as a number of years. The \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e is just a coalescing operator- the last truthy value gets returned, so if for some reason we can\u0026#39;t calculate the number of years (because of bad input, perhaps?), we just return the original input date, because that\u0026#39;s a brillant way to handle errors.\u003c/p\u003e\n\u003cp\u003eAs bizarre as this code is, \u003cem\u003ethis\u003c/em\u003e isn\u0026#39;t the code that was causing problems. It works just fine. So why did Alice get a ticket? She spent some more time puzzling over that, while reading through the code, only to discover that this \u003ccode\u003ecalcYears\u003c/code\u003e function was used \u003cem\u003ealmost\u003c/em\u003e everywhere in the code- but in one spot, someone decided to write their own.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eif\u003c/span\u003e (birthday) {\n      \u003cspan\u003elet\u003c/span\u003e year = birthday?.\u003cspan\u003esplit\u003c/span\u003e(\u003cspan\u003e\u0026#39;-\u0026#39;\u003c/span\u003e, \u003cspan\u003e1\u003c/span\u003e)\n      \u003cspan\u003eif\u003c/span\u003e (year[\u003cspan\u003e0\u003c/span\u003e] != \u003cspan\u003e\u0026#39;\u0026#39;\u003c/span\u003e) {\n        \u003cspan\u003elet\u003c/span\u003e years = \u003cspan\u003enew\u003c/span\u003e \u003cspan\u003eDate\u003c/span\u003e().\u003cspan\u003egetFullYear\u003c/span\u003e() - year[\u003cspan\u003e0\u003c/span\u003e]\n        \u003cspan\u003ereturn\u003c/span\u003e years\n      }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSo, this function \u003cem\u003ealso\u003c/em\u003e works, and is maybe a bit more clear about what it\u0026#39;s doing than the \u003ccode\u003ecalcYears\u003c/code\u003e. But note the use of \u003ccode\u003esplit\u003c/code\u003e- this assumes a lot about the input format of the date, and that assumption isn\u0026#39;t always reliable. While \u003ccode\u003ecalcYears\u003c/code\u003e still does unexpected things if you fail to give it good input, its accepted range of inputs is broader. Here, if we\u0026#39;re not in a date format which starts with \u0026#34;YYYY-\u0026#34;, this blows up.\u003c/p\u003e\n\u003cp\u003eAfter spending hours puzzling over this, Alice writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI HATE HOW NO ONE KNOWS HOW TO CODE\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep the plebs out of prod. Restrict NuGet feed privileges with ProGet. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-05-05T06:30:00Z",
  "modifiedTime": null
}
