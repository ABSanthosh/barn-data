{
  "id": "f03f845e-2261-4b2d-a69f-48714baf1c96",
  "title": "CodeSOD: Where is the Validation At?",
  "link": "https://thedailywtf.com/articles/where-is-the-validation-at",
  "description": "As oft stated, the \"right\" way to validate emails is to do a bare minimum sanity check on format, and then send a verification message to the email address the user supplied; it's the only way to ensure that what they gave you isn't just syntactically valid, but is actually usable. But even that simple approach leaves places to go wrong. Take a look at this code, from Lana. public function getEmailValidationErrors($data): array { $errors = []; if (isset($data[\"email\"]) \u0026\u0026 !empty($data[\"email\"])) { if (!str_contains($data[\"email\"], \"@\")) { $error[\"email\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_AT\"; } if (!str_contains($data[\"email\"], \".\")) { $error[\"email\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_DOT\"; } if (strrpos($data[\"email\"], \"@\") \u003e strrpos($data[\"email\"], \".\")) { $error[\"email\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_TLD\"; } } if (isset($data[\"email1\"]) \u0026\u0026 !empty($data[\"email1\"])) { if (!str_contains($data[\"email1\"], \"@\")) { $error[\"email1\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_AT\"; } if (!str_contains($data[\"email1\"], \".\")) { $error[\"email1\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_DOT\"; } if (strrpos($data[\"email1\"], \"@\") \u003e strrpos($data[\"email1\"], \".\")) { $error[\"email1\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_TLD\"; } } if (isset($data[\"email2\"]) \u0026\u0026 !empty($data[\"email2\"])) { if (!str_contains($data[\"email2\"], \"@\")) { $error[\"email2\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_AT\"; } if (!str_contains($data[\"email2\"], \".\")) { $error[\"email2\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_DOT\"; } if (strrpos($data[\"email2\"], \"@\") \u003e strrpos($data[\"email2\"], \".\")) { $error[\"email2\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_TLD\"; } } if (isset($data[\"email3\"]) \u0026\u0026 !empty($data[\"email3\"])) { if (!str_contains($data[\"email3\"], \"@\")) { $error[\"email3\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_AT\"; } if (!str_contains($data[\"email3\"], \".\")) { $error[\"email3\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_DOT\"; } if (strrpos($data[\"email3\"], \"@\") \u003e strrpos($data[\"email3\"], \".\")) { $error[\"email3\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_TLD\"; } } return $errors; } Let's start with the obvious problem: repetition. This function doesn't validate simply one email, but four, by copy/pasting the same logic multiple times. Lana didn't supply the repeated blocks, just noted that they existed, so let's not pick on the bad names: \"email1\", etc.- that's just my placeholder. I assume it's different contact types for a customer, or similar. Now, the other problems range from trivial to comical. First, the PHP function empty returns true if the variable has a zero/falsy value or is not set, which means it implies an isset, making the first branch redundant. That's trivial. The way the checks get logged into the $error array, they can overwrite each other, meaning if you forget the \"@\" and the \".\", it'll only complain about the \".\", but if you forget the \".\", it'll complain about not having a valid TLD (the \"NO_DOT\" error will never be output). That's silly. Finally, the $errors array is the return value, but the $error array is where we store our errors, meaning this function doesn't return anything in the first place. And that means that it's a email validation function which doesn't do anything at all, which honestly- probably for the best. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "author": "Remy Porter",
  "published": "Mon, 10 Mar 2025 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 4133,
  "excerpt": "As oft stated, the \"right\" way to validate emails is to do a bare minimum sanity check on format, and then send a verification message to the email address the user supplied; it's the only way to ensure that what they gave you isn't just syntactically valid, but is actually usable. But even that simple approach leaves places to go wrong. Take a look at this code, from Lana.",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2025-03-10 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. As oft stated, the \"right\" way to validate emails is to do a bare minimum sanity check on format, and then send a verification message to the email address the user supplied; it's the only way to ensure that what they gave you isn't just syntactically valid, but is actually usable. But even that simple approach leaves places to go wrong. Take a look at this code, from Lana. public function getEmailValidationErrors($data): array { $errors = []; if (isset($data[\"email\"]) \u0026\u0026 !empty($data[\"email\"])) { if (!str_contains($data[\"email\"], \"@\")) { $error[\"email\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_AT\"; } if (!str_contains($data[\"email\"], \".\")) { $error[\"email\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_DOT\"; } if (strrpos($data[\"email\"], \"@\") \u003e strrpos($data[\"email\"], \".\")) { $error[\"email\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_TLD\"; } } if (isset($data[\"email1\"]) \u0026\u0026 !empty($data[\"email1\"])) { if (!str_contains($data[\"email1\"], \"@\")) { $error[\"email1\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_AT\"; } if (!str_contains($data[\"email1\"], \".\")) { $error[\"email1\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_DOT\"; } if (strrpos($data[\"email1\"], \"@\") \u003e strrpos($data[\"email1\"], \".\")) { $error[\"email1\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_TLD\"; } } if (isset($data[\"email2\"]) \u0026\u0026 !empty($data[\"email2\"])) { if (!str_contains($data[\"email2\"], \"@\")) { $error[\"email2\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_AT\"; } if (!str_contains($data[\"email2\"], \".\")) { $error[\"email2\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_DOT\"; } if (strrpos($data[\"email2\"], \"@\") \u003e strrpos($data[\"email2\"], \".\")) { $error[\"email2\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_TLD\"; } } if (isset($data[\"email3\"]) \u0026\u0026 !empty($data[\"email3\"])) { if (!str_contains($data[\"email3\"], \"@\")) { $error[\"email3\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_AT\"; } if (!str_contains($data[\"email3\"], \".\")) { $error[\"email3\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_DOT\"; } if (strrpos($data[\"email3\"], \"@\") \u003e strrpos($data[\"email3\"], \".\")) { $error[\"email3\"] = \"FORM.CONTACT_DETAILS.ERRORS.NO_TLD\"; } } return $errors; } Let's start with the obvious problem: repetition. This function doesn't validate simply one email, but four, by copy/pasting the same logic multiple times. Lana didn't supply the repeated blocks, just noted that they existed, so let's not pick on the bad names: \"email1\", etc.- that's just my placeholder. I assume it's different contact types for a customer, or similar. Now, the other problems range from trivial to comical. First, the PHP function empty returns true if the variable has a zero/falsy value or is not set, which means it implies an isset, making the first branch redundant. That's trivial. The way the checks get logged into the $error array, they can overwrite each other, meaning if you forget the \"@\" and the \".\", it'll only complain about the \".\", but if you forget the \".\", it'll complain about not having a valid TLD (the \"NO_DOT\" error will never be output). That's silly. Finally, the $errors array is the return value, but the $error array is where we store our errors, meaning this function doesn't return anything in the first place. And that means that it's a email validation function which doesn't do anything at all, which honestly- probably for the best. [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2025-03-10\"\u003e2025-03-10\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10866\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003eAs oft stated, the \u0026#34;right\u0026#34; way to validate emails is to do a bare minimum sanity check on format, and then send a verification message to the email address the user supplied; it\u0026#39;s the only way to ensure that what they gave you isn\u0026#39;t just \u003cem\u003esyntactically\u003c/em\u003e valid, but is actually usable.\u003c/p\u003e\n\u003cp\u003eBut even that simple approach leaves places to go wrong. Take a look at this code, from \u003cstrong\u003eLana\u003c/strong\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003epublic\u003c/span\u003e \u003cspan\u003e\u003cspan\u003efunction\u003c/span\u003e \u003cspan\u003egetEmailValidationErrors\u003c/span\u003e(\u003cspan\u003e\u003cspan\u003e$data\u003c/span\u003e\u003c/span\u003e): \u003cspan\u003earray\u003c/span\u003e\n\u003c/span\u003e{\n     \u003cspan\u003e$errors\u003c/span\u003e = [];\n     \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003eisset\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e]) \u0026amp;\u0026amp; !\u003cspan\u003eempty\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e])) {\n         \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003estr_contains\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;@\u0026#34;\u003c/span\u003e)) {\n             \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_AT\u0026#34;\u003c/span\u003e;\n         }\n         \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003estr_contains\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)) {\n             \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_DOT\u0026#34;\u003c/span\u003e;\n         }\n         \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003estrrpos\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;@\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan\u003estrrpos\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)) {\n             \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_TLD\u0026#34;\u003c/span\u003e;\n         }\n     }\n     \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003eisset\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email1\u0026#34;\u003c/span\u003e]) \u0026amp;\u0026amp; !\u003cspan\u003eempty\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email1\u0026#34;\u003c/span\u003e])) {\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003estr_contains\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email1\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;@\u0026#34;\u003c/span\u003e)) {\n            \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email1\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_AT\u0026#34;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003estr_contains\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email1\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)) {\n            \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email1\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_DOT\u0026#34;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003estrrpos\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email1\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;@\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan\u003estrrpos\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email1\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)) {\n            \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email1\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_TLD\u0026#34;\u003c/span\u003e;\n        }\n    }\n    \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003eisset\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email2\u0026#34;\u003c/span\u003e]) \u0026amp;\u0026amp; !\u003cspan\u003eempty\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email2\u0026#34;\u003c/span\u003e])) {\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003estr_contains\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email2\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;@\u0026#34;\u003c/span\u003e)) {\n            \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email2\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_AT\u0026#34;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003estr_contains\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email2\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)) {\n            \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email2\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_DOT\u0026#34;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003estrrpos\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email2\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;@\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan\u003estrrpos\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email2\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)) {\n            \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email2\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_TLD\u0026#34;\u003c/span\u003e;\n        }\n    }\n    \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003eisset\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email3\u0026#34;\u003c/span\u003e]) \u0026amp;\u0026amp; !\u003cspan\u003eempty\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email3\u0026#34;\u003c/span\u003e])) {\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003estr_contains\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email3\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;@\u0026#34;\u003c/span\u003e)) {\n            \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email3\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_AT\u0026#34;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (!\u003cspan\u003estr_contains\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email3\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)) {\n            \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email3\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_DOT\u0026#34;\u003c/span\u003e;\n        }\n        \u003cspan\u003eif\u003c/span\u003e (\u003cspan\u003estrrpos\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email3\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;@\u0026#34;\u003c/span\u003e) \u0026gt; \u003cspan\u003estrrpos\u003c/span\u003e(\u003cspan\u003e$data\u003c/span\u003e[\u003cspan\u003e\u0026#34;email3\u0026#34;\u003c/span\u003e], \u003cspan\u003e\u0026#34;.\u0026#34;\u003c/span\u003e)) {\n            \u003cspan\u003e$error\u003c/span\u003e[\u003cspan\u003e\u0026#34;email3\u0026#34;\u003c/span\u003e] = \u003cspan\u003e\u0026#34;FORM.CONTACT_DETAILS.ERRORS.NO_TLD\u0026#34;\u003c/span\u003e;\n        }\n    }\n     \u003cspan\u003ereturn\u003c/span\u003e \u003cspan\u003e$errors\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eLet\u0026#39;s start with the obvious problem: \u003cem\u003erepetition\u003c/em\u003e. This function doesn\u0026#39;t validate simply \u003cem\u003eone\u003c/em\u003e email, but four, by copy/pasting the same logic multiple times. Lana didn\u0026#39;t supply the repeated blocks, just noted that they existed, so let\u0026#39;s not pick on the bad names: \u0026#34;email1\u0026#34;, etc.- that\u0026#39;s just my placeholder. I assume it\u0026#39;s different contact types for a customer, or similar.\u003c/p\u003e\n\u003cp\u003eNow, the other problems range from trivial to comical. First, the PHP function \u003ccode\u003eempty\u003c/code\u003e returns true if the variable has a zero/falsy value \u003cem\u003eor is not set\u003c/em\u003e, which means it implies an \u003ccode\u003eisset\u003c/code\u003e, making the first branch redundant. That\u0026#39;s trivial.\u003c/p\u003e\n\u003cp\u003eThe way the checks get logged into the \u003ccode\u003e$error\u003c/code\u003e array, they can overwrite each other, meaning if you forget the \u0026#34;@\u0026#34; \u003cem\u003eand\u003c/em\u003e the \u0026#34;.\u0026#34;, it\u0026#39;ll only complain about the \u0026#34;.\u0026#34;, but if you forget the \u0026#34;.\u0026#34;, it\u0026#39;ll complain about not having a valid TLD (the \u0026#34;NO_DOT\u0026#34; error will never be output). That\u0026#39;s silly.\u003c/p\u003e\n\u003cp\u003eFinally, the \u003ccode\u003e$errors\u003c/code\u003e array is the return value, but the \u003ccode\u003e$error\u003c/code\u003e array is where we store our errors, meaning this function doesn\u0026#39;t return anything in the first place. And \u003cem\u003ethat\u003c/em\u003e means that it\u0026#39;s a email validation function which doesn\u0026#39;t do anything at all, which honestly- probably for the best.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.\u003ca href=\"https://inedo.com/proget?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2025-03-10T06:30:00Z",
  "modifiedTime": null
}
