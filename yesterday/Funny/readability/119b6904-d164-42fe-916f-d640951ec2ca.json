{
  "id": "119b6904-d164-42fe-916f-d640951ec2ca",
  "title": "CodeSOD: Hall of Mirrors",
  "link": "https://thedailywtf.com/articles/hall-of-mirrors",
  "description": "Robert was diagnosing a problem in a reporting module. The application code ran a fairly simple query- SELECT field1, field2, field3 FROM report_table- so he foolishly assumed that it would be easy to understand the problem. Of course, the \"table\" driving the report wasn't actually a table, it was a view in the database. Most of our readers are familiar with how views work, but for those who have had been corrupted by NoSQL databases: database views are great- take a query you run often, and create it as an object in the database: CREATE VIEW my_report AS SELECT t1.someField as someField, t2.someOtherField as someOtherField FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id Now you can query SELECT * FROM my_report WHERE someField \u003e 5. Like I said: great! Well, usually great. Well, sometimes great. Well, like anything else, with great power comes great responsibility. Robert dug into the definition of the view, only to find that the tables it queried were themselves views. And those were in turn, also views. All in all, there were nineteen layers of nested views. The top level query he was trying to debug had no real relation to the underlying data, because 19 layers of abstraction had been injected between the report and the actual data. Even better- many of these nested views queried the same tables, so data was being split up and rejoined together in non-obvious and complex ways. The view that caused Robert to reach out to us was this: ALTER VIEW [LSFDR].[v_ControlDate] AS SELECT GETDATE() AS controlDate --GETDATE() - 7 AS controlDate This query is simply invoking a built-in function which returns today's date. Why not just call the function? We can see that once upon a time, it did offset the date by seven days, making the control date a week earlier. So I suppose there's some readability in mytable m INNER JOIN v_ControlDate cd ON m.transactionDate \u003e cd.controlDate, but that readability also hides the meaning of control date. That's the fundamental problem of abstraction. We lose details and meaning, and end up with 19 layers of stuff to puzzle through. A more proper solution may have been to actually implement this as a function, not a view- FROM mytable m WHERE m.transactionDate \u003e getControlDate(). At least here, it's clear that I'm invoking a function, instead of hiding it deep inside of a view called from a view called from a view. In any case, I'd argue that the actual code we're looking at isn't the true WTF. I don't like this view, and I wouldn't implement it this way, but it doesn't make me go \"WTF?\" The context the view exists in, on the other hand, absolutely does. 19 layers! Is this a database or a Russian Honey Cake? The report, of course, didn't have any requirements defining its data. Instead, the users had worked with the software team to gradually tweak the output over time until it gave them what they believed they wanted. This meant actually changing the views to be something comprehensible and maintainable wasn't a viable option- changes could break the report in surprising and non-obvious ways. So Robert was compelled to suffer through and make the minimally invasive changes required to fix the view and get the output looking like what the users wanted. The real WTF? The easiest fix was to create another view, and join it in. Problems compound themselves over time. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "author": "Remy Porter",
  "published": "Tue, 26 Nov 2024 06:30:00 GMT",
  "source": "http://syndication.thedailywtf.com/TheDailyWtf",
  "categories": [
    "CodeSOD"
  ],
  "byline": "Remy Porter",
  "length": 3714,
  "excerpt": "Robert was diagnosing a problem in a reporting module. The application code ran a fairly simple query- SELECT field1, field2, field3 FROM report_table- so he foolishly assumed that it would be easy to understand the problem. Of course, the \"table\" driving the report wasn't actually a table, it was a view in the database. Most of our readers are familiar with how views work, but for those who have had been corrupted by NoSQL databases: database views are great- take a query you run often, and create it as an object in the database:",
  "siteName": "The Daily WTF",
  "favicon": "",
  "text": "by in CodeSOD on 2024-11-26 Edit Remy PorterComputers were a mistake, which is why I'm trying to shoot them into space. Editor-in-Chief for TDWTF. Robert was diagnosing a problem in a reporting module. The application code ran a fairly simple query- SELECT field1, field2, field3 FROM report_table- so he foolishly assumed that it would be easy to understand the problem. Of course, the \"table\" driving the report wasn't actually a table, it was a view in the database. Most of our readers are familiar with how views work, but for those who have had been corrupted by NoSQL databases: database views are great- take a query you run often, and create it as an object in the database: CREATE VIEW my_report AS SELECT t1.someField as someField, t2.someOtherField as someOtherField FROM table1 t1 INNER JOIN table2 t2 ON t1.id = t2.id Now you can query SELECT * FROM my_report WHERE someField \u003e 5. Like I said: great! Well, usually great. Well, sometimes great. Well, like anything else, with great power comes great responsibility. Robert dug into the definition of the view, only to find that the tables it queried were themselves views. And those were in turn, also views. All in all, there were nineteen layers of nested views. The top level query he was trying to debug had no real relation to the underlying data, because 19 layers of abstraction had been injected between the report and the actual data. Even better- many of these nested views queried the same tables, so data was being split up and rejoined together in non-obvious and complex ways. The view that caused Robert to reach out to us was this: ALTER VIEW [LSFDR].[v_ControlDate] AS SELECT GETDATE() AS controlDate --GETDATE() - 7 AS controlDate This query is simply invoking a built-in function which returns today's date. Why not just call the function? We can see that once upon a time, it did offset the date by seven days, making the control date a week earlier. So I suppose there's some readability in mytable m INNER JOIN v_ControlDate cd ON m.transactionDate \u003e cd.controlDate, but that readability also hides the meaning of control date. That's the fundamental problem of abstraction. We lose details and meaning, and end up with 19 layers of stuff to puzzle through. A more proper solution may have been to actually implement this as a function, not a view- FROM mytable m WHERE m.transactionDate \u003e getControlDate(). At least here, it's clear that I'm invoking a function, instead of hiding it deep inside of a view called from a view called from a view. In any case, I'd argue that the actual code we're looking at isn't the true WTF. I don't like this view, and I wouldn't implement it this way, but it doesn't make me go \"WTF?\" The context the view exists in, on the other hand, absolutely does. 19 layers! Is this a database or a Russian Honey Cake? The report, of course, didn't have any requirements defining its data. Instead, the users had worked with the software team to gradually tweak the output over time until it gave them what they believed they wanted. This meant actually changing the views to be something comprehensible and maintainable wasn't a viable option- changes could break the report in surprising and non-obvious ways. So Robert was compelled to suffer through and make the minimally invasive changes required to fix the view and get the output looking like what the users wanted. The real WTF? The easiest fix was to create another view, and join it in. Problems compound themselves over time. [Advertisement] Keep the plebs out of prod. Restrict NuGet feed privileges with ProGet. Learn more.",
  "image": "https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv itemscope=\"\" itemtype=\"http://schema.org/Article\" id=\"article-page\"\u003e\n\n        \n        \u003cp\u003e\u003cspan\u003eby \n            in \u003ca itemprop=\"articleSection\" href=\"https://thedailywtf.com/series/code-sod\"\u003eCodeSOD\u003c/a\u003e\n            on \u003cspan itemprop=\"datePublished\" content=\"2024-11-26\"\u003e2024-11-26\u003c/span\u003e\n            \u003ca href=\"https://thedailywtf.com/admin/article/edit/10789\" rel=\"nofollow\"\u003eEdit\u003c/a\u003e\n        \u003c/span\u003e\u003c/p\u003e\n        \u003cdiv itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\"\u003e\n            \u003cp\u003e\u003cimg itemprop=\"image\" src=\"https://s3.amazonaws.com/remy.jetpackshark.com/remy-thumb.jpg\"/\u003e\n            \u003ca itemprop=\"name\" href=\"https://thedailywtf.com/authors/remy-porter\"\u003eRemy Porter\u003c/a\u003e\u003c/p\u003e\u003cp itemprop=\"description\"\u003eComputers were a mistake, which is why I\u0026#39;m trying to shoot them into space. Editor-in-Chief for TDWTF.\u003c/p\u003e\n        \u003c/div\u003e\n        \u003cdiv itemprop=\"articleBody\"\u003e\n            \u003cp\u003e\u003cstrong\u003eRobert\u003c/strong\u003e was diagnosing a problem in a reporting module. The application code ran a fairly simple query- \u003ccode\u003eSELECT field1, field2, field3 FROM report_table\u003c/code\u003e- so he foolishly assumed that it would be easy to understand the problem. Of course, the \u0026#34;table\u0026#34; driving the report wasn\u0026#39;t actually a table, it was a view in the database.\u003c/p\u003e\n\u003cp\u003eMost of our readers are familiar with how views work, but for those who have had been corrupted by NoSQL databases: database views are great- take a query you run often, and create it as an object in the database:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eCREATE\u003c/span\u003e \u003cspan\u003eVIEW\u003c/span\u003e my_report\n\u003cspan\u003eAS\u003c/span\u003e\n\u003cspan\u003eSELECT\u003c/span\u003e t1.someField \u003cspan\u003eas\u003c/span\u003e someField, t2.someOtherField \u003cspan\u003eas\u003c/span\u003e someOtherField\n\u003cspan\u003eFROM\u003c/span\u003e table1 t1 \u003cspan\u003eINNER\u003c/span\u003e \u003cspan\u003eJOIN\u003c/span\u003e table2 t2 \u003cspan\u003eON\u003c/span\u003e t1.id \u003cspan\u003e=\u003c/span\u003e t2.id\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow you can query \u003ccode\u003eSELECT * FROM my_report WHERE someField \u0026gt; 5\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eLike I said: great! Well, usually great. Well, sometimes great. Well, like anything else, with great power comes great responsibility.\u003c/p\u003e\n\u003cp\u003eRobert dug into the definition of the view, only to find that the tables it queried were themselves views. And those were in turn, \u003cem\u003ealso\u003c/em\u003e views. All in all, there were \u003cem\u003enineteen layers\u003c/em\u003e of nested views. The top level query he was trying to debug had no real relation to the underlying data, because 19 layers of abstraction had been injected between the report and the actual data. Even better- many of these nested views queried the same tables, so data was being split up and rejoined together in non-obvious and complex ways.\u003c/p\u003e\n\u003cp\u003eThe view that caused Robert to reach out to us was this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003eALTER\u003c/span\u003e \u003cspan\u003eVIEW\u003c/span\u003e [LSFDR].[v_ControlDate]\n\u003cspan\u003eAS\u003c/span\u003e\n\u003cspan\u003eSELECT\u003c/span\u003e\nGETDATE() \u003cspan\u003eAS\u003c/span\u003e controlDate\n\u003cspan\u003e--GETDATE() - 7 AS controlDate\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis query is simply invoking a built-in function which returns today\u0026#39;s date. Why not just call the function? We can see that once upon a time, it did offset the date by seven days, making the control date a week earlier. So I suppose there\u0026#39;s some readability in \u003ccode\u003emytable m INNER JOIN v_ControlDate cd ON m.transactionDate \u0026gt; cd.controlDate\u003c/code\u003e, but that readability also hides the meaning of control date.\u003c/p\u003e\n\u003cp\u003eThat\u0026#39;s the fundamental problem of abstraction. We lose details and meaning, and end up with 19 layers of stuff to puzzle through. A more proper solution may have been to actually implement this as a function, not a view- \u003ccode\u003eFROM mytable m WHERE m.transactionDate \u0026gt; getControlDate()\u003c/code\u003e. At least here, it\u0026#39;s clear that I\u0026#39;m invoking a function, instead of hiding it deep inside of a view called from a view called from a view.\u003c/p\u003e\n\u003cp\u003eIn any case, I\u0026#39;d argue that the actual code we\u0026#39;re looking at isn\u0026#39;t the true WTF. I don\u0026#39;t like this view, and I wouldn\u0026#39;t implement it this way, but it doesn\u0026#39;t make me go \u0026#34;WTF?\u0026#34; The context the view exists in, on the other hand, absolutely does. 19 layers! Is this a database or a \u003ca href=\"https://www.youtube.com/watch?v=yHQ-FkiP5Ws\u0026amp;t=6s\u0026amp;pp=ygUcY2hlZiBqb2huIHJ1c3NpYW4gaG9uZXkgY2FrZQ%3D%3D\"\u003eRussian Honey Cake\u003c/a\u003e?\u003c/p\u003e\n\u003cp\u003eThe report, of course, didn\u0026#39;t have any requirements defining its data. Instead, the users had worked with the software team to gradually tweak the output over time until it gave them what they believed they wanted. This meant actually changing the views to be something comprehensible and maintainable wasn\u0026#39;t a viable option- changes could break the report in surprising and non-obvious ways. So Robert was compelled to suffer through and make the minimally invasive changes required to fix the view and get the output looking like what the users wanted.\u003c/p\u003e\n\u003cp\u003eThe real WTF? The easiest fix was to create another view, and join it in. Problems compound themselves over time.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://thedailywtf.com/images/inedo/proget-icon.png\"/\u003e [Advertisement] \n\tKeep the plebs out of prod. Restrict NuGet feed privileges with ProGet. \u003ca href=\"https://inedo.com/proget/private-nuget-server?utm_source=tdwtf\u0026amp;utm_medium=footer\u0026amp;utm_content=PlebsFooter\u0026amp;utm_campaign=Cyclops2020\"\u003eLearn more.\u003c/a\u003e\n\u003c/p\u003e\n\n\n        \u003c/div\u003e\n\n        \n    \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": "2024-11-26T06:30:00Z",
  "modifiedTime": null
}
