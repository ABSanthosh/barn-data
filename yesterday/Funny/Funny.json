[
  {
    "id": "a8191e05-dcfd-4539-aded-eecfc05f74df",
    "title": "Echo Chamber",
    "link": "https://xkcd.com/3116/",
    "description": "",
    "author": "",
    "published": "Wed, 16 Jul 2025 04:00:00 -0000",
    "image": "https://imgs.xkcd.com/comics/echo_chamber.png",
    "source": "https://xkcd.com/rss.xml",
    "categories": null
  },
  {
    "id": "328ae000-4b6f-4e29-bfcf-42d2e255ed7e",
    "title": "Unsolved Physics Problems",
    "link": "https://xkcd.com/3115/",
    "description": "",
    "author": "",
    "published": "Mon, 14 Jul 2025 04:00:00 -0000",
    "image": "https://imgs.xkcd.com/comics/unsolved_physics_problems.png",
    "source": "https://xkcd.com/rss.xml",
    "categories": null
  },
  {
    "id": "2213f507-536e-45e7-84e9-5050cae5471f",
    "title": "Sweater People",
    "link": "https://awkwardfamilyphotos.com/sweater-people",
    "description": "“Mom wanted a family photo. So… we family photo’d the heck out of it!” (submitted by Shawna)   The post Sweater People appeared first on AwkwardFamilyPhotos.com.",
    "author": "Team Awkward",
    "published": "Thu, 03 Jul 2025 16:59:54 +0000",
    "image": "https://s3.awkwardfamilyphotos.com/wp-content/uploads/2025/07/03095950/inbound237534454506147220-1024x768.jpg",
    "source": "https://awkwardfamilyphotos.com/feed/",
    "categories": [
      "Family Portrait",
      "Misc"
    ]
  },
  {
    "id": "048d0d2a-9a05-440a-aada-a6de7344b06a",
    "title": "The Wicker Man",
    "link": "https://awkwardfamilyphotos.com/2025/07/01/the-wicker-man/",
    "description": "“Just a totally natural looking family portrait of a massive wicker peacock chair. Oh and me, my dad, and my sister. We apparently took this as a “gift” for my mom, which is why she was missing. Clearly this is the gift she didn’t know she wanted.”   The post The Wicker Man appeared first on AwkwardFamilyPhotos.com.",
    "author": "Jim Rowley",
    "published": "Wed, 02 Jul 2025 04:02:56 +0000",
    "image": "https://awkwardfamilyphotos.com/wp-content/uploads/2020/09/Screen-Shot-2020-09-21-at-4.01.55-PM-1024x1019.jpg",
    "source": "https://awkwardfamilyphotos.com/feed/",
    "categories": [
      "Photos"
    ]
  },
  {
    "id": "cc18d565-93ff-4857-8f48-df63597c4ba8",
    "title": "Bill Hader Is Still Ashamed of How He Got Kicked Out of Martin Scorsese’s ‘SNL’ Dressing Room",
    "link": "https://www.cracked.com/article_47412_bill-hader-is-still-ashamed-of-how-he-got-kicked-out-of-martin-scorseses-snl-dressing-room.html?newsletter-cat=movies-tv",
    "description": "By Matt Solomon Published: July 16th, 2025",
    "author": "",
    "published": "Wed, 16 Jul 2025 16:30:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/CrackedRSS",
    "categories": null
  },
  {
    "id": "d5ce9522-76ab-4b3e-8ed0-23bb4ac2af57",
    "title": "20 Movies That Still Rule Despite Being Half a Century Old",
    "link": "https://www.cracked.com/article_47357_20-movies-that-still-rule-despite-being-half-a-century-old.html?newsletter-cat=movies-tv",
    "description": "By Amanda Mannen Published: July 16th, 2025",
    "author": "",
    "published": "Wed, 16 Jul 2025 16:00:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/CrackedRSS",
    "categories": null
  },
  {
    "id": "c5827918-c5da-4b8c-bb01-3ac15e0f3237",
    "title": "Comic for 2021.12.21",
    "link": "http://explosm.net/comics/6060/",
    "description": "New Cyanide and Happiness Comic",
    "author": "",
    "published": "Tue, 21 Dec 2021 00:00:00 -0600",
    "image": "",
    "source": "http://feeds.feedburner.com/Explosm",
    "categories": [
      "Comics"
    ]
  },
  {
    "id": "9dbf9c10-f9ea-4a2f-b173-c08ad9710558",
    "title": "Comic for 2021.12.20",
    "link": "http://explosm.net/comics/6059/",
    "description": "New Cyanide and Happiness Comic",
    "author": "",
    "published": "Mon, 20 Dec 2021 00:00:00 -0600",
    "image": "",
    "source": "http://feeds.feedburner.com/Explosm",
    "categories": [
      "Comics"
    ]
  },
  {
    "id": "37ec87f3-9df9-4444-8f94-11d9f510ddcb",
    "title": "‘I literally thought she was joking’: Entitled woman tries to hire house painter for $50 and exposure to paint her entire house, gets sent the laughing emoji",
    "link": "https://cheezburger.com/41518341/i-literally-thought-she-was-joking-entitled-woman-tries-to-hire-house-painter-for-50-and-exposure-to",
    "description": "Oh boy, this one really made the palm of my hand smack my forehead. Like, for real, lady?! What?? A regular joe-shmo lady has a home that needs basically the entire interior repainted. A guy who does occasional house painting as a side gig happened to share this information on a neighborhood Facebook page. This Karen really jumped at this opportunity to see if she could exploit and get her conniving way. It was so absurd that this person responded with a laughing emoji because he did not think she could possibly be serious. She actually told this guy she's pay only $50 and he'd get \"great\" exposure… She's is not an influencer in any capacity and also, what??? Exposure to keep having to paint entire homes for $50?? That sounds horrible, Karen.",
    "author": "Elna McHilderson",
    "published": "Wed, 16 Jul 2025 17:00:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/failblog",
    "categories": [
      "homeowner costs",
      "real estate agent",
      "karens",
      "blue collar employee",
      "buying land",
      "tradie",
      "house paint",
      "house painter",
      "working in trades",
      "new homebuyer",
      "tradesman",
      "new homeowner",
      "trade work",
      "homeowner",
      "homeownership",
      "house hunting",
      "helpful",
      "new homeowners",
      "blue collar workers",
      "owning a home",
      "buying a house",
      "blue collar worker story",
      "reddit karen",
      "young blue collar",
      "what goes around comes around",
      "entitled people karma",
      "homebuyer",
      "real estate",
      "pay back",
      "How To",
      "senior blue collar",
      "karens in the wild",
      "justice served",
      "entitled",
      "karen karma",
      "new homebuyers",
      "r-entitled",
      "Reddit",
      "owning a house",
      "karen story",
      "blue collar",
      "new home",
      "karma",
      "karen",
      "housing market",
      "entitled people",
      "buying a new home"
    ]
  },
  {
    "id": "610fc9d0-aebe-4d35-938a-b58b507bbaf2",
    "title": "Chill HOA gets hounded by new resident to be stricter, until neighborhood uncovers that she runs an HOA management company and wants them to go through her for $700 to $1,000 a month: ‘[She was] openly lying about infractions…’",
    "link": "https://cheezburger.com/41510405/chill-hoa-gets-hounded-by-new-resident-to-be-stricter-until-neighborhood-uncovers-that-she-runs-an",
    "description": "Yes, we know, HOAs truly do not have a good reputation. It feels like ever neighborhood with an HOA is just getting all of their residents to hemorrhage money to fill the pockets of some greedy Karen or Kevin geezers. Do they even fill the potholes? Do they make sure that one entitled neighbor isn't building a pool on someone else's property? Do they clean up graffiti in the neighborhood? Probably not. They just fine people for grass that's too long and then use that money to take a cruise.  But that was not the original idea for HOAs: They were supposed to be support systems for the neighborhood. And every now and then, we find a story about an HOA that is still, surprisingly, good!",
    "author": "Elna McHilderson",
    "published": "Wed, 16 Jul 2025 15:00:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/failblog",
    "categories": [
      "homeowner costs",
      "real estate agent",
      "karens",
      "buying land",
      "hoa",
      "hoa stories",
      "hoa fees",
      "new homebuyer",
      "how to handle your hoa",
      "new homeowner",
      "hoa scandal",
      "HOA board member",
      "homeowner",
      "homeownership",
      "house hunting",
      "helpful",
      "new homeowners",
      "community drama",
      "owning a home",
      "buying a house",
      "reddit karen",
      "the 90s",
      "what goes around comes around",
      "entitled people karma",
      "homebuyer",
      "real estate",
      "pay back",
      "How To",
      "karens in the wild",
      "hoa drama",
      "justice served",
      "entitled",
      "karen karma",
      "new homebuyers",
      "r-entitled",
      "Reddit",
      "official hoa",
      "owning a house",
      "karen story",
      "new home",
      "karma",
      "karen",
      "housing market",
      "entitled people",
      "buying a new home",
      "hoa members"
    ]
  },
  {
    "id": "33fc6170-f8f2-42a3-a612-70e24ae18829",
    "title": "When the Week Won’t Quit, Send Your Boss These 26 Cat Memes to Get Them to Chill Out",
    "link": "https://cheezburger.com/41467909/when-the-week-wont-quit-send-your-boss-these-26-cat-memes-to-get-them-to-chill-out",
    "description": "Some weeks feel like they're dragging their tail all the way from Monday to Monday again, and the grind just won't quit. The to-do list grows faster than your unread messages, your coffee lost its magic, and the weekend is still not here. But in the middle of this chaos, there's one guaranteed way to claw your way back to joy: funny cat memes.Yes, fellow feline fanatics - it's time to call in the emotional support floofs. Because when deadlines loom and everything feels like a spreadsheet-powered fever dream, nothing hits quite like a cat dramatically knocking things off a shelf or yelling into the void at 3 AM for absolutely no reason.Fluff. Chaos. Drama! Our weekly cat newsletter has it all -  subscribe here.",
    "author": "Ayala Sorotsky",
    "published": "Wed, 16 Jul 2025 12:00:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/icanhascheezburger",
    "categories": [
      "funny cat memes",
      "hilarious",
      "feline funnies",
      "funny memes",
      "Memes",
      "funny cats",
      "hilarious memes",
      "Cats",
      "hilarious cats",
      "funny",
      "cat memes"
    ]
  },
  {
    "id": "5c024cfa-2171-4a80-b3db-d7e4140e1f91",
    "title": "'I don’t feel comfortable talking to her anymore unless she reaches out with an apology': Pawrent erupts after 27-year-old cat sitter refuses a two-hour trip to feed the cat an extra meal, leaving their friendship hanging by a whisker",
    "link": "https://cheezburger.com/41501189/i-dont-feel-comfortable-talking-to-her-anymore-unless-she-reaches-out-with-an-apology-pawrent-erupts",
    "description": "Taking care of a friend's cat seemed like a simple favor for this 27-year-old, especially since the friend's apartment was close to her work, making the commute easier. She stayed at the apartment from Wednesday to Saturday morning, happy to help and confident the cat was well cared for. But when her friend's flight got delayed, the situation got complicated.The friend asked her to make a two-hour round trip to feed the cat an extra meal. She explained she was already out having dinner and had plans afterward, believing missing one meal wouldn't hurt the cat. However, her friend reacted strongly, sending urgent messages and accusing her of neglect.Now, she's left wondering if she was in the wrong for refusing to drop everything to feed the cat during a delay. Was she being careless, or was she reasonable in expecting the cat to be fine for a short time without extra attention? She returned the key and set boundaries but feels conflicted, curious whether others think she should've done more or if she made the right call standing her ground. After all, sometimes even the best intentions can leave you tangled in a catty situation.Fluff. Chaos. Drama! Our weekly cat newsletter has it all -  subscribe here.",
    "author": "Sarah Brown",
    "published": "Wed, 16 Jul 2025 13:00:00 -0700",
    "image": "",
    "source": "http://feeds.feedburner.com/icanhascheezburger",
    "categories": [
      "neighbors",
      "pets",
      "fight",
      "advice",
      "feline",
      "argument",
      "Cats",
      "cat owners"
    ]
  },
  {
    "id": "8ff70dd1-d36b-4f0d-9806-f1afee0ca27f",
    "title": "Discorbs",
    "link": "https://www.penny-arcade.com/news/post/2025/07/16/discorbs",
    "description": "Discord keeps adding delighters and sparklitos and all kinds of things they want me to do, use, or buy. I'm not certain we've achieved true enshittification but there is a lot of shit on there now and it's wigglin' 25/8.",
    "author": "",
    "published": "Wed, 16 Jul 2025 21:07:00 +0000",
    "image": "",
    "source": "https://www.penny-arcade.com/feed",
    "categories": null
  },
  {
    "id": "687c949e-5926-472a-97db-7c5323fbc835",
    "title": "This Once Famous Gen X Cartoonist is Revealing His Secrets",
    "link": "https://www.penny-arcade.com/news/post/2025/07/16/this-once-famous-gen-x-cartoonist-is-revealing-his-secrets",
    "description": "I recorded another timelapse of the comic creation and this time I remembered to turn it on before I started! Here’s a look at today’s comic strip from start to finish. Again, if you set the play back speed to 0.25 you approach something like real time but it’s important to note that it only records when I make a stroke so you don’t have all my pauses. While I’m drawing I’m also watching a show, pausing to think about what I’m gonna draw, talking with my kids as they come in and out, messing up and getting mad at myself, eating some lunch, and all that good stuff. This might make it look like I sit down and power through a comic without hesitation and with supreme confidence but I assure you that is not the case unless I am drawing live on stage at PAX.",
    "author": "",
    "published": "Wed, 16 Jul 2025 17:24:00 +0000",
    "image": "",
    "source": "https://www.penny-arcade.com/feed",
    "categories": null
  },
  {
    "id": "2e3271c7-c577-40fe-901b-5f5b3dcf8fc9",
    "title": "01/15/21 PHD comic: 'NEW BOOK! Out of Your Mind!'",
    "link": "http://www.phdcomics.com/comics.php?f=2051",
    "description": "Piled Higher \u0026 Deeper by Jorge Cham www.phdcomics.com title: \"NEW BOOK! Out of Your Mind!\" - originally published 1/15/2021 For the latest news in PHD Comics, CLICK HERE!",
    "author": "",
    "published": "Mon, 31 Jan 2022 11:24:26 -0800",
    "image": "http://www.phdcomics.com/comics/archive/phd011525s.gif",
    "source": "http://phdcomics.com/gradfeed.php",
    "categories": null
  },
  {
    "id": "ac5ba05d-6dc4-465b-9152-b77378499464",
    "title": "08/31/23 PHD comic: 'New Book! Oliver's Great Big Universe!'",
    "link": "http://www.phdcomics.com/comics.php?f=2050",
    "description": "Piled Higher \u0026 Deeper by Jorge Cham www.phdcomics.com title: \"New Book! Oliver's Great Big Universe!\" - originally published 8/31/2023 For the latest news in PHD Comics, CLICK HERE!",
    "author": "",
    "published": "Tue, 14 Dec 2021 11:53:03 -0800",
    "image": "http://www.phdcomics.com/comics/archive/phd083123s.gif",
    "source": "http://phdcomics.com/gradfeed.php",
    "categories": null
  },
  {
    "id": "d22d6e27-3579-4d12-8b8b-1094aadbae18",
    "title": "Utterly bewitched by books",
    "link": "https://thebloggess.com/2025/07/16/utterly-bewitched-by-books/",
    "description": "I’m a bit late with this because everything has been a bit upside down, but things are finally starting to feel a little bit better and so I am back to tell you about my favorite new July books! For the Fantastic Strangelings Book Club we’re sending you American Mythology by Giano Cromley, a quirky,Continue reading \"Utterly bewitched by books\"",
    "author": "thebloggess",
    "published": "Wed, 16 Jul 2025 23:03:08 +0000",
    "image": "",
    "source": "https://thebloggess.com/feed/",
    "categories": [
      "Random Crap"
    ]
  },
  {
    "id": "07863f6c-c60b-4721-84df-3a63cf356830",
    "title": "Wait…is this going to work?",
    "link": "https://thebloggess.com/2025/07/08/wait-is-this-going-to-work/",
    "description": "I have not been ignoring you but my blog has been broken and giving error messages every time I try to write, but I think maybe it’s fixed? I guess we’ll see if this goes through. I’m too tired to be entirely cohesive or funny but I wanted you to know that Hailey is homeContinue reading \"Wait…is this going to work?\"",
    "author": "thebloggess",
    "published": "Tue, 08 Jul 2025 19:38:03 +0000",
    "image": "",
    "source": "https://thebloggess.com/feed/",
    "categories": [
      "Random Crap"
    ]
  },
  {
    "id": "5f85dd78-6eb7-415d-bed9-96b0d6c6a99d",
    "title": "Saturday Morning Breakfast Cereal - Boyfriend",
    "link": "https://www.smbc-comics.com/comic/boyfriend",
    "description": "Click here to go see the bonus panel!Hovertext:YOU GET OUT OF MY HOUSE BECAUSE I'VE CLEARLY KEPT YOU TOO LONG LET ME CALL YOU A CAB.Today's News:",
    "author": "Zach Weinersmith",
    "published": "Wed, 16 Jul 2025 11:20:00 -0400",
    "image": "https://www.smbc-comics.com/comics/1752556983-20250717.png",
    "source": "https://www.smbc-comics.com/comic/rss",
    "categories": null
  },
  {
    "id": "548f4c26-66af-4c8d-b507-e76ec93d4282",
    "title": "Saturday Morning Breakfast Cereal - Prompt",
    "link": "https://www.smbc-comics.com/comic/prompt",
    "description": "Click here to go see the bonus panel!Hovertext:Suddenly wondering if someone has already done this.Today's News:",
    "author": "Zach Weinersmith",
    "published": "Tue, 15 Jul 2025 11:20:00 -0400",
    "image": "https://www.smbc-comics.com/comics/1752556806-20250716.png",
    "source": "https://www.smbc-comics.com/comic/rss",
    "categories": null
  },
  {
    "id": "2ff09292-1a8c-4951-b33c-751f0c2bfdfe",
    "title": "Sunday Secrets",
    "link": "https://postsecret.com/2025/07/13/sunday-secrets-562/",
    "description": "Sunday Secrets began 20 years ago. This week I did not receive enough postcards to share back. Free your secrets today. The post Sunday Secrets appeared first on PostSecret.",
    "author": "Frank",
    "published": "Sun, 13 Jul 2025 00:08:00 +0000",
    "image": "https://i0.wp.com/postsecret.com/wp-content/uploads/2025/07/Screen-Shot-2024-03-25-at-1.05.52-PM.png?resize=520%2C315\u0026ssl=1",
    "source": "https://postsecret.com/feed/?alt=rss",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "c51e64f3-8c4f-423b-949f-d75f76f9b27a",
    "title": "Classic Secrets",
    "link": "https://postsecret.com/2025/07/13/classic-secrets-568/",
    "description": "The post Classic Secrets appeared first on PostSecret.",
    "author": "Frank",
    "published": "Sun, 13 Jul 2025 00:05:00 +0000",
    "image": "https://i0.wp.com/postsecret.com/wp-content/uploads/2025/07/worship.jpg?resize=526%2C381\u0026ssl=1",
    "source": "https://postsecret.com/feed/?alt=rss",
    "categories": [
      "Uncategorized"
    ]
  },
  {
    "id": "07d6b82d-c965-4fcd-b5fe-a2d7660d307e",
    "title": "They're doing it again",
    "link": "http://theoatmeal.com/comics/squirrel_filming?no_popup=1",
    "description": "A comic about an old couple recording a video of a squirrel and a cat.View on my website",
    "author": "Matthew Inman",
    "published": "2025-07-15T15:21:11+01:00",
    "image": "https://s3.amazonaws.com/theoatmeal-img/thumbnails/squirrel_filming_big.png",
    "source": "http://feeds.feedburner.com/oatmealfeed",
    "categories": null
  },
  {
    "id": "15c772f5-d285-4708-946d-368f007cdf42",
    "title": "A toddler tells a joke",
    "link": "http://theoatmeal.com/comics/toddler_joke?no_popup=1",
    "description": "A comic about a toddler telling his first joke.View on my website",
    "author": "Matthew Inman",
    "published": "2025-07-09T21:58:45+01:00",
    "image": "https://s3.amazonaws.com/theoatmeal-img/thumbnails/toddler_joke_big.png",
    "source": "http://feeds.feedburner.com/oatmealfeed",
    "categories": null
  },
  {
    "id": "5a635ebb-e66a-4c46-a815-fbf8f94aa15e",
    "title": "Representative Line: National Exclamations",
    "link": "https://thedailywtf.com/articles/national-exclamations",
    "description": "Carlos and Claire found themselves supporting a 3rd party logistics package, called IniFreight. Like most \"enterprise\" software, it was expensive, unreliable, and incredibly complicated. It had also been owned by four different companies during the time Carlos had supported it, as its various owners underwent a series of acquisitions. It kept them busy, which is better than being bored. One day, Claire asked Carlos, \"In SQL, what does an exclamation point mean?\" \"Like, as a negation? I don't think most SQL dialects support that.\" \"No, like-\" and Claire showed him the query. select * from valuation where origin_country \u003c '!' \"IniFreight, I presume?\" Carlos asked. \"Yeah. I assume this means, 'where origin country isn't blank?' But why not just check for NOT NULL?\" The why was easy to answer: origin_country had a constraint which prohibited nulls. But the input field didn't do a trim, so the field did allow whitespace only strings. The ! is the first printable, non-whitespace character in ASCII (which is what their database was using, because it was built before \"support wide character sets\" was a common desire). Unfortunately, this means that my micronation, which is simply spelled with the ASCII character 0x07 will never show up in their database. You might not think you're familiar with my country, but trust me- it'll ring a bell. [Advertisement] Utilize BuildMaster to release your software with confidence, at the pace your business demands. Download today!",
    "author": "Remy Porter",
    "published": "Wed, 16 Jul 2025 06:30:00 GMT",
    "image": "https://thedailywtf.com/images/inedo/buildmaster-icon.png",
    "source": "http://syndication.thedailywtf.com/TheDailyWtf",
    "categories": [
      "Representative Line"
    ]
  },
  {
    "id": "f729c3a0-3fec-429f-b32e-e02ec387ff07",
    "title": "CodeSOD: Born Single",
    "link": "https://thedailywtf.com/articles/born-single",
    "description": "Alistair sends us a pretty big blob of code, but it's a blob which touches upon everyone's favorite design pattern: the singleton. It's a lot of Java code, so we're going to take this as chunks. Let's start with the two methods responsible for constructing the object. The purpose of this code is to parse an XML file, and construct a mapping from a \"name\" field in the XML to a \"batch descriptor\". /** * Instantiates a new batch manager. */ private BatchManager() { try { final XMLReader xmlReader = XMLReaderFactory.createXMLReader(); xmlReader.setContentHandler(this); xmlReader.parse(new InputSource(this.getClass().getClassLoader().getResourceAsStream(\"templates/\" + DOCUMENT))); } catch (final Exception e) { logger.error(\"Error parsing Batch XML.\", e); } } /* * (non-Javadoc) * * @see nz.this.is.absolute.crap.sax.XMLEntity#initChild(java.lang.String, * java.lang.String, java.lang.String, org.xml.sax.Attributes) */ @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { final BatchDescriptor batchDescriptor = new BatchDescriptor(); // put it in the map batchMap.put(attributes.getValue(\"name\"), batchDescriptor); return batchDescriptor; } Here we see a private constructor, which is reasonable for a singleton. It creates a SAX based reader. SAX is event driven- instead of loading the whole document into a DOM, it emits an event as it encounters each new key element in the XML document. It's cumbersome to use, but far more memory efficient, and I'd hardly say this.is.absolute.crap, but whatever. This code is perfectly reasonable. But do you know what's unreasonable? There's a lot more code, and these are the only things not marked as static. So let's keep going. // singleton instance so that static batch map can be initialised using // xml /** The Constant singleton. */ @SuppressWarnings(\"unused\") private static final Object singleton = new BatchManager(); Wait… why is the singleton object throwing warnings about being unused? And wait a second, what is that comment saying, \"so the static batch map can be initalalised\"? I saw a batchMap up in the initChild method above, but it can't be… private static Map batchMap = new HashMap(); Oh. Oh no. /** * Gets the. * * @param batchName * the batch name * * @return the batch descriptor */ public static BatchDescriptor get(String batchName) { return batchMap.get(batchName); } /** * Gets the post to selector name. * * @param batchName * the batch name * * @return the post to selector name */ public static String getPostToSelectorName(String batchName) { final BatchDescriptor batchDescriptor = batchMap.get(batchName); if (batchDescriptor == null) { return null; } return batchDescriptor.getPostTo(); } There are more methods, and I'll share the whole code at the end, but this gives us a taste. Here's what this code is actually doing. It creates a static Map. static, in this context, means that this instance is shared across all instances of BatchManager.They also create a static instance of BatchManager inside of itself. The constructor of that instance then executes, populating that static Map. Now, when anyone invokes BatchManager.get it will use that static Map to resolve that. This certainly works, and it offers a certain degree of cleanness in its implementation. A more conventional singleton would have the Map being owned by an instance, and it's just using the singleton convention to ensure there's only a single instance. This version's calling convention is certainly nicer than doing something like BatchManager.getInstance().get(…), but there's just something unholy about this that sticks into me. I can't say for certain if it's because I just hate Singletons, or if it's this specific abuse of constructors and static members. This is certainly one of the cases of misusing a singleton- it does not represent something there can be only one of, it's ensuring that an expensive computation is only allowed to be done once. There are better ways to handle that lifecycle. This approach also forces that expensive operation to happen at application startup, instead of being something flexible that can be evaluated lazily. It's not wrong to do this eagerly, but building something that can only do it eagerly is a mistake. In any case, the full code submission follows: package nz.this.is.absolute.crap.server.template; import java.io.IOException; import java.util.ArrayList; import java.util.Collection; import java.util.HashMap; import java.util.Iterator; import java.util.Map; import java.util.ResourceBundle; import nz.this.is.absolute.crap.KupengaException; import nz.this.is.absolute.crap.SafeComparator; import nz.this.is.absolute.crap.sax.XMLEntity; import nz.this.is.absolute.crap.selector.Selector; import nz.this.is.absolute.crap.selector.SelectorItem; import nz.this.is.absolute.crap.server.BatchValidator; import nz.this.is.absolute.crap.server.Validatable; import nz.this.is.absolute.crap.server.ValidationException; import nz.this.is.absolute.crap.server.business.BusinessObject; import nz.this.is.absolute.crap.server.database.EntityHandler; import nz.this.is.absolute.crap.server.database.SQLEntityHandler; import org.apache.log4j.Logger; import org.xml.sax.Attributes; import org.xml.sax.ContentHandler; import org.xml.sax.InputSource; import org.xml.sax.SAXException; import org.xml.sax.XMLReader; import org.xml.sax.helpers.XMLReaderFactory; /** * The Class BatchManager. */ public class BatchManager extends XMLEntity { private static final Logger logger = Logger.getLogger(BatchManager.class); /** The Constant DOCUMENT. */ private final static String DOCUMENT = \"Batches.xml\"; /** * The Class BatchDescriptor. */ public class BatchDescriptor extends XMLEntity { /** The batchSelectors. */ private final Collection batchSelectors = new ArrayList(); /** The dependentCollections. */ private final Collection dependentCollections = new ArrayList(); /** The directSelectors. */ private final Collection directSelectors = new ArrayList(); /** The postTo. */ private String postTo; /** The properties. */ private final Collection properties = new ArrayList(); /** * Gets the batch selectors iterator. * * @return the batch selectors iterator */ public Iterator getBatchSelectorsIterator() { return this.batchSelectors.iterator(); } /** * Gets the dependent collections iterator. * * @return the dependent collections iterator */ public Iterator getDependentCollectionsIterator() { return this.dependentCollections.iterator(); } /** * Gets the post to. * * @return the post to */ public String getPostTo() { return this.postTo; } /** * Gets the post to business object. * * @param businessObject * the business object * @param postHandler * the post handler * * @return the post to business object * * @throws ValidationException * the validation exception */ private BusinessObject getPostToBusinessObject( BusinessObject businessObject, EntityHandler postHandler) throws ValidationException { if (this.postTo == null) { return null; } final BusinessObject postToBusinessObject = businessObject .getBusinessObjectFromMap(this.postTo, postHandler); // copy properties for (final String propertyName : this.properties) { String postToPropertyName; if (\"postToStatus\".equals(propertyName)) { // status field on batch entity refers to the batch entity // itself // so postToStatus is used for updating the status property // of the postToBusinessObject itself postToPropertyName = \"status\"; } else { postToPropertyName = propertyName; } final SelectorItem destinationItem = postToBusinessObject .find(postToPropertyName); if (destinationItem != null) { final Object oldValue = destinationItem.getValue(); final Object newValue = businessObject.get(propertyName); if (SafeComparator.areDifferent(oldValue, newValue)) { destinationItem.setValue(newValue); } } } // copy direct selectors for (final String selectorName : this.directSelectors) { final SelectorItem destinationItem = postToBusinessObject .find(selectorName); if (destinationItem != null) { // get the old and new values for the selectors Selector oldSelector = (Selector) destinationItem .getValue(); Selector newSelector = (Selector) businessObject .get(selectorName); // strip them down to bare identifiers for comparison if (oldSelector != null) { oldSelector = oldSelector.getAsIdentifier(); } if (newSelector != null) { newSelector = newSelector.getAsIdentifier(); } // if they're different then update if (SafeComparator.areDifferent(oldSelector, newSelector)) { destinationItem.setValue(newSelector); } } } // copy batch selectors for (final String batchSelectorName : this.batchSelectors) { final Selector batchSelector = (Selector) businessObject .get(batchSelectorName); if (batchSelector == null) { throw new ValidationException( \"\\\"PostTo\\\" selector missing.\"); } final BusinessObject batchObject = postHandler .find(batchSelector); if (batchObject != null) { // get the postTo selector for the batch object we depend on final BatchDescriptor batchDescriptor = batchMap .get(batchObject.getName()); if (batchDescriptor.postTo != null \u0026\u0026 postToBusinessObject .containsKey(batchDescriptor.postTo)) { final Selector realSelector = batchObject .getBusinessObjectFromMap( batchDescriptor.postTo, postHandler); postToBusinessObject.put(batchDescriptor.postTo, realSelector); } } } businessObject.put(this.postTo, postToBusinessObject); return postToBusinessObject; } /* * (non-Javadoc) * * @see * nz.this.is.absolute.crap.sax.XMLEntity#initChild(java.lang.String, * java.lang.String, java.lang.String, org.xml.sax.Attributes) */ @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { if (\"Properties\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.properties.add(attributes .getValue(\"name\")); return null; } }; } else if (\"DirectSelectors\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.directSelectors.add(attributes .getValue(\"name\")); return null; } }; } else if (\"BatchSelectors\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.batchSelectors.add(attributes .getValue(\"name\")); return null; } }; } else if (\"PostTo\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.postTo = attributes .getValue(\"name\"); return null; } }; } else if (\"DependentCollections\".equals(qName)) { return new XMLEntity() { @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { BatchDescriptor.this.dependentCollections .add(attributes.getValue(\"name\")); return null; } }; } return null; } } /** The batchMap. */ private static Map batchMap = new HashMap(); /** * Gets the. * * @param batchName * the batch name * * @return the batch descriptor */ public static BatchDescriptor get(String batchName) { return batchMap.get(batchName); } /** * Gets the post to selector name. * * @param batchName * the batch name * * @return the post to selector name */ public static String getPostToSelectorName(String batchName) { final BatchDescriptor batchDescriptor = batchMap.get(batchName); if (batchDescriptor == null) { return null; } return batchDescriptor.getPostTo(); } // singleton instance so that static batch map can be initialised using // xml /** The Constant singleton. */ @SuppressWarnings(\"unused\") private static final Object singleton = new BatchManager(); /** * Post. * * @param businessObject * the business object * * @throws Exception * the exception */ public static void post(BusinessObject businessObject) throws Exception { // validate the batch root object only - it can validate the rest if it // needs to if (businessObject instanceof Validatable) { if (!BatchValidator.validate(businessObject)) { logger.warn(String.format(\"Validating %s failed\", businessObject.getClass().getSimpleName())); throw new ValidationException( \"Batch did not validate - it was not posted\"); } ((Validatable) businessObject).validator().prepareToPost(); } final SQLEntityHandler postHandler = new SQLEntityHandler(true); final Iterator batchIterator = new BatchIterator( businessObject, null, postHandler); // iterate through batch again posting each object try { while (batchIterator.hasNext()) { post(batchIterator.next(), postHandler); } postHandler.commit(); } catch (final Exception e) { logger.error(\"Exception occurred while posting batches\", e); // something went wrong postHandler.rollback(); throw e; } return; } /** * Post. * * @param businessObject * the business object * @param postHandler * the post handler * * @throws KupengaException * the kupenga exception */ private static void post(BusinessObject businessObject, EntityHandler postHandler) throws KupengaException { if (businessObject == null) { return; } if (Boolean.TRUE.equals(businessObject.get(\"posted\"))) { return; } final BatchDescriptor batchDescriptor = batchMap.get(businessObject .getName()); final BusinessObject postToBusinessObject = batchDescriptor .getPostToBusinessObject(businessObject, postHandler); if (postToBusinessObject != null) { postToBusinessObject.save(postHandler); } businessObject.setItemValue(\"posted\", Boolean.TRUE); businessObject.save(postHandler); } /** * Instantiates a new batch manager. */ private BatchManager() { try { final XMLReader xmlReader = XMLReaderFactory.createXMLReader(); xmlReader.setContentHandler(this); xmlReader.parse(new InputSource(this.getClass().getClassLoader().getResourceAsStream(\"templates/\" + DOCUMENT))); } catch (final Exception e) { logger.error(\"Error parsing Batch XML.\", e); } } /* * (non-Javadoc) * * @see nz.this.is.absolute.crap.sax.XMLEntity#initChild(java.lang.String, * java.lang.String, java.lang.String, org.xml.sax.Attributes) */ @Override protected ContentHandler initChild(String uri, String localName, String qName, Attributes attributes) throws SAXException { final BatchDescriptor batchDescriptor = new BatchDescriptor(); // put it in the map batchMap.put(attributes.getValue(\"name\"), batchDescriptor); return batchDescriptor; } } .comment { border: none; } [Advertisement] Keep all your packages and Docker containers in one place, scan for vulnerabilities, and control who can access different feeds. ProGet installs in minutes and has a powerful free version with a lot of great features that you can upgrade when ready.Learn more.",
    "author": "Remy Porter",
    "published": "Tue, 15 Jul 2025 06:30:00 GMT",
    "image": "https://thedailywtf.com/images/inedo/proget-icon.png",
    "source": "http://syndication.thedailywtf.com/TheDailyWtf",
    "categories": [
      "CodeSOD"
    ]
  },
  {
    "id": "0da8d9eb-d367-4457-94e1-320e40a265c2",
    "title": "Beetle Infestation Threatens Hungary’s Oldest Library",
    "link": "https://theonion.com/beetle-infestation-threatens-hungarys-oldest-library/",
    "description": "Hungary’s 1,000‑year‑old Pannonhalma Archabbey is scrambling to disinfect and preserve tens of thousands of historic books from a destructive beetle infestation that could wipe out centuries of history. What do you think? The post Beetle Infestation Threatens Hungary’s Oldest Library appeared first on The Onion.",
    "author": "The Onion Staff",
    "published": "Wed, 16 Jul 2025 16:04:14 +0000",
    "image": "https://theonion.com/wp-content/uploads/2025/05/Face-Young-Man.jpg?w=200",
    "source": "https://www.theonion.com/rss",
    "categories": [
      "American Voices",
      "Animals",
      "Books",
      "Vol 61: Issue 29"
    ]
  },
  {
    "id": "2c74622f-b9fd-47eb-851e-2a0b8b0da118",
    "title": "Study: Majority Of Billionaires Consider Selves  Middle Class",
    "link": "https://theonion.com/study-majority-of-billionaires-consider-selves-middle-class/",
    "description": "ST. PAUL, MN—In a comprehensive new survey of how the wealthy view their socioeconomic status, a study published this week in the Journal Of Economic Perspectives found that the majority of billionaires consider themselves to be middle class. The study—which collected responses from 865 of the richest Americans, including Jeff Bezos, Mark Zuckerberg, Elon Musk, […] The post Study: Majority Of Billionaires Consider Selves  Middle Class appeared first on The Onion.",
    "author": "The Onion Staff",
    "published": "Wed, 16 Jul 2025 13:00:00 +0000",
    "image": "",
    "source": "https://www.theonion.com/rss",
    "categories": [
      "News",
      "Elon Musk",
      "Finance",
      "Former Print Exclusive",
      "Jeff Bezos",
      "Mark Zuckerberg",
      "Vol 61: Issue 16"
    ]
  }
]
