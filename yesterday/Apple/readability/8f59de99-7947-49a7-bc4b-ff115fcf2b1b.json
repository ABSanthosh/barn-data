{
  "id": "8f59de99-7947-49a7-bc4b-ff115fcf2b1b",
  "title": "★ WebKit Adds Support for ‘text-wrap: pretty’, Now Shipping in Safari Technology Preview",
  "link": "https://daringfireball.net/2025/04/webkit_textwrap_pretty",
  "description": "I think it’s a good start, and I couldn’t be happier that the WebKit team is even tackling the problem at all. As Simmons notes, line-wrapping layout in web browsers has, until now, been very crude — and the web has been around a long time.",
  "author": "John Gruber",
  "published": "2025-04-09T23:11:05Z",
  "source": "https://daringfireball.net/feeds/main",
  "categories": null,
  "byline": "Wednesday, 9 April 2025",
  "length": 3920,
  "excerpt": "I think it’s a good start, and I couldn’t be happier that the WebKit team is even tackling the problem at all. As Simmons notes, line-wrapping layout in web browsers has, until now, been very crude — and the web has been around a long time.",
  "siteName": "Daring Fireball",
  "favicon": "https://daringfireball.net/graphics/apple-touch-icon.png",
  "text": "Jen Simmons, writing on the WebKit blog, “Better Typography With text-wrap pretty”: For over 30 years, the web had only one technique for determining where to wrap text. The browser starts with the first line of text, and lays out each word or syllable, one after another until it runs out of room. As soon as it has no more space to fit another word/syllable, it wraps to the next line (if wrapping is allowed). Then it starts on the next line, fitting all the content it can… then when it runs out of room, it wraps… and starts working on the next line. It’s always thinking about only one line at a time. It wraps whenever it needs, after it’s fit the maximum amount of content on the previous line. If hyphenation is turned on, it will hyphenate whatever word is last on the line, at whatever point leaves as much of the word on the previous line as possible. Nothing else is taken into consideration — which is why text on the web has bad rag, rivers, short last lines, and hyphenation that makes no sense. This is not required by the fact that text is laid out by a computer. For decades, software like Adobe InDesign and LaTeX has evaluated multiple lines of text at a time as they decide where to end one line and begin the next. It’s just that the web didn’t use a multiline algorithm. Until now. We are excited to bring this capability to the web for the first time, in Safari Technology Preview 216. I’ve turned this on here at Daring Fireball, at least as an experiment. (Look at me, fast adopter of novel CSS features.) I have mixed feelings about the results. Here are saved PDFs showing the rendering of my “How Many New iPhones Can Fit on a Freight Plane?” article from earlier today: first with traditional text-wrap: auto line wrapping, and second with WebKit’s new text-wrap: pretty in STP 216. Looking at each paragraph by itself, there’s no question this new layout algorithm is, well, prettier. The problem I see is going from one paragraph to another. Within a paragraph, WebKit’s new pretty wrapping definitely makes lines a more uniform width. But in some cases it so narrows an entire paragraph that it makes going from one paragraph to the next jarring. Line-to-line the new algorithm looks better, but paragraph-to-paragraph I think it looks worse. One specific example, from my longest recent article. First, with the old text-wrap: auto: Here’s that same list with the new text-wrap: pretty in STP 216: With the new text-wrap: pretty, the entire paragraph for the first list item is noticeably wider than the subsequent ones (and noticeably wider than the one preceding the list). To me, there’s so much disparity between paragraph widths that it’s distracting, even though each paragraph, taken on its own, looks better. But you don’t take paragraphs on their own when reading. I suspect (informed by toying with Simmons’s fun interactive demo page using STP 216) that this initial WebKit text-wrap: pretty layout algorithm works better with wider column widths than are currently specified on Daring Fireball. With a little more width to play with, there seems to be less back-and-forth change from paragraph to paragraph. So, for my purposes, this might be yet another improvement that will need to wait for the long-promised-but-who-knows-when-it-might-actually-happen-but-I-swear-I-think-about-it-quite-a-bit-and-a-few-years-ago-even-had-something-in-motion-but-then-let-the-project-drop layout modernization here. But, even with a nice responsive design, column widths on phones are inherently narrow, so I think this algorithm ought to be tweaked to render more consistent paragraph widths in narrow-ish columns. But I think it’s a good start, and I couldn’t be happier that the WebKit team is even tackling the problem at all. As Simmons notes, line-wrapping layout in web browsers has, until now, been very crude — and the web has been around a long time.",
  "image": "https://daringfireball.net/graphics/df-wide-card.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv id=\"Box\"\u003e\n\n\n\n\u003cp\u003eJen Simmons, writing on the WebKit blog, “\u003ca href=\"https://webkit.org/blog/16547/better-typography-with-text-wrap-pretty/\"\u003eBetter Typography With text-wrap pretty\u003c/a\u003e”:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eFor over 30 years, the web had only one technique for determining\nwhere to wrap text.\u003c/p\u003e\n\n\u003cp\u003eThe browser starts with the first line of text, and lays out each\nword or syllable, one after another until it runs out of room. As\nsoon as it has no more space to fit another word/syllable, it\nwraps to the next line (if \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap-mode\"\u003ewrapping\u003c/a\u003e is allowed). Then it\nstarts on the next line, fitting all the content it can… then\nwhen it runs out of room, it wraps… and starts working on the\nnext line.\u003c/p\u003e\n\n\u003cp\u003eIt’s always thinking about only one line at a time. It wraps\nwhenever it needs, after it’s fit the maximum amount of content\non the previous line. If hyphenation is turned on, it will\nhyphenate whatever word is last on the line, at whatever point\nleaves as much of the word on the previous line as possible.\nNothing else is taken into consideration — which is why text on\nthe web has bad rag, rivers, short last lines, and hyphenation\nthat makes no sense.\u003c/p\u003e\n\n\u003cp\u003eThis is not required by the fact that text is laid out by a\ncomputer. For decades, software like Adobe InDesign and LaTeX has\nevaluated multiple lines of text at a time as they decide where to\nend one line and begin the next. It’s just that the web didn’t use\na multiline algorithm. Until now.\u003c/p\u003e\n\n\u003cp\u003eWe are excited to bring this capability to the web for the first\ntime, in Safari Technology Preview 216.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI’ve turned this on here at Daring Fireball, at least as an experiment. (Look at me, fast adopter of novel CSS features.) I have mixed feelings about the results. Here are saved PDFs showing the rendering of my “\u003ca href=\"https://daringfireball.net/2025/04/how_many_iphones_can_fit_on_a_freight_plane\"\u003eHow Many New iPhones Can Fit on a Freight Plane?\u003c/a\u003e” article from earlier today: \u003ca href=\"https://daringfireball.net/misc/2025/04/df-iphones-on-plane-textwrap-auto.pdf\"\u003efirst with traditional \u003ccode\u003etext-wrap: auto\u003c/code\u003e\u003c/a\u003e line wrapping, and \u003ca href=\"https://daringfireball.net/misc/2025/04/df-iphones-on-plane-textwrap-pretty.pdf\"\u003esecond with WebKit’s new \u003ccode\u003etext-wrap: pretty\u003c/code\u003e\u003c/a\u003e in \u003ca href=\"https://developer.apple.com/safari/technology-preview/\"\u003eSTP\u003c/a\u003e 216. Looking at each paragraph by itself, there’s no question this new layout algorithm is, well, prettier. The problem I see is going from one paragraph to another. Within a paragraph, WebKit’s new \u003ccode\u003epretty\u003c/code\u003e wrapping definitely makes lines a more uniform width. But in some cases it so narrows an entire paragraph that it makes going from one paragraph to the next jarring. Line-to-line the new algorithm looks better, but paragraph-to-paragraph I think it looks worse.\u003c/p\u003e\n\n\u003cp\u003eOne specific example, from \u003ca href=\"https://daringfireball.net/2025/03/something_is_rotten_in_the_state_of_cupertino\"\u003emy longest recent article\u003c/a\u003e. First, with the old \u003ccode\u003etext-wrap: auto\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://daringfireball.net/misc/2025/04/df-something-rotten-textwrap-auto.png\"\u003e\n  \u003cimg src=\"https://daringfireball.net/misc/2025/04/df-something-rotten-textwrap-auto.png\" alt=\"A screenshot from a recent Daring Fireball article, showing a list of 4 items.\" width=\"500\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eHere’s that same list with the new \u003ccode\u003etext-wrap: pretty\u003c/code\u003e in STP 216:\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://daringfireball.net/misc/2025/04/df-something-rotten-textwrap-pretty.png\"\u003e\n  \u003cimg src=\"https://daringfireball.net/misc/2025/04/df-something-rotten-textwrap-pretty.png\" alt=\"A screenshot of the same section from the same recent article as the previous screenshot, but in this one, one of the list item paragraphs is noticeably wider than the others.\" width=\"500\"/\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eWith the new \u003ccode\u003etext-wrap: pretty\u003c/code\u003e, the entire paragraph for the first list item is noticeably wider than the subsequent ones (and noticeably wider than the one preceding the list). To me, there’s so much disparity between paragraph widths that it’s distracting, even though each paragraph, taken on its own, looks better. But you don’t take paragraphs on their own when reading.\u003c/p\u003e\n\n\u003cp\u003eI suspect (informed by toying with \u003ca href=\"https://codepen.io/jensimmons/full/xxvoqNM\"\u003eSimmons’s fun interactive demo page\u003c/a\u003e using STP 216) that this initial WebKit \u003ccode\u003etext-wrap: pretty\u003c/code\u003e layout algorithm works better with wider column widths than are currently specified on Daring Fireball. With a little more width to play with, there seems to be less back-and-forth change from paragraph to paragraph.\u003c/p\u003e\n\n\u003cp\u003eSo, for my purposes, this might be yet another improvement that will need to wait for the long-promised-but-who-knows-when-it-might-actually-happen-but-I-swear-I-think-about-it-quite-a-bit-and-a-few-years-ago-even-had-something-in-motion-but-then-let-the-project-drop layout modernization here. But, even with a nice responsive design, column widths on phones are inherently narrow, so I think this algorithm ought to be tweaked to render more consistent paragraph widths in narrow-ish columns.\u003c/p\u003e\n\n\u003cp\u003eBut I think it’s a good start, and I couldn’t be happier that the WebKit team is even tackling the problem at all. As Simmons notes, line-wrapping layout in web browsers has, until now, been very crude — and the web has been around a long time.\u003c/p\u003e\n\n\n\n \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
