{
  "id": "bc817da5-fa29-46c8-a759-e9c3b4fd1169",
  "title": "Demystifying decorators: They don't need to be cryptic",
  "link": "https://www.thepythoncodingstack.com/p/demystifying-python-decorators",
  "description": "Article URL: https://www.thepythoncodingstack.com/p/demystifying-python-decorators Comments URL: https://news.ycombinator.com/item?id=43746532 Points: 8 # Comments: 0",
  "author": "rbanffy",
  "published": "Sun, 20 Apr 2025 21:07:03 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "Stephen Gruppetta",
  "length": 31366,
  "excerpt": "\"What on Earth is going on with decorators?\" Is this you? They're not as hard as you think. But we need to get there step by step",
  "siteName": "The Python Coding Stack",
  "favicon": "https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F25bb6f6a-f23c-44f2-8b3e-f251f8cc47d5%2Fapple-touch-icon-1024x1024.png",
  "text": "I avoided decorators for so long. First, I pretended they didn't exist. Then, I treated them like a magic spell—I'd use some of the common ones and simply copy how they're used in the documentation. And each time I tried to learn how they work, I'd give up pretty quickly.But eventually, I got there. And once I finally understood how decorators work, my reaction was, \"Is that it?\" As with many complex topics, the magic goes away once you get it, and what's left makes perfect sense.So, let me take you on a journey similar to the one I took to demystify decorators.I split this decorator quest into seven parts. This article covers Parts 1 and 2. These are the most important parts to understand decorators. Take your time. I'll publish Parts 3 to 7 in a separate article soon.Decorators are powerful for adding reusable functionality to functions without the need to define a new function. You’ll see them often in Python, and you may even need to write your own one at some point.Part 1 introduces one of the main characters in this story—closures. We'll get to decorators in Part 2 later in this article.Let's say you want to keep track of all the arguments you pass to all the calls to print() throughout your code. And no, you don't want to have to do this manually. You want your code to automatically keep a record of any argument you use when you call print().Start by defining a new function to replace the built-in print(). Although you could name this new function print, I'll add a trailing underscore in this example to keep the code focused on what really matters. First, here's a version that won't work as intended—the code runs without errors but doesn't achieve the result you need:All code blocks are available in text format at the end of this article • #1 • The code images used in this article are created using Snappify. [Affiliate link]The new print_() function calls the built-in print(), but it also appends the argument to a list named data. Look for the trailing underscore in this article whenever I write print_ or print!However, data is defined within the function definition. Therefore, data is a local variable. It exists only when you call the function and while the program executes it. It cannot be accessed from anywhere else in the program. This variable is local to each function call.The code creates a new list each time you call the function. That won't work. You need a single list that contains all the arguments you pass to all the print_() function calls.A second option is to define the list data outside the function definition:#2The list data now exists in the global scope. And a function can access names defined in the global scope. Therefore, this solution works. Here's the output from this code:I love Python ...and also The Python Coding Stack ['I love Python', '...and also The Python Coding Stack']The list data now holds a record of all the arguments you pass to print_().This works. However, there are some drawbacks to this solution. The list data exists in the global scope and, therefore, can be accessed from anywhere in the code. There's the danger that another part of your code tries to access and modify this list, leading to bugs and unexpected behaviour:#3The list data now includes an object that's not been used as an argument in print_():['I love Python', '...and also The Python Coding Stack', 'Oops, modified globally!']You want to eliminate this risk.Also, you can only use this list with one function, the function print_(). If you want to keep track of arguments passed to other functions, you'll need to create a separate list with a separate name for each function.In the first (wrong) solution above, data was local to the function. In this solution, data is global. Ideally, we need something in between these two options.Let me show the current version of the code again, but I'll visually highlight the function's scope:#4The ideal solution for this problem—the in-between solution in which data is neither local nor global—encloses the list data along with the function's local scope. Here's a visual representation of what we'd like to achieve:#5If we could create such a bubble or enclosure that includes the function's local scope and data, the function would still have access to data even though it's not a local variable. But the rest of the code won't be able to access and modify data.You can achieve such an enclosure by defining another function. Here's the first step—we'll make some additions later:#6Here are the changes from the earlier code block:You enclose the original function and the definition of the list data within a new function called print_with_memory()You rename the function print_ as inner to clarify that this is an inner function, nested within an outer oneFor now, you comment out the final lines since print_(), the function with the trailing underscore, doesn't exist (yet)The outer function, print_with_memory(), has two local names: data and inner. However, there's a more interesting observation we can make about this code:The function inner also has access to the variable data.A function defined within another function—an inner function—also has access to variables defined within the enclosing function. So, inner() also has access to names defined in print_with_memory(). This is called a closure.Clear? Does it all make sense?No, I didn't think so. So let me add a bit more. When you define a standard function—one that has no nesting, like print_() earlier—the function has access to variable names defined in the global scope. A function has access to global variables, but the global scope can't access local variables defined in functions.A closure does the same thing but with an extra layer of nesting. The inner function, such as inner(), has access to variables defined in the scope just outside of it—the enclosing scope defined by the outer function print_with_memory(). However, the function print_with_memory() doesn't have access to the inner function's local variables. And the global scope doesn't have access to any names defined either within print_with_memory() or inner().Let's look at all the names you created in the latest version of the code.The outer function, print_with_memory(), has two local variables:datainnerThe name of the inner function is also a name defined within the function. Therefore, the name inner is local to the function print_with_memory(). We'll return to this point shortly.The inner function, inner(), has one local variable, some_obj. This local variable is the parameter you define in the function's signature. Parameters are assigned values when you call the function, and therefore, they're local variables.The inner function, inner(), also has access to the outer function's local variable, data. This is the closure concept we discussed earlier.If you compare your current version of the code—which includes the outer function print_with_memory() and the inner function inner()—with the previous version that only had one function, print_(), you'll note that it's the inner function inner() that performs a similar task to the print_() function in the first version.You need inner() to be accessible in the global scope. You can achieve this by returning inner from print_with_memory():#7The outer function now returns the inner function. Note that you don't call inner within print_with_memory(). There are no parentheses. Instead, you return the function by using just its name without parentheses.In the global scope, you can now call print_with_memory(). This function returns another function—the inner function. You assign this inner function to the name print_ in the global scope. This is the same name you used in the first version of this code earlier.Therefore, you can now use print_() to print objects and also keep a record of all the arguments passed to print_(). And the function print_() is the inner function inner() returned by print_with_memory(). There's a lot of juggling of functions around in this topic!Right, so the function print_() now has access to the list data, which is defined in print_with_memory(). Recall that this is the characteristic of a closure, which you create when you define an inner function within an outer function.And each time you call print_(), the function will have access to the same list data. There's only one list data even when you call print_() several times. The list data is attached to the function object print_ and isn't created when you call print_(). It's already there.Since separate calls to print_() can access the same list data, closures allow calls of a function to communicate with previous and future calls through objects within the closures, such as data in this example.So, how can you access this list if you need to see what's inside it? You'll deal with this properly in Part 2, but here's a hard way of accessing data through print_. First, let's look at the .__closure__ attribute:#8Note that I'm using the standard built-in print() in the final line rather than the new print_() version.The output shows that the function print_ has one element in its closure:(\u003ccell at 0x1006e96c0: list object at 0x1006377c0\u003e,)As mentioned earlier, the closure is attached to the function object—print_ without parentheses—and not the function call.The output is a tuple that contains only one element—note the trailing comma, which shows that this is a tuple. You can try adding a second local variable in print_with_memory() and then referring to that second variable within inner(). You'll see that .__closure__ will contain two elements.In our case, there's only one element in .__closure__ and, therefore, you can access it by indexing .__closure__ using the index 0:#9This now gives the cell object rather than a tuple containing the cell object. Don't worry about what a cell object is—it's not relevant to our discussion:\u003ccell at 0x1010c16c0: list object at 0x10100f7c0\u003eAll you need to know is that you can show the value using .cell_contents:#10This shows the list that contains all the arguments used in all the calls to print_():['I love Python', '...and also The Python Coding Stack']It's hard to get to this data. But that's a good thing. You don't want the data shared by all the calls to print_() to be easily accessible.However, you'll see that you don't usually need to access this data directly using .__closure__. But more on this later in this series.We're at the end of Part 1 in this journey through decorators, and we haven't even mentioned decorators. Don't worry. We'll get to them soon. First, let's wrap up Part 1 with a few summary-type observations:A closure allows a function to access variables that aren't in its local scope or in the global scope. A closure has access to the enclosing scope and, therefore, to variables defined in the enclosing (outer) function when creating the closure.A closure permits some data to persist when you call a function. Therefore, each call of the function can \"communicate\" with previous and future calls of the same function.Great. Time to talk about decorators now. Closures have other uses in programming, but I introduced them here as they're central to the discussion on decorators, which is what I'll focus on!Let's look at the code you have so far:#11The outer function print_with_memory() creates a \"new version\" of the built-in print() function and adds some extra functionality. It decorates the print() function—the adornment, in this case, is the ability of the main program to keep track of all the arguments passed to the new function.This code already has many of the hallmarks of a decorator, but let's make a few changes to make it a proper decorator. The first issue you need to address is that this function only works with the built-in print(). What if you also want to apply the same treatment to other functions? You don't want to repeat yourself and define similar decorator-like functions for each case.The first step is to change the name of the outer function since you want it to apply to any function, not just print():#12This doesn't change how the code works, of course. But the new name of the outer function is more generic. Great. Let's move on. The inner function still has print() hardcoded within it. So, this code still only works for the built-in print().Instead of hardcoding print() within the code, you can add a parameter to store_arguments() to represent any function:#13There are three changes in this code compared to the previous version:The outer function, store_arguments(), now has a parameter called func. You can call the parameter anything you like, but func is often used to show that you should pass a function to this parameter.The inner() function no longer calls print(). Instead, it now calls func, which is a function—the function you pass when you call store_arguments().The call to store_arguments() at the end of the code, when you create print_, now needs the name of a function as an argument. It's up to you to specify which function you want to use in store_arguments() since you can now use it for any function.In this case, you pass print to store_arguments(). Therefore, this code performs the same task as the earlier version with print_with_memory(). You can confirm that this is the case:#14The two calls to print_() perform the same task as the standard print(). And the last line allows you to access the list data, which you defined when you created the closure:I love Python ...and also The Python Coding Stack ['I love Python', '...and also The Python Coding Stack']A quick note before you move on to Step 3. You can assign the function returned by store_arguments(print) directly to the name print, the one without the trailing underscore. This overwrites the built-in print() since the name print would now refer to the inner() function returned by store_arguments(print).You'll see in Part 3 of this journey through decorators that reusing the original function's name is the most common way of using decorators. However, I'll stick with using different names by adding trailing underscores for now.But print_() doesn't quite work like the built-in print(). Not yet. Here's an example:#15The first call to print_() works fine, as it did earlier. However, the second and third calls don't work. This code raises an error:Traceback (most recent call last): File \"...\", line 13, in \u003cmodule\u003e print_(42, 99, 256) ~~~~~~^^^^^^^^^^^^^ TypeError: store_arguments.\u003clocals\u003e.inner() takes 1 positional argument but 3 were givenThe second print_() call raises this error, but the third one would also raise a similar error. The error message is also quite informative and helps you understand what's going on. Notice how, even though the error was raised when you call print_(), the error states that store_arguments.\u003clocals\u003e.inner() is the problem. The name print_ refers to this function, which is the function named inner that's a local variable in store_arguments. We'll return to this later in this series.Let's get back to the failed calls. The built-in print() should work with those arguments. You can try to remove the _ to call the standard print() to confirm that all three calls would work.The built-in print() can accept multiple arguments, and it can also accept a keyword argument using the sep keyword. In fact, it can also accept a few more keyword arguments. Here's the signature for print():#16The inner function must be able to accept these same positional and keyword arguments. You could copy the parameters in the print() signature shown above into inner(). However, you're trying to make store_arguments() work with any function, not just print(). So, you don't want to hardcode these specific parameters.That's where *args and **kwargs come in handy:#17You replace the single argument some_obj with *args and **kwargs since these allow you to capture any number of positional and keyword arguments. Therefore, the inner function inner() can be used to replace any function, no matter how many arguments and what type of arguments that function takes.You also need to use *args and **kwargs when you call func() within the inner function.Finally, since the purpose of store_arguments()—we'll call this a decorator soon—is to store the arguments within the list data, you also replace the argument in data.append(). I chose to use a tuple that contains args and kwargs—args is itself a tuple, and kwargs is a dictionary. I'll be publishing a series on functions soon that will discuss *args and **kwargs in more detail.Here's the output from this code—I reformatted the output of the final list for clarity:I love Python 42 99 256 10:20:30 [ (('I love Python',), {}), ((42, 99, 256), {}), ((10, 20, 30), {'sep': ':'}), ]The new print_() function now works in all situations where the standard print() would work. And the list that stores all the arguments passed to print_() now contains three elements—three tuples:The first element in the list is (('I love Python',), {}). This is a tuple that contains a tuple and a dictionary. The tuple—the first element within the outer tuple—represents args and contains only one element, the string \"I love Python\". This is the only positional argument you pass to print_() the first time you call this function. The second element in the outer tuple is an empty dictionary since there are no keyword arguments.The second element in the list is ((42, 99, 256), {}). This tuple contains the tuple (42, 99, 256). These values are the three positional arguments you pass to print_() the second time you call the function. There are no keyword arguments, therefore the second element in the outer tuple is again an empty dictionary.The third and final element in the list is ((10, 20, 30), {'sep': ':'}). The positional arguments—the three integers 10, 20, and 30, are included in the args tuple. The kwargs dictionary now shows the key-value pair \"sep\": \":\". The value associated with the key \"sep\" is the string containing a colon, \":\".So, are you done? Does this finally work? Not quite…Do you read articles on The Python Coding Stack often? Do you find them useful. I put a lot of time and effort into crafting each article, as you can imagine. If you're in a position to support this publication further, you can either become a paid subscriber or make a one-off contribution.Paid subscribers also get exclusive access to The Python Coding Place's members' forum. More Python. More discussions. More fun.And I'm planning some other events and activities for paid subscribers. More on this soon…Your support will help me keep this content coming regularly and, importantly, will help keep it free for everyone.Let's try using this code with another built-in function, max():#18Note how store_arguments() hasn't changed. That's the point of the changes you made earlier. You can use store_arguments() with any function.However, you now pass max when you call store_arguments(), and you assign the function returned by store_arguments(max) to the name max_.Next, you call max_() three times with different arguments. Note that you now need to use print() to show the result. A reminder that this is now the standard built-in print()!But here's the output from this code:None None None [ ((5, 2, 5, 76, 5, 23), {}), (('Hello', 'Goodbye', 'Au Revoir'), {}), (('Hello', 'Goodbye', 'Au Revoir'), {'key': \u003cfunction \u003clambda\u003e at 0x1008e4220\u003e}), ]The code doesn't raise any exceptions, and the list that's collecting all the arguments does indeed contain all the arguments.However, the three calls to max_() return None rather than the maximum value from the arguments you pass to max_(). Let's see why this happens.The new function max_() replaces the built-in max(). Recall that the function max_() is the inner function inner() returned by store_arguments().But this inner function inner() doesn't have a return statement. And functions that don't have an explicit return statement return None.The line func(*args, **kwargs) within inner() is equivalent to max(*args, **kwargs) since func is equal to max. And max() returns a value. However, inner() is discarding the value returned by max(). Let's fix this:#19Now, you assign the object returned by func() to value, and then you return value from inner(). You could merge these lines into one if you wish, but I'll keep them separate. You'll see why later in this journey through decorators.Here's the output from this code:76 Hello Au Revoir [ ((5, 2, 5, 76, 5, 23), {}), (('Hello', 'Goodbye', 'Au Revoir'), {}), (('Hello', 'Goodbye', 'Au Revoir'), {'key': \u003cfunction \u003clambda\u003e at 0x100f8c220\u003e}), ]And since inner() now returns the value returned by the function func—this is max in this case—the new function max_() now also returns the same value as max().It works. The function max_() returns 76 in the first call, since it's the largest number. In the second call, max_() uses lexicographic order, and therefore returns \"Hello\" since uppercase \"H\" comes after both uppercase \"G\" and uppercase \"A\". In the final call, the keyword argument key=lambda x: len(x) guides max_() to order the arguments using the length of the strings. Therefore, \"Au Revoir\" is the maximum value since it's the longest of the three strings.Congratulations! You wrote your first decorator. Even if it looks different to what you think a decorator should look like—you usually see them used with the @ notation, which we'll discuss in Part 3—store_arguments() is a decorator. We'll also define what a decorator is later in this decorator journey. But this example is all you need for now.Let's confirm that this decorator, store_arguments(), works with any function:#20The decorator store_arguments() hasn't changed. It accepts any function, and it decorates it by adding some functionality. This decorator stores all the arguments passed to all calls to the decorated function.In this example, you decorate a user-defined function, my_special_function(). The decoration happens when you write the following line:my_special_function = store_arguments(my_special_function)You'll learn about a more common shortcut for this line in Part 3. But it's important to understand this line before introducing the syntactic sugar notation.On the right-hand side, you call store_arguments() and pass the name of your function, my_special_function.The call to store_arguments() returns another function—the inner function within the store_arguments() function. This inner function performs the same operation as the original function but also performs additional tasks. Therefore, store_arguments() returns a function that's similar to the original function—it returns a decorated version.Finally, you assign this decorated function to the same name as the original function. I'm no longer using a trailing underscore to distinguish the names. In this version, the name my_special_function no longer refers to the original function. Instead, my_special_function now refers to the decorated function.Here's the output from this code:JAMESJAMESJAMES MAIVEMAIVE [(('James', 3), {}), (('Maive', 2), {})]The first two lines are the same outputs you would get if you used the original function without decorating it. However, the last line in the output shows you that the arguments you pass to separate calls of the decorated function are stored in a common list.Here are some final thoughts before we move on:A decorator is a function that accepts another function as an argument and returns yet another function. The function it returns is a decorated version of the function you pass as an argument. (We'll return to this definition and refine it later in this decorator journey)There are three functions involved in this definition, so it can get a bit complex. The decorator, such as store_arguments(), is a function. Its argument and its return value are also functions. These two functions perform similar tasks to each other. However, the function the decorator returns is a decorated version of the function you pass as an argument to the decorator.Still confused? Don't worry! It will get clearer as you make your way through the rest of this decorator journey.Support The Python Coding StackOne of the reasons I think decorators can be hard to understand is because they're often introduced directly using the most common syntax for decorators. You may have seen this in the wild: it uses the @ notation. But I think this hides how decorators work.In Parts 1 and 2—that's this article—I chose not to use this notation at all and to build a decorator step-by-step from first principles.In the rest of this journey, we'll add more detail and look at more complex decorators. Here's what to expect:Part 3: Making decorators easier to use with the @ syntax (but only once you understand Parts 1 and 2 well)Part 4: We'll bring everything together into a new example to consolidate everything we know so far.Part 5: Extending decorators to include parameters, so that you can pass arguments directly to 'decorators'.Part 6: Using classes as decorators instead of functionsPart 7: Decorating classes instead of functions (no, this is not the same as Part 6!)I'll publish Parts 3 - 7 in a separate article soon.Anything not clear? Just ask in the comments or on The Python Coding Place forum.Image by Erelsa from PixabayCode in this article uses Python 3.13The code images used in this article are created using Snappify. [Affiliate link]You can also support this publication by making a one-off contribution of any amount you wish.Support The Python Coding StackFor more Python resources, you can also visit Real Python—you may even stumble on one of my own articles or courses there!Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at Breaking the Rules.And you can find out more about me at stephengruppetta.comFurther reading related to this article’s topic:Let's Eliminate General Bewilderment • Python's LEGB Rule, Scope, and NamespacesPython Scope \u0026 the LEGB Rule: Resolving Names in Your Code – Real PythonRead about *args and **kwargs and positional and keyword arguments in this online chapter of The Python Coding Book: 6 | Functions Revisited - The Python Coding Book…or get a physical copy: The Python Coding BookCode Block #1def print_(some_obj): data = [] data.append(some_obj) print(some_obj) print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") Code Block #2data = [] def print_(some_obj): data.append(some_obj) print(some_obj) print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") # Using the built-in 'print' here print(data) Code Block #3data = [] def print_(some_obj): data.append(some_obj) print(some_obj) print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") data.append(\"Oops, modified globally!\") # Using the built-in 'print' here print(data) Code Block #4data = [] def print_(some_obj): data.append(some_obj) print(some_obj) print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") # Using the built-in 'print' here print(data) Code Block #5data = [] def print_(some_obj): data.append(some_obj) print(some_obj) print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") # Using the built-in 'print' here print(data) Code Block #6def print_with_memory(): data = [] def inner(some_obj): data.append(some_obj) print(some_obj) # print_(\"I love Python\") # print_(\"...and also The Python Coding Stack\") # # print(data) Code Block #7def print_with_memory(): data = [] def inner(some_obj): data.append(some_obj) print(some_obj) return inner print_ = print_with_memory() print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") Code Block #8# ... print_ = print_with_memory() print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") print(print_.__closure__) Code Block #9# ... print_ = print_with_memory() print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") print(print_.__closure__[0]) Code Block #10# ... print_ = print_with_memory() print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") print(print_.__closure__[0].cell_contents) Code Block #11def print_with_memory(): data = [] def inner(some_obj): data.append(some_obj) print(some_obj) return inner print_ = print_with_memory() Code Block #12def store_arguments(): data = [] def inner(some_obj): data.append(some_obj) print(some_obj) return inner print_ = store_arguments() Code Block #13def store_arguments(func): data = [] def inner(some_obj): data.append(some_obj) func(some_obj) return inner print_ = store_arguments(print) Code Block #14# ... print_ = store_arguments(print) print_(\"I love Python\") print_(\"...and also The Python Coding Stack\") print(print_.__closure__[0].cell_contents) Code Block #15def store_arguments(func): data = [] def inner(some_obj): data.append(some_obj) func(some_obj) return inner print_ = store_arguments(print) print_(\"I love Python\") print_(42, 99, 256) print_(10, 20, 30, sep=\":\") print(print_.__closure__[0].cell_contents) Code Block #16print(*args, sep=' ', end='\\n', file=None, flush=False) Code Block #17def store_arguments(func): data = [] def inner(*args, **kwargs): data.append((args, kwargs)) func(*args, **kwargs) return inner print_ = store_arguments(print) print_(\"I love Python\") print_(42, 99, 256) print_(10, 20, 30, sep=\":\") print(print_.__closure__[0].cell_contents) Code Block #18def store_arguments(func): data = [] def inner(*args, **kwargs): data.append((args, kwargs)) func(*args, **kwargs) return inner max_ = store_arguments(max) print(max_(5, 2, 5, 76, 5, 23)) print(max_(\"Hello\", \"Goodbye\", \"Au Revoir\")) print(max_(\"Hello\", \"Goodbye\", \"Au Revoir\", key=lambda x: len(x))) print(max_.__closure__[0].cell_contents) Code Block #19def store_arguments(func): data = [] def inner(*args, **kwargs): data.append((args, kwargs)) value = func(*args, **kwargs) return value return inner max_ = store_arguments(max) print(max_(5, 2, 5, 76, 5, 23)) print(max_(\"Hello\", \"Goodbye\", \"Au Revoir\")) print(max_(\"Hello\", \"Goodbye\", \"Au Revoir\", key=lambda x: len(x))) print(max_.__closure__[0].cell_contents) Code Block #20def store_arguments(func): data = [] def inner(*args, **kwargs): data.append((args, kwargs)) value = func(*args, **kwargs) return value return inner def my_special_function(name, repeat): return name.upper() * repeat my_special_function = store_arguments(my_special_function) print(my_special_function(\"James\", 3)) print(my_special_function(\"Maive\", 2)) print( my_special_function.__closure__[0].cell_contents ) For more Python resources, you can also visit Real Python—you may even stumble on one of my own articles or courses there!Also, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at Breaking the Rules.And you can find out more about me at stephengruppetta.com",
  "image": "https://substackcdn.com/image/fetch/w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv dir=\"auto\"\u003e\u003cp\u003eI avoided decorators for so long. First, I pretended they didn\u0026#39;t exist. Then, I treated them like a magic spell—I\u0026#39;d use some of the common ones and simply copy how they\u0026#39;re used in the documentation. And each time I tried to learn how they work, I\u0026#39;d give up pretty quickly.\u003c/p\u003e\u003cp\u003eBut eventually, I got there. And once I finally understood how decorators work, my reaction was, \u0026#34;Is that it?\u0026#34; As with many complex topics, the magic goes away once you get it, and what\u0026#39;s left makes perfect sense.\u003c/p\u003e\u003cp\u003eSo, let me take you on a journey similar to the one I took to demystify decorators.\u003c/p\u003e\u003cp\u003eI split this decorator quest into seven parts. This article covers Parts 1 and 2. These are the most important parts to understand decorators. Take your time. I\u0026#39;ll publish Parts 3 to 7 in a separate article soon.\u003c/p\u003e\u003cp\u003eDecorators are powerful for adding reusable functionality to functions without the need to define a new function. You’ll see them often in Python, and you may even need to write your own one at some point.\u003c/p\u003e\u003cp\u003ePart 1 introduces one of the main characters in this story—closures. We\u0026#39;ll get to decorators in Part 2 later in this article.\u003c/p\u003e\u003cp\u003e\u003cspan\u003eLet\u0026#39;s say you want to keep track of all the arguments you pass to all the calls to \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e throughout your code. And no, you don\u0026#39;t want to have to do this manually. You want your code to automatically keep a record of any argument you use when you call \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eStart by defining a new function to replace the built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e. Although you could name this new function \u003c/span\u003e\u003ccode\u003eprint\u003c/code\u003e\u003cspan\u003e, I\u0026#39;ll add a trailing underscore in this example to keep the code focused on what really matters. First, here\u0026#39;s a version that won\u0026#39;t work as intended—the code runs without errors but doesn\u0026#39;t achieve the result you need:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png\" width=\"1200\" height=\"420\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/ad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:420,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:39105,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fad436e95-122e-4506-b5c9-fa5238243f88_1200x420.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e\u003cspan\u003eAll code blocks are available in text format at the end of this article • #1 • \u003c/span\u003e\u003cem\u003e\u003cspan\u003eThe code images used in this article are created using \u003c/span\u003e\u003ca href=\"https://snappify.cello.so/f4AsFrwgwov\" rel=\"\"\u003eSnappify\u003c/a\u003e\u003cspan\u003e. [Affiliate link]\u003c/span\u003e\u003c/em\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe new \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e function calls the built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e, but it also appends the argument to a list named \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e. Look for the trailing underscore in this article whenever I write \u003c/span\u003e\u003ccode\u003eprint_\u003c/code\u003e\u003cspan\u003e or \u003c/span\u003e\u003ccode\u003eprint\u003c/code\u003e\u003cspan\u003e!\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eHowever, \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e is defined within the function definition. Therefore, \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e is a \u003c/span\u003e\u003cem\u003e\u003ca href=\"https://www.thepythoncodingstack.com/p/python-legb-rule-scope-namespace\" rel=\"\"\u003elocal variable\u003c/a\u003e\u003c/em\u003e\u003cspan\u003e. It exists only when you call the function and while the program executes it. It cannot be accessed from anywhere else in the program. This variable is local to each function \u003c/span\u003e\u003cem\u003ecall\u003c/em\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe code creates a new list each time you call the function. That won\u0026#39;t work. You need a single list that contains all the arguments you pass to all the \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e function calls.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eA second option is to define the list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e outside the function definition:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png\" width=\"1200\" height=\"588\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/e175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:588,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:49608,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe175ecaa-884d-4f4d-9b35-2d24bd6832e1_1200x588.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#2\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e now exists in the \u003c/span\u003e\u003ca href=\"https://www.thepythoncodingstack.com/p/python-legb-rule-scope-namespace\" rel=\"\"\u003eglobal scope\u003c/a\u003e\u003cspan\u003e. And a function can access names defined in the global scope. Therefore, this solution works. Here\u0026#39;s the output from this code:\u003c/span\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eI love Python\n...and also The Python Coding Stack\n[\u0026#39;I love Python\u0026#39;, \u0026#39;...and also The Python Coding Stack\u0026#39;]\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cspan\u003eThe list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e now holds a record of all the arguments you pass to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThis works. However, there are some drawbacks to this solution. The list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e exists in the global scope and, therefore, can be accessed from anywhere in the code. There\u0026#39;s the danger that another part of your code tries to access and modify this list, leading to bugs and unexpected behaviour:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png\" width=\"1200\" height=\"672\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/aca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:672,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:60884,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Faca4275a-c660-4ffc-8949-f5d5e322a1b4_1200x672.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#3\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e now includes an object that\u0026#39;s not been used as an argument in \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\u0026#39;I love Python\u0026#39;, \u0026#39;...and also The Python Coding Stack\u0026#39;, \u0026#39;Oops, modified globally!\u0026#39;]\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou want to eliminate this risk.\u003c/p\u003e\u003cp\u003e\u003cspan\u003eAlso, you can only use this list with one function, the function \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e. If you want to keep track of arguments passed to other functions, you\u0026#39;ll need to create a separate list with a separate name for each function.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eIn the first (wrong) solution above, \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e was local to the function. In this solution, \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e is global. Ideally, we need something in between these two options.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eLet me show the current version of the code again, but I\u0026#39;ll visually highlight the function\u0026#39;s scope:\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png\" width=\"1200\" height=\"588\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/efb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:588,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:64020,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fefb91d81-0df1-4da3-b18c-b653f93725cc_1200x588.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#4\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe ideal solution for this problem—the \u003c/span\u003e\u003cem\u003ein-between\u003c/em\u003e\u003cspan\u003e solution in which \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e is neither local nor global—encloses the list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e along with the function\u0026#39;s local scope. Here\u0026#39;s a visual representation of what \u003c/span\u003e\u003cem\u003ewe\u0026#39;d like to achieve\u003c/em\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png\" width=\"1200\" height=\"588\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/afb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:588,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:64142,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fafb45f78-1a93-4beb-b93e-a0e3c43a7747_1200x588.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#5\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eIf we could create such a bubble or enclosure that includes the function\u0026#39;s local scope and \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e, the function would still have access to \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e even though it\u0026#39;s not a local variable. But the rest of the code won\u0026#39;t be able to access and modify \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eYou can achieve such an enclosure by defining another function. Here\u0026#39;s the first step—we\u0026#39;ll make some additions later:\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png\" width=\"1200\" height=\"588\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/edf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:588,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:49829,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fedf6f4b0-b182-472c-a185-52c1ed89050f_1200x588.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#6\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eHere are the changes from the earlier code block:\u003c/p\u003e\u003col\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eYou enclose the original function and the definition of the list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e within a new function called \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eYou rename the function \u003c/span\u003e\u003ccode\u003eprint_\u003c/code\u003e\u003cspan\u003e as \u003c/span\u003e\u003ccode\u003einner\u003c/code\u003e\u003cspan\u003e to clarify that this is an inner function, nested within an outer one\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eFor now, you comment out the final lines since \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e, the function with the trailing underscore, doesn\u0026#39;t exist (yet)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cspan\u003eThe outer function, \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e, has two local names: \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e and \u003c/span\u003e\u003ccode\u003einner\u003c/code\u003e\u003cspan\u003e. However, there\u0026#39;s a more interesting observation we can make about this code:\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eThe function \u003c/em\u003e\u003ccode\u003einner\u003c/code\u003e\u003cem\u003e also has access to the variable \u003c/em\u003e\u003ccode\u003edata\u003c/code\u003e\u003cem\u003e.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eA function defined within another function—an inner function—also has access to variables defined within the enclosing function. So, \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e also has access to names defined in \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e. This is called a \u003c/span\u003e\u003cstrong\u003eclosure\u003c/strong\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eClear? Does it all make sense?\u003c/p\u003e\u003cp\u003e\u003cspan\u003eNo, I didn\u0026#39;t think so. So let me add a bit more. When you define a standard function—one that has no nesting, like \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e earlier—the function has access to variable names defined in the global scope. A function has access to global variables, but the global scope can\u0026#39;t access local variables defined in functions.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eA closure does the same thing but with an extra layer of nesting. The inner function, such as \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e, has access to variables defined in the scope just outside of it—the enclosing scope defined by the outer function \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e. However, the function \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e doesn\u0026#39;t have access to the inner function\u0026#39;s local variables. And the global scope doesn\u0026#39;t have access to any names defined either within \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e or \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eLet\u0026#39;s look at all the names you created in the latest version of the code.\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe outer function, \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e, has two local variables:\u003c/span\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003edata\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ccode\u003einner\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cspan\u003eThe name of the inner function is also a name defined within the function. Therefore, the name \u003c/span\u003e\u003ccode\u003einner\u003c/code\u003e\u003cspan\u003e is local to the function \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e. We\u0026#39;ll return to this point shortly.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe inner function, \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e, has one local variable, \u003c/span\u003e\u003ccode\u003esome_obj\u003c/code\u003e\u003cspan\u003e. This local variable is the parameter you define in the function\u0026#39;s signature. Parameters are assigned values when you call the function, and therefore, they\u0026#39;re local variables.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe inner function, \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e, also has access to the outer function\u0026#39;s local variable, \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e. This is the closure concept we discussed earlier.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eIf you compare your current version of the code—which includes the outer function \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e and the inner function \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e—with the previous version that only had one function, \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e, you\u0026#39;ll note that it\u0026#39;s the inner function \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e that performs a similar task to the \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e function in the first version.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eYou need \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e to be accessible in the global scope. You can achieve this by returning \u003c/span\u003e\u003ccode\u003einner\u003c/code\u003e\u003cspan\u003e from \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png\" width=\"1200\" height=\"672\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:672,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:54855,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F8abb5bb3-6bba-4cd0-9240-f07d01b1f54b_1200x672.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#7\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe outer function now returns the inner function. Note that you don\u0026#39;t call \u003c/span\u003e\u003ccode\u003einner\u003c/code\u003e\u003cspan\u003e within \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e. There are no parentheses. Instead, you return the function by using just its name without parentheses.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eIn the global scope, you can now call \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e. This function returns another function—the inner function. You assign this inner function to the name \u003c/span\u003e\u003ccode\u003eprint_\u003c/code\u003e\u003cspan\u003e in the global scope. This is the same name you used in the first version of this code earlier.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eTherefore, you can now use \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e to print objects and also keep a record of all the arguments passed to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e. And the function \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e is the inner function \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e returned by \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e. There\u0026#39;s a lot of juggling of functions around in this topic!\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eRight, so the function \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e now has access to the list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e, which is defined in \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e. Recall that this is the characteristic of a closure, which you create when you define an inner function within an outer function.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eAnd each time you call \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e, the function will have access to the same list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e. There\u0026#39;s only one list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e even when you call \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e several times. The list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e is attached to the function object \u003c/span\u003e\u003ccode\u003eprint_\u003c/code\u003e\u003cspan\u003e and isn\u0026#39;t created when you call \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e. It\u0026#39;s already there.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eSince separate calls to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e can access the same list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e, closures allow calls of a function to communicate with previous and future calls through objects within the closures, such as \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e in this example.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eSo, how can you access this list if you need to see what\u0026#39;s inside it? You\u0026#39;ll deal with this properly in Part 2, but here\u0026#39;s a hard way of accessing data through \u003c/span\u003e\u003ccode\u003eprint_\u003c/code\u003e\u003cspan\u003e. First, let\u0026#39;s look at the \u003c/span\u003e\u003ccode\u003e.__closure__\u003c/code\u003e\u003cspan\u003e attribute:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png\" width=\"1200\" height=\"462\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/dda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:462,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:33344,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fdda6056c-f973-429d-b7ae-72b46dc0b8e8_1200x462.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#8\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eNote that I\u0026#39;m using the standard built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e in the final line rather than the new \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e version.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe output shows that the function \u003c/span\u003e\u003ccode\u003eprint_\u003c/code\u003e\u003cspan\u003e has one element in its closure:\u003c/span\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e(\u0026lt;cell at 0x1006e96c0: list object at 0x1006377c0\u0026gt;,)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cspan\u003eAs mentioned earlier, the closure is attached to the function object—\u003c/span\u003e\u003ccode\u003eprint_\u003c/code\u003e\u003cspan\u003e without parentheses—and not the function call.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe output is a tuple that contains only one element—note the trailing comma, which shows that this is a tuple. You can try adding a second local variable in \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e and then referring to that second variable within \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e. You\u0026#39;ll see that \u003c/span\u003e\u003ccode\u003e.__closure__\u003c/code\u003e\u003cspan\u003e will contain two elements.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eIn our case, there\u0026#39;s only one element in \u003c/span\u003e\u003ccode\u003e.__closure__\u003c/code\u003e\u003cspan\u003e and, therefore, you can access it by indexing \u003c/span\u003e\u003ccode\u003e.__closure__\u003c/code\u003e\u003cspan\u003e using the index \u003c/span\u003e\u003ccode\u003e0\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png\" width=\"1200\" height=\"462\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/a1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:462,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:34097,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fa1f4d391-bc92-4e86-93d7-9733ea2d124e_1200x462.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#9\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThis now gives the \u003c/span\u003e\u003ccode\u003ecell\u003c/code\u003e\u003cspan\u003e object rather than a tuple containing the \u003c/span\u003e\u003ccode\u003ecell\u003c/code\u003e\u003cspan\u003e object. Don\u0026#39;t worry about what a \u003c/span\u003e\u003ccode\u003ecell\u003c/code\u003e\u003cspan\u003e object is—it\u0026#39;s not relevant to our discussion:\u003c/span\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e\u0026lt;cell at 0x1010c16c0: list object at 0x10100f7c0\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cspan\u003eAll you need to know is that you can show the value using \u003c/span\u003e\u003ccode\u003e.cell_contents\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png\" width=\"1200\" height=\"462\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:462,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:36209,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F702f0c10-92c4-4da8-b880-354609980bd8_1200x462.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#10\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThis shows the list that contains all the arguments used in all the calls to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e[\u0026#39;I love Python\u0026#39;, \u0026#39;...and also The Python Coding Stack\u0026#39;]\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cspan\u003eIt\u0026#39;s hard to get to this data. But that\u0026#39;s a good thing. You don\u0026#39;t want the data shared by all the calls to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e to be easily accessible.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eHowever, you\u0026#39;ll see that you don\u0026#39;t usually need to access this data directly using \u003c/span\u003e\u003ccode\u003e.__closure__\u003c/code\u003e\u003cspan\u003e. But more on this later in this series.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eWe\u0026#39;re at the end of Part 1 in this journey through decorators, and we haven\u0026#39;t even mentioned decorators. Don\u0026#39;t worry. We\u0026#39;ll get to them soon. First, let\u0026#39;s wrap up Part 1 with a few summary-type observations:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003eA closure allows a function to access variables that aren\u0026#39;t in its local scope or in the global scope. A closure has access to the enclosing scope and, therefore, to variables defined in the enclosing (outer) function when creating the closure.\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003eA closure permits some data to persist when you call a function. Therefore, each call of the function can \u0026#34;communicate\u0026#34; with previous and future calls of the same function.\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eGreat. Time to talk about decorators now. Closures have other uses in programming, but I introduced them here as they\u0026#39;re central to the discussion on decorators, which is what I\u0026#39;ll focus on!\u003c/p\u003e\u003cp\u003eLet\u0026#39;s look at the code you have so far:\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png\" width=\"1200\" height=\"546\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/ec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:546,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:37693,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fec74508d-853c-49a2-bae5-fd79061b704d_1200x546.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#11\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe outer function \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e creates a \u0026#34;new version\u0026#34; of the built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e function and adds some extra functionality. It \u003c/span\u003e\u003cem\u003edecorates\u003c/em\u003e\u003cspan\u003e the \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e function—the adornment, in this case, is the ability of the main program to keep track of all the arguments passed to the new function.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThis code already has many of the hallmarks of a decorator, but let\u0026#39;s make a few changes to make it a proper decorator. The first issue you need to address is that this function only works with the built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e. What if you also want to apply the same treatment to other functions? You don\u0026#39;t want to repeat yourself and define similar decorator-like functions for each case.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe first step is to change the name of the outer function since you want it to apply to any function, not just \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png\" width=\"1200\" height=\"546\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/e69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:546,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:38629,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fe69d57ed-a4d0-4b7d-b10b-15560ac6c2bf_1200x546.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#12\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThis doesn\u0026#39;t change how the code works, of course. But the new name of the outer function is more generic. Great. Let\u0026#39;s move on. The inner function still has \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e hardcoded within it. So, this code still only works for the built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eInstead of hardcoding \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e within the code, you can add a parameter to \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e to represent any function:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png\" width=\"1200\" height=\"546\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:546,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:40789,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F6f69a119-cd90-4cb7-80cc-87239e195111_1200x546.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#13\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003eThere are three changes in this code compared to the previous version:\u003c/p\u003e\u003col\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eThe outer function, \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e, now has a parameter called \u003c/span\u003e\u003ccode\u003efunc\u003c/code\u003e\u003cspan\u003e. You can call the parameter anything you like, but \u003c/span\u003e\u003ccode\u003efunc\u003c/code\u003e\u003cspan\u003e is often used to show that you should pass a function to this parameter.\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eThe \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e function no longer calls \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e. Instead, it now calls \u003c/span\u003e\u003ccode\u003efunc\u003c/code\u003e\u003cspan\u003e, which is a function—the function you pass when you call \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eThe call to \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e at the end of the code, when you create \u003c/span\u003e\u003ccode\u003eprint_\u003c/code\u003e\u003cspan\u003e, now needs the name of a function as an argument. It\u0026#39;s up to you to specify which function you want to use in \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e since you can now use it for any function.\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003e\u003cspan\u003eIn this case, you pass \u003c/span\u003e\u003ccode\u003eprint\u003c/code\u003e\u003cspan\u003e to \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e. Therefore, this code performs the same task as the earlier version with \u003c/span\u003e\u003ccode\u003eprint_with_memory()\u003c/code\u003e\u003cspan\u003e. You can confirm that this is the case:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png\" width=\"1200\" height=\"462\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:462,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:38711,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F3d594e64-bb92-4b6a-93e7-4fa230b53fa9_1200x462.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#14\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe two calls to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e perform the same task as the standard \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e. And the last line allows you to access the list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e, which you defined when you created the closure:\u003c/span\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eI love Python\n...and also The Python Coding Stack\n[\u0026#39;I love Python\u0026#39;, \u0026#39;...and also The Python Coding Stack\u0026#39;]\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cspan\u003eA quick note before you move on to Step 3. You can assign the function returned by \u003c/span\u003e\u003ccode\u003estore_arguments(print)\u003c/code\u003e\u003cspan\u003e directly to the name \u003c/span\u003e\u003ccode\u003eprint\u003c/code\u003e\u003cspan\u003e, the one \u003c/span\u003e\u003cem\u003ewithout\u003c/em\u003e\u003cspan\u003e the trailing underscore. This overwrites the built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e since the name \u003c/span\u003e\u003ccode\u003eprint\u003c/code\u003e\u003cspan\u003e would now refer to the \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e function returned by \u003c/span\u003e\u003ccode\u003estore_arguments(print)\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eYou\u0026#39;ll see in Part 3 of this journey through decorators that reusing the original function\u0026#39;s name is the most common way of using decorators. However, I\u0026#39;ll stick with using different names by adding trailing underscores for now.\u003c/p\u003e\u003cp\u003e\u003cspan\u003eBut \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e doesn\u0026#39;t quite work like the built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e. Not yet. Here\u0026#39;s an example:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png\" width=\"1200\" height=\"798\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:798,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:69968,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F36327d95-3bd1-40ed-952b-191396e8fb25_1200x798.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#15\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe first call to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e works fine, as it did earlier. However, the second and third calls don\u0026#39;t work. This code raises an error:\u003c/span\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eTraceback (most recent call last):\n  File \u0026#34;...\u0026#34;, line 13, in \u0026lt;module\u0026gt;\n    print_(42, 99, 256)\n    ~~~~~~^^^^^^^^^^^^^\nTypeError: store_arguments.\u0026lt;locals\u0026gt;.inner() takes\n    1 positional argument but 3 were given\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cspan\u003eThe second \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e call raises this error, but the third one would also raise a similar error. The error message is also quite informative and helps you understand what\u0026#39;s going on. Notice how, even though the error was raised when you call \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e, the error states that \u003c/span\u003e\u003ccode\u003estore_arguments.\u0026lt;locals\u0026gt;.inner()\u003c/code\u003e\u003cspan\u003e is the problem. The name \u003c/span\u003e\u003ccode\u003eprint_\u003c/code\u003e\u003cspan\u003e refers to this function, which is the function named \u003c/span\u003e\u003ccode\u003einner\u003c/code\u003e\u003cspan\u003e that\u0026#39;s a local variable in \u003c/span\u003e\u003ccode\u003estore_arguments\u003c/code\u003e\u003cspan\u003e. We\u0026#39;ll return to this later in this series.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eLet\u0026#39;s get back to the failed calls. The built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e should work with those arguments. You can try to remove the \u003c/span\u003e\u003ccode\u003e_\u003c/code\u003e\u003cspan\u003e to call the standard \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e to confirm that all three calls would work.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e can accept multiple arguments, and it can also accept a keyword argument using the \u003c/span\u003e\u003ccode\u003esep\u003c/code\u003e\u003cspan\u003e keyword. In fact, it can also accept a few more keyword arguments. Here\u0026#39;s the signature for \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png\" width=\"1200\" height=\"168\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/44930194-d193-42a9-ba05-00da01c75391_1200x168.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:168,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:14261,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F44930194-d193-42a9-ba05-00da01c75391_1200x168.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#16\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe inner function must be able to accept these same positional and keyword arguments. You could copy the parameters in the \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e signature shown above into \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e. However, you\u0026#39;re trying to make \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e work with \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e function, not just \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e. So, you don\u0026#39;t want to hardcode these specific parameters.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThat\u0026#39;s where \u003c/span\u003e\u003ccode\u003e*args\u003c/code\u003e\u003cspan\u003e and \u003c/span\u003e\u003ccode\u003e**kwargs\u003c/code\u003e\u003cspan\u003e come in handy:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png\" width=\"1200\" height=\"798\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/b445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:798,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:72908,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fb445b96f-83ae-46b6-a5ac-c15a08365fc8_1200x798.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#17\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eYou replace the single argument \u003c/span\u003e\u003ccode\u003esome_obj\u003c/code\u003e\u003cspan\u003e with \u003c/span\u003e\u003ccode\u003e*args\u003c/code\u003e\u003cspan\u003e and \u003c/span\u003e\u003ccode\u003e**kwargs\u003c/code\u003e\u003cspan\u003e since these allow you to capture any number of positional and keyword arguments. Therefore, the inner function \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e can be used to replace any function, no matter how many arguments and what type of arguments that function takes.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eYou also need to use \u003c/span\u003e\u003ccode\u003e*args\u003c/code\u003e\u003cspan\u003e and \u003c/span\u003e\u003ccode\u003e**kwargs\u003c/code\u003e\u003cspan\u003e when you call \u003c/span\u003e\u003ccode\u003efunc()\u003c/code\u003e\u003cspan\u003e within the inner function.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eFinally, since the purpose of \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e—we\u0026#39;ll call this a decorator soon—is to store the arguments within the list \u003c/span\u003e\u003ccode\u003edata\u003c/code\u003e\u003cspan\u003e, you also replace the argument in \u003c/span\u003e\u003ccode\u003edata.append()\u003c/code\u003e\u003cspan\u003e. I chose to use a tuple that contains \u003c/span\u003e\u003ccode\u003eargs\u003c/code\u003e\u003cspan\u003e and \u003c/span\u003e\u003ccode\u003ekwargs\u003c/code\u003e\u003cspan\u003e—\u003c/span\u003e\u003ccode\u003eargs\u003c/code\u003e\u003cspan\u003e is itself a tuple, and \u003c/span\u003e\u003ccode\u003ekwargs\u003c/code\u003e\u003cspan\u003e is a dictionary. I\u0026#39;ll be publishing a series on functions soon that will discuss \u003c/span\u003e\u003ccode\u003e*args\u003c/code\u003e\u003cspan\u003e and \u003c/span\u003e\u003ccode\u003e**kwargs\u003c/code\u003e\u003cspan\u003e in more detail.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eHere\u0026#39;s the output from this code—I reformatted the output of the final list for clarity:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eI love Python\n42 99 256\n10:20:30\n[\n    ((\u0026#39;I love Python\u0026#39;,), {}),\n    ((42, 99, 256), {}),\n    ((10, 20, 30), {\u0026#39;sep\u0026#39;: \u0026#39;:\u0026#39;}),\n]\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cspan\u003eThe new \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e function now works in all situations where the standard \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e would work. And the list that stores all the arguments passed to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e now contains three elements—three tuples:\u003c/span\u003e\u003c/p\u003e\u003col\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eThe first element in the list is \u003c/span\u003e\u003ccode\u003e((\u0026#39;I love Python\u0026#39;,), {})\u003c/code\u003e\u003cspan\u003e. This is a tuple that contains a tuple and a dictionary. The tuple—the first element within the outer tuple—represents \u003c/span\u003e\u003ccode\u003eargs\u003c/code\u003e\u003cspan\u003e and contains only one element, the string \u003c/span\u003e\u003ccode\u003e\u0026#34;I love Python\u0026#34;\u003c/code\u003e\u003cspan\u003e. This is the only positional argument you pass to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e the first time you call this function. The second element in the outer tuple is an empty dictionary since there are no keyword arguments.\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eThe second element in the list is \u003c/span\u003e\u003ccode\u003e((42, 99, 256), {})\u003c/code\u003e\u003cspan\u003e. This tuple contains the tuple \u003c/span\u003e\u003ccode\u003e(42, 99, 256)\u003c/code\u003e\u003cspan\u003e. These values are the three positional arguments you pass to \u003c/span\u003e\u003ccode\u003eprint_()\u003c/code\u003e\u003cspan\u003e the second time you call the function. There are no keyword arguments, therefore the second element in the outer tuple is again an empty dictionary.\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eThe third and final element in the list is \u003c/span\u003e\u003ccode\u003e((10, 20, 30), {\u0026#39;sep\u0026#39;: \u0026#39;:\u0026#39;})\u003c/code\u003e\u003cspan\u003e. The positional arguments—the three integers \u003c/span\u003e\u003ccode\u003e10\u003c/code\u003e\u003cspan\u003e, \u003c/span\u003e\u003ccode\u003e20\u003c/code\u003e\u003cspan\u003e, and \u003c/span\u003e\u003ccode\u003e30\u003c/code\u003e\u003cspan\u003e, are included in the \u003c/span\u003e\u003ccode\u003eargs\u003c/code\u003e\u003cspan\u003e tuple. The \u003c/span\u003e\u003ccode\u003ekwargs\u003c/code\u003e\u003cspan\u003e dictionary now shows the key-value pair \u003c/span\u003e\u003ccode\u003e\u0026#34;sep\u0026#34;: \u0026#34;:\u0026#34;\u003c/code\u003e\u003cspan\u003e. The value associated with the key \u003c/span\u003e\u003ccode\u003e\u0026#34;sep\u0026#34;\u003c/code\u003e\u003cspan\u003e is the string containing a colon, \u003c/span\u003e\u003ccode\u003e\u0026#34;:\u0026#34;\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp\u003eSo, are you done? Does this finally work? Not quite…\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003cspan\u003eDo you read articles on The Python Coding Stack often? Do you find them useful. I put a lot of time and effort into crafting each article, as you can imagine. If you\u0026#39;re in a position to support this publication further, you can either \u003c/span\u003e\u003ca href=\"https://www.thepythoncodingstack.com/subscribe\" rel=\"\"\u003ebecome a paid subscriber\u003c/a\u003e\u003cspan\u003e or \u003c/span\u003e\u003ca href=\"https://buy.stripe.com/00g3de2iGdgg4gg7su\" rel=\"\"\u003emake a one-off contribution\u003c/a\u003e\u003c/em\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003cspan\u003ePaid subscribers also get exclusive access to \u003c/span\u003e\u003ca href=\"https://thepythoncodingplace.com?utm_source=the-python-coding-stack\" rel=\"\"\u003eThe Python Coding Place\u003c/a\u003e\u003cspan\u003e\u0026#39;s members\u0026#39; forum. More Python. More discussions. More fun.\u003c/span\u003e\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eAnd I\u0026#39;m planning some other events and activities for paid subscribers. More on this soon…\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eYour support will help me keep this content coming regularly and, importantly, will help keep it free for everyone.\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eLet\u0026#39;s try using this code with another built-in function, \u003c/span\u003e\u003ccode\u003emax()\u003c/code\u003e\u003cspan\u003e:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png\" width=\"1272\" height=\"798\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:798,\u0026#34;width\u0026#34;:1272,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:86213,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F22ae8828-bf7c-4675-b77c-ab4528e3dd47_1272x798.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#18\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eNote how \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e hasn\u0026#39;t changed. That\u0026#39;s the point of the changes you made earlier. You can use \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e with \u003c/span\u003e\u003cem\u003eany\u003c/em\u003e\u003cspan\u003e function.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eHowever, you now pass \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e when you call \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e, and you assign the function returned by \u003c/span\u003e\u003ccode\u003estore_arguments(max)\u003c/code\u003e\u003cspan\u003e to the name \u003c/span\u003e\u003ccode\u003emax_\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eNext, you call \u003c/span\u003e\u003ccode\u003emax_()\u003c/code\u003e\u003cspan\u003e three times with different arguments. Note that you now need to use \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e to show the result. A reminder that this is now the standard built-in \u003c/span\u003e\u003ccode\u003eprint()\u003c/code\u003e\u003cspan\u003e!\u003c/span\u003e\u003c/p\u003e\u003cp\u003eBut here\u0026#39;s the output from this code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eNone\nNone\nNone\n[\n    ((5, 2, 5, 76, 5, 23), {}),\n    ((\u0026#39;Hello\u0026#39;, \u0026#39;Goodbye\u0026#39;, \u0026#39;Au Revoir\u0026#39;), {}),\n    ((\u0026#39;Hello\u0026#39;, \u0026#39;Goodbye\u0026#39;, \u0026#39;Au Revoir\u0026#39;), {\u0026#39;key\u0026#39;: \u0026lt;function \u0026lt;lambda\u0026gt; at 0x1008e4220\u0026gt;}),\n]\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe code doesn\u0026#39;t raise any exceptions, and the list that\u0026#39;s collecting all the arguments does indeed contain all the arguments.\u003c/p\u003e\u003cp\u003e\u003cspan\u003eHowever, the three calls to \u003c/span\u003e\u003ccode\u003emax_()\u003c/code\u003e\u003cspan\u003e return \u003c/span\u003e\u003ccode\u003eNone\u003c/code\u003e\u003cspan\u003e rather than the maximum value from the arguments you pass to \u003c/span\u003e\u003ccode\u003emax_()\u003c/code\u003e\u003cspan\u003e. Let\u0026#39;s see why this happens.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe new function \u003c/span\u003e\u003ccode\u003emax_()\u003c/code\u003e\u003cspan\u003e replaces the built-in \u003c/span\u003e\u003ccode\u003emax()\u003c/code\u003e\u003cspan\u003e. Recall that the function \u003c/span\u003e\u003ccode\u003emax_()\u003c/code\u003e\u003cspan\u003e is the inner function \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e returned by \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eBut this inner function \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e doesn\u0026#39;t have a \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e statement. And functions that don\u0026#39;t have an explicit \u003c/span\u003e\u003ccode\u003ereturn\u003c/code\u003e\u003cspan\u003e statement return \u003c/span\u003e\u003ccode\u003eNone\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe line \u003c/span\u003e\u003ccode\u003efunc(*args, **kwargs)\u003c/code\u003e\u003cspan\u003e within \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e is equivalent to \u003c/span\u003e\u003ccode\u003emax(*args, **kwargs)\u003c/code\u003e\u003cspan\u003e since \u003c/span\u003e\u003ccode\u003efunc\u003c/code\u003e\u003cspan\u003e is equal to \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e. And \u003c/span\u003e\u003ccode\u003emax()\u003c/code\u003e\u003cspan\u003e returns a value. However, \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e is discarding the value returned by \u003c/span\u003e\u003ccode\u003emax()\u003c/code\u003e\u003cspan\u003e. Let\u0026#39;s fix this:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png\" width=\"1272\" height=\"798\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:798,\u0026#34;width\u0026#34;:1272,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:91180,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F9fc7319b-89b9-4dd4-b66f-afaa86600075_1272x798.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#19\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eNow, you assign the object returned by \u003c/span\u003e\u003ccode\u003efunc()\u003c/code\u003e\u003cspan\u003e to \u003c/span\u003e\u003ccode\u003evalue\u003c/code\u003e\u003cspan\u003e, and then you return \u003c/span\u003e\u003ccode\u003evalue\u003c/code\u003e\u003cspan\u003e from \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e. You could merge these lines into one if you wish, but I\u0026#39;ll keep them separate. You\u0026#39;ll see why later in this journey through decorators.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eHere\u0026#39;s the output from this code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e76\nHello\nAu Revoir\n[\n    ((5, 2, 5, 76, 5, 23), {}),\n    ((\u0026#39;Hello\u0026#39;, \u0026#39;Goodbye\u0026#39;, \u0026#39;Au Revoir\u0026#39;), {}),\n    ((\u0026#39;Hello\u0026#39;, \u0026#39;Goodbye\u0026#39;, \u0026#39;Au Revoir\u0026#39;), {\u0026#39;key\u0026#39;: \u0026lt;function \u0026lt;lambda\u0026gt; at 0x100f8c220\u0026gt;}),\n]\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cspan\u003eAnd since \u003c/span\u003e\u003ccode\u003einner()\u003c/code\u003e\u003cspan\u003e now returns the value returned by the function \u003c/span\u003e\u003ccode\u003efunc\u003c/code\u003e\u003cspan\u003e—this is \u003c/span\u003e\u003ccode\u003emax\u003c/code\u003e\u003cspan\u003e in this case—the new function \u003c/span\u003e\u003ccode\u003emax_()\u003c/code\u003e\u003cspan\u003e now also returns the same value as \u003c/span\u003e\u003ccode\u003emax()\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eIt works. The function \u003c/span\u003e\u003ccode\u003emax_()\u003c/code\u003e\u003cspan\u003e returns \u003c/span\u003e\u003ccode\u003e76\u003c/code\u003e\u003cspan\u003e in the first call, since it\u0026#39;s the largest number. In the second call, \u003c/span\u003e\u003ccode\u003emax_()\u003c/code\u003e\u003cspan\u003e uses lexicographic order, and therefore returns \u003c/span\u003e\u003ccode\u003e\u0026#34;Hello\u0026#34;\u003c/code\u003e\u003cspan\u003e since uppercase \u003c/span\u003e\u003ccode\u003e\u0026#34;H\u0026#34;\u003c/code\u003e\u003cspan\u003e comes after both uppercase \u003c/span\u003e\u003ccode\u003e\u0026#34;G\u0026#34;\u003c/code\u003e\u003cspan\u003e and uppercase \u003c/span\u003e\u003ccode\u003e\u0026#34;A\u0026#34;\u003c/code\u003e\u003cspan\u003e. In the final call, the keyword argument \u003c/span\u003e\u003ccode\u003ekey=lambda x: len(x)\u003c/code\u003e\u003cspan\u003e guides \u003c/span\u003e\u003ccode\u003emax_()\u003c/code\u003e\u003cspan\u003e to order the arguments using the length of the strings. Therefore, \u003c/span\u003e\u003ccode\u003e\u0026#34;Au Revoir\u0026#34;\u003c/code\u003e\u003cspan\u003e is the maximum value since it\u0026#39;s the longest of the three strings.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eCongratulations! You wrote your first decorator. Even if it looks different to what you think a decorator should look like—you usually see them used with the \u003c/span\u003e\u003ccode\u003e@\u003c/code\u003e\u003cspan\u003e notation, which we\u0026#39;ll discuss in Part 3—\u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e is a decorator. We\u0026#39;ll also define what a decorator is later in this decorator journey. But this example is all you need for now.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eLet\u0026#39;s confirm that this decorator, \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e, works with any function:\u003c/span\u003e\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png\" width=\"1200\" height=\"966\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:966,\u0026#34;width\u0026#34;:1200,\u0026#34;resizeWidth\u0026#34;:null,\u0026#34;bytes\u0026#34;:100875,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/png\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F778c9ade-d8fe-4f34-8fd9-6cb542b75c73_1200x966.png 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003cfigcaption\u003e#20\u003c/figcaption\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cspan\u003eThe decorator \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e hasn\u0026#39;t changed. It accepts any function, and it \u003c/span\u003e\u003cem\u003edecorates\u003c/em\u003e\u003cspan\u003e it by adding some functionality. This decorator stores all the arguments passed to all calls to the decorated function.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eIn this example, you decorate a user-defined function, \u003c/span\u003e\u003ccode\u003emy_special_function()\u003c/code\u003e\u003cspan\u003e. The decoration happens when you write the following line:\u003c/span\u003e\u003c/p\u003e\u003cpre\u003e\u003ccode\u003emy_special_function = store_arguments(my_special_function)\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou\u0026#39;ll learn about a more common shortcut for this line in Part 3. But it\u0026#39;s important to understand this line before introducing the syntactic sugar notation.\u003c/p\u003e\u003cp\u003e\u003cspan\u003eOn the right-hand side, you call \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e and pass the name of your function, \u003c/span\u003e\u003ccode\u003emy_special_function\u003c/code\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eThe call to \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e returns another function—the inner function within the \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e function. This inner function performs the same operation as the original function but also performs additional tasks. Therefore, \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e returns a function that\u0026#39;s similar to the original function—it returns a decorated version.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eFinally, you assign this decorated function to the same name as the original function. I\u0026#39;m no longer using a trailing underscore to distinguish the names. In this version, the name \u003c/span\u003e\u003ccode\u003emy_special_function\u003c/code\u003e\u003cspan\u003e no longer refers to the original function. Instead, \u003c/span\u003e\u003ccode\u003emy_special_function\u003c/code\u003e\u003cspan\u003e now refers to the decorated function.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eHere\u0026#39;s the output from this code:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003eJAMESJAMESJAMES\nMAIVEMAIVE\n[((\u0026#39;James\u0026#39;, 3), {}), ((\u0026#39;Maive\u0026#39;, 2), {})]\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe first two lines are the same outputs you would get if you used the original function without decorating it. However, the last line in the output shows you that the arguments you pass to separate calls of the decorated function are stored in a common list.\u003c/p\u003e\u003cp\u003eHere are some final thoughts before we move on:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eA decorator is a function that accepts another function as an argument and returns yet another function. The function it returns is a decorated version of the function you pass as an argument. \u003c/span\u003e\u003cem\u003e(We\u0026#39;ll return to this definition and refine it later in this decorator journey)\u003c/em\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eThere are three functions involved in this definition, so it can get a bit complex. The decorator, such as \u003c/span\u003e\u003ccode\u003estore_arguments()\u003c/code\u003e\u003cspan\u003e, is a function. Its argument and its return value are also functions. These two functions perform similar tasks to each other. However, the function the decorator returns is a decorated version of the function you pass as an argument to the decorator.\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eStill confused? Don\u0026#39;t worry! It will get clearer as you make your way through the rest of this decorator journey.\u003c/p\u003e\u003cp data-attrs=\"{\u0026#34;url\u0026#34;:\u0026#34;https://buy.stripe.com/00g3de2iGdgg4gg7su\u0026#34;,\u0026#34;text\u0026#34;:\u0026#34;Support The Python Coding Stack\u0026#34;,\u0026#34;action\u0026#34;:null,\u0026#34;class\u0026#34;:null}\" data-component-name=\"ButtonCreateButton\"\u003e\u003ca href=\"https://buy.stripe.com/00g3de2iGdgg4gg7su\" rel=\"\"\u003e\u003cspan\u003eSupport The Python Coding Stack\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cspan\u003eOne of the reasons I think decorators can be hard to understand is because they\u0026#39;re often introduced directly using the most common syntax for decorators. You may have seen this in the wild: it uses the \u003c/span\u003e\u003ccode\u003e@\u003c/code\u003e\u003cspan\u003e notation. But I think this hides how decorators work.\u003c/span\u003e\u003c/p\u003e\u003cp\u003eIn Parts 1 and 2—that\u0026#39;s this article—I chose not to use this notation at all and to build a decorator step-by-step from first principles.\u003c/p\u003e\u003cp\u003eIn the rest of this journey, we\u0026#39;ll add more detail and look at more complex decorators. Here\u0026#39;s what to expect:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003ePart 3: Making decorators easier to use with the \u003c/span\u003e\u003ccode\u003e@\u003c/code\u003e\u003cspan\u003e syntax (but only once you understand Parts 1 and 2 well)\u003c/span\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003ePart 4: We\u0026#39;ll bring everything together into a new example to consolidate everything we know so far.\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003ePart 5: Extending decorators to include parameters, so that you can pass arguments directly to \u0026#39;decorators\u0026#39;.\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003ePart 6: Using classes as decorators instead of functions\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003ePart 7: Decorating classes instead of functions (no, this is not the same as Part 6!)\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eI\u0026#39;ll publish Parts 3 - 7 in a separate article soon.\u003c/p\u003e\u003cp\u003eAnything not clear? Just ask in the comments or on The Python Coding Place forum.\u003c/p\u003e\u003cdiv\u003e\u003cfigure\u003e\u003ca target=\"_blank\" href=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg\" data-component-name=\"Image2ToDOM\" rel=\"\"\u003e\u003cdiv\u003e\u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_webp,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg 1456w\" sizes=\"100vw\"/\u003e\u003cimg src=\"https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg\" width=\"561\" height=\"748\" data-attrs=\"{\u0026#34;src\u0026#34;:\u0026#34;https://substack-post-media.s3.amazonaws.com/public/images/529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg\u0026#34;,\u0026#34;srcNoWatermark\u0026#34;:null,\u0026#34;fullscreen\u0026#34;:null,\u0026#34;imageSize\u0026#34;:null,\u0026#34;height\u0026#34;:1920,\u0026#34;width\u0026#34;:1440,\u0026#34;resizeWidth\u0026#34;:561,\u0026#34;bytes\u0026#34;:942526,\u0026#34;alt\u0026#34;:null,\u0026#34;title\u0026#34;:null,\u0026#34;type\u0026#34;:\u0026#34;image/jpeg\u0026#34;,\u0026#34;href\u0026#34;:null,\u0026#34;belowTheFold\u0026#34;:true,\u0026#34;topImage\u0026#34;:false,\u0026#34;internalRedirect\u0026#34;:\u0026#34;https://www.thepythoncodingstack.com/i/161665093?img=https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg\u0026#34;,\u0026#34;isProcessing\u0026#34;:false,\u0026#34;align\u0026#34;:null}\" alt=\"\" srcset=\"https://substackcdn.com/image/fetch/w_424,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg 424w, https://substackcdn.com/image/fetch/w_848,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg 848w, https://substackcdn.com/image/fetch/w_1272,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg 1272w, https://substackcdn.com/image/fetch/w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F529179f9-f0a9-4ebb-a6f1-1d3cfba04a28_1440x1920.jpeg 1456w\" sizes=\"100vw\" loading=\"lazy\"/\u003e\u003c/picture\u003e\u003c/div\u003e\u003c/a\u003e\u003c/figure\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003e\u003cspan\u003eImage by \u003c/span\u003e\u003ca href=\"https://pixabay.com/users/erelsa-2288476/?utm_source=link-attribution\u0026amp;utm_medium=referral\u0026amp;utm_campaign=image\u0026amp;utm_content=1283099\" rel=\"\"\u003eErelsa\u003c/a\u003e\u003cspan\u003e from \u003c/span\u003e\u003ca href=\"https://pixabay.com//?utm_source=link-attribution\u0026amp;utm_medium=referral\u0026amp;utm_campaign=image\u0026amp;utm_content=1283099\" rel=\"\"\u003ePixabay\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eCode in this article uses Python 3.13\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003cspan\u003eThe code images used in this article are created using \u003c/span\u003e\u003ca href=\"https://snappify.cello.so/f4AsFrwgwov\" rel=\"\"\u003eSnappify\u003c/a\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003e[Affiliate link]\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003e\u003cstrong\u003e\u003cspan\u003eYou can also support this publication by making a \u003c/span\u003e\u003ca href=\"https://buy.stripe.com/00g3de2iGdgg4gg7su\" rel=\"\"\u003eone-off contribution of any amount you wish\u003c/a\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\u003cp data-attrs=\"{\u0026#34;url\u0026#34;:\u0026#34;https://buy.stripe.com/00g3de2iGdgg4gg7su\u0026#34;,\u0026#34;text\u0026#34;:\u0026#34;Support The Python Coding Stack\u0026#34;,\u0026#34;action\u0026#34;:null,\u0026#34;class\u0026#34;:null}\" data-component-name=\"ButtonCreateButton\"\u003e\u003ca href=\"https://buy.stripe.com/00g3de2iGdgg4gg7su\" rel=\"\"\u003e\u003cspan\u003eSupport The Python Coding Stack\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eFor more Python resources, you can also visit\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"https://realpython.com?utm_source=the-python-coding-stack\" rel=\"\"\u003eReal Python\u003c/a\u003e\u003cspan\u003e—you may even stumble on one of my own articles or courses there!\u003c/span\u003e\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eAlso, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"http://stephengruppetta.com/breaking-the-rules\" rel=\"\"\u003eBreaking the Rules\u003c/a\u003e\u003c/em\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eAnd you can find out more about me at\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"https://stephengruppetta.com/\" rel=\"\"\u003estephengruppetta.com\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\u003cp\u003eFurther reading related to this article’s topic:\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003ca href=\"https://www.thepythoncodingstack.com/p/python-legb-rule-scope-namespace\" rel=\"\"\u003eLet\u0026#39;s Eliminate General Bewilderment • Python\u0026#39;s LEGB Rule, Scope, and Namespaces\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003ca href=\"https://realpython.com/python-scope-legb-rule/\" rel=\"\"\u003ePython Scope \u0026amp; the LEGB Rule: Resolving Names in Your Code – Real Python\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003eRead about \u003c/span\u003e\u003ccode\u003e*args\u003c/code\u003e\u003cspan\u003e and \u003c/span\u003e\u003ccode\u003e**kwargs\u003c/code\u003e\u003cspan\u003e and positional and keyword arguments in this online chapter of The Python Coding Book: \u003c/span\u003e\u003ca href=\"https://thepythoncodingbook.com/functions-revisited/\" rel=\"\"\u003e6 | Functions Revisited - The Python Coding Book\u003c/a\u003e\u003c/p\u003e\u003cul\u003e\u003cli\u003e\u003cp\u003e\u003cspan\u003e…or get a physical copy: \u003c/span\u003e\u003ca href=\"https://thepythoncodingplace.com/the-python-coding-book/\" rel=\"\"\u003eThe Python Coding Book\u003c/a\u003e\u003c/p\u003e\u003c/li\u003e\u003c/ul\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch5\u003eCode Block #1\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef print_(some_obj):\n    data = []\n    data.append(some_obj)\n    print(some_obj)\n    \nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #2\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edata = []\n  \ndef print_(some_obj):\n    data.append(some_obj)\n    print(some_obj)\n    \nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\n# Using the built-in \u0026#39;print\u0026#39; here\nprint(data)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #3\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edata = []\n\ndef print_(some_obj):\n    data.append(some_obj)\n    print(some_obj)\n\nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\ndata.append(\u0026#34;Oops, modified globally!\u0026#34;)\n\n# Using the built-in \u0026#39;print\u0026#39; here\nprint(data)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #4\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edata = []\n  \ndef print_(some_obj):\n    data.append(some_obj)\n    print(some_obj)\n    \nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\n# Using the built-in \u0026#39;print\u0026#39; here\nprint(data)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #5\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edata = []\n  \ndef print_(some_obj):\n    data.append(some_obj)\n    print(some_obj)\n    \nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\n# Using the built-in \u0026#39;print\u0026#39; here\nprint(data)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #6\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef print_with_memory():\n    data = []\n\n    def inner(some_obj):\n        data.append(some_obj)\n        print(some_obj)\n\n# print_(\u0026#34;I love Python\u0026#34;)\n# print_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n# \n# print(data)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #7\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef print_with_memory():\n    data = []\n\n    def inner(some_obj):\n        data.append(some_obj)\n        print(some_obj)\n\n    return inner\n\nprint_ = print_with_memory()\n\nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #8\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003e# ...\n\nprint_ = print_with_memory()\n\nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\nprint(print_.__closure__)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #9\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003e# ...\n\nprint_ = print_with_memory()\n\nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\nprint(print_.__closure__[0])\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #10\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003e# ...\n\nprint_ = print_with_memory()\n\nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\nprint(print_.__closure__[0].cell_contents)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #11\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef print_with_memory():\n    data = []\n\n    def inner(some_obj):\n        data.append(some_obj)\n        print(some_obj)\n\n    return inner\n\nprint_ = print_with_memory()\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #12\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef store_arguments():\n    data = []\n\n    def inner(some_obj):\n        data.append(some_obj)\n        print(some_obj)\n\n    return inner\n\nprint_ = store_arguments()\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #13\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef store_arguments(func):\n    data = []\n\n    def inner(some_obj):\n        data.append(some_obj)\n        func(some_obj)\n\n    return inner\n\nprint_ = store_arguments(print)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #14\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003e# ...\n\nprint_ = store_arguments(print)\n\nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(\u0026#34;...and also The Python Coding Stack\u0026#34;)\n\nprint(print_.__closure__[0].cell_contents)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #15\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef store_arguments(func):\n    data = []\n\n    def inner(some_obj):\n        data.append(some_obj)\n        func(some_obj)\n\n    return inner\n\nprint_ = store_arguments(print)\n\nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(42, 99, 256)\nprint_(10, 20, 30, sep=\u0026#34;:\u0026#34;)\n\nprint(print_.__closure__[0].cell_contents)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #16\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003eprint(*args, sep=\u0026#39; \u0026#39;, end=\u0026#39;\\n\u0026#39;, file=None, flush=False)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #17\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef store_arguments(func):\n    data = []\n\n    def inner(*args, **kwargs):\n        data.append((args, kwargs))\n        func(*args, **kwargs)\n\n    return inner\n\nprint_ = store_arguments(print)\n\nprint_(\u0026#34;I love Python\u0026#34;)\nprint_(42, 99, 256)\nprint_(10, 20, 30, sep=\u0026#34;:\u0026#34;)\n\nprint(print_.__closure__[0].cell_contents)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #18\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef store_arguments(func):\n    data = []\n\n    def inner(*args, **kwargs):\n        data.append((args, kwargs))\n        func(*args, **kwargs)\n\n    return inner\n\nmax_ = store_arguments(max)\n\nprint(max_(5, 2, 5, 76, 5, 23))\nprint(max_(\u0026#34;Hello\u0026#34;, \u0026#34;Goodbye\u0026#34;, \u0026#34;Au Revoir\u0026#34;))\nprint(max_(\u0026#34;Hello\u0026#34;, \u0026#34;Goodbye\u0026#34;, \u0026#34;Au Revoir\u0026#34;, key=lambda x: len(x)))\n\nprint(max_.__closure__[0].cell_contents)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #19\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef store_arguments(func):\n    data = []\n\n    def inner(*args, **kwargs):\n        data.append((args, kwargs))\n        value = func(*args, **kwargs)\n        return value\n    return inner\n\nmax_ = store_arguments(max)\n\nprint(max_(5, 2, 5, 76, 5, 23))\nprint(max_(\u0026#34;Hello\u0026#34;, \u0026#34;Goodbye\u0026#34;, \u0026#34;Au Revoir\u0026#34;))\nprint(max_(\u0026#34;Hello\u0026#34;, \u0026#34;Goodbye\u0026#34;, \u0026#34;Au Revoir\u0026#34;, key=lambda x: len(x)))\n\nprint(max_.__closure__[0].cell_contents)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003ch5\u003eCode Block #20\u003c/h5\u003e\u003cpre\u003e\u003ccode\u003e\u003ccode\u003edef store_arguments(func):\n    data = []\n\n    def inner(*args, **kwargs):\n        data.append((args, kwargs))\n        value = func(*args, **kwargs)\n        return value\n    return inner\n\ndef my_special_function(name, repeat):\n    return name.upper() * repeat\n\nmy_special_function = store_arguments(my_special_function)\n\nprint(my_special_function(\u0026#34;James\u0026#34;, 3))\nprint(my_special_function(\u0026#34;Maive\u0026#34;, 2))\n\nprint(\n    my_special_function.__closure__[0].cell_contents\n)\n\u003c/code\u003e\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cem\u003eFor more Python resources, you can also visit\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"https://realpython.com?utm_source=the-python-coding-stack\" rel=\"\"\u003eReal Python\u003c/a\u003e\u003cspan\u003e—you may even stumble on one of my own articles or courses there!\u003c/span\u003e\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eAlso, are you interested in technical writing? You’d like to make your own writing more narrative, more engaging, more memorable? Have a look at\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"http://stephengruppetta.com/breaking-the-rules\" rel=\"\"\u003eBreaking the Rules\u003c/a\u003e\u003c/em\u003e\u003cspan\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eAnd you can find out more about me at\u003c/em\u003e\u003cspan\u003e \u003c/span\u003e\u003cem\u003e\u003ca href=\"https://stephengruppetta.com/\" rel=\"\"\u003estephengruppetta.com\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "33 min read",
  "publishedTime": "2025-04-19T21:59:49Z",
  "modifiedTime": null
}
