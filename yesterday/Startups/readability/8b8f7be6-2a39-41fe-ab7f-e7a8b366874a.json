{
  "id": "8b8f7be6-2a39-41fe-ab7f-e7a8b366874a",
  "title": "Ask HN: How to study for system design that doesn't include front end/back end?",
  "link": "https://news.ycombinator.com/item?id=43358293",
  "description": "I got a system design interview where I was asked to build a pricer for a financial product, then expand it to multiple pricers that might share inputs.This was not the typical system design interview where you have to deal with APIs / load balancers / latency / etcI have studied that a lot, but what about these type of general interviews? Comments URL: https://news.ycombinator.com/item?id=43358293 Points: 11 # Comments: 9",
  "author": "3a2d29",
  "published": "Thu, 13 Mar 2025 23:32:34 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 4821,
  "excerpt": "I got a system design interview where I was asked to build a pricer for a financial product, then expand it to multiple pricers that might share inputs.",
  "siteName": "",
  "favicon": "",
  "text": "Ask HN: How to study for system design that doesn't include front end/back end? 12 points by 3a2d29 1 hour ago | hide | past | favorite | 9 comments I got a system design interview where I was asked to build a pricer for a financial product, then expand it to multiple pricers that might share inputs.This was not the typical system design interview where you have to deal with APIs / load balancers / latency / etcI have studied that a lot, but what about these type of general interviews? APIs are just building blocks and blobs of single-ish responsibility. It's good to ask lots of different questions to understand the actual question being asked, what the desired capabilities of the thing being asked are, etc.From there, you should be able to start laying out the different components and how they interact.Edit: here's some areas of consideration when designing a system: * what does this thing do? * what are the expected inputs and outputs of the whole system? * what operations are we wanting to be able to perform against it? * how frequently will each of these operations be done? * how quickly do we want a response from this whole system? * what different sorts of integrations do we expect for this system? Any? * how often do we expect the system to change? * where do we expect to expand the system the most in the future? What will that look like? I'm sure others will have many, many more things to add One general tip is to always ask (credible) clarifying questions. A lot of interviewers look out for this - they want to see you dissect the requirements a little bit, not just jump straight to solving the problem based on a bunch of assumptions you've made that might not be correct. Depends on how to study. Ive been working on this for years. Many people just jump into a solution (or what they think is a solution) to the problem (or what they think is the problem). And this usually triggers interviewers who are looking for that gotcha moment. So you have to treat it as a careful game of getting requirements, setting expectations, managing time, communicating and more.Source - I sucked at system designs for a good 5+ years until I had a ah-ha moment thanks to a couple of questions an Uber interviewer asked me (that interview sucked but I found my mojo after that). And back in that time I did not have the plethora of resources that are available now (not even mentioning GPT's ability to come up both problems and solution formats).The key to these interviewers isnt just study but actually practicing mock problems. There are tons of those these days. Another way to learn is to - teach. Start writing up posts for each Design X kinda problem where you would lay it out as if you were presenting it in an interview, ie Requirements, Entities, APIs, High Level Design, Scalability Barriers, Deep Dives etc. Keep at it. A few failures isnt that bad. There are two aspects to systems design.* Flow control - This is the logical path the software takes from input, through computation, to output.* Division of effort - This isn’t your division of labor but the organization of parts to account for reuse, documentation, testing and so on.With enough practice writing and refactoring original software you just build a vision for it through repeated practice. If that isn’t you then this job may not be a good fit for you. IMO domain knowledge is crucial here. I don’t know anything about pricier or financial products so hard to reason about the system.But to give a general advice, I’d approach it by trying to break down the domain into concepts, then think about how those concepts can be turned into abstractions. Then you can think about relationships between those abstractions and engineering solutions for those relationships.Also, systems all take inputs and produce outputs. Validating those would be another interesting aspect given its finances related. When you get a question like this, you just reduce everything down to database design.Most systems are just wrappers around a database. You can tell because if you take away the database the system does nothing useful.Financial products are exclusively priced in databases. I did this in an interview once, failed miserably and got the feedback, “we don’t care about the database.”I personally feel you aren’t wrong but you also aren’t aligned with what they’re looking for, like I wasn’t when I failed this interview.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003ctd\u003e\u003ctable\u003e\n        \u003ctbody\u003e\u003ctr id=\"43358293\"\u003e\n      \u003ctd\u003e\u003cspan\u003e\u003c/span\u003e\u003c/td\u003e      \u003ctd\u003e\u003ccenter\u003e\u003ca id=\"up_43358293\" href=\"https://news.ycombinator.com/vote?id=43358293\u0026amp;how=up\u0026amp;goto=item%3Fid%3D43358293\"\u003e\u003c/a\u003e\u003c/center\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan\u003e\u003ca href=\"https://news.ycombinator.com/item?id=43358293\"\u003eAsk HN: How to study for system design that doesn\u0026#39;t include front end/back end?\u003c/a\u003e\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd colspan=\"2\"\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan\u003e\n          \u003cspan id=\"score_43358293\"\u003e12 points\u003c/span\u003e by \u003ca href=\"https://news.ycombinator.com/user?id=3a2d29\"\u003e3a2d29\u003c/a\u003e \u003cspan title=\"2025-03-13T23:32:34 1741908754\"\u003e\u003ca href=\"https://news.ycombinator.com/item?id=43358293\"\u003e1 hour ago\u003c/a\u003e\u003c/span\u003e \u003cspan id=\"unv_43358293\"\u003e\u003c/span\u003e | \u003ca href=\"https://news.ycombinator.com/hide?id=43358293\u0026amp;goto=item%3Fid%3D43358293\"\u003ehide\u003c/a\u003e | \u003ca href=\"https://hn.algolia.com/?query=Ask%20HN%3A%20How%20to%20study%20for%20system%20design%20that%20doesn%27t%20include%20front%20end%2Fback%20end%3F\u0026amp;type=story\u0026amp;dateRange=all\u0026amp;sort=byDate\u0026amp;storyText=false\u0026amp;prefix\u0026amp;page=0\"\u003epast\u003c/a\u003e | \u003ca href=\"https://news.ycombinator.com/fave?id=43358293\u0026amp;auth=200e1c6d233e1e652ef2086b877eb988c77a946d\"\u003efavorite\u003c/a\u003e | \u003ca href=\"https://news.ycombinator.com/item?id=43358293\"\u003e9 comments\u003c/a\u003e        \u003c/span\u003e\n              \u003c/td\u003e\u003c/tr\u003e\n    \u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd colspan=\"2\"\u003e\u003c/td\u003e\u003ctd\u003e\u003cdiv\u003e\u003cp\u003eI got a system design interview where I was asked to build a pricer for a financial product, then expand it to multiple pricers that might share inputs.\u003c/p\u003e\u003cp\u003eThis was not the typical system design interview where you have to deal with APIs / load balancers / latency / etc\u003c/p\u003e\u003cp\u003eI have studied that a lot, but what about these type of general interviews?\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e        \u003ctr\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd colspan=\"2\"\u003e\u003c/td\u003e\u003ctd\u003e\u003cform action=\"comment\" method=\"post\"\u003e\u003c/form\u003e\u003c/td\u003e\u003c/tr\u003e  \u003c/tbody\u003e\u003c/table\u003e\u003ctable\u003e\n            \u003ctbody\u003e\u003ctr id=\"43358407\"\u003e\u003ctd\u003e\u003ctable\u003e  \u003ctbody\u003e\u003ctr\u003e    \u003ctd indent=\"0\"\u003e\u003cimg src=\"https://news.ycombinator.com/s.gif\" height=\"1\" width=\"0\"/\u003e\u003c/td\u003e\u003ctd\u003e\n      \u003ccenter\u003e\u003ca id=\"up_43358407\" href=\"https://news.ycombinator.com/vote?id=43358407\u0026amp;how=up\u0026amp;goto=item%3Fid%3D43358293\"\u003e\u003c/a\u003e\u003c/center\u003e    \u003c/td\u003e\u003ctd\u003e\u003cbr/\u003e\u003cdiv\u003e\u003cp\u003eAPIs are just building blocks and blobs of single-ish responsibility. It\u0026#39;s good to ask lots of different questions to understand the actual question being asked, what the desired capabilities of the thing being asked are, etc.\u003c/p\u003e\u003cp\u003eFrom there, you should be able to start laying out the different components and how they interact.\u003c/p\u003e\u003cp\u003eEdit: here\u0026#39;s some areas of consideration when designing a system:\u003c/p\u003e\u003cpre\u003e\u003ccode\u003e  * what does this thing do?\n  * what are the expected inputs and outputs of the whole system?\n  * what operations are we wanting to be able to perform against it?\n  * how frequently will each of these operations be done?\n  * how quickly do we want a response from this whole system?\n  * what different sorts of integrations do we expect for this system? Any?\n  * how often do we expect the system to change?\n  * where do we expect to expand the system the most in the future? What will that look like?\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\nI\u0026#39;m sure others will have many, many more things to add\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\n        \u003c/tbody\u003e\u003c/table\u003e\u003c/td\u003e\u003c/tr\u003e\n            \u003ctr id=\"43358532\"\u003e\u003ctd\u003e\u003ctable\u003e  \u003ctbody\u003e\u003ctr\u003e    \u003ctd indent=\"0\"\u003e\u003cimg src=\"https://news.ycombinator.com/s.gif\" height=\"1\" width=\"0\"/\u003e\u003c/td\u003e\u003ctd\u003e\n      \u003ccenter\u003e\u003ca id=\"up_43358532\" href=\"https://news.ycombinator.com/vote?id=43358532\u0026amp;how=up\u0026amp;goto=item%3Fid%3D43358293\"\u003e\u003c/a\u003e\u003c/center\u003e    \u003c/td\u003e\u003ctd\u003e\u003cbr/\u003e\u003cdiv\u003e\n                  \u003cp\u003eOne general tip is to always ask (credible) clarifying questions. A lot of interviewers look out for this - they want to see you dissect the requirements a little bit, not just jump straight to solving the problem based on a bunch of assumptions you\u0026#39;ve made that might not be correct.\u003c/p\u003e\n              \u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\n        \u003c/tbody\u003e\u003c/table\u003e\u003c/td\u003e\u003c/tr\u003e\n            \u003ctr id=\"43358614\"\u003e\u003ctd\u003e\u003ctable\u003e  \u003ctbody\u003e\u003ctr\u003e    \u003ctd indent=\"0\"\u003e\u003cimg src=\"https://news.ycombinator.com/s.gif\" height=\"1\" width=\"0\"/\u003e\u003c/td\u003e\u003ctd\u003e\n      \u003ccenter\u003e\u003ca id=\"up_43358614\" href=\"https://news.ycombinator.com/vote?id=43358614\u0026amp;how=up\u0026amp;goto=item%3Fid%3D43358293\"\u003e\u003c/a\u003e\u003c/center\u003e    \u003c/td\u003e\u003ctd\u003e\u003cbr/\u003e\u003cdiv\u003e\u003cp\u003eDepends on how to study.   Ive been working on this for years.   Many people just jump into a solution (or what they think is a solution) to the problem (or what they think is the problem).   And this usually triggers interviewers who are looking for that gotcha moment.  So you have to treat it as a careful game of getting requirements, setting expectations, managing time, communicating and more.\u003c/p\u003e\u003cp\u003eSource - I sucked at system designs for a good 5+ years until I had a ah-ha moment thanks to a couple of questions an Uber interviewer asked me (that interview sucked but I found my mojo after that).   And back in that time I did not have the plethora of resources that are available now (not even mentioning GPT\u0026#39;s ability to come up both problems and solution formats).\u003c/p\u003e\u003cp\u003eThe key to these interviewers isnt just study but actually practicing mock problems.   There are tons of those these days.   Another way to learn is to - teach.   Start writing up posts for each Design X kinda problem where you would lay it out as if you were presenting it in an interview, ie Requirements, Entities, APIs, High Level Design, Scalability Barriers, Deep Dives etc.  Keep at it.   A few failures isnt that bad.\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\n        \u003c/tbody\u003e\u003c/table\u003e\u003c/td\u003e\u003c/tr\u003e\n            \u003ctr id=\"43358640\"\u003e\u003ctd\u003e\u003ctable\u003e  \u003ctbody\u003e\u003ctr\u003e    \u003ctd indent=\"0\"\u003e\u003cimg src=\"https://news.ycombinator.com/s.gif\" height=\"1\" width=\"0\"/\u003e\u003c/td\u003e\u003ctd\u003e\n      \u003ccenter\u003e\u003ca id=\"up_43358640\" href=\"https://news.ycombinator.com/vote?id=43358640\u0026amp;how=up\u0026amp;goto=item%3Fid%3D43358293\"\u003e\u003c/a\u003e\u003c/center\u003e    \u003c/td\u003e\u003ctd\u003e\u003cbr/\u003e\u003cdiv\u003e\u003cp\u003eThere are two aspects to systems design.\u003c/p\u003e\u003cp\u003e* Flow control - This is the logical path the software takes from input, through computation, to output.\u003c/p\u003e\u003cp\u003e* Division of effort - This isn’t your division of labor but the organization of parts to account for reuse, documentation, testing and so on.\u003c/p\u003e\u003cp\u003eWith enough practice writing and refactoring original software you just build a vision for it through repeated practice. If that isn’t you then this job may not be a good fit for you.\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\n        \u003c/tbody\u003e\u003c/table\u003e\u003c/td\u003e\u003c/tr\u003e\n            \u003ctr id=\"43358436\"\u003e\u003ctd\u003e\u003ctable\u003e  \u003ctbody\u003e\u003ctr\u003e    \u003ctd indent=\"0\"\u003e\u003cimg src=\"https://news.ycombinator.com/s.gif\" height=\"1\" width=\"0\"/\u003e\u003c/td\u003e\u003ctd\u003e\n      \u003ccenter\u003e\u003ca id=\"up_43358436\" href=\"https://news.ycombinator.com/vote?id=43358436\u0026amp;how=up\u0026amp;goto=item%3Fid%3D43358293\"\u003e\u003c/a\u003e\u003c/center\u003e    \u003c/td\u003e\u003ctd\u003e\u003cbr/\u003e\u003cdiv\u003e\u003cp\u003eIMO domain knowledge is crucial here. I don’t know anything about pricier or financial products so hard to reason about the system.\u003c/p\u003e\u003cp\u003eBut to give a general advice, I’d approach it by trying to break down the domain into concepts, then think about how those concepts can be turned into abstractions. Then you can think about relationships between those abstractions and engineering solutions for those relationships.\u003c/p\u003e\u003cp\u003eAlso, systems all take inputs and produce outputs. Validating those would be another interesting aspect given its finances related.\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\n        \u003c/tbody\u003e\u003c/table\u003e\u003c/td\u003e\u003c/tr\u003e\n            \u003ctr id=\"43358397\"\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\n            \u003ctr id=\"43358416\"\u003e\u003ctd\u003e\u003c/td\u003e\u003c/tr\u003e\n            \u003ctr id=\"43358462\"\u003e\u003ctd\u003e\u003ctable\u003e  \u003ctbody\u003e\u003ctr\u003e    \u003ctd indent=\"0\"\u003e\u003cimg src=\"https://news.ycombinator.com/s.gif\" height=\"1\" width=\"0\"/\u003e\u003c/td\u003e\u003ctd\u003e\n      \u003ccenter\u003e\u003ca id=\"up_43358462\" href=\"https://news.ycombinator.com/vote?id=43358462\u0026amp;how=up\u0026amp;goto=item%3Fid%3D43358293\"\u003e\u003c/a\u003e\u003c/center\u003e    \u003c/td\u003e\u003ctd\u003e\u003cbr/\u003e\u003cdiv\u003e\u003cp\u003eWhen you get a question like this, you just reduce everything down to database design.\u003c/p\u003e\u003cp\u003eMost systems are just wrappers around a database. You can tell because if you take away the database the system does nothing useful.\u003c/p\u003e\u003cp\u003eFinancial products are exclusively priced in databases.\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\n        \u003c/tbody\u003e\u003c/table\u003e\u003c/td\u003e\u003c/tr\u003e\n                \u003ctr id=\"43358548\"\u003e\u003ctd\u003e\u003ctable\u003e  \u003ctbody\u003e\u003ctr\u003e    \u003ctd indent=\"1\"\u003e\u003cimg src=\"https://news.ycombinator.com/s.gif\" height=\"1\" width=\"40\"/\u003e\u003c/td\u003e\u003ctd\u003e\n      \u003ccenter\u003e\u003ca id=\"up_43358548\" href=\"https://news.ycombinator.com/vote?id=43358548\u0026amp;how=up\u0026amp;goto=item%3Fid%3D43358293\"\u003e\u003c/a\u003e\u003c/center\u003e    \u003c/td\u003e\u003ctd\u003e\u003cbr/\u003e\u003cdiv\u003e\u003cp\u003eI did this in an interview once, failed miserably and got the feedback, “we don’t care about the database.”\u003c/p\u003e\u003cp\u003eI personally feel you aren’t wrong but you also aren’t aligned with what they’re looking for, like I wasn’t when I failed this interview.\u003c/p\u003e\u003c/div\u003e\u003c/td\u003e\u003c/tr\u003e\n        \u003c/tbody\u003e\u003c/table\u003e\u003c/td\u003e\u003c/tr\u003e\n                  \u003c/tbody\u003e\u003c/table\u003e\n  \u003c/td\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
