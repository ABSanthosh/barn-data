{
  "id": "7edf25b3-2abb-46ea-afcd-fa3285359c77",
  "title": "Electric (Postgres sync engine) BETA release",
  "link": "https://electric-sql.com/blog/2024/12/10/electric-beta-release",
  "description": "Article URL: https://electric-sql.com/blog/2024/12/10/electric-beta-release Comments URL: https://news.ycombinator.com/item?id=42383136 Points: 4 # Comments: 0",
  "author": "austinbirch",
  "published": "Wed, 11 Dec 2024 00:04:41 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "By Kyle Mathews",
  "length": 5222,
  "excerpt": "The Electric sync engine is now in BETA. If you haven't checked out Electric recently, it's a great time to take another look.",
  "siteName": "",
  "favicon": "https://electric-sql.com/img/brand/favicon.png",
  "text": "With version 1.0.0-beta.1 the Electric sync engine is now in BETA!If you haven't checked out Electric recently, it's a great time to take another look.What is Electric? ​Electric is a Postgres sync engine. We do real-time partial replication of Postgres data into local apps and services.Use Electric to swap out data fetching for data sync. Build apps on instant, real-time, local data. Without having to roll your own sync engine or change your stack.We also develop PGlite, a lightweight WASM Postgres you can run in the browser.The path to BETA ​Six months ago, we took on a clean re-write.First commit was on the 29th June 2024. 600 pull requests later, we're ready for adoption into production apps.Production ready ​Electric and PGlite are being used in production by companies including Google, Supabase, Trigger.dev, Otto and Doorboost.We use ElectricSQL to power Trigger.dev Realtime, a core feature of our product. When we execute our users background tasks they get instant updates in their web apps. It's simple to operate since we already use Postgres, and it scales to millions of updates per day.— Matt Aitken, Founder \u0026 CEO, Trigger.devAt Otto, we built a spreadsheet product where every cell operates as its own AI agent. ElectricSQL enables us to reliably stream agent updates to our spreadsheet in real-time and efficiently manage large spreadsheets at scale. It has dramatically simplified our architecture while delivering the performance we need for cell-level reactive updates.— Sully Omar, Co-founder \u0026 CEO, OttoAt Doorboost we aggregate millions of rows from a dozen platforms, all of which gets distilled down to a simple dashboard. With Electric we have been able to deliver this dashboard in milliseconds and update live. Moving forward, we will be building all our products using Electric.— Vache Asatryan, CTO, DoorboostScalable ​So many real-time sync systems demo well but break under real load.Electric has been engineered from the ground up to handle high-throughput workloads, like Trigger.dev, with low latency and flat resource use. You can stream real-time data to millions of concurrent users from a single commodity Postgres.The chart below is from our cloud benchmarks, testing Electric's memory usage and latency with a single Electric service scaling real-time sync from 100k to 1 million concurrent clients under a sustained load of 960 writes/minute. Both memory usage and latency are essentially flat:You can also see how large-scale apps built with Electric feel to use with our updated Linearlite demo. This is a Linear clone that loads 100,000k issues and their comments through Electric into PGlite (~150mb of data). Once loaded, it's fully interactive and feels instant to use: Screenshot of Linearlite. Open the demoEasy to adopt ​We've iterated a lot on our APIs to make them as simple and powerful as possible. There should be no breaking changes in minor or patch releases moving forward.We've updated our Documentation, with a new Quickstart and guides for topics like:how to do authhow to handle local writeshow to do partial replication with Shapeshow to deploy Electrichow to write your own client for any language or environmentWe have client libraries, integration docs, demo apps and technical examples showing how to use Electric with different patterns and frameworks:Interactive demos ​Incrementally ​You can adopt Electric one component and one route at a time. Wherever you have code doing something like this:tsximport React, { useState, useEffect } from 'react' const MyComponent = () =\u003e { const [items, setItems] = useState([]) useEffect(() =\u003e { const fetchItems = async () =\u003e { const response = await fetch('https://api.example.com/v1/items') const data = await response.json() setItems(data) } fetchItems() }, []) return ( \u003cList items=\"items\" /\u003e ) }Swap it out for code like this (replacing the fetch in the useEffect with useShape):tsximport { useShape } from '@electric-sql/react' const MyComponent = () =\u003e { const { data } = useShape({ url: 'https://electric.example.com/v1/shapes', params: { table: 'items' } }) return ( \u003cList items=\"data\" /\u003e ) }This works with any Postgres data model and host, any data type, extension and Postgres feature. Including pgvector, PostGIS, sequential IDs, unique constraints, etc. You don't have to change your data model or your migrations to use Electric.With your existing API ​Because Electric syncs over HTTP, you can use it together with your existing API.This allows you to handle concerns like auth and writes with your existing code and web service integrations. You don't need to codify your auth logic into database rules. You don't need to replace your API endpoints and middleware stack.Take another look ​With this BETA release, Electric is stable and ready for prime time use. If you haven't checked it out recently, it's a great time to take another look.Signup for early access to Electric Cloud ​We're also building Electric Cloud, which provides managed Electric hosting (for those that don't want to host Electric themselves).If you're interested in using Electric Cloud, you can sign up for early access here:",
  "image": "https://electric-sql.com/img/blog/electric-beta-release/header.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv data-v-3d98f719=\"\"\u003e\u003cp\u003eWith version \u003ca href=\"https://github.com/electric-sql/electric/releases\" target=\"_blank\" rel=\"noreferrer\"\u003e\u003ccode\u003e1.0.0-beta.1\u003c/code\u003e\u003c/a\u003e the Electric sync engine is now in BETA!\u003c/p\u003e\u003cp\u003eIf you haven\u0026#39;t checked out Electric recently, it\u0026#39;s a great time to \u003ca href=\"https://electric-sql.com/docs/intro\"\u003etake another look\u003c/a\u003e.\u003c/p\u003e\u003ch2 id=\"what-is-electric\" tabindex=\"-1\"\u003eWhat is Electric? \u003ca href=\"#what-is-electric\" aria-label=\"Permalink to \u0026#34;What is Electric?\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h2\u003e\u003cp\u003e\u003ca href=\"https://electric-sql.com/product/electric\"\u003eElectric\u003c/a\u003e is a Postgres sync engine. We do real-time \u003ca href=\"https://electric-sql.com/docs/guides/shapes\"\u003epartial replication\u003c/a\u003e of Postgres data into local apps and services.\u003c/p\u003e\u003cp\u003eUse Electric to swap out data \u003cem\u003efetching\u003c/em\u003e for \u003ca href=\"https://electric-sql.com/use-cases/data-sync\"\u003edata \u003cem\u003esync\u003c/em\u003e\u003c/a\u003e. Build apps on instant, real-time, local data. Without having to roll your own sync engine or change your stack.\u003c/p\u003e\u003cp\u003eWe also develop \u003ca href=\"https://electric-sql.com/product/pglite\"\u003ePGlite\u003c/a\u003e, a lightweight WASM Postgres you can run in the browser.\u003c/p\u003e\u003ch2 id=\"the-path-to-beta\" tabindex=\"-1\"\u003eThe path to BETA \u003ca href=\"#the-path-to-beta\" aria-label=\"Permalink to \u0026#34;The path to BETA\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eSix months ago, we \u003ca href=\"https://electric-sql.com/blog/2024/07/17/electric-next\"\u003etook on a clean re-write\u003c/a\u003e.\u003c/p\u003e\u003cp\u003e\u003ca href=\"https://github.com/electric-sql/archived-electric-next/commit/fc406d77caca923d1fb595d921102f25c7ce3856\" target=\"_blank\" rel=\"noreferrer\"\u003eFirst commit\u003c/a\u003e was on the 29th June 2024. \u003ca href=\"https://github.com/electric-sql/electric/pulls?q=is%3Apr+is%3Aclosed\" target=\"_blank\" rel=\"noreferrer\"\u003e600 pull requests later\u003c/a\u003e, we\u0026#39;re ready for adoption into production apps.\u003c/p\u003e\u003ch2 id=\"production-ready\" tabindex=\"-1\"\u003eProduction ready \u003ca href=\"#production-ready\" aria-label=\"Permalink to \u0026#34;Production ready\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h2\u003e\u003cfigure\u003e\u003cimg src=\"https://electric-sql.com/assets/logo-strip.ByW8Eccm.svg\"/\u003e\u003cimg src=\"https://electric-sql.com/assets/logo-strip.sm.BZnVxeMp.svg\"/\u003e\u003cimg src=\"https://electric-sql.com/assets/logo-strip.xs.CqHd4PCW.svg\"/\u003e\u003cimg src=\"https://electric-sql.com/assets/logo-strip.xxs.CX2ul4h3.svg\"/\u003e\u003c/figure\u003e\u003cp\u003eElectric and PGlite are being used in production by companies including \u003ca href=\"https://firebase.google.com/docs/data-connect\" target=\"_blank\" rel=\"noreferrer\"\u003eGoogle\u003c/a\u003e, \u003ca href=\"https://database.build\" target=\"_blank\" rel=\"noreferrer\"\u003eSupabase\u003c/a\u003e, \u003ca href=\"https://trigger.dev/launchweek/0/realtime\" target=\"_blank\" rel=\"noreferrer\"\u003eTrigger.dev\u003c/a\u003e, \u003ca href=\"https://ottogrid.ai\" target=\"_blank\" rel=\"noreferrer\"\u003eOtto\u003c/a\u003e and \u003ca href=\"https://www.doorboost.com\" target=\"_blank\" rel=\"noreferrer\"\u003eDoorboost\u003c/a\u003e.\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eWe use ElectricSQL to power \u003ca href=\"https://trigger.dev/launchweek/0/realtime\" target=\"_blank\" rel=\"noreferrer\"\u003eTrigger.dev Realtime\u003c/a\u003e, a core feature of our product. When we execute our users background tasks they get instant updates in their web apps. It\u0026#39;s simple to operate since we already use Postgres, and it scales to millions of updates per day.\u003cbr/\u003e\u003cem\u003e— \u003ca href=\"https://www.linkedin.com/in/mattaitken1985\" target=\"_blank\" rel=\"noreferrer\"\u003eMatt Aitken\u003c/a\u003e, Founder \u0026amp; CEO, \u003ca href=\"https://trigger.dev\" target=\"_blank\" rel=\"noreferrer\"\u003eTrigger.dev\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cblockquote\u003e\u003cp\u003eAt \u003ca href=\"https://ottogrid.ai\" target=\"_blank\" rel=\"noreferrer\"\u003eOtto\u003c/a\u003e, we built a spreadsheet product where every cell operates as its own AI agent. ElectricSQL enables us to reliably stream agent updates to our spreadsheet in real-time and efficiently manage large spreadsheets at scale. It has dramatically simplified our architecture while delivering the performance we need for cell-level reactive updates.\u003cbr/\u003e\u003cem\u003e— \u003ca href=\"https://x.com/SullyOmarr\" target=\"_blank\" rel=\"noreferrer\"\u003eSully Omar\u003c/a\u003e, Co-founder \u0026amp; CEO, \u003ca href=\"https://ottogrid.ai\" target=\"_blank\" rel=\"noreferrer\"\u003eOtto\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003cblockquote\u003e\u003cp\u003eAt \u003ca href=\"https://www.doorboost.com\" target=\"_blank\" rel=\"noreferrer\"\u003eDoorboost\u003c/a\u003e we aggregate millions of rows from a dozen platforms, all of which gets distilled down to a simple dashboard. With Electric we have been able to deliver this dashboard in milliseconds and update live. Moving forward, we will be building all our products using Electric.\u003cbr/\u003e\u003cem\u003e— \u003ca href=\"https://am.linkedin.com/in/vacheasatryan\" target=\"_blank\" rel=\"noreferrer\"\u003eVache Asatryan\u003c/a\u003e, CTO, \u003ca href=\"https://doorboost.com\" target=\"_blank\" rel=\"noreferrer\"\u003eDoorboost\u003c/a\u003e\u003c/em\u003e\u003c/p\u003e\u003c/blockquote\u003e\u003ch3 id=\"scalable\" tabindex=\"-1\"\u003eScalable \u003ca href=\"#scalable\" aria-label=\"Permalink to \u0026#34;Scalable\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eSo many real-time sync systems demo well but break under real load.\u003c/p\u003e\u003cp\u003eElectric has been \u003ca href=\"https://electric-sql.com/docs/api/http\"\u003eengineered from the ground up\u003c/a\u003e to handle high-throughput workloads, like \u003ca href=\"https://trigger.dev/launchweek/0/realtime\" target=\"_blank\" rel=\"noreferrer\"\u003eTrigger.dev\u003c/a\u003e, with low latency and flat resource use. You can stream real-time data to \u003cstrong\u003emillions of concurrent users\u003c/strong\u003e from a single commodity Postgres.\u003c/p\u003e\u003cp\u003eThe chart below is from our cloud \u003ca href=\"https://electric-sql.com/docs/reference/benchmarks\"\u003ebenchmarks\u003c/a\u003e, testing Electric\u0026#39;s memory usage and latency with a single Electric service scaling real-time sync from 100k to 1 million concurrent clients under a sustained load of 960 writes/minute. Both memory usage and latency are essentially \u003cem\u003eflat\u003c/em\u003e:\u003c/p\u003e\u003cfigure\u003e\u003c/figure\u003e\u003cp\u003eYou can also see how large-scale apps built with Electric feel to use with our updated \u003ca href=\"https://electric-sql.com/demos/linearlite\"\u003e Linearlite\u003c/a\u003e demo. This is a \u003ca href=\"https://linear.app\" target=\"_blank\" rel=\"noreferrer\"\u003eLinear\u003c/a\u003e clone that loads 100,000k issues and their comments through Electric into PGlite (~150mb of data). Once loaded, it\u0026#39;s fully interactive and feels instant to use:\u003c/p\u003e\u003cfigure\u003e\u003cp\u003e\u003ca href=\"https://linearlite.examples.electric-sql.com\" target=\"_blank\"\u003e\u003cimg src=\"https://electric-sql.com/assets/linearlite-screenshot.-uynhOsT.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003cfigcaption\u003e Screenshot of Linearlite. \u003ca href=\"https://linearlite.examples.electric-sql.com\" target=\"_blank\"\u003e Open the demo\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\u003ch2 id=\"easy-to-adopt\" tabindex=\"-1\"\u003eEasy to adopt \u003ca href=\"#easy-to-adopt\" aria-label=\"Permalink to \u0026#34;Easy to adopt\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eWe\u0026#39;ve iterated a lot on our APIs to make them as simple and powerful as possible. There should be no breaking changes in minor or patch releases moving forward.\u003c/p\u003e\u003cp\u003eWe\u0026#39;ve updated our \u003ca href=\"https://electric-sql.com/docs/intro\"\u003eDocumentation\u003c/a\u003e, with a new \u003ca href=\"https://electric-sql.com/docs/quickstart\"\u003eQuickstart\u003c/a\u003e and guides for topics like:\u003c/p\u003e\u003cul\u003e\u003cli\u003ehow to do \u003ca href=\"https://electric-sql.com/docs/guides/auth\"\u003eauth\u003c/a\u003e\u003c/li\u003e\u003cli\u003ehow to handle \u003ca href=\"https://electric-sql.com/docs/guides/writes\"\u003elocal writes\u003c/a\u003e\u003c/li\u003e\u003cli\u003ehow to do \u003ca href=\"https://electric-sql.com/docs/guides/shapes\"\u003epartial replication with Shapes\u003c/a\u003e\u003c/li\u003e\u003cli\u003ehow to \u003ca href=\"https://electric-sql.com/docs/guides/deployment\"\u003edeploy Electric\u003c/a\u003e\u003c/li\u003e\u003cli\u003ehow to \u003ca href=\"https://electric-sql.com/docs/guides/client-development\"\u003ewrite your own client\u003c/a\u003e for any language or environment\u003c/li\u003e\u003c/ul\u003e\u003cp\u003eWe have \u003ca href=\"https://electric-sql.com/docs/api/clients/typescript\"\u003eclient libraries\u003c/a\u003e, \u003ca href=\"https://electric-sql.com/docs/integrations/react\"\u003eintegration docs\u003c/a\u003e, \u003ca href=\"https://electric-sql.com/demos\"\u003edemo apps\u003c/a\u003e and \u003ca href=\"https://electric-sql.com/demos#technical-examples\"\u003etechnical examples\u003c/a\u003e showing how to use Electric with different patterns and frameworks:\u003c/p\u003e\u003ch4 id=\"interactive-demos\" tabindex=\"-1\"\u003eInteractive demos \u003ca href=\"#interactive-demos\" aria-label=\"Permalink to \u0026#34;Interactive demos\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h4\u003e\u003cdiv\u003e\u003cdiv target=\"_blank\"\u003e\u003cp\u003e\u003ca href=\"https://electric-sql.com/demos/notes\"\u003e\u003cimg src=\"https://electric-sql.com/img/demos/notes-demo.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv target=\"_blank\"\u003e\u003cp\u003e\u003ca href=\"https://electric-sql.com/demos/pixel-art\"\u003e\u003cimg src=\"https://electric-sql.com/img/demos/pixel-art-demo.png\"/\u003e\u003c/a\u003e\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e\u003ch3 id=\"incrementally\" tabindex=\"-1\"\u003eIncrementally \u003ca href=\"#incrementally\" aria-label=\"Permalink to \u0026#34;Incrementally\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eYou can adopt Electric one component and one route at a time. Wherever you have code doing something like this:\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003etsx\u003c/span\u003e\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e React, { useState, useEffect } \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u0026#39;react\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e MyComponent\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e () \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e [\u003c/span\u003e\u003cspan\u003eitems\u003c/span\u003e\u003cspan\u003e, \u003c/span\u003e\u003cspan\u003esetItems\u003c/span\u003e\u003cspan\u003e] \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e useState\u003c/span\u003e\u003cspan\u003e([])\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e  useEffect\u003c/span\u003e\u003cspan\u003e(() \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e    const\u003c/span\u003e\u003cspan\u003e fetchItems\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e async\u003c/span\u003e\u003cspan\u003e () \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e      const\u003c/span\u003e\u003cspan\u003e response\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await\u003c/span\u003e\u003cspan\u003e fetch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#39;https://api.example.com/v1/items\u0026#39;\u003c/span\u003e\u003cspan\u003e)\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e      const\u003c/span\u003e\u003cspan\u003e data\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e await\u003c/span\u003e\u003cspan\u003e response.\u003c/span\u003e\u003cspan\u003ejson\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e      setItems\u003c/span\u003e\u003cspan\u003e(data)\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e    fetchItems\u003c/span\u003e\u003cspan\u003e()\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e  }, [])\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eList\u003c/span\u003e\u003cspan\u003e items\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;items\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e  )\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSwap it out for code like this (replacing the \u003ccode\u003efetch\u003c/code\u003e in the \u003ccode\u003euseEffect\u003c/code\u003e with \u003ca href=\"https://electric-sql.com/docs/integrations/react\"\u003e\u003ccode\u003euseShape\u003c/code\u003e\u003c/a\u003e):\u003c/p\u003e\u003cdiv\u003e\u003cp\u003e\u003cspan\u003etsx\u003c/span\u003e\u003c/p\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u003cspan\u003e\u003cspan\u003eimport\u003c/span\u003e\u003cspan\u003e { useShape } \u003c/span\u003e\u003cspan\u003efrom\u003c/span\u003e\u003cspan\u003e \u0026#39;@electric-sql/react\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e MyComponent\u003c/span\u003e\u003cspan\u003e =\u003c/span\u003e\u003cspan\u003e () \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e {\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e  const\u003c/span\u003e\u003cspan\u003e { \u003c/span\u003e\u003cspan\u003edata\u003c/span\u003e\u003cspan\u003e } \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e useShape\u003c/span\u003e\u003cspan\u003e({\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e    url: \u003c/span\u003e\u003cspan\u003e\u0026#39;https://electric.example.com/v1/shapes\u0026#39;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e    params: {\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e      table: \u003c/span\u003e\u003cspan\u003e\u0026#39;items\u0026#39;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e    }\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e  })\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e  return\u003c/span\u003e\u003cspan\u003e (\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e    \u0026lt;\u003c/span\u003e\u003cspan\u003eList\u003c/span\u003e\u003cspan\u003e items\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;data\u0026#34;\u003c/span\u003e\u003cspan\u003e /\u0026gt;\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e  )\u003c/span\u003e\u003c/span\u003e\n\u003cspan\u003e\u003cspan\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis works with \u003cem\u003eany\u003c/em\u003e Postgres \u003ca href=\"https://electric-sql.com/docs/guides/deployment\"\u003edata model and host\u003c/a\u003e, any data type, extension and Postgres feature. Including \u003ca href=\"https://github.com/pgvector/pgvector\" target=\"_blank\" rel=\"noreferrer\"\u003epgvector\u003c/a\u003e, \u003ca href=\"https://postgis.net\" target=\"_blank\" rel=\"noreferrer\"\u003ePostGIS\u003c/a\u003e, sequential IDs, unique constraints, etc. You don\u0026#39;t have to change your data model or your migrations to use Electric.\u003c/p\u003e\u003ch3 id=\"with-your-existing-api\" tabindex=\"-1\"\u003eWith your existing API \u003ca href=\"#with-your-existing-api\" aria-label=\"Permalink to \u0026#34;With your existing API\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eBecause Electric syncs \u003ca href=\"https://electric-sql.com/docs/api/http\"\u003eover HTTP\u003c/a\u003e, you can use it together \u003ca href=\"https://electric-sql.com/blog/2024/11/21/local-first-with-your-existing-api\"\u003ewith your existing API\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eThis allows you to handle concerns like \u003ca href=\"https://electric-sql.com/docs/guides/auth\"\u003eauth\u003c/a\u003e and \u003ca href=\"https://electric-sql.com/docs/guides/writes\"\u003ewrites\u003c/a\u003e with your existing code and web service integrations. You don\u0026#39;t need to codify your auth logic into database rules. You don\u0026#39;t need to replace your API endpoints and middleware stack.\u003c/p\u003e\u003ch2 id=\"take-another-look\" tabindex=\"-1\"\u003eTake another look \u003ca href=\"#take-another-look\" aria-label=\"Permalink to \u0026#34;Take another look\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h2\u003e\u003cp\u003eWith this BETA release, Electric is stable and ready for prime time use. If you haven\u0026#39;t checked it out recently, it\u0026#39;s a great time to take another look.\u003c/p\u003e\u003ch3 id=\"signup-for-early-access-to-electric-cloud\" tabindex=\"-1\"\u003eSignup for early access to Electric Cloud \u003ca href=\"#signup-for-early-access-to-electric-cloud\" aria-label=\"Permalink to \u0026#34;Signup for early access to Electric Cloud\u0026#34;\"\u003e​\u003c/a\u003e\u003c/h3\u003e\u003cp\u003eWe\u0026#39;re also building \u003ca href=\"https://electric-sql.com/product/cloud\"\u003eElectric Cloud\u003c/a\u003e, which provides managed Electric hosting (for those that don\u0026#39;t want to \u003ca href=\"https://electric-sql.com/docs/guides/deployment\"\u003ehost Electric themselves\u003c/a\u003e).\u003c/p\u003e\u003cp\u003eIf you\u0026#39;re interested in using Electric Cloud, you can sign up for early access here:\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
