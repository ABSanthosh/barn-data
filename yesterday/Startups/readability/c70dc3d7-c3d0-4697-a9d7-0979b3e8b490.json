{
  "id": "c70dc3d7-c3d0-4697-a9d7-0979b3e8b490",
  "title": "Phoenix LiveView 1.0.0 is here",
  "link": "https://www.phoenixframework.org/blog/phoenix-liveview-1.0-released?release=1.0",
  "description": "Article URL: https://www.phoenixframework.org/blog/phoenix-liveview-1.0-released?release=1.0 Comments URL: https://news.ycombinator.com/item?id=42312301 Points: 164 # Comments: 30",
  "author": "bcardarella",
  "published": "Tue, 03 Dec 2024 22:28:47 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 18968,
  "excerpt": "LiveView 1.0 is out!",
  "siteName": "",
  "favicon": "https://www.phoenixframework.org/images/apple-touch-icon.png",
  "text": "LiveView 1.0.0 is out! This 1.0 milestone comes six years after the first LiveView commit. Why LiveView I started LiveView to scratch an itch. I wanted to create dynamic server-rendered applications without writing JavaScript. I was tired of the inevitable ballooning complexity that it brings. Think realtime form validations, updating the quantity in a shopping cart, or real-time streaming updates. Why does it require moving mountains to solve in a traditional stack? We write the HTTP glue or GraphQL schemas and resolvers, then we figure out which validation logic needs shared or dup’d. It goes on and on from there – how do we get localization information to the client? What data serializers do we need? How do we wire up WebSockets and IPC back to our code? Is our js bundle getting too large? I guess it’s time to start turning the Webpack or Parcel knobs. Wait Vite is a thing now? Or I guess Bun configuration is what we want? We’ve all felt this pain. The idea was, what if we removed these problems entirely? HTTP can go away, and the server can handle all the rendering and dynamic update concerns. It felt like a heavy approach, but I knew Elixir and Phoenix was perfectly suited for it. Six years later this programming model still feels like cheating. Everything is super fast. Payloads are tiny. Latency is best-in-class. Not only do you write less code, there’s simply less to think about when writing features. Real-time foundations unlock superpowers Interesting things happen when you give every user and UI a real-time, bidirectional foundation as a matter of course. You suddenly have superpowers. You almost don’t notice it. Being freed from all the mundane concerns of typical full-stack development lets you focus on just shipping features. And with Elixir, you start shipping features that other platforms can’t even conceive as possible. Want to ship real-time server logs to the js console in development? No problem! What about supporting production hot code upgrades where browsers can auto re-render anytime CSS stylesheets, images, or templates change – without losing state or dropping connections? Sure! Or maybe you have an app deployed planet-wide where you do work across the cluster and aggregate the results in real-time back to the UI. Would you believe the entire LiveView, including the template markup and RPC calls, is 350 LOC? These are the kinds of applications that LiveView enables. It feels incredible to ship these kinds of things, but it took a while to arrive here for good reasons. There was a lot to solve to make this programming model truly great. How it started Conceptually, what I really wanted is something like what we do in React – change some state, our template re-renders automatically, and the UI updates. But instead of a bit of UI running on the client, what if we ran it on the server? The LiveView could look like this: defmodule ThermoLive do def render(assigns) do ~H\"\"\" \u003cdiv id=\"thermostat\"\u003e \u003cp\u003eTemperature: {@thermostat.temperature}\u003c/p\u003e \u003cp\u003eMode: {@thermostat.mode}\u003c/p\u003e \u003cbutton phx-click=\"inc\"\u003e+\u003c/button\u003e \u003cbutton phx-click=\"dec\"\u003e-\u003c/button\u003e \u003c/div\u003e \"\"\" end def mount(%{\"id\" =\u003e id}, _session, socket) do thermostat = ThermoControl.get_thermostat!(id) :ok = ThermoControl.subscribe(thermostat) {:ok, assign(socket, thermostat: thermostat)} end def handle_info({ThermoControl, %ThermoStat{} = new_thermo}, _, socket) do {:noreply, assign(socket, thermostat: new_thermo)} end def handle_event(\"inc\", _, socket) do thermostat = ThermoControl.inc(socket.assigns.thermostat) {:noreply, assign(socket, thermostat: thermostat)} end end Like React, we have a render function and something that sets our initial state when the LiveView mounts. When state changes, we call render with the new state and the UI is updated. Interactions like phx-click on the + or - button, can be sent as RPC’s from client to server and the server can respond with fresh page HTML. These client/server messages use Phoenix Channels which scale to millions of connections per server. Likewise, if the server wants to send an update to the client, such as another user changing the thermostat, the client can listen for it and replace the page HTML in the same fashion. My naive first pass on the phoenix_live_view.js client looked something like this. let main = document.querySelector(\"[phx-main]\") let channel = new socket.channel(\"lv\") channel.join().receive(\"ok\", ({html}) =\u003e main.innerHTML = html) channel.on(\"update\", ({html}) =\u003e main.innerHTML = html) window.addEventListener(\"click\", e =\u003e { let event = e.getAttribute(\"phx-click\") if(!event){ return } channel.push(\"event\", {event}).receive(\"ok\", ({html}) =\u003e main.innerHTML = html) }) This is how LiveView started. We went to the server for interactions, re-rendered the entire template on state change, and sent the entire page down to the client. The client then swapped out the inner HTML. It worked, but it was not great. Partial state changes required re-executing the entire template and sending down gobs of HTML for otherwise tiny updates. Still the basic programming model was exactly what I wanted. As HTTP fell away from my concerns, entire layers of full-stack considerations disappeared. Next the challenge was making this something truly great. Little did we know we’d accidentally our way to outperforming many SPA use-cases along the way. How we optimized the programming model LiveView’s diffing engine solved two problems with a single mechanism. The first problem was only executing those dynamic parts of a template that actually changed from a previous render. The second was only sending the minimal data necessary to update the client. It solves both by splitting the template into static and dynamic parts. Considering the following LiveView template: ~H\"\"\" \u003cp class={@mode}\u003eTemperature: {format_unit(@temperature)}\u003c/p\u003e \"\"\" At compile time, we convert the template into a struct like this: %Phoenix.LiveView.Rendered{ static: [\"\u003cp class=\\\"\", \\\"\u003eTemperature:\", \"\u003c/p\u003e\"] dynamic: fn assigns -\u003e [ if changed?(assigns, :mode), do: assigns.mode, if changed?(assigns, :temperature), do: format_unit(assigns.temperature) ] end } We know the static parts never change, so they are split from the dynamic Elixir expressions. Next, we compile each expression with change tracking based on the variables accessed within each expression. On render, we compare the previous template values with the new and only execute the template expression if the value has changed. Instead of sending the entire template down on change, we can send the client all the static and dynamic parts on mount. After mount we only send the partial diff of dynamic values for each update. To see how this works, we can imagine the following payload being sent on mount for the template above: { s: [\"\u003cp class=\\\"\", \"\u003eTemperature: \", \"\u003c/p\u003e\"], 0: \"cooling\", 1: \"68℉\" } The client receives a map of static values in the s key, and dynamic values keyed by their index in the statics. For the client to render the full template string, it only needs to zips the static list with the dynamic values. For example: [\"\u003cp class=\\\"\", \"cooling\", \"\\\"\u003eTemperature: \", \"68℉\", \"\u003c/p\u003e\"].join(\"\") \"\u003cp class=\\\"cooling\\\"\u003eTemperature: 68℉\u003c/p\u003e\" With the client holding a static/dynamic cache, optimizing network updates is no work at all. Any server render following mount simply returns the new dynamic values at their known index. Unchanged dynamic values and statics are ignored entirely. If a LiveView runs assign(socket, :temperature, 70), the render/1 function is invoked, and the following payload gets sent down the wire: {1: \"70℉\"} Thats it! To update the UI, the client simply merges this object with its static/dynamic cache: { { s: [\"\u003cp class=\\\"\", \"\u003eTemperature: \", \"\u003c/p\u003e\"], 0: \"cooling\", 1: \"70F\" =\u003e 1: \"70℉\" } } Then the data is zipped together on the client to produce the full HTML of the UI. Of course innerHTML updates blow away UI state and are expensive to perform. So like any client-side framework, we compute minimal DOM diffs to efficiently update the DOM. In fact, we’ve had folks migrate from React to Phoenix LiveView because LiveView client rendering was faster what their React app could offer. Optimizations continued from there. Including fingerprinting, for comprehensions, tree sharing, and more. You can read all about each optimization on the Dashbit blog. We apply these optimizations automatically and for free thanks to our stateful client and server connection. Most other server rendered HTML solutions send the whole fragment on every update or require users to fine tune updates by hand. Best in class latency We’ve seen how LiveView payloads are smaller than the best hand-written JSON API or GraphQL query, but it’s even better than that. Every LiveView holds a connection to the server so page navigation happens via live navigation. TLS handshakes, current user auth, etc happen a single time for the lifetime of the user’s visit. This allows page navigation to happen via a single WebSocket frame, and fewer database queries for any client action. The result is fewer round trips from the client, and simply less work done by the server. This provides less latency for the end-user compared to an SPA fetching data or sending mutations up to a server. Holding a stateful connections comes at the cost of server memory, but it’s far cheaper than folks expect. At a baseline, a given channel connection consumes 40kb of memory. This gives a 1GB server a theoretical ceiling of ~25,000 concurrent LiveViews. Of course the more state you store, the more memory you consume, but you only hold onto the state you need. We also have stream primitives for handling large collections without impacting memory. Elixir and the Erlang VM were designed for this. Scaling a stateful system to millions of concurrent users isn’t theoretical – we do it all the time. See WhatsApp, Discord, or our own benchmarks as examples. With the programming model optimized on both client and server, we expanded into higher level building blocks that take advantage of our unique diffing engine. Reusable Components with HEEx Change tracking and minimal diffs were ground-breaking features, but our HTML templates still lacked composability. The best we could offer is “partial”-like template rendering where a function could encapsulate some partial template content. This works, but it composes poorly and is mismatched in the way we write markup. Fortunately Marlus Saraiva from the Surface project spearheaded development of an HTML-aware component system and contributed back to the LiveView project. With HEEx components, we have a declarative component system, HTML validation, and compile-time checking of component attributes and slots. HEEx components are just annotated functions. They look like this: @doc \"\"\" Renders a button. ## Examples \u003c.button\u003eSend!\u003c/.button\u003e \u003c.button phx-click=\"go\"\u003eSend!\u003c/.button\u003e \"\"\" attr :type, :string, default: nil attr :rest, :global, include: ~w(disabled form name value) slot :inner_block, required: true def button(assigns) do ~H\"\"\" \u003cbutton type={@type} class=\"rounded-lg bg-zinc-900 hover:bg-zinc-700 py-2 px-3 text-white\" {@rest} \u003e {render_slot(@inner_block)} \u003c/button\u003e \"\"\" end An invalid call to a component, such as \u003c.button click=\"bad\"\u003e produces a compile-time warning: warning: undefined attribute \"click\" for component AppWeb.CoreComponents.button/1 lib/app_web/live/page_live.ex:123: (file) Slots allows the component to accept arbitrary content from a caller. This allows components to be much more extensible by the caller without creating a bunch of bespoke partial templates to handle every scenario. Streamlined HEEx syntax When we introduced HEEx and function components, we added a new syntax for interpolating values within tag attributes along with :if and :for conveniences for conditionally generating templates. It looked like this: \u003cdiv :if={@some_condition?}\u003e \u003cul\u003e \u003cli :for={val \u003c- @values}\u003eValue \u003c%= val %\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e Note the use of standard EEx \u003c%= %\u003e interpolation. With the release of LiveView 1.0, we are extending the HTML-aware {} attribute interpolation syntax to within tag bodies as well. This means you can now interpolate values directly within the tag body in a streamlined syntax: \u003cdiv :if={@some_condition?}\u003e \u003cul\u003e \u003cli :for={val \u003c- @values}\u003eValue {val}\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e The EEx \u003c%= %\u003e remains supported and is required for generating dynamic blocks of distinct markup, as well as for interpolating values within \u003cscript\u003e and \u003cstyle\u003e tags. HEEx markup annotations Gone are the days of examining your browser’s HTML and then hunting for where that HTML was generated within your code. The final browser markup can be rendered within several nested layers of component calls. How do we quickly trace back who rendered what? HEEx solves this with a debug_heex_annotations configuration. When set, all rendered markup will be annotated with the file:line of the function component definition, as well as, the file:line of the caller invocation of the component. In practice your dev HTML will look like this in the browser inspector: It annotates the document both at the caller site and the function component definition. If you find the above hard to navigate, you can use the new Phoenix.LiveReloader features that have your editor jump to an element’s nearest caller or definition file:line when clicked with a special key sequence of your choosing. Let’s see it in action: First, we can see how holding c while clicking jumped to the caller file:Line location for that \u003c.button\u003e invocation. Next, we see that holding d while clicking the button jumped to the function definition file:line. This is such a simple quality of life improvement. It will become a key part of your workflow as soon as you try it out. Interactive Uploads A few years ago, LiveView tackled the file upload problem. Something that should be easy has historically been unnecessarily difficult. We wanted a single abstraction for interactive uploads for both direct to cloud, and direct to server use-cases. With a few lines of server code you can have file uploads with drag and drop, file progress, selection pruning, file previews, and more. More recently, we defined an UploadWriter behavior. This gives you access to the raw upload stream as it’s being chunked by the client. This lets you do things like stream uploads to a different server or transcode a video as it’s being uploaded. Since the uploads happen over the existing LiveView connection, reflecting the upload progress or advanced file operations become trivial to implement: Streams and Async Following uploads, we shipped a streams primitive for efficiently handling large collections without needing to hold those collections in server memory. We also introduced assign_async and start_async primitives, which makes handling async operations and rendering async results a breeze. For example, imagine you have an expensive operation that calls out to an external service. The results can be latent or spotty, or both. Your LiveView can use assign_async/2 to offload this operation to a new process and \u003c.async_result\u003e to render the results with each loading, success, or failure state. def render(assigns) do ~H\"\"\" \u003c.async_result :let={org} assign={@org}\u003e \u003c:loading\u003eLoading organization \u003c.spinner /\u003e\u003c/:loading\u003e \u003c:failed :let={_failure}\u003ethere was an error loading the organization\u003c/:failed\u003e {org.name} \u003c/.async_result\u003e \"\"\" end def mount(%{\"slug\" =\u003e slug}, _, socket) do {:ok, assign_async(:org, fn -\u003e {:ok, %{org: fetch_org(slug)}} end)} end Now instead of worrying about an async task crashing the UI, or carefully monitoring async ops while updating the template with a bunch of conditionals, you have a single abstraction for performing the work and rendering the results. As soon as the LiveView disconnects, the async processes are cleaned up, ensuring no wasted resources go to a UI that is no longer around. Here we can also see slots in action with the \u003c:loading\u003e and \u003c:failed\u003e slots of the \u003c.async_result\u003e function component. Slots allow the caller to extend components with their own dynamic content, including their own markup and function component calls. LiveView goes mainstream LiveView and .NET Blazor both started about the same time. I like to think both projects helped spearhead the adoption of this programming model. Since getting started, this model has been embraced in various ways in the Go, Rust, Java, PHP, JavaScript, Ruby, and Haskell communities. And I’m sure others I haven’t yet heard of. Most don’t offer LiveView’s declarative model. Instead developers are required to annotate how individual elements are updated and removed, leading to fragile applications, akin to client-side applications before the introduction of React and other declarative frameworks. Most also lack the optimizations LiveView developers get for free. Large payloads are sent on every event unless developers manually fine tune them. React itself liked the idea of putting React on the server so much, they shipped their own React Server Components to tackle a cross section of similar goals with LiveView. In the case of RSC, pushing real-time events are left to external means. React, like most, chose different tradeoffs because they had no choice. The majority skip the stateful, bidirectional communication layer because most platforms are poorly suited for it. Elixir and the Erlang VM are truly what make this programming model shine. And we have only barely discussed our built-in globally distributed clustering and PubSub. There are truly extraordinary features built into the platform that are at your fingertips. Try it out Now is a great time to dive in and give LiveView a try! We have launched new.phoenixframework.org which lets you get up and running in seconds with Elixir and your first Phoenix project with a single command: For osx/linux: $ curl https://new.phoenixframework.org/myapp | sh For Windows PowerShell: \u003e curl.exe -fsSO https://new.phoenixframework.org/app.bat; .\\app.bat For existing applications, check the changelog for breaking changes to bring your existing apps up to speed. What’s Next Following this release, we’ll be continuing efforts around collocated JavaScript hooks, enhancing Web Component integration, supporting navigation guards, and more as outlined in our issue tracker. Special Thanks Arriving here wouldn’t have been possible without the help of the Phoenix team, especially Steffen Deusch, who has tackled countless LiveView issues over the last year. Happy Hacking! –Chris",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\nLiveView 1.0.0 is out!\u003c/p\u003e\n\u003cp\u003e\nThis 1.0 milestone comes six years after the first LiveView commit.\u003c/p\u003e\n\u003cp\u003e\n  \u003cimg src=\"https://www.phoenixframework.org/images/blog/lv-1.0/commits.png\" alt=\"\"/\u003e\n\u003c/p\u003e\n\u003ch2\u003e\nWhy LiveView\u003c/h2\u003e\n\u003cp\u003e\nI started LiveView to scratch an itch. I wanted to create dynamic server-rendered applications without writing JavaScript. I was tired of the inevitable ballooning complexity that it brings.\u003c/p\u003e\n\u003cp\u003e\nThink realtime form validations, updating the quantity in a shopping cart, or real-time streaming updates. Why does it require moving mountains to solve in a traditional stack? We write the HTTP glue or GraphQL schemas  and resolvers, then we figure out which validation logic needs shared or dup’d. It goes on and on from there – how do we get localization information to the client? What data serializers do we need? How do we wire up WebSockets and IPC back to our code? Is our js bundle getting too large? I guess it’s time to start turning the Webpack or Parcel knobs. Wait Vite is a thing now? Or I guess Bun configuration is what we want? We’ve all felt this pain.\u003c/p\u003e\n\u003cp\u003e\nThe idea was, what if we removed these problems entirely? HTTP can go away, and the server can handle all the rendering and dynamic update concerns. It felt like a heavy approach, but I knew Elixir and Phoenix was perfectly suited for it.\u003c/p\u003e\n\u003cp\u003e\nSix years later this programming model still feels like cheating.  Everything is super fast. Payloads are tiny. Latency is best-in-class. Not only do you write less code, there’s simply less to think about when writing features.\u003c/p\u003e\n\u003ch2\u003e\nReal-time foundations unlock superpowers\u003c/h2\u003e\n\u003cp\u003e\nInteresting things happen when you give every user and UI a real-time, bidirectional foundation as a matter of course. You suddenly have superpowers. You almost don’t notice it. Being freed from all the mundane concerns of typical full-stack development lets you focus on just shipping features. And with Elixir, you start shipping features that other platforms can’t even conceive as possible.\u003c/p\u003e\n\u003cp\u003e\nWant to \u003ca href=\"https://fly.io/phoenix-files/phoenix-dev-blog-server-logs-in-the-browser-console/\"\u003eship real-time server logs to the js console in development\u003c/a\u003e? No problem!\u003c/p\u003e\n\u003cvideo src=\"https://www.phoenixframework.org/images/blog/lv-1.0/server-logs.mp4\" autoplay=\"autoplay\" loop=\"loop\" controls=\"controls\" muted=\"muted\"\u003e\n\u003c/video\u003e\n\u003cp\u003e\nWhat about supporting production hot code upgrades where browsers can auto re-render anytime CSS stylesheets, images, or templates change – without losing state or dropping connections? Sure!\u003c/p\u003e\n\u003cvideo src=\"https://www.phoenixframework.org/images/blog/lv-1.0/hot-deploy.mp4\" autoplay=\"autoplay\" loop=\"loop\" controls=\"controls\" muted=\"muted\"\u003e\n\u003c/video\u003e\n\u003cp\u003e\nOr maybe you have an app deployed planet-wide where you do work across the cluster and aggregate the results in real-time back to the UI. Would you believe the entire LiveView, including the template markup and RPC calls, is \u003ca href=\"https://github.com/fly-apps/wps/blob/0cd4f4d46e873b3a0937fe230d26f5a195687ecf/lib/wps_web/live/page_speed_live.ex\"\u003e350 LOC\u003c/a\u003e?\u003c/p\u003e\n\u003cvideo src=\"https://www.phoenixframework.org/images/blog/lv-1.0/what.mp4\" controls=\"controls\"\u003e\n\u003c/video\u003e\n\u003cp\u003e\nThese are the kinds of applications that LiveView enables. It feels incredible to ship these kinds of things, but it took a while to arrive here for good reasons. There was a lot to solve to make this programming model truly great.\u003c/p\u003e\n\u003ch2\u003e\nHow it started\u003c/h2\u003e\n\u003cp\u003e\nConceptually, what I really wanted is something like what we do in React – change some state, our template re-renders automatically, and the UI updates. But instead of a bit of UI running on the client, what if we ran it on the server? The LiveView could look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edefmodule\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eThermoLive\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"2588148176-1\"\u003edo\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003edef\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan data-group-id=\"2588148176-2\"\u003e(\u003c/span\u003e\u003cspan\u003eassigns\u003c/span\u003e\u003cspan data-group-id=\"2588148176-2\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"2588148176-3\"\u003edo\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e~H\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eTemperature: \u003c/span\u003e\u003cspan data-group-id=\"7103186600-1\"\u003e{\u003c/span\u003e\u003cspan\u003e@thermostat\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etemperature\u003c/span\u003e\u003cspan data-group-id=\"7103186600-1\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eMode: \u003c/span\u003e\u003cspan data-group-id=\"7103186600-2\"\u003e{\u003c/span\u003e\u003cspan\u003e@thermostat\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emode\u003c/span\u003e\u003cspan data-group-id=\"7103186600-2\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ephx-click\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003einc\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e+\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ephx-click\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003edec\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e-\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan data-group-id=\"2588148176-3\"\u003eend\u003c/span\u003e\u003cspan\u003e\n\n  \u003c/span\u003e\u003cspan\u003edef\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emount\u003c/span\u003e\u003cspan data-group-id=\"2588148176-4\"\u003e(\u003c/span\u003e\u003cspan data-group-id=\"2588148176-5\"\u003e%{\u003c/span\u003e\u003cspan\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan data-group-id=\"2588148176-5\"\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e_session\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esocket\u003c/span\u003e\u003cspan data-group-id=\"2588148176-4\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"2588148176-6\"\u003edo\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eThermoControl\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eget_thermostat!\u003c/span\u003e\u003cspan data-group-id=\"2588148176-7\"\u003e(\u003c/span\u003e\u003cspan\u003eid\u003c/span\u003e\u003cspan data-group-id=\"2588148176-7\"\u003e)\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e:ok\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eThermoControl\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003esubscribe\u003c/span\u003e\u003cspan data-group-id=\"2588148176-8\"\u003e(\u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan data-group-id=\"2588148176-8\"\u003e)\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan data-group-id=\"2588148176-9\"\u003e{\u003c/span\u003e\u003cspan\u003e:ok\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eassign\u003c/span\u003e\u003cspan data-group-id=\"2588148176-10\"\u003e(\u003c/span\u003e\u003cspan\u003esocket\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan data-group-id=\"2588148176-10\"\u003e)\u003c/span\u003e\u003cspan data-group-id=\"2588148176-9\"\u003e}\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan data-group-id=\"2588148176-6\"\u003eend\u003c/span\u003e\u003cspan\u003e\n\n  \u003c/span\u003e\u003cspan\u003edef\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle_info\u003c/span\u003e\u003cspan data-group-id=\"2588148176-11\"\u003e(\u003c/span\u003e\u003cspan data-group-id=\"2588148176-12\"\u003e{\u003c/span\u003e\u003cspan\u003eThermoControl\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"2588148176-13\"\u003e%\u003c/span\u003e\u003cspan data-group-id=\"2588148176-13\"\u003eThermoStat\u003c/span\u003e\u003cspan data-group-id=\"2588148176-13\"\u003e{\u003c/span\u003e\u003cspan data-group-id=\"2588148176-13\"\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew_thermo\u003c/span\u003e\u003cspan data-group-id=\"2588148176-12\"\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esocket\u003c/span\u003e\u003cspan data-group-id=\"2588148176-11\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"2588148176-14\"\u003edo\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan data-group-id=\"2588148176-15\"\u003e{\u003c/span\u003e\u003cspan\u003e:noreply\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eassign\u003c/span\u003e\u003cspan data-group-id=\"2588148176-16\"\u003e(\u003c/span\u003e\u003cspan\u003esocket\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew_thermo\u003c/span\u003e\u003cspan data-group-id=\"2588148176-16\"\u003e)\u003c/span\u003e\u003cspan data-group-id=\"2588148176-15\"\u003e}\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan data-group-id=\"2588148176-14\"\u003eend\u003c/span\u003e\u003cspan\u003e\n\n  \u003c/span\u003e\u003cspan\u003edef\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehandle_event\u003c/span\u003e\u003cspan data-group-id=\"2588148176-17\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;inc\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esocket\u003c/span\u003e\u003cspan data-group-id=\"2588148176-17\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"2588148176-18\"\u003edo\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eThermoControl\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einc\u003c/span\u003e\u003cspan data-group-id=\"2588148176-19\"\u003e(\u003c/span\u003e\u003cspan\u003esocket\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eassigns\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan data-group-id=\"2588148176-19\"\u003e)\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan data-group-id=\"2588148176-20\"\u003e{\u003c/span\u003e\u003cspan\u003e:noreply\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eassign\u003c/span\u003e\u003cspan data-group-id=\"2588148176-21\"\u003e(\u003c/span\u003e\u003cspan\u003esocket\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ethermostat\u003c/span\u003e\u003cspan data-group-id=\"2588148176-21\"\u003e)\u003c/span\u003e\u003cspan data-group-id=\"2588148176-20\"\u003e}\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan data-group-id=\"2588148176-18\"\u003eend\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan data-group-id=\"2588148176-1\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nLike React, we have a render function and something that sets our initial state when the LiveView mounts. When state changes, we call render with the new state and the UI is updated.\u003c/p\u003e\n\u003cp\u003e\nInteractions like \u003ccode\u003ephx-click\u003c/code\u003e on the \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e-\u003c/code\u003e button, can be sent as RPC’s from client to server and the server can respond with fresh page HTML. These client/server messages use Phoenix Channels which \u003ca href=\"https://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections\"\u003escale to millions of connections per server\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\nLikewise, if the server wants to send an update to the client, such as another user changing the thermostat, the client can listen for it and replace the page HTML in the same fashion. My naive first pass on the \u003ccode\u003ephoenix_live_view.js\u003c/code\u003e client looked something like this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003elet\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equerySelector\u003c/span\u003e\u003cspan data-group-id=\"3081006925-1\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;[phx-main]\u0026#34;\u003c/span\u003e\u003cspan data-group-id=\"3081006925-1\"\u003e)\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echannel\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enew\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esocket\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003echannel\u003c/span\u003e\u003cspan data-group-id=\"3081006925-2\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;lv\u0026#34;\u003c/span\u003e\u003cspan data-group-id=\"3081006925-2\"\u003e)\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003echannel\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejoin\u003c/span\u003e\u003cspan data-group-id=\"3081006925-3\"\u003e(\u003c/span\u003e\u003cspan data-group-id=\"3081006925-3\"\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereceive\u003c/span\u003e\u003cspan data-group-id=\"3081006925-4\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ok\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"3081006925-5\"\u003e(\u003c/span\u003e\u003cspan data-group-id=\"3081006925-6\"\u003e{\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan data-group-id=\"3081006925-6\"\u003e}\u003c/span\u003e\u003cspan data-group-id=\"3081006925-5\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einnerHTML\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan data-group-id=\"3081006925-4\"\u003e)\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003echannel\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eon\u003c/span\u003e\u003cspan data-group-id=\"3081006925-7\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;update\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"3081006925-8\"\u003e(\u003c/span\u003e\u003cspan data-group-id=\"3081006925-9\"\u003e{\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan data-group-id=\"3081006925-9\"\u003e}\u003c/span\u003e\u003cspan data-group-id=\"3081006925-8\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einnerHTML\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan data-group-id=\"3081006925-7\"\u003e)\u003c/span\u003e\u003cspan\u003e\n\n\u003c/span\u003e\u003cspan\u003ewindow\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eaddEventListener\u003c/span\u003e\u003cspan data-group-id=\"3081006925-10\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;click\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"3081006925-11\"\u003e{\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003elet\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ee\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetAttribute\u003c/span\u003e\u003cspan data-group-id=\"3081006925-12\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;phx-click\u0026#34;\u003c/span\u003e\u003cspan data-group-id=\"3081006925-12\"\u003e)\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan data-group-id=\"3081006925-13\"\u003e(\u003c/span\u003e\u003cspan\u003e!\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan data-group-id=\"3081006925-13\"\u003e)\u003c/span\u003e\u003cspan data-group-id=\"3081006925-14\"\u003e{\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ereturn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"3081006925-14\"\u003e}\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003echannel\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003epush\u003c/span\u003e\u003cspan data-group-id=\"3081006925-15\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;event\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"3081006925-16\"\u003e{\u003c/span\u003e\u003cspan\u003eevent\u003c/span\u003e\u003cspan data-group-id=\"3081006925-16\"\u003e}\u003c/span\u003e\u003cspan data-group-id=\"3081006925-15\"\u003e)\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ereceive\u003c/span\u003e\u003cspan data-group-id=\"3081006925-17\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;ok\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"3081006925-18\"\u003e(\u003c/span\u003e\u003cspan data-group-id=\"3081006925-19\"\u003e{\u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan data-group-id=\"3081006925-19\"\u003e}\u003c/span\u003e\u003cspan data-group-id=\"3081006925-18\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emain\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003einnerHTML\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ehtml\u003c/span\u003e\u003cspan data-group-id=\"3081006925-17\"\u003e)\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan data-group-id=\"3081006925-11\"\u003e}\u003c/span\u003e\u003cspan data-group-id=\"3081006925-10\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nThis is how LiveView started. We went to the server for interactions, re-rendered the entire template on state change, and sent the entire page down to the client. The client then swapped out the inner HTML.\u003c/p\u003e\n\u003cp\u003e\nIt worked, but it was not great. Partial state changes required re-executing the entire template and sending down gobs of HTML for otherwise tiny updates.\u003c/p\u003e\n\u003cp\u003e\nStill the basic programming model was exactly what I wanted. As HTTP fell away from my concerns, entire layers of full-stack considerations disappeared.\u003c/p\u003e\n\u003cp\u003e\nNext the challenge was making this something truly great. Little did we know we’d accidentally our way to outperforming many SPA use-cases along the way.\u003c/p\u003e\n\u003ch2\u003e\nHow we optimized the programming model\u003c/h2\u003e\n\u003cp\u003e\nLiveView’s diffing engine solved two problems with a single mechanism. The first problem was only executing those dynamic parts of a template that actually changed from a previous render. The second was only sending the minimal data necessary to update the client.\u003c/p\u003e\n\u003cp\u003e\nIt solves both by splitting the template into static and dynamic parts. Considering the following LiveView template:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e~H\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan data-group-id=\"3060953488-1\"\u003e{\u003c/span\u003e\u003cspan\u003e@mode\u003c/span\u003e\u003cspan data-group-id=\"3060953488-1\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eTemperature: \u003c/span\u003e\u003cspan data-group-id=\"3060953488-2\"\u003e{\u003c/span\u003e\u003cspan\u003eformat_unit\u003c/span\u003e\u003cspan data-group-id=\"9068738118-1\"\u003e(\u003c/span\u003e\u003cspan\u003e@temperature\u003c/span\u003e\u003cspan data-group-id=\"9068738118-1\"\u003e)\u003c/span\u003e\u003cspan data-group-id=\"3060953488-2\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ep\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nAt compile time, we convert the template into a struct like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan data-group-id=\"4442233026-1\"\u003e%\u003c/span\u003e\u003cspan data-group-id=\"4442233026-1\"\u003ePhoenix.LiveView.Rendered\u003c/span\u003e\u003cspan data-group-id=\"4442233026-1\"\u003e{\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003estatic\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"4442233026-2\"\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;p class=\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\\\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026gt;Temperature:\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan data-group-id=\"4442233026-2\"\u003e]\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003edynamic\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"4442233026-3\"\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eassigns\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan data-group-id=\"4442233026-4\"\u003e[\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echanged?\u003c/span\u003e\u003cspan data-group-id=\"4442233026-5\"\u003e(\u003c/span\u003e\u003cspan\u003eassigns\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:mode\u003c/span\u003e\u003cspan data-group-id=\"4442233026-5\"\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edo\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eassigns\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003emode\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\n      \u003c/span\u003e\u003cspan\u003eif\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003echanged?\u003c/span\u003e\u003cspan data-group-id=\"4442233026-6\"\u003e(\u003c/span\u003e\u003cspan\u003eassigns\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:temperature\u003c/span\u003e\u003cspan data-group-id=\"4442233026-6\"\u003e)\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edo\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eformat_unit\u003c/span\u003e\u003cspan data-group-id=\"4442233026-7\"\u003e(\u003c/span\u003e\u003cspan\u003eassigns\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003etemperature\u003c/span\u003e\u003cspan data-group-id=\"4442233026-7\"\u003e)\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan data-group-id=\"4442233026-4\"\u003e]\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan data-group-id=\"4442233026-3\"\u003eend\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan data-group-id=\"4442233026-1\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nWe know the static parts never change, so they are split from the dynamic Elixir expressions. Next, we compile each expression with change tracking based on the variables accessed within each expression. On render, we compare the previous template values with the new and only execute the template expression if the value has changed.\u003c/p\u003e\n\u003cp\u003e\nInstead of sending the entire template down on change, we can send the client all the static and dynamic parts on \u003ccode\u003emount\u003c/code\u003e. After mount  we only send the partial diff of dynamic values for each update.\u003c/p\u003e\n\u003cp\u003e\nTo see how this works, we can imagine the following payload being sent on \u003ccode\u003emount\u003c/code\u003e for the template above:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan data-group-id=\"0732066450-1\"\u003e{\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003es\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"0732066450-2\"\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;p class=\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026gt;Temperature: \u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan data-group-id=\"0732066450-2\"\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;cooling\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;68℉\u0026#34;\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan data-group-id=\"0732066450-1\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nThe client receives a map of static values in the \u003ccode\u003es\u003c/code\u003e key, and dynamic values keyed by their index in the statics. For the client to render the full template string, it only needs to zips the static list with the dynamic values. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan data-group-id=\"4665559507-1\"\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;p class=\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;cooling\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;Temperature: \u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;68℉\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan data-group-id=\"4665559507-1\"\u003e]\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ejoin\u003c/span\u003e\u003cspan data-group-id=\"4665559507-2\"\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan data-group-id=\"4665559507-2\"\u003e)\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;p class=\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003ecooling\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026gt;Temperature: 68℉\u0026lt;/p\u0026gt;\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nWith the client holding a static/dynamic cache, optimizing network updates is no work at all. Any server render following \u003ccode\u003emount\u003c/code\u003e  simply returns the new dynamic values at their known index. Unchanged dynamic values and statics are ignored entirely.\u003c/p\u003e\n\u003cp\u003e\nIf a LiveView runs \u003ccode\u003eassign(socket, :temperature, 70)\u003c/code\u003e, the \u003ccode\u003erender/1\u003c/code\u003e function is invoked, and the following payload gets sent down the wire:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan data-group-id=\"7408994240-1\"\u003e{\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;70℉\u0026#34;\u003c/span\u003e\u003cspan data-group-id=\"7408994240-1\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nThats it! To update the UI, the client simply merges this object with its static/dynamic cache:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan data-group-id=\"8352654252-1\"\u003e{\u003c/span\u003e\u003cspan\u003e                     \u003c/span\u003e\u003cspan data-group-id=\"8352654252-2\"\u003e{\u003c/span\u003e\u003cspan\u003e\n                        \u003c/span\u003e\u003cspan\u003es\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"8352654252-3\"\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;p class=\u003c/span\u003e\u003cspan\u003e\\\u0026#34;\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026gt;Temperature: \u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan data-group-id=\"8352654252-3\"\u003e]\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\n                        \u003c/span\u003e\u003cspan\u003e0\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;cooling\u0026#34;\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;70F\u0026#34;\u003c/span\u003e\u003cspan\u003e     \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e       \u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;70℉\u0026#34;\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan data-group-id=\"8352654252-2\"\u003e}\u003c/span\u003e\u003cspan\u003e                     \u003c/span\u003e\u003cspan data-group-id=\"8352654252-1\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nThen the data is zipped together on the client to produce the full HTML of the UI.\u003c/p\u003e\n\u003cp\u003e\nOf course \u003ccode\u003einnerHTML\u003c/code\u003e updates blow away UI state and are expensive to perform. So like any client-side framework, we compute minimal DOM diffs to efficiently update the DOM. In fact, we’ve had folks migrate from React to Phoenix LiveView because \u003ca href=\"https://podcast.thinkingelixir.com/156\"\u003eLiveView client rendering was faster what their React app could offer\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\nOptimizations continued from there. Including fingerprinting, for comprehensions, tree sharing, and more. You can \u003ca href=\"https://dashbit.co/blog/latency-rendering-liveview\"\u003eread all about each optimization\u003c/a\u003e on the Dashbit blog.\u003c/p\u003e\n\u003cp\u003e\nWe apply these optimizations \u003cem\u003eautomatically and for free\u003c/em\u003e thanks to our stateful client and server connection. Most other server rendered HTML solutions send the whole fragment on every update or require users to fine tune updates by hand.\u003c/p\u003e\n\u003ch2\u003e\nBest in class latency\u003c/h2\u003e\n\u003cp\u003e\nWe’ve seen how LiveView payloads are smaller than the best hand-written JSON API or GraphQL query, but it’s even better than that. Every LiveView holds a connection to the server so page navigation happens via live navigation. TLS handshakes, current user auth, etc happen a \u003cem\u003esingle time\u003c/em\u003e for the lifetime of the user’s visit. This allows page navigation to happen via a single WebSocket frame, and fewer database queries for any client action. The result is fewer round trips from the client, and simply less work done by the server. This provides less latency for the end-user compared to an SPA fetching data or sending mutations up to a server.\u003c/p\u003e\n\u003cp\u003e\nHolding a stateful connections comes at the cost of server memory, but it’s far cheaper than folks expect. At a baseline, a given channel connection consumes 40kb of memory. This gives a 1GB server a theoretical ceiling of ~25,000 concurrent LiveViews. Of course the more state you store, the more memory you consume, but you only hold onto the state you need. We also have \u003ccode\u003estream\u003c/code\u003e primitives for handling large collections without impacting memory. Elixir and the Erlang VM were designed for this. Scaling a stateful system to millions of concurrent users isn’t theoretical – we do it all the time. See WhatsApp, Discord, or \u003ca href=\"https://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections\"\u003eour own benchmarks\u003c/a\u003e as examples.\u003c/p\u003e\n\u003cp\u003e\nWith the programming model optimized on both client and server, we expanded into higher level building blocks that take advantage of our unique diffing engine.\u003c/p\u003e\n\u003ch2\u003e\nReusable Components with HEEx\u003c/h2\u003e\n\u003cp\u003e\nChange tracking and minimal diffs were ground-breaking features, but our HTML templates still lacked composability. The best we could offer is “partial”-like template rendering where a function could encapsulate some partial template content. This works, but it composes poorly and is mismatched in the way we write markup. Fortunately Marlus Saraiva from the \u003ca href=\"https://surface-ui.org/\"\u003eSurface project\u003c/a\u003e spearheaded development of an HTML-aware component system and contributed back to the LiveView project. With HEEx components, we have a declarative component system, HTML validation, and  compile-time checking of component attributes and slots.\u003c/p\u003e\n\u003cp\u003e\nHEEx components are just annotated functions. They look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e@doc\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\nRenders a button.\n\n## Examples\n\n    \u0026lt;.button\u0026gt;Send!\u0026lt;/.button\u0026gt;\n    \u0026lt;.button phx-click=\u0026#34;go\u0026#34;\u0026gt;Send!\u0026lt;/.button\u0026gt;\n\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003eattr\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:type\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:string\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edefault\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003enil\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003eattr\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:rest\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:global\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003einclude\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e~w(disabled form name value)\u003c/span\u003e\u003cspan\u003e\n\n\u003c/span\u003e\u003cspan\u003eslot\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:inner_block\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erequired\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003etrue\u003c/span\u003e\u003cspan\u003e\n\n\u003c/span\u003e\u003cspan\u003edef\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan data-group-id=\"5635279201-1\"\u003e(\u003c/span\u003e\u003cspan\u003eassigns\u003c/span\u003e\u003cspan data-group-id=\"5635279201-1\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"5635279201-2\"\u003edo\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e~H\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003etype\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan data-group-id=\"4932554850-1\"\u003e{\u003c/span\u003e\u003cspan\u003e@type\u003c/span\u003e\u003cspan data-group-id=\"4932554850-1\"\u003e}\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003e    \u003c/span\u003e\u003cspan\u003eclass\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003erounded-lg bg-zinc-900 hover:bg-zinc-700 py-2 px-3 text-white\u003c/span\u003e\u003cspan\u003e\u0026#34;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan data-group-id=\"4932554850-2\"\u003e{\u003c/span\u003e\u003cspan\u003e@rest\u003c/span\u003e\u003cspan data-group-id=\"4932554850-2\"\u003e}\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan data-group-id=\"4932554850-3\"\u003e{\u003c/span\u003e\u003cspan\u003erender_slot\u003c/span\u003e\u003cspan data-group-id=\"5635279201-3\"\u003e(\u003c/span\u003e\u003cspan\u003e@inner_block\u003c/span\u003e\u003cspan data-group-id=\"5635279201-3\"\u003e)\u003c/span\u003e\u003cspan data-group-id=\"4932554850-3\"\u003e}\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ebutton\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan data-group-id=\"5635279201-2\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nAn invalid call to a component, such as \u003ccode\u003e\u0026lt;.button click=\u0026#34;bad\u0026#34;\u0026gt;\u003c/code\u003e produces a compile-time warning:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewarning: undefined attribute \u0026#34;click\u0026#34; for component AppWeb.CoreComponents.button/1\n  lib/app_web/live/page_live.ex:123: (file)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nSlots allows the component to accept arbitrary content from a caller. This allows components to be much more extensible by the caller without creating a bunch of bespoke partial templates to handle every scenario.\u003c/p\u003e\n\u003ch2\u003e\nStreamlined HEEx syntax\u003c/h2\u003e\n\u003cp\u003e\nWhen we introduced HEEx and function components, we added a new syntax for interpolating values within tag attributes along with \u003ccode\u003e:if\u003c/code\u003e and \u003ccode\u003e:for\u003c/code\u003e conveniences for conditionally generating templates. It looked like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:if\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan data-group-id=\"3259069850-1\"\u003e{\u003c/span\u003e\u003cspan\u003e@some_condition?\u003c/span\u003e\u003cspan data-group-id=\"3259069850-1\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:for\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan data-group-id=\"3259069850-2\"\u003e{\u003c/span\u003e\u003cspan\u003eval\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e@values\u003c/span\u003e\u003cspan data-group-id=\"3259069850-2\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eValue \u003c/span\u003e\u003cspan data-group-id=\"3259069850-3\"\u003e\u0026lt;%=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eval\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"3259069850-3\"\u003e%\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nNote the use of standard EEx \u003ccode\u003e\u0026lt;%= %\u0026gt;\u003c/code\u003e interpolation. With the release of LiveView 1.0, we are extending the HTML-aware \u003ccode\u003e{}\u003c/code\u003e attribute interpolation syntax to within tag bodies as well. This means you can now interpolate values directly within the tag body in a streamlined syntax:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:if\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan data-group-id=\"6635342574-1\"\u003e{\u003c/span\u003e\u003cspan\u003e@some_condition?\u003c/span\u003e\u003cspan data-group-id=\"6635342574-1\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:for\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan data-group-id=\"6635342574-2\"\u003e{\u003c/span\u003e\u003cspan\u003eval\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e\u0026lt;-\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e@values\u003c/span\u003e\u003cspan data-group-id=\"6635342574-2\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eValue \u003c/span\u003e\u003cspan data-group-id=\"6635342574-3\"\u003e{\u003c/span\u003e\u003cspan\u003eval\u003c/span\u003e\u003cspan data-group-id=\"6635342574-3\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eli\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003eul\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nThe EEx \u003ccode\u003e\u0026lt;%= %\u0026gt;\u003c/code\u003e remains supported and is required for generating dynamic blocks of distinct markup, as well as for interpolating values within \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;style\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e\n\u003ch2\u003e\nHEEx markup annotations\u003c/h2\u003e\n\u003cp\u003e\nGone are the days of examining your browser’s HTML and then hunting for where that HTML was generated within your code. The final browser markup can be rendered  within several nested layers of component calls. How do we quickly trace back who rendered what?\u003c/p\u003e\n\u003cp\u003e\nHEEx solves this with a \u003ccode\u003edebug_heex_annotations\u003c/code\u003e configuration. When set, all rendered markup will be annotated with the file:line of the function component definition, \u003cem\u003eas well as,\u003c/em\u003e the file:line of the caller invocation of the component. In practice your dev HTML will look like this in the browser inspector:\u003c/p\u003e\n\u003cp\u003e\n  \u003cimg src=\"https://www.phoenixframework.org/images/blog/lv-1.0/heex-anno.png\" alt=\"Debug HEEx annotations\"/\u003e\n\u003c/p\u003e\n\u003cp\u003e\nIt annotates the document both at the caller site and the function component definition. If you find the above hard to navigate, you can use the new \u003ccode\u003ePhoenix.LiveReloader\u003c/code\u003e features that have your editor jump to an element’s nearest caller or definition file:line when clicked with a special key sequence of your choosing.\u003c/p\u003e\n\u003cp\u003e\nLet’s see it in action:\u003c/p\u003e\n\u003cvideo src=\"https://www.phoenixframework.org/images/blog/lv-1.0/keydebug.mp4\" autoplay=\"autoplay\" loop=\"loop\" controls=\"controls\" muted=\"muted\"\u003e\n\u003c/video\u003e\n\u003cp\u003e\nFirst, we can see how holding \u003ccode\u003ec\u003c/code\u003e while clicking jumped to the caller file:Line location for that \u003ccode\u003e\u0026lt;.button\u0026gt;\u003c/code\u003e invocation. Next, we see that holding \u003ccode\u003ed\u003c/code\u003e while clicking the button jumped to the function definition file:line.\u003c/p\u003e\n\u003cp\u003e\nThis is such a simple quality of life improvement. It will become a key part of your workflow as soon as you try it out.\u003c/p\u003e\n\u003ch2\u003e\nInteractive Uploads\u003c/h2\u003e\n\u003cp\u003e\nA few years ago, LiveView tackled the file upload problem. Something that should be easy has historically been unnecessarily difficult. We wanted a single abstraction for interactive uploads for both direct to cloud, and direct to server use-cases.\u003c/p\u003e\n\u003cp\u003e\nWith a few lines of server code you can have file uploads with drag and drop, file progress, selection pruning, file previews, and more.\u003c/p\u003e\n\u003cp\u003e\nMore recently, we defined an \u003ccode\u003eUploadWriter\u003c/code\u003e behavior. This gives you access to the raw upload stream as it’s being chunked by the client. This lets you do things like \u003ca href=\"https://fly.io/phoenix-files/streaming-uploads-with-liveview/\"\u003estream uploads to a different server\u003c/a\u003e or \u003ca href=\"https://youtu.be/GICJ42OyBGg?si=8SaAL2Sh74qsFaI3\u0026amp;t=1930\"\u003etranscode a video as it’s being uploaded\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\nSince the uploads happen over the existing LiveView connection, reflecting the upload progress or advanced file operations \u003ca href=\"https://github.com/fly-apps/thumbnail_generator/blob/ce7e2ede394eed3b2a1b1aa5e41d323643950f5e/lib/thumbs_web/live/home_live.ex\"\u003ebecome trivial to implement\u003c/a\u003e:\u003c/p\u003e\n\u003cvideo src=\"https://www.phoenixframework.org/images/blog/lv-1.0/puppy.mp4\" autoplay=\"autoplay\" loop=\"loop\" controls=\"controls\"\u003e\n\u003c/video\u003e\n\u003ch2\u003e\nStreams and Async\u003c/h2\u003e\n\u003cp\u003e\nFollowing uploads, we shipped a streams primitive for efficiently handling large collections without needing to hold those collections in server memory. We also introduced \u003ccode\u003eassign_async\u003c/code\u003e and \u003ccode\u003estart_async\u003c/code\u003e primitives, which makes handling async operations and rendering async results a breeze.\u003c/p\u003e\n\u003cp\u003e\nFor example, imagine you have an expensive operation that calls out to an external service. The results can be latent or spotty, or both.  Your LiveView can use \u003ccode\u003eassign_async/2\u003c/code\u003e to offload this operation to a new process and \u003ccode\u003e\u0026lt;.async_result\u0026gt;\u003c/code\u003e to render the results with each loading, success, or failure state.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u003cspan\u003edef\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003erender\u003c/span\u003e\u003cspan data-group-id=\"4891046976-1\"\u003e(\u003c/span\u003e\u003cspan\u003eassigns\u003c/span\u003e\u003cspan data-group-id=\"4891046976-1\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"4891046976-2\"\u003edo\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e~H\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e.async_result\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:let\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan data-group-id=\"3242930733-1\"\u003e{\u003c/span\u003e\u003cspan\u003eorg\u003c/span\u003e\u003cspan data-group-id=\"3242930733-1\"\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eassign\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan data-group-id=\"3242930733-2\"\u003e{\u003c/span\u003e\u003cspan\u003e@org\u003c/span\u003e\u003cspan data-group-id=\"3242930733-2\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e:loading\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003eLoading organization \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e.spinner\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e/\u0026gt;\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003e:loading\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan\u003e\u0026lt;\u003c/span\u003e\u003cspan\u003e:failed\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e:let\u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan data-group-id=\"3242930733-3\"\u003e{\u003c/span\u003e\u003cspan\u003e_failure\u003c/span\u003e\u003cspan data-group-id=\"3242930733-3\"\u003e}\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003ethere was an error loading the organization\u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003e:failed\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n    \u003c/span\u003e\u003cspan data-group-id=\"3242930733-4\"\u003e{\u003c/span\u003e\u003cspan\u003eorg\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ename\u003c/span\u003e\u003cspan data-group-id=\"3242930733-4\"\u003e}\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026lt;/\u003c/span\u003e\u003cspan\u003e.async_result\u003c/span\u003e\u003cspan\u003e\u0026gt;\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan data-group-id=\"4891046976-2\"\u003eend\u003c/span\u003e\u003cspan\u003e\n\n\u003c/span\u003e\u003cspan\u003edef\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003emount\u003c/span\u003e\u003cspan data-group-id=\"4891046976-3\"\u003e(\u003c/span\u003e\u003cspan data-group-id=\"4891046976-4\"\u003e%{\u003c/span\u003e\u003cspan\u003e\u0026#34;slug\u0026#34;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eslug\u003c/span\u003e\u003cspan data-group-id=\"4891046976-4\"\u003e}\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e_\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003esocket\u003c/span\u003e\u003cspan data-group-id=\"4891046976-3\"\u003e)\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"4891046976-5\"\u003edo\u003c/span\u003e\u003cspan\u003e\n  \u003c/span\u003e\u003cspan data-group-id=\"4891046976-6\"\u003e{\u003c/span\u003e\u003cspan\u003e:ok\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003eassign_async\u003c/span\u003e\u003cspan data-group-id=\"4891046976-7\"\u003e(\u003c/span\u003e\u003cspan\u003e:org\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"4891046976-8\"\u003efn\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e-\u0026gt;\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"4891046976-9\"\u003e{\u003c/span\u003e\u003cspan\u003e:ok\u003c/span\u003e\u003cspan\u003e,\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"4891046976-10\"\u003e%{\u003c/span\u003e\u003cspan\u003eorg\u003c/span\u003e\u003cspan\u003e:\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003efetch_org\u003c/span\u003e\u003cspan data-group-id=\"4891046976-11\"\u003e(\u003c/span\u003e\u003cspan\u003eslug\u003c/span\u003e\u003cspan data-group-id=\"4891046976-11\"\u003e)\u003c/span\u003e\u003cspan data-group-id=\"4891046976-10\"\u003e}\u003c/span\u003e\u003cspan data-group-id=\"4891046976-9\"\u003e}\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan data-group-id=\"4891046976-8\"\u003eend\u003c/span\u003e\u003cspan data-group-id=\"4891046976-7\"\u003e)\u003c/span\u003e\u003cspan data-group-id=\"4891046976-6\"\u003e}\u003c/span\u003e\u003cspan\u003e\n\u003c/span\u003e\u003cspan data-group-id=\"4891046976-5\"\u003eend\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nNow instead of worrying about an async task crashing the UI, or carefully monitoring async ops while updating the template with a bunch of conditionals, you have a single abstraction for performing the work and rendering the results. As soon as the LiveView disconnects, the async processes are cleaned up, ensuring no wasted resources go to a UI that is no longer around.\u003c/p\u003e\n\u003cp\u003e\nHere we can also see slots in action with the \u003ccode\u003e\u0026lt;:loading\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;:failed\u0026gt;\u003c/code\u003e slots of the  \u003ccode\u003e\u0026lt;.async_result\u0026gt;\u003c/code\u003e function component. Slots allow the caller to extend components with their own dynamic content, including their own markup and function component calls.\u003c/p\u003e\n\u003ch2\u003e\nLiveView goes mainstream\u003c/h2\u003e\n\u003cp\u003e\nLiveView and \u003ca href=\"https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor\"\u003e.NET Blazor\u003c/a\u003e both started about the same time. I like to think both projects helped spearhead the adoption of this programming model.\u003c/p\u003e\n\u003cp\u003e\nSince getting started, this model has been embraced in various ways in the Go, Rust, Java, PHP, JavaScript, Ruby, and Haskell communities. And I’m sure others I haven’t yet heard of.\u003c/p\u003e\n\u003cp\u003e\nMost don’t offer LiveView’s declarative model. Instead developers are required to annotate how individual elements are updated and removed, leading to fragile applications, akin to client-side applications before the introduction of React and other declarative frameworks. Most also lack the optimizations LiveView developers get for free. Large payloads are sent on every event unless developers manually fine tune them.\u003c/p\u003e\n\u003cp\u003e\nReact itself liked the idea of putting React on the server so much, they shipped their own \u003ca href=\"https://react.dev/reference/rsc/server-components\"\u003eReact Server Components\u003c/a\u003e to tackle a cross section of similar goals with LiveView. In the case of RSC, pushing real-time events are left to external means.\u003c/p\u003e\n\u003cp\u003e\nReact, like most, chose different tradeoffs because \u003cem\u003ethey had no choice\u003c/em\u003e. The majority skip the stateful, bidirectional communication layer because most platforms are poorly suited for it. Elixir and the Erlang VM are truly what make this programming model shine. And we have only barely discussed our built-in globally distributed clustering and PubSub. There are truly extraordinary features built into the platform that are at your fingertips.\u003c/p\u003e\n\u003ch2\u003e\nTry it out\u003c/h2\u003e\n\u003cp\u003e\nNow is a great time to dive in and give LiveView a try! We have launched \u003ccode\u003enew.phoenixframework.org\u003c/code\u003e which lets you get up and running in seconds with Elixir and your first Phoenix project with a single command:\u003c/p\u003e\n\u003cp\u003e\nFor osx/linux:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ curl https://new.phoenixframework.org/myapp | sh\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nFor Windows PowerShell:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt; curl.exe -fsSO https://new.phoenixframework.org/app.bat; .\\app.bat\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nFor existing applications, check the \u003ca href=\"https://github.com/phoenixframework/phoenix_live_view/blob/main/CHANGELOG.md\"\u003echangelog\u003c/a\u003e for breaking changes to bring your existing apps up to speed.\u003c/p\u003e\n\u003ch2\u003e\nWhat’s Next\u003c/h2\u003e\n\u003cp\u003e\nFollowing this release, we’ll be continuing efforts around collocated JavaScript hooks, enhancing Web Component integration, supporting navigation guards, and more as outlined in our issue tracker.\u003c/p\u003e\n\u003ch2\u003e\nSpecial Thanks\u003c/h2\u003e\n\u003cp\u003e\nArriving here wouldn’t have been possible without the help of the Phoenix team, especially Steffen Deusch, who has tackled countless LiveView issues over the last year.\u003c/p\u003e\n\u003cp\u003e\nHappy Hacking!\u003c/p\u003e\n\u003cp\u003e\n–Chris\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "20 min read",
  "publishedTime": null,
  "modifiedTime": null
}
