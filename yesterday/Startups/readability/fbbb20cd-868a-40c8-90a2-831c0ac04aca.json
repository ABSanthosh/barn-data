{
  "id": "fbbb20cd-868a-40c8-90a2-831c0ac04aca",
  "title": "TikZJax: Embedding LaTeX Drawings in HTML",
  "link": "https://tikzjax.com/",
  "description": "Article URL: https://tikzjax.com/ Comments URL: https://news.ycombinator.com/item?id=43746831 Points: 19 # Comments: 5",
  "author": "steventhedev",
  "published": "Sun, 20 Apr 2025 22:04:22 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 1508,
  "excerpt": "TikZJax converts script tags (containing TikZ code) into SVGs.",
  "siteName": "",
  "favicon": "",
  "text": "TikZJax converts script tags (containing TikZ code) into SVGs. See a live demo at https://tikzjax.com/. Example In the \u003chead\u003e of your HTML, include \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://tikzjax.com/v1/fonts.css\"\u003e \u003cscript src=\"https://tikzjax.com/v1/tikzjax.js\"\u003e\u003c/script\u003e Then in the \u003cbody\u003e, include TikZ code such as \u003cscript type=\"text/tikz\"\u003e \\begin{tikzpicture} \\draw (0,0) circle (1in); \\end{tikzpicture} \u003c/script\u003e Your TikZ will be compiled into SVGs; the \u003cscript\u003e element will be replaced with the corresponding SVG. For instance, the above code generates You can also use this for commutative diagrams. For example, this code \u003cscript type=\"text/tikz\"\u003e \\begin{tikzcd} A \\arrow[r, \"\\phi\"] \\arrow[d, red] \u0026 B \\arrow[d, \"\\psi\" red] \\\\ C \\arrow[r, red, \"\\eta\" blue] \u0026 |[blue, rotate=-15]| D \\end{tikzcd} \u003c/script\u003e will be rendered as How does this work? Using web2js, the Pascal source of tex is compiled to WebAssembly; the latex format is loaded (without all the hyphenation data), and \\documentclass[margin=0pt]{standalone} \\def\\pgfsysdriver{pgfsys-ximera.def} \\usepackage{tikz} is executed. Then core is dumped; the resulting core is compressed, and by reloading the dumped core in the browser, it is possible to very quickly get to a point where TikZ can be executed. By using an SVG driver for PGF along with dvi2html, the DVI output is converted to an SVG. To emphasize this: all of this happens in the browser.",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\n    \n\n    \u003cp\u003eTikZJax converts \u003ccode\u003escript\u003c/code\u003e tags (containing TikZ code) into SVGs.\u003c/p\u003e\n\n    \u003cp\u003eSee a live demo at \u003ca href=\"https://tikzjax.com/\"\u003ehttps://tikzjax.com/\u003c/a\u003e.\u003c/p\u003e\n\n    \u003ch2 id=\"example\"\u003eExample\u003c/h2\u003e\n\n    \u003cp\u003eIn the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e of your HTML, include \u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://tikzjax.com/v1/fonts.css\u0026#34;\u0026gt;\n\u0026lt;script src=\u0026#34;https://tikzjax.com/v1/tikzjax.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen in the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e, include TikZ code such as\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;script type=\u0026#34;text/tikz\u0026#34;\u0026gt;\n  \\begin{tikzpicture}\n    \\draw (0,0) circle (1in);\n  \\end{tikzpicture}\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYour TikZ will be compiled into SVGs; the \u003ccode\u003e\u0026lt;script\u0026gt;\u003c/code\u003e element will be\nreplaced with the corresponding SVG.  For instance, the above code generates\u003c/p\u003e  \n\n\n\n\u003cp\u003eYou can also use this for commutative diagrams.  For example, this code\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026lt;script type=\u0026#34;text/tikz\u0026#34;\u0026gt;\n  \\begin{tikzcd}\n    A \\arrow[r, \u0026#34;\\phi\u0026#34;] \\arrow[d, red]\n      \u0026amp; B \\arrow[d, \u0026#34;\\psi\u0026#34; red] \\\\\n    C \\arrow[r, red, \u0026#34;\\eta\u0026#34; blue]\n      \u0026amp; |[blue, rotate=-15]| D\n  \\end{tikzcd}\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ewill be rendered as\u003c/p\u003e\n\n\n\n\u003ch2 id=\"howdoesthiswork\"\u003eHow does this work?\u003c/h2\u003e\n\n\u003cp\u003eUsing \u003ca href=\"https://github.com/kisonecat/web2js\"\u003eweb2js\u003c/a\u003e, the Pascal source of \u003ccode\u003etex\u003c/code\u003e\nis compiled to WebAssembly; the latex format is loaded (without all the hyphenation data), and \u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\\documentclass[margin=0pt]{standalone}\n\\def\\pgfsysdriver{pgfsys-ximera.def}\n\\usepackage{tikz}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eis executed.  Then core is dumped; the resulting core is compressed, and by reloading the dumped core in the browser, it is possible to very quickly get to a point where TikZ can be executed.  By using an SVG driver for PGF along with \u003ca href=\"https://github.com/kisonecat/dvi2html\"\u003edvi2html\u003c/a\u003e, the DVI output is converted to an SVG.\u003c/p\u003e\n\n\u003cp\u003eTo emphasize this: \u003cb\u003eall of this happens in the browser.\u003c/b\u003e\u003c/p\u003e\n\n\n  \n\n\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": null,
  "modifiedTime": null
}
