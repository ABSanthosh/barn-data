{
  "id": "6dea586e-c7aa-4bc7-88a1-ab82b10f6fbe",
  "title": "ACCESS.bus: The Forgotten USB Competitor",
  "link": "https://tedium.co/2025/02/17/access-bus-i2c-usb-competitor-history/",
  "description": "Article URL: https://tedium.co/2025/02/17/access-bus-i2c-usb-competitor-history/ Comments URL: https://news.ycombinator.com/item?id=43236370 Points: 18 # Comments: 2",
  "author": "PaulHoule",
  "published": "Sun, 02 Mar 2025 23:21:52 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 13899,
  "excerpt": "A few years before USB took over the world of peripherals, another upstart standard aimed to do the same thing. And I’m not talking about FireWire.",
  "siteName": "Tedium: The Dull Side of the Internet.",
  "favicon": "https://tedium.co/content/favicons/apple-touch-icon.png",
  "text": "Today in Tedium: If you know your tech peripheral history, odds are, you know about the Universal Serial Bus like the back of your hand—in part because every device you own supports it. But you probably know a lot about numerous other ports. Thunderbolt? Obviously. FireWire? Sure, you owned a camera back in the day. Apple Desktop Bus? You got it. But what if I told you that, at the time USB and FireWire fought it out for serial supremacy, there was a completely different bus standard that hoped to become the one cable to rule them all—and unless you were into a very specific brand of computers, you probably didn’t know about it? Of course, you’d be surprised. Who wouldn’t? But that’s why I’m here. Today’s Tedium highlights ACCESS.bus, the would-be standard that wanted to be USB, but couldn’t stick the landing. — Ernie @ TediumToday’s GIF is of Stewart Cheifet holding an ACCESS.bus dongle. Honestly I’m shocked that all of our GIFs aren’t “Stewart Cheifet holds object.”The Digital Equipment DECStation 5000. DEC, not exactly working from a position of strength, helped bring this idea to life. (via Wikimedia Commons)ACCESS.bus: The forgotten attempt to give us a universal bus for all our serial portsYou can always tell how obscure something is when your search results come up almost completely empty. And when I search for ACCESS.bus, even surrounded by scare quotes, Google brings up a bunch of pictures of actual buses targeted for accessibility.Put simply, if you’re looking for ACCESS.bus, you’re in for a deep dive unless you immediately go to Google Books. How obscure are we talking here? Unlike nearly every other technology thing on the internet, there are no modern videos about the protocol, just a reference in a 31-year-old episode of Computer Chronicles. And doing a search on Hacker News, a traditional hotbed of all things technical, brought just ONE result referencing it in that site’s 18-year history. (If this post ends up there, as my posts sometimes do, there will now be two.)That spare result led to a Twitter thread by Foone Turing, the digital researcher and technology collector whose tweets became one of the best parts of that platform in the late 2010s. Foone’s tweets are locked, just like mine, so if you’re not already following them, I unfortunately cannot share their thread. But as a follower of hers, I still have access, so I’ll share the gist in a bit. (They’re on Mastodon these days, still worth a follow.)Fun fact about ADB: It essentially uses the same port as S-Video. (Grant Hutchinson/Flickr)Anyway, now that we’ve established the obscurity of ACCESS.bus, let’s explain what it was trying to do. In the mid-1980s, Apple had firmed up its own serial system, called Apple Desktop Bus, which was developed by no less an Apple employee than Steve Wozniak. It was a huge advantage for the company at the time—while not as fast as USB or Firewire, it was highly versatile thanks to its ability to daisy-chain multiple devices to a single port. (It could support 16 in total, if you were wondering.)The Atari SIO, considered a direct ancestor of USB. (via Wikimedia Commons)It wasn’t the only system of its kind—the Atari SIO interface, which emerged in 1979 with the Atari 400 and 800, worked similarly, and that bus’ developer, Joe Decuir, later played a key role in developing USB. But before USB was a glimmer in anyone’s eye, Apple’s ADB connector was proving a source of inspiration for the next generation of serial ports.It likely also inspired port developers in another way. See, ADB largely only worked with Apple hardware, along with some of Apple’s descendants, like NeXT. And meanwhile, on the IBM side of things, you were either stuck with the complicated non-plug-and-play state of affairs of D-Bus-style serial ports, or you were looking longingly at the ADB-like ports IBM added to its PS/2 line. They looked similar, but weren’t quite as useful.If you were a manufacturer, this state of affairs kind of sucked. It meant that if you wanted to sell a mouse, that mouse would not just work on every desired platform. The device had to be built to work for that specific platform, with its own dedicated driver software. That increased development time, complicated manufacturing, and created consumer confusion. (Picking up a peripheral for your PC, only to realize you accidentally grabbed the Mac version? A real pain.)But it was a problem that the industry had solved previously, in the early 1980s, with I²C. As buses go, the underlying approach was dead simple, essentially creating a line of communication between components and the primary machine, as explained in the initial patent filing, submitted in 1981:It is an object of the invention to enable a single two-wire line to be used for the interconnection of an unlimited number of stations. Reliable synchronization is obtained and simple signalling of the beginning and the end of a communication operation is possible. The stations are interconnected by a clock bus and a data bus. Each of the buses operates to form a wired logic function between the stations. Thus, each of the buses includes means (for example a pull-up resistor) which urges the bus toward a second voltage state in the absence of a forcing input from one of the stations.Simply put, I²C’s reason for being is to provide the most minimalist synchronous communication mechanism possible—a line for tracking timing, a line for tracking data, and (when necessary) a power source. And it’s a standard many of the era computers already supported. Many computers today support I²C components. Naturally, it was a great choice to build a serial bus on.It just needed the right advocate, and I²C’s was Digital Equipment Corporation (DEC). The former mainframe giant did not survive the ’90s unscathed, but it had a few success stories during the period, including AltaVista and the DEC Alpha.It was not a company whose work in PCs really shaped the computing industry—rather, the computing industry worked around them—but it wasn’t for lack of trying.And ACCESS.bus, which effectively expanded the I²C protocol to external peripherals, was one of those attempts. A 1991 article from the Digital Technical Journal explained the mission of the ACCESS.bus project:ACCESS.bus provides a simple, uniform way to link a desktop computer to a number of low-speed I/O devices such as a keyboard, a mouse, a tablet, or a three-dimensional (3-D) tracker. Designed from the beginning as an open desktop bus, ACCESS.bus facilitates cooperative solutions using equipment from different vendors.Rather than building some complex new protocol to do this, DEC’s engineers piggybacked on Philips’ existing (and widely supported) I²C standard. (Philips and DEC ended up working together on the final result.)Leaning into I²C had some advantages, notably the fact that it was easy to implement across devices and platforms. And for a while, it looked like the future of computing would flow through ACCESS.bus’ daisy chain.Some struggled to hide their excitement. For example, Robin Stacy, an editor and technology columnist at The Macon Telegraph in Macon, GA, wrote multiple columns about emerging serial bus standards.(Side note: Robin appears to have had one of the best technology columns around, given that it covered emerging standards that most PC magazines were barely covering at the time. I was fascinated enough that I looked him up in hopes of saying hello. Unfortunately, he died in 2023, but what a cool dude.)Stacy seemed particularly interested in what DEC was doing, which meant he was early to the ACCESS.bus trend. In a 1994 column, he noted that the technology benefited from the simplicity and low cost of the I²C standard.“The new standard could also be implemented pretty cheaply. To add the small jacks and simple controller chip to peripherals shouldn’t add more than a dollar to the cost,” he wrote. “ACCESS.bus cables require only four wires, so they shouldn’t be expensive, and the controller at the PC end should be as cheap as today’s serial cards.”So, why didn’t it take off? Well, technically, it did—just not the way DEC probably expected.The VFX1 virtual reality system, one of the few in-the-wild examples of a device that supported ACCESS.bus in its intended form. Its parlor trick was that, unlike other VR systems of the time, it only needed one wire to plug into your computer. (Digibarn Computer Museum)ACCESS.bus still sort of lives, but not anywhere you might expectAs you might have noticed, we do not live in a world where we are daisy-chaining computers through an ACCESS.bus interface, and both DEC and Philips Semiconductor each got acquired out of existence.But wait. Has ACCESS.bus disappeared off the face of the planet, another failed standard on top of all the others? Technically, yes: USB and FireWire each upstaged the standard from a speed and manufacturer buy-in standpoint, and USB gradually upstaged FireWire.The downside of I²C’s simplicity is that it is a bad option for delivering lots of data—and during the heyday of ACCESS.bus, it topped out at a mere 100 kilobits per second, roughly the speed of ADB and significantly slower than even the initial version of USB. Had ACCESS.bus taken off, it’s likely the flash drive might not have succeeded in the way it did.But there was a specific feature of ACCESS.bus that appealed to one specific type of computer hardware manufacturer: monitor-makers.See, before the mid-1990s, most monitors functioned as dumb tubes that didn’t talk back to the computer. There was no on-screen display, nor any way for the computer to control the monitor’s brightness and contrast. But it turned out that I²C, delivered via ACCESS.bus, was an excellent medium for this.NEC‘s MultiSync monitors were probably the most likely place the average consumer might run into this obscure port. (Computer Graphics World/via Internet Archive)And NEC, a major producer of monitors at the time, had gone all-in on ACCESS.bus. The company’s MultiSync monitor series, dating to 1994/1995, promoted the idea of connecting components through the monitor, rather than the computer. (If, of course, your computer already had an ACCESS.bus adapter.)They weren’t alone, but there wasn’t that much else out there. However, at least one device gracefully proved the use case: the Forte VFX1 Headgear, an early virtual reality system dating to the mid-1990s.Mostly forgotten today, except by hardcore Descent fans, the device was an important bridge between the VR we had then and what we’re seeing now from Meta and Apple.A promotional video from the time highlights how competing VR systems would plug into your average beige box—with a seemingly endless number of cables. However, in the case of the VFX1, all the end user had to do was plug the VR device’s VGA cable into their desktop, then plug their controller into the VR device. It was a use case that obviously made sense, even if VR itself didn’t at the time.(Of course, this created problems later on, as ACCESS.bus wasn’t directly supported in modern computers, requiring a lot of hacking to resolve, but in 1995, I’m sure it was awesome.)Soon enough, USB and FireWire were making the far-slower ACCESS.bus irrelevant, and it became clear that maybe slapping on a phone jack-like connector on monitors wasn’t a use case manufacturers or consumers cared about. (The growing interest in laptops would have made it irrelevant anyway.) But the ability to communicate through the same line we were shipping video through, utilizing an existing standard in a new way? That made sense!That was the thinking that led the Video Electronics Standards Association (VESA) to co-opt the work for ACCESS.bus into the Display Data Channel (DDC). That standard allowed monitors to talk back to the PC and the computer to directly communicate with the display.And it’s that standard that Foone Turing pointed out on Twitter in that locked-down 2019 thread: We have long left ACCESS.bus, our would-be contender for the USB throne, into the dustbin of history, but DDC is still at the root of how both HDMI and DisplayPort communicate with our computers.“So that’s the interesting thing about the DDC2 interface still supported over HDMI/DVI today: it was, in part, originally designed to carry ACCESS.bus connections, a failed universal peripheral bus,” she wrote.If you have a monitor plugged into your computer, you are technically using ACCESS.bus right now. Good luck finding any other peripherals that support it, though.It’s easy to see why ACCESS.bus didn’t take off with the benefit of retrospect. It was fast enough for input devices, but kind of slow for anything else, because I²C was built for small data transfers, not big ones. (That’s why it makes sense for video—it’s a thin data line that doesn’t compete with the massive one that goes from your computer to your monitor.)On top of that, the primary technology partner pushing it, DEC, had waned in influence compared to players like Intel, Apple, and Microsoft, who threw their weight behind the competing protocols. By the end of the ’90s, DEC was effectively dead as a corporate brand, despite helping kick off this specific tech conversation in the first place.ACCESS.bus was a bet that we would still be in a world where we needed both serial and parallel ports, but the reality was that we were eventually going to try to unify those wires into one. USB and FireWire each were built with this use case in mind. Never say never, but it’s unlikely ACCESS.bus would have met our need for speed like USB has.Those developers at DEC saw where the tides were headed at least a few years before their competitors. But DEC ultimately wasn’t strong enough to steer the ship.Oddly enough, a few display-makers were.--Find this one an interesting read? Share it with a pal! And I hope, like me, you think about failed USB competitors often.",
  "image": "https://v1.screenshot.11ty.dev/https%3A%2F%2Ftedium.co%2Fog-images%2F2025%2F02%2F17%2Faccess-bus-i2c-usb-competitor-history%2F/opengraph/?v=1740849580",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eToday in Tedium:\u003c/strong\u003e If you know your tech peripheral history, odds are, you know about the Universal Serial Bus like the back of your hand—in part because every device you own supports it. But you probably know a lot about numerous other ports. Thunderbolt? Obviously. FireWire? Sure, you owned a camera back in the day. Apple Desktop Bus? You got it. But what if I told you that, at the time USB and FireWire fought it out for serial supremacy, there was a completely different bus standard that hoped to become the one cable to rule them all—and unless you were into a very specific brand of computers, you probably didn’t know about it? Of course, you’d be surprised. Who wouldn’t? But that’s why I’m here. Today’s Tedium highlights ACCESS.bus, the would-be standard that wanted to be USB, but couldn’t stick the landing. \u003cem\u003e— Ernie @ Tedium\u003c/em\u003e\u003c/p\u003e\u003cp\u003e\u003cem\u003eToday’s GIF is of Stewart Cheifet holding an ACCESS.bus dongle. Honestly I’m shocked that all of our GIFs aren’t “Stewart Cheifet holds object.”\u003c/em\u003e\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cimg src=\"https://proxy.tedium.co/N07Pz5KshoHuMVi885AblXieRO0=/1024x1156/filters:quality(80)/uploads/decstation.jpg\" width=\"1024\" height=\"1156\" loading=\"lazy\" alt=\"Decstation\"/\u003e\u003cfigcaption\u003eThe Digital Equipment DECStation 5000. DEC, not exactly working from a position of strength, helped bring this idea to life. (via \u003ca href=\"https://commons.wikimedia.org/wiki/File:Ds5000-01.jpg\"\u003eWikimedia Commons\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3\u003eACCESS.bus: The forgotten attempt to give us a universal bus for all our serial ports\u003c/h3\u003e\u003cp\u003eYou can always tell how obscure something is when your search results come up almost completely empty. And when I search for ACCESS.bus, even surrounded by scare quotes, Google brings up a bunch of pictures of actual buses targeted for accessibility.\u003c/p\u003e\u003cp\u003ePut simply, if you’re looking for ACCESS.bus, you’re in for a deep dive unless you immediately go to Google Books.\u003c/p\u003e\n\n\n\u003cp\u003eHow obscure are we talking here? Unlike nearly every other technology thing on the internet, there are no modern videos about the protocol, just a reference in \u003ca href=\"https://www.youtube.com/watch?v=vj3JQDLZ3Z0\u0026amp;t=1108s\"\u003ea 31-year-old episode of Computer Chronicles\u003c/a\u003e. And doing a search on Hacker News, a traditional hotbed of all things technical, brought just ONE result referencing it in that site’s 18-year history. (If this post ends up there, as my posts sometimes do, there will now be two.)\u003c/p\u003e\u003cp\u003eThat spare result led to a Twitter thread by \u003ca href=\"https://wiki.foone.org/w/Main_Page\"\u003eFoone Turing\u003c/a\u003e, the digital researcher and technology collector whose tweets became one of the best parts of that platform in the late 2010s. Foone’s tweets are locked, just like mine, so if you’re not already following them, I unfortunately cannot share their thread. But as a follower of hers, I still have access, so I’ll share the gist in a bit. (\u003ca href=\"https://digipres.club/@foone\"\u003eThey’re on Mastodon these days\u003c/a\u003e, still worth a follow.)\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://proxy.tedium.co/OXH-3CucSpSVv4zVHVgJyaBkiMI=/799x533/filters:quality(80)/uploads/adb.jpg\" width=\"799\" height=\"533\" loading=\"lazy\" alt=\"Adb\"/\u003e\u003cfigcaption\u003eFun fact about ADB: It essentially uses the same port as S-Video. (\u003ca href=\"https://www.flickr.com/photos/splorp/8581124557/\"\u003eGrant Hutchinson/Flickr\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAnyway, now that we’ve established the obscurity of ACCESS.bus, let’s explain what it was trying to do. In the mid-1980s, Apple had firmed up its own serial system, \u003ca href=\"https://deskthority.net/wiki/Apple_Desktop_Bus\"\u003ecalled Apple Desktop Bus\u003c/a\u003e, which was developed by no less an Apple employee than Steve Wozniak. It was a huge advantage for the company at the time—while not as fast as USB or Firewire, it was highly versatile thanks to its ability to daisy-chain multiple devices to a single port. (It could support 16 in total, if you were wondering.)\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://proxy.tedium.co/GSCbI-h34bZYPBePh0RHboyjxoU=/768x768/filters:quality(80)/uploads/atarisio.jpg\" width=\"768\" height=\"768\" loading=\"lazy\" alt=\"Atarisio\"/\u003e\u003cfigcaption\u003eThe Atari SIO, considered a direct ancestor of USB. (via \u003ca href=\"https://commons.wikimedia.org/wiki/File:Atari_SIO_connector_from_XC12_data_recorder.jpg\"\u003eWikimedia Commons\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eIt wasn’t the only system of its kind—\u003ca href=\"https://www.digitpress.com/library/interviews/interview_joe_decuir.html\"\u003ethe Atari SIO interface\u003c/a\u003e, which emerged in 1979 with the Atari 400 and 800, worked similarly, and that bus’ developer, Joe Decuir, later played a key role in developing USB. But before USB was a glimmer in anyone’s eye, Apple’s ADB connector was proving a source of inspiration for the next generation of serial ports.\u003c/p\u003e\u003cp\u003eIt likely also inspired port developers in another way. See, ADB largely only worked with Apple hardware, along with some of Apple’s descendants, like NeXT. And meanwhile, on the IBM side of things, you were either stuck with the complicated non-plug-and-play state of affairs of D-Bus-style \u003ca href=\"https://tedium.co/2022/08/24/atari-2600-joystick-port-history/\"\u003eserial ports\u003c/a\u003e, or you were looking longingly at the ADB-like ports IBM added to its PS/2 line. They looked similar, but weren’t quite as useful.\u003c/p\u003e\u003cp\u003eIf you were a manufacturer, this state of affairs kind of sucked. It meant that if you wanted to sell a mouse, that mouse would not just work on every desired platform. The device had to be built to work for that specific platform, with its own dedicated driver software. That increased development time, complicated manufacturing, and created consumer confusion. (Picking up a peripheral for your PC, only to realize you accidentally grabbed the Mac version? A real pain.)\u003c/p\u003e\u003cp\u003eBut it was a problem that the industry had solved previously, in the early 1980s, with I²C. As buses go, the underlying approach was dead simple, essentially creating a line of communication between components and the primary machine, as explained in the initial patent filing, \u003ca href=\"https://patents.google.com/patent/US4689740A/en\"\u003esubmitted in 1981\u003c/a\u003e:\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eIt is an object of the invention to enable a single two-wire line to be used for the interconnection of an unlimited number of stations. Reliable synchronization is obtained and simple signalling of the beginning and the end of a communication operation is possible. The stations are interconnected by a clock bus and a data bus. Each of the buses operates to form a wired logic function between the stations. Thus, each of the buses includes means (for example a pull-up resistor) which urges the bus toward a second voltage state in the absence of a forcing input from one of the stations.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eSimply put, I²C’s reason for being is to provide the most minimalist synchronous communication mechanism possible—a line for tracking timing, a line for tracking data, and (when necessary) a power source. And it’s a standard many of the era computers already supported. Many computers today support I²C components. Naturally, it was a great choice to build a serial bus on.\u003c/p\u003e\u003cp\u003eIt just needed the right advocate, and I²C’s was Digital Equipment Corporation (DEC). The former mainframe giant \u003ca href=\"https://tedium.co/2020/12/15/altavista-history-digital-dot-com-domain-name/\"\u003edid not survive the ’90s unscathed\u003c/a\u003e, but it had a few success stories during the period, including AltaVista and the DEC Alpha.\u003c/p\u003e\u003cp\u003eIt was not a company whose work in PCs really shaped the computing industry—rather, the computing industry worked around them—but it wasn’t for lack of trying.\u003c/p\u003e\u003cp\u003eAnd ACCESS.bus, which effectively expanded the I²C protocol to external peripherals, was one of those attempts. \u003ca href=\"https://www.mrynet.com/FTP/operatingsystems/DEC/www.hpl.hp.com/hpjournal/dtj/vol3num4/vol3num4art3.pdf\"\u003eA 1991 article from the \u003cem\u003eDigital Technical Journal\u003c/em\u003e\u003c/a\u003e explained the mission of the ACCESS.bus project:\u003c/p\u003e\u003cblockquote\u003e\u003cp\u003eACCESS.bus provides a simple, uniform way to link a desktop computer to a number of low-speed I/O devices such as a keyboard, a mouse, a tablet, or a three-dimensional (3-D) tracker. Designed from the beginning as an open desktop bus, ACCESS.bus facilitates cooperative solutions using equipment from different vendors.\u003c/p\u003e\u003c/blockquote\u003e\u003cp\u003eRather than building some complex new protocol to do this, DEC’s engineers piggybacked on Philips’ existing (and widely supported) I²C standard. (Philips and DEC ended up working together on the final result.)\u003c/p\u003e\u003cp\u003eLeaning into I²C had some advantages, notably the fact that it was easy to implement across devices and platforms. And for a while, it looked like the future of computing would flow through ACCESS.bus’ daisy chain.\u003c/p\u003e\u003cp\u003eSome struggled to hide their excitement. For example, Robin Stacy, an editor and technology columnist at \u003cem\u003eThe Macon Telegraph\u003c/em\u003e in Macon, GA, wrote multiple columns about emerging serial bus standards.\u003c/p\u003e\u003cp\u003e(Side note: Robin appears to have had one of the best technology columns around, given that it covered emerging standards that most PC magazines were barely covering at the time. I was fascinated enough that I looked him up in hopes of saying hello. Unfortunately, \u003ca href=\"https://bainbridgega.com/2023/12/robin-george-stacy/\"\u003ehe died in 2023\u003c/a\u003e, but what a cool dude.)\u003c/p\u003e\u003cp\u003eStacy seemed particularly interested in what DEC was doing, which meant he was early to the ACCESS.bus trend. \u003ca href=\"https://www.newspapers.com/article/the-macon-telegraph-accessbus-standard/165913251/\"\u003eIn a 1994 column\u003c/a\u003e, he noted that the technology benefited from the simplicity and low cost of the I²C standard.\u003c/p\u003e\u003cp\u003e“The new standard could also be implemented pretty cheaply. To add the small jacks and simple controller chip to peripherals shouldn’t add more than a dollar to the cost,” he wrote. “ACCESS.bus cables require only four wires, so they shouldn’t be expensive, and the controller at the PC end should be as cheap as today’s serial cards.”\u003c/p\u003e\u003cp\u003eSo, why didn’t it take off? Well, technically, it did—just not the way DEC probably expected.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cfigure\u003e\u003cimg src=\"https://proxy.tedium.co/jx3hTbc0xhkjPKYzQqapTbNiVmo=/1000x683/filters:quality(80)/uploads/vfx1.jpg\" width=\"1000\" height=\"683\" loading=\"lazy\" alt=\"Vfx1\"/\u003e\u003cfigcaption\u003eThe VFX1 virtual reality system, one of the few in-the-wild examples of a device that supported ACCESS.bus in its intended form. Its parlor trick was that, unlike other VR systems of the time, it only needed one wire to plug into your computer. (\u003ca href=\"https://www.digibarn.com/collections/devices/vfx1-headgear-vr-system/index.html\"\u003eDigibarn Computer Museum\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003ch3\u003eACCESS.bus still sort of lives, but not anywhere you might expect\u003c/h3\u003e\u003cp\u003eAs you might have noticed, we do not live in a world where we are daisy-chaining computers through an ACCESS.bus interface, and both DEC and Philips Semiconductor each got acquired out of existence.\u003c/p\u003e\u003cp\u003eBut wait. Has ACCESS.bus disappeared off the face of the planet, another failed standard on top of all the others? Technically, yes: USB and FireWire each upstaged the standard from a speed and manufacturer buy-in standpoint, and USB gradually upstaged FireWire.\u003c/p\u003e\u003cp\u003eThe downside of I²C’s simplicity is that it is a bad option for delivering lots of data—and during the heyday of ACCESS.bus, it topped out at a mere 100 kilobits per second, roughly the speed of ADB and significantly slower than even the initial version of USB. Had ACCESS.bus taken off, it’s likely the flash drive might not have succeeded in the way it did.\u003c/p\u003e\u003cp\u003eBut there was a specific feature of ACCESS.bus that appealed to one specific type of computer hardware manufacturer: monitor-makers.\u003c/p\u003e\u003cp\u003eSee, before the mid-1990s, most monitors functioned as dumb tubes that didn’t talk back to the computer. There was no on-screen display, nor any way for the computer to control the monitor’s brightness and contrast. But it turned out that I²C, delivered via ACCESS.bus, was an excellent medium for this.\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://proxy.tedium.co/3UmdPz6AqPDQfGIMTa4ASKbmMnA=/1000x680/filters:quality(80)/uploads/nec_monitor_ad.jpg\" width=\"1000\" height=\"680\" loading=\"lazy\" alt=\"Nec monitor ad\"/\u003e\u003cfigcaption\u003eNEC‘s MultiSync monitors were probably the most likely place the average consumer might run into this obscure port. (\u003ca href=\"https://archive.org/details/computer-graphics-world-january-1995/page/n1/mode/2up\"\u003eComputer Graphics World/via Internet Archive\u003c/a\u003e)\u003c/figcaption\u003e\u003c/figure\u003e\u003cp\u003eAnd NEC, a major producer of monitors at the time, had gone all-in on ACCESS.bus. \u003ca href=\"https://archive.org/details/computer-graphics-world-january-1995/page/n1/mode/2up\"\u003eThe company’s MultiSync monitor series\u003c/a\u003e, dating to 1994/1995, promoted the idea of connecting components through the monitor, rather than the computer. (If, of course, your computer already had an ACCESS.bus adapter.)\u003c/p\u003e\u003cp\u003eThey weren’t alone, but there wasn’t that much else out there. However, at least one device gracefully proved the use case: the Forte VFX1 Headgear, an early virtual reality system dating to the mid-1990s.\u003c/p\u003e\u003cp\u003eMostly forgotten today, except by hardcore \u003cem\u003eDescent\u003c/em\u003e fans, the device was an important bridge between the VR we had then and what we’re seeing now from Meta and Apple.\u003c/p\u003e\u003cp\u003eA \u003ca href=\"https://www.youtube.com/watch?v=y44pPRydc5s\"\u003epromotional video\u003c/a\u003e from the time highlights how competing VR systems would plug into your average beige box—with a seemingly endless number of cables. However, in the case of the VFX1, all the end user had to do was plug the VR device’s VGA cable into their desktop, then plug their controller into the VR device. It was a use case that obviously made sense, even if VR itself didn’t at the time.\u003c/p\u003e\u003cp\u003e(Of course, this created problems later on, as ACCESS.bus wasn’t directly supported in modern computers, \u003ca href=\"https://hackaday.com/2012/09/20/vfx1-virtual-reality-headset-linkbox/\"\u003erequiring a lot of hacking\u003c/a\u003e to resolve, but in 1995, I’m sure it was awesome.)\u003c/p\u003e\u003cp\u003eSoon enough, USB and FireWire were making the far-slower ACCESS.bus irrelevant, and it became clear that maybe slapping on a phone jack-like connector on monitors wasn’t a use case manufacturers or consumers cared about. (The growing interest in laptops would have made it irrelevant anyway.) But the ability to communicate through the same line we were shipping video through, utilizing an existing standard in a new way? That made sense!\u003c/p\u003e\u003cp\u003eThat was the thinking that led the Video Electronics Standards Association (VESA) to co-opt the work for ACCESS.bus into the \u003ca href=\"https://glenwing.github.io/docs/VESA-DDCCI-1.1.pdf\"\u003eDisplay Data Channel\u003c/a\u003e (DDC). That standard allowed monitors to talk back to the PC and the computer to directly communicate with the display.\u003c/p\u003e\u003cp\u003eAnd it’s that standard that Foone Turing pointed out on Twitter in that locked-down 2019 thread: We have long left ACCESS.bus, our would-be contender for the USB throne, into the dustbin of history, but DDC is still at the root of how both HDMI and DisplayPort communicate with our computers.\u003c/p\u003e\u003cp\u003e“So that’s the interesting thing about the DDC2 interface still supported over HDMI/DVI today: it was, in part, originally designed to carry ACCESS.bus connections, a failed universal peripheral bus,” she wrote.\u003c/p\u003e\u003cp\u003eIf you have a monitor plugged into your computer, you are technically using ACCESS.bus right now. Good luck finding any other peripherals that support it, though.\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003e\u003cp\u003e\u003cstrong\u003eIt’s easy to see why ACCESS.bus didn’t take off\u003c/strong\u003e with the benefit of retrospect. It was fast enough for input devices, but kind of slow for anything else, because I²C was built for small data transfers, not big ones. (That’s why it makes sense for video—it’s a thin data line that doesn’t compete with the massive one that goes from your computer to your monitor.)\u003c/p\u003e\u003cp\u003eOn top of that, the primary technology partner pushing it, DEC, had waned in influence compared to players like Intel, Apple, and Microsoft, \u003ca href=\"https://books.google.com/books?id=yYDbUAjvDu4C\u0026amp;pg=PA158#v=onepage\u0026amp;q\u0026amp;f=false\"\u003ewho threw their weight behind the competing protocols\u003c/a\u003e. By the end of the ’90s, DEC was effectively dead as a corporate brand, despite helping kick off this specific tech conversation in the first place.\u003c/p\u003e\u003cp\u003eACCESS.bus was a bet that we would still be in a world where we needed both serial and parallel ports, but the reality was that we were eventually going to try to unify those wires into one. USB and FireWire each were built with this use case in mind. Never say never, but it’s unlikely ACCESS.bus would have met our need for speed like USB has.\u003c/p\u003e\u003cp\u003eThose developers at DEC saw where the tides were headed at least a few years before their competitors. But DEC ultimately wasn’t strong enough to steer the ship.\u003c/p\u003e\u003cp\u003eOddly enough, a few display-makers were.\u003c/p\u003e\u003cp\u003e--\u003c/p\u003e\u003cp\u003eFind this one an interesting read? \u003ca href=\"https://tedium.co/2025/02/17/access-bus-i2c-usb-competitor-history/\"\u003eShare it with a pal\u003c/a\u003e! And I hope, like me, you think about failed USB competitors often.\u003c/p\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "15 min read",
  "publishedTime": null,
  "modifiedTime": null
}
