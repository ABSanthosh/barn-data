{
  "id": "7f7bfdec-9e14-4200-a15c-2172b44e3516",
  "title": "Self-Hosting Moose with Docker Compose, Redis, Temporal, Redpanda and ClickHouse",
  "link": "https://docs.fiveonefour.com/moose/deploying/self-hosting/deploying-with-docker-compose",
  "description": "Article URL: https://docs.fiveonefour.com/moose/deploying/self-hosting/deploying-with-docker-compose Comments URL: https://news.ycombinator.com/item?id=44035793 Points: 18 # Comments: 4",
  "author": "Callicles",
  "published": "Mon, 19 May 2025 22:53:17 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 7116,
  "excerpt": "Documentation for Moose and Aurora by 514 Labs",
  "siteName": "",
  "favicon": "",
  "text": "Deploying with Docker Compose Deploying a Moose application with all its dependencies can be challenging and time-consuming. You need to properly configure multiple services, ensure they communicate with each other, and manage their lifecycle. Docker Compose solves this problem by allowing you to deploy your entire stack with a single command. This guide shows you how to set up a production-ready Moose environment on a single server using Docker Compose, with proper security, monitoring, and maintenance practices. Warning:This guide describes a single-server deployment. For high availability (HA) deployments, you’ll need to: Deploy services across multiple servers Configure service replication and redundancy Set up load balancing Implement proper failover mechanisms We are also offering an HA managed deployment option for Moose called Boreal. Prerequisites Before you begin, you’ll need: Ubuntu 24 or above (for this guide) Docker and Docker Compose Access to a server with at least 8GB RAM and 4 CPU cores The Moose stack consists of: Your Moose Application Clickhouse (required) Redis (required) Redpanda (optional for event streaming) Temporal (optional for workflow orchestration) Setting Up a Production Server Installing Required Software First, install Docker on your Ubuntu server: Next, install Node.js or Python depending on your Moose application: Configure Docker Log Size Limits To prevent Docker logs from filling up your disk space, configure log rotation: Add the following configuration: Restart Docker to apply the changes: Enable Docker Non-Root Access To run Docker commands without sudo: Setting Up GitHub Actions Runner (Optional) If you want to set up CI/CD automation, you can install a GitHub Actions runner: Navigate to your GitHub repository Go to Settings \u003e Actions \u003e Runners Click “New self-hosted runner” Select Linux and follow the instructions shown To configure the runner as a service (to run automatically): Setting up a Foo Bar Moose Application (Optional) If you already have a Moose application, you can skip this section. You should copy the moose project to your server and then build the application with the flag and get the built image on the server. Install Moose CLI Create a new Moose Application Please follow the initialization instructions for your language. or Build the application on AMD64 Build the application on ARM64 Confirm the image was built Preparing for Deployment Create Environment Configuration First, create a file called in your project directory to specify component versions: Add the following content to the file: Additionally, create a file for your Moose application-specific secrets and configuration: Add your application-specific environment variables: Deploying with Docker Compose Create a file called in the same directory: Add the following content to the file: At this point, don’t start the services yet. First, we need to configure the individual services for production use as described in the following sections. Configuring Services for Production Configuring Clickhouse Securely (Required) For production Clickhouse deployment, we’ll use environment variables to configure users and access control (as recommended in the official Docker image documentation): First, start the Clickhouse container: After Clickhouse has started, connect to create additional users: To exit the Clickhouse client, type and press Enter. Update your Moose environment variables to use the new moose user: Remove the following environement variables from the clickhouse service in the docker-compose.yml file: For additional security in production, consider using Docker secrets for passwords. Restart the Clickhouse container to apply the changes: Verify that the new configuration works by connecting with the newly created user: If you can connect successfully and run commands with the new user, your Clickhouse configuration is working properly. Securing Redpanda (Optional) For production, it’s recommended to restrict external access to Redpanda: Modify your Docker Compose file to remove external access: Use only internal network access for production If needed, use a reverse proxy with authentication for external access For this simple deployment, we’ll keep Redpanda closed to the external world with no authentication required, as it’s only accessible from within the Docker network. Configuring Temporal (Optional) If your Moose application uses Temporal for workflow orchestration, the configuration above includes all necessary services based on the official Temporal Docker Compose examples. If you’re not using Temporal, simply remove the Temporal-related services (postgresql, temporal, temporal-ui) and environment variables from the docker-compose.yml file. Temporal Deployment Process: From Setup to Production Deploying Temporal involves a two-phase process: initial setup followed by production operation. Here are step-by-step instructions for each phase: Phase 1: Initial Setup Start the PostgreSQL database: Wait for PostgreSQL to be healthy (check the status): Look for in the output before proceeding. Start Temporal with auto-setup: During this phase, Temporal’s auto-setup will: Create the necessary PostgreSQL databases Initialize the schema tables Register the default namespace (moose-workflows) Verify Temporal server is running: Start the Admin Tools and UI: Create the namespace manually: Verify that the namespace was created: You should see details about the namespace including its retention policy. Phase 2: Transition to Production After successful initialization, modify your configuration for production use: Stop Temporal services: Edit your docker-compose.yml file to: Change image from to Set Example change: Restart services with production settings: Verify services are running with new configuration: Starting and Managing the Service Starting the Services Start all services with Docker Compose: Setting Up Systemd Service for Docker Compose For production, create a systemd service to ensure Docker Compose starts automatically on system boot: Create a systemd service file: Add the following configuration (adjust paths as needed): Enable and start the service: Deployment Workflow You get a smooth deployment process with these options: Automated Deployment with CI/CD Set up a CI/CD pipeline using GitHub Actions (if runner is configured) When code is pushed to your repository: The GitHub Actions runner builds your Moose application Updates the Docker image Deploys using Docker Compose Manual Deployment Alternatively, for manual deployment: Copy the latest version of the code to the machine Run Update the Docker image tag in your docker-compose.yml Restart the stack with Monitoring and Maintenance No more worrying about unexpected outages or performance issues. Set up proper monitoring: Set up log monitoring with a tool like Loki Regularly backup your volumes (especially Clickhouse data) Monitor disk space usage Set up alerting for service health",
  "image": "https://docs.fiveonefour.com/og-image-moose.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\u003carticle\u003e\u003cmain\u003e\u003ch3\u003eDeploying with Docker Compose\u003c/h3\u003e\n\u003cp\u003eDeploying a Moose application with all its dependencies can be challenging and time-consuming. You need to properly configure multiple services,\nensure they communicate with each other, and manage their lifecycle.\u003c/p\u003e\n\u003cp\u003eDocker Compose solves this problem by allowing you to deploy your entire stack with a single command.\u003c/p\u003e\n\u003cp\u003eThis guide shows you how to set up a production-ready Moose environment on a single server using Docker Compose, with proper security,\nmonitoring, and maintenance practices.\u003c/p\u003e\n\u003cdiv\u003e\u003cp\u003eWarning:\u003c/p\u003e\u003cp\u003eThis guide describes a single-server deployment. For high availability (HA) deployments, you’ll need to:\u003c/p\u003e\u003cul\u003e\n\u003cli\u003eDeploy services across multiple servers\u003c/li\u003e\n\u003cli\u003eConfigure service replication and redundancy\u003c/li\u003e\n\u003cli\u003eSet up load balancing\u003c/li\u003e\n\u003cli\u003eImplement proper failover mechanisms\u003c/li\u003e\n\u003c/ul\u003e\u003c/div\u003e\n\u003cp\u003eWe are also offering an HA managed deployment option for Moose called \u003ca href=\"https://fiveonefour.com/boreal\"\u003eBoreal\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"prerequisites\"\u003ePrerequisites\u003c/h3\u003e\n\u003cp\u003eBefore you begin, you’ll need:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUbuntu 24 or above (for this guide)\u003c/li\u003e\n\u003cli\u003eDocker and Docker Compose\u003c/li\u003e\n\u003cli\u003eAccess to a server with at least 8GB RAM and 4 CPU cores\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe Moose stack consists of:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYour Moose Application\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://clickhouse.com\"\u003eClickhouse\u003c/a\u003e (required)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://redis.io\"\u003eRedis\u003c/a\u003e (required)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://redpanda.com\"\u003eRedpanda\u003c/a\u003e (optional for event streaming)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://temporal.io\"\u003eTemporal\u003c/a\u003e (optional for workflow orchestration)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"setting-up-a-production-server\"\u003eSetting Up a Production Server\u003c/h3\u003e\n\u003ch3 id=\"installing-required-software\"\u003eInstalling Required Software\u003c/h3\u003e\n\u003cp\u003eFirst, install Docker on your Ubuntu server:\u003c/p\u003e\n\n\u003cp\u003eNext, install Node.js or Python depending on your Moose application:\u003c/p\u003e\n\n\u003ch3 id=\"configure-docker-log-size-limits\"\u003eConfigure Docker Log Size Limits\u003c/h3\u003e\n\u003cp\u003eTo prevent Docker logs from filling up your disk space, configure log rotation:\u003c/p\u003e\n\n\u003cp\u003eAdd the following configuration:\u003c/p\u003e\n\n\u003cp\u003eRestart Docker to apply the changes:\u003c/p\u003e\n\n\u003ch3 id=\"enable-docker-non-root-access\"\u003eEnable Docker Non-Root Access\u003c/h3\u003e\n\u003cp\u003eTo run Docker commands without sudo:\u003c/p\u003e\n\n\u003ch3 id=\"setting-up-github-actions-runner-optional\"\u003eSetting Up GitHub Actions Runner (Optional)\u003c/h3\u003e\n\u003cp\u003eIf you want to set up CI/CD automation, you can install a GitHub Actions runner:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eNavigate to your GitHub repository\u003c/li\u003e\n\u003cli\u003eGo to Settings \u0026gt; Actions \u0026gt; Runners\u003c/li\u003e\n\u003cli\u003eClick “New self-hosted runner”\u003c/li\u003e\n\u003cli\u003eSelect Linux and follow the instructions shown\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo configure the runner as a service (to run automatically):\u003c/p\u003e\n\n\u003ch3 id=\"setting-up-a-foo-bar-moose-application-optional\"\u003eSetting up a Foo Bar Moose Application (Optional)\u003c/h3\u003e\n\u003cp\u003eIf you already have a Moose application, you can skip this section.\nYou should copy the moose project to your server and then build the application with the  flag and get the built image\non the server.\u003c/p\u003e\n\u003ch3 id=\"install-moose-cli\"\u003eInstall Moose CLI\u003c/h3\u003e\n\n\u003ch3 id=\"create-a-new-moose-application\"\u003eCreate a new Moose Application\u003c/h3\u003e\n\u003cp\u003ePlease follow the initialization instructions for your language.\u003c/p\u003e\n\n\u003cp\u003eor\u003c/p\u003e\n\n\u003ch3 id=\"build-the-application-on-amd64\"\u003eBuild the application on AMD64\u003c/h3\u003e\n\n\u003ch3 id=\"build-the-application-on-arm64\"\u003eBuild the application on ARM64\u003c/h3\u003e\n\n\u003ch3 id=\"confirm-the-image-was-built\"\u003eConfirm the image was built\u003c/h3\u003e\n\n\u003ch3 id=\"preparing-for-deployment\"\u003ePreparing for Deployment\u003c/h3\u003e\n\u003ch3 id=\"create-environment-configuration\"\u003eCreate Environment Configuration\u003c/h3\u003e\n\u003cp\u003eFirst, create a file called  in your project directory to specify component versions:\u003c/p\u003e\n\n\u003cp\u003eAdd the following content to the  file:\u003c/p\u003e\n\n\u003cp\u003eAdditionally, create a  file for your Moose application-specific secrets and configuration:\u003c/p\u003e\n\n\u003cp\u003eAdd your application-specific environment variables:\u003c/p\u003e\n\n\u003ch3 id=\"deploying-with-docker-compose\"\u003eDeploying with Docker Compose\u003c/h3\u003e\n\u003cp\u003eCreate a file called  in the same directory:\u003c/p\u003e\n\n\u003cp\u003eAdd the following content to the file:\u003c/p\u003e\n\n\u003cp\u003eAt this point, don’t start the services yet. First, we need to configure the individual services for production use as described in the following sections.\u003c/p\u003e\n\u003ch3 id=\"configuring-services-for-production\"\u003eConfiguring Services for Production\u003c/h3\u003e\n\u003ch3 id=\"configuring-clickhouse-securely-required\"\u003eConfiguring Clickhouse Securely (Required)\u003c/h3\u003e\n\u003cp\u003eFor production Clickhouse deployment, we’ll use environment variables to configure users and access control\n(as recommended in the \u003ca href=\"https://hub.docker.com/r/clickhouse/clickhouse-server\"\u003eofficial Docker image documentation\u003c/a\u003e):\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFirst, start the Clickhouse container:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eAfter Clickhouse has started, connect to create additional users:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"3\"\u003e\n\u003cli\u003e\n\u003cp\u003eTo exit the Clickhouse client, type  and press Enter.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUpdate your Moose environment variables to use the new moose user:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\u003col start=\"5\"\u003e\n\u003cli\u003eRemove the following environement variables from the clickhouse service in the docker-compose.yml file:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"6\"\u003e\n\u003cli\u003e\n\u003cp\u003eFor additional security in production, consider using Docker secrets for passwords.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRestart the Clickhouse container to apply the changes:\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"8\"\u003e\n\u003cli\u003eVerify that the new configuration works by connecting with the newly created user:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIf you can connect successfully and run commands with the new user, your Clickhouse configuration is working properly.\u003c/p\u003e\n\u003ch3 id=\"securing-redpanda-optional\"\u003eSecuring Redpanda (Optional)\u003c/h3\u003e\n\u003cp\u003eFor production, it’s recommended to restrict external access to Redpanda:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eModify your Docker Compose file to remove external access:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse only internal network access for production\u003c/li\u003e\n\u003cli\u003eIf needed, use a reverse proxy with authentication for external access\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFor this simple deployment, we’ll keep Redpanda closed to the external world with no authentication required,\nas it’s only accessible from within the Docker network.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"configuring-temporal-optional\"\u003eConfiguring Temporal (Optional)\u003c/h3\u003e\n\u003cp\u003eIf your Moose application uses Temporal for workflow orchestration, the configuration above includes all necessary services based on the\n\u003ca href=\"https://github.com/temporalio/docker-compose\"\u003eofficial Temporal Docker Compose examples\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you’re not using Temporal, simply remove the Temporal-related services (postgresql, temporal, temporal-ui)\nand environment variables from the docker-compose.yml file.\u003c/p\u003e\n\u003ch3 id=\"temporal-deployment-process-from-setup-to-production\"\u003eTemporal Deployment Process: From Setup to Production\u003c/h3\u003e\n\u003cp\u003eDeploying Temporal involves a two-phase process: initial setup followed by production operation. Here are step-by-step instructions for each phase:\u003c/p\u003e\n\u003ch5 id=\"phase-1-initial-setup\"\u003ePhase 1: Initial Setup\u003ca href=\"#phase-1-initial-setup\" aria-label=\"Permalink for this section\"\u003e\u003c/a\u003e\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eStart the PostgreSQL database\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eWait for PostgreSQL to be healthy\u003c/strong\u003e (check the status):\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eLook for  in the output before proceeding.\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eStart Temporal with auto-setup\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eDuring this phase, Temporal’s auto-setup will:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate the necessary PostgreSQL databases\u003c/li\u003e\n\u003cli\u003eInitialize the schema tables\u003c/li\u003e\n\u003cli\u003eRegister the default namespace (moose-workflows)\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eVerify Temporal server is running\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"5\"\u003e\n\u003cli\u003e\u003cstrong\u003eStart the Admin Tools and UI\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"6\"\u003e\n\u003cli\u003e\u003cstrong\u003eCreate the namespace manually\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eVerify that the namespace was created:\u003c/p\u003e\n\n\u003cp\u003eYou should see details about the namespace including its retention policy.\u003c/p\u003e\n\u003ch5 id=\"phase-2-transition-to-production\"\u003ePhase 2: Transition to Production\u003ca href=\"#phase-2-transition-to-production\" aria-label=\"Permalink for this section\"\u003e\u003c/a\u003e\u003c/h5\u003e\n\u003cp\u003eAfter successful initialization, modify your configuration for production use:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eStop Temporal services\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"2\"\u003e\n\u003cli\u003e\u003cstrong\u003eEdit your docker-compose.yml file\u003c/strong\u003e to:\n\u003cul\u003e\n\u003cli\u003eChange image from  to \u003c/li\u003e\n\u003cli\u003eSet \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eExample change:\u003c/p\u003e\n\n\u003col start=\"3\"\u003e\n\u003cli\u003e\u003cstrong\u003eRestart services with production settings\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"4\"\u003e\n\u003cli\u003e\u003cstrong\u003eVerify services are running with new configuration\u003c/strong\u003e:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"starting-and-managing-the-service\"\u003eStarting and Managing the Service\u003c/h3\u003e\n\u003ch3 id=\"starting-the-services\"\u003eStarting the Services\u003c/h3\u003e\n\u003cp\u003eStart all services with Docker Compose:\u003c/p\u003e\n\n\u003ch3 id=\"setting-up-systemd-service-for-docker-compose\"\u003eSetting Up Systemd Service for Docker Compose\u003c/h3\u003e\n\u003cp\u003eFor production, create a systemd service to ensure Docker Compose starts automatically on system boot:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate a systemd service file:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eAdd the following configuration (adjust paths as needed):\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003col start=\"3\"\u003e\n\u003cli\u003eEnable and start the service:\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"deployment-workflow\"\u003eDeployment Workflow\u003c/h3\u003e\n\u003cp\u003eYou get a smooth deployment process with these options:\u003c/p\u003e\n\u003ch3 id=\"automated-deployment-with-cicd\"\u003eAutomated Deployment with CI/CD\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eSet up a CI/CD pipeline using GitHub Actions (if runner is configured)\u003c/li\u003e\n\u003cli\u003eWhen code is pushed to your repository:\n\u003cul\u003e\n\u003cli\u003eThe GitHub Actions runner builds your Moose application\u003c/li\u003e\n\u003cli\u003eUpdates the Docker image\u003c/li\u003e\n\u003cli\u003eDeploys using Docker Compose\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"manual-deployment\"\u003eManual Deployment\u003c/h3\u003e\n\u003cp\u003eAlternatively, for manual deployment:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCopy the latest version of the code to the machine\u003c/li\u003e\n\u003cli\u003eRun \u003c/li\u003e\n\u003cli\u003eUpdate the Docker image tag in your docker-compose.yml\u003c/li\u003e\n\u003cli\u003eRestart the stack with \u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"monitoring-and-maintenance\"\u003eMonitoring and Maintenance\u003c/h3\u003e\n\u003cp\u003eNo more worrying about unexpected outages or performance issues. Set up proper monitoring:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet up log monitoring with a tool like \u003ca href=\"https://grafana.com/oss/loki/\"\u003eLoki\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRegularly backup your volumes (especially Clickhouse data)\u003c/li\u003e\n\u003cli\u003eMonitor disk space usage\u003c/li\u003e\n\u003cli\u003eSet up alerting for service health\u003c/li\u003e\n\u003c/ul\u003e\u003c/main\u003e\u003c/article\u003e\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "8 min read",
  "publishedTime": null,
  "modifiedTime": null
}
