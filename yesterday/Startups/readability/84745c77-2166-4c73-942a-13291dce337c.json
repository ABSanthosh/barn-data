{
  "id": "84745c77-2166-4c73-942a-13291dce337c",
  "title": "Show HN: Lambduck, a Functional Programming Brainfuck",
  "link": "https://imjakingit.github.io/lambduck/",
  "description": "What if Brainfuck was less like C and more like Scheme?The interpreter implemetation is pretty bad. It's not very fast, it's not very good, and it's probably not very correct. But maybe there's some vaguely interesting programs you could write with it!For example, the Y combinator: λf. (λx. f (x x)) (λx. f (x x)) is written as: \\` \\`1 `0 0 \\`1 `0 0 Comments URL: https://news.ycombinator.com/item?id=44196589 Points: 5 # Comments: 1",
  "author": "jorkingit",
  "published": "Thu, 05 Jun 2025 23:29:35 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 2284,
  "excerpt": "",
  "siteName": "",
  "favicon": "",
  "text": ",--('\u003c \"if it walks like a lamb and quacks like a duck\" w-w' lambduck is a functional programming language. =============================================================================== special forms =============================================================================== \\ | begin a lambda abstraction ----------------+-------------------------------------------------------------- ` | apply a function, e.g. `0 1 applies 0 to 1 ----------------+-------------------------------------------------------------- 0, 1, 99, ... | a variable as its de bruijn index in the lambda abstraction =============================================================================== built in functions =============================================================================== , | gets a character from stdin, encodes it from ascii into a | church numeral, and passes it to its argument ----------------+-------------------------------------------------------------- . | decodes its argument into an ascii character from a church | numeral mod 256, puts it to stdout, and returns its argument ----------------+-------------------------------------------------------------- 'A, 'b, '\u003c, ... | a character literal as a church numeral in ascii =============================================================================== all other characters are ignored. =============================================================================== examples =============================================================================== true | \\\\1 ----------------+-------------------------------------------------------------- false | \\\\0 ----------------+-------------------------------------------------------------- z combinator | \\`\\`1\\``1 1 0\\`1\\``1 1 0 ----------------+-------------------------------------------------------------- echo | `\\`\\`1\\``1 1 0\\`1\\``1 1 0\\`0`,. ----------------+-------------------------------------------------------------- hello world | ``\\\\1`.'h``\\\\1`.'e``\\\\1`.'l``\\\\1`.'l``\\\\1`.'o``\\\\1`.' ``\\\\1`.'w``\\\\1`.'o``\\\\1`.'r``\\\\1`.'l``\\\\1`.'d`.'! =============================================================================== stdout",
  "image": "",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cpre\u003e  ,--(\u0026#39;\u0026lt;  \u0026#34;if it walks like a lamb and quacks like a duck\u0026#34;\n   w-w\u0026#39;\n\nlambduck is a functional programming language.\n\n===============================================================================\nspecial forms\n===============================================================================\n\\               | begin a lambda abstraction\n----------------+--------------------------------------------------------------\n`               | apply a function, e.g. `0 1 applies 0 to 1\n----------------+--------------------------------------------------------------\n0, 1, 99, ...   | a variable as its de bruijn index in the lambda abstraction\n===============================================================================\nbuilt in functions\n===============================================================================\n,               | gets a character from stdin, encodes it from ascii into a\n                | church numeral, and passes it to its argument\n----------------+--------------------------------------------------------------\n.               | decodes its argument into an ascii character from a church\n                | numeral mod 256, puts it to stdout, and returns its argument\n----------------+--------------------------------------------------------------\n\u0026#39;A, \u0026#39;b, \u0026#39;\u0026lt;, ... | a character literal as a church numeral in ascii\n===============================================================================\n\nall other characters are ignored.\n\n===============================================================================\nexamples\n===============================================================================\ntrue            | \\\\1\n----------------+--------------------------------------------------------------\nfalse           | \\\\0\n----------------+--------------------------------------------------------------\nz combinator    | \\`\\`1\\``1 1 0\\`1\\``1 1 0\n----------------+--------------------------------------------------------------\necho            | `\\`\\`1\\``1 1 0\\`1\\``1 1 0\\`0`,.\n----------------+--------------------------------------------------------------\nhello world     | ``\\\\1`.\u0026#39;h``\\\\1`.\u0026#39;e``\\\\1`.\u0026#39;l``\\\\1`.\u0026#39;l``\\\\1`.\u0026#39;o``\\\\1`.\u0026#39; ``\\\\1`.\u0026#39;w``\\\\1`.\u0026#39;o``\\\\1`.\u0026#39;r``\\\\1`.\u0026#39;l``\\\\1`.\u0026#39;d`.\u0026#39;!\n===============================================================================\n\u003c/pre\u003e\u003ch3\u003estdout\u003c/h3\u003e\u003cpre id=\"stdout\"\u003e\u003c/pre\u003e\u003cpre id=\"error\"\u003e\u003c/pre\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": null,
  "modifiedTime": null
}
