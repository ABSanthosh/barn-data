{
  "id": "6121b4ea-2062-426f-b993-7949ec6f0dfd",
  "title": "MCP Specification – 2025-06-18",
  "link": "https://modelcontextprotocol.io/specification/2025-06-18",
  "description": "Article URL: https://modelcontextprotocol.io/specification/2025-06-18 Comments URL: https://news.ycombinator.com/item?id=44314289 Points: 5 # Comments: 0",
  "author": "owebmaster",
  "published": "Wed, 18 Jun 2025 23:59:47 +0000",
  "source": "https://hnrss.org/frontpage",
  "categories": null,
  "byline": "",
  "length": 4159,
  "excerpt": "Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you’re building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need.",
  "siteName": "Model Context Protocol",
  "favicon": "https://mintlify.s3-us-west-1.amazonaws.com/mcp/_generated/favicon/apple-touch-icon.png?v=3",
  "text": "Model Context Protocol (MCP) is an open protocol that enables seamless integration between LLM applications and external data sources and tools. Whether you’re building an AI-powered IDE, enhancing a chat interface, or creating custom AI workflows, MCP provides a standardized way to connect LLMs with the context they need. This specification defines the authoritative protocol requirements, based on the TypeScript schema in schema.ts. For implementation guides and examples, visit modelcontextprotocol.io. The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here. Overview MCP provides a standardized way for applications to: Share contextual information with language models Expose tools and capabilities to AI systems Build composable integrations and workflows The protocol uses JSON-RPC 2.0 messages to establish communication between: Hosts: LLM applications that initiate connections Clients: Connectors within the host application Servers: Services that provide context and capabilities MCP takes some inspiration from the Language Server Protocol, which standardizes how to add support for programming languages across a whole ecosystem of development tools. In a similar way, MCP standardizes how to integrate additional context and tools into the ecosystem of AI applications. Key Details Base Protocol JSON-RPC message format Stateful connections Server and client capability negotiation Features Servers offer any of the following features to clients: Resources: Context and data, for the user or the AI model to use Prompts: Templated messages and workflows for users Tools: Functions for the AI model to execute Clients may offer the following features to servers: Sampling: Server-initiated agentic behaviors and recursive LLM interactions Roots: Server-initiated inquiries into uri or filesystem boundaries to operate in Elicitation: Server-initiated requests for additional information from users Additional Utilities Configuration Progress tracking Cancellation Error reporting Logging Security and Trust \u0026 Safety The Model Context Protocol enables powerful capabilities through arbitrary data access and code execution paths. With this power comes important security and trust considerations that all implementors must carefully address. Key Principles User Consent and Control Users must explicitly consent to and understand all data access and operations Users must retain control over what data is shared and what actions are taken Implementors should provide clear UIs for reviewing and authorizing activities Data Privacy Hosts must obtain explicit user consent before exposing user data to servers Hosts must not transmit resource data elsewhere without user consent User data should be protected with appropriate access controls Tool Safety Tools represent arbitrary code execution and must be treated with appropriate caution. In particular, descriptions of tool behavior such as annotations should be considered untrusted, unless obtained from a trusted server. Hosts must obtain explicit user consent before invoking any tool Users should understand what each tool does before authorizing its use LLM Sampling Controls Users must explicitly approve any LLM sampling requests Users should control: Whether sampling occurs at all The actual prompt that will be sent What results the server can see The protocol intentionally limits server visibility into prompts Implementation Guidelines While MCP itself cannot enforce these security principles at the protocol level, implementors SHOULD: Build robust consent and authorization flows into their applications Provide clear documentation of security implications Implement appropriate access controls and data protections Follow security best practices in their integrations Consider privacy implications in their feature designs Learn More Explore the detailed specification for each protocol component:",
  "image": "https://raw.githubusercontent.com/modelcontextprotocol/docs/2eb6171ddbfeefde349dc3b8d5e2b87414c26250/images/og-image.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\u003cp\u003e\u003ca href=\"https://modelcontextprotocol.io\" target=\"_blank\" rel=\"noreferrer\"\u003eModel Context Protocol\u003c/a\u003e (MCP) is an open protocol that\nenables seamless integration between LLM applications and external data sources and\ntools. Whether you’re building an AI-powered IDE, enhancing a chat interface, or creating\ncustom AI workflows, MCP provides a standardized way to connect LLMs with the context\nthey need.\u003c/p\u003e\n\u003cp\u003eThis specification defines the authoritative protocol requirements, based on the\nTypeScript schema in\n\u003ca href=\"https://github.com/modelcontextprotocol/specification/blob/main/schema/2025-06-18/schema.ts\" target=\"_blank\" rel=\"noreferrer\"\u003eschema.ts\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFor implementation guides and examples, visit\n\u003ca href=\"https://modelcontextprotocol.io\" target=\"_blank\" rel=\"noreferrer\"\u003emodelcontextprotocol.io\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD\nNOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be\ninterpreted as described in \u003ca href=\"https://datatracker.ietf.org/doc/html/bcp14\" target=\"_blank\" rel=\"noreferrer\"\u003eBCP 14\u003c/a\u003e\n[\u003ca href=\"https://datatracker.ietf.org/doc/html/rfc2119\" target=\"_blank\" rel=\"noreferrer\"\u003eRFC2119\u003c/a\u003e]\n[\u003ca href=\"https://datatracker.ietf.org/doc/html/rfc8174\" target=\"_blank\" rel=\"noreferrer\"\u003eRFC8174\u003c/a\u003e] when, and only when, they\nappear in all capitals, as shown here.\u003c/p\u003e\n\u003ch2 id=\"overview\"\u003e\u003cspan\u003eOverview\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eMCP provides a standardized way for applications to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eShare contextual information with language models\u003c/li\u003e\n\u003cli\u003eExpose tools and capabilities to AI systems\u003c/li\u003e\n\u003cli\u003eBuild composable integrations and workflows\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe protocol uses \u003ca href=\"https://www.jsonrpc.org/\" target=\"_blank\" rel=\"noreferrer\"\u003eJSON-RPC\u003c/a\u003e 2.0 messages to establish\ncommunication between:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHosts\u003c/strong\u003e: LLM applications that initiate connections\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eClients\u003c/strong\u003e: Connectors within the host application\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eServers\u003c/strong\u003e: Services that provide context and capabilities\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMCP takes some inspiration from the\n\u003ca href=\"https://microsoft.github.io/language-server-protocol/\" target=\"_blank\" rel=\"noreferrer\"\u003eLanguage Server Protocol\u003c/a\u003e, which\nstandardizes how to add support for programming languages across a whole ecosystem of\ndevelopment tools. In a similar way, MCP standardizes how to integrate additional context\nand tools into the ecosystem of AI applications.\u003c/p\u003e\n\u003ch2 id=\"key-details\"\u003e\u003cspan\u003eKey Details\u003c/span\u003e\u003c/h2\u003e\n\u003ch3 id=\"base-protocol\"\u003e\u003cspan\u003eBase Protocol\u003c/span\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jsonrpc.org/\" target=\"_blank\" rel=\"noreferrer\"\u003eJSON-RPC\u003c/a\u003e message format\u003c/li\u003e\n\u003cli\u003eStateful connections\u003c/li\u003e\n\u003cli\u003eServer and client capability negotiation\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"features\"\u003e\u003cspan\u003eFeatures\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eServers offer any of the following features to clients:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eResources\u003c/strong\u003e: Context and data, for the user or the AI model to use\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePrompts\u003c/strong\u003e: Templated messages and workflows for users\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTools\u003c/strong\u003e: Functions for the AI model to execute\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eClients may offer the following features to servers:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSampling\u003c/strong\u003e: Server-initiated agentic behaviors and recursive LLM interactions\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRoots\u003c/strong\u003e: Server-initiated inquiries into uri or filesystem boundaries to operate in\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eElicitation\u003c/strong\u003e: Server-initiated requests for additional information from users\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"additional-utilities\"\u003e\u003cspan\u003eAdditional Utilities\u003c/span\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eConfiguration\u003c/li\u003e\n\u003cli\u003eProgress tracking\u003c/li\u003e\n\u003cli\u003eCancellation\u003c/li\u003e\n\u003cli\u003eError reporting\u003c/li\u003e\n\u003cli\u003eLogging\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"security-and-trust-%26-safety\"\u003e\u003cspan\u003eSecurity and Trust \u0026amp; Safety\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eThe Model Context Protocol enables powerful capabilities through arbitrary data access\nand code execution paths. With this power comes important security and trust\nconsiderations that all implementors must carefully address.\u003c/p\u003e\n\u003ch3 id=\"key-principles\"\u003e\u003cspan\u003eKey Principles\u003c/span\u003e\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eUser Consent and Control\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUsers must explicitly consent to and understand all data access and operations\u003c/li\u003e\n\u003cli\u003eUsers must retain control over what data is shared and what actions are taken\u003c/li\u003e\n\u003cli\u003eImplementors should provide clear UIs for reviewing and authorizing activities\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eData Privacy\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHosts must obtain explicit user consent before exposing user data to servers\u003c/li\u003e\n\u003cli\u003eHosts must not transmit resource data elsewhere without user consent\u003c/li\u003e\n\u003cli\u003eUser data should be protected with appropriate access controls\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eTool Safety\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTools represent arbitrary code execution and must be treated with appropriate\ncaution.\n\u003cul\u003e\n\u003cli\u003eIn particular, descriptions of tool behavior such as annotations should be\nconsidered untrusted, unless obtained from a trusted server.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eHosts must obtain explicit user consent before invoking any tool\u003c/li\u003e\n\u003cli\u003eUsers should understand what each tool does before authorizing its use\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eLLM Sampling Controls\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUsers must explicitly approve any LLM sampling requests\u003c/li\u003e\n\u003cli\u003eUsers should control:\n\u003cul\u003e\n\u003cli\u003eWhether sampling occurs at all\u003c/li\u003e\n\u003cli\u003eThe actual prompt that will be sent\u003c/li\u003e\n\u003cli\u003eWhat results the server can see\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe protocol intentionally limits server visibility into prompts\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"implementation-guidelines\"\u003e\u003cspan\u003eImplementation Guidelines\u003c/span\u003e\u003c/h3\u003e\n\u003cp\u003eWhile MCP itself cannot enforce these security principles at the protocol level,\nimplementors \u003cstrong\u003eSHOULD\u003c/strong\u003e:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eBuild robust consent and authorization flows into their applications\u003c/li\u003e\n\u003cli\u003eProvide clear documentation of security implications\u003c/li\u003e\n\u003cli\u003eImplement appropriate access controls and data protections\u003c/li\u003e\n\u003cli\u003eFollow security best practices in their integrations\u003c/li\u003e\n\u003cli\u003eConsider privacy implications in their feature designs\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"learn-more\"\u003e\u003cspan\u003eLearn More\u003c/span\u003e\u003c/h2\u003e\n\u003cp\u003eExplore the detailed specification for each protocol component:\u003c/p\u003e\n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "5 min read",
  "publishedTime": null,
  "modifiedTime": null
}
