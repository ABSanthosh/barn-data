{
  "id": "a03e7274-2190-4c8a-b3c1-b678731f9041",
  "title": "Styling Counters in CSS",
  "link": "https://css-tricks.com/styling-counters-in-css/",
  "description": "Going from the most basic ways to style lists directly in HTML to advanced customization techniques that are even capable of making things that aren't lists look like lists. Styling Counters in CSS originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Juan Diego Rodríguez",
  "published": "Mon, 17 Mar 2025 16:25:04 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Guides",
    "counters",
    "lists"
  ],
  "byline": "Juan Diego Rodríguez",
  "length": 31814,
  "excerpt": "Going from the most basic ways to style lists directly in HTML to advanced customization techniques that are even capable of making things that aren't lists look like lists.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Yes, you are reading that correctly: This is indeed a guide to styling counters with CSS. Some of you are cheering, “Finally!”, but I understand that the vast majority of you are thinking, “Um, it’s just styling lists.” If you are part of the second group, I get it. Before learning and writing more and more about counters, I thought the same thing. Now I am part of the first group, and by the end of this guide, I hope you join me there. There are many ways to create and style counters, which is why I wanted to write this guide and also how I plan to organize it: going from the most basic styling to the top-notch level of customization, sprinkling in between some sections about spacing and accessibility. It isn’t necessary to read the guide in order — each section should stand by itself, so feel free to jump to any part and start reading. Table of Contents HTML Based Customization Styling Simple Counters in CSS Custom Counters Custom Counters Styles Images in Counters Spacing Things out Accessibility Almanac references Further reading Customizing Counters in HTML Lists elements were among the first 18 tags that made up HTML. Their representation wasn’t defined yet but deemed fitting a bulleted list for unordered lists, and a sequence of numbered paragraphs for an ordered list. Cool but not enough; soon people needed more from HTML alone and new list attributes were added throughout the years to fill in the gaps. start The start attribute takes an integer and sets from where the list should start: \u003col start=\"2\"\u003e \u003cli\u003eBread\u003c/li\u003e \u003cli\u003eMilk\u003c/li\u003e \u003cli\u003eButter\u003c/li\u003e \u003cli\u003eApples\u003c/li\u003e \u003c/ol\u003e Bread Milk Butter Apples Although, it isn’t limited to positive values; zero and negative integers are allowed as well: \u003col start=\"0\"\u003e \u003cli\u003eBread\u003c/li\u003e \u003cli\u003eMilk\u003c/li\u003e \u003cli\u003eButter\u003c/li\u003e \u003cli\u003eApples\u003c/li\u003e \u003c/ol\u003e \u003col start=\"-2\"\u003e \u003cli\u003eBread\u003c/li\u003e \u003cli\u003eMilk\u003c/li\u003e \u003cli\u003eButter\u003c/li\u003e \u003cli\u003eApples\u003c/li\u003e \u003c/ol\u003e Bread Milk Butter Apples Bread Milk Butter Apples type We can use the type attribute to change the counter’s representation. It’s similar to CSS’s list-style-type, but it has its own limited uses and shouldn’t be used interchangeably*. Its possible values are: 1 for decimal numbers (default) a for lowercase alphabetic A for uppercase alphabetic i for lowercase Roman numbers I for uppercase Roman numbers \u003col type=\"a\"\u003e \u003cli\u003eBread\u003c/li\u003e \u003cli\u003eMilk\u003c/li\u003e \u003cli\u003eButter\u003c/li\u003e \u003cli\u003eApples\u003c/li\u003e \u003c/ol\u003e \u003col type=\"i\"\u003e \u003cli\u003eBread\u003c/li\u003e \u003cli\u003eMilk\u003c/li\u003e \u003cli\u003eButter\u003c/li\u003e \u003cli\u003eApples\u003c/li\u003e \u003c/ol\u003e Bread Milk Butter Apples Bread Milk Butter Apples It’s weird enough to use type on ol elements, but it still has some use cases*. However, usage with the ul element is downright deprecated. value The value attribute sets the value for a specific li element. This also affects the values of the li elements after it. \u003col\u003e \u003cli\u003eBread\u003c/li\u003e \u003cli value=\"4\"\u003eMilk\u003c/li\u003e \u003cli\u003eButter\u003c/li\u003e \u003cli\u003eApples\u003c/li\u003e \u003c/ol\u003e Bread Milk Butter Apples reversed The reversed attribute will start counting elements in reverse order, so from highest to lowest. \u003col reversed\u003e \u003cli\u003eBread\u003c/li\u003e \u003cli\u003eMilk\u003c/li\u003e \u003cli\u003eButter\u003c/li\u003e \u003cli\u003eApples\u003c/li\u003e \u003c/ol\u003e Bread Milk Butter Apples All can be combined If you ever feel the need, all list attributes can be combined in one (ordered) list. \u003col reversed start=\"2\" type=\"i\"\u003e \u003cli\u003eBread\u003c/li\u003e \u003cli value=\"4\"\u003eMilk\u003c/li\u003e \u003cli\u003eButter\u003c/li\u003e \u003cli\u003eApples\u003c/li\u003e \u003c/ol\u003e Bread Milk Butter Apples * Do we need them if we now have CSS? Funny enough, the first CSS specification already included list-style-type and other properties to style lists, and it was released before HTML 3.2 — the first HTML spec that included some of the previous list attributes. This means that at least on paper, we had CSS list styling before HTML list attributes, so the answer isn’t as simple as “they were there before CSS.” Without CSS, a static page (such as this guide) won’t be pretty, but at the very least, it should be readable. For example, the type attribute ensures that styled ordered lists won’t lose their meaning if CSS is missing, which is especially useful in legal or technical documents. Some attributes wouldn’t have a CSS equivalent until years later, including reversed, start and value. For most use cases, styling lists in CSS doesn’t take more than a couple of rules, but even in that brevity, we can find different ways to style the same list. ::marker or ::before? The ::marker pseudo-element represents the counter part of a list item. As a pseudo-element, we can set its content property to any string to change its counter representation: li::marker { content: \"💜 \"; } Bread Milk Butter Apples The content in pseudo-elements also accepts images, which allows us to create custom markers: li::marker { content: url(\"./logo.svg\") \" \"; } bread milk butter apples By default, only li elements have a ::marker but we can give it to any element by setting its display property to list-item: h4 { display: list-item; } h4::marker { content: \"◦ \"; } This will give each h4 a ::marker which we can change to any string: List Title However, ::marker is an odd case: it was described in the CSS spec more than 20 years ago, but only gained somewhat reliable support in 2020 and still isn’t fully supported in Safari. What’s worst, only font-related properties (such as font-size or color) are allowed, so we can’t change its margin or background-color. This has led many to use ::before instead of ::marker, so you’ll see a lot of CSS in which the author got rid of the ::marker using list-style-type: none and used ::before instead: li { /* removes ::marker */ list-style-type: none; } li::before { /* mimics ::marker */ content: \"▸ \"; } list-style-type The list-style-type property can be used to replace the ::marker‘s string. Unlike ::marker, list-style-type has been around forever and is most people’s go-to option for styling lists. It can take a lot of different counter styles that are built-in in browsers, but you will probably use one of the following: For unordered lists: disc circle square ul { list-style-type: square; } ul { list-style-type: circle; } bread milk butter apples For ordered lists: decimal decimal-leading-zero lower-roman upper-roman lower-alpha upper-alpha ol { list-style-type: upper-roman; } ol { list-style-type: lower-alpha; } bread milk butter apples You can find a full list of valid counter styles here. It can also take none to remove the marker altogether, and since not long ago, it can also take a \u003cstring\u003e for ul elements. ul { list-style-type: none; } ul { list-style-type: \"➡️ \"; } Creating Custom Counters For a long time, there wasn’t a CSS-equivalent to the HTML reverse, start or value attributes. So if we wanted to reverse or change the start of multiple lists, instead of a CSS class to rule them all, we had to change their HTML one by one. You can imagine how repetitive that would get. Besides, list attributes simply had their limitations: we can’t change how they increment with each item and there isn’t an easy way to attach a prefix or suffix to the counter. And maybe the biggest reason of all is that there wasn’t a way to number things that weren’t lists! Custom counters let us number any collection of elements with a whole new level of customization. The workflow is to: Initiate the counter with the counter-reset property. Increment the counter with the counter-increment property. Individually set the counters with the counter-set property. Output the counters with either the counter() and counters() functions. As I mentioned, we can make a list out of any collection of elements, and while this has its accessibility concerns, just for demonstration’s sake, let’s try to turn a collection of headings like this… \u003cdiv class=\"index\"\u003e \u003ch2\u003eThe Old Buccaneer\u003c/h2\u003e \u003ch2\u003eThe Sea Cook\u003c/h2\u003e \u003ch2\u003eMy Shore Adventure\u003c/h2\u003e \u003ch2\u003eThe Log Cabin\u003c/h2\u003e \u003ch2\u003eMy Sea Adventure\u003c/h2\u003e \u003ch2\u003eCaptain Silver\u003c/h2\u003e \u003c/div\u003e …into something that looks list-like. But just because we can make an element look like a list doesn’t always mean we should do it. Be sure to consider how the list will be announced by assistive technologies, like screen readers, and see the Accessibility section for more information. Initiate counters: counter-reset The counter-reset property takes two things: the name of the counter as a custom ident and the initial count as an integer. If the initial count isn’t given, then it will start at 0 by default: .index { counter-reset: index; /* The same as */ counter-reset: index 0; } You can initiate several counters at once with a space-separated list and set a specific value for each one: .index { counter-reset: index another-counter 2; } This will start our index counter at 0 (the default) and another-counter at 2. Set counters: counter-set The counter-set works similar to counter-reset: it takes the counter’s name followed by an integer, but this time it will set the count for that element onwards. If the integer is omitted, it will set the counter to 0 by default. h2:nth-child(2) { counter-set: index; /* same as */ counter-set: index 0; } And we can set several counters at once, as well: h2:nth-child(3) { counter-set: index 5 another-counter 10; } This will set the third h2 element’s index count to 5 and another-counter to 10. If there isn’t an active counter with that name, counter-set will initiate it at 0. Increment counters: counter-increment Right now, we have our counter, but it will stagnate at 0 since we haven’t set which elements should increment it. We can use the counter-increment property for that, which takes the name of the counter and how much it should be incremented by. If we only write the counter’s name, it will increment it by 1. In this case, we want each h2 title to increment the counter by one, and that should be as easy as setting counter-increment to the counter’s name: h2 { counter-increment: index; /* same as */ counter-increment: index 1; } Just like with counter-reset, we can increment several counters at once in a space-separated list: h2 { counter-increment: index another-counter 2; } This will increment index by one and another-counter by two on each h2 element. If there isn’t an active counter with that name, counter-increment will initiate it at 0. Output simple lists: counter() So far, we won’t see any change in the counter representation. The counters are counting but not showing, so to output the counter’s result we use the counter() and counters() functions. Yes, those are two functions with similar names but important differences. The counter() function takes the name of a counter and outputs its content as a string. If many active counters have the same name, it will select the one that is defined closest to the element, so we can only output one counter at a time. As mentioned earlier, we can set an element’s display to list-item to work with its ::marker pseudo-element: h2 { display: list-item; } Then, we can use counter() in its content property to output the current count. This allows us to prefix and suffix the counter by writing a string before or after the counter() function: h2::marker { content: \"Part \" counter(index) \": \"; } Alternatively, we can use the everyday ::before pseudo-element to the same effect: h2::before { content: \"Part \" counter(index) \": \"; } Output nested lists: counters() counter() works great for most situations, but what if we wanted to do a nested list like this: 1. Paradise Beaches 1.1. Hawaiian Islands 1.2. Caribbean Getaway 1.2.1. Aruba 1.2.2. Barbados 2. Outdoor Escapades 2.1 National Park Hike 2.2. Mountain Skiing Trip We would need to initiate individual counters and write different counter() functions for each level of nesting, and that’s only possible if we know how deep the nesting goes, which we simply don’t at times. In this case, we use the counters() function, which also takes the name of a counter as an argument but instead of just outputting its content, it will join all active counters with that name into a single string and output it. To do so, it takes a string as a second argument, usually something like a dot (\".\") or dash (\"-\") that will be used between counters to join them. We can use counter-reset and counter-increment to initiate a counter for each ol element, while each li will increment its closest counter by 1: ol { counter-reset: item; } li { counter-increment: item; } But this time, instead of using counter() (which would only display one counter per item), we will use counters() to join all active counters by a string (e.g. \".“) and output them at once: li::marker { content: counters(item, \".\") \". \"; } Styling Counters Both the counter() and counters() functions accept one additional, yet optional, last argument representing the counter style, the same ones we use in the list-style-type property. So in our last two examples, we could change the counter styles to Roman numbers and alphabetic letters, respectively: h2::marker { content: \"Part \" counter(index, upper-roman) \": \"; } li::marker { content: counters(item, \".\", lower-alpha) \". \"; } Reverse Counters It’s possible to count backward using custom counters, but we need to know beforehand the number of elements we’ll count. So for example, if we want to make a Top Five list in reversed order: \u003ch1\u003eBest rated animation movies\u003c/h1\u003e \u003col\u003e \u003cli\u003eToy Story 2\u003c/li\u003e \u003cli\u003eToy Story 1\u003c/li\u003e \u003cli\u003eFinding Nemo\u003c/li\u003e \u003cli\u003eHow to Train your Dragon\u003c/li\u003e \u003cli\u003eInside Out\u003c/li\u003e \u003c/ol\u003e We have to initiate our counter at the total number of elements plus one (so it doesn’t end at 0): ol { counter-reset: movies 6; } And then set the increment to a negative integer: li { counter-increment: movies -1; } To output the count we use counter() as we did before: li::marker { content: counter(movies) \". \"; } There is also a way to write reversed counters supported in Firefox, but it hasn’t shipped to any other browser. Using the reversed() functional notation, we can wrap the counter name while initiating it to say it should be reversed. ol { counter-reset: reversed(movies); } li { counter-increment: movies; } li::marker { content: counter(movies) \" .\"; } Styling Custom Counters The last section was all about custom counters: we changed from where they started and how they increased, but at the end of the day, their output was styled in one of the browser’s built-in counter styles, usually decimal. Now using @counter-style, we’ll build our own counter styles to style any list. The @counter-style at-rule, as its name implies, lets you create custom counter styles. After writing the at-rule it takes a custom ident as a name: @counter-style my-counter-style { /* etc. */ } That name can be used inside the properties and functions that take a counter style, such as list-style-type or the last argument in counter() and counters(): ul { list-style-type: my-counter-style; } li::marker { content: counter(my-counter, my-counter-style) \". \"; } What do we write inside @counter-style? Descriptors! How many descriptors? Honestly, a lot. Just look at this quick review of all of them: system: specifies which algorithm will be used to construct the counter’s string representation. (Obligatory) negative: specifies the counter representation if the counter value is negative. (Optional) prefix: specifies a character that will be attached before the marker representation and any negative sign. (Optional) suffix: specifies a character that will be attached after the marker representation and any negative sign. (Optional) range: specifies the range in which the custom counter is used. Counter values outside the range will drop to their fallback counter style. (Optional) pad: specifies a minimum width all representations have to reach. Representations shorter than the minimum are padded with a character. (Optional) fallback: specifies a fallback counter used whenever a counter style can’t represent a counter value. (Optional) symbols: specifies the symbols used by the construction system algorithm. It’s obligatory unless the system is set to additive or extends. additive-symbols: specifies the symbols used by the construction algorithm when the system descriptor is set to additive. speak-as: specifies how screen readers should read the counter style. (Optional) However, I’ll focus on the required descriptors first: system, symbols and additive-symbols. The system descriptor The symbols or additive-symbols descriptors define the characters used for the counter style, while system says how to use them. The valid system values are: cyclic alphabetic symbolic additive fixed extends cyclic will go through the characters set on symbols and repeat them. We can use just one character in the symbols to mimic a bullet list: @counter-style cyclic-example { system: cyclic; symbols: \"⏵\"; suffix: \" \"; } bread butter milk apples Or alternate between two or more characters: @counter-style cyclic-example { system: cyclic; symbols: \"🔸\" \"🔹\"; suffix: \" \"; } fixed will write the characters in symbols descriptor just one time. In the last example, only the first two items will have a custom counter if set to fixed, while the others will drop to their fallback, which is decimal by default. @counter-style multiple-example { system: fixed; symbols: \"🔸\" \"🔹\"; suffix: \" \"; } We can set when the custom counters start by appending an \u003cinteger\u003e to the fixed value. For example, the following custom counter will start at the fourth item: @counter-style fixed-example { system: fixed 4; symbols: \"💠\"; suffix: \" \"; } numeric will numerate list items using a custom positional system (base-2, base-8, base-16, etc.). Positional systems start at 0, so the first character at symbols will be used as 0, the next as 1, and so on. Knowing this, we can make an ordered list using non-decimal numerical systems like hexadecimal: @counter-style numeric-example { system: numeric; symbols: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"; suffix: \". \"; } bread butter milk apples alphabetic will enumerate the list items using a custom alphabetical system. It’s similar to the numeric system but with the key difference that it doesn’t have a character for 0, so the next digits are just repeated. For example, if our symbols are \"A\" \"B\" \"C\" they will wrap to \"AA\", \"AB\", \"AC\", then BA, BB, BC and so on. Since there is no equivalent for 0 and negative values, they will drop down to their fallback. @counter-style alphabetic-example { system: alphabetic; symbols: \"A\" \"B\" \"C\"; suffix: \". \"; } bread butter milk apples cinnamon symbolic will go through the characters in symbols repeating them one more time each iteration. So for example, if our symbols are \"A\", \"B\", \"C\", it will go “A”, “B”, and “C”, double them in the next iteration as “AA”, “BB”, and “CC”, then triple them as “AAA”, “BBB”, “CCC” and so on. Since there is no equivalent for 0 and negative values, they will drop down to their fallback. @counter-style symbolic-example { system: symbolic; symbols: \"A\" \"B\" \"C\"; suffix: \". \"; } bread butter milk apples cinnamon additive will give characters a numerical value and add them together to get the counter representation. You can think of it as the way we usually count bills: if we have only $5, $2, and $1 bills, we will add them together to get the desired quantity, trying to keep the number of bills used at a minimum. So to represent 10, we will use two $5 bills instead of ten $1 bills. Since there is no equivalent for negative values, they will drop down to their fallback. @counter-style additive -example { system: additive; additive-symbols: 5 \"5️⃣\", 2 \"2️⃣\", 1 \"1️⃣\"; suffix: \" \"; } Notice how we use additive-symbols when the system is additive, while we use just symbols for the previous systems. extends will create a custom style from another one but with modifications. To do so, it takes a \u003ccounter-style-name\u003e after the extends value. For example, we could change the decimal counter style default’s suffix to a closing parenthesis (\")\")`: @counter-style extends-example { system: extends decimal; suffix: \") \"; } bread butter milk cinnamon Per spec, “If a @counter-style uses the extends system, it must not contain a symbols or additive-symbols descriptor, or else the @counter-style rule is invalid.” The other descriptors The negative descriptor allows us to create a custom representation for a list’s negative values. It can take one or two characters: The first one is prepended to the counter, and by default it’s the hyphen-minus (\"-\"). The second one is appended to the symbol. For example, we could enclose negative representations into parenthesis (2), (1), 0, 1, 2: @counter-style negative-example { system: extends decimal; negative: \"(\" \")\"; } bread butter milk apples The prefix and suffix descriptors allow us to prepend and append, respectively, a character to the counter representation. We can use it to add a character at the beginning of each counter using prefix: @counter-style prefix-suffix-example { system: extends decimal; prefix: \"(\"; suffix: \") \"; } bread butter milk apples The range descriptor defines an inclusive range in which the counter style is used. We can define a bounded range by writing one \u003cinteger\u003e next to another. For example, a range of 2 4 will affect elements 2, 3, and 4: @counter-style range-example { system: cyclic; symbols: \"‣\"; suffix: \" \"; range: 2 4; } bread butter milk apples cinnamon On the other hand, using the infinite value we can unbound the range to one side. For example, we could write infinite 3 so all items up to 3 have a counter style: @counter-style range-example { system: alphabetic; symbols: \"A\" \"B\" \"C\"; suffix: \". \"; range: infinite 3; } bread butter milk apples cinnamon The pad descriptor takes an \u003cinteger\u003e that represents the minimum width for the counter and a character to pad it. For example, a zero-padded counter style would look like the following: @counter-style pad-example { system: extends decimal; pad: 3 \"0\"; } bread butter milk apples The fallback descriptor allows you to define which counter style should be used as a fallback whenever we can’t represent a specific count. For example, the following counter style is fixed and will fallback to lower-roman after the sixth item: @counter-style fallback-example { system: fixed; symbols: \"⚀\" \"⚁\" \"⚂\" \"⚃\"; fallback: lower-roman; } bread butter milk apples cinnamon Lastly, the speak-as descriptor hints to speech readers on how the counter style should be read. It can be: auto Uses the system default. bullets reads an unordered list. By default, cyclic systems are read as bullets numbers reads the counter’s numeric value in the content language. By default, additive, fixed, numeric, and, symbolic are read as numbers. words reads the counter representation as words. spell-out reads the counter representation letter by letter. By default, alphabetic is read as spell-out. \u003ccounter-style-name\u003e It will use that counter’s speak-as value. @counter-style speak-as-example { system: extends decimal; prefix: \"Item \"; suffix: \" is \"; speak-as: words; } symbols() The symbols() function defines an only-use counter style without the need to do a whole @counter-style, but at the cost of missing some features. It can be used inside the list-style-type property and the counter() and counters() functions. ol { list-style-type: symbols(cyclic \"🥬\"); } However, its browser support is appalling since it’s only supported in Firefox. Images in Counters In theory, there are four ways to add images to lists: list-style-image property content property symbols descriptor in @counter-style symbols() function. In practice, the only supported ways are using list-style-image and content, since support for images in @counter-style and support in general for symbols() isn’t the best (it’s pretty bad). list-style-image The list-style-image can take an image or a gradient. In this case, we want to focus on images but gradients can also be used to create custom square bullets: li { list-style-image: conic-gradient(red, yellow, lime, aqua, blue, magenta, red); } bread butter milk apples Sadly, changing the shape would require styling more the ::marker and this isn’t currently possible. To use an image, we pass its url(), make sure is small enough to work as a counter: li { list-style-image: url(\"./logo.svg\"); } bread milk butter apples content The content property works similar to list-style-image: we pass the image’s url() and provide a little padding on the left as an empty string: li::marker { content: url(\"./logo.svg\") \" \"; } Spacing Things Out You may notice in the last part how the image — depending on its size — isn’t completely centered on the text, and also that we provide an empty string on content properties for spacing instead of giving things either a padding or margin. Well, there’s an explanation for all of this, as since spacing is one of the biggest pain points when it comes to styling lists. Margins and paddings are wacky Spacing the ::marker from the list item should be as easy as increasing the marker’s or list margin, but in reality, it takes a lot more work. First, the padding and margin properties aren’t allowed in ::marker. While lists have two types of elements: the list wrapper (usually ol or ul) and the list item (li), each with a default padding and margin. Which should we use? You can test each property in this demo by Šime Vidas in his article dedicated to the gap after the list marker: You’ll notice how the only property that affects the spacing within ::marker and the text is the li item’s padding property, while the rest of the spacing properties will move the entire list item. Another thing to note is even when the padding is set to 0px, there is a space after the ::marker. This is set by browsers and will vary depending on which browser you’re using. list-style-position One last thing you may notice in the demo is a checkbox for the list-style-position property, and how once you set it to inside, the ::marker will move to the inside of the box, at the cost of removing any spacing given by the list item’s padding. By default, markers are rendered outside the ul element’s box. A lot of times, this isn’t the best behavior: markers sneak out of elements, text-align won’t align the marker, and paradoxically, centered lists with flex or grid won’t look completely centered since the markers are outside the box. To change this we can use the list-style-position property, it can be either outside (default) and inside to define where to position the list marker: either outside or the outside of the ul box. ul { border: solid 2px red; } .inside { list-style-position: inside; } .outside { list-style-position: outside; } bread butter milk apple content with empty strings In the same article, Šime says: Appending a space to content feels more like a workaround than the optimal solution. And I completely agree that’s true, but just using ::marker there isn’t a correct way to add spacing between the ::marker and the list text, especially since most people prefer to set list-style-position to inside. So, as much as it pains me to say it, the simplest way to increase the gap after the marker is to suffix the content property with an empty string: li::marker { content: \"• \"; } bread milk butter apples BUT! This is only if we want to be purists and stick with the ::marker pseudo-element because, in reality, there is a much better way to position that marker: not using it at all. Just use ::before There is a reason people love using the ::before more than ::marker. First, we can’t use something like CSS Grid or Flexbox since changing the display of li to something other than list-item will remove the ::marker, and we can set the ::marker‘s height or width properties to better align it. Let’s be real, ::marker works fine when we just want simple styling. But we are not here for simple styling! Once we want something more involved, ::marker will fall short and we’ll have to use the ::before pseudo-element. Using ::before means we can use Flexbox, which allows for two things we couldn’t do before: Vertically center the marker with the text Easily increase the gap after the marker Both can be achieved with Flexbox: li { display: flex; align-items: center; /* Vertically center the marker */ gap: 20px; /* Increases the gap */ list-style-type: none; } The original ::marker is removed by changing the display. Accesibility In a previous section we turned things that weren’t lists into seemingly looking lists, so the question arises: should we actually do that? Doesn’t it hurt accessibility to make something look like a list when it isn’t one? As always, it depends. For a visual user, all the examples in this entry look all right, but for assistive technology users, some examples lack the necessary markup for accessible navigation. Take for example our initial demo. Here, listing titles serves as decoration since the markup structure is given by the titles themselves. It’s the same deal for the counting siblings demo from earlier, as assistive technology users can read the document through the title structure. However, this is the exception rather than the norm. That means a couple of the examples we looked at would fail if we need the list to be announced as a list in assistive technology, like screen readers. For example this list we looked at earlier: \u003cdiv class=\"index\"\u003e \u003ch2\u003eThe Old Buccaneer\u003c/h2\u003e \u003ch2\u003eThe Sea Cook\u003c/h2\u003e \u003ch2\u003eMy Shore Adventure\u003c/h2\u003e \u003ch2\u003eThe Log Cabin\u003c/h2\u003e \u003ch2\u003eMy Sea Adventure\u003c/h2\u003e \u003ch2\u003eCaptain Silver\u003c/h2\u003e \u003c/div\u003e …should be written as a list instead: \u003cul class=\"index\"\u003e \u003cli\u003eThe Old Buccaneer\u003c/li\u003e \u003cli\u003eThe Sea Cook\u003c/li\u003e \u003cli\u003eMy Shore Adventure\u003c/li\u003e \u003cli\u003eThe Log Cabin\u003c/li\u003e \u003cli\u003eMy Sea Adventure\u003c/li\u003e \u003cli\u003eCaptain Silver\u003c/li\u003e \u003c/ul\u003e Listing elements is rarely used just as decoration, so as a rule of thumb, use lists in the markup even if you are planning to change them with CSS. Almanac References List Properties Counters Custom Counter Styles Pseudo-Elements More Tutorials \u0026 Tricks!",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/03/guide-styling-counters-2.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n\n\u003cmain id=\"post-384529\"\u003e\n\n   \n\n  \u003carticle id=\"post-384529\"\u003e\n  \n    \u003cdiv\u003e\n\n      \n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cp\u003eYes, you are reading that correctly: This is indeed a guide to styling counters with CSS. Some of you are cheering, “Finally!”, but I understand that the vast majority of you are thinking, “Um, it’s just styling lists.” If you are part of the second group, I get it. Before learning and writing more and more about counters, I thought the same thing. Now I am part of the first group, and by the end of this guide, I hope you join me there.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere are \u003cem\u003emany\u003c/em\u003e ways to create and style counters, which is why I wanted to write this guide and also how I plan to organize it: going from the most basic styling to the top-notch level of customization, sprinkling in between some sections about spacing and accessibility. It isn’t necessary to read the guide in order — each section should stand by itself, so feel free to jump to any part and start reading.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\n\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"#aa-html-based-customization\"\u003eHTML Based Customization\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#aa-styling-simple-counters-in-css\"\u003eStyling Simple Counters in CSS\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#aa-custom-counters\"\u003eCustom Counters\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#aa-custom-counter-styles\"\u003eCustom Counters Styles\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#aa-images-in-counters\"\u003eImages in Counters\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#aa-spacing-things-out\"\u003eSpacing Things out\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#aa-accessibility\"\u003eAccessibility\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#aa-almanac-references\"\u003eAlmanac references\u003c/a\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ca href=\"#aa-further-reading\"\u003eFurther reading\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch2\u003eCustomizing Counters in HTML\u003c/h2\u003e\n      \u003c/summary\u003e\n  \n\n\u003cdiv\u003e\n\u003cp\u003eLists elements were among the \u003ca href=\"https://www.w3.org/History/19921103-hypertext/hypertext/WWW/MarkUp/Tags.html\" rel=\"noopener\"\u003efirst 18 tags that made up HTML\u003c/a\u003e. Their representation wasn’t defined yet but deemed fitting a bulleted list for unordered lists, and a sequence of numbered paragraphs for an ordered list.\u003c/p\u003e\n\n\n\n\u003cp\u003eCool but not enough; soon people needed more from HTML alone and new \u003cstrong\u003elist attributes\u003c/strong\u003e were added throughout the years to fill in the gaps.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"-start-\"\u003e\u003ccode\u003estart\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ccode\u003estart\u003c/code\u003e attribute takes an integer and sets from where the list should start:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;ol start=\u0026#34;2\u0026#34;\u0026gt;\n  \u0026lt;li\u0026gt;Bread\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Butter\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Apples\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"2\"\u003e\n\u003cli\u003eBread\u003c/li\u003e\n\n\n\n\u003cli\u003eMilk\u003c/li\u003e\n\n\n\n\u003cli\u003eButter\u003c/li\u003e\n\n\n\n\u003cli\u003eApples\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eAlthough, it isn’t limited to positive values; zero and negative integers are allowed as well:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;ol start=\u0026#34;0\u0026#34;\u0026gt;\n  \u0026lt;li\u0026gt;Bread\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Butter\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Apples\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n\n\u0026lt;ol start=\u0026#34;-2\u0026#34;\u0026gt;\n  \u0026lt;li\u0026gt;Bread\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Butter\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Apples\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003col start=\"0\"\u003e\n\u003cli\u003eBread\u003c/li\u003e\n\n\n\n\u003cli\u003eMilk\u003c/li\u003e\n\n\n\n\u003cli\u003eButter\u003c/li\u003e\n\n\n\n\u003cli\u003eApples\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003col start=\"-2\"\u003e\n\u003cli\u003eBread\u003c/li\u003e\n\n\n\n\u003cli\u003eMilk\u003c/li\u003e\n\n\n\n\u003cli\u003eButter\u003c/li\u003e\n\n\n\n\u003cli\u003eApples\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"-type-\"\u003e\u003ccode\u003etype\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eWe can use the \u003ccode\u003etype\u003c/code\u003e attribute to change the counter’s representation. It’s similar to CSS’s \u003ccode\u003elist-style-type\u003c/code\u003e, but it has its own limited uses and shouldn’t be used interchangeably*. Its possible values are:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1\u003c/code\u003e for decimal numbers (default)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ea\u003c/code\u003e for lowercase alphabetic\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eA\u003c/code\u003e for uppercase alphabetic\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ei\u003c/code\u003e for lowercase Roman numbers\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eI\u003c/code\u003e for uppercase Roman numbers\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;ol type=\u0026#34;a\u0026#34;\u0026gt;\n  \u0026lt;li\u0026gt;Bread\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Butter\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Apples\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\n\n\u0026lt;ol type=\u0026#34;i\u0026#34;\u0026gt;\n  \u0026lt;li\u0026gt;Bread\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Butter\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Apples\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003col\u003e\n\u003cli\u003eBread\u003c/li\u003e\n\n\n\n\u003cli\u003eMilk\u003c/li\u003e\n\n\n\n\u003cli\u003eButter\u003c/li\u003e\n\n\n\n\u003cli\u003eApples\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003col\u003e\n\u003cli\u003eBread\u003c/li\u003e\n\n\n\n\u003cli\u003eMilk\u003c/li\u003e\n\n\n\n\u003cli\u003eButter\u003c/li\u003e\n\n\n\n\u003cli\u003eApples\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eIt’s weird enough to use \u003ccode\u003etype\u003c/code\u003e on \u003ccode\u003eol\u003c/code\u003e elements, but it still has some use cases*. However, usage with the \u003ccode\u003eul\u003c/code\u003e element is downright deprecated.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"-value-\"\u003e\u003ccode\u003evalue\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ccode\u003evalue\u003c/code\u003e attribute sets the value for a specific \u003ccode\u003eli\u003c/code\u003e element. This also affects the values of the \u003ccode\u003eli\u003c/code\u003e elements after it.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;ol\u0026gt;\n  \u0026lt;li\u0026gt;Bread\u0026lt;/li\u0026gt;\n  \u0026lt;li value=\u0026#34;4\u0026#34;\u0026gt;Milk\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Butter\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Apples\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col\u003e\n  \u003cli\u003eBread\u003c/li\u003e\n  \u003cli value=\"4\"\u003eMilk\u003c/li\u003e\n  \u003cli\u003eButter\u003c/li\u003e\n  \u003cli\u003eApples\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"-reversed-\"\u003e\u003ccode\u003ereversed\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ccode\u003ereversed\u003c/code\u003e attribute will start counting elements in reverse order, so from highest to lowest.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;ol reversed\u0026gt;\n  \u0026lt;li\u0026gt;Bread\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Butter\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Apples\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col reversed=\"\"\u003e\n\u003cli\u003eBread\u003c/li\u003e\n\n\n\n\u003cli\u003eMilk\u003c/li\u003e\n\n\n\n\u003cli\u003eButter\u003c/li\u003e\n\n\n\n\u003cli\u003eApples\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"all-can-be-combined\"\u003eAll can be combined\u003c/h3\u003e\n\n\n\u003cp\u003eIf you ever feel the need, all list attributes can be combined in one (ordered) list.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;ol reversed start=\u0026#34;2\u0026#34; type=\u0026#34;i\u0026#34;\u0026gt;\n  \u0026lt;li\u0026gt;Bread\u0026lt;/li\u0026gt;\n  \u0026lt;li value=\u0026#34;4\u0026#34;\u0026gt;Milk\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Butter\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Apples\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col reversed=\"\" start=\"2\"\u003e\n\u003cli\u003eBread\u003c/li\u003e\n\n\n\n\u003cli\u003eMilk\u003c/li\u003e\n\n\n\n\u003cli\u003eButter\u003c/li\u003e\n\n\n\n\u003cli\u003eApples\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"-do-we-need-them-if-we-now-have-css-\"\u003e* Do we need them if we now have CSS?\u003c/h3\u003e\n\n\n\u003cp\u003eFunny enough, the \u003ca href=\"https://www.w3.org/TR/REC-CSS1-961217#list-style-type\" rel=\"noopener\"\u003efirst CSS specification\u003c/a\u003e already included \u003ccode\u003elist-style-type\u003c/code\u003e and other properties to style lists, and it was released before \u003ca href=\"https://www.w3.org/TR/2018/SPSD-html32-20180315/#ol\" rel=\"noopener\"\u003eHTML 3.2\u003c/a\u003e — the first HTML spec that included some of the previous list attributes. This means that at least on paper, we had CSS list styling before HTML list attributes, so the answer isn’t as simple as “they were there before CSS.”\u003c/p\u003e\n\n\n\n\u003cp\u003eWithout CSS, a static page (such as this guide) won’t be pretty, but at the very least, it should be readable. For example, the \u003ccode\u003etype\u003c/code\u003e attribute ensures that styled ordered lists won’t lose their meaning if CSS is missing, which is especially useful in legal or technical documents. Some attributes wouldn’t have a CSS equivalent until years later, including \u003ccode\u003ereversed\u003c/code\u003e, \u003ccode\u003estart\u003c/code\u003e and \u003ccode\u003evalue\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \n      \u003c/summary\u003e\n  \n\n\u003cp\u003eFor most use cases, styling lists in CSS doesn’t take more than a couple of rules, but even in that brevity, we can find different ways to style the same list.\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"styling-simple-counters-in-css\"\u003e\u003ccode\u003e::marker\u003c/code\u003e or \u003ccode\u003e::before\u003c/code\u003e?\u003c/h3\u003e\n\n\n\n\u003cbaseline-status featureid=\"marker\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/m/marker/\"\u003e\u003ccode\u003e::marker\u003c/code\u003e\u003c/a\u003e pseudo-element represents the counter part of a list item. As a pseudo-element, we can set its \u003ca href=\"https://css-tricks.com/almanac/properties/c/content/\"\u003e\u003ccode\u003econtent\u003c/code\u003e\u003c/a\u003e property to any string to change its counter representation:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli::marker {\n  content: \u0026#34;💜 \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eBread\u003c/li\u003e\n\n\n\n\u003cli\u003eMilk\u003c/li\u003e\n\n\n\n\u003cli\u003eButter\u003c/li\u003e\n\n\n\n\u003cli\u003eApples\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003econtent\u003c/code\u003e in pseudo-elements also accepts images, which allows us to create custom markers:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli::marker {\n  content: url(\u0026#34;./logo.svg\u0026#34;) \u0026#34; \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eBy default, only \u003ccode\u003eli\u003c/code\u003e elements have a \u003ccode\u003e::marker\u003c/code\u003e but we can give it to any element by setting its \u003ca href=\"https://css-tricks.com/almanac/properties/d/display/\"\u003e\u003ccode\u003edisplay\u003c/code\u003e\u003c/a\u003e property to \u003ccode\u003elist-item\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh4 {\n  display: list-item;\n}\n\nh4::marker {\n  content: \u0026#34;◦ \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis will give each \u003ccode\u003eh\u003c/code\u003e4 a \u003ccode\u003e::marker\u003c/code\u003e which we can change to any string:\u003c/p\u003e\n\n\n\u003ch4 id=\"list-title\"\u003eList Title\u003c/h4\u003e\n\n\n\u003cp\u003eHowever, \u003ccode\u003e::marker\u003c/code\u003e is an odd case: it was described in the CSS spec more than 20 years ago, but only gained somewhat reliable support in 2020 and still isn’t fully supported in Safari. What’s worst, only font-related properties (such as \u003ccode\u003efont-size\u003c/code\u003e or \u003ccode\u003ecolor\u003c/code\u003e) are allowed, so we can’t change its \u003ccode\u003emargin\u003c/code\u003e or \u003ccode\u003ebackground-color\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis has led many to use \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/b/after-and-before/\"\u003e\u003ccode\u003e::before\u003c/code\u003e\u003c/a\u003e instead of \u003ccode\u003e::marker\u003c/code\u003e, so you’ll see a lot of CSS in which the author got rid of the \u003ccode\u003e::marker\u003c/code\u003e using \u003ccode\u003elist-style-type: none\u003c/code\u003e and used \u003ccode\u003e::before\u003c/code\u003e instead:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli {\n  /* removes ::marker */\n  list-style-type: none;\n}\n\nli::before {\n  /* mimics ::marker */\n  content: \u0026#34;▸ \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"-list-style-type-\"\u003e\u003ccode\u003elist-style-type\u003c/code\u003e\u003c/h3\u003e\n\n\n\n\u003cbaseline-status featureid=\"list-style\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://css-tricks.com/almanac/properties/l/list-style/\"\u003e\u003ccode\u003elist-style-type\u003c/code\u003e\u003c/a\u003e property can be used to replace the \u003ccode\u003e::marker\u003c/code\u003e‘s string. Unlike \u003ccode\u003e::marker\u003c/code\u003e, \u003ccode\u003elist-style-type\u003c/code\u003e has been around forever and is most people’s go-to option for styling lists. It can take \u003cem\u003ea lot\u003c/em\u003e of different counter styles that are built-in in browsers, but you will probably use one of the following:\u003c/p\u003e\n\n\n\n\u003cp\u003eFor unordered lists:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edisc\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ecircle\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003esquare\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eul {\n  list-style-type: square;\n}\n\nul {\n  list-style-type: circle;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cul\u003e\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eFor ordered lists:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edecimal\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003edecimal-leading-zero\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003elower-roman\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eupper-roman\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003elower-alpha\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eupper-alpha\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  list-style-type: upper-roman;\n}\n\nol {\n  list-style-type: lower-alpha;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003col\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cul\u003e\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cp\u003eYou can find a full list of \u003ca href=\"https://drafts.csswg.org/css-counter-styles-3/#predefined-counters\" rel=\"noopener\"\u003evalid counter styles here\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt can also take \u003ccode\u003enone\u003c/code\u003e to remove the marker altogether, and since not long ago, it can also take a \u003ccode\u003e\u0026lt;string\u0026gt;\u003c/code\u003e for \u003ccode\u003eul\u003c/code\u003e elements.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eul {\n  list-style-type: none;\n}\n\nul {\n  list-style-type: \u0026#34;➡️ \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1024\" height=\"178\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-7.57.43%E2%80%AFAM.png?resize=1024%2C178\u0026amp;ssl=1\" alt=\"Two lists with two items each. The first list has no markers the second list has an emoji of a right arrow for the marker.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-7.57.43%E2%80%AFAM.png?resize=1024%2C178\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-7.57.43%E2%80%AFAM.png?resize=300%2C52\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-7.57.43%E2%80%AFAM.png?resize=768%2C133\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-7.57.43%E2%80%AFAM.png?w=1164\u0026amp;ssl=1 1164w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch2\u003eCreating Custom Counters\u003c/h2\u003e\n      \u003c/summary\u003e\n  \n\n\n\u003cbaseline-status featureid=\"counters\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eFor a long time, there wasn’t a CSS-equivalent to the HTML \u003ccode\u003ereverse\u003c/code\u003e, \u003ccode\u003estart\u003c/code\u003e or \u003ccode\u003evalue\u003c/code\u003e attributes. So if we wanted to reverse or change the start of multiple lists, instead of a CSS class to rule them all, we had to change their HTML one by one. You can imagine how repetitive that would get.\u003c/p\u003e\n\n\n\n\u003cp\u003eBesides, list attributes simply had their limitations: we can’t change how they increment with each item and there isn’t an easy way to attach a prefix or suffix to the counter. And maybe the biggest reason of all is that there wasn’t a way to number things that weren’t lists!\u003c/p\u003e\n\n\n\n\u003cp\u003eCustom counters let us number any collection of elements with a whole new level of customization. The workflow is to:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eInitiate the counter with the \u003ca href=\"https://css-tricks.com/almanac/properties/c/counter-reset/\"\u003e\u003ccode\u003ecounter-reset\u003c/code\u003e\u003c/a\u003e property.\u003c/li\u003e\n\n\n\n\u003cli\u003eIncrement the counter with the \u003ca href=\"https://css-tricks.com/almanac/properties/c/counter-increment/\"\u003e\u003ccode\u003ecounter-increment\u003c/code\u003e\u003c/a\u003e property.\u003c/li\u003e\n\n\n\n\u003cli\u003eIndividually set the counters with the \u003ca href=\"https://css-tricks.com/almanac/properties/c/counter-set/\"\u003e\u003ccode\u003ecounter-set\u003c/code\u003e\u003c/a\u003e property.\u003c/li\u003e\n\n\n\n\u003cli\u003eOutput the counters with either the \u003ca href=\"https://css-tricks.com/almanac/functions/c/counter/\"\u003e\u003ccode\u003ecounter()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://css-tricks.com/almanac/functions/c/counters/\"\u003e\u003ccode\u003ecounters()\u003c/code\u003e\u003c/a\u003e functions.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eAs I mentioned, we can make a list out of any collection of elements, and while this has its accessibility concerns, just for demonstration’s sake, let’s try to turn a collection of headings like this…\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;index\u0026#34;\u0026gt;\n  \u0026lt;h2\u0026gt;The Old Buccaneer\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;The Sea Cook\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;My Shore Adventure\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;The Log Cabin\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;My Sea Adventure\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;Captain Silver\u0026lt;/h2\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…into something that looks list-like. But just because we can make an element look like a list doesn’t always mean we should do it. Be sure to consider how the list will be announced by assistive technologies, like screen readers, and see the \u003ca href=\"#aa-accesibility\"\u003eAccessibility\u003c/a\u003e section for more information.\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"initiating-a-counter-counter-reset-\"\u003eInitiate counters: \u003ccode\u003ecounter-reset\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ca href=\"https://css-tricks.com/almanac/properties/c/counter-reset/\"\u003e\u003ccode\u003ecounter-reset\u003c/code\u003e\u003c/a\u003e property takes two things: the name of the counter as a custom ident and the initial count as an integer. If the initial count isn’t given, then it will start at \u003ccode\u003e0\u003c/code\u003e by default:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.index {\n  counter-reset: index;\n  /* The same as */\n  counter-reset: index 0;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can initiate several counters at once with a space-separated list and set a specific value for each one:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.index {\n  counter-reset: index another-counter 2;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis will start our \u003ccode\u003eindex\u003c/code\u003e counter at \u003ccode\u003e0\u003c/code\u003e (the default) and \u003ccode\u003eanother-counter\u003c/code\u003e at \u003ccode\u003e2.\u003c/code\u003e\u003c/p\u003e\n\n\n\u003ch3 id=\"setting-a-counter-counter-set-\"\u003eSet counters: \u003ccode\u003ecounter-set\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ca href=\"https://css-tricks.com/almanac/properties/c/counter-set/\"\u003e\u003ccode\u003ecounter-set\u003c/code\u003e\u003c/a\u003e works similar to \u003ccode\u003ecounter-reset\u003c/code\u003e: it takes the counter’s name followed by an integer, but this time it will set the count for that element onwards. If the integer is omitted, it will set the counter to \u003ccode\u003e0\u003c/code\u003e by default.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh2:nth-child(2) {\n  counter-set: index;\n  /* same as */\n  counter-set: index 0;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd we can set several counters at once, as well:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh2:nth-child(3) {\n  counter-set: index 5 another-counter 10;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis will set the third \u003ccode\u003eh2\u003c/code\u003e element’s index count to \u003ccode\u003e5\u003c/code\u003e and \u003ccode\u003eanother-counter\u003c/code\u003e to \u003ccode\u003e10\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf there isn’t an active counter with that name, \u003ccode\u003ecounter-set\u003c/code\u003e will initiate it at \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"incrementing-a-counter-counter-increment-\"\u003eIncrement counters: \u003ccode\u003ecounter-increment\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eRight now, we have our counter, but it will stagnate at \u003ccode\u003e0\u003c/code\u003e since we haven’t set which elements should increment it. We can use the counter-increment property for that, which takes the name of the counter and how much it should be incremented by. If we only write the counter’s name, it will increment it by \u003ccode\u003e1\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this case, we want each \u003ccode\u003eh2\u003c/code\u003e title to increment the counter by one, and that should be as easy as setting \u003ccode\u003ecounter-increment\u003c/code\u003e to the counter’s name:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh2 {\n  counter-increment: index;\n  /* same as */\n  counter-increment: index 1;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eJust like with \u003ccode\u003ecounter-reset\u003c/code\u003e, we can increment several counters at once in a space-separated list:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh2 {\n  counter-increment: index another-counter 2;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis will increment \u003ccode\u003eindex\u003c/code\u003e by one and \u003ccode\u003eanother-counter\u003c/code\u003e by two on each \u003ccode\u003eh2\u003c/code\u003e element.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf there isn’t an active counter with that name, \u003ccode\u003ecounter-increment\u003c/code\u003e will initiate it at \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"outputing-a-counter-counter-and-counters-\"\u003eOutput simple lists: \u003ccode\u003ecounter()\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eSo far, we won’t see any change in the counter representation. The counters are \u003cem\u003ecounting\u003c/em\u003e but not \u003cem\u003eshowing\u003c/em\u003e, so to output the counter’s result we use the \u003ca href=\"https://css-tricks.com/almanac/functions/c/counter/\"\u003e\u003ccode\u003ecounter()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://css-tricks.com/almanac/functions/c/counters/\"\u003e\u003ccode\u003ecounters()\u003c/code\u003e\u003c/a\u003e functions. Yes, those are two functions with similar names but important differences.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003ecounter()\u003c/code\u003e function takes the name of a counter and outputs its content as a string. If many active counters have the same name, it will select the one that is defined closest to the element, so we can only output one counter at a time.\u003c/p\u003e\n\n\n\n\u003cp\u003eAs mentioned earlier, we can set an element’s \u003ccode\u003edisplay\u003c/code\u003e to \u003ccode\u003elist-item\u003c/code\u003e to work with its \u003ccode\u003e::marker\u003c/code\u003e pseudo-element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh2 {\n  display: list-item;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThen, we can use \u003ccode\u003ecounter()\u003c/code\u003e in its \u003ccode\u003econtent\u003c/code\u003e property to output the current count. This allows us to prefix and suffix the counter by writing a string before or after the \u003ccode\u003ecounter()\u003c/code\u003e function:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh2::marker {\n  content: \u0026#34;Part \u0026#34; counter(index) \u0026#34;: \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1024\" height=\"787\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.37%E2%80%AFAM.png?resize=1024%2C787\u0026amp;ssl=1\" alt=\"List of six chapters formatted as Part 1, Part 2, et cetera.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.37%E2%80%AFAM.png?resize=1024%2C787\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.37%E2%80%AFAM.png?resize=300%2C230\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.37%E2%80%AFAM.png?resize=768%2C590\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.37%E2%80%AFAM.png?w=1122\u0026amp;ssl=1 1122w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAlternatively, we can use the everyday \u003ccode\u003e::before\u003c/code\u003e pseudo-element to the same effect:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh2::before {\n  content: \u0026#34;Part \u0026#34; counter(index) \u0026#34;: \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"nested\"\u003eOutput nested lists: \u003ccode\u003ecounters()\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003e\u003ccode\u003ecounter()\u003c/code\u003e works great for most situations, but what if we wanted to do a nested list like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e1. Paradise Beaches\n   1.1. Hawaiian Islands\n   1.2. Caribbean Getaway\n        1.2.1. Aruba\n        1.2.2. Barbados\n2. Outdoor Escapades\n   2.1 National Park Hike\n   2.2. Mountain Skiing Trip\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe would need to initiate individual counters and write different \u003ccode\u003ecounter()\u003c/code\u003e functions for each level of nesting, and that’s only possible if we know how deep the nesting goes, which we simply don’t at times.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this case, we use the \u003ccode\u003ecounters()\u003c/code\u003e function, which also takes the name of a counter as an argument but instead of just outputting its content, it will join all active counters with that name into a single string and output it. To do so, it takes a string as a second argument, usually something like a dot (\u003ccode\u003e\u0026#34;.\u0026#34;\u003c/code\u003e) or dash (\u003ccode\u003e\u0026#34;-\u0026#34;\u003c/code\u003e) that will be used between counters to join them.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe can use \u003ccode\u003ecounter-reset\u003c/code\u003e and \u003ccode\u003ecounter-increment\u003c/code\u003e to initiate a counter for each \u003ccode\u003eol\u003c/code\u003e element, while each \u003ccode\u003eli\u003c/code\u003e will increment its closest counter by 1:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  counter-reset: item;\n}\n\nli {\n  counter-increment: item;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eBut this time, instead of using \u003ccode\u003ecounter()\u003c/code\u003e (which would only display one counter per item), we will use \u003ccode\u003ecounters()\u003c/code\u003e to join all active counters by a string (e.g. \u003ccode\u003e\u0026#34;.\u003c/code\u003e“) and output them at once:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli::marker {\n  content: counters(item, \u0026#34;.\u0026#34;) \u0026#34;. \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" decoding=\"async\" width=\"1110\" height=\"632\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.58%E2%80%AFAM.png?resize=1110%2C632\u0026amp;ssl=1\" alt=\"List of outdoor travel destinations containing nested lists formatted with decimal markers.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.58%E2%80%AFAM.png?w=1110\u0026amp;ssl=1 1110w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.58%E2%80%AFAM.png?resize=300%2C171\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.58%E2%80%AFAM.png?resize=1024%2C583\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.04.58%E2%80%AFAM.png?resize=768%2C437\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"styling-counters\"\u003eStyling Counters\u003c/h3\u003e\n\n\n\u003cp\u003eBoth the \u003ccode\u003ecounter()\u003c/code\u003e and \u003ccode\u003ecounters()\u003c/code\u003e functions accept one additional, yet optional, last argument representing the counter style, the same ones we use in the \u003ccode\u003elist-style-type\u003c/code\u003e property. So in our last two examples, we could change the counter styles to Roman numbers and alphabetic letters, respectively:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh2::marker {\n  content: \u0026#34;Part \u0026#34; counter(index, upper-roman) \u0026#34;: \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1116\" height=\"856\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.09.15%E2%80%AFAM.png?resize=1116%2C856\u0026amp;ssl=1\" alt=\"List of chapter titles with the marker saying Part 1, Part 2, et cetera, formatted as Roman numerals.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.09.15%E2%80%AFAM.png?w=1116\u0026amp;ssl=1 1116w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.09.15%E2%80%AFAM.png?resize=300%2C230\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.09.15%E2%80%AFAM.png?resize=1024%2C785\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.09.15%E2%80%AFAM.png?resize=768%2C589\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli::marker {\n  content: counters(item, \u0026#34;.\u0026#34;, lower-alpha) \u0026#34;. \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1114\" height=\"630\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.10.53%E2%80%AFAM.png?resize=1114%2C630\u0026amp;ssl=1\" alt=\"List of outdoor travel destinations containing nested lists formatted with lowercase letters.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.10.53%E2%80%AFAM.png?w=1114\u0026amp;ssl=1 1114w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.10.53%E2%80%AFAM.png?resize=300%2C170\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.10.53%E2%80%AFAM.png?resize=1024%2C579\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.10.53%E2%80%AFAM.png?resize=768%2C434\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"reverse-counters\"\u003eReverse Counters\u003c/h3\u003e\n\n\n\u003cp\u003eIt’s possible to count backward using custom counters, but we need to know beforehand the number of elements we’ll count. So for example, if we want to make a Top Five list in reversed order:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;h1\u0026gt;Best rated animation movies\u0026lt;/h1\u0026gt;\n\n\u0026lt;ol\u0026gt;\n  \u0026lt;li\u0026gt;Toy Story 2\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Toy Story 1\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Finding Nemo\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;How to Train your Dragon\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Inside Out\u0026lt;/li\u0026gt;\n\u0026lt;/ol\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe have to initiate our counter at the total number of elements plus one (so it doesn’t end at \u003ccode\u003e0\u003c/code\u003e):\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  counter-reset: movies 6;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd then set the increment to a negative integer:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli {\n  counter-increment: movies -1;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTo output the count we use \u003ccode\u003ecounter()\u003c/code\u003e as we did before:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli::marker {\n  content: counter(movies) \u0026#34;. \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1112\" height=\"410\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.11.50%E2%80%AFAM.png?resize=1112%2C410\u0026amp;ssl=1\" alt=\"List of five movies with the markers displayed in reverse order.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.11.50%E2%80%AFAM.png?w=1112\u0026amp;ssl=1 1112w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.11.50%E2%80%AFAM.png?resize=300%2C111\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.11.50%E2%80%AFAM.png?resize=1024%2C378\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.11.50%E2%80%AFAM.png?resize=768%2C283\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThere is also a way to write reversed counters supported in Firefox, but \u003cstrong\u003eit hasn’t shipped to any other browser\u003c/strong\u003e. Using the \u003ccode\u003ereversed()\u003c/code\u003e functional notation, we can wrap the counter name while initiating it to say it should be reversed.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  counter-reset: reversed(movies);\n}\n\nli {\n  counter-increment: movies;\n}\n\nli::marker {\n  content: counter(movies) \u0026#34; .\u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch2\u003eStyling Custom Counters\u003c/h2\u003e\n      \u003c/summary\u003e\n  \n\n\n\u003cbaseline-status featureid=\"counter-style\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eThe last section was all about custom counters: we changed from where they started and how they increased, but at the end of the day, their output was styled in one of the browser’s built-in counter styles, usually \u003ccode\u003edecimal\u003c/code\u003e. Now using \u003ca href=\"https://css-tricks.com/almanac/rules/c/counter-style/\"\u003e\u003ccode\u003e@counter-style\u003c/code\u003e\u003c/a\u003e, we’ll build our own counter styles to style any list.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003e@counter-style\u003c/code\u003e at-rule, as its name implies, lets you create custom counter styles. After writing the at-rule it takes a custom ident as a name:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style my-counter-style {\n  /* etc. */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat name can be used inside the properties and functions that take a counter style, such as \u003ccode\u003elist-style-type\u003c/code\u003e or the last argument in \u003ccode\u003ecounter()\u003c/code\u003e and \u003ccode\u003ecounters()\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eul {\n  list-style-type: my-counter-style;\n}\n\nli::marker {\n  content: counter(my-counter, my-counter-style) \u0026#34;. \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhat do we write inside \u003ccode\u003e@counter-style\u003c/code\u003e? Descriptors! How many descriptors? Honestly, a lot. Just look at this quick review of all of them:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esystem\u003c/code\u003e:\u003c/strong\u003e specifies which algorithm will be used to construct the counter’s string representation. (Obligatory)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003enegative\u003c/code\u003e:\u003c/strong\u003e specifies the counter representation if the counter value is negative. (Optional)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eprefix\u003c/code\u003e:\u003c/strong\u003e specifies a character that will be attached \u003cstrong\u003ebefore\u003c/strong\u003e the marker representation and any negative sign. (Optional)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esuffix\u003c/code\u003e:\u003c/strong\u003e specifies a character that will be attached \u003cstrong\u003eafter\u003c/strong\u003e the marker representation and any negative sign. (Optional)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erange\u003c/code\u003e:\u003c/strong\u003e specifies the range in which the custom counter is used. Counter values outside the range will drop to their \u003ccode\u003efallback\u003c/code\u003e counter style. (Optional)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003epad\u003c/code\u003e:\u003c/strong\u003e specifies a minimum width all representations have to reach. Representations shorter than the minimum are padded with a character. (Optional)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003efallback\u003c/code\u003e:\u003c/strong\u003e specifies a fallback counter used whenever a counter style can’t represent a counter value. (Optional)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esymbols\u003c/code\u003e:\u003c/strong\u003e specifies the symbols used by the construction \u003ccode\u003esystem\u003c/code\u003e algorithm. It’s obligatory unless the \u003ccode\u003esystem\u003c/code\u003e is set to \u003ccode\u003eadditive\u003c/code\u003e or \u003ccode\u003eextends\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eadditive-symbols\u003c/code\u003e:\u003c/strong\u003e specifies the symbols used by the construction algorithm when the \u003ccode\u003esystem\u003c/code\u003e descriptor is set to \u003ccode\u003eadditive\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003espeak-as\u003c/code\u003e:\u003c/strong\u003e specifies how screen readers should read the counter style. (Optional)\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eHowever, I’ll focus on the required descriptors first: \u003ccode\u003esystem\u003c/code\u003e, \u003ccode\u003esymbols\u003c/code\u003e and \u003ccode\u003eadditive-symbols\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"the-system-descriptor\"\u003eThe \u003ccode\u003esystem\u003c/code\u003e descriptor\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ccode\u003esymbols\u003c/code\u003e or \u003ccode\u003eadditive-symbols\u003c/code\u003e descriptors define the characters used for the counter style, while \u003ccode\u003esystem\u003c/code\u003e says how to use them.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe valid \u003ccode\u003esystem\u003c/code\u003e values are:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecyclic\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ealphabetic\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003esymbolic\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eadditive\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003efixed\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003eextends\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ecyclic\u003c/code\u003e\u003c/strong\u003e will go through the characters set on \u003ccode\u003esymbols\u003c/code\u003e and repeat them. We can use just one character in the \u003ccode\u003esymbols\u003c/code\u003e to mimic a bullet list:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style cyclic-example {\n  system: cyclic;\n  symbols: \u0026#34;⏵\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eOr alternate between two or more characters:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style cyclic-example {\n  system: cyclic;\n  symbols: \u0026#34;🔸\u0026#34; \u0026#34;🔹\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1118\" height=\"346\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?resize=1118%2C346\u0026amp;ssl=1\" alt=\"List of four items, the first two items are prefixed with an orange diamond marker and a blue diamond marker, respectively.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?w=1118\u0026amp;ssl=1 1118w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?resize=300%2C93\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?resize=1024%2C317\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?resize=768%2C238\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003efixed\u003c/code\u003e\u003c/strong\u003e will write the characters in \u003ccode\u003esymbols\u003c/code\u003e descriptor just one time. In the last example, only the first two items will have a custom counter if set to \u003ccode\u003efixed\u003c/code\u003e, while the others will drop to their \u003ccode\u003efallback\u003c/code\u003e, which is decimal by default.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style multiple-example {\n  system: fixed;\n  symbols: \u0026#34;🔸\u0026#34; \u0026#34;🔹\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1024\" height=\"317\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?resize=1024%2C317\u0026amp;ssl=1\" alt=\"List of four items, the first two items are prefixed with an orange diamond marker and a blue diamond marker, respectively.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?resize=1024%2C317\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?resize=300%2C93\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?resize=768%2C238\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.18.15%E2%80%AFAM.png?w=1118\u0026amp;ssl=1 1118w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eWe can set when the custom counters start by appending an \u003ccode\u003e\u0026lt;integer\u0026gt;\u003c/code\u003e to the \u003ccode\u003efixed\u003c/code\u003e value. For example, the following custom counter will start at the fourth item:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style fixed-example {\n  system: fixed 4;\n  symbols: \u0026#34;💠\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1114\" height=\"334\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.20.11%E2%80%AFAM.png?resize=1114%2C334\u0026amp;ssl=1\" alt=\"List of four items, the last item has a marker formatted as a snowflake emoji.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.20.11%E2%80%AFAM.png?w=1114\u0026amp;ssl=1 1114w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.20.11%E2%80%AFAM.png?resize=300%2C90\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.20.11%E2%80%AFAM.png?resize=1024%2C307\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.20.11%E2%80%AFAM.png?resize=768%2C230\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003enumeric\u003c/code\u003e\u003c/strong\u003e will numerate list items using a \u003cstrong\u003ecustom positional system\u003c/strong\u003e (base-2, base-8, base-16, etc.). Positional systems start at 0, so the first character at \u003ccode\u003esymbols\u003c/code\u003e will be used as 0, the next as 1, and so on. Knowing this, we can make an ordered list using non-decimal numerical systems like hexadecimal:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style numeric-example {\n  system: numeric;\n  symbols: \u0026#34;0\u0026#34; \u0026#34;1\u0026#34; \u0026#34;2\u0026#34; \u0026#34;3\u0026#34; \u0026#34;4\u0026#34; \u0026#34;5\u0026#34; \u0026#34;6\u0026#34; \u0026#34;7\u0026#34; \u0026#34;8\u0026#34; \u0026#34;9\u0026#34; \u0026#34;A\u0026#34; \u0026#34;B\u0026#34; \u0026#34;C\u0026#34; \u0026#34;D\u0026#34; \u0026#34;E\u0026#34; \u0026#34;F\u0026#34;;\n  suffix: \u0026#34;. \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"9\"\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples \u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ealphabetic\u003c/code\u003e\u003c/strong\u003e will enumerate the list items using a custom alphabetical system. It’s similar to the numeric system but with the key difference that it doesn’t have a character for 0, so the next digits are just repeated. For example, if our \u003ccode\u003esymbols\u003c/code\u003e are \u003ccode\u003e\u0026#34;A\u0026#34; \u0026#34;B\u0026#34; \u0026#34;C\u0026#34;\u003c/code\u003e they will wrap to \u003ccode\u003e\u0026#34;AA\u0026#34;, \u0026#34;AB\u0026#34;, \u0026#34;AC\u0026#34;\u003c/code\u003e, then \u003ccode\u003eBA, BB, BC\u003c/code\u003e and so on.\u003c/p\u003e\n\n\n\n\u003cp\u003eSince there is no equivalent for 0 and negative values, they will drop down to their fallback.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style alphabetic-example {\n  system: alphabetic;\n  symbols: \u0026#34;A\u0026#34; \u0026#34;B\u0026#34; \u0026#34;C\u0026#34;;\n  suffix: \u0026#34;. \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\n\n\n\u003cli\u003ecinnamon\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003esymbolic\u003c/code\u003e\u003c/strong\u003e will go through the characters in \u003ccode\u003esymbols\u003c/code\u003e repeating them one more time each iteration. So for example, if our \u003ccode\u003esymbols\u003c/code\u003e are \u003ccode\u003e\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;\u003c/code\u003e, it will go “A”, “B”, and “C”, double them in the next iteration as “AA”, “BB”, and “CC”, then triple them as “AAA”, “BBB”, “CCC” and so on.\u003c/p\u003e\n\n\n\n\u003cp\u003eSince there is no equivalent for 0 and negative values, they will drop down to their fallback.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style symbolic-example {\n  system: symbolic;\n  symbols: \u0026#34;A\u0026#34; \u0026#34;B\u0026#34; \u0026#34;C\u0026#34;;\n  suffix: \u0026#34;. \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\n\n\n\u003cli\u003ecinnamon\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eadditive\u003c/code\u003e\u003c/strong\u003e will give characters a numerical value and add them together to get the counter representation. You can think of it as the way we usually count bills: if we have only $5, $2, and $1 bills, we will add them together to get the desired quantity, trying to keep the number of bills used at a minimum. So to represent 10, we will use two $5 bills instead of ten $1 bills.\u003c/p\u003e\n\n\n\n\u003cp\u003eSince there is no equivalent for negative values, they will drop down to their fallback.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style additive -example {\n  system: additive;\n  additive-symbols: 5 \u0026#34;5️⃣\u0026#34;, 2 \u0026#34;2️⃣\u0026#34;, 1 \u0026#34;1️⃣\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1116\" height=\"414\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.22.24%E2%80%AFAM.png?resize=1116%2C414\u0026amp;ssl=1\" alt=\"List of five grocery items with the markers formatted as emoji numbers.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.22.24%E2%80%AFAM.png?w=1116\u0026amp;ssl=1 1116w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.22.24%E2%80%AFAM.png?resize=300%2C111\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.22.24%E2%80%AFAM.png?resize=1024%2C380\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-9.22.24%E2%80%AFAM.png?resize=768%2C285\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNotice how we use \u003ccode\u003eadditive-symbols\u003c/code\u003e when the system is \u003ccode\u003eadditive\u003c/code\u003e, while we use just \u003ccode\u003esymbols\u003c/code\u003e for the previous systems.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eextends\u003c/code\u003e\u003c/strong\u003e will create a custom style from another one but with modifications. To do so, it takes a \u003ccode\u003e\u0026lt;counter-style-name\u0026gt;\u003c/code\u003e after the \u003ccode\u003eextends\u003c/code\u003e value. For example, we could change the \u003ccode\u003edecimal\u003c/code\u003e counter style default’s \u003ccode\u003esuffix\u003c/code\u003e to a closing parenthesis (\u003ccode\u003e\u0026#34;)\u0026#34;\u003c/code\u003e)`:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style extends-example {\n  system: extends decimal;\n  suffix: \u0026#34;) \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003ecinnamon\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003ePer spec, “If a \u003ccode\u003e@counter-style\u003c/code\u003e uses the \u003ccode\u003eextends\u003c/code\u003e system, it must not contain a \u003ccode\u003esymbols\u003c/code\u003e or \u003ccode\u003eadditive-symbols\u003c/code\u003e descriptor, or else the \u003ccode\u003e@counter-style\u003c/code\u003e rule is invalid.”\u003c/p\u003e\n\n\n\u003ch3 id=\"the-other-descriptors\"\u003eThe other descriptors\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003enegative\u003c/code\u003e\u003c/strong\u003e descriptor allows us to create a custom representation for a list’s negative values. It can take one or two characters: The first one is prepended to the counter, and by default it’s the \u003cem\u003ehyphen-minus\u003c/em\u003e (\u003ccode\u003e\u0026#34;-\u0026#34;\u003c/code\u003e). The second one is appended to the symbol. For example, we could enclose negative representations into parenthesis \u003ccode\u003e(2), (1), 0, 1, 2\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style negative-example {\n  system: extends decimal;\n  negative: \u0026#34;(\u0026#34; \u0026#34;)\u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003col start=\"-2\"\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003eprefix\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003esuffix\u003c/code\u003e\u003c/strong\u003e descriptors allow us to prepend and append, respectively, a character to the counter representation. We can use it to add a character at the beginning of each counter using \u003ccode\u003eprefix\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style prefix-suffix-example {\n  system: extends decimal;\n  prefix: \u0026#34;(\u0026#34;;\n  suffix: \u0026#34;) \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003erange\u003c/code\u003e\u003c/strong\u003e descriptor defines \u003cstrong\u003ean inclusive\u003c/strong\u003e range in which the counter style is used. We can define a bounded range by writing one \u003ccode\u003e\u0026lt;integer\u0026gt;\u003c/code\u003e next to another. For example, a range of 2 4 will affect elements 2, 3, and 4:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style range-example {\n  system: cyclic;\n  symbols: \u0026#34;‣\u0026#34;;\n  suffix: \u0026#34; \u0026#34;;\n  range: 2 4;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\n\n\n\u003cli\u003ecinnamon\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eOn the other hand, using the \u003ccode\u003einfinite\u003c/code\u003e value we can unbound the range to one side. For example, we could write \u003ccode\u003einfinite \u003c/code\u003e3 so all items up to 3  have a counter style:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style range-example {\n  system: alphabetic;\n  symbols: \u0026#34;A\u0026#34; \u0026#34;B\u0026#34; \u0026#34;C\u0026#34;;\n  suffix: \u0026#34;. \u0026#34;;\n  range: infinite 3;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\n\n\n\u003cli\u003ecinnamon\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003epad\u003c/code\u003e descriptor takes an \u003ccode\u003e\u0026lt;integer\u0026gt;\u003c/code\u003e that represents the minimum width for the counter and a character to pad it. For example, a zero-padded counter style would look like the following:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style pad-example {\n  system: extends decimal;\n  pad: 3 \u0026#34;0\u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eThe \u003cstrong\u003e\u003ccode\u003efallback\u003c/code\u003e\u003c/strong\u003e descriptor allows you to define which counter style should be used as a fallback whenever we can’t represent a specific count. For example, the following counter style is \u003ccode\u003efixed\u003c/code\u003e and will fallback to \u003ccode\u003elower-roman\u003c/code\u003e after the sixth item:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style fallback-example {\n  system: fixed;\n  symbols: \u0026#34;⚀\u0026#34; \u0026#34;⚁\u0026#34; \u0026#34;⚂\u0026#34; \u0026#34;⚃\u0026#34;;\n  fallback: lower-roman;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\n\n\n\u003cli\u003ecinnamon\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eLastly, the \u003ccode\u003espeak-as\u003c/code\u003e descriptor hints to speech readers on how the counter style should be read. It can be:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eauto\u003c/code\u003e Uses the \u003ccode\u003esystem\u003c/code\u003e default.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ebullets\u003c/code\u003e reads an unordered list. By default, \u003ccode\u003ecyclic\u003c/code\u003e systems are read as \u003ccode\u003ebullets\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003enumbers\u003c/code\u003e reads the counter’s numeric value in the content language. By default, \u003ccode\u003eadditive\u003c/code\u003e, \u003ccode\u003efixed\u003c/code\u003e, \u003ccode\u003enumeric\u003c/code\u003e, and, \u003ccode\u003esymbolic\u003c/code\u003e are read as \u003ccode\u003enumbers\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ewords\u003c/code\u003e reads the counter representation as words.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003espell-out\u003c/code\u003e reads the counter representation letter by letter. By default, \u003ccode\u003ealphabetic\u003c/code\u003e is read as \u003ccode\u003espell-out\u003c/code\u003e.\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e\u0026lt;counter-style-name\u0026gt;\u003c/code\u003e It will use that counter’s \u003ccode\u003espeak-as\u003c/code\u003e value.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@counter-style speak-as-example {\n  system: extends decimal;\n  prefix: \u0026#34;Item \u0026#34;;\n  suffix: \u0026#34; is \u0026#34;;\n  speak-as: words;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"-symbols-\"\u003e\u003ccode\u003esymbols()\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ccode\u003esymbols()\u003c/code\u003e function defines an only-use counter style without the need to do a whole \u003ca href=\"https://css-tricks.com/almanac/rules/c/counter-style/\"\u003e\u003ccode\u003e@counter-style\u003c/code\u003e\u003c/a\u003e, but at the cost of missing some features. It can be used inside the \u003ca href=\"https://css-tricks.com/list-style-recipes/\"\u003e\u003ccode\u003elist-style-type\u003c/code\u003e\u003c/a\u003e property and the \u003ccode\u003ecounter()\u003c/code\u003e and \u003ccode\u003ecounters()\u003c/code\u003e functions.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eol {\n  list-style-type: symbols(cyclic \u0026#34;🥬\u0026#34;);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHowever, its browser support is appalling since it’s only supported in Firefox.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch2\u003eImages in Counters\u003c/h2\u003e\n      \u003c/summary\u003e\n  \n\n\u003cp\u003eIn theory, there are four ways to add images to lists:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003elist-style-image\u003c/code\u003e property\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003econtent\u003c/code\u003e property\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003esymbols\u003c/code\u003e descriptor in \u003ccode\u003e@counter-style\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003esymbols()\u003c/code\u003e function.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eIn practice, the only supported ways are using \u003ccode\u003elist-style-image\u003c/code\u003e and \u003ccode\u003econtent\u003c/code\u003e, since support for images in \u003ccode\u003e@counter-style\u003c/code\u003e and support in general for \u003ccode\u003esymbols()\u003c/code\u003e \u003cem\u003eisn’t the best\u003c/em\u003e (it’s pretty bad).\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"using-list-style-image-\"\u003e\u003ccode\u003elist-style-image\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ccode\u003elist-style-image\u003c/code\u003e can take an image or a gradient. In this case, we want to focus on images but gradients can also be used to create custom square bullets:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli {\n  list-style-image: conic-gradient(red, yellow, lime, aqua, blue, magenta, red);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eSadly, changing the shape would require styling more the \u003ccode\u003e::marker\u003c/code\u003e and this isn’t currently possible.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo use an image, we pass its \u003ccode\u003eurl()\u003c/code\u003e, make sure is small enough to work as a counter:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli {\n  list-style-image: url(\u0026#34;./logo.svg\u0026#34;);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"using-content-\"\u003e\u003ccode\u003econtent\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThe \u003ccode\u003econtent\u003c/code\u003e property works similar to \u003ccode\u003elist-style-image\u003c/code\u003e: we pass the image’s \u003ccode\u003eurl()\u003c/code\u003e and provide a little padding on the left as an empty string:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli::marker {\n  content: url(\u0026#34;./logo.svg\u0026#34;) \u0026#34; \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1172\" height=\"338\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-8.29.53%E2%80%AFAM.png?resize=1172%2C338\u0026amp;ssl=1\" alt=\"A list with four grocery items. The marker is the CSS-Tricks logo.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-8.29.53%E2%80%AFAM.png?w=1172\u0026amp;ssl=1 1172w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-8.29.53%E2%80%AFAM.png?resize=300%2C87\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-8.29.53%E2%80%AFAM.png?resize=1024%2C295\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/02/Screenshot-2025-02-21-at-8.29.53%E2%80%AFAM.png?resize=768%2C221\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch2\u003eSpacing Things Out\u003c/h2\u003e\n      \u003c/summary\u003e\n  \n\n\u003cp\u003eYou may notice in the last part how the image — depending on its size — isn’t completely centered on the text, and also that we provide an empty string on \u003ccode\u003econtent\u003c/code\u003e properties for spacing instead of giving things either a \u003ccode\u003epadding\u003c/code\u003e or \u003ccode\u003emargin\u003c/code\u003e. Well, there’s an explanation for all of this, as since spacing is one of the biggest pain points when it comes to styling lists.\u003c/p\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"margins-and-paddings-are-_wacky_\"\u003eMargins and paddings are \u003cem\u003ewacky\u003c/em\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eSpacing the \u003ccode\u003e::marker\u003c/code\u003e from the list item should be as easy as increasing the marker’s or list \u003ccode\u003emargin\u003c/code\u003e, but in reality, it takes a lot more work.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, the \u003ccode\u003epadding\u003c/code\u003e and \u003ccode\u003emargin\u003c/code\u003e properties aren’t allowed in \u003ccode\u003e::marker\u003c/code\u003e. While lists have two types of elements: the list wrapper (usually \u003ccode\u003eol\u003c/code\u003e or \u003ccode\u003eul\u003c/code\u003e) and the list item (\u003ccode\u003eli\u003c/code\u003e), each with a default \u003ccode\u003epadding\u003c/code\u003e and \u003ccode\u003emargin\u003c/code\u003e. Which should we use?\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can test each property in this demo by Šime Vidas in his article dedicated to \u003ca href=\"https://css-tricks.com/everything-you-need-to-know-about-the-gap-after-the-list-marker/\"\u003ethe gap after the list marker\u003c/a\u003e:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eYou’ll notice how the only property that affects the spacing within \u003ccode\u003e::marker\u003c/code\u003e and the text is the \u003ccode\u003eli\u003c/code\u003e item’s \u003ccode\u003epadding\u003c/code\u003e property, while the rest of the spacing properties will move the entire list item. Another thing to note is even when the \u003ccode\u003epadding\u003c/code\u003e is set to \u003ccode\u003e0px\u003c/code\u003e, there is a space after the \u003ccode\u003e::marker\u003c/code\u003e. This is set by browsers and will vary depending on which browser you’re using.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"-list-style-position-\"\u003e\u003ccode\u003elist-style-position\u003c/code\u003e\u003c/h3\u003e\n\n\n\n\u003cbaseline-status featureid=\"list-style\"\u003e\u003c/baseline-status\u003e\n\n\n\n\u003cp\u003eOne last thing you may notice in the demo is a checkbox for the \u003ccode\u003elist-style-position\u003c/code\u003e property, and how once you set it to \u003ccode\u003einside\u003c/code\u003e, the \u003ccode\u003e::marker\u003c/code\u003e will move to the inside of the box, at the cost of removing any spacing given by the list item’s padding.\u003c/p\u003e\n\n\n\n\u003cp\u003eBy default, markers are rendered \u003cem\u003eoutside\u003c/em\u003e the \u003ccode\u003eul\u003c/code\u003e element’s box. A lot of times, this isn’t the best behavior: markers sneak out of elements, \u003ccode\u003etext-align\u003c/code\u003e won’t align the marker, and paradoxically, centered lists with \u003ccode\u003eflex\u003c/code\u003e or \u003ccode\u003egrid\u003c/code\u003e won’t look completely centered since the markers are outside the box.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo change this we can use the \u003ccode\u003elist-style-position\u003c/code\u003e property, it can be either \u003ccode\u003eoutside\u003c/code\u003e (default) and \u003ccode\u003einside\u003c/code\u003e to define where to position the list marker: either outside or the outside of the \u003ccode\u003eul\u003c/code\u003e box.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eul {\n  border: solid 2px red;\n}\n\n.inside {\n  list-style-position: inside;\n}\n\n.outside {\n  list-style-position: outside;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cul\u003e\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003eapple\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\n\u003cdiv\u003e\u003ch3 id=\"-content-and-empty-strings-as-suffixes\"\u003e\u003ccode\u003econtent\u003c/code\u003e with empty strings\u003c/h3\u003e\n\n\n\u003cp\u003eIn the same article, Šime says:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eAppending a space to \u003ccode\u003econtent\u003c/code\u003e feels more like a workaround than the optimal solution.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eAnd I completely agree that’s true, but just using \u003ccode\u003e::marker\u003c/code\u003e there isn’t a \u003cem\u003ecorrect\u003c/em\u003e way to add spacing between the \u003ccode\u003e::marker\u003c/code\u003e and the list text, especially since most people prefer to set \u003ccode\u003elist-style-position\u003c/code\u003e to \u003ccode\u003einside\u003c/code\u003e. So, as much as it pains me to say it, the simplest way to increase the gap after the marker is to suffix the content property with an empty string:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli::marker {\n    content: \u0026#34;•   \u0026#34;;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ebread\u003c/li\u003e\n\n\n\n\u003cli\u003emilk\u003c/li\u003e\n\n\n\n\u003cli\u003ebutter\u003c/li\u003e\n\n\n\n\u003cli\u003eapples\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eBUT! This is only if we want to be purists and stick with the \u003ccode\u003e::marker\u003c/code\u003e pseudo-element because, in reality, there is a much better way to position that marker: \u003cstrong\u003enot using it at all\u003c/strong\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\n\n\n\u003cdiv\u003e\u003ch3 id=\"just-use-before-\"\u003eJust use \u003ccode\u003e::before\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eThere is a reason people love using the \u003ccode\u003e::before\u003c/code\u003e more than \u003ccode\u003e::marker\u003c/code\u003e. First, we can’t use something like CSS Grid or Flexbox since changing the display of \u003ccode\u003eli\u003c/code\u003e to something other than \u003ccode\u003elist-item\u003c/code\u003e will remove the \u003ccode\u003e::marker\u003c/code\u003e, and we can set the \u003ccode\u003e::marker\u003c/code\u003e‘s height or width properties to better align it.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s be real, \u003ccode\u003e::marker\u003c/code\u003e works fine when we just want simple styling. But we are not here for simple styling! Once we want something more involved, \u003ccode\u003e::marker\u003c/code\u003e will fall short and we’ll have to use the \u003ccode\u003e::before\u003c/code\u003e pseudo-element.\u003c/p\u003e\n\n\n\n\u003cp\u003eUsing \u003ccode\u003e::before\u003c/code\u003e means we can use Flexbox, which allows for two things we couldn’t do before:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eVertically center the marker with the text\u003c/li\u003e\n\n\n\n\u003cli\u003eEasily increase the gap after the marker\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eBoth can be achieved with Flexbox:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eli {\n  display: flex;\n  align-items: center; /* Vertically center the marker */\n  gap: 20px; /* Increases the gap */\n\n  list-style-type: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe original \u003ccode\u003e::marker\u003c/code\u003e is removed by changing the \u003ccode\u003edisplay\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch2\u003eAccesibility\u003c/h2\u003e\n      \u003c/summary\u003e\n  \n\n\u003cp\u003eIn a previous section we turned things that weren’t lists into seemingly looking lists, so the question arises: \u003cem\u003eshould\u003c/em\u003e we actually do that? Doesn’t it hurt accessibility to make something look like a list when it isn’t one? As always, \u003cem\u003eit depends\u003c/em\u003e. For a visual user, all the examples in this entry look all right, but for assistive technology users, some examples lack the necessary markup for accessible navigation.\u003c/p\u003e\n\n\n\n\u003cp\u003eTake for example our initial demo. Here, listing titles serves as decoration since the markup structure is given by the titles themselves. It’s the same deal for the counting siblings demo from earlier, as assistive technology users can read the document through the title structure.\u003c/p\u003e\n\n\n\n\u003cp\u003eHowever, this is the exception rather than the norm. That means a couple of the examples we looked at would fail if we need the list to be announced as a list in assistive technology, like screen readers. For example this list we looked at earlier:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;index\u0026#34;\u0026gt;\n  \u0026lt;h2\u0026gt;The Old Buccaneer\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;The Sea Cook\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;My Shore Adventure\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;The Log Cabin\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;My Sea Adventure\u0026lt;/h2\u0026gt;\n  \u0026lt;h2\u0026gt;Captain Silver\u0026lt;/h2\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…should be written as a list instead:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;ul class=\u0026#34;index\u0026#34;\u0026gt;\n  \u0026lt;li\u0026gt;The Old Buccaneer\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;The Sea Cook\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;My Shore Adventure\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;The Log Cabin\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;My Sea Adventure\u0026lt;/li\u0026gt;\n  \u0026lt;li\u0026gt;Captain Silver\u0026lt;/li\u0026gt;\n\u0026lt;/ul\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eListing elements is rarely used just as decoration, so as a rule of thumb, use lists in the markup even if you are planning to change them with CSS.\u003c/p\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch2\u003eAlmanac References\u003c/h2\u003e\n      \u003c/summary\u003e\n  \n\u003ch3 id=\"list-properties\"\u003eList Properties\u003c/h3\u003e\n\n\n    \t\t\n    \n  \n\n\n\u003ch3 id=\"counters\"\u003eCounters\u003c/h3\u003e\n\n\n    \t\t\n    \n  \n\n\n\u003ch3 id=\"custom-counter-styles\"\u003eCustom Counter Styles\u003c/h3\u003e\n\n\n    \t\t\n    \n  \n\n\n\u003ch3 id=\"pseudoelements\"\u003ePseudo-Elements\u003c/h3\u003e\n\n\n    \t\t\n    \n  \n\n\n\u003c/details\u003e\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          \u003ch2\u003eMore Tutorials \u0026amp; Tricks!\u003c/h2\u003e\n      \u003c/summary\u003e\n  \n\n    \t\t\n    \n  \n\n\n\u003c/details\u003e    \n    \u003c/div\u003e\n\n  \u003c/article\u003e\n\n\u003c/main\u003e\n\n\n\n  \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "33 min read",
  "publishedTime": "2025-03-17T10:25:04-06:00",
  "modifiedTime": "2025-03-17T10:26:07-06:00"
}
