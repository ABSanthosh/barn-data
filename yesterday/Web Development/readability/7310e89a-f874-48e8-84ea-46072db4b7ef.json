{
  "id": "7310e89a-f874-48e8-84ea-46072db4b7ef",
  "title": "One of Those “Onboarding” UIs, With Anchor Positioning",
  "link": "https://css-tricks.com/one-of-those-onboarding-uis-with-anchor-positioning/",
  "description": "We can anchor one element to another. We can also attach one element to multiple anchors. In this experiment, Ryan riffs on those ideas and comes up with a new way to transition between two anchors and the result is a practical use case that would normally require JavaScript. One of Those “Onboarding” UIs, With Anchor Positioning originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Ryan Trimble",
  "published": "Mon, 02 Dec 2024 14:02:13 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "anchor positioning"
  ],
  "byline": "Ryan Trimble",
  "length": 21315,
  "excerpt": "We can anchor one element to another. We can also attach one element to multiple anchors. In this experiment, Ryan riffs on those ideas and comes up with a new way to transition between two anchors and the result is a practical use case that would normally require JavaScript.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Welcome to “Anchor Positioning 101” where we will be exploring this interesting new CSS feature. Our textbook for this class will be the extensive “Anchor Positioning Guide” that Juan Diego Rodriguez published here on CSS-Tricks. I’m excited for this one. Some of you may remember when CSS-Tricks released the “Flexbox Layout Guide” or the “Grid Layout Guide” — I certainly do and still have them both bookmarked! I spend a lot of time flipping between tabs to make sure I have the right syntax in my “experimental” CodePens. I’ve been experimenting with CSS anchor positioning like the “good old days” since Juan published his guide, so I figured it’d be fun to share some of the excitement, learn a bit, experiment, and of course: build stuff! CSS Anchor Positioning introduction Anchor positioning lets us attach — or “anchor” — one element to one or more other elements. More than that, it allows us to define how a “target” element (that’s what we call the element we’re attaching to an anchor element) is positioned next to the anchor-positioned element, including fallback positioning in the form of a new @position-try at-rule. The most hand-wavy way to explain the benefits of anchor positioning is to think of it as a powerful enhancement to position: absolute; as it helps absolutely-positioned elements do what you expect. Don’t worry, we’ll see how this works as we go. Anchor positioning is currently a W3C draft spec, so you know it’s fresh. It’s marked as “limited availability” in Baseline which at the time of writing means it is limited to Chromium-based browsers (versions 125+). That said, the considerate folks over at Oddbird have a polyfill available that’ll help out other browsers until they ship support. DesktopChromeFirefoxIEEdgeSafari125NoNo125NoMobile / TabletAndroid ChromeAndroid FirefoxAndroidiOS Safari131No131No Oddbird contributes polyfills for many new CSS features and you (yes, you!) can support their work on Github or Open Collective! Tab Atkins-Bittner, contributing author to the W3C draft spec on anchor positioning, spoke on the topic at CSS Day 2024. The full conference talk is available on YouTube: Here at CSS-Tricks, Juan demonstrated how to mix and match anchor positioning with view-driven animations for an awesome floating notes effect: Front-end friend Kevin Powell recently released a video demonstrating how “CSS Popover + Anchor Positioning is Magical”. And finally, in the tradition of “making fun games to learn CSS,” Thomas Park released Anchoreum (a “Flexbox Froggy“-type game) to learn about CSS anchor positioning. Highly recommend checking this out to get the hang of the position-area property! The homework OK, now that we’re caught up on what CSS anchor positioning is and the excitement surrounding it, let’s talk about what it does. Tethering an element to another element? That has a lot of potential. Quite a few instances I can remember where I’ve had to fight with absolute positioning and z-index in order to get something positioned just right. Let’s take a quick look at the basic syntax. First, we need two elements, an anchor-positioned element and the target element that will be tethered to it. \u003c!-- Anchor element --\u003e \u003cdiv id=\"anchor\"\u003e Anchor \u003c/div\u003e \u003c!-- Target element --\u003e \u003cdiv id=\"target\"\u003e Target \u003c/div\u003e We set an element as an anchor-positioned element by providing it with an anchor-name. This is a unique name of our choosing, however it needs the double-dash prefix, like CSS custom properties. #anchor { anchor-name: --anchor; } As for our target element, we’ll need to set position: absolute; on it as well as tell the element what anchor to tether to. We do that with a new CSS property, position-anchor using a value that matches the anchor-name of our anchor-positioned element. #anchor { anchor-name: --anchor; } #target { position: absolute; position-anchor: --anchor; } May not look like it yet, but now our two elements are attached. We can set the actual positioning on the target element by providing a position-area. To position our target element, position-area creates an invisible 3×3 grid over the anchor-positioned element. Using positioning keywords, we can designate where the target element appears near the anchor-positioned element. #target { position: absolute; position-anchor: --anchor; position-area: top center; } Now we see that our target element is anchored to the top-center of our anchor-positioned element! Anchoring pseudo-elements While playing with anchor positioning, I noticed you can anchor pseudo-elements, just the same as any other element. #anchor { anchor-name: --anchor; \u0026::before { content: \"Target\"; position: absolute; position-anchor: --anchor; left: anchor(center); bottom: anchor(center); } } Might be useful for adding design flourishes to elements or adding functionality as some sort of indicator. Moving anchors Another quick experiment was to see if we can move anchors. And it turns out this is possible! Notice the use of anchor() functions instead of position-area to position the target element. #target { position: absolute; position-anchor: --anchor-one; top: anchor(bottom); left: anchor(left); } CSS anchor functions are an alternate way to position target elements based on the computed values of the anchor-positioned element itself. Here we are setting the target element’s top property value to match the anchor-positioned element’s bottom value. Similarly, we can set the target’s left property value to match the anchor-positioned element’s left value. Hovering over the container element swaps the position-anchor from --anchor-one to --anchor-two. .container:hover { #target { position-anchor: --anchor-two; } } We are also able to set a transition as we position the target using top and left, which makes it swap smoothly between anchors. Along with being the first to release CSS anchor-positioning, the Chrome dev team recently released new pseudo-selectors related to the \u003cdetails\u003e and \u003csummary\u003e elements. The ::details-content pseudo-selector allows you to style the “hidden” part of the \u003cdetails\u003e element. With this information, I thought: “can I anchor it?” and sure enough, you can! Again, this is definitely not ready for prime-time, but it’s always fun to experiment! Practical examinations Let’s take this a bit further and tackle more practical challenges using CSS anchor positioning. Please keep in mind that all these examples are Chrome-only at the time of writing! Tooltips One of the most straightforward use cases for CSS anchor positioning is possibly a tooltip. Makes a lot of sense: hover over an icon and a label floats nearby to explain what the icon does. I didn’t quite want to make yet another tutorial on how to make a tooltip and luckily for me, Zell Liew recently wrote an article on tooltip best practices, so we can focus purely on anchor positioning and refer to Zell’s work for the semantics. Now, let’s check out one of these tooltips: \u003c!-- ... --\u003e; \u003cli class=\"toolbar-item\"\u003e; \u003cbutton type=\"button\" id=\"inbox-tool\" aria-labelledby=\"inbox-label\" class=\"tool\"\u003e \u003csvg id=\"inbox-tool-icon\"\u003e \u003c!-- SVG icon code ... --\u003e \u003c/svg\u003e \u003c/button\u003e \u003cdiv id=\"inbox-label\" role=\"tooltip\"\u003e \u003cp\u003eInbox\u003c/p\u003e \u003c/div\u003e \u003c/li\u003e \u003c!-- ... --\u003e The HTML is structured in a way where the tooltip element is a sibling of our anchor-positioned \u003cbutton\u003e, notice how it has the [aria-labelledby] attribute set to match the tooltip’s [id]. The tooltip itself is a generic \u003cdiv\u003e, semantically enhanced to become a tooltip with the [role=\"tooltip\"] attribute. We can also use [role=\"tooltip\"] as a semantic selector to add common styles to tooltips, including the tooltip’s positioning relative to its anchor. First, let’s turn our button into an anchored element by giving it an anchor-name. Next, we can set the target element’s position-anchor to match the anchor-name of the anchored element. By default, we can set the tooltip’s visibility to hidden, then using CSS sibling selectors, if the target element receives hover or focus-visible, we can then swap the visibility to visible. /* Anchor-positioned Element */ #inbox-tool { anchor-name: --inbox-tool; } /* Target element */ [role=\"tooltip\"]#inbox-label { position-anchor: --inbox-tool } /* Target positioning */ [role=\"tooltip\"] { position: absolute; position-area: end center; /* Hidden by default */ visibility: hidden; } /* Visible when tool is hovered or receives focus */ .tool:hover + [role=\"tooltip\"], .tool:focus-visible + [role=\"tooltip\"] { visibility: visible; } Ta-da! Here we have a working, CSS anchor-positioned tooltip! As users of touch devices aren’t able to hover over elements, you may want to explore toggletips instead! Floating disclosures Disclosures are another common component pattern that might be a perfect use case for anchor positioning. Disclosures are typically a component where interacting with a toggle will open and close a corresponding element. Think of the good ol’ \u003cdetail\u003e/\u003csummary\u003e HTML element duo, for example. Currently, if you are looking to create a disclosure-like component which floats over other portions of your user interface, you might be in for some JavaScript, absolute positioning, and z-index related troubles. Soon enough though, we’ll be able to combine CSS anchor positioning with another newer platform feature [popover] to create some incredibly straightforward (and semantically accurate) floating disclosure elements. The Popover API provides a non-modal way to elevate elements to the top-layer, while also baking in some great functionality, such as light dismissals. Zell also has more information on popovers, dialogs, and modality! One of the more common patterns you might consider as a “floating disclosure”-type component is a dropdown menu. Here is the HTML we’ll work with: \u003cnav\u003e \u003cbutton id=\"anchor\"\u003eToggle\u003c/button\u003e \u003cul id=\"target\"\u003e \u003cli\u003e\u003ca href=\"#\"\u003eLink 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eLink 2\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eLink 3\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/nav\u003e We can set our target element, in this case the \u003cul\u003e, to be our popover element by adding the [popover] attribute. To control the popover, let’s add the attribute [popoveraction=\"toggle\"] to enable the button as a toggle, and point the [popovertarget] attribute to the [id] of our target element. \u003cnav\u003e \u003cbutton id=\"anchor\" popoveraction=\"toggle\" popovertarget=\"target\"\u003e Toggle \u003c/button\u003e \u003cul id=\"target\" popover\u003e \u003cli\u003e\u003ca href=\"#\"\u003eLink 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eLink 2\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eLink 3\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/nav\u003e No JavaScript is necessary, and now we have a toggle-able [popover] disclosure element! The problem is that it’s still not tethered to the anchor-positioned element, let’s fix that in our CSS. First, as this is a popover, let’s add a small bit of styling to remove the intrinsic margin popovers receive by default from browsers. ul[popover] { margin: 0; } Let’s turn our button into an anchor-positioned element by providing it with an anchor-name: ul[popover] { margin: 0; } #anchor { anchor-name: --toggle; } As for our target element, we can attach it to the anchor-positioned element by setting its position to absolute and the position-anchor to our anchor-positioned element’s anchor-name: ul[popover] { margin: 0; } #anchor { anchor-name: --toggle; } #target { position: absolute; position-anchor: --toggle; } We can also adjust the target’s positioning near the anchor-positioned element with the position-area property, similar to what we did with our tooltip. ul[popover] { margin: 0; } #anchor { anchor-name: --toggle; } #target { position: absolute; position-anchor: --toggle; position-area: bottom; width: anchor-size(width); } You may notice another CSS anchor function in here, anchor-size()! We can set the target’s width to match the width of the anchor-positioned element by using anchor-size(width). There is one more neat thing we can apply here, fallback positioning! Let’s consider that maybe this dropdown menu might sometimes be located at the bottom of the viewport, either from scrolling or some other reason. We don’t really want it to overflow or cause any extra scrolling, but instead, swap to an alternate location that is visible to the user. Anchor positioning makes this possible with the postion-try-fallbacks property, a way to provide an alternate location for the target element to display near an anchor-positioned element. #target { position: absolute; position-anchor: --toggle; position-area: bottom; postion-try-fallbacks: top; width: anchor-size(width); } To keep things simple for our demo, we can add the opposite value of the value of the postion-area property: top. Shopping cart component We know how to make a tooltip and a disclosure element, now let’s build upon what we’ve learned so far and create a neat, interactive shopping cart component. Let’s think about how we want to mark this up. First, we’ll need a button with a shopping cart icon: \u003cbutton id=\"shopping-cart-toggle\"\u003e \u003csvg id=\"shopping-cart-icon\" /\u003e \u003c!-- SVG icon code ... --\u003e \u003c/svg\u003e \u003c/button\u003e We can already reuse what we learned with our tooltip styles to provide a functioning label for this toggle. Let’s add the class .tool to the button, then include a tooltip as our label. \u003c!-- Toggle --\u003e \u003cbutton id=\"shopping-cart-toggle\" aria-labelledby=\"shopping-cart-label\" class=\"tool\"\u003e \u003csvg id=\"shopping-cart-icon\" /\u003e \u003c!-- SVG icon code ... --\u003e \u003c/svg\u003e \u003c/button\u003e \u003c!-- Tooltip --\u003e \u003cdiv id=\"shopping-cart-label\" role=\"tooltip\" class=\"tooltip\"\u003e \u003cp\u003eShopping Cart\u003c/p\u003e \u003c/div\u003e We’ll need to specify our \u003cbutton\u003e is an anchor-positioned element in CSS with an anchor-name, which we can also set as the tooltip’s position-anchor value to match. button#shopping-cart-toggle { anchor-name: --shopping-cart-toggle; } [role=\"tooltip\"]#shopping-cart-label { position-anchor: --shopping-cart-toggle; } Now we should have a nice-looking tooltip labeling our shopping cart button! But wait, we want this thing to do more than that! Let’s turn it into a disclosure component that reveals a list of items inside the user’s cart. As we are looking to have a floating user-interface with a few actions included, we should consider a \u003cdialog\u003e element. However, we don’t necessarily want to be blocking background content, so we can opt for a non-modal dialog using the[popover] attribute again! \u003c!-- Toggle --\u003e \u003cbutton id=\"shopping-cart-toggle\" aria-labelledby=\"shopping-cart-label\" class=\"tool\" popovertarget=\"shopping-cart\" popoveraction=\"toggle\"\u003e \u003csvg id=\"shopping-cart-icon\" /\u003e \u003c!-- SVG icon code ... --\u003e \u003c/svg\u003e \u003c/button\u003e \u003c!-- Tooltip --\u003e \u003cdiv id=\"shopping-cart-label\" role=\"tooltip\" class=\"tooltip\"\u003e \u003cp\u003eShopping Cart\u003c/p\u003e \u003c/div\u003e \u003c!-- Shopping Cart --\u003e \u003cdialog id=\"shopping-cart\" popover\u003e \u003c!-- Shopping cart template... --\u003e \u003cbutton popovertarget=\"shopping-cart\" popoveraction=\"close\"\u003e Dismiss Cart \u003c/button\u003e \u003c/dialog\u003e To control the popover, we’ve added [popovertarget=\"shopping-cart\"] and [popoveraction=\"toggle\"] to our anchor-positioned element and included a second button within the \u003cdialog\u003e that can also be used to close the dialog with [popoveraction=\"close\"]. To anchor the shopping cart \u003cdialog\u003e to the toggle, we can set position-anchor and position-area: #shopping-cart { position-anchor: --shopping-cart; position-area: end center; } At this point, we should take a moment to realize that we have tethered two elements to the same anchor! We won’t stop there, though. There is one more enhancement we can make to really show how helpful anchor positioning can be: Let’s add a notification badge to the element to describe how many items are inside the cart. Let’s place the badge inside of our anchor-positioned element this time. \u003c!-- Toggle --\u003e \u003cbutton id=\"shopping-cart-toggle\" aria-labelledby=\"shopping-cart-label\" class=\"tool\" popovertarget=\"shopping-cart\" popoveraction=\"toggle\"\u003e \u003csvg id=\"shopping-cart-icon\" /\u003e \u003c!-- SVG icon code ... --\u003e \u003c/svg\u003e \u003c!-- Notification Badge --\u003e \u003cdiv id=\"shopping-cart-badge\" class=\"notification-badge\"\u003e 1 \u003c/div\u003e \u003c/button\u003e \u003c!-- ... --\u003e We can improve our tooltip to include verbiage about how many items are in the cart: \u003c!-- Tooltip --\u003e \u003cdiv id=\"shopping-cart-label\" role=\"tooltip\"\u003e \u003cp\u003eShopping Cart\u003c/p\u003e \u003cp\u003e(1 item in cart)\u003c/p\u003e \u003c/div\u003e Now the accessible name of our anchor-positioned element will be read as Shopping Cart (1 item in cart), which helps provide context to assistive technologies like screen readers. Let’s tether this notification badge to the same anchor as our tooltip and shopping cart \u003cdialog\u003e, we can do this by setting the position-anchor property of the badge to --shopping-cart-toggle: #shopping-cart-badge { position: absolute; position-anchor: --shopping-cart-toggle; } Let’s look at positioning. We don’t want it below or next to the anchor, we want it overlapping, so we can use CSS anchor functions to position it based on the anchor-positioned element’s dimensions. #shopping-cart-badge { position: absolute; position-anchor: --shopping-cart-toggle; bottom: anchor(center); left: anchor(center); } Here we are setting the bottom and left of the target element to match the anchor’s center. This places it in the upper-right corner of the SVG icon! Folks, this means we have three elements anchored now. Isn’t that fantastic? Combining things To put these anchor-positioned elements into perspective, I’ve combined all the techniques we’ve learned so far into a more familiar setting: Disclosure components, dropdown menus, tooltips (and toggletips!), as well as notification badges all made much simpler using CSS anchor positioning! Final project As a final project for myself (and to bring this whole thing around full-circle), I decided to try to build a CSS anchor-positioned-based onboarding tool. I’ve previously attempted to build a tool like this at work, which I called “HandHoldJS” and it… well, it didn’t go so great. I managed to have a lot of the core functionality working using JavaScript, but it meant keeping track of quite a lot of positions and lots of weird things kept happening! Let’s see if we can do better with CSS anchor positioning. Feel free to check out the code on CodePen! I went down quite a rabbit hole on this one, so I’ll provide a bit of a high-level overview here. \u003chand-hold\u003e is a native custom element that works entirely in the light DOM. It sort of falls into the category of an HTML web component, as it is mostly based on enabling its inner HTML. You can specify tour stops to any element on the page by adding [data-tour-stop] attributes with values in the order you want the tour to occur. Inside the \u003chand-hold\u003e element contains a \u003cbutton\u003e to start the tour, a \u003cdialog\u003e element to contain the tour information, \u003csection\u003e elements to separate content between tour stops, a fieldset[data-handhold-navigation] element which holds navigation radio buttons, as well as another \u003cbutton\u003e to end the tour. Each \u003csection\u003e element corresponds to a tour stop with a matching [data-handhold-content] attribute applied. Using JavaScript, \u003chand-hold\u003e dynamically updates tour stops to be anchor-positioned elements, which the \u003cdialog\u003e can attach itself (there is a sneaky pseudo-element attached to the anchor to highlight the tour stop element!). Although the \u003cdialog\u003e element is attached via CSS anchor positioning, it also moves within the DOM to appear next to the anchor-position element in the accessibility tree. The (well-meaning) intention here is to help provide more context to those who may be navigating via assistive devices by figuring out which element the dialog is referring to. Believe me, though, this thing is far from perfect as an accessible user experience. Also, since the \u003cdialog\u003e moves throughout the DOM, unfortunately, a simple CSS transition would not suffice. Another modern browser feature to the rescue yet again, as we can pass a DOM manipulation function into a View Transition, making the transitions feel smoother! There is still quite a lot to test with this, so I would not recommend using \u003chand-hold\u003e in a production setting. If for no other reason than browser support is quite limited at the moment! This is just an experiment to see what I could cook up using CSS anchor positioning, I’m excited for the potential! Class dismissed! After seeing what CSS anchor positioning is capable of, I have suspicions that it may change a lot of the ways we write CSS, similar to the introduction of flexbox or grid. I’m excited to see what other user interface patterns can be accomplished with anchor positioning, and I’m even more excited to see what the community will do with it once it’s more broadly available!",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/08/css-modules-connections.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eWelcome to “Anchor Positioning 101” where we will be exploring this interesting new CSS feature. Our textbook for this class will be the extensive \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003e“Anchor Positioning Guide”\u003c/a\u003e that \u003ca href=\"https://css-tricks.com/author/monknow/\" data-type=\"link\" data-id=\"https://css-tricks.com/author/monknow/\"\u003eJuan Diego Rodriguez\u003c/a\u003e published here on CSS-Tricks.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’m excited for this one. Some of you may remember when CSS-Tricks released the \u003ca href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\"\u003e“Flexbox Layout Guide”\u003c/a\u003e or the \u003ca href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\"\u003e“Grid Layout Guide”\u003c/a\u003e — I certainly do and still have them both bookmarked! I spend a lot of time flipping between tabs to make sure I have the right syntax in my “experimental” CodePens.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’ve been experimenting with CSS anchor positioning like the “good old days” since Juan published his guide, so I figured it’d be fun to share some of the excitement, learn a bit, experiment, and of course: \u003cem\u003ebuild stuff!\u003c/em\u003e\u003c/p\u003e\n\n\n\n\u003ch3 id=\"css-anchor-positioning-introduction\"\u003eCSS Anchor Positioning introduction\u003c/h3\u003e\n\n\n\u003cp\u003eAnchor positioning lets us attach — or “anchor” — one element to one or more other elements. More than that, it allows us to define \u003cem\u003ehow\u003c/em\u003e a “target” element (that’s what we call the element we’re attaching to an anchor element) is positioned next to the anchor-positioned element, including \u003cem\u003efallback positioning\u003c/em\u003e in the form of a new \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/rules/p/position-try/\"\u003e@position-try\u003c/a\u003e\u003c/code\u003e at-rule.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe most hand-wavy way to explain the benefits of anchor positioning is to think of it as a powerful enhancement to \u003ccode\u003eposition: absolute;\u003c/code\u003e as it helps absolutely-positioned elements \u003cstrong\u003edo what you expect\u003c/strong\u003e. Don’t worry, we’ll see how this works as we go.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnchor positioning is currently a \u003ca href=\"https://drafts.csswg.org/css-anchor-position/\" rel=\"noopener\"\u003eW3C draft spec\u003c/a\u003e, so you know it’s fresh. It’s marked as “limited availability” in Baseline which at the time of writing means it is limited to Chromium-based browsers (versions 125+). That said, the considerate folks over at \u003ca href=\"https://www.oddbird.net/\" rel=\"noopener\"\u003eOddbird\u003c/a\u003e have a \u003ca href=\"https://anchor-polyfill.netlify.app/\" rel=\"noopener\"\u003epolyfill available\u003c/a\u003e that’ll help out other browsers until they ship support.\u003c/p\u003e\n\n\n\n\n\u003cbaseline-status featureid=\"anchor-positioning\"\u003e\u003c/baseline-status\u003e\n\n\n\u003cdiv\u003e\u003cdiv\u003e\u003ch4\u003eDesktop\u003c/h4\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003e\u003cspan\u003eChrome\u003c/span\u003e\u003c/th\u003e\u003cth\u003e\u003cspan\u003eFirefox\u003c/span\u003e\u003c/th\u003e\u003cth\u003e\u003cspan\u003eIE\u003c/span\u003e\u003c/th\u003e\u003cth\u003e\u003cspan\u003eEdge\u003c/span\u003e\u003c/th\u003e\u003cth\u003e\u003cspan\u003eSafari\u003c/span\u003e\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd title=\"Chrome - \"\u003e\u003cspan\u003e125\u003c/span\u003e\u003c/td\u003e\u003ctd title=\"Firefox - \"\u003e\u003cspan\u003eNo\u003c/span\u003e\u003c/td\u003e\u003ctd title=\"IE - \"\u003e\u003cspan\u003eNo\u003c/span\u003e\u003c/td\u003e\u003ctd title=\"Edge - \"\u003e\u003cspan\u003e125\u003c/span\u003e\u003c/td\u003e\u003ctd title=\"Safari - \"\u003e\u003cspan\u003eNo\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/div\u003e\u003cdiv\u003e\u003ch4\u003eMobile / Tablet\u003c/h4\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003e\u003cspan\u003eAndroid Chrome\u003c/span\u003e\u003c/th\u003e\u003cth\u003e\u003cspan\u003eAndroid Firefox\u003c/span\u003e\u003c/th\u003e\u003cth\u003e\u003cspan\u003eAndroid\u003c/span\u003e\u003c/th\u003e\u003cth\u003e\u003cspan\u003eiOS Safari\u003c/span\u003e\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd title=\"Android Chrome - \"\u003e\u003cspan\u003e131\u003c/span\u003e\u003c/td\u003e\u003ctd title=\"Android Firefox - \"\u003e\u003cspan\u003eNo\u003c/span\u003e\u003c/td\u003e\u003ctd title=\"Android - \"\u003e\u003cspan\u003e131\u003c/span\u003e\u003c/td\u003e\u003ctd title=\"iOS Safari - \"\u003e\u003cspan\u003eNo\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/div\u003e\u003c/div\u003e\n\n\n\n\u003cp\u003eOddbird contributes polyfills for \u003cem\u003emany\u003c/em\u003e new CSS features and you (yes, you!) can support their work on \u003ca href=\"https://github.com/sponsors/oddbird\" rel=\"noopener\"\u003eGithub\u003c/a\u003e or \u003ca href=\"https://opencollective.com/oddbird-open-source\" rel=\"noopener\"\u003eOpen Collective\u003c/a\u003e!\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://xanthir.com/contact/\" rel=\"noopener\"\u003eTab Atkins-Bittner\u003c/a\u003e, contributing author to the W3C draft spec on anchor positioning, spoke on the topic at CSS Day 2024. The full conference talk is available on YouTube:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe data-video-id=\"p18LhnYNkDQ?feature=oembed\" data-breeze=\"https://www.youtube.com/embed/p18LhnYNkDQ?feature=oembed\" title=\"Anchor Positioning | Tab Atkins-Bittner | CSS Day 2024\" width=\"500\" height=\"281\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eHere at CSS-Tricks, Juan demonstrated how to mix and match \u003ca href=\"https://css-tricks.com/popping-comments-with-css-anchor-positioning-and-view-driven-animations/\"\u003eanchor positioning with view-driven animations\u003c/a\u003e for an awesome floating notes effect:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/anchor-view-driven-animation.mov\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFront-end friend \u003ca href=\"https://www.kevinpowell.co/\" rel=\"noopener\"\u003eKevin Powell\u003c/a\u003e recently released a video demonstrating how \u003ca href=\"https://www.youtube.com/watch?v=DNXEORSk4GU\" rel=\"noopener\"\u003e“CSS Popover + Anchor Positioning is Magical”\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cp\u003e\n\u003ciframe data-video-id=\"DNXEORSk4GU?feature=oembed\" data-breeze=\"https://www.youtube.com/embed/DNXEORSk4GU?feature=oembed\" title=\"CSS Popover + Anchor Positioning is Magical\" width=\"500\" height=\"281\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\u003c/p\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAnd finally, in the tradition of “making fun games to learn CSS,” \u003ca href=\"https://thomaspark.co/\" rel=\"noopener\"\u003eThomas Park\u003c/a\u003e released \u003ca href=\"https://anchoreum.com/\" rel=\"noopener\"\u003eAnchoreum\u003c/a\u003e (a “\u003ca href=\"https://flexboxfroggy.com/\" rel=\"noopener\"\u003eFlexbox Froggy\u003c/a\u003e“-type game) to learn about CSS anchor positioning. Highly recommend checking this out to get the hang of the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/p/position-area/\"\u003eposition-area\u003c/a\u003e\u003c/code\u003e property!\u003c/p\u003e\n\n\n\u003ch3 id=\"the-homework\"\u003eThe homework\u003c/h3\u003e\n\n\n\u003cp\u003eOK, now that we’re caught up on what CSS anchor positioning \u003cem\u003eis\u003c/em\u003e and the excitement surrounding it, let’s talk about what it \u003cem\u003edoes\u003c/em\u003e. Tethering an element to another element? That has a \u003cstrong\u003elot\u003c/strong\u003e of potential. Quite a few instances I can remember where I’ve had to fight with \u003ccode\u003eabsolute\u003c/code\u003e positioning and \u003ccode\u003ez-index\u003c/code\u003e in order to get something positioned \u003cem\u003ejust right\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s take a quick look at the basic syntax. First, we need two elements, an anchor-positioned element and the target element that will be tethered to it.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Anchor element --\u0026gt;\n\u0026lt;div id=\u0026#34;anchor\u0026#34;\u0026gt;\n  Anchor\n\u0026lt;/div\u0026gt;\n\n\u0026lt;!-- Target element --\u0026gt;\n\u0026lt;div id=\u0026#34;target\u0026#34;\u0026gt;\n  Target\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe set an element as an anchor-positioned element by providing it with an \u003ca href=\"https://css-tricks.com/almanac/properties/a/anchor-name/\"\u003e\u003ccode\u003eanchor-name\u003c/code\u003e\u003c/a\u003e. This is a unique name of our choosing, however it needs the double-dash prefix, like \u003ca href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\"\u003eCSS custom properties\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#anchor {\n  anchor-name: --anchor;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAs for our target element, we’ll need to set \u003ccode\u003eposition: absolute;\u003c/code\u003e on it as well as tell the element what anchor to tether to. We do that with a new CSS property, \u003ca href=\"https://css-tricks.com/almanac/properties/p/position-anchor/\"\u003e\u003ccode\u003eposition-anchor\u003c/code\u003e\u003c/a\u003e using a value that matches the \u003ccode\u003eanchor-name\u003c/code\u003e of our anchor-positioned element.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"6,7\"\u003e\u003ccode markup=\"tt\"\u003e#anchor {\n  anchor-name: --anchor;\n}\n\n#target {\n  position: absolute;\n  position-anchor: --anchor;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eMay not look like it yet, but now our two elements are attached. We can set the \u003cem\u003eactual\u003c/em\u003e positioning on the target element by providing a \u003ca href=\"https://css-tricks.com/almanac/properties/p/position-area/\"\u003e\u003ccode\u003eposition-area\u003c/code\u003e\u003c/a\u003e. To position our target element, \u003ccode\u003eposition-area\u003c/code\u003e creates an invisible 3×3 grid over the anchor-positioned element. \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/#aa-positioning-targets\"\u003eUsing positioning keywords\u003c/a\u003e, we can designate where the target element appears near the anchor-positioned element.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"4\"\u003e\u003ccode markup=\"tt\"\u003e#target {\n  position: absolute;\n  position-anchor: --anchor;\n  position-area: top center;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow we see that our target element is anchored to the top-center of our anchor-positioned element!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"705\" height=\"453\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/basic-anchor.png?resize=705%2C453\u0026amp;ssl=1\" alt=\"red rectangle labelled \u0026#34;target\u0026#34; attached to the top of a blue square labelled \u0026#34;Anchor\u0026#34;\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/basic-anchor.png?w=705\u0026amp;ssl=1 705w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/basic-anchor.png?resize=300%2C193\u0026amp;ssl=1 300w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\u003ch4 id=\"anchoring-pseudoelements\"\u003eAnchoring pseudo-elements\u003c/h4\u003e\n\n\n\u003cp\u003eWhile playing with anchor positioning, I noticed you can anchor pseudo-elements, just the same as any other element.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#anchor {\n  anchor-name: --anchor;\n\n  \u0026amp;::before {\n    content: \u0026#34;Target\u0026#34;;\n    position: absolute;\n    position-anchor: --anchor;\n    left: anchor(center);\n    bottom: anchor(center);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1470\" height=\"758\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/anchor-pseudo.png?resize=1470%2C758\u0026amp;ssl=1\" alt=\"a semi-transparent red square labelled \u0026#34;Target\u0026#34; is attached to the upper corner of a blue square labelled \u0026#34;Anchor\u0026#34;\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/anchor-pseudo.png?w=1470\u0026amp;ssl=1 1470w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/anchor-pseudo.png?resize=300%2C155\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/anchor-pseudo.png?resize=1024%2C528\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/anchor-pseudo.png?resize=768%2C396\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eMight be useful for adding design flourishes to elements or adding functionality as some sort of indicator.\u003c/p\u003e\n\n\n\u003ch4 id=\"moving-anchors\"\u003eMoving anchors\u003c/h4\u003e\n\n\n\u003cp\u003eAnother quick experiment was to see if we can \u003cem\u003emove\u003c/em\u003e anchors. And it turns out this is possible!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/moving-anchor-hover.mov\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNotice the use of \u003ca href=\"https://css-tricks.com/almanac/functions/a/anchor/\"\u003e\u003ccode\u003eanchor()\u003c/code\u003e\u003c/a\u003e functions instead of \u003ccode\u003eposition-area\u003c/code\u003e to position the target element.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#target {\n  position: absolute;\n  position-anchor: --anchor-one;\n  top: anchor(bottom);\n  left: anchor(left);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/#aa-anchor-functions\"\u003eCSS anchor functions\u003c/a\u003e are an alternate way to position target elements based on the computed values of the anchor-positioned element itself. Here we are setting the target element’s top property value to match the anchor-positioned element’s bottom value. Similarly, we can set the target’s \u003ccode\u003eleft\u003c/code\u003e property value to match the anchor-positioned element’s \u003ccode\u003eleft\u003c/code\u003e value.\u003c/p\u003e\n\n\n\n\u003cp\u003eHovering over the container element swaps the \u003ccode\u003eposition-anchor\u003c/code\u003e from \u003ccode\u003e--anchor-one\u003c/code\u003e to \u003ccode\u003e--anchor-two\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.container:hover {\n  #target {\n    position-anchor: --anchor-two;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e We are also able to set a \u003ccode\u003etransition\u003c/code\u003e as we position the target using \u003ccode\u003etop\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e, which makes it swap smoothly between anchors.\u003c/p\u003e\n\n\n\n\n\n\u003cp\u003eAlong with being the first to release CSS anchor-positioning, the Chrome dev team recently released new pseudo-selectors related to the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;summary\u0026gt;\u003c/code\u003e elements. The \u003ccode\u003e\u003ca href=\"https://developer.chrome.com/blog/styling-details\" data-type=\"link\" data-id=\"https://developer.chrome.com/blog/styling-details\" rel=\"noopener\"\u003e::details-content\u003c/a\u003e\u003c/code\u003e pseudo-selector allows you to style the “hidden” part of the \u003ccode\u003e\u0026lt;details\u0026gt;\u003c/code\u003e element. \u003c/p\u003e\n\n\n\n\u003cp\u003eWith this information, I thought: “\u003cem\u003ecan I anchor it?\u003c/em\u003e” and sure enough, you can!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAgain, this is \u003cem\u003edefin\u003c/em\u003eitely\u003cem\u003e not\u003c/em\u003e ready for prime-time, but it’s always fun to experiment!\u003c/p\u003e\n\n\n\u003ch3 id=\"practical-examinations\"\u003ePractical examinations\u003c/h3\u003e\n\n\n\u003cp\u003eLet’s take this a bit further and tackle more practical challenges using CSS anchor positioning. Please keep in mind that all these examples are \u003cstrong\u003eChrome-only\u003c/strong\u003e at the time of writing!\u003c/p\u003e\n\n\n\u003ch4 id=\"tooltips\"\u003eTooltips\u003c/h4\u003e\n\n\n\u003cp\u003eOne of the most straightforward use cases for CSS anchor positioning is possibly a tooltip. Makes a lot of sense: hover over an icon and a label floats nearby to explain what the icon does. I didn’t quite want to make yet another tutorial on how to make a tooltip and luckily for me, Zell Liew recently wrote an article on tooltip best practices, so we can focus purely on anchor positioning and refer to Zell’s work for the semantics.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/anchor-tooltip-hover.mov\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNow, let’s check out one of these tooltips:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- ... --\u0026gt;;\n\u0026lt;li class=\u0026#34;toolbar-item\u0026#34;\u0026gt;;\n  \u0026lt;button type=\u0026#34;button\u0026#34; \n    id=\u0026#34;inbox-tool\u0026#34; \n    aria-labelledby=\u0026#34;inbox-label\u0026#34; \n    class=\u0026#34;tool\u0026#34;\u0026gt;\n    \u0026lt;svg id=\u0026#34;inbox-tool-icon\u0026#34;\u0026gt;\n      \u0026lt;!-- SVG icon code ... --\u0026gt;\n    \u0026lt;/svg\u0026gt;\n  \u0026lt;/button\u0026gt;\n\n  \u0026lt;div id=\u0026#34;inbox-label\u0026#34; role=\u0026#34;tooltip\u0026#34;\u0026gt;\n    \u0026lt;p\u0026gt;Inbox\u0026lt;/p\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/li\u0026gt;\n\u0026lt;!-- ... --\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe HTML is structured in a way where the tooltip element is a sibling of our anchor-positioned \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e, notice how it has the \u003ccode\u003e[aria-labelledby]\u003c/code\u003e attribute set to match the tooltip’s \u003ccode\u003e[id]\u003c/code\u003e. The tooltip itself is a generic \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e, semantically enhanced to become a tooltip with the \u003ccode\u003e[role=\u0026#34;tooltip\u0026#34;]\u003c/code\u003e attribute. We can also use \u003ccode\u003e[role=\u0026#34;tooltip\u0026#34;]\u003c/code\u003e as a \u003ca href=\"https://benmyers.dev/blog/semantic-selectors/\" rel=\"noopener\"\u003esemantic selector\u003c/a\u003e to add common styles to tooltips, including the tooltip’s positioning relative to its anchor.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, let’s turn our button into an anchored element by giving it an \u003ccode\u003eanchor-name\u003c/code\u003e. Next, we can set the target element’s \u003ccode\u003eposition-anchor\u003c/code\u003e to match the \u003ccode\u003eanchor-name\u003c/code\u003e of the anchored element. By default, we can set the tooltip’s \u003ccode\u003evisibility\u003c/code\u003e to \u003ccode\u003ehidden\u003c/code\u003e, then using CSS sibling selectors, if the target element receives \u003ccode\u003ehover\u003c/code\u003e or \u003ccode\u003efocus-visible\u003c/code\u003e, we can then swap the \u003ccode\u003evisibility\u003c/code\u003e to \u003ccode\u003evisible\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Anchor-positioned Element */\n#inbox-tool {\n  anchor-name: --inbox-tool;\n}\n\n/* Target element */\n[role=\u0026#34;tooltip\u0026#34;]#inbox-label {\n  position-anchor: --inbox-tool\n}\n\n/* Target positioning */\n[role=\u0026#34;tooltip\u0026#34;] {\n  position: absolute;\n  position-area: end center;\n  /* Hidden by default */\n  visibility: hidden;\n}\n\n/* Visible when tool is hovered or receives focus */\n.tool:hover + [role=\u0026#34;tooltip\u0026#34;],\n.tool:focus-visible + [role=\u0026#34;tooltip\u0026#34;] {\n  visibility: visible;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eTa-da!\u003c/em\u003e Here we have a working, CSS anchor-positioned tooltip!\u003c/p\u003e\n\n\n\n\u003cp\u003eAs users of touch devices aren’t able to hover over elements, you may want to \u003ca href=\"https://css-tricks.com/tooltip-best-practices/#aa-tooltip-limitations-and-alternatives\"\u003eexplore toggletips\u003c/a\u003e instead!\u003c/p\u003e\n\n\n\u003ch4 id=\"floating-disclosures\"\u003eFloating disclosures\u003c/h4\u003e\n\n\n\u003cp\u003eDisclosures are another common component pattern that might be a perfect use case for anchor positioning. Disclosures are typically a component where interacting with a toggle will open and close a corresponding element. Think of the good ol’ \u003ca href=\"https://css-tricks.com/exploring-what-the-details-and-summary-elements-can-do/\"\u003e\u003ccode\u003e\u0026lt;detail\u0026gt;/\u0026lt;summary\u0026gt;\u003c/code\u003e HTML element duo\u003c/a\u003e, for example.\u003c/p\u003e\n\n\n\n\u003cp\u003eCurrently, if you are looking to create a disclosure-like component which floats over other portions of your user interface, you might be in for some JavaScript, \u003ccode\u003eabsolute\u003c/code\u003e positioning, and \u003ccode\u003ez-index\u003c/code\u003e related troubles. Soon enough though, we’ll be able to combine CSS anchor positioning with another newer platform feature \u003ccode\u003e[popover]\u003c/code\u003e to create some incredibly straightforward (and semantically accurate) floating disclosure elements.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://css-tricks.com/poppin-in/\"\u003eThe Popover API\u003c/a\u003e provides a non-modal way to elevate elements to the \u003ccode\u003etop-layer\u003c/code\u003e, while also baking in some great functionality, such as light dismissals.\u003c/p\u003e\n\n\n\n\u003cp\u003eZell also has more information \u003ca href=\"https://css-tricks.com/clarifying-the-relationship-between-popovers-and-dialogs/\"\u003eon popovers, dialogs, and modality\u003c/a\u003e!\u003c/p\u003e\n\n\n\n\u003cp\u003eOne of the more common patterns you might consider as a “floating disclosure”-type component is a dropdown menu. Here is the HTML we’ll work with:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;nav\u0026gt;\n  \u0026lt;button id=\u0026#34;anchor\u0026#34;\u0026gt;Toggle\u0026lt;/button\u0026gt;\n  \u0026lt;ul id=\u0026#34;target\u0026#34;\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Link 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Link 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Link 3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;/ul\u0026gt;\n\u0026lt;/nav\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can set our target element, in this case the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e, to be our popover element by adding the \u003ccode\u003e[popover]\u003c/code\u003e attribute.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo control the popover, let’s add the attribute \u003ccode\u003e[popoveraction=\u0026#34;toggle\u0026#34;]\u003c/code\u003e to enable the button as a toggle, and point the \u003ccode\u003e[popovertarget]\u003c/code\u003e attribute to the \u003ccode\u003e[id]\u003c/code\u003e of our target element.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;nav\u0026gt;\n  \u0026lt;button id=\u0026#34;anchor\u0026#34; \n          popoveraction=\u0026#34;toggle\u0026#34;\n          popovertarget=\u0026#34;target\u0026#34;\u0026gt;\n    Toggle\n  \u0026lt;/button\u0026gt;\n\n  \u0026lt;ul id=\u0026#34;target\u0026#34; popover\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Link 1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Link 2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n    \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Link 3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\n  \u0026lt;/ul\u0026gt;\n\u0026lt;/nav\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNo JavaScript is necessary, and now we have a toggle-able \u003ccode\u003e[popover]\u003c/code\u003e disclosure element! The problem is that it’s still not tethered to the anchor-positioned element, let’s fix that in our CSS.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, as this is a popover, let’s add a small bit of styling to remove the intrinsic \u003ccode\u003emargin\u003c/code\u003e popovers receive by default from browsers.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eul[popover] {\n  margin: 0;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eLet’s turn our button into an anchor-positioned element by providing it with an \u003ccode\u003eanchor-name\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"5\"\u003e\u003ccode markup=\"tt\"\u003eul[popover] {\n  margin: 0;\n}\n\n#anchor {\n  anchor-name: --toggle;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAs for our target element, we can attach it to the anchor-positioned element by setting its position to \u003ccode\u003eabsolute\u003c/code\u003e and the \u003ccode\u003eposition-anchor\u003c/code\u003e to our anchor-positioned element’s \u003ccode\u003eanchor-name\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"8,9\"\u003e\u003ccode markup=\"tt\"\u003eul[popover] {\n  margin: 0;\n}\n\n#anchor {\n  anchor-name: --toggle;\n}\n\n#target {\n  position: absolute;\n  position-anchor: --toggle;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can also adjust the target’s positioning near the anchor-positioned element with the \u003ccode\u003eposition-area\u003c/code\u003e property, similar to what we did with our \u003ca href=\"#tooltip\"\u003etooltip\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"10,11\"\u003e\u003ccode markup=\"tt\"\u003eul[popover] {\n  margin: 0;\n}\n\n#anchor {\n  anchor-name: --toggle;\n}\n\n#target {\n  position: absolute;\n  position-anchor: --toggle;\n  position-area: bottom;\n  width: anchor-size(width);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou may notice another CSS anchor function in here, \u003ca href=\"https://css-tricks.com/almanac/functions/a/anchor/\"\u003e\u003ccode\u003eanchor-size()\u003c/code\u003e\u003c/a\u003e! We can set the target’s \u003ccode\u003ewidth\u003c/code\u003e to match the width of the anchor-positioned element by using \u003ccode\u003eanchor-size(width)\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/anchor-dropdown-menu-center.mov\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThere is one more neat thing we can apply here, \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/#aa-setting-fallback-positions\"\u003efallback positioning\u003c/a\u003e! Let’s consider that maybe this dropdown menu might sometimes be located at the bottom of the viewport, either from scrolling or some other reason. We don’t really want it to overflow or cause any extra scrolling, but instead, swap to an alternate location that is visible to the user.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnchor positioning makes this possible with the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/p/position-try-fallbacks/\"\u003epostion-try-fallbacks\u003c/a\u003e\u003c/code\u003e property, a way to provide an alternate location for the target element to display near an anchor-positioned element.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"5\"\u003e\u003ccode markup=\"tt\"\u003e#target {\n  position: absolute;\n  position-anchor: --toggle;\n  position-area: bottom;\n  postion-try-fallbacks: top;\n  width: anchor-size(width);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTo keep things simple for our demo, we can add the opposite value of the value of the \u003ccode\u003epostion-area\u003c/code\u003e property: \u003ccode\u003etop\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/anchor-dropdown-menu-bottom.mov\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\u003ch4 id=\"shopping-cart-component\"\u003eShopping cart component\u003c/h4\u003e\n\n\n\u003cp\u003eWe know how to make a tooltip and a disclosure element, now let’s build upon what we’ve learned so far and create a neat, interactive shopping cart component.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s think about how we want to mark this up. First, we’ll need a button with a shopping cart icon:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button id=\u0026#34;shopping-cart-toggle\u0026#34;\u0026gt;\n  \u0026lt;svg id=\u0026#34;shopping-cart-icon\u0026#34; /\u0026gt;\n    \u0026lt;!-- SVG icon code ... --\u0026gt;\n  \u0026lt;/svg\u0026gt;\n\u0026lt;/button\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can already reuse what we learned with our tooltip styles to provide a functioning label for this toggle. Let’s add the class \u003ccode\u003e.tool\u003c/code\u003e to the button, then include a tooltip as our label.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Toggle --\u0026gt;\n\u0026lt;button id=\u0026#34;shopping-cart-toggle\u0026#34; \n        aria-labelledby=\u0026#34;shopping-cart-label\u0026#34;\n        class=\u0026#34;tool\u0026#34;\u0026gt;\n  \u0026lt;svg id=\u0026#34;shopping-cart-icon\u0026#34; /\u0026gt;\n    \u0026lt;!-- SVG icon code ... --\u0026gt;\n  \u0026lt;/svg\u0026gt;\n\u0026lt;/button\u0026gt;\n\n\u0026lt;!-- Tooltip --\u0026gt;\n\u0026lt;div id=\u0026#34;shopping-cart-label\u0026#34; \n     role=\u0026#34;tooltip\u0026#34; \n     class=\u0026#34;tooltip\u0026#34;\u0026gt;\n  \u0026lt;p\u0026gt;Shopping Cart\u0026lt;/p\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe’ll need to specify our \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e is an anchor-positioned element in CSS with an \u003ccode\u003eanchor-name\u003c/code\u003e, which we can also set as the tooltip’s \u003ccode\u003eposition-anchor\u003c/code\u003e value to match.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebutton#shopping-cart-toggle {\n    anchor-name: --shopping-cart-toggle;\n}\n\n[role=\u0026#34;tooltip\u0026#34;]#shopping-cart-label {\n    position-anchor: --shopping-cart-toggle;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow we should have a nice-looking tooltip labeling our shopping cart button!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/shopping-cart-tooltip.mov\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eBut wait, we want this thing to do more than that! Let’s turn it into a disclosure component that reveals a list of items inside the user’s cart. As we are looking to have a floating user-interface with a few actions included, we should consider a \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element. However, we don’t necessarily want to be blocking background content, so we can opt for a \u003cem\u003enon-modal dialog\u003c/em\u003e using the\u003ccode\u003e[popover]\u003c/code\u003e attribute again!\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"5-6, 20\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Toggle --\u0026gt;\n\u0026lt;button id=\u0026#34;shopping-cart-toggle\u0026#34; \n\taria-labelledby=\u0026#34;shopping-cart-label\u0026#34;\n\tclass=\u0026#34;tool\u0026#34;\n\tpopovertarget=\u0026#34;shopping-cart\u0026#34;\n\tpopoveraction=\u0026#34;toggle\u0026#34;\u0026gt;\n  \u0026lt;svg id=\u0026#34;shopping-cart-icon\u0026#34; /\u0026gt;\n    \u0026lt;!-- SVG icon code ... --\u0026gt;\n  \u0026lt;/svg\u0026gt;\n\u0026lt;/button\u0026gt;\n\u0026lt;!-- Tooltip --\u0026gt;\n\u0026lt;div id=\u0026#34;shopping-cart-label\u0026#34; \n     role=\u0026#34;tooltip\u0026#34; \n     class=\u0026#34;tooltip\u0026#34;\u0026gt;\n  \u0026lt;p\u0026gt;Shopping Cart\u0026lt;/p\u0026gt;\n\u0026lt;/div\u0026gt;\n\u0026lt;!-- Shopping Cart --\u0026gt;\n\u0026lt;dialog id=\u0026#34;shopping-cart\u0026#34; popover\u0026gt;\n  \u0026lt;!-- Shopping cart template... --\u0026gt;\n  \u0026lt;button popovertarget=\u0026#34;shopping-cart\u0026#34; popoveraction=\u0026#34;close\u0026#34;\u0026gt;\n    Dismiss Cart\n  \u0026lt;/button\u0026gt;\n\u0026lt;/dialog\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTo control the popover, we’ve added \u003ccode\u003e[popovertarget=\u0026#34;shopping-cart\u0026#34;]\u003c/code\u003e and \u003ccode\u003e[popoveraction=\u0026#34;toggle\u0026#34;\u003c/code\u003e] to our anchor-positioned element and included a second button within the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e that can also be used to close the dialog with \u003ccode\u003e[popoveraction=\u0026#34;close\u0026#34;]\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo anchor the shopping cart \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e to the toggle, we can set \u003ccode\u003eposition-anchor\u003c/code\u003e and \u003ccode\u003eposition-area\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"2-3\"\u003e\u003ccode markup=\"tt\"\u003e#shopping-cart {\n  position-anchor: --shopping-cart;\n  position-area: end center;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/shopping-cart-disclosure.mov\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eAt this point, we should take a moment to realize that we have tethered \u003cem\u003etwo elements\u003c/em\u003e to the same anchor!\u003c/p\u003e\n\n\n\n\u003cp\u003eWe won’t stop there, though. There is one more enhancement we can make to really show how helpful anchor positioning can be: Let’s add a notification badge to the element to describe how many items are inside the cart.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s place the badge \u003cem\u003einside\u003c/em\u003e of our anchor-positioned element this time.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"12-14\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Toggle --\u0026gt;\n\u0026lt;button id=\u0026#34;shopping-cart-toggle\u0026#34; \n\taria-labelledby=\u0026#34;shopping-cart-label\u0026#34;\n\tclass=\u0026#34;tool\u0026#34;\n\tpopovertarget=\u0026#34;shopping-cart\u0026#34;\n        popoveraction=\u0026#34;toggle\u0026#34;\u0026gt;\n\n  \u0026lt;svg id=\u0026#34;shopping-cart-icon\u0026#34; /\u0026gt;\n    \u0026lt;!-- SVG icon code ... --\u0026gt;\n  \u0026lt;/svg\u0026gt;\n\n  \u0026lt;!-- Notification Badge --\u0026gt;\n  \u0026lt;div id=\u0026#34;shopping-cart-badge\u0026#34; class=\u0026#34;notification-badge\u0026#34;\u0026gt;\n    1\n  \u0026lt;/div\u0026gt;\n\u0026lt;/button\u0026gt;\n\u0026lt;!-- ... --\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can improve our tooltip to include verbiage about how many items are in the cart:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Tooltip --\u0026gt;\n\u0026lt;div id=\u0026#34;shopping-cart-label\u0026#34; \n     role=\u0026#34;tooltip\u0026#34;\u0026gt;\n  \u0026lt;p\u0026gt;Shopping Cart\u0026lt;/p\u0026gt;\n  \u0026lt;p\u0026gt;(1 item in cart)\u0026lt;/p\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow \u003ca href=\"https://css-tricks.com/the-other-c-in-css/#aa-css-can-completely-strip-an-element-of-its-accname\"\u003ethe accessible name\u003c/a\u003e of our anchor-positioned element will be read as \u003ccode\u003eShopping Cart (1 item in cart)\u003c/code\u003e, which helps provide context to assistive technologies like screen readers.\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s tether this notification badge to the same anchor as our tooltip and shopping cart \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e, we can do this by setting the \u003ccode\u003eposition-anchor\u003c/code\u003e property of the badge to \u003ccode\u003e--shopping-cart-toggle\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e#shopping-cart-badge {\n  position: absolute;\n  position-anchor: --shopping-cart-toggle;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eLet’s look at positioning. We don’t want it below or next to the anchor, we want it overlapping, so we can use CSS anchor functions to position it based on the anchor-positioned element’s dimensions.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"4-5\"\u003e\u003ccode markup=\"tt\"\u003e#shopping-cart-badge {\n  position: absolute;\n  position-anchor: --shopping-cart-toggle;\n  bottom: anchor(center);\n  left: anchor(center);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHere we are setting the \u003ccode\u003ebottom\u003c/code\u003e and \u003ccode\u003eleft\u003c/code\u003e of the target element to match the anchor’s \u003ccode\u003ecenter\u003c/code\u003e. This places it in the upper-right corner of the SVG icon!\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"854\" height=\"426\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/shopping-cart-notification-badge.png?resize=854%2C426\u0026amp;ssl=1\" alt=\"black shopping cart icon with a red circle badge containing the number 1\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/shopping-cart-notification-badge.png?w=854\u0026amp;ssl=1 854w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/shopping-cart-notification-badge.png?resize=300%2C150\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/11/shopping-cart-notification-badge.png?resize=768%2C383\u0026amp;ssl=1 768w\" sizes=\"auto, (min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFolks, this means we have \u003cem\u003ethree\u003c/em\u003e elements anchored now. Isn’t that fantastic?\u003c/p\u003e\n\n\n\n\n\n\n\u003ch4 id=\"combining-things\"\u003eCombining things\u003c/h4\u003e\n\n\n\u003cp\u003eTo put these anchor-positioned elements into perspective, I’ve combined all the techniques we’ve learned so far into a more familiar setting:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/shop-navigation-cart.mov\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eDisclosure components, dropdown menus, tooltips (and toggletips!), as well as notification badges all made much simpler using CSS anchor positioning!\u003c/p\u003e\n\n\n\u003ch3 id=\"final-project\"\u003eFinal project\u003c/h3\u003e\n\n\n\u003cp\u003eAs a \u003cem\u003efinal project\u003c/em\u003e for myself (and to bring this whole thing around full-circle), I decided to try to build a CSS anchor-positioned-based onboarding tool. I’ve previously attempted to build a tool like this at work, which I called “HandHoldJS” and it… well, it didn’t go so great. I managed to have a lot of the core functionality working using JavaScript, but it meant keeping track of quite a lot of positions and lots of weird things kept happening!\u003c/p\u003e\n\n\n\n\u003cp\u003eLet’s see if we can do better with CSS anchor positioning.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cfigure\u003e\u003cvideo controls=\"\" src=\"https://css-tricks.com/wp-content/plugins/breeze/assets/images/placeholder.mp4\" data-breeze=\"https://css-tricks.com/wp-content/uploads/2024/11/handhold-video.mov\" playsinline=\"\"\u003e\u003c/video\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eFeel free to check out the code on CodePen! I went down quite a rabbit hole on this one, so I’ll provide a bit of a high-level overview here.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ccode\u003e\u0026lt;hand-hold\u0026gt;\u003c/code\u003e is a native custom element that works entirely in the light \u003ccode\u003eDOM\u003c/code\u003e. It sort of falls into the category of an HTML web component, as it is mostly based on enabling its inner HTML. You can specify tour stops to any element on the page by adding \u003ccode\u003e[data-tour-stop]\u003c/code\u003e attributes with values in the order you want the tour to occur.\u003c/p\u003e\n\n\n\n\u003cp\u003eInside the \u003ccode\u003e\u0026lt;hand-hold\u0026gt;\u003c/code\u003e element contains a \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e to start the tour, a \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element to contain the tour information, \u003ccode\u003e\u0026lt;section\u0026gt;\u003c/code\u003e elements to separate content between tour stops, a \u003ccode\u003efieldset[data-handhold-navigation]\u003c/code\u003e element which holds navigation radio buttons, as well as another \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e to end the tour.\u003c/p\u003e\n\n\n\n\u003cp\u003eEach \u003ccode\u003e\u0026lt;section\u0026gt;\u003c/code\u003e element corresponds to a tour stop with a matching \u003ccode\u003e[data-handhold-content]\u003c/code\u003e attribute applied. Using JavaScript, \u003ccode\u003e\u0026lt;hand-hold\u0026gt;\u003c/code\u003e dynamically updates tour stops to be anchor-positioned elements, which the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e can attach itself (there is a sneaky pseudo-element attached to the anchor to highlight the tour stop element!).\u003c/p\u003e\n\n\n\n\u003cp\u003eAlthough the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e element is attached via CSS anchor positioning, it also moves within the DOM to appear next to the anchor-position element in the accessibility tree. The (well-meaning) intention here is to help provide more context to those who may be navigating via assistive devices by figuring out which element the dialog is referring to. Believe me, though, this thing is \u003cem\u003efar from perfect\u003c/em\u003e as an accessible user experience.\u003c/p\u003e\n\n\n\n\u003cp\u003eAlso, since the \u003ccode\u003e\u0026lt;dialog\u0026gt;\u003c/code\u003e moves throughout the DOM, unfortunately, a simple CSS transition would not suffice. Another modern browser feature to the rescue yet again, as we can pass a DOM manipulation function into a View Transition, making the transitions feel smoother!\u003c/p\u003e\n\n\n\n\u003cp\u003eThere is still quite a lot to test with this, so I would \u003cem\u003enot\u003c/em\u003e recommend using \u003ccode\u003e\u0026lt;hand-hold\u0026gt;\u003c/code\u003e in a production setting. If for no other reason than browser support is \u003cstrong\u003equite\u003c/strong\u003e limited at the moment!\u003c/p\u003e\n\n\n\n\u003cp\u003eThis is just an experiment to see what I could cook up using CSS anchor positioning, I’m excited for the potential!\u003c/p\u003e\n\n\n\u003ch3 id=\"class-dismissed\"\u003eClass dismissed!\u003c/h3\u003e\n\n\n\u003cp\u003eAfter seeing what CSS anchor positioning is capable of, I have suspicions that it may change a lot of the ways we write CSS, similar to the introduction of flexbox or grid.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’m excited to see what other user interface patterns can be accomplished with anchor positioning, and I’m even more excited to see what the community will do with it once it’s more broadly available!\u003c/p\u003e\n\n\n\n\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "23 min read",
  "publishedTime": "2024-12-02T07:02:13-07:00",
  "modifiedTime": "2024-12-02T07:02:15-07:00"
}
