{
  "id": "b875148c-eb4e-4a01-86b6-2cfee1b22254",
  "title": "Using CSS Cascade Layers With Tailwind Utilities",
  "link": "https://css-tricks.com/using-css-cascade-layers-with-tailwind-utilities/",
  "description": "Being the bad boy I am, I don't take Tailwind's default approach to cascade layers as the \"best\" one. Over a year experimenting with Tailwind and vanilla CSS, I've come across what I believe is a better solution. Using CSS Cascade Layers With Tailwind Utilities originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Zell Liew",
  "published": "Mon, 30 Jun 2025 13:16:43 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "cascade layers",
    "framework",
    "tailwind"
  ],
  "byline": "Zell Liew",
  "length": 4529,
  "excerpt": "Being the bad boy I am, I don't take Tailwind's default approach to cascade layers as the \"best\" one. Over a year experimenting with Tailwind and vanilla CSS, I've come across what I believe is a better solution.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Adam Wathan has (very cleverly) built Tailwind with CSS Cascade Layers, making it extremely powerful for organizing styles by priority. @layer theme, base, components, utilities; @import 'tailwindcss/theme.css' layer(theme); @import 'tailwindcss/utilities.css' layer(utilities); The core of Tailwind are its utilities. This means you have two choices: The default choice The unorthodox choice The default choice The default choice is to follow Tailwind’s recommended layer order: place components first, and Tailwind utilities last. So, if you’re building components, you need to manually wrap your components with a @layer directive. Then, overwrite your component styles with Tailwind, putting Tailwind as the “most important layer”. /* Write your components */ @layer components { .component { /* Your CSS here */ } } \u003c!-- Override with Tailwind utilities --\u003e \u003cdiv class=\"component p-4\"\u003e ... \u003c/div\u003e That’s a decent way of doing things. But, being the bad boy I am, I don’t take the default approach as the “best” one. Over a year of (major) experimentation with Tailwind and vanilla CSS, I’ve come across what I believe is a better solution. The Unorthodox Choice Before we go on, I have to tell you that I’m writing a course called Unorthodox Tailwind — this shows you everything I know about using Tailwind and CSS in synergistic ways, leveraging the strengths of each. Shameless plug aside, let’s dive into the Unorthodox Choice now. In this case, the Unorthodox Choice is to write your styles in an unnamed layer — or any layer after utilities, really — so that your CSS naturally overwrites Tailwind utilities. Of these two, I prefer the unnamed layer option: /* Unnamed layer option */ @layer theme, base, components, utilities; /* Write your CSS normally here */ .component { /* ... */ } /* Named layer option */ /* Use whatever layer name you come up with. I simply used css here because it made most sense for explaining things */ @layer theme, base, components, utilities, css; @layer css { .component { /* ... */ } } I have many reasons why I do this: I don’t like to add unnecessary CSS layers because it makes code harder to write — more keystrokes, having to remember the specific layer I used it in, etc. I’m pretty skilled with ITCSS, selector specificity, and all the good-old-stuff you’d expect from a seasoned front-end developer, so writing CSS in a single layer doesn’t scare me at all. I can do complex stuff that are hard or impossible to do in Tailwind (like theming and animations) in CSS. Your mileage may vary, of course. Now, if you have followed my reasoning so far, you would have noticed that I use Tailwind very differently: Tailwind utilities are not the “most important” layer. My unnamed CSS layer is the most important one. I do this so I can: Build prototypes with Tailwind (quickly, easily, especially with the tools I’ve created). Shift these properties to CSS when they get more complex — so I don’t have to read messy utility-littered HTML that makes my heart sink. Not because utility HTML is bad, but because it takes lots of brain processing power to figure out what’s happening. Finally, here’s the nice thing about Tailwind being in a utility layer: I can always !important a utility to give it strength. \u003c!-- !important the padding utility --\u003e \u003cdiv class=\"component !p-4\"\u003e ... \u003c/div\u003e Whoa, hold on, wait a minute! Isn’t this wrong, you might ask? Nope. The !important keyword has traditionally been used to override classes. In this case, we’re leveraging on the !important feature in CSS Layers to say the Tailwind utility is more important than any CSS in the unnamed layer. This is perfectly valid and is a built-in feature for CSS Layers. Besides, the !important is so explicit (and used so little) that it makes sense for one-off quick-and-dirty adjustments (without creating a brand new selector for it). Tailwind utilities are more powerful than they seem Tailwind utilities are not a 1:1 map between a class and a CSS property. Built-in Tailwind utilities mostly look like this so it can give people a wrong impression. Tailwind utilities are more like convenient Sass mixins, which means we can build effective tools for layouts, theming, typography, and more, through them. You can find out about these thoughts inside Unorthodox Tailwind. Thanks for reading and I hope you’re enjoying a new way of looking at (or using) Tailwind!",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/08/tailwind-layers.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eAdam Wathan has (very cleverly) built Tailwind with \u003ca href=\"https://css-tricks.com/css-cascade-layers/\"\u003eCSS Cascade Layers\u003c/a\u003e, making it extremely powerful for organizing styles by priority.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@layer theme, base, components, utilities;\n@import \u0026#39;tailwindcss/theme.css\u0026#39; layer(theme);\n@import \u0026#39;tailwindcss/utilities.css\u0026#39; layer(utilities);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe core of Tailwind are its utilities. This means you have two choices:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eThe default choice\u003c/li\u003e\n\n\n\n\u003cli\u003eThe unorthodox choice\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003ch3 id=\"the-default-choice\"\u003eThe default choice\u003c/h3\u003e\n\n\n\u003cp\u003eThe default choice is to follow Tailwind’s recommended layer order: place components first, and Tailwind utilities last.\u003c/p\u003e\n\n\n\n\u003cp\u003eSo, if you’re building components, you need to manually wrap your components with a \u003ccode\u003e@layer\u003c/code\u003e directive. Then, overwrite your component styles with Tailwind, putting Tailwind as the “most important layer”.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Write your components */\n@layer components {\n  .component {\n    /* Your CSS here */\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- Override with Tailwind utilities --\u0026gt; \n\u0026lt;div class=\u0026#34;component p-4\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat’s a decent way of doing things.\u003c/p\u003e\n\n\n\n\u003cp\u003eBut, being the bad boy I am, I don’t take the default approach as the “best” one. Over a year of (major) experimentation with Tailwind and vanilla CSS, I’ve come across what I believe is a better solution.\u003c/p\u003e\n\n\n\u003ch3 id=\"the-unorthodox-choice\"\u003eThe Unorthodox Choice\u003c/h3\u003e\n\n\n\u003cp\u003eBefore we go on, I have to tell you that I’m writing a course called \u003ca href=\"https://magicaldevschool.com/courses/unorthodox-tailwind/\" rel=\"noopener\"\u003eUnorthodox Tailwind\u003c/a\u003e — this shows you everything I know about using Tailwind and CSS in synergistic ways, leveraging the strengths of each.\u003c/p\u003e\n\n\n\n\u003cp\u003eShameless plug aside, let’s dive into the Unorthodox Choice now.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn this case, the Unorthodox Choice is to write your styles in an unnamed layer — or any layer after utilities, really — so that your CSS naturally overwrites Tailwind utilities.\u003c/p\u003e\n\n\n\n\u003cp\u003eOf these two, I prefer the unnamed layer option:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Unnamed layer option */\n@layer theme, base, components, utilities; \n\n/* Write your CSS normally here */ \n.component { /* ... */ }\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Named layer option */\n/* Use whatever layer name you come up with. I simply used css here because it made most sense for explaining things */\n@layer theme, base, components, utilities, css; \n\n@layer css {\n  .component { /* ... */ }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI have many reasons why I do this:\u003c/p\u003e\n\n\n\n\u003col\u003e\n\u003cli\u003eI don’t like to add unnecessary CSS layers because it makes code harder to write — more keystrokes, having to remember the specific layer I used it in, etc.\u003c/li\u003e\n\n\n\n\u003cli\u003eI’m pretty skilled with \u003ca href=\"https://itcss.io\" rel=\"noopener\"\u003eITCSS\u003c/a\u003e, selector specificity, and all the good-old-stuff you’d expect from a seasoned front-end developer, so writing CSS in a single layer doesn’t scare me at all.\u003c/li\u003e\n\n\n\n\u003cli\u003eI can do complex stuff that are hard or impossible to do in Tailwind (like theming and animations) in CSS.\u003c/li\u003e\n\u003c/ol\u003e\n\n\n\n\u003cp\u003eYour mileage may vary, of course.\u003c/p\u003e\n\n\n\n\u003cp\u003eNow, if you have followed my reasoning so far, you would have noticed that I use Tailwind \u003cem\u003every\u003c/em\u003e differently:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eTailwind utilities are not the “most important” layer.\u003c/li\u003e\n\n\n\n\u003cli\u003eMy unnamed CSS layer is the most important one.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eI do this so I can:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBuild prototypes with Tailwind\u003c/strong\u003e (quickly, easily, especially with the \u003ca href=\"https://splendidlabz/docs/layouts/\"\u003etools\u003c/a\u003e I’ve created).\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003eShift these properties to CSS\u003c/strong\u003e when they get more complex — so I don’t have to read messy utility-littered HTML that makes my heart sink. Not because utility HTML is bad, but because it takes lots of brain processing power to figure out what’s happening.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eFinally, here’s the nice thing about Tailwind being in a utility layer: I can always \u003ccode\u003e!important\u003c/code\u003e a utility to give it strength.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- !important the padding utility --\u0026gt;\n\u0026lt;div class=\u0026#34;component !p-4\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhoa, hold on, wait a minute! Isn’t this wrong, you might ask?\u003c/p\u003e\n\n\n\n\u003cp\u003eNope. The \u003ccode\u003e!important\u003c/code\u003e keyword has traditionally been used to override classes. In this case, we’re leveraging on the \u003ca href=\"https://css-tricks.com/css-cascade-layers/#important-origins-context-and-layers-are-reversed\"\u003e\u003ccode\u003e!important\u003c/code\u003e feature in CSS Layers\u003c/a\u003e to say the Tailwind utility is more important than any CSS in the unnamed layer.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis is perfectly valid and is a built-in feature for CSS Layers.\u003c/p\u003e\n\n\n\n\u003cp\u003eBesides, the \u003ccode\u003e!important\u003c/code\u003e is so explicit (and used so little) that it makes sense for one-off quick-and-dirty adjustments (without creating a brand new selector for it).\u003c/p\u003e\n\n\n\u003ch3 id=\"tailwind-utilities-are-more-powerful-than-they-seem\"\u003eTailwind utilities are more powerful than they seem\u003c/h3\u003e\n\n\n\u003cp\u003eTailwind utilities are not a 1:1 map between a class and a CSS property. Built-in Tailwind utilities mostly look like this so it can give people a wrong impression.\u003c/p\u003e\n\n\n\n\u003cp\u003eTailwind utilities are more like \u003ca href=\"https://css-tricks.com/tailwinds-apply-feature-is-better-than-it-sounds/\"\u003econvenient Sass mixins\u003c/a\u003e, which means we can build effective tools for \u003ca href=\"https://splendidlabz/docs/layouts/\"\u003elayouts\u003c/a\u003e, theming, typography, and more, through them.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can find out about these thoughts inside \u003ca href=\"https://magicaldevschool.com/courses/unorthodox-tailwind/\" rel=\"noopener\"\u003eUnorthodox Tailwind\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThanks for reading and I hope you’re enjoying a new way of looking at (or using) Tailwind!\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-06-30T07:16:43-06:00",
  "modifiedTime": "2025-06-30T07:16:47-06:00"
}
