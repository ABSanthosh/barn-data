{
  "id": "c25486a2-b22d-40a8-8242-0b10cdf8ba2d",
  "title": "HTML spec change: escaping \u003c and \u003e in attributes",
  "link": "https://developer.chrome.com/blog/escape-attributes?hl=en",
  "description": "What you need to know about this change to how attributes are escaped.",
  "author": "",
  "published": "Thu, 12 Jun 2025 07:00:00 GMT",
  "source": "https://developer.chrome.com/static/blog/feed.xml",
  "categories": null,
  "byline": "Michał Bentkowski",
  "length": 4963,
  "excerpt": "What you need to know about this change to how attributes are escaped.",
  "siteName": "Chrome for Developers",
  "favicon": "https://www.gstatic.com/devrel-devsite/prod/va55008f56463f12ba1a0c4ec3fdc81dac4d4d331f95ef7b209d2570e7d9e879b/chrome/images/favicon.png",
  "text": "HTML spec change: escaping \u003c and \u003e in attributes Published: June 12, 2025 On May 20, 2025, the HTML specification was updated to escape \u003c and \u003e in attributes, helping prevent mutation XSS (mXSS) vulnerabilities. This change landed in Chrome 138, which was promoted to Beta on May 28, 2025, and will become Stable on June 24, 2025. This post details the impact of the HTML attribute escaping change on web developers and potential breakages; the security rationale behind this change is explained in our related post on the Security Engineering blog. What changed Suppose that you have a \u003cdiv\u003e element whose attribute data-content has a value of \"\u003cu\u003ehello\u003c/u\u003e\". What happens when you read div.outerHTML? Historically, you'd get the following HTML: \u003cdiv data-content=\"\u003cu\u003ehello\u003c/u\u003e\"\u003e\u003c/div\u003e After the change, you'll get the following HTML: \u003cdiv data-content=\"\u0026lt;u\u0026gt;hello\u0026lt;/u\u0026gt;\"\u003e\u003c/div\u003e Previously, neither \u003c nor \u003e were escaped in attributes. Now, both of these characters are always escaped. What didn't change The change exclusively modifies how HTML fragments are converted back into a string representation during serialization. The impact is limited to scenarios where the innerHTML or outerHTML properties are accessed, or when the getHTML() method is invoked on an element. These operations take the existing DOM structure and produce a textual HTML representation. This change does not affect HTML parsing. Consider the following HTML: \u003cdiv id=\"div1\" data-content=\"\u003cu\u003ehello\u003c/u\u003e\"\u003e\u003c/div\u003e \u003cdiv id=\"div2\" data-content=\"\u0026lt;u\u0026gt;hello\u0026lt;/u\u0026gt;\"\u003e\u003c/div\u003e Both divs will be parsed exactly the same way and in both cases div.dataset.content will return \"\u003cu\u003ehello\u003c/u\u003e\". What won't break? If you use any DOM API, such as getAttribute, getAttributeNS, dataset, or attributes, to retrieve attribute values, they will return the same decoded values as before, specifically with \u003c and \u003e decoded. Consider the following example, in which all console.log lines will log \"\u003cu\u003e\": \u003cdiv data-content=\"\u0026lt;u\u0026gt;\"\u003e\u003c/div\u003e const div = document.querySelector(\"div\"); // All of the following will log \"\u003cu\u003e\" console.log(div.getAttribute(\"data-content\")); console.log(div.dataset.content); console.log(div.attributes['data-content'].value); What can break? innerHTML and outerHTML to get attributes If you use innerHTML or outerHTML to extract the value of an attribute, your code can break. Consider the following, albeit slightly convoluted, example: \u003cdiv data-content=\"\u003cu\u003e\"\u003e\u003c/div\u003e const div = div.querySelector(\"div\"); const content = div.outerHTML.match(/\"([^\"]+)\"/)[1]; console.log(content); This code will exhibit different behavior after this change. Previously, content would've been equal to \"\u003cu\u003e\" but now it is \"\u0026lt;u\u0026gt;\". Note that parsing HTML with regular expressions is not recommended. If you need to get a value of an attribute, use the DOM APIs described in previous sections. End-to-end tests If you have a CI/CD pipeline where you employ Chromium to generate HTML, and you've written tests to compare the HTML to a static expected value, these tests can break if any attribute contains \u003c or \u003e. This is an expected breakage—you need to update the expected value so that all \u003c and \u003echaracters are escaped to \u0026lt; and \u0026gt;, respectively. Summary This blog post described a change in the HTML specification which will lead browsers to start escaping \u003c and \u003e in attributes to improve security by preventing some instances of mutation XSS. The change will be available for all users on June 24, 2025 on Chromium (version 138) and Firefox (version 140). It's also included in Safari 26 Beta which should be released around September 2025. If you believe that this change broke your website and you don't have an easy way to fix it, please file a bug at https://issues.chromium.org/. Additional information Original bug report about this proposed change. Pull request that changes the spec. ChromeStatus entry Google Security Engineering blog post on security rationale behind this change Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2025-06-12 UTC. [[[\"Easy to understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved my problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing the information I need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / too many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out of date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2025-06-12 UTC.\"],[],[]]",
  "image": "https://developer.chrome.com/static/blog/escape-attributes/image/hero.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv role=\"main\" id=\"main-content\" has-sidebar=\"\"\u003e\n          \n          \u003cdevsite-content\u003e\n            \n              \n\n\n\n\n\n\n\n\n\n\n\n\n\u003carticle\u003e\n  \n  \n  \n  \n  \n\n  \n  \n    \u003ch2 tabindex=\"-1\"\u003e\n      HTML spec change: escaping \u0026lt; and \u0026gt; in attributes\n  \n      \n    \u003c/h2\u003e\n  \n  \n\n  \u003cdevsite-toc depth=\"2\" devsite-toc-embedded=\"\"\u003e\n  \u003c/devsite-toc\u003e\n  \n    \n  \u003cdiv\u003e\n\n  \n    \n\n\n\n\n\n\n\u003cp\u003e\n  Published: June 12, 2025\n\u003c/p\u003e\n\n\n\u003cp\u003eOn May 20, 2025, \u003ca href=\"https://github.com/whatwg/html/pull/6362\"\u003ethe HTML specification was\nupdated\u003c/a\u003e to escape \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026gt;\u003c/code\u003e in\nattributes, helping prevent \u003ca href=\"https://cure53.de/fp170.pdf\"\u003emutation XSS\u003c/a\u003e (mXSS)\nvulnerabilities. This change landed in Chrome 138, which was promoted to Beta on\nMay 28, 2025, and will become Stable on June 24, 2025.\u003c/p\u003e\n\n\u003cp\u003eThis post details the impact of the HTML attribute escaping change on web\ndevelopers and potential breakages; the security rationale behind this change is\nexplained in our \u003ca href=\"https://bughunters.google.com/blog/5038742869770240\"\u003erelated post\u003c/a\u003e on the Security Engineering blog.\u003c/p\u003e\n\n\u003ch2 id=\"what_changed\" data-text=\"What changed\" tabindex=\"-1\"\u003eWhat changed\u003c/h2\u003e\n\n\u003cp\u003eSuppose that you have a \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;div\u0026gt;\u003c/code\u003e element whose attribute \u003ccode translate=\"no\" dir=\"ltr\"\u003edata-content\u003c/code\u003e has a\nvalue of \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;\u0026lt;u\u0026gt;hello\u0026lt;/u\u0026gt;\u0026#34;\u003c/code\u003e. What happens when you read \u003ccode translate=\"no\" dir=\"ltr\"\u003ediv.outerHTML\u003c/code\u003e?\u003c/p\u003e\n\n\u003cp\u003eHistorically, you\u0026#39;d get the following HTML:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;div data-content=\u0026#34;\u0026lt;u\u0026gt;hello\u0026lt;/u\u0026gt;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eAfter the change, you\u0026#39;ll get the following HTML:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;div data-content=\u0026#34;\u0026amp;lt;u\u0026amp;gt;hello\u0026amp;lt;/u\u0026amp;gt;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003ePreviously, neither \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;\u003c/code\u003e nor \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026gt;\u003c/code\u003e were escaped in attributes. Now, both of these\ncharacters are always escaped.\u003c/p\u003e\n\n\u003ch2 id=\"what_didnt_change\" data-text=\"What didn\u0026#39;t change\" tabindex=\"-1\"\u003eWhat didn\u0026#39;t change\u003c/h2\u003e\n\n\u003cp\u003eThe change exclusively modifies how HTML fragments are converted back into a\nstring representation during serialization. The impact is limited to scenarios\nwhere the \u003ccode translate=\"no\" dir=\"ltr\"\u003einnerHTML\u003c/code\u003e or \u003ccode translate=\"no\" dir=\"ltr\"\u003eouterHTML\u003c/code\u003e properties are accessed, or when the\n\u003ccode translate=\"no\" dir=\"ltr\"\u003egetHTML()\u003c/code\u003e method is invoked on an element. These operations take the existing\nDOM structure and produce a textual HTML representation.\u003c/p\u003e\n\n\u003cp\u003eThis change does \u003cem\u003enot\u003c/em\u003e affect HTML parsing. Consider the following HTML:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;div id=\u0026#34;div1\u0026#34; data-content=\u0026#34;\u0026lt;u\u0026gt;hello\u0026lt;/u\u0026gt;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u0026lt;div id=\u0026#34;div2\u0026#34; data-content=\u0026#34;\u0026amp;lt;u\u0026amp;gt;hello\u0026amp;lt;/u\u0026amp;gt;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eBoth \u003ccode translate=\"no\" dir=\"ltr\"\u003ediv\u003c/code\u003es will be parsed exactly the same way and in both cases\n\u003ccode translate=\"no\" dir=\"ltr\"\u003ediv.dataset.content\u003c/code\u003e will return \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;\u0026lt;u\u0026gt;hello\u0026lt;/u\u0026gt;\u0026#34;\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"what_wont_break\" data-text=\"What won\u0026#39;t break?\" tabindex=\"-1\"\u003eWhat won\u0026#39;t break?\u003c/h2\u003e\n\n\u003cp\u003eIf you use any DOM API, such as\n\u003ca href=\"https://developer.mozilla.org/docs/Web/API/Element/getAttribute\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003egetAttribute\u003c/code\u003e\u003c/a\u003e,\n\u003ca href=\"https://developer.mozilla.org/docs/Web/API/Element/getAttributeNS\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003egetAttributeNS\u003c/code\u003e\u003c/a\u003e,\n\u003ca href=\"https://developer.mozilla.org/docs/Web/API/HTMLElement/dataset\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003edataset\u003c/code\u003e\u003c/a\u003e,\nor\n\u003ca href=\"https://developer.mozilla.org/docs/Web/API/Element/attributes\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003eattributes\u003c/code\u003e\u003c/a\u003e,\nto retrieve attribute values, they will return the same decoded values as\nbefore, specifically with \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026gt;\u003c/code\u003e decoded.\u003c/p\u003e\n\n\u003cp\u003eConsider the following example, in which all \u003ccode translate=\"no\" dir=\"ltr\"\u003econsole.log\u003c/code\u003e lines will log\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;\u0026lt;u\u0026gt;\u0026#34;\u003c/code\u003e:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;div data-content=\u0026#34;\u0026amp;lt;u\u0026amp;gt;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003edocument\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equerySelector\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;div\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003e// All of the following will log \u0026#34;\u0026lt;u\u0026gt;\u0026#34;\u003c/span\u003e\n\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003egetAttribute\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;data-content\u0026#34;\u003c/span\u003e\u003cspan\u003e));\u003c/span\u003e\n\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003edataset\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eattributes\u003c/span\u003e\u003cspan\u003e[\u003c/span\u003e\u003cspan\u003e\u0026#39;data-content\u0026#39;\u003c/span\u003e\u003cspan\u003e].\u003c/span\u003e\u003cspan\u003evalue\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003ch2 id=\"what_can_break\" data-text=\"What can break?\" tabindex=\"-1\"\u003eWhat can break?\u003c/h2\u003e\n\n\u003ch3 id=\"innerhtml_and_outerhtml_to_get_attributes\" data-text=\"innerHTML and outerHTML to get attributes\" tabindex=\"-1\"\u003einnerHTML and outerHTML to get attributes\u003c/h3\u003e\n\n\u003cp\u003eIf you use \u003ccode translate=\"no\" dir=\"ltr\"\u003einnerHTML\u003c/code\u003e or \u003ccode translate=\"no\" dir=\"ltr\"\u003eouterHTML\u003c/code\u003e to extract the value of an attribute, your\ncode can break. Consider the following, albeit slightly convoluted, example:\u003c/p\u003e\n\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"HTML\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;div data-content=\u0026#34;\u0026lt;u\u0026gt;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\u003cdevsite-code\u003e\u003cpre translate=\"no\" dir=\"ltr\" is-upgraded=\"\" syntax=\"JavaScript\"\u003e\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003equerySelector\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e\u0026#34;div\u0026#34;\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003cspan\u003econst\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003e=\u003c/span\u003e\u003cspan\u003e \u003c/span\u003e\u003cspan\u003ediv\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003eouterHTML\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003ematch\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003e/\u0026#34;([^\u0026#34;]+)\u0026#34;/\u003c/span\u003e\u003cspan\u003e)[\u003c/span\u003e\u003cspan\u003e1\u003c/span\u003e\u003cspan\u003e];\u003c/span\u003e\n\u003cspan\u003econsole\u003c/span\u003e\u003cspan\u003e.\u003c/span\u003e\u003cspan\u003elog\u003c/span\u003e\u003cspan\u003e(\u003c/span\u003e\u003cspan\u003econtent\u003c/span\u003e\u003cspan\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/devsite-code\u003e\n\u003cp\u003eThis code will exhibit different behavior after this change. Previously,\n\u003ccode translate=\"no\" dir=\"ltr\"\u003econtent\u003c/code\u003e would\u0026#39;ve been equal to \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;\u0026lt;u\u0026gt;\u0026#34;\u003c/code\u003e but now it is \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026#34;\u0026amp;lt;u\u0026amp;gt;\u0026#34;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNote that \u003ca href=\"https://stackoverflow.com/a/1732454\"\u003eparsing HTML with regular expressions is not\nrecommended\u003c/a\u003e. If you need to get a value of\nan attribute, use the DOM APIs described in previous sections.\u003c/p\u003e\n\n\u003ch3 id=\"end-to-end_tests\" data-text=\"End-to-end tests\" tabindex=\"-1\"\u003eEnd-to-end tests\u003c/h3\u003e\n\n\u003cp\u003eIf you have a CI/CD pipeline where you employ Chromium to generate HTML, and\nyou\u0026#39;ve written tests to compare the HTML to a static expected value, these tests\ncan break if any attribute contains \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;\u003c/code\u003e or \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis is an expected breakage—you need to update the expected value so that all\n\u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026gt;\u003c/code\u003echaracters are escaped to \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026amp;lt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026amp;gt;,\u003c/code\u003e respectively.\u003c/p\u003e\n\n\u003ch2 id=\"summary\" data-text=\"Summary\" tabindex=\"-1\"\u003eSummary\u003c/h2\u003e\n\n\u003cp\u003eThis blog post described a change in the HTML specification which will lead\nbrowsers to start escaping \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026lt;\u003c/code\u003e and \u003ccode translate=\"no\" dir=\"ltr\"\u003e\u0026gt;\u003c/code\u003e in attributes to improve security by\npreventing some instances of mutation XSS.\u003c/p\u003e\n\n\u003cp\u003eThe change will be available for all users on June 24, 2025 on Chromium (version 138)\nand Firefox (version 140). It\u0026#39;s also included in Safari 26 Beta which\nshould be released around September 2025.\u003c/p\u003e\n\n\u003cp\u003eIf you believe that this change broke your website and you don\u0026#39;t have an easy\nway to fix it, please file a bug at\n\u003ca href=\"https://issues.chromium.org/\"\u003ehttps://issues.chromium.org/\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"additional_information\" data-text=\"Additional information\" tabindex=\"-1\"\u003eAdditional information\u003c/h2\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/whatwg/html/issues/6235\"\u003eOriginal bug report about this proposed change\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/whatwg/html/pull/6362\"\u003ePull request that changes the spec\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://chromestatus.com/feature/6264983847174144\"\u003eChromeStatus entry\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://bughunters.google.com/blog/5038742869770240\"\u003eGoogle Security Engineering blog post on security rationale behind this change\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n  \n\n  \n\u003c/div\u003e\n\n  \n    \n    \n      \n    \u003cdevsite-thumb-rating position=\"footer\"\u003e\n    \u003c/devsite-thumb-rating\u003e\n  \n       \n    \n    \n  \n\n  \u003c/article\u003e\n\n\n\u003cdevsite-content-footer\u003e\n  \u003cp\u003eExcept as otherwise noted, the content of this page is licensed under the \u003ca href=\"https://creativecommons.org/licenses/by/4.0/\"\u003eCreative Commons Attribution 4.0 License\u003c/a\u003e, and code samples are licensed under the \u003ca href=\"https://www.apache.org/licenses/LICENSE-2.0\"\u003eApache 2.0 License\u003c/a\u003e. For details, see the \u003ca href=\"https://developers.google.com/site-policies\"\u003eGoogle Developers Site Policies\u003c/a\u003e. Java is a registered trademark of Oracle and/or its affiliates.\u003c/p\u003e\n  \u003cp\u003eLast updated 2025-06-12 UTC.\u003c/p\u003e\n\u003c/devsite-content-footer\u003e\n\n\n\u003cdevsite-notification\u003e\n\u003c/devsite-notification\u003e\n\n\n  \n\u003cp\u003e\n  \n  \n    \u003ctemplate\u003e\n      [[[\u0026#34;Easy to understand\u0026#34;,\u0026#34;easyToUnderstand\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Solved my problem\u0026#34;,\u0026#34;solvedMyProblem\u0026#34;,\u0026#34;thumb-up\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherUp\u0026#34;,\u0026#34;thumb-up\u0026#34;]],[[\u0026#34;Missing the information I need\u0026#34;,\u0026#34;missingTheInformationINeed\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Too complicated / too many steps\u0026#34;,\u0026#34;tooComplicatedTooManySteps\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Out of date\u0026#34;,\u0026#34;outOfDate\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Samples / code issue\u0026#34;,\u0026#34;samplesCodeIssue\u0026#34;,\u0026#34;thumb-down\u0026#34;],[\u0026#34;Other\u0026#34;,\u0026#34;otherDown\u0026#34;,\u0026#34;thumb-down\u0026#34;]],[\u0026#34;Last updated 2025-06-12 UTC.\u0026#34;],[],[]]\n    \u003c/template\u003e\n  \n\u003c/p\u003e\n            \n          \u003c/devsite-content\u003e\n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": null,
  "modifiedTime": null
}
