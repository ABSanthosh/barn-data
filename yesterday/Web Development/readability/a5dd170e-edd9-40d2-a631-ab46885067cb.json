{
  "id": "a5dd170e-edd9-40d2-a631-ab46885067cb",
  "title": "Poking at the CSS if() Function a Little More: Conditional Color Theming",
  "link": "https://css-tricks.com/poking-at-the-css-if-function-a-little-more-conditional-color-theming/",
  "description": "The CSS if() function enables us to use values conditionally, which we can already do with queries and other functions, so I’m sure you’re wondering: What exactly does if() do? Let's look at a possible real-world use case. Poking at the CSS if() Function a Little More: Conditional Color Theming originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Daniel Schwarz",
  "published": "Wed, 25 Jun 2025 14:33:45 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "CSS functions"
  ],
  "byline": "Daniel Schwarz",
  "length": 8706,
  "excerpt": "The CSS if() function enables us to use values conditionally, which we can already do with queries and other functions, so I’m sure you’re wondering: What exactly does if() do? Let's look at a possible real-world use case.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Chrome 137 shipped the if() CSS function, so it’s totally possible we’ll see other browsers implement it, though it’s tough to know exactly when. Whatever the case, if() enables us to use values conditionally, which we can already do with queries and other functions (e.g., media queries and the light-dark() function), so I’m sure you’re wondering: What exactly does if() do? Sunkanmi gave us a nice overview of the function yesterday, poking at the syntax at a high level. I’d like to poke at it a little harder in this article, getting into some possible real-world usage. To recap, if() conditionally assigns a value to a property based on the value of a CSS variable. For example, we could assign different values to the color and background properties based on the value of --theme: --theme: \"Shamrock\" color: ‌hsl(146 50% 3%) background: hsl(146 50% 40%) --theme: Anything else color: hsl(43 74% 3%) background: hsl(43 74% 64%) :root { /* Change to fall back to the ‘else’ values */ --theme: \"Shamrock\"; body { color: if(style(--theme: \"Shamrock\"): hsl(146 50% 3%); else: hsl(43 74% 3%)); background: if(style(--theme: \"Shamrock\"): hsl(146 50% 40%); else: hsl(43 74% 64%)); } } I don’t love the syntax (too many colons, brackets, and so on), but we can format it like this (which I think is a bit clearer): color: if( style(--theme: \"Shamrock\"): hsl(146 50% 3%); else: hsl(43 74% 3%) ); We should be able to do a crazy number of things with if(), and I hope that becomes the case eventually, but I did some testing and learned that the syntax above is the only one that works. We can’t base the condition on the value of an ordinary CSS property (instead of a custom property), HTML attribute (using attr()), or any other value. For now, at least, the condition must be based on the value of a custom property (CSS variable). Exploring what we can do with if() Judging from that first example, it’s clear that we can use if() for theming (and design systems overall). While we could utilize the light-dark() function for this, what if the themes aren’t strictly light and dark, or what if we want to have more than two themes or light and dark modes for each theme? Well, that’s what if() can be used for. First, let’s create more themes/more conditions: :root { /* Shamrock | Saffron | Amethyst */ --theme: \"Saffron\"; /* ...I choose you! */ body { color: if( style(--theme: \"Shamrock\"): hsl(146 50% 3%); style(--theme: \"Saffron\"): hsl(43 74% 3%); style(--theme: \"Amethyst\"): hsl(282 47% 3%) ); background: if( style(--theme: \"Shamrock\"): hsl(146 50% 40%); style(--theme: \"Saffron\"): hsl(43 74% 64%); style(--theme: \"Amethyst\"): hsl(282 47% 56%) ); transition: 300ms; } } Pretty simple really, but there are a few easy-to-miss things. Firstly, there’s no “else condition” this time, which means that if the theme isn’t Shamrock, Saffron, or Amethyst, the default browser styles are used. Otherwise, the if() function resolves to the value of the first true statement, which is the Saffron theme in this case. Secondly, transitions work right out of the box; in the demo below, I’ve added a user interface for toggling the --theme, and for the transition, literally just transition: 300ms alongside the if() functions: Note: if theme-swapping is user-controlled, such as selecting an option, you don’t actually need if() at all. You can just use the logic that I’ve used at the beginning of the demo (:root:has(#shamrock:checked) { /* Styles */ }). Amit Sheen has an excellent demonstration over at Smashing Magazine. To make the code more maintainable though, we can slide the colors into CSS variables as well, then use them in the if() functions, then slide the if() functions themselves into CSS variables: /* Setup */ :root { /* Shamrock | Saffron | Amethyst */ --theme: \"Shamrock\"; /* ...I choose you! */ /* Base colors */ --shamrock: hsl(146 50% 40%); --saffron: hsl(43 74% 64%); --amethyst: hsl(282 47% 56%); /* Base colors, but at 3% lightness */ --shamrock-complementary: hsl(from var(--shamrock) h s 3%); --saffron-complementary: hsl(from var(--saffron) h s 3%); --amethyst-complementary: hsl(from var(--amethyst) h s 3%); --background: if( style(--theme: \"Shamrock\"): var(--shamrock); style(--theme: \"Saffron\"): var(--saffron); style(--theme: \"Amethyst\"): var(--amethyst) ); --color: if( style(--theme: \"Shamrock\"): var(--shamrock-complementary); style(--theme: \"Saffron\"): var(--saffron-complementary); style(--theme: \"Amethyst\"): var(--amethyst-complementary) ); /* Usage */ body { /* One variable, all ifs! */ background: var(--background); color: var(--color); accent-color: var(--color); /* Can’t forget this! */ transition: 300ms; } } As well as using CSS variables within the if() function, we can also nest other functions. In the example below, I’ve thrown light-dark() in there, which basically inverts the colors for dark mode: --background: if( style(--theme: \"Shamrock\"): light-dark(var(--shamrock), var(--shamrock-complementary)); style(--theme: \"Saffron\"): light-dark(var(--saffron), var(--saffron-complementary)); style(--theme: \"Amethyst\"): light-dark(var(--amethyst), var(--amethyst-complementary)) ); if() vs. Container style queries If you haven’t used container style queries before, they basically check if a container has a certain CSS variable (much like the if() function). Here’s the exact same example/demo but with container style queries instead of the if() function: :root { /* Shamrock | Saffron | Amethyst */ --theme: \"Shamrock\"; /* ...I choose you! */ --shamrock: hsl(146 50% 40%); --saffron: hsl(43 74% 64%); --amethyst: hsl(282 47% 56%); --shamrock-complementary: hsl(from var(--shamrock) h s 3%); --saffron-complementary: hsl(from var(--saffron) h s 3%); --amethyst-complementary: hsl(from var(--amethyst) h s 3%); body { /* Container has chosen Shamrock! */ @container style(--theme: \"Shamrock\") { --background: light-dark(var(--shamrock), var(--shamrock-complementary)); --color: light-dark(var(--shamrock-complementary), var(--shamrock)); } @container style(--theme: \"Saffron\") { --background: light-dark(var(--saffron), var(--saffron-complementary)); --color: light-dark(var(--saffron-complementary), var(--saffron)); } @container style(--theme: \"Amethyst\") { --background: light-dark(var(--amethyst), var(--amethyst-complementary)); --color: light-dark(var(--amethyst-complementary), var(--amethyst)); } background: var(--background); color: var(--color); accent-color: var(--color); transition: 300ms; } } As you can see, where if() facilitates conditional values, container style queries facilitate conditional properties and values. Other than that, it really is just a different syntax. Additional things you can do with if() (but might not realize) Check if a CSS variable exists: /* Hide icons if variable isn’t set */ .icon { display: if( style(--icon-family): inline-block; else: none ); } Create more-complex conditional statements: h1 { font-size: if( style(--largerHeadings: true): xxx-large; style(--theme: \"themeWithLargerHeadings\"): xxx-large ); } Check if two CSS variables match: /* If #s2 has the same background as #s1, add a border */ #s2 { border-top: if( style(--s2-background: var(--s1-background)): thin solid red ); } if() and calc(): When the math isn’t mathing This won’t work (maybe someone can help me pinpoint why): div { /* 3/3 = 1 */ --calc: calc(3/3); /* Blue, because if() won’t calculate --calc */ background: if(style(--calc: 1): red; else: blue); } To make if() calculate --calc, we’ll need to register the CSS variable using @property first, like this: @property --calc { syntax: \"\u003cnumber\u003e\"; initial-value: 0; inherits: false; } Closing thoughts Although I’m not keen on the syntax and how unreadable it can sometimes look (especially if it’s formatted on one line), I’m mega excited to see how if() evolves. I’d love to be able to use it with ordinary properties (e.g., color: if(style(background: white): black; style(background: black): white);) to avoid having to set CSS variables where possible. It’d also be awesome if calc() calculations could be calculated on the fly without having to register the variable. That being said, I’m still super happy with what if() does currently, and can’t wait to build even simpler design systems.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/07/if-conditional-thumbnail.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003e\u003ca href=\"https://developer.chrome.com/release-notes/137\" rel=\"noopener\"\u003eChrome 137\u003c/a\u003e shipped the \u003ca href=\"https://css-tricks.com/if-css-gets-inline-conditionals/\"\u003e\u003ccode\u003eif()\u003c/code\u003e CSS function\u003c/a\u003e, so it’s totally possible we’ll see other browsers implement it, though it’s tough to know exactly when. Whatever the case, \u003ccode\u003eif()\u003c/code\u003e enables us to use values conditionally, which we can already do with queries and other functions (e.g., media queries and the \u003ca href=\"https://css-tricks.com/almanac/functions/l/light-dark/\"\u003e\u003ccode\u003elight-dark()\u003c/code\u003e\u003c/a\u003e function), so I’m sure you’re wondering: What exactly does \u003ccode\u003eif()\u003c/code\u003e do?\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://css-tricks.com/lightly-poking-at-the-css-if-function-in-chrome-137/\"\u003eSunkanmi gave us a nice overview of the function yesterday\u003c/a\u003e, poking at the syntax at a high level. I’d like to poke at it a little harder in this article, getting into some possible real-world usage.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo recap, \u003ccode\u003eif()\u003c/code\u003e conditionally assigns a value to a property based on the value of a CSS variable. For example, we could assign different values to the \u003ca href=\"https://css-tricks.com/almanac/properties/c/color/\"\u003e\u003ccode\u003ecolor\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://css-tricks.com/almanac/properties/b/background/\"\u003e\u003ccode\u003ebackground\u003c/code\u003e\u003c/a\u003e properties based on the value of \u003ccode\u003e--theme\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--theme\u003c/code\u003e: \u003ccode\u003e\u0026#34;Shamrock\u0026#34;\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecolor\u003c/code\u003e: \u003ccode\u003e‌hsl(146 50% 3%)\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ebackground\u003c/code\u003e: \u003ccode\u003ehsl(146 50% 40%)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003e--theme\u003c/code\u003e: Anything else\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecolor\u003c/code\u003e: \u003ccode\u003ehsl(43 74% 3%)\u003c/code\u003e\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003ccode\u003ebackground\u003c/code\u003e: \u003ccode\u003ehsl(43 74% 64%)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  /* Change to fall back to the ‘else’ values */\n  --theme: \u0026#34;Shamrock\u0026#34;;\n\n  body {\n    color: if(style(--theme: \u0026#34;Shamrock\u0026#34;): hsl(146 50% 3%); else: hsl(43 74% 3%));\n    background: if(style(--theme: \u0026#34;Shamrock\u0026#34;): hsl(146 50% 40%); else: hsl(43 74% 64%));\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eI don’t love the syntax (too many colons, brackets, and so on), but we can format it like this (which I think is a bit clearer):\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ecolor: if(\n  style(--theme: \u0026#34;Shamrock\u0026#34;): hsl(146 50% 3%);\n  else: hsl(43 74% 3%)\n);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe should be able to do a crazy number of things with \u003ccode\u003eif()\u003c/code\u003e, and I hope that becomes the case eventually, but I did some testing and learned that the syntax above is the only one that works. We can’t base the condition on the value of an ordinary CSS property (instead of a custom property), HTML attribute (using \u003ca href=\"https://css-tricks.com/almanac/functions/a/attr/\"\u003e\u003ccode\u003eattr()\u003c/code\u003e\u003c/a\u003e), or any other value. For now, at least, the condition must be based on the value of a custom property (CSS variable).\u003c/p\u003e\n\n\n\u003ch3 id=\"exploring-what-we-can-do-with-if-\"\u003eExploring what we can do with \u003ccode\u003eif()\u003c/code\u003e\u003c/h3\u003e\n\n\n\u003cp\u003eJudging from that first example, it’s clear that we can use \u003ccode\u003eif()\u003c/code\u003e for theming (and design systems overall). While we could utilize the \u003ccode\u003elight-dark()\u003c/code\u003e function for this, what if the themes aren’t strictly light and dark, or what if we want to have more than two themes or light and dark modes for each theme? Well, that’s what \u003ccode\u003eif()\u003c/code\u003e can be used for.\u003c/p\u003e\n\n\n\n\u003cp\u003eFirst, let’s create more themes/more conditions:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  /* Shamrock | Saffron | Amethyst */\n  --theme: \u0026#34;Saffron\u0026#34;; /* ...I choose you! */\n\n  body {\n    color: if(\n      style(--theme: \u0026#34;Shamrock\u0026#34;): hsl(146 50% 3%);\n      style(--theme: \u0026#34;Saffron\u0026#34;): hsl(43 74% 3%);\n      style(--theme: \u0026#34;Amethyst\u0026#34;): hsl(282 47% 3%)\n    );\n    background: if(\n      style(--theme: \u0026#34;Shamrock\u0026#34;): hsl(146 50% 40%);\n      style(--theme: \u0026#34;Saffron\u0026#34;): hsl(43 74% 64%);\n      style(--theme: \u0026#34;Amethyst\u0026#34;): hsl(282 47% 56%)\n    );\n    transition: 300ms;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003ePretty simple really, but there are a few easy-to-miss things. Firstly, there’s no “else condition” this time, which means that if the theme isn’t \u003ccode\u003eShamrock\u003c/code\u003e, \u003ccode\u003eSaffron\u003c/code\u003e, or \u003ccode\u003eAmethyst\u003c/code\u003e, the default browser styles are used. Otherwise, the \u003ccode\u003eif()\u003c/code\u003e function \u003cem\u003eresolves to the value of the first true statement\u003c/em\u003e, which is the \u003ccode\u003eSaffron\u003c/code\u003e theme in this case. Secondly, transitions work right out of the box; in the demo below, I’ve added a user interface for toggling the \u003ccode\u003e--theme\u003c/code\u003e, and for the transition, \u003cem\u003eliterally\u003c/em\u003e just \u003ccode\u003etransition: 300ms\u003c/code\u003e alongside the \u003ccode\u003eif()\u003c/code\u003e functions:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e if theme-swapping is user-controlled, such as selecting an option, you don’t actually need \u003ccode\u003eif()\u003c/code\u003e at all. You can just use the logic that I’ve used at the beginning of the demo (\u003ccode\u003e:root:has(#shamrock:checked) { /* Styles */ }\u003c/code\u003e). Amit Sheen has an \u003ca href=\"https://www.smashingmagazine.com/2024/05/combining-css-has-html-select-conditional-styling/\" rel=\"noopener\"\u003eexcellent demonstration over at Smashing Magazine\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eTo make the code more maintainable though, we can slide the colors into CSS variables as well, then use them in the \u003ccode\u003eif()\u003c/code\u003e functions, \u003cem\u003ethen\u003c/em\u003e slide the \u003ccode\u003eif()\u003c/code\u003e functions themselves into CSS variables:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Setup */\n:root {\n  /* Shamrock | Saffron | Amethyst */\n  --theme: \u0026#34;Shamrock\u0026#34;; /* ...I choose you! */\n\n  /* Base colors */\n  --shamrock: hsl(146 50% 40%);\n  --saffron: hsl(43 74% 64%);\n  --amethyst: hsl(282 47% 56%);\n\n  /* Base colors, but at 3% lightness */\n  --shamrock-complementary: hsl(from var(--shamrock) h s 3%);\n  --saffron-complementary: hsl(from var(--saffron) h s 3%);\n  --amethyst-complementary: hsl(from var(--amethyst) h s 3%);\n\n  --background: if(\n    style(--theme: \u0026#34;Shamrock\u0026#34;): var(--shamrock);\n    style(--theme: \u0026#34;Saffron\u0026#34;): var(--saffron);\n    style(--theme: \u0026#34;Amethyst\u0026#34;): var(--amethyst)\n  );\n\n  --color: if(\n    style(--theme: \u0026#34;Shamrock\u0026#34;): var(--shamrock-complementary);\n    style(--theme: \u0026#34;Saffron\u0026#34;): var(--saffron-complementary);\n    style(--theme: \u0026#34;Amethyst\u0026#34;): var(--amethyst-complementary)\n  );\n\n  /* Usage */\n  body {\n    /* One variable, all ifs! */\n    background: var(--background);\n    color: var(--color);\n    accent-color: var(--color);\n\n    /* Can’t forget this! */\n    transition: 300ms;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAs well as using CSS variables within the \u003ccode\u003eif()\u003c/code\u003e function, we can also nest other functions. In the example below, I’ve thrown \u003ccode\u003elight-dark()\u003c/code\u003e in there, which basically inverts the colors for dark mode:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e--background: if(\n  style(--theme: \u0026#34;Shamrock\u0026#34;): light-dark(var(--shamrock), var(--shamrock-complementary));\n  style(--theme: \u0026#34;Saffron\u0026#34;): light-dark(var(--saffron), var(--saffron-complementary));\n  style(--theme: \u0026#34;Amethyst\u0026#34;): light-dark(var(--amethyst), var(--amethyst-complementary))\n);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\u003ch3 id=\"-if-vs-container-style-queries\"\u003e\u003ccode\u003eif()\u003c/code\u003e vs. Container style queries\u003c/h3\u003e\n\n\n\u003cp\u003eIf you haven’t used \u003ca href=\"https://css-tricks.com/css-container-queries/#aa-container-style-queries\"\u003econtainer style queries\u003c/a\u003e before, they basically check if a container has a certain CSS variable (much like the \u003ccode\u003eif()\u003c/code\u003e function). Here’s the exact same example/demo but with container style queries instead of the \u003ccode\u003eif()\u003c/code\u003e function:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  /* Shamrock | Saffron | Amethyst */\n  --theme: \u0026#34;Shamrock\u0026#34;; /* ...I choose you! */\n\n  --shamrock: hsl(146 50% 40%);\n  --saffron: hsl(43 74% 64%);\n  --amethyst: hsl(282 47% 56%);\n\n  --shamrock-complementary: hsl(from var(--shamrock) h s 3%);\n  --saffron-complementary: hsl(from var(--saffron) h s 3%);\n  --amethyst-complementary: hsl(from var(--amethyst) h s 3%);\n\n  body {\n    /* Container has chosen Shamrock! */\n    @container style(--theme: \u0026#34;Shamrock\u0026#34;) {\n      --background: light-dark(var(--shamrock), var(--shamrock-complementary));\n      --color: light-dark(var(--shamrock-complementary), var(--shamrock));\n    }\n\n    @container style(--theme: \u0026#34;Saffron\u0026#34;) {\n      --background: light-dark(var(--saffron), var(--saffron-complementary));\n      --color: light-dark(var(--saffron-complementary), var(--saffron));\n    }\n\n    @container style(--theme: \u0026#34;Amethyst\u0026#34;) {\n      --background: light-dark(var(--amethyst), var(--amethyst-complementary));\n      --color: light-dark(var(--amethyst-complementary), var(--amethyst));\n    }\n\n    background: var(--background);\n    color: var(--color);\n    accent-color: var(--color);\n    transition: 300ms;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAs you can see, where \u003ccode\u003eif()\u003c/code\u003e facilitates conditional values, container style queries facilitate conditional properties \u003cem\u003eand\u003c/em\u003e values. Other than that, it really is just a different syntax.\u003c/p\u003e\n\n\n\u003ch3 id=\"additional-things-you-can-do-with-if-but-might-not-realize-\"\u003eAdditional things you can do with \u003ccode\u003eif()\u003c/code\u003e (but might not realize)\u003c/h3\u003e\n\n\n\u003cp\u003eCheck if a CSS variable exists:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Hide icons if variable isn’t set */\n.icon {\n  display: if(\n    style(--icon-family): inline-block;\n    else: none\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCreate more-complex conditional statements:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003eh1 {\n  font-size: if(\n    style(--largerHeadings: true): xxx-large;\n    style(--theme: \u0026#34;themeWithLargerHeadings\u0026#34;): xxx-large\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eCheck if two CSS variables match:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* If #s2 has the same background as #s1, add a border */\n#s2 {\n  border-top: if(\n    style(--s2-background: var(--s1-background)): thin solid red\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"-if-and-calc-when-the-math-isn-t-mathing\"\u003e\u003ccode\u003eif()\u003c/code\u003e and \u003ccode\u003ecalc()\u003c/code\u003e: When the math isn’t mathing\u003c/h3\u003e\n\n\n\u003cp\u003eThis won’t work (maybe someone can help me pinpoint why):\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ediv {\n  /* 3/3 = 1 */\n  --calc: calc(3/3);\n  /* Blue, because if() won’t calculate --calc */\n  background: if(style(--calc: 1): red; else: blue);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eTo make \u003ccode\u003eif()\u003c/code\u003e calculate \u003ccode\u003e--calc\u003c/code\u003e, we’ll need to register the CSS variable using \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/rules/p/property/\"\u003e@property\u003c/a\u003e\u003c/code\u003e first, like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e@property --calc {\n  syntax: \u0026#34;\u0026lt;number\u0026gt;\u0026#34;;\n  initial-value: 0;\n  inherits: false;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"closing-thoughts\"\u003eClosing thoughts\u003c/h3\u003e\n\n\n\u003cp\u003eAlthough I’m not keen on the syntax and how unreadable it can sometimes look (especially if it’s formatted on one line), I’m mega excited to see how \u003ccode\u003eif()\u003c/code\u003e evolves. I’d love to be able to use it with ordinary properties (e.g., \u003ccode\u003ecolor: if(style(background: white): black; style(background: black): white);\u003c/code\u003e) to avoid having to set CSS variables where possible.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt’d also be awesome if \u003ccode\u003ecalc()\u003c/code\u003e calculations could be calculated on the fly without having to register the variable.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat being said, I’m still super happy with what \u003ccode\u003eif()\u003c/code\u003e does currently, and can’t wait to build even simpler design systems.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2025-06-25T08:33:45-06:00",
  "modifiedTime": "2025-06-25T08:33:48-06:00"
}
