{
  "id": "edda95ec-9429-46f5-b2f4-e99261d6a33c",
  "title": "Quick Reminder That :is() and :where() Are Basically the Same With One Key Difference",
  "link": "https://css-tricks.com/quick-reminder-that-is-and-where-are-basically-the-same-with-one-key-difference/",
  "description": "I’ve seen a handful of recent posts talking about the utility of the :is() relational pseudo-selector. No need to delve into the details other than to say it can help make compound selectors a lot more readable. :is(section, article, aside, … Quick Reminder That :is() and :where() Are Basically the Same With One Key Difference originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Thu, 20 Mar 2025 13:51:29 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "selectors",
    "specificity"
  ],
  "byline": "Geoff Graham",
  "length": 1946,
  "excerpt": "I've seen a handful of recent posts talking about the utility of the :is() relational pseudo-selector. No need to delve into the details other than to say it",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "I’ve seen a handful of recent posts talking about the utility of the :is() relational pseudo-selector. No need to delve into the details other than to say it can help make compound selectors a lot more readable. :is(section, article, aside, nav) :is(h1, h2, h3, h4, h5, h6) { color: #BADA55; } /* ... which would be the equivalent of: */ section h1, section h2, section h3, section h4, section h5, section h6, article h1, article h2, article h3, article h4, article h5, article h6, aside h1, aside h2, aside h3, aside h4, aside h5, aside h6, nav h1, nav h2, nav h3, nav h4, nav h5, nav h6 { color: #BADA55; } There’s just one catch: the specificity. The selector’s specificity matches the most specific selector in the function’s arguments. That’s not a big deal when working with a relatively flat style structure containing mostly element and class selectors, but if you toss an ID in there, then that’s the specificity you’re stuck with. /* Specificity: 0 0 1 */ :is(h1, h2, h3, h4, h5, h6) { color: #BADA55; } /* Specificity: 1 0 0 */ :is(h1, h2, h3, h4, h5, h6, #id) { color: #BADA55; } That can be a neat thing! For example, you might want to intentionally toss a made-up ID in there to force a style the same way you might do with the !important keyword. What if you don’t want that? Some articles suggest nesting selectors instead which is cool but not quite with the same nice writing ergonomics. There’s where I want to point to the :where() selector instead! It’s the exact same thing as :is() but without the specificity baggage. It always carries a specificity score of zero. You might even think of it as a sort of specificity reset. /* Specificity: 0 0 0 */ :where(h1, h2, h3, h4, h5, h6) { color: #BADA55; } /* Specificity: 0 0 0 */ :where(h1, h2, h3, h4, h5, h6, #id) { color: #BADA55; } So, is there a certain selector hijacking your :is() specificity? You might want :where() instead.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/11/is-where-funnels.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eI’ve seen a handful of recent posts talking about the utility of the \u003ccode\u003e:is()\u003c/code\u003e relational pseudo-selector. No need to delve into the details other than to say it can help make compound selectors a lot more readable.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:is(section, article, aside, nav) :is(h1, h2, h3, h4, h5, h6) {\n  color: #BADA55;\n}\n\n/* ... which would be the equivalent of: */\nsection h1, section h2, section h3, section h4, section h5, section h6, \narticle h1, article h2, article h3, article h4, article h5, article h6, \naside h1, aside h2, aside h3, aside h4, aside h5, aside h6, \nnav h1, nav h2, nav h3, nav h4, nav h5, nav h6 {\n  color: #BADA55;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThere’s just one catch: the specificity. The selector’s specificity matches the most specific selector in the function’s arguments. That’s not a big deal when working with a relatively flat style structure containing mostly element and class selectors, but if you toss an ID in there, then that’s the specificity you’re stuck with.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Specificity: 0 0 1 */\n:is(h1, h2, h3, h4, h5, h6) {\n  color: #BADA55;\n}\n\n/* Specificity: 1 0 0 */\n:is(h1, h2, h3, h4, h5, h6, #id) {\n  color: #BADA55;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThat can be a neat thing! For example, you might want to \u003ca href=\"https://geoffgraham.me/the-new-css-important/\" rel=\"noopener\"\u003eintentionally toss a made-up ID in there to force a style\u003c/a\u003e the same way you might do with the \u003ccode\u003e!important\u003c/code\u003e keyword.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhat if you don’t want that? Some articles suggest nesting selectors instead which is cool but not quite with the same nice writing ergonomics.\u003c/p\u003e\n\n\n\n\u003cp\u003e There’s where I want to point to the \u003ccode\u003e:where()\u003c/code\u003e selector instead! It’s the exact same thing as \u003ccode\u003e:is()\u003c/code\u003e but without the specificity baggage. \u003cstrong\u003eIt always carries a specificity score of zero.\u003c/strong\u003e You might even think of it as a sort of specificity reset.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* Specificity: 0 0 0 */\n:where(h1, h2, h3, h4, h5, h6) {\n  color: #BADA55;\n}\n\n/* Specificity: 0 0 0 */\n:where(h1, h2, h3, h4, h5, h6, #id) {\n  color: #BADA55;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSo, is there a certain selector hijacking your \u003ccode\u003e:is()\u003c/code\u003e specificity? You might want \u003ccode\u003e:where()\u003c/code\u003e instead.\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "3 min read",
  "publishedTime": "2025-03-20T07:51:29-06:00",
  "modifiedTime": "2025-03-20T07:51:31-06:00"
}
