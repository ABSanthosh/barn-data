{
  "id": "846668dc-50c5-4f4d-809a-7398e93eebc1",
  "title": "Keeping the page interactive while a View Transition is running",
  "link": "https://css-tricks.com/keeping-the-page-interactive-while-a-view-transition-is-running/",
  "description": "When using View Transitions you’ll notice the page becomes unresponsive to clicks while a View Transition is running. […] This happens because of the ::view-transition pseudo element – the one that contains all animated snapshots – gets overlayed on top … Keeping the page interactive while a View Transition is running originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Fri, 31 Jan 2025 14:11:00 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Links",
    "view transitions"
  ],
  "byline": "Geoff Graham",
  "length": 1542,
  "excerpt": "When using View Transitions you’ll notice the page becomes unresponsive to clicks while a View Transition is running. This happens because of",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "When using View Transitions you’ll notice the page becomes unresponsive to clicks while a View Transition is running. […] This happens because of the ::view-transition pseudo element – the one that contains all animated snapshots – gets overlayed on top of the document and captures all the clicks. ::view-transition /* 👈 Captures all the clicks! */ └─ ::view-transition-group(root) └─ ::view-transition-image-pair(root) ├─ ::view-transition-old(root) └─ ::view-transition-new(root) The trick? It’s that sneaky little pointer-events property! Slapping it directly on the :view-transition allows us to click “under” the pseudo-element, meaning the full page is interactive even while the view transition is running. ::view-transition { pointer-events: none; } I always, always, always forget about pointer-events, so thanks to Bramus for posting this little snippet. I also appreciate the additional note about removing the :root element from participating in the view transition: :root { view-transition-name: none; } He quotes the spec noting the reason why snapshots do not respond to hit-testing: Elements participating in a transition need to skip painting in their DOM location because their image is painted in the corresponding ::view-transition-new() pseudo-element instead. Similarly, hit-testing is skipped because the element’s DOM location does not correspond to where its contents are rendered. Direct Link →",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/384331",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cblockquote\u003e\n\u003cp\u003eWhen using View Transitions you’ll notice the page becomes unresponsive to clicks while a View Transition is running. […] This happens because of the \u003ccode\u003e::view-transition\u003c/code\u003e pseudo element – the one that contains all animated snapshots – gets overlayed on top of the document and captures all the clicks.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cpre rel=\"\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e::view-transition /* 👈 Captures all the clicks! */\n└─ ::view-transition-group(root)\n   └─ ::view-transition-image-pair(root)\n      ├─ ::view-transition-old(root)\n      └─ ::view-transition-new(root)\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe trick? It’s that sneaky little \u003ccode\u003epointer-events\u003c/code\u003e property! Slapping it directly on the \u003ccode\u003e:view-transition\u003c/code\u003e allows us to click “under” the pseudo-element, meaning the full page is interactive even while the view transition is running.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e::view-transition {\n  pointer-events: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI always, always, \u003cem\u003ealways\u003c/em\u003e forget about \u003ccode\u003epointer-events\u003c/code\u003e, so thanks to Bramus for posting this little snippet. I also appreciate the additional note about removing the \u003ccode\u003e:root\u003c/code\u003e element from participating in the view transition:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e:root {\n  view-transition-name: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eHe quotes \u003ca href=\"https://drafts.csswg.org/css-view-transitions-1/#view-transition-stacking-layer\" rel=\"noopener\"\u003ethe spec\u003c/a\u003e noting the reason why snapshots do not respond to hit-testing:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eElements participating in a transition need to skip painting in their DOM location because their image is painted in the corresponding \u003ccode\u003e::view-transition-new()\u003c/code\u003e pseudo-element instead. Similarly, hit-testing is skipped because the element’s DOM location does not correspond to where its contents are rendered.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n                      \u003cp\u003e     \n                              \u003ca href=\"https://www.bram.us/2025/01/29/view-transitions-page-interactivity/\"\u003e\n                  Direct Link →\n                \u003c/a\u003e\n              \n                          \u003c/p\u003e\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "2 min read",
  "publishedTime": "2025-01-31T07:11:00-07:00",
  "modifiedTime": "2025-01-31T11:11:53-07:00"
}
