{
  "id": "bbf2272b-da8d-44e3-af8e-4d2a328ff3b2",
  "title": "CSS shape() Commands",
  "link": "https://css-tricks.com/css-shape-commands/",
  "description": "The CSS shape() function recently gained support in both Chromium and WebKit browsers. It's a way of drawing complex shapes when clipping elements with the clip-path property. CSS shape() Commands originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Fri, 02 May 2025 12:36:10 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Notes",
    "CSS functions"
  ],
  "byline": "Geoff Graham",
  "length": 4794,
  "excerpt": "The CSS shape() function recently gained support in both Chromium and WebKit browsers. It's a way of drawing complex shapes when clipping elements with the clip-path property.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "The CSS shape() function recently gained support in both Chromium and WebKit browsers. It’s a way of drawing complex shapes when clipping elements with the clip-path property. We’ve had the ability to draw basic shapes for years — think circle, ellipse(), and polygon() — but no “easy” way to draw more complex shapes. Well, that’s not entirely true. It’s true there was no “easy” way to draw shapes, but we’ve had the path() function for some time, which we can use to draw shapes using SVG commands directly in the function’s arguments. This is an example of an SVG path pulled straight from WebKit’s blog post linked above: \u003csvg viewBox=\"0 0 150 100\" xmlns=\"http://www.w3.org/2000/svg\"\u003e \u003cpath fill=\"black\" d=\"M0 0 L 100 0 L 150 50 L 100 100 L 0 100 Q 50 50 0 0 z \" /\u003e \u003c/svg\u003e Which means we can yank those \u003cpath\u003e coordinates and drop them into the path() function in CSS when clipping a shape out of an element: .clipped { clip-path: path(\"M0 0 L 100 0 L 150 50 L 100 100 L 0 100 Q 50 50 0 0 z\"); } I totally understand what all of those letters and numbers are doing. Just kidding, I’d have to read up on that somewhere, like Myriam Frisano’s more recent “Useful Recipes For Writing Vectors By Hand” article. There’s a steep learning curve to all that, and not everyone — including me — is going down that nerdy, albeit interesting, road. Writing SVG by hand is a niche specialty, not something you’d expect the average front-ender to know. I doubt I’m alone in saying I’d rather draw those vectors in something like Figma first, export the SVG code, and copy-paste the resulting paths where I need them. The shape() function is designed to be more, let’s say, CSS-y. We get new commands that tell the browser where to draw lines, arcs, and curves, just like path(), but we get to use plain English and native CSS units rather than unreadable letters and coordinates. That opens us up to even using CSS calc()-ulations in our drawings! Here’s a fairly simple drawing I made from a couple of elements. You’ll want to view the demo in either Chrome 135+ or Safari 18.4+ to see what’s up. So, instead of all those wonky coordinates we saw in path(), we get new terminology. This post is really me trying to wrap my head around what those new terms are and how they’re used. In short, you start by telling shape() where the starting point should be when drawing. For example, we can say “from top left” using directional keywords to set the origin at the top-left corner of the element. We can also use CSS units to set that position, so “from 0 0” works as well. Once we establish that starting point, we get a set of commands we can use for drawing lines, arcs, and curves. I figured a table would help. CommandWhat it meansUsageExampleslineA line that is drawn using a coordinate pairThe by keyword sets a coordinate pair used to determine the length of the line.line by -2px 3pxvlineVertical lineThe to keyword indicates where the line should end, based on the current starting point.The by keyword sets a coordinate pair used to determine the length of the line.vline to 50pxhlineHorizontal lineThe to keyword indicates where the line should end, based on the current starting point.The by keyword sets a coordinate pair used to determine the length of the line.hline to 95%arcAn arc (oh, really?!). An elliptical one, that is, sort of like the rounded edges of a heart shape.The to keyword indicates where the arc should end.The with keyword sets a pair of coordinates that tells the arc how far right and down the arc should slope.The of keyword specifies the size of the ellipse that the arc is taken from. The first value provides the horizontal radius of the ellipse, and the second provides the vertical radius. I’m a little unclear on this one, even after playing with it.arc to 10% 50% of 1%curveA curved lineThe to keyword indicates where the curved line should end.The with keyword sets “control points” that affect the shape of the curve, making it deep or shallow.curve to 0% 100% with 50% 0%smoothAdds a smooth Bézier curve command to the list of path data commandsThe to keyword indicates where the curve should end.The by keyword sets a coordinate pair used to determine the length of the curve.The with keyword specifies control points for the curve.I have yet to see any examples of this in the wild, but let me know if you do, and I can add it here. The spec is dense, as you might expect with a lot of moving pieces like this. Again, these are just my notes, but let me know if there’s additional nuance you think would be handy to include in the table. Oh, another fun thing: you can adjust the shape() on hover/focus. The only thing is that I was unable to transition or animate it, at least in the current implementation.",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2018/09/css-shapes.jpg",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n  \u003cmain id=\"post-386291\"\u003e\n\n    \u003carticle\u003e\n\n      \n        \n        \u003cdiv\u003e\n\n          \n          \n\u003cp\u003eThe CSS \u003ccode\u003eshape()\u003c/code\u003e function recently gained support in both \u003ca href=\"https://developer.chrome.com/blog/css-shape\" rel=\"noopener\"\u003eChromium\u003c/a\u003e and \u003ca href=\"https://webkit.org/blog/16794/the-css-shape-function/\" rel=\"noopener\"\u003eWebKit\u003c/a\u003e browsers. It’s a way of drawing complex shapes when clipping elements with the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/c/clip-path/\"\u003eclip-path\u003c/a\u003e\u003c/code\u003e property. We’ve had the ability to draw basic shapes for years — think \u003ccode\u003ecircle\u003c/code\u003e, \u003ccode\u003eellipse()\u003c/code\u003e, and \u003ccode\u003epolygon()\u003c/code\u003e — but no “easy” way to draw more complex shapes.\u003c/p\u003e\n\n\n\n\u003cp\u003eWell, that’s not entirely true. It’s true there was no “easy” way to draw shapes, but we’ve had the \u003ccode\u003epath()\u003c/code\u003e function for some time, which we can use to draw shapes using SVG commands directly in the function’s arguments. This is an example of an SVG path pulled straight from WebKit’s blog post linked above:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"SVG\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;svg viewBox=\u0026#34;0 0 150 100\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt;\n  \u0026lt;path fill=\u0026#34;black\u0026#34; d=\u0026#34;M0 0 L 100 0 L 150 50 L 100 100 L 0 100 Q 50 50 0 0 z \u0026#34; /\u0026gt;\n\u0026lt;/svg\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhich means we can yank those \u003ccode\u003e\u0026lt;path\u0026gt;\u003c/code\u003e coordinates and drop them into the \u003ccode\u003epath()\u003c/code\u003e function in CSS when clipping a shape out of an element:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.clipped {\n  clip-path: path(\u0026#34;M0 0 L 100 0 L 150 50 L 100 100 L 0 100 Q 50 50 0 0 z\u0026#34;);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e\u003cem\u003eI totally understand what all of those letters and numbers are doing.\u003c/em\u003e Just kidding, I’d have to read up on that somewhere, like Myriam Frisano’s more recent \u003ca href=\"https://www.smashingmagazine.com/2024/09/svg-coding-examples-recipes-writing-vectors-by-hand/\" rel=\"noopener\"\u003e“Useful Recipes For Writing Vectors By Hand”\u003c/a\u003e article. There’s a steep learning curve to all that, and not everyone — including me — is going down that nerdy, albeit interesting, road. Writing SVG by hand is a niche specialty, not something you’d expect the average front-ender to know. I doubt I’m alone in saying I’d rather draw those vectors in something like Figma first, export the SVG code, and copy-paste the resulting paths where I need them.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003eshape()\u003c/code\u003e function is designed to be more, let’s say, CSS-y. We get new commands that tell the browser where to draw lines, arcs, and curves, just like \u003ccode\u003epath()\u003c/code\u003e, but we get to use plain English and native CSS units rather than unreadable letters and coordinates. That opens us up to even using CSS \u003ccode\u003ecalc()\u003c/code\u003e-ulations in our drawings!\u003c/p\u003e\n\n\n\n\u003cp\u003eHere’s a fairly simple drawing I made from a couple of elements. You’ll want to view the demo in either Chrome 135+ or Safari 18.4+ to see what’s up.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eSo, instead of all those wonky coordinates we saw in \u003ccode\u003epath()\u003c/code\u003e, we get new terminology. This post is really me trying to wrap my head around what those new terms are and how they’re used.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn short, you start by telling \u003ccode\u003eshape()\u003c/code\u003e where the starting point should be when drawing. For example, we can say “\u003ccode\u003efrom top left\u003c/code\u003e” using directional keywords to set the origin at the top-left corner of the element. We can also use CSS units to set that position, so “\u003ccode\u003efrom 0 0\u003c/code\u003e” works as well. Once we establish that starting point, we get a set of commands we can use for drawing lines, arcs, and curves.\u003c/p\u003e\n\n\n\n\u003cp\u003eI figured a table would help.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003ctable\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003eCommand\u003c/th\u003e\u003cth\u003eWhat it means\u003c/th\u003e\u003cth\u003eUsage\u003c/th\u003e\u003cth\u003eExamples\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003eline\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eA line that is drawn using a coordinate pair\u003c/td\u003e\u003ctd\u003eThe \u003ccode\u003eby\u003c/code\u003e keyword sets a coordinate pair used to determine the length of the line.\u003c/td\u003e\u003ctd\u003e\u003ccode\u003eline by -2px 3px\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003evline\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eVertical line\u003c/td\u003e\u003ctd\u003eThe \u003ccode\u003eto\u003c/code\u003e keyword indicates where the line should end, based on the current starting point.\u003cp\u003eThe \u003ccode\u003eby\u003c/code\u003e keyword sets a coordinate pair used to determine the length of the line.\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003evline to 50px\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003ehline\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eHorizontal line\u003c/td\u003e\u003ctd\u003eThe \u003ccode\u003eto\u003c/code\u003e keyword indicates where the line should end, based on the current starting point.\u003cp\u003eThe \u003ccode\u003eby\u003c/code\u003e keyword sets a coordinate pair used to determine the length of the line.\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ehline to 95%\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003earc\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eAn arc (oh, really?!). An elliptical one, that is, sort of like the rounded edges of a heart shape.\u003c/td\u003e\u003ctd\u003eThe \u003ccode\u003eto\u003c/code\u003e keyword indicates where the arc should end.\u003cp\u003eThe \u003ccode\u003ewith\u003c/code\u003e keyword sets a pair of coordinates that tells the arc how far right and down the arc should slope.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003eof\u003c/code\u003e keyword specifies the size of the ellipse that the arc is taken from. The first value provides the horizontal radius of the ellipse, and the second provides the vertical radius. I’m a little unclear on this one, even after playing with it.\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003earc to 10% 50% of 1%\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003ecurve\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eA curved line\u003c/td\u003e\u003ctd\u003eThe \u003ccode\u003eto\u003c/code\u003e keyword indicates where the curved line should end.\u003cp\u003eThe \u003ccode\u003ewith\u003c/code\u003e keyword sets “control points” that affect the shape of the curve, making it deep or shallow.\u003c/p\u003e\u003c/td\u003e\u003ctd\u003e\u003ccode\u003ecurve to 0% 100% with 50% 0%\u003c/code\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003ccode\u003esmooth\u003c/code\u003e\u003c/td\u003e\u003ctd\u003eAdds a smooth Bézier curve command to the list of path data commands\u003c/td\u003e\u003ctd\u003eThe \u003ccode\u003eto\u003c/code\u003e keyword indicates where the curve should end.\u003cp\u003eThe \u003ccode\u003eby\u003c/code\u003e keyword sets a coordinate pair used to determine the length of the curve.\u003c/p\u003e\u003cp\u003eThe \u003ccode\u003ewith\u003c/code\u003e keyword specifies control points for the curve.\u003c/p\u003e\u003c/td\u003e\u003ctd\u003eI have yet to see any examples of this in the wild, but let me know if you do, and I can add it here.\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://drafts.csswg.org/css-shapes-2/#funcdef-shape\" rel=\"noopener\"\u003espec\u003c/a\u003e is dense, as you might expect with a lot of moving pieces like this. Again, these are just my notes, but let me know if there’s additional nuance you think would be handy to include in the table.\u003c/p\u003e\n\n\n\n\u003cp\u003eOh, another fun thing: you can adjust the \u003ccode\u003eshape()\u003c/code\u003e on hover/focus. The only thing is that I was unable to \u003ccode\u003etransition\u003c/code\u003e or animate it, at least in the current implementation.\u003c/p\u003e\n\n\n\n\n\n          \n        \u003c/div\u003e\n\n    \u003c/article\u003e\n\n  \u003c/main\u003e\n\n        \n\u003c/div\u003e\u003c/div\u003e",
  "readingTime": "6 min read",
  "publishedTime": "2025-05-02T06:36:10-06:00",
  "modifiedTime": "2025-05-02T06:36:12-06:00"
}
