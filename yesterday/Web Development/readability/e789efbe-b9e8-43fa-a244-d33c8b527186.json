{
  "id": "e789efbe-b9e8-43fa-a244-d33c8b527186",
  "title": "‚ÄúPretty‚Äù is in the eye of the beholder",
  "link": "https://css-tricks.com/pretty-is-in-the-eye-of-the-beholder/",
  "description": "Yay, let's jump for text-wrap: pretty landing in Safari Technology Preview! But beware that it's different from how it works in Chromium browsers. ‚ÄúPretty‚Äù is in the eye of the beholder originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Fri, 18 Apr 2025 12:12:35 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "browser",
    "typography"
  ],
  "byline": "Geoff Graham",
  "length": 3061,
  "excerpt": "Yay, let's jump for text-wrap: pretty landing in Safari Technology Preview! But beware that it's different from how it works in Chromium browsers.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "Hey, did you see the post Jen Simmons published about WebKit‚Äôs text-wrap: pretty implementation? It was added to Safari Technology Preview and can be tested now, as in, like, today. Slap this in a stylesheet and your paragraphs get a nice little makeover that improves the ragging, reduces hyphenation, eliminates typographic orphans at the end of the last line, and generally avoids large typographic rivers as a result. The first visual in the post tells the full story, showing how each of these is handled. Credit: WebKit Blog That‚Äôs a lot of heavy lifting for a single value! And according to Jen, this is vastly different from Chromium‚Äôs implementation of the exact same feature. According to¬†an article¬†by the Chrome team, Chromium only makes adjustments to the last four lines of a paragraph. It‚Äôs focused on preventing short last lines. It also adjusts hyphenation if consecutive hyphenated lines appear at the end of a paragraph. Jen suggests that performance concerns are the reason for the difference. It does sound like the pretty value does a lot of work, and you might imagine that would have a cumulative effect when we‚Äôre talking about long-form content where we‚Äôre handling hundreds, if not thousands, of lines of text. If it sounds like Safari cares less about performance, that‚Äôs not the case, as their approach is capable of handling the load. One thing to know as a developer, the performance of¬†text-wrap¬†is not affected by how many elements on the page it‚Äôs applied to. Perf concerns emerge as the¬†pretty¬†algorithm takes more and more lines into consideration as it calculates what to do. In WebKit-based browsers or apps, your text element would need to be many hundreds or thousands of lines long to see a performance hit ‚Äî and that kind of content is unusual on the web. If your content is broken up into typical-length paragraphs, then you have no reason to worry. Use¬†text-wrap: pretty¬†as much as you want, and rely on our browser engineers to ensure your users will not experience any downsides. Great, carry on! But now you know that two major browsers have competing implementations of the same feature. I‚Äôve been unclear on the terminology of pretty since it was specced, and now it truly seems that what is considered ‚Äúpretty‚Äù really is in the eye of the beholder. And if you‚Äôre hoping to choose a side, don‚Äôt, because the specification is intentionally unopinionated in this situation, as it says (emphasis added): The user agent may among other things attempt to avoid excessively short last lines‚Ä¶ but it should also improve the layout in additional ways.¬†The precise set of improvements is user agent dependent, and may include¬†things such as: reducing the variation in length between lines; avoiding typographic rivers; prioritizing different classes of soft wrap opportunities, hyphenation opportunities, or justification opportunities; avoiding hyphenation on too many consecutive lines. So, there you have it. One new feature. Two different approaches. Enjoy your new typographic powers. üí™",
  "image": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/bad-typography-SM-light.png",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eHey, did you see the post Jen Simmons \u003ca href=\"https://webkit.org/blog/16547/better-typography-with-text-wrap-pretty/\" rel=\"noopener\"\u003epublished\u003c/a\u003e about WebKit‚Äôs \u003ccode\u003etext-wrap: pretty\u003c/code\u003e implementation? It was added to Safari Technology Preview and can be tested now, as in, like, today. Slap this in a stylesheet and your paragraphs get a nice little makeover that improves the ragging, reduces hyphenation, eliminates typographic orphans at the end of the last line, and generally avoids large typographic rivers as a result. The first visual in the post tells the full story, showing how each of these is handled.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg loading=\"lazy\" data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"1652\" height=\"896\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/bad-typography-SM-light.png?resize=1652%2C896\u0026amp;ssl=1\" alt=\"A screenshot of paragraph text that demonstrates a short last line, bad rag, bad hyphenation, and a typographic river.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/bad-typography-SM-light.png?w=1652\u0026amp;ssl=1 1652w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/bad-typography-SM-light.png?resize=300%2C163\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/bad-typography-SM-light.png?resize=1024%2C555\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/bad-typography-SM-light.png?resize=768%2C417\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2025/04/bad-typography-SM-light.png?resize=1536%2C833\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eCredit: \u003ca href=\"https://webkit.org/blog/16547/better-typography-with-text-wrap-pretty/\" rel=\"noopener\"\u003eWebKit Blog\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eThat‚Äôs a lot of heavy lifting for a single value! And according to Jen, this is vastly different from Chromium‚Äôs implementation of the \u003cem\u003eexact same feature\u003c/em\u003e.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eAccording to¬†\u003ca href=\"https://developer.chrome.com/blog/css-text-wrap-pretty/\" rel=\"noopener\"\u003ean article\u003c/a\u003e¬†by the Chrome team, Chromium only makes adjustments to the last four lines of a paragraph. It‚Äôs focused on preventing short last lines. It also adjusts hyphenation if consecutive hyphenated lines appear at the end of a paragraph.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eJen suggests that performance concerns are the reason for the difference. It does sound like the \u003ccode\u003epretty\u003c/code\u003e value does a lot of work, and you might imagine that would have a cumulative effect when we‚Äôre talking about long-form content where we‚Äôre handling hundreds, if not thousands, of lines of text. If it sounds like Safari cares less about performance, that‚Äôs not the case, as their approach is capable of handling the load.\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eOne thing to know as a developer, the performance of¬†\u003ccode\u003etext-wrap\u003c/code\u003e¬†is not affected by how many elements on the page it‚Äôs applied to. Perf concerns emerge as the¬†\u003ccode\u003epretty\u003c/code\u003e¬†algorithm takes more and more lines into consideration as it calculates what to do. In WebKit-based browsers or apps, your text element would need to be many hundreds or thousands of lines long to see a performance hit ‚Äî and that kind of content is unusual on the web. If your content is broken up into typical-length paragraphs, then you have no reason to worry. Use¬†\u003ccode\u003etext-wrap: pretty\u003c/code\u003e¬†as much as you want, and rely on our browser engineers to ensure your users will not experience any downsides.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eGreat, carry on! But now you know that two major browsers have competing implementations of the same feature. I‚Äôve been unclear on the terminology of \u003ccode\u003epretty\u003c/code\u003e since it was specced, and now it truly seems that what is considered ‚Äúpretty‚Äù really is in the eye of the beholder. And if you‚Äôre hoping to choose a side, don‚Äôt, because the specification is intentionally unopinionated in this situation, as it says (emphasis added):\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eThe user agent may among other things attempt to avoid excessively short last lines‚Ä¶ but it should also improve the layout in additional ways.¬†\u003cstrong\u003eThe precise set of improvements is user agent dependent, and may include\u003c/strong\u003e¬†things such as: reducing the variation in length between lines; avoiding typographic rivers; prioritizing different classes of soft wrap opportunities, hyphenation opportunities, or justification opportunities; avoiding hyphenation on too many consecutive lines.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eSo, there you have it. One new feature. Two different approaches. Enjoy your new typographic powers. üí™\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "4 min read",
  "publishedTime": "2025-04-18T06:12:35-06:00",
  "modifiedTime": "2025-04-18T06:12:37-06:00"
}
