{
  "id": "bd27592a-8263-400c-9ff5-a34b63a7027f",
  "title": "Web-Slinger.css: Like Wow.js But With CSS-y Scroll Animations",
  "link": "https://css-tricks.com/web-slinger-css-like-wow-js-but-with-css-y-scroll-animations/",
  "description": "Can we recreate a JavaScript library for scrolling animations with a modern CSS approach using CSS Scroll-Driven Animations? Yes. Yes, we can. Web-Slinger.css: Like Wow.js But With CSS-y Scroll Animations originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Lee Meyer",
  "published": "Fri, 01 Nov 2024 14:00:36 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "Scroll Driven Animation"
  ],
  "byline": "Lee Meyer",
  "length": 9159,
  "excerpt": "Can we recreate a JavaScript library for scrolling animations with a modern CSS approach using CSS Scroll-Driven Animations? Yes. Yes, we can.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! We had fun in my previous article exploring the goodness of scrolly animations supported in today‚Äôs versions of Chrome and Edge (and behind a feature flag in Firefox for now). Those are by and large referred to as ‚Äúscroll-driven‚Äù animations. However, ‚Äúscroll triggering‚Äù is something the Chrome team is still working on. It refers to the behavior you might have seen in the wild in which a point of no return activates a complete animation like a trap after our hapless scrolling user ventures past a certain point. You can see JavaScript examples of this on the Wow.js homepage which assembles itself in a sequence of animated entrances as you scroll down. There is no current official CSS solution for scroll-triggered animations ‚Äî but Ryan Mulligan has shown how we can make it work by cleverly combining the animation-timeline property with custom properties and style queries. That is a very cool way to combine new CSS features. But I am not done being overly demanding toward the awesome emergent animation timeline technology I didn‚Äôt know existed before I read up on it last month. I noticed scroll timelines and view timelines are geared toward animations that play backward when you scroll back up, unlike the Wow.js example where the dogs roll in and then stay. Bramus mentions the same point in his exploration of scroll-triggered animations. The animations run in reverse when scrolling back up. This is not always feasible. As a divorced Dad, I can attest that the Tinder UI is another example of a pattern in which scrolling and swiping can have irreversible consequences. Scroll till the cows come home with Web-Slinger.css Believe it or not, with a small amount of SCSS and no JavaScript, we can build a pure CSS replacement of the Wow.js library, which I hereby christen ‚ÄúWeb-Slinger.css.‚Äù It feels good to use the scroll-driven optimized standards already supported by some major browsers to make a prototype library. Here‚Äôs the finished demo and then we will break down how it works. I have always enjoyed the deliberately lo-fi aesthetic of the original Wow.js page, so it‚Äôs nice to have an excuse to create a parody. Much profession, so impress. Teach scrolling elements to roll over and stay Web-Slinger.css introduces a set of class names in the format .scroll-trigger-n and .on-scroll-trigger-n. It also defines --scroll-trigger-n custom properties, which are inherited from the document root so we can access them from any CSS class. These conventions are more verbose than Wow.js but also more powerful. The two types of CSS classes decouple the triggers of our one-off animations from the elements they trigger, which means we can animate anything on the page based on the user reaching any scroll marker. Here‚Äôs a basic example that triggers the Animate.css animation ‚ÄúflipInY‚Äù when the user has scrolled to the \u003cdiv\u003e marked as .scroll-trigger-8. \u003cdiv class=\"scroll-trigger-8\"\u003e\u003c/div\u003e \u003cimg class=\"on-scroll-trigger-8 animate__animated animate__flipInY\" src=\"https://i.imgur.com/wTWuv0U.jpeg\" \u003e A more advanced use is the sticky ‚ÄúCownter‚Äù (trademark pending) at the top of the demo page, which takes advantage of the ability of one trigger to activate an arbitrary number of animations anywhere in the document. The Cownter increments as new cows appear then displays a reset button once we reach the final scroll trigger at the bottom of the page. Here is the markup for the Cownter: \u003cdiv class=\"header\"\u003e \u003ch2 class=\"cownter\"\u003e\u003c/h2\u003e \u003cdiv class=\"animate__animated animate__backInDown on-scroll-trigger-12\"\u003e \u003cbr\u003e \u003ca href=\"#\" class=\"reset\"\u003eüîÅ Play again\u003c/a\u003e \u003c/div\u003e \u003c/div\u003e ‚Ä¶and the CSS: .header { .cownter::after { --cownter: calc(var(--scroll-trigger-2) + var(--scroll-trigger-4) + var(--scroll-trigger-8) + var(--scroll-trigger-11)); --pluralised-cow: 'cows'; counter-set: cownter var(--cownter); content: \"Have \" counter(cownter) \" \" var(--pluralised-cow) \", man\"; } @container style(--scroll-trigger-2: 1) and style(--scroll-trigger-4: 0) { .cownter::after { --pluralised-cow: 'cow'; } } a { text-decoration: none; color:blue; } } :root:has(.reset:active) * { animation-name: none; } The demo CodePen references Web-Slinger.css from a separate CodePen, which I reference in my final demo the same way I would an external resource. Sidenote: If you have doubts about the utility of style queries, behold the age-old cow pluralization problem solved in pure CSS. How does Web Slinger like to sling it? The secret is based on an iconic thought experiment by the philosopher Friedrich Nietzsche who once asked: If the view() function lets you style an element once it comes into view, what if you take that opportunity to style it so it can never be scrolled out of view? Would that element not stare back into you for eternity? .scroll-trigger { animation-timeline: view(); animation-name: stick-to-the-top; animation-fill-mode: both; animation-duration: 1ms; } @keyframes stick-to-the-top { .1%, to { position: fixed; top: 0; } } This idea sounded too good to be true, reminiscent of the urge when you meet a genie to ask for unlimited wishes. But it works! The next puzzle piece is how to use this one-way animation technique to control something we‚Äôd want to display to the user. Divs that instantly stick to the ceiling as soon as they enter the viewport might have their place on a page discussing the movie Alien, but most of the time this type of animation won‚Äôt be something we want the user to see. That‚Äôs where named view progress timelines come in. The empty scroll trigger element only has the job of sticking to the top of the viewport as soon as it enters. Next, we set the timeline-scope property of the \u003cbody\u003e element so that it matches the sticky element‚Äôs view-timeline-name. Now we can apply Ryan‚Äôs toggle custom property and style query tricks to let each sticky element trigger arbitrary one-off animations anywhere on the page! View CSS code /** Each trigger element will cause a toggle named with * the convention `--scroll-trigger-n` to be flipped * from 0 to 1, which will unpause the animation on * any element with the class .on-scroll-trigger-n **/ :root { animation-name: run-scroll-trigger-1, run-scroll-trigger-2 /*etc*/; animation-duration: 1ms; animation-fill-mode: forwards; animation-timeline: --trigger-timeline-1, --trigger-timeline-2 /*etc*/; timeline-scope: --trigger-timeline-1, --trigger-timeline-2 /*etc*/; } @property --scroll-trigger-1 { syntax: \"\u003cinteger\u003e\"; initial-value: 0; inherits: true; } @keyframes run-scroll-trigger-1 { to { --scroll-trigger-1: 1; } } /** Add this class to arbitrary elements we want * to only animate once `.scroll-trigger-1` has come * into view, default them to paused state otherwise **/ .on-scroll-trigger-1 { animation-play-state: paused; } /** The style query hack will run the animations on * the element once the toggle is set to true **/ @container style(--scroll-trigger-1: 1) { .on-scroll-trigger-1 { animation-play-state: running; } } /** The trigger element which sticks to the top of * the viewport and activates the one-way animation * that will unpause the animation on the * corresponding element marked with `.on-scroll-trigger-n` **/ .scroll-trigger-1 { view-timeline-name: --trigger-timeline-1; } Trigger warning We generate the genericized Web-Slinger.css in 95 lines of SCSS, which isn‚Äôt too bad. The drawback is that the more triggers we need, the larger the compiled CSS file. The numbered CSS classes also aren‚Äôt semantic, so it would be great to have native support for linking a scroll-triggered element to its trigger based on IDs, reminiscent of the popovertarget attribute for HTML buttons ‚Äî except this hypothetical attribute would go on each target element and specify the ID of the trigger, which is the opposite of the way popovertarget works. \u003c!-- This is speculative ‚Äî do not use --\u003e \u003cscroll-trigger id=\"my-scroll-trigger\"\u003e\u003c/scroll-trigger\u003e \u003cdiv class=\"rollIn\" scrolltrigger=\"my-scroll-trigger\"\u003eHello world\u003c/div\u003e Do androids dream of standardized scroll triggers? As I mentioned at the start, Bramus has teased that scroll-triggered animations are something we‚Äôd like to ship in a future version of Chrome, but it still needs a bit of work before we can do that. I‚Äôm looking forward to standardized scroll-triggered animations built into the browser. We could do worse than a convention resembling Web-Slinger.css for declaratively defining scroll-triggered animations, but I know I am not objective about Web Slinger as its creator. It‚Äôs become a bit of a sacred cow for me so I shall stop milking the topic ‚Äî for now. Feel free to reference the prototype Web-Slinger.css library in your experimental CodePens, or fork the library itself if you have better ideas about how scroll-triggered animations could be standardized.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382156",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eWe had fun in my \u003ca href=\"https://css-tricks.com/slide-through-unlimited-dimensions-with-css-scroll-timelines/\"\u003eprevious article\u003c/a\u003e exploring the goodness of scrolly animations supported in today‚Äôs versions of Chrome and Edge (and behind a feature flag in Firefox \u003ca href=\"https://caniuse.com/mdn-css_properties_scroll-timeline\" rel=\"noopener\"\u003efor now\u003c/a\u003e). Those are by and large referred to as ‚Äúscroll-driven‚Äù animations. However, ‚Äúscroll triggering‚Äù is something the Chrome team is still working on. It refers to the behavior you might have seen in the wild in which a point of no return activates a complete animation like a trap after our hapless scrolling user ventures past a certain point. You can see JavaScript examples of this on the \u003ca href=\"https://wowjs.uk/\" rel=\"noopener\"\u003eWow.js homepage\u003c/a\u003e which assembles itself in a sequence of animated entrances as you scroll down. There is no current official CSS solution for scroll-triggered animations ‚Äî but Ryan Mulligan has shown how we can make it work by \u003ca href=\"https://ryanmulligan.dev/blog/scroll-triggered-animations-style-queries/\" rel=\"noopener\"\u003ecleverly combining\u003c/a\u003e the \u003ccode\u003eanimation-timeline\u003c/code\u003e property with \u003ca href=\"https://css-tricks.com/a-complete-guide-to-custom-properties/\"\u003ecustom properties\u003c/a\u003e and \u003ca href=\"https://css-tricks.com/css-container-queries/#container-queries-properties-amp-values\"\u003estyle queries\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat is a very cool way to combine new CSS features. But I am not done being overly demanding toward the awesome emergent animation timeline technology I didn‚Äôt know existed before I read up on it last month. I noticed scroll timelines and view timelines are geared toward animations that play backward when you scroll back up, unlike the Wow.js example where the dogs roll in and then stay. Bramus mentions the same point in his \u003ca href=\"https://www.bram.us/2023/06/15/scroll-triggered-animations/\" rel=\"noopener\"\u003eexploration\u003c/a\u003e of scroll-triggered animations. \u003cq\u003eThe animations run in reverse when scrolling back up. This is not always feasible.\u003c/q\u003e As a divorced Dad, I can attest that the Tinder UI is another example of a pattern in which scrolling and swiping can have irreversible consequences.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"scroll-till-the-cows-come-home-with-moo-css\"\u003eScroll till the cows come home with Web-Slinger.css\u003c/h3\u003e\n\n\n\u003cp\u003eBelieve it or not, with a small amount of SCSS and no JavaScript, we can build a pure CSS replacement of the Wow.js library, which I hereby christen ‚ÄúWeb-Slinger.css.‚Äù It feels good to use the scroll-driven optimized standards already supported by \u003ca href=\"https://caniuse.com/?search=css-scroll-timeline\" rel=\"noopener\"\u003esome major browsers\u003c/a\u003e to make a prototype library. Here‚Äôs the finished demo and then we will break down how it works. I have always enjoyed the deliberately lo-fi aesthetic of the original Wow.js page, so it‚Äôs nice to have an excuse to create a parody. Much profession, so impress.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"teach-scrolling-elements-to-roll-over-and-stay\"\u003eTeach scrolling elements to roll over and stay\u003c/h3\u003e\n\n\n\u003cp\u003eWeb-Slinger.css introduces a set of class names in the format \u003ccode\u003e.scroll-trigger-n\u003c/code\u003e and \u003ccode\u003e.on-scroll-trigger-n\u003c/code\u003e. It also defines \u003ccode\u003e--scroll-trigger-n\u003c/code\u003e custom properties, which are inherited from the document root so we can access them from any CSS class. These conventions are more verbose than Wow.js but also more powerful. The two types of CSS classes decouple the triggers of our one-off animations from the elements they trigger, which means we can animate anything on the page based on the user reaching any scroll marker.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere‚Äôs a basic example that triggers the \u003ca href=\"https://animate.style/\" rel=\"noopener\"\u003eA\u003c/a\u003e\u003ca href=\"https://animate.style/\" rel=\"noopener\"\u003enimate.css\u003c/a\u003e animation ‚ÄúflipInY‚Äù when the user has scrolled to the \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e marked as \u003ccode\u003e.scroll-trigger-8\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;scroll-trigger-8\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\n\u0026lt;img \n  class=\u0026#34;on-scroll-trigger-8 animate__animated animate__flipInY\u0026#34; \n  src=\u0026#34;https://i.imgur.com/wTWuv0U.jpeg\u0026#34;\n\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eA more advanced use is the sticky ‚ÄúCownter‚Äù (trademark pending) at the top of the demo page, which takes advantage of the ability of one trigger to activate an arbitrary number of animations anywhere in the document. The Cownter increments as new cows appear then displays a reset button once we reach the final scroll trigger at the bottom of the page.\u003c/p\u003e\n\n\n\n\u003cp\u003eHere is the markup for the Cownter:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt;\n  \u0026lt;h2 class=\u0026#34;cownter\u0026#34;\u0026gt;\u0026lt;/h2\u0026gt;\n  \u0026lt;div class=\u0026#34;animate__animated  animate__backInDown on-scroll-trigger-12\u0026#34;\u0026gt;\n    \u0026lt;br\u0026gt;\n    \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;reset\u0026#34;\u0026gt;üîÅ Play again\u0026lt;/a\u0026gt;\n  \u0026lt;/div\u0026gt;\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e‚Ä¶and the CSS:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.header {\n  .cownter::after {\n    --cownter: calc(var(--scroll-trigger-2) + var(--scroll-trigger-4) + var(--scroll-trigger-8) + var(--scroll-trigger-11));\n    --pluralised-cow: \u0026#39;cows\u0026#39;;\n\n    counter-set: cownter var(--cownter);\n    content: \u0026#34;Have \u0026#34; counter(cownter) \u0026#34; \u0026#34; var(--pluralised-cow) \u0026#34;, man\u0026#34;;\n  }\n\n  @container style(--scroll-trigger-2: 1) and style(--scroll-trigger-4: 0) {\n    .cownter::after {\n      --pluralised-cow: \u0026#39;cow\u0026#39;;\n    }\n  }\n  \n  a {\n    text-decoration: none;\n    color:blue;\n  }\n}\n\n:root:has(.reset:active) * {\n  animation-name: none;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe demo CodePen references Web-Slinger.css from a \u003ca href=\"https://codepen.io/leemeyer/pen/WNVdoNV\" rel=\"noopener\"\u003eseparate CodePen,\u003c/a\u003e which I reference in my final demo the \u003ca href=\"https://blog.codepen.io/documentation/adding-external-resources/\" rel=\"noopener\"\u003esame way I would an external resource\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eSidenote:\u003c/strong\u003e If you have doubts about the utility of style queries, behold the age-old cow pluralization problem solved in pure CSS.\u003c/p\u003e\n\n\n\u003ch3 id=\"how-does-moo-like-to-move-it-\"\u003eHow does Web Slinger like to sling it?\u003c/h3\u003e\n\n\n\u003cp\u003eThe secret is based on an iconic thought experiment by the philosopher Friedrich Nietzsche who once asked: \u003cq\u003eIf the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline/view\" rel=\"noopener\"\u003e\u003ccode\u003eview()\u003c/code\u003e function\u003c/a\u003e lets you style an element once it comes into view, what if you take that opportunity to style it so it can never be scrolled out of view? Would that element not stare back into you for eternity?\u003c/q\u003e\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.scroll-trigger {\n  animation-timeline: view();\n  animation-name: stick-to-the-top;\n  animation-fill-mode: both;\n  animation-duration: 1ms;\n}\n\n@keyframes stick-to-the-top {\n  .1%, to {\n    position: fixed;\n    top: 0;\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis idea sounded too good to be true, reminiscent of the urge when you meet a genie to ask for unlimited wishes. But it works! The next puzzle piece is how to use this one-way animation technique to control something we‚Äôd want to display to the user. Divs that instantly stick to the ceiling as soon as they enter the viewport might have their place on a page discussing the movie \u003ca href=\"https://en.wikipedia.org/wiki/Xenomorph\" rel=\"noopener\"\u003e\u003cem\u003eAlien\u003c/em\u003e\u003c/a\u003e, but most of the time this type of animation won‚Äôt be something we want the user to see.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat‚Äôs where \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/view-timeline\" rel=\"noopener\"\u003e\u003cem\u003enamed view progress timelines\u003c/em\u003e\u003c/a\u003e come in. The empty scroll trigger element only has the job of sticking to the top of the viewport as soon as it enters. Next, we set the \u003ccode\u003etimeline-scope\u003c/code\u003e property of the \u003ccode\u003e\u0026lt;body\u0026gt;\u003c/code\u003e element so that it matches the sticky element‚Äôs \u003ccode\u003eview-timeline-name\u003c/code\u003e. Now we can apply Ryan‚Äôs toggle custom property and style query tricks to let each sticky element trigger arbitrary one-off animations anywhere on the page!\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          View CSS code      \u003c/summary\u003e\n  \n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/** Each trigger element will cause a toggle named with \n  * the convention `--scroll-trigger-n` to be flipped \n  * from 0 to 1, which will unpause the animation on\n  * any element with the class .on-scroll-trigger-n\n **/\n\n:root {\n  animation-name: run-scroll-trigger-1, run-scroll-trigger-2 /*etc*/;\n  animation-duration: 1ms;\n  animation-fill-mode: forwards;\n  animation-timeline: --trigger-timeline-1, --trigger-timeline-2 /*etc*/;\n  timeline-scope: --trigger-timeline-1, --trigger-timeline-2 /*etc*/;\n}\n\n@property --scroll-trigger-1 {\n  syntax: \u0026#34;\u0026lt;integer\u0026gt;\u0026#34;;\n  initial-value: 0;\n  inherits: true;\n}\n@keyframes run-scroll-trigger-1 {\n  to {\n    --scroll-trigger-1: 1;\n  }\n}\n\n/** Add this class to arbitrary elements we want \n  * to only animate once `.scroll-trigger-1` has come \n  * into view, default them to paused state otherwise\n **/\n.on-scroll-trigger-1 {\n  animation-play-state: paused;\n}\n\n/** The style query hack will run the animations on\n  * the element once the toggle is set to true\n **/\n@container style(--scroll-trigger-1: 1) {\n  .on-scroll-trigger-1 {\n    animation-play-state: running;\n  }\n}\n\n/** The trigger element which sticks to the top of \n  * the viewport and activates the one-way  animation \n  * that will unpause the animation on the \n  * corresponding element marked with `.on-scroll-trigger-n` \n  **/\n.scroll-trigger-1 {\n  view-timeline-name: --trigger-timeline-1;\n} \u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/details\u003e\n\n\u003ch3 id=\"trigger-warning\"\u003eTrigger warning\u003c/h3\u003e\n\n\n\u003cp\u003eWe generate the genericized Web-Slinger.css in 95 lines of SCSS, which isn‚Äôt too bad. The drawback is that the more triggers we need, the larger the compiled CSS file. The numbered CSS classes also aren‚Äôt semantic, so it would be great to have native support for linking a scroll-triggered element to its trigger based on IDs, reminiscent of the \u003ca href=\"https://css-tricks.com/poppin-in/\"\u003e\u003ccode\u003epopovertarget\u003c/code\u003e\u003c/a\u003e \u003ca href=\"https://css-tricks.com/poppin-in/\"\u003e\u003c/a\u003eattribute for HTML buttons ‚Äî except this hypothetical attribute would go on each target element and specify the ID of the trigger, which is the opposite of the way \u003ccode\u003epopovertarget\u003c/code\u003e works.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;!-- This is speculative ‚Äî do not use --\u0026gt;\n\u0026lt;scroll-trigger id=\u0026#34;my-scroll-trigger\u0026#34;\u0026gt;\u0026lt;/scroll-trigger\u0026gt;\n\u0026lt;div class=\u0026#34;rollIn\u0026#34; scrolltrigger=\u0026#34;my-scroll-trigger\u0026#34;\u0026gt;Hello world\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch3 id=\"do-androids-dream-of-standardized-scroll-triggers-\"\u003eDo androids dream of standardized scroll triggers?\u003c/h3\u003e\n\n\n\u003cp\u003eAs I mentioned at the start, Bramus has \u003ca href=\"https://youtu.be/5noL_qFobm0\" rel=\"noopener\"\u003eteased\u003c/a\u003e that scroll-triggered animations are \u003cq\u003esomething we‚Äôd like to ship in a future version of Chrome, but it still needs a bit of work before we can do that.\u003c/q\u003e I‚Äôm looking forward to standardized scroll-triggered animations built into the browser. We could do worse than a convention resembling Web-Slinger.css for declaratively defining scroll-triggered animations, but I know I am not objective about Web Slinger as its creator. It‚Äôs become a bit of a sacred cow for me so I shall stop milking the topic ‚Äî for now.\u003c/p\u003e\n\n\n\n\u003cp\u003eFeel free to reference the prototype Web-Slinger.css library in your experimental CodePens, or fork the library itself if you have better ideas about how scroll-triggered animations could be standardized.\u003c/p\u003e\n\n\n\n\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "10 min read",
  "publishedTime": "2024-11-01T08:00:36-06:00",
  "modifiedTime": "2024-11-01T09:03:55-06:00"
}
