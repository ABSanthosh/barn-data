{
  "id": "88b25816-4914-4be0-9d08-ad511e4a30b9",
  "title": "Left Half and Right Half Layout – Many Different Ways",
  "link": "https://css-tricks.com/left-and-right/",
  "description": "A whole bunch of years ago, we posted on this idea here on CSS-Tricks. We figured it was time to update that and do the subject justice. Imagine a scenario where you need to split a layout in half. Content … Left Half and Right Half Layout – Many Different Ways originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Geoff Graham",
  "published": "Fri, 25 Oct 2024 11:51:02 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles"
  ],
  "byline": "Geoff Graham",
  "length": 5936,
  "excerpt": "A whole bunch of years ago, we posted on this idea here on CSS-Tricks. We figured it was time to update that and do the subject justice.",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! A whole bunch of years ago, we posted on this idea here on CSS-Tricks. We figured it was time to update that and do the subject justice. Imagine a scenario where you need to split a layout in half. Content on the left and content on the right. Basically two equal height columns are needed inside of a container. Each side takes up exactly half of the container, creating a distinct break between one. Like many things in CSS, there are a number of ways to go about this and we’re going to go over many of them right now! Update (Oct. 25, 2024): Added an example that uses CSS Anchor Positioning. Using Background Gradient One simple way we can create the appearance of a changing background is to use gradients. Half of the background is set to one color and the other half another color. Rather than fade from one color to another, a zero-space color stop is set in the middle. .container { background: linear-gradient( to right, #ff9e2c 0%, #ff9e2c 50%, #b6701e 50%, #b6701e 100% ); } This works with a single container element. However, that also means that it will take working with floats or possibly some other layout method if content needs to fill both sides of the container. Using Absolute Positioning Another route might be to set up two containers inside of a parent container, position them absolutely, split them up in halves using percentages, then apply the backgrounds. The benefit here is that now we have two separate containers that can hold their own content. Absolute positioning is sometimes a perfect solution, and sometimes untenable. The parent container here will need to have a set height, and setting heights is often bad news for content (content changes!). Not to mention absolute positioned elements are out of the document flow. So it would be hard to get this to work while, say, pushing down other content below it. Using (fake) Tables Yeah, yeah, tables are so old school (not to mention fraught with accessibility issues and layout inflexibility). Well, using the display: table-cell; property can actually be a handy way to create this layout without writing table markup in HTML. In short, we turn our semantic parent container into a table, then the child containers into cells inside the table — all in CSS! You could even change the display properties at breakpoints pretty easily here, making the sides stack on smaller screens. display: table; (and friends) is supported as far back as IE 8 and even old Android, so it’s pretty safe! Using Floats We can use our good friend the float to arrange the containers beside each other. The benefit here is that it avoids absolute positioning (which as we noted, can be messy). In this example, we’re explicitly setting heights to get them to be even. But you don’t really get that ability with floats by default. You could use the background gradient trick we already covered so they just look even. Or look at fancy negative margin tricks and the like. Also, remember you may need to clear the floats on the parent element to keep the document flow happy. Using Inline-Block If clearing elements after floats seems like a burden, then using display: inline-block is another option. The trick here is to make sure that the elements for the individual sides have no breaks or whitespace in between them in the HTML. Otherwise, that space will be rendered as a literal space and the second half will break and fall. Again there is nothing about inline-block that helps us equalize the heights of the sides, so you’ll have to be explicit about that. There are also other potential ways to deal with that spacing problem described above. Using Flexbox Flexbox is a pretty fantastic way to do this, just note that it’s limited to IE 10 and up and you may need to get fancy with the prefixes and values to get the best support. Using this method, we turn our parent container into a flexible box with the child containers taking up an equal share of the space. No need to set widths or heights! Flexbox just knows what to do, because the defaults are set up perfectly for this. For instance, flex-direction: row; and align-items: stretch; is what we’re after, but those are the defaults so we don’t have to set them. To make sure they are even though, setting flex: 1; on the sides is a good plan. That forces them to take up equal shares of the space. In this demo we’re making the side flex containers as well, just for fun, to handle the vertical and horizontal centering. Using Grid Layout For those living on the bleeding edge, the CSS Grid Layout technique is like the Flexbox and Table methods merged into one. In other words, a container is defined, then split into columns and cells which can be filled flexibly with child elements. CSS Anchor Positioning This started rolling out in 2024 and we’re still waiting for full browser support. But we can use CSS Anchor Positioning to “attach” one element to another — even if those two elements are completely unrelated in the markup. The idea is that we have one element that’s registered as an “anchor” and another element that’s the “target” of that anchor. It’s like the target element is pinned to the anchor. And we get to control where we pin it! .anchor { anchor-name: --anchor; } .target { anchor-position: --anchor; position: absolute; /* required */ } This sets up an .anchor and establishes a relationship with a .target element. From here, we can tell the target which side of the anchor it should pin to. .anchor { anchor-name: --anchor; } .target { anchor-position: --anchor; position: absolute; /* required */ left: anchor(right); } Isn’t it cool how many ways there are to do things in CSS?",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/198099",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eA whole bunch of years ago, we \u003ca href=\"https://css-tricks.com/multiple-backgrounds-left-half-and-right-half/\"\u003eposted on this idea\u003c/a\u003e here on CSS-Tricks. We figured it was time to update that and do the subject justice.\u003c/p\u003e\n\n\n\n\u003cp\u003eImagine a scenario where you need to split a layout in half. Content on the left and content on the right. Basically two equal height columns are needed inside of a container. Each side takes up exactly half of the container, creating a distinct break between one. Like many things in CSS, there are a number of ways to go about this and we’re going to go over many of them right now!\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eUpdate (Oct. 25, 2024):\u003c/strong\u003e \u003ca href=\"#aa-css-anchor-positioning\"\u003eAdded an example\u003c/a\u003e that uses \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eCSS Anchor Positioning\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003ch3 id=\"using-background-gradient\"\u003eUsing Background Gradient\u003c/h3\u003e\n\n\n\u003cp\u003eOne simple way we can create the appearance of a changing background is to use gradients. Half of the background is set to one color and the other half another color. Rather than fade from one color to another, a zero-space color stop is set in the middle.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.container {\n  background: linear-gradient(\n    to right, \n    #ff9e2c 0%, \n    #ff9e2c 50%, \n    #b6701e 50%, \n    #b6701e 100%\n  );\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis works with a single container element. However, that also means that it will take working with floats or possibly some other layout method if content needs to fill both sides of the container.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"using-absolute-positioning\"\u003eUsing Absolute Positioning\u003c/h3\u003e\n\n\n\u003cp\u003eAnother route might be to set up two containers inside of a parent container, position them absolutely, split them up in halves using percentages, then apply the backgrounds. The benefit here is that now we have two separate containers that can hold their own content.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAbsolute positioning is sometimes a perfect solution, and sometimes untenable. The parent container here will need to have a set height, and setting heights is often bad news for content (content changes!). Not to mention absolute positioned elements are out of the document flow. So it would be hard to get this to work while, say, pushing down other content below it.\u003c/p\u003e\n\n\n\u003ch3 id=\"using-fake-tables\"\u003eUsing (fake) Tables\u003c/h3\u003e\n\n\n\u003cp\u003eYeah, yeah, tables are so old school (not to mention fraught with accessibility issues and layout inflexibility). Well, using the \u003ccode\u003edisplay: table-cell;\u003c/code\u003e property can actually be a handy way to create this layout without writing table markup in HTML. In short, we turn our semantic parent container into a table, then the child containers into cells inside the table — all in CSS!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eYou could even change the display properties at breakpoints pretty easily here, making the sides stack on smaller screens. \u003ccode\u003edisplay: table;\u003c/code\u003e (\u003ca href=\"https://css-tricks.com/almanac/properties/d/display/#display-table\"\u003eand friends\u003c/a\u003e) is supported as far back as IE 8 and even old Android, so it’s pretty safe!\u003c/p\u003e\n\n\n\u003ch3 id=\"using-floats\"\u003eUsing Floats\u003c/h3\u003e\n\n\n\u003cp\u003eWe can use our good friend the \u003ccode\u003e\u003ca href=\"https://css-tricks.com/almanac/properties/f/float/\"\u003efloat\u003c/a\u003e\u003c/code\u003e to arrange the containers beside each other. The benefit here is that it avoids absolute positioning (which as we noted, can be messy).\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIn this example, we’re explicitly setting heights to get them to be even. But you don’t really get that ability with floats by default. You could use the background gradient trick we already covered so they just \u003cem\u003elook\u003c/em\u003e even. Or look at \u003ca href=\"http://www.smashingmagazine.com/2010/11/08/equal-height-columns-using-borders-and-negative-margins-with-css/\" rel=\"noopener\"\u003efancy negative margin tricks\u003c/a\u003e and the like.\u003c/p\u003e\n\n\n\n\u003cp\u003eAlso, remember you may need to \u003ca href=\"https://css-tricks.com/snippets/css/clear-fix/\"\u003eclear the floats\u003c/a\u003e on the parent element to keep the document flow happy.\u003c/p\u003e\n\n\n\u003ch3 id=\"using-inlineblock\"\u003eUsing Inline-Block\u003c/h3\u003e\n\n\n\u003cp\u003eIf clearing elements after floats seems like a burden, then using \u003ccode\u003edisplay: inline-block\u003c/code\u003e is another option. The trick here is to make sure that the elements for the individual sides have no breaks or whitespace in between them in the HTML. Otherwise, that space will be rendered as a literal space and the second half will break and fall.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAgain there is nothing about inline-block that helps us equalize the heights of the sides, so you’ll have to be explicit about that.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere are also \u003ca href=\"https://css-tricks.com/fighting-the-space-between-inline-block-elements/\"\u003eother potential ways\u003c/a\u003e to deal with that spacing problem described above.\u003c/p\u003e\n\n\n\u003ch3 id=\"using-flexbox\"\u003eUsing Flexbox\u003c/h3\u003e\n\n\n\u003cp\u003e\u003ca href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\"\u003eFlexbox\u003c/a\u003e is a pretty fantastic way to do this, just note that it’s limited to IE 10 and up and you may need to \u003ca href=\"https://css-tricks.com/using-flexbox/\"\u003eget fancy with the prefixes and values\u003c/a\u003e to get the best support.\u003c/p\u003e\n\n\n\n\u003cp\u003eUsing this method, we turn our parent container into a flexible box with the child containers taking up an equal share of the space. No need to set widths or heights! Flexbox just knows what to do, because the defaults are set up perfectly for this. For instance, \u003ccode\u003eflex-direction: row;\u003c/code\u003e and \u003ccode\u003ealign-items: stretch;\u003c/code\u003e is what we’re after, but those are the defaults so we don’t have to set them. To make sure they are even though, setting \u003ccode\u003eflex: 1;\u003c/code\u003e on the sides is a good plan. That forces them to take up equal shares of the space.\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIn this demo we’re making the side flex containers as well, just for fun, to handle the vertical and horizontal centering.\u003c/p\u003e\n\n\n\u003ch3 id=\"using-grid-layout\"\u003eUsing Grid Layout\u003c/h3\u003e\n\n\n\u003cp\u003eFor those living on the bleeding edge, the \u003ca href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\"\u003eCSS Grid Layout\u003c/a\u003e technique is like the Flexbox and Table methods merged into one. In other words, a container is defined, then split into columns and cells which can be filled flexibly with child elements.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"css-anchor-positioning\"\u003eCSS Anchor Positioning\u003c/h3\u003e\n\n\n\u003cp\u003eThis started rolling out in 2024 and we’re still waiting for full browser support. But we can use \u003ca href=\"https://css-tricks.com/css-anchor-positioning-guide/\"\u003eCSS Anchor Positioning\u003c/a\u003e to “attach” one element to another — even if those two elements are completely unrelated in the markup.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe idea is that we have one element that’s registered as an “anchor” and another element that’s the “target” of that anchor. It’s like the target element is pinned to the anchor. And we get to control where we pin it!\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.anchor {\n  anchor-name: --anchor;\n}\n\n.target {\n  anchor-position: --anchor;\n  position: absolute; /* required */\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis sets up an \u003ccode\u003e.anchor\u003c/code\u003e and establishes a relationship with a \u003ccode\u003e.target\u003c/code\u003e element. From here, we can tell the target which side of the anchor it should pin to.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e.anchor {\n  anchor-name: --anchor;\n}\n\n.target {\n  anchor-position: --anchor;\n  position: absolute; /* required */\n  left: anchor(right);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\n\n\n\n\u003cp\u003eIsn’t it cool how many ways there are to do things in CSS?\u003c/p\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "7 min read",
  "publishedTime": "2024-10-25T05:51:02-06:00",
  "modifiedTime": "2024-10-25T08:57:55-06:00"
}
