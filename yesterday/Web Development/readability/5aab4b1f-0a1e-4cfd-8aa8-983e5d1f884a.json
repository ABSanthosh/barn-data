{
  "id": "5aab4b1f-0a1e-4cfd-8aa8-983e5d1f884a",
  "title": "Come to the light-dark() Side",
  "link": "https://css-tricks.com/come-to-the-light-dark-side/",
  "description": "You’d be forgiven for thinking coding up both a dark and a light mode at once is a lot of work. You have to remember @media queries based on prefers-color-scheme as well as extra complications that arise when letting visitors … Come to the light-dark() Side originally published on CSS-Tricks, which is part of the DigitalOcean family. You should get the newsletter.",
  "author": "Sara Joy",
  "published": "Fri, 25 Oct 2024 14:08:20 +0000",
  "source": "https://css-tricks.com/feed/",
  "categories": [
    "Articles",
    "dark mode",
    "functions",
    "UI/IX Design"
  ],
  "byline": "Sara Joy",
  "length": 26356,
  "excerpt": "You'd be forgiven for thinking coding up both a dark and a light mode at once is a lot of work. You have to remember @media queries based on",
  "siteName": "CSS-Tricks",
  "favicon": "https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/star.png?fit=180%2C180\u0026ssl=1",
  "text": "DigitalOcean provides cloud products for every stage of your journey. Get started with $200 in free credit! You’d be forgiven for thinking coding up both a dark and a light mode at once is a lot of work. You have to remember @media queries based on prefers-color-scheme as well as extra complications that arise when letting visitors choose whether they want light or dark mode separately from the OS setting. And let’s not forget the color palette itself! Switching from a “light” mode to a “dark” mode may involve new variations to get the right amount of contrast for an accessible experience. It is indeed a lot of work. But I’m here to tell you it’s now a lot simpler with modern CSS! Default HTML color scheme(s) We all know the “naked” HTML theme even if we rarely see it as we’ve already applied a CSS reset or our favorite boilerplate CSS before we even open localhost. But here’s a news flash: HTML doesn’t only have the standard black-on-white theme, there is also a native white-on-black version. We have two color schemes available to use right out of the box! If you want to create a dark mode interface, this is a great base to work with and saves you from having to account for annoying details, like dark inputs, buttons, and other interactive elements. Live Demo on CodePen Switching color schemes automatically based on OS preference Without any @media queries — or any other CSS at all — if all we did was declare color-scheme: light dark on the root element, the page will apply either the light or dark color scheme automatically by looking at the visitor’s operating system (OS) preferences. Most OSes have a built-in accessibility setting for your preferred color scheme — “light”, “dark”, or even “auto” — and browsers respect that setting. html { color-scheme: light dark; } We can even accomplish this without CSS directly in the HTML document in a \u003cmeta\u003e tag: \u003cmeta name=\"color-scheme\" content=\"light dark\"\u003e Whether you go with CSS or the HTML route, it doesn’t matter — they both work the same way: telling the browser to make both light and dark schemes available and apply the one that matches the visitor’s preferences. We don’t even need to litter our styles with prefers-color-scheme instances simply to swap colors because the logic is built right in! You can apply light or dark values to the color-scheme property. At the same time, I’d say that setting color-scheme: light is redundant, as this is the default color scheme with or without declaring it. You can, of course, control the \u003cmeta\u003e tag or the CSS property with JavaScript. There’s also the possibility of applying the color-scheme property on specific elements instead of the entire page in one fell swoop. Then again, that means you are required to explicitly declare an element’s color and background-color properties; otherwise the element is transparent and inherits its text color from its parent element. What values should you give it? Try: Default text and background color variables The “black” colors of these native themes aren’t always completely black but are often off-black, making the contrast a little easier on the eyes. It’s worth noting, too, that there’s variation in the blackness of “black” between browsers. What is very useful is that this default not-pure-black and maybe-not-pure-white background-color and text color are available as \u003csystem-color\u003e variables. They also flip their color values automatically with color-scheme! They are: Canvas and CanvasText. These two variables can be used anywhere in your CSS to call up the current default background color (Canvas) or text color (CanvasText) based on the current color scheme. If you’re familiar with the currentColor value in CSS, it seems to function similarly. CanvasText, meanwhile, remains the default text color in that it can’t be changed the way currentColor changes when you assign something to color. In the following examples, the only change is the color-scheme property: Not bad! There are many, many more of these system variables. They are case-insensitive, often written in camelCase or PascalCase for readability. MDN lists 19 \u003csystem-color\u003e variables and I’m dropping them in below for reference. Open to view 19 system color names and descriptions AccentColor: The background color for accented user interface controls AccentColorText: The text color for accented user interface controls ActiveText: The text color of active links ButtonBorder: The base border color for controls ButtonFace: The background color for controls ButtonText: The text color for controls Canvas: The background color of an application’s content or documents CanvasText: The text color used in an application’s content or documents Field: The background color for input fields FieldText: The text color inside form input fields GrayText: The text color for disabled items (e.g., a disabled control) Highlight: The background color for selected items HighlightText: The text color for selected items LinkText: The text color used for non-active, non-visited links Mark: The background color for text marked up in a \u003cmark\u003e element MarkText: The text color for text marked up in a \u003cmark\u003e element SelectedItem: The background color for selected items (e.g., a selected checkbox) SelectedItemText: The text color for selected items VisitedText: The text visited links Cool, right? There are many of them! There are, unfortunately, also discrepancies as far as how these color keywords are used and rendered between different OSes and browsers. Even though “evergreen” browsers arguably support all of them, they don’t all actually match what they’re supposed to, and fail to flip with the CSS color-scheme property as they should. Egor Kloos (also known as dutchcelt) is keeping an eye on the current status of system colors, including which ones exist and the browsers that support them, something he does as part of a classless CSS framework cleverly called system.css. Declaring colors for both modes together OK good, so now you have a page that auto-magically flips dark and light colors according to system preferences. Whether you choose to use these system colors or not is up to you. I just like to point out that “dark” doesn’t always have to mean pure “black” just as “light” doesn’t have to mean pure “white.” There are lots more colors to pair together! But what’s the best or simplest way to declare colors so they work in both light and dark mode? In my subjective reverse-best order: Third place: Declare color opacity You could keep all the same background colors in dark and light modes, but declare them with an opacity (i.e. rgb(128 0 0 / 0.5) or #80000080). Then they’ll have the Canvas color shine through. It’s unusable in this way for text colors, and you may end up with somewhat muted colors. But it is a nice easy way to get some theming done fast. I did this for the code blocks on this old light and dark mode demo. Second place: Use color-mix() Like this: color-mix(in oklab, Canvas 75%, RebeccaPurple); Similar (but also different) to using opacity to mute a color is mixing colors in CSS. We can even mix the system color variables! For example, one of the colors can be either Canvas or CanvasText so that the background color always mixes with Canvas and the text color always mixes with CanvasText. We now have the CSS color-mix() function to help us with this. The first argument in the function defines the color space where the color mixing happens. For example, we can tell the function that we are working in the OKLAB color space, which is a rectangular color space like sRGB making it ideal to mix with sRGB color values for predictable results. You can certainly mix colors from different color spaces — the OKLAB/sRGB combination happens to work for me in this instance. The second and third arguments are the colors you want to mix, and in what proportion. Proportions are optional but expressed in percentages. Without declaring a proportion, the mix is an even 50%-50% split. If you add percentages for both colors and they don’t match up to 100%, it does a little math for you to prevent breakages. The color-mix() approach is useful if you’re happy to keep the same hues and color saturations regardless of whether the mode is light or dark. In this example, as you change the value of the hue slider, you’ll see color changes in the themed boxes, following the theme color but mixed with Canvas and CanvasText: You may have noticed that I used OKLCH and HSL color spaces in that last example. You may also have noticed that the HSL-based theme color and the themed paragraph were a lot more “flashy” as you moved the hue slider. I’ve declared colors using a polar color space, like HSL, for years, loving that you can easily take a hue and go up or down the saturation and lightness scales based on need. But, I concede that it’s problematic if you’re working with multiple hues while trying to achieve consistent perceived lightness and saturation across them all. It can be difficult to provide ample contrast across a spectrum of colors with HSL. The OKLCH color space is also polar just like HSL, with the same benefits. You can pick your hue and use the chroma value (which is a bit like saturation in HSL) and the lightness scales accurately in the same way. Both OKLCH and OKLAB are designed to better match what our eyes perceive in terms of brightness and color compared to transitioning between colors in the sRGB space. While these color spaces may not explicitly answer the age-old question, Is my blue the same as your blue? the colors are much more consistent and require less finicking when you decide to base your whole website’s palette on a different theme color. With these color spaces, the contrasts between the computed colors remain much the same. First place (winner!): Use light-dark() Like this: light-dark(lavender, saddlebrown); With the previous color-mix() example, if you choose a pale lavender in light mode, its dark mode counterpart is very dark lavender. The light-dark() function, conversely, provides complete control. You might want that element to be pale lavender in light mode and a deep burnt sienna brown in dark mode. Why not? You can still use color-mix() within light-dark() if you like — declare the colors however you like, and gain much more fine-grained control over your colors. Feel free to experiment in the following editable demo: Using color-scheme: light dark; — or the corresponding meta tag in HTML on your page —is a prerequisite for the light-dark() function because it allows the function to respect a person’s system preference, or whichever single light or dark value you have set on color-scheme. Another consideration is that light-dark() is newly available across browsers, with just over 80% coverage across all users at the time I’m writing this. So, you might consider including a fallback in your CSS for browsers that lack support for the function. What makes using color-scheme and light-dark() better than using @media queries? @media queries have been excellent tools, but using them to query prefers-color-scheme only ever follows the preference set within the person’s operating system. This is fine until you (rightfully) want to offer the visitor more choices, decoupled from whether they prefer the UI on their device to be dark or light. We’re already capable of doing that, of course. We’ve become used to a lot of jiggery-pokery with extra CSS classes, using duplicated styles, or employing custom properties to make it happen. The joy of using color-scheme is threefold: It gives you the basic monochrome dark mode for free! It can natively do the mode switching based on OS mode preference. You can use JavaScript to toggle between light and dark mode, and the colors declared in the light-dark() functions will follow it. Light, dark, and auto mode controls Essentially, all we are doing is setting one of three options for whether the color-scheme is light, dark, or updates auto-matically. I advise offering all three as discrete options, as it removes some complications for you! Any new visitor to the site will likely be in auto mode because accepting the visitor’s OS setting is the least jarring default state. You then give that person the choice to stay with that or swap it out for a different color scheme. This way, there’s no need to sniff out what mode someone prefers to, for example, display the correct icon on a toggle and make it perform the correct action. There is also no need to keep an event listener on prefers-color-scheme in case of changes — your color-scheme: light dark declaration in CSS handles that for you. Adjusting color-scheme in pure CSS Yes, this is totally possible! But the approach comes with a few caveats: You can’t use \u003cbutton\u003e — only radio inputs, or \u003coptions\u003e in a \u003cselect\u003e element. It only works on a per page basis, not per website, which means changes are lost on reload or refresh. The browser needs to support the :has() pseudo-selector. Most modern browsers do, but some folks using older devices might miss out on the experience. Using the :has() pseudo-selector This approach is almost alarmingly simple and is fantastic for a simple one-pager! Most of the heavy lifting is done with this: /* default, or 'auto' */ html { color-scheme: light dark; } html:has([value=\"light\"]:checked { color-scheme: light; } html:has([value=\"dark\"]:checked { color-scheme: dark; } The second and third rulesets above look for an attribute called value on any element that has “light” or “dark” assigned to it, then change the color-scheme to match only if that element is :checked. This approach is not very efficient if you have a huge page full of elements. In those cases, it’s better to be more specific. In the following two examples, the CSS selectors check for value only within an element containing id=\"mode-switcher\". html:has(#mode-switcher [value=\"light\"]:checked) { color-scheme: light } /* Did you know you don't need the \";\" for a one-liner? Now you do! */ Using a \u003cselect\u003e element: Using \u003cinput type=\"radio\"\u003e: We could theoretically use checkboxes for this, but since checkboxes are not supposed to be used for mutually exclusive options, I won’t provide an example here. What happens in the case of more than one option being checked? The last matching CSS declaration wins (which is dark in the examples above). Adjusting color-scheme in HTML with JavaScript I subscribe to Jeremy Keith’s maxim when it comes to reaching for JavaScript: JavaScript should only do what only JavaScript can do. This is exactly that kind of situation. If you want to allow visitors to change the color scheme using buttons, or you would like the option to be saved the next time the visitor comes to the site, then we do need at least some JavaScript. Rather than using the :has() pseudo-selector in CSS, we have a few alternative approaches for changing the color-scheme when we add JavaScript to the mix. Using \u003cmeta\u003e tags If you have set your color-scheme within a meta tag in the \u003chead\u003e of your HTML: \u003cmeta name=\"color-scheme\" content=\"light dark\"\u003e …you might start by making a useful constant like so: const colorScheme = document.querySelector('meta[name=\"color-scheme\"]'); And then you can manipulate that, assigning it light or dark as you see fit: colorScheme.setAttribute(\"content\", \"light\"); // to light mode colorScheme.setAttribute(\"content\", \"dark\"); // to dark mode colorScheme.setAttribute(\"content\", \"light dark\"); // to auto mode This is a very similar approach to using \u003cmeta\u003e tags but is different if you are setting the color-scheme property in CSS: html { color-scheme: light dark; } Instead of setting a colorScheme constant as we just did in the last example with the \u003cmeta\u003e tag, you might select the \u003chtml\u003e element instead: const html = document.querySelector('html'); Now your manipulations look like this: html.style.setProperty(\"color-scheme\", \"light\"); // to light mode html.style.setProperty(\"color-scheme\", \"dark\"); // to dark mode html.style.setProperty(\"color-scheme\", \"light dark\"); // to auto mode I like to turn those manipulations into functions so that I can reuse them: function switchAuto() { html.style.setProperty(\"color-scheme\", \"light dark\"); } function switchLight() { html.style.setProperty(\"color-scheme\", \"light\"); } function switchDark() { html.style.setProperty(\"color-scheme\", \"dark\"); } Alternatively, you might like to stay as DRY as possible and do something like this: function switchMode(mode) { html.style.setProperty(\"color-scheme\", mode === \"auto\" ? \"light dark\" : mode); } The following demo shows how this JavaScript-based approach can be used with buttons, radio buttons, and a \u003cselect\u003e element. Please note that not all of the controls are hooked up to update the UI — the demo would end up too complicated since there’s no world where all three types of controls would be used in the same UI! I opted to use onchange and onclick in the HTML elements mainly because I find them readable and neat. There’s nothing wrong with instead attaching a change event listener to your controls, especially if you need to trigger other actions when the options change. Using onclick on a button doesn’t only work for clicks, the button is still keyboard-focusable and can be triggered with Spacebar and Enter too, as usual. Remembering the selection for repeat visits The biggest caveat to everything we’ve covered so far is that this only works once. In other words, once the visitor has left the site, we’re doing nothing to remember their color scheme preference. It would be a better user experience to store that preference and respect it anytime the visitor returns. The Web Storage API is our go-to for this. And there are two available ways for us to store someone’s color scheme preference for future visits. localStorage Local storage saves values directly on the visitor’s device. This makes it a nice way to keep things off your server, as the stored data never expires, allowing us to call it anytime. That said, we’re prone to losing that data whenever the visitor clears cookies and cache and they’ll have to make a new selection that is freshly stored in localStorage. You pick a key name and give it a value with .setItem(): localStorage.setItem(\"mode\", \"dark\"); The key and value are saved by the browser, and can be called up again for future visits: const mode = localStorage.getItem(\"mode\"); You can then use the value stored in this key to apply the person’s preferred color scheme. sessionStorage Session storage is thrown away as soon as a visitor browses away to another site or closes the current window/tab. However, the data we capture in sessionStorage persists while the visitor navigates between pages or views on the same domain. It looks a lot like localStorage: sessionStorage.setItem(\"mode\", \"dark\"); const mode = sessionStorage.getItem(\"mode\"); Which storage method should I use? Personally, I started with sessionStorage because I wanted my site to be as simple as possible, and to avoid anything that would trigger the need for a GDPR-compliant cookie banner if we were holding onto the person’s preference after their session ends. If most of your traffic comes from new visitors, then I suggest using sessionStorage to prevent having to do extra work on the GDPR side of things. That said, if your traffic is mostly made up of people who return to the site again and again, then localStorage is likely a better approach. The convenience benefits your visitors, making it worth the GDPR work. The following example shows the localStorage approach. Open it up in a new window or tab, pick a theme other than what’s set in your operating system’s preferences, close the window or tab, then re-open the demo in a new window or tab. Does the demo respect the color scheme you selected? It should! Choose the “Auto” option to go back to normal. If you want to look more closely at what is going on, you can open up the developer tools in your browser (F12 for Windows, CTRL+ click and select “Inspect” for macOS). From there, go into the “Application” tab and locate https://cdpn.io in the list of items stored in localStorage. You should see the saved key (mode) and the value (dark or light). Then start clicking on the color scheme options again and watch the mode update in real-time. Accessibility Congratulations! If you have got this far, you are considering or already providing versions of your website that are more comfortable for different people to use. For example: People with strong floaters in their eyes may prefer to use dark mode. People with astigmatism may be able to focus more easily in light mode. So, providing both versions leaves fewer people straining their eyes to access the content. Contrast levels I want to include a small addendum to this provision of a light and dark mode. An easy temptation is to go full monochrome black-on-white or white-on-black. It’s striking and punchy! I get it. But that’s just it — striking and punchy can also trigger migraines for some people who do a lot better with lower contrasts. Providing high contrast is great for the people who need it. Some visual impairments do make it impossible to focus and get a sharp image, and a high contrast level can help people to better make out the word shapes through a blur. Minimum contrast levels are important and should be exceeded. Thankfully, alongside other media queries, we can also query prefers-contrast which accepts values for no-preference, more, less, or custom. In the following example (which uses :has() and color-mix()), a \u003cselect\u003e element is displayed to offer contrast settings. When “Low” is selected, a filter of contrast(75%) is placed across the page. When “High” is selected, CanvasText and Canvas are used unmixed for text color and background color: Adding a quick high and low contrast theme gives your visitors even more choice for their reading comfort. Look at that — now you have three contrast levels in both dark and light modes — six color schemes to choose from! ARIA-pressed ARIA stands for Accessible Rich Internet Applications and is designed for adding a bit of extra info where needed to screen readers and other assistive tech. The words “where needed” do heavy lifting here. It has been said that, like apostrophes, no ARIA is better than bad ARIA. So, best practice is to avoid putting it everywhere. For the most part (with only a few exceptions) native HTML elements are good to go out of the box, especially if you put useful text in your buttons! The little bit of ARIA I use in this demo is for adding the aria-pressed attribute to the buttons, as unlike a radio group or select element, it’s otherwise unclear to anyone which button is the “active” one, and ARIA helps nicely with this use case. Now a screen reader will announce both its accessible name and whether it is in a pressed or unpressed state along with a button. Following is an example code snippet with all the ARIA code bolded — yes, suddenly there’s lots more! You may find more elegant (or DRY-er) ways to do this, but showing it this way first makes it more clear to demonstrate what’s happening. Our buttons have ids, which we have used to target them with some more handy consts at the top. Each time we switch mode, we make the button’s aria-pressed value for the selected mode true, and the other two false: const html = document.querySelector(\"html\"); const mode = localStorage.getItem(\"mode\"); const lightSwitch = document.querySelector('#lightSwitch'); const darkSwitch = document.querySelector('#darkSwitch'); const autoSwitch = document.querySelector('#autoSwitch'); if (mode === \"light\") switchLight(); if (mode === \"dark\") switchDark(); function switchAuto() { html.style.setProperty(\"color-scheme\", \"light dark\"); localStorage.removeItem(\"mode\"); lightSwitch.setAttribute(\"aria-pressed\",\"false\"); darkSwitch.setAttribute(\"aria-pressed\",\"false\"); autoSwitch.setAttribute(\"aria-pressed\",\"true\"); } function switchLight() { html.style.setProperty(\"color-scheme\", \"light\"); localStorage.setItem(\"mode\", \"light\"); lightSwitch.setAttribute(\"aria-pressed\",\"true\"); darkSwitch.setAttribute(\"aria-pressed\",\"false\"); autoSwitch.setAttribute(\"aria-pressed\",\"false\"); } function switchDark() { html.style.setProperty(\"color-scheme\", \"dark\"); localStorage.setItem(\"mode\", \"dark\"); lightSwitch.setAttribute(\"aria-pressed\",\"false\"); darkSwitch.setAttribute(\"aria-pressed\",\"true\"); autoSwitch.setAttribute(\"aria-pressed\",\"false\"); } On load, the buttons have a default setting, which is when the “Auto” mode button is active. Should there be any other mode in the localStorage, we pick it up immediately and run either switchLight() or switchDark(), both of which contain the aria-pressed changes relevant to that mode. \u003cbutton id=\"autoSwitch\" aria-pressed=\"true\" type=\"button\" onclick=\"switchAuto()\"\u003eAuto\u003c/button\u003e \u003cbutton id=\"lightSwitch\" aria-pressed=\"false\" type=\"button\" onclick=\"switchLight()\"\u003eLight\u003c/button\u003e \u003cbutton id=\"darkSwitch\" aria-pressed=\"false\" type=\"button\" onclick=\"switchDark()\"\u003eDark\u003c/button\u003e The last benefit of aria-pressed is that we can also target it for styling purposes: button[aria-pressed=\"true\"] { background-color: transparent; border-width: 2px; } Finally, we have a nice little button switcher, with its state clearly shown and announced, that remembers your choice when you come back to it. Done! Outroduction Or whatever the opposite of an introduction is… …don’t let yourself get dragged into the old dark vs light mode argument. Both are good. Both are great! And both modes are now easy to create at once. At the start of your next project, work or hobby, do not give in to fear and pick a side — give both a try, and give in to choice.",
  "image": "https://css-tricks.com/wp-json/social-image-generator/v1/image/382039",
  "html": "\u003cdiv id=\"readability-page-1\" class=\"page\"\u003e\u003cp\u003e\n\tDigitalOcean provides cloud products for every stage of your journey. Get started with \u003ca href=\"https://try.digitalocean.com/css-tricks/?utm_medium=content_acq\u0026amp;utm_source=css-tricks\u0026amp;utm_campaign=global_brand_ad_en\u0026amp;utm_content=conversion_prearticle_everystage\"\u003e$200 in free credit!\u003c/a\u003e\n\u003c/p\u003e\u003cdiv\u003e\n\n          \n          \n\u003cp\u003eYou’d be forgiven for thinking coding up both a dark and a light mode at once is a lot of work. You have to remember \u003ccode\u003e@media\u003c/code\u003e queries based on \u003ccode\u003eprefers-color-scheme\u003c/code\u003e as well as extra complications that arise when letting visitors choose whether they want light or dark mode separately from the OS setting. And let’s not forget the color palette itself! Switching from a “light” mode to a “dark” mode may involve new variations to get the right amount of contrast for an accessible experience.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt is indeed a lot of work. But I’m here to tell you it’s now a lot simpler with modern CSS!\u003c/p\u003e\n\n\n\n\u003ch3 id=\"default-html-color-scheme-s-\"\u003eDefault HTML color scheme(s)\u003c/h3\u003e\n\n\n\u003cp\u003eWe all know the “naked” HTML theme even if we rarely see it as we’ve already applied a CSS reset or our favorite boilerplate CSS before we even open localhost. But here’s a news flash: \u003cstrong\u003eHTML doesn’t only have the standard black-on-white theme, there is also a native white-on-black version.\u003c/strong\u003e\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" fetchpriority=\"high\" decoding=\"async\" width=\"572\" height=\"549\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/z9EfegD9q.png.jpeg?resize=572%2C549\u0026amp;ssl=1\" alt=\"Screenshot of two bare-HTML mini-sites, one light, one dark\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/z9EfegD9q.png.jpeg?w=572\u0026amp;ssl=1 572w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/z9EfegD9q.png.jpeg?resize=300%2C288\u0026amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003eWe have two color schemes available to use right out of the box!\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIf you want to create a dark mode interface, this is a great base to work with and saves you from having to account for annoying details, like dark inputs, buttons, and other interactive elements.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" decoding=\"async\" width=\"1600\" height=\"840\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/2ff3aaa0-9b7e-46e7-abef-467e79317603.png.jpeg?resize=1600%2C840\u0026amp;ssl=1\" alt=\"Screenshot of two forms, one with elements and background on light mode, the other all in dark mode.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/2ff3aaa0-9b7e-46e7-abef-467e79317603.png.jpeg?w=1600\u0026amp;ssl=1 1600w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/2ff3aaa0-9b7e-46e7-abef-467e79317603.png.jpeg?resize=300%2C158\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/2ff3aaa0-9b7e-46e7-abef-467e79317603.png.jpeg?resize=1024%2C538\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/2ff3aaa0-9b7e-46e7-abef-467e79317603.png.jpeg?resize=768%2C403\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/2ff3aaa0-9b7e-46e7-abef-467e79317603.png.jpeg?resize=1536%2C806\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003cfigcaption\u003e\u003ca href=\"https://codepen.io/sarajw/pen/xxzyOMZ\" rel=\"noopener\"\u003eLive Demo on CodePen\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\n\u003ch3 id=\"switching-color-schemes-automatically-based-on-os-preference\"\u003eSwitching color schemes automatically based on OS preference\u003c/h3\u003e\n\n\n\u003cp\u003eWithout any \u003ca href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\"\u003e\u003ccode\u003e@media\u003c/code\u003e\u003c/a\u003e \u003ca href=\"https://css-tricks.com/a-complete-guide-to-css-media-queries/\"\u003equeries\u003c/a\u003e — or any other CSS at all — if all we did was declare \u003ccode\u003ecolor-scheme: light dark\u003c/code\u003e on the root element, the page will apply either the light or dark color scheme automatically \u003ca href=\"https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/#os-level\"\u003eby looking at the visitor’s operating system (OS) preferences\u003c/a\u003e. Most OSes have a built-in accessibility setting for your preferred color scheme — “light”, “dark”, or even “auto” — and browsers respect that setting.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ehtml {\n  color-scheme: light dark;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWe can even accomplish this without CSS directly in the HTML document in a \u003ccode\u003e\u0026lt;meta\u0026gt;\u003c/code\u003e tag:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;meta name=\u0026#34;color-scheme\u0026#34; content=\u0026#34;light dark\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWhether you go with CSS or the HTML route, it doesn’t matter — they both work the same way: telling the browser to make both light and dark schemes available and apply the one that matches the visitor’s preferences. We don’t even need to litter our styles with \u003ccode\u003eprefers-color-scheme\u003c/code\u003e instances simply to swap colors because the logic is built right in!\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can apply \u003ccode\u003elight\u003c/code\u003e or \u003ccode\u003edark\u003c/code\u003e values to the \u003ccode\u003ecolor-scheme\u003c/code\u003e property. At the same time, I’d say that setting \u003ccode\u003ecolor-scheme: light\u003c/code\u003e is redundant, as this is the default color scheme with or without declaring it.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou can, of course, control the \u003ccode\u003e\u0026lt;meta\u0026gt;\u003c/code\u003e tag or the CSS property with JavaScript.\u003c/p\u003e\n\n\n\n\u003cp\u003eThere’s also the possibility of applying the \u003ca href=\"https://css-tricks.com/almanac/properties/c/color-scheme/\"\u003e\u003ccode\u003ecolor-scheme\u003c/code\u003e\u003c/a\u003e property on specific elements instead of the entire page in one fell swoop. Then again, that means you are required to explicitly declare an element’s \u003ccode\u003ecolor\u003c/code\u003e and \u003ccode\u003ebackground-color\u003c/code\u003e properties; otherwise the element is transparent and inherits its text color from its parent element.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhat values should you give it? Try:\u003c/p\u003e\n\n\n\u003ch3 id=\"default-text-and-background-color-variables\"\u003eDefault text and background color variables\u003c/h3\u003e\n\n\n\u003cp\u003eThe “black” colors of these native themes aren’t always completely black but are often off-black, making the contrast a little easier on the eyes. It’s worth noting, too, that there’s variation in the blackness of “black” between browsers.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhat is very useful is that this default not-pure-black and maybe-not-pure-white \u003ccode\u003ebackground-color\u003c/code\u003e and text \u003ccode\u003ecolor\u003c/code\u003e are available as \u003ccode\u003e\u0026lt;system-color\u0026gt;\u003c/code\u003e variables. They also flip their color values automatically with \u003ccode\u003ecolor-scheme\u003c/code\u003e!\u003c/p\u003e\n\n\n\n\u003cp\u003eThey are: \u003cstrong\u003e\u003ccode\u003eCanvas\u003c/code\u003e\u003c/strong\u003e and \u003cstrong\u003e\u003ccode\u003eCanvasText\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThese two variables can be used anywhere in your CSS to call up the \u003cem\u003ecurrent\u003c/em\u003e default background color (\u003ccode\u003eCanvas\u003c/code\u003e) or text color (\u003ccode\u003eCanvasText\u003c/code\u003e) based on the \u003cem\u003ecurrent\u003c/em\u003e color scheme. If you’re familiar with the \u003ca href=\"https://css-tricks.com/currentcolor/\"\u003e\u003ccode\u003ecurrentColor\u003c/code\u003e\u003c/a\u003e value in CSS, it seems to function similarly. \u003ccode\u003eCanvasText\u003c/code\u003e, meanwhile, remains the default text \u003ccode\u003ecolor\u003c/code\u003e in that it can’t be changed the way \u003ccode\u003ecurrentColor\u003c/code\u003e changes when you assign something to \u003ccode\u003ecolor\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the following examples, the only change is the \u003ccode\u003ecolor-scheme\u003c/code\u003e property:\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1404\" height=\"734\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/38e10f94-b90a-4d8a-ad5a-96aa064bc224.jpeg?resize=1404%2C734\u0026amp;ssl=1\" alt=\"Screenshot of code and output area with color-scheme set to light, a large div of background color Canvas with text within set to color CanvasText, and a div within that with the Canvas and CanvasText switched.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/38e10f94-b90a-4d8a-ad5a-96aa064bc224.jpeg?w=1404\u0026amp;ssl=1 1404w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/38e10f94-b90a-4d8a-ad5a-96aa064bc224.jpeg?resize=300%2C157\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/38e10f94-b90a-4d8a-ad5a-96aa064bc224.jpeg?resize=1024%2C535\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/38e10f94-b90a-4d8a-ad5a-96aa064bc224.jpeg?resize=768%2C402\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1406\" height=\"732\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/af6bc763-9ff9-4346-91ab-cb46def64800.jpeg?resize=1406%2C732\u0026amp;ssl=1\" alt=\"Screenshot of code and output area with color-scheme set to dark, the rest of the code is all the same, and the light and dark areas have switched.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/af6bc763-9ff9-4346-91ab-cb46def64800.jpeg?w=1406\u0026amp;ssl=1 1406w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/af6bc763-9ff9-4346-91ab-cb46def64800.jpeg?resize=300%2C156\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/af6bc763-9ff9-4346-91ab-cb46def64800.jpeg?resize=1024%2C533\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/af6bc763-9ff9-4346-91ab-cb46def64800.jpeg?resize=768%2C400\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eNot bad! There are many, many more of these system variables. They are case-insensitive, often written in \u003ccode\u003ecamelCase\u003c/code\u003e or \u003ccode\u003ePascalCase\u003c/code\u003e for readability. \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/system-color\" rel=\"noopener\"\u003eMDN lists\u003c/a\u003e 19 \u003ccode\u003e\u0026lt;system-color\u0026gt;\u003c/code\u003e variables and I’m dropping them in below for reference.\u003c/p\u003e\n\n\n\n\u003cdetails\u003e\n  \u003csummary\u003e\n          Open to view 19 system color names and descriptions      \u003c/summary\u003e\n  \n\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eAccentColor\u003c/code\u003e:\u003c/strong\u003e The background color for accented user interface controls\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eAccentColorText\u003c/code\u003e:\u003c/strong\u003e The text color for accented user interface controls\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eActiveText\u003c/code\u003e:\u003c/strong\u003e The text color of active links\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eButtonBorder\u003c/code\u003e:\u003c/strong\u003e The base border color for controls\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eButtonFace\u003c/code\u003e:\u003c/strong\u003e The background color for controls\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eButtonText\u003c/code\u003e:\u003c/strong\u003e The text color for controls\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eCanvas\u003c/code\u003e:\u003c/strong\u003e The background color of an application’s content or documents\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eCanvasText\u003c/code\u003e:\u003c/strong\u003e The text color used in an application’s content or documents\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eField\u003c/code\u003e:\u003c/strong\u003e The background color for input fields\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eFieldText\u003c/code\u003e:\u003c/strong\u003e The text color inside form input fields\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eGrayText\u003c/code\u003e:\u003c/strong\u003e The text color for disabled items (e.g., a disabled control)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eHighlight\u003c/code\u003e:\u003c/strong\u003e The background color for selected items\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eHighlightText\u003c/code\u003e:\u003c/strong\u003e The text color for selected items\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eLinkText\u003c/code\u003e:\u003c/strong\u003e The text color used for non-active, non-visited links\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eMark\u003c/code\u003e:\u003c/strong\u003e The background color for text marked up in a \u003ccode\u003e\u0026lt;mark\u0026gt;\u003c/code\u003e element\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eMarkText\u003c/code\u003e:\u003c/strong\u003e The text color for text marked up in a \u003ccode\u003e\u0026lt;mark\u0026gt;\u003c/code\u003e element\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eSelectedItem\u003c/code\u003e:\u003c/strong\u003e The background color for selected items (e.g., a selected checkbox)\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eSelectedItemText\u003c/code\u003e:\u003c/strong\u003e The text color for selected items\u003c/li\u003e\n\n\n\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eVisitedText\u003c/code\u003e:\u003c/strong\u003e The text visited links\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003c/details\u003e\n\n\n\u003cp\u003eCool, right? There are many of them! There are, unfortunately, also discrepancies as far as how these color keywords are used and rendered between different OSes and browsers. Even though \u003ca href=\"https://css-tricks.com/evergreen-does-not-mean-immediately-available/\"\u003e“evergreen” browsers\u003c/a\u003e arguably support all of them, they don’t all actually match what they’re supposed to, and fail to flip with the CSS \u003ccode\u003ecolor-scheme\u003c/code\u003e property as they should.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003ca href=\"https://dutchcelt.nl/\" rel=\"noopener\"\u003eEgor Kloos\u003c/a\u003e (also known as dutchcelt) is keeping an eye on \u003ca href=\"https://codepen.io/dutchcelt/pen/ExBYzrx\" rel=\"noopener\"\u003ethe current status of system colors\u003c/a\u003e, including which ones exist and the browsers that support them, something he does as part of a classless CSS framework cleverly called \u003ca href=\"https://projects.dutchcelt.com/system.css/\" rel=\"noopener\"\u003esystem.css\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"declaring-colors-for-both-modes-together\"\u003eDeclaring colors for both modes together\u003c/h3\u003e\n\n\n\u003cp\u003eOK good, so now you have a page that auto-magically flips dark and light colors according to system preferences. Whether you choose to use these system colors or not is up to you. I just like to point out that “dark” doesn’t always have to mean pure “black” just as “light” doesn’t have to mean pure “white.” There are lots more colors to pair together!\u003c/p\u003e\n\n\n\n\u003cp\u003eBut what’s the best or simplest way to declare colors so they work in both light and dark mode?\u003c/p\u003e\n\n\n\n\u003cp\u003eIn my subjective reverse-best order:\u003c/p\u003e\n\n\n\u003ch4 id=\"third-place-declare-color-opacity\"\u003eThird place: Declare color opacity\u003c/h4\u003e\n\n\n\u003cp\u003eYou could keep all the same background colors in dark and light modes, but declare them with an opacity (i.e. \u003ccode\u003ergb(128 0 0 / 0.5)\u003c/code\u003e or \u003ccode\u003e#80000080\u003c/code\u003e). Then they’ll have the \u003ccode\u003eCanvas\u003c/code\u003e color shine through.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt’s unusable in this way for text colors, and you may end up with somewhat muted colors. But it is a nice easy way to get some theming done fast. I did this for the code blocks on \u003ca href=\"https://color-scheme-light-dark.netlify.app/\" rel=\"noopener\"\u003ethis old light and dark mode demo\u003c/a\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1920\" height=\"1080\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/lightdark_lrg.png?resize=1920%2C1080\u0026amp;ssl=1\" alt=\"Screenshot of a website split into its dark and light modes, showing code blocks with gentle background colors split across both\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/lightdark_lrg.png?w=1920\u0026amp;ssl=1 1920w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/lightdark_lrg.png?resize=300%2C169\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/lightdark_lrg.png?resize=1024%2C576\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/lightdark_lrg.png?resize=768%2C432\u0026amp;ssl=1 768w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/lightdark_lrg.png?resize=1536%2C864\u0026amp;ssl=1 1536w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\u003ch4 id=\"second-place-use-color-mix-\"\u003eSecond place: Use \u003ccode\u003ecolor-mix()\u003c/code\u003e\u003c/h4\u003e\n\n\n\u003cp\u003eLike this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ecolor-mix(in oklab, Canvas 75%, RebeccaPurple);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eSimilar (but also different) to using opacity to mute a color is mixing colors in CSS. We can even mix the system color variables! For example, one of the colors can be either \u003ccode\u003eCanvas\u003c/code\u003e or \u003ccode\u003eCanvasText\u003c/code\u003e so that the background color always mixes with \u003ccode\u003eCanvas\u003c/code\u003e and the text color always mixes with \u003ccode\u003eCanvasText\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eWe now have the CSS \u003ccode\u003ecolor-mix()\u003c/code\u003e function to help us with this.\u003c/strong\u003e The first argument in the function defines the color space where the color mixing happens. For example, we can tell the function that we are working in the OKLAB color space, which is a rectangular color space like sRGB making it ideal to mix with sRGB color values for predictable results. You can certainly mix colors from different color spaces — the OKLAB/sRGB combination happens to work for me in this instance.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe second and third arguments are the colors you want to mix, and in what proportion. Proportions are optional but expressed in percentages. Without declaring a proportion, the mix is an even 50%-50% split. If you add percentages for both colors and they don’t match up to 100%, it does a little math for you to prevent breakages.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003ecolor-mix()\u003c/code\u003e approach is useful if you’re happy to keep the same hues and color saturations regardless of whether the mode is light or dark.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"1076\" height=\"959\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/3fb788e0-fdd9-428a-97fe-009e49e68401.png.jpeg?resize=1076%2C959\u0026amp;ssl=1\" alt=\"A screenshot of whimsica11y.net, where the color-mix() method for making the theme is in use\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/3fb788e0-fdd9-428a-97fe-009e49e68401.png.jpeg?w=1076\u0026amp;ssl=1 1076w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/3fb788e0-fdd9-428a-97fe-009e49e68401.png.jpeg?resize=300%2C267\u0026amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/3fb788e0-fdd9-428a-97fe-009e49e68401.png.jpeg?resize=1024%2C913\u0026amp;ssl=1 1024w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/3fb788e0-fdd9-428a-97fe-009e49e68401.png.jpeg?resize=768%2C684\u0026amp;ssl=1 768w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\n\u003cp\u003eIn \u003ca href=\"https://codepen.io/sarajw/pen/eYwLaYp\" rel=\"noopener\"\u003ethis example\u003c/a\u003e, as you change the value of the hue slider, you’ll see color changes in the themed boxes, following the theme color but mixed with \u003ccode\u003eCanvas\u003c/code\u003e and \u003ccode\u003eCanvasText\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eYou may have noticed that I used OKLCH and HSL color spaces in that last example. You may also have noticed that the HSL-based theme color and the themed paragraph were a lot more “flashy” as you moved the hue slider.\u003c/p\u003e\n\n\n\n\u003cp\u003eI’ve declared colors using a polar color space, like HSL, for years, loving that you can easily take a hue and go up or down the saturation and lightness scales based on need. But, I concede that \u003ca href=\"https://css-tricks.com/the-gray-dead-zone-of-gradients/\"\u003eit’s problematic\u003c/a\u003e if you’re working with multiple hues while trying to achieve consistent perceived lightness and saturation across them all. It can be difficult to provide ample contrast across a spectrum of colors with HSL.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe OKLCH color space is also polar just like HSL, with the same benefits. You can pick your hue and use the chroma value (which is a bit like saturation in HSL) and the lightness scales accurately in the same way. Both OKLCH and OKLAB are designed to better match what our eyes perceive in terms of brightness and color compared to transitioning between colors in the sRGB space.\u003c/p\u003e\n\n\n\n\u003cp\u003eWhile these color spaces may not explicitly answer the age-old question, \u003cem\u003e\u003cq\u003eIs my blue the same as your blue?\u003c/q\u003e\u003c/em\u003e the colors are much more consistent and require less finicking when you decide to base your whole website’s palette on a different theme color. With these color spaces, the contrasts between the computed colors remain much the same.\u003c/p\u003e\n\n\n\u003ch4 id=\"first-place-winner-use-light-dark-\"\u003eFirst place (winner!): Use \u003ccode\u003elight-dark()\u003c/code\u003e\u003c/h4\u003e\n\n\n\u003cp\u003eLike this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003elight-dark(lavender, saddlebrown);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eWith the previous \u003ccode\u003ecolor-mix()\u003c/code\u003e example, if you choose a pale lavender in light mode, its dark mode counterpart is very dark lavender.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ccode\u003elight-dark()\u003c/code\u003e function, conversely, provides complete control. You might want that element to be pale lavender in light mode and a deep burnt sienna brown in dark mode. Why not? You can still use \u003ccode\u003ecolor-mix()\u003c/code\u003e within \u003ccode\u003elight-dark()\u003c/code\u003e if you like — declare the colors however you like, and gain much more fine-grained control over your colors.\u003c/p\u003e\n\n\n\n\u003cp\u003eFeel free to experiment in the following editable demo:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eUsing \u003ccode\u003ecolor-scheme: light dark;\u003c/code\u003e — or the corresponding meta tag in HTML on your page —is a prerequisite for the \u003ccode\u003elight-dark()\u003c/code\u003e function because it allows the function to respect a person’s system preference, or whichever single \u003ccode\u003elight\u003c/code\u003e or \u003ccode\u003edark\u003c/code\u003e value you have set on \u003ccode\u003ecolor-scheme\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eAnother consideration is that \u003ccode\u003elight-dark()\u003c/code\u003e is newly available across browsers, with \u003ca href=\"https://caniuse.com/mdn-css_types_color_light-dark\" rel=\"noopener\"\u003ejust over 80% coverage\u003c/a\u003e across all users at the time I’m writing this. So, you might consider including a fallback in your CSS for browsers that lack support for the function.\u003c/p\u003e\n\n\n\u003ch3 id=\"what-makes-using-color-scheme-and-light-dark-better-than-using-media-queries-\"\u003eWhat makes using \u003ccode\u003ecolor-scheme\u003c/code\u003e and \u003ccode\u003elight-dark()\u003c/code\u003e better than using \u003ccode\u003e@media\u003c/code\u003e queries?\u003c/h3\u003e\n\n\n\u003cp\u003e\u003ccode\u003e@media\u003c/code\u003e queries have been excellent tools, but using them to query \u003ccode\u003eprefers-color-scheme\u003c/code\u003e only ever follows the preference set within the person’s operating system. This is fine until you (rightfully) want to offer the visitor more choices, decoupled from whether they prefer the UI on their device to be dark or light.\u003c/p\u003e\n\n\n\n\u003cp\u003eWe’re already capable of doing that, of course. We’ve become used to a lot of jiggery-pokery with extra CSS classes, using duplicated styles, or employing custom properties to make it happen.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe joy of using \u003ccode\u003ecolor-scheme\u003c/code\u003e is threefold:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eIt gives you the basic monochrome dark mode for free!\u003c/li\u003e\n\n\n\n\u003cli\u003eIt can natively do the mode switching based on OS mode preference.\u003c/li\u003e\n\n\n\n\u003cli\u003eYou can use JavaScript to toggle between light and dark mode, and the colors declared in the \u003ccode\u003elight-dark()\u003c/code\u003e functions will follow it.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch3 id=\"light-dark-and-auto-mode-controls\"\u003eLight, dark, and auto mode controls\u003c/h3\u003e\n\n\n\u003cp\u003eEssentially, all we are doing is setting one of three options for whether the \u003ccode\u003ecolor-scheme\u003c/code\u003e is \u003ccode\u003elight\u003c/code\u003e, \u003ccode\u003edark\u003c/code\u003e, or updates \u003ccode\u003eauto\u003c/code\u003e-matically.\u003c/p\u003e\n\n\n\n\u003cp\u003e\u003cstrong\u003eI advise offering all three as discrete options\u003c/strong\u003e, as it removes some complications for you! Any new visitor to the site will likely be in \u003ccode\u003eauto\u003c/code\u003e mode because accepting the visitor’s OS setting is the least jarring default state. You then give that person the choice to stay with that or swap it out for a different color scheme. This way, there’s no need to sniff out what mode someone prefers to, for example, display the correct icon on a toggle and make it perform the correct action. There is also no need to keep an event listener on \u003ccode\u003eprefers-color-scheme\u003c/code\u003e in case of changes — your \u003ccode\u003ecolor-scheme: light dark\u003c/code\u003e declaration in CSS handles that for you.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"508\" height=\"644\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_42750CE28E370F68ACB2B902D3373A11514728C2A37A9213F3AD335AB3322714_1726950357512_image.png?resize=508%2C644\u0026amp;ssl=1\" alt=\"Three examples of mode switches, each with the three options of Auto, Light and Dark. Buttons, a fieldset with radio buttons, and a select element.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_42750CE28E370F68ACB2B902D3373A11514728C2A37A9213F3AD335AB3322714_1726950357512_image.png?w=508\u0026amp;ssl=1 508w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_42750CE28E370F68ACB2B902D3373A11514728C2A37A9213F3AD335AB3322714_1726950357512_image.png?resize=237%2C300\u0026amp;ssl=1 237w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3 id=\"adjusting-color-scheme-in-pure-css\"\u003eAdjusting \u003ccode\u003ecolor-scheme\u003c/code\u003e in pure CSS\u003c/h3\u003e\n\n\n\u003cp\u003eYes, this is totally possible! But the approach comes with a few caveats:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003eYou can’t use \u003ccode\u003e\u0026lt;button\u0026gt;\u003c/code\u003e — only radio inputs, or \u003ccode\u003e\u0026lt;options\u0026gt;\u003c/code\u003e in a \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element.\u003c/li\u003e\n\n\n\n\u003cli\u003eIt only works on a per page basis, not per website, which means changes are lost on reload or refresh.\u003c/li\u003e\n\n\n\n\u003cli\u003eThe browser needs to support the \u003ca href=\"https://css-tricks.com/almanac/pseudo-selectors/h/has/\"\u003e\u003ccode\u003e:has()\u003c/code\u003e\u003c/a\u003e pseudo-selector. \u003ca href=\"https://caniuse.com/css-has\" rel=\"noopener\"\u003eMost modern browsers do\u003c/a\u003e, but some folks using older devices might miss out on the experience.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\u003ch4 id=\"using-the-has-pseudo-selector\"\u003eUsing the :\u003ccode\u003ehas()\u003c/code\u003e pseudo-selector\u003c/h4\u003e\n\n\n\u003cp\u003eThis approach is almost alarmingly simple and is fantastic for a simple one-pager! Most of the heavy lifting is done with this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e/* default, or \u0026#39;auto\u0026#39; */\nhtml {\n  color-scheme: light dark;\n}\n\nhtml:has([value=\u0026#34;light\u0026#34;]:checked {\n  color-scheme: light;\n}\n\nhtml:has([value=\u0026#34;dark\u0026#34;]:checked {\n  color-scheme: dark;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe second and third rulesets above look for an attribute called \u003ccode\u003evalue\u003c/code\u003e on any element that has “light” or “dark” assigned to it, then change the \u003ccode\u003ecolor-scheme\u003c/code\u003e to match only if that element is \u003ccode\u003e:checked\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eThis approach is not very efficient if you have a huge page full of elements. In those cases, it’s better to be more specific. In the following two examples, the CSS selectors check for \u003ccode\u003evalue\u003c/code\u003e only within an element containing \u003ccode\u003eid=\u0026#34;mode-switcher\u0026#34;\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ehtml:has(#mode-switcher [value=\u0026#34;light\u0026#34;]:checked) { color-scheme: light }\n/* Did you know you don\u0026#39;t need the \u0026#34;;\u0026#34; for a one-liner? Now you do! */\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eUsing a \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eUsing \u003ccode\u003e\u0026lt;input type=\u0026#34;radio\u0026#34;\u0026gt;\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eWe could theoretically use checkboxes for this, but since checkboxes are not supposed to be used for mutually exclusive options, I won’t provide an example here. What happens in the case of more than one option being checked? The last matching CSS declaration wins (which is \u003ccode\u003edark\u003c/code\u003e in the examples above).\u003c/p\u003e\n\n\n\u003ch3 id=\"adjusting-color-scheme-in-html-with-javascript\"\u003eAdjusting \u003ccode\u003ecolor-scheme\u003c/code\u003e in HTML with JavaScript\u003c/h3\u003e\n\n\n\u003cp\u003eI subscribe to \u003ca href=\"https://adactio.com/journal/15559\" rel=\"noopener\"\u003eJeremy Keith’s maxim\u003c/a\u003e when it comes to reaching for JavaScript:\u003c/p\u003e\n\n\n\n\u003cblockquote\u003e\n\u003cp\u003eJavaScript should only do what only JavaScript can do.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\n\n\u003cp\u003eThis is exactly that kind of situation.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you want to allow visitors to change the color scheme using buttons, or you would like the option to be saved the next time the visitor comes to the site, then we do need at least some JavaScript. Rather than using the \u003ccode\u003e:has()\u003c/code\u003e pseudo-selector in CSS, we have a few alternative approaches for changing the \u003ccode\u003ecolor-scheme\u003c/code\u003e when we add JavaScript to the mix.\u003c/p\u003e\n\n\n\u003ch4 id=\"using-meta-tags\"\u003eUsing \u003ccode\u003e\u0026lt;meta\u0026gt;\u003c/code\u003e tags\u003c/h4\u003e\n\n\n\u003cp\u003eIf you have set your \u003ccode\u003ecolor-scheme\u003c/code\u003e within a meta tag in the \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e of your HTML:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;meta name=\u0026#34;color-scheme\u0026#34; content=\u0026#34;light dark\u0026#34;\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003e…you might start by making a useful constant like so:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst colorScheme = document.querySelector(\u0026#39;meta[name=\u0026#34;color-scheme\u0026#34;]\u0026#39;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAnd then you can manipulate that, assigning it \u003ccode\u003elight\u003c/code\u003e or \u003ccode\u003edark\u003c/code\u003e as you see fit:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ecolorScheme.setAttribute(\u0026#34;content\u0026#34;, \u0026#34;light\u0026#34;); // to light mode\ncolorScheme.setAttribute(\u0026#34;content\u0026#34;, \u0026#34;dark\u0026#34;); // to dark mode\ncolorScheme.setAttribute(\u0026#34;content\u0026#34;, \u0026#34;light dark\u0026#34;); // to auto mode\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThis is a very similar approach to using \u003ccode\u003e\u0026lt;meta\u0026gt;\u003c/code\u003e tags but is different if you are setting the \u003ccode\u003ecolor-scheme\u003c/code\u003e property in CSS:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ehtml { color-scheme: light dark; }\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eInstead of setting a \u003ccode\u003ecolorScheme\u003c/code\u003e constant as we just did in the last example with the \u003ccode\u003e\u0026lt;meta\u0026gt;\u003c/code\u003e tag, you might select the \u003ccode\u003e\u0026lt;html\u0026gt;\u003c/code\u003e element instead:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst html = document.querySelector(\u0026#39;html\u0026#39;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eNow your manipulations look like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ehtml.style.setProperty(\u0026#34;color-scheme\u0026#34;, \u0026#34;light\u0026#34;); // to light mode\nhtml.style.setProperty(\u0026#34;color-scheme\u0026#34;, \u0026#34;dark\u0026#34;); // to dark mode\nhtml.style.setProperty(\u0026#34;color-scheme\u0026#34;, \u0026#34;light dark\u0026#34;); // to auto mode\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eI like to turn those manipulations into functions so that I can reuse them:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction switchAuto() {\n  html.style.setProperty(\u0026#34;color-scheme\u0026#34;, \u0026#34;light dark\u0026#34;);\n}\nfunction switchLight() {\n  html.style.setProperty(\u0026#34;color-scheme\u0026#34;, \u0026#34;light\u0026#34;);\n}\nfunction switchDark() {\n  html.style.setProperty(\u0026#34;color-scheme\u0026#34;, \u0026#34;dark\u0026#34;);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eAlternatively, you might like to stay as \u003ca href=\"https://css-tricks.com/a-dry-approach-to-color-themes-in-css/\"\u003eDRY\u003c/a\u003e as possible and do something like this:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003efunction switchMode(mode) {\n  html.style.setProperty(\u0026#34;color-scheme\u0026#34;, mode === \u0026#34;auto\u0026#34; ? \u0026#34;light dark\u0026#34; : mode);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe following demo shows how this JavaScript-based approach can be used with buttons, radio buttons, and a \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element. Please note that not all of the controls are hooked up to update the UI — the demo would end up too complicated since there’s no world where all three types of controls would be used in the same UI!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eI opted to use \u003ccode\u003eonchange\u003c/code\u003e and \u003ccode\u003eonclick\u003c/code\u003e in the HTML elements mainly because I find them readable and neat. There’s nothing wrong with instead attaching a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event\" rel=\"noopener\"\u003echange event listener\u003c/a\u003e to your controls, especially if you need to trigger other actions when the options change. Using \u003ccode\u003eonclick\u003c/code\u003e on a button doesn’t only work for clicks, the button is still keyboard-focusable and can be triggered with \u003ckbd\u003eSpacebar\u003c/kbd\u003e and \u003ckbd\u003eEnter\u003c/kbd\u003e too, as usual.\u003c/p\u003e\n\n\n\u003ch3 id=\"remembering-the-selection-for-repeat-visits\"\u003eRemembering the selection for repeat visits\u003c/h3\u003e\n\n\n\u003cp\u003eThe biggest caveat to everything we’ve covered so far is that this only works once. In other words, once the visitor has left the site, we’re doing nothing to remember their color scheme preference. It would be a better user experience to store that preference and respect it anytime the visitor returns.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\" rel=\"noopener\"\u003eWeb Storage API\u003c/a\u003e is our go-to for this. And there are two available ways for us to store someone’s color scheme preference for future visits.\u003c/p\u003e\n\n\n\u003ch4 id=\"-localstorage-\"\u003e\u003ccode\u003elocalStorage\u003c/code\u003e\u003c/h4\u003e\n\n\n\u003cp\u003eLocal storage saves values directly on the visitor’s device. This makes it a nice way to keep things off your server, as the stored data never expires, allowing us to call it anytime. That said, we’re prone to losing that data whenever the visitor clears cookies and cache and they’ll have to make a new selection that is freshly stored in \u003ccode\u003elocalStorage\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eYou pick a key name and give it a value with \u003ccode\u003e.setItem()\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003elocalStorage.setItem(\u0026#34;mode\u0026#34;, \u0026#34;dark\u0026#34;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe key and value are saved by the browser, and can be called up again for future visits:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003econst mode = localStorage.getItem(\u0026#34;mode\u0026#34;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eYou can then use the value stored in this key to apply the person’s preferred color scheme.\u003c/p\u003e\n\n\n\u003ch4 id=\"-sessionstorage-\"\u003e\u003ccode\u003esessionStorage\u003c/code\u003e\u003c/h4\u003e\n\n\n\u003cp\u003eSession storage is thrown away as soon as a visitor browses away to another site or closes the current window/tab. However, the data we capture in \u003ccode\u003esessionStorage\u003c/code\u003e persists while the visitor navigates between pages or views on the same domain.\u003c/p\u003e\n\n\n\n\u003cp\u003eIt looks a lot like \u003ccode\u003elocalStorage\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003esessionStorage.setItem(\u0026#34;mode\u0026#34;, \u0026#34;dark\u0026#34;);\nconst mode = sessionStorage.getItem(\u0026#34;mode\u0026#34;);\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003ch4 id=\"which-storage-method-should-i-use-\"\u003eWhich storage method should I use?\u003c/h4\u003e\n\n\n\u003cp\u003ePersonally, I started with \u003ccode\u003esessionStorage\u003c/code\u003e because I wanted my site to be as simple as possible, and to avoid anything that would trigger the need for a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\" rel=\"noopener\"\u003eGDPR-compliant\u003c/a\u003e cookie banner if we were holding onto the person’s preference after their session ends. If most of your traffic comes from new visitors, then I suggest using \u003ccode\u003esessionStorage\u003c/code\u003e to prevent having to do extra work on the GDPR side of things.\u003c/p\u003e\n\n\n\n\u003cp\u003eThat said, if your traffic is mostly made up of people who return to the site again and again, then \u003ccode\u003elocalStorage\u003c/code\u003e is likely a better approach. The convenience benefits your visitors, making it worth the GDPR work.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe following example shows the \u003ccode\u003elocalStorage\u003c/code\u003e approach. Open it up in a new window or tab, pick a theme other than what’s set in your operating system’s preferences, close the window or tab, then re-open the demo in a new window or tab. Does the demo respect the color scheme you selected? It should!\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eChoose the “Auto” option to go back to normal.\u003c/p\u003e\n\n\n\n\u003cp\u003eIf you want to look more closely at what is going on, you can open up the developer tools in your browser (\u003ccode\u003eF12\u003c/code\u003e for Windows, \u003ccode\u003eCTRL\u003c/code\u003e+ click and select “Inspect” for macOS). From there, go into the “Application” tab and locate \u003ccode\u003ehttps://cdpn.io\u003c/code\u003e in the list of items stored in \u003ccode\u003elocalStorage\u003c/code\u003e. You should see the saved key (\u003ccode\u003emode\u003c/code\u003e) and the value (\u003ccode\u003edark\u003c/code\u003e or \u003ccode\u003elight\u003c/code\u003e). Then start clicking on the color scheme options again and watch the \u003ccode\u003emode\u003c/code\u003e update in real-time.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"522\" height=\"372\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_42750CE28E370F68ACB2B902D3373A11514728C2A37A9213F3AD335AB3322714_1728579222222_image.png?resize=522%2C372\u0026amp;ssl=1\" alt=\"Screenshot of the top of Edge devtools, with Application tab open. The key “mode” and value “dark” saved in cdpn.io’s local storage is shown.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_42750CE28E370F68ACB2B902D3373A11514728C2A37A9213F3AD335AB3322714_1728579222222_image.png?w=522\u0026amp;ssl=1 522w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/s_42750CE28E370F68ACB2B902D3373A11514728C2A37A9213F3AD335AB3322714_1728579222222_image.png?resize=300%2C214\u0026amp;ssl=1 300w\" sizes=\"(min-width: 735px) 864px, 96vw\"/\u003e\u003c/figure\u003e\n\n\n\u003ch3 id=\"accessibility\"\u003eAccessibility\u003c/h3\u003e\n\n\n\u003cp\u003eCongratulations! If you have got this far, you are considering or already providing versions of your website that are more comfortable for different people to use.\u003c/p\u003e\n\n\n\n\u003cp\u003eFor example:\u003c/p\u003e\n\n\n\n\u003cul\u003e\n\u003cli\u003ePeople with strong floaters in their eyes may prefer to use dark mode.\u003c/li\u003e\n\n\n\n\u003cli\u003ePeople with astigmatism may be able to focus more easily in light mode.\u003c/li\u003e\n\u003c/ul\u003e\n\n\n\n\u003cp\u003eSo, providing both versions leaves fewer people straining their eyes to access the content.\u003c/p\u003e\n\n\n\u003ch4 id=\"contrast-levels\"\u003eContrast levels\u003c/h4\u003e\n\n\n\u003cp\u003eI want to include a small addendum to this provision of a light and dark mode. An easy temptation is to go full monochrome black-on-white or white-on-black. It’s striking and punchy! I get it. But that’s just it — striking and punchy can also trigger migraines for some people who do a lot better with lower contrasts.\u003c/p\u003e\n\n\n\n\u003cp\u003eProviding high contrast is great for the people who need it. Some visual impairments do make it impossible to focus and get a sharp image, and a high contrast level can help people to better make out the word shapes through a blur. \u003ca href=\"https://www.w3.org/WAI/WCAG21/Understanding/contrast-minimum.html\" rel=\"noopener\"\u003eMinimum contrast levels are important\u003c/a\u003e and should be exceeded.\u003c/p\u003e\n\n\n\n\u003cp\u003eThankfully, alongside other media queries, we can also query \u003ccode\u003eprefers-contrast\u003c/code\u003e which accepts values for \u003ccode\u003eno-preference\u003c/code\u003e, \u003ccode\u003emore\u003c/code\u003e, \u003ccode\u003eless\u003c/code\u003e, or \u003ccode\u003ecustom\u003c/code\u003e.\u003c/p\u003e\n\n\n\n\u003cp\u003eIn the following example (which uses \u003ccode\u003e:has()\u003c/code\u003e and \u003ccode\u003ecolor-mix()\u003c/code\u003e), a \u003ccode\u003e\u0026lt;select\u0026gt;\u003c/code\u003e element is displayed to offer contrast settings. When “Low” is selected, a filter of \u003ccode\u003econtrast(75%)\u003c/code\u003e is placed across the page. When “High” is selected, \u003ccode\u003eCanvasText\u003c/code\u003e and \u003ccode\u003eCanvas\u003c/code\u003e are used unmixed for text color and background color:\u003c/p\u003e\n\n\n\n\n\n\n\n\u003cp\u003eAdding a quick high and low contrast theme gives your visitors even more choice for their reading comfort. Look at that — now you have three contrast levels in both dark and light modes — six color schemes to choose from!\u003c/p\u003e\n\n\n\u003ch4 id=\"aria-pressed\"\u003eARIA-pressed\u003c/h4\u003e\n\n\n\u003cp\u003eARIA stands for Accessible Rich Internet Applications and is designed for adding a bit of extra info \u003cstrong\u003ewhere needed\u003c/strong\u003e to screen readers and other assistive tech.\u003c/p\u003e\n\n\n\n\u003cp\u003eThe words “where needed” do heavy lifting here. It has been said that, like apostrophes, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\" rel=\"noopener\"\u003eno ARIA is better than bad ARIA\u003c/a\u003e. So, best practice is to avoid putting it everywhere. For the most part (with only a few exceptions) native HTML elements are good to go out of the box, especially if you put useful text in your buttons!\u003c/p\u003e\n\n\n\n\u003cp\u003eThe little bit of ARIA I use in this demo is for adding the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-pressed\" rel=\"noopener\"\u003e\u003ccode\u003earia-pressed\u003c/code\u003e\u003c/a\u003e attribute to the buttons, as unlike a radio group or select element, it’s otherwise unclear to anyone which button is the “active” one, and ARIA helps nicely with this use case. Now a screen reader will announce both its accessible name and whether it is in a pressed or unpressed state along with a button.\u003c/p\u003e\n\n\n\n\u003cp\u003eFollowing is an example code snippet with all the ARIA code bolded — yes, suddenly there’s lots more! You may find more elegant (or DRY-er) ways to do this, but showing it this way first makes it more clear to demonstrate what’s happening.\u003c/p\u003e\n\n\n\n\u003cp\u003eOur buttons have \u003ccode\u003eid\u003c/code\u003es, which we have used to target them with some more handy \u003ccode\u003econst\u003c/code\u003es at the top. Each time we switch \u003ccode\u003emode\u003c/code\u003e, we make the button’s \u003ccode\u003earia-pressed\u003c/code\u003e value for the selected mode \u003ccode\u003etrue\u003c/code\u003e, and the other two \u003ccode\u003efalse\u003c/code\u003e:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"JavaScript\" data-line=\"3,4,5,13,14,15,21,22,23,29,30,31\"\u003e\u003ccode markup=\"tt\"\u003econst html = document.querySelector(\u0026#34;html\u0026#34;);\nconst mode = localStorage.getItem(\u0026#34;mode\u0026#34;);\nconst lightSwitch = document.querySelector(\u0026#39;#lightSwitch\u0026#39;);\nconst darkSwitch = document.querySelector(\u0026#39;#darkSwitch\u0026#39;);\nconst autoSwitch = document.querySelector(\u0026#39;#autoSwitch\u0026#39;);\n\nif (mode === \u0026#34;light\u0026#34;) switchLight();\nif (mode === \u0026#34;dark\u0026#34;) switchDark();\n\nfunction switchAuto() {\n  html.style.setProperty(\u0026#34;color-scheme\u0026#34;, \u0026#34;light dark\u0026#34;);\n  localStorage.removeItem(\u0026#34;mode\u0026#34;);\n  lightSwitch.setAttribute(\u0026#34;aria-pressed\u0026#34;,\u0026#34;false\u0026#34;);\n  darkSwitch.setAttribute(\u0026#34;aria-pressed\u0026#34;,\u0026#34;false\u0026#34;);\n  autoSwitch.setAttribute(\u0026#34;aria-pressed\u0026#34;,\u0026#34;true\u0026#34;);\n}\n\nfunction switchLight() {\n  html.style.setProperty(\u0026#34;color-scheme\u0026#34;, \u0026#34;light\u0026#34;);\n  localStorage.setItem(\u0026#34;mode\u0026#34;, \u0026#34;light\u0026#34;);\n  lightSwitch.setAttribute(\u0026#34;aria-pressed\u0026#34;,\u0026#34;true\u0026#34;);\n  darkSwitch.setAttribute(\u0026#34;aria-pressed\u0026#34;,\u0026#34;false\u0026#34;);\n  autoSwitch.setAttribute(\u0026#34;aria-pressed\u0026#34;,\u0026#34;false\u0026#34;);\n}\n\nfunction switchDark() {\n  html.style.setProperty(\u0026#34;color-scheme\u0026#34;, \u0026#34;dark\u0026#34;);\n  localStorage.setItem(\u0026#34;mode\u0026#34;, \u0026#34;dark\u0026#34;);\n  lightSwitch.setAttribute(\u0026#34;aria-pressed\u0026#34;,\u0026#34;false\u0026#34;);\n  darkSwitch.setAttribute(\u0026#34;aria-pressed\u0026#34;,\u0026#34;true\u0026#34;);\n  autoSwitch.setAttribute(\u0026#34;aria-pressed\u0026#34;,\u0026#34;false\u0026#34;);\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eOn load, the buttons have a default setting, which is when the “Auto” mode button is active. Should there be any other mode in the \u003ccode\u003elocalStorage\u003c/code\u003e, we pick it up immediately and run either \u003ccode\u003eswitchLight()\u003c/code\u003e or \u003ccode\u003eswitchDark()\u003c/code\u003e, both of which contain the \u003ccode\u003earia-pressed\u003c/code\u003e changes relevant to that mode.\u003c/p\u003e\n\n\n\n\u003cpre rel=\"HTML\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003e\u0026lt;button id=\u0026#34;autoSwitch\u0026#34; aria-pressed=\u0026#34;true\u0026#34; type=\u0026#34;button\u0026#34; onclick=\u0026#34;switchAuto()\u0026#34;\u0026gt;Auto\u0026lt;/button\u0026gt;\n\u0026lt;button id=\u0026#34;lightSwitch\u0026#34; aria-pressed=\u0026#34;false\u0026#34; type=\u0026#34;button\u0026#34; onclick=\u0026#34;switchLight()\u0026#34;\u0026gt;Light\u0026lt;/button\u0026gt;\n\u0026lt;button id=\u0026#34;darkSwitch\u0026#34; aria-pressed=\u0026#34;false\u0026#34; type=\u0026#34;button\u0026#34; onclick=\u0026#34;switchDark()\u0026#34;\u0026gt;Dark\u0026lt;/button\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eThe last benefit of \u003ccode\u003earia-pressed\u003c/code\u003e is that we can also target it for styling purposes:\u003c/p\u003e\n\n\n\n\u003cpre rel=\"CSS\" data-line=\"\"\u003e\u003ccode markup=\"tt\"\u003ebutton[aria-pressed=\u0026#34;true\u0026#34;] {\n  background-color: transparent;\n  border-width: 2px;\n}\u003c/code\u003e\u003c/pre\u003e\n\n\n\n\u003cp\u003eFinally, we have a nice little button switcher, with its state clearly shown and announced, that remembers your choice when you come back to it. Done!\u003c/p\u003e\n\n\n\n\n\n\n\u003ch3 id=\"outroduction\"\u003eOutroduction\u003c/h3\u003e\n\n\n\u003cp\u003eOr whatever the opposite of an introduction is…\u003c/p\u003e\n\n\n\n\u003cp\u003e…don’t let yourself get dragged into the old dark vs light mode argument. Both are good. Both are great! And both modes are now easy to create at once. At the start of your next project, work or hobby, do not give in to fear and pick a side — give both a try, and give in to \u003cstrong\u003echoice\u003c/strong\u003e.\u003c/p\u003e\n\n\n\n\u003cfigure\u003e\u003cimg data-recalc-dims=\"1\" loading=\"lazy\" decoding=\"async\" width=\"500\" height=\"216\" src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2024/10/dark-side.gif?resize=500%2C216\u0026amp;ssl=1\" alt=\"Darth Vader clenching his fist, saying “If you only knew the power of the Dark Side.”\"/\u003e\u003c/figure\u003e\n\n          \n        \u003c/div\u003e\u003c/div\u003e",
  "readingTime": "28 min read",
  "publishedTime": "2024-10-25T08:08:20-06:00",
  "modifiedTime": "2024-10-25T08:08:22-06:00"
}
